<!-- Debian System Administration Manual - Time -->

    <chapt id="sysadmin-time">
      <heading>Time</heading>
      <p><email>Tapio.Lehtonen@IKI.FI</email></p>
<p>
Computers have a <strong>clock</strong> to keep time. Usually there is
a hardware clock with battery backup to keep time when the computer is
off. The operating system (for example Linux) runs its own clock, and
from this clock comes the time shown by commands such as
<prgn>date</prgn> in Linux and <prgn>time</prgn> in DOS. </p>

<p>The hardware clock is usually accurate enough, provided that the
battery has not run out. If the time shown by the computer when you
turn it on is wrong by several months or years, it is worth checking
if the battery is still usable. </p>

<p>The "software" clock in the operating system usually has drift, either systematic or
random. This drift means the clock runs too fast or too slow. </p>

<p>To see the time on Debian GNU/Linux, use the command
<prgn>date</prgn>. For example
<example>
$ date
Fri Oct 23 04:45:51 EEST 1998
</example></p>

<p>The above command shows the day of the week, the month, the day of the
month, the time, the time
zone and the year.  The time zone also shows whether Daylight Saving Time is in
use (in the example, the base time zone is EET,and the extra S means
Saving). </p>

<p>In Debian GNU/Linux and other Unix, the command <prgn>time</prgn>
does not show time. It is used to time command excecutions. If you
have some command that takes a fair amount of time to execute, and you
do not feel like standing by with a stopwatch, you can see how long it
took by running the command as argument to <prgn>time</prgn>. This
example may clear things up:
<example>
$ time sleep 60

real    1m0.045s
user    0m0.000s
sys     0m0.000s
</example></p>


<p>If You have root privileges, you can also change the time with the
command <prgn>date</prgn> (see the man page <manref name="date"
section="1">). If you are connected to
the Internet or have other Unix computers on LAN, see <ref id="syncing-time"> for
easier ways to set time.</p>

<p>When setting the time  manually, the time string may be
confusing. The command <prgn>date --set</prgn> accepts the date and
time in many formats. You can read the sh-utils info document, or use
the example below to figure out one possible format. There date is
given in ISO 8601 standard format YYYY-MM-DD for
Year-Month-DayOfMonth, and time of day using 24 hour clock. Leading
zeros are significant. 
<example>
date --set 1998-11-02 
date --set 21:08:0
</example>
The above two commands set the date to 2nd November 1998, and time to
eight minutes past 9pm.  </p>

<p>To see the time in UTC, use command <prgn>date -u</prgn>. 

<p>If you are running X Window, you may have a clock display somewhere
on the screen. If not, you can obtain it by running the command
<prgn>xclock</prgn>, which is part of the <prgn>xbase</prgn> package.  The
bare <prgn>xclock</prgn> command gives you an analog clock (with big hand,
 little hand, and
an optional seconds hand).  You can get a digital clock (with <prgn>xclock
-digital</prgn>). See the man page <manref name="xclock" section="1">for
more information.</p>

      <sect>
	<heading>Setting time, time zones and Daylight Saving</heading>
        <p>
         When you installed the base system of Debian GNU/Linux, you set
 the <strong>Timezone</strong>. You can check how you have set the Timezone by looking
at the file <prgn>/etc/timezone</prgn>. 
<example>
$ cat /etc/timezone
Europe/Helsinki
$ 
</example>
</p>
<p>The time zone is needed because Unix computers keep time in
<strong>Universal Time</strong> (<strong>UTC</strong>), and <strong>local
 time</strong> is calculated from this. UTC is solar time on meridian 0.
 UTC was previously called Greenwich Mean Time (GMT) because meridian 0
 passes through the old Royal Observatory in Greenwich, which is part
of London, England. </p>

<p>UTC is constant, and is not subject to Daylight Saving Time or other
 changes.  This is what makes it useful for syncronising computers.  As
long as the base time is kept in UTC, computers all over the world can
be synchronised and yet maintain their local time information.</p>

<p>If you were to set your Debian GNU/Linux computer to use local time, 
without taking account of timezones, you would lose the benefit of automatic
DST changes. <strong>We do not recommend this!</strong>  However, it may be
necessary to compromise by setting your hardware clock to local time (see
<ref id="multiboot-with">). In this document,
 we assume that you have configured your computer to use UTC. <p>

<p>If the Timezone is correctly set up, and the timezone
configuration files are reasonably current, the local time shown by
the operating system will change to <strong>Daylight Saving Time</strong>
and back to normal time automatically on the correct dates. If the
timezone files you have are old, there may be problems because DST
start and end dates are not determined by a physical phenomenon, but
are chosen by national institutions. Sometimes these dates are changed, for
example, the European Union changed the end date from the last Sunday in
September to the last Sunday in October in 1995. </p>
<p>For this reason, you should make sure that your <prgn>timezones</prgn>
package is kept reasonably up to date.



<sect1><heading>Changing the timezone after installation</heading>
<p>If the timezone is not set or is wrong, the superuser can run
<prgn>tzconfig</prgn> to configure it after the operating system is
installed (see man page <manref name="tzconfig" section="8">). </p>

<p>If there are other users, it is a good idea to notify then that the
system Timezone has changed. </p>
</sect1>


 <sect1>
<heading>Setting the TZ environment variable. </heading>
<p>If you do not have root privileges or want to set for yourself a
different timezone than the one the system uses, you can set the environment
variable <prgn>TZ</prgn>. Use the command <prgn>tzselect</prgn> to
show what value to use for TZ. 
</p>

<p>Example on using TZ:
<example>
$ date
Sun Nov  1 19:49:38 EET 1998
$ export TZ=PST
$ date
Sun Nov  1 17:49:59 PST 1998
</example>
As you can see, for this user <prgn>date</prgn> shows a different
time. (but this seems wrong, since Pacific Standard Time should be
09:49???. What's happening???).
</sect1>
      </sect>



      <sect>
        <heading>Setting and showing hardware clock</heading>
        <p>
         The command for setting the hardware clock is <prgn>hwclock</prgn>.
 (This was not in Debian
before 2.0.  In earlier releases, the command was <prgn>clock</prgn>.)  </p>
     
<p>If you use the <prgn>date</prgn> command to change time, it is
worth setting also the hardware clock to the correct time. Otherwise,
the time is wrong after the next reboot, since the hardware clock
keeps the time when power is turned off. When the clock in the
operating system shows the correct time, set the hardware clock like
this:
<example>
dilbert# date
Sun Nov  1 18:56:50 EET 1998
dilbert# hwclock --systohc --utc
dilbert# 
</example>
</p>

<p>Remember to add the <prgn>--utc</prgn> -option if the hardware clock is set to UTC!</p>

<p>See man page <manref name="hwclock" section="8"> for more information.</p>
       </sect>




      <sect id="multiboot-with">
        <heading>Multiboot with operating systems not understanding timezone</heading>
        <p>
         If you have a multiboot configuration, where you have some
other operating system(s) on the same computer, and during boot choose
which one to start, you may get confused about the correct time. If
the other operating systems do not understand timezones, they think
UTC is the local time and show the wrong time (unless you live in
London, England or some other place in the same timezone). </p>

<p>DOS, OS/2 and Windows except NT do not use timezones. If you <em>need</em>
to have the correct local time in these operating systems, you have to
set the clock to local time. Debian Linux can live with this and it works,
 but if your main operating system(s) understand timezones, use them. </p>
      </sect>

      <sect id="syncing-time">
        <heading>Syncing time, rdate and NTP</heading>
        <p>
         If you have another Unix computer which you know keeps the
correct time, with root privileges you can set the time with the command
<prgn>rdate</prgn>. For example:
<example>
rdate <var>somehost.domain.com</var>
</example>
Even if you do not have an accurate time source, it is still a good idea to
set all your computers to the same time, so that you can compare <strong>time
stamps</strong> between hosts. To keep the clocks syncronized, You can
start rdate once daily from cron. </p>

<sect1><heading>Setting time at system boot</heading>
<p>If the hardware clock does not keep the correct time, it is
possible to set the correct time when the operating system boots. For
this, there must be some other host in the LAN where the time can be
received. Here is an example:
<enumlist>
<item>create the file <prgn>/etc/init.d/rdate</prgn>
<example>
$ cat rdate
#! /bin/sh
#
# rdate         Execute the rdate command.
#
# Version:      1998-11-01 tapio.lehtonen@iki.fi
#

PATH=/sbin:/bin:/usr/sbin:/usr/bin
HOST=dilbert

# Set operating system time from other host in LAN.
if [ -x /usr/sbin/rdate ]
then
        /usr/sbin/rdate $HOST
fi

</example>
<item><example>chmod a+rx /etc/init.d/rdate</example>

<item>Create a symbolic link to that file in directory
<prgn>/etc/rc2.d</prgn>
<example>
cd /etc/rc2.d
ln -s ../init.d/rdate S19rdate
</example>
<item>At next reboot, you should see the time being set.

</enumlist>

<p>Remember to set execute permission to
<prgn>/etc/init.d/rdate</prgn>. If You are wondering what the number
S19 above means, read chapter ???. The key is to run rdate after
netbase which starts networking, and before xntp3 or some other
process where time is needed starts. </p>

<sect1><heading>Setting time using NTP</heading>

<p>If you are connected to the Internet, you can install an NTP
client, for example <prgn>xntp3</prgn>. This uses the Network Time
Protocol RFC 1305 to synchronise clocks to a few tens of milliseconds
precision. If you <em>need</em> this kind of precision or better, see
also <ref id="radio-clocks">.</p>

<p>See the excellent documentation that comes with <prgn>xntp3</prgn>,
in the Debian package <prgn>xntp3-doc</prgn>. It is very thorough and
    thus long.  If you think reading documents is a waste of time, just
    ask your Internet Service Provider or system administrator for NTP
    server names, or look up the nearest one in "List of Public NTP
    Servers" in http://www.eecis.udel.edu/~mills/ntp/servers.html . If 
    you start using an NTP server, it is usually polite to notify the
    server's administrator of the fact. </p>
<p><em>Do not configure your system to query level 1 NTP servers!  If
you think you need to do this, you are almost certainly wrong!</em></p>

<p>Once you know an NTP server, edit the file
      <prgn>/etc/ntp.conf</prgn> to add at least one server
      line. Here is an example:
<example>
# /etc/ntp.conf, configuration for xntpd

logfile /var/log/xntpd
driftfile /var/lib/ntp/ntp.drift
statsdir /var/log/ntpstats/

statistics loopstats peerstats clockstats
filegen loopstats file loopstats type day enable
filegen peerstats file peerstats type day enable
filegen clockstats file clockstats type day enable

server ntp.somedomain.something
server ntp.something.else
</example></p>

<p>Note, that I changed the actual server name in the above example,
      to prevent all Debian GNU/Linux users from blindly using that one
      server. Everything else except the server lines was there after 
    <prgn>xntp3</prgn> installation. </p>

<p>If you do not have a permanent Internet connection, then running
NTP client is not a good solution. NTP client syncronizes relatively
often, and needs the Internet connection to be always on. If you have
a dial up Internet connection, you can run the command
<prgn>ntpdate</prgn> (also in xntp3 package) to syncronize each time you connect. 
</p>

<p>Another possibility is to set cron to run <prgn>ntpdate</prgn> once
daily, this gives good accuracy for most uses. The following is an
example script that can be started from cron and runs
<prgn>ntpdate</prgn>. This scripts assumes the
<prgn>/etc/ntp.conf</prgn> is correctly set up, since it gets the
server names from that file. 
<example>
dilbert# cat /etc/cron.nightly/ntpdate
#!/bin/sh
#
# Last modification: Sat Aug  8 05:27:07 EEST 1998
# ntpdate  cron nightly

NTPDATE=/usr/sbin/ntpdate
LOGFILE=/var/log/xntpd
NTPCONFFILE=/etc/ntp.conf
NTPSERVERS=
GREP=/usr/bin/grep
CUT=/usr/bin/cut

if [ -f $NTPCONFFILE ] ; then
  echo "===========================" >> $LOGFILE
  echo "<<< `date` " >> $LOGFILE
  for i in `grep ^server $NTPCONFFILE | $CUT --fields 2 --delimiter \ `
  do
        NTPSERVERS="$NTPSERVERS $i"
  done
  $NTPDATE $NTPSERVERS  >>  $LOGFILE
###echo $NTPDATE $NTPSERVERS $LOGFILE
  echo ">>> `date` " >> $LOGFILE
fi

exit 0
dilbert# 
</example>

</p>

<sect1><heading>Other methods</heading>
<p>Debian GNU/Linux has also the command <prgn>netdate</prgn>, see man
page <manref name="netdate" section="8L"> for more info. It uses the
protocol defined in RFC 868. </p>


      </sect>
 


     <sect>
        <heading>Setting up an NTP server</heading>
        <p>
         If you have several hosts that you want to synchronise, you
      should not let them all separately synchronise to an outside NTP
      server. This puts a load on the NTP server, and if it is a
      public and free service, the people there may start to dislike
      you! At least ask if it is OK to sync all of your machines
      there. 
        </p>

<p>A better way is to set up one of your hosts as an NTP server, sync
that to the outside NTP server and the rest of your hosts to your own
NTP server. The <prgn>xntp3</prgn> package provides the server
component as well, so you just need to configure it. This is not particularly
difficult either, but you should read the documentation and understand
the peer concept and stratum hierarchy. </p>

      </sect>
      <sect id="radio-clocks">
        <heading>Radio clocks</heading>
        <p>
        If you want better accuracy or cannot synchronise with an NTP server in 
      the public Internet, you can purchase a radio clock. These get
      the time from time servers that use a very accurate clock, and
      broadcast time signals using radio waves. 
        <p>

	<p>There are radio clocks that need a ground based transmitter 
	  near enough to get the signal. If you get one of these, make 
	  sure you can receive the signal on the location where you
	  plan to use it. The transmitters are ground based, so they
	  don't work accross the globe. </p>

	<p>Another kind of radio clock uses a Global Positioning
	  System GPS receiver. GPS satellites circle the globe in low
	  earth orbits, and there should always be at least four above 
	the horizon. They are mainly used for navigation, but the
	  principle they work on is based on sending time signals. For 
	time synchronisation it is enough to get the signal from one
	  satellite, but usually it is necessary to install the GPS
	  antenna outdoors to get good reception.</p>

      </sect>

      <sect>
        <heading>Timestamps</heading>
        <p>
         Timestamps in files are in UTC.  The command <prgn>ls
-l</prgn> shows time file timestamps in local time using the
Timezone in effect. Because timestamps are in UTC, timestamps can be compared between
separate computers. This can lead to problems if the clocks are not
syncronized. </p>

<p>Consider this situation: You log in host B, which NFS loads your
home directory from NFS server host A. You edit some file, save it and
start <prgn>make</prgn>. If the clocks in hosts A and B are not
syncronized, <prgn>make</prgn> may complain that the file
modification time is in the future, or not compile the file because
the object is newer. </p>

      </sect>

      <sect>
        <heading>Time in cron</heading>
        <p>
      The times in cron are local times. This means, that if you
configure cron to start some program at 7 in the morning, it is 7 in
the morning local time as determined by the system Timezone. 
        <p>

<p>This causes headaches, if the system Timezone is not the same you
have set for yourself using the TZ enviroment variable, or you have two
host in different Timezones that need to start someting at the same
time on both hosts. </p>
      </sect>

    
<!--
<p>OK Cron uses local time   </p>
??? pointers on radio clock hardware
<p> OK example of the confusing time strings</p>
<p>OK We should also mention netdate and ntpdate </p>

-->

 </chapt>
      
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document:"system-administrator.sgml chapt sect"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/catalog"
sgml-local-ecat-files:nil
End:
-->