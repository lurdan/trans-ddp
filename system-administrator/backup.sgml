<!-- Debian System Administrator's Manual - Backup and Restore -->

    <chapt id="sysadmin-backup">

      <heading>Backup and Restore</heading>

      <p>
	author = Tapio Lehtonen 
      </p>

      <p>
	topics = why backup, what to backup, how to backup, backup
	devices and media </p

      <sect>
<heading>Why backup?</heading>
<p>Backups are needed in case a file or a group of files is lost. The
      reasons for losing files include
<list>
<item>Hardware failure like disk breaking,
<item>accidentally deleting wrong file and
<item>computer being stolen.
</list>
</p>

<p>Backups help in all the above situations. In addition, it may be
good to have access to older versions of files, for example a
configuration file worked a week ago, but since then it has been
changed and nobody remembers how, its just not working anymore.
</p>

<p>There are other solutions, and they are good to have if you can
afford them. These include
<list>
<item>redundant disks (RAID 1 or 5), so that one disk can break
without loss of data,
<item>using an undelete system (or not making mistakes when deleting
files :-) and
<item>locking up computers.
</list>
These help, but if there is anything you do not want to lose on the
computer, <strong>make sure there are backups and they can be
restored.</strong>

<p>This chapter is more of a general nature than the others, which are
specific to the Debian GNU/Linux. There are so many different backup
devices and backup software, that it is difficult to go into details
without assuming for example a SCSI tape drive and GNU
<prgn>tar</prgn> used to write backups. Chapter <ref id="sect-floppy">
gives three detailed examples, use them to guide doing backups to
other kinds of media. 


      </sect>

      <sect>
<heading>What to backup?</heading> 

<p>If there is room on the backup media, and time limits permit
running backups long enough, it probably is wisest to back up
everything. You may skip <prgn>/tmp</prgn> or other places where it is
known there are only temporary files that nobody wants to
backup. </p>

<p>If space or time limits place restrictions, consider not backing up
the following:
<list>
<item>Files that come directly from a CD or other removable media. It
may even be faster to copy them again from CD than restoring from
backup media. 
<item>Files that can be regenerated easily. For example, object files
that can be made with <prgn>make</prgn>. Just make sure all the source
files and compilers are backed up. 
<item>If the Internet connection is fast, it may be easy enough to
download files again. Just keep a list of the files and where to
download them from. 
</list></p>

<p> </p>


      </sect>

      <sect>
<heading>Backup devices and media</heading>

<!-- <p>Meta: Floppy (tar gz /etc), zip-drive and LS-120
CD-R and CD-RW, floppy tape, SCSI tape, hardware compression</p> -->

<p>You need some media to store the backups. It is preferable to use
removable media, to store the backups away from the computer and to
get "unlimited" storage for backups. </p>

<p>If the backups are on-line, they can be wiped out by mistake. If
the backups are on the same disk as the original data, they do not
help at all if the disk fails and is not readable anymore. If the
backup media is cheap, it is possible to take a backup every day and
store them indefinitely. </p>

<p>The following subsections discuss different kinds of backup
media. As a hands-on example, a floppy is used to back up
directory trees in different ways. Use these examples as a guideline
when using other medias. </p>

<sect1 id="sect-floppy">
<heading>Floppy</heading

<p>Floppy disks are cheap, and on PC computers there usually is a
floppy disk drive. On the other hand, it is not very fast to write to
a floppy, and the capacity of 1.4MBytes is not very much. If the
backup does not fit on one media, taking backups becomes an arduous
task, what with having to stand by and change the media every now and
then. </p>

<p>However, if the data to be backed up fits in one floppy, they are a
reasonable alternative. Compressing the data usually means it uses
about 50% of the original size. Thus, you can expect to get almost
3MBytes to one 1.4M floppy disk with compression. </p>

<p>Examples use <prgn>tar</prgn>. Reasons?</p>

<p>There are different ways to use the floppy with <prgn>tar</prgn>:
<enumlist>
<item>Create a Linux filesystem on the floppy, mount, write like to
any Linux disk and unmount the floppy,
<item>write directly to the device <prgn>/dev/fd0</prgn> and
<item>use the floppy with DOS file system, and copy the tar file there
with <prgn>mcopy</prgn> (see info file mtools with command <prgn>info
mtools</prgn>).
</enumlist>

<p>These three methods correspond to three different classes of media:
<enumlist>
<item>Random access or direct access, mostly disks. The media is like any disk or
directory tree, it is possible to do <prgn>ls</prgn>,
<prgn>cp</prgn> and other commands accessing files. It is easy to
restore one file from the backup media by simply copying it back.
<item>Serial access, like a tape drive. Reading or writing the media
starts from the beginning and goes to the end. It is not possible to
start directly in the middle.
<item>Media that is a DOS file system. This is readable on all kinds
of operating system, which is useful if you need to read the backup on
some other kind of computer. 
</enumlist>

<sect2><heading>Backup example 1, suitable for disk media</heading>

<p>Here is an example to backup the <prgn>~/Work/Debian-doc</prgn> directory tree
to floppy. First check how large the directory tree is:
<example>
$ cd ~/Work
tale@dilbert ~/Work
$ du -sk Debian-doc
1005    Debian-doc
tale@dilbert ~/Work
$ 
</example>
This shows 1.005MBytes, so it should fit on one floppy. </p>

<p>This example uses the floppy as removable media with Linux filesystem. </p>

<p>Now a minix filesystem is created on the floppy. This is the
filesystem Linux uses for floppies and other small media. Note, that
all data on the media is lost when it is formatted. The first floppy
drive is device <prgn>/dev/fd0</prgn>.

<example>
dilbert# mkfs -t minix -c /dev/fd0 1440
480 inodes
1440 blocks
Firstdatazone=19 (19)
Zonesize=1024
Maxsize=268966912

160 ...320 ...480 ...640 ...800 ...960 ...1120 ...1296 ...dilbert#
</example>
</p>

<p>Now the floppy disk is mounted and backup is run and tested. Note,
that the mount point <prgn>/A</prgn> must already exist (see <manref
name="mount" section="8">. To allow an ordinary user <prgn>tale</prgn>
write access to the filesystem on this floppy, the owner and group
owner are changed.</p>

<p>
<example>
dilbert# mount -t minix /dev/fd0 /A
dilbert# chown tale.tale /A
dilbert# ls -ld /A
drwxr-xr-x   3 tale     tale         1024 Dec  3 21:21 /A
dilbert#
</example>
</p>

<p>It is useful the check the floppy is mounted and there is available
space, for example with command <prgn>df</prgn>. </p>

<p>
<example>
$ df -h
Filesystem            Size  Used  Avail  Capacity Mounted on
/dev/sda5              99M   22M    72M     23%   /
/dev/sda6             964M  565M   349M     62%   /usr
/dev/sda7             190M   33M   147M     18%   /var
/dev/sda8             2.7G  1.3G   1.2G     53%   /export
/dev/sdb2             3.8G  2.4G   1.3G     65%   /export2
dilbert:/export/home  2.7G  1.3G   1.2G     53%   /amd/dilbert/export/home
/dev/fd0              1.4M  1.0K   1.4M      0%   /A
tale@dilbert ~/Work
$
</example>
</p>

<p>Now <prgn>tar</prgn> is used to copy the whole directory tree to the
floppy. It is better to use <prgn>tar</prgn>, it preserves file
ownerships and permissions. If you try to use <prgn>cp -r</prgn> you
will notice the backup is not identical. 
<example>
$ cd Work 
tale@dilbert ~/Work
$ tar cf - ./Debian-doc | ( cd /A ; tar xpBf - ) 
tale@dilbert ~/Work
$ ls -l /A
total 1
drwxr-xr-x   6 tale     232           320 Dec  3 20:41 Debian-doc
tale@dilbert ~/Work
$
</example>
</p>

<p>You can also do <prgn>ls -lR /A</prgn> to see that all the files
are there. 

<p>Here we restore the backup to <prgn>/tmp/Debian-doc</prgn>. 
<example>
$ cd /A  
tale@dilbert /A
$ ls -l
total 1
drwxr-xr-x   6 tale     232           320 Dec  3 20:41 Debian-doc
tale@dilbert /A
$ tar cf - ./Debian-doc | ( cd /tmp ; tar xpBf - )
tale@dilbert /tmp
$ ls -l
total 7512
drwxr-xr-x   6 tale     tale         1024 Dec  3 20:41 Debian-doc
-rw-------   1 root     root       599648 Dec  3 22:25 foo.foo
drwx------   2 tale     tale         1024 Dec  2 20:58 orbit-tale
-rw-rw----   1 tale     tale      4054572 Nov 24 21:53 tale
tale@dilbert /tmp
$ du --summarize --kilobytes Debian-doc/
1005    Debian-doc
tale@dilbert /tmp
$
</example>

<p>It looks like the backup is on the floppy and we could even read it
back. It is worth checking your backup method works, and the backup
can indeed be restored. 

<p>The next command unmounts the
floppy. This is <strong>very important!</strong>. If you mount a
removable media, it <strong>must be unmounted</strong> before it is
removed from the drive. </p>

<p>
<example>
dilbert# umount /A
dilbert#
</example>
</p>

<p>The above method is usable with other kinds of removable disk
drives, for example high capacity floppies. </p>

</sect2>

<sect2><heading>Backup example 2, suitable for tape media</heading>


<p>As another example, we backup <prgn>/etc</prgn> directly to the
<prgn>/dev/fd0</prgn> device:
<example>
dilbert# cd /
dilbert# tar czf /dev/fd0 ./etc
dilbert# tar tzf /dev/fd0 | head
./etc/
./etc/modules
./etc/xemacs/
./etc/xemacs/site-start-19.d/
./etc/xemacs/site-start-19.d/50dpkg-dev.el
./etc/init.d/
./etc/init.d/network
./etc/init.d/modutils
./etc/init.d/kerneld
./etc/init.d/kdm
Broken pipe
dilbert#
</example>
</p>

<p>We could read the listing (option <prgn>t</prgn> for
<prgn>tar</prgn>) from the floppy, so we can assume the backup is
OK. Note, that if you plan to read this floppy back later,
<strong>make sure you remember how the floppy was written</strong>. If
you forget it was written with <prgn>tar</prgn> and with compression,
you spend a lot of time figuring it out. This same applies to all
media that you store for any longer period of time, and especially if
you send the media to someone else. </p>

<p>The above method is usable also with tape drives. Replace the
device name <prgn>/dev/fd0</prgn> with device name for the tape drive,
and you can use <prgn>tar</prgn> as Tape ARchiver. </p>

</sect2>

<sect2><heading>Backup example 3, suitable for disk media with DOS
file system</heading>
<p>If you have or want to use DOS formatted floppy disks, it is
possible to use them like in example 1, mount them with flag <prgn>-t
msdos</prgn> to inform the <prgn>mount</prgn> command. But in this
example, we us DOS floppies with the <prgn>mtools</prgn> -commands. 

<p>The backup is not written directly to floppy, it is first created
on <prgn>/tmp</prgn> directory and copied from there to floppy with
command <prgn>mcopy</prgn>. For more information, use <prgn>info
mtools</prgn>. </p>

<p><example>
$ pwd
/amd/dilbert/export/home/tale/Work
tale@dilbert /amd/dilbert/export/home/tale/Work
$ du -sk Debian-doc
2399    Debian-doc
tale@dilbert /amd/dilbert/export/home/tale/Work
$ tar czf /tmp/Debian-doc.tgz ./Debian-doc
tale@dilbert /amd/dilbert/export/home/tale/Work
$ ls -l /tmp/Debian-doc.tgz 
-rw-rw-r--   1 tale     tale       609296 Dec  5 04:56 /tmp/Debian-doc.tgz
tale@dilbert /amd/dilbert/export/home/tale/Work
$ mcopy /tmp/Debian-doc.tgz a:
tale@dilbert /amd/dilbert/export/home/tale/Work
$ mdir a:
 Volume in drive A is LINUX BOOT 
 Volume Serial Number is 2410-07EF
Directory for A:/

DEBIAN~1 TGZ    609296 12-05-1998   4:58  Debian-doc.tgz
        1 file              609 296 bytes
                            847 872 bytes free

tale@dilbert /amd/dilbert/export/home/tale/Work
$ 
</example></p>

<p>This method can be used when the backup needs to be read back on
some other computer, not necessarily running Linux. This is also
useful for sending files to some poor soul not running Linux. In this
case, it is better not to use <prgn>tar</prgn>, programs like <prgn>zip</prgn>,
<prgn>gzip</prgn> and <prgn>zoo</prgn> are available on most operating
systems. 
</p>

</sect2>
</sect1>

<sect1>
<heading>High Capacity Floppies</heading>

<p>High capacity floppies are 
<list>
<item><url id="http://www.iomega.com/product/zip" name="Iomega Zip-drive">, 
<item><url id="http://www.superdisk.com/" name="LS-120">, <url id="http://www.winstation.com/main.html"
name="LS-120">,
<item><url id="http://www.sony.com/HiFD" name="Sony HiFD">,
<!-- SyQuest filing for bankruptcy spelling?
<item><url id="http://www.syquest.com/" name="SyQuest EZFlyer"> and 
<item><url id="SyQuest" name="SyQuest SparQ">
-->
</list>
</p>

<p>All of these are about floppy disk size, store 100MBytes to
200MBytes 
<!-- (SparQ about 1.0GBytes) -->
 and are faster and more expensive
than floppy drives. They are connected to EIDE port, Parallel port,
SCSI or USB. LS-120 and Sony SuperFloppy can read and write ordinary
1.4MByte floppy disks.

<p>You can use these things like in the above examples where a floppy
disk was used, but you have to
install the devices and the device driver software before they can be
used. Then the device name depends on what kind of connection the
thing uses. </p>

<p>There is more info on using the above high capacity floppies on Linux in the
HOWTO documents. (reference to HOWTOs???)</p>



<p><strong>Somebody with experience from the above devices: please confirm my
guessing above or send info on how they can be used.</strong></p>

</sect1>

<sect1>
<heading>CD-R and CD-RW</heading>

<p>Meta: Capacity <= 640MBytes, speed 150 -- 600KBits/sek. Special software
needed to burn the CD. DVD-RAM</p>

<p>CD writers can be used as backup devices. Writable CD media is
either writable exactly once (CD-R), or erasable and rewritable
(CD-RW). CD-R disks can be read on ordinary CD drives, but CD-RW disks
need Multi-Read capability from the reader. This is good to know if
you plan to read the CD back on some other computer.</p>

<p>Assuming the CD writer is installed and configured correctly, and
you have the necessary software to write to the CD, taking backups is
best done with the first method in the floppy disk example above,
i.e. creating a Linux file system on the CD. Since the CD is a disk,
i.e. a random access device, using it this way is easy. Just mount it
and copy files or whole directory trees there.</p>

<p>Restoring is also straightforward, since the CD can be examined
with ordinary file system commands like <prgn>ls</prgn>, and it is
easy to copy a single file back. You can also compare the files in the
backup to files in hard disk with <prgn>diff</prgn> for example. </p>

<p>Problems with CD-R are their write once -nature. They need to be
written all in one go, and then closed. After closing, it is not
possible to modify the CD, so if there is something wrong there it has
to be thrown away. </p>

<p>CD-RW can be erased, but my understanding is the whole disk must be
erased. In addition, looks like formatting a CD-RW takes about one
hour. </p>


</sect1>

<sect1>
<heading>Tapes</heading>

<p>Meta: Popular backup media. Wide range of speeds, capacities and cost. </p>

<p>Tape drives are popular backup devices. The media is relatively
cheap per gigabyte, and tape capacities go up to several tens of
gigabytes. On the other hand, the tape drives may be expensive and
write speeds slower than disks.</p>

<p>Tape drives with SCSI connector should work with Linux. So called
floppy tape drives that connect to the floppy disk interface may work
if the ftape driver supports the particular model. </p>

<p>Writing to SCSI tape drives goes like in example 2 in floppy disk
chapter. </p>

<p>I'm not sure about floppy tapes, have to read the ftape docs. </p>

<p></p>

<p></p>

</sect1>

      </sect>


      <sect>
<heading>Backup methods and software</heading>
<p>Backup methods include simply copying files to another media, using
dd, tar or similar program to create an archive and using special backup
programs. 

<sect1><heading>Network backups</heading>
<p>Meta: Enterprise environment, Legato Networker, HP Omniback, etc. Linux clients. 

<p>In an enterprise environment there may be a backup server running
some network backup software. If there are Linux clients available for
that software, its possible to install the Linux client, configure the
client machine on the backup server and start taking backups over the
LAN.</p>

<p>This is a low cost solution. If the backup server is already there,
Linux clients usually are free to download. Legato Networker and HP
Omniback have Linux clients available, but no technical support is
available from the vendor. 


<taglist compact>
<tag>Legato
<item><url id="http://www.legato.com/exchange/documents/NetWorker/CG-SW.html" name="Legato Networker">

<tag>HP Omniback
<item><url id="http://www.hp.com/openview/products/omniback.html" name="HP Omniback">
</taglist>
</p>
</sect1>

<sect1><heading>Tar et al</heading>
<p>Meta: Tar, dump, dd, cpio</p>

<p>Now for some examples. </p>

<p>In Debian GNU/Linux the <prgn>tar</prgn>
program is GNU tar, which has several extra features. Among them is
support for compressing the tar file while it is created. On the
average, compression squeezes the file to about 50% of the
uncompressed size. Your mileage may vary: files that are already
compressed, like *.zip and *.gif files do not compress at all, and
some file compress especially well, C source code files can go to 25%
of the uncompressed size.</p>

<p>Taking a compressed tar file from /export/home partition goes like
this:
<example>
cd /export
tar czf /tmp/home.tgz ./home
</example>
</p>

<p>The <prgn>tar</prgn> file <prgn>/tmp/home.tgz</prgn> can be copied
to another disk, or to another computer. If you do not have any backup
device, but have two computers with free disk space, take a compressed
<prgn>tar</prgn> of the most important files and copy the tar to the
other computer. </p>

</sect1>


<sect1><heading>Backup software</heading>
<p>Meta: amanda, other backup software in Debian</p>

<p>I do not have time to study these now, contribution would be welcome.</p>

<p>
<list>
<item>afbackup
<item>amanda
<item>dds2tar
<item>floppybackup
<item>ftape-module
<item>jaztool
<item>kbackup
<item>mirrordir
<item>tob
</list>
</p>

</sect1>



      </sect>




      <sect>
<heading>Types of backup</heading>
<p>Meta: Full, incremental, differential, network, dump, level 0--9, </p>

<p>
There are different kinds of backups, the following lists some of them:
<taglist>
<tag>Full<item>Full backup means backing up everything.

<tag>Incremental<item>Incremental backup means backing up everything
that has changed since last full backup.

<tag>Differential<item>Differential seems to be another name for
incremental.

<tag>Network<item>Network backup usually means backing up a client to
a backup server, this means the client sends the files to the server
and the server writes them to backup medium.

<tag>Dump<item>Dump backups are not ordinary file by file backups. The
whole disk partition or file system is "dumped" to the backup medium
as is. This means it is also necessary to restore the whole partition
or file system at one go. The dump backup may be a disk image, which
means it must be restored to a similar disk with same disk geometry
and bad blocks in same places. Watch out for this. 

<tag>Level 0 -- 9<item>Level 0 to 9 backups are a finer grained
version of incremental backups. Level <var>N</var> backup means
backing up everything that has changed since a same or lower lever
backup. 

</taglist>

</p>

<p>Meta: Check the backup can be restored, with original file owners,
permissions and timestamps.</p>

<p>To be useful, you must be able to restore the backup. Very often
not only the contest of file are important, but their time stamps,
permissions and owners. Check that you can restore the backup so that
all these are preserved. 

      </sect>

    </chapt>
      
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document:"system-administrator.sgml chapt sect"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/catalog"
sgml-local-ecat-files:nil
End:
-->