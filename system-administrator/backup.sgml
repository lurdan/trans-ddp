<!-- Debian System Administrator's Manual - Backup and Restore -->

    <chapt id="sysadmin-backup">

      <heading>Backup and Restore</heading>

      <p>
	author = Tapio Lehtonen 
      </p>

      <p>
	topics = why backup, what to backup, how to backup, backup
	devices and media </p

      <sect>
<heading>Why backup?</heading>
<p>Backups are needed in case a file or a group of files is lost. The
      reasons for losing files include
<list>
<item>Hardware failure like disk breaking,
<item>computer being stolen and
<item>accidentally deleting wrong file.
</list>
</p>

<p>Backups help in all the above situations. In addition, it may be
good to have access to older versions of files, for example a
configuration file worked a week ago, but since then it has been
changed and nobody remembers how, its just not working anymore.
</p>

<p>There are other solutions, and they are good to have if you can
afford them. These include
<list>
<item>redundant disks (RAID 1 or 5), so that one disk can break
without loss of data,
<item>locking up computers,
<item>using an undelete system (or not making mistakes when deleting
files :-)
</list>
These help, but if there is anything you do not want to lose on the
computer, <strong>make sure there are backups and they can be
restored.</strong>

      </sect>

      <sect>
<heading>What to backup?</heading> 

<p>If there is room on the backup media, and time limits permit
running backups long enough, it probably is wisest to back up
everything. You may skip <prgn>/tmp</prgn> or other places where it is
known there are only temporary files that nobody wants to
backup. </p>

<p>If space or time limits place restrictions, consider not backing up
the following:
<list>
<item>Files that come directly from a CD or other removable media. It
may even be fastar to copy them again from CD than restoring from
backup media. 
<item>Files that can be regenerated easily. For example, object files
that can be made with <prgn>make</prgn>. Just make sure all the source
files and compilers are backed up. 
<item>If the Internet connection is fast, it may be easy enough to
download files again. Just keep a list of the files and where to
download them from. 
</list></p>

<p> </p>


      </sect>

      <sect>
<heading>Backup devices and media</heading>

<p>Meta: Floppy (tar gz /etc), zip-drive and LS-120
CD-R and CD-RW, floppy tape, SCSI tape, hardware compression</p>

<p>You need some media to store the backups. It is preferable to use
removable media, to store the backups away from the computer and to
get "unlimited" storage for backups. </p>

<p>If the backups are on-line, they can be wiped out by mistake. If
the backups are on the same disk as the original data, they do not
help at all if the disk fails and is not readable anymore. If the
backup media is cheap, it is possible to take a backup every day and
store them indefinitely. </p>

<sect1>
<heading>Floppy</heading

<p>Floppy disks are cheap, and on PC computers there usually is a
floppy disk drive. On the other hand, it is not very fast to write to
a floppy, and the capacity of 1.4MBytes is not very much. If the
backup does not fit on one media, taking backups becomes an arduous
task, what with having to stand by and change the media every now and
then. </p>

<p>However, if the data to be backed up fits in one floppy, they are a
reasonable alternative. Compressing the data usually means it uses
about 50% of the original size. Thus, you can expect to get almost
3MBytes to one 1.4M floppy disk with compression. </p>

<p>There are different ways to use the floppy with tar:
<list>
<item>write directly to the device <prgn>/dev/fd0</prgn>,
<item>use the floppy with DOS file system, and copy the tar file there
with <prgn>mcopy</prgn> (see info file mtools with command <prgn>info
mtools</prgn>) and 
<item>Create a Linux filesystem on the floppy, mount, write like to
any Linux disk and unmount the floppy.
</list>

<p>Here is an example to backup the <prgn>/etc</prgn> directory tree
to floppy. First check how large the directory tree is:
<example>
dilbert# du --summarize --kilobytes /etc
2515    /etc
dilbert# 
</example>
This shows 2.5MBytes, so it should fit on one floppy if the data is
compressed. </p>

<p>The first example below uses the floppy as removable media with Linux filesystem. </p>

<p>Now a floppy is formatted to EXT2 filesystem. This is the
filesystem Linux uses on hard disk partitions, but it is possible to
format all disk media to EXT2. Note, that all data on the media is
lost when it is formatted. The first floppy drive is device
<prgn>/dev/fd0</prgn>.  
<example>
dilbert# mkfs -t ext2 /dev/fd0 1440
mke2fs 1.12, 9-Jul-98 for EXT2 FS 0.5b, 95/08/09
Linux ext2 filesystem format
Filesystem label=
360 inodes, 1440 blocks
72 blocks (5.00%) reserved for the super user
First data block=1
Block size=1024 (log=0)
Fragment size=1024 (log=0)
1 block group
8192 blocks per group, 8192 fragments per group
360 inodes per group

Writing inode tables: done      1
Writing superblocks and filesystem accounting information: done
dilbert#
</example>
</p>

<p>Now floppy disk is mounted and backup is run and tested.
<example>
dilbert# mount -t ext2 /dev/fd0 /A
dilbert# df -h
Filesystem            Size  Used  Avail  Capacity Mounted on
/dev/sda5              99M   14M    80M     15%   /
/dev/sda6             964M  540M   374M     59%   /usr
/dev/sda7             190M   32M   148M     18%   /var
/dev/sda8             2.7G  1.2G   1.4G     46%   /export
/dev/sdb2             3.8G  2.3G   1.4G     62%   /export2
dilbert:/export/home  2.7G  1.2G   1.4G     46%   /amd/dilbert/export/home
/dev/fd0              1.4M   13K   1.3M      1%   /A
dilbert# cd /
dilbert# tar czf /A/etc.tgz ./etc
dilbert# df -h
Filesystem            Size  Used  Avail  Capacity Mounted on
/dev/sda5              99M   14M    80M     15%   /
/dev/sda6             964M  540M   374M     59%   /usr
/dev/sda7             190M   32M   148M     18%   /var
/dev/sda8             2.7G  1.2G   1.4G     46%   /export
/dev/sdb2             3.8G  2.3G   1.4G     62%   /export2
dilbert:/export/home  2.7G  1.2G   1.4G     46%   /amd/dilbert/export/home
/dev/fd0              1.4M  483K   835K     37%   /A
dilbert# ls -l /A
total 482
-rw-r--r--   1 root     root       477376 Nov 12 22:15 etc.tgz
drwxr-xr-x   2 root     root        12288 Nov 12 21:54 lost+found
dilbert#

</example>
</p>

<p>Here we change working directory to <prgn>/tmp</prgn>, and restore
the backup to <prgn>/tmp/etc</prgn>. 
<example>
dilbert# cd /tmp
dilbert# ls -l 
total 252
-r--r--r--   1 tale     tale        98774 Nov  9 23:01 Packages
drwxr-xr-x   6 tale     tale         1024 Nov  8 21:13 nscomm40-tale
-rw-------   1 tale     tale       153107 Nov 10 23:51 nsmail3648B5740C333F2
drwx------   2 tale     tale         1024 Nov  8 20:51 orbit-tale
drwx------   2 vieras   vieras       1024 Nov  7 17:52 orbit-vieras
dilbert# tar xzf /A/etc.tgz 
dilbert# ls -l
total 257
-r--r--r--   1 tale     tale        98774 Nov  9 23:01 Packages
drwxr-xr-x  59 root     root         5120 Nov 12 22:13 etc
drwxr-xr-x   6 tale     tale         1024 Nov  8 21:13 nscomm40-tale
-rw-------   1 tale     tale       153107 Nov 10 23:51 nsmail3648B5740C333F2
drwx------   2 tale     tale         1024 Nov  8 20:51 orbit-tale
drwx------   2 vieras   vieras       1024 Nov  7 17:52 orbit-vieras
dilbert# du --summarize --kilobytes /tmp/etc
2509    /tmp/etc
dilbert# umount /A
dilbert#
</example>
</p>

<p>It looks like the backup is on the floppy and we could even read it
back. The last command in the previous example unmounts the
floppy. This is <strong>very important!</strong>. If you mount a
removable media, it <strong>must be unmounted</strong> before it is
removed from the drive. </p>

<p>As another example, we write the backup directly to the
<prgn>/dev/fd0</prgn> device:
<example>
dilbert# cd /
dilbert# tar czf /dev/fd0 ./etc
dilbert# tar tzf /dev/fd0 | head
./etc/
./etc/modules
./etc/xemacs/
./etc/xemacs/site-start-19.d/
./etc/xemacs/site-start-19.d/50dpkg-dev.el
./etc/init.d/
./etc/init.d/network
./etc/init.d/modutils
./etc/init.d/kerneld
./etc/init.d/kdm
Broken pipe
dilbert#
</example>
</p>

<p>We could read the listing (option <prgn>t</prgn> for
<prgn>tar</prgn>) from the floppy, so we can assume the backup is
OK. Note, that if you plan to read this floppy back later,
<strong>make sure you remember how the floppy was written</strong>. If
you forget it was written with <prgn>tar</prgn> and with compression,
you spend a lot of time figuring it out. This same applies to all
media that you store for any longer period of time, and especially if
you send the media to someone else. </p>

<p>The above method is usable also with tape drives. Replace the
device name <prgn>/dev/fd0</prgn> with device name for the tape drive,
and you can use <prgn>tar</prgn> as Tape ARchiver. </p>

</sect1>

<sect1>
<heading>High Capacity Floppies</heading>

<p>High capacity floppies are 
<list>
<item><url id="http://www.iomega.com/product/zip" name="Iomega Zip-drive">, 
<item><url id="http://www.superdisk.com/" name="LS-120">, <url id="http://www.winstation.com/main.html"
name="LS-120">,
<item><url id="http://www.sony.com/HiFD" name="Sony HiFD">,
<item><url id="http://www.syquest.com/" name="SyQuest EZFlyer"> and 
<item><url id="SyQuest" name="SyQuest SparQ">
</list>
</p>

<p>All of these are about floppy disk size, store 100MBytes to
200MBytes (SparQ about 1.0GBytes) and are faster and more expensive
than floppy drives. They are connected to EIDE port, Parallel port,
SCSI or USB. LS-120 and Sony SuperFloppy can read and write ordinary
1.4MByte floppy disks.

<p>You can use these things like in the above example, but you have to
install the devices and the device driver software before they can be
used. Then the device name depends on what kind of connection the
thing uses. </p>

<p>There is more info on using the above high capacity floppies on Linux in the
HOWTO documents. (reference to HOWTOs???)</p>



<p><strong>Somebody with experience from the above devices: please confirm my
guessing above or send info on how they can be used.</strong></p>

</sect1>

<sect1>
<heading>CD-R and CD-RW</heading>

<p>Meta: Capacity <= 640MBytes, speed 150 -- 600KBits/sek. Special software
needed to burn the CD. </p>


</sect1>

<sect1>
<heading>Tapes</heading>

<p>Meta: Popular backup media. Wide range of speeds, capacities and cost. </p>
</sect1>

      </sect>


      <sect>
<heading>Backup methods and software</heading>
<p>Backup methods include simply copying files to another media, using
dd, tar or similar program to create an archive and using special backup
programs. 

<sect1><heading>Network backups</heading>
<p>Meta: Enterprise environment, Legato Networker, HP Omniback, etc. Linux clients. 

<p>In an enterprise environment there may be a backup server running
some network backup software. If there are Linux clients available for
that software, its possible to install the Linux client, configure the
client machine on the backup server and start taking backups over the
LAN.</p>

<p>This is a low cost solution. If the backup server is already there,
Linux clients usually are free to download. Legato Networker and HP
Omniback have Linux clients available, but no technical support is
available from the vendor. 


<taglist compact>
<tag>Legato
<item><url id="http://www.legato.com/exchange/documents/NetWorker/CG-SW.html" name="Legato Networker">

<tag>HP Omniback
<item><url id="http://www.hp.com/openview/products/omniback.html" name="HP Omniback">
</taglist>
</p>
</sect1>

<sect1><heading>Tar et al</heading>
<p>Meta: Tar, dump, dd</p>

<p>Now for some examples. </p>

<p>In Debian GNU/Linux the <prgn>tar</prgn>
program is GNU tar, which has several extra features. Among them is
support for compressing the tar file while it is created. On the
average, compression squeezes the file to about 50% of the
uncompressed size. Your mileage may vary: files that are already
compressed, like *.zip and *.gif files do not compress at all, and
some file compress especially well, C source code files can go to 25%
of the uncompressed size.</p>

<p>Taking a compressed tar file from /export/home partition goes like
this:
<example>
cd /export
tar czf /tmp/home.tgz ./home
</example>
</p>

<p></p>

</sect1>


<sect1><heading>Backup software</heading>
<p>Meta: amanda, other backup software in Debian


</sect1>



      </sect>




      <sect>
<heading>Types of backup</heading>
<p>Meta: Full, incremental, differential, network, dump, level 0--9, </p>
      </sect>

    </chapt>
      
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document:"system-administrator.sgml chapt sect"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/catalog"
sgml-local-ecat-files:nil
End:
-->