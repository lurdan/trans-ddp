<!-- Debian System Administration Manual - Time -->

    <chapt id="sysadmin-time">
      <heading>Время</heading>
      <p><email>Tapio.Lehtonen@IKI.FI</email></p>
<p>
В компьютерах есть собственные <strong>часы</strong>. Обычно это аппаратные
часы с резервной батарейкой, чтобы часы не останавливались на то время, пока
компьютер выключен. Операционная система (например, Linux) запускает 
собственные часы, и именно показания этих часов показывают такие команды,
как <prgn>date</prgn> в Linux и <prgn>time</prgn> в DOS. </p>

<p>Точность хода аппаратных часов обычно зависит от состояния резервной
батарейки. Если включив компьютер вы обнаруживаете, что время на его часах
отстает на несколько месяцев или лет, то стоит проверить состояние батарейки.
</p>

<p>"Программные" часы в операционной системе обычно "плывут", систематически
или случайным образом. Причины этого в том, что часы идут то слишком быстро,
то замедляются. По этой причине следует использовать некие эталонные часы, с
которыми могли бы при необходимости синхронизироваться часы операционной 
системы. </p>

<p>Чтобы посмтореть показания часов в Debian GNU/Linux, используйте команду
<prgn>date</prgn>. Например
<example>
$ date
Fri Oct 23 04:45:51 EEST 1998
</example></p>

<p>Вышеприведенная команда показывает день недели, месяц, день месяца, время,
временную зону и год. Временная зона также показывает используется ли
перевод стрелок на летнее время (Daylight Saving Time); в приведенном примере
базовая временная зона - EET, а буква S означает Saving - перевод на летнее
время). </p>

<p>В Debian GNU/Linux и других Unix команда <prgn>time</prgn> показывает не
время, как можно было бы ожидать. Она показывает время выполнения команды.
Если какая-то команда занимает много времени для выполнения, а вы не хотите
стоять рядом с секундомером, то вы можете узнать сколько времени понадобилось 
для выполнения этой команде, передав эту команду в качестве аргумента
программе <prgn>time</prgn>. Вот пример:
<example>
$ time sleep 60

real    1m0.045s
user    0m0.000s
sys     0m0.000s
</example></p>


<p>Если у вас есть привелегии суперпользователся, то вы можете также изменить 
время командой <prgn>date</prgn> (см. страницу руководства <manref name="date"
section="1">). Если у вас есть подключение к Интернет или другому 
Unix-компьютеру в вашей локальной сети, то в <ref id="syncing-time"> описаны
легкие способы установки времени.</p>

<p>При ручной настройке времени вас может смутить строка формата задания
времени. Команда <prgn>date --set</prgn> понимает множество форматов
даты и времени. Вы можете прочесть info-документ sh-utils, или использовать
приведенный ниже пример как иллюстрацию одного из форматов. В примере дата
задается в стандартном для ISO 8601 формате YYYY-MM-DD, т.е. 
Год-Месяц-ДеньМесяца, а во времени дня используется 24-часовое значение часа. 
Ведущие нули имеют значение. 
<example>
date --set 1998-11-02 
date --set 21:08:0
</example>
Указанные выше команды устанавливают дату 2ое Ноября 1998 и время восемь
минут десятого вечера. </p>

<p>Чтобы увидеть UTC значение даты, используйте команду <prgn>date -u</prgn>. 

<p>Если вы пользуетесь X Window, то вы можете увидеть часы на экране. Если
их нет, то запустить их можно командой <prgn>xclock</prgn>, которая включена
в пакет <package>xbase</package>. Команда <prgn>xclock</prgn> без аргументов
покажет вам часы со стрелками (часовой, минутной и, возможно, секундной). Вы
можете запустить и цифровые часы (командой <prgn>xclock -digital</prgn>). 
Подробности в странице руководства <manref name="xclock" section="1">.</p>

      <sect>
	<heading>Настройка времени, временных зон и перехода на летнее время</heading>

<p>Во время установки базовой системы Debian GNU/Linux, вы настроиваете
<strong>Временную зону (Timezone)</strong>. Вы можете узнать, какая временная
зона у вас установлена, посмотрев в файл <file>/etc/timezone</file>. Если вы
хотите изменить настройку временной зоны, то см. <ref id="tzconfig">.

<example>
$ cat /etc/timezone
Europe/Helsinki
$ 
</example>
</p>
<p>Указывать временную зону необходимо для того, что время в Unix-компьютере 
хранится в формате <strong>Универсального времени</strong> 
(<strong>UTC</strong>), и <strong>локальное время</strong> вычисляется из него.
UTC - это солнечное время относительно нулевого меридиана. Ранее UTC назывался
временем по Гринвичу (GMT), потомучто нулевой меридиан проходит по старой
Королевской Обсерватории в Гринвиче (Гринвич - это часть Лондона, а Лондон, в
своб очередь, - город в Великобритании <!-- От переводчика:  ;-) -->. </p>

<p>UTC - постоянное время, неподверженное переходу на летнее время и другим
изменениям. Это свойство крайне полезно для синхронизации компьютеров.
Покуда время в компьютерах хранится в UTC, компьютеры всего мира могут 
синхронизироваться и управлять своими настройками локального времени.</p>

<p>Если вы настроили ваш компьютер с Debian GNU/Linux на использование 
локального времени, без использования значений временных зон, то вы теряете
преимущества автоматического перехода на летнее время. <strong>Мы не 
рекомендуем делать это!</strong> Однако установка ваших аппаратных часов в
локальное время может быть необходимым компромиссом (см. 
<ref id="multiboot-with">). В этом документе мы предполагаем, что вы 
используете на вашем компьютере UTC. <p>

<p>Если временная зона корректно установлена, и настроечные файлы временных зон
достаточно свежие, то локальное время, показываемое операционной системой 
будет переходить на <strong>летнее время</strong> и назад автоматически и в 
правильные дни. Если у вас устаревшие файлы временных зон, то могут возникнуть
проблемы, поскольку даты перехода на летнее время и обратно определяются не
физическими явлениями, а государственными институтами. Иногда эти даты 
изменяются, например, Европейский Союз в 1995 году перенес конечную дату с 
последнего воскресенья сентября на последнее воскресенье октября. </p>

<p>По этой причине вы должны быть уверены, что ваш пакет
<package>libc6</package> не устарел. Этот пакет, начиная с 
Debian GNU/Linux 2.2 onwards, содержит данные для временных зон.



<sect1  id="tzconfig">
<heading>Изменение временной зоны после инстталляции</heading>

<p>Если временная зона не установлена или неправильна, то суперпользователь 
может запустить <prgn>tzconfig</prgn>, чтобы настроить ее уже после того, как
операционная система была установлена (см. страницу руководства 
<manref name="tzconfig" section="8">). </p>

<p>Если есть другие пользователи, то хорошо бы собщить им, что была изменена
временная зона. </p>
</sect1>


 <sect1>
<heading>Настройка переменной окружения TZ. </heading>
<p>Если у вас нет прав суперпользователя или вы хотите установить собственную,
отличную от общесистемной, временную зону, то утсановите переменную окружения
<tt>TZ</tt>. Для просмотра значения TZ используйте команду 
<prgn>tzselect</prgn>. 
</p>

<p>Пример использования TZ:
<example>
$ date
Sun Nov  1 19:49:38 EET 1998
$ export TZ=PST
$ date
Sun Nov  1 17:49:59 PST 1998
</example>
Как вы можете видеть, для пользователя <prgn>date</prgn> показывает другое 
время. (но это кажется неправиьно, т.к. Pacific Standard Time должно быть
09:49???. Что за???).
</sect1>
      </sect>



      <sect>
        <heading>Настройка и просмотр значения апппаратных часов</heading>
        <p>
Команда для настройки аппаратных часов - это <prgn>hwclock</prgn>.
(В выпусках Debian до 2.0 это была команда <prgn>clock</prgn>.)  </p>
     
<p>If you use the <prgn>date</prgn> command to change time, it is
worth setting also the hardware clock to the correct time. Otherwise,
the time is wrong after the next reboot, since the hardware clock
keeps the time when power is turned off. When the clock in the
operating system shows the correct time, set the hardware clock like
this:
<example>
dilbert# date
Sun Nov  1 18:56:50 EET 1998
dilbert# hwclock --systohc --utc
dilbert# 
</example>
</p>

<p>Remember to add the <prgn>--utc</prgn> -option if the hardware clock is set to UTC!</p>

<p>See man page <manref name="hwclock" section="8"> for more information.</p>

<p>At least from Debian version 2.2 onwards, the system automatically
saves the system time to hardware clock on shutdown, and sets the
system clock from hardware clock when Debian boots up. This is done in
the script <file>/etc/init.d/hwclock.sh</file>.

</sect>


      <sect id="multiboot-with">
        <heading>Multiboot with operating systems not understanding timezone</heading>
        <p>
         If you have a multiboot configuration, where you have some
other operating system(s) on the same computer, and during boot choose
which one to start, you may get confused about the correct time. If
the other operating systems do not understand timezones, they think
UTC is the local time and show the wrong time (unless you live in
London, England or some other place in the same timezone). </p>

<p>DOS, OS/2 and Windows except NT do not use timezones. If you <em>need</em>
to have the correct local time in these operating systems, you have to
set the clock to local time. Debian Linux can live with this and it works,
 but if your main operating system(s) understand timezones, use them. </p>
      </sect>

      <sect id="syncing-time">
        <heading>Syncing time, rdate and NTP</heading>
        <p>
         If you have another Unix computer which you know keeps the
correct time, with root privileges you can set the time with the command
<prgn>rdate</prgn>. For example:
<example>
rdate <var>somehost.domain.com</var>
</example>
Even if you do not have an accurate time source, it is still a good idea to
set all your computers to the same time, so that you can compare <strong>time
stamps</strong> between hosts. To keep the clocks syncronized, You can
start rdate once daily from cron. </p>

<sect1><heading>Настройка времени при загрузке системы</heading>
<p>Если аппаратные часы не хранят корректное время, то можно установить
корректное время при загрузке операционной системы. Для этого нужна машина
в локальной сети, с которой можно снять показания часов. Вот пример:
<enumlist>
<item>создаем файл <file>/etc/init.d/rdate</file>
<example>
$ cat rdate
#! /bin/sh
#
# rdate         Execute the rdate command.
#
# Version:      1998-11-01 tapio.lehtonen@iki.fi
#

PATH=/sbin:/bin:/usr/sbin:/usr/bin
HOST=dilbert

# Установка часов операционной системы с другой машины в ЛВС.
if [ -x /usr/sbin/rdate ]
then
        /usr/sbin/rdate $HOST
fi

</example>
<item><example>chmod a+rx /etc/init.d/rdate</example>

<item>Создадим символическую связь на этот файл в каталоге
<file>/etc/rc2.d</file>
<example>
cd /etc/rc2.d
ln -s ../init.d/rdate S19rdate
</example>
<item>При следующей перезагрузке вы должны увидеть, что часы
синхронизировались.

</enumlist>

<p>Remember to set execute permission to
<file>/etc/init.d/rdate</file>. If You are wondering what the number
S19 above means, read chapter ???. The key is to run rdate after
netbase which starts networking, and before xntp3 or some other
process where time is needed starts. </p>

<sect1><heading>Настройка времени с использованием NTP</heading>

<p>If you are connected to the Internet, you can install an NTP
client, for example <package>ntp</package> or <package>xntp3</package>
in Debian version 2.1 and older. This uses the Network Time Protocol
RFC 1305 to synchronise clocks to a few tens of milliseconds
precision. If you <em>need</em> this kind of precision or better, see
also <ref id="radio-clocks">.</p>

<p>See the excellent documentation that comes with <package>ntp</package>,
in the Debian package <package>ntp-doc</package>. It is very thorough and
    thus long.  If you think reading documents is a waste of time, just
    ask your Internet Service Provider or system administrator for NTP
    server names, or look up the nearest one in "List of Public NTP
    Servers" in http://www.eecis.udel.edu/~mills/ntp/servers.html . If 
    you start using an NTP server, it is usually polite to notify the
    server's administrator of the fact. </p>

<p><em>Do not configure your system to query level 1 NTP servers!  If
you think you need to do this, you are almost certainly wrong!</em></p>

<p>Once you know an NTP server, edit the file
      <file>/etc/ntp.conf</file> to add at least one server
      line. Here is an example:
<example>
# /etc/ntp.conf, configuration for xntpd

logfile /var/log/xntpd
driftfile /var/lib/ntp/ntp.drift
statsdir /var/log/ntpstats/

statistics loopstats peerstats clockstats
filegen loopstats file loopstats type day enable
filegen peerstats file peerstats type day enable
filegen clockstats file clockstats type day enable

server ntp.somedomain.something
server ntp.something.else
</example></p>

<p>Note, that I changed the actual server name in the above example,
      to prevent all Debian GNU/Linux users from blindly using that one
      server. Everything else except the server lines was there after 
    <package>xntp3</package> installation. </p>

<p>If you do not have a permanent Internet connection, then running
NTP client is not a good solution. NTP client syncronizes relatively
often, and needs the Internet connection to be always on. If you have
a dial up Internet connection, you can run the command
<prgn>ntpdate</prgn> (also in <package>ntp</package> package) to
syncronize each time you connect.
</p>

<p>Another possibility is to set cron to run <prgn>ntpdate</prgn> once
daily, this gives good accuracy for most uses. The following is an
example script that can be started from cron and runs
<prgn>ntpdate</prgn>. This scripts assumes the
<file>/etc/ntp.conf</file> is correctly set up, since it gets the
server names from that file. 
<example>
dilbert# cat /etc/cron.nightly/ntpdate
#!/bin/sh
#
# Last modification: Sat Aug  8 05:27:07 EEST 1998
# ntpdate  cron nightly

NTPDATE=/usr/sbin/ntpdate
LOGFILE=/var/log/xntpd
NTPCONFFILE=/etc/ntp.conf
NTPSERVERS=
GREP=/usr/bin/grep
CUT=/usr/bin/cut

if [ -f $NTPCONFFILE ] ; then
  echo "===========================" >> $LOGFILE
  echo "<<< `date` " >> $LOGFILE
  for i in `grep ^server $NTPCONFFILE | $CUT --fields 2 --delimiter \ `
  do
        NTPSERVERS="$NTPSERVERS $i"
  done
  $NTPDATE $NTPSERVERS  >>  $LOGFILE
###echo $NTPDATE $NTPSERVERS $LOGFILE
  echo ">>> `date` " >> $LOGFILE
fi

exit 0
dilbert# 
</example>

</p>

<sect1><heading>Other methods</heading>
<p>Debian GNU/Linux has also the command <prgn>netdate</prgn>, see man
page <manref name="netdate" section="8L"> for more info. It uses the
protocol defined in RFC 868. </p>


      </sect>
 


     <sect>
        <heading>Setting up an NTP server</heading>
        <p>
         If you have several hosts that you want to synchronise, you
      should not let them all separately synchronise to an outside NTP
      server. This puts a load on the NTP server, and if it is a
      public and free service, the people there may start to dislike
      you! At least ask if it is OK to sync all of your machines
      there. 
        </p>

<p>A better way is to set up one of your hosts as an NTP server, sync
that to the outside NTP server and the rest of your hosts to your own
NTP server. The <package>ntp</package> package provides the server
component as well, so you just need to configure it. This is not particularly
difficult either, but you should read the documentation and understand
the peer concept and stratum hierarchy. </p>

      </sect>
      <sect id="radio-clocks">
        <heading>Radio clocks</heading>

<p>
        If you want better accuracy or cannot synchronise with an NTP
        server in the public Internet, you can purchase a radio
        clock. These get the time from time servers that use a very
        accurate clock, and broadcast time signals using radio waves.
        <p>

	<p>There are radio clocks that need a ground based transmitter 
	  near enough to get the signal. If you get one of these, make 
	  sure you can receive the signal on the location where you
	  plan to use it. The transmitters are ground based, so they
	  don't work accross the globe. </p>

	<p>Another kind of radio clock uses a Global Positioning
	  System GPS receiver. GPS satellites circle the globe in low
	  earth orbits, and there should always be at least four above 
	the horizon. They are mainly used for navigation, but the
	  principle they work on is based on sending time signals. For 
	time synchronisation it is enough to get the signal from one
	  satellite, but usually it is necessary to install the GPS
	  antenna outdoors to get good reception.</p>

      </sect>

      <sect>
        <heading>Timestamps</heading>

<p>Timestamps in files are in UTC.  The command <prgn>ls -l</prgn>
shows file timestamps in local time using the Timezone in
effect. Because timestamps are in UTC, timestamps can be compared
between separate computers. This can lead to problems if the clocks
are not syncronized. </p>

<p>Consider this situation: You log in host B, which NFS loads your
home directory from NFS server host A. You edit some file, save it and
start <prgn>make</prgn>. If the clocks in hosts A and B are not
syncronized, <prgn>make</prgn> may complain that the file
modification time is in the future, or not compile the file because
the object is newer. </p>

      </sect>

      <sect>
        <heading>Time in cron</heading>
        <p>
      The times in cron are local times. This means, that if you
configure cron to start some program at 7 in the morning, it is 7 in
the morning local time as determined by the system Timezone. 
        <p>

<p>This causes headaches, if the system Timezone is not the same you
have set for yourself using the TZ enviroment variable, or you have two
host in different Timezones that need to start someting at the same
time on both hosts. </p>
      </sect>

    
<!--
??? pointers on radio clock hardware. I use Datum GPS clocks, but is
it OK to mention one vendor only?
<p>OK We should also mention netdate and ntpdate </p>

-->

 </chapt>
      
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document:"system-administrator.sgml chapt sect"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/catalog"
sgml-local-ecat-files:nil
End:
-->