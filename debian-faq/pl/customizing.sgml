<chapt id="customizing">Dostosowanie systemu &debian; do Twoich potrzeb

<sect id="papersize">Sk±d mogê mieæ pewno¶æ, ¿e wszystkie programy u¿ywaj±
  tego samego rozmiaru papieru?

<p>Zainstaluj pakiet <package/libpaperg/. Podczas instalacji zostaniesz
zapytany o domy¶lny rozmiar
papieru, który ma byæ u¿ywany w ca³ym systemie. 
Ustawienie to bêdzie przechowywane w pliku <tt>/etc/papersize</tt>.

<p>U¿ytkownicy mog± ustaliæ w³asny rozmiar papieru u¿ywaj±c zmiennej 
systemowej <tt>PAPERSIZE</tt>. Wiêcej informacji uzyskasz na stronie
podrêcznika systemowego
<manref name="papersize" section="5">.

<sect id="hardwareaccess">Jak mogê udostêpniæ urz±dzenia peryferyjne bez
  nara¿ania bezpieczeñstwa systemu?

<p>Wiele plików urz±dzeñ w katalogu <tt>/dev/</tt> nale¿y do pewnych, wcze¶niej
zdefiniowanych, grup. Na przyk³ad <tt>/dev/fd0</tt> nale¿y do grupy
<tt>floppy</tt>, a <tt>/dev/dsp</tt> nale¿y do grupy <tt>audio</tt>.

<p>Je¶li chcesz ¿eby dany u¿ytkownik mia³ dostêp do jednego z tych urz±dzeñ to
po prostu dodaj go do grupy, do której nale¿y to urz±dzenie.
Mo¿esz to zrobiæ na przyk³ad tak:
  <example>adduser u¿ytkownik grupa</example>
W ten sposób nie bêdziesz musia³ zmieniaæ praw dostêpu urz±dzenia.

<sect id="consolefont">W jaki sposób za³adowaæ czcionkê konsoli podczas startu
  systemu?

<p>Pakiety <package/kbd/ oraz <package/console-tools/ pozwalaj± to osi±gn±æ.
  Dostosuj odpowiednio do swoich potrzeb plik <tt>/etc/kbd/config</tt> lub
  <tt>/etc/console-tools/config</tt>.

<sect id="appdefaults">W jaki sposób skonfigurowaæ domy¶lne parametry
 aplikacji dla ¶rodowiska X11?

<p>Programy Debiana pod X'y instaluj± swoje zasoby do katalogu
<tt>/etc/X11/app-defaults/</tt>. Je¶li chcesz dostosowaæ aplikacje X'ów
globalnie to dokonaj zmiany w tych plikach. Oznaczone s± one jako 
konfiguracyjne wiêc ich zawarto¶æ pozostanie niezmieniona podczas
procesu aktualizacji.

<sect id="booting">Wydaje siê, ¿e ka¿da dystrybucja posiada inne procedury 
  startu systemu.  Jak to wygl±da w Debianie?

<p>Jak wszystkie Uniksy, Debian startuje uruchamiaj±c program <tt>init</tt>.
Plik konfiguracyjny dla <tt>init</tt> (tj. <tt>/etc/inittab</tt>) okre¶la, ¿e
pierwszym wykonywanym skryptem powinien byæ <tt>/etc/init.d/rcS</tt>. Skrypt
ten uruchamia wszystkie skrypty z katalogu <tt>/etc/rcS.d/</tt> poprzez
bezpo¶rednie interpretowanie lub uruchamianie podprocesów interpretuj±cych
(zale¿nie od rozszerzeñ plików) w celu
dokonania inicjalizacji, takiej jak: sprawdzenie oraz zamontowanie systemów
plików, za³adowanie modu³ów, uruchomienie us³ug sieciowych, ustawienie zegara 
i innych. W dalszej kolejno¶ci, w celu utrzymania zgodno¶ci ze starszymi 
wersjami, uruchamia równie¿ skrypty
(oprócz tych ze znakiem '.' w nazwach) z katalogu <tt>/etc/rc.boot/</tt>.
Wszystkie skrypty w tym katalogu s± zazwyczaj zarezerwowane do u¿ytku
administratora systemu. U¿ywanie ich jest przestarza³± praktyk±.

<p>Po zakoñczeniu procedury startu, <tt>init</tt> wykonuje wszystkie skrypty 
startowe z katalogu zale¿nego od domy¶lnego poziomu startu (domy¶lny poziom startu 
okre¶lany jest przez wpis <tt>id</tt> w pliku <tt>/etc/inittab</tt>). Jak wiêkszo¶æ
Uniksów zgodnych z System V, Linux ma 7 poziomów startu (runlevels):
<list>
  <item>0 (zatrzymanie systemu),
  <item>1 (tryb pojedynczego u¿ytkownika),
  <item>2 do 5 (ró¿ne tryby wielodostêpowe) i
  <item>6 (ponowne uruchomienie systemu).
</list>
Systemy oparte na Debianie posiadaj± domy¶lny wpis id=2 co oznacza, ¿e w momencie
wej¶cia w stan pracy wielodostêpowej, domy¶lnym poziomem startu bêdzie '2' oraz, ¿e
zostan± uruchomione skrypty z katalogu <tt>/etc/rc2.d</tt>.

<p>Tak naprawdê skrypty, w ka¿dym z katalogów <tt>/etc/rcN.d/</tt>, s± tylko
symbolicznymi dowi±zaniami do skryptów z
<tt>/etc/init.d</tt>. Jednak <em>nazwy</em> plików, z katalogów
<tt>/etc/rcN.d/</tt>, s± tak nadane aby pokazaæ <em>sposób</em> w jaki skrypty z
<tt>/etc/init.d/</tt> bêd± uruchamiane. Przed wej¶ciem do dowolnego poziomu
startu wszystkie skrypty zaczynaj±ce siê liter± 'K' zostan± uruchomione. Te
skrypty usuwaj± us³ugi. Nastêpnie wykonane zostan± wszystkie skrypty zaczynaj±ce
siê liter± 'S'. Te skrypty uruchamiaj± us³ugi. Dwucyfrowa liczba, która
wystêpuje po 'K' lub 'S' oznacza kolejno¶æ, w jakiej uruchamiaj± siê skrypty.
Mniejsza liczba oznacza, ¿e skrypt uruchomi siê wcze¶niej.

<p>To podej¶cie dzia³a, poniewa¿ wszystkie skrypty z <tt>/etc/init.d/</tt>
pobieraj± jeden z argumentów: `start', `stop', `reload', `restart' lub
`force-reload'
i wykonaj± zadanie okre¶lone przez ten argument. Skrypty te mog± byæ u¿ywane
nawet po zakoñczeniu rozruchu systemu w celu kontroli ró¿nych procesów.

<p>Na przyk³ad, z argumentem `reload', polecenie:
  <example>/etc/init.d/sendmail reload</example>
wy¶le sygna³ demonowi sendmail'a aby ponownie przeczyta³ i zinterpretowa³ 
swój plik konfiguracyjny.

<sect id="custombootscripts">Wygl±da na to ¿e Debian nie u¿ywa
<tt>rc.local</tt> aby dostosowaæ proces startu systemu. Jakie narzêdzia
zosta³y dostarczone do tego celu?

<p>Przypu¶æmy, ¿e system ma uruchomiæ skrypt <tt>foo</tt> podczas startu
systemu lub podczas przej¶cia w dany poziom startu (runlevel). W takiej
sytuacji administrator systemu powinien:

<list>
  <item>Umie¶ciæ skrypt <tt>foo</tt> w katalogu <tt>/etc/init.d/</tt>.
  <item>Uruchomiæ polecenie Debiana <tt>update-rc.d</tt> z odpowiednimi
  parametrami w celu ustanowienia dowi±zañ pomiêdzy (okre¶lonymi w linii
  poleceñ)
  katalogami rc?.d, a <tt>/etc/init.d/foo</tt>. W tym przypadku '?' jest cyfr±
  od 0 do 6 i oznacza odpowiedni poziom startu Systemu V. 
  <item>Ponownie uruchomiæ system.
</list>

<p>Polecenie <tt>update-rc.d</tt> ustanowi dowi±zania w
katalogach rc?.d ze skryptem w <tt>/etc/init.d</tt>.
Ka¿de dowi±zanie sk³adaæ siê bêdzie, w kolejno¶ci: z litery 'S' lub 'K',
dwucyfrowej liczby oraz nazwy skryptu. Skrypty zaczynaj±ce siê liter± 'S' w
<tt>/etc/rcN.d/</tt> zostan± wykonane przy przej¶ciu do poziomu startu
<tt>N</tt>. Skrypty zaczynaj±ce siê liter± 'K' zostan± wykonane przy wyj¶ciu z
poziomu startu <tt>N</tt>.

<p>Mo¿na, na przyk³ad, sprawiæ by skrypt <tt>foo</tt> wykona³ siê podczas startu
systemu poprzez umieszczenie go w katalogu <tt>/etc/init.d/</tt> oraz
utworzenie dowi±zañ przy pomocy polecenia <tt>update-rc.d foo defaults 19</tt>. 
Parametr 'defaults' oznacza domy¶lne poziomy startu tzn. od 2 do 5.
Parametr '19' daje pewno¶æ, ¿e <tt>foo</tt> zostanie uruchomiony wcze¶niej ni¿
skrypty o numerach 20 i wy¿szych.

<sect id="interconffiles">Jak system zarz±dzania pakietami radzi sobie z
pakietami, zawieraj±cymi pliki konfiguracyjne innych pakietów?

<p>Niektórzy u¿ytkownicy chcieliby, na przyk³ad, stworzyæ nowy serwer 
instaluj±c grupê pakietów Debiana i lokalnie wygenerowane pakiety
zawieraj±ce pliki konfiguracyjne. Zazwyczaj nie jest to dobry pomys³ poniewa¿
program <prgn/dpkg/ nie bêdzie wiedzia³ o istnieniu plików konfiguracyjnych je¶li
znajduj± siê one w innych pakietach. Mo¿e to doprowadziæ do nadpisania konfliktowych
plików gdy jeden z pakietów oryginalnej ,,grupy'' zostanie
uaktualniony.

<p>Zamiast tego utwórz lokalny pakiet, który modyfikuje pliki konfiguracyjne
,,grupy'' pakietów Debiana, które Ciê interesuj±. Wtedy <prgn/dpkg/ i reszta
systemu zarz±dzania pakietami bêdzie wiedzia³, ¿e pliki zosta³y zmodyfikowane
przez lokalnego administratora i nie bêdzie próbowa³ ich nadpisaæ w
czasie aktualizacji.

<!-- check against dpkg-divert description -->
<sect id="divert">Jak mogê nadpisaæ plik instalowany przez inny pakiet tak
  ¿eby u¿ywana by³a moja wersja?

<p>Powiedzmy, ¿e administrator lub lokalny u¿ytkownik woli u¿ywaæ programu
,,login-local'' ni¿ ,,login'', który dostarczany jest przez pakiet Debiana o
nazwie <package/login/ .

<p>Nie nale¿y:
  <list>
    <item> Nadpisywaæ pliku <tt>/bin/login</tt> plikiem <tt>login-local</tt>.
  </list>
System zarz±dzania pakietami nie bêdzie wiedzia³ o tej zmianie i po prostu
nadpisze Twój plik <tt>/bin/login</tt> je¶li <tt>login</tt> (lub ka¿dy
inny pakiet dostarczaj±cy plik <tt>/bin/login</tt>) zostanie zainstalowany 
lub uaktualniony.
<!-- XXX dpkg-divert: is this correct ? -->
<p>Zrób raczej tak:
<list>
  <item>Wykonaj:
    <example>dpkg-divert --divert /bin/login.debian /bin/login</example>
  aby ka¿de przysz³e instalacje pakietu <package/login/ zamiast
  zapisywaæ plik <tt>/bin/login</tt> zapisywa³y go jako <tt>/bin/login.debian</tt>
  <item>Nastêpnie wykonaj:
    <example>cp login-local /bin/login</example>
  aby przenie¶æ Twój lokalnie zbudowany program na w³a¶ciwe miejsce.
</list>

<p>Wiêcej informacji znajdziesz w <manref name="dpkg-divert" section="8">.


<sect id="localpackages">W jaki sposób dodaæ do listy dostêpnych pakietów
moje lokalnie zbudowane pakiety tak, aby system zarz±dzania pakietami o 
nich wiedzia³?

<p>Wykonaj polecenie:

<example>
dpkg-scanpackages BIN_KAT PLIK_NADP [PRZEDR_SCIEZKI] > moje_Pakiety
</example>

<p>gdzie:
  <list>
    <item>BIN_KAT jest katalogiem gdzie przechowywane s± pliki archiwów
    Debiana (zwykle maj± rozszerzenia ,,.deb'').
    <item>PLIK_NADP (ang. override file) jest plikiem, który modyfikowany 
    jest przez
    opiekunów wydania i, dla pakietów z dystrybucji main, zwykle znajduje siê 
    w archiwum FTP Debiana jako
    <tt>indices/override.main.gz</tt>.
    Mo¿esz zignorowaæ ten plik dla lokalnych pakietów.
    <item>PRZEDR_SCIEZKI jest <em>opcjonalnym</em> parametrem, którego warto¶æ 
    mo¿e zostaæ do³±czona do nazwy tworzonego pliku <tt>moje_Pakiety</tt>.
  </list>

<p>Kiedy ju¿ plik <tt>moje_Pakiety</tt> zostanie utworzony powiadom o tym
system zarz±dzania pakietami wykonuj±c polecenie:

<example>
dpkg --merge-avail moje_Pakiety
</example>

<p>Je¶li u¿ywasz APT to mo¿esz równie¿ dodaæ lokalne repozytorium do swojego pliku 
<manref name="sources.list" section="5">.

<sect id="diverse">Niektórzy u¿ytkownicy lubi± mawk, inni gawk; jedni lubi±
vim'a, inni lubi± elvis'a; niektórzy lubi± trn, inni lubi± tin. Jak Debian
wspiera tak± ró¿norodno¶æ upodobañ?

<p>Istnieje wiele przypadków kiedy dwa pakiety dostarczaj± dwie ró¿ne
wersje programu o takiej samej funkcjonalno¶ci. U¿ytkownicy mog± preferowaæ
jeden z nich bardziej od drugiego z przyzwyczajenia, lub z powodu interfejsu
u¿ytkownika, który dla danego pakietu jest, w jaki¶ sposób, bardziej przyjazny 
ni¿ interfejs drugiego. Ró¿ni u¿ytkownicy w tym samym systemie mog± 
dokonaæ ró¿nych wyborów.

<p>Debian u¿ywa systemu pakietów ,,wirtualnych'' aby pozwoliæ administratorom
systemu na wybór (lub pozwoliæ wybraæ u¿ytkownikom) ulubione narzêdzia,
gdy istniej± dwie lub wiêcej wersji z tak± sam± podstawow± funkcjonalno¶ci±,
która zaspokoi wymagania zale¿no¶ci bez podawania nazwy konkretnego pakietu.

<p>Na przyk³ad: w systemie zainstalowane s± dwie ró¿ne wersje czytników grup
dyskusyjnych. Serwer grup dyskusyjnych mo¿e 'zalecaæ' aby w
systemie by³ zainstalowany <em>jaki¶</em> czytnik grup dyskusyjnych ale wybór
<tt>tin</tt>'a lub <tt>trn</tt>'a pozostawiony zostaje u¿ytkownikowi. Dzia³a
to w ten sposób, ¿e oba pakiety <package/tin/ oraz <package/trn/
dostarczaj± wirtualny pakiet <package/news-reader/. <em>Który</em> program
zostanie wywo³any zale¿y od dowi±zania pliku z nazw± wirtualnego
pakietu <tt>/etc/alternatives/news-reader</tt> do wybranego pliku czytnika np.
<tt>/usr/bin/trn</tt>.

<p>Pojedyncze dowi±zanie nie wystarcza aby wspieraæ pe³ne u¿ycie
alternatywnych programów. Strony pomocy i prawdopodobnie inne,
powi±zane z programem, pliki musz± tak¿e zostaæ wybrane. Skrypt Perl'a
<tt>update-alternatives</tt> dostarcza sposobu, który zapewnia, ¿e wszystkie
pliki powi±zane z danym pakietem zostan± wybrane jako domy¶lne dla systemu.

<p>Na przyk³ad, aby sprawdziæ jakie pliki wykonywalne dostarcza
'x-window-manager' uruchom:
  <example>update-alternatives --display x-window-manager</example>
Je¶li chcesz to zmieniæ uruchom:
  <example>update-alternatives --config x-window-manager</example>
i wykonaj instrukcje, które pojawi± siê na ekranie (po prostu naci¶nij klawisz
z cyfr±, która znajduje siê przy programie, który bardziej lubisz).
 
<p>Je¶li z jakiego¶ powodu pakiet nie zarejestruje siê jako mened¿er okien
(wy¶lij informacje o b³êdzie je¶li uznasz to za
usterkê) lub je¶li u¿ywasz mened¿era okien z katalogu /usr/local (taki
wybór nie pojawi siê na ekranie),
mo¿esz uaktualniæ dowi±zania poprzez parametry wywo³ania tak jak na
przyk³adzie poni¿ej:
  <example>update-alternatives --install /usr/bin/x-window-manager \
  x-window-manager /usr/local/bin/wmaker-cvs 50</example>

<p>Pierwszy parametr za `--install' jest dowi±zaniem symbolicznym, które
wskazuje na /etc/alternatives/NAZWA, gdzie NAZWA jest drugim parametrem.
Trzeci parametr to program, do którego /etc/alternatives/NAZWA powinien
zostaæ dowi±zany, a czwarty jest priorytetem (wiêksze warto¶ci wskazuj±, ¿e
ta alternatywa, przy dzia³aniu automatycznym, bêdzie wybrana z wiêkszym 
prawdopodobieñstwem).

<p>Aby usun±æ alternatywny wpis, który doda³e¶ uruchom po prostu:
  <example>update-alternatives --remove x-window-manager /usr/local/bin/wmaker-cvs</example>
