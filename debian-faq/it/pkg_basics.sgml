<!-- retain these comments for translator revision tracking -->
<!-- Original version: $Revision: 1.24 $ -->
<chapt id="pkg_basics">Fondamenti sul sistema di gestione dei pacchetti Debian

<p>Questo capitolo tratta alcuni aspetti dettagliati a
basso livello della gestione dei pacchetti di Debian.  Se si &egrave; principalmente
interessati nell'<em>uso</em> degli strumenti relativi, si salti ai
capitoli <ref id="pkgtools"> e <ref id="uptodate">.

<sect id="package">Cos'&egrave; un pacchetto Debian?

<p>I pacchetti generalmente contengono tutti quei file necessari ad
implementare una serie di comandi o funzionalit&agrave; correlate. Ci
sono due tipi di pacchetti Debian:
<list>
  <item><em>Pacchetti binari</em>, che contengono eseguibili, file di configurazione,
  pagine man/info, informazioni sul copyright ed altra documentazione.
  Questi pacchetti sono distribuiti in un formato archivio specifico di Debian
  (si veda <ref id="deb-format">); sono solitamente caratterizzati dall'estensione
  ".deb". I pacchetti binari possono essere spacchettati usando l'utilit&agrave; Debian
  <tt>dpkg</tt> (opzionalmente tramite un frontend come
  <prgn/aptitude/); i dettagli sono forniti nella sua pagina di
  manuale.
  
  <item><em>Pacchetti sorgente</em>, che consistono in un file <tt>.dsc</tt>
  che descrive il pacchetto sorgente (inclusi i nomi dei file seguenti),
  un file <tt>.orig.tar.gz</tt> che contiene il sorgente originale non
  modificato nel formato tar compresso con gzip e solitamente un file
  <tt>.diff.gz</tt> che contiene le modifiche specifiche di Debian fatte
  al sorgente originale. L'utilit&agrave; <tt>dpkg-source</tt> pacchetta e spacchetta
  gli archivi sorgente Debian; i dettagli sono forniti nella sua pagina di manuale.
  (Il programma <prgn/apt-get/ pu&ograve; essere usato come frontend per <tt>dpkg-source</tt>.)
</list>

<p>L'installazione di software attraverso il sistema dei pacchetti usa "dipendenze" che
vengono progettate con cura dai manutentori dei pacchetti. Queste dipendenze sono
documentate nel file <tt>control</tt> associato ad ogni pacchetto.
Per esempio, il pacchetto contenente il compilatore C GNU (<package/gcc/)
"dipende" dal pacchetto <package/binutils/ che include il linker e
l'assemblatore. Se un utente tenta di installare <package/gcc/ senza avere prima
installato <package/binutils/, il sistema di gestione dei pacchetti (dpkg) invia
un messaggio di errore avvertendo che necessita anche di <package/binutils/, e
ferma l'installazione di <package/gcc/. (Questa funzione pu&ograve; essere
tuttavia aggirata dall'utente tenace, si veda
<manref name="dpkg" section="8">.) Per maggiori informazioni, si
veda <ref id="depends"> pi&ugrave; sotto.

<p>Gli strumenti Debian per i pacchetti possono essere usati per:
<list>
  <item>manipolare e gestire pacchetti o parti di pacchetti,
  <item>amministrare le deviazioni locali dei file in un pacchetto,
  <item>aiutare gli sviluppatori nella costruzione degli archivi dei pacchetti e
  <item>aiutare gli utenti nell'installazione di pacchetti che sono in un sito FTP remoto.
</list>

<sect id="deb-format">Qual &egrave; il formato di un pacchetto binario Debian?

<p>Un "pacchetto" Debian, o un file archivio Debian, contiene i file
eseguibili, le librerie e la documentazione associati ad una particolare
suite di programmi o ad un particolare gruppo di programmi
correlati. Normalmente, un file archivio Debian ha un nome che termina
in <tt>.deb</tt>.

<p>I dettagli di questo formato per i pacchetti binari Debian sono descritti
nella pagina di manuale <manref name="deb" section="5">. Questo formato interno
&egrave; soggetto a modifiche (tra diversi rilasci principali di &debian;), quindi
usare sempre <manref name="dpkg-deb" section="1"> se si devono
effettuare manipolazioni a basso livello di file <tt>.deb</tt>.

<sect id="pkgname">Perch&eacute; i nomi dei pacchetti Debian sono cos&igrave; lunghi?

<p>Il nome dei pacchetti binari Debian segue la seguente convenzione:
&lt;pippo&gt;_&lt;NumeroVersione&gt;-&lt;NumeroRevisioneDebian&gt;_&lt;ArchitetturaDebian&gt;.deb

<p>Si noti che <tt>pippo</tt> dovrebbe essere il nome del pacchetto. Come verifica,
si pu&ograve; conoscere il nome del pacchetto associato ad un particolare file
di archivio Debian (file.deb) in uno dei modi seguenti.
<list>
  <item>Esaminando il file "Packages" nella directory dove era stato archiviato
  su un archivio FTP Debian. Questo file contiene una sezione che descrive
  ogni pacchetto; il primo campo in ogni sezione &egrave; il nome formale del pacchetto.
  <item>Utilizzando il comando <tt>dpkg --info pippo_VVV-RRR_AAA.deb</tt> (dove VVV,
  RRR e AAA sono rispettivamente la versione, la revisione e
  l'architettura del pacchetto in questione).
  Questo mostra, tra le altre cose, il nome del pacchetto corrispondente al file
  archivio spacchettato.
</list>

<p>La parte <tt>VVV</tt> &egrave; il numero di versione specificato dallo
  sviluppatore originale. Qui non ci sono standard, per cui il numero di
  versione pu&ograve; avere formati differenti come "19990513" e "1.3.8pre1".

<p>La parte <tt>RRR</tt> &egrave; il numero di revisione Debian e viene specificata
dallo sviluppatore Debian (o il singolo utente se sceglie
di crearsi il pacchetto da s&eacute;). Questo numero corrisponde al livello di revisione
del pacchetto Debian, quindi un nuovo livello di revisione significa solitamente
modifiche nel Makefile Debian (<tt>debian/rules</tt>), nel file di controllo Debian
(<tt>debian/control</tt>), negli script di installazione o rimozione
(<tt>debian/p*</tt>) oppure nei file di configurazione utilizzati con il pacchetto.

<p>La parte <tt>AAA</tt> identifica il processore per cui &egrave; stato
  compilato il pacchetto. &Egrave; solitamente <tt>i386</tt>, che si riferisce
  ai chip compatibili con Intel 386 o versioni successive. Per altre
  possibilit&agrave; si veda la struttura delle directory dei siti FTP di
  Debian in <ref id="dirtree">.
Per dettagli, si veda la descrizione delle "architetture Debian" nella
  pagina di manuale <manref name="dpkg-architecture" section="1">.

<sect id="controlfile">Cos'&egrave; un file di controllo Debian?

<p>Le specifiche riguardanti il contenuto di un file di controllo Debian sono
fornite nel manuale Debian Policy, sezione 5, si veda <ref id="debiandocs">.

<p>Brevemente, un esempio di file di controllo &egrave; mostrato di seguito per il
pacchetto Debian hello:
<example>
Package: hello
Priority: optional
Section: devel
Installed-Size: 45
Maintainer: Adam Heath &lt;doogie@debian.org&gt;
Architecture: i386
Version: 1.3-16
Depends: libc6 (>= 2.1)
Description: il classico saluto e un buon esempio
 Il programma GNU hello produce un familiare e amichevole saluto. Consente
 ai non programmatori di usare un classico strumento informatico che altrimenti non
 sarebbe disponibile per loro.
 .
 A parte gli scherzi, questo &egrave; un esempio di come creare un pacchetto
 Debian. &Egrave; la versione Debian del programma "hello world" del progetto
 GNU (che &egrave; esso stesso un esempio per il progetto GNU).
</example>

<p>Il campo Package fornisce il nome del pacchetto. Questo &egrave; il nome attraverso
il quale il pacchetto pu&ograve; essere manipolato con gli strumenti per i pacchetti
ed &egrave; solitamente simile, ma non necessariamente identico, alla prima
parte della stringa del nome dell'archivio Debian.

<p>Il campo Version fornisce sia il numero della versione dello
sviluppatore originale, sia (nell'ultima parte) il livello di revisione
del pacchetto Debian di questo programma, come spiegato
in <ref id="pkgname">. <!-- XXX missing name -->

<p>Il campo Architecture specifica il chip per il quale questo particolare
binario &egrave; stato compilato.

<p>Il campo Depends fornisce una lista di pacchetti che devono essere
installati per poter installare questo pacchetto con successo.

<p>Installed-Size indica quanto spazio su disco occuper&agrave; il pacchetto
installato. &Egrave; pensato per essere usato dai frontend di installazione
in modo da poter mostrare se c'&egrave; abbastanza spazio disponibile su disco
per installare il programma.

<p>La riga Section fornisce la "sezione" in cui questo pacchetto Debian &egrave;
archiviato presso i siti FTP Debian.

<p>Priority indica quanto &egrave; importante questo pacchetto per
l'installazione, cos&igrave; che i software semi-intelligenti come dselect
o aptitude possano ordinare il pacchetto dentro una categoria
di, ad esempio, pacchetti installati in modo opzionale. Si veda <ref id="priority">.

<p>Il campo Maintainer fornisce l'indirizzo di posta elettronica della persona che &egrave;
attualmente responsabile della manutenzione di questo pacchetto.

<p>Il campo Description fornisce un breve riassunto delle funzionalit&agrave; del pacchetto.

<p>Per ulteriori informazioni riguardo tutti i campi possibili che pu&ograve; avere
un pacchetto, si veda il manuale Debian Policy, sezione 5, "Control
  files and their fields" (vedere <ref id="debiandocs">).

<sect id="conffile">Cos'&egrave; un conffile Debian?

<p>Conffiles &egrave; una lista di file di configurazione (solitamente situati in
<tt>/etc</tt>) che il sistema di gestione dei pacchetti non sovrascriver&agrave;
quando il pacchetto viene aggiornato. Questo assicura che i valori locali
per il contenuto di questi file vengano preservati, ed &egrave; una caratteristica
critica che permette l'aggiornamento in loco di pacchetti su un sistema
in esecuzione.

<p>Per determinare esattamente quali file sono preservati durante un aggiornamento, si esegua:
  <example>dpkg --status pacchetto</example>
e si guardi alla voce "Conffiles:".

<sect id="maintscripts">Cosa sono gli script preinst, postinst, prerm e postrm di Debian?

<p>Questi file sono script eseguibili che vengono automaticamente eseguiti prima
o dopo l'installazione di un pacchetto. Insieme ad un file
chiamato <tt>control</tt>, tutti questi file sono parte della sezione
"control" di un file archivio Debian.

<p>I singoli file sono:
<taglist>
<tag/preinst/
  <item>Questo script viene eseguito prima che il pacchetto venga spacchettato
  dall'archivio Debian (".deb"). Molti script "preinst" interrompono i servizi per
  i pacchetti che devono essere aggiornati fino a che la loro installazione o aggiornamento
  non sono completati (a seguito dell'esecuzione con successo dello script "postinst").

<tag/postinst/
  <item>Questo script tipicamente completa ogni configurazione richiesta dal
  pacchetto <tt>pippo</tt> una volta che <tt>pippo</tt> &egrave; stato spacchettato dal suo archivio
  Debian (".deb"). Spesso gli script "postinst" richiedono all'utente degli input
  e/o lo avvertono che se accetta le impostazioni predefinite deve ricordarsi
  di tornare indietro e riconfigurare il pacchetto se la situazione lo richiede.
  Molti script "postinst" eseguono poi tutti i comandi necessari ad avviare o
  riavviare un servizio una volta che il pacchetto &egrave; stato installato o aggiornato.

<tag/prerm/
  <item>Questo script tipicamente ferma tutti i demoni associati ad
  un pacchetto. Viene eseguito prima della rimozione di file associati
  al pacchetto.

<tag/postrm/
  <item>Questo script tipicamente modifica i collegamenti o altri file associati a
  <tt>pippo</tt>, e/o rimuove i file creati da quel pacchetto. (Si veda anche
  <ref id="virtual">.)
</taglist>

<p>Attualmente tutti i file di controllo si possono trovare nella directory
<tt>/var/lib/dpkg/info</tt>. I file attinenti al pacchetto <tt>pippo</tt>
iniziano con il nome "pippo" ed hanno le estensioni "preinst", "postinst",
ecc., a seconda della funzione. Il file <tt>pippo.list</tt> nella stessa directory
elenca tutti i file installati con il pacchetto <tt>pippo</tt>.
(Si noti che la localizzazione di questi file &egrave; un dato tecnico interno
di dpkg; non ci si dovrebbe fare affidamento.)

<sect id="priority">Cosa sono i pacchetti <em/Essential/, <em/Required/, <em/Important/, <em/Standard/, <em/Optional/ o <em/Extra/?

<p>Ad ogni pacchetto Debian viene assegnata una <em>priorit&agrave;</em> dai manutentori
della distribuzione, come aiuto al sistema di gestione dei pacchetti. Le priorit&agrave; sono:

<list>
  <item><strong>Required (Richiesto)</strong>: pacchetti necessari al corretto
    funzionamento del sistema.
    <p>Comprendono tutti gli strumenti necessari per riparare difetti di sistema.
    Questi pacchetti non devono essere rimossi o il proprio sistema potrebbe diventare completamente
    non funzionante e probabilmente non si riuscirebbe nemmeno ad usare dpkg per
    rimettere le cose a posto. I sistemi con solo i pacchetti Required sono probabilmente
    inutilizzabili, ma hanno abbastanza funzionalit&agrave; per permettere all'amministratore di
    sistema di avviare ed installare altri programmi.
  <item><strong>Important (Importante)</strong>: pacchetti che si
  dovrebbero trovare su tutti i sistemi *nix.
    <p>Comprendono altri pacchetti senza i quali il sistema non funziona
    bene o non sarebbe utilizzabile. Tra questi <em>NON</em> sono
    inclusi Emacs o X o TeX o qualsiasi altra grossa applicazione. Questi pacchetti costituiscono solo l'infrastruttura di base.
  <item><strong>Standard</strong>: pacchetti comuni su qualsiasi sistema Linux,
    compreso un ragionevolmente piccolo ma nemmeno troppo limitato
    sistema a caratteri. Sono inclusi strumenti per poter navigare nel
    web (usando w3m), inviare posta elettronica (con mutt) e scaricare
    file da server FTP.
    <p>Questo &egrave; ci&ograve; che viene installato di base se l'utente non seleziona nient'altro.
    Non include molte grosse applicazioni, ma include l'interprete
    Python e qualche software server come OpenSSH (per amministrazione
    da remoto), Exim (per la consegna della posta, anche se pu&ograve; essere
    configurato solo per la consegna locale), un server identd (pidentd)
    e lo strumento portmap RPC (<tt>portmap</tt>). Include anche della
    documentazione generica comune che pu&ograve; essere utile per la maggior
    parte degli utenti.
  <item><strong>Optional (Opzionale)</strong>: pacchetti che comprendono tutto
    quello che si pu&ograve; voler installare senza nemmeno sapere cos'&egrave;, o se non si hanno
    delle necessit&agrave; particolari.
    <p>Comprendono X, una distribuzione completa di TeX e molte applicazioni.
  <item><strong>Extra</strong>: pacchetti che o entrano in conflitto con altri
    di priorit&agrave; pi&ugrave; alta, probabilmente utili se gi&agrave; si sa a cosa servono,
    oppure hanno requisiti speciali che li rendono non adatti come "Optional".
</list>

<p>Se si fa un'installazione Debian predefinita verranno installati sul
sistema tutti i pacchetti di priorit&agrave; <strong>Standard</strong> o
maggiore. Se si selezionano attivit&agrave; predefinite si otterranno anche
pacchetti con priorit&agrave; pi&ugrave; bassa.

<p>In aggiunta, alcuni pacchetti sono marcati come <strong>Essential
(Essenziali)</strong> dato che sono assolutamente necessari per il
corretto funzionamento del sistema. Gli strumenti di gestione dei
pacchetti si rifiuteranno di rimuoverli.

<sect id="virtual">Cos'&egrave; un pacchetto virtuale?

<p>Un pacchetto virtuale &egrave; un nome generico che si applica ad ognuno dei
  componenti di un gruppo di pacchetti, che forniscono funzionalit&agrave; di
  base simili. Per esempio, entrambi i programmi <tt>tin</tt>
  e <tt>trn</tt> sono newsreader e dovrebbero quindi soddisfare
  qualsiasi dipendenza di un programma che richiede un newsreader sul
  sistema, per poter funzionare o essere utile.
Si dice quindi che entrambi forniscono il "pacchetto virtuale" chiamato
<tt>news-reader</tt>.

<p>Similmente, <tt>smail</tt> e <tt>sendmail</tt> forniscono entrambi la
funzionalit&agrave; di agente di trasporto posta. Si dice quindi
che fornisco il pacchetto virtuale "mail transport agent".
Se uno qualsiasi dei due &egrave; installato, allora ogni pacchetto che dipende
  dall'installazione di un <tt>mail-transport-agent</tt> vedr&agrave; le
  proprie dipendenze soddisfatte dall'esistenza di questo pacchetto virtuale.

<p>Debian fornisce un meccanismo in modo che, se pi&ugrave; di un pacchetto che fornisce
lo stesso pacchetto virtuale &egrave; installato su di un sistema, l'amministratore
di sistema pu&ograve; allora impostarne uno come pacchetto preferito. Il relativo comando
&egrave; <tt>update-alternatives</tt> ed &egrave; descritto pi&ugrave; in dettaglio in
<ref id="diverse">.

<sect id="depends">Cosa significa dire che un pacchetto <em/Dipende/ da,
  <em/Raccomanda/, <em/Suggerisce/, <em/Va in conflitto/ con,
  <em/Sostituisce/, <em/Rompe/ o
  <em/Fornisce/ un altro pacchetto?

<p>Il sistema dei pacchetti Debian ha una serie di "dipendenze" dei pacchetti
che sono pensate per indicare (con un singolo termine) il livello a cui,
su un dato sistema, un determinato Programma A pu&ograve; funzionare
  indipendentemente dall'esistenza di un Programma B.
<list>
  <item>Il pacchetto A <em>dipende</em> dal Pacchetto B se B deve essere
    assolutamente installato per eseguire A. In alcuni casi, A dipende non solo
    da B, ma da una versione di B. In questo caso la dipendenza dalla versione &egrave;
    solitamente un limite inferiore, nel senso che A dipende da qualsiasi versione di B pi&ugrave; recente di quella specificata.
  <item>Il pacchetto A <em>raccomanda</em> il Pacchetto B se il manutentore
    del pacchetto giudica che la maggior parte degli utenti non vorrebbe A senza
    le funzionalit&agrave; fornite da B.
  <item>Il pacchetto A <em>suggerisce</em> il Pacchetto B se B contiene file
    attinenti alle funzioni di A (e che solitamente le migliorano).
  <item>Il pacchetto A <em>va in conflitto</em> con il Pacchetto B quando A non &egrave;
    in grado di funzionare se B &egrave; installato sul sistema. Molto spesso i conflitti
    si hanno quando A contiene dei file che rappresentano dei miglioramenti di quelli
    in B. Spesso "va in conflitto" &egrave; associato a "sostituisce".
  <item>Il pacchetto A <em>sostituisce</em> il Pacchetto B quando i file installati
    da B vengono rimossi e (in alcuni casi) sovrascritti dai file di A.
 <item>Il pacchetto A <em>rompe</em> il pacchetto B quando non &egrave;
    possibile configurare simultaneamente entrambi i pacchetti su un
    sistema. Il sistema di gestione dei pacchetti si rifiuta di
    installare uno se l'altro &egrave; gi&agrave; installato e
    configurato sul sistema.
  <item>Il pacchetto A <em>fornisce</em> il Pacchetto B quando tutti i file e le
    funzionalit&agrave; di B sono incorporate in A. Questo meccanismo permette agli utenti
    con limitato spazio su disco rigido di avere solo la parte del pacchetto A
    realmente necessaria.
</list>

<p>Informazioni pi&ugrave; dettagliate sull'utilizzo di ognuno di questi termini possono
essere trovate nel manuale Policy, sezione 7.2 "Binary Dependencies"
  (vedere <ref id="debiandocs">).

<sect id="pre-depends">Cosa significa Pre-Depends?

<p>"Pre-Depends" &egrave; una dipendenza speciale. Per la maggior parte dei pacchetti,
<tt>dpkg</tt> spacchetta il loro file di archivio (ovvero il loro
file <tt>.deb</tt>) indipendentemente dal fatto che i file da cui
dipendono siano o meno sul sistema. Semplificando, spacchettare vuol
dire che <tt>dpkg</tt> estrae i file da installare dall'archivio e li
mette al loro posto. Se quei pacchetti <em>dipendono</em> dall'esistenza
di qualche altro pacchetto sul sistema, <tt>dpkg</tt> si rifiuta di
completare l'installazione (eseguendo l'azione "configura"), finch&eacute; gli
altri pacchetti non sono installati. 

<p>Tuttavia, per alcuni pacchetti, <tt>dpkg</tt> si rifiuta persino di spacchettarli
finch&eacute; certe dipendenze non vengono risolte. Tali pacchetti si dice che "Pre-dipendono"
dalla presenza di altri pacchetti. Il progetto Debian aveva fornito questo meccanismo per
supportare un aggiornamento sicuro di sistemi dal formato <tt>a.out</tt> al formato
<tt>ELF</tt>, dove l'<tt>ordine</tt> in cui i pacchetti venivano spacchettati era
critico. Esistono altre situazioni di aggiornamenti estesi in cui questo metodo &egrave;
utile, per esempio pacchetti con priorit&agrave; richiesta e la loro dipendenza da libC.

<p>Come sopra, informazioni pi&ugrave; dettagliate al riguardo possono essere reperite
nel manuale Debian Policy.

<sect id="pkgstatus">Cosa significano <em/sconosciuto/, <em/installa/, <em/rimuovi/,
  <em/elimina/ e <em/blocca/ nello stato di un pacchetto?

<p>Queste etichette dei "desiderata" indicano il volere dell'utente riguardo ad un pacchetto
(come indicato dalle azioni dell'utente nella sezione "Seleziona"
 di <tt>dselect</tt> o dall'invocazione diretta di <tt>dpkg</tt>).

<p>I loro significati sono:
<list>
  <item>sconosciuto - l'utente non ha mai indicato se vuole il pacchetto;
  <item>installa - l'utente vuole che il pacchetto sia installato o aggiornato;
  <item>rimuovi - l'utente vuole che sia rimosso il pacchetto, ma non i
    file di configurazione esistenti;
  <item>elimina - l'utente vuole che il pacchetto sia completamente rimosso, compresi
    i file di configurazione;
  <item>blocca - l'utente non vuole che il pacchetto sia processato, ovvero
    vuole mantenere la versione attuale con lo stato attuale, qualunque essi siano.
</list>

<sect id="puttingonhold">Come blocco un pacchetto?

<p>Esistono tre modi per bloccare (hold) pacchetti, con dpkg, aptitude o dselect.

<p>Con dpkg, si deve solo esportare la lista delle selezioni dei pacchetti con:
  <example>dpkg --get-selections \* > selezione.txt</example>
Poi modificare il file risultante <file/selezione.txt/, cambiando la riga
contenente il pacchetto che si desidera bloccare, per esempio <package/libc6/, da questo:
  <example>libc6                                           install</example>
a questo:
  <example>libc6                                           hold</example>
Salvare il file e ricaricarlo nel database di dpkg con:
  <example>dpkg --set-selections < selezione.txt</example>

<p>Con aptitude, si pu&ograve; bloccare un pacchetto usando
  <example>aptitude hold nome_pacchetto</example>
   e rimuovere il blocco con
  <example>aptitude unhold nome_pacchetto</example>

<p>Con dselect, si deve entrare nella schermata [S]eleziona, trovare
il pacchetto che si desidera bloccare nel suo stato attuale e premere il tasto "=" (o
"H"). Le modifiche diverranno attive immediatamente dopo che si &egrave; usciti
  dalla schermata [S]eleziona.

<sect id="sourcepkgs">Come si installa un pacchetto sorgente?

<p>I pacchetti sorgente Debian non possono realmente venire "installati", vengono solo
spacchettati in qualsiasi directory in cui si vogliano compilare i pacchetti binari che producono.

<p>I pacchetti sorgente sono distribuiti sulla maggior parte dei mirror dove si
possono ottenere i pacchetti binari. Se si imposta il proprio
<manref name="sources.list" section="5"> di APT per includere le righe "deb-src"
appropriate, si sar&agrave; in grado di scaricare facilmente qualsiasi pacchetto sorgente
eseguendo

  <example>apt-get source pippo</example>

<p>Per aiutare nella reale compilazione del pacchetto sorgente, i pacchetti
sorgente Debian forniscono il cosiddetto meccanismo di dipendenze di compilazione.
Significa che il manutentore del pacchetto sorgente mantiene una lista di altri
pacchetti che sono richiesti per compilare il loro pacchetto. Per
vedere come questo sia utile, si esegua

  <example>apt-get build-dep pippo</example>

prima di compilare il sorgente.

<sect id="sourcebuild">Come si compilano pacchetti binari da un pacchetto sorgente?

<p>Il metodo consigliato &egrave; usare vari strumenti wrapper. Mostreremo come
  farlo usando gli strumenti <tt>devscripts</tt>. Installare questo
  pacchetto se non &egrave; ancora stato fatto.

<p>Ora, come prima cosa recuperare il pacchetto sorgente:

 <example>apt-get source pippo</example>

e spostarsi nell'albero dei sorgenti:

 <example>cd pippo-*</example>

Poi installare le dipendenze di compilazione necessarie (se ce ne sono):

 <example>sudo apt-get build-dep pippo</example>

Creare quindi una versione dedicata della propria compilazione (in modo
 da non confondersi successivamente quando Debian stessa rilascer&agrave; una
 nuova versione)

 <example>dch -l local 'Bla bla bla'</example>

Da ultimo compilare il proprio pacchetto

 <example>debuild -us -uc</example>

Se tutto ha funzionato a dovere, dovrebbe essere ora possibile
 installare il proprio pacchetto eseguendo

 <example>sudo dpkg -i ../*.deb</example>

<p>Se si preferisce fare le cose a mano, e non si vuole usare
<tt>devscripts</tt>, seguire la procedura seguente:</p>

<p>Si avr&agrave; bisogno di tutti i file pippo_*.dsc, pippo_*.tar.gz e pippo_*.diff.gz per compilare
i sorgenti (nota: non c'&egrave; nessun .diff.gz per alcuni pacchetti che sono
  nativi di Debian).

<p>Una volta che li si ha (<ref id="sourcepkgs">), se si ha il pacchetto
<package/dpkg-dev/ installato, il seguente comando:
  <example>dpkg-source -x pippo_versione-revisione.dsc</example>
estrarr&agrave; il pacchetto in una directory denominata <tt>pippo-versione</tt>.

<p>Se si vuole solo compilare il pacchetto, si pu&ograve; entrare nella directory
<tt>pippo-versione</tt> e lanciare il comando
  <example>dpkg-buildpackage -rfakeroot -b</example>
per compilare il pacchetto (si noti che questo richiede anche il pacchetto
<package/fakeroot/), e poi
  <example>dpkg -i ../pippo_versione-revisione_arch.deb</example>
per installare il pacchetto appena compilato.

<sect id="creatingdebs">Come ci si crea pacchetti Debian da s&eacute;?

<p>Per maggiori dettagli al riguardo si legga la New Maintainers' Guide,
disponibile nel pacchetto <package/maint-guide/ o su
<url id="http://www.debian.org/doc/devel-manuals#maint-guide">.
