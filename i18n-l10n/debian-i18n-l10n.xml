<?xml version="1.0"?>
<!-- $Id: debian-i18n-l10n.xml,v 1.1 2006-04-23 04:33:17 jfs Exp $ -->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "/usr/share/sgml/docbook/dtd/xml/4.2/docbookx.dtd">

<book>
  <title>Internationalization and localization in Debian</title>
  <titleabbrev>Debian i18n-l10n</titleabbrev>
  <bookinfo>
    <title>Internationalization and localization in Debian</title>
    <author>
      <firstname>Javier</firstname> <surname>Fernández-Sanguino
	Peña</surname>
      <affiliation>
	<orgname>The Debian Project</orgname>
	<address><email>jfs@debian.org</email></address>
      </affiliation>
    </author>
    <author>
      <firstname>Christian</firstname> <surname>Perrier</surname>
      <affiliation>
	<orgname>The Debian Project</orgname>
	<address><email>bubulle@debian.org</email></address>
      </affiliation>
    </author>
    
    <date>March 2006</date>
    <copyright>
      <year>2006</year>
      <holder>Christian Perrier, Javier Fernandez-Sanguino</holder>
    </copyright>
    <legalnotice>
      <para>
        This book is distributed under the terms and conditions of GPL
        version 2 or later.
      </para>
    </legalnotice>
    <abstract>
      <para>
	Debian GNU/Linux is one of the most ambicious free software
	project, putting together a large number of developers from
	all around the world working in building a free operating
	system.
      </para>
      <para>This document describes the approach to internationalization
      and localization within the Debian project, describing the
      current infrastructure and tools available to both translators and
      packag maintainers.
      </para>
      <para>
       Keywords: free software, translation, internationalization,
       localization, operating system
      </para>
    </abstract>

  </bookinfo>


  <chapter id="intro">
    <title>Introduction</title>

    <para>The following document describes the approach taken for
    handling internationalization and localization in the Debian
    project describing the infrastructure, and tools available for
    translators and package maintainers as well as the work done by
    the different translation team members</para>

    <section><title>English as an universal language</title>

      <para>English is the official language of most of the existing
	free software projects. This language has become, throughout
	the 20th century, the <emphasis>international</emphasis> language and this
	is a reality that affects users of free software and, in
	general, users of information systems. This is the main reason
	why program interfaces present their messages in english and
	most documentation available is written in english.</para>

      <para>Obviously, a single common language helps coordinating
      work of multiple developers world wide and helps people exchange
      their ideas (even if non-native speakers might have trouble on
      some occasions). However, users demand that the environments
      they work in are adapted to their native languages. 
      </para>

    </section>

    <section><title>The importance of translations</title>

    <para>TBD</para>
    
    <itemizedlist>

    <listitem><para>In order to have a <emphasis>universal</emphasis>
    operating system it needs to be usable:</para>

    <itemizedlist>
    <listitem><para>in the user's language</para></listitem>
    <listitem><para>representing properly the user's language characters
    (accents, graphisms...)</para></listitem>
    </itemizedlist>
    </listitem>

    <listitem><para>users need to use it, but also:</para>
    <itemizedlist>
    <listitem><para>read information about it (documentation)</para></listitem>
    <listitem><para>ask other's for help (mailing lists or forums)</para></listitem>
    </itemizedlist>   
    </listitem>

     </itemizedlist>

     </section>

    <section>
      <title>The internationalization and localization process</title>

      <para>Internationalization is the process that makes a program
      be capable of providing a user a computing environment adapted
      to his own language, currency, date and time formats, etc. Most
      users of a similar background will share an environment and this
      translates itself in a number of common environments that a
      program has to support. The term internationalization is often
      abbreviated to i18n.</para>

      <para>Even if a piece of software is ready to use different
      environments it does not mean that it can do so, since somebody
      (typically people that use that environment) need to adapt it so
      that it presents the users in their own language. This process
      of adapting the software to a specific environment is called
      localization. Localization is typically focused on the translation of
      each and every message that the program can handle (and uses in
      the user interface, such as menus, or buttons). Localization is
      typically abbreviated to l10n.</para>

      <para>This document will not try to explain the different issues
      regarding localization and associated with the representation of
      different code pages. This is an important issue specially for
      environments that do not use the occidental code pages (ASCII
      character set and ISO-8859). More information on this topic can
      be found in <ulink
      url="http://www.debian.org/doc/manuals/intro-i18n">Introduction
      to i18n</ulink>.</para>

 </section>


  </chapter>

  <chapter id="i18n_l10n_projects">
    <title>i18n/l10n projects in Debian</title>


    <para>Debian has different ongoing process to permit the
  internationalization of the software it develops as well as to allow
  translators to work on the localization of content produced for
  Debian. This chapter explains the different i18n and l10n projects
  available.</para>

  <section id="web">
    <title>Translation of the Debian website</title>

    <para>A project website is many times used as the primary
    information source for the both the users of a program and to
    people that want to learn about it but don't use it
    yet. Information at a project's website complements the
    documentation available through other means and compliments
    it. Information in the project's websites is typically more up to
    date that the documentation provided when the software was
    installed or the media it was provided in was purchased.</para>

    <para>Consequently, a project's website must be part of the
    internationalization and localization process of a universal
    project.</para>

    <para>In order to present translated information, the Debian
    project website uses <emphasis>Content Negotiation</emphasis>
    technology (more speficially, <ulink
    url="http://www.apache.org/docs/content-negotiation.html">Apache's
    content negotiation</ulink>) that is based on the user's web
    browser providing information on favoured languages
    (<emphasis>Preferred-Language</emphasis> HTTP header),so that the
    website software can forward it a copy of the content translated
    to his native language (if there is one available). More
    information is available in <ulink
    url="http://www.debian.org/intro/cn">description of content
    negotiation</ulink> at the Debian website.</para>

    <para>In this way, server administrators can have both the
    original document (typically in english) and multiple
    translations. The user will be shown the translated version for a
    given URL if available.</para>

    <para>Translations for the web server are being done for 33
    languages, although only 10 have more than 500 pages translated
    out of over 3000 available pages, and only 5 have translated more
    than 50% of the site. It is one of the most active areas in
    where translations teams work at.</para>

    <para>The web server is based on content managed by the
    <command>wml</command> program which allow separation of templates
    and content and also provide a mechanism to generate content
    within the pages on <emphasis>compile</emphasis>. Wml is to HTML
    what a C source is to its object code.</para>

    <para>Most of the information of the web server is available in a
    directory tree, handled through CVS (at cvs.debian.org). In that
    tree there is a directory for every language that the website is
    translated to. In principle, all the languages follow the
    directory hierarchy defined in the english pages although,
    depending on the actual content translated, the contents of each
    subdirectory within a language might vary. There is also an
    specific location for translation teams content which are not
    translations but, rather, specific content written on the
    translation team's main language. The mechanism for generating the
    pages is based on <command>Makefile</command> in such a way that
    all the wml files in a given directory are compiled and published
    similarly. Through the use of included files translators need not
    care about the content of the Makefile files themselves.</para>

    <para>Thanks to the independence of real contect to aesthetic
    information translators can just take the original (english) wml
    files, move them to their own directories and translate them. The
    templates that generate the website itsef need not be translated
    unless requiered. The templates use wml's internationalization
    tools and <command>gettext</command> to translate the translatable
    information including buttons, menus and texts included in all the
    pages (such as headers and footers).</para>

    <para>One of the main concerns for translations is the capability
    to be able to detect if the original file has been updated and,
    thus, requires the translated content to be updated. Also, since the web
    server will provide only (through content negotiation) the
    translation and it is not aware that content migth have been
    updated in the engllish page it might happen that users of a given
    language are, sometimes, provided out of date information. This
    issue would not exist if the translation is pulled off when it is
    out of date, since the web server would just provide the default
    language (english) to the user. However, many changes to the
    website are not fundamental changes or are typo fixes to the
    original document, it would seem senseless to provide the original
    document in these situations since the translation (even if out
    of date) would still be useful to the website readers.</para>

    <para>To prevent this issue, the website development team
    implemented a mechanism to detect out of date translations based
    on <emphasis>translation headers</emphasis>. These headers are
    included in translated documents and describe which original file
    they translated, specifying the CVS revision used. The use of this
    header makes it possible to introduce several tools to manage
    translations:</para>

    <itemizedlist>

    <listitem><para>an automatic program that can be run in the
    directory tree and provide a translator with a list of documents
    that have not been updated for a given language. This is done
    through the comparison of the current CVS revision of the original
    file and the CVS revision that the translated document states it
    used to base the translation off.</para></listitem>

    <listitem><para>a wml toolkit that, at the same time that pages
    are compiled (once a day), checks if the wml file being handled is
    a translation and, if it is, if it is out of date. Based on this
    information it introduces a predefined text in the output document
    telling the reader that the translation is not up to date and
    points to the original translation (the text varies based on how
    out of date the translation is. This same tools will also add a
    footer to all pages to list the translations available for
    them.</para></listitem>

    </itemizedlist>

     <para>More information is available at <ulink
     url="http://www.debian.org/devel/website/translating">in the
     website development reference</ulink> .
     </para>

    <para>There are other tools, based on this mechanism, that provide
    <ulink url="http://www.debian.org/devel/website/stats/">statistics
    of the translation effort</ulink> and <ulink
    url="http://people.debian.org/~peterk/outdated/">statistics on
    out of date translations</ulink><footnote><para>Translations that are 
    out of date for more than six months are automatically removed,
    regardless of 
    <ulink
    url="http://lists.debian.org/debian-www/2004/01/msg00323.html"/></para>
    </footnote>.</para>

    <para>Since translations will typically go behind the translated
    content in an active website this mechanism provides a way for
    translators to work on translations at their own pace while
    providing users reading the content a way to detect out of date
    translations and be able to switch to the english version if
    needed be.</para>


  </section>

  <section id="programs">
    <title>Programs translation</title>

  <para>TBD</para>

<!-- TODO: translate -->
      <para>Éste no es el único esfuerzo de internacionalización
      <emphasis>interno</emphasis> de los contenidos de Debian. Dentro
      de los sistemas básicos de Debian también se van incluyendo
      capacidades de internacionalización. Los sistemas de instalación
      (<command>dinstall</command>), de gestión de paquetes
      (<command>dpkg</command>,<command>dselect</command>), de gestión
      de menús (paquete <emphasis>menu</emphasis>) y de presentación
      de notas (<command>debconf</command>) también han sido
      internacionalizados de forma que, por ejemplo, la instalación
      completa de un sistema operativo Debian GNU/Linux y su
      actualización pueda ser realizada íntegramente en el idioma del
      usuario.</para>

  </section>

  <section id="debconf">
    <title>Debconf translation</title>

<!-- TODO: review -->
  <para>Debconf translations covers the translation of all interactions with
the system administrator while installing packages (or the entire
system).</para>

<section><title>Maintainers work - internationalization</title>

<para>The Debian policy recommends using the debconf protocol for user
interaction. This allows to present information in a standardized way
and also allows localization of user interaction.</para>

<para>This requirement could even become mandatory in the future. This was
mentioned for Etch but unfortunately noone really cared proposing the
required changes to the policy for this to take place.</para>

<para>Debconf translations involve the po-debconf package which has now
become a standard in Debian. Even though not mandated by the policy,
all packages using debconf for user interaction should use po-debconf.</para>

<para>The details of po-debconf are well covered in its man page
(po-debconf(7)). In short, translatable material (Description, Choices
and Default fields) should be prepended with the underscore character
in the debconf templates file to be included in the translatable material.</para>

<para>The debconf-updatepo gathers all the translatable material in a
Portable Object Template file (POT file) located in debian/po in the package build tree.
This templates file is then used as a reference by translators to
create a Portable Object file for their languages, using the language
ISO 639 code.</para>

<section><title>Style consistency</title>

<para>Users will often see several debconf screens in a row. Using a
consistent writing style and templates presentation considerably
improves the perception of professionalism in the overall Debian
distribution.</para>

<para>Unfortunately, the original English strings very often lack this
consistency and, despite some efforts in the Developer's Reference to
give maintainers advices about debconf templates wirting style, the
often vary in the way they address users:</para>

<itemizedlist>
<listitem><para>use of first person</para></listitem>
<listitem><para>use or not of interrogative form for input-style templates</para></listitem>
<listitem><para>repeated interrogative form in long and short description of templates</para></listitem>
<listitem><para>various enumeration styles</para></listitem>
<listitem><para>use of specific reference to some of the debconf interface specific
 widgets or behaviour (talking about "previous" or "next" screens,
 assuming that boolean templates use Yes/No style questions, etc.)</para></listitem>
</itemizedlist>

<para>In general, maintainers should follow translators advices when they
suggest improvements to original templates.</para>

</section>
<section><title>Repetitive strings</title>

<para>Many user interaction in debconf templates often involves similar
questions or input such as web server configuration for packages that
provide web services, database interactions for RDBMS-related packages
or packages that use databases, etc.</para>

<para>Packages aimed at providing common methods as well as common debconf
templates for such use, such as the "dbconfig-common" package,
recently appeared in the Debian distribution.</para>

<para>Maintainers are encouraged to use these packages and help improving
them for better quality and efficiency. The use of the debconf
"register" commands is also encouraged in some cases, when a package
may need to use strings or templates provided by another package.</para>

</section>
<section><title>Translations maintenance - localization
assistants</title>

<para>The part of this paper which deals with Debian specific programs
i18n/l10n (see FIXME) introduces the concept of "localization
assistants".</para>

<para>As the maintenance of debconf translations is usually very simple,
this paper does not enforce the use of localization asisstants, except
in the case of packages with a high number of templates and/or
packages listed a top priority packages for translators (Debian
Installer "levels" packages or very popular packages).</para>

<para>In case the maintenance of debconf translations becomes a hassle for
them, package maintainers are encouraged to cooperate with a
localization assistant, however. The FIXME debian-i18n mailing list is
the entry point that should be used to "recruit" localization assistants.</para>

</section>

</section>

<section><title>Translation work - localization</title>

<section><title>Getting translation material</title>

<para>Of course debconf translation material may be grabbed by downloading
each package source and go to the debian/po directory. However,
translators are encouraged to use links from the translation
statistics pages (FIXME: URL).</para>

</section>
<section><title>Priorities</title>


<para>The number of Debian packages with translatable material for debconf
is pretty important. As of this writing there are FIXME packages with
translatable debconf material and about 10000 strings to translate.</para>

<para>Recent changes to the translation statistics pages now allow sorting
packages by their popularity, using data from the popularity-contest
package.</para>

</section>
<section><title>Statistics</title>

<para>Statistics for debconf translations are gathered on the Debian l10n
status pages and are separated from the programs translation
statistics. These pages also give access to the translation material
collected by the statistics robot operated by the Debian i18n team.</para>

</section>
<section><title>Translation</title>

<para>The typical use is copying the templates.pot file to
&lt;code&gt;.po, fill this file's header with appropriate information and
then use a Portable object editing tool (or any text editor) to fill
in the translations for all strings.</para>

</section>

<section><title>Checking translations</title>

<para>Translators can test the debconf PO files by using the
podebconf-display-po tool from the po-debconf package. This requires
them to install this package on their system.</para>

<para>A locale for the tested language must be built on the system (which
can be achieved by "dpkg-reconfigure locales") and the LC_MESSAGES
variable should be set to this locale.</para>

<para>It is recommended to test the debconf templates by using the debconf
dialog interface in a 80x25 screen.</para>

<para>podebconf-display-po has a few quirks, especially when some strings
are shared among several templates, so it should not be relied on
blindly but it has already proven a great helper to detect formatting
issues.</para>

</section>

<section><title>Style consistency</title>

<para>For translation just like original strings, a consistent writing style
is important to give a feeling of professionnal quality.</para>

<para>Even though, most often, the original English strings may lack this
consistency, the translators can greatly help package maintainers to
improve it and achieve overall good consistency among
English strings by reporting such style errors as bug reports against
the relevant packages.</para>

<para>Translators themselves should enforce consistency in their translation
work. So, even if original strings do not follow writing style
recommendations, translators should adapt their translation to be
consistent in their language.</para>

<para>Translation teams and translation teams QA work have indeed a great
role to play in this overall consistency improvement, because they
play the role of a general review process for debconf templates.</para>

<section><title>Sending new translations and translation updates to maintainers</title>

<para>Translators should send debconf translation updates to maintainers by
using the Bug Tracking System, even when this is not clear in the
maintainer's request if the update is triggered by a maintainer using
an automated tool to call for updates. Such bug reports should use the
"l10n" and "patch" tags.</para>

<para>They should be filed against the *source* package rather than binary packages.</para>

<para>The use of the reportbug utility is recommended.</para>

<para>Common practice is sending these bug reports with severity "wishlist".</para>

<para>Another common practice is using a standardized bug title: "&gt;package&lt;:
[intl:&lt;code&gt;] &lt;Language&gt; debconf templates translation", where
&lt;package&gt; is the source package name, &gt;code&lt; the language ISO code and
&gt;Language&lt; is the language name in English.
</para>

</section>

</section>

</section>

</section>

<!-- jfs: DDP+installer+manpages -->
  <section id="documentation">
    <title>Translation of documentation</title>

  <para>TBD: Extract from previous document</para>

<!-- TODO: translate -->
      <para>De igual forma, dos de los proyectos de
	internacionalización (el francés y el español) incorporan
	actualmente un sistema de gestión de la documentación
	traducida correspondiente al Proyecto de Documentación de
	Debian. En este caso, los proyectos de internacionalización
	gestionan una base de datos que incorpora los documentos
	disponibles en dicho proyecto y la situación de las
	traducciones. Utilizando éste sistema de gestión es posible
	automatizar el hecho de que cuando un documento que está en
	estado de <quote>actualizado</quote>, al ser modificado a
	través del sistema de control de versiones pase a un estado
	<quote>pendiente de ser actualizado</quote>. Sin embargo, este
	sistema de gestión aún está por incorporarse al propio sistema
	de gestión de documentación y a los demás idiomas para evitar
	duplicidades en cada una de las bases de datos.
	</para>

  </section>

  <section id="ddtp">
    <title>DDTP</title>

<!-- TODO: translate -->
  <para>TBD</para>
      <para>Otra de las grandes tareas abordadas por los proyectos de
      internacionalización de Debian es el trabajo de traducción de
      las descripciones del software ofrecido dentro del sistema
      operativo.  Todo paquete de software en Debian GNU/Linux viene
      acompañado de dos descripciones. Una corta (menor de ochenta
      caracteres) que indica, brevemente, el contenido del paquete. Y
      otra, de contenido variable, que expresa las funcionalidades del
      software que incluye, sus características, etc.  Esta
      información es de vital importancia para que el usuario en busca
      de una determinada funcionalidad pueda buscarla utilizando
      algunas de las herramientas específicas diseñadas para buscar en
      esta base de datos. Sin embargo, el hecho de que todas estas
      descripciones estén en inglés dificulta el proceso de búsqueda
      de software por parte de un usuario no nativo ya que, aún
      disponiendo de un interfaz sobre el que poder hacer consultas
      sobre ésta información, no podrá precisar los términos de la
      búsqueda con la misma precisión que si utilizar su idioma
      nativo.
      </para>

      <para>Para resolver este problema se inició un proyecto de
	traducción de las descripciones de los paquetes. Este
	proyecto, de hecho, fue iniciado, simultáneamente por dos
	equipos de trabajo, dando como resultado dos sistemas de
	gestión diferentes pero que actualmente están integrados entre
	sí. Bajo el nombre de <emphasis>Debian Description Translation
	Project</emphasis> (Proyecto de Traducción de descripciones de
	Debian, n. del t.)  se encuentran dos sistemas: uno mediante
	correo electrónico y otro mediante WWW.  El sistema de gestión
	de las descripciones mediante correo electrónico disponible en
	<ulink
	url="http://people.debian.org/~grisu/ddts">http://people.debian.org/~grisu/ddts</ulink>
	permite que los traductores reciban descripciones de forma
	automática y las envíen al sistema una vez traducidas. El
	sistema con interfaz web disponible en <ulink
	url="http://www.laespiral.org/ddts/">http://www.laespiral.org/ddts/</ulink>
	permite gestionar la traducción y revisión mediante un acceso
	autenticado a un servidor de WWW.  <emphasis>La
	Espiral</emphasis> también llevó a cabo un proyecto previo de
	traducción de las descripciones cortas de los paquetes Debian
	a través de un interfaz web, aunque éste proyecto ha quedado
	introducido en el mostrado anteriormente.
	</para>


  </section>

<!-- jfs : -XX packages -->
  <section id="packages">
    <title>Translation packages</title>

  <para>TBD</para>

  </section>

<!-- jfs -->
  <section id="localization_config">
    <title>Localization-config</title>

  <para>TBD</para>

  </section>

  <section id="language_tasks">
    <title>Language tasks</title>

    <para>The Debian task selection tool, called
    <command>tasksel</command> is run in every new system installation
    and allows to define a set of packages aimed for specific purposes.</para>

    <para>One widely developed used of tasksel are "language
    tasks". These are tasks that are installed dependeing on the
    installation language. They should feature sets of packages that
    are specific to the related language.</para>

    <section><title>Sets of language tasks</title>

    <para>There are currently two language tasks per language: one
    &lt;language&gt; task which depends on nothing but standard
    packages, and one &lt;language&gt;-desktop task which depends on
    the standard desktop task.</para>

    <para>Packages in language tasks can include localization packages
    for software that are installed by other tasks or by the standard
    system. For instance, the &lt;language&gt;-desktop tasks install
    localization packages for the packages that are part of the
    standard desktop task (kde-i18n-*, openoffice.org-l10n-*, etc.).</para>

    <para>These tasks can also include packages that are needed for
    the rendering of the given language: TTF or Postscript fonts for
    &lt;language&gt;-desktop tasks, console fonts for &lt;language&gt;
    tasks, etc.</para>


    </section>

    <section><title>Maintenance of language tasks</title>

    <para>Adding new language tasks should be partly automated by the
    tasksel maintenance team, ie the Debian Installer team. As soon as
    a new languages appears in the D-I supported languages, an
    equivalent language task should be added, if at least one specific
    package motivates it (for instance a localization package for on
    of the packages that are part of the desktop tasks.</para>

    <para>Translation teams and translators should also be active by
    proposing enhancement to tasks related to their language.</para>

    <para>New tasks should be reported as wishlist bug reports again
    the tasksel package.</para>

  </section>

  </section>

  </chapter>


  <chapter id="infrastructure">
    <title>i18n/l10n infrastructure in Debian</title>
  

  <section id="po-statistics">
    <title>Po Translation statistics</title>

    <para>The Debian web site features statistics web pages under
    <ulink url="http://www.debian.org/intl/l10n" />. These pages
    collect statistical data about po-debconf and programs
    translations.</para>

    <para>The statisstics are collected daily by a script run under a
    developer's account on people.debian.org (Denis Barbier account at
    the time of this writing). These statistics use material gathered
    by another script run under a developer's acocunt on
    people.debian.org (Pierre Machard at the time of this
    writing).</para>

    <para>The statistics pages help translators learn about areas that
    need work such as updates for existing translations or new
    packages/material needing translation work.</para>

    <para>The pages also help translators to grab POT files and start
    working on new translations as well as PO files and work to
    complete them.</para>

    <para>Even though this system has proven incredible useful during
    last years, it still carries a few weaknesses that prevent calling
    it an overall i18n/l10n infrastructure:</para>

    <itemizedlist>

    <listitem><para>it depends on scripts running under two
    individuals accounts </para></listitem>

    <listitem><para>it only gives statistics for the
    <emphasis>unstable</emphasis> branch of the version and thus does
    not allow to get statistics about l10n in testing during release
    preparation </para></listitem>

    <listitem><para>it does not track down the status of the work by
    translation teams and does no point the reader to the existing
    translation teams. For that reason, teams have developed their own
    tracking work method (some parts will be detailed in the next
    section. FIXME: put reference to the translation robot section
    </para></listitem>

    <listitem><para>it is not related to the bug tracking system and
    does not allow checking whethe ran incomplete or missing
    translation has a pending fix in the BTS (and for how long the fix
    is pending) or in the package develoment revision control system
    </para></listitem>

    </itemizedlist>

    <para>A way to go would be integrating all these needs in a more
    general i18n/l10n infrastructure.</para>

    </section>
  <section id="web-statistics">
    <title>Website translation statistics</title>

    <para>Statistics for the translation of the Debian web site are
    collected in a different set of pages, run by different
    scripts.</para>

    <para>FIXME: find more details here</para>

    </section>
  <section id="d-i-statistics">
    <title>Debian installer translation statistics</title>
    
    <para>In order to track down issues more closely, the Debian
    Installer i18n coordinators has setup translation statistics pages
    which gather the status of l10n for all core D-I packages as well
    as packages defined as part of the D-I "levels" of translation
    (FIXME: reference to DC5 talk).</para>

    <para>These pages point to the individuals packages RCS
    directories and archives. They give translators a more accurate
    view of work to do and immediately reflect applied changes.</para>

    <para>They could be enhanced in a few ways:</para>

    <itemizedlist>

    <listitem><para>integrate them in the main web site. The status
    pages are generated by scripts running under Dennis Stampfer
    account. These scripts are not publicly visible and setting a new
    location for the pages would require Dennis expertise
    </para></listitem>

    <listitem><para>revamp the pages to make the main page less
    verbose. There is currently a big amount of information on this
    page and it should be redisigned as a whole web site...or
    integrated into a more general i18n infrastructure
    </para></listitem>

    <listitem><para>allow getting statistics about all components in
    their own RCS trees, in unstable and in testing. This would allow
    getting a better picture of the real l10n status for releases of
    D-I </para></listitem>

    </itemizedlist>

    <para>A way to go could actually be integrating these requirements
    in a more general i18n/l10n infrastructure.</para>

  </section>

  <section id="translation_robots">
    <title>Translation robots</title>

  <para>TBD</para>

  </section>


  </chapter>

  <chapter id="tools">
    <title>i18n/l10n tools in Debian</title>
  
  <section id="generic_tools">
    <title>Generic tools: gettext</title>

  <para>TBD</para>

<!-- TODO: translate -->
      <para>Para llevar a cabo la internacionalización del entorno del
	usuario, el proyecto GNU ha desarrollado una serie de
	herramientas. Por un lado, está la definición de
	<quote>locale</quote> que es parte de POSIX.2 y que está
	implementada en la librería <command>libc</command> de
	GNU. Estas definiciones realizan las tareas básicas de
	representación de formatos de moneda, fecha o número. Pero
	también las tareas de ordenación y clasificación de códigos de
	acuerdo con la cultura del usuario (por ejemplo, el orden de
	las letras en el alfabeto). Este aspecto sólo es necesario
	definirlo una vez ya que, una vez cubiertas todas las reglas
	de formatos necesarias así como las definiciones asociadas a
	los mapas de caracteres, éstas no van a variar con el tiempo
	(salvo detección de problemas o introducción de nuevos idiomas).
	</para>

      <para>
	Un aspecto, sin embargo, más variable dentro de la
	internacionalización de programas, es la traducción de los
	mensajes que presenta un determinado programa al usuario. No
	sólo los mensajes que puedan aparecer en el interfaz gráfico,
	por ejemplo, sino todo tipo de mensajes de error que genere el
	programa, ayuda en las opciones al ejecutarse, etc.
      </para>
      <para>
	La herramienta GNU para la internacionalización de mensajes en
	programas es Gettext. Esta herramienta, desarrollada entre
	1994 y 1995 por un grupo variado de programadores, facilita la
	creación de programas que pueden distribuirse con múltiples
	catálogos de mensajes en distintos idiomas. Posteriormente, en
	entornos localizados, los programas pueden presentar los
	mensajes correspondientes al entorno declarado por el usuario.
      </para>
      <para>
	Esta herramienta es relativamente transparente al programador,
	ya que sólo tiene que marcar los mensajes que cree que deben
	traducirse. Asimismo, la modificación del código fuente y
	reubicación de los mensajes es relativamente transparente al
	traductor, que sólo tiene que mantener actualizado un listado
	de traducciones de los mensajes. Las herramientas de gettext
	se encargan, por debajo, de homogeneizar los catálogos y
	modificar éstos cuando las fuentes cambian, pero preservando
	las traducciones ya realizadas.
      </para>
      <para>
	De esta forma, el trabajo de traducción de los mensajes de un
	programa se reduce a una traducción inicial de todos los
	mensajes y al mantenimiento de los pequeños (o grandes)
	cambios en el código que puedan suponer la introducción (o
	desaparición) de mensajes. Y el trabajo del programador se
	limita a incorporar las funciones necesarias en su
	programa. Una vez hecho esto, el trabajo de ambos grupos puede
	proceder por separado, lo cual facilita el desarrollo en ambos
	sentidos. Es decir, un traductor no tiene que depender del
	programador para incorporar un nuevo idioma y un programador
	no depende del esfuerzo de traducción para la generación de
	nuevas versiones de su programa.
      </para>

      <para>
	  Se puede encontrar más información, en <ulink
url="http://www.gnu.org/software/gettext/gettext.html">las páginas
oficiales de Gettext</ulink>.  Si se tiene instalado el software de
gettext, también dispondrá de la ayuda en línea, que se podrá
consultar ejecutando <command>info gettext</command>.
      </para>

      <para>
	La traducción de mensajes, utilizando gettext, es muy
	sencilla.  Basta coger un fichero .po traducido parcialmente y
	rellenar los "huecos" que falten. Este hecho, en el mundo GNU
	lleno de personas de muchas capacidades distintas dispuestas a
	colaborar, garantiza la posibilidad de colaborar y de formar
	parte de un equipo de traducción a los propios usuarios.  Así
	pues, uno de los logros de la librería gettext es que
	cualquier persona, con unos mínimos conocimientos, pueda
	colaborar en la internacionalización de los programas
	derivados del software libre. No siendo necesario ser un
	desarrollador de programas, ni una persona experta en
	programación para llevar estas tareas a cabo. Ya que, para mantener
	un fichero .po al día sólo es necesario conocer el idioma
	original del texto y el idioma final de la traducción.
      </para>

<sidebar>
<title>&dash; Ejemplo de fichero po</title>
	<literallayout width="80">
# Copyright (C) 1999 Free Software Foundation, Inc.
# Javier Fernández-Sanguino Peña&lt;jfs@computer.org&gt;, 1999.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 1999-06-21 14:21+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Javier Fernández-Sanguino Peña &lt;jfs@computer.org&gt;\n"
"Language-Team: ES &lt;ES@li.org&gt;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: ENCODING\n"

#: hello.c:86
#, c-format
msgid "Usage: %s [-htvm] [--help] [--traditional] [--version] [--mail]\n"
msgstr "Modo de uso: %s [-htvm] [--help] [--traditional] [--version] [--mail]\n"
#: hello.c:148
msgid "This is GNU Hello, THE greeting printing program.\n"
msgstr "Este es Hola de GNU, EL programa que imprime un saludo.\n"

#
msgid "Translate this"
msgstr ""
</literallayout>
</sidebar>

      <para>
	En el proyecto GNU se dan soporte a distintos grupos de
	internacionalización que son las personas responsables de la
	traducción de los programas. Aún así no es necesario una
	dedicación permanente a estos grupos para internacionalizar un
	programa, como ya se ha visto, la internacionalización puede
	ser un esfuerzo puntual y concreto. La existencia de los
	grupos garantiza, sin embargo, la correcta revisión de estos
	trabajos puntuales que pueden realizar los usuarios, la
	elaboración de glosarios que den uniformidad a los programas
	traducidos y la actualización de las traducciones en vista a
	nuevas versiones de programas.
      </para>
      <para>
	Estos trabajo se contribuyen a través del Proyecto de
	Traducciones Libres (<emphasis>Free Translation
	  Proyect</emphasis>, n. del a.)  en
	<ulink url="http://www.iro.umontreal.ca/contrib/po/">http://www.iro.umontreal.ca/contrib/po/</ulink>.  Se puede ver el
	estado de las traducciones existe una base de datos de
	traducciones y traductores que puede consultar en
	<ulink url="http://www.iro.umontreal.ca/~pinard/po/registry.cgi?team=es">http://www.iro.umontreal.ca/~pinard/po/registry.cgi?team=es</ulink>
      </para>


  </section>

  <section id="wml">
    <title>Translation headers: wml</title>

  <para>TBD</para>

  </section>

  <section id="po4a">
    <title>Po for everything (po4a)</title>


<!-- TODO: adapt -->
  <para>TBD</para>

  <para> you can convert many common file formats into PO,
using either po4a [1] or the Translate Toolkit [2] converters. Please
see this table [3] in the Translate Wiki. If your format isn't
supported yet, write to the maintainers. ;)
Some translation editors also convert between PO and other formats.
My OSX editor, LocFactoryEditor [4], handles PO, XLIFF/XML and HTML.
You may well find your editor [5] converts some formats for you.
[1] http://po4a.alioth.debian.org/
[2] http://translate.sourceforge.net/wiki/toolkit/index
[3] http://translate.sourceforge.net/wiki/nonpo
[4] http://www.triplespin.com/en/products/locfactoryeditor.html
[5] http://translate.sourceforge.net/wiki/guide/tools/list
</para>


  </section>

  <section id="debconf-updatepo">
    <title>Debconf-updatepo and po-debconf tools</title>

    <para>Tools in the po-debconf package are mostly aimed for
    maintainers use.  The central tool is the debconf-updatepo
    utility. This utility should be run each time a change happens in
    debconf templates, i.e. most often the files names *.templates in
    the debian/ directory of the package source tree.</para>

    <para><command>debconf-updatepo</command> looks for all files
    listed in the <filename>debian/po/POTFILES.in</filename> and
    search in these files for translatable strings. Instructions on
    how to set a debconf string as translatable are given in the
    po-debconf(7) man page. This can be summarized as "just put an
    underscore character before the field names".</para>

    <para>All translatable strings are written by <command>debconf-updatepo</command> in a
    "template file" named <filename>debian/po/templates.pot</filename>. In the same time, all
    PO files that are present in <filename>debian/po</filename> are updated with regards of the
    new strings.</para>

    <para>Changed strings are marked <emphasis>fuzzy</emphasis> (thus
    keeping the old translation) or
    <emphasis>untranslated</emphasis>. Iin such case, the old
    translation is kept as <emphasis>obsolete</emphasis> entries et
    the end of the PO files.</para>

    <para>"fuzzy" strings translations are never used. When a debconf
    template includes more than one fuzzy string, the whole template
    will be shown untranslated to users.</para>

    <para>Maintainers should run <command>debconf-updatepo</command>
    as soon as they change templates. Some i18n maintainers recommend
    running it in the package clean target to ensure that all PO files
    AND the POT file are up-to-date. There is nothing worse than a
    package with obsolete files.  Some other maintainers rule against
    running <command>debconf-updatepo</command> as this is likely to
    modify files in the debian/ directory.</para>

    <para>Rebuilding the templates file that will be shipped with the
    package, as of
    <filename>debian/&lt;package&gt;/DEBIAN/templates</filename> is
    the job of <command>po2debconf</command>. This utility is
    automagically called by <command>dh_installdebconf</command>, for
    people who use debhelper tools. This is actually a very good
    argument for using debhelper tools for packages that use debconf.</para>

    <para>The final templates file uses the encoding defined in
    <filename>debian/po/output</filename>. The default value is
    "utf8". It is highly recommended to use "utf8" in all cases. There
    is actually no good reason to use anything else. This will not
    affect the way the templates will be displayed, even in non UTF-8
    environments.</para>

    <section><title>The podebconf-report-po utility</title>

    <para>The <command>podebconf-report-po</command> utility is aimed
    to send notices about needed updates to all translators who have
    incomplete files (at least one fuzzy or untranslated string).</para>

    <para>Using it before uploading a package with modified templates
    is strongly recommended. Translators do not really like to
    discover changes and needed updates after a package has been
    uploaded.</para>

    <para>When using this utility, maintainers should remember that
    many translation teams need time for their internal QA processes
    to take place. Leaving only a few days for translators to update
    their work, especially when important changes occurred, is nearly
    similar to a call for bad translations.</para>
    </section>

  </section>

  <section id="doc-check">
    <title>Documentation's doc-check</title>

  <para>TBD</para>

  </section>


  <section id="bts">
    <title>Use of the BTS for translation work</title>

  <para>TBD</para>

  </section>

  </chapter>


  <chapter id="other_projcets">
    <title>Relationship with other projects</title>

  <para>TBD</para>

  <section id="translation_packaging">
    <title>Translation packaging</title>

  <para>TBD</para>

  </section>

  <section id="bug_reports_upstream">
    <title>Handling of bug reports for upstream translations</title>

  <para>TBD</para>

  </section>


  <section id="lousy_translations">
    <title>Handling of errors in translations</title>

  <para>TBD</para>

  </section>

  </chapter>

</book>