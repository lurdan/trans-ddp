<?xml version="1.0"?>
<!-- $Id: debian-i18n-l10n.xml,v 1.3 2006-04-23 04:36:13 jfs Exp $ -->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "/usr/share/sgml/docbook/dtd/xml/4.2/docbookx.dtd">

<book>
  <title>Internationalization and localization in Debian</title>
  <titleabbrev>Debian i18n-l10n</titleabbrev>
  <bookinfo>
    <title>Internationalization and localization in Debian</title>
    <author>
      <firstname>Javier</firstname> <surname>Fernández-Sanguino
	Peña</surname>
      <affiliation>
	<orgname>The Debian Project</orgname>
	<address><email>jfs@debian.org</email></address>
      </affiliation>
    </author>
    <author>
      <firstname>Christian</firstname> <surname>Perrier</surname>
      <affiliation>
	<orgname>The Debian Project</orgname>
	<address><email>bubulle@debian.org</email></address>
      </affiliation>
    </author>
    
    <date>March 2006</date>
    <copyright>
      <year>2006</year>
      <holder>Christian Perrier, Javier Fernandez-Sanguino</holder>
    </copyright>
    <legalnotice>
      <para>
        This book is distributed under the terms and conditions of GPL
        version 2 or later.
      </para>
    </legalnotice>
    <abstract>
      <para>
	Debian GNU/Linux is one of the most ambitious free software
	project, putting together a large number of developers from
	all around the world working in building a free operating
	system.
      </para>
      <para>This document describes the approach to internationalization
      and localization within the Debian project, describing the
      current infrastructure and tools available to both translators and
      package maintainers.
      </para>
      <para>
       Keywords: free software, translation, internationalization,
       localization, operating system
      </para>
    </abstract>

  </bookinfo>


  <chapter id="intro">
    <title>Introduction</title>

    <para>The following document describes the approach taken for
    handling internationalization and localization in the Debian
    project describing the infrastructure, and tools available for
    translators and package maintainers as well as the work done by
    the different translation team members.</para>

    <section><title>English as an universal language</title>

      <para>English is the official language of most of the existing
	free software projects. This language has become, throughout
	the 20th century, the <emphasis>international</emphasis> language and this
	is a reality that affects users of free software and, in
	general, users of information systems. This is the main reason
	why program interfaces present their messages in English and
	most documentation available is written in English.</para>

      <para>Obviously, a single common language helps coordinating
      work of multiple developers worldwide and helps people exchange
      their ideas (even if non-native speakers might have trouble on
      some occasions). However, users demand that the environments
      they work in are adapted to their native languages. 
      </para>

    </section>

    <section><title>The importance of translations</title>

    <para>TBD</para>
    
    <itemizedlist>

    <listitem><para>In order to have a <emphasis>universal</emphasis>
    operating system it needs to:</para>

    <itemizedlist>
    <listitem><para>be usable in the user's language;</para></listitem>
    <listitem><para>representing properly the user's language characters
    (accents, graphisms...).</para></listitem>
    </itemizedlist>
    </listitem>

    <listitem><para>users need to use it, but also:</para>
    <itemizedlist>
    <listitem><para>read information about it (documentation);</para></listitem>
    <listitem><para>ask others for help (mailing lists or forums).</para></listitem>
    </itemizedlist>   
    </listitem>

     </itemizedlist>

     </section>

    <section>
      <title>The internationalization and localization process</title>

      <para>Internationalization is the process that makes a program
      be capable of providing a user a computing environment adapted
      to his own language, currency, date and time formats, etc. Most
      users of a similar background will share an environment and this
      translates itself in a number of common environments that a
      program has to support. The term internationalization is often
      abbreviated to i18n.</para>

      <para>Even if a piece of software is ready to use different
      environments it does not mean that it can do so, since somebody
      (typically people who use that environment) need to adapt it so
      that it may be used in the user's native language. This process
      of adapting the software to a specific environment is called
      localization. Localization is typically focused on the translation of
      each and every message that the program can handle (and uses in
      the user interface, such as menus, or buttons). Localization is
      typically abbreviated to l10n.</para>

      <para>This document will not try to explain the different issues
      regarding localization and associated with the representation of
      different code pages. This is an important issue specially for
      environments that do not use the occidental code pages (ASCII
      character set and ISO-8859). More information on this topic can
      be found in <ulink
      url="http://www.debian.org/doc/manuals/intro-i18n">Introduction
      to i18n</ulink>.</para>

 </section>


  </chapter>

  <chapter id="i18n_l10n_projects">
    <title>i18n/l10n projects in Debian</title>


    <para>Debian has different ongoing process to permit the
  internationalization of the software it develops as well as to allow
  translators to work on the localization of content produced for
  Debian. This chapter explains the different i18n and l10n projects
  available.</para>

  <section id="web">
    <title>Translation of the Debian website</title>

    <para>A project website is many times used as the primary
    information source for the both the users of a program and to
    people who want to learn about it but don't use it
    yet. Information at a project's website is usually a complement of the
    documentation available through other means.
    Information in the project's websites is typically more up to
    date that the documentation provided when the software was
    installed or the media it was provided in was purchased.</para>

    <para>Consequently, a project's website must be part of the
    internationalization and localization process of a universal
    project.</para>

    <para>In order to present translated information, the Debian
    project website uses <emphasis>Content Negotiation</emphasis>
    technology (more speficially, <ulink
    url="http://www.apache.org/docs/content-negotiation.html">Apache's
    content negotiation</ulink>) that is based on the user's web
    browser providing information on favoured languages
    (<emphasis>Preferred-Language</emphasis> HTTP header),so that the
    website software can forward it a copy of the content translated
    to his native language (if there is one available). More
    information is available in <ulink
    url="http://www.debian.org/intro/cn">description of content
    negotiation</ulink> at the Debian website.</para>

    <para>In this way, server administrators can have both the
    original document (typically in English) and multiple
    translations. The user will be shown the translated version for a
    given URL, if available.</para>

    <para>Translations for the web server are being done for 33
    languages, although only 10 have more than 500 pages translated
    out of over 3000 available pages, and only 5 have translated more
    than 50% of the site. It is one of the most active areas in
    where translations teams work at.</para>

    <para>The web server is based on content managed by the
    <command>wml</command> program which allow separation of templates
    and content and also provide a mechanism to generate content
    within the pages on <emphasis>compile</emphasis>. Wml is to HTML
    what a C source is to its object code.</para>

    <para>Most of the information of the web server is available in a
    directory tree, handled through CVS (at cvs.debian.org). In that
    tree, there is a directory for every language that the website is
    translated to. In principle, all the languages follow the
    directory hierarchy defined in the English pages although,
    depending on the actual content translated, the contents of each
    subdirectory within a language might vary. There is also an
    specific location for translation teams content which are not
    translations but, rather, specific content written on the
    translation team's main language. The mechanism for generating the
    pages is based on <command>Makefile</command> in such a way that
    all the wml files in a given directory are compiled and published
    similarly. Through the use of included files, translators do not need to
    care about the content of the Makefile files themselves.</para>

    <para>Thanks to the independence of real contect to aesthetic
    information, translators can just take the original (english) wml
    files, move them to their own directories and translate them. The
    templates that generate the website itsef need not be translated
    unless requiered. The templates use wml's internationalization
    tools and <command>gettext</command> to translate the translatable
    information including buttons, menus and texts included in all the
    pages (such as headers and footers).</para>

    <para>One of the main concerns for translations is the capability
    to be able to detect if the original file has been updated and,
    thus, requires the translated content to be updated. Also, since the web
    server will provide only (through content negotiation) the
    translation and it is not aware that content migth have been
    updated in the English page, it might happen that users of a given
    language are, sometimes, provided with out of date information. This
    issue would not exist if the translation is pulled off when it is
    out of date, since the web server would just provide the default
    language (English) to the user. However, many changes to the
    website are not fundamental changes or are typo fixes to the
    original document, it would seem senseless to provide the original
    document in these situations since the translation (even if out
    of date) would still be useful to the website readers.</para>

    <para>To prevent this issue, the website development team
    implemented a mechanism to detect out of date translations based
    on <emphasis>translation headers</emphasis>. These headers are
    included in translated documents and describe which original file
    they translated, specifying the CVS revision used. The use of this
    header makes it possible to introduce several tools to manage
    translations:</para>

    <itemizedlist>

    <listitem><para>an automatic program that can be run in the
    directory tree and provide a translator with a list of documents
    that have not been updated for a given language. This is done
    through the comparison of the current CVS revision of the original
    file and the CVS revision that the translated document states it
    used to base the translation off;</para></listitem>

    <listitem><para>a wml toolkit that, at the same time that pages
    are compiled (once a day), checks if the wml file being handled is
    a translation and, if it is, if it is out of date. Based on this
    information it introduces a predefined text in the output document
    telling the reader that the translation is not up to date and
    points to the original translation (the text varies based on how
    out of date the translation is). The same tools will also add a
    footer to all pages to list the translations available for
    them.</para></listitem>

    </itemizedlist>

     <para>More information is available at <ulink
     url="http://www.debian.org/devel/website/translating">in the
     website development reference</ulink> .
     </para>

    <para>There are other tools, based on this mechanism, that provide
    <ulink url="http://www.debian.org/devel/website/stats/">statistics
    of the translation effort</ulink> and <ulink
    url="http://people.debian.org/~peterk/outdated/">statistics on
    out of date translations</ulink><footnote><para>Translations that are 
    out of date for more than six months are automatically removed,
    regardless of 
    <ulink
    url="http://lists.debian.org/debian-www/2004/01/msg00323.html"/></para>
    </footnote>.</para>

    <para>Since translations will typically go behind the translated
    content in an active website this mechanism provides a way for
    translators to work on translations at their own pace while
    providing users reading the content a way to detect out of date
    translations and be able to switch to the English version if
    needed.</para>


  </section>

  <section id="programs">
    <title>Translation of Debian tools</title>

  <para>Interationalization of the Debian distribution also involves
  the internationalization and translation of the tools developed
  within the distribution itself. This includes the translation of the
  installation system (<command>d-i</command>), of the package
  management system tools (<command>dpkg</command>,
  <command>dselect</command>, <command>apt</command>,
  <command>aptitude</command>) of desktop menu management
  (<command>menu</command>) and other tools such as
  <command>debconf</command>.</para>

  <para>Without proper internationalization or translation of these
  tools users will not be able to use or manage the Debian GNU/Linux
  operating system fully in their native language.</para>

  <para>The following sections describe the efforts in
  internationalization and translating different parts of the Debian
  GNU/Linux distribution within the project itself</para>

  <section id="debconf">
    <title>Debconf translation</title>

<!-- TODO: review -->
  <para>Debconf translations covers the translation of all interactions with
the system administrator while installing packages (or the entire
system).</para>

<section><title>Maintainers work - internationalization</title>

<para>The Debian policy recommends using the debconf protocol for user
interaction. This allows to present information in a standardized way
and also allows localization of user interaction.</para>

<para>This requirement could even become mandatory in the future. This was
mentioned for Etch but unfortunately noone really cared proposing the
required changes to the policy for this to take place.</para>

<para>Debconf translations involve the po-debconf package which has now
become a standard in Debian. Even though not mandated by the policy,
all packages using debconf for user interaction should use po-debconf.</para>

<para>The details of po-debconf are well covered in its man page
(po-debconf(7)). In short, translatable material (Description, Choices
and Default fields) should be prepended with the underscore character
in the debconf templates file to be included in the translatable material.</para>

<para>The debconf-updatepo gathers all the translatable material in a
Portable Object Template file (POT file) located in debian/po in the package build tree.
This templates file is then used as a reference by translators to
create a Portable Object file for their languages, using the language
ISO 639 code.</para>

<section><title>Style consistency</title>

<para>Users will often see several debconf screens in a row. Using a
consistent writing style and templates presentation considerably
improves the perception of professionalism in the overall Debian
distribution.</para>

<para>Unfortunately, the original English strings very often lack this
consistency and, despite some efforts in the Developer's Reference to
give maintainers advices about debconf templates wirting style, they
often vary in the way they address users:</para>

<itemizedlist>
<listitem><para>use of first person;</para></listitem>
<listitem><para>use or not of interrogative form for input-style templates;</para></listitem>
<listitem><para>repeated interrogative form in long and short description of templates;</para></listitem>
<listitem><para>various enumeration styles;</para></listitem>
<listitem><para>use of specific reference to some of the debconf interface specific
 widgets or behaviour (talking about "previous" or "next" screens,
 assuming that boolean templates use Yes/No style questions, etc.).</para></listitem>
</itemizedlist>

<para>In general, maintainers should follow translators advices when they
suggest improvements to original templates.</para>

</section>
<section><title>Repetitive strings</title>

<para>Many user interaction in debconf templates often involves similar
questions or input such as web server configuration for packages that
provide web services, database interactions for RDBMS-related packages
or packages that use databases, etc.</para>

<para>Packages aimed at providing common methods as well as common debconf
templates for such use, for instance the "dbconfig-common" package,
recently appeared in the Debian distribution.</para>

<para>Maintainers are encouraged to use these packages and help improving
them for better quality and efficiency. The use of the debconf
"register" commands is also encouraged in some cases, when a package
may need to use strings or templates provided by another package.</para>

</section>
<section><title>Translations maintenance - localization
assistants</title>

<para>The part of this paper which deals with Debian specific programs
i18n/l10n (see <xref linkend="programs"/>) introduces the concept of
"localization assistants".</para>

<para>As the maintenance of debconf translations is usually very simple,
this paper does not enforce the use of localization assistants, except
in the case of packages with a high number of templates and/or
packages listed a top priority packages for translators (Debian
Installer "levels" packages or very popular packages).</para>

<para>In case the maintenance of debconf translations becomes a hassle for
them, package maintainers are encouraged to cooperate with a
localization assistant, however. The FIXME <ulink
      url="http://lists.debian.org/debian-i18n">debian-i18n mailing list</ulink> is
the entry point that should be used to "recruit" localization assistants.</para>

</section>

</section>

<section><title>Translation work - localization</title>

<section><title>Getting translation material</title>

<para>Of course debconf translation material may be grabbed by downloading
each package source and go to the debian/po directory. However,
translators are encouraged to use links from the translation
statistics pages (FIXME: URL).</para>

</section>
<section><title>Priorities</title>


<para>The number of Debian packages with translatable material for debconf
is pretty important. As of this writing there are FIXME packages with
translatable debconf material and about 10000 strings to translate.</para>

<para>Recent changes to the translation statistics pages now allow sorting
packages by their popularity, using data from the popularity-contest
package.</para>

</section>
<section><title>Statistics</title>

<para>Statistics for debconf translations are gathered on the Debian l10n
status pages (see FIXME) and are separated from the programs translation
statistics. These pages also give access to the translation material
collected by the statistics robot operated by the Debian i18n team.</para>

</section>
<section><title>Translation</title>

<para>The typical use is copying the templates.pot file to
&lt;code&gt;.po, fill this file's header with appropriate information and
then use a Portable object editing tool (or any text editor) to fill
in the translations for all strings.</para>

</section>

<section><title>Checking translations</title>

<para>Translators can test the debconf PO files by using the
podebconf-display-po tool from the po-debconf package. This requires
them to install this package on their system.</para>

<para>A locale for the tested language must be built on the system (which
can be achieved by "dpkg-reconfigure locales") and the LC_MESSAGES
variable should be set to this locale.</para>

<para>It is recommended to test the debconf templates by using the debconf
dialog interface in a 80x25 screen.</para>

<para>podebconf-display-po has a few quirks, especially when some strings
are shared among several templates, so it should not be relied on
blindly. Despite this, it has already proven a great helper to detect formatting
issues.</para>

</section>

<section><title>Style consistency</title>

<para>Translations need a consistent writing style, just like the original strings do, as a way give a feeling of professionnal quality.</para>

<para>Even though, most often, the original English strings may lack this
consistency, the translators can greatly help package maintainers to
improve it and achieve overall good consistency among
English strings by reporting such style errors as bug reports against
the relevant packages.</para>

<para>Translators themselves should enforce consistency in their translation
work. So, even if original strings do not follow writing style
recommendations, translators should adapt their translation to be
consistent in their language.</para>

<para>Translation teams and translation teams QA work have indeed a great
role to play in this overall consistency improvement, because they
play the role of a general review process for debconf templates.</para>

</section>

<section><title>Sending new translations and translation updates to maintainers</title>

<para>Translators should send debconf translation updates to maintainers by
using the Bug Tracking System, even when the update is requested by a maintainer using
an automated tool to call for updates. Such bug reports should use the
"l10n" and "patch" tags.</para>

<para>They should be filed against the *source* package rather than binary packages.</para>

<para>The use of the reportbug utility is recommended.</para>

<para>Common practice is sending these bug reports with severity "wishlist".</para>

<para>Another common practice is using a standardized bug title: "&gt;package&lt;:
[intl:&lt;code&gt;] &lt;Language&gt; debconf templates translation", where
&lt;package&gt; is the source package name, &gt;code&lt; the language ISO code and
&gt;Language&lt; is the language name in English.
</para>

</section>

</section>

</section>


  <section id="ddtp">
    <title>DDTP</title>

<!-- TODO: translate -->
      <para>Otra de las grandes tareas abordadas por los proyectos de
      internacionalización de Debian es el trabajo de traducción de
      las descripciones del software ofrecido dentro del sistema
      operativo.  Todo paquete de software en Debian GNU/Linux viene
      acompañado de dos descripciones. Una corta (menor de ochenta
      caracteres) que indica, brevemente, el contenido del paquete. Y
      otra, de contenido variable, que expresa las funcionalidades del
      software que incluye, sus características, etc.  Esta
      información es de vital importancia para que el usuario en busca
      de una determinada funcionalidad pueda buscarla utilizando
      algunas de las herramientas específicas diseñadas para buscar en
      esta base de datos. Sin embargo, el hecho de que todas estas
      descripciones estén en inglés dificulta el proceso de búsqueda
      de software por parte de un usuario no nativo ya que, aún
      disponiendo de un interfaz sobre el que poder hacer consultas
      sobre ésta información, no podrá precisar los términos de la
      búsqueda con la misma precisión que si utilizar su idioma
      nativo.
      </para>

      <para>Para resolver este problema se inició un proyecto de
	traducción de las descripciones de los paquetes. Este
	proyecto, de hecho, fue iniciado, simultáneamente por dos
	equipos de trabajo, dando como resultado dos sistemas de
	gestión diferentes pero que actualmente están integrados entre
	sí. Bajo el nombre de <emphasis>Debian Description Translation
	Project</emphasis> (Proyecto de Traducción de descripciones de
	Debian, n. del t.)  se encuentran dos sistemas: uno mediante
	correo electrónico y otro mediante WWW.  El sistema de gestión
	de las descripciones mediante correo electrónico disponible en
	<ulink
	url="http://people.debian.org/~grisu/ddts">http://people.debian.org/~grisu/ddts</ulink>
	permite que los traductores reciban descripciones de forma
	automática y las envíen al sistema una vez traducidas. El
	sistema con interfaz web disponible en <ulink
	url="http://www.laespiral.org/ddts/">http://www.laespiral.org/ddts/</ulink>
	permite gestionar la traducción y revisión mediante un acceso
	autenticado a un servidor de WWW.  <emphasis>La
	Espiral</emphasis> también llevó a cabo un proyecto previo de
	traducción de las descripciones cortas de los paquetes Debian
	a través de un interfaz web, aunque éste proyecto ha quedado
	introducido en el mostrado anteriormente.
	</para>


  </section>

<!-- jfs -->
  <section id="localization_config">
    <title>Localization-config</title>

  <para>TBD</para>

  </section>

  <section id="language_tasks">
    <title>Language tasks</title>

    <para>The Debian task selection tool, called
    <command>tasksel</command> is run in every new system installation
    and allows to define a set of packages aimed for specific purposes.</para>

    <para>One widely developed used of tasksel are "language
    tasks". These are tasks that are installed dependeing on the
    installation language. They should feature sets of packages that
    are specific to the related language.</para>

    <section><title>Sets of language tasks</title>

    <para>There are currently two language tasks per language: one
    &lt;language&gt; task which depends on nothing but standard
    packages, and one &lt;language&gt;-desktop task which depends on
    the standard desktop task.</para>

    <para>Packages in language tasks can include localization packages
    for software that are installed by other tasks or by the standard
    system. For instance, the &lt;language&gt;-desktop tasks install
    localization packages for the packages that are part of the
    standard desktop task (kde-i18n-*, openoffice.org-l10n-*, etc.).</para>

    <para>These tasks can also include packages that are needed for
    the rendering of the given language: TTF or Postscript fonts for
    &lt;language&gt;-desktop tasks, console fonts for &lt;language&gt;
    tasks, etc.</para>


    </section>

    <section><title>Maintenance of language tasks</title>

    <para>Adding new language tasks should be partly automated by the
    tasksel maintenance team, ie the Debian Installer team. As soon as
    a new languages appears in the D-I supported languages, an
    equivalent language task should be added, if at least one specific
    package motivates it (for instance a localization package for on
    of the packages that are part of the desktop tasks.</para>

    <para>Translation teams and translators should also be active by
    proposing enhancement to tasks related to their language.</para>

    <para>New tasks should be reported as wishlist bug reports again
    the tasksel package.</para>

  </section>


</section> <!-- End of the Debian tools translation -->

<!-- jfs: DDP+installer+manpages -->
  <section id="documentation">
    <title>Translation of documentation</title>

  <para>Users of an operating system require, in order to be able to
  use it fully both online and offline documentation.</para>

  <para>In UNIX systems, online documentation is typically handled
  through manual pages (retrieved through the use of
  <command>man</command>)<footnote><para>The GNU project prefers the use of
  <command>info</command> documentation but most upstream developers
  just provide manpages.</para></footnote>. In Desktop environments both KDE
  and GNOME provide online help systems.</para>

  <para>Offline documentation includes such things as the Debian
  Installation Manual, the Debian Reference Guide, or the Security
  Debian Manual. These manuals, developed by the <ulink
  url="http://www.debian.org/doc/ddp">Debian Documentation
  Project</ulink> (DDP), are typically printed by users and, sometimes,
  read from other (non-Debian) systems.</para>

  <para>Obviously, users not proficient with english will prefer
  documentation in their native language. That is why translation of
  documentation is needed</para>

  <section>
  <title>SGML/XML documentation</title>

  <para>The <emphasis>DDP</emphasis> project develops documentation
  for Debian written, primarily, in SGML format. The first
  documentation produced by the project was written in a variant of
  SGML called <emphasis>debiandoc-sgml</emphasis> for which tools were
  develop to convert the SGML documents into different formats (HTML
  for online vieweing, PDF and PostSCript for printing, and simple
  text). The latest documentation written by members of the project or
  revisions of available documentation (such as the Debian
  Installation Manual) has been written using XML, more specifically,
  Docbook-XML which is widely used by many free software
  projects<footnote><para>Including distributions such as Red Hat
  GNU/Linux, or the <ulink url="http://www.tldp.org">Linux
  Documentation Project</ulink></para></footnote>.</para>

  <para>Translation of documentation written in SGML or XML format,
  however, face some initial issues:</para>

  <itemizedlist>

    <listitem><para>SGML documents are usually written in a single
    (big) file. Since translation teams are typically created in order
    to handle (big) documents this means that the translation
    coordinator has to break up the original file in chunks.</para></listitem>

    <listitem><para>Translators cannot directly use the tools they are
    used working with (PO files) since.</para></listitem>

    <listitem><para>Automatic publication of documentation in HTML format of
    documentation need to be adapted so that they are capable of
    publishing both the original document and the translations without
    conflicting with each other.</para></listitem>

    <listitem><para>Automatic publication of documentation in PS/PDF
    needs to be capable of handing non-european character sets
    (i.e. handle specific fonts) properly.</para></listitem>

    <listitem><para>Tracking of changes and updates in SGML/XML
    documents needs to be done through source diffs (which requires
    access to a revision control system). If a single file is being
    used, tracking differences will be more difficult.</para></listitem>

    <listitem><para>Diffing tools handle poorly the fact that text can
    be wrapped to different column lengths and paragraphs might be
    "moved" around withouth actually chaning
    context.</para></listitem>

  </itemizedlist>

  <para>In order to overcome these issues the document writters,
  cooperating with translators have introduced significant changes to
  how documentation is written:</para>


  <itemizedlist>

    <listitem><para>SGML documents are broken up into smaller files
    (typically per chapter)</para></listitem>

    <listitem><para>New tools have been introduced to be able to
    convert SGML/XML documents into PO files:
    <command>po-debaindoc</command> (now deprecated),
    <command>po4a</command> (see <xref linkend="po4a-for-doc"/>) and
    <command>poxml</command>.</para></listitem>

    <listitem><para>New tools have been introduced to be able to
    detect when files within a document have changed:
    <command>doc-check</command> and track the specific changes
    through the revision control system.</para></listitem>

    <listitem><para>The publishing toolset (based around
    <filename>Makefiles</filename> has been adapted in order to cope
    with the fact that translations might be available for
    documents.</para></listitem>

  </itemizedlist>

  <para>Currently, the Debian Documentation Project uses the CVS
  server at cvs.debian.org<footnote><para>The web interface can be
  accessed at <ulink
  url="http://cvs.debian.org/ddp/manuals.sgml/?root=debian-doc"/>.</para></footnote>.
  Documentation is compiled through a set of Makefiles and published
  at www.debian.org, which updates its copy of the CVS repository and
  compiles all the documentation daily. The CVS server at
  cvs.debian.org holds most (but not all) of the documentation
  available. The most notable exception is the <emphasis>Debian
  Installer Manual</emphasis> which is available at a <ulink
  url="svn://svn.d-i.alioth.debian.org/svn/d-i/trunk/manual">SVN
  repository at Alioth</ulink> (<ulink
  url="http://svn.debian.org/wsvn/d-i/trunk/manual/?rev=0&sc=0">web
  access to the SVN repository</ulink>). The development version of
  the Debian Installation Guide is available at <ulink
  url="http://d-i.alioth.debian.org/manual/">the d-i project's web
  pages</ulink> also in Alioth.</para>

  <para>Translators either get access to the CVS or use the original
  documentation maintainer as a proxy to publish the information in
  the CVS. When a translation is added to an available document the
  maintainer typically needs to update the <emphasis>LANGS</emphasis> (or
  <emphasis>LANGUAGES</emphasis>) variable in the document's
  <filename>Makefile</filename> in order to tell the publication
  system to also build copies for that language. If the added
  translation builds it should be available in the Debian website
  after the next daily build.</para>

  <para>Translation updates are handled through the
  <command>doc-check</command>. Although the tool shares a common
  name, different documents use a different version (or incarnation)
  of the same tool (or concept). Basicly, the trasnlators need to add
  to each translated file a translation header that specifies which
  file revision was translated. So, if a document was translated based
  on the 1.12 revision in CVS, a translator would add this header:
  </para>  

  <informalexample><screen>
&lt;!-- CVS revision of original english document "1.12" --&gt;
  </screen></informalexample>

  <para>The specific header format used might vary between documents,
  for example, this is the translation header for the translation of a
  file in the Debian Installation Guide:
  </para>

  <informalexample><screen>
&lt;!-- original version: 12756 --&gt;
  </screen></informalexample>

  <para>If these headers are in place a translator can use the
  <command>doc-check</command> tool to:</para>

  <itemizedlist>

  <listitem><para>show which translated files have a different
  revision number from the original English files</para></listitem>

  <listitem><para>show what changes have been made in the original
  English file</para></listitem>

  <listitem><para>help keep track of which files have not yet been
  translated</para></listitem>

  </itemizedlist>

  <para>In order to use the tool the translator just needs to update
  his local copy of the document source code, run the script and
  review the output. The use of a revision control system helps the
  translator extract<footnote><para>The <command>doc-check</command>
  script of the <emphasis>d-i</emphasis> project can extract the
  changes between revisions by making the proper queries to the
  revision control system if asked to.</para></footnote> which changes
  have been introduced in the translated file. He can then update the
  file, update the translation header and commit his changes.</para>

  <para>This mechanism is indeed very similar (if not the same) to the
  mechanism used in the website to manage translations.</para>

  <para>Translations that feel more comfortable using PO files can use
  either po4a (see <xref linkend="po4a-for-doc"/>), or
  <command>poxml</command>. The Debian Installer uses
  <command>poxml</command> and provides tools to convert from the XML
  files to PO files for the translation teams interested. A different
  set of tools converts the PO files back into XML files. "Out of
  dateness" of translations is handled through the same PO mechanisms
  (<emphasis>fuzzy</emphasis>) as those used by
  <command>gettext</command> to determine whether to show a translated
  message or not.</para>

  </section><!-- SGML documentation -->

  <section>
  <title>Debian manpages translation</title>

  <para>There are mainly two types of manpages provided within the
  Debian operating system: those packaged with upstream software (such
  as binutils or gcc) and those written for Debian tools provided in
  Debian-only packages. The translation of manpages of upstream
  software are typically provided either within the package itself or
  within <filename>manpages-XX</filename> package
  (where <filename>XX</filename> is a given language codename)
  the case of the translation of the <ulink
  url="http://www.kernel.org/pub/linux/docs/manpages/">Linux
  manpages</ulink>.</para>

  <section>
  <title>Manpages packages</title>

  <para>At the time of this writing the following translation
  manpages packages are available: </para>

  <itemizedlist>

  <listitem><para>manpages-de and manpages-de-dev - German manpages
  </para></listitem>

  <listitem><para>manpages-es and manpages-es-extra - Spanish man pages
  </para></listitem>
  
  <listitem><para>manpages-fi - Finnish man pages </para></listitem>
  
  <listitem><para>manpages-fr - French version of the manual pages
  </para></listitem>
  
  <listitem><para>manpages-hu - Hungarian manpages </para></listitem>
  
  <listitem><para>manpages-it - Italian man pages</para></listitem>
  
  <listitem><para>manpages-ja and manpages-ja-dev - Japanese version
  of the manual pages</para></listitem>

  <listitem><para>manpages-ko - Korean version of the manual pages
</para></listitem>

  <listitem><para>manpages-nl - Dutch manpages</para></listitem>

  <listitem><para>manpages-pl - Polish man pages </para></listitem>

  <listitem><para>manpages-pt and manpages-pt-dev - Portuguese
Versions of the Manual Pages</para></listitem>

  <listitem><para>manpages-ru - Russian translations of Linux
manpages</para></listitem>

  <listitem><para>manpages-tr - Turkish version of the manual pages</para></listitem>

  <listitem><para>manpages-zh - Chinese manual pages</para></listitem>

  </itemizedlist>

  <para>Those manpage packages contain, for the most part, the same
  manpages available in the <filename>manpages</filename> or
  <filename>manpages-dev</filename> packages although some packages
  contain extra manpages.</para>

  <para>Users will see the translated manpages through the
  internationalization mechanims of the <command>man</command> command
  which will review, when asked to present a manpage, if a translation
  is availailable under <filename>/usr/share/man/XX</filename> (with
  XX being the language code of the user's
  environment<footnote><para>As defined through the LANG
  variable</para></footnote>). Consequently, the Debian installation
  system will install both <filename>manpages</filename> and
  <filename>manpages-XX</filename> through a default installation if
  the user selects an specific language task for which manpages are
  available.</para>

  </section><!-- Manpages packages -->

  <section><title>Issues with manpage translations</title>

  <para>One of the main issues with manpages, however, is that there
  is no provisions in the <command>man</command> to detect when a
  translation is out of date. As a consequence, users reading
  translated manual pages might be reading out of date content that
  does not really apply to the latest version of the program's man
  page.</para>

  <para>The translation project is also lacking a central web page
  where teams can see (at a glance) which manpages are available for
  translation, which translations are out of date, translated or
  untranslated and who is the last translator of the manpage.</para>

  </section><!-- Issues with manpages translations -->

  <section><title>Translation of Debian manpages</title>

  <para>The translation of manpages specific to programs developed
  within the Debian project (such as the <command>dpkg</command> or
  <command>apt</command> tools) is a work that falls within the scope
  of the Debian translation teams.</para>

  <para>The translation of manpages for Debian programs are included
  within the Debian package itself, which means that translators have
  to request the Debian maintainer to include the translation in it,
  once finished. Since Debian programs are typically managed through
  common revision control repositories available to Debian developers
  or contributors (either at cvs.debian.org or at alioth.debian.org)
  active translators of a Debian program will typically have access to
  those resources and will be able to commit directly into the source
  control zone were manpages are included. It is worthwhile noting,
  that it is also common for people active in the program translation
  to work on the translation of the manpage so that the translation of
  the program messages and options is consistent with the manual page
  itself.</para>


  <para>In order to coordinate the translation of manpages and make it
  possible to track when the translation changes. The translation
  teams introduced the <filename>manpages</filename> in the CVS DDP
  area. This module includes several scripts in order to track
  manpages translations: <command>check_trans.pl</command> and
  <command>compare_files.pl</command><footnote><para>There is an
  additional script, <command>gen_db.pl</command>, used to generate
  the wml files used for the translation coordination database in the
  web page area</para></footnote>.</para>

  <para>This module was introduce since translators did not have
  access to the CVS repository of the programs for which the
  translations were going to be made available. Consequentely, the
  original manpages themselves could not be modified to include a
  translation control header to keep track whenever one was modified.
  In order to keep track of translation status the CVS module holds
  <filename>INFO</filename> with meta-data of translated documents
  including:</para>

  <variablelist>
 
  <varlistentry><term>Manpage</term> <listitem><para>document's name in the CVS
  repository, may be different than the one in the source
  package. This is used as the document ID.</para></listitem></varlistentry>

  <varlistentry><term>Encoding</term><listitem><para>Document's
  encoding.</para></listitem></varlistentry>

  <varlistentry><term>Location</term><listitem><para>Location of this document
  in the source package (this value is only set when the source
  package does contain this document).</para></listitem> </varlistentry>

  <varlistentry><term>Original</term><listitem> <para>Original ID in the
  <filename>english/</filename> directory.</para></listitem> </varlistentry>

  <varlistentry><term>Original-CVS-Revision</term><listitem><para>CVS revision
  number of the original document on which a translation is
  based.</para></listitem></varlistentry>

  <varlistentry><term>Translator</term><listitem><para>Translator's name, is be
  used to send automatic notifications when a translated man page is
  outdated.</para></listitem></varlistentry>

  </variablelist>

  <para>Original manpages are included in the
  <filename>english/</filename> directory of that CVS module by the
  translation teams and need to be updated manually when the original
  file is updated. Based on the meta-data information and the CVS
  revisions available for manpages the scripts can track when a
  manpage is outdated and notify the translator in charge of
  it.</para>

  <para>Unfortunately, this mechanism, initially developed by the
  Frech translation team and used by other teams, is not being
  maintained. There have been no updates in the english manpages for
  two years and translations have not been updated there
  either.</para>

  <!-- This is probably due to the switch to po4a? -->
  <!-- TODO: Talk about Locale::Po4a::Man? -->
  
  <para>TBD: Describe use of po4a. The CVS-DDP module is not that much
  used anymore since most translators are now in the packages
  themselves...</para>

  </section><!-- Translation of Debian manpages -->

  </section><!-- Manpages translation -->
  
  <section><title>Coordination of documentation translation</title>

  <para>Initially, some of the translation projects (french and
  spanish) introduced their own documentation translation management
  system<footnote><para>The spanish management system (the status
  database has not been updated since january 2003) is available at
  <ulink
  url="http://www.debian.org/international/spanish/ltcp/"/>.</para></footnote>
  in order to coordinate the translation of the Debian Documentation
  Project published manuals. This management system was based off a
  flat database that included the available documents in the DDTP
  system and the status of translations. With the use of Perl scripts,
  this database was converted into HTML files that were published on
  the website so that the translation team could see which documents
  were being worked on and who was coordination the
  translation.</para>

  <para>This system was not integrated with the document database
  provided by the DDP itself and the translation teams have, for a few
  years, made use of the translation robots (see <xref
  linkend="translation_robots"/>) in order too coordinate translation
  of documents themselves.</para>

  </section><!-- translation doc coordination -->


  </section> <!-- of the documentation section -->

<!-- jfs : -XX packages -->
  <section id="packages">
    <title>Other translation packages</title>

  <para>TBD</para>

  </section>


  </section>

  </chapter>


  <chapter id="infrastructure">
    <title>i18n/l10n infrastructure in Debian</title>
  

  <section id="po-statistics">
    <title>Po Translation statistics</title>

    <para>The Debian web site features statistics web pages under
    <ulink url="http://www.debian.org/intl/l10n" />. These pages
    collect statistical data about po-debconf and programs
    translations.</para>

    <para>The statisstics are collected daily by a script run under a
    developer's account on people.debian.org (Denis Barbier account at
    the time of this writing). These statistics use material gathered
    by another script run under a developer's acocunt on
    people.debian.org (Pierre Machard at the time of this
    writing).</para>

    <para>The statistics pages help translators learn about areas that
    need work such as updates for existing translations or new
    packages/material needing translation work.</para>

    <para>The pages also help translators to grab POT files and start
    working on new translations as well as PO files and work to
    complete them.</para>

    <para>Even though this system has proven incredible useful during
    last years, it still carries a few weaknesses that prevent calling
    it an overall i18n/l10n infrastructure:</para>

    <itemizedlist>

    <listitem><para>it depends on scripts running under two
    individuals accounts </para></listitem>

    <listitem><para>it only gives statistics for the
    <emphasis>unstable</emphasis> branch of the version and thus does
    not allow to get statistics about l10n in testing during release
    preparation </para></listitem>

    <listitem><para>it does not track down the status of the work by
    translation teams and does no point the reader to the existing
    translation teams. For that reason, teams have developed their own
    tracking work method (some parts will be detailed in the next
    section. FIXME: put reference to the translation robot section
    </para></listitem>

    <listitem><para>it is not related to the bug tracking system and
    does not allow checking whethe ran incomplete or missing
    translation has a pending fix in the BTS (and for how long the fix
    is pending) or in the package develoment revision control system
    </para></listitem>

    </itemizedlist>

    <para>A way to go would be integrating all these needs in a more
    general i18n/l10n infrastructure.</para>

    </section>
  <section id="web-statistics">
    <title>Website translation statistics</title>

    <para>Statistics for the translation of the Debian web site are
    collected in a different set of pages, run by different
    scripts.</para>

    <para>FIXME: find more details here</para>

    </section>
  <section id="d-i-statistics">
    <title>Debian installer translation statistics</title>
    
    <para>In order to track down issues more closely, the Debian
    Installer i18n coordinators has setup translation statistics pages
    which gather the status of l10n for all core D-I packages as well
    as packages defined as part of the D-I "levels" of translation
    (FIXME: reference to DC5 talk).</para>

    <para>These pages point to the individuals packages RCS
    directories and archives. They give translators a more accurate
    view of work to do and immediately reflect applied changes.</para>

    <para>They could be enhanced in a few ways:</para>

    <itemizedlist>

    <listitem><para>integrate them in the main web site. The status
    pages are generated by scripts running under Dennis Stampfer
    account. These scripts are not publicly visible and setting a new
    location for the pages would require Dennis expertise
    </para></listitem>

    <listitem><para>revamp the pages to make the main page less
    verbose. There is currently a big amount of information on this
    page and it should be redisigned as a whole web site...or
    integrated into a more general i18n infrastructure
    </para></listitem>

    <listitem><para>allow getting statistics about all components in
    their own RCS trees, in unstable and in testing. This would allow
    getting a better picture of the real l10n status for releases of
    D-I </para></listitem>

    </itemizedlist>

    <para>A way to go could actually be integrating these requirements
    in a more general i18n/l10n infrastructure.</para>

  </section>

  <section id="translation_robots">
    <title>Translation robots</title>

  <para>TBD</para>

  <para>French: <ulink url="http://people.debian.org/~bertol/fr.by_translator.html"/>,
  Spanish:
  <ulink url="http://www.debian.org.es/cgi-bin/l10n.cgi?team=es"/>.
  Generic: <ulink url="http://people.debian.org/~bertol/"/>.
  </para>

  </section>


  </chapter>

  <chapter id="tools">
    <title>i18n/l10n tools in Debian</title>

<!-- TODO: More information on translation in the FLOSS world is 
      available at the 
      http://es.tldp.org/Articulos/0000otras/doc-traduccion-libre/doc-traduccion-libre/index.html (in spanish) -->

  <section id="generic_tools">
    <title>Generic tools: gettext</title>

      
     <para>In order to be able to internationalize the user
     environment the GNU proyect developed a set of tools which are
     known as <command>gettext</command>. These tools make use of the
     <command>locale</command> definition that is a part of the
     POSIX.2 standard and is implemented in the GNU
     <command>libc</command>. These definitions include the basic
     tasks of representing currency formats, date or numbers. But they
     also include the definitions of sorting tasks and the
     classification of codes based on the user's culture (such as the
     order of the letters in the alphabe). This aspect of a user's
     environment only needs to define once since these definitions,
     once covered, do not typically vary throughout time (except when
     fixing bugs or introducing new languages).</para>

     <para>The translation of messages according to the user's
     language in any given interface is, however, a more variable
     aspect of internationalization of software. Not only messages
     that are shown to the user are translated usually, error
     messages, help of the options that the program use and any other
     message that a user might see at any point in time is suitable
     of translation.</para>

     <para>The <command>Gettext</command> tool was developed within
     the GNU project between 1994 and 1995 by a diverse group of
     programmers. This tool helps the creation of programs that can be
     distributed with multiple message catalogs in different
     languages. In localized environments the programs will choose the
     message catalog most suited to the environment as defined by the
     user and present messages in a given language.  </para>

     <para>This tool is almost transparent to the programmer. The
     programmer just has to mark in a special way messages that need
     to be translated. It is also transparent to the translator since
     the precise location of messsages in the source code and the
     relocation of messages. Translators just have to keep the
     translation of a list of messages current. The gettext tools
     handle the creation of catalogs and their regeneration when the
     sources change but, at the same time, preserving translations
     already done.</para>

     <para>This way, the work of translating messages within a program
     is reduced to the task of doing an initial translation of all the
     messages and then the maintenance of the small (or big) changes
     introduced in the code that might have as a consequence the
     apparition (or change) of messages. The programmer has just to
     prepare the sources to use gettext through the use of the tools
     both in the program itself and it the tools that compile and
     build it (a process known as software internationalization). Once
     this is done the work of both groups can be done independently,
     which helps development both ways. That is, a translator does not
     have to depend on the programmer to introduce a new language and
     a programmer does not have to wait for the translators to do
     their job in order to publish a new release.</para>

      <para>More information is available in the <ulink
      url="http://www.gnu.org/software/gettext/gettext.html">official
      gettext project pages</ulink>. If gettext is already installed,
      on line documentation is available that can be read executing
      <command>info gettext</command>.  </para>

      <para>Translation of messages using gettext is very simple.  A
      translator just needs to pick up a PO file either partially
      translated or completely untranslated and fill in the missing
      "gaps". In a world where there is people with many different
      capabilities willing to cooperate makes it possible to
      collaborate without the need of in depth knowledge of the
      translation mechanism and helps translation teams born. There
      are also multiple front-end interfaces to gettext available,
      such as <command>gtranslator</command>,
      <command>kbabel</command>, <command>poedit</command> or
      emacs'po-mode. One of consequences of the availability of the
      <command>gettext</command> tools is that it is not necessary to
      have programming knowledge to work on translation. The only
      requirements for working in translations are the knowledge of
      the original language, the language it will be translated to and
      the ability to edit .po files (with multiples tools being
      available to ease the task as described above).</para>

<sidebar>
<title>&dash; PO file example</title>
	<literallayout width="80">
# Copyright (C) 1999 Free Software Foundation, Inc.
# Javier Fernández-Sanguino Peña&lt;jfs@computer.org&gt;, 1999.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 1999-06-21 14:21+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Javier Fernández-Sanguino Peña &lt;jfs@computer.org&gt;\n"
"Language-Team: ES &lt;ES@li.org&gt;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: ENCODING\n"

#: hello.c:86
#, c-format
msgid "Usage: %s [-htvm] [--help] [--traditional] [--version] [--mail]\n"
msgstr "Modo de uso: %s [-htvm] [--help] [--traditional] [--version] [--mail]\n"
#: hello.c:148
msgid "This is GNU Hello, THE greeting printing program.\n"
msgstr "Este es Hola de GNU, EL programa que imprime un saludo.\n"

#
msgid "Translate this"
msgstr ""
</literallayout>
</sidebar>

      <para>The GNU project supports different groups of
      internationalization. These grupos are coordinated by a person
      in charge of the translation team.  There is no requirement,
      however, to provide constant dedication within a translation
      grupo. Translation can be a discrete effort. The existance of
      these groups, however, guarantees the revision of these discrete
      efforts from anonymous contributors (many time users). These
      grupos are also in charge of developing glossaries to make
      translation of programs uniform and to maintain and update
      translations whenever new programs are published.</para>

      <para>This work is coordinated through the <emphasis>Free
      Translation Proyect</emphasis> at <ulink
      url="http://www.iro.umontreal.ca/translation"/>. The state of
      translations can be reviewed through a database of translations
      and translators at 
      <ulink url="http://www.iro.umontreal.ca/translation/registry.cgi?team=index"/>.
      </para>


  </section>

  <section id="wml">
    <title>Translation headers: wml</title>

  <para>TBW</para>

  </section>

  <section id="po4a">
    <title>Po for everything (po4a)</title>

<!-- TODO: 
     * Describe integration with Pootle?
       http://sourceforge.net/mailarchive/forum.php?thread_id=9327343&forum_id=43620
-->

  <para><ulink url="http://po4a.alioth.debian.org/">po4a</ulink>
  (<emphasis>PO for anything</emphasis>) is a set of tools developed
  by Martin Quinson with the goal of easing translations and, more
  interestingly, maintenance of translations, through the use of
  gettext tools in areas where they were not expected, like
  documentation.</para>

  <para>Tools in the po4a package are used to update PO files from the
  original files and generate translated files from these PO files.
  </para>

  <para>The usual process is made of one initial step (convert
  translations to PO files) and two recurrent steps (update PO files
  and regenerate translated files).  </para>

    <section>
      <title>Converting existing/translated documentation to PO</title>

  <para>Converting documentation files to PO is the job of the
  <classname>po4a-gettextize</classname> command. When starting a new
  translation, <classname>po4a-gettextize</classname> will extract the
  translatable strings from the documentation file and write a POT
  file from it. When translated files exist, strings are grabbed from
  them and collected in a new PO files.
  </para>

  <para>Because documentation files are usually of very various
  formats and translation states, the conversion of existing
  translations cannot have enough intelligence to do the right
  extraction, especially when translations are utterly outdated. The
  <classname>po4a-gettextize</classname> tools only extracts the Nth
  string from the translated file and matches it to the Nth string of
  the original file in the created PO file.  </para>

  <para>Because some manual expertise by translators is then required,
  all extracted strings are marked as "fuzzy" by the
  <classname>po4a-gettextize</classname> process.</para>

    <section>
      <title>Converting manpages to PO</title>

      <para>Converting existent manpages to PO files can be done using
      the <command>po4a-gettextize</command> tool:</para>

  <informalexample><screen>
$ po4a-gettextize -f man -m the_manpage -p foo.po
  </screen></informalexample>

     <para>PO files can be converted back to manpages with:</para>

  <informalexample><screen>
$ po4a-translate -f man -m the_original_manpage -p the_PO_file -l
  </screen></informalexample>

  <para>Upstream authors can use the following Makefile to translate
  manpages by placing it in a <filename>po</filename> subdirectory
  under the documentation directory (which holds the manpages in troff
  format).</para>

<sidebar>
<title>&dash; po4a Makefile example</title>
	<literallayout width="80">
PROJECT=project_name

# Sections of the manpages
SECS=1 2 3 4 5 6 7 8

PO4ATRANSLATE  = po4a-translate
PO4AUPDATEPO   = po4a-updatepo
PO4AGETTEXTIZE = po4a-gettextize

MAN1 = $(notdir $(basename $(wildcard ../*.1)))
MAN2 = $(notdir $(basename $(wildcard ../*.2)))
MAN3 = $(notdir $(basename $(wildcard ../*.3)))
MAN4 = $(notdir $(basename $(wildcard ../*.4)))
MAN5 = $(notdir $(basename $(wildcard ../*.5)))
MAN6 = $(notdir $(basename $(wildcard ../*.6)))
MAN7 = $(notdir $(basename $(wildcard ../*.7)))
MAN8 = $(notdir $(basename $(wildcard ../*.8)))

# List the languages the manpages are translated to
LANGS = fr
TRANS=$(foreach lang,$(LANGS),\
                  $(foreach sec,$(SECS),\
                            $(foreach man,$(MAN$(sec)),$(man).$(lang).$(sec))))

PARTIALPOT=$(foreach sec,$(SECS), $(foreach man,$(MAN$(sec)),$(man).$(sec).partial.pot))

all: $(TRANS)

#### CREATION OF THE POT FILE ####

$(PROJECT).doc.pot: $(PARTIALPOT)
        msgcat --use-first $^ -o $@

%.partial.pot: ../%
        $(PO4AGETTEXTIZE) -f man -m $< -p $@

#### CREATION OF THE POT FILE ####

$(PROJECT).doc.pot: $(PARTIALPOT)
        msgcat --use-first $^ -o $@

%.partial.pot: ../%
        $(PO4AGETTEXTIZE) -f man -m $< -p $@

#### TAKE CARE OF THE PO FILES ####

%.doc.po: $(PROJECT).doc.pot
        @echo -n "Merging $(PROJECT).doc.pot and $@: "
        @msgmerge $@ $(PROJECT).doc.pot -o $@.new
# Typically all that changes was a date. I'd prefer not to cvs commit such
# changes, so detect and ignore them.
        @if diff -q -I'#:' -I'POT-Creation-Date:' -I'PO-Revision-Date:' $@ $@.new >/dev/null; then \
          rm -f $@.new; \
          touch $@; \
        else \
          mv -f $@.new $@; \
        fi
        @msgfmt --statistics $@

#### MAKE THE TRANSLATIONS ####

# This is an example for French manpages, sections 1 and 8
# it needs to be modified 
%.fr.1: fr.doc.po
        $(PO4ATRANSLATE) -f man -m ../`echo $@ | sed -e 's/\.fr\././'` \
        -p $< -a $@.addendum -l $@

%.fr.8: fr.doc.po
        $(PO4ATRANSLATE) -f man -m ../`echo $@ | sed -e 's/\.fr\././'` \
        -p $< -a $@.addendum -l $@


#### MISC ####

clean:
        -rm -f $(foreach sec,$(SECS),*.$(sec)) *~ *.partial.pot


.PHONY: clean
.PRECIOUS: $(foreach lang,$(LANGS), $(lang).doc.po)
.INTERMEDIATE: $(PARTIALPOT)
</literallayout>

</sidebar>


  </section><!-- of converting manpages to PO4a -->

  </section><!-- of converting to PO4a -->

    <section id="po4a-for-doc">
      <title>Maintaining translated documentation with po4a</title>

  <para>The dataflow can be summarized as "master document --&gt; PO
  files --&gt; translations". Any changes to the master document will
  be reflected in the PO files, and all changes to the PO files
  (either manual or caused by the changes from the master document
  will be reflected in translated documents.  </para>

  <para>Po4a tools allow defining a minimum translation ratio below
  which the translated document will not be generated anymore or will
  only contain the original language. This avoids generating documents
  with too few translated strings but still allows the publication of
  complete translations. As a consequence, translated documents may
  still contain some strings in the original language. This tries to
  guarantee the accuracy of the translated document.</para>

  <para>This behaviour is a big improvement for documents such as
  manual pages. Indeed, an argument often used for not using these
  translation is the lack of guarantee that the translations are not
  in sync with the original man pages. The po4a tools raise this
  argument, the price being sometimes mixed man pages, though.
  </para>

  </section> <!-- of po4a for doc -->

  <section>
      <title>Recommended po4a organization for software</title>

      <para>This section is mostly taken from tje <command>po4a</command>
      documentation and describes the recommended organization for
      software that uses <command>po4a</command>.</para>

      <para>A standardized architecture of the source tree will help
      the translation teams when they try to detect the POTs that need
      to be updated.  As a consequence, the following architecture is
      recommended:</para>

<informalexample>
<screen>
  /
  /doc/
  /doc/en/
  /doc/en/
  /doc/po4a/
  /doc/po4a/add_&lt;ll&gt;/
  /doc/po4a/po4a.cfg
  /doc/po4a/po/
  /doc/po4a/po/&lt;pkg&gt;.pot
  /doc/po4a/po/&lt;ll&gt;.po
  /doc/&lt;ll&gt;/
</screen>
</informalexample>

    <para>Or, if you want to avoid a big POT and split it according to
    the packages, documents, formats, or subjects, you can use the
    following architecture:</para>

<informalexample>
<screen>
  /
  /doc/
  /doc/en/
  /doc/en/
  /doc/po4a/
  /doc/po4a/add_&lt;ll&gt;/
  /doc/po4a/&lt;pkg1&gt;/po4a.cfg
  /doc/po4a/&lt;pkg1&gt;/po/
  /doc/po4a/&lt;pkg1&gt;/po/&lt;pkg1&gt;.pot
  /doc/po4a/&lt;pkg1&gt;/po/&lt;ll&gt;.po
  /doc/&lt;ll&gt;/
</screen>
</informalexample>

    <para>It is important to avoid a build failure if a generated
    translation cannot be generated (the PO is too outdated, an
    addendum cannot be applied, ...). Wildcards should therefore be
    used or tests be included to check whether the files are generated
    in the 'install' or 'dist' rules.</para>

    <para>When po4a is used upstream, it is recommended to run po4a in
    the 'dist' rule.  This will update the POT and POs, and will
    generate the translated documents.  </para>

    <para>These translated documents can be distributed in the source
    archive if the maintainer doesn't want to add a build dependency
    on po4a. This requires adding+an autoconf check on po4a and will
    allow updating the documentation if po4a is available locally. If
    po4a is not available, documents will be distributed without being
    synced with the original version, but the build process won't
    fail.</para>

    <para>It is important to distribute the POT and POs in the source
    archive.</para>

    <para>When po4a is used in a distribution such as Debian, one
    should ensure that the source of the package contains only
    up-to-date POT and POs. This means that po4a should be run in the
    'clean' rule of the make process (typically in
    <command>debian/rules</command> for Debian packages.</para>


<informalexample>
<screen>
clean:
       # Update the POT and POs
       cd &lt;...&gt;/po4a && po4a --no-translations --rm-backups &lt;package&gt;.cfg

build:
       # Generate the translations
       cd &lt;...&gt;/po4a && po4a --rm-backups &lt;package&gt;.cfg
</screen>
</informalexample>


   </section><!-- of recommended organization -->

  </section> <!-- of po4a -->

  <section id="debconf-updatepo">
    <title>Debconf-updatepo and po-debconf tools</title>

    <para>Tools in the po-debconf package are mostly aimed for
    maintainers use.  The central tool is the debconf-updatepo
    utility. This utility should be run each time a change happens in
    debconf templates, i.e. most often the files names *.templates in
    the debian/ directory of the package source tree.</para>

    <para><command>debconf-updatepo</command> looks for all files
    listed in the <filename>debian/po/POTFILES.in</filename> and
    search in these files for translatable strings. Instructions on
    how to set a debconf string as translatable are given in the
    po-debconf(7) man page. This can be summarized as "just put an
    underscore character before the field names".</para>

    <para>All translatable strings are written by <command>debconf-updatepo</command> in a
    "template file" named <filename>debian/po/templates.pot</filename>. In the same time, all
    PO files that are present in <filename>debian/po</filename> are updated with regards of the
    new strings.</para>

    <para>Changed strings are marked <emphasis>fuzzy</emphasis> (thus
    keeping the old translation) or
    <emphasis>untranslated</emphasis>. Iin such case, the old
    translation is kept as <emphasis>obsolete</emphasis> entries et
    the end of the PO files.</para>

    <para>"fuzzy" strings translations are never used. When a debconf
    template includes more than one fuzzy string, the whole template
    will be shown untranslated to users.</para>

    <para>Maintainers should run <command>debconf-updatepo</command>
    as soon as they change templates. Some i18n maintainers recommend
    running it in the package clean target to ensure that all PO files
    AND the POT file are up-to-date. There is nothing worse than a
    package with obsolete files.  Some other maintainers rule against
    running <command>debconf-updatepo</command> as this is likely to
    modify files in the debian/ directory.</para>

    <para>Rebuilding the templates file that will be shipped with the
    package, as of
    <filename>debian/&lt;package&gt;/DEBIAN/templates</filename> is
    the job of <command>po2debconf</command>. This utility is
    automagically called by <command>dh_installdebconf</command>, for
    people who use debhelper tools. This is actually a very good
    argument for using debhelper tools for packages that use debconf.</para>

    <para>The final templates file uses the encoding defined in
    <filename>debian/po/output</filename>. The default value is
    "utf8". It is highly recommended to use "utf8" in all cases. There
    is actually no good reason to use anything else. This will not
    affect the way the templates will be displayed, even in non UTF-8
    environments.</para>

    <section><title>The podebconf-report-po utility</title>

    <para>The <command>podebconf-report-po</command> utility is aimed
    to send notices about needed updates to all translators who have
    incomplete files (at least one fuzzy or untranslated string).</para>

    <para>Using it before uploading a package with modified templates
    is strongly recommended. Translators do not really like to
    discover changes and needed updates after a package has been
    uploaded.</para>

    <para>When using this utility, maintainers should remember that
    many translation teams need time for their internal QA processes
    to take place. Leaving only a few days for translators to update
    their work, especially when important changes occurred, is nearly
    similar to a call for bad translations.</para>
    </section>

  </section>

  <section id="doc-check">
    <title>Documentation's doc-check</title>

  <para>TBD</para>

  </section>


  <section id="bts">
    <title>Use of the BTS for translation work</title>

  <para>TBD</para>

  </section>

  </chapter>


  <chapter id="other_projcets">
    <title>Relationship with other projects</title>

  <para>TBD</para>

  <section id="translation_packaging">
    <title>Translation packaging</title>

  <para>TBD</para>

  </section>

  <section id="bug_reports_upstream">
    <title>Handling of bug reports for upstream translations</title>

  <para>TBD</para>

  </section>


  <section id="lousy_translations">
    <title>Handling of errors in translations</title>

  <para>TBD</para>

  </section>

  </chapter>

</book>

<!-- EOF -->
