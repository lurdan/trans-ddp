<!DOCTYPE debiandoc PUBLIC "-//DebianDoc//DTD DebianDoc//EN" [
  <!-- include version information so we don't have to hard code it
       within the document -->
  <!entity % versiondata SYSTEM "version.ent"> %versiondata;
 <!-- common, language independant entities -->
 <!entity % commondata  SYSTEM "common.ent" > %commondata;
 <!-- CVS revision of this document -->
 <!entity cvs-rev "$Revision: 1.13 $">

 <!-- if you are translating this document, please notate the RCS
      revision of the developers reference here -->
 <!--
   <!entity cvs-en-rev "1.37">
   -->
]>
<debiandoc>
<!--
 TODO:
  - bugs in upstream versions should be reported upstream!
  - add information on how to get accounts on different architectures
  - talk about CVS access, other ways to submit problems
  - add information on how you can contribute w/o being an official
    developer
  - "official port maintainer" ? (cf. glibc-pre2.1)
 -->

 <book>

      <title>Debian デベロッパーズリファレンス
      <author>Adam Di Carlo, current maintainer <email>aph@debian.org</email>
      <author>Christian Schwarz <email>schwarz@debian.org</email>
      <author>Ian Jackson <email>ijackson@gnu.ai.mit.edu</email>
      <version>ver. &version;, &date-ja;

      <copyright>
	<copyrightsummary>
copyright (c)1998, 1999 Adam Di Carlo</copyrightsummary>
	<copyrightsummary>
copyright (c)1997, 1998 Christian Schwarz</copyrightsummary>
	<p>
このマニュアルはフリーソフトウェアです。あなたは、Free Software Foundation
が公表した GNU 一般公有使用許諾の第二版あるいはそれ以降のいずれかの版の
条件に基づいて、本文書の再配付および変更を行うことが可能です。
	<p>
本文書はその有用性が期待されて配付されるものですが、
市場性や特定の目的への適合性に関する暗黙の保証も含め、
<em>いかなる保証も行ないません</em>。
詳細については GNU 一般公有使用許諾書をお読みください。
	<p>
GNU 一般公有使用許諾の写しは、Debian GNU/Linux ディストリビューションの
&file-GPL; や、WWW 上では <url id="&url-gpl;" name="GNU ウェブサイト">
にあります。また &fsf-addr; へ手紙 (英語) で依頼し入手することもできます。
	<p>
なお、この日本語訳については遠藤 美純 (1999 年) に著作権があります。

    <toc detail="sect2">

    <chapt id="scope">この文書が扱う領域
      <p>
この文書の目的は、Debian 開発者に推奨される手続きと利用可能なリソースとに
関する概観を提供することにあります。
      <p>
こちらで扱う諸手続きは、
開発者になる方法 (<ref id="new-maintainer">) や、
新たなパッケージをアップロードする方法 (<ref id="upload">)、
他の開発者によるパッケージを移植したり臨時リリースするには
いつどのようにしたらよいのか (<ref id="nmu">)、
パッケージを移動、削除、みなしご化 (orphan) する方法 (<ref
id="archive-manip">)、バグ報告の扱い方 (<ref id="bug-handling">)
にわたります。
      <p>
また、このリファレンスで触れるリソースには、
メーリングリストとサーバ (<ref id="servers">)、
Debian アーカイブの構成に関する解説 (<ref id="archive">)、
パッケージアップロードを受け付けるさまざまなサーバの説明
(<ref id="upload-master">)、
パッケージの品質を高めるために開発者が利用できるリソースについての解説
(<ref id="tools">) などがあります。
      <p>
初めに明らかにしておきたいのですが、
このリファレンスは、Debian パッケージに関する技術的な詳細や、
Debian パッケージの作成方法を説明するものではありません。
その情報については、<!-- OBSOLETE, please update translation
<url id="&url-pkg-manual;"
name="Debian パッケージングマニュアル">  --> にて論じられています。
また、このリファレンスは Debian
ソフトウェアが準拠すべき基準を詳細に解説するようなものでもありません。
その情報については、<url id="&url-debian-policy;"
name="Debian ポリシーマニュアル"> をご覧ください。
      <p>
さらに、この文書は<em>公式なポリシーを明らかにするものではありません</em>。
こちらに含まれるのは Debian システムに関する記述と、
一般的に認められている慣習に関する記述です。

    <chapt id="new-maintainer">開発者になるための申し込み
	
      <sect>はじめよう
	<p>
あなたは、すでにすべての文書を読み、例題の <package>hello</package> 
パッケージの内容をすべて理解し、
さぁこれからお気に入りのソフトウェアを Debianize しようとしているとします。
では、Debian 開発者になって、自分で作ったパッケージを Debian プロジェクト
に組み入れるためには、実際のところどうすればよいのでしょうか？
	<p>
まだ &email-debian-devel; を購読していないならば、
まず最初にこちらを購読しましょう。
<em>Subject</em> に <tt>subscribe</tt> と書いた電子メールを
&email-debian-devel-req; に送ってください。
なにか問題があったら、メーリングリスト管理者
&email-listmaster; と連絡をとってください。
利用可能なメーリングリストについての情報は
<ref id="mailing-lists"> をご覧ください。
	<p>
実際に行動を起こしたりコードを書いたりする前に、
まずはこちらを購読し、しばらくは様子を見て
(つまり読むだけで投稿は控えて) みましょう。
そうしたら作業が重複しないように、
あなたがどんな作業を行なうかについての投稿をしてください。
	<p>
&email-debian-mentors; を購読するのもよい考えです。
詳しくは <ref id="mentors"> をご覧ください。
また Linux People IRC ネットワーク (例えば <tt>irc.debian.org</tt>) 上の
<tt>#debian</tt> IRC チャンネルも役に立つでしょう。

      <sect id="registering">Debian 開発者としての登録
	<p>
Debian プロジェクトへの登録を決めるまえに、<url id="&url-social-contract;" 
name="Debian の社会契約">を読む必要があります。
開発者として登録するということは、
Debian の社会契約に同意し、その支持を誓約することを意味します。
Debian GNU/Linux の背景にある考え方の本質に対して、
開発者が同意をすることは極めて重要です。
また <url id="&url-gnu-manifesto;" name="GNU 宣言">
も読んでおくとよいでしょう。
	<p>
開発者として登録するためには、
あなたの身元 (identity) とプロジェクトで何をするのか
についての確認を行ないます。

Debian GNU/Linux に関わる作業を行なう人々の数は
&number-of-maintainers; 人を越えるまでに増え、
私たちのシステムは極めて重要なさまざまな領域で利用されているために、
悪意を持った存在に対して慎重になる必要があります。
そのため、新メンテナにサーバのアカウントを与えパッケージのアップロードを
許可する前に、その新メンテナを確かめる必要があるのです。
	<p>
登録に際しては、その手続きの一つとして、以下の情報を 
&email-new-maintainer; に送る必要があります。
<list>
	    <item>
あなたの氏名
	    <item>
希望する <tt>master</tt> サーバのログイン名 (8 文字以下) と、
&email-debian-private; を購読する際の電子メールアドレス
(一般的に、こちらはあなたが普段使っている電子メールアドレスか、
あなたの新しい <tt>debian.org</tt> アドレスになります。)
	    <item>
連絡可能な電話番号。
注意していただきたいのですが、
新メンテナチームは長距離通話料を節約するために、通常は夜に電話をかけます。
夜に勤務先にいるのが普通でない限り、勤務先の電話番号は書かないでください。
	    <item>
プロジェクト参加の意図に関する宣言。
こちらにはどんなパッケージを作成しようとしているか、
どの Debian 移植版を手伝おうとしているのか、
どのように Debian に貢献しようと考えているのかを書きます。
	    <item>
<url id="&url-social-contract;" name="Debian 社会契約"> を読み、
それを支持することに同意する旨の宣言
	    <item>
あなたの実生活での身元を確認するための手段。
例えば以下に挙げる手段ならば問題ありません。
<list>
		  <item>
以下のものによる、私たちが確認可能な署名によってサインされた OpenPGP 鍵
<list>
			<item>
<em>実生活上</em>で会ったことがある現行の Debian 開発者
			<item>
あなたの身元を証明する (Verisign などのような) 公式な認証サービス。
電子メールアドレスに関する証明で、
あなたの身元を証明するものでないものでは、不十分です。
		      </list>
		  <item>
また、ご自身の身元が確認できる公式証明書
(出生証明書、国民証明書、アメリカ合衆国運転免許証など) の写しをスキャン
(あるいは郵送)、することによって身元を証明することもできます。
なお、こちらを電子メールで送る場合は、あなたの OpenPGP 鍵で署名してください。
		</list>
	  </list>
	<p>
もしまだ OpenPGP 鍵を持っていないならば、それを生成してください。
アップロードするパッケージに署名し、それを確認するために、
開発者には全員 OpenPGP 鍵が必要です。
お使いになるソフトウェアのマニュアル
にはセキュリティに関する極めて重要な情報が書かれていますので、
そちらはよく読んでおいてください。
セキュリティ上の問題のほとんどは、
ソフトウェア上の欠陥や高度なクラック技術によるものというよりは、
人間のミスによるものなのです。
お使いになる公開鍵の管理に関するより詳細な情報については
<ref id="key-maint"> をご覧ください。
	<p>
Debian はその基準となる標準として <prgn>GNU Privacy Guard</prgn> 
(<package>gnupg</package> パッケージのバージョン 1 以降) を利用します。
同様に OpenPGP の他の実装を利用されても結構です。
なお、OpenPGP は <url id="&url-rfc2440;" name="RFC2440">
におけるオープンな標準に基づくものです。
	<p>
Debian の開発作業において用いられる公開鍵アルゴリズムとして推奨されるのは、
DSA (こちらは ``DSS'' や ``DH/ElGamal'' と呼ばれることもあります) です。
なお、他の種類の鍵をお使いになっても結構です。
しかし、お使いになる鍵の長さは、少なくとも 1024 ビットでなくてはなりません。
これより短い鍵はセキュリティが低いので、それをわざわざ使う必要はありません。
また、お使いになる鍵には、少なくともあなたのユーザ 
ID を用いて署名しておいてください。
こうすることによって ユーザ ID の改竄を防ぐことができます。
<prgn>gpg</prgn> はこちらを自動的に行ないます。
	<p>
また お使いになる鍵上の名前の一つが、
作成したパッケージであなたが公式開発者として用いる
電子メールアドレスと一致するようにしてください。
例えば、私は <package>developers-reference</package> パッケージの開発者を
``Adam Di Carlo &lt;aph@debian.org&gt;'' としていますが、
それゆえ、私の鍵のユーザ ID の一つは、これと同じ値
``Adam Di Carlo &lt;aph@debian.org&gt;'' を持っています。
	<p>
まだあなたの公開鍵を &pgp-keyserv; のような公開鍵サーバに
登録していない場合は、お手元のコンピュータで利用できる 
&file-keyservs; という文書をお読みください。
この文書には自分の鍵を公開鍵サーバに登録する方法が説明されています。
あなたの公開鍵が公開サーバに登録されていなかった場合は、
New Maintainer グループがその登録を行ないます。
	<p>
アメリカ合衆国の輸出制限のために <package>gnupg</package>
を含むいくつかのパッケージは、合衆国外の ftp サーバに置いてあります。
これらのパッケージが現在置かれている場所に関しては、
<url id="&url-readme-non-us;"> をご覧ください。
	<p>
国によっては、暗号ソフトウェアの利用を国民に禁じているところもあります。
しかし、(フランスの場合など) 暗号を扱う製品を、暗号の利用のためではなく認
証のために利用することは完全に合法ですから、こちらも Debian パッケージ開発
者の活動を妨げるものではありません。
Debian プロジェクトでは、暗号の生成、解読のために、
それを利用することは求められません。
なお、認証のための暗号利用が禁止されている国に住んでいる場合は、
特別な措置を講じますのでご連絡ください。
	<p>
あなたに関する情報をすべて用意しおわり公開鍵が公開鍵サーバに登録されたら、
あなたのパッケージをアップロードできるよう
公式 Debian 開発者の登録を行なうために、
&email-new-maintainer; 宛てに電子メールを送ってください。
この電子メールには、上記の情報がすべて含まれていなければなりません。
また、このメールには <url id="&url-debian-keyring;"> や、
<package>debian-keyring</package> パッケージで配布される鍵データベース用に、
あなたの公開鍵を添えなければなりません。
(<prgn>gpg</prgn> の場合は <tt>gpg --armor --export <var>user_id</var></tt> 
として鍵を取り出してください。)
なお、この申請メールには自分で選んだ公開鍵で必ず署名してください。
	<p>
これらの情報が受け取られて処理されれば、あなたの Debian
開発者としての新たなアカウントに関する情報が連絡されるはずです。
もし一ヶ月以内に何も連絡がなかったら、
申請メールが届いているかどうか尋ねるために、
フォローアップメッセージを送ってください。
申請メールを繰り返して送るようなことは、
New Maintainer チームが混乱するだけですので、
決して<em>しない</em>でください。
特にリリースが近づいている場合などは、
間違いも起こりやすく、担当者も時間に追われているので、
辛抱強くお待ちください。

      <sect id="mentors">Debian Mentors (指導者)
	<p>
新米開発者が初めてパッケージを作成したり、
開発に関連する他の問題を解決する際に、その手助けができるよう
メーリングリスト &email-debian-mentors; が用意されています。
新規開発者にはこのメーリングリストの購読が進められています。
(詳細は <ref id="mailing-lists"> をご覧ください。)
	<p>
(例えば、私的な電子メールのやりとりなど) 一対一の援助を望まれる場合も、
このメーリングリストを利用してください。
経験豊富な開発者が手助けを申し出てくれるでしょう。


    <chapt id="user-maint">Debian に登録した自分の情報を管理する

      <sect id="key-maint">自分の公開鍵を管理する
	<p>
各自の秘密鍵の扱いについては十分に注意してください。
それを公開サーバや <tt>master.debian.org</tt> 
のようなマルチユーザのマシンに置いたりしてはいけません。
またそのバックアップを取り、その写しをオフラインで保持しておいてください。
さらに、お使いになるソフトウェアに付属する説明書や、
<url id="&url-pgp-faq;" name="PGP FAQ"> にも目を通してください。
	<p>
あなたの公開鍵に署名やユーザ ID を加えたり削除した場合には
鍵サーバ上の公開鍵を更新するとともに、
あなたの公開鍵を &email-debian-keyring;
に電子メールで送付する必要があります。
その鍵を取り出す方法については <ref id="registering">
で説明してあります。
	<p>
Debian における鍵管理についてのより詳細な検討については、
<package>debian-keyring</package>
パッケージのドキュメントをご覧ください。

      <sect>丁重に脱退する
	<p>
Debian プロジェクトから脱退を決めた場合は、
必ず以下の手続きを行なうべきです。
<enumlist>
	    <item>
<ref id="orphaning"> の説明にしたがい、
自分のパッケージすべてをみなしご化する
	    <item>
プロジェクト脱退の理由に関する電子メールを
&email-debian-private; に送る
	    <item>
&email-debian-keyring; 宛てに電子メールを送り、
Debian キーリング管理者にプロジェクト脱退を伝える
	  </enumlist>


    <chapt id="servers">メーリングリストや、サーバ、他のマシン
      <p>

この章では、開発者が利用できる Debian メーリングリストおよび主な Debian
サーバや他の Debian マシンに関する簡単な紹介を行ないます。

      <sect id="mailing-lists">メーリングリスト
	<p>
メーリングリストサーバは <tt>&lists-host;</tt> にあります。
購読する場合は <tt>subscribe</tt> を購読を取り消す場合は
<tt>unsubscribe</tt> と <em>Subject</em> に書いて、
<tt>debian-<var>foo</var>-REQUEST@&lists-host;</tt>
に電子メールを送ってください。
その際 <tt>debian-<var>foo</var></tt>
にはそのメーリングリストの名前を当てはめてください。
メーリングリストの購読とその購読取り消しに関するより詳細な説明については、
<url id="&url-debian-lists-subscribe;">や
<url id="&url-debian-lists-txt;">、また
<package>doc-debian</package> パッケージをインストールしている場合は、
お手元のマシンの &file-mail-lists; をご覧ください。
	<p>
メーリングリストのメッセージに返信をする場合、
カーボンコピー  (<tt>CC</tt>) をオリジナルの発信者に送ることは、
そうすることが明示的に求められていない限りはしないでください。
メーリングリストに投稿した人は、その返信をメーリングリスト上で読むはずです。
	<p>
Debian の中核的なメーリングリストには、&email-debian-devel; や、
&email-debian-policy;、&email-debian-user;、&email-debian-private;、
&email-debian-announce;、&email-debian-devel-announce; があります。
開発者は全員少なくとも &email-debian-private と 
&email-debian-devel-announce; を購読することが期待されます。
特別な目的を持つ他のメーリングリストに関しては、
<url id="&url-debian-lists-subscribe;"> をご覧ください。
また、クロスポスト (同じメッセージを複数のメーリングリストへ投稿すること)
はなるべく避けてください。
	<p>
&email-debian-private; は、Debian 開発者間の私的な議論のために
用意された特別なメーリングリストです。
こちらは、いかなる理由があったとしても、
公には公開しない投稿のために用いられるものです。
そのため、こちらは小規模なメーリングリストで、
本当に必要な場合を除いて &email-debian-private; の利用は勧められません。
さらに、このメーリングリストの電子メールを他者に転送しては
<em>いけません</em>。
	<p>
ネットワークにおける通例通りに、
返信する場合の記事の引用は控え目にしてください。
また、一般的にメッセージ投稿に関しては通例の慣習にしたがってください。
	<p>
メーリングリストのオンラインアーカイブは
<url id="&url-lists-archives;"> にて利用できます。

      <sect id="server-machines">Debian サーバ群
	<p>
Debian サーバ群はよく知られていますが、
Debian プロジェクトにおいて極めて重要な機能を果たしています。
各開発者は各サーバがどのようなもので、何を行なっているのかを
知っておくべきでしょう。
	<p>
もし Debian サーバの利用に問題があり、
その問題をシステム管理者に知らせる必要があると思われる場合は、
<!-- Adam disabled, not used <url id="&url-debian-contacts;"> -->
をご覧になって、その担当者の連絡先を確認してください。
また、サーバの利用に関するもの以外の問題
(例えばパッケージの削除や、ウェブサイトへの提案など) がある場合は、
一般的には「仮想パッケージ」に対するバグとして報告を行なってください。
バグ報告に関する情報については <ref id="submit-bug"> をご覧ください。

      <sect1 id="servers-master">master サーバ
	<p>
master サーバ <tt>master.debian.org</tt> には、
(non-U.S. パッケージを除く) Debian 
アーカイブの正式な写しが保持されています。
一般的にパッケージはこのサーバにアップロードされます。
<ref id="upload"> をご覧ください。
	<p>
また、バグ追跡システム (BTS) が正式におかれているのも、
この <tt>master.debian.org</tt> です。
Debian バグの統計的な分析や処理を行ないたい場合に、
それを行なうのもこちらになります。
しかしながら、そこに何かを実装する前には、
無駄な労力や時間の浪費を避けるために、
&email-debian-devel; にてあなたのプランを説明してください。
	<p>
Debian 開発者はすべて <tt>master.debian.org</tt> にアカウントを持ちます。
このマシンのパスワードの管理には注意してください。
危険を犯してインターネット越しにパスワードを送るような、
ログインやアップロードメソッドは避けるようにしてください。
	<p>
<tt>master.debian.org</tt> でディスクフル、不審な動作などを見かけた場合は、
&email-debian-admin; 宛てに電子メールを送ってください。
Debian FTP アーカイブに関する問題については、通常
<package>ftp.debian.org</package> 
仮想パッケージに対するバグとして報告するか、
&email-ftpmaster; 宛てに電子メールを送る必要があります。
なお、その手続きについては <ref id="archive-manip"> をご覧ください。

      <sect1 id="servers-www">WWW サーバ
	<p>
メインウェブサーバである <tt>www.debian.org</tt>
は、<tt>va.debian.org</tt> としても知られているものです。
開発者には全員にこのマシンのアカウントが付与されます。
	<p>
ウェブ上でもっぱら Debian に関連する情報を提供したい場合は、
あなたのホームディレクトリ配下の <file>public_html</file>
ディレクトリにファイルを設置すれば可能です。
こちらに関しては <tt>va.debian.org</tt> と
<tt>master.debian.org</tt> のどちらで行なっても結構です。
その場所に設置したファイルは、
<tt>http://www.debian.org/~<var>user-id</var>/</tt> か
<tt>http://master.debian.org/~<var>user-id</var>/</tt> という
URL 経由でそれぞれアクセスすることができます。
場合によっては <tt>master</tt> 
上にファイルを設置する必要があるかもしれませんが、
一般的には <tt>www.debian.org</tt> アドレス用に <tt>va</tt>
をご利用になりたいでしょう。
前もって許可を得ていない限り、Debian に関係のないコンテンツを
Debian サーバ上には設置しないください。
何か質問があるときには &email-debian-devel; へ電子メールを送ってください。
	<p>
Debian ウェブサーバに問題を見つけた場合、通常は 
<package>www.debian.org</package>
仮想パッケージに対するバグとして報告してください。
なお、まず初めに誰かがすでに同じ問題を報告していないかどうかを
<url id="&url-bts;db/pa/lwww.debian.org.html" name="バグ追跡システム">
で確認してください。

      <sect1 id="servers-cvs">CVS サーバ
	<p>
<tt>cvs.debian.org</tt> は前述の
<tt>va.debian.org</tt> としても知られているものです。
開発者が複数いるパッケージの協同作業を手伝う場合など、
CVS サーバへの公開アクセスを利用したい場合は、
このサーバの CVS エリア利用を依頼することができます。
	  <p>
一般的に <tt>cvs.debian.org</tt> は、ローカル CVS アクセスや、
クライアント/サーバ式アノニマス読み込み専用アクセス、
<prgn>ssh</prgn> 経由クライアント/サーバ式フルアクセスを
組み合わせて提供します。
また、この CVS エリアには <url id="&url-cvsweb;">
からウェブ経由で読み込み専用アクセスをすることができます。
	<p>
CVS エリア利用の依頼をする場合は、&email-debian-admin;
宛てに電子メールで依頼してください。
その際には、必要とする CVS エリアの名前や、CVSROOT の所有者となる
<tt>va.debian.org</tt> 上のユーザアカウント、
こちらを必要とする理由を書き添えてください。

      <sect1 id="servers-mirrors">Debian サーバのミラー
	<p>
ウェブサーバおよび FTP サーバには、利用可能なミラーサーバが複数あります。
中核となる FTP サーバやウェブサーバには高い負荷を与えないでください。
理想的には、中核となるサーバは第一陣のミラーサーバにミラーを行なうのみで、
ユーザはすべてミラーにアクセスすることが望ましいです。
こうすれば Debian は必要とするネットワーク帯域を、
複数のサーバやネットワークにより適切に分散させることができます。
なお、より新しいミラーリング送出技術によって、
ミラーが可能な限り最新であることが保証されます。
	<p>
利用可能な公開 FTP (および、通常は、HTTP)
サーバの一覧を掲載するメインウェブページは
<url id="&url-debian-mirrors;"> にあります。
Debian ミラーに関するより詳しい情報については
<url id="&url-debian-mirroring;"> をご覧ください。
この有益なページには、内部向けアクセスや公的アクセスのどちらにおいても、
独自にミラーを設置することに関心がある場合に
役立つ情報やツールが含まれています。
	<p>
普通これらのミラーは Debian 
への協力に関心のあるサードパーティーによって運営されています。
そのため通常、開発者はこれらのマシンにアカウントがありません。
	<p>
<tt>master.debian.org</tt> のミラーをとることはしないでください。
このホストはすでに相当高い負荷を負っています。
その情報については上記のサイトを確認するか、
<email>debian-devel@lists.debian.org</email>
宛てに電子メールを送ってください。

      <sect id="other-machines">Debian の他のマシン
	<p>
開発者が利用できる Debian マシンは他にもあります。
これらのマシンは、利用者が適切であると判断する範囲内で、
Debian に関連する目的に利用できます。
なお、各システム管理者に迷惑をかけないように注意してください。
また、まず最初にローカルメンテナに了解を得ない限りは、
ディスクスペースや、ネットワーク帯域、CPU などをむやみに使わないでください。
普通これらのマシンはボランティアによって運営されています。
これらのマシンは一般的に移植作業用です。
	<p>
<ref id="server-machines"> で触れた各サーバとは別に、
Debian 開発者が利用できるマシンの一覧が 
<url id="&url-devel-machines;"> にあります


    <chapt id="archive">Debian アーカイブ

      <sect>概観
	<p>
Debian GNU/Linux ディストリビューションは、数多くの Debian パッケージ
(現在約 &number-of-pkgs; ある <tt>.deb</tt> ファイル)
といくつかの付加的なファイル (ドキュメントやインストールディスクイメージなど)
から構成されています。
	<p>
以下は完全な Debian ディストリビューションのディレクトリツリーの一例です。
	<p>
&sample-dist-dirtree;
	<p>
ご覧の通りに、ディストリビューションのトップレベルディレクトリには、
<em>main</em>、<em>contrib</em>、<em>non-free</em>
の三つのディレクトリがあります。
これらのディレクトリは <em>sections</em> と呼ばれています。
	<p>
各セクションには、ソースパッケージ用のディレクトリ
(<tt>source</tt>)、サポートされている各アーキテクチャ用のディレクトリ
(<tt>binary-i386</tt>、<tt>binary-m68k</tt> など)、
アーキテクチャ非依存のパッケージ用のディレクトリ
(<tt>binary-all</tt>) があります。
	<p>
<em>main</em> セクションには、特定のアーキテクチャにおいて Debian ディスト
リビューションをインストールする際に必要となるディスクイメージと、
いくつかの基本的な文書を収録するための付加的なディレクトリ
(<tt>disks-i386</tt>、<tt>disks-m68k</tt> など) が含まれています。
	<p>
<em>binary</em> および <em>source</em> ディレクトリは、
さらに <em>subsections</em> に分かれています。

      <sect>セクション
	<p>
<em>公式 Debian GNU/Linux ディストリビューション</em>
を構成するのが <em>main</em> セクションです。
<em>main</em> セクションは、
私たちのガイドラインすべてに完全に適合するがゆえに公式なものです。
他の二つのセクションは程度の違いはありますが、
このガイドラインに適合しないために、
Debian の公式な構成要素ではありません。
	<p>
<em>main</em> セクションの全パッケージは
<url id="&url-dfsg;" name="Debian フリーソフトウェアガイドライン">(DFSG) と
<url id="&url-debian-policy;" name="Debian ポリシーマニュアル">
に記載されている他のポリシー上の要件を完全に満たしています。
DEFS は「フリーソフトウェア」に関する私たちの定義です。
詳しくは Debian ポリシーマニュアルをご覧ください。
	<p>
DFSG に適合しないパッケージは
<em>non-free</em> セクションに置かれます。
これらのパッケージに関しては、その利用のサポートや
<em>non-free</em> ソフトウェアパッケージのためのインフラ
(バグ追跡システムや、メーリングリストなど)は提供しますが、
Debian ディストリビューションの一部とは見なされません。
	<p>
<em>contrib</em> セクションのパッケージは
DFSG に適合していなければなりませんが、
他の要件を満たせないものが当てはまります。
例えば <em>non-free</em> パッケージに依存するパッケージなどです。
	<p>
この三つのセクションに関しては、
<url id="&url-debian-policy;" name="Debian ポリシーマニュアル">
により正確な定義が記述されています。
上記の説明は簡易的なものです。
	<p>
アーカイブのトップレベルを三つのセクションに分けていることは、
インターネット上の FTP サーバや CD-ROM などを経由して
Debian を配布したいと考える人々にとって重要です。
というのも、<em>main</em> および <em>contrib</em>
セクションのみを配布するならば、
あらゆる法的な危険を避けることができるからです。
例えば <em>non-free</em> セクションのパッケージのいくつかは
商業配布が禁じられています。
	<p>
一方、CD-ROM ベンダにとっては <em>non-free</em>
パッケージの個々のライセンスをチェックし、許可を得たものを
CD-ROM に収録することが容易になります。
(この扱いはベンダによってさまざまでしょうから、
この作業は Debian 開発者によっては行なわれません。)

      <sect>アーキテクチャ
	<p>
当初 Linux カーネルが利用できたのは Intel i386 (およびそれ以降)
プラットフォームのみで、Debian も同様でした。
しかし Linux がより普及すると、
カーネルも他のアーキテクチャへと移植されるようになりました。
	<p>
Linux 2.0 カーネルは Intel x86 や、DEC Alpha、SPARC、(Atari や、
Amiga、Macintoshes といった) Motorola 680x0 、MIPS、PowerPC
などをサポートしています。
Linux 2.2 カーネルはさらに、ARM や UltraSPARC
を含むより多くのアーキテクチャをサポートします。
Debian は、Linux がサポートするプラットフォームを
同様にサポートすべきだとしています。
そのため Debian には作業中の移植版があり、
また実際のところ非 Linux カーネルへの移植版も作業中です。
<em>i386</em> (Intel x86 の私たちの呼び名) は別にして、
この文書が書かれている現在、<em>m68k</em> や、<em>alpha</em>、
<em>powerpc</em>、<em>sparc</em>、<em>hurd-i386</em> <em>arm</em>
などが作業中です。
	<p>
Debian GNU/Linux 1.3 は <em>i386</em> 版のみが利用可能でした。
Debian 2.0 では <em>i386</em> および <em>m68k</em>
アーキテクチャ版が提供されました。
Debian 2.1 では <em>i386</em>、<em>m68k</em>、<em>alpha</em>、および
<em>sparc</em> アーキテクチャ版が提供されました。
Debian 2.1 では <em>powerpc</em> アーキテクチャのサポートが追加されます。
	<p>
特定の移植版に関する開発者向け、あるいはユーザ向の情報は 
<url id="&url-debian-ports;" name="Debian 移植版ウェブページ">
をご覧ください。

      <sect>サブセクション
	<p>
<em>main</em>、<em>contrib</em>、<em>non-free</em> の各セクションは、
インストールプロセスやアーカイブのメンテナンスを単純化するために
<em>subsections</em> に分割されます。
サブセクションは、`base' サブセクションを除けば、
正式には定義されていません。
サブセクションは単に、
利用可能なパッケージの整理と閲覧を容易にするために存在しています。
どのセクションが利用可能かどうかは、
現行の Debian ディストリビューションをチェックしてください。

      <sect>パッケージ
	<p>
Debian パッケージには、<em>source</em> パッケージと
<em>binary</em> パッケージの二種類があります。
	<p>
ソースパッケージは、<tt>.dsc</tt> ファイルと
<tt>.tar.gz</tt> ファイル、あるいは、<tt>.dsc</tt> ファイルと
<tt>.orig.tar.gz</tt>、<tt>.diff.gz</tt> 
ファイルといった二つないし三つのファイルから構成されています。
	<p>
Debian 専用に開発され Debian 以外で配布されていないパッケージでは、
プログラムのソースを含むファイルは <tt>.tar.gz</tt> ファイルのみです。
一方 Debian 以外でも配布されているパッケージの場合は、
<tt>.orig.tar.gz</tt> ファイルにいわゆる <em>upstream source code</em>
を収めます。これは <em>upstream maintainer</em> 
(たいていはそのソフトウェアの作者) によって配布されているソースコードです。
この場合、Debian 開発者によって加えられた変更は
<tt>.diff.gz</tt> ファイルに収められます。
	<p>
<tt>.dsc</tt> ファイルには、ソースパッケージのファイル一覧や、
チェックサム (<prgn>md5sums</prgn>)、パッケージに関するいくらかの追加情報
(パッケージ開発者やバージョンなど) が収められます。

      <sect>ディストリビューションディレクトリ
	<p>
前章で説明したディレクトリシステムは、
<em>distribution directories</em> に含まれるものです。
全ディストリビューションは Debian アーカイブのトップレベルディレクトリ
にある <tt>dists</tt> ディレクトリに収められています。
(トップレベルディレクトリから各ディストリビューションに張られている
シンボリックリンクは、下位互換のためにあるもので、重要なものではありません。)
	<p>
要約すれば、Debian アーカイブは FTP
サーバにルートディレクトリを持っているといえます。
例えば、ミラーサイト <ftpsite>ftp.us.debian.org</ftpsite> では、
Debian アーカイブ全体は  <ftppath>/debian</ftppath>
に収められていますが、その位置は共通しています。
(<ftppath>/pub/debian</ftppath> にある場合もあります。)
	<p>
実際の個々のディストリビューションは
そのアーカイブのルートにある
<tt>dists</tt> ディレクトリに収められています。
以下はそのレイアウトの概要です。
	<p>
<example>
<var>archive root</var>/dists/<var>distribution</var>/<var>section</var>/<var>architecture</var>/<var>subsection</var>/<var>packages</var>
</example>

このレイアウトから推察して、
<em>slink</em> ディストリビューションの i386 ベースパッケージを探すには
<ftppath>/debian/dists/slink/main/binary-i386/base/</ftppath>
を見ればいいことが分かるでしょう。


	<sect1>安定版、開発版、(時に) フリーズ版
	<p>
Debian のディストリビューションには (<tt>dists/stable</tt> にある)
<em>stable</em> (安定版) と呼ばれるものと、
(<tt>dists/unstable</tt> にある)
<em>unstable</em> (開発版)と呼ばれるものの二つが常に存在します。
こちらは Debian プロジェクトの開発プロセスを反映しています。
	<p>
活発な開発は、<em>unstable</em> ディストリビューションで行なわれます。
(そのためこのディストリビューションはときに <em>development
distribution</em> とも呼ばれます。)
全 Debian 開発者はいつでも、
このディストリビューションで自分のパッケージを更新することができます。
そのため、このディストリビューションの内容は日に日に変わっていきます。
このディストリビューションは特別にテストされているものではないので、
時に「不安定」なものです。
	<p>
開発期間が終了すると、<em>unstable</em> ディストリビューションは
<em>frozen</em> と呼ばれる新たなディストリビューションディレクトリに
コピーされます。
この後は、バグフィックスを除くいかなる変更も
frozen ディストリビューションに対してはできません。
こちらが「フリーズ版 frozen」と呼ばれるのはそのためです。
一ヶ月あるいはもうすこし以上経つと、
<em>frozen</em> ディストリビューションは 
<em>stable</em> に名前を変えます。
古い <em>stable</em> は上書きされ、この時点で消去されます。
	<p>
この開発サイクルは <em>unstable</em> ディストリビューションが、
<em>frozen</em> ディストリビューションとしてのテスト期間を経て、
<em>stable</em> ディストリビューションになるとの仮定に基づいたものです。
あるディストリビューションが安定していると見なされたとしても、
二三のバグは必ず残っているものです。
<em>stable</em> ディストリビューションが時々更新されるのはこのためです。
しかしながら、これらの更新は極めて注意深くテストされ、
新たなバグを持ち込む危険を避けながら個々にアーカイブに導入されねばなりません。
<em>stable</em> ディストリビューションへの追加推奨パッケージは、
<tt>proposed-updates</tt> ディレクトリにあります。
検査に合格した <tt>proposed-updates</tt> にあるこれらのパッケージは、
定期的にまとめて <em>stable</em> ディストリビューションに移動され、
<em>stable</em> ディストリビューションのリビジョンレベルが上げられます。
(例えば、`1.3' は `1.3r1' に、`2.0r2' は `2.0r3' となっていきます。)
	<p>
古い <em>unstable</em> ディストリビューションが  <em>frozen</em>
ディストリビューションに移動されると、新たな <em>unstable</em>
ディストリビューションが作られるため、``freeze'' 期間の間も
<em>unstable</em> ディストリビューションの開発は続けられます。
また他の変更点としては、<em>frozen</em> ディストリビューションが公式に
リリースされた際、Debian アーカイブから古い <em>stable</em> 
ディストリビューションが (<tt>&archive-host;</tt> 
には残されますが) 完全に消去されることがあげられます。
	<p>
要約すれば、常に <em>stable</em> および <em>unstable</em> 
ディストリビューションが利用可能で、
時々 <em>frozen</em> ディストリビューションが一ヶ月かもしくはそれ以上の間
設置されるということです。

	<sect1>実験版
	  <p>
<em>experimental</em> ディストリビューション (実験版) は
特別なディストリビューションです。
こちらは `stable' や `unstable' とは異なり、
完全なディストリビューションではありません。
こちらはその代わりに、
お使いのシステムを破壊しかねない極めて実験的なソフトウェアのための、
一時的な設置領域であることを意味します。
<em>experimental</em> ディストリビューションからパッケージを
ダウンロードしインストールするユーザは、
このことを十分に注意すべきことが望まれます。
つまり、<em>experimental</em> ディストリビューションに賭けることは
間違っているということです。
	  <p>
<em>experimental</em> ディストリビューションの利用を選択する際、
開発者は十分に注意すべきです。
もしあるパッケージが極めて不安定なものだったとしても、
description (パッケージ解説文) に二三の警告を掲載するなどして、
<em>unstable</em> ディストリビューションにアップロードする方がよいでしょう。
しかしながら、システムに極めて深刻な損害を与えかねないソフトウェアに関しては、
<em>experimental</em> ディストリビューションにアップロードするほうが
適切でしょう。
	  <p>
例えば実験的な暗号ファイルシステムなどは、おそらく
<em>experimental</em> ディストリビューション向きでしょう。
完全に異なる設定を用いる新しいベータ版のソフトウェアなども、
開発者の裁量によりますが <em>experimental</em> 
ディストリビューション向きでしょう。
新しくてもシステムに損害を与えるようなことがないソフトウェアは、
<em>unstable</em> ディストリビューションにアップロード可能です。
お使いのシステムのアップグレードが不完全な場合やその状況が複雑な場合は、
テスタたちが用意にアクセスできるように
<em>experimental</em> ディストリビューションを
一時的な領域として利用することもできます。
	  <p>
しかしながら、<em>experimental</em> ディストリビューションを
個人的な一時領域として利用することは、常によい考えであるとは限りません。
そこに設置したファイルを自分で置き換えたり更新したりできないからです。
(<prgn>dinstall</prgn> や Debian アーカイブメンテナがそれを行ないます。)
さらに、そのパッケージを <em>unstable</em> 
ディストリビューションにアップロードした場合には、
<em>experimental</em> ディストリビューション上からそれを削除するよう
アーカイブメンテナに依頼することを覚えておかなくてはいけないでしょう。
Debian アーカイブメンテナの負担を減らすためにも、
こちらに関しては一般的に <tt>va.debian.org</tt> 
上にある個人用ウェブスペースを利用することがより適切です。

      <sect id="codenames">リリースコード名
	<p>
リリースされた各 Debian ディストリビューションには <em>code name</em>
が付けられます。
Debian 1.1 には `buzz'、Debian 1.2 には `rex'、Debian 1.3 には `bo'、
Debian 2.0 には `hamm'、Debian 2.1には `slink'、そして Debian 2.2
には `potato' という <em>code name</em> が付けられています。
また、`sid' と名づけられた「仮想ディストリビューション」もあります。
こちらには、Debian によって公式にはサポートおよびリリースされていない
アーキテクチャのパッケージが収録されます。
これらのアーキテクチャは、
将来的にはメインディストリビューションに統合される計画にあります。
	<p>
Debian はオープンな開発モデルを取っているので、
<em>unstable</em> ディストリビューションでさえも
Debian FTP、HTTP サーバネットワークからインターネット経由で 
配布されています。
そのため、開発バージョンを収録したディレクトリの名前を
`unstable' としたならば、そのバージョンをリリースする際にはその名前を
`stable' に変更しなければなりませんが、
このことによって FTP ミラーはディストリビューション全体
(すでに極めて巨大です!) を再取得しなければならなくなります。
	<p>
一方初めからディストリビューションディレクトリを
<em>Debian-x.y</em> としたならば、Debian リリース <em>x.y</em> 
が利用可能だと受け止められてしまうでしょう。
(過去にある CD-ROM ベンダが、pre-1.0 開発バージョンをベースに
Debian 1.0 CD-ROM を作成したことがありました。
Debian 最初の公式リリースが 1.0 ではなく 1.1 だったのはこのためでした。)

	<p>
そのため、アーカイブ中のディストリビューションディレクトリの名前は、
そのリリース状態ではなく (`slink' のような) コード名によって定められています。
これらの名前は、開発期間中もリリースの後も同じものになっており、
変更可能なシンボリックリンクが、
現行のリリース済み安定ディストリビューションを指し示します。
ディストリビューションディレクトリの実体に <em>code names</em> を用い、
適切なリリースディレクトリを指すために <em>stable</em>、<em>unstable</em>、
<em>frozen</em> へのシンボリックリンクを用いるのはこのためです。


    <chapt id="upload">パッケージのアップロード

      <sect>新規パッケージのアナウンス
	<p>
Debian ディストリビューション用に新たなパッケージを作成しようと考えたら、
まず最初に
<url id="&url-wnpp;" name="Work-Needing and Prospective Packages (WNPP)"> 
の一覧をチェックしてください。
WNPP をチェックすることによって、
まだ誰もそのソフトウェアのパッケージング作業を行なっていないこと、
作業が重複していないことが確認できます。
あなたが作業を予定しているパッケージにまだ誰も手をつけていないことが
分かったら、新たなパッケージ作成に関するあなたの計画を説明するために
簡潔な電子メールを &email-debian-devel; 宛てに送ります。
その電子メールのサブジェクトは ``intent to package <var>foo</var>''
とするべきです。
<var>foo</var> のところには新たなパッケージの名前を当てはめてください
	<p>
このような手順を踏むことを開発者にお願いするのは、
以下のようないくつかの理由のためです。

	  <list compact>
	    <item>
この手順は (潜在的な新) 開発者がメーリングリストの人々の経験に与る助けになり、
また既に誰かが作業していた場合その人に連絡することにもなります。
	    <item>
そのパッケージの作業を考えていた他の人々に、
その作業の志願者がいることやまたその作業を協同して行なえることを
知らしめることができます。
&email-debian-devel; への ``intent to package'' メッセージは WNPP
メンテナによって収集され、その申し出は WNPP 文書の改訂版で公開されます。
	    <item>
他の開発者に、パッケージ一行解説文や、
普通デフォルトで <tt>debian-devel-changes</tt> に投稿される
``Initial version'' の changelog エントリ
よりも詳しいパッケージ情報を伝えることができます。
	    <item>
このことは (テスタの第一陣を形成している) 開発版を常時使っている人々に
役立ちます。私たちはこのような人々を鼓舞すべきです。
	    <item>
このアナウンスは、開発者や関心の高い他のグループに対して、
当プロジェクトで行なわれていること、新しく起こっていることについての
よりよい好感をもたらします。
	  </list>

      <sect id="uploading">パッケージをアップロードする

	<sect1>changes ファイルの作成
	  <p>
Debian FTP アーカイブにパッケージをアップロードする際には、
アーカイブメンテナにその扱いを指示するための
<tt>.changes</tt> を添えなければなりません。
こちらは普通、通常のパッケージ構築プロセスの最中に
<prgn>dpkg-genchanges</prgn> によって生成されます。
	  <p>
この changes ファイルは以下のフィールドをもつ制御ファイルです。
	  <p>
&control-file-fields;
	  <p>
Debian アップロードの際、これらのフィールドはすべて必須です。
これらのフィールドの内容については
<!-- OBSOLETE, please update translation
<url id="&url-pkg-manual;" name="Debian パッケージングマニュアル"> -->
の制御フィールドの一覧をご覧ください。
また、<tt>Description</tt> フィールドを用いれば
自動的にバグをクローズすることが可能です。
こちらに関しては <ref id="upload-bugfix"> をご覧ください。
なお、この節ではアーカイブメンテナンスのポリシーに関わる
<tt>Distribution</tt> フィールドのみを取り上げます。

	<sect1 id="upload-dist">ディストリビューションの選択
	  <p>
とりわけ <file>debian/changelog</file> ファイルから生成される
<tt>Distribution</tt> フィールドは、
そのパッケージがどのディストリビューション向けのものなのかを示します。
このフィールドの値には、`stable'、`unstable'、`frozen'、`experimental' 
の四つが当てはまりえます。
またこれらの値は組み合わせて当てはめられる場合もあります。
例えば、極めて重要なセキュリティ上の修正を施したパッケージのリリースがあり、
そのパッケージが <em>stable</em> および <em>unstable</em>
ディストリビューションの双方に必要なものであったならば、
<file>changelog</file> の <tt>Distribution</tt> フィールドには
`stable unstable' と記入します。
あるいは、Debian がフリーズされており <em>frozen</em>
ディストリビューションにバグ修正リリースを収録したい場合は、
そのディストリビューションは `frozen unstable' とします。
(<em>frozen</em> へアップロードする際のより詳細な情報については
<ref id="upload-frozen"> をご覧ください。)
なお注意していただきたいのですが、ディストリビューションを
`stable' に設定することは、実際に <em>stable</em> 
ディストリビューションに収録される前に、
そのパッケージがさらなるテストのために Debian アーカイブの
<tt>proposed-updates</tt> ディレクトリに収録されることを意味しています。
また <em>experimental</em> ディストリビューションを
他のディストリビューションと組み合わせることはまったく意味がありません。
注意してください。
	  <p>
特定のアップストリームバージョンに対応するバージョンを
初めてアップロードする際には、
オリジナルソースの tar ファイルを <tt>.changes</tt> ファイルを添えて
アップロードしなければなりません。
続いて新しい diff と <tt>.dsc</tt> ファイルを生成する際には、
これとまったく同じ tar ファイルを用いなければなりませんが、
その際にはこの tar ファイルをアップロードする必要はありません。
	  <p>
Debian ソースバージョン番号のリビジョン部分が 0 あるいは 1 であることは、
それが新たなアップストリームバージョンであることを示しますが、
この場合 (のみ) <prgn>dpkg-genchanges</prgn> と
<prgn>dpkg-buildpackage</prgn> は、デフォルトでオリジナルソースの
tar ファイルを収録します。
この動作は、常にこちらを収録するには <tt>-sa</tt> を、
常にそれを無視するには <tt>-sd</tt> を用いることによって
変更することができます。
	  <p>
ただ、オリジナルソースがそのアップロードに含まれない場合は、
アップロードする <tt>.dsc</tt> ファイルと diff を生成する際に
<prgn>dpkg-source</prgn> が用いるオリジナル tar ファイルは、
すでにアーカイブにあるものと 1 バイトたりとも違わない
同一のものでなければ<em>なりません</em>。
なお何らかの特殊な理由がある場合は、おそらく <tt>-sa</tt> フラグを用いて、
新しいバージョンのオリジナルソースをアップロードしなければなりません。

	  <sect2 id="upload-frozen"><em>frozen</em> へのアップロード
	    <p>
Debian フリーズは Debian にとって重要な期間です。
この期間はディストリビューション全体を調和させ安定化させる機会なのです。
それゆえ、<em>frozen</em> へアップロードする際には注意を要します。
	    <p>
最新のソフトウェアを常にリリースに収録するという試みは、
魅惑的なことです。
しかしながら、システムが全体として安定し、
期待している通りに動作することの方がより重要なことです。
	    <p>
<em>frozen</em> へのアップロードのモットーは
「<strong>新たなコードは入れない</strong>」です。
その基準を定めることは難しいことですが、
以下のようないくつかのガイドラインがあります。
	    <p>
<list>
		<item>
<em>critical</em>、<em>grave</em> といった深刻なバグや、
重要な <em>important</em> バグなどの修正は、最終リリース時に
収録しなければならないパッケージに対しては常に可能です。
		<item>
必ずしも収録の必要のないパッケージに対しては、
<em>critical</em> や、<em>grave</em>、<em>important</em> 
なバグの修正は、新たな機能を一切追加しない場合のみ可能です。
		<item>
<em>normal</em> バグの修正は (推奨はされませんが)
新たな機能を追加しない場合 (のみ) 可能です。
		<item>
<em>wishlist</em> に関する修正はできません。
(それは結局のところバグではないからです。) 
		<item>
文書が優れていることは重要ですから、文書に関するバグ修正は可能です。
	      </list>
	    <p>
新たなバグを招いてしまう可能性が、どんなバグ修正にでも
統計的に 15% はあることを心に留めておいてください。
新たなバグの混入や発見は、リリースを遅らせたり、
最終的なプロダクトの品質を低下させたりするのです。
元々のバグの重大さと新たに混入したバグの重大さとの間に、
相関関係はほとんどありません。

	<sect1 id="upload-checking">アップロードの前にパッケージをチェックする
	  <p>
あなたのパッケージをアップロードする前に、
それに対して基本的なテストを行なうべきです。
必ず以下の作業を行なうようにしてください。
(現行の Debian パッケージがあれば、その古いバージョンも必要になるでしょう。)
<list>
              <item>
パッケージをインストールし、
そのソフトウェアが動作するかどうかを確認してください。
また、すでにその Debian パッケージが存在する場合は、
そのパッケージを古いバージョンから作成した新しいバージョンに
アップグレードしてみてください。
	      <item>
そのパッケージに対して <prgn>lintian</prgn> を実行してください。
<prgn>lintian</prgn> は、
<tt>lintian -v <var>package-version</var>.changes</tt>
として実行します。
こちらは、バイナリパッケージもソースパッケージもチェックします。
<prgn>lintian</prgn> が生成する出力が理解できない場合は、
<tt>-i</tt> スイッチを追加してご覧ください。
こうすれば <prgn>lintian</prgn> は、
そのプログラムに関する大変冗長な解説を出力します。
		<p>
<prgn>lintian</prgn> がエラーを出した場合
(その行は <tt>E</tt> から始まります)、
通常はそのパッケージをアップロードすべきでは<em>ありません</em>。
		<p>
<prgn>lintian</prgn> に関するより詳細な情報については
<ref id="lintian"> をご覧ください。
	      <item>
そのパッケージを (もし存在すれば)
以前のバージョンにダウングレードしてみてください。
-- こちらは <tt>postrm</tt> および <tt>prerm</tt>
スクリプトのテストになります。
	      <item>
そのパッケージを削除し、それを再インストールしてみてください。
	    </list>

	<sect1 id="upload-master"><tt>master</tt> へのアップロード
	  <p>
パッケージをアップロードするためには、
<ftpsite>master.debian.org</ftpsite> に個人アカウントが必要です。
開発者はすでに全員このアカウントを持っているはずです。
こちらに関しては <ref id="servers-master"> をご覧ください。
そのファイル群を転送するには <prgn>scp</prgn> と <prgn>ftp</prgn> 
のいずれも利用できます。

どちらを使う場合でも、そのファイル群は
<url id="&url-upload-samosa;"> に設置する必要があります。
匿名 FTP を利用して master 上の Incoming 
にアップロードすることはできません。
-- あなたのユーザ名とパスワードを使わなければなりません。)
          <p>
<em>注意:</em> アメリカ合衆国政府によって輸出規制されているソフトウェアを
パッケージが含む場合は、それを <tt>master</tt> や、海外にある 
<tt>chiark</tt> や <tt>erlangen</tt> のアップロードキューには
アップロードしないでください。
この規制は、ほぼすべての暗号ソフトウェアや、
時にはPGP 暗号および認証をサポート電子メールリーダのような
暗号ソフトウェアを「利用する」ソフトウェアにも及びます。
このようなソフトのアップロードは <tt>non-us</tt> に行なってください。
(<ref id="upload-non-us"> をご覧ください。)
アメリカ合衆国の輸出規制があなたのパッケージに適用されるかどうか
はっきりしない場合は、&email-debian-devel; 
にメッセージを投稿し質問してください。
	  <p>
また、パッケージをアップロードする際、
Debian package <package>dupload</package> 
が便利なことにお気づきになるでしょう。
この便利なプログラムは、デフォルトで
<prgn>ftp</prgn> を経由し <tt>master</tt> や、<tt>chiark</tt>、
<tt>erlangen</tt> へのアップロードができるようになっています。
こちらは <prgn>ssh</prgn> を利用するように設定することもできます。
より詳細な情報については <manref name="dupload" section="1"> と 
<manref name="dupload" section="5"> をご覧ください。

	<sect1 id="upload-non-us"><tt>pandora</tt> (non-us) へのアップロード
	  <p>
前述の通り、輸出規制されているソフトウェアは
<tt>master</tt> にアップロードしてはいけません。
その代わりに 非匿名 FTP か <prgn>scp</prgn> を使って、
パッケージを <ftpsite>pandora.debian.org</ftpsite> にコピーし、
そのファイル群を &non-us-upload-dir; に設置してください。
デフォルトで <tt>master</tt> と同じアカウントが使えます。
	  <p>
<prgn>dupload</prgn> プログラムは <tt>pandora</tt> 
へのアップロードをサポートしています。
詳細はプログラム付属のドキュメントを参照してください。

	<sect1><tt>chiark</tt> 経由のアップロード
	  <p>
<tt>master</tt> へのネットワーク接続が遅い場合、
その代わりとなるものがあります。
その一つが、<tt>chiark</tt> 上にあるヨーロッパのアップロードキュー経由で
<tt>Incoming</tt> にファイル群をアップロードする方法です。
その詳細については <url id="&url-chiark-readme;"> をご覧ください。
	  <p>
<em>注意:</em>アメリカ合衆国政府によって輸出規制されている
ソフトウェアを含むパッケージを <tt>chiark</tt> 
のキューにアップロードしないでください。
このアップロードキューは <tt>master</tt> に向けられたものですので、
<ref id="upload-master"> で説明した法規がここでも同様に適用されます。
	  <p>
<prgn>dupload</prgn> プログラムは <tt>chiark</tt>
へのアップロードをサポートしています。
詳細はプログラム付属のドキュメントを参照してください。

	<sect1><tt>erlangen</tt> 経由のアップロード
	  <p>
他にもドイツにあるアップロードキューが利用できます。
匿名 FTP 経由で <url id="&url-upload-erlangen;"> 
にファイル群をアップロードしてください。
	  <p>
そのアップロードは、
<tt>master</tt> の <tt>Incoming</tt> へのアップロードと同じように、
完全な Debian アップロードでなければなりません。
つまり、<tt>.changes</tt> ファイルで触れている他のファイルを添えて
<tt>.changes</tt> ファイルをアップロードします。
そのキューデーモンは <tt>.changes</tt> が Debian 開発者によって
正しく PGP 署名されているかどうかをチェックし、
不正なファイルはそのキュー経由では <tt>master</tt> へ転送しません。
<tt>.changes</tt> の <tt>Maintainer</tt> フィールドに、
<em>あなた</em>の電子メールアドレスがあるかどうかも確認してください。
そこに記述されたアドレスは
<tt>master</tt> と同様あらゆるリプライに使用されます。
	  <p>
<tt>chiark</tt> と同様に、アップロードのあとあなたのファイルを
セカンドディレクトリに移動する必要はありません。
また、どんな場合でもアップロードがどうなったかについて、
キューデーモンから返信メールを受け取るはずです。
あなた宛てにエラーが通知されない限り
おそらくこちらも <tt>master</tt> へ移動されるはずです。
	  <p>
<em>注意:</em>アメリカ合衆国政府によって輸出規制されている
ソフトウェアを含むパッケージを <tt>erlangen</tt>
のキューにアップロードしないでください。
このアップロードキューは <tt>master</tt> に向けられたものですので、
<ref id="upload-master"> で説明した法規がここでも同様に適用されます。
	  <p>
<prgn>dupload</prgn> プログラムは <tt>erlangen</tt>
へのアップロードをサポートしています。
詳細はプログラム付属のドキュメントを参照してください。

	<sect1>他のアップロードキュー
	  <p>
アメリカ合衆国にある他のアップロードキューも利用できます。
こちらは <tt>master</tt> に接続できない問題が発生した際の
優れたバックアップ手段です。
<tt>erlangen</tt> と同様に <url id="&url-upload-samosa;">
にファイル群をアップロードすることができます。
	  <p>
日本でもアップロードキューが利用できます。<url id="&url-upload-jp;"> 
への匿名 FTP 経由でファイル群をアップロードしてください。

      <sect id="upload-announce">パッケージアップロードのアナウンス
	<p>
パッケージをアップロードしたら、
そのアナウンスを``debian-changes'' 
メーリングリストの一つに投稿しなければなりません。
そのアナウンスの  <em>Subject</em> フィールドには
(ソース) パッケージ名、バージョン番号、変更事項の極めて簡潔な要約を含め、
その本文には PGP で署名された <tt>.changes</tt> ファイルを含めます。
付加的な説明文は <tt>.changes</tt> ファイルの前に付け加えます。

	<p>
あるパッケージが、その <tt>Distribution:</tt> フィールドに
`stable' と記述されてリリースされる場合、
そのアナウンスは  &email-debian-changes; に送ります。
一方あるパッケージが、その <tt>Distribution:</tt> フィールドに
`unstable' や、`experimental'、(もしあれば) `frozen'
などが記述されてリリースされる場合、
そのアナウンスは &email-debian-devel-changes; に送らなければなりません。
	<p>
場合によっては、<em>stable</em> と <em>unstable</em> 
ディストリビューションの両方にパッケージをアップロードする必要がありますが、
この場合は <tt>Distribution:</tt> フィールドに
両方のディストリビューション名を記述してください。
この場合アップロードアナウンスは、
上記のメーリングリストの両方に投稿してください。
	<p>
なお、<prgn>dupload</prgn> プログラムは、
アナウンスをどこへ投稿すべきかを判断し
適切なメーリングリストに自動的にアナウンスを投稿してくれます。
<ref id="dupload"> をご覧ください。

      <sect id="upload-notification">
	<heading>新規パッケージインストールの通知</heading>
	<p>
Debian アーカイブメンテナが、
アップロードされたパッケージの処理に責任を持ちます。
ほとんどの場合アップロードは、
<prgn>dinstall</prgn> というアーカイブメンテナンスツールによって
基本的に毎日自動的に処理されます。
特に `unstable' ディストリビューションに存在するパッケージのアップロードは、
自動的に処理されます。
ただ、その他の場合、特に新規パッケージのような場合には、
特定のディストリビューションへのパッケージアップロードは手動で処理されます。
アップロードされたパッケージが手動で処理される場合、
アーカイブの変更には一週間ほど時間がかかります。
(辛抱強くお待ちください。)
	<p>
どんな場合でも、パッケージアップロードの通知を電子メールで受け取れます。
この通知の内容は十分注意してお確かめください。
パッケージがあなたの想定していたセクションに設置されなかった場合、
そのことがこちらで通知されるでしょう。
その理由に関してはこちらをよくお読みください。

	<sect1 id="override-file">オーバライドファイル
	  <p>
<file>debian/control</file> ファイルの
<tt>Section</tt> および <tt>Priority</tt> フィールドは、
そのファイルがアーカイブのどこに設置されるかや、その priority を
実際に特定するものではありません。
アーカイブ全体を整理された状態にしておくために、
これらのフィールドの管理はアーカイブメンテナが行ないます。
そのため  <file>debian/control</file> ファイルに設定された値は、
実際はそのヒントになるだけです。
	  <p>
アーカイブメンテナは、パッケージの正式なセクションやプライオリティを
<em>override file</em> にて管理します。
場合によっては  <em>override file</em> は修正が必要になります。
ただ、パッケージの <file>control</file>
ファイルを単に変更しても効果はありません。
その代わりに &email-override; に電子メールを送るか、
<package>ftp.debian.org</package> 
に対するバグとして報告を行なわなければなりません
	  <p>
<em>override files</em> に関するより詳細な情報については、
<manref name="dpkg-scanpackages" section="8"> や、
<url id="&url-bts-devel;#maintincorrect"> をご覧ください。

    <chapt id="nmu">ノンメンテナアップロード (NMU)
      <p>
状況によっては、あるパッケージをその公式な開発者以外の誰かが
リリースしなければならないことがあります。
このことはノンメンテナアップロード、すなわち NMU と呼ばれています。
       <p>
異なるアーキテクチャ向けのパッケージを作成するという
Debian の移植作業に携わる人にとっては、
この NMU は正規の移植作業の一環にあります。
(<ref id="porting"> をご覧ください。)
他にも、特にフリーズ期間などに、
セキュリティや機能に関する深刻な問題を処理するために、
Debian 開発者が他の開発者のパッケージを修正する必要がある場合、
つまり、パッケージ開発者が修正版を即座にリリースできない場合には
NMU が行なわれます。
      <p>
この章では、NMU がいつどのように行なわれるべきかについての
ガイドラインを扱います。
なお次節で説明しますが、この NMU には source NMU と binary NMU
の二つがあります。

      <sect id="nmu-terms">用語
	<p>
この節の全体にわたって二つの新たな用語、``binary NMU'' と ``source NMU''
を用います。
これらの用語は、この文書の中では技術上の特別な意味を示すものとして用います。
binary NMU と source NMU は、あるパッケージが公式な開発者以外の開発者
によってアップロードされる点では同じです。
<em>ノンメンテナ</em>アップロードと呼ばれるのはこのためです。
	<p>
source NMU とは、あるパッケージがそのバグ修正のために、
公式開発者以外の開発者によってアップロードされることを指します。
source NMU は、(<file>debian/changelog</file> の改変のみかもしれませんが、)
常にソースの改変を伴います。
この改変はアップストリームソースと、
Debian で加えられたソースのどちらに対して行なうことができます。
	<p>
binary NMU は、新たなアーキテクチャ向けにバイナリパッケージを
再コンパイルしアップロードすることを指します。
そのため、こちらは移植に関する正規の作業一環にあるものです。
つまり binary NMU とは、ソース改変を必要としない、
(普通は他アーキテクチャ用) パッケージのバイナリバージョンが
ノンメンテナアップロードされたものです。
ただ、ターゲットとするアーキテクチャでコンパイルを通すために、
移植作業者がソース上の問題を修正することはよくあることです。
そのため、こちらは binary NMU というよりもむしろ source NMU
とみなされるものです。
このように、私たちは、移植作業者による NMU と非移植作業者による
NMU を用語の上では区別していません。
	<p>
source および binary の両 NMU は、``NMU'' という用語で一括りされえます。
しかしながら、``NMU'' という用語が使われる際に多くの人々は
``source NMU''を想定するために、このことはしばしば混乱をもたらしがちです。
そのためこの区別については注意を払っておくべきでしょう。
この章で私が不特定に ``NMU'' という用語を使う場合、
それは source および binary の両 NMU を指すものとします。

      <sect id="nmu-who">NMU を行なうことができるのは誰か
	<p>
Debian 開発者として正式に登録された者のみが
binary NMU あるいは source NMU を行なうことができます。
公式な開発者とは、Debian キーリングに自分の鍵が登録されている者のことです。
もちろん、非開発者の場合もソースパッケージをダウンロードして、
問題を修正するためにそのハックを始めることは奨励されています。
ただその際には、NMU を行なう代わりに
バグ追跡システムへ適切なパッチを登録するべきです。
開発者は質の高いパッチやバグ報告に対して普通いつでも感謝しています。

      <sect id="nmu-when">source NMU を行なう場合には
	<p>
source NMU を行なう場合のガイドラインは、
ターゲットとするディストリビューション
(つまり stable や、unstable あるいは frozen) によって異なります。
なお、移植作業者が従うルールは、その特別な状況
(<ref id="source-nmu-when-porter"> をご覧ください)
のために、非移植作業者の場合とは若干異なります。
	<p>
stable 版に対して行なえるものは、critical なバグの修正や、
セキュリティ上のバグに関する修正のみです。
セキュリティ上のバグが発覚した場合、
修正版パッケージは可能な限り早くアップロードされるべきです。
この場合、Debian セキュリティマネージャは、
修正版パッケージを適切な期限内 (48 時間以内)
に確実にアップロードできるよう該当パッケージの開発者と連絡をとるべきです。

パッケージ開発者が修正版パッケージを十分に早くは提供できない場合や、
その開発者にすぐに連絡の取れない場合には、
セキュリティマネージャが修正版パッケージ (つまり source NMU )
をアップロードすることができます。
	<p>
リリースのフリーズ期間 (<ref id="upload-frozen"> をご覧ください) には、
important バグや重要度の高いバグの修正は奨励されており認められます。
しかし、この期間においても、
そのパッケージの現行開発者と連絡をとるよう努めなければなりません。
現行開発者がその問題の修正をちょうどアップロードしようとしているところ
なのかもしれないからです。
また、いかなる source NMU を行なう場合でも、<ref id="nmu-guidelines">
にて掲げられているガイドラインには従う必要があります。
	<p>
非開発者による unstable 版へのバグ修正も、
最終手段として行なわれる場合や許可がある場合のみ
認められています。
以下の各ステップを踏んでみて、
その結果それが上手くいかない場合には、
おそらく NMU を行なうに問題はないでしょう。
	<p>
<list>
	    <item>
そのパッケージのバグが Debian バグ追跡システム (BTS) 
に登録されているかどうかを確認します。
もし登録されていない場合は、バグ登録を行なってください。
	    <item>
その開発者に電子メールを送り、
そのパッケージのバグ修正を援助する旨申し出ます。
返信をもらうまでに二三日は待ってください。
	    <item>
作業を開始しバグを修正します。
BTS に登録された適切なバグに対してパッチを登録してください。
そのパッケージを <ref id="upload-checking"> 
の説明にしたがって構築およびテストします。
こちらはローカルで行なってください。
	    <item>
開発者の対応を二三週間待ちます。
	    <item>
NMU を行なってよいかどうか尋ねるために、
開発者に電子メールを送ります。
	    <item>
あなたのパッチが予期しない副作用を持っていないかどうかを
重ねてチェックします。
その際あなたのパッチができるだけ小さなものとなるように、
また元のソースをなるべく改変しないものとなるよう確認してください。
	    <item>
開発者の対応をもう一週間待ちます。
	    <item>
作業を進め、<ref id="nmu-guidelines"> の説明にしたがい
source NMU を行ないます。
	  </list>

      <sect id="nmu-guidelines">source NMU を行なうには
	<p>
以下の記述は、移植作業者が
パッケージのバグ修正ならびにパッケージの移植の両方の役割を果たす場合のみ
当てはまります。
移植作業者が Debian ソースアーカイブに変更を加える必要がある場合、
そのアップロードはすなわち source NMU であり、
その際には source NMU に関するルールにしたがわなければなりません。
単に再コンパイルしたバイナリパッケージをアップロードする場合、
適用されるルールは異なってきます。
こちらに関しては <ref id="porter-guidelines"> をご覧ください。
	<p>
まず第一に、ソースに対する NMU パッチは、
元のソースをなるべく改変しないものであることが重要です。
あれこれとソースを整理したりしないでください。
モジュール名やファイル名は変更しないでください。
ディレクトリは移動しないでください。
つまり、一般的には問題のない箇所に変更を加えないでください。
パッチはなるべく小さなものとなるようにしてください。
あなたの審美的な観点から何とかしたいことがあるならば、
Debian 開発者やアップストリーム開発者に連絡を取るか、
バグ報告を行なってください。
ともあれ、審美的な観点からの変更は
ノンメンテナアップロードで行なうべきでは<em>ありません</em>。

	<sect1 id="nmu-version">source NMU のバージョン番号づけ
	  <p>
パッケージに変更を加える際には常に、
それがどんなに些細なものであろうとも、
バージョン番号を変更しなければなりません。
そうしなければ、パッケージングシステムが正しく機能しません。
	  <p>
ノンメンテナアップロード (NMU) を行なう場合、
バージョン番号の <var>debian-revision</var> 部分 (最後のハイフン以降の部分) 
に新たなマイナーバージョン番号を追加しなければなりません
この拡張マイナー番号は `1' から始められます。
例えば、1.1-3 というバージョンの `foo' 
というパッケージの場合を考えてみましょう。
Debian アーカイブにおいては、そのソースパッケージの制御ファイルは、
<file>foo_1.1-3.dsc</file> になります。
つまり、アップストリームバージョンは `1.1' で、
Debian バージョンは `3' です。
そして、次の NMU では新たなマイナー番号 `.1' を Debian
リビジョンに追加することになります。
つまり、新たなソース制御ファイルは <file>foo_1.1-3.1.dsc</file> になります。
	  <p>
Debian リビジョンマイナー番号は、パッケージ開発者のバージョン番号の
いずれかと衝突しないようにするために必要になるものです。
これがなければパッケージ開発者の作業が混乱してしまいます。
また、こうすることには、
Debian アーカイブ中のあるパッケージが公式な開発者によるもの
でないことが見てすぐわかるという利点もあります。
	  <p>
もしバージョン番号に <var>debian-revision</var> 部分がない場合は、
`0.1' で始まるように追加しなければなりません。
正規の開発者以外の誰かが、新たなアップストリームバージョンベースのリリース
をどうしても行なう必要がある場合は、`0.1' という <var>debian-revision</var>
を付けてリリースを行なってください。
正規のパッケージ開発者の場合は、
<var>debian-revision</var> を `1' から始めてください。
ただこちらを行なう場合、
構築システムに新たなソースパッケージを強制的に選択させるために、
<tt>-sa</tt> スイッチを付けて <prgn>dpkg-buildpackage</prgn> 
を起動する必要があるでしょう。
(普通このプログラムは、Debian リビジョン が '0' あるいは '1'
かどうかのみを確認します。
-- `0.1' という数字を認識するほどにはまだ賢くないのです。)
	  <p>
注意していただきたいのですが、移植作業者が異なるアーキテクチャ向けに
パッケージを単に再コンパイルする場合は、
バージョン番号を付け直す必要はありません。
移植作業者は、何らかの方法でソースパッケージに変更を加えた場合、
つまり、binary NMU ではなく source NMU を行なう場合 (のみ)、
新たなバージョン番号を用いるべきです。

	<sect1 id="nmu-changelog">
	  <heading>source NMU は新たな changelog エントリを必要とする</heading>
	  <p>
source NMU を行なう非公式開発者は、
NMU によってどのバグが修正されたのか、
また通常は NMU がなぜ必要でどこを修正したのかを説明する
changelog エントリを作成しなければなりません。
changelog エントリの log エントリには、
その非公式開発者の電子メールアドレスと NMU バージョン番号が含められます。</p>
	  <p>
慣例によって、source NMU の changelog エントリは次の行で始められます。

<example>
  * Non-maintainer upload
</example></p></sect1>

	<sect1 id="nmu-patch">source NMU とバグ追跡システム
	  <p>
公式なパッケージ開発者以外の開発者がパッケージに変更を加える場合、
その変更はなるべく小さなものに留めるべきです。
また、変更箇所を詳しく説明するために必ず、
そのパッチを unified context diff (<tt>diff -u</tt>) 
の形でバグ追跡システムに送るべきです。
	  <p>
単にパッケージを再コンパイルする場合はどうするのでしょうか？
この場合、すでに述べたように移植作業者の場合と非移植作業者の場合では
その手順が異なります。
移植作業者ではない開発者が単に再コンパイルが必要なだけの NMU を行なう場合、
(つまり、新たな共有ライブラリが利用できるようになった場合や
<package>debhelper</package> でバグ修正が行なわれた場合)
やはり changelog エントリが必要になり、
それゆえパッチが存在することになります。
一方、移植作業者の場合は、おそらく単に binary NMU を行なうことになります。
(注意: このことは、本来再コンパイルをしなければならない移植作業者が
それを行なわないことに関しては考慮していません。
-- こちらは、私たちのアーカイブ管理に関する問題点の一つでしょう。)
	  <p>
source NMU (ノンメンテナアップロード) によって
バグ追跡システムに登録されている既存のバグを修正した場合、
非公式開発者はそのバグを<em>クローズ</em>するのではなく、
その旨を<em>通知</em>しなければなりません。
規則の上では、バグをクローズすることができるのは、
公式パッケージ開発者か元のバグ報告者のみです。
しかしながら、ノンメンテナリリースを行なった者は、適切なバグに対して、
そのバグが NMU によって修正されたことを説明する
手短なメッセージを送付しなければなりません。
また、<email>control@bugs.debian.org</email> を利用する場合、
NMU を行なった当事者は NMU で修正したバグの重要度を `fixed'
に設定しなければなりません。
こうすることによって、そのバグが NMU によって修正されたことを、
確実に皆に知らせることができるわけです。
ただ、NMU で加えられた変更が、公式なパッケージ開発者によって正式に採用され
るまで、そのバグは開かれたままです。
また、その問題を修正するために必要となるパッチを添えてバグをオープンするか、
(すでにオープンされている) 
他のバグ報告のいずれかにそのパッチを追加してください。
	  <p>
正規の開発者は、そのパッチを採用するか、
あるいはその問題を修正する他の方途を用いることになります。
時にはバグがアップストリームで独自に修正されることもあります。
このことは NMU によるパッチが退けられる十分な理由のひとつです。
新たなバージョンをリリースする際に、
正規の開発者が NMU によるパッチを採用しない場合、
その開発者はノンメンテナリリースで修正された問題のそれぞれが
新たなアップストリームバージョンで確実に修正されていること
を保証しなければなりません。
	  <p>
さらに正規の開発者は、changelog ファイルのエントリに
ノンメンテナアップロードに関する記述を
<em>常に</em>残すようにしておかなければなりません。

	<sect1 id="nmu-build">source NMU の構築
	  <p>
source NMU パッケージは、通常どおりに構築されます。
ディストリビューションの選択には、
<ref id="upload-dist"> で説明したものと同じルールが適用されます。
また <ref id="uploading"> で説明したとおり、
通常の changes ファイルなどが構築されます。
実際、<ref id="upload"> で説明したルールは、
適切なメーリングリストへの NMU のアナウンスの必要性も含めて
すべて適用されます。
	  <p>
<file>debian/control</file> ファイルにある開発者の名前は、
変更し<em>ない</em>ように気をつけてください。
なお、<file>debian/changelog</file> ファイルの NMU エントリにある
あなたの名前は、changes ファイルに署名する際に用いられます。

    <chapt id="porting">移植作業と移植版
      <p>
Debian がサポートするアーキテクチャは今なお増加しています。
移植作業者でない場合や、特定のアーキテクチャ以外を利用しない場合でも、
開発者としてポータビリティの問題を意識しておくことは必要でしょう。
そのため、移植作業者でない方も、こちらの章はあらかた読んでおくべきです。
      <p>
移植作業とは、パッケージ開発者のバイナリパッケージが構築された
元のアーキテクチャとは異なるアーキテクチャ向けに Debian 
パッケージを構築することを指します。
こちらは独自の必要な活動です。
事実、大半の Debian パッケージを実際にコンパイルしているのは移植作業者です。
例えば、<em>i386</em> 用にコンパイルされたバイナリパッケージを
各アーキテクチャ用に再コンパイルする必要がありますし、
そのためにはおよそ五回以上構築を行なわなければなりません。

      <sect id="kind-to-porters">移植作業者への配慮
	<p>
移植作業者は、膨大な数のパッケージを処理しなければならないために、
困難な独自の作業を行ないます。
理想としては、全ソースパッケージがさまざまなアーキテクチャで
適切に構築されるべきなのですが、残念ながらそううまくは行きません。
この節では、Debian 開発者らによってしばしば指摘される「既知」の確認項目
-- 移植作業者を困らせたり、
その作業を不必要に困難にさせる共通の問題を取り上げます。
	<p>
まず第一に上げられる最も重要なモットーは、
移植作業者によって指摘されたバグや問題には素早く対応するということです。
移植作業者に対しては、
あなたのパッケージの実際の協同開発者に対するのと同じように、
丁重に対応してください。(ある意味では彼らは協同開発者です。)
	<p>
実際、移植作業者が出くわす問題の大半は、
ソースパッケージにおける<em>パッケージング上のバグ</em>なのです。
以下が確認し注意すべき事柄の確認項目です。
<enumlist>
	    <item>
``all'' や ``any'' 以外の値をアーキテクチャとして設定することは、
そのことを本当に意図していない限り、行なわないでください。
大変多くのケースで、開発者が
<url id="http://www.debian.org/doc/packaging-manuals/packaging.html/"
name="Debian パッケージングマニュアル">
の説明にしたがっていません。
アーキテクチャを ``i386'' に設定することは、たいていのところ間違いです。
	    <item>
作成したソースパッケージが正しいものであることを確認してください。
<tt>dpkg-source -x <var>package</var>.dsc</tt> を実行して、
あなたのソースパッケージが適切に展開できることを確認してください。
それから、そこで <tt>dpkg-buildpackage</tt> を用い、
一からあなたのパッケージを構築してみてください。
	    <item>
<file>debian/files</file> ファイルや <file>debian/substvars</file>
ファイルを残したまま、ソースパッケージをアップロードしないでください。
これらのファイルは、<file>debian/rules</file> の `clean' 
ターゲットによって消去されていなければなりません。
	    <item>
ローカルにインストールされたり手を加えられた
設定やプログラムに依存していないことを確かめてください。
例えば、<file>/usr/local/bin</file> 
やそれに類するディレクトリにあるプログラムを呼び出してはいけません。
プログラムが特殊な方法でセットアップされることを
当てにしないでください。
また、あなたのパッケージを、
同一アーキテクチャでもかまいませんので、他のマシンで構築してみてください。
	    <item>
(上記のことにも含まれることですが、)
あなたで構築されたパッケージをすでにインストールされているものと
仮定してはいけません。
	    <item>
<prgn>egcc</prgn> が利用できるものと仮定してはいけません。
また、特定のバージョンの <prgn>gcc</prgn> に依存してはいけません。
	    <item>
Debian パッケージングマニュアルで要求されている通りに、
``binary-arch'' ターゲットと ``binary-indep'' ターゲットは
debian/rules に別々に収録しなければなりません。
この両ターゲットがそれぞれ独立して動作すること、
つまり、あるターゲットを呼び出す際に
他のターゲットを前もって呼び出していないことを確認してください。
こちらをテストするには、<tt>dpkg-buildpackage -b</tt>
を実行してみてください。
	  </enumlist>

      <sect id="porter-guidelines">移植作業者によるアップロードに関するガイドライン
	<p>
移植先のアーキテクチャ用のバイナリを取り出したときのままで構築できるなら、
作業もはかどるでしょう。
この節で扱うのはこのような場合で、言葉を変えれば、
適切にアーカイブにインストールできるように、
バイナリを構築し binary NMU をアップロードする方法を説明します。
他のアーキテクチャ向けにコンパイルを通すために、
パッケージにパッチを当てなくてはならない場合は、
source NMU を行なわなければなりません。
こちらに関しては <ref id="nmu-guidelines"> をご参照ください。
	<p>
binary NMU を行なう場合、そのソースに対しては一切変更を行ないません。
ソースパッケージ中のいかなるファイルに対しても手をつける必要はありません。
<file>debian/changelog</file> も然りです。
	<p>
場合によっては、ライブラリなどの更新済みの他パッケージに対して、
あるパッケージを再コンパイルする必要があるでしょう。
この場合は、アップグレードシステムが適切に動作するように、
バージョン番号を上げなければなりません。
しかしながら、たとえそうでも、これらは binary のみの NMU とみなされます。
-- この場合、全アーキテクチャで再コンパイルする必要はないからです。
NMU の場合と同様にバージョン番号を設定しなければなりませんが、
この場合は NMU バージョンの前に ``.0.'' を付け加えます。
例えば、``foo_1.3-1'' というソースパッケージを単に再コンパイルして NMU
する場合、その番号は ``foo_1.3-1.0.1'' になります。
	<p>
<prgn>dpkg-buildpackage</prgn> を起動するには、
<tt>dpkg-buildpackage -B -m<var>porter-email</var></tt>
としてください。
もちろん <var>porter-email</var> の箇所には
あなたの電子メールアドレスを当てはめてください。
こうすれば、<file>debian/rules</file> の `binary-arch' 
ターゲットを用いて、該当パッケージの特定アーキテクチャ依存部分に限った
バイナリ構築のみが行なわれます。

	<sect1 id="source-nmu-when-porter">
	  <heading>移植作業者が source NMU を行なう場合には</heading>
	  <p>
移植作業者が source NMU を行なう場合、
非移植作業者の場合と同様に、一般的には
<ref id="nmu"> にて触れたガイドラインに従います。
しかしながら、移植作業者の場合、
相当な量のパッケージを処理しなければならないことから、
source NMU をする際に他の開発者の対応を待つ時間は、
非移植作業者の場合よりも短いことが望まれています。
	  <p>
さらに、その状況は
アップロード先のディストリビューションによっても異なってきます。
`frozen' ディストリビューションへの重要な修正
(すなわち、リリースが予定されているアーキテクチャで
ソースパッケージのコンパイルを通すために必要となる修正) は、
待ち時間を<em>置かず</em>にアップロードすることができます。
	  <p>
移植作業者が `unstable' ディストリビューションへの NMU を行なう場合も、
上記の移植作業に関するガイドラインに従わなければなりませんが、
二点ほど異なる点もあります。
まず一点目は、十分とされる待ち時間 -- BTS にバグが報告されてから、NMU
が認められるまでの時間 -- が、`unstable'
ディストリビューションに関する作業を行なう移植作業者の場合、7 
日間であるということです。
なお、この期間も、
致命的な問題や移植作業の負担となる問題がある場合は、
移植作業グループの裁量で短くされることもありえます。
(これはポリシーではなく、
あくまでもガイドラインに沿って相互に了承されているものです。
ご注意ください。)
	  <p>
二点目は、source NMU を行なう移植作業者が BTS に報告する際、
そのバグの重要度を `important' 以上にしなければならないということです。
こうすることによって、リリース時に Debian
でサポートされる全アーキテクチャ用のバイナリが、
確実に単一のソースパッケージから構築されることが保証されます。
さまざまなライセンスに準拠するためにも、
全アーキテクチャにわたるバイナリおよびソースパッケージを
単一のバージョンで管理することは、極めて重要です。
	  <p>
移植作業者は、現行バージョンのコンパイル環境や、カーネル、libc 
においてのみバグが回避できるようなパッチを、
避けるように努めなければなりません。
ただ、このような応急処置が必要になる場合もあるでしょう。
コンパイラのバグやその類いを回避しなければならない場合、
そのために追加したコードには適切に <tt>#ifdef</tt> を用いてください。
また、その外的な問題が修正された際に誰もがその箇所を除去できるように、
あなたが行なった応急処置を文書に残しておいてください。
	  <p>
他の開発者の対応を待つ間に、移植作業者は
自身の作業結果を公開するために非公式な場所を構えることもあります。

このことは、他の開発者の対応を待つ間においても、
その移植作業の利益を、同じ作業に携わる他の開発者が
受け取れる利点があります。
もちろん、このような場所は公式に推奨されるものでも
公式な地位を与えられたものでもありませんので、
こちらを利用される場合はご注意ください。

      <sect>移植作業者用のツール群
	<p>
移植作業に有用なツールがいくつか用意されています。
この節ではこれらツール群の簡単な紹介を行ないます。
なお、これらに関する完全な情報については、
各パッケージの文書やリファレンスをご覧ください。

	<sect1 id="quinn-diff">
	  <heading><package>quinn-diff</package>
	  <p>
<package>quinn-diff</package> は、
異なるアーキテクチャ間の差異を locate するために用いられます。
例えば、アーキテクチャ <var>X</var> からアーキテクチャ <var>Y</var> へ、
どのパッケージを移植する必要があるのかを教えてくれます。

	<sect1 id="buildd">
	  <heading><package>buildd</package>
	  <p>
<package>buildd</package> システムは、分散配置される
クライアント/サーバ式の構築およびディストリビューションシステム
として用いられます。
こちらは通常 <em>auto-builders</em> と共に利用されます。
この <em>auto-builders</em> は、単に移植の必要なパッケージのチェックアウトと
自動構築を行なう「スレーブ」ホストです。
このシステムには、
移植作業者がソースパッケージを「チェックアウト」して作業を行なうための
電子メールインターフェイスもあります。
	  <p>
<package>buildd</package> はまだパッケージとしては利用できませんが、
移植作業の多くにおいて現に利用されており、
また近い将来利用されることが計画されています。
こちらには、現に極めて有用で頻繁に利用されている
<prgn>andrea</prgn> や、<prgn>sbuild</prgn>、
<prgn>wanna-build</prgn> 
といったパッケージ化されていない数々のコンポーネントが含まれています。
	  <p>
<package>buildd</package> によって生成された
移植作業者にとって一般的に有益なデータのいくつかは、
ウェブ上の <url id="&url-buildd;"> で利用できます。
こちらのデータには、毎晩 <prgn>andrea</prgn> (ソースの依存関係) と
<package>quinn-diff</package> (再コンパイルの必要なパッケージ) 
から更新される情報も収録されています。
	  <p>
さまざまな用途に役立つ可能性を秘めているこのシステムに、
私たちは大きな期待を寄せています。
一般的的な関心を呼ぶかどうかは別ですが、独立した各開発グループが、
Debian の異なるサブ flavor 用のシステム
(例えば、gcc バウンズチェック付きで構築された Debian のある flavor など)
を利用することもできます。
また、こちらは Debian がディストリビューション全体を素早く再コンパイル
することも可能にするのです。

	<sect1 id="dpkg-cross">
	  <heading><package>dpkg-cross</package>
	  <p>
<package>dpkg-cross</package> は、
<package>dpkg</package> に似た方法で、
クロスコンパイル用のライブラリやヘッダをインストールするツールです。
さらに、クロスコンパイルをサポートするために
<prgn>dpkg-buildpackage</prgn> や <prgn>dpkg-shlibdeps</prgn>
の機能性も高められています。


    <chapt id="archive-manip">
      <heading>パッケージの移動、削除、改名、引き継ぎ、みなしご化</heading>
      <p>
Debian のアップロード手続きにおいて、
アーカイブ操作の作業のすべてが自動化されているわけではありません。
自動化されていない作業に関しては、開発者が手動で行なわなければなりません。
この章ではそのような作業の際に従うべきガイドラインを扱います。

      <sect>パッケージの移動
	<p>
パッケージはそのセクションが変更されることもあります。
例えば `non-free' セクションのパッケージが後のバージョンで GPL
準拠となった場合、そのパッケージは
`main' あるいは `contrib' に移動されなければなりません
	  <footnote> 
あるパッケージをどのセクションに収めるべきかに関するガイドラインについては
<url id="&url-debian-policy;" name="Debian ポリシーマニュアル">
をご覧ください。
	  </footnote>。
	<p>
あなたのパッケージのセクションを変更しなければならない場合、
変更先のセクションにパッケージを設置するために、
パッケージの制御情報を変更し、
そのパッケージを再アップロードしてください。
<!-- OBSOLETE, please update translation
(詳しくは <url id="&url-pkg-manual;" name="Debian パッケージングマニュアル">
をご覧ください。) -->
パッケージがアーカイブにインストールされる際に送られてくる
インストレーションログを十分に確認してください。
もし何らかの理由でパッケージが変更前の場所にも残っていた場合は、
<tt>ftp.debian.org</tt> に対してバグ報告を行ない、
変更前の場所にあるパッケージを削除するよう依頼してください。
もしかすると <prgn>dinstall</prgn> のバグかもしれないので、
その際にはあなたで行なったことの詳細を添えてください。
	<p>
一方、パッケージの <em>subsection</em> (例えば ``devel'' や ``admin'' など)
を変更する必要がある場合、その手続きは若干異なります。
この場合は、そのパッケージの制御ファイルにある subsection を修正し、
再アップロードしてください。
また、<ref id="override-file"> で説明したように、
オーバライドファイルを更新する必要もあります。

      <sect id="removing-pkgs">パッケージの削除
	<p>
あるパッケージ (例えば、もはや不要になった古い互換ライブラリなどを) 
を何らかの理由のために完全に削除したい場合は、<tt>ftp.debian.org</tt> 
に対してバグ報告を行ない、
そのパッケージを削除するよう依頼しなければなりません。
その際、そのパッケージをどのディストリビューションから
削除するのかを必ず明記してください。
	<p>
なお、そのパッケージが不要なものかどうかはっきりしない場合は、
&email-debian-devel; に電子メールを送り意見を求めてください。
また、こちらに関しては <package>apt</package> パッケージの 
<prgn>apt-cache</prgn> プログラムを利用して確認してみてもよいでしょう。
<tt>apt-cache showpkg <var>package</var></tt> とすれば、reverse 
depends 情報を含む <var>package</var> 詳細が表示されます。

	<sect1><tt>Incoming</tt> からのパッケージ削除
	  <p>
あるパッケージを <tt>Incoming</tt> から削除したい場合は、
義務ではありませんが、適切なアナウンス用メーリングリスト
(&email-debian-changes; か &email-debian-devel-changes;)
にその旨を通知しておくとよいでしょう。

      <sect>パッケージの置き換えや改名
	<p>
パッケージの名前を間違えて付けてしまい、
それを改名しなければならないことがあるかもしれません。
この場合、次の二つの手順を踏む必要があります。
まず初めに、そのパッケージの古い名前に対して
replace および conflict となるよう
<file>debian/control</file> ファイルに設定を行ないます。
<!-- OBSOLETE, please update translation
(詳細は <url id="&url-pkg-manual;" name="Debian パッケージングマニュアル"> -->
をご覧ください。)
そして、このパッケージをアップロードし、それをアーカイブに移動したら、
<tt>ftp.debian.org</tt> に対するバグ報告を行ない、
古い名前のパッケージを削除するよう依頼してください。

      <sect id="orphaning">パッケージのみなしご化
	<p>
あるパッケージのメンテナンスができなくなった場合は、そのパッケージ開発者を 
<tt>Debian QA Group &orphan-address;</tt> に設定し直し、
&email-wnpp; 宛てにそのパッケージをみなしご化する旨を
電子メールで通知しなければなりません。
ただ、そのパッケージが Debian にとって極めて重要なものである場合は、
代わりに &email-debian-devel; 宛てに電子メールを送り、
新開発者を募集すべきでしょう。

      <sect id="adopting">パッケージの引き継ぎ
	<p>
新開発者が必要なパッケージの一覧が、定期的に
&email-debian-devel メーリングリストに流されます。
この一覧は <url id="&url-wnpp;"> にある
Work-Needing and Prospective Packages document (WNPP)
からも入手できます。
WNPP の一覧にあるパッケージのメンテナンスを引き継ぎたい場合や、
あなたのパッケージのメンテナンスを放棄する場合、
新規パッケージの作業を誰が行なっているかどうか単に確認した場合は、
&email-wnpp; に電子メールを送ってください。
	<p>
このことをおろそかにして、あるパッケージを単に引き継ぐだけではいけません。
-- これではパッケージハイジャックです。
もちろん、現行の開発者に連絡を取り、
そのパッケージの引き継ぎを依頼することは可能です。
しかしながら、その際に同意を得られなければ、
そのパッケージを引き継ぐことはできません。
たとえあなたの申し出が無視されたとしても、
それはパッケージ引き継ぎの理由とはなりません。
現行開発者が音沙汰もなくその作業を放棄していると確信できる場合は、
その旨を &email-debian-private; にて尋ねてみてください。
	<p>
なお、古いパッケージを引き継いだ場合は、
あなたをそのパッケージの公式開発者として
バグ追跡システムに登録なさりたいでしょう。
<tt>Maintainer:</tt> フィールドを更新した新バージョンをアップロードすれば、
二週間ほど時間がかかりますが、その処理は自動的に行なわれます。
ただ、しばらくの間、新バージョンをアップロードできない場合は、
バグ報告があなたの元へ正しく送付されるようにするために、
&email-override; に電子メールを送ってください。


    <chapt id="bug-handling">バグの扱い

      <sect>バグを監視する
	<p>
優れた開発者であるためには、定期的に
<url id="&url-bts;" name="Debian バグ追跡システム (BTS)"> 
で自分のパッケージに関するものをチェックすると良いでしょう。
BTS には、あなたのパッケージに対してオープンされた
全バグ報告が登録されています。
	<p>
開発者は、<tt>bugs.debian.org</tt> 宛てに
電子メールを出すことによって BTS を利用することもできます。
その際に利用できるコマンドに関するドキュメントは
<url id="&url-bts;"> にあります。
また <package>debian-doc</package> パッケージがインストール済みならば、
ローカルにある &file-bts-docs; 
ファイルをご覧になることもできます。
	<p>
また、オープンされたバグ報告を定期的に取り込むことも有益です。
また、あなたのパッケージに対してオープンされたバグ報告の概略を
毎週電子メールで受け取りたいならば、
cron ジョブに以下の行を追加してもよいでしょう。

<example>
# 毎週自分のパッケージに対するバグ報告を調べる
&cron-bug-report;
</example>

<var>maintainer-address</var> の箇所には、あなたの
Debian 公式開発者としての電子メールアドレスを当てはめてください。

      <sect id="submit-bug">バグを報告する
	<p>
パッケージ開発者として、他のパッケージのバグを発見することや、
あなたのパッケージに対して報告されてはいるが、その対象パッケージを変更 
(reassign) すべきバグ報告を受けることもあるでしょう。
これらのバグは登録しておく必要があります。
こちらをどのように行なうかについての説明は、
<url id="&url-bts-control;" name="バグコントロールメールサーバ入門">
にあります。
	<p>
問題があった場合、そのバグを登録することが奨励されています。
電子メールを受け取るときに用いている通常のユーザアカウントから、
バグを報告してください。
root アカウントからバグを報告してはいけません。
	<p>
当該パッケージに関する問題のバグが、
まだ報告されていないことを確認してください。
その上で、そのバグを適切なところへ報告してください。
特別に許可を得ている場合、他のパッケージに対しても、
何度も報告を受けているバグをマージし、その修正が完了した際、
そのバグの重要度を `fixed' に設定することもできます。
なお、バグ報告者かそのパッケージの開発者でなければ、
(開発者から権限を付与されていない限り、)
そのバグを実際にクローズすることはできません。

      <sect>バグ報告に返信する
	<p>
バグ報告に対する返信は、必ずそのバグの元の報告者と、
バグ報告そのもの (例えば <email>123@bugs.debian.org</email>) 
の両者に送付されなければなりません。
	<p>
バグサーバ経由で &email-bts-control; に `close' コマンドを送って
バグをクローズすることは<em>決して</em>しないでください。
そうしてしまうと、元の報告者は、そのバグがクローズされた理由に関して
何のフィードバックも得ることができません。

      <sect id="upload-bugfix">新規アップロードによってバグをクローズする場合には
	<p>
あなたのパッケージのバグを修正する場合、
その修正が完了した際にバグをクローズすることは、
パッケージ開発者としての責任です。
しかしながら、修正されたパッケージが Debian アーカイブに収められるまでは、
そのバグをクローズしてはいけません。
そのため、アップロードしたパッケージがアーカイブにインストールされたとの
通知を受けてから、BTS に登録されているバグをクローズしてください。
	<p>
<package>dpkg-dev</package> の新しいバージョンを利用し、
changelog エントリを適切に設定していれば、
<prgn>dinstall</prgn> は自動的にそのバグをクローズします。
そのためには、以下のように <file>debian/changelog</file> 
ファイルの記述が正しい文法にしたがっていなければなりません。

<example>
acme-cannon (3.1415) unstable; urgency=low

  * Frobbed with options (closes: Bug#98339)
  * Added safety to prevent operator dismemberment, closes: bug #98765,
    bug #98713, #98714.
  * Added manpage. closes: #98725.
</example>

技術的な観点からいえば、以下の Perl 正規表現が用いられます。

<example>
  /closes:\s*(bug)?\#\d+(,\s*(bug)?\#\d+)*/gi
</example>

このパッケージの開発者は、他の changelog エントリと区別しやすいことから、
<tt>(closes: Bug#<var>XXX</var>)</tt> という文法を好んで使っているようです。
	<p>
バグのクローズを手動という古い流儀で行ないたい場合は、
<tt>.changes</tt> ファイルを
<email>XXX-done@bugs.debian.org</email> 宛てに送れば結構です。
その際こちらの <var>XXX</var> の箇所にはバグ番号を当てはめてください。

      <sect id="lintian-reports">Lintian による報告
	<p>
パッケージ開発者は、定期的に最新の <package>lintian</package> を 
`unstable' ディストリビューションから入手し、
自らのパッケージすべてをチェックすべきです。
あるいは、<url id="&url-lintian;" name="オンライン lintian 報告">上で、
自分が開発者として登録している電子メールアドレスの箇所を
チェックしてもよいでしょう。
こちらの報告は自動的に更新されますが、
最新の <package>lintian</package> を利用して、
ディストリビューションの最新バージョン (通常は 'unstable') に対する
<prgn>lintian</prgn> 報告を収録しています。

      <sect>一度にたくさんのバグ報告を行なう
	<p>
たくさんの異なるパッケージ上にある同一の問題に対して、
たくさんのバグ報告を -- つまり 10 以上も -- 
行なうことは、勘弁願いたい作業です。
ただ、ともあれ一度にたくさんのバグ報告をしなくて済むように、
できうることは行なってください。
例えば、その問題のチェックが自動化できるものならば、
エラーや警告を発行するように
<package>lintian</package> に新たなチェックを付け加えてください。
	<p>
同じ問題に関する 10 個以上のバグを一度に報告する場合は、
そのバグを報告する前に、その意図するところを添えて
&email-debian-devel; 宛てにメッセージを送ることが推奨されています。
このことによって、他の開発者はそのバグが本当に問題のあるものなのかどうかを
確かめることができます。
さらに、このことは、
複数の開発者が同じバグを同時に報告するという事態も防ぎます。
	<p>
なお、たくさんのバグを同一のサブジェクトで報告する際には、
バグ報告が配送されるメーリングリストに転送されないよう、
そのバグ報告は <email>maintonly@bugs.debian.org</email> へ送ってください。


    <chapt id="tools">Debian 開発者用ツールの概観
      <p>
この章では、開発者が利用できるツール群を大まかに説明します。
これらのツール群は、開発者の便宜を図り、
これらを使うことによって空いた時間をより重要な
作業にまわせるよう用意されています。
      <p>
高レベルのパッケージ開発ツールの利用を好む人もいれば、好まない人もいます。
Debian では、この問題に関して公式な取り決めはありません。
つまり、どのツールを用いても作業を行なうことができるならば問題ありません。
そのため、この章は、どのツールを使うべきなのか、
開発に伴う作業にどのように取り組むべきなのか、
について規定するものではありません。
また、競合するツールの排除を避けるために、
特定のツールを推奨することもしません。
      <p>
これらパッケージの説明文の大半は、
実際のパッケージ説明文そのものを参考にしたものです。
より詳細な情報は各パッケージのドキュメントをご覧ください。

      <sect id="dpkg-dev">
	<heading><package>dpkg-dev</package>
	<p>
<package>dpkg-dev</package> には、Debian ソースパッケージの展開、
構築、アップロードに必要となる (<prgn>dpkg-source</prgn> を含む) 
ツール群が収録されています。
これらのユーティリティ群は、パッケージの作成および操作に必要となる
基本的で低レベルな機能を提供します。
そのため、こちらはいずれの Debian 開発者にも必要となるものです。

      <sect id="lintian">
	<heading><package>lintian</package>
	<p>
<package>lintian</package> は Debian パッケージを精査し、
バグやポリシー違反を報告します。
<package>lintian</package> は、一般的なエラーのチェックとともに、
Debian ポリシーの多角的な自動チェックも行ないます。
<package>lintian</package> の使い方については、
<ref id="upload-checking"> および <ref id="lintian-reports"> 
ですでに説明してあります。

      <sect id="debhelper">
	<heading><package>debhelper</package>
	<p>
<package>debhelper</package>は、
バイナリ Debian パッケージの構築に関連する
一般的な作業を自動化するために、
<file>debian/rules</file> で利用できるプログラム集です。
このプログラム集には、作成するパッケージへのさまざまなファイルのインストールや、
ファイルの圧縮、ファイルパーミッションの修正、作成するパッケージの 
Debian menu システムへの統合を行なうプログラム群が含まれています。
	<p>
<package>debmake</package> とは異なり、<package>debhelper</package> は、
一貫した流儀で動作しながらも、小さく、
独立している多数のコマンド群から構成されています。
そのため、<package>debhelper</package> は <package>debmake</package> 
より細かな管理を行なうことができます。

      <sect id="debmake">
	<heading><package>debmake</package>
	<p>
<package>debmake</package> は、<package>debhelper</package> 
に先行して開発されたもので、より大まかなコマンドで 
<file>debian/rules</file> の補助を行なうものです
<package>debmake</package> には主に二つのプログラムが含まれています。
一つは <prgn>deb-make</prgn> で、
こちらは、開発者が通常の (Debian 的ではない)
ソースアーカイブを Debian ソースパッケージへ変換する補助をします。
もう一つは <prgn>debstd</prgn> で、
こちらは <package>debhelper</package> においては複数のコマンドによって
実現されている自動化された機能を一つにまとめたものです。

	<p>
今では <package>debhelper</package> の利用が好まれ、
<package>debmake</package> の利用は避けようとの合意があります。
新たなパッケージに　<package>debmake</package> 
を使うことはバグとして扱われます。<package>debmake</package>　を使った
新たなパッケージは今後アーカイブから拒否されます。

      <sect id="yada">
	<heading><package>yada</package>
	<p>
<package>yada</package> は若干異なる思想を持つ、
新たなパッケージング補助ツールです。
<file>debian/packages</file> ファイルを用いて、
<file>debian/</file> サブディレクトリ以下に設置される
他の必要なファイルを自動生成します。
	<p>
なお <package>yada</package> はまだまだ新しいものですので、
他のシステムに比べれば問題が残っている可能性があります。

      <sect id="equivs">
	<heading><package>equivs</package>
	<p>
<package>equivs</package> は、パッケージ作成用に
用意されているパッケージです。
<package>equivs</package> は、
単に依存関係を満たすためにパッケージを作成しなければならない場合などの、
ローカルな利用にしばしば推奨されているものです。
また、他パッケージに依存することのみを目的としたパッケージ
``meta-packages'' を作成する場合などにも利用されます。

      <sect id="cvs-buildpackage">
	<heading><package>cvs-buildpackage</package>
	<p>
<package>cvs-buildpackage</package> は、
Debian ソースパッケージの CVS リポジトリへの導入やインポート、
CVS リポジトリからの Debian パッケージの構築、
アップストリームにおける変更のリポジトリへの統合の補助
といった機能を提供します。
	<p>
これらのユーティリティは、Debian 開発者による CVS 
の利用を容易にするインフラを提供します。
<package>cvs-buildpackage</package> を利用すれば、
<em>stable</em> や、<em>unstable</em>、場合によっては <em>experimental</em> 
といったディストリビューション向けに、
あるパッケージを独立した複数の CVS ブランチにて管理したり、
そのほかのバージョンコントロールシステムの恩恵を受けることができます


      <sect id="dupload">
	<heading><package>dupload</package>
	<p>
<package>dupload</package> は、
Debian パッケージを Debian アーカイブに自動アップロードしたり、
アップロードのログをとったり、
アップロードに関する電子メールを送信したりする、
スクリプトおよびパッケージです。
<package>dupload</package> では、新規アップロードを行なう先の場所や、
その方法を設定することも可能です。

      <sect id="fakeroot">
	<heading><package>fakeroot</package>
	<p>
<package>fakeroot</package> は root 権限をシミュレートします。
<package>fakeroot</package> を利用すれば、root 
にならずにパッケージを構築できます。
(各パッケージでは、通常 root
 の所有権でファイルがインストールされている必要があります。)
<package>fakeroot</package> がインストールされていれば、
一般ユーザで、例えば <tt>dpkg-buildpackage -rfakeroot</tt> 
とすることができます。

      <sect id="devscripts">
	<heading><package>devscripts</package>
	<p>
<package>devscripts</package> は、Debian パッケージ開発に役立つ
ラッパーやツールを収録したパッケージです。
例えば、<file>debian/changelog</file> 
ファイルをコマンドラインから操作するための <prgn>debchange</prgn> 
や、<prgn>dpkg-buildpackage</prgn> のラッパーである <prgn>debuild</prgn> 
といったスクリプトが含まれています。

      <sect id="debget">
	<heading><package>debget</package>
	<p>
<package>debget</package> は、Debian 
アーカイブからファイルをダウンロードする際に役立つ
便利なスクリプトを収録したパッケージです。
例えば、ソースパッケージのダウンロードにこちらを利用することができます。

  </book>
</debiandoc>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:nil
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-declaration:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
