<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
    "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
  <!ENTITY % commondata SYSTEM "common.ent" > %commondata;
]>
<chapter id="beyond-pkging">
<title>Beyond Packaging</title>
<para>
Debian is about a lot more than just packaging software and maintaining those
packages.  This chapter contains information about ways, often really critical
ways, to contribute to Debian beyond simply creating and maintaining packages.
</para>
<para>
As a volunteer organization, Debian relies on the discretion of its members in
choosing what they want to work on and in choosing the most critical thing to
spend their time on.
</para>
<section id="submit-bug">
<title>Bug reporting</title>
<para>
We encourage you to file bugs as you find them in Debian packages.  In fact,
Debian developers are often the first line testers.  Finding and reporting bugs
in other developers' packages improves the quality of Debian.
</para>
<para>
Read the <ulink url="&url-bts-report;">instructions for
reporting bugs</ulink> in the Debian <ulink
url="&url-bts;">bug tracking system</ulink>.
</para>
<para>
Try to submit the bug from a normal user account at which you are likely to
receive mail, so that people can reach you if they need further information
about the bug.  Do not submit bugs as root.
</para>
<para>
You can use a tool like <citerefentry> <refentrytitle>reportbug</refentrytitle>
<manvolnum>1</manvolnum> </citerefentry> to submit bugs.  It can automate and
generally ease the process.
</para>
<para>
Make sure the bug is not already filed against a package.  Each package has a
bug list easily reachable at
<literal>http://&bugs-host;/<replaceable>packagename</replaceable></literal>
Utilities like <citerefentry> <refentrytitle>querybts</refentrytitle>
<manvolnum>1</manvolnum> </citerefentry> can also provide you with this
information (and <command>reportbug</command> will usually invoke
<command>querybts</command> before sending, too).
</para>
<para>
Try to direct your bugs to the proper location.  When for example your bug is
about a package which overwrites files from another package, check the bug
lists for <emphasis>both</emphasis> of those packages in order to avoid filing
duplicate bug reports.
</para>
<para>
For extra credit, you can go through other packages, merging bugs which are
reported more than once, or tagging bugs `fixed' when they have already been
fixed.  Note that when you are neither the bug submitter nor the package
maintainer, you should not actually close the bug (unless you secure permission
from the maintainer).
</para>
<para>
From time to time you may want to check what has been going on with the bug
reports that you submitted.  Take this opportunity to close those that you
can't reproduce anymore.  To find out all the bugs you submitted, you just have
to visit
<literal>http://&bugs-host;/from:<replaceable>&lt;your-email-addr&gt;</replaceable></literal>.
</para>
<section id="submit-many-bugs">
<title>Reporting lots of bugs at once (mass bug filing)</title>
<para>
Reporting a great number of bugs for the same problem on a great number of
different packages — i.e., more than 10 — is a deprecated practice.  Take
all possible steps to avoid submitting bulk bugs at all.  For instance, if
checking for the problem can be automated, add a new check to <systemitem
role="package">lintian</systemitem> so that an error or warning is emitted.
</para>
<para>
If you report more than 10 bugs on the same topic at once, it is recommended
that you send a message to &email-debian-devel; describing
your intention before submitting the report, and mentioning the fact in the
subject of your mail.  This will allow other developers to verify that the bug
is a real problem.  In addition, it will help prevent a situation in which
several maintainers start filing the same bug report simultaneously.
</para>
<para>
Please use the programs <command>dd-list</command> and if appropriate
<command>whodepends</command> (from the package devscripts) to generate a list
of all affected packages, and include the output in your mail to
&email-debian-devel;.
</para>
<para>
Note that when sending lots of bugs on the same subject, you should send the
bug report to <email>maintonly@&bugs-host;</email> so that the bug report
is not forwarded to the bug distribution mailing list.
</para>
<section id="usertags">
<title>Usertags</title>
<para>
You may wish to use BTS usertags when submitting bugs across a number of
packages. Usertags are similar to normal tags such as 'patch' and 'wishlist'
but differ in that they are user-defined and occupy a namespace that is
unique to a particular user. This allows multiple sets of developers to
'usertag' the same bug in different ways without conflicting.
</para>
<para>
To add usertags when filing bugs, specify the <literal>User</literal> and
<literal>Usertags</literal> pseudo-headers:
</para>
<screen>
To: submit@bugs.debian.org
Subject: <replaceable>&lt;title-of-bug&gt;</replaceable>

Package: <replaceable>&lt;pkgname&gt;</replaceable>
<replaceable>[ ... ]</replaceable>
User: <replaceable>&lt;email-addr&gt;</replaceable>
Usertags: <replaceable>&lt;tag-name&gt; [ &lt;tag-name&gt; ... ]</replaceable>

<replaceable>&lt;description-of-bug ...&gt;</replaceable>
</screen>
<para>
Note that tags are seperated by spaces and cannot contain underscores. If you
are filing bugs for for a particular group or team it is recommended that you
set the <literal>User</literal> to an appropriate mailing list after describing
your intention there.
</para>
<para>
To view bugs tagged with a specific usertag, visit
<literal>http://&bugs-host;/cgi-bin/pkgreport.cgi?users=<replaceable>&lt;email-addr&gt;</replaceable>&amp;tag=<replaceable>&lt;tag-name&gt;</replaceable></literal>.
</para>
</section>
</section>

</section>

<section id="qa-effort">
<title>Quality Assurance effort</title>
<section id="qa-daily-work">
<title>Daily work</title>
<para>
Even though there is a dedicated group of people for Quality Assurance, QA
duties are not reserved solely for them.  You can participate in this effort by
keeping your packages as bug-free as possible, and as lintian-clean (see <xref
linkend="lintian"/> ) as possible.  If you do not find that possible, then you
should consider orphaning some of your packages (see <xref
linkend="orphaning"/> ).  Alternatively, you may ask the help of other people
in order to catch up with the backlog of bugs that you have (you can ask for
help on &email-debian-qa; or
&email-debian-devel;).  At the same time, you can look for
co-maintainers (see <xref linkend="collaborative-maint"/> ).
</para>
</section>

<section id="qa-bsp">
<title>Bug squashing parties</title>
<para>
From time to time the QA group organizes bug squashing parties to get rid of as
many problems as possible.  They are announced on
&email-debian-devel-announce; and the announcement explains
which area will be the focus of the party: usually they focus on release
critical bugs but it may happen that they decide to help finish a major upgrade
(like a new <command>perl</command> version which requires recompilation of all
the binary modules).
</para>
<para>
The rules for non-maintainer uploads differ during the parties because the
announcement of the party is considered prior notice for NMU.  If you have
packages that may be affected by the party (because they have release critical
bugs for example), you should send an update to each of the corresponding bug
to explain their current status and what you expect from the party.  If you
don't want an NMU, or if you're only interested in a patch, or if you will deal
yourself with the bug, please explain that in the BTS.
</para>
<para>
People participating in the party have special rules for NMU, they can NMU
without prior notice if they upload their NMU to DELAYED/3-day at least.  All
other NMU rules apply as usually; they should send the patch of the NMU to the
BTS (to one of the open bugs fixed by the NMU, or to a new bug, tagged fixed).
They should also respect any particular wishes of the maintainer.
</para>
<para>
If you don't feel confident about doing an NMU, just send a patch to the BTS.
It's far better than a broken NMU.
</para>
</section>

</section>

<section id="contacting-maintainers">
<title>Contacting other maintainers</title>
<para>
During your lifetime within Debian, you will have to contact other maintainers
for various reasons.  You may want to discuss a new way of cooperating between
a set of related packages, or you may simply remind someone that a new upstream
version is available and that you need it.
</para>
<para>
Looking up the email address of the maintainer for the package can be
distracting.  Fortunately, there is a simple email alias,
<literal>&lt;package&gt;@&packages-host;</literal>, which provides a way to
email the maintainer, whatever their individual email address (or addresses)
may be.  Replace <literal>&lt;package&gt;</literal> with the name of a source
or a binary package.
</para>
<para>
You may also be interested in contacting the persons who are subscribed to a
given source package via <xref linkend="pkg-tracking-system"/> .  You can do so
by using the <literal>&lt;package&gt;@&pts-host;</literal> email
address.
</para>
<!-- FIXME: moo@packages.d.o is easily confused with moo@packages.qa.d.o -->
</section>

<section id="mia-qa">
<title>Dealing with inactive and/or unreachable maintainers</title>
<para>
If you notice that a package is lacking maintenance, you should make sure that
the maintainer is active and will continue to work on their packages.  It is
possible that they are not active any more, but haven't registered out of the
system, so to speak.  On the other hand, it is also possible that they just
need a reminder.
</para>
<para>
There is a simple system (the MIA database) in which information about
maintainers who are deemed Missing In Action is recorded.  When a member of the
QA group contacts an inactive maintainer or finds more information about one,
this is recorded in the MIA database.  This system is available in
<filename>/org/qa.debian.org/mia</filename> on the host <literal>qa.debian.org
</literal>, and can be queried with the <command>mia-query</command> tool.
Use <command>mia-query --help</command> to see how to query the database.
If you find that no information has been recorded about an inactive maintainer yet,
or that you can add more information, you should generally proceed as follows.
</para>
<para>
The first step is to politely contact the maintainer, and wait a reasonable
time for a response.  It is quite hard to define reasonable time, but it is
important to take into account that real life is sometimes very hectic.  One
way to handle this would be to send a reminder after two weeks.
</para>
<para>
If the maintainer doesn't reply within four weeks (a month), one can assume
that a response will probably not happen.  If that happens, you should
investigate further, and try to gather as much useful information about the
maintainer in question as possible.  This includes:
</para>
<itemizedlist>
<listitem>
<para>
The <literal>echelon</literal> information available through the <ulink
url="&url-debian-db;">developers' LDAP database</ulink>, which indicates
when the developer last posted to a Debian mailing list.  (This includes
mails about uploads distributed via the &email-debian-devel-changes; list.)
Also, remember to check whether the maintainer is marked as on vacation in
the database.
</para>
</listitem>
<listitem>
<para>
The number of packages this maintainer is responsible for, and the condition of
those packages.  In particular, are there any RC bugs that have been open for
ages?  Furthermore, how many bugs are there in general?  Another important
piece of information is whether the packages have been NMUed, and if so, by
whom.
</para>
</listitem>
<listitem>
<para>
Is there any activity of the maintainer outside of Debian?  For example, they
might have posted something recently to non-Debian mailing lists or news
groups.
</para>
</listitem>
</itemizedlist>
<para>
A bit of a problem are packages which were sponsored — the maintainer is not
an official Debian developer.  The <literal>echelon</literal> information is not
available for sponsored people, for example, so you need to find and contact the
Debian developer who has actually uploaded the package.  Given that they signed
the package, they're responsible for the upload anyhow, and are likely to know
what happened to the person they sponsored.
</para>
<para>
It is also allowed to post a query to &email-debian-devel;,
asking if anyone is aware of the whereabouts of the missing maintainer.  Please
Cc: the person in question.
</para>
<para>
Once you have gathered all of this, you can contact
&email-mia;.  People on this alias will use the
information you provide in order to decide how to proceed.  For example, they
might orphan one or all of the packages of the maintainer.  If a package has
been NMUed, they might prefer to contact the NMUer before orphaning the package
— perhaps the person who has done the NMU is interested in the package.
</para>
<para>
One last word: please remember to be polite.  We are all volunteers and cannot
dedicate all of our time to Debian.  Also, you are not aware of the
circumstances of the person who is involved.  Perhaps they might be seriously
ill or might even have died — you do not know who may be on the receiving
side.  Imagine how a relative will feel if they read the e-mail of the deceased
and find a very impolite, angry and accusing message!
</para>
<para>
On the other hand, although we are volunteers, we do have a responsibility.  So
you can stress the importance of the greater good — if a maintainer does not
have the time or interest anymore, they should let go and give the package to
someone with more time.
</para>
<para>
If you are interested in working in the MIA team, please have a look at the
README file in <filename>/org/qa.debian.org/mia</filename> on <literal>
qa.debian.org</literal> where the technical details and the MIA procedures are
documented and contact &email-mia;.
</para>
</section>

<section id="newmaint">
<title>Interacting with prospective Debian developers</title>
<para>
Debian's success depends on its ability to attract and retain new and talented
volunteers.  If you are an experienced developer, we recommend that you get
involved with the process of bringing in new developers.  This section
describes how to help new prospective developers.
</para>
<section id="sponsoring">
<title>Sponsoring packages</title>
<para>
Sponsoring a package means uploading a package for a maintainer who is not able
to do it on their own, a new maintainer applicant.  Sponsoring a package also
means accepting responsibility for it.
</para>
<!-- FIXME: service down
<para>
If you wish to volunteer as a sponsor, you can sign up at <ulink
url="http://www.internatif.org/bortzmeyer/debian/sponsor/">http://www.internatif.org/bortzmeyer/debian/sponsor/</ulink>.
</para>
-->
<para>
New maintainers usually have certain difficulties creating Debian packages —
this is quite understandable.  That is why the sponsor is there, to check the
package and verify that it is good enough for inclusion in Debian.  (Note that
if the sponsored package is new, the ftpmasters will also have to inspect it
before letting it in.)
</para>
<para>
Sponsoring merely by signing the upload or just recompiling is <emphasis
role="strong">definitely not recommended</emphasis>.  You need to build the
source package just like you would build a package of your own.  Remember that
it doesn't matter that you left the prospective developer's name both in the
changelog and the control file, the upload can still be traced to you.
</para>
<para>
If you are an application manager for a prospective developer, you can also be
their sponsor.  That way you can also verify how the applicant is handling the
'Tasks and Skills' part of their application.
</para>
</section>

<section id="s7.5.2">
<title>Managing sponsored packages</title>
<para>
By uploading a sponsored package to Debian, you are certifying that the package
meets minimum Debian standards.  That implies that you must build and test the
package on your own system before uploading.
</para>
<para>
You cannot simply upload a binary <filename>.deb</filename> from the sponsoree.
In theory, you should only ask for the diff file and the location of the
original source tarball, and then you should download the source and apply the
diff yourself.  In practice, you may want to use the source package built by
your sponsoree.  In that case, you have to check that they haven't altered the
upstream files in the <filename>.orig.tar.gz</filename> file that they're
providing.
</para>
<para>
Do not be afraid to write the sponsoree back and point out changes that need to
be made.  It often takes several rounds of back-and-forth email before the
package is in acceptable shape.  Being a sponsor means being a mentor.
</para>
<para>
Once the package meets Debian standards, build and sign it with
</para>
<screen>
dpkg-buildpackage -k<replaceable>KEY-ID</replaceable>
</screen>
<para>
before uploading it to the incoming directory.  Of course, you can also use any
part of your <replaceable>KEY-ID</replaceable>, as long as it's unique in your
secret keyring.
</para>
<para>
The Maintainer field of the <filename>control</filename> file and the
<filename>changelog</filename> should list the person who did the packaging,
i.e., the sponsoree.  The sponsoree will therefore get all the BTS mail about
the package.
</para>
<para>
If you prefer to leave a more evident trace of your sponsorship job, you can
add a line stating it in the most recent changelog entry.
</para>
<para>
You are encouraged to keep tabs on the package you sponsor using <xref
linkend="pkg-tracking-system"/> .
</para>
</section>

<section id="s7.5.3">
<title>Advocating new developers</title>
<para>
See the page about <ulink
url="&url-newmaint-advocate;">advocating a prospective
developer</ulink> at the Debian web site.
</para>
</section>

<section id="s7.5.4">
<title>Handling new maintainer applications</title>
<para>
Please see <ulink url="&url-newmaint-amchecklist;">Checklist
for Application Managers</ulink> at the Debian web site.
</para>
</section>

</section>

</chapter>

