<!doctype debiandoc system>

<debiandoc>

<book>

<titlepag>

<title>Podrêcznik dla nowych opiekunów pakietów Debiana</title>

<author>
<name>Josip Rodin</name> <email>jrodin@jagor.srce.hr</email>
</author>
<author>
<name>polskie t³umaczenie: Pawe³ Têcza</name> <email>pawel.tecza@poczta.fm</email>
</author>
<author>
<name>korekta t³umaczenia: Marcin Owsiany</name> <email>porridge@debian.org</email>
</author>

<version>wersja orygina³u: 1.0.2, 10 czerwca 2001. wersja t³umaczenia: 1.0.2.2, 27 marca 2002</version>

<copyright>
<copyrightsummary>Copyright &copy; 1998-2001 Josip Rodin.</copyrightsummary>
<copyrightsummary>Copyright &copy; polskiego t³umaczenia 2002 Pawe³ Têcza, Marcin Owsiany.</copyrightsummary>

<p>Ten dokument mo¿e byæ u¿ywany zgodnie z zasadami licencji GNU GPL (General
Public License) w wersji 2 lub wy¿szej.

<p>Do stworzenia tego dokumentu wykorzystano, jako przyk³ady, nastêpuj±ce
dokumenty:

<p>Making a Debian Package (znany jako Debmake Manual), copyright &copy;
1997 Jaldhar Vyas.

<p>The New-Maintainer's Debian Packaging Howto, copyright &copy; 1997
Will Lowe.
</copyright>

</titlepag>

<toc sect>

<chapt id="start">Rozpoczêcie "tak, jak siê nale¿y"

<p>Ten dokument próbuje opisaæ proces budowania pakietów dla systemu Debian
GNU/Linux. Jest on przeznaczony dla zwyk³ych u¿ytkowników Debiana i tych z
nich, którzy chc± zostaæ rozwijaj±cymi. Informacje w nim zawarte mog± s³u¿yæ
do budowania paczek ze ¼róde³ napisanych w ró¿nych popularnych jêzykach
programowania. Poparte one zosta³y praktycznymi przyk³adami, gdy¿ jak mówi
stare rzymskie przys³owie, <em>Longum iter est per preaecepta, breve et
efficax per exempla!</em> (Droga wed³ug zasad jest d³uga, a z przyk³adami -
krótka i wygodna!).

<p>Jedn± z rzeczy czyni±cych z Debiana wyj±tkow± dystrybucjê jest jego system
pakietów. Mimo i¿ istnieje ogromna ilo¶æ oprogramowania spakowanego do formatu
Debiana, to czasami zachodzi konieczno¶æ zainstalowania programu, który nie
posiada odpowiedniej paczki. Pewnie siê dziwisz, ¿e mo¿esz sam stworzyæ w³asne
pakiety i my¶lisz, ¿e to bardzo trudne zadanie. No có¿, je¶li jeste¶ zupe³nym
nowicjuszem w Linuksie, to rzeczywi¶cie bêdziesz mia³ k³opoty, ale czy gdyby¶
by³ ¿ó³todziobem, to czyta³by¶ teraz ten dokument? :-) Musisz trochê wiedzieæ
na temat programowania pod Unixem, ale nie musisz od razu byæ ekspertem.

<p>Najnowsze wersje tego dokumentu powinny byæ zawsze dostêpne bezpo¶rednio
na stronie <url name="http://www.debian.org/doc/maint-guide"
id="http://www.debian.org/doc/maint-guide"> oraz w pakiecie `maint-guide'.

<sect id="needprogs">Programy, których potrzebujesz do rozwijania

<p>Zanim zaczniesz cokolwiek robiæ, powiniene¶ upewniæ siê, ¿e masz
zainstalowanych kilka dodatkowych pakietów niezbêdnych do rozwijania. Zwróæ
uwagê, ¿e na poni¿szej li¶cie nie ma ¿adnych pakietów oznaczonych jako
`niezbêdne' (essential) lub `wymagane' (required). Po prostu zak³adamy, ¿e masz
ju¿ je zainstalowane.

<p>Ten dokument zosta³ napisany w czasie, gdy oficjalnym, stabilnym wydaniem
Debiana by³ 2.1 `slink', a wydanie 2.2 `potato' by³o dopiero w trakcie
tworzenia. Dlatego te¿ wymienione nazwy pakietów pochodz± g³ównie z `potato'.

<p>Nastêpuj±ce pakiety wchodz± w sk³ad standardowej instalacji Debiana 2.1,
wiêc prawdopodobnie masz je (i dodatkowe pakiety, od których one zale¿±) ju¿
zainstalowane. Mimo to powiniene¶ sprawdziæ ich status za pomoc± komendy
`dpkg -s &lt;pakiet&gt;`.

<list>
<item><em>binutils</em> - zestaw programów s³u¿±cy do asemblacji i konsolidacji
plików wynikowych - dziêki nim s± tworzone binarne wersje programów. (wiêcej
informacji znajdziesz za pomoc± `info binutils`)

<item><em>cpp</em> - preprocesor jêzyka C. (wiêcej informacji znajdziesz na
stronie podrêcznika <manref name="cpp" section="1">)

<item><em>cpio</em> - program archiwizuj±cy, podobny do tar lub zip. (wiêcej
informacji znajdziesz na stronie podrêcznika <manref name="cpio"
section="1">)

<item><em>dpkg-dev</em> - pakiet zawieraj±cy narzêdzia niezbêdne do
rozpakowywania, budowania i wysy³ania pakietów ¼ród³owych Debiana. (wiêcej
informacji znajdziesz na stronie podrêcznika <manref name="dpkg-source"
section="1">)

<item><em>file</em> - przydatny program do okre¶lania typu pliku. (wiêcej
informacji znajdziesz na stronie podrêcznika <manref name="file"
section="1">)

<item><em>gcc</em> - kompilator GNU jêzyka C. Wiêkszo¶æ programów dla Linuxa
zosta³o napisanych w jêzyku C. Jednak¿e, je¶li napisa³e¶ swój program w jakim¶
innym jêzyku programowania, na przyk³ad C++, Fortranie lub Pascalu, to
powiniene¶ zainstalowaæ odpowiednio kompilatory g++, g77 lub gpc. (wiêcej
informacji znajdziesz na stronach podrêcznika <manref name="gcc" section="1">,
<manref name="g++" section="1">, <manref name="g77" section="1">,
<manref name="gpc" section="1">)

<item><em>libc6-dev</em> - biblioteki jêzyka C i pliki nag³ówkowe kompilatora
gcc niezbêdne do konsolidacji ze stworzonymi plikami wynikowymi. Mimo i¿
niektóre programy wci±¿ jeszcze zalecaj± i/lub u¿ywaj± biblioteki libc5, to
zachêcam Ciê do u¿ywania jej nowszej wersji (libc6). (wiêcej informacji
znajdziesz za pomoc± `info libc`)

<item><em>make</em> - na ogó³ proces tworzenia progamu sk³ada siê z kilku
etapów. Zamiast ci±g³ego powtarzania w kó³ko tych samych komend, mo¿esz
pos³u¿yæ siê programem, który zrobi to za Ciebie. Jedyne co musisz zrobiæ w
tym celu, to stworzyæ plik(i) `Makefile'. Istniej± tak¿e programy, które
u¿ywaj± imake i xmkmf, narzêdzi do generowania plików Makefile z zestawów
makro-funkcji. Wiele nowszych programów obok skryptów &quot;configure&quot;
oraz plików Makefile wykorzystuje takie narzêdzia, jak autoconf
i automake, wiêc ich te¿ mo¿esz potrzebowaæ. (wiêcej informacji znajdziesz za
pomoc± `info make` oraz na stronach podrêcznika <manref name="imake"
section="1">, <manref name="xmkmf" section="1">, <manref name="autoconf"
section="1">, <manref name="automake" section="1">)

<item><em>patch</em> - bardzo u¿yteczne narzêdzie s³u¿±ce do nak³adania na
pliki ¼ród³owe "³at", czyli stworzonych dziêki programowi diff plików z
ró¿nicami miêdzy plikami ¼ród³owymi i tworzenia w ten sposób "za³atanych"
wersji programów. (wiêcej informacji znajdziesz na stronie podrêcznika
<manref name="patch" section="1">)

<item><em>perl5</em> - Perl jest jednym z najczê¶ciej stosowanych
interpretowanych jêzyków skryptowych w systemach Un*x. Czêsto okre¶lany jest
jako "Uniksowy scyzoryk z pi³± ³añcuchow±". (wiêcej informacji znajdziesz
na stronie podrêcznika <manref name="perl" section="1">).
</list>

<p>Najprawdopodobniej bêdziesz te¿ musia³ samodzielnie zainstalowaæ nastêpuj±ce
pakiety z sekcji `devel':

<list>
<item><em>dh-make</em> i <em>debhelper</em> - pakiet dh-make jest niezbêdny do
stworzenia szablonu Twojego przyk³adowego pakietu. U¿ywa on tak¿e do tworzenia
pakietów niektórych narzêdzi z pakietu debhelper. Pakiety te nie s± nieodzowne
do budowania paczek, ale s± <strong>bardzo</strong> zalecane, szczególnie nowym
opiekunom pakietów. Dziêki nim o wiele ³atwiej rozpocz±æ proces budowania
pakietu i kontrolowaæ go pó¼niej. (wiêcej informacji znajdziesz na stronach
podrêcznika <manref name="dh_make" section="1">, <manref name="debhelper"
section="1"> oraz w pliku /usr/share/doc/debhelper/README).

<item><em>devscripts</em> - pakiet zawieraj±cy parê u¿ytecznych i pomocnych
dla opiekuna skryptów, które nie s± jednak¿e niezbêdne do budowania pakietów.
(wiêcej informacji znajdziesz w pliku /usr/share/doc/devscripts/README.gz).

<item><em>fakeroot</em> - narzêdzie, które pozwala Ci "udawaæ" bycie
administratorem systemu. Uprawnienia roota s± niezbêdne w niektórych etapach
procesu budowania pakietu. (wiêcej informacji znajdziesz na stronie
podrêcznika <manref name="fakeroot" section="1">)

<item><em>lintian</em> - program s³u¿±cy do sprawdzania poprawno¶ci pakietu
Debiana. Poinformuje Ciê on, gdy w zbudowanej paczce znajdzie najczêstsze b³êdy
i wyja¶ni ich przyczynê. (wiêcej informacji znajdziesz na stronie podrêcznika
<manref name="lintian" section="1"> oraz na stronie
/usr/share/doc/lintian/lintian.html/index.html)
</list>

<p>I wreszcie <em>bardzo wa¿ne</em> pakiety, które znajduj± siê w sekcji `doc'
dystrybucji:

<list>
<item><em>debian-policy</em> - opisuje strukturê i zawarto¶æ archiwum, kilka
spraw dotycz±cych projektu systemu operacyjnego, FHS (Filesystem Hierarchy
Standard), oraz co najwa¿niejsze (dla Ciebie): wymagania, które musi spe³niæ
ka¿dy pakiet, aby móg³ byæ w³±czony do dystrybucji. (wiêcej informacji
znajdziesz na stronie /usr/share/doc/debian-policy/policy.html/index.html)

<item><em>developers-reference</em> - opisuje wszystkie zagadnienia nie
zwi±zane z technicznymi szczegó³ami procesu tworzenia paczki, a wiêc strukturê
archiwum, informacje na temat zmian nazw pakietów, ich osierocania i
poprawiania, informacje o tym, jak umie¶ciæ pakiet w archiwum Debiana, nie
bêd±c opiekunem danego pakietu (Non-Maintainer Upload), jak radziæ sobie z
b³êdami, kiedy i gdzie umieszczaæ pakiet (wiêcej informacji znajdziesz na
stronie /usr/share/doc/developers-reference/developers-reference.html/index.html).
</list>

<p>Bêdziesz równie¿ potrzebowaæ jakiego¶ pakietu kryptograficznego, PGP
(pakiety pgp-*) lub GPG (pakiet gnupg), aby móc cyfrowo <em>podpisaæ</em> swój
pakiet. Jest to szczególnie wa¿ne, gdy zamierzasz rozpowszechniaæ swój pakiet
w¶ród innych ludzi (na pewno bêdziesz musia³ to zrobiæ, gdy Twój pakiet
zostanie w³±czony do dystrybucji Debiana). Jednak¿e z powodu amerykañskich
przepisów eksportowych, nie mo¿esz tak po prostu pobraæ tych pakietów z
najbli¿szego serwera FTP Debiana. Na szczê¶cie Debian dostarcza te pakiety
za po¶rednictwem serwera, który nie znajduje siê na terytorium USA i nazywa siê
non-US.debian.org (ftp://non-us.debian.org/debian-non-US/). Na serwerze FTP,
z którego korzystasz, powinien znajdowaæ siê plik README.non-US zawieraj±cy
informacje na temat najbli¿szego serwera lustrzanego serwera non-US.debian.org.

<p>Powy¿sze krótkie opisy jedynie przedstawiaj± do czego s³u¿y dany pakiet.
Zanim przejdziesz dalej, proszê gruntownie zapoznaæ siê z dokumentacj± do
ka¿dego z programów, a przynajmniej z ich standardowym u¿yciem. Byæ mo¿e wydaje
siê to teraz mêcz±ce, ale pó¼niej bêdziesz siê <em>bardzo</em> cieszyæ, ¿e to
zrobi³e¶/³a¶.

Uwaga: pakiet <em>debmake</em> zawiera kilka programów bardzo zbli¿onych
funkcjonalnie do <em>dh_make</em>, ale ten dokument <strong>nie</strong>
omawia jego u¿ycia. Po wiêcej informacji odsy³am na stronê <url name="Debmake
Manual" id="http://www.debian.org/~jaldhar/">.

<sect id="otherinfo">Inne informacje

<p>Istniej± dwa rodzaje pakietów jakie mo¿esz stworzyæ: ¼ród³owe i binarne.
Pakiet ¼ród³owy zawiera kod, który mo¿esz skompilowaæ, aby otrzymaæ binarn±
postaæ programu. Pakiet binarny zawiera natomiast ju¿ gotowy do u¿ycia
program. Proszê nie myliæ takich pojêæ, jak ¼ród³o programu i pakiet ¼ród³owy
programu! Je¶li potrzebujesz wiêcej szczegó³ów na temat tej terminologii, to
proszê przeczytaæ inne podrêczniki.

<p>W Debianie, termin `opiekun' (maintainer) oznacza osobê, która tworzy
pakiety i jest cz³onkiem projektu Debian, `autor' (upstream author) - osobê,
która tworzy program, a `zewnêtrzny opiekun' (upstream maintainer) - osobê,
która aktualnie opiekuje siê programem, pozostaj±c na zewn±trz projektu Debian.
Zwykle autor i zewnêtrzny opiekun s± t± sam± osob±, czasem nawet t± sam± osob±
co opiekun. Je¶li napisa³e¶ jaki¶ program i chcesz, ¿eby wszed³ w sk³ad
Debiana, to przy¶lij swoje podanie i zostañ opiekunem.

<p>Gdy ju¿ zbudowa³e¶ swój pakiet (lub gdy jeste¶ w trakcie jego budowania) i
chcesz, aby Twój program wszed³ w sk³ad nastêpnej dystrybucji (je¶li jest on
u¿yteczny, to czemu nie?), to mo¿esz zostaæ oficjalnym opiekunem pakietu
Debiana. Proces przystêpowania do projektu jest wyja¶niony w dokumencie
Developer's Reference. Proszê przeczytaæ go.

<chapt id="first">Pierwsze kroki

<p>Choæ dokumentacja na stronie <url name="K±cik rozwijaj±cych"
id="http://www.debian.org/devel/"> niedostatecznie jasno t³umaczy
gdzie i jak nowi opiekunowie pakietów powinni zacz±æ swoj± pracê, to ten
dokument wyja¶ni ka¿dy ma³y (na pocz±tek byæ mo¿e nie na temat) krok i pomo¿e
Ci stworzyæ pierwszy pakiet. Dziêki niemu nabierzesz trochê do¶wiadczenia w
budowaniu jego nastêpnych wydañ, a pó¼niej, byæ mo¿e, jakich¶ innych pakietów.

<sect id="choose">Wybierz swój program

<p>Prawdopodobnie wybra³e¶/³a¶ ju¿ pakiet, który chcesz zbudowaæ, ale
przeczytaj poni¿sze wskazówki dla niewtajemniczonych.

<list>
<item>sprawd¼ czy pakiet znajduje siê ju¿ w dystrybucji. Je¶li u¿ywasz
dystrybucji `stabilnej' (stable), to chyba najlepiej bêdzie, gdy udasz siê na
stronê z <url name="przeszukiwark± pakietów"
id="http://www.debian.org/distrib/packages">. Je¶li za¶ u¿ywasz
<strong>aktualnej</strong> `niestabilnej' (unstable) dystrybucji, to sprawd¼
wynik dzia³ania poni¿szych komend:

<p><example>
dpkg -s nazwa_programu
dpkg -l '*nazwa_programu*'
</example>
</item>

<item>sprawd¼ równie¿ na stronie <url name="WNPP"
id="http://www.debian.org/devel/wnpp/"> i w archiwum listy dyskusyjnej
debian-devel czy kto¶ ju¿ nie buduje tego pakietu. Je¶li ma on ju¿ swojego
opiekuna, to mo¿esz siê z nim skontaktowaæ, gdy czujesz, ¿e móg³by¶ mu pomóc.
W przeciwnym przypadku znajd¼ inny interesuj±cy Ciê program, którym siê nikt
obecnie nie opiekuje.
</item>

<item>program <strong>musi</strong> mieæ licencjê, je¶li to mo¿liwe, to
najlepiej zgodn± z <url name="Wytycznymi Debiana dotycz±cymi Oprogramowania
Wolnodostêpnego" id="http://www.debian.org/social_contract.html#guidelines">.
Je¶li nie zgadza siê ona z którymi¶ zasadami wymienionymi w powy¿szym
dokumencie, to program mo¿e byæ w³±czony do sekcji `contrib' lub `non-free'
Debiana. Gdy nie jeste¶ pewny, do której sekcji mo¿na w³±czyæ program, to
zapytaj o to (tylko w jêzyku angielskim) na li¶cie dyskusyjnej
<email>debian-legal@lists.debian.org</email>.
</item>

<item>program z pewno¶ci± <strong>nie</strong> powinien byæ uruchamiany z
ustanowionym identyfikatorem administratora systemu (set-user-ID root)
- ogólnie program nie powinien potrzebowaæ ustanowionego
¿adnego identyfikatora u¿ytkownika (ang. set-user-ID) lub grupy
(set-group-ID).</item>

<item>program nie powinien byæ demonem, ani innym programem umieszczanym w
katalogu */sbin.</item>

<item>program powinien mieæ binarn±, wykonywaln± formê. Nie próbuj na tym
etapie tworzyæ pakietu z bibliotek±.</item>

<item>program powinien byæ dobrze udokumentowany lub przynajmniej zrozumia³y
(dla ka¿dego).</item>

<item>powiniene¶ skontaktowaæ siê z autorem(ami) programu, aby sprawdziæ czy
zgadzaj± siê na jego zapakowanie. Wa¿n± rzecz± jest mo¿liwo¶æ konsultacji z
autorem(ami) programu w razie wyst±pienia jakich¶ problemów. Nie próbuj zatem
pakowaæ oprogramowania, którym siê nikt nie opiekuje.</item>

<item>i na koñcu, choæ wcale nie jest to najmniej wa¿ne, musisz wiedzieæ jak
program dzia³a i wypróbowaæ go przez pewnien czas.</item>
</list>

<p>Oczywi¶cie powy¿sze rzeczy to po prostu ¶rodki zaradcze, które maj± na celu
uchroniæ Ciê przed gniewem u¿ytkowników, gdy zrobisz co¶ ¼le w jakim¶ demonie z
ustanowionym identyfikatorem u¿ytkownika... Gdy nabierzesz ju¿ wiêcej
do¶wiadczenia w pakowaniu, to zdo³asz nawet zapakowaæ takie programy, których
powy¿ej Ci odradza³em. Jednak¿e nawet najbardziej do¶wiadczeni rozwijaj±cy
Debiana konsultuj± siê na li¶cie dyskusyjnej debian-devel, gdy maj± jakie¶
w±tpliwo¶ci, a ludzie do niej zasubskrybowani chêtnie im pomagaj±.

<p>Wiêcej informacji na te tematy znajdziesz w dokumencie Developer's
Reference.

<sect id="getit">We¼ program i wypróbuj go

<p>Pierwsz± rzecz±, któr± powiniene¶ zrobiæ, to odnalezienie i pobranie
oryginalnego pakietu. Zak³adam, ¿e ju¿ masz plik ¼ród³owy, który pobra³e¶ ze
strony domowej jego autora. ¬ród³a z wolnym oprogramowaniem dla Linuxa s±
zwykle rozprowadzane w formacie tar/gzip, czyli plikach z rozszerzeniem
.tar.gz. Pliki te na ogó³ zawieraj± podkatalog o nazwie program-wersja, w
którym znajduj± siê wszystkie pliki ¼ród³owe. Je¶li ¼ród³a wybranego przez
Ciebie programu s± rozprowadzane w innym rodzaju archiwum (na przyk³ad pliki
koñcz±ce siê na ".Z" lub ".zip"), to wypakuj je przy pomocy odpowiedniego
narzêdzia. Gdy nie jeste¶ pewien jak zrobiæ to poprawnie, to zapytaj na li¶cie
debian-mentors (wskazówka: wydaj polecenie `file archiwum.rozszerzenie`).

<p>Dla przyk³adu, u¿ywam programu o nazwie `gentoo' - menad¿era plików pod
systemem X11, który wykorzystuje bibliotekê GTK+. Zwróæ uwagê, ¿e program ten
jest ju¿ zapakowany i znacznie siê zmieni³ od czasu, gdy ten by³ pisany tekst.

<p>W swoim katalogu domowym stwórz podkatalog o nazwie 'debian', 'deb' lub
jakkolwiek uwa¿asz za w³a¶ciwe (na przyk³ad po prostu katalog ~/gentoo/ by³by
w tym przypadku dobrym rozwi±zaniem). Umie¶æ w nim pobrane archiwum i
rozkompresuj je (za pomoc± komendy `tar xzf gentoo-0.9.12.tar.gz`). Upewnij
siê, ¿e nie ma ¿adnych b³êdów, nawet jakich¶ nieistotnych, poniewa¿
najprawdopodobniej pojawi± siê problemy w czasie rozpakowywania w systemach
innych ludzi, których narzêdzia do wypakowywania mog±, ale nie musz± ignorowaæ
takich nieprawid³owo¶ci.

<p>Teraz w katalogu tym powiniene¶ mieæ inny podkatalog o nazwie
`gentoo-0.9.12'. Wejd¼ do niego i <strong>dok³adnie</strong> przeczytaj
dostarczon± dokumentacjê. Zwykle powinny tam byæ pliki o nazwach README*,
INSTALL*, *.lsm lub *.html. Odszukaj w dokumentacji instrukcji jak poprawnie
skompilowaæ i zainstalowaæ program (najprawdopodobniej bêd± one zak³adaæ, ¿e
chcesz zainstalowaæ program do katalogu /usr/local/bin; choæ nie bêdziesz tego
robiæ, wiêcej informacji na ten temat znajdziesz w sekcji <ref id="destdir">).

<p>Proces instalacji ró¿ni siê w zale¿no¶ci od programu, ale wiele nowoczesnych
programów jest dostarczanych ze skryptem `configure', który konfiguruje ¼ród³a
pod Twoim systemem i sprawdza czy spe³niaj± one warunki niezbêdne do poprawnej
kompilacji. Po zakoñczeniu konfiguracji (wykonywanej za pomoc± polecenia
`./configure`), programy s± na ogó³ kompilowane przy u¿yciu komendy `make`.
Niektóre z nich wspieraj± tak¿e komendê `make check`, która uruchamia precedurê
samosprawdzaj±c±. Instalacja w katalogu przeznaczenia nastêpuje zwykle po
wydaniu polecenia `make install`.

<p>Teraz spróbuj skompilowaæ i uruchomiæ program, aby upewniæ siê czy dzia³a on
prawid³owo i nic siê nie psuje w czasie instalacji lub wykonywania.

<p>Mo¿esz te¿ zazwyczaj u¿yæ polecenia `make uninstall`, aby usun±æ wszystkie
zainstalowane pliki i `make clean` (lub lepiej `make distclean`), aby
posprz±taæ po zbudowanym katalogu.

<sect id="namever">Przed uruchomieniem `dh_make'

<p>Powiniene¶ rozpocz±æ pakowanie z zupe³nie wyczyszczonym (ang. pristine -
pierwotnym) katalogiem ¼ród³owym, ewentualnie ze ¶wie¿o rozpakowanymi ¼ród³ami.

<p>Aby prawid³owo zbudowaæ pakiet, musisz tak zmieniæ nazwê oryginalnego
programu, ¿eby wystêpowa³y w niej tylko ma³e litery (o ile wystêpuj± tam
jakie¶ wielkie litery). Powiniene¶ tak¿e przenie¶æ katalog ze ¼ród³ami do
katalogu &lt;nazwa_pakietu&gt;-&lt;wersja&gt;.

<p>Je¶li nazwa programu sk³ada siê z wiêcej ni¿ jednego wyrazu, to obetnij j±
do jednego wyrazu albo utwórz skrót, na przyk³ad pakiet z programem "John's
little editor for X" powinien siê nazywaæ johnledx, jle4x lub tak jak
zdecydujesz. Pamiêtaj jednak, aby jego d³ugo¶æ nie przekracza³a jakiej¶
rozs±dnej warto¶ci, dla przyk³adu 20 znaków.

<p>Sprawd¼ tak¿e dok³adnie wersjê programu (bêdzie ona w³±czona do nazwy
pakietu). Je¶li do oznaczenia jego wersji autor nie u¿y³ konwencji X.Y.Z,
ale, dla przyk³adu, pos³u¿y³ siê dat±, to Ty równie¿ mo¿esz jej u¿yæ do
okre¶lenia wersji pakietu (poprzed¼ j± ci±giem "0.0.", na wypadek gdyby autor
programu zdecydowa³ siê kiedy¶ wydaæ wersjê o mi³o brzmi±cym numerze 1.0).
Zatem, je¶li dat± wydania danej wersji programu by³o 19 grudnia 1998 r., to
powiniene¶ oznaczyæ jego wersjê jako 0.0.19981219. Niektóre programy nie s±
jednak w ¿aden sposób numerowane. W takich przypadkach powiniene¶ skontaktowaæ
siê z nieoficjalnym opiekunem, aby dowiedzieæ siê czy u¿ywa on jakiej¶ innej
metody do oznaczania kolejnych poprawek programu.

<sect id="dh_make">Uruchamianie `dh_make'

<p>Upewnij siê, ¿e jeste¶ w katalogu ze ¼ród³ami programu i wydaj nastêpuj±c±
komendê:

<p><example>
dh_make -e twój_adres@e-mail -f ../gentoo-0.9.12.tar.gz
</example>

<p>Oczywi¶cie musisz zast±piæ ci±g "twój_adres@e-mail" adresem Twojej skrzynki
pocztowej, gdy¿ zostanie on wpisany do pliku ze zmianami (`changelog') i w
innych plikach oraz zmieniæ nazwê pliku nazw± Twojego oryginalnego archiwum
¼ród³owego. Wiêcej szczegó³ów znajdziesz na stronie podrêcznika
<manref name="dh_make" section="1">.

<p>Bêdziesz musia³ te¿ wprowadziæ kilka dodatkowych informacji. Zostaniesz
poproszony o podanie typu archiwum jakie tworzysz. Gentoo to pojedynczy pakiet
binarny - tworzy on tylko jeden plik binarny, a zatem jeden plik .deb. W takim
wypadku zaznaczamy pierwsz± opcjê za pomoc± klawisza `s'. Nastêpnie sprawdzamy
informacje na ekranie i je¶li siê wszystko zgadza, to potwierdzamy je
naciskaj±c &lt;enter&gt;. Poniewa¿ jeste¶ jeszcze nowym opiekunem, to z
powodów, które wcze¶niej wyja¶ni³em, odradzam Ci tworzenie pakietów z wieloma
pakietami binarnymi lub bibliotekami. Budowanie ich nie jest wcale takie
trudne, ale wymaga trochê wiêkszej wiedzy, zatem nie bêdziemy tutaj
wszystkiego opisywaæ.

<p>Proszê zauwa¿yæ, ¿e powinno siê uruchomiæ dh_make <strong>tylko jeden
raz</strong> i nie zachowa siê on poprawnie, gdy uruchomisz go ponownie w tym
samym, ju¿ "zdebianizowanym" katalogu. Oznacza to równie¿, ¿e bêdziesz musia³
u¿yæ innej metody, aby zrealizowaæ w przysz³o¶ci now± poprawkê lub now± wersjê
pakietu. Wiêcej informacji na ten temat znajdziesz pó¼niej w sekcji
<ref id="update">.

<chapt id="modify">Modyfikacja ¼ród³a

<p>Normalnie, programy instaluj± siê same w podkatalogach katalogu /usr/local.
Pakiety Debiana nie mog± jednak u¿ywaæ tego katalogu, gdy¿ jest zarezerwowany
do prywatnego u¿ycia przez administratora (lub u¿ytkownika) systemu. Oznacza
to, ¿e musisz siê przyjrzeæ jak budowany jest Twój program, zwykle za pomoc±
pliku Makefile. Jest to skrypt programu <manref name="make" section="1">
u¿ywany do automatycznego budowania programu. Wiêcej szczegó³ów na temat
plików Makefile znajdziesz w sekcji <ref id="rules">.

<p>Zwróæ te¿ uwagê na to czy Twój program u¿ywa GNU 
<manref name="automake" section="1"> i/lub <manref name="autoconf"
section="1">. Oznacza to, ¿e ¼ród³a programu zawieraj± plik Makefile.am i/lub
Makefile.in i ¿e to je bêdziesz musia³ wtedy modyfikowaæ. Dzieje siê tak,
poniewa¿ ka¿de wywo³anie programu automake powoduje ponowne utworzenie pliku
Makefile.in z informacjami wygenerowanymi z pliku Makefile.am. Tak¿e ka¿de
wywo³anie skryptu ./configure zrobi to samo z plikiem Makefile, a dane bêd±
pochodziæ z pliku Makefile.in. Edycja plików Makefile.am wymaga pewnej wiedzy
na temat programu automake, mo¿esz o nim poczytaæ za pomoc± komendy `info
automake'. Edytowanie plików Makefile.in odbywa siê niemal tak samo jak w
przypadku plików Makefile, po prostu zwracasz uwagê na zmienne, tzn.
wszystkie ³añcuchy otoczone przez znaki `@', dla przyk³adu zmienna @CFLAGS@
lub @LN_S@ bêdzie zastêpowana przez odpowiedni± warto¶ci± przy ka¿dym
wywo³aniu skryptu ./configure.

<p>Zauwa¿ równie¿, ¿e nie ma tu wystarczaj±cego miejsca, aby opisaæ
<em>wszystkie</em> szczegó³y na temat poprawiania zewnêtrznych ¼róde³.
Przedstawiamy tu jedynie kilka problemów, na które ludzie czêsto siê natykaj±.

<sect id="destdir">Instalacja w podkatalogu

<p>Wiekszo¶æ programów posiada swój w³asny sposób instalowania siê w
istniej±cej strukturze katalogów Twojego systemu. ¦cie¿ki do ich plików
binarnych trafiaj± do katalogów w Twojej zmiennej ¶rodowiskowej $PATH, za¶
dokumentacja do programu i strony podrêcznika s± umieszczane w powszechnie
stosowanych miejscach. Musisz upewniæ siê, ¿e robi± to one poprawnie i
sprawiæ, ¿eby instalowa³y siê w tymczasowym podkatalogu, który zostanie
utworzony w Twoim katalogu debian/. Zwykle jest on nazywany
<tt>debian/tmp</tt> i to z niego narzêdzia opiekuna zbuduj± dzia³aj±cy pakiet
.deb. Wszystko co zawiera ten katalog zostanie zainstalowane w systemie
u¿ytkownika, gdy zdecyduje siê on zainstalowaæ Twoj± paczkê, z t± tylko
ró¿nic±, ¿e dpkg zainstaluje pliki wzglêdem katalogu g³ównego systemu.

<p>W zasadzie musisz sprawiæ, ¿eby program zainstalowa³ siê w katalogu
debian/tmp. Powinien on tak¿e poprawnie siê zachowywaæ, gdy jest umieszczony
w katalogu administratora, tzn. gdy zosta³ zainstalowany z pakietu
.deb. Sprawa jest zupe³nie prosta, gdy programy u¿ywaj± narzêdzia GNU
autoconf, poniewa¿ dh_make zajmie siê tym i automatycznie ustawi odpowiednie
komendy. W takich przypadkach mo¿esz nawet omin±æ dalsze czytanie tej sekcji.
Z innymi programami bêdziesz mia³ wiêcej pracy i prawdopodobnie bêdziesz
musia³ przejrzeæ i wyedytowaæ pliki Makefile.

<p>Poni¿ej znajduje siê odpowiednia czê¶æ pliku Makefile programu gentoo.

<p><example>
# Where to put binary on 'make install'?
BIN     = /usr/local/bin
# Where to put icons on 'make install'? Note: if you change this,
# gentoo will not find the icons as it starts up. You're going to
# have to alter gentoo's icon path (in the config window, "Paths"
# tab) to get it work.
ICONS   = /usr/local/lib/gentoo/
</example>

<p>Przed t± czê¶ci± powiniene¶ wstawiæ dwie nowe linie:

<p><example>
# Edited for Debian GNU/Linux.
DESTDIR =
</example>

gdy¿ wymaga tego proces budowania pakietu (wyja¶niê to pó¼niej w sekcji
<ref id="rules">).

<p>W pliku Makefile znajduje siê te¿ wzmianka o koñcowym po³o¿eniu binarnego
pliku. Po prostu zmieñ je w nastêpuj±cy sposób:

<p><example>
# Where to put binary on 'make install'?
BIN     = $(DESTDIR)/usr/X11R6/bin
</example>

<p>Zapytasz pewnie: dlaczego w³a¶nie w tym katalogu, a nie w jakim¶ innym?
Odpowied¼ jest prosta: poniewa¿ Debian ma zdefiniowanych kilka zasad, gdzie
maj± siê znajdowaæ zainstalowane programy. S± one okre¶lone w dokumencie
Filesystem Hierarchy Standard (zobacz do katalogu
/usr/share/doc/debian-policy/fhs/). Zasady te mówi±, ¿e powinni¶my instalowaæ
plik binarny w katalogu /usr/X11R6/bin, a nie w /usr/local/bin, za¶ stronê
podrêcznika (nie istnieje ona jeszcze, ale poniewa¿ prawie ka¿dy program
posiada tak± stronê, to stworzymy ja pó¼niej) w katalogu /usr/share/man/man1,
a nie w /usr/local/man/man1.

<p>Teraz mamy trochê trudniejsz± sytuacjê. Je¶li zgodnie z Polityk± Debiana
(Debian Policy) zmienisz liniê do postaci:

<p><example>
ICONS   = $(DESTDIR)/usr/share/gentoo/
</example>

<p>to bêdziesz musia³ edytowaæ niektóre ¼ród³a napisane w jêzyku C. Ale gdzie i
czego w³a¶ciwie szukaæ? Mo¿esz to odnale¼æ wydaj±c polecenie:

<p><example>
grep -n usr/local/lib *.[ch]
</example>

<p>(w ka¿dym podkatalogu, który zawiera pliki .c i .h). Program grep wypisze
dla Ciebie nazwy plików i numery linii w nich, gdy odnajdzie szukany wzorzec.
Teraz wyedytuj te pliki, w odnalezionych liniach zast±p ci±g "usr/local/lib"
ci±giem "usr/share" i to ju¿ wszystko! Po prostu zamieñ "usr/local/lib" na
Twoje po³o¿enie. Je¶li nie wiesz zbyt du¿o na temat programowania w jêzyku C,
to zrób to bardzo ostro¿nie, aby nie zepsuæ pozosta³ej czê¶ci kodu.

<p>Nastêpnie powiniene¶ odnale¼æ w pliku Makefile cel `install' (szukaj±c
linii rozpoczynaj±cej siê od ci±gu "install:") i zmieniæ nazwê wszystkich
odniesieñ do katalogów innych ni¿ te zdefiniowane na pocz±tku pliku Makefile.
Przed zmian±, cel `install' programu gentoo by³ nastêpuj±cy:

<p><example>
# ----------------------------------------- Installation

# You're going to have to be root to do this!
install:        gentoo
                install ./gentoo $(BIN)
                install icons $(ICONS)
                install gentoorc-example $(HOME)/.gentoorc
</example>

<p>Po wykonaniu zmian wygl±da on nastêpuj±co:

<p><example>
# ----------------------------------------- Installation

# You're going to have to be root to do this!
install:        gentoo-target
                install -d $(BIN) $(ICONS) $(DESTDIR)/etc
                install ./gentoo $(BIN)
                install -m644 icons/* $(ICONS)
                install -m644 gentoorc-example $(DESTDIR)/etc/gentoorc
                install -d $(DESTDIR)/usr/share/doc/gentoo/html
                cp -a docs/* $(DESTDIR)/usr/share/doc/gentoo/html
</example>

<p>Uwa¿ny czytelnik zauwa¿y, ¿e zmieni³em "gentoo" na "gentoo-target" w linii
rozpoczynaj±cej siê od ci±gu "install:". To jest tzw. naprawa b³êdu :-)

<p>Ilekroæ dokonasz zmian, które nie s± ¶ci¶le zwi±zane z pakietem Debiana,
upewnij siê, ¿e poinformowa³e¶ o nich zewnêtrznego opiekuna, aby móg³ on je
w³±czyæ do nastêpnej poprawki programu. Zauwa¿, ¿e nie musisz wysy³aæ mu
plików debian/*, ale tylko pozosta³e ³aty. Spróbuj te¿ byæ mi³y dla niego
nie tworz±c ¿adnych poprawek specyficznych dla Debiana, Linuksa lub nawet
Uniksa!

<sect id="difflibs">Nie zgadzaj±ce siê biblioteki

<p>Tutaj mamy pewien do¶æ powszechny problem: biblioteki czêsto ró¿ni± siê
pomiêdzy platformami, na których dzia³aj±. Dla przyk³adu, plik Makefile mo¿e
zawieraæ odwo³ania do biblioteki, której nie ma Debianie albo nawet w Linuksie.
W takim przypadku musimy zmieniæ j± na bibliotekê, która jest dostêpna pod
Debianem i s³u¿y tym samym celom. Najlepszym sposobem jest wykomentowanie tych
linii, poniewa¿ mog± one byæ inne dla kogo¶, kto próbuje kompilacji na innych
platformach. Stanowi± te¿ one pewne wskazówki w razie wyst±pienia jakich¶
b³êdów.

<p>Je¶li zatem w pliku Makefile (lub Makefile.in) Twojego programu istnieje
linia podobna do tej poni¿ej (i Twój program nie chce siê skompilowaæ):

<p><example>
LIBS = -lcurses -lco¶ -lco¶_innego
</example>

<p>to zmieñ j± w pokazany sposób i to powinno prawdopodobnie pomóc:

<p><example>
LIBS = -lncurses -lco¶ -lco¶_innego
#LIBS = -lcurses -lco¶ -lco¶_innego
</example>

<chapt id="dreq">Rzeczy wymagane w katalogu debian/

<p>W g³ównym katalogu Twojego programu (`gentoo-0.9.12') istnieje nowy
podkatalog, który nazywa siê `debian'. Zawiera on kilka plików, które bêdziemy
edytowaæ, aby dopasowaæ dzia³anie pakietu. Najwa¿niejszymi z nich s± pliki
`control', `changelog', `copyright' i 'rules', które s± wymagane w ka¿dym
pakiecie.

<sect id="control">Plik `control'

<p>Ten plik zawiera ró¿ne informacje, których programy dpkg i dselect u¿ywaj±
do zarz±dzania pakietem. Poni¿ej przedstawiono plik control stworzony dla nas
przez program dh_make.

<p><example>
1  Source: gentoo
2  Section: unknown
3  Priority: optional
4  Maintainer: Josip Rodin &lt;jrodin@jagor.srce.hr&gt;
5  Standards-Version: 3.0.1
6
7  Package: gentoo
8  Architecture: any
9  Depends: ${shlibs:Depends}
10 Description: &lt;insert up to 60 chars description&gt;
11  &lt;insert long description, indented with spaces&gt;
</example>

<p>(Numery linii zosta³y dodane przeze mnie)

<p>Linie 1-5 zawieraj± informacje kontrolne dla pakietu ¼ród³owego. Linia nr 1
to nazwa pakietu ¼ród³owego.

<p>Linia nr 2 oznacza sekcjê dystrybucji, do której nale¿y pakiet. Byæ mo¿e
zauwa¿y³e¶ ju¿, ¿e Debian jest podzielony na nastêpuj±ce sekcje: `main'
(zawiera wolne oprogramowanie), `non-free' (zawiera oprogramowanie, które nie
jest wolne) i `contrib' (zawiera wolne oprogramowanie, które wymaga
oprogramowania, które nie jest wolne). Dodatkowo ka¿da z sekcji dzieli siê na
logiczne podsekcje, które w skrócie mówi±, do czego s³u¿y dany pakiet. Mamy
zatem sekcjê `admin', która zawiera programy przeznaczone tylko dla
administratora systemu, `base' z podstawowymi narzêdziami, `devel' z
narzêdziami dla programistów, `doc' z dokumentacj±, `libs' z bibliotekami,
`mail' z programami do wysy³ania/odbierania poczty elektronicznej i z demonami
pocztowymi, `net' z aplikacjami sieciowymi i demonami us³ug sieciowych, `x11' z
programami dla systemu X11 i wiele innych sekcji.

<p>Zmieñmy j± zatem na "x11".

<p>Linia nr 3 opisuje jak wa¿ne jest to, aby u¿ytkownik zainstalowa³ dany
pakiet. Sekcja (Section) i priorytet (Priority) s± w tej chwili u¿ywane jedynie
przez program dselect, który u¿ywa ich do sortowania pakietów i wyboru
domy¶lnego zestawu pakietów do zainstalowania. Mog± byæ one (i
najprawdopodobniej bêd±) nadpisywane przez opiekunów archiwum FTP. Sprawd¼ w
podrêczniku Polityki Debiana, w jaki sposób mo¿na ustawiaæ te pola.

<p>Poniewa¿ jest to pakiet o normalnym priorytecie, to pozostawiamy tam
warto¶æ "optional".

<p>Linia nr 4 zawiera imiê i nazwisko oraz adres e-mail opiekuna pakietu.

<p>Linia nr 5 zawiera wersjê standardów polityki Debiana, któr± dany pakiet
spe³nia (dwie g³ówne wersje zainstalowanego pakietu debian-policy).

<p>Je¶li do zbudowania Twojego pakietu jest potrzebny jaki¶ niestandardowy
kompilator lub inne narzêdzie, to powiniene¶ dodaæ tutaj liniê
`Build-Depends' i wymieniæ w niej wymagane pakiety. Wiêcej informacji na ten
temat znajdziesz w podrêczniku Packaging Manual (sekcja 8.7) i w dokumentacji
do pakietu `build-essential'.

<p>Linia nr 7 to nazwa pakietu binarnego.

<p>Linia nr 8 opisuje architekturê procesora, dla którego mo¿e byæ
skompilowany pakiet. Mo¿emy pozostawiæ w niej "any", gdy¿ pakiet
<manref name="dpkg-gencontrol" section="1"> sam wstawi w tym miejscu
odpowiedni± warto¶æ dla ka¿dego typu maszyny, na której kompilowany jest
pakiet (w dokumencie Developer's Reference wyja¶niono czym jest adaptacja
(ang. porting) pakietu). Je¶li Twój pakiet jest niezale¿ny od architektury
procesora (dla przyk³adu skrypt pow³oki lub Perla, albo jaki¶ dokument), to
wpisz tutaj "all" i poczytaj pó¼niej w sekcji <ref id="rules"> na temat
u¿ywania regu³y `binary-indep' zamiast `binary-arch' do budowania pakietu.

<p>Linia nr 9 pokazuje jedn± z najpotê¿niejszych cech systemu pakietów
Debiana. Pakiety mog± znajdowaæ siê w ró¿nych relacjach z innymi pakietami.
Oprócz pola `Depends:' mog± te¿ wystêpowaæ pola opisuj±ce inne zwi±zki:
`Recommends:', `Suggests:', `Pre-Depends:', `Conflicts:', `Provides:' i
`Replaces:'.

<p>Narzêdzia do zarz±dzania pakietami takie, jak dpkg, dselect czy APT (i
nak³adki na niego) zwykle zachowuj± siê w ten sam sposób w czasie ustalania
stosunków miêdzy pakietami. Je¶li tak nie jest, to zostanie to wkrótce
wyja¶nione (wiêcej informacji znajdziesz na stronach podrêcznika
<manref name="dpkg" section="8">, <manref name="dselect" section="8">,
<manref name="apt" section="8">, <manref name="console-apt" section="8">,
<manref name="gnome-apt" section="8">).

<p>Pola te oznaczaj±:

<p><list>
<item>`Depends:' (Wymaga)
<p>Pakiet nie zostanie zainstalowany o ile pakiety, których on wymaga nie
s± ju¿ zainstalowane w systemie. U¿yj tego pola, gdy Twój program absolutnie
nie mo¿e byæ uruchomiony (lub spowoduje powa¿ne szkody), je¶li jaki¶
szczególny pakiet nie jest jeszcze obecny w systemie.</item>

<item>`Recommends:' (Zaleca)
<p>Dselect nie zainstaluje Twojego pakietu o ile pakiety, które on zaleca nie
s± ju¿ zainstalowane w systemie. Jednak dpkg i APT powinny Ci na to pozwoliæ.
U¿ywaj tego pola dla pakietów, które nie s± niezbêdne, ale s± zwykle u¿ywane
razem z Twoim programem.</item>

<item>`Suggests:' (Poleca)
<p>Gdy u¿ytkownik instaluje Twój program, program dselect zachêci go tak¿e do
zainstalowania pakietów, które on poleca. Dpkg i APT nie powinny siê o nie
troszczyæ. U¿yj tego pola dla pakietów, które bêd± dobrze dzia³aæ z Twoim
programem, ale nie s± dla niego niezbêdne.</item>

<item>`Pre-Depends:' (Przed-Wymaga)
<p>Jest to silniejsza relacja ni¿ `Depends:'. Pakiet nie zostanie zainstalowany
o ile pakiety, od których jest on przed-zale¿ny nie s± zainstalowane w
systemie <em>i poprawnie skonfigurowane</em>. U¿ywaj tego pola
<strong>bardzo</strong> oszczêdnie i jedynie po przedyskutowaniu tego na
li¶cie debian-devel. Czytaj: nie u¿ywaj go nigdy. :-)</item>

<item>`Conflicts:' (PowodujeKonflikt)
<p>Pakiet nie zostanie zainstalowany dopóki wszystkie pakiety, które powoduj±
konflikt nie zostan± wcze¶niej usuniête z systemu. U¿yj tego pola, gdy Twój
program absolutnie nie mo¿e byæ uruchomiony (lub spowoduje powa¿ne szkody),
je¶li jaki¶ szczególny pakiet jest wci±¿ obecny w systemie.</item>

<item>`Provides:' (Dostarcza)
<p>Dla niektórych rodzajów pakietów zosta³o zdefiniowanych wiele
alternatywnych nazw wirtualnych. Pe³n± listê tych pakietów znajdziesz w pliku
/usr/share/doc/debian-policy/virtual-package-names-list.text.gz. U¿yj tego
pola, je¶li Twój program dostarcza funkcjonalno¶ci istniej±cego ju¿ pakietu
wirtualnego.</item>

<item>`Replaces:' (Zastêpuje)
<p>U¿yj tego pola, gdy Twój program zastêpuje pliki jakiego¶ innego pakietu
lub zupe³nie zastêpuje jaki¶ pakiet (u¿ywane ³±cznie z polem `Conflicts:').
Pliki z wymienionych pakietów zostan± usuniête przed zainstalowaniem Twoich.
</item>
</list>

<p>Wszystkie te pola maj± jednolit± sk³adniê. Jest to lista nazw pakietów
oddzielonych za pomoc± przecinka. Nazwy pakietów mog± równie¿ byæ listami
alternatywnych nazw pakietów odseparowanych przy pomocy symbolu <tt>|</tt>
(symbol potoku). Pola mog± ograniczaæ swoje zastosowanie tylko do szczególnych
wersji ka¿dego wymienionego pakietu. Wersje te s± umieszczone w nawiasach po
ka¿dej nazwie pakietu i powinny zawieraæ relacje miêdzy numerami wersji
pakietów. Dozwolonymi relacjami s±: <tt>&lt;&lt;</tt>, <tt>&lt;=</tt>,
<tt>=</tt>, <tt>&gt;=</tt> i <tt>&gt;&gt;</tt> i odpowiednio oznaczaj±:
o wiele wcze¶niejszy, wcze¶niejszy lub równy, dok³adnie równy, pó¼niejszy lub
równy i o wiele pó¼niejszy. 

<p>Ostatni± cech±, o której powiniene¶ wiedzieæ jest $(shlibs:Depends). Bêdzie
ona automatycznie wygenerowana przez program <manref name="dh_shlibdeps"
section="1"> i wype³niona przez program <manref name="dh_gencontrol"
section="1"> nazwami tych wspó³dzielonych bibliotek, których u¿ywa Twój
program. Bêd± nimi biblioteki libc6 lub xlib6g, których nie musisz okre¶laæ
samodzielnie. Skoro ju¿ wszystko zosta³o powiedziane, to mo¿emy pozostawiæ
linie nr 9 w takiej postaci jak teraz i wreszcie przej¶æ do omówienia
nastêpnej linii.

<p>W linii nr 10 umie¶cimy listê polecanych pakietów. W naszym przypadku
bêdzie zawieraæ tylko pakiet `file', gdy¿ program gentoo mo¿e u¿ywaæ
niektórych funkcjonalno¶ci dostarczanych przez ten program/pakiet.

<p>Linia nr 11 zawiera krótki opis pakietu. Ekrany wiêkszo¶ci ludzi maj±
szeroko¶æ 80 kolumn, wiêc nie powinna ona zawieraæ wiêcej ni¿ 60 znaków. Ja
wpisa³em w niej "A fully GUI configurable GTK+ file manager".

<p>Od linii nr 12 zaczyna siê d³u¿szy opis pakietu. Powinien to byæ paragraf
dostarczaj±cy wiêcej szczegó³ów na temat pakietu. Kolumna nr 1 ka¿dej linii
d³ugiego opisu powinna byæ pusta. Poniewa¿ opis ten nie mo¿e zawieraæ pustych
linii, to wszêdzie tam gdzie chcia³by¶ je wstawiæ musisz umie¶ciæ znak `.'
(kropka) w kolumnie nr 2. Tak¿e na koñcu d³ugiego opisu nie mo¿e siê pojawiæ
wiêcej ni¿ jedna pusta linia.

<p>A oto uaktualniony plik `control':

<p><example>
1  Source: gentoo
2  Section: x11
3  Priority: optional
4  Maintainer: Josip Rodin &lt;jrodin@jagor.srce.hr&gt;
5  Standards-Version: 3.0.1
6
7  Package: gentoo
8  Architecture: any
9  Depends: ${shlibs:Depends}
10 Suggests: file
11 Description: A fully GUI configurable GTK+ file manager
12  gentoo is a file manager for Linux written from scratch in pure C. It
13  uses the GTK+ toolkit for all of its interface needs. gentoo provides
14  100% GUI configurability; no need to edit config files by hand and re-
15  start the program. gentoo supports identifying the type of various
16  files (using extension, regular expressions, or the 'file' command),
17  and can display files of different types with different colors and icons.
18  .
19  gentoo borrows some of its look and feel from the classic Amiga file
20  manager "Directory OPUS" (written by Jonathan Potter).
</example>

<p>(Numery linii zosta³y dodane przeze mnie)

<sect id="copyright">Plik `copyright'

<p>Plik ten zawiera informacje o zewnêtrznych zasobach pakietu, prawach
autorskich i licencji. Jego format nie jest narzucony przez Politykê Debiana,
ale jego zawarto¶æ ju¿ tak (zobacz sekcjê 6.5). Program dh_make stworzy³ ju¿
taki domy¶lny plik, którego zawarto¶æ jest podobna do tej poni¿ej:

<p><example>
1  This package was debianized by Josip Rodin &lt;jrodin@jagor.srce.hr&gt; on
2  Wed, 11 Nov 1998 21:02:14 +0100.
3
4  It was downloaded from &lt;fill in ftp site&gt;
5
6  Upstream Author(s): &lt;put author(s) name and email here&gt;
7
8  Copyright:
9
10 &lt;Must follow here&gt;
</example>

<p>(Numery linii zosta³y dodane przeze mnie)

<p>Wa¿nymi rzeczami, które powiniene¶ dodaæ do tego pliku jest miejsce, z
którego pobra³e¶ pakiet ze ¼ród³ami oraz informacje o prawach autorskich i
licencji. Musisz do³±czyæ kompletn± tre¶æ licencji, chyba ¿e jest to jedna z
popularnych licencji wolnego oprogramowania, takich jak GNU GPL i LGPL, BSD
lub licencja Artystyczna. W takiej sytuacji mo¿esz po prostu odes³aæ do
odpowiedniego pliku w katalogu /usr/share/common-licenses/, który wystêpuje w
ka¿dym systemie Debiana. Poniewa¿ gentoo jest rozprowadzany na licencji GNU
GPL (General Public License), wiêc mo¿emy dopisaæ do pliku nastêpuj±ce linie:

<p><example>
1  This package was debianized by Josip Rodin &lt;jrodin@jagor.srce.hr&gt; on
2  Wed, 11 Nov 1998 21:02:14 +0100.
3
4  It was downloaded from: ftp://ftp.obsession.se/gentoo/
5
6  Upstream author: Emil Brink &lt;emil@obsession.se&gt;
7
8  This software is copyright (c) 1998-99 by Emil Brink, Obsession
9  Development.
10
11 You are free to distribute this software under the terms of
12 the GNU General Public License.
13 On Debian systems, the complete text of the GNU General Public
14 License can be found in /usr/share/common-licenses/GPL file.
</example>

<p>(Numery linii zosta³y dodane przeze mnie)

<sect id="changelog">Plik `changelog'

<p>Obecno¶æ tego pliku jest wymagana. Jego specjalny format opisano w
dokumencie Packaging Manual (sekcja 3.2.3). Format ten jest wykorzystywany
przez dpkg i inne programy do uzyskiwania informacji o numerze wersji,
poprawce, dystrybucji i pilno¶ci Twojego pakietu.

<p>Jest on tak¿e wa¿ny dla Ciebie, poniewa¿ dobrze jest mieæ udokumentowane
wszystkie zmiany, których dokona³e¶. Pomaga to ludziom pobieraj±cym Twój pakiet
zorientowaæ siê czy nie zrobi³e¶ z pakietem czego¶, o czym powinni oni
natychmiast wiedzieæ. Zmiany te zostan± zapisane do pliku
`/usr/share/doc/gentoo/changelog.Debian.gz' w pakiecie binarnym.

<p>Dh_make równie¿ tworzy taki plik, którego zawarto¶æ wygl±da mniej wiêcej
tak:

<p><example>
1  gentoo (0.9.12-1) unstable; urgency=low
2
3   * Initial Release.
4
5  -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt; Wed, 11 Nov 1998 21:02:14 +0100
6
7  Local variables:
8  mode: debian-changelog
9  End:
</example>

<p>(Numery linii zosta³y dodane przeze mnie)

<p>Linia nr 1 zawiera nazwê pakietu, jego wersjê, dystrybucjê i pilno¶æ. Nazwa
musi siê zgadzaæ z nazw± pakietu ¼ród³owego, dystrybucja powinna mieæ warto¶æ
albo `unstable', albo `experimental' (w tym momencie), za¶ pilno¶ci nie
powiniene¶ zmieniaæ na warto¶æ wiêksz± ni¿ `low' (niska). :-)

<p>Linie 3-5 to dziennik, w którym dokumentujesz zmiany dokonane w poprawce
pakietu (ale nie zmiany zewnêtrzne - do tego celu s³u¿y specjalny plik
stworzony przez zewnêtrznych autorów, który bêdzie zainstalowany jako
/usr/share/doc/gentoo/changelog.gz). Nowe linie musz± byæ umieszczone przed
znajduj±c± siê na górze lini±, która rozpoczyna siê od gwiazdki (`*'). Mo¿esz
to zrobiæ za pomoc± takich narzêdzi, jak <manref name="dch" section="1">,
<manref name="emacs" section="1"> (linie 7-9 zawieraj± w³a¶nie informacjê o
trybie dla edytora Emacs) lub jakieg o¶ innego edytora tekstu. Zakoñcz ten
plik podobnie jak poni¿ej:

<p><example>
1  gentoo (0.9.12-1) unstable; urgency=low
2
3   * Initial Release.
4   * This is my first Debian package.
5   * Adjusted the Makefile to fix $DESTDIR problems.
6
7  -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt; Wed, 11 Nov 1998 21:02:14 +0100
8
9  Local variables:
10  mode: debian-changelog
11 End:
</example>

<p>(Numery linii zosta³y dodane przeze mnie)

<p>Gdy wydajesz now± poprawkê pakietu, to musisz zwiêkszyæ o jeden jego numer
wersji. Mo¿esz to zrobiæ po prostu za pomoc± polecenia `dch -i` lub jeszcze
lepiej przy pomocy `dch -v &lt;wersja&gt;-&lt;poprawka&gt;`. Nastêpnie wstaw
komentarze u¿ywaj±c swojego ulubionego edytora. Rada: w jaki sposób ³atwo
pobraæ datê w wymaganym formacie? U¿yj w tym celu komendy `822-date` lub
`date -R`.

<p>Informacja o nowej wersji pakietu jest umieszczana na górze pliku
`changelog'. Oto jak powinien pó¼niej wygl±daæ ten plik:

<p><example>
1  gentoo (0.9.12-2) unstable; urgency=low
2
3   * Fixed a glitch in the menu file.
4
5  -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt; Wed, 11 Nov 1998 22:15:39 +0100
6
7  gentoo (0.9.12-1) unstable; urgency=low
8
9   * Initial Release.
10  * This is my first Debian package.
11  * Adjusted the Makefile to fix $DESTDIR problems.
12
13 -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt; Wed, 11 Nov 1998 21:02:14 +0100
14
15 Local variables:
16 mode: debian-changelog
17 End:
</example>

<p>(Numery linii zosta³y dodane przeze mnie)

<p>Wiêcej o nowej wersji/poprawce pakietu przeczytasz potem w sekcji
<ref id="update">.

<sect id="rules">Plik `rules'

<p>Teraz musimy siê przyjrzeæ regu³om, których program
<manref name="dpkg-buildpackage" section="1"> u¿yje do stworzenia
pakietu. Plikiem tym jest obecnie Makefile przetwarzany za pomoc± komendy
`make -f`, ale inny ni¿ ten do³±czony do zewnêtrznego ¼ród³a.

<p>Ka¿dy plik `rules', tak samo jak plik Makefile, zawiera ró¿ne regu³y,
które wyszczególniaj± jak postêpowaæ ze ¼ród³em. Ka¿da regu³a z kolei zawiera
cele (targets), czyli nazwy nazwy plików b±d¼ akcji, które powinny byæ
stworzone lub wykonane (na przyk³ad `build:' lub `install:'). Regu³y, które
chcesz wykonaæ s± wywo³ywane z linii komend jako argumenty poleceñ (dla
przyk³adu `./debian/rules build` albo `make -f rules install`). Po nazwie
celu mo¿esz wymieniæ zale¿no¶æ, program lub plik, który od tej regu³y zale¿y.
W taki sposób mo¿na wymieniæ wiele komend (rozpoczynaj±c je akapitem w postaci
znaku &lt;tab&gt;!), a po ostatniej nale¿y umie¶ciæ pust± liniê. Po niej
rozpoczyna siê ju¿ inna regu³a. Kilka kolejnych pustych linii lub linie
rozpoczynaj±ce siê od znaku `#' (hash) s± traktowane jako komentarz i
ignorowane.

<p>Pewnie jeste¶ teraz nieco zagubiony, ale wszystko stanie siê jasne w czasie
przegl±dania pliku `rules', który domy¶lnie zostanie stworzony przez program
dh_make. Powiniene¶ te¿ przeczytaæ o programie `make' (poprzez `info make'),
aby uzyskaæ wiêcej informacji na jego temat. 

<p>Wa¿ne jest, aby pamiêtaæ, ¿e pliki `rules' stworzone przez dh_make s± po
prosty tylko propozycjami. Dzia³aj± one z prostymi pakietami, ale w przypadku
bardziej skomplikowanych nie obawiaj siê ich modyfikowaæ. Dodawaj to, co jest
potrzebne i usuwaj to, co jest zbêdne. Jedyn± rzecz±, której nie mo¿esz
zmieniaæ to nazwy regu³, gdy¿ u¿ywaj± ich wszystkie narzêdzia, zgodnie z
wytycznymi zawartymi w dokumencie Packaging Manual.

<p><example>
1  #!/usr/bin/make -f
2  # Made with the aid of dh_make, by Craig Small
3  # Sample debian/rules that uses debhelper. GNU copyright 1997 by Joey Hess.
4  # Some lines taken from debmake, by Christoph Lameter.
5
6  # Uncomment this to turn on verbose mode.
7  #export DH_VERBOSE=1
8
9  # This is the debhelper compatibility version to use.
10 export DH_COMPAT=1
11
12 build: build-stamp
13 build-stamp:
14	dh_testdir
15
16	# Add here commands to compile the package.
17	$(MAKE)
18
19	touch build-stamp
20
21 clean:
22	dh_testdir
23	dh_testroot
24	rm -f build-stamp
25
26	# Add here commands to clean up after the build process.
27	-$(MAKE) clean
28
29	dh_clean
30
31 install: build-stamp
32	dh_testdir
33	dh_testroot
34	dh_clean -k
35	dh_installdirs
36
37	# Add here commands to install the package into debian/tmp.
38	$(MAKE) install DESTDIR=`pwd`/debian/tmp
39
40 # Build architecture-independent files here.
41 binary-indep: build install
42 # We have nothing to do by default.
43
44 # Build architecture-dependent files here.
45 binary-arch: build install
46 #	dh_testversion
47	dh_testdir
48	dh_testroot
49 #	dh_installdebconf
50	dh_installdocs
51	dh_installexamples
52	dh_installmenu
53 #	dh_installemacsen
54 #	dh_installpam
55 #	dh_installinit
56	dh_installcron
57	dh_installmanpages
58	dh_installinfo
59 #	dh_undocumented
60	dh_installchangelogs
61	dh_link
62	dh_strip
63	dh_compress
64	dh_fixperms
65	# You may want to make some executables suid here.
66	dh_suidregister
67 #	dh_makeshlibs
68	dh_installdeb
69 #	dh_perl
70	dh_shlibdeps
71	dh_gencontrol
72	dh_md5sums
73	dh_builddeb
74
75 binary: binary-indep binary-arch
76 .PHONY: build clean binary-indep binary-arch binary install
</example>

<p>(Numery linii zosta³y dodane przeze mnie)

<p>Z liniami takimi jak linia nr 1 prawdopodobnie spotka³e¶ siê ju¿ w
skryptach pow³oki albo Perla. Mówi ona systemowi operacyjnemu, ¿e plik ten ma
byæ przetwarzany przez program `/usr/bin/make'.

<p>Linie 12-19 opisuj± regu³ê `build' (i jej dziecko `build-stamp'), która
uruchamia plik Makefile kompiluj±cy program.

<p>Regu³a `clean' zawarta pomiêdzy liniami 21-29 czy¶ci wszystkie niepotrzebne
pliki binarne i automatycznie wygenerowane rzeczy, które zosta³y pozostawione
przez budowany pakiet. Regu³a ta musi dzia³aæ przez ca³y czas (nawet, gdy
drzewo ze ¼ród³ami <em>jest</em> wyczyszczone!), zatem proszê u¿ywaæ opcji
wymuszaj±cej (na przyk³ad dla komeny rm jest ni± opcja `-f') lub ignoruj±cej
zwracan± warto¶æ (opcja `-' przed nazw± komendy).

<p>Regu³a `install', która odpowiada za proces instalacji, rozpoczyna siê w
linii nr 31. Uruchamia ona po prostu regu³ê `install' z pliku Makefile
programu i instaluje go w katalogu `pwd`/debian/tmp. Oto dlaczego okre¶lili¶my
zmienn± $(DESTDIR) jako katalog bazowy do instalacji w pliku Makefile programu
gentoo.

<p>Jak t³umaczy komentarz, zasada `binary-indep', która znajduje siê w linii
nr 41, jest u¿ywana do budowania pakietów niezale¿nych od architektury
precesora. Je¶li nie mamy takiego pakietu, to ¿adna akcja nie zostanie
wykonana. Gdy okre¶li³e¶ architekturê Twojego pakietu jako
`Architecture: all', to bêdziesz musia³ umie¶ciæ w tej regule wszystkie
komendy do budowania pakietu i pozostawiæ pust± nastêpn± regu³ê
(`binary-arch').

<p>Nastêpn± regu³± jest `binary-arch' znajduj±ca siê pomiêdzy liniami 45-73.
Uruchamia ona kilka ma³ych programów narzêdziowych z pakietu debhelper, które
wykonuj± ró¿ne operacje z plikami Twojego pakietu, aby uczyniæ go zgodnym z
Polityk± Debiana.

<p>Nazwy wystêpuj±ce po "dh_" dobrze opisuj± to, co dane narzêdzie robi. Mimo,
¿e do¶æ dobrze same siê obja¶niaj±, to poni¿ej zamieszczono dodatkowe
wyt³umaczenia:

<list>
<item><manref name="dh_testdir" section="1"> sprawdza czy jeste¶ we w³a¶ciwym
      katalogu (tzn. na samej górze katalogu ze ¼ród³ami),

<item><manref name="dh_testroot" section="1"> sprawdza czy masz uprawnienia
      administratora systemu, których wymagaj± cele `binary*' i `clean',

<item><manref name="dh_installmanpages" section="1"> kopiuje do pakietu
      wszystkie strony podrêcznika, które znajduj± siê w drzewie ¼róde³
      (uwaga, to jest DWIM),

<item><manref name="dh_strip" section="1"> usuwa z plików wykonywalnych i
      bibliotek nag³ówki s³u¿±ce do "odpluskwiania", aby uczyniæ je mniejszymi,

<item><manref name="dh_compress" section="1"> pakuje programem gzip strony
      podrêcznika i dokumentacjê wiêksz± ni¿ 4 kB,

<item><manref name="dh_installdeb" section="1"> kopiuje pliki zwi±zane z
      pakietem (na przyk³ad skrypty opiekuna) do katalogu debian/tmp/DEBIAN,

<item><manref name="dh_shlibdeps" section="1"> wylicza zale¿no¶ci bibliotek i
      plików wykonywalnych od bibliotek wspó³dzielonych,

<item><manref name="dh_gencontrol" section="1"> dodaje parê rzeczy do pliku
      `control' i instaluje go,

<item><manref name="dh_md5sums" section="1"> generuje sumy kontrolne MD5 dla
      ka¿dego pliku zawartego w pakiecie.
</list>

<p>Dok³adne informacje na temat dzia³ania ka¿dego skryptu dh_* i ich
parametrów wywo³ania znajdziesz na odpowiedniej stronie podrêcznika. Oprócz
wymienionych powy¿ej, istniej± równie¿ inne skrypty dh_*, które nie zosta³y tu
wspomniane. Je¶li potrzebujesz ich, to poczytaj dokumentacjê do pakietu
debhelper.

<p>W sekcji `binary-arch' powiniene¶ naprawdê wykomentowaæ linie z tymi
wszystkimi skryptami dh_*, których nie chcesz wywo³ywaæ. Dla pakietu gentoo
wykomentowa³em wywo³anie skryptów dh_testversion, emacsen, pam, init, cron,
manpages, info, undocumented, suidregister, makeshlibs i perl, gdy¿ gentoo ich
po prostu nie potrzebuje. W linii nr 60 musia³em dodaæ `FIXES', poniewa¿ jest
to nazwa zewnêtrznego pliku z dziennikiem zmian.

<p>Dwie ostatnie linie (i pozosta³e nie wyja¶nione tutaj) s± mniej lub
bardziej niezbêdne. Na ich temat mo¿esz poczytaæ na stronie podrêcznika do
programu make oraz w dokumencie Packaging Manual. W tym momencie nie musisz o
nich nic wiedzieæ.

<chapt id="dother">Inne pliki z katalogu debian/

<p>Jak zobaczysz, w katalogu debian/ znajduj± siê jeszcze inne ró¿ne pliki.
Wiêkszo¶æ z nich koñczy siê przyrostkiem `.ex', oznaczaj±cym, ¿e s± to
przyk³ady. Je¶li chcesz lub potrzebujesz u¿yæ której¶ ich funkcjonalno¶ci, to
sprawd¼ ich dzia³anie i zwi±zan± z nimi dokumentacjê (wskazówka: dokument
Policy Manual). Usuñ te¿ z ich nazwy przyrostek `.ex', zmodyfikuj je i plik
`rules', je¶li to konieczne. Niektóre z tych plików, najczê¶ciej u¿ywane, s±
wyja¶nione w poni¿szych sekcjach.

<sect id="readme">Plik `README.Debian'

<p>W tym pliku powinny byæ udokumentowane dodatkowe szczegó³y lub rozbie¿no¶ci
pomiêdzy oryginalnym pakietem i Twoj± "zdebianizowan±" wersj±. Dh_make tworzy
domy¶lny plik README.Debian, który jest podobny do tego poni¿ej:

<p><example>
gentoo for Debian
----------------------

&lt;possible notes regarding this package - if none, delete this file&gt;

Josip Rodin &lt;jrodin@jagor.srce.hr&gt;, Wed, 11 Nov 1998 21:02:14 +0100
</example>

<p>Poniewa¿ nie musimy niczego umieszczaæ w tym pliku, mo¿emy go skasowaæ.

<sect id="conffiles">Plik `conffiles'

<p>Jedn± z najbardziej irytuj±cych rzeczy zwi±zanych z oprogramowaniem jest
to, ¿e po po¶wiêceniu du¿ej ilo¶ci czasu i wysi³ku na dostosowanie programu,
jego aktualizacja wszystko "zadeptuje".
Debian rozwi±za³ ten problem przez "znakowanie" plików konfiguracyjnych.
Zatem, je¶li uaktualniasz program do nowszej wersji, to zostaniesz zapytany o
to czy chcesz zachowaæ swoj± star± konfiguracjê, czy nie. Aby to uzyskaæ,
musisz wprowadziæ pe³n± ¶cie¿kê do ka¿dego pliku konfiguracyjnego (zwykle s±
one umieszczone w katalogu /etc) do pliku nazwanego `conffiles'.

<p>Gentoo ma jeden plik konfiguracyjny /etc/gentoorc, zatem wprowadzimy
¶cie¿kê do niego do pliku `conffiles'. Je¶li Twój program nie posiada plików
konfiguracyjnych, to obecno¶æ pliku `conffiles' nie jest niezbêdna.

<sect id="dirs">Plik `dirs'

<p>Plik ten okre¶la katalogi, które s± potrzebne, ale których normalna
procedura instalacyjna (make install) nie tworzy.

<p>Domy¶lnie, plik ten wygl±da nastêpuj±co:

<p><example>
usr/bin
usr/sbin
</example>

<p>Zwróæ uwagê, i¿ przed nazwami katalogów nie wystêpuj± znaki uko¶ników
(`/'). Normalnie zmieniliby¶my j± w nastêpuj±cy sposób:

<p><example>
usr/X11R6/bin
usr/X11R6/man/man1
</example>

<p>ale poniewa¿ katalogi te s± tworzone przez plik Makefile, to nie
potrzebujemy pliku `dirs' i mo¿emy go usun±æ.

<sect id="manpage">Plik `manpage.1.ex'

<p>Takie pliki z rozszerzeniem `.ex' s± przyk³adami, w jaki sposób dodaæ ten
rodzaj wsparcia do pakietu. Aby u¿ywaæ którego¶ z nich, wyedytuj go i usuñ
rozszerzenie `.ex'. Je¶li jednak nie chcesz go u¿ywaæ, to skasuj go.

<p>Twój program powinien mieæ stronê podrêcznika. Je¶li jeszcze jej nie ma, to
mo¿esz u¿yæ tego pliku jako szablonu. Zobacz stronê podrêcznika na temat
<manref name="man" section="7">, aby dowiedzieæ siê wiêcej na temat tworzenia
stron podrêcznika. Upewnij siê te¿, ¿e zmieni³e¶ nazwê tego pliku na nazwê
Twojego programu i da³e¶ rozszerzenie zgodne z numerem sekcji, do której
powinna trafiæ strona. Poni¿ej zamieszczono listê wyja¶niaj±c± przeznaczenie
ka¿dej sekcji:

<p><example>
Sekcja  |          Opis           |          Uwagi
   1     Polecenia u¿ytkownika     Wykonywalne komendy lub skrypty.
   2     Wywo³ania systemowe       Funkcje dostarczane przez j±dro systemu.
   3     Wywo³ania biblioteczne    Funkcje z bibliotek systemowych.
   4     Pliki specjalne           Zwykle umieszczone w katalogu /dev.
   5     Formaty plików            Na przyk³ad format pliku /etc/passwd.
   6     Gry                       Lub inne rozrywkowe programy.
   7     Pakiety z makrami         Takie jak makra programu man.
   8     Administracja systemem    Programy zwykle uruchamiane tylko przez
                                   administratora systemu.
   9     Procedury j±dra           Niestandardowe wywo³ania i procedury
                                   wewnêtrzne.
</example>

<p>Zatem strona programu gentoo powinna siê nazywaæ `gentoo.1' lub
'gentoo.1x', gdy¿ jest to program dla systemu X11. Poniewa¿ w oryginalnych
¼ród³ach nie by³o strony podrêcznika `gentoo.1', to napisa³em j± sam,
u¿ywaj±c informacji znalezionych w przyk³adach i zewnêtrznej dokumentacji.

<sect id="menu">Plik `menu.ex'

<p>U¿ytkownicy systemu X Window zwykle pos³uguj± siê menad¿erami okien,
umo¿liwiaj±cymi uruchamianie programów poprzez rozwijalne menu, które mo¿na
dostosowywaæ do w³asnych potrzeb. Je¶li zainstalowali oni pakiet menu, to
zostanie dla nich stworzony zestaw menu s³u¿±cy do uruchamiania programów w
systemie. Nie jest to wymagane przez Politykê Debiana, ale u¿ytkownicy bêd±
pewnie za to wdziêczni. Mo¿emy dodaæ Gentoo do menu u¿ytkowników poprzez
edycjê pliku `menu'. Poni¿ej pokazano ten plik, domy¶lnie utworzony przez
dh_make:

<p><example>
?package(gentoo):needs=X11|text|vc|wm section=Apps/see-menu-manual\
  title="gentoo" command="/usr/bin/gentoo"
</example>

<p>Pierwsze pole (`needs') okre¶la, jakiego rodzaju interfejsu wymaga program
(na przyk³ad `text' lub `X11'). Nastêpne pole (`section') mówi w jakim menu i
podmenu powinien znale¼æ siê wpis z programem gentoo. Aktualn± listê sekcji
mo¿na znale¼æ na stronie /usr/share/doc/debian-policy/menu-policy.html/ch2.html#s2.1.
Trzecie pole (`title') to nazwa programu. Czwarte (`icon') zawiera ikonê
programu lub go nie ma, gdy program jej nie posiada. Pi±te (`hints') zawiera
tekst, który pojawi siê w menu. Wreszcie szóste pole (`command') to
nazwa komendy, która uruchamia program.

<p>Po zmianach wpis do menu wygl±da nastêpuj±co:

<p><example>
?package(gentoo):needs=X11 section=Apps/Misc \
    title="Gentoo" command="/usr/X11R6/bin/gentoo"
</example>

<p>Wiêcej informacji mo¿esz znale¼æ na stronach podrêcznika
<manref name="menufile" section="5">, <manref name="update-menus" section="1">
i w katalogu /usr/share/doc/debian-policy/menu-policy.html/.

<sect id="watch">Plik `watch.ex'

<p>Mo¿esz u¿yæ tego pliku jako dodatek do programów <manref name="uscan"
section="1"> i <manref name="uupdate" section="1"> zawartych w pakiecie
devscripts, aby obserwowaæ stronê, z której pobra³e¶ oryginalne ¼ród³a.
Poni¿ej pokazano to, co umie¶ci³em w tym pliku:

<p><example>
# watch control file for uscan
# Site		Directory	Pattern			Version	Script
ftp.obsession.se	/gentoo		gentoo-(.*)\.tar\.gz	debian	uupdate
</example>

<p>Wskazówka: po³±cz siê z Internetem i próbuj uruchomiaæ `uscan' w katalogu,
w którym stworzy³e¶ plik `watch'. Przeczytaj równie¿ strony podrêcznika.

<sect id="doc-base">Plik `doc-base.ex'

<p>Je¶li Twój pakiet ma dokumentacjê w postaci stron HTML lub jakiej¶ innej
formie (z wyj±tkiem stron podrêcznika i dokumentacji przegl±danej za pomoc±
programu `info'), to powiniene¶ u¿yæ pliku `doc-base', aby j± zarejestrowaæ.
U¿ytkownik bêdzie móg³ j± znale¼æ, na przyk³ad za pomoc± programu
<manref name="dhelp" section="1"> lub <manref name="dwww" section="1">.

<p>Ten plik dla programu gentoo wygl±da nastêpuj±co:

<p><example>
Document: gentoo
Title: Gentoo Manual
Author: Emil Brink
Abstract: This manual describes what Gentoo is, and how it can be used.
Section: Apps/Tools

Format: HTML
Index: /usr/share/doc/gentoo/html/index.html
Files: /usr/share/doc/gentoo/html/*.html
</example>

<p>Informacje na temat formatu tego pliku znajdziesz na stronie podrêcznika
<manref name="install-docs" section="8"> oraz na jego stronie
/usr/doc/doc-base/doc-base.html/index.html.

<sect id="maintscripts">Pliki `postinst.ex', `preinst.ex', `postrm.ex',
`prerm.ex'

<p>Pliki te s± nazywane skryptami opiekuna. Umieszczone s± one w obszarze
kontrolnym pakietu i uruchamiane przez program dpkg, gdy Twój pakiet jest
instalowany, uaktualniany do nowszej wersji lub usuwany.

<p>Na razie powiniene¶/powinna¶ unikaæ rêcznych modyfikacji tych skryptów,
poniewa¿ czêsto s± one skomplikowane. Wiêcej informacji
znajdziesz w dokumencie Packaging Manual, w sekcji 6. Zerknij tak¿e na
przyk³adowe pliki dostarczone przez dh_make.

<p>Teraz ju¿ powinni¶my byæ gotowi do zbudowania pakietu.

<chapt id="final">Ostatnie kroki

<sect id="build">Budowanie pakietu

<p>Wejd¼ do katalogu g³ównego programu i wydaj w nim komendê:

<p><example>
dpkg-buildpackage -rfakeroot
</example>

<p>Wykona ona wszystko za Ciebie, bêdziesz musia³ tylko dwukrotnie wprowadziæ
has³o do Twojego prywatnego klucza PGP. Po jej zakoñczeniu zobaczysz piêæ
nowych plików w katalogu nadrzêdnym (~/debian/):

<p><list>
<item><em>gentoo_0.9.12-1_i386.deb</em>
<p>To kompletny pakiet binarny. Mo¿esz u¿yæ programu dpkg lub dselect, aby
zainstalowaæ go lub usun±æ w taki sam sposób, jak ka¿dy inny pakiet.

<item><em>gentoo_0.9.12.orig.tar.gz</em>
<p>To oryginalny kod ¼ród³owy, utworzony na wypadek, gdyby kto¶ jeszcze chcia³
ponownie utworzyæ Twój pakiet zaczynaj±c procedurê od pocz±tku. Mo¿e równie¿
u¿yæ go do rêcznej kompilacji, je¶li nie u¿ywa systemu pakietów Debiana.

<item><em>gentoo_0.9.12-1.dsc</em>
<p>To streszczenie zawarto¶ci kodu ¼ród³owego. Plik ten jest generowany na
podstawie pliku gentoo-0.9.12/debian/control i u¿ywany w czasie rozpakowywania
¼ród³a przez program <manref name="dpkg-source" section="1">. Jest on podpisany
cyfrowo przez PGP, aby inni ludzie byli pewni, ¿e jest naprawdê Twój.

<item><em>gentoo_0.9.12-1.diff.gz</em>
<p>Ten skompresowany plik zawiera wszystkie zmiany, których dokona³e¶ w
oryginalnym kodzie ¼ród³owym. Zmiany te s± zapisane w formacie
"unified diff". Plik jest utworzony i u¿ywany przez program
<manref name="dpkg-source" section="1">.

<item><em>gentoo_0.9.12-1_i386.changes</em>
<p>Plik ten opisuje wszystkie zmiany dokonane w aktualnej poprawce pakietu.
U¿ywaj± go programy utrzymuj±ce archiwa FTP Debiana do zainstalowania w nich
pakietów binarnych i ¼ród³owych. Jest on czê¶ciowo generowany z plików
gentoo-0.9.12/debian/changelog i .dsc.

<p>W czasie, gdy bêdziesz siê zajmowa³ pakietem, zmieni siê pewnie jego
dzia³anie i dodana zostanie nowa funkcjonalno¶æ. Ludzie pobieraj±cy Twój
pakiet mog± w tym pliku szybko zobaczyæ, co siê zmieni³o. D³ugie ³añcuchy
liczb to sumy kontrolne MD5 wspomnianych plików. Osoby ¶ci±gaj±ce Twoje pliki
mog± sprawdziæ je u¿ywaj±c programu <manref name="md5sum" section="1"> i je¶li
sumy nie bêd± siê zgadzaæ, to bêd± wiedzieæ, ¿e plik jest uszkodzony lub
zosta³ przez kogo¶ celowo zmieniony. Ten plik jest podpisany cyfrowo przez
PGP, aby inni ludzie byli pewni, ¿e jest naprawdê Twój.
</list>

<p>Gdy masz du¿y pakiet, to mo¿esz nie chcieæ budowaæ go od nowa za ka¿dym
razem, gdy zmienisz jaki¶ szczegó³ w pliku debian/rules. Dla celów testowych
mo¿esz stworzyæ pakiet .deb, który nie bêdzie odbudowywany z zewnêtrznych
¼róde³:

<p><example>
fakeroot debian/rules binary
</example>
<p>Upewnij siê, ¿e Twoja regu³a `install' <strong>nie</strong> posiada dziecka
`install-stamp' (które jest obecnie domy¶lne) i ¿e komenda `dh_clean -k` jest
uruchamiana za ka¿dym razem. Gdy ju¿ skoñczysz z czyszczeniem, pamiêtaj o
odbudowaniu pakietu we w³a¶ciwy sposób, aby móc poprawnie umie¶ciæ go w
archiwum.

<sect id="checkit">Sprawdzanie czy w pakiecie nie ma b³êdów 

<p>Uruchom program <manref name="lintian" section="1">, podaj±c jako argument
swój plik .changes. Program ten sprawdza czy w pakiecie nie wystêpuj±
najczêstsze b³êdy. Uruchom go w nastêpuj±cy sposób:

<p><example>
lintian -i gentoo_0.9.12-1_i386.changes
</example>

<p>Oczywi¶cie zast±p nazwê pliku .changes nazw± pliku wygenerowanego dla
Twojego pakietu. Je¶li pojawi± siê informacje o b³êdach (linie rozpoczynaj±ce
siê od "E:"), to przeczytaj ich obja¶nienie (linie rozpoczynaj±ce siê od "N:"),
popraw je i ponownie zbuduj pakiet w taki sposób, jak to zosta³o opisane w
sekcji <ref id="build">. Linie, które zaczynaj± siê od "W:" to tylko
ostrze¿enia. Nawet je¶li wystêpuj±, to mo¿esz byæ niemal pewny, ¿e Twój pakiet
jest w porz±dku (ale oczywi¶cie powiniene¶ co¶ poprawiæ, ¿eby ju¿ nie
wystêpowa³y).

<p>Zauwa¿, ¿e mo¿esz budowaæ pakiet uruchamiaj±c programy dpkg-buildpackage i
linitian za pomoc± jednej komendy <manref name="debuild" section="1">.

<p>Zajrzyj do pakietu u¿ywaj±c takiego menad¿era plików jak <manref name="mc"
section="1"> lub rozpakuj go w jakim¶ tymczasowym miejscu przy pomocy
programu <manref name="dpkg-deb" section="1">. Uwa¿aj zw³aszcza na dodatkowe,
niepotrzebne pliki, zarówno w pakiecie binarnym jak i ¼ród³owym, na wypadek,
gdyby co¶ posz³o nie tak, jak trzeba lub co¶ nie zosta³o wyczyszczone. Porada:
komenda `zgrep ^+++ ../gentoo_0.9.12-1.diff.gz` poda Ci listê Twoich zmian w
plikach ¼ród³owych, a polecenie `dpkg-deb -c gentoo_0.9.12-1_i386.deb` - listê
plików w pakiecie.

<p>Zainstaluj pakiet, ¿eby samemu go przetestowaæ, na przyk³ad wydaj±c komendê
<manref name="debi" section="1"> jako administrator systemu. Spróbuj go tak¿e
zainstalowaæ i uruchomiæ na maszynach innych ni¿ Twoja i obserwuj uwa¿nie czy
w czasie instalacji i uruchamiania programu nie wyst±pi³y jakie¶ b³êdy lub
ostrze¿enia.

<p>Pó¼niej, gdy bêdziesz budowaæ now± wersjê pakietu, powiniene¶ wykonaæ
nastêpuj±c± procedurê, ¿eby upewniæ siê, ¿e aktualizacja pakietu do nowej
wersji przebiega bezb³êdnie:

<list>
<item>uaktualnij pakiet z poprzedniej wersji (i z wersji w ostatnim wydaniu
Debiana),

<item>powróæ ponownie do poprzedniej wersji,

<item>zainstaluj pakiet jako nowy pakiet (tzn. bez zainstalowanej
poprzedniej wersji),

<item>odinstaluj go, zainstaluj ponownie, a nastêpnie wyczy¶æ go.
</list>

<sect id="upload">Umieszczanie pakietu w archiwum

<p>Gdy ju¿ gruntownie przetestowali¶my nasz pakiet, musimy umie¶ciæ go w
archiwum Debiana na serwerze master.debian.org. W tym celu u¿ywamy programu
<manref name="dupload" section="1">. Pierwsza rzecz±, któr± powinni¶my zrobiæ
jest ustawienie jego pliku konfiguracyjnego - ~/.dupload.conf. Umie¶æ w nim
co¶ takiego jak poni¿ej:

<p><example>
  package config;

  $default_host = "ftp-master";

  $cfg{"ftp-master"}{"login"} = "yourdebianusername";

  $cfg{"non-us"}{"login"} = "yourdebianusername";

  1;
</example>

<p>Oczywi¶cie powiniene¶ zmieniæ moje osobiste ustawienia na swoje. Przeczytaj
te¿ stronê podrêcznika <manref name="dupload.conf" section="5">, aby zrozumieæ
co oznacza ka¿da z u¿ytych opcji.

<p>Nastêpnie po³±cz siê z Internetem i wydaj komendê:

<p><example>
dupload --to master gentoo_0.9.12-1_i386.changes
</example>

<p>Program dupload sprawdzi czy zgadzaj± siê sumy kontrolne MD5 plików z sumami
zapisanymi w pliku .changes. Je¶li sumy kontrolne pasuj± do siebie, to pakiet
mo¿e byæ umieszczony w archiwum. Je¶li sumy siê nie zgadzaj±, to dupload
ostrze¿e Ciê o tym fakcie, ¿eby¶ ponownie zbudowa³ pakiet zgodnie z procedur±
opisan± w sekcji <ref id="build">.

<p>Dupload poprosi Ciê tak¿e o podanie has³a na serwerze master.debian.org,
umie¶ci na nim Twój pakiet i je¶li to potrzebne wy¶le krótkie og³osznie na
listê dyskusyjn± <email>debian-devel-changes@lists.debian.org</email>.

<p>Je¶li mieszkasz w Europie, to mo¿esz tak¿e u¿yæ innego archiwum zamiast
master. Wiêcej szczegó³ów znajdziesz na stronach podrêcznika
<manref name="dupload" section="1">, <manref name="dupload.conf" section="5">
oraz w dokumencie Developer's Reference.

<sect id="update">Aktualizacja pakietu

<p>Powiedzmy, ¿e zosta³ zg³oszony raport nr #54321 o b³êdzie w Twoim pakiecie i
opisuje problem, który mo¿esz rozwi±zaæ. Aby stworzyæ now± poprawkê
pakietu Debiana musisz wykonaæ nastêpuj±ce czynno¶ci:

<list>
<item>Oczywi¶cie najpierw popraw problem w ¼ród³ach pakietu.

<item>Dodaj now± poprawkê do pliku `changelog' za pomoc± komendy `dch -i`.
Do³±cz równie¿ krótki opis b³êdu i jego rozwi±zania, poprzedzaj±c go tym:
"Closes: #54321". W ten sposób raport o b³êdzie zostanie automatycznie
zamkniêty przez oprogramowanie obs³uguj±ce archiwum w momencie, gdy pakiet
zostanie przez nie zaakceptowany.

<item>Powtórz to, co zrobi³e¶ w sekcjach <ref id="build">, <ref id="checkit">
i <ref id="upload">. Jedyn± ró¿nic± teraz bêdzie nie w³±czenie oryginalnego
archiwum ze ¼ród³em programu, gdy¿ znajduje siê ono ju¿ w archiwum Debiana i
nie zosta³o zmienione.
</list>

<p>Rozwa¿my teraz trochê inn±, bardziej skomplikowan± sytuacjê - zosta³a
wydana nowa, zewnêtrzna wersja programu i oczywi¶cie chcemy j± zapakowaæ.
Musimy wykonaæ nastêpuj±ce czynno¶ci:

<list>
<item>Pobierz archiwum z nowymi ¼ród³ami (na przyk³ad nazwane
`gentoo-0.9.13.tar.gz') i umie¶æ je w katalogu nadrzêdnym do katalogu ze
starym drzewem ¼róde³ (dla przyk³adu ~/debian/).

<item>Wejd¼ do katalogu ze starymi ¼ród³ami i wydaj komendê:

<p><example>
uupdate -u gentoo-0.9.13.tar.gz
</example>

<p>Oczywi¶cie musisz zast±piæ nazwê pliku nazw± archiwum ze ¼ród³ami Twojego
programu. Program <manref name="uupdate" section="1"> odpowiednio zmieni
nazwê tego archiwum, spróbuje na³o¿yæ wszystkie zmiany z Twojego poprzedniego
pliku .diff.gz. i uaktualni nowy plik debian/changelog.

<item>Zmieñ katalog na `../gentoo-0.9.13', czyli drzewo z nowym ¼ród³em
pakietu i powtórz to, co zrobi³e¶ w sekcjach <ref id="build">,
<ref id="checkit"> i <ref id="upload">.
</list>

<p>Zauwa¿, ¿e je¶li ustawi³e¶ plik `debian/watch' tak, jak to opisano w
sekcji <ref id="watch">, to mo¿esz uruchomiæ program <manref name="uscan"
section="1">, aby automatycznie odszukiwaæ poprawione ¼ród³a, pobieraæ je i
uruchamiaæ program uupdate.

<sect id="helpme">Gdzie prosiæ o pomoc

<p>Zanim zdecydujesz siê zadaæ pytanie w jakim¶ publicznym miejscu, proszê
najpierw zajrzeæ do odpowiedniego podrêcznika. Dokumentacja do wszystkich
programów wywmienionych w tym dokumencie znajduje siê w katalogach
/usr/share/doc/dpkg, /usr/share/doc/debian,/usr/share/doc/package/ oraz na
stronach podrêcznika man/info. Gdy odbierzesz raport o b³êdzie (tak
prawdziwy raport o b³êdzie!), to znak, ¿e czas zaznajomiæ siê z
<url name="System ¶ledzenia b³êdów Debiana" id="http://www.debian.org/Bugs/"> i
przeczytaæ znajduj±c± siê tam dokumentacjê, aby móc sprawnie radziæ sobie z
takimi raportami.

<p>Zapisuj±c siê na listê dyskusyjn± Mentorów Debiana (dostêpn± pod adresem
<email>debian-mentors@lists.debian.org</email>), mo¿esz po³±czyæ swe si³y z
do¶wiadczonymi rozwijaj±cymi Debiana, którzy pomog± Ci, gdy bêdziesz mieæ
jakie¶ pytania. Mo¿esz zasubskrybowaæ siê na ni± wysy³aj±c e-mail na adres
<email>debian-mentors-request@lists.debian.org</email> ze s³owem `subscribe' w
temacie wiadomo¶ci.

<p>Je¶li wci±¿ masz pytania, to zapytaj na li¶cie Rozwijaj±cych Debiana
(dostêpnej pod adresem <email>debian-devel@lists.debian.org</email>). Mo¿esz
zasubskrybowaæ siê na ni± wysy³aj±c e-mail na adres
<email>debian-devel-request@lists.debian.org</email> ze s³owem `subscribe' w
temacie wiadomo¶ci. Gdy ju¿ jeste¶ rozwijaj±cym Debiana, to powiniene¶ byæ do
niej zasubskrybowany tak czy owak.

<p>Nawet, gdy wszystko dzia³a dobrze, to czas, ¿eby zacz±æ siê modliæ.
Dlaczego? Poniewa¿ ju¿ za kilka godzin (lub dni) u¿ytkownicy z ca³ego ¶wiata
zaczn± u¿ywaæ Twojego pakietu i je¶li pope³ni³e¶ jaki¶ krytyczny b³±d, to
zasypie Ciê listami wielu rozgniewanych u¿ytkowników Debiana... To oczywi¶cie
jest ¿art.:-)

<p>Zrelaksuj siê i b±d¼ gotowy na raporty o b³êdach, poniewa¿ jest du¿o wiêcej
pracy do zrobienia zanim Twój pakiet bêdzie w zgodzie z Polityk± Debiana
(powtarzam: przeczytaj <em>prawdziw± dokumentacjê</em>, aby dowiedzieæ siê
wiêcej szczegó³ów). Powodzenia!

</book>

</debiandoc>
