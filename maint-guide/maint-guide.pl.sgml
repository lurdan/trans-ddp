<!doctype debiandoc system>

<debiandoc>

<book>

<titlepag>

<title>Podrêcznik dla nowych opiekunów pakietów Debiana</title>

<author>Josip Rodin <email/jrodin@jagor.srce.hr/
</author>
<author>polskie t³umaczenie: Pawe³ Têcza <email/pawel.tecza@poczta.fm/
</author>
<author>korekta t³umaczenia: Marcin Owsiany <email/porridge@debian.org/
</author>

<version>wersja orygina³u: 1.2, 6 kwietnia 2002. wersja t³umaczenia: 1.2.1,
17 kwietnia 2002</version>

<copyright>
<copyrightsummary>Copyright &copy; 1998-2002 Josip Rodin.</copyrightsummary>
<copyrightsummary>Copyright &copy; polskiego t³umaczenia 2002 Pawe³ Têcza,
Marcin Owsiany.</copyrightsummary>

<p>Ten dokument mo¿e byæ u¿ywany zgodnie z zasadami licencji GNU GPL (General
Public License) w wersji 2 lub wy¿szej.

<p>Do stworzenia tego dokumentu wykorzystano, jako przyk³ady, nastêpuj±ce
dokumenty:

<p>Making a Debian Package (znany jako Debmake Manual), copyright &copy; 1997
Jaldhar Vyas.

<p>The New-Maintainer's Debian Packaging Howto, copyright &copy; 1997
Will Lowe.
</copyright>

</titlepag>

<toc sect>

<chapt id="start">Rozpoczêcie tak, jak siê nale¿y

<p>Ten dokument próbuje opisaæ proces budowania pakietów dla systemu Debian
GNU/Linux. Jest on przeznaczony dla zwyk³ych u¿ytkowników Debiana i tych z
nich, którzy chc± zostaæ rozwijaj±cymi. Informacje w nim zawarte mog± s³u¿yæ
do budowania paczek ze ¼róde³ napisanych w ró¿nych popularnych jêzykach
programowania. Poparte one zosta³y praktycznymi przyk³adami, gdy¿ jak mówi
stare rzymskie przys³owie, <em>Longum iter est per preaecepta, breve et
efficax per exempla!</em> (Droga wed³ug zasad jest d³uga, a z przyk³adami -
krótka i wygodna!).

<p>Jedn± z rzeczy czyni±cych z Debiana wyj±tkow± dystrybucjê jest jego system
pakietów. Mimo i¿ istnieje ogromna ilo¶æ oprogramowania spakowanego do formatu
Debiana, to czasami zachodzi konieczno¶æ zainstalowania programu, który nie
posiada odpowiedniej paczki. Pewnie siê dziwisz, ¿e mo¿esz sam stworzyæ w³asne
pakiety i my¶lisz, ¿e to bardzo trudne zadanie. No có¿, je¶li jeste¶ zupe³nym
nowicjuszem w Linuksie, to rzeczywi¶cie bêdziesz mia³ k³opoty, ale czy gdyby¶
by³ ¿ó³todziobem, to czyta³by¶ teraz ten dokument? :-) Musisz trochê wiedzieæ
na temat programowania pod Uniksem, ale nie musisz od razu byæ ekspertem.

<p>Jedna rzecz jest pewna: aby odpowiednio tworzyæ i zarz±dzaæ pakietami
Debiana potrzebne s± osobogodziny. Staraj siê nie pope³niaæ b³êdów, gdy¿ nasz system do dzia³ania wymaga
od opiekunów zarówno technicznej kompetencji jak i pilno¶ci.

<p>Ten dokument wyja¶ni wszystkie kroki potrzebne do zbudowania pakietu (choæ niektóre z nich mog±
na pocz±tku wydaæ siê nieistotne) i pomo¿e Ci stworzyæ Twoj± pierwsz± paczkê. Dziêki
niemu nabierzesz trochê do¶wiadczenia, które przyda Ci siê w trakcie budowania
nastêpnych wydañ pakietu, a mo¿e równie¿ pó¼niej do tworzenia innych paczek.

<p>Najnowsze wersje tego dokumentu powinny byæ zawsze dostêpne bezpo¶rednio
na stronie <url name="http://www.debian.org/doc/maint-guide/"
id="http://www.debian.org/doc/maint-guide"> oraz w pakiecie
`<package/maint-guide/'.
<!-- Polskie t³umaczenie jest równie¿ dostêpne w pakiecie
`<package/maint-guide-pl/'.
-->

<sect id="needprogs">Programy, których potrzebujesz do rozwijania

<p>Zanim zaczniesz cokolwiek robiæ, powiniene¶ upewniæ siê, ¿e masz
zainstalowanych kilka dodatkowych pakietów niezbêdnych do rozwijania. Zwróæ
uwagê, ¿e na poni¿szej li¶cie nie ma ¿adnych pakietów oznaczonych jako
`niezbêdne' (essential) lub `wymagane' (required). Po prostu zak³adamy, ¿e masz
ju¿ je zainstalowane.

<p>Ta wersja podrêcznika zosta³a uaktualniona z my¶l± o pakietach wchodz±cych
w sk³ad Debiana 2.2 (`potato') oraz 3.0 (`woody').

<p>Nastêpuj±ce pakiety wchodz± w sk³ad standardowej instalacji Debiana
wiêc prawdopodobnie masz je (i dodatkowe pakiety, od których one zale¿±) ju¿
zainstalowane. Mimo to powiniene¶ sprawdziæ ich status za pomoc± komendy
`dpkg -s &lt;pakiet&gt;`.

<list>
<item><package/dpkg-dev/ - pakiet zawieraj±cy narzêdzia niezbêdne do
rozpakowywania, budowania i wysy³ania pakietów ¼ród³owych Debiana. (wiêcej
informacji znajdziesz na stronie podrêcznika <manref name="dpkg-source"
section="1">)

<item><package/file/ - przydatny program do okre¶lania typu pliku. (wiêcej
informacji znajdziesz na stronie podrêcznika <manref name="file"
section="1">)

<item><package/gcc/ - kompilator GNU jêzyka C, niezbêdny gdy Twój program tak
jak wiêkszo¶æ programów zosta³o napisanych w jêzyku C. (wiêcej informacji
znajdziesz na stronie podrêcznika <manref name="gcc" section="1">)
Pakiet ten jest powi±zany z kilkoma innymi paczkami, takimi jak
<package/binutils/, która zawiera zestaw programów s³u¿±cy do asemblacji i
konsolidacji plików wynikowych (wiêcej informacji znajdziesz za pomoc±
`info binutils` w pakiecie <package/binutils-doc/) i <package/cpp/,
zawieraj±c± preprocesor jêzyka C. (wiêcej informacji znajdziesz na stronie
podrêcznika <manref name="cpp" section="1">)

<item><package/g++/ - kompilator GNU jêzyka C++, niezbêdny gdy Twój program
zosta³ napisany w jêzyku C++. (wiêcej informacji znajdziesz na stronie
podrêcznika <manref name="g++" section="1">)

<item><package/libc6-dev/ - biblioteki jêzyka C i pliki nag³ówkowe kompilatora
gcc niezbêdne do konsolidacji ze stworzonymi plikami wynikowymi. (wiêcej
informacji znajdziesz za pomoc± `info libc` w pakiecie <package/glibc-doc/)

<item><package/make/ - na ogó³ proces tworzenia programu sk³ada siê z kilku
etapów. Zamiast ci±g³ego powtarzania w kó³ko tych samych komend, mo¿esz
pos³u¿yæ siê programem, który zrobi to za Ciebie. Jedyne co musisz zrobiæ w
tym celu, to stworzyæ plik/pliki `Makefile'. (wiêcej informacji znajdziesz za
pomoc± `info make`)

<item><package/patch/ - bardzo u¿yteczne narzêdzie s³u¿±ce do nak³adania na
pliki ¼ród³owe "³at", czyli stworzonych dziêki programowi diff plików z
ró¿nicami miêdzy plikami ¼ród³owymi i tworzenia w ten sposób "za³atanych"
wersji programów. (wiêcej informacji znajdziesz na stronie podrêcznika
<manref name="patch" section="1">)

<item><package/perl/ - Perl jest jednym z najczê¶ciej stosowanych
interpretowanych jêzyków skryptowych w systemach kompatybilnych z systemem
Unix. Czêsto okre¶lany jest jako "Uniksowy scyzoryk z pi³± ³añcuchow±".
(wiêcej informacji znajdziesz na stronie podrêcznika <manref name="perl"
section="1">).
</list>

<p>Najprawdopodobniej bêdziesz chcia³ zainstalowaæ równie¿ nastêpuj±ce
pakiety:

<list>
<item><package/autoconf/ i <package/automake/ - wiele nowszych programów u¿ywa
skryptów konfiguracyjnych i plików Makefile przetworzonych za pomoc± takich
narzêdzi jak te. (wiêcej informacji znajdziesz za pomoc± `info autoconf` i
`info automake`)

<item><package/dh-make/ i <package/debhelper/ - pakiet dh-make jest niezbêdny
do stworzenia szablonu Twojego przyk³adowego pakietu. U¿ywa on tak¿e do
tworzenia pakietów niektórych narzêdzi z pakietu debhelper. Pakiety te nie s±
niezbêdne do budowania paczek, ale s± <strong>bardzo</strong> zalecane,
szczególnie nowym opiekunom pakietów. Dziêki nim o wiele ³atwiej rozpocz±æ
proces budowania pakietu i kontrolowaæ go pó¼niej. (wiêcej informacji
znajdziesz na stronach podrêcznika <manref name="dh_make" section="1">,
<manref name="debhelper" section="1"> oraz w pliku
/usr/share/doc/debhelper/README).

<item><package/devscripts/ - pakiet zawieraj±cy parê u¿ytecznych i pomocnych
dla opiekuna skryptów, które nie s± jednak¿e niezbêdne do budowania pakietów.
(wiêcej informacji znajdziesz w pliku /usr/share/doc/devscripts/README.gz).

<item><package/fakeroot/ - narzêdzie, które pozwala Ci "udawaæ" bycie
administratorem systemu. Uprawnienia administratora s± niezbêdne w niektórych
etapach procesu budowania pakietu. (wiêcej informacji znajdziesz na stronie
podrêcznika <manref name="fakeroot" section="1">)

<item><package/gnupg/ - narzêdzie umo¿liwiaj±ce Ci cyfrowe <em>podpisanie</em>
pakietu. Jest to szczególnie wa¿ne, gdy zamierzasz rozpowszechniaæ swój
pakiet w¶ród innych ludzi. Na pewno bêdziesz musia³ to zrobiæ, gdy Twój pakiet
zostanie w³±czony do dystrybucji Debiana. (wiêcej informacji znajdziesz na
stronie podrêcznika <manref name="gpg" section="1">)

<item><package/g77/ - kompilator GNU jêzyka Fortran 77, niezbêdny gdy Twój
program zosta³ napisany w jêzyku Fortran. (wiêcej informacji znajdziesz na
stronie podrêcznika <manref name="g77" section="1">)

<item><package/gpc/ - kompilator GNU jêzyka Pascal, niezbêdny gdy Twój program
zosta³ napisany w jêzyku Pascal. Warty odnotowania w tym miejscu jest
równie¿ pakiet <package/fp-compiler/ (Free Pascal Compiler), który tak¿e
nadaje siê do tego celu. (wiêcej informacji znajdziesz na stronach podrêcznika
<manref name="gpc" section="1"> i <manref name="ppc386" section="1">)

<item><package/imake/ i <package/xmkmf/ - niektóre programy, g³ównie te
stworzone z my¶l± o systemie X11, u¿ywaj± tych narzêdzi do wygenerowania plików
Makefile z zestawu makro-funkcji. (wiêcej informacji znajdziesz na stronach
podrêcznika <manref name="imake" section="1"> i <manref name="xmkmf"
section="1">)

<item><package/lintian/ - program s³u¿±cy do sprawdzania poprawno¶ci pakietu
Debiana. Poinformuje Ciê on, gdy w zbudowanej paczce znajdzie najczêstsze b³êdy
i wyja¶ni ich przyczynê. (wiêcej informacji znajdziesz na stronie podrêcznika
<manref name="lintian" section="1"> oraz na stronie
/usr/share/doc/lintian/lintian.html/index.html)
</list>

<p>Poni¿ej zamieszczono odno¶niki do <em>bardzo wa¿nej</em> dokumentacji, która powinna byæ
przeczytana razem z tym podrêcznikiem:

<list>
<item><package/debian-policy/ - Polityka Debiana opisuje strukturê i zawarto¶æ
archiwum Debiana, kilka spraw dotycz±cych projektu systemu operacyjnego, FHS
(Standard Hierarchii Systemu Plików - Filesystem Hierarchy Standard), który mówi gdzie powinny siê znajdowaæ pliki
i katalogi, itd. Najwa¿niejszymi dla Ciebie rzeczami s± opisane w Polityce
wymagania, które musi spe³niæ ka¿dy pakiet, aby móg³ byæ w³±czony do
dystrybucji. (wiêcej informacji znajdziesz na stronie
/usr/share/doc/debian-policy/policy.html/index.html)

<item><package/developers-reference/ - opisuje wszystkie zagadnienia nie
zwi±zane z technicznymi szczegó³ami procesu tworzenia paczki, a wiêc strukturê
archiwum, informacje na temat zmian nazw pakietów, ich osierocania i
adopcji, informacje o tym, jak umie¶ciæ pakiet w archiwum Debiana, nie
bêd±c opiekunem danego pakietu (Non-Maintainer Upload), jak radziæ sobie z
b³êdami, kiedy i gdzie umieszczaæ pakiet (wiêcej informacji znajdziesz na
stronie
/usr/share/doc/developers-reference/developers-reference.html/index.html).
</list>

<p>Powy¿sze krótkie opisy jedynie przedstawiaj± do czego s³u¿y dany pakiet.
Zanim przejdziesz dalej, proszê gruntownie zapoznaæ siê z dokumentacj± do
ka¿dego z programów, a przynajmniej z ich standardowym u¿yciem. Byæ mo¿e wydaje
Ci siê to teraz mêcz±ce, ale pó¼niej bêdziesz siê <em>bardzo</em> cieszyæ, ¿e
to zrobi³e¶/³a¶.

<p>Uwaga: pakiet <package/debmake/ zawiera kilka programów bardzo zbli¿onych
funkcjonalnie do pakietu <em>dh_make</em>, ale ten dokument
<strong>nie</strong> omawia jego u¿ycia, poniewa¿ <em>odradza</em> siê jego
u¿ywania. Po wiêcej informacji odsy³am na stronê <url name="the Debmake
manual" id="http://www.debian.org/~jaldhar/">.

<sect id="otherinfo">Inne informacje

<p>Istniej± dwa rodzaje pakietów jakie mo¿esz stworzyæ: ¼ród³owe i binarne.
Pakiet ¼ród³owy zawiera kod, który mo¿esz skompilowaæ, aby otrzymaæ binarn±
postaæ programu. Pakiet binarny zawiera natomiast ju¿ gotowy do u¿ycia
program. Proszê nie myliæ takich pojêæ, jak ¼ród³o programu i pakiet ¼ród³owy
programu! Je¶li potrzebujesz wiêcej szczegó³ów na temat tej terminologii, to
proszê przeczytaæ inne podrêczniki.

<p>W Debianie, termin `opiekun' (maintainer) oznacza osobê, która tworzy
pakiety i jest cz³onkiem projektu Debian, `autor' (upstream author) - osobê,
która tworzy program, a `zewnêtrzny opiekun' (upstream maintainer) - osobê,
która aktualnie opiekuje siê programem, pozostaj±c na zewn±trz projektu Debian.
Zwykle autor i zewnêtrzny opiekun s± t± sam± osob±, czasem nawet t± sam± osob±
co opiekun. Je¶li napisa³e¶ jaki¶ program i chcesz, ¿eby wszed³ w sk³ad
Debiana, to przy¶lij swoje podanie i zostañ opiekunem.

<p>Gdy ju¿ zbudowa³e¶ swój pakiet (lub gdy jeste¶ w trakcie jego budowania) i
chcesz, aby Twój program wszed³ w sk³ad nastêpnej dystrybucji (je¶li jest on
u¿yteczny, to czemu nie?), to mo¿esz zostaæ oficjalnym opiekunem pakietu
Debiana. Proces przystêpowania do projektu jest wyja¶niony w dokumencie
Developer's Reference. Proszê przeczytaæ go.

<chapt id="first">Pierwsze kroki

<sect id="choose">Wybierz swój program

<p>Prawdopodobnie wybra³e¶/wybra³a¶ ju¿ pakiet, który chcesz zbudowaæ. Pierwsz±
rzecz±, któr± powiniene¶/powinna¶ zrobiæ, to sprawdziæ czy pakiet znajduje siê
ju¿ w dystrybucji. Je¶li u¿ywasz dystrybucji `stabilnej' (stable), to chyba
najlepiej bêdzie, gdy udasz siê na stronê z <url name="przeszukiwark± pakietów"
id="http://www.debian.org/distrib/packages">. Je¶li za¶ u¿ywasz
<strong>aktualnej</strong> `niestabilnej' (unstable) dystrybucji, to sprawd¼
wynik dzia³ania poni¿szych komend:

<p><example>
dpkg -s nazwa_programu
dpkg -l '*nazwa_programu*'
</example>

<p>Je¶li pakiet ju¿ istnieje, to có¿, zainstaluj go! :-) Je¶li przypadkiem jest on
osierocony (jego opiekunem jest "Debian QA Group"), to mo¿esz siê nim zaopiekowaæ. Sprawd¼ na
<url name="li¶cie osieroconych pakietów"
id="http://www.debian.org/devel/wnpp/orphaned"> i
<url name="li¶cie pakietów przeznaczonych do adopcji"
id="http://www.debian.org/devel/wnpp/rfa_bypackage"> czy istotnie mo¿na
przej±æ opiekê nad t± paczk±.

<p>Je¶li mo¿esz zaadoptowaæ pakiet, to pobierz jego ¼ród³a (za pomoc± komendy
<tt/apt-get source nazwa_pakietu/) i przetestuj go. Niestety ten dokument nie
zawiera informacji na temat adopcji pakietów. Na szczê¶cie nie powiniene¶
mêczyæ siê rozpracowuj±c dzia³anie danego pakietu, gdy¿ kto¶ ju¿ wcze¶niej
dokona³ wstêpnych ustawieñ dla Ciebie. Dalsze czytanie poni¿szych porad bêdzie
z pewno¶ci± odpowiednie równie¿ w Twoim przypadku.

<p>Je¶li pakiet jest nowy i chcia³by¶, ¿eby zosta³ w³±czony do dystrybucji
Debiana, to wykonaj poni¿sze instrukcje:

<list>
<item>sprawd¼ na stronie <url name="lista pakietów bêd±cych w budowie"
id="http://www.de.debian.org/devel/wnpp/being_packaged"> czy kto¶ ju¿ nie
pracuje nad tym pakietem. Je¶li kto¶ ju¿ to robi, to mo¿esz siê z nim
skontaktowaæ, gdy czujesz, ¿e móg³by¶ mu pomóc. W przeciwnym przypadku znajd¼
jaki¶ inny interesuj±cy Ciê program, który nie ma jeszcze swojego opiekuna.
</item>

<item>program <strong>musi</strong> mieæ licencjê, je¶li to mo¿liwe, to
najlepiej zgodn± z <url name="Wytycznymi Debiana dotycz±cymi Oprogramowania
Wolnodostêpnego" id="http://www.debian.org/social_contract.html#guidelines">.
Je¶li nie zgadza siê ona z którymi¶ zasadami wymienionymi w powy¿szym
dokumencie, to program mo¿e byæ w³±czony do sekcji `contrib' lub `non-free'
Debiana. Gdy nie jeste¶ pewny, do której sekcji mo¿na w³±czyæ program, to
wy¶lij licencjê tego programu na listê dyskusyjn±
<email/debian-legal@lists.debian.org/ i popro¶ o poradê.
</item>

<item>program z pewno¶ci± <strong>nie</strong> powinien byæ uruchamiany z
ustanowionym identyfikatorem administratora systemu (set-user-ID root)
- ogólnie program nie powinien potrzebowaæ ustanowionego ¿adnego
identyfikatora u¿ytkownika (ang. set-user-ID) lub grupy (set-group-ID).</item>

<item>program nie powinien byæ demonem ani innym programem umieszczanym w
katalogu */sbin, ani nie powinien otwieraæ portu jako administrator
systemu.</item>

<item>program powinien mieæ binarn±, wykonywaln± formê. Nie próbuj na tym
etapie tworzyæ pakietu z bibliotek±, gdy¿ s± one trudniejsze w
budowaniu.</item>

<item>program lub przynajmniej jego kod ¼ród³owy powinien byæ
dobrze udokumentowany, albo ³atwy do zrozumienia.</item>

<item>powiniene¶ skontaktowaæ siê z autorem/autorami programu, aby sprawdziæ
czy zgadzaj± siê na jego zapakowanie. Wa¿n± rzecz± jest mo¿liwo¶æ konsultacji
z autorem/autorami programu w razie wyst±pienia jakich¶ problemów. Nie próbuj
zatem pakowaæ oprogramowania, którym siê nikt nie opiekuje.</item>

<item>i na koñcu, choæ wcale nie jest to najmniej wa¿ne, musisz wiedzieæ jak
program dzia³a i wypróbowaæ go przez pewien czas.</item>
</list>

<p>Oczywi¶cie powy¿sze rzeczy to po prostu ¶rodki zaradcze, które maj± na celu
uchroniæ Ciê przed gniewem u¿ytkowników, gdy zrobisz co¶ ¼le w jakim¶ demonie z
ustanowionym identyfikatorem u¿ytkownika... Gdy nabierzesz ju¿ wiêcej
do¶wiadczenia w pakowaniu, to zdo³asz nawet zapakowaæ takie programy, których
powy¿ej Ci odradza³em. Jednak¿e nawet najbardziej do¶wiadczeni rozwijaj±cy
Debiana konsultuj± siê na li¶cie dyskusyjnej Mentorów Debiana (dostêpnej pod
adresem <email/debian-mentors@lists.debian.org/), gdy maj± jakie¶ w±tpliwo¶ci,
a ludzie do niej zasubskrybowani chêtnie im pomagaj±.

<p>Wiêcej informacji na te tematy znajdziesz w dokumencie Developer's
Reference.

<sect id="getit">We¼ program i wypróbuj go

<p>Pierwsz± rzecz±, któr± powiniene¶ zrobiæ, to odnalezienie i pobranie
oryginalnego pakietu. Zak³adam, ¿e ju¿ masz plik ¼ród³owy, który pobra³e¶ ze
strony domowej jego autora. ¬ród³a z wolnym oprogramowaniem dla Uniksa s±
zwykle rozprowadzane w formacie tar/gzip, czyli plikach z rozszerzeniem
.tar.gz. Pliki te na ogó³ zawieraj± podkatalog o nazwie program-wersja, w
którym znajduj± siê wszystkie pliki ¼ród³owe. Je¶li ¼ród³a wybranego przez
Ciebie programu s± rozprowadzane w innym rodzaju archiwum (na przyk³ad pliki
koñcz±ce siê na ".Z" lub ".zip"), to wypakuj je przy pomocy odpowiedniego
narzêdzia. Gdy nie jeste¶ pewien jak zrobiæ to poprawnie, to zapytaj na li¶cie
dyskusyjnej Mentorów Debiana (wskazówka: wydaj polecenie
`file archiwum.rozszerzenie`).

<p>Dla przyk³adu, u¿ywam programu o nazwie `gentoo' - menad¿era plików dla
systemu X Window, który wykorzystuje bibliotekê GTK+. Zwróæ uwagê, ¿e program ten
jest ju¿ zapakowany i znacznie siê zmieni³ od czasu, gdy pisany by³ ten tekst.

<p>W swoim katalogu domowym stwórz podkatalog o nazwie 'debian', 'deb' lub
jakkolwiek uwa¿asz za w³a¶ciwe (po prostu katalog ~/gentoo/ by³by w tym
przypadku dobrym rozwi±zaniem). Umie¶æ w nim pobrane archiwum i rozkompresuj
je (za pomoc± komendy `tar xzf gentoo-0.9.12.tar.gz`). Upewnij siê, ¿e nie ma
¿adnych b³êdów, nawet jakich¶ nieistotnych, poniewa¿ najprawdopodobniej pojawi±
siê problemy w czasie rozpakowywania w systemach innych ludzi, których
narzêdzia do wypakowywania mog±, ale nie musz± ignorowaæ takich
nieprawid³owo¶ci.

<p>Teraz w katalogu tym powiniene¶ mieæ inny podkatalog o nazwie
`gentoo-0.9.12'. Wejd¼ do niego i <strong>dok³adnie</strong> przeczytaj
dostarczon± dokumentacjê. Zwykle powinny tam byæ pliki o nazwach README*,
INSTALL*, *.lsm lub *.html. Odszukaj w dokumentacji instrukcji jak poprawnie
skompilowaæ i zainstalowaæ program (najprawdopodobniej bêd± one zak³adaæ, ¿e
chcesz zainstalowaæ program do katalogu /usr/local/bin; ale Ty nie bêdziesz
tego robiæ z powodów, których siê dowiesz czytaj±c sekcjê <ref id="destdir">).

<p>Proces instalacji ró¿ni siê w zale¿no¶ci od programu, ale wiele nowoczesnych
programów jest dostarczanych ze skryptem `configure', który konfiguruje ¼ród³a
pod Twoim systemem i sprawdza czy spe³niaj± one warunki niezbêdne do poprawnej
kompilacji. Po zakoñczeniu konfiguracji wykonywanej za pomoc± polecenia
`./configure`, programy s± na ogó³ kompilowane przy u¿yciu komendy `make`.
Niektóre z nich wspieraj± tak¿e komendê `make check`, która uruchamia procedurê
samosprawdzaj±c±. Instalacja w katalogu przeznaczenia nastêpuje zwykle po
wydaniu polecenia `make install`.

<p>Teraz spróbuj skompilowaæ i uruchomiæ program, aby upewniæ siê czy dzia³a on
prawid³owo i nic siê nie psuje w czasie instalacji lub wykonywania.

<p>Mo¿esz te¿ zazwyczaj u¿yæ polecenia `make clean` (lub lepiej `make
distclean`), aby posprz±taæ po zbudowanym katalogu. Czasem mo¿na nawet pos³u¿yæ
siê poleceniem `make uninstall`, które usunie wszystkie zainstalowane pliki.

<sect id="namever">Nazwa pakietu i jego wersja

<p>Powiniene¶/powinna¶ rozpocz±æ pakowanie z zupe³nie wyczyszczonym
(ang. pristine - pierwotnym) katalogiem ¼ród³owym, ewentualnie ze ¶wie¿o
rozpakowanymi ¼ród³ami.

<p>Aby prawid³owo zbudowaæ pakiet, musisz tak zmieniæ nazwê oryginalnego
programu, ¿eby wystêpowa³y w niej tylko ma³e litery (o ile wystêpuj± tam
jakie¶ wielkie litery). Powiniene¶ tak¿e przenie¶æ katalog ze ¼ród³ami do
katalogu &lt;nazwa_pakietu&gt;-&lt;wersja&gt;.

<p>Je¶li nazwa programu sk³ada siê z wiêcej ni¿ jednego wyrazu, to obetnij j±
do jednego wyrazu albo utwórz skrót, na przyk³ad pakiet z programem "John's
little editor for X" powinien siê nazywaæ johnledx, jle4x lub tak jak
zdecydujesz. Pamiêtaj jednak, aby jego d³ugo¶æ nie przekracza³a jakiej¶
rozs±dnej warto¶ci, dla przyk³adu 20 znaków.

<p>Sprawd¼ tak¿e dok³adnie wersjê programu (bêdzie ona w³±czona do nazwy
pakietu). Je¶li do oznaczenia jego wersji autor nie u¿y³ konwencji X.Y.Z,
ale, dla przyk³adu, pos³u¿y³ siê dat±, to Ty równie¿ mo¿esz jej u¿yæ do
okre¶lenia wersji pakietu (poprzed¼ j± ci±giem "0.0.", na wypadek gdyby autor
programu zdecydowa³ siê kiedy¶ wydaæ wersjê o mi³o brzmi±cym numerze 1.0).
Zatem, je¶li dat± wydania danej wersji programu by³o 19 grudnia 1998 r., to
powiniene¶ oznaczyæ jego wersjê jako 0.0.19981219.

<p>Niektóre programy nie s± jednak w ¿aden sposób numerowane. W takich
przypadkach powiniene¶ skontaktowaæ siê z nieoficjalnym opiekunem, aby
dowiedzieæ siê czy u¿ywa on jakiej¶ innej metody do oznaczania kolejnych
poprawek programu.

<sect id="dh_make">Wstêpna "debianizacja"

<p>Upewnij siê, ¿e jeste¶ w katalogu ze ¼ród³ami programu i wydaj nastêpuj±c±
komendê:

<p><example>
dh_make -e twój_adres@e-mail -f ../gentoo-0.9.12.tar.gz
</example>

<p>Oczywi¶cie musisz zast±piæ ci±g "twój_adres@e-mail" adresem Twojej skrzynki
pocztowej, gdy¿ zostanie on wpisany do pliku ze zmianami (`changelog') i
jeszcze innych plików. Musisz równie¿ zast±piæ nazwê pliku nazw± Twojego
oryginalnego archiwum ¼ród³owego. Wiêcej szczegó³ów znajdziesz na stronie
podrêcznika <manref name="dh_make" section="1">.

<p>Bêdziesz musia³/musia³a te¿ wprowadziæ kilka dodatkowych informacji.
Zostaniesz poproszony/poproszona o podanie typu archiwum jakie tworzysz. Gentoo
to pojedynczy pakiet binarny - tworzy on tylko jeden plik binarny, a zatem
jeden plik .deb. W takim wypadku zaznaczamy pierwsz± opcjê za pomoc± klawisza
`s'. Nastêpnie sprawdzamy informacje na ekranie i je¶li siê wszystko zgadza, to
potwierdzamy je naciskaj±c &lt;enter&gt;.

<p>Poniewa¿ jeste¶ jeszcze nowym opiekunem, to odradzam Ci tworzenie pakietów
z wieloma pakietami binarnymi lub bibliotekami. Budowanie ich nie jest wcale
takie trudne, ale wymaga trochê wiêkszej wiedzy, zatem nie bêdziemy tutaj
wszystkiego opisywaæ.

<p>Proszê zauwa¿yæ, ¿e powinno siê uruchomiæ program dh_make <strong>tylko
jeden raz</strong>, gdy¿ nie zachowa siê on poprawnie, gdy uruchomisz go
ponownie w tym samym, ju¿ "zdebianizowanym" katalogu. Oznacza to równie¿, ¿e
bêdziesz musia³ u¿yæ innej metody, aby zrealizowaæ w przysz³o¶ci now± poprawkê
lub now± wersjê pakietu. Wiêcej informacji na ten temat znajdziesz pó¼niej w
sekcji <ref id="update">.

<chapt id="modify">Modyfikacja ¼ród³a

<p>Normalnie, programy instaluj± siê same w podkatalogach katalogu /usr/local.
Pakiety Debiana nie mog± jednak u¿ywaæ tego katalogu, gdy¿ jest on
zarezerwowany do prywatnego u¿ycia przez administratora (lub u¿ytkownika)
systemu. Oznacza to, ¿e musisz siê przyjrzeæ jak budowany jest Twój program,
zwykle za pomoc± pliku Makefile. Jest to skrypt programu <manref name="make"
section="1"> u¿ywanego do automatycznego budowania programu. Wiêcej
szczegó³ów na temat plików Makefile znajdziesz w sekcji <ref id="rules">.

<p>Zwróæ te¿ uwagê na to czy Twój program u¿ywa programów GNU
<manref name="automake" section="1"> i/lub <manref name="autoconf"
section="1">. Oznacza to, ¿e ¼ród³a programu zawieraj± plik Makefile.am i/lub
Makefile.in i ¿e to je bêdziesz musia³ wtedy modyfikowaæ. Dzieje siê tak,
poniewa¿ ka¿de wywo³anie programu automake powoduje ponowne utworzenie pliku
Makefile.in z informacjami wygenerowanymi z pliku Makefile.am. Tak¿e ka¿de
wywo³anie skryptu ./configure zrobi to samo z plikiem Makefile, a dane bêd±
pochodziæ z pliku Makefile.in. Edycja plików Makefile.am wymaga pewnej wiedzy
na temat programu automake, mo¿esz o nim poczytaæ za pomoc± komendy `info
automake'. Edytowanie plików Makefile.in odbywa siê niemal tak samo jak w
przypadku plików Makefile, po prostu zwracasz uwagê na zmienne, tzn.
wszystkie ³añcuchy otoczone przez znaki `@', dla przyk³adu zmienna @CFLAGS@
lub @LN_S@ bêdzie zastêpowana odpowiedni± warto¶ci± przy ka¿dym wywo³aniu
skryptu ./configure.

<p>Zauwa¿ równie¿, ¿e nie ma tu wystarczaj±cego miejsca, aby opisaæ
<em>wszystkie</em> szczegó³y na temat poprawiania zewnêtrznych ¼róde³.
Przedstawiamy tu jedynie kilka problemów, na które ludzie czêsto siê natykaj±.

<sect id="destdir">Instalacja w podkatalogu

<p>Wiekszo¶æ programów posiada swój w³asny sposób instalowania siê w
istniej±cej strukturze katalogów Twojego systemu. ¦cie¿ki do ich plików
binarnych trafiaj± do katalogów w Twojej zmiennej ¶rodowiskowej $PATH, za¶
dokumentacja do programu i strony podrêcznika s± umieszczane w powszechnie
stosowanych miejscach. Jednak¿e, je¶li pozwolisz na takie dzia³anie, to
program mo¿e siê zainstalowaæ w ka¿dym miejscu Twojego systemu. Mo¿e sprawiæ
to problemy narzêdziom do obs³ugi pakietów, gdy¿ nie bêd± one wiedzia³y,
które pliki nale¿± do Twojej paczki, a które nie.

<p>Zatem musisz zrobiæ co¶ innego: zainstalowaæ swój program w tymczasowym
katalogu, z którego narzêdzia opiekuna zbuduj± dzia³aj±cy pakiet .deb.
Wszystko co zawiera ten katalog zostanie zainstalowane w systemie
u¿ytkowników, gdy zdecyduj± siê oni zainstalowaæ Twoj± paczkê, z t± tylko
ró¿nic±, ¿e program dpkg zainstaluje pliki wzglêdem katalogu g³ównego systemu.

<p>Ten tymczasowy katalog jest zazwyczaj tworzony wewn±trz Twojego katalogu
debian/ w rozpakowanym drzewie ze ¼ród³ami. Na ogó³ ma on nazwê
<file>debian/tmp</file> lub <file>debian/nazwa_pakietu</file>.

<p>
Pamiêtaj, ¿e nie wystarczy ¿eby program zachowywa³ siê poprawnie, gdy zostanie
on zainstalowany siê w katalogu debian/nazwa_pakietu. Musi on zachowywaæ siê
w³a¶ciwie tak¿e, gdy zostanie umieszczony w g³ównym katalogu systemu.
Zatem nie wolno pozwoliæ, ¿eby w plikach pakietu zosta³y "zaszyte" takie ¶cie¿ki jak
<tt>/home/ja/deb/gentoo-0.9.12/usr/share/gentoo</tt>.

<p>Sprawa jest zupe³nie prosta, gdy programy u¿ywaj± narzêdzia GNU autoconf.
Wiêkszo¶æ z nich posiada pliki Makefile, które domy¶lnie s± ustawione w taki
sposób, aby zezwalaæ na instalacjê w dowolnym podkatalogu zak³adaj±c, ¿e
katalog /usr (dla przyk³adu) jest kanonicznym prefiksem. Gdy zostanie wykryte,
¿e Twój program u¿ywa programu autoconfa, to dh_make ustawi odpowiednie
komendy tak, ¿eby wszystko zosta³o zrobione automatycznie. W takich
przypadkach mo¿esz nawet omin±æ dalsze czytanie tej sekcji. Z innymi
programami bêdziesz mia³ wiêcej pracy i prawdopodobnie bêdziesz musia³
przejrzeæ i wyedytowaæ pliki Makefile.

<p>Poni¿ej znajduje siê odpowiednia czê¶æ pliku Makefile programu gentoo.

<p><example>
# Where to put binary on 'make install'?
BIN     = /usr/local/bin

# Where to put icons on 'make install'?
ICONS   = /usr/local/share/gentoo
</example>

<p>Widzimy, ¿e pliki te zostan± zainstalowane wewn±trz katalogu
<file>/usr/local</file>. Zmieñmy zatem ¶cie¿ki na nastêpuj±ce:

<p><example>
# Where to put binary on 'make install'?
BIN     = $(DESTDIR)/usr/bin

# Where to put icons on 'make install'?
ICONS   = $(DESTDIR)/usr/share/gentoo
</example>

<p>Ale dlaczego w³a¶nie w tym katalogu, a nie w jakim¶ innym? Poniewa¿ pakiety
Debiana nigdy nie instaluj± plików w katalogu <file>/usr/local</file>. Ten
katalog jest zarezerwowany na potrzeby administratora systemu. W systemie
Debian za¶ takie pliki trafiaj± do katalogu <file>/usr</file>.

<p>Dok³adniejsze informacje na temat po³o¿enia binariów, ikon, dokumentacji,
itd. s± opisane w dokumencie Filesystem Hierarchy Standard (zobacz do katalogu
/usr/share/doc/debian-policy/fhs/). Polecam Ci przejrzenie tego dokumentu i
przeczytanie tych sekcji, które mog± dotyczyæ Twojego pakietu.

<p>Zatem powinni¶my instalowaæ pliki binarne w katalogu /usr/bin, a nie w
/usr/local/bin, strony podrêcznika w katalogu /usr/share/man/man1, a nie w
/usr/local/man/man1, itd. Zauwa¿, ¿e w pliku Makefile programu gentoo nie
wspomniano o jego stronie podrêcznika, ale poniewa¿ Polityka Debiana wymaga,
¿eby ka¿dy program posiada³ tak± stronê, to stworzymy ja pó¼niej i
zainstalujemy w katalogu /usr/share/man/man1.

<p>Niektóre programy nie u¿ywaj± zmiennych w plikach Makefile do definiowania
¶cie¿ek takich jak te powy¿ej. Oznacza to, ¿e bêdziesz musia³ wyedytowaæ
niektóre ¼ród³a napisane w jêzyku C i tak je poprawiæ, aby u¿ywa³y w³a¶ciwych
po³o¿eñ. Ale gdzie i czego w³a¶ciwie szukaæ? Mo¿esz to odnale¼æ wydaj±c
polecenie:

<p><example>
grep -n usr/local/lib *.[ch]
</example>

<p>Program grep przeszuka rekursywnie ca³e drzewo ze ¼ród³ami i wypisze
dla Ciebie nazwy plików i numery linii w nich, gdy odnajdzie szukany wzorzec.
Teraz wyedytuj te pliki, w odnalezionych liniach zast±p ci±g /usr/local/*
ci±giem usr/* i to ju¿ wszystko. Zrób to bardzo ostro¿nie, aby nie zepsuæ
pozosta³ej czê¶ci kodu! :-)

<p>Nastêpnie powiniene¶/powinna¶ odnale¼æ w pliku Makefile cel `install'
(szukaj±c linii rozpoczynaj±cej siê od ci±gu "install:') i zmieniæ nazwê
wszystkich odniesieñ do katalogów innych ni¿ te zdefiniowane na pocz±tku pliku
Makefile. Przed zmian±, cel `install' programu gentoo by³ nastêpuj±cy:

<p><example>
install:        gentoo
                install ./gentoo $(BIN)
                install icons/* $(ICONS)
                install gentoorc-example $(HOME)/.gentoorc
</example>

<p>Po wykonaniu zmian wygl±da on nastêpuj±co:

<p><example>
install:        gentoo-target
                install -d $(BIN) $(ICONS) $(DESTDIR)/etc
                install ./gentoo $(BIN)
                install -m644 icons/* $(ICONS)
                install -m644 gentoorc-example $(DESTDIR)/etc/gentoorc
</example>

<p>Pewnie zauwa¿y³e¶/zauwa¿y³a¶, ¿e teraz przed pozosta³ymi komendami w tej regule bêdzie
wykonywana komenda <tt>install -d</tt>. Oryginalny plik Makefile nie
mia³ jej, gdy¿ zwykle katalog /usr/local/bin i inne katalogi istniej± ju¿ w
systemie zanim wyda siê polecenie `make install`. Jednak¿e, gdy zainstalujemy
program do Twojego w³asnego, pustego (lub nawet nie istniej±cego) katalogu, to
bêdziemy musieli stworzyæ ka¿dy z tych katalogów.

<p>Mo¿emy równie¿ dodaæ inne rzeczy na koñcu tej regu³y, na przyk³ad dodatkow±
dokumentacjê, któr± autor programu czasem pomija.

<p><example>
install -d $(DESTDIR)/usr/share/doc/gentoo/html
cp -a docs/* $(DESTDIR)/usr/share/doc/gentoo/html
</example>

<p>Uwa¿ny czytelnik zauwa¿y, ¿e zmieni³em `gentoo' na `gentoo-target' w linii
rozpoczynaj±cej siê od ci±gu `install:'. To jest tzw. naprawa b³êdu :-)

<p>Ilekroæ dokonasz zmian, które nie s± ¶ci¶le zwi±zane z pakietem Debiana,
upewnij siê, ¿e poinformowa³e¶ o nich autora programu, aby móg³ on je w³±czyæ
do nastêpnej poprawki programu i by równie¿ kto¶ inny móg³ z nich skorzystaæ.
Pamiêtaj tak¿e, ¿eby tworzyæ poprawki nie specyficzne dla Debiana, Linuksa
(lub nawet Uniksa!) przed ich wys³aniem -- niech bêd± one przeno¶ne. Dziêki
temu Twoje ³aty bêdzie ³atwiej na³o¿yæ.

<p>Zauwa¿, ¿e nie musisz wysy³aæ autorowi programu plików debian/*.

<sect id="difflibs">Nie zgadzaj±ce siê biblioteki

<p>Tutaj mamy pewien do¶æ powszechny problem: biblioteki czêsto ró¿ni± siê
pomiêdzy platformami, na których dzia³aj±. Dla przyk³adu, plik Makefile mo¿e
zawieraæ odwo³ania do biblioteki, której nie ma Debianie. W takim przypadku
musimy zmieniæ j± na bibliotekê, która jest dostêpna pod Debianem i s³u¿y tym
samym celom.

<p>Je¶li zatem w pliku Makefile (lub Makefile.in) Twojego programu istnieje
linia podobna do tej poni¿ej (i Twój program nie chce siê skompilowaæ):

<p><example>
LIBS = -lcurses -lco¶ -lco¶_innego
</example>

<p>to zmieñ j± w pokazany sposób i to powinno prawdopodobnie pomóc:

<p><example>
LIBS = -lncurses -lco¶ -lco¶_innego
</example>

<p>(Autor zdaje sobie sprawê, ¿e to nie jest najlepszy przyk³ad, zwa¿ywszy na
to, ¿e pakiet libncurses jest teraz dostarczany wraz z dowi±zaniem symbolicznym
do biblioteki wspó³dzielonej libcurses.so, ale nie móg³ on wymy¶liæ niczego
lepszego. Sugestie bêd± bardzo mile widziane :-))

<chapt id="dreq">Rzeczy wymagane w katalogu debian/

<p>W katalogu ze ¼ród³ami Twojego programu istnieje nowy podkatalog, który
nazywa siê `debian'. Zawiera on kilka plików, które bêdziemy edytowaæ, aby
dopasowaæ dzia³anie pakietu. Najwa¿niejszymi z nich s± pliki `control',
`changelog', `copyright' i 'rules', które s± wymagane w ka¿dym pakiecie.

<sect id="control">Plik `control'

<p>Ten plik zawiera ró¿ne informacje, których u¿ywaja programy <prgn/dpkg/ i
<prgn/dselect/ oraz inne narzêdzia s³u¿±ce do zarz±dzania pakietem.

<p>Poni¿ej przedstawiono plik control stworzony dla nas przez program dh_make.

<p><example>
1  Source: gentoo
2  Section: unknown
3  Priority: optional
4  Maintainer: Josip Rodin &lt;jrodin@jagor.srce.hr&gt;
5  Build-Depends: debhelper (>> 3.0.0)
6  Standards-Version: 3.5.2
7
8  Package: gentoo
9  Architecture: any
10 Depends: ${shlibs:Depends}
11 Description: &lt;insert up to 60 chars description&gt;
12  &lt;insert long description, indented with spaces&gt;
</example>

<p>(Numery linii zosta³y dodane przeze mnie)

<p>Linie 1-6 zawieraj± informacje kontrolne dla pakietu ¼ród³owego.

<p>Linia nr 1 zawiera nazwê pakietu ¼ród³owego.

<p>Linia nr 2 oznacza sekcjê dystrybucji, do której nale¿y pakiet.

<p>Byæ mo¿e zauwa¿y³e¶ ju¿, ¿e Debian jest podzielony na nastêpuj±ce sekcje:
`main' (zawiera wolne oprogramowanie), `non-free' (zawiera oprogramowanie,
które nie jest wolne) i `contrib' (zawiera wolne oprogramowanie, które wymaga
oprogramowania, które nie jest wolne). Dodatkowo ka¿da z sekcji dzieli siê na
logiczne podsekcje, które w skrócie mówi±, do czego s³u¿y dany pakiet. Mamy
zatem sekcjê `admin', która zawiera programy przeznaczone tylko dla
administratora systemu, `base' z podstawowymi narzêdziami, `devel' z
narzêdziami dla programistów, `doc' z dokumentacj±, `libs' z bibliotekami,
`mail' z programami do wysy³ania/odbierania poczty elektronicznej i z demonami
pocztowymi, `net' z aplikacjami sieciowymi i demonami us³ug sieciowych, `x11'
z programami dla systemu X11, które nie pasuj± nigdzie indziej i wiele innych
sekcji.

<p>Zmieñmy j± zatem na x11. (Prefiks "main/" jest przyjmowany domy¶lnie, wiêc
mo¿emy go pomin±æ)

<p>Linia nr 3 opisuje jak wa¿ne jest to, aby u¿ytkownik zainstalowa³ dany
pakiet. Wiêcej informacji na temat warto¶ci jakie mo¿e przyjmowaæ te pole
znajdziesz w podrêczniku Polityki Debiana. Dla nowych pakietów zazwyczaj mo¿e
ono przyjmowaæ warto¶æ "optional".

<p>Sekcja (Section) i priorytet (Priority) s± u¿ywane przez takie nak³adki
jak program dselect, które u¿ywaj± ich do sortowania pakietów i wyboru
domy¶lnego zestawu pakietów do zainstalowania. Gdy bêdziesz umieszcza³ swój
pakiet w archiwum Debiana, to warto¶æ tych dwóch pól mo¿e byæ nadpisana przez
opiekunów archiwum FTP. W takich przypadkach zostaniesz o tym powiadomiony
e-mailem.

<p>Poniewa¿ jest to pakiet o normalnym priorytecie, to pozostawiamy tam
warto¶æ "optional".

<p>Linia nr 4 zawiera imiê i nazwisko oraz adres e-mail opiekuna pakietu.
Upewnij siê, ¿e pole te zawiera warto¶æ odpowiedni± dla nag³ówka "To:", gdy¿ po
umieszczeniu pakietu w archiwum, system ¶ledzenia b³êdów u¿yje tego pola do
wysy³ania Ci e-maili ze zg³oszeniami b³êdów. Unikaj stosowania
przecinków, ampersandów (`&amp;') i nawiasów.

<p>Linia nr 5 zawiera listê pakietów wymaganych do zbudowania Twojego pakietu.
Niektóre pakiety, na przyk³ad gcc i make s± za³o¿one z góry, wiêcej szczegó³ów
na temat znajdziesz w pakiecie <package/build-essential/. Je¶li do zbudowania
Twojego pakietu jest potrzebny jaki¶ niestandardowy kompilator lub inne
narzêdzie, to powiniene¶ dodaæ tutaj liniê `Build-Depends'. Wpisy w tej linii
s± oddzielone od siebie za pomoc± przecinków; poczytaj na temat zale¿no¶ci
binariów, aby dowiedzieæ siê wiêcej na temat sk³adni tego pola.

<p>Mo¿esz tak¿e u¿yæ w tym miejscu takich pól jak Build-Depends-Indep,
Build-Conflicts i innych. Dane te s± u¿ywane przez oprogramowanie do
automatycznego budowania pakietów w celu stworzenia pakietów przeznaczonych
dla ró¿nych platform komputerowych. Wiêcej informacji na temat zale¿no¶ci w
trakcie budowania pakietu znajdziesz w podrêczniku Polityki. Dokument
Developers' Reference zawiera wiêcej szczegó³ów na temat innych platform
(architektur) oraz adaptowania (ang. porting) do nich oprogramowania.

<p>Poni¿ej pokazano sztuczkê, dziêki której odszukasz paczki, których
potrzebuje do zbudowania Twój pakiet:

<example>
strace -f -o /tmp/log ./configure
# or make instead of ./configure, if the package don't use autoconf
for x in `dpkg -S $(grep open /tmp/log|perl -pe 's!.* open\(\"([^\"]*).*!$1!' |grep "^/"| sort | uniq| grep -v "^\(/tmp\|/dev\|/proc\)" ) 2>/dev/null|cut -f1 -d":"| sort | uniq`; do echo -n "$x (>=" `dpkg -s $x|grep ^Version|cut -f2 -d":"` "), "; done
</example>

<p>Program gentoo wymaga do zbudowania pakietów <package/xlibs-dev/,
<package/libgtk1.2-dev/ i <package/libglib1.2-dev/, wiêc dodajmy je tutaj, aby
wykorzysta³ je <package/debhelper/.

<p>Linia nr 6 zawiera wersjê standardów polityki Debiana, któr± dany pakiet
spe³nia, wersjê podrêcznika Polityki, który czytasz w trakcie tworzenia Twojego
pakietu.

<p>Linia nr 8 to nazwa pakietu binarnego. Zwykle jest ona taka sama jak nazwa
pakietu ¼ród³owego, ale to nie jest regu³±.

<p>Linia nr 9 opisuje architekturê procesora, dla którego mo¿e byæ
skompilowany pakiet. Pozostawimy w niej "any", gdy¿ pakiet
<manref name="dpkg-gencontrol" section="1"> sam wstawi w tym miejscu
odpowiedni± warto¶æ dla ka¿dego typu maszyny, na której kompilowany jest
pakiet.

<p>Je¶li Twój pakiet jest niezale¿ny od architektury procesora (dla przyk³adu
skrypt pow³oki lub Perla, albo jaki¶ dokument), to wpisz tutaj "all" i
poczytaj pó¼niej w sekcji <ref id="rules"> na temat u¿ywania regu³y
`binary-indep' zamiast `binary-arch' do budowania pakietu.

<p>Linia nr 10 pokazuje jedn± z najpotê¿niejszych cech systemu pakietów
Debiana. Pakiety mog± znajdowaæ siê w ró¿nych relacjach z innymi pakietami.
Oprócz pola Depends: mog± te¿ wystêpowaæ pola opisuj±ce inne zwi±zki:
Recommends:, Suggests:, Pre-Depends:, Conflicts:, Provides: i Replaces:.

<p>Narzêdzia do zarz±dzania pakietami zwykle zachowuj± siê w ten sam sposób w
czasie ustalania stosunków miêdzy pakietami. Je¶li tak nie jest, to zostanie
to wkrótce wyja¶nione (wiêcej informacji znajdziesz na stronach podrêcznika
<manref name="dpkg" section="8">, <manref name="dselect" section="8">,
<manref name="apt" section="8">, <manref name="aptitude" section="1">, itd.)

<p>Pola te oznaczaj±:

<p><list>
<item>Depends: (Wymaga)

<p>Pakiet nie zostanie zainstalowany o ile pakiety, których on wymaga nie
s± ju¿ zainstalowane w systemie. U¿yj tego pola, gdy Twój program absolutnie
nie mo¿e byæ uruchomiony (lub spowoduje powa¿ne szkody), je¶li jaki¶
szczególny pakiet nie jest jeszcze obecny w systemie.</item>

<item>Recommends: (Zaleca)

<p>Nak³adki takie jak dselect czy aptitude zachêc± Ciê do zainstalowania
zalecanych pakietów wraz z Twoim pakietem; dselect bêdzie nawet na to
nalegaæ. Programy dpkg i apt-get jednak¿e zignoruj± te pole. U¿yj tego pola
dla pakietów, które nie s± niezbêdne, ale s± zwykle u¿ywane razem z Twoim
programem.</item>

<item>Suggests: (Poleca)

<p>Gdy u¿ytkownik instaluje Twój program, wszystkie nak³adki zachêc± go tak¿e
do zainstalowania pakietów, które on poleca. Programy dpkg i apt-get nie
powinny siê o nie troszczyæ. U¿yj tego pola dla pakietów, które bêd± dobrze
dzia³aæ z Twoim programem, ale nie s± dla niego niezbêdne.</item>

<item>Pre-Depends: (Przed-Wymaga)

<p>Jest to silniejsza relacja ni¿ Depends:. Pakiet nie zostanie zainstalowany
o ile pakiety, od których jest on przed-zale¿ny nie s± zainstalowane w
systemie i <em>poprawnie skonfigurowane</em>. U¿ywaj tego pola
<strong>bardzo</strong> oszczêdnie i jedynie po przedyskutowaniu tego na
li¶cie debian-devel. Czytaj: nie u¿ywaj go nigdy. :-)</item>

<item>Conflicts: (PowodujeKonflikt)

<p>Pakiet nie zostanie zainstalowany dopóki wszystkie pakiety, które powoduj±
konflikt nie zostan± wcze¶niej usuniête z systemu. U¿yj tego pola, gdy Twój
program absolutnie nie mo¿e byæ uruchomiony lub spowoduje jakie¶ problemy,
je¶li jaki¶ szczególny pakiet jest wci±¿ obecny w systemie.</item>

<item>Provides: (Dostarcza)

<p>Dla niektórych rodzajów pakietów zosta³o zdefiniowanych wiele
alternatywnych nazw wirtualnych. Pe³n± listê tych pakietów znajdziesz w pliku
/usr/share/doc/debian-policy/virtual-package-names-list.txt.gz. U¿yj tego
pola, je¶li Twój program dostarcza funkcjonalno¶ci istniej±cego ju¿ pakietu
wirtualnego.</item>

<item>Replaces: (Zastêpuje)

<p>U¿yj tego pola, gdy Twój program zastêpuje pliki jakiego¶ innego pakietu
lub zupe³nie zastêpuje jaki¶ pakiet (u¿ywane ³±cznie z polem Conflicts:).
Pliki z wymienionych pakietów zostan± nadpisane przez pliki z Twojego pakietu.
</item>
</list>

<p>Wszystkie te pola maj± jednolit± sk³adniê. Jest to lista nazw pakietów
oddzielonych za pomoc± przecinka. Nazwy pakietów mog± równie¿ byæ listami
alternatywnych nazw pakietów odseparowanych przy pomocy symbolu <tt>|</tt>
(symbol potoku).

<p>Pola mog± ograniczaæ swoje zastosowanie tylko do szczególnych wersji
ka¿dego wymienionego pakietu. Wersje te s± umieszczone w nawiasach po ka¿dej
nazwie pakietu i powinny zawieraæ relacje miêdzy numerami wersji pakietów.
Dozwolonymi relacjami s±: <tt>&lt;&lt;</tt>, <tt>&lt;=</tt>, <tt>=</tt>,
<tt>&gt;=</tt> i <tt>&gt;&gt;</tt> i odpowiednio oznaczaj±: 
wcze¶niejszy, wcze¶niejszy lub równy, dok³adnie równy, pó¼niejszy lub równy i
pó¼niejszy. Dla przyk³adu:

<p><example>
Depends: foo (>= 1.2), libbar1 (= 1.3.4)
Conflicts: baz
Recommends: libbaz4 (>> 4.0.7)
Suggests: quux
Replaces: quux (&lt;&lt; 5), quux-foo (&lt;= 7.6)
</example>

<p>Ostatni± cech±, o której powiniene¶/powinna¶ wiedzieæ jest
${shlibs:Depends}. Gdy Twój pakiet zostanie zbudowany i zainstalowany w
tymczasowym katalogu, program <manref name="dh_shlibdeps" section="1">
"prze¶wietli" go w poszukiwaniu binariów i bibliotek, okre¶li jakich
bibliotek wspó³dzielonych on wymaga i wykryje, w których pakietach siê one znajduj±,
na przyk³ad libc6 lub xlib6g. Nastêpnie
program <manref name="dh_gencontrol" section="1"> umie¶ci ich nazwy we
w³a¶ciwym miejscu, wiêc nie musisz siê o to martwiæ.

<p>Skoro ju¿ wszystko zosta³o powiedziane, to mo¿emy pozostawiæ linie nr 10 w
takiej postaci jak teraz i wstawiæ po niej inn± (<tt>Suggests: file</tt>),
która bêdzie mówi³a o pakiecie, które program gentoo sugeruje, poniewa¿ mo¿e
on u¿yæ niektórych funkcjonalno¶ci dostarczanych przez ten program/pakiet.

<p>Linia nr 11 zawiera krótki opis pakietu. Ekrany wiêkszo¶ci ludzi maj±
szeroko¶æ 80 kolumn, wiêc nie powinna ona zawieraæ wiêcej ni¿ 60 znaków. Ja
wpisa³em w niej "A fully GUI configurable X file manager using GTK+".

<p>Od linii nr 12 zaczyna siê d³u¿szy opis pakietu. Powinien to byæ paragraf
dostarczaj±cy wiêcej szczegó³ów na temat pakietu. Kolumna nr 1 ka¿dej linii
d³ugiego opisu powinna byæ pusta. Poniewa¿ opis ten nie mo¿e zawieraæ pustych
linii, to wszêdzie tam gdzie chcia³by¶ je wstawiæ musisz umie¶ciæ znak .
(kropka) w kolumnie nr 2. Tak¿e na koñcu d³ugiego opisu nie mo¿e siê pojawiæ
wiêcej ni¿ jedna pusta linia.

<p>A oto koñcowa postaæ uaktualnionego pliku `control':

<p><example>
1  Source: gentoo
2  Section: x11
3  Priority: optional
4  Maintainer: Josip Rodin &lt;jrodin@jagor.srce.hr&gt;
5  Build-Depends: debhelper (>> 3.0.0), xlibs-dev, libgtk1.2-dev, libglib1.2-dev
6  Standards-Version: 3.5.2
7
8  Package: gentoo
9  Architecture: any
10 Depends: ${shlibs:Depends}
11 Suggests: file
12 Description: A fully GUI configurable GTK+ file manager
13  gentoo is a file manager for Linux written from scratch in pure C. It
14  uses the GTK+ toolkit for all of its interface needs. gentoo provides
15  100% GUI configurability; no need to edit config files by hand and re-
16  start the program. gentoo supports identifying the type of various
17  files (using extension, regular expressions, or the 'file' command),
18  and can display files of different types with different colors and icons.
9  .
20  gentoo borrows some of its look and feel from the classic Amiga file
21  manager "Directory OPUS" (written by Jonathan Potter).
</example>

(Numery linii zosta³y dodane przeze mnie)

<sect id="copyright">Plik `copyright'

<p>Plik ten zawiera informacje o zewnêtrznych zasobach pakietu, prawach
autorskich i licencji. Jego format nie jest narzucony przez Politykê Debiana,
ale jego zawarto¶æ ju¿ tak (zobacz sekcjê 13.6 "Informacje o prawach
autorskich").

<p>Program dh_make stworzy³ ju¿ taki domy¶lny plik, którego zawarto¶æ jest
podobna do tej poni¿ej:

<p><example>
1  This package was debianized by Josip Rodin &lt;jrodin@jagor.srce.hr&gt; on
2  Wed, 11 Nov 1998 21:02:14 +0100.
3
4  It was downloaded from &lt;fill in ftp site&gt;
5
6  Upstream Author(s): &lt;put author(s) name and email here&gt;
7
8  Copyright:
9
10 &lt;Must follow here&gt;
</example>

(Numery linii zosta³y dodane przeze mnie)

<p>Wa¿nymi rzeczami, które powiniene¶ dodaæ do tego pliku jest miejsce, z
którego pobra³e¶ pakiet ze ¼ród³ami oraz informacje o prawach autorskich i
licencji. Musisz do³±czyæ kompletn± tre¶æ licencji, chyba ¿e jest to jedna z
popularnych licencji wolnego oprogramowania, takich jak GNU GPL i LGPL, BSD
lub licencja Artystyczna. W takiej sytuacji mo¿esz po prostu odes³aæ do
odpowiedniego pliku w katalogu /usr/share/common-licenses/, który wystêpuje w
ka¿dym systemie Debian.

<p>Poni¿ej pokazano w skrócie jak powinien wygl±daæ plik `control' dla programu
gentoo:

<p><example>
1  This package was debianized by Josip Rodin &lt;jrodin@jagor.srce.hr&gt; on
2  Wed, 11 Nov 1998 21:02:14 +0100.
3
4  It was downloaded from: ftp://ftp.obsession.se/gentoo/
5
6  Upstream author: Emil Brink &lt;emil@obsession.se&gt;
7
8  This software is copyright (c) 1998-99 by Emil Brink, Obsession
9  Development.
10
11 You are free to distribute this software under the terms of
12 the GNU General Public License.
13 On Debian systems, the complete text of the GNU General Public
14 License can be found in the file `/usr/share/common-licenses/GPL'.
</example>

<p>(Numery linii zosta³y dodane przeze mnie)

<sect id="changelog">Plik `changelog'

<p>Obecno¶æ tego pliku jest wymagana. Jego specjalny format opisano w Polityce
Debiana (sekcja 5.3 "debian/changelog"). Format ten jest wykorzystywany przez
dpkg i inne programy do uzyskiwania informacji o numerze wersji, poprawce,
dystrybucji i pilno¶ci Twojego pakietu.

<p>Jest on tak¿e wa¿ny dla Ciebie, poniewa¿ dobrze jest mieæ udokumentowane
wszystkie zmiany, których dokona³e¶. Pomaga to ludziom pobieraj±cym Twój pakiet
zorientowaæ siê czy nie zrobi³e¶ z pakietem czego¶, o czym powinni oni
wiedzieæ. Zmiany te zostan± zapisane do pliku
`/usr/share/doc/gentoo/changelog.Debian.gz' w pakiecie binarnym.

<p>Program dh_make równie¿ tworzy taki plik, którego zawarto¶æ wygl±da mniej
wiêcej tak:

<p><example>
1  gentoo (0.9.12-1) unstable; urgency=low
2
3   * Initial Release.
4
5  -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt;  Wed, 11 Nov 1998 21:02:14 +0100
</example>

<p>(Numery linii zosta³y dodane przeze mnie)

<p>Linia nr 1 zawiera nazwê pakietu, jego wersjê, dystrybucjê i pilno¶æ. Nazwa
musi siê zgadzaæ z nazw± pakietu ¼ród³owego, dystrybucja powinna mieæ warto¶æ
albo `unstable' (albo nawet `experimental'), za¶ pilno¶ci nie powiniene¶
zmieniaæ na warto¶æ wiêksz± ni¿ `low' (niska). :-)

<p>Linie 3-5 to dziennik, w którym dokumentujesz zmiany dokonane w poprawce
pakietu (ale nie zmiany zewnêtrzne - do tego celu s³u¿y specjalny plik
stworzony przez autorów programu, który pó¼niej zainstalujesz jako
/usr/share/doc/gentoo/changelog.gz). Nowe linie musz± byæ umieszczone przed
znajduj±c± siê na górze lini±, która rozpoczyna siê od gwiazdki (`*'). Mo¿esz
to zrobiæ przy pomocy <manref name="dch" section="1"> lub u¿ywaj±c jakiego¶
edytora tekstu.

<p>Zakoñcz ten plik podobnie jak poni¿ej:

<p><example>
1  gentoo (0.9.12-1) unstable; urgency=low
2
3   * Initial Release.
4   * This is my first Debian package.
5   * Adjusted the Makefile to fix $DESTDIR problems.
6
7  -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt; Wed, 11 Nov 1998 21:02:14 +0100
8
</example>

<p>(Numery linii zosta³y dodane przeze mnie)

<p>Wiêcej na temat pliku `changelog' bedziesz móg³ przeczytaæ pó¼niej w sekcji
<ref id="update">.

<sect id="rules">Plik `rules'

<p>Teraz musimy siê przyjrzeæ regu³om, których u¿yje program
<manref name="dpkg-buildpackage" section="1"> do stworzenia pakietu.
Plikiem tym jest obecnie Makefile, lecz inny ni¿ ten/te znajduj±cy/znajduj±ce
siê w ¼ród³ach programu. W odró¿nieniu od innych plików znajduj±cych siê w
katalogu debian/ ma on ustawiony atrybut wykonywalno¶ci.

<p>Ka¿dy plik `rules', tak samo jak plik Makefile, zawiera ró¿ne regu³y,
które wyszczególniaj± jak postêpowaæ ze ¼ród³em. Ka¿da regu³a z kolei zawiera
cele (targets), czyli nazwy plików b±d¼ akcji, które powinny byæ stworzone lub
wykonane (na przyk³ad `build:' lub `install:'). Regu³y, które chcesz wykonaæ
s± wywo³ywane z linii komend jako argumenty poleceñ (dla przyk³adu
`./debian/rules build` albo `make -f rules install`). Po nazwie celu mo¿esz
wymieniæ zale¿no¶æ, program lub plik, który od tej regu³y zale¿y. W kolejnych
liniach mo¿na wymieniæ dowoln± liczbê komend, rozpoczynaj±c je od znaku
&lt;tab&gt;. Nowa regu³a zaczyna siê od deklaracji w pierwszej kolumnie.
Puste linie i linie rozpoczynaj±ce siê od znaku `#' (hash) s± traktowane jako
komentarz i ignorowane.

<p>Pewnie jeste¶ teraz nieco zagubiony, ale wszystko stanie siê jasne w czasie
przegl±dania pliku `rules', który domy¶lnie zostanie stworzony przez program
dh_make. Powiniene¶ te¿ przeczytaæ o programie `make' (poprzez `info make'),
aby uzyskaæ wiêcej informacji na jego temat. 

<p>Wa¿ne jest, aby pamiêtaæ, ¿e pliki `rules' stworzone przez dh_make s± po
prostu tylko propozycjami. Dzia³aj± one z prostymi pakietami, ale w przypadku
bardziej skomplikowanych nie obawiaj siê ich modyfikowaæ. Dodawaj to, co jest
potrzebne i usuwaj to, co jest zbêdne. Jedyn± rzecz±, której nie mo¿esz
zmieniaæ to nazwy regu³, gdy¿ u¿ywaj± ich wszystkie narzêdzia, zgodnie z
wytycznymi zawartymi w Polityce Debiana.

<p>Poni¿ej pokazano (w przybli¿eniu) domy¶lny plik debian/rules, który zosta³
dla nas wygenerowany przez program dh_make:

<p><example>
1  #!/usr/bin/make -f
2  # Sample debian/rules that uses debhelper.
3  # GNU copyright 1997 to 1999 by Joey Hess.
4
5  # Uncomment this to turn on verbose mode.
6  #export DH_VERBOSE=1
7
8  # This is the debhelper compatibility version to use.
9  export DH_COMPAT=3
10
11 ifneq (,$(findstring debug,$(DEB_BUILD_OPTIONS)))
12         CFLAGS += -g
13 endif
14 ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
15         INSTALL_PROGRAM += -s
16 endif
17
18 build: build-stamp
19 build-stamp:
20	dh_testdir
21
22	# Add here commands to compile the package.
23	$(MAKE)
24	#/usr/bin/docbook-to-man debian/gentoo.sgml > gentoo.1
25
26	touch build-stamp
27
28 clean:
29	dh_testdir
30	dh_testroot
31	rm -f build-stamp
32
33	# Add here commands to clean up after the build process.
34	-$(MAKE) clean
35
36	dh_clean
37
38 install: build
39	dh_testdir
40	dh_testroot
41	dh_clean -k
42	dh_installdirs
43
44	# Add here commands to install the package into debian/gentoo.
45	$(MAKE) install DESTDIR=$(CURDIR)/debian/gentoo
46
47 # Build architecture-independent files here.
48 binary-indep: build install
49 # We have nothing to do by default.
50
51 # Build architecture-dependent files here.
52 binary-arch: build install
53	dh_testdir
54	dh_testroot
55 #	dh_installdebconf
56	dh_installdocs
57	dh_installexamples
58	dh_installmenu
59 #	dh_installlogrotate
60 #	dh_installemacsen
61 #	dh_installpam
62 #	dh_installmime
63 #	dh_installinit
64	dh_installcron
65	dh_installman
66	dh_installinfo
67 #	dh_undocumented
68	dh_installchangelogs ChangeLog
69	dh_link
70	dh_strip
71	dh_compress
72	dh_fixperms
73 #	dh_makeshlibs
74	dh_installdeb
75 #	dh_perl
76	dh_shlibdeps
77	dh_gencontrol
78	dh_md5sums
79	dh_builddeb
80
81 binary: binary-indep binary-arch
82 .PHONY: build clean binary-indep binary-arch binary install
</example>

(Numery linii zosta³y dodane przeze mnie)

<p>Z liniami takimi jak linia nr 1 prawdopodobnie spotka³e¶ siê ju¿ w
skryptach pow³oki albo Perla. Mówi ona systemowi operacyjnemu, ¿e plik ten ma
byæ przetwarzany przez program `/usr/bin/make'.

<p>Znaczenie zmiennych DH_*, których u¿yto w liniach 6 i 9 powinno byæ
zrozumia³e dziêki krótkiemu opisowi. Wiêcej informacji na temat zmiennej
DH_COMPAT znajdziesz w sekcji "Debhelper compatibility levels" na stronie
podrêcznika programu <manref name="debhelper" section="1">.

<p>Linie 11-16 to szablon wspieraj±cy parametry DEB_BUILD_OPTIONS, które
opisano w Polityce Debiana (sekcja 11.1 "Binaries"). Po prostu mówi± one czy
w binaria maj± byæ wbudowane symbole s³u¿±ce do odpluskwiania (ang. debugging) i czy
powinny one byæ usuniête przy instalacji. To jest szablon, wskazówka, któr±
powinine¶/powinna¶ wykonaæ. Musisz równie¿ sprawdziæ w jaki sposób zewnêtrzny
system obs³uguje w³±czanie symboli odpluskwiaj±cych i usuwanie ich po
instalacji i zaimplementowaæ to samemu.

<p>Zwykle mo¿esz nakazaæ kompilatorowi gcc u¿ycie opcji "-g" przy pomocy
zmiennej CFLAGS. Je¶li tak jest w przypadku Twojego pakietu, przeka¿ warto¶æ tej zmiennej
<em>dodanie</em> ³añcucha <tt>CFLAGS="$(CFLAGS)"</tt> do wywo³ania
$(MAKE) w regule `build' (zobacz poni¿ej). Je¶li za¶ Twój pakiet u¿ywa skryptu
konfiguracyjnego autoconfa, to mo¿esz zmodyfikowaæ konfiguracjê przez
<em>poprzedzenie</em> powy¿szym ³añcuchem wywo³ania skryptu ./configure w
regule `build'.

<p>Je¶li chodzi o pozbywanie siê symboli odpluskwiaj±cych, to programy s±
na ogó³ tak skonfigurowane, ¿e instaluj± siê z nimi i czêsto nie maj± opcji
umo¿liwiaj±cej zmianê tego stanu. Na szczê¶cie masz program
<manref name="dh_strip" section="1">, który wykryje, gdy ustawiona jest opcja
DEB_BUILD_OPTIONS=nostrip i bez rozg³osu zakoñczy swe dzia³anie.

<p>Linie 18-26 opisuj± regu³ê `build' (i jej dziecko `build-stamp'), która
uruchamia program make na oryginalnym pliku
Makefile aplikacji, aby skompilowaæ program. Na temat wykomentowanego przyk³adu pokazuj±cego
w jaki sposób przekonwertowaæ dokument w formacie DocBook na stronê podrêcznika
systemowego opowiemy dalej, w rozdziale <ref id="manpage">.

<p>Regu³a `clean' zawarta pomiêdzy liniami 28-36 czy¶ci wszystkie niepotrzebne
pliki binarne i automatycznie wygenerowane rzeczy, które zosta³y po
zbudowaniu pakietu. Regu³a ta musi dzia³aæ przez ca³y czas (nawet, gdy
drzewo ze ¼ród³ami <em>jest</em> wyczyszczone!), zatem proszê u¿ywaæ opcji
wymuszaj±cej (na przyk³ad dla komeny rm jest ni± opcja `-f') lub ignoruj±cej
zwracane warto¶ci (b³êdy) dziêki zastosowaniu opcji `-' przed nazw± komendy.

<p>Regu³a `install', która odpowiada za proces instalacji, rozpoczyna siê w
linii nr 38. Uruchamia ona po prostu regu³ê `install' z pliku Makefile
programu i instaluje go w katalogu <tt>$(CURDIR)/debian/gentoo</tt>. Oto
dlaczego okre¶lili¶my zmienn± $(DESTDIR) jako katalog bazowy do instalacji w
pliku Makefile programu gentoo.

<p>Jak t³umaczy komentarz, regu³a `binary-indep', która znajduje siê w linii
nr 48, jest u¿ywana do budowania pakietów niezale¿nych od architektury
procesora. Je¶li nie mamy takiego pakietu, to ¿adna akcja nie zostanie
wykonana.

<p>Nastêpn± regu³± jest `binary-arch' znajduj±ca siê pomiêdzy liniami 52-73.
Uruchamia ona kilka ma³ych programów narzêdziowych z pakietu debhelper, które
wykonuj± ró¿ne operacje z plikami Twojego pakietu, aby uczyniæ go zgodnym z
Polityk± Debiana.

<p>Gdy okre¶li³e¶ architekturê Twojego pakietu jako `Architecture: all', to
bêdziesz musia³ umie¶ciæ w tej regule wszystkie komendy do budowania pakietu i
pozostawiæ pust± nastêpn± regu³ê (`binary-arch').

<p>Nazwy programów wchodz±cych w sk³ad pakietu debhelper rozpoczynaj± siê od
dh_. Reszta jest opisem tego, co dane narzêdzie robi. Mimo, ¿e do¶æ dobrze
same siê one obja¶niaj±, to poni¿ej zamieszczono dodatkowe wyt³umaczenia:

<list>
<item><manref name="dh_testdir" section="1"> sprawdza czy jeste¶ we w³a¶ciwym
      katalogu (tzn. na samej górze katalogu ze ¼ród³ami),

<item><manref name="dh_testroot" section="1"> sprawdza czy masz uprawnienia
      administratora systemu, których wymagaj± cele `binary-arch',
      `binary-indep' i `clean',

<item><manref name="dh_installman" section="1"> kopiuje strony podrêcznika
      systemowego we w³a¶ciwe miejsce w katalogu przeznaczenia. Musisz tylko
      powiedzieæ, gdzie one siê znajduj±, wzglêdem g³ównego katalagu ze
      ¼ród³ami,

<item><manref name="dh_strip" section="1"> usuwa z plików wykonywalnych i
      bibliotek nag³ówki s³u¿±ce do odpluskwiania, aby uczyniæ je mniejszymi,

<item><manref name="dh_compress" section="1"> pakuje programem gzip strony
      podrêcznika i dokumentacjê wiêksz± ni¿ 4 kB,

<item><manref name="dh_installdeb" section="1"> kopiuje pliki zwi±zane z
      pakietem (na przyk³ad skrypty opiekuna) do katalogu
      <file>debian/gentoo/DEBIAN</file>,

<item><manref name="dh_shlibdeps" section="1"> wylicza zale¿no¶ci bibliotek i
      plików wykonywalnych od bibliotek wspó³dzielonych,

<item><manref name="dh_gencontrol" section="1"> instaluje "ulepszon±" wersjê
      pliku `control' w katalogu <file>debian/gentoo/DEBIAN</file>,

<item><manref name="dh_md5sums" section="1"> generuje sumy kontrolne MD5 dla
      ka¿dego pliku zawartego w pakiecie.
</list>

<p>Dok³adne informacje na temat dzia³ania ka¿dego skryptu dh_* i ich
parametrów wywo³ania znajdziesz na odpowiedniej stronie podrêcznika. Oprócz
wymienionych powy¿ej, istniej± równie¿ inne skrypty dh_*, które nie zosta³y tu
wspomniane. Je¶li potrzebujesz ich, to poczytaj dokumentacjê do pakietu
debhelper.

<p>W sekcji `binary-arch' powiniene¶ naprawdê wykomentowaæ linie z tymi
wszystkimi skryptami dh_*, których nie chcesz wywo³ywaæ. Dla pakietu gentoo
wykomentowa³em wywo³anie skryptów examples, cron, init, man i info, gdy¿
gentoo ich po prostu nie potrzebuje. W linii nr 68 zamieni³em `ChangeLog'
na `FIXES', poniewa¿ jest to rzeczywista nazwa zewnêtrznego pliku z
dziennikiem zmian.

<p>Dwie ostatnie linie (i pozosta³e nie wyja¶nione tutaj) s± mniej lub
bardziej niezbêdne. Na ich temat mo¿esz poczytaæ na stronie podrêcznika do
programu make oraz w Polityce Debiana. W tym momencie nie musisz o nich nic
wiedzieæ.

<chapt id="dother">Inne pliki z katalogu debian/

<p>Jak zobaczysz, w katalogu debian/ znajduj± siê jeszcze inne ró¿ne pliki.
Wiêkszo¶æ z nich koñczy siê przyrostkiem `.ex', oznaczaj±cym, ¿e s± to
przyk³ady. Przyjrzyj im siê wszystkim. Je¶li chcesz lub potrzebujesz u¿yæ
której¶ ich funkcjonalno¶ci, to:

<p><list>
<item>zajrzyj do odpowiedniej dokumentacji (wskazówka: podrêcznik Polityki
      Debiana,
<item>je¶li to konieczne, zmodyfikuj zawarto¶æ plików wed³ug w³asnych potrzeb,
<item>usuñ z ich nazwy przyrostek `.ex', je¶li taki posiadaj±,
<item>zmodyfikuj plik `rules', gdy zachodzi taka konieczno¶æ.
</list>

<p>Niektóre z tych plików, najczê¶ciej u¿ywane, s± wyja¶nione w poni¿szych
sekcjach.

<sect id="readme">Plik `README.Debian'

<p>W tym pliku powinny byæ udokumentowane dodatkowe szczegó³y lub rozbie¿no¶ci
pomiêdzy oryginalnym pakietem i Twoj± "zdebianizowan±" wersj±.

<p>Program dh_make tworzy domy¶lny plik README.Debian, który jest podobny do
tego poni¿ej:

<p><example>
gentoo for Debian
-----------------

&lt;possible notes regarding this package - if none, delete this file&gt;

 -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt;, Wed, 11 Nov 1998 21:02:14 +0100
</example>

<p>Poniewa¿ nie musimy niczego umieszczaæ w tym pliku, to mo¿emy go skasowaæ.

<sect id="conffiles">Plik `conffiles.ex'

<p>Jedn± z najbardziej irytuj±cych rzeczy zwi±zanych z oprogramowaniem jest
to, ¿e po po¶wiêceniu du¿ej ilo¶ci czasu i wysi³ku na dostosowaniu programu,
jego aktualizacja wszystko "zadeptuje". Debian rozwi±za³ ten problem przez
"znakowanie" plików konfiguracyjnych. Zatem, je¶li uaktualniasz program do
nowszej wersji, to zostaniesz zapytany o to czy chcesz zachowaæ swoj± star±
konfiguracjê, czy nie.

<p>Aby to uzyskaæ, musisz wprowadziæ pe³n± ¶cie¿kê do ka¿dego pliku
konfiguracyjnego (ka¿da ¶cie¿ka w osobnej linii) do pliku nazwanego
<tt/conffiles/. Zwykle pliki te s± umieszczone w katalogu /etc. Program
gentoo ma jeden taki plik, /etc/gentoorc, zatem podamy ¶cie¿kê do niego w
pliku <tt/conffiles/.

<p>Je¶li Twój program u¿ywa plików konfiguracyjnych, ale sam zmienia ich
zawarto¶æ, to najlepiej bêdzie nie umieszczaæ ich w pliku <tt/conffiles/,
poniewa¿ program dpkg bêdzie za ka¿dym razem prosi³ u¿ytkowników o weryfikacjê
zmian.

<p>Je¶li program, który pakujesz, wymaga do dzia³ania od ka¿dego u¿ytkownika
modyfikacji pliku konfiguracyjnego, to równie¿ powiniene¶ zastanowiæ siê nad rezygnacj± z
umieszczania go w pliku  <tt/conffiles/.

<p>Przyk³adowe pliki konfiguracyjne mo¿esz znale¼æ w skryptach opiekuna
pakietu. Wiêcej szczegó³ów na ich temat zamieszczono w sekcji
<ref id="maintscripts">.

<p>Je¶li Twój program nie posiada plików konfiguracyjnych, to mo¿esz bez obaw
wykasowaæ plik <tt/conffiles/ z katalogu debian/.

<sect id="crond">Plik `cron.d.ex'

<p>Je¶li Twój pakiet do prawid³owego dzia³ania wymaga regularnie wykonywanych
zadañ, to mo¿esz do tego celu wykorzystaæ w³a¶nie plik <tt/cron.d/.

<p>Zwróæ uwagê, i¿ to nie obejmuje zagadnieñ zwi±zanych z "obracaniem" plików dziennika. Wiêcej
informacji na ten temat znajdziesz na stronach podrêcznika
<manref name="dh_installlogrotate" section="1"> i <manref name="logrotate"
section="8">.

<p>Je¶li nie potrzebujesz tego pliku, to usuñ go.

<sect id="dirs">Plik `dirs'

<p>Plik ten okre¶la katalogi, które s± potrzebne, ale których normalna
procedura instalacyjna (make install) nie tworzy.

Domy¶lnie, plik ten wygl±da nastêpuj±co:

<p><example>
usr/bin
usr/sbin
</example>

<p>Zwróæ uwagê, i¿ przed nazwami katalogów nie wystêpuj± znaki uko¶ników
(`/'). Normalnie zmieniliby¶my j± w nastêpuj±cy sposób:

<p><example>
usr/bin
usr/man/man1
</example>

<p>ale poniewa¿ katalogi te s± tworzone przez plik Makefile, to nie
potrzebujemy pliku `dirs' i mo¿emy go usun±æ.

<sect id="docs">Plik `docs'

<p>Ten plik okre¶la nazwy plików z dokumentacj±, któr± program dh_installdocs
zainstaluje dla nas w tymczasowym katalogu.

<p>Domy¶lnie, obejmuje to tak¿e istniej±ce ju¿ w katalogu g³ównym ze ¼ród³ami
programu takie pliki, jak "BUGS", "README*", "TODO", itd.

<p>Dla programu gentoo do³±czy³em równie¿ inne pliki:

<p><example>
BUGS
CONFIG-CHANGES
CREDITS
ONEWS
README
README.gtkrc
TODO
</example>

<p>Zamiast podawaæ listê plików mo¿emy równie¿ u¿yæ ich nazw jako argumentów
wej¶ciowych dla programu <tt/dh_installdocs/ wywo³ywanego w pliku <tt/rules/:

<p><example>
dh_installdocs BUGS CONFIG-CHANGES CREDITS ONEWS README \
               README.gtkrc TODO
</example>

<p>Mo¿e siê tak zdarzyæ, ¿e bêdziesz mieæ ¿adnego z tych plików w ¼ród³ach
Twojego pakietu. W takim przypadku mo¿esz bezpiecznie usun±æ ten plik. Nie
usuwaj jedynie wywo³ania programu <tt/dh_installdocs/ z pliku <tt/rules/,
poniewa¿ jest on u¿ywany równie¿ do instalacji pliku <tt/copyright/ i kilku
innych rzeczy.

<sect id="emacsen">Plik `emacsen-*.ex'

<p>Je¶li Twój pakiet zawiera pliki Emacsa, które mog± byæ skompilowane do kodu
bajtowego w czasie instalacji, to mo¿esz u¿yæ tych plików w³a¶nie w tym celu.

<p>Pliki te s± instalowane w katalogu tymczasowym przez program
<manref name="dh_installemacsen" section="1">, zatem je¶li chcesz go wywo³aæ,
to nie zapomnij odkomentowaæ odpowiedniej linii w pliku <tt/rules/.

<p>Je¶li za¶ nie potrzebujesz tych plików, to mo¿esz je usun±æ.

<sect id="initd">Plik `init.d.ex'

<p>Je¶li Twój pakiet jest demonem, który musi byæ uruchamiany w czasie startu
systemu, to znaczy, ¿e nie pos³ucha³e¶ moich zaleceñ we wstêpie do tego
podrêcznika, nieprawda¿? :-)

<p>Plik ten jest prostym szablonem skryptu umieszczanego w katalogu
<file>/etc/init.d/</file>, zatem bêdziesz musia³ nie¼le go przerobiæ. Zostanie
on zainstalowany w katalogu tymczasowym przez program
<manref name="dh_installinit" section="1">.

<p>Je¶li nie potrzebujesz tego pliku, to usuñ go.

<sect id="manpage">Pliki `manpage.1.ex', `manpage.sgml.ex'

<p>Twój program/programy powinien/powinny mieæ stronê podrêcznika systemowego.
Je¶li jeszcze jej nie ma, to mo¿esz u¿yæ tych plikó jako szablonów.

<p>Strony podrêcznika s± zwykle napisane w formacie <manref name="nroff"
section="1">. W formacie tym napisano w³a¶nie przyk³adowy plik
<tt/manpage.1.ex/. Zobacz stronê podrêcznika programu <manref name="man"
section="7">, aby dowiedzieæ siê wiêcej na temat tworzenia stron podrêcznika.

<p>Je¶li zamiast formatu nroff wolisz pisaæ dokumenty w formacie SGML, to
mo¿esz wykorzystaæ szablon <tt/manpage.sgml.ex/. Bêdziesz te¿ musia³:

<list>
<item>zainstalowaæ pakiet <package/docbook-to-man/,
<item>dopisaæ <tt/docbook-to-man/ do linii <tt/Build-Depends/ w pliku
      <tt/control/,
<item>usun±æ znak komentarza przed wywo³aniem programu docbook-to-man w regule
      `build' w pliku <tt/rules/.
</list>

<p>Pamiêtaj o zmianie nazwy pliku na co¶ takiego jak <tt/gentoo.sgml/!

<p>Nazwa pliku ze stron± podrêcznika systemowego powinna zawieraæ nazwê
programu, który opisuje, zatem zmieñ j± z "manpage" na "gentoo". Nazwa tego
pliku zawiera tak¿e przyrostek ".1", który mówi, ¿e jest to strona komendy
u¿ytkownika. Upewnij siê, do której sekcji powinna nale¿eæ strona Twojego
pakietu. Poni¿ej zamieszczono listê wyja¶niaj±c± przeznaczenie ka¿dej sekcji:

<p><example>
Sekcja  |          Opis           |          Uwagi
   1     Polecenia u¿ytkownika     Wykonywalne komendy lub skrypty.
   2     Wywo³ania systemowe       Funkcje dostarczane przez j±dro systemu.
   3     Wywo³ania biblioteczne    Funkcje z bibliotek systemowych.
   4     Pliki specjalne           Zwykle umieszczone w katalogu /dev.
   5     Formaty plików            Na przyk³ad format pliku /etc/passwd.
   6     Gry                       Lub inne rozrywkowe programy.
   7     Pakiety z makrami         Takie jak makra programu man.
   8     Administracja systemem    Programy zwykle uruchamiane tylko przez
                                   administratora systemu.
   9     Procedury j±dra           Niestandardowe wywo³ania i procedury
                                   wewnêtrzne.
</example>

<p>Zatem strona programu gentoo powinna siê nazywaæ <tt/gentoo.1/. Dla
programów przeznaczonych dla systemu X11 mo¿esz dodaæ "x" do numeru sekcji,
na przyk³ad <tt/gentoo.1x/. Poniewa¿ w oryginalnych ¼ród³ach nie by³o strony
podrêcznika `gentoo.1', to napisa³em j± sam, u¿ywaj±c informacji znalezionych
w przyk³adach i dokumentacji do³±czonej do ¼róde³.

<sect id="menu">Plik `menu.ex'
 
<p>U¿ytkownicy systemu X Window zwykle pos³uguj± siê menad¿erami okien,
umo¿liwiaj±cymi uruchamianie programów poprzez rozwijalne menu, które mo¿na
dostosowywaæ do w³asnych potrzeb. Je¶li zainstalowali oni pakiet
<package/menu/, to zostanie dla nich stworzony zestaw menu s³u¿±cy do
uruchamiania programów w systemie.

<p>Poni¿ej pokazano plik <tt/menu.ex/, domy¶lnie utworzony przez program
dh_make:

<p><example>
?package(gentoo):needs=X11|text|vc|wm section=Apps/see-menu-manual\
  title="gentoo" command="/usr/bin/gentoo"
</example>

<p>Pierwszym polem po znaku dwukropka jest pole "needs", które okre¶la jakiego
rodzaju interfejsu wymaga program. Zmieñ je na jedn± z wymienionych
mo¿liwo¶ci, na przyk³ad "text" lub "X11".

<p>Nastêpnym polem jest "section", które mówi w jakim menu i podmenu powinien
znale¼æ siê wpis z programem gentoo. Aktualn± listê sekcji mo¿na znale¼æ na
stronie <file>/usr/share/doc/debian-policy/menu-policy.html/ch2.html#s2.1</file>

<p>Trzecie pole "title" to nazwa programu. Je¶li chcesz, to mo¿esz rozpocz±æ je
od wielkiej litery. Powinno one byæ krótkie.

<p>Wreszcie pole "command" to nazwa komendy, która uruchamia program.

<p>Po zmianach wpis do menu wygl±da nastêpuj±co:

<p><example>
?package(gentoo): needs=X11 section=Apps/Tools title="Gentoo" command="gentoo"
</example>

<p>Mo¿esz równie¿ dodaæ inne pola, na przyk³ad "longtitle", "icon", "hints",
itd. Wiêcej informacji mo¿esz znale¼æ na stronach podrêcznika
<manref name="menufile" section="5">, <manref name="update-menus" section="1">
i w katalogu /usr/share/doc/debian-policy/menu-policy.html/.

<sect id="watch">Plik `watch.ex'

<p>Mo¿esz u¿yæ tego pliku jako dodatek do programów <manref name="uscan"
section="1"> i <manref name="uupdate" section="1"> zawartych w pakiecie
<package/devscripts/, aby obserwowaæ stronê, z której pobra³e¶ oryginalne
¼ród³a.

<p>Poni¿ej pokazano to, co umie¶ci³em w tym pliku:

<p><example>
# watch control file for uscan
# Site              Directory    Pattern                 Version    Script
ftp.obsession.se    /gentoo      gentoo-(.*)\.tar\.gz    debian     uupdate
</example>

<p>Wskazówka: po³±cz siê z Internetem i próbuj uruchomiæ program "uscan" w
katalogu, w którym stworzy³e¶ plik `watch'. Przeczytaj równie¿ strony
podrêczników! :)

<sect id="doc-base">Plik `ex.package.doc-base'

<p>Je¶li Twój pakiet ma dokumentacjê w postaci innej ni¿ strony podrêcznika i
dokumentacja przegl±dana za pomoc± programu "info", to powiniene¶ u¿yæ pliku
`<package/doc-base/', aby j± zarejestrowaæ. U¿ytkownik bêdzie móg³ j± znale¼æ,
na przyk³ad za pomoc± programu <manref name="dhelp" section="1">,
<manref name="dwww" section="1"> lub <manref name="doccentral" section="1">.

<p>Na ogó³ obejmuje to pliki HTML, PS i PDF umieszczone w katalogu
<file>/usr/share/doc/nazwa_pakietu/</file>.

<p>Plik ten dla programu gentoo wygl±da nastêpuj±co:

<p><example>
Document: gentoo
Title: Gentoo Manual
Author: Emil Brink
Abstract: This manual describes what Gentoo is, and how it can be used.
Section: Apps/Tools

Format: HTML
Index: /usr/share/doc/gentoo/html/index.html
Files: /usr/share/doc/gentoo/html/*.html
</example>

<p>Informacje na temat formatu tego pliku znajdziesz na stronie podrêcznika
<manref name="install-docs" section="8"> oraz w podrêczniku <package/doc-base/
(katalog <file>/usr/share/doc/doc-base/doc-base.html/</file>).

<sect id="maintscripts">Pliki `postinst.ex', `preinst.ex', `postrm.ex',
`prerm.ex'

<p>Pliki te s± nazywane skryptami opiekuna. Umieszczone s± one w obszarze
kontrolnym pakietu i uruchamiane przez program <prgn/dpkg/, gdy Twój pakiet
jest instalowany, uaktualniany do nowszej wersji lub usuwany.

<p>Na razie powiniene¶/powinna¶ unikaæ rêcznych modyfikacji tych skryptów,
poniewa¿ czêsto s± one skomplikowane. Wiêcej informacji znajdziesz w dokumencie
Packaging Manual, w sekcji 6. Zerknij tak¿e na przyk³adowe pliki dostarczone
przez program dh_make.

<chapt id="build">Budowanie pakietu

<p>Teraz ju¿ powinni¶my byæ gotowi do zbudowania pakietu.

<sect id="completebuild">Ca³kowita przebudowa

<p>Wejd¼ do katalogu g³ównego programu i wydaj w nim komendê:

<p><example>
dpkg-buildpackage -rfakeroot
</example>

<p>Wykona ona wszystko za Ciebie, tzn.:

<list>
<item>wyczy¶ci drzewo ze ¼ród³ami programu (debian/rules clean), u¿ywaj±c
      programu <prgn/fakeroot/,
<item>zbuduje pakiet ¼ród³owy (dpkg-source -b),
<item>zbuduje program (debian/rules build),
<item>zbuduje pakiet binarny (debian/rules binary), u¿ywaj±c programu
      <prgn/fakeroot/,
<item>podpisze ¼ród³owy plik <tt/.dsc/, u¿ywaj±c programu <prgn/gnupg/
<item>stworzy i podpisze umieszczany w archiwum Debiana plik <tt/.changes/,
      u¿ywaj±c programów <prgn/dpkg-genchanges/ i <prgn/gnupg/.
</list>

<p>Bêdziesz musia³ tylko dwukrotnie wprowadziæ has³o do Twojego prywatnego
klucza GGP.

<p>Po jej zakoñczeniu zobaczysz nastêpuj±ce pliki w katalogu nadrzêdnym
(<tt>~/debian/</tt>):

<p><list>
<item><em>gentoo_0.9.12.orig.tar.gz</em>

<p>To archiwum z oryginalnym kodem ¼ród³owym programu. Jego nazwa zosta³a
zmieniona, aby zachowaæ standard Debiana. Zwróæ uwagê, i¿ plik ten zosta³
stworzony przy u¿yciu opcji `-f' przez program <prgn/dh_make/, gdy na wstêpie
go uruchomili¶my.

<item><em>gentoo_0.9.12-1.dsc</em>

<p>To streszczenie zawarto¶ci kodu ¼ród³owego. Plik ten jest generowany na
podstawie pliku `control' i u¿ywany w czasie rozpakowywania ¼ród³a przez
program <manref name="dpkg-source" section="1">. Jest on podpisany cyfrowo
przez PGP, aby inni ludzie mogli byæ pewni, ¿e jest naprawdê Twój.

<item><em>gentoo_0.9.12-1.diff.gz</em>

<p>Ten skompresowany plik zawiera wszystkie zmiany, których dokona³e¶ w
oryginalnym kodzie ¼ród³owym. Zmiany te s± zapisane w formacie
"unified diff". Plik jest utworzony i u¿ywany przez program
<manref name="dpkg-source" section="1">. Ostrze¿enie: je¶li nie nazwa³e¶
oryginalnego archiwum ze ¼ród³ami programu nazwa_programu_wersja.orig.tar.gz,
to program <prgn/dpkg-source/ nie wygeneruje poprawnego pliku .diff.gz!

<p>Gdyby kto¶ jeszcze chcia³ ponownie utworzyæ Twój pakiet zaczynaj±c
procedurê od pocz±tku, to mo¿e ³atwo to zrobiæ u¿ywaj±c tych trzech powy¿szych
plików. Procedura postêpowania w takich przypadkach jest wrêcz banalna: po
prostu nale¿y gdzie¶ skopiowaæ te trzy pliki i wydaæ komendê
<tt>dpkg-source -x gentoo_0.9.12-1.dsc</tt>.

<item><em>gentoo_0.9.12-1_i386.deb</em>

<p>To kompletny pakiet binarny. Mo¿esz u¿yæ programu <prgn/dpkg/, aby
zainstalowaæ go lub usun±æ w taki sam sposób, jak ka¿dy inny pakiet.

<item><em>gentoo_0.9.12-1_i386.changes</em>

<p>Plik ten opisuje wszystkie zmiany dokonane w aktualnej poprawce pakietu.
U¿ywaj± go programy utrzymuj±ce archiwa FTP Debiana do zainstalowania w nich
pakietów binarnych i ¼ród³owych. Jest on czê¶ciowo generowany z plików
`changelog' i .dsc. Jest on podpisany cyfrowo przez PGP, aby inni ludzie mogli
byæ pewni, ¿e jest naprawdê Twój.

<p>W czasie, gdy bêdziesz siê zajmowa³ pakietem, zmieni siê pewnie jego
dzia³anie i dodane zostan± nowe funkcjonalno¶ci. Ludzie pobieraj±cy Twój
pakiet mog± w tym pliku szybko zobaczyæ, co siê zmieni³o. Programy zarz±dzaj±ce
archiwum Debiana wy¶l± równie¿ zawarto¶æ tego pliku na listê dyskusyjn±
debian-devel-changes.
</list>

<p>D³ugie ³añcuchy liczb w plikach .dsc i .changes to sumy kontrolne MD5
wspomnianych plików. Osoby pobieraj±ce Twoje pliki mog± sprawdziæ je u¿ywaj±c
programu <manref name="md5sum" section="1"> i je¶li sumy nie bêd± siê zgadzaæ,
to bêd± wiedzieæ, ¿e plik jest uszkodzony lub zosta³ przez kogo¶ celowo
zmieniony.

<sect id="quickrebuild">Szybka przebudowa

<p>Gdy masz du¿y pakiet, to mo¿esz nie chcieæ budowaæ go od nowa za ka¿dym
razem, gdy zmienisz jaki¶ szczegó³ w pliku <file>debian/rules</file>. Dla
celów testowych mo¿esz stworzyæ pakiet .deb, który nie bêdzie odbudowywany z
zewnêtrznych ¼róde³:

<p><example>
fakeroot debian/rules binary
</example>

<p>Gdy ju¿ zakoñczy³e¶ szlifowanie Twojego pakietu, pamiêtaj o
przebudowaniu go zgodnie z powy¿sz± procedur±. Mo¿e Ci siê nie udaæ umie¶ciæ
go w archiwum Debiana, gdy próbujesz zamie¶ciæ tam pliki .deb zbudowane w ten
sposób.

<chapt id="checkit">Sprawdzanie czy w pakiecie nie ma b³êdów 

<p>Uruchom program <manref name="lintian" section="1">, podaj±c jako argument
swój plik .changes. Program ten sprawdza czy w pakiecie nie wystêpuj±
najczêstsze b³êdy. Uruchom go w nastêpuj±cy sposób:

<p><example>
lintian -i gentoo_0.9.12-1_i386.changes
</example>

<p>Oczywi¶cie zast±p nazwê pliku .changes nazw± pliku wygenerowanego dla
Twojego pakietu. Je¶li pojawi± siê informacje o b³êdach (linie rozpoczynaj±ce
siê od "E:"), to przeczytaj ich obja¶nienie (linie rozpoczynaj±ce siê od "N:"),
popraw je i ponownie zbuduj pakiet w taki sposób, jak to zosta³o opisane w
sekcji <ref id="completebuild">. Linie, które zaczynaj± siê od "W:" to tylko
ostrze¿enia. Oczywi¶cie powiniene¶ albo co¶ poprawiæ, ¿eby ju¿ nie wystêpowa³y, 
albo upewniæ siê, ¿e nie s± wa¿ne (i w takim przypadku wymusiæ na Lintianie ich ignorowanie;
wiecej szczegó³ów znajdziesz w dokumentacji).

<p>Zwróæ uwagê, i¿ mo¿esz w jednym kroku zbudowaæ pakiet za pomoc± programu
<prgn/dpkg-buildpackage/ i uruchomiæ program <prgn/lintian/ korzystaj±c z
narzêdzia zwanego <manref name="debuild" section="1">.

<p>Zajrzyj do pakietu u¿ywaj±c takiego menad¿era plików jak <manref name="mc"
section="1"> lub rozpakuj go w jakim¶ tymczasowym miejscu przy pomocy
programu <manref name="dpkg-deb" section="1">. Sprawd¼, czy zarówno pakiet
binarny jak i ¼ród³owy nie zawiera niepotrzebnych plików. Czêsto co¶ nie
zostaje wyczyszczone tak, jak powinno; zastosuj wtedy Twój plik `rules', aby to
poprawiæ. Porada: komenda `zgrep ^+++ ../gentoo_0.9.12-1.diff.gz` poda Ci
listê Twoich zmian/dodatków w plikach ¼ród³owych, a polecenie
`dpkg-deb -c gentoo_0.9.12-1_i386.deb` - listê plików w pakiecie binarnym.

<p>Zainstaluj pakiet, ¿eby samemu go przetestowaæ, na przyk³ad wydaj±c komendê
<manref name="debi" section="1"> jako administrator systemu. Spróbuj go tak¿e
zainstalowaæ i uruchomiæ na maszynach innych ni¿ Twoja i obserwuj uwa¿nie czy
w czasie instalacji i uruchamiania programu nie wyst±pi³y jakie¶ b³êdy lub
ostrze¿enia.

<chapt id="upload">Umieszczanie pakietu w archiwum

<p>Gdy ju¿ gruntownie przetestowa³e¶/przetestowa³a¶ swój nowy pakiet, jeste¶
gotowy/gotowa aby rozpocz±æ proces przyjêcia do projektu jako nowego opiekuna pakietów.
Jest on dok³adnie opisany na stronie
<url id="http://www.debian.org/devel/join/newmaint">.

<p>Gdy ju¿ zosta³e¶ oficjalnym rozwijaj±cym Debiana, to musisz umie¶ciæ swój
pakiet w archiwum Debiana. Mo¿esz zrobiæ to rêcznie, ale ³atwiej jest u¿yæ
specjalnie do tego celu stworzonych narzêdzi, które zautomatyzuj± ca³y proces.
Nale¿± do niech takie programy, jak <manref name="dupload" section="1"> i
<manref name="dput" section="1">. Opiszemy tutaj w jaki sposób pos³ugiwaæ siê
programem <prgn/dupload/.

<p>Pierwsza rzecz±, któr± powinni¶my zrobiæ jest ustawienie jego pliku
konfiguracyjnego. Mo¿esz wyedytowaæ zarówno przeznaczony dla ca³ego systemu
plik <file>/etc/dupload.conf</file>, jak i swój w³asny plik
<file>~/.dupload.conf</file>, który nadpisuje te rzeczy, które chcesz zmieniæ.
Umie¶æ w nim co¶ takiego jak poni¿ej:

<p><example>
package config;
$default_host = "ftp-master";

$cfg{"ftp-master"}{"login"} = "twoja_nazwa_u¿ytkownika";

$cfg{"non-us"}{"login"} = "twoja_nazwa_u¿ytkownika";

1;
</example>

<p>Oczywi¶cie powiniene¶/powinna¶ zmieniæ moje osobiste ustawienia na swoje.
Przeczytaj te¿ stronê podrêcznika <manref name="dupload.conf" section="5">, aby
zrozumieæ co oznacza ka¿da z u¿ytych opcji.

<p>Uwagi wymaga zmienna $default_host -- okre¶la ona, która z kolejek
s³u¿±cych do umieszczania pakietów jest u¿ywana domy¶lnie. G³ówn± kolejka jest
"ftp-master", ale mo¿liwe jest, ¿e bêdziesz chcia³ u¿yæ innej, na przyk³ad
szybszej. Wiêcej informacji na temat tych kolejek znajdziesz w dokumencie
Developers' Reference, w sekcji "Uploading a package", która znajduje siê na
stronie <file>/usr/share/doc/developers-reference/developers-reference.html/ch-upload.en.html#s-uploading</file>.

<p>Nastêpnie po³±cz siê z Internetem i wydaj komendê:

<p><example>
dupload gentoo_0.9.12-1_i386.changes
</example>

<p>Program <prgn/dupload/ sprawdzi czy zgadzaj± siê sumy kontrolne MD5 plików
z sumami zapisanymi w pliku .changes. Je¶li sumy kontrolne pasuj± do siebie,
to pakiet mo¿e byæ umieszczony w archiwum. Je¶li sumy siê nie zgadzaj±, to
<prgn/dupload/ ostrze¿e Ciê o tym fakcie, ¿eby¶ ponownie zbudowa³/zbudowa³a
pakiet zgodnie z procedur± opisan± w sekcji <ref id="completebuild">.

<p>Je¶li umieszczasz swój pakiet w kolejce "ftp-master", to program
<prgn/dupload/ poprosi Ciê o Twoje has³o na maszynach Debiana i dopiero wtedy
umie¶ci Twój pakiet.

<chapt id="update">Aktualizacja pakietu

<sect id="newrevision">Nowa poprawka Debiana

<p>Powiedzmy, ¿e zosta³ zg³oszony raport nr #54321 o b³êdzie w Twoim pakiecie i
opisuje problem, który mo¿esz rozwi±zaæ. Aby stworzyæ now± poprawkê pakietu
Debiana musisz wykonaæ nastêpuj±ce czynno¶ci:

<list>
<item>Oczywi¶cie najpierw popraw problem w ¼ród³ach pakietu.

<item>Dodaj now± poprawkê na pocz±tku pliku `changelog', na przyk³ad za pomoc±
komendy `dch -i` lub dok³adniej `dch -v &lt;wersja&gt;-&lt;poprawka&gt;` i
wtedy za pomoc± ulubionego edytora tekstu wstaw komentarze.

<p>Porada: w jaki sposób naj³atwiej pobraæ datê w wymaganym formacie?
U¿yj komendy `822-date` lub `date -R`.

<p>Do³±cz krótki opis b³êdu i jego rozwi±zania do pliku `changelog',
oraz napis: "Closes: #54321". W ten sposób raport o b³êdzie zostanie
automatycznie zamkniêty przez oprogramowanie obs³uguj±ce archiwum w momencie,
gdy pakiet zostanie przez nie zaakceptowany.

<item>Powtórz to, co zrobi³e¶ w sekcjach <ref id="completebuild">,
<ref id="checkit"> i <ref id="upload">. Jedyn± ró¿nic± teraz bêdzie nie
w³±czenie oryginalnego archiwum ze ¼ród³em programu, gdy¿ znajduje siê ono ju¿
w archiwum Debiana i nie zosta³o zmienione.
</list>

<sect id="newupstream">Nowe wydanie programu

<p>Rozwa¿my teraz trochê inn±, bardziej skomplikowan± sytuacjê - zosta³a
wydana nowa, zewnêtrzna wersja programu i oczywi¶cie chcemy j± zapakowaæ.
Musimy wykonaæ nastêpuj±ce czynno¶ci:

<list>
<item>Pobierz archiwum z nowymi ¼ród³ami (na przyk³ad nazwane
`gentoo-0.9.13.tar.gz') i umie¶æ je w katalogu nadrzêdnym do katalogu ze
starym drzewem ¼róde³ (dla przyk³adu ~/debian/).

<item>Wejd¼ do katalogu ze starymi ¼ród³ami i wydaj komendê:

<p><example>
uupdate -u gentoo-0.9.13.tar.gz
</example>

<p>Oczywi¶cie musisz zast±piæ nazwê pliku nazw± archiwum ze ¼ród³ami Twojego
programu. Program <manref name="uupdate" section="1"> odpowiednio zmieni
nazwê tego archiwum, spróbuje na³o¿yæ wszystkie zmiany z Twojego poprzedniego
pliku .diff.gz. i uaktualni nowy plik debian/changelog.

<item>Zmieñ katalog na `../gentoo-0.9.13', czyli drzewo z nowym ¼ród³em
pakietu i powtórz to, co zrobi³e¶ w sekcjach <ref id="completebuild">,
<ref id="checkit"> i <ref id="upload">.
</list>

<p>Zauwa¿, ¿e je¶li ustawi³e¶ plik `debian/watch' tak, jak to opisano w
sekcji <ref id="watch">, to mo¿esz uruchomiæ program <manref name="uscan"
section="1">, aby automagicznie odszukiwaæ poprawione ¼ród³a, pobieraæ je i
uruchamiaæ program <prgn/uupdate/.

<sect id="upgrading">Weryfikowanie uaktualnienia pakietu do nowszej wersji

<p>Gdy bêdziesz budowaæ now± wersjê pakietu, powiniene¶ wykonaæ nastêpuj±c±
procedurê, ¿eby upewniæ siê, ¿e aktualizacja pakietu do nowej wersji przebiega
bezb³êdnie:

<p><list>
<item>uaktualnij pakiet z poprzedniej wersji,
<item>powróæ ponownie do poprzedniej wersji i nastêpnie usuñ j±,
<item>zainstaluj pakiet jako nowy pakiet,
<item>odinstaluj go i nastêpnie zainstaluj ponownie,
<item>wyczy¶æ (purge) pakiet.
</list>

<p>Miej ¶wiadomo¶æ, ¿e je¶li Twój pakiet by³ poprzednio wydany w Debianie, to
ludzie czêsto bêd± go uaktualniaæ z wersji, która by³a w ostatnim wydaniu
Debiana. Pamiêtaj tak¿e, ¿eby przetestowaæ uaktualnianie do nowszej wersji z
tamtej wersji.

<chapt id="helpme">Gdzie prosiæ o pomoc

<p>Zanim zdecydujesz siê zadaæ pytanie w jakim¶ publicznym miejscu, proszê
najpierw zajrzeæ do odpowiedniego podrêcznika. Dokumentacja do wszystkich
programów wymienionych w tym dokumencie znajduje siê w katalogach
<file>/usr/share/doc/dpkg</file>, <file>/usr/share/doc/debian</file>,
<file>/usr/share/doc/pakiet/*</file> oraz na stronach podrêcznika man/info.

<p>Je¶li masz pytanie na temat pakowania, na które nie znalaz³e¶ odpowiedzi w
powy¿szej dokumentacji, to powiniene¶ je zadaæ na li¶cie Mentorów Debiana,
która dostêpna jest pod adresem <email/debian-mentors@lists.debian.org/.
Bardziej do¶wiadczeni rozwijaj±cy Debiana z chêci± Ci pomog±, ale przed
zadaniem pytania powiniene¶ co najmniej przeczytaæ wymienion± dokumentacjê!

<p>Wiêcej informacji na temat tej listy dyskusyjnej znajdziesz na stronie
<url id="http://lists.debian.org/debian-mentors/">.

<p>Gdy odbierzesz raport o b³êdzie (tak prawdziwy raport o b³êdzie!), to znak,
¿e czas zaznajomiæ siê z <url name="Systemem ¶ledzenia b³êdów Debiana"
id="http://www.debian.org/Bugs/"> i przeczytaæ znajduj±c± siê tam
dokumentacjê, aby móc sprawnie radziæ sobie z takimi raportami. Polecam g³ównie
przeczytanie rozdzia³u "Handling Bugs" z dokumentu Developers' Reference.
Rozdzia³ ten jest dostêpny na stronie
<file>/usr/share/doc/developers-reference/developers-reference.html/ch-bug-handling.en.html</file>

<p>Je¶li wci±¿ masz pytania, to zapytaj na li¶cie Rozwijaj±cych Debiana, która
jest dostêpna pod adresem <email/debian-devel@lists.debian.org/. Wiêcej
informacji na temat tej listy dyskusyjnej znajdziesz na stronie
<url id="http://lists.debian.org/debian-devel/">.

<p>Nawet, gdy wszystko dzia³a dobrze, to czas, ¿eby zacz±æ siê modliæ.
Dlaczego? Poniewa¿ ju¿ za kilka godzin (lub dni) u¿ytkownicy z ca³ego ¶wiata
zaczn± u¿ywaæ Twojego pakietu i je¶li pope³ni³e¶ jaki¶ krytyczny b³±d, to
zasypie Ciê listami wielu rozgniewanych u¿ytkowników Debiana... To oczywi¶cie
jest ¿art. :-)

<p>Zrelaksuj siê i b±d¼ gotowy na raporty o b³êdach, poniewa¿ jest du¿o wiêcej
pracy do zrobienia zanim Twój pakiet bêdzie w zgodzie z Polityk± Debiana
(powtarzam: przeczytaj <em>prawdziw± dokumentacjê</em>, aby dowiedzieæ siê
wiêcej szczegó³ów). Powodzenia!

</book>

</debiandoc>

