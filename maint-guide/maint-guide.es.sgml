<!DOCTYPE debiandoc PUBLIC "-//DebianDoc//DTD DebianDoc//EN"
 
[
<!-- textual data entities -->
<!-- first definition wins in SGML -->
<!ENTITY % default  SYSTEM "default.ent">  %default;
<!ENTITY % version  SYSTEM "version.ent">  %version;
 

]>

<!-- CVS revision of this document "$Revision: 1.45 $"  -->
<!-- CVS revision of original english document "1.115"  -->

<!-- Comentarios traduccion:
  - En esta traduccion se utiliza 'tú' en lugar de 'usted' por 
    ser un poco más informal de lo habitual
-->

<!-- Comentarios al original:
* URL's a package manual?
* por qué a veces usa tt y otras no para los programas ?
* no se usa prgn consistentemente cuando se habla de programas ni
  la etiqueta file
-->

<debiandoc>

 <book>

  <titlepag>

   <title>Guía del nuevo desarrollador de Debian</title>

   <author>Josip Rodin <email/joy-mg@debian.org/
   </author>

   
   <translator>Traducido por:
   Javier Fernández-Sanguino Peña <email/jfs@debian.org/
   </translator>
   <translator>
   David Martínez <email/ender@debian.org/ 
   </translator>
   <translator>
   Ana Beatriz Guerrero López <email/ana@debian.org/
   </translator>
   <translator>
   Innocent De Marchi <email/innocent.demarchi@gmail.com/
   </translator>

   <version>versión &docversion;, &docisodate;</version>

   <copyright>
   <copyrightsummary>Copyright &copy; 1998-2002 Josip Rodin.<copyrightsummary>
   <copyrightsummary>Copyright &copy; 2005-2007 Osamu Aoki.</copyrightsummary>
   <copyrightsummary>Translation Copyright &copy; 1999, 2000, 2001, 2007 Javier Fernández-Sanguino Peña, David Martínez y Ana Guerrero López.</copyrightsummary>
   <copyrightsummary>Translation Copyright &copy; 2010 Innocent De Marchi.</copyrightsummary>

   <p>Este documento puede utilizarse en los términos descritos en 
   la Licencia Pública GNU versión 2 o posterior.

   <p>Este documento se ha escrito usando estos dos documentos como
   ejemplo:

   <p>Making a Debian Package (AKA the Debmake Manual), copyright &copy;
   1997 Jaldhar Vyas.

   <p>The New-Maintainer's Debian Packaging Howto, copyright &copy; 1997
   Will Lowe.

   </copyright>

  </titlepag>

  <toc sect1>

  <chapt id="start">Empezando «de la forma correcta».

<!-- 'Prospectus developer' podría traducirse también como 
     "desarrollador en potencia" o "desarrollador potencial" -->

  <p>Este documento tratará de describir cómo se construye un paquete
  Debian GNU/Linux para el usuario común de Debian y para futuros
  desarrolladores en un lenguaje informal, y con multitud de
  ejemplos. Hay un antiguo dicho romano que dice, <em>Longum iter est
  per preaecepta, breve et efficax per exempla!</em> (¡Es un largo
  camino con las reglas, pero corto y eficiente con ejemplos!)

  <p>Este documento está actualizado para la versión <tt>squeeze</tt> de Debian.
  <footnote>El documento asume que estás utilizando la versión <tt>squeeze</tt>.
  Si quieres utilizar este documento con la versión <tt>lenny</tt>, debes
  instalar (como mínimo) los paquetes <package>dpkg</package> y 
  <package>debhelper</package>.</footnote>

  <p>Una de las cosas que hace a Debian una de las distribuciones más
  importantes del mercado es su sistema de paquetes. Aunque hay una
  gran cantidad de programas disponibles en forma de paquetes de
  Debian, algunas veces necesitarás instalar programas que no están
  disponible en este formato. Puede que te preguntes cómo hacer
  tus propios paquetes y que pienses que 
  quizás ésta es una tarea demasiado difícil. Bueno, si eres un
  principiante en GNU/Linux, sí es duro, pero si eres un novato, no
  deberías estar leyendo esto ahora mismo. :-) Necesitas saber algo
  sobre programación en Unix, pero, desde luego, no tienes que ser un
  maestro.

  <p>Sin embargo, hay una cosa que es verdad: para crear y mantener
  paquetes Debian adecuadamente, necesitarás muchas horas. 
  Para que nuestro sistema trabaje sin errores, nuestros desarrolladores
  necesitan ser técnicamente competentes y concienzudos.

  <p>Este documento explicará cada pequeño paso (al principio quizás
  irrelevantes), te ayudará a crear tu primer paquete, ganar
  alguna experiencia en construir próximas versiones de él, y quizás
  otros paquetes después.

  <p>Si quieres información complementaria sobre cómo crear paquetes
  lee <ref id="helpme">.
  
  <p>Las nuevas versiones de este documento están
  en <url name="http://www.debian.org/doc/maint-guide/"
  id="http://www.debian.org/doc/maint-guide/"> y en el paquete
  <package/maint-guide/. Las traducciones (ocasionalmente no actualizadas
  a la versión más reciente del original en inglés) en el paquete
  <package/maint-guide-es/

  <sect id="needprogs">Programas necesarios para el desarrollo

  <p>Antes de empezar, deberías asegurarte de que tienes
  instalados algunos paquetes adicionales necesarios para el
  desarrollo. Observa que en la lista no están incluidos paquetes
  cuyas prioridades son «esencial» o «requerido», que se suponen ya
  instalados.

  <p>En la revisión de este documento se han actualizado los paquetes
  para Debian 6.0 («squeeze»).

  <p>Los siguientes paquetes vienen en una instalación estándar de
  Debian, así que probablemente ya los tengas (junto con los
  paquetes de los que dependen). Aún así, deberías comprobarlo con
  <tt>dpkg -s <var>paquete</var></tt> o bien con 
  <tt>aptitude show <var>package</var></tt>.

  <p>
  El paquete imprescindible para el desarrollo es <package/build-essential/.
  Al instalarlo, también se instalaran otros paquetes requeridos, consiguiendo
  una instalación básica para la construcción de paquetes.

  <p>
  Para la construcción de algunos paquetes esto seria suficiente, pero
  hay otros paquetes que, no siendo esenciales en general para la construcción
  de nuevos paquetes, puede ser útil tener instalados o, incluso, necesarios
  para el paquete que estás construyendo:
  <footnote>En esta lista se ha mantenido el orden de los paquetes de la versión
  1.2.11 (en español) al considerarlo más adecuado para la exposición,
  aunque no coincide (el orden) con la versión original en inglés.
  </footnote>
  
  <list>
  <item><package/dpkg-dev/ - este paquete contiene las herramientas
  necesarias para desempaquetar, construir y enviar paquetes fuente de
  Debian (véase <manref name="dpkg-source" section="1">).
 
  <item><package/file/ - este útil programa puede determinar de qué
  tipo es un fichero (véase <manref name="file" section="1">).

  <item><package/gcc/ - el compilador de C de GNU, necesario si el
  programa, como la gran mayoría, está escrito en el lenguaje de
  programación C (véase <manref name="gcc" section="1">).
  Este paquete también vendrá con otros paquetes como
  <package/binutils/ que incluye programas para ensamblar y enlazar
  ficheros objeto
  (véase «info binutils» en el paquete <package/binutils-doc/)
  y el preprocesador de C en el paquete <package/cpp/
  (véase <manref name="cpp" section="1">).

  <item><package/libc6-dev/ - las bibliotecas y archivos de cabecera de C
  que gcc necesita para enlazar y crear ficheros objeto
  (véase «info libc» en el paquete <package/glibc-doc/).
  
  <item><package/make/ - habitualmente la creación de un programa consta de
  varios pasos. En lugar de ejecutar las mismas órdenes una y otra
  vez, puedes utilizar este programa para automatizar el proceso,
  creando ficheros «Makefile» (véase «info make»).

  <item><package/perl/ - Perl es uno de los lenguajes interpretados
  para hacer guiones (o «scripts») más usados en los sistemas Un*x de hoy
  en dia, comúnmente se refiere a él como la «navaja suiza de Unix»
  (véase <manref name="perl" section="1">).

  <item><package/python/ - Python es otro de los lenguajes interpretados
  para hacer guiones (o «scripts») en Debian debido a la combinación de 
  su poder y sintaxis clara (véase <manref name="python" section="1">).
  </list>


  <p>Probablemente, necesitarás instalar además los siguientes paquetes:
  <footnote>N. de la versión en español: <package/debmake/ es un paquete que incluye otros programas
  con funciones similares a dh-make, pero su uso específico
  <strong>no</strong> está cubierto en este documento porque
  se trata de una herramienta obsoleta.</footnote>

  <list>
  <item><package/autoconf/ , <package/automake/ y <package/autotools-dev/ - muchos programas
  nuevos usan ficheros de configuración y ficheros «Makefile» que se
  procesan con la ayuda de programas como éstos (véase «info
  autoconf», «info automake»). El paquete <package/autotools-dev/ permite
  mantener versiones actualizadas de los archivos autoconf y automake
  y tiene documentación para usar eficientemente ese tipo de archivos.

  <item><package/dh-make/ y <package/debhelper/ - dh-make es necesario
  para crear el esqueleto de nuestro paquete ejemplo, y se usarán
  algunas de las herramientas de <package>debhelper</package> para crear los paquetes. Aunque 
  no son imprescindibles para la creación de paquetes se recomiendan 
  <strong>encarecidamente</strong> para nuevos desarrolladores. Hacen
  el proceso mucho más fácil al principio, y más fácil de controlar
  también más adelante (véase <manref name="dh_make" section="1">,
  <manref name="debhelper" section="1">,
  <file>/usr/share/doc/debhelper/README</file>)<footnote>
  Hay varios paquetes similares pero más específicos como
  <package>dh-make-perl</package>, <package>dh-make-php</package>, etc.
  </footnote>.
  
  <item><package/devscripts/ - este paquete contiene algunos guiones
  útiles para los desarrolladores, pero no son necesarios para crear
  paquetes. Vale la pena mirar los paquetes recomendados y sugeridos
  por este paquete (véase <file>/usr/share/doc/devscripts/README.gz</file>).
    
  <item><package/fakeroot/ - esta utilidad te permite emular al
  usuario administrador (o «root», N. del T.), lo cual es necesario
  para ciertas partes del proceso de construcción (véase <manref
  name="fakeroot" section="1">).

  <item><package/gnupg/ - herramienta que te permite <em>firmar</em> 
  digitalmente los paquetes.
  Esto es especialmente importante si quieres distribuir tu paquete
  a otras personas, y ciertamente, tendrás que hacerlo cuando tu trabajo vaya a
  incluirse en la distribución de Debian
  (véase <manref name="gpg" section="1">).

<!-- en la versión anterior, aqui se cita el paquete g77 
     el compilador GNU de Fortran 77 pero no existe
-->
  <item><package/gfortran/ - el compilador GNU de Fortran 95,
  necesario si el programa está escrito en Fortran.
  (véase <manref name="gfortran" section="1">)

  <item><package/gpc/ - el compilador GNU de Pascal, 
  necesario si el programa está escrito en Pascal.
  Merece la pena mencionar aquí <package/fp-compiler/,
  un compilador libre de Pascal, que también es bueno en esta tarea
  (véase <manref name="gpc" section="1">, <manref name="ppc386" section="1">).

  <item><package/xutils-dev/ - algunos programas,
  normalmente aquellos hechos para X11, también usan programas para
  generar Makefiles ejecutando un conjunto de funciones de macro
  (véase <manref name="imake" section="1">, <manref name="xmkmf" section="1">).

  <item><package/lintian/ - este es el comprobador de paquetes de Debian,
  que te indica muchos de los errores comunes después de construir un
  paquete, y explica los errores encontrados
  (véase <manref name="lintian" section="1">, 
  <file>/usr/share/doc/lintian/lintian.html/index.html</file>).

  <item><package/pbuilder/ - este paquete contiene programas para
  crear y mantener entornos <prgn>chroot</prgn>. Al construir paquetes Debian en
  estos entornos <prgn>chroot</prgn> se verifica que las dependencias son las
  adecuadas y se evitan fallos al construir desde el código
  fuente (FTBFS Fails To Build From Source) (véase <manref name="pbuilder" section="8"> y <manref
  name="pdebuild" section="1">).

  <item><package/patchutils/ - este paquete contiene programas para trabajar
  con los "parches" como <prgn>lsdiff</prgn>, <prgn>interdiff</prgn> y
  <prgn>filterdiff</prgn>.

  <item><package/quilt/ - este paquete ayuda a aplicar modificaciones ("parches")
  y hacer el seguimiento de los cambios realizados. Aplica las modificaciones
  ordenadamente en pila, y es posible aplicar, deshacer y actualizar las modificaciones
  fácilmente recorriendo la pila (véase <manref name="quilt"
  section="1">, <file>/usr/share/doc/quilt/README.Debian</file>).

  <item><package/git/ - este paquete instala el popular sistema de control
  de versiones, diseñado para hacer el seguimiento de proyectos grandes
  con eficacia y rapidez; se utiliza para proyectos de código libre
  importantes como es el caso del kernel de Linux (véase <manref name="git" section="1">,
  <file>/usr/share/doc/git-doc/index.html</file>).
  </list>

  <p>Por último, la documentación que se indica a continuación 
  es de <em>gran importancia</em> y debería leerse junto con este documento:

  <list>
  <item><package/debian-policy/ - incluye la estructura y contenidos
  del archivo, ciertas notas sobre el diseño del sistema operativo, el estándar de la
  jerarquía del sistema de ficheros («Filesystem Hierarchy Standard»,
  N. del T.), y, lo más importante para ti, describe los
  requisitos que debe satisfacer cada paquete para ser incluido en la
  distribución (véase <file>&debian-policy;</file>).

  <item><package/developers-reference/ - para todos los temas no
  específicamente relacionados con los detalles técnicos de cómo
  empaquetar, tales como la estructura del archivo, cómo renombrar,
  abandonar, adoptar paquetes, cómo hacer NMUs («Non-Maintainer Uploads»,
  o envíos por personas distintas del desarrollador, N. del T.), como
  gestionar los errores que los usuarios envían, buenas prácticas de
  empaquetado, cómo y cuando
  enviar los paquetes, etc. (véase <file>&developers-reference;</file>).

  <item> 
  <url name="Tutorial de «Autotools»" id="http://www.lrde.epita.fr/~adl/autotools.html">
  contiene un tutorial muy bueno sobre 
  <url name="el sistema de compilación GNU conocido como «GNU Autotools»" id="http://en.wikipedia.org/wiki/GNU_build_system">
  cuyos componentes más importantes son <file>autoconf</file>,
  <file>automake</file>, <file>libtool</file> y <file>getext</file>.

  <item><package/gnu-standards/ - este paquete contiene dos documentos del
  projecto GNU:
  <url name="GNU Coding Standards" id="http://www.gnu.org/prep/standards/html_node/index.html">, y 
  <url name="Information for Maintainers of GNU Software" id="http://www.gnu.org/prep/maintain/html_node/index.html">.
  Aunque no se exige su cumplimiento en Debian, son útilies como orientación
  y sentido común 
  (vease <file>/usr/share/doc/gnu-standards/standards.html</file> y
  <file>/usr/share/doc/gnu-standards/maintain.html</file>).
  </list>

  <p>Si este documento contradice en algún aspecto al «Debian Policy Manual»
  o al «Debian Developer's Reference», prevalecen estos últimos. Por
  favor, envíe un informe de error del paquete <package>maint-guide</package>.

  <p>Las breves descripciones dadas anteriormente sólo sirven para
  introducirte a lo que hace cada paquete. Antes de continuar, por
  favor, lee la documentación de cada programa, al menos para su uso
  normal. Puede parecerte algo duro ahora, pero más adelante estarás
  <em>muy</em> contento de haberla leído.

  <sect id="terminology">Terminología básica

  <p>Hay dos tipos de paquetes.

  <list>

  <item><strong>paquete fuente</strong>: un paquete de fuentes es un conjunto
  de archivos de código y datos que se pueden compilar y procesar obtiniéndose
  programas ejecutables o documentos formateados. El paquete está formado por
  archivos con extensión <file>*.orig.tar.gz</file>, <file>*.debian.tar.gz</file> (o
  <file>*.diff.gz</file>),
  y <file>*.dsc</file>. También pueden estar formados por otros tipos
  de archivos y/o formatos de compresión.

  <item><strong>paquetes binarios</strong>: un paquete binario contiene archivos
  ejecutables (ya compilados) y documentos formateados. Generalmente están
  formados por archivos con extensión <file>*.deb</file> de uso en instalaciones
  de Debian y archivos <file>*.udeb</file> para el instalador de Debian.

  </list>

  <p>¡No confundas los términos «fuentes de un programa» y «paquete fuente de
  un programa»!

  <p>En el desarrollo y mantenimiento de Debian, se utilizan las siguientes expresiones
  para referirse a las personas que intervienen en la construcción y mantenimiento
  de los programas y paquetes:

  <list>

  <item><strong>autor original</strong> («upstream author»): para referirse a 
  la persona que ha
  escrito el código original del program (o la documentación original en el
  caso de paquetes de documentación).

  <item><strong>desarrollador original</strong>(«upstream maintainer»): 
  la persona que se encarga de mantener el programa (el código fuente) en la actualidad 
  (que puede ser distinta a la que lo inició).

  <item><strong>empaquetador (desarrollador)
  <footnote> N. de t.: hay una cierta ambiguedad en la traducción de «maintainer» por
  desarrollador puesto que se puede confundir con la traducción de «Debian Developer»
  y de «upstream maintainer».</footnote>
  </strong> («maintainer»): la persona que se encarga
  de construir y mantener actualizados paquetes para Debian.

  <item><strong>patrocinador</strong> («sponsor»): la persona (que debe ser un DD
  o DM, véase más adelante) que transfiere los paquetes elaborados por el desarrollador
  al archivo de paquetes de Debian (al repositorio de Debian)
  después de comprobar que el paquete cumple los requisitos exigidos.

  <item><strong>mentor</strong>: la persona que ayuda a los desarrolladores principiantes
  a iniciarse en la construcción y mantenimiento de paquetes.

  <item><strong>desarrollador de Debian (DD)</strong> («Debian Developer»): la persona
  que es miembro de Debian. Tiene permiso total para transferir paquetes al repositorio 
  oficial de Debian.

  <item><strong>Empaquetador de Debian  (DM)</strong>(«Debian Maintainer»): la persona
  que tiene permiso limitado para transferir paquetes al repositorio oficial de Debian.

  </list>

  <p>Para referirse a las versiones
  <footnote>N. de t.: en toda esta sección, debes tener en cuenta
  que, habitualmente, las versiones y revisiones se codifican con
  números o con fechas. Asi, la versión de un paquete cuyas fuentes
  originales tienen la <tt><var>versión</var></tt> 0.11.5 y el paquete
  Debian está es la <tt><var>revisión</var></tt> 4, el paquete
  tendrá el nombre <file>nombre_paquete_0.11.5-4</file>. Más adelante
  se trata este tema (<ref id="namever">).</footnote> en el entorno de Debian, la terminologia es:

  <list>
  <item><strong>versión de las fuentes originales</strong> («upstream source version»):
  se utiliza el término <tt><var>versión</var></tt>.

  <item><strong>revisión Debian</strong> («Debian revision»): 
  para la revisión del paquete Debian se utiliza el término <tt><var>revisión</var></tt>.

  <item><strong>versión del paquete Debian</strong> («Debian package version»): 
  para referirse a la versión del paquete Debian se utiliza la siguiente nomenclatura:
  <list>
  <item><tt><var>versión</var></tt> para los paquetes binarios nativos de Debian y para
  los paquetes de código fuente.
  <item><tt><var>versión</var>-<var>revisión</var></tt> para los paquetes binarios de Debian no nativos.
  </list>

  </list>

  <p>Para más detalles de la terminología, se aconseja leer los otros manuales de Debian.


  <sect id="debiandeveloper">Desarrollador oficial de Debian

  <p>Puede que quieras convertirte en un desarrollador oficial de Debian
  una vez hayas construido tu paquete (o incluso mientras lo estás
  haciendo) para que el paquete se introduzca en la nueva distribución
  (si el programa es útil, ¿por qué no?)
  <footnote>N. de t.: este párrafo no está en la versión original actual.
  </footnote>.
  
  <p>No puedes convertirte en desarrollador oficial de Debian de la
  noche a la mañana porque hace falta algo más que habilidades
  técnicas. No te sientas desilusionado por esto. Aún puedes subir tu
  paquete, si es útil a otras personas, como <strong>empaquetador</strong> a través de
  un <strong>patrocinador</strong> o un <strong>empaquetador de Debian</strong>
  mientras tú entras en el <url name="proceso de
  nuevos desarrolladores de Debian" id="&nm-home;">. En este caso el
  patrocinador es un desarrollador oficial de Debian que ayuda a la
  persona que mantiene el paquete a subirlo al archivo de
  Debian. Encontrarás más información de este procedimiento en el
  documento <url id="&mentors-faq;" name="preguntas frecuentes de
  debian-mentors"> y en <url name="el rincón del nuevo desarrollador de Debian" id="&newmaint;">.

  <p>Ten en cuenta que no es necesario crear un paquete nuevo para poder
  convertirte en desarrollador oficial de Debian. Una opción para
  ser desarrollador oficial es contribuir al mantenimiento de los
  paquetes ya existentes en la distribución. Hay muchos paquetes
  esperando un buen empaquetador (véase <ref id="choose">).

  <sect id="helpme">Dónde pedir ayuda

  <p>Antes de realizar preguntas en alguno de los foros públicos,
  por favor lee los manuales
  <footnote>N. de t.: el original utiliza el acrónimo inglés RTFM
  que es más «expresivo».</footnote>.
  <!-- /usr/share/doc/debian is used be doc-debian and debian-faq --> 
  Se aconseja la lectura de la documentación ubicada en 
  <file>/usr/share/doc/dpkg</file>,
  <file>/usr/share/doc/debian</file>, <file>&autotools-dev;</file>, 
  <file>/usr/share/doc/<var>package</var>/*</file>
  y los manuales de ajuda <prgn>man</prgn>/<prgn>info</prgn>
  de cada uno de los programas mencionados en este documento, 
  asi como la informació disponible en <url id="&nm-home;">
  <footnote>N.de t.: para acceder a esta dirección es necesario
  estar en el programa para ser DD o DM.</footnote>
  y <url id="&mentors-faq;">.

  <p>Construir un paquete pequeño es una buena idea para aprender los
  detalles del empaquetamiento. Inspecccionar paquetes mantenidos por
  otras personas es una excelente forma para aprender.

  <p>Si tienes dudas sobre empaquetado a las que no has podido encontrar
  respuesta en la documentación y en el la web, puedes preguntar en la lista de correo
  de Debian Mentors <url id="http://lists.debian.org/debian-mentors/" name="debian-mentors@lists.debian.org">
  enviando un correo a <email/debian-mentors@lists.debian.org/. 
  Los desarrolladores más experimentados de Debian, te ayudarán gustosamente,
  pero, por favor, ¡léete la documentación antes de preguntar!
  <footnote>N. de t.: hay dos canales IRC  
  #debian-mentors y #debian-mentors-es donde puedes
  hacer consultas.
  </footnote>.

  <p>Consulta <url id="http://lists.debian.org/debian-mentors/"> para más
  información sobre esta lista de correo.
    
  <p>Cuando recibas un aviso de fallo (sí,
  avisos de fallos, ¡de verdad!) sabrás que es el momento de indagar en
  el <url name="Sistema de seguimiento de fallos de Debian"
  id="http://www.debian.org/Bugs/"> y leer la documentación de allí
  para poder tratar los informes de forma eficiente. 
  Te recomiendo la lectura de la Referencia del Desarrollador, 
  en particular el capítulo de «Manejo de Bugs» (Handling Bugs, N. del T.), en
  <file>&bughandling;</file>.

  <p>Si aún tienes preguntas, házlas en la lista de distribución de
  Desarrolladores de Debian en <email/debian-devel@lists.debian.org/.
  Véase <url id="http://lists.debian.org/debian-devel/"> para más
  información sobre esta lista de correo.

  <p>Aunque todo funcione bien, es el momento de cruzar los dedos. ¿Por
  qué? Por que en sólo unas horas (o días) usuarios de todo el mundo
  empezarán a usar tu paquete, y si cometiste algún error crítico
  centenares de usuarios furiosos de Debian te bombardearán con
  correos... sólo bromeaba :-)

  <p>Relájate y prepárate para recibir informes de fallos, porque hay
  mucho más trabajo que hacer antes de seguir completamente las
  Normas de Debian (una vez más lee la <em>documentación real</em>
  para más detalles). ¡Buena suerte!

  <chapt id="first">Primeros pasos

  <p>Vamos ha construir tu paquete (o, mejor aún, adoptar un paquete ya existente)
  <footnote>N. de t.: puedes ver los paquetes sin responsable (paquetes huérfanos
  «Orphaned packages») en <url id="http://www.debian.org/devel/wnpp/orphaned"> y en
  <url id="http://www.debian.org/devel/wnpp/rfa_bypackage">).
  </footnote>.

  <sect id="choose">Elige el programa

  <p>Probablemente hayas escogido ya el paquete que deseas construir.
  Lo primero que debes hacer es comprobar si el paquete está ya
  en el archivo de la distribución utilizando <prgn>aptitude</prgn>.
  Si usas la distribución «estable», quizás sea mejor que vayas a la <url
  name="página de búsqueda de paquetes"
  id="http://www.debian.org/distrib/packages"> y en el
  <url name="Sistema de seguimiento de paquetes de Debian"
  id="http://packages.qa.debian.org/common/index.html">.

  <p>Si el paquete ya existe, ¡instálalo! :-) Si te encuentras con que
  el paquete es un paquete huérfano (cuando su desarrollador es el 
  <url name="Debian QA Group" id="http://qa.debian.org/">, es decir, 
  el grupo de calidad de Debian), puedes adoptarlo (convertirte en el
  responsable de empaquetarlo y manternerlo) si está disponible, comprueba
  si realmente está disponible en <url name="«Debian Bug report logs»: 
  Errores en el paquete «wnpp» en la distribución de trabajo («inestable» o «sid»)"
  id="http://bugs.debian.org/wnpp">. También puedes adoptar un paquete
  para el cual se ha emitido una «solicitud de adopción» («Request for Adoption»
  o <strong>RFA</strong>) por su desarrollador o por un DD (véase
  <url id="http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=594398">
  a modo de ejemplo).

  <p>Puedes consultar las siguientes listas de paquetes huérfanos o 
  de RFA en:
  <list>
  <item><url name="la lista de paquetes en prospección y que
  necesitan trabajo" id="http://www.debian.org/devel/wnpp/">
  <item><url name="Debian Packages that Need Lovin'" id="http://wnpp.debian.net/">
  <item><url name="Lista de informes de errores a WNPP basada en palabras clave" id="http://members.hellug.gr/serzan/wnpp/">
  <footnote>N.de t.: estas dos últimas direcciones son interfaces web para facilitar
  la búsqueda de notificaciones de errores y del estado de mantenimiento de los
  paquetes.</footnote>
  </list>

   <p>A modo de nota al margen, es importante tener presente
   que Debian incorpora paquetes de un gran número de programas
   de todo tipo, y que la cantidad de paquetes disponibles en
   el repositorio de Debian es mucho major al de colaboradores
   con permiso para incorporar paquetes al repositorio.
   En consecuencia, la colaboración en el mantenimiento de paquetes
   que ya están en el repositorio se valora muy positivamente
   (y es más fácil conseguir patrocinador) por el resto de
   desarrolladores
   <footnote>Dicho esto, hay, por supuesto, nuevos programas
   que vale la pena empaquetar para Debian.</footnote>.
   Para colaborar en el mantenimiento de paquetes ya existentes
   tienes las siguientes opciones:
   <list>
   <item>hacerte cargo de paquetes huéfanos pero que son
   de uso frecuente
   <footnote>N. de t.:consulta las estadísticas de popularidad
   del paquete («popcon») <url id="http://qa.debian.org/popcon.php">.
   </footnote>.
   <item>consultando <url name="equipos de desarrolladores" id="http://wiki.debian.org/Teams">.
   <item>seleccionando errores de los paquetes más populares.
   <item>seleccionando <url name="paquetes QA o NMU" 
   id="http://www.debian.org/doc/developers-reference/pkgs.html#nmu-qa-upload">
   <footnote>N. de t.: los paquetes QA son los que mantiene el
   grupo de calidad de Debian y son huérfanos y los NMU son
   paquetes que actualmente no tienen un responsable.
   </footnote>.
   </list>

  <p>Si puedes adoptar el paquete, descarga las fuentes (con algo como
  <tt/apt-get source packagename/) y examínalas. 
  Este documento, desafortunadamente, no incluye aún información exhaustiva
  sobre la adopción de paquetes
  <footnote>N de t.: la manera más directa de adoptar un paquete huérfano
  es consultar la lista de paquetes huérfanos en 
  <url id="http://www.debian.org/devel/wnpp/orphaned"> i en
  <url id="http://www.debian.org/devel/wnpp/rfa_bypackage">.
  En estas listas, el nombre del paquete enlaza directamente
  al informe de error que lo declara como huérfano.
  Si decides adoptar un paquete, debes enviar un correo a la
  lista con el número del informe de error solicitando el cambio
  del título del informe del error (véase
  <url id="http://www.debian.org/devel/wnpp/index.html#howto-o">).
  Con esta notificación, el resto de colaboradores sabrá 
  que ya estás trabajando en el paquete.</footnote>.
  No debería ser díficil entender cómo funciona el paquete
  ya que alguien ha hecho el trabajo inicial por ti.
  Aún así es mejor que sigas leyendo, muchos de los consejos 
  que se dan a continuación serán también aplicables para tu caso.
  
  <p>Si el paquete es nuevo y decides que te gustaría verlo en Debian
  debes seguir los pasos indicados a continuación:

  <list>
  <item>En primer lugar deberías saber cómo
  funciona, y haberlo utilizado durante algún tiempo
  (para confirmar su utilidad).</item>

  <item>Comprueba que no hay nadie más trabajando ya en el paquete consultando
  <url name="la lista de paquetes en los que se está trabajando" 
  id="http://www.de.debian.org/devel/wnpp/being_packaged">.
  Si nadie está ya trabajando en el empaquetado del programa,
  envia un informe de error de tipo ITP («Intent To Package») 
  al <package>wnpp</package> meta-paquete utilizando el programa
  de comunicación de errores <prgn>reportbug</prgn> (accesible
  en el menú de herramientas del sistema).
  Si ya hay alguien trabajando en él, contacta con esa persona:
  es posible que podais colaborar. En caso contrario,
  intenta encontrar otro programa interesante que nadie mantenga.
  </item>

  <item>El programa <strong>debe</strong> tener una
  licencia:
  <list>
  <item>Si el paquete debe pertenecer a la sección <tt>main</tt>
  el programa <strong>debe cumplir con las 
  Directrices de Debian para el software (DFSG)</strong>
  libre (vease <url id="http://www.debian.org/social_contract.html#guidelines">)
  y <strong>no debe precisar la instalación de otro paquete que no
  pertenezca a la sección <tt>main</tt></strong> para su compilación
  o ejecución como requiere la directiva de Debian («Debian Policy»).
  </item>

  <item>Para paquetes de la sección <tt>contrib</tt>
  la licencia debe cumplir todos los requisitos de la DFSG
  pero puede precisar la instalación de otro paquete que no
  sea de la sección <tt>main</tt> para su compilación
  o ejecución.</item>

  <item>Para paquetes de la sección <tt>non-free</tt>,
  no es necesario que la licencia cumpla todos los requisitos
  de la DFSG pero <strong> debe permitir la distribución del programa</strong>.
  </item>
  </list>

  <p>Si no estás seguro sobre en qué lugar debería ir, envía el texto de
  la licencia y pide consejo con un correo (en inglés)
  <footnote>N. de t.: el inglés es el idioma vehicular de Debian.
  Debes utilizar este idioma en los mensajes que envies a las listas
  de correo (aun cuando sepas que el destinatario hable el español).
  No obstante, hay listas de correos especificas para muchos idiomas.
  Puedes ver las listas actuales en 
  <url id="http://lists.debian.org/">. También te será de utilidad
  leer <url id="http://www.debian.org/MailingLists/">.
  </footnote>  dirigido a
  <url id="http://lists.debian.org/debian-legal/" name="debian-legal@lists.debian.org">.
  </item>

  <item>El programa <strong>no</strong> debería ejecutarse con «setuid
  root», o aún mejor: no debería ser «setuid» ni
  «setgid».</item>

  <item>El programa no debería ser un demonio, o algo que vaya en los
  directorios */sbin, o abrir un puerto como usuario administrador.</item>

  <item>El programa debería estar compuesto por binarios ejecutables,
  no intentes empaquetar aún bibliotecas (son difíciles).</item>

  <item>El programa debería tener una buena documentación o al menos
  un código fuente legible y no ofuscado.
  </item>

  <item>Deberías contactar con el autor o autores del programa para
  comprobar su conformidad con el empaquetado. Es importante
  que el autor o autores sigan manteniendo el programa para que puedas
  en el futuro consultarle/s en caso de que haya problemas
  específicos.  No deberías intentar empaquetar programas que no estén
  mantenidos.</item>
  </list>

  <p>Por supuesto, esta lista es para tomar medidas de seguridad, y
  con la intención de salvarte de usuarios enfurecidos si haces algo
  mal con algún demonio «setuid»... Cuando tengas más experiencia
  en empaquetar, podrás hacer este tipo de paquetes:
  incluso los desarrolladores más experimentados hacen consultas
  en la lista de correo <url id="http://lists.debian.org/debian-mentors/" 
  name="debian-mentors@lists.debian.org"> cuando tienen dudas.
  La gente te ayudará gustosamente.

  <p>Para más ayuda sobre el tema, lee la 
  <url name="Referencia del desarrollador" 
  id="http://www.debian.org/doc/devel-manuals#devref">.

  <sect id="getit">Obtén el programa y pruébalo

  <p>Lo primero que debes hacer es encontrar y descargar el
  código fuente original. A partir de este punto se da por supuesto
  que ya tienes el código fuente que obtuviste de la
  página del autor. Las fuentes de los programas libres de GNU/Linux
  generalmente vienen en formato <prgn>tar/gzip</prgn>, con extensión <file>.tar.gz</file>
  o en formato <prgn>tar</prgn>+<prgn>bzip2</prgn> con 
  extensión <file>.tar.bz2</file>, y
  generalmente contienen un subdirectorio llamado <file><var>programa</var>-<var>versión</var></file>
  con todas las fuentes en él. 

  <p>Si la última versión del código fuente se puede obtener 
  de un sistema VCS del tipo Git, Subversion o un repositorio CVS,
  puedes descargarlo ejecutando <tt>git clone</tt>, <tt>cvs co</tt>
  o <tt>svn co</tt> y, a continuación comprimiendolo en un archivo
  con formato <prgn>tar</prgn>+<prgn>gzip</prgn> ejecutando la
  opción <tt>--exclude-vcs</tt>.

  <p>Si tu programa viene en otro tipo de
  archivo (por ejemplo, el fichero termina en ".Z" o ".zip"),
  descomprímelo con las herramientas adecuadas, o pregunta en
  la lista de correo debian-mentors si tienes dudas de cómo se puede desempaquetar
  correctamente (pista: prueba «file archivo.extensión»).

  <p>Como ejemplo, usaré el programa conocido como «gentoo», un gestor
  de ficheros de X11 en GTK+. Observa que el programa ya ha sido
  empaquetado previamente pero ha cambiado sustancialmente de versión
  desde que este texto se escribió.

  <p>Crea un subdirectorio bajo tu directorio personal llamado
  «debian» o «deb» o lo que creas apropiado (por ejemplo <file>~/gentoo/</file>
  estaría bien en este caso). Mueve a él el archivo que has
  descargado, y descomprímelo de la siguiente forma: «<tt>tar xzf
  gentoo-0.9.12.tar.gz</tt>». Asegúrate de que no hay errores, incluso
  errores «irrelevantes», porque es muy probable que haya problemas
  al desempaquetarlo en sistemas de otras personas, cuyas herramientas de
  desempaquetado puede que no ignoren estas anomalías.
  En el terminal de órdenes, tendrás lo siguiente:

<example>
$ mkdir ~/gentoo ; cd ~/gentoo
$ wget http://<var>www.example.org</var>/gentoo-0.9.12.tar.gz
$ tar xvzf gentoo-0.9.12.tar.gz
$ ls -F
gentoo-0.9.12/
gentoo-0.9.12.tar.gz
</example>

  <p>Ahora tienes otro subdirectorio, llamado «gentoo-0.9.12».
  Muévete a ese directorio y lee <strong>en profundidad</strong> la
  documentación que encuentres. Generalmente se encuentra en ficheros que se
  llaman README*, INSTALL*, *.lsm o *.html. Allí encontrarás
  instrucciones de cómo compilar e instalar el programa (muy
  probablemente asumirán que lo quieres instalar en el directorio
  <file>/usr/local/bin</file>, no harás esto, pero eso lo veremos más adelante en
  <ref id="destdir">).

  <p>El proceso varía de un programa a otro, pero gran parte de los
  programas modernos vienen con un guión «configure» que configura
  las fuentes para tu sistema y se asegura de que el sistema está en
  condiciones de compilarlo. Después de configurarlo (con
  «./configure»)
  <footnote>N. de la t.: este párrafo no está en la versión original
  en inglés, pero si en la versión anterior en español. Se
  ha mantenido por ser más «realista».</footnote>
  , los programas generalmente se compilan con «make».
  Algunos de ellos soportan «make check» para ejecutarse incluyendo
  comprobaciones automáticas. Generalmente se instalarán en sus
  directorios de destino ejecutando «make install».
  
  <p>Ahora intenta compilar, y ejecutar el programa, para asegurarte
  de que funciona bien y de que no genera ningún error en el
  sistema mientras está instalándose o ejecutándose.

  <P>También, generalmente, puedes ejecutar «make clean» (o mejor
  «make distclean») para limpiar el directorio donde se compila el
  programa. A veces hay incluso un «make uninstall» que se puede utilizar
  para borrar todos los archivos instalados.

  <sect id="portable">Programas libres portables

  <p>Buena parte de los programas libres estan escritos en lenguaje
  <url name="C" id="http://es.wikipedia.org/wiki/C_%28lenguaje_de_programaci%C3%B3n%29">
  y <url name="C++" id="http://es.wikipedia.org/wiki/C%2B%2B">.
  Muchos utilizan las Autotools y CMake para compilar en diferentes plataformas.
  Estas herramientas se utilizan para generar un archivo <file>Makefile</file>
  y otros archivos necesarios para la compilación. Asi, muchos
  programas se compilan ejecuntando 
  "<tt>make; make install</tt>".

  <p><url name="Las Autotools" id="http://es.wikipedia.org/wiki/Autotools">
  son el sistema de compilación GNU e incluyen «Autoconf»,
  «Automake», «Libtool» y 
  <url name="gettext" id="http://es.wikipedia.org/wiki/Gettext">.
  Confirmarás que el programa utiliza las autoools por
  la presencia de los archivos <file>configure.ac</file>, <file>Makefile.am</file>,
  y <file>Makefile.in</file>.
  <footnote>
  Véase <url name="Autotools Tutorial" id="http://www.lrde.epita.fr/~adl/autotools.html"> 
  y <file>&autotools-dev;</file>.
  </footnote>

  <p>Observa
  <footnote>N. de t.: este párrafo no está en la versión actual
  original en inglés, pero si en la anterior en español. Se
  ha mantenido debido a que aclara el funcionamiento de «Autotools»
  </footnote>
  que si tu programa usa GNU <manref name="automake"
  section="1"> y/o <manref name="autoconf" section="1">, lo que quiere
  decir que las fuentes incluyen ficheros Makefile.am y Makefile.in,
  respectivamente, ya que necesitarás modificar esos ficheros, porque
  cada invocación de automake reescribirá los ficheros «Makefile.in»
  con información generada a partir de los ficheros «Makefile.am», y
  cada llamada a <file>./configure</file> hará lo mismo con los
  ficheros «Makefile», con información de los ficheros
  «Makefile.in». Editar los ficheros «Makefile.am» requiere algunos
  conocimientos de <prgn>automake</prgn>, que puedes obtener leyendo
  la entrada de <prgn>info</prgn> para automake, mientras que editar
  los ficheros «Makefile.in» es casi lo mismo que editar ficheros
  «Makefile», simplemente basta con poner atención en las variables,
  es decir, cualquier cadena que empiece y acabe con el caracter «@»,
  como por ejemplo @CFLAGS@ o @LN_S@, que se sustituyen por otros
  valores cada vez que se ejecute <file>./configure</file>. Por favor,
  lee <file>&autotools-dev;</file> antes de empezar.

  <p>El primer paso en el uso de Autotools es la ejecución
  por parte del autor de la orden <tt>autoreconf -i -f</tt> la cual
  genera, a partir de los archivos fuente (a la izquierda del gráfico)
  los archivos que utilizará la orden <tt>configure</tt>
  (a la derecha del gráfico).
<example>
configure.ac-----+-> autoreconf -+-> configure
Makefile.am -----+        |      +-> Makefile.in
src/Makefile.am -+        |      +-> src/Makefile.in
                          |      +-> config.h.in
                      automake
                      aclocal
                      aclocal.m4
                      autoheader
</example>

  <p>La edición de los archivos <file>configure.ac</file> y <file>Makefile.am</file>
  requiere conocer el funcionamiento de <prgn>autoconf</prgn> 
  y <prgn>automake</prgn>. Véase <tt>info autoconf</tt> y <tt>info automake</tt>
  (ejecutando las órdenes en el terminal).

  <p>El segundo paso el uso de Autotools  es la ejecución de
  <tt>./configure  &amp;&amp; make</tt> en el directorio
  del código fuente para compilar el programa generando un archivo
  <prgn><var>binary</var></prgn>.

<example>
Makefile.in -----+                +-> Makefile -----+-> make -> <var>binary</var>
src/Makefile.in -+-> ./configure -+-> src/Makefile -+
config.h.in -----+                +-> config.h -----+
                          |
           config.status -+
           config.guess --+
</example>

  <p>Puedes hacer cambios en el archivo <file>Makefile</file> 
  como el directorio de instalación predeterminado usando
  las opciones de <tt>configure</tt>, p.ej: 
  <prgn>./configure --prefix=/usr</prgn>.

  <p>Aunque no es necesario, la actualización del archivo
  <file>configure</file> y de otros archivos con la orden
  <tt>autoreconf -i -f</tt> es la mejor manera para comprobar
  la compatibilidad del código fuente.

  <p><url name="CMake" id="http://es.wikipedia.org/wiki/Cmake"> 
  es un sistema de compilación alternativo. La presencia del
  archivo <file>CMakeLists.txt</file> te indicará que se utiliza
  esta opción para compilar el programa.

  <sect id="namever">Nombre del paquete y versión

  <P>Deberías empezar a construir tu paquete en un directorio de
  fuentes completamente limpio, o simplemente con las fuentes recién
  desempaquetadas.

  <p>Para construir correctamente el paquete, debes cambiar el nombre
  original del programa a letras minúsculas (si no lo está ya), y
  deberías renombrar el directorio de fuentes a
  <file>nombre_de_paquete-versión</file>.

  <P> Si el nombre del programa está formado por varias palabras, contráelas a una
  palabra o haz una abreviatura. Por ejemplo, el paquete del programa
  «el editor para X de Javi» se podría llamar <file>javiedx</file> o <file>jle4x</file>, o lo
  que decidas, siempre y cuando no se exceda de unos límites
  razonables, como 20 caracteres.

  <p>Comprueba también la versión exacta del programa (la que se
  incluye en la versión del paquete). Si el programa no está numerado
  con versiones del estilo de X.Y.Z, pero sí con fecha de publicación,
  eres libre de utilizar la fecha como número de versión, precedida
  por «0.0» (sólo por si los desarrolladores originales deciden sacar
  una versión nueva como 1.0). Así, si la fecha de las fuentes es el
  19 de diciembre de 1998, puedes utilizar la cadena
  0 0.0.19981219 (que utiliza el formato de fecha ISO 8601, N. del T.)
  como número de versión. Esto garantizará el buen funcionamiento
  de la actualización con el programa <prgn>dpkg</prgn>.
  <footnote>La versión del programa puede compararse
  ejecutando en el terminal <tt>dpkg --compare-versions <var>ver1</var>
  <var>op</var> <var>ver2</var></tt>. Véase <manref name="dpkg" section="1"> manpage.</footnote>

  <p>Aún así habrá
  algunos programas que ni siquiera estén numerados, en cuyo caso deberás
  contactar con el autor original para ver si tiene algún
  otro sistema de seguimiento de revisiones.

  <sect id="dh_make">«Debianización» inicial

  <p>Primero debes configurar las variables de entorno Bash shell
  <tt>$DEBEMAIL</tt> y <tt>$DEBFULLNAME</tt> que son utilizadas
  por varias herramientas de mantenimiento de Debian para obtener
  tu nombre y correo electrónico. Puedes hacerlo ejecutando lo
  siguiente en el terminal:

<example>
$ cat &gt;&gt;~/.bashrc &lt;&lt;EOF
DEBEMAIL=tu.direccion@ejemplo.org
DEBFULLNAME="tu nombre y apellido"
export DEBEMAIL DEBFULLNAME
EOF
</example>

  <p>Se habrá añadido tu informació en el archivo (oculto) <file>/.bashrc</file>.
  A continuación ejecútalo escribiendo en el terminal:

<example>
$ bash
</example>
  
  <p>Ahora puedes iniciar la creación del paquete Debian
  ejecutando la orden <prgn>dh_make</prgn>:

<example>
$ cd ~/gentoo/gentoo-0.9.12
$ dh_make -f ../gentoo-0.9.12.tar.gz
</example>

  <p>Deberás cambiar el nombre del archivo por el correspondiente
  a tus fuentes
  <footnote>Si el archivo del código fuente original ya contiene
  un directorio <file>debian</file> con su contenido, ejecuta
  la orden <prgn>dh_make</prgn> con la opción <tt>--addmissing</tt>.
  Asi se actualizará el contenido aportado por el autor para
  tu paquete Debian.</footnote>.
  Véase <manref name="dh_make" section="1"> para una descripción más detallada.

  <p>Saldrá alguna información. Te preguntará qué tipo de paquete
  deseas crear. <file>Gentoo</file> es un paquete de binario simple (crea sólo un
  binario) y, por tanto, sólo un fichero <file>.deb</file> - así que
  seleccionaremos la primera opción, con la tecla «s». Comprueba la
  información que aparece en la pantalla y confirma pulsando la tecla
  &lt;intro&gt;
  <footnote>Se ofrecen varias opciones aqui: 
  "<tt>s</tt>" para un binario,
  "<tt>i</tt>" para un paquete independiente de la arquitectura (sólo
  código fuente o bien documentación),
  "<tt>m</tt>" para más de un binario,
  "<tt>l</tt>" para una biblioteca,
  "<tt>k</tt>" para un módulo del núcleo («kernel»),
  "<tt>n</tt>" para un parche del núcleo, y
  "<tt>b</tt>" para paquetes «<package>cdbs</package>«. Este documento
  se centra en el uso del paquete <package>debhelper</package> con la
  orden <prgn>dh</prgn> para la creación de paquetes con un binario
  y trata solo parcialmente su uso en la creación de paquetes
  independientes de la arquitectura y con más de un binario. El paquete
  <package>cdbs</package> ofrece guiones alternativos a la orden
  <prgn>dh</prgn> y su uso queda fuera de este documento.</footnote>. 

  <p>Tras ejecutar <prgn>dh_make</prgn>, se crea una copia del código
  original con el nombre <file>gentoo_0.9.12.orig.tar.gz</file> en el
  directorio raíz para facilitar la creación del paquete de fuentes
  no nativo de Debian con el archivo <file>debian.tar.gz</file>.

<example>
$ cd ~/gentoo ; ls -F
gentoo-0.9.12/
gentoo-0.9.12.tar.gz
gentoo_0.9.12.orig.tar.gz
</example>

  Observa que hay dos cambios clave en este nombre de fichero:
  <list compact>
  <item>El nombre del paquete y la versión están separados por «<tt>_</tt>».
  <item>Hay un «<tt>orig.</tt>» antes de «<tt>tar.gz</tt>».
  </list>
 
  <p>Observa que la ejecución de la orden ha creado varios archivos de plantilla
  en el directorio <file>debian</file>. Se tratará sobre ellors en <ref
  id="dreq"> y <ref id="dother">. El proceso de empaquetado no está totalmente
  automatizado. Se tratará de la modificación de los archivos Debian en <ref id="modify">.
  A continuación se compilará el paquete Debian en el apartado <ref id="build">,
  la revisión del resultado en <ref id="checkit"> y el envío del paquete en
  <ref id="upload">. Se explicará cada una de estas etapas a continuación.

  <p>Como nuevo desarrollador, se desaconseja crear paquetes
  complicados, por ejemplo:
  <list compact>
  <item>múltiples paquetes binarios
  <item>paquetes de bibliotecas
  <item>paquetes con módulos del núcleo,
  <item>paquetes con parches del núcleo,
  <item>paquetes en los que el formato del archivo fuente no es en <tt>tar.gz.</tt> ni en <tt>tar.bz2</tt>, o
  <item>paquetes cuyas fuentes contienen partes que no se pueden distribuir.
  </list>

  <p>Estos casos no son extremadamente difíciles pero es preciso tener
  algunos conocimientos más, así que aquí no se describirá el proceso
  de empaquetado para este tipo de paquetes.

  <p>Si accidentalmente eliminas alguna de las plantillas del directorio
  <file>debian</file>, puedes regeneralas ejecutando <prgn>dh_make</prgn>
  con la opción <tt>--addmissing</tt>.

  <p>Ten en cuenta que deberías ejecutar <prgn>dh_make</prgn> <strong>sólo una
  vez</strong>, y que no se comportará correctamente si lo haces otra
  vez en el mismo directorio ya «debianizado». La actualización de un
  paquete ya creado es un proceso más complejo: es probable que
  se haya construido con procedimientos distintos al actual. Es mejor
  trabajar con paquetes actualizados para aprender lo básico del
  empaquetado. Esto también significa
  que usarás un método distinto para crear una nueva revisión o una
  nueva versión de tu paquete en el futuro. Lee más sobre esto más
  adelante, en <ref id="update">.

  <chapt id="modify">Modificar las fuentes

  <p>Ten en cuenta que no hay espacio aquí para entrar en
  <em>todos</em> los detalles respecto a los arreglos que deben
  hacerse en las fuentes originales. Sin embargo, a continuación se
  detallan algunos de los problemas más frecuentes.

  <sect id="quiltrc">Utilizando <prgn>quilt</prgn>

  <p>El programa <prgn>quilt</prgn> ofrece un método básico para
  realizar y conservar las modificaciones del código fuente
  para construir paquetes Debian. Para empaquetar, es preferible
  realizar algunos cambios a la configuración predeterminada
  del programa, vamos a escribir lo siguiente en
  el archivo <file>~/.quiltrc</file>.
  <footnote>Para deshabilitar la configuración ejecute el 
  programa <prgn>quilt</prgn> con la opción
  "<tt>quilt --quiltrc /dev/null ...</tt>".
  </footnote>

<example>
d=. ; while [ ! -d "$d/debian" -a `readlink -e $d` != / ]; do d="$d/.."; done
if [ -d "$d/debian" ] && [ -z "$QUILT_PATCHES" ]; then
    # Debian packaging case and unset $QUILT_PATCHES
    QUILT_PATCHES=debian/patches
    QUILT_PATCH_OPTS="--unified-reject-files"
    QUILT_DIFF_ARGS="-p ab --no-timestamps --no-index --color=auto"
    QUILT_REFRESH_ARGS="-p ab --no-timestamps --no-index"
    QUILT_COLORS="diff_hdr=1;32:diff_add=1;34:diff_rem=1;31:diff_hunk=1;
        33:diff_ctx=35:diff_cctx=33"
    if ! [ -d $d/debian/patches ]; then mkdir $d/debian/patches; fi
fi
</example>

  <p>Véase <manref name="quilt" section="1"> y
  <file>/usr/share/doc/quilt/quilt.html</file> para utilizar <prgn>quilt</prgn>.


  <sect id="fixupstream">Arreglando fallos en el código fuente
 
  <p>Vamos a suponer que has encontrado el siguiente error en el archivo 
  <file>Makefile</file> original: donde pone «<tt>install: gentoo</tt>»
  deberia poner «<tt>install: gentoo-target</tt>».

<example>
install: gentoo
        install ./gentoo $(BIN)
        install icons/* $(ICONS)
        install gentoorc-example $(HOME)/.gentoorc
</example>

  <p>Vamos a arreglar este error con la orden <prgn>quilt</prgn>
  y conservar las modificaciones a realizar en el archivo 
  <file>fix-gentoo-target.patch</file>
  <footnote>El directorio <file>debian/patches</file> deberia
  haberse creado en la anterior ejecución de <prgn>dh_make</prgn>.
  Sólo debes crearlo si no existe o bien si estas actualizando
  un paquete.</footnote>.

<example>
$ mkdir debian/patches
$ quilt new fix-gentoo-target.patch
$ quilt add Makefile
</example>

  <p>Ahora cambia el archivo <file>Makefile</file> (con un
  editor) original dejándolo asi:

<example>
install: gentoo-target
        install ./gentoo $(BIN)
        install icons/* $(ICONS)
        install gentoorc-example $(HOME)/.gentoorc
</example>

  <p>A continuación ejecuta <prgn>quilt</prgn> para que actualice
  el parche creando el archivo <file>debian/patches/fix-gentoo-target.patch</file> 
  y añade la descripción de la modificación
  <footnote>N. de t.: se aconseja que después de la ejecución
  de cada orden, examines atentamente los cambios. En este ejemplo,
  se crea el archivo <file>debian/patches/fix-gentoo-target.patch</file>
  que es un archivo de texto que contiene los cambios realizados
  en el archivo <file>Makefile</file>. Las lineas a eliminar
  van precedidas de un signo «-» y a continuación están
  las nuevas lineas precedidas por un signo «+».
  En la cabecera del archivo del parche está la descripción
  del parche. Las descripciones deben estar en ingles.</footnote>.

<example>
$ quilt refresh
$ quilt header -e
... se ejecutará el editor GNU nano y podrás
escribir un texto corto con la descripción de lo que
hace el parche. Debes guardar los cambios con «Ctrl+O» y
cerrar el programa con «Ctrl+X»
</example>
  

  <sect id="destdir">Instalación del programa

  <p>Por lo general, los programas se instalan a sí mismos en el
  subdirectorio <file>/usr/local</file>. Pero los paquetes Debian no pueden
  utilizar este directorio ya que está reservado para el uso privado
  del administrador (o de los usuarios) sino que deben utilizar
  los directorios del sistema como <file>/usr/bin</file> según lo
  establecido por la normativa de jerarquia del sistema de archivos
  («Filesystem Hierarchy Standard» <url name="FHS" id="http://www.debian.org/doc/packaging-manuals/fhs/fhs-2.3.html">, 
  <file>/usr/share/doc/debian-policy/fhs/fhs-2.3.html</file>).


  <p>Es frecuente la utilización de <manref name="make" section="1"> para
  la construcción automatizada del programa y la ejecución de la orden
  "<tt>make install</tt>" instala directamente el programa en
  la ubicación deseada ejecutando la sección <tt>install</tt>
  del archivo <file>Makefile</file>. En la construcción de los
  paquetes binarios de Debian, el sistema de construcción instala
  los programas en una reconstrucción de la estructura de directorios
  del programa en un directorio temporal en lugar de hacerlo
  en su destino real.
  
  <p>Estas dos diferencias entre (1) la instalación del programa y
  (2) la «simulación» de instalción en el empaquetamiento Debian
  es manejada de forma transparente por el paquete
  <package>debhelper</package> con las órdenes
  <prgn>dh_auto_configure</prgn> y <prgn>dh_auto_install</prgn>
  siempre que se cumplan los siguientes requisitos:
  <list>
  <item>El archivo <file>Makefile</file> debe seguir las convenciones
  GNU de forma que admita la variable <tt>$(DESTDIR)</tt>.
  (véase <file>/usr/share/doc/gnu-standards/standards.html#Makefile-Conventions</file>
  o <file>http://www.gnu.org/prep/standards/html_node/DESTDIR.html#DESTDIR</file>).
  <item>El código fuente sigue el estándar de la jerarquía del sistema de ficheros.
  («Filesystem Hierarchy Standard» o FHS).
  </list>

  <p>Los programas que usan <prgn>autoconf</prgn> de GNU cumplen
  <em>automáticamente</em> con las convenciones GNU y su empaquetamiento
  es casi <em>automático</em>. Con estos requisitos y la heurística
  que aplica el paquete <package>debhelper</package>, es posible
  empaquetar sin hacer cambios en el sistema de construcción. El
  empaquetado no es tan complicado como puede parecer.
 
  <p>Si debes hacer cambios en el archivo <file>Makefile</file>,
  debes asegurarte que soportan la variable <tt>$(DESTDIR)</tt>.
  La variable <tt>$(DESTDIR)</tt> no está definida en el archivo
  y se añadirá en todas las rutas de directorios usadas en la
  instalación del programa. El guión de empaquetamiento establece
  el valor de la variable <tt>$(DESTDIR)</tt> al valor del
  directorio temporal de instalación del programa en el proceso
  de construcción del paquete.

  <p>El directorio temporal usado por la orden <prgn>dh_auto_install</prgn>
  es <file>debian/<var>nombre_de_paquete</var></file> para paquetes
  con un binario
  <footnote>Para paquetes con más de un archivo binario, la orden
  <prgn>dh_auto_install</prgn> utiliza como directorio temporal
  <file>debian/tmp</file> mientras que la orden <prgn>dh_install</prgn>
  con la ayuda de los archivos <file>debian/<var>paquete-1</var>.install</file>
  y <file>debian/<var>paquete-2</var>.install</file> distribuirá el
  contenido del directorio <file>debian/tmp</file> en los directorios
  temporales <file>debian/<var>paquete-1</var></file> y
  <file>debian/<var>package-2</var></file> para construir
  paquetes <file>*.deb</file> para más de un binario.
  </footnote>.
  El contenido completo del directorio temporal será instalado en
  en sistema del usuario cuando se instale el paquete, con la diferencia
  que con <prgn>dpkg</prgn> la instalación se realizará a partir del
  directorio raiz del sistema (en lugar del directorio <file>debian/</file>
  o <file>debian/tmp</file> utilizado en la construcción del paquete).

  <p>Todos los archivos y directorios que se instalen en el
  directorio <file>debian/<var>nombre_del_paquete</var></file> durante
  la construcción del paquete, deberan poder instalarse correctamente
  en el directorio raíz cuando se instalen usando el archivo <file>.deb</file>
  <footnote>N. de t.: los archivos <file>.deb</file> son archivos comprimidos.
  Si miras su contenido con un programa de gestión de archivos comprimidos,
  veras que contiene un archivo comprimido «data.tar.gz» el cual contiene
  una réplica de la estructura de directorios que empieza en el directorio
  raíz. El análisis del contenido del directorio «debian» después
  del construcción del archivo <file>.deb</file> y del contenido
  del archivo <file>.deb</file> del paquete te ajudaran a entender el proceso.
  </footnote>.
  No deben aparecer cadenas del tipo
  <tt>/home/me/deb/<var>gentoo-0.9.12/usr/share/gentoo</var></tt>
  al hacer la construcción del paquete.
 
  Esto significa que tienes que
  mirar el sistema de construcción de tu programa, generalmente
  empezando por el fichero «Makefile». Éste es el guión <manref name="make"
  section="1"> que se usará para automatizar la creación de este programa.
  Para más detalles sobre los ficheros «Makefiles», consulta <ref id="rules">.

  <p>La mayor parte de los programas tienen alguna manera de
  instalarse en la estructura de directorios existente en tu sistema,
  para que los binarios sean incluidos en tu $PATH, y para que
  encuentre la documentación y páginas de manual en los lugares
  habituales. Sin embargo, si lo instalas de esta forma, el programa
  se instalará con los demás binarios que ya están en tu sistema. 
  Esto dificultará a las herramientas de paquetes averiguar qué
  archivos pertenecen a tu paquete y cuales no.
  
  <p>Por lo tanto, necesitas hacer algo más: instalar el programa en
  un subdirectorio temporal desde el cual las herramientas de desarrollo
  construirán el paquete .deb que se pueda instalar. Todo
  lo que se incluye en este directorio será instalado en el sistema
  del usuario cuando instale su paquete, la única diferencia es que
  dpkg instalará los ficheros en el directorio raíz.
  
  <p>Este directorio temporal se creará bajo el directorio <file>debian/</file>
  que está dentro del árbol del código descomprimido,
  generalmente con el nombre 
  <file>debian/nombre_de_paquete</file>.

  <p>Ten en cuenta que, aunque necesitas que el programa se instale en
  <file>debian/nombre_de_paquete</file>, también necesitas que se comporte correctamente cuando se
  instale en el directorio raíz, es decir, cuando se instale desde el
  paquete .deb. Así que no deberías permitir que al construirse 
  lo haga con cadenas como
  <tt>/home/me/deb/gentoo-0.9.12/usr/share/gentoo</tt> 
  dentro de los archivos del paquete a distribuir.

  
  <p>Esta es la parte importante del <file>Makefile</file>
  de <package>gentoo</package>
  <footnote>Se trata solo de un ejemplo del contenido del
  archivo <file>Makefile</file>. Si el archivo <file>Makefile</file>
  se contruye con la orden <prgn>./configure</prgn>, el procedimiento
  correcto es ejecutar <prgn>./configure</prgn> desde la orden
  <prgn>dh_auto_configure</prgn> con las opciones predeterminadas
  incluyendo <tt>--prefix=/usr</tt>.</footnote>:

  <p><example>
  # ¿Dónde poner el binario en «make install»?
  BIN     = /usr/local/bin
  
  # ¿Dónde poner los iconos en «make install»? 
  ICONS   = /usr/local/share/gentoo/
  </example>

  <p>Vemos que los ficheros están configurados para instalarse bajo
  <file>/usr/local</file>.
  Cambia estas rutas a:
  
  <p><example>
  # ¿Dónde poner el binario en «make install»?
  BIN     = $(DESTDIR)/usr/bin

  # ¿Dónde poner los iconos en «make install»? 
  ICONS   = $(DESTDIR)/usr/share/gentoo
  </example>

  <p>Pero ¿por qué en este directorio y no en otro? Porque los paquetes
  de Debian nunca se instalan bajo <file>/usr/local</file>, este árbol
  de directorio, está reservado para el uso del administrador del sistema.
  Así que estos ficheros deben instalarse en <file>/usr</file>.

  <p>La localización correcta de los binarios, iconos, documentación,
  etc, está especificada en el «Estándar de la jerarquía del
  sistema de ficheros»
  (véase <file>/usr/share/doc/debian-policy/fhs</file>).
  Te recomiendo que leas las secciones que podrían aplicarse a tu
  paquete.
  
  <p>Así pues, deberíamos instalar el
  binario en <file>/usr/bin</file> en lugar de <file>/usr/local/bin</file> y la página de
  manual en <file>/usr/share/man/man1</file> en lugar de <file>/usr/local/man/man1</file>.
  No hemos mencionado ninguna página de manual en el Makefile de gentoo,
  pero en Debian se requiere que cada programa debe tener una, así que
  haremos una más tarde y la instalaremos en <file>/usr/share/man/man1</file>.

  <p>Algunos programas no usan variables en el <file>makefile</file> para definir
  rutas como éstas. Esto significa que tendrás que editar algunos de los
  ficheros de código C para arreglarlos y que usen las rutas correctas.
  Pero, ¿dónde buscar?, y exactamente, ¿el qué?
  Puedes probar a encontrarlos usando:
  
  <p><example>
  grep -nr -e 'usr/local/lib' --include='*.[c|h]' .
  </example>
  
  <p><prgn>grep</prgn> buscará recursivamente en los subdirectorios
  los archivos de extension <prgn>.c</prgn> y <prgn>.h</prgn> y
  te indicará el nombre del fichero y la línea cuando encuentre una
  concordancia con la cadena <file>usr/local/lib</file>.

  <p>Ahora edita esos ficheros y cambia en esas líneas
  <tt>usr/local/lib</tt> por <tt>usr/lib</tt>. La siguiente
  orden deberia hacerlo automáticamente
  <footnote>N. de t.: más razonable seria que el programa
  declarara una constante global y que sólo se deba
  hacer una substitución.</footnote>:
<example>
$ vim '+argdo %s/usr\/local\/lib/usr\/lib/gce|update' +q \
      $(find . -type f -name '*.[c|h]')
</example>  

  <p>¡Mucha atención en hacer otros cambios inadvertidos en el código! :-)

  <p>Después de esto deberías encontrar (en el archivo <file>Makefile</file>)
  el objetivo «install» (busca una línea que comience por «install:»)
  y renombra todas las
  referencias a directorios distintos de los definidos al comienzo del
  Makefile. Antes de corregir el error en el código original,
  el objetivo «install» de <package>gentoo</package> declaraba:

<example>
install: gentoo-target
        install ./gentoo $(BIN)
        install icons/* $(ICONS)
        install gentoorc-example $(HOME)/.gentoorc
</example>

  <p>Para corregir el error y conservar las modificaciones
  en el archivo <file>debian/patches/install.patch</file>
  con la orden <prgn>quilt</prgn> ejecuta
<example>
$ quilt new install.patch
$ quilt add Makefile
</example>

  <p>Y ahora escribe los cambios con el editor:
<example>
install: gentoo-target
        install -d $(BIN) $(ICONS) $(DESTDIR)/etc
        install ./gentoo $(BIN)
        install -m644 icons/* $(ICONS)
        install -m644 gentoorc-example $(DESTDIR)/etc/gentoorc
</example>

  <p>Seguramente has notado que ahora hay una orden <tt>install
  -d</tt> antes de las demás órdenes de la regla. El <file>Makefile</file> original
  no lo tenía porque normalmente <tt>/usr/local/bin</tt> y otros directorios ya
  existen en el sistema donde se ejecuta «<tt>make install</tt>». Sin embargo,
  dado que lo instalaremos en un directorio vacío (o incluso
  inexistente), tendremos que crear cada uno de estos directorios
  
  <p>También podemos añadir otras cosas al final de la regla,
  como la instalación de documentación adicional que los desarrolladores
  originales a veces omiten:

  <p><example>
       install -d $(DESTDIR)/usr/share/doc/gentoo/html
       cp -a docs/* $(DESTDIR)/usr/share/doc/gentoo/html
  </example>

  <p>Después de comprobar que sea todo correcto, 
  haz que <prgn>quilt</prgn> actualice la modificación
  en el archivo <file>debian/patches/install.patch</file>
  y añade la descripción en la cabecera del archivo:
<example>
$ quilt refresh
$ quilt header -e
... describe la modificación
</example>

  <p>Ahora ya tienes un par de parches en el paquete:
  <enumlist>
    <item>Corrección de un error en el código fuente:
    <file>debian/patches/fix-gentoo-target.patch</file> 
    <item>Una modificación específica del empaquetado Debian:
    <file>debian/patches/install.patch</file>
  </enumlist>

  <p>Siempre que hagas cambios que no estén específicamente
  relacionados con el paquete Debian, tales como
  <file>debian/patches/fix-gentoo-target.patch</file>,
  asegúrate de que los envías al
  desarrollador original para que éste los pueda incluir en la próxima
  revisión del programa y así le puedan ser útiles a alguien más.
  Además, recuerda hacer que tus cambios no sean específicos para
  Debian o GNU/Linux (¡ni siquiera para Unix!) antes de enviarlos, hazlo portable.
  Esto hará que tus arreglos sean más fáciles de aplicar.

  <p>Ten en cuenta que no tienes que enviar ninguno de los ficheros 
  <file>debian/*</file> al desarrollador original.
  
  <sect id="difflibs">Diferencias en las bibliotecas

  <p>Hay otro problema común: las bibliotecas son generalmente diferentes
  entre plataformas. Por ejemplo, un <file>Makefile</file> puede contener
  una referencia a una biblioteca que no exista en Debian o ni siquiera
  en GNU/Linux. En este caso, se necesita cambiarla a una biblioteca que sí
  exista en Debian y sirva para el mismo propósito. 

  <p>Así, si hay una línea en el <file>Makefile</file> (o <file>Makefile.in</file>) de tu
  programa que dice algo como lo siguiente (y tu programa no compila)
  <footnote><p>El autor es consciente que este no es
  el mejor ejemplo ahora que el paquete <package>libncurses</package>
  incluye un enlace simbólico <file>libcurses.so</file>
  pero no tenia a mano un ejemplo mejor. Cualquier sugerencia
  será bienvenida :-)</footnote>:

  <p><example>
  LIBS = -lcurses -lcosas -lmáscosas
  </example>

  <p>Corrige esto con el archivo <file>debian/patches/ncurse.patch</file>
  cambiando <tt>curses</tt> por <tt>ncurses</tt>.

<example>
$ quilt new ncurse.patch
$ quilt add Makefile
$ sed -i -e "s/-lcurses/-lncurses/g" Makefile
$ quilt refresh
$ quilt header -e
... describe el cambio
</example>
 
  <chapt id="dreq">Archivos necesarios en el directorio <file>debian</file>

  <p>Ahora hay un nuevo subdirectorio bajo el directorio principal del
  programa («gentoo-0.9.12»), que se llama «debian». 
  Hay algunos ficheros en este directorio que debemos editar para adaptar
  el comportamiento del paquete. La parte más importante es modificar
  los ficheros «control», «rules», «changelog», y
  «copyright» que son necesarios en todos los paquetes.

  <sect id="control">El archivo <file>control</file>

  <p>Este fichero contiene varios valores que  <prgn/dpkg/, <prgn/dselect/, 
  <prgn/apt-get/, <prgn/apt-cache/, <prgn/aptitude/
  y otras herramientas de gestión de paquetes
  usarán para gestionar el paquete. Su contenido está concretado
  en <url name="Debian Policy Manual, 5 'Control files and their fields'"
  id="http://www.debian.org/doc/debian-policy/ch-controlfields.html">.
  
  <p>Aquí está el fichero de control que dh_make crea para nosotros:

<example>
 1 Source: gentoo
 2 Section: unknown
 3 Priority: extra
 4 Maintainer: Josip Rodin &lt;joy-mg@debian.org&gt;
 5 Build-Depends: debhelper (>= 7.0.50~)
 6 Standards-Version: 3.8.4
 7 Homepage: &lt;aqui la URL del autor original  &gt;
 8
 9 Package: gentoo
10 Architecture: any
11 Depends: ${shlibs:Depends}, ${misc:Depends}
12 Description: &lt;insertar hasta 60 caracteres de descripción&gt;
13  &lt;inserta una descripción larga, indentada con espacios.&gt;
</example>

  (He añadido los números de línea).

  <p>Las líneas 1 a 6 son la información de control para el paquete
  fuente. 
  
  <p>La línea 1 es el nombre del paquete fuente.

  <p>La línea 2 es la sección de la distribución dentro de la que
  estará este paquete. 
  
  <p>Como puede que hayas notado, Debian está dividida
  en secciones: «main» (principal, los programas libres
  o de código abierto),
  «non-free» (no libre, los programas que no son
  libres, que son de propietario) y «contrib» (programas libres que dependen
  de programas no libre o de propietario).
  Bajo ellas hay subdivisiones lógicas que describen en una palabra
  qué paquetes hay dentro. Así que tenemos «admin» para programas que
  sólo usa un administrador, «base» para las herramientas básicas,
  «devel» para las herramientas de programación, «doc» para la
  documentación, «libs» para las bibliotecas, «mail» para
  lectores y demonios de correo-e, «net» para aplicaciones y demonios
  de red, «x11» para programas específicos de X11, y muchos más.

  <p>Vamos a cambiarla para que ponga x11. El prefijo «main/» ya va 
  implícito, así que podemos omitirlo. Véase
  <url name="Manual de normas de Debian, 2.4 'Secciones'" id="http://www.debian.org/doc/debian-policy/ch-archive.html#s-subsections"> y 
  <url name="Lista de secciones en «sid»" id="http://packages.debian.org/unstable/">
  para más información.

  <p>La línea 3 describe cómo de importante es para el usuario la
  instalación de este paquete. Podrás consultar en el manual de normas
  de Debian («Debian Policy», N. del T.) en
  <url name="Manual de normas de Debian, 2.5 'Prioridad'" id="http://www.debian.org/doc/debian-policy/ch-archive.html#s-priorities">
  la guía de los valores que
  deberían tener estos campos.
  <list>
  <item>La prioridad <tt>optional</tt> se utiliza para paquetes
  nuevos que no entran en conflicto con otros con prioridad
  <tt>required</tt>, <tt>important</tt> o <tt>standard</tt>.
  <item>La prioridad <tt>extra</tt> se utiliza para nuevos paquetes
  que entran en conflicto con otros que no tengan la prioritat
  <tt>extra</tt>
  </list>
  La prioridad «optional» suele ser la mejor opción para los paquetes nuevos.
  
  <p>«Section» y «Priority» se usan en las interfaces 
  como <prgn/dselect/ cuando ordenan los paquetes y seleccionan
  los predeterminados. Una vez que envies el
  paquete a Debian, el valor de estos dos campos puede no ser aceptado
  por los responsables del archivo, en cuyo caso te lo notificarán por
  correo electrónico.
  
  <p>Como es un paquete de prioridad normal y no tiene conflictos con
  ningún otro, lo dejaremos con prioridad «optional» (opcional).

  <p>La línea 4 es el nombre y correo electrónico del desarrollador.
  Asegúrate de que este campo incluye una cabecera válida «To: »,
  para una dirección de correo electrónico, porque después de que envíes
  el paquete, el sistema de seguimiento de errores («Bug Tracking System», N. del T.)  
  utilizará esta dirección para enviarte los mensajes de los bugs.
  Evita usar comas, el signo «&amp;» y paréntesis. 
  
  <p>La línea 5 incluye la lista de paquetes requeridos para construir
  tu paquete (en el campo <tt>Build-Depends</tt>). Puedes tener una línea
  adicional con el campo <tt>Build-Depends-Indep</tt> (consulta
  <url name="Debian Policy Manual, 7.7 'Relationships between source and binary packages - Build-Depends, Build-Depends-Indep,
  Build-Conflicts, Build-Conflicts-Indep" id="http://www.debian.org/doc/debian-policy/ch-relationships.html#s-sourcebinarydeps">
  para más información sobre este campo).
  Algunos paquetes como  <package>gcc</package> y <package>make</package> están implícitos,
  consulta el paquete <package>build-essential</package> para más detalles.
  Si se necesita algún compilador no estándar u otra herramienta
  para construir tu paquete, deberías añadirla en la línea «Build-Depends».
  Las entradas múltiples se separan con comas, lee la explicación de las 
  dependencias binarias para averiguar más sobre la sintaxis de este campo.
  Además, tienes los siguientes casos:

  <list>
  <item>Para todos los paquetes construidos con la orden <prgn>dh</prgn>
  en el archivo <file>debian/rules</file>, estará <tt>debhelper (>=7.0.50~)</tt>
  en el campo <tt>Build-Depends</tt> para ajustarse a las normas de Debian
  respecto al objetivo <tt>clean</tt>.

  <item>Los paquetes de fuentes que incluyen varios paquetes binarios
  con el campo <tt>Architecture: any</tt> se construyen con «autobuilder».
  Desde el procedimiento «autobuilder» se ejecuta el objetivo
  <tt>debian/rules build</tt> el cual, a su vez, instala los paquetes
  listados en el campo <tt>Build-Depends</tt> (véase <ref id="autobuilder">),
  que habitualmente son todos los necesarios de forma que el campo
  <tt>Build-Depends-indep</tt> se usa raramente.

  <item>Los paquetes de fuentes que incluyen paquetes binarios únicamente
  del tipo <tt>Architecture: all</tt>, el campo <tt>Build-Depends-Indep</tt>
  debe listar todos los paquetes excepto los listados en el campo <tt>Build-Depends</tt>
  para satisfacer los requerimientos de las normas de Debian respecto
  al objectivo <tt>clean</tt>.
  </list>

  <p>En caso de duda, utiliza el campo <tt>Build-Depends</tt>
  <footnote>Este caso esta documentado en  
  <url name="Debian Policy Manual, Footnotes 48" id="http://www.debian.org/doc/debian-policy/footnotes.html#f48">.
  Esto se debe al funcionamiento de <prgn>dpkg-buildpackage</prgn>,
  no al uso de la orden <prgn>dh</prgn> en el archivo <file>debian/rules</file>.
  Esto también se aplica al 
  <url name="«auto build system for Ubuntu»" id="https://bugs.launchpad.net/launchpad-buildd/+bug/238141">.
  </footnote>

  <p>También tienes los campos «Build-Depends-Indep» y «Build-Conflicts» 
  entre otros. Estos datos los usarán los programas de construcción
  automática de paquetes de Debian para crear paquetes binarios para
  el resto de arquitecturas.
  Consulta las normas de Debian para más información sobre las dependencias
  de construcción y la Referencia del Desarrollador para más información
  sobre las otras arquitecturas y sobre cómo migrar los programas
  a ellas.

  <p>Para saber que paquetes son necesarios para compilar el tuyo
  ejecuta esta orden:

<example>
$ dpkg-depcheck -d ./configure
</example>

  <p>Para buscar manualmente las dependencias de compilación
  para el paquete <prgn><var>/usr/bin/foo</var></prgn>,
  deberias ejecutar:

<example>
$ objdump -p <var>/usr/bin/nombre_paquete</var> | grep NEEDED
</example>

  y para cada biblioteca listada por la orden anterior
  (en el ejemplo se hace para <prgn>libfoo.so.6</prgn>)
  ejecuta

<example>
$ dpkg -S libfoo.so.6 
</example>

  Debes utilizar la versión «-dev»
  de cada uno de los paquetes dentro de la entrada «Build-deps». Si usas
  <prgn>ldd</prgn> para este propósito, también te informará de las
  dependencias de bibliotecas indirectas, lo que puede llevar a que se
  introduzcan demasiadas dependencias de construcción.

  <p><package>gentoo</package> también requiere <package/xlibs-dev/,
  <package/libgtk1.2-dev/ y <package/libglib1.2-dev/ 
  para su construcción, así que lo añadiremos junto a 
  <package/debhelper/.
    
  <p>Aquí tienes un truco que puedes usar para averiguar qué paquetes
  necesitará tu paquete en su construcción:
  <example>
  strace -f -o /tmp/log ./configure
  # o make en lugar de ./configure, si el paquete no usa autoconf
  for x in `dpkg -S $(grep open /tmp/log|\
                      perl -pe 's!.* open\(\"([^\"]*).*!$1!' |\
                      grep "^/"| sort | uniq|\
                      grep -v "^\(/tmp\|/dev\|/proc\)" ) 2>/dev/null|\
                      cut -f1 -d":"| sort | uniq`; \
        do \
          echo -n "$x (>=" `dpkg -s $x|grep ^Version|cut -f2 -d":"` "), "; \
        done
  </example>

  <p>La línea 6 es la versión de los estándares definidos en las normas de
  Debian que sigue este paquete, es decir, la versión del manual de normas
  que has leído mientras haces tu paquete (véase
  <url name="Debian Policy Manual"
  id="http://www.debian.org/doc/devel-manuals#policy">.

  <p>En la línea 7 está la dirección URL del programa.

  <p>La línea 9 es el nombre del paquete binario. Este suele ser el mismo
  que el del paquete fuente, aunque no es necesario que sea así siempre.

  <p>La línea 10 describe la arquitectura de CPU para la que el paquete binario
  puede ser compilado. Dejaremos puesto «any» (cualquiera),
  porque <manref name="dpkg-gencontrol" section="1"> la rellenará con
  el valor apropiado cuando se compile este paquete en cualquier
  arquitectura para la cual pueda ser compilado.
 
  <p>Si tu paquete es independiente de la arquitectura (por ejemplo, un
  documento, un guión escrito en Perl o para el intérprete de órdenes), cambia esto a
  «all», y consulta más adelante <ref id="rules"> sobre cómo usar la regla
  «binary-indep» en lugar de «binary-arch» para construir el paquete.

  <p>La línea 11 muestra una de las más poderosas posibilidades del
  sistema de paquetes de Debian. Los paquetes se pueden relacionar
  unos con otros de diversas formas. Aparte de «Depends:» (depende de)
  otros campos de relación son «Recommends:» (recomienda),
  «Suggests:» (sugiere), «Pre-Depends:»
  (predepende de), «Breaks:» (rompe a),
  «Conflicts:» (entra en conflicto con), «Provides:» (provee),
  «Replaces:» (reemplaza a)
  <footnote>N. de t.: la explicación de cada posibilidad la
  tienes en <url name="preguntas más frecuentes de Debian"
  id="http://www.debian.org/doc/FAQ/ch-pkg_basics.en.html#s-depends"></footnote>.

  <p>Las herramientas de gestión de paquetes se comportan habitualmente
  de la misma forma cuando tratan con esas relaciones entre paquetes;
  si no es así, se explicará en cada caso. 
  (véase <manref name="dpkg" section="8">, 
  <manref name="dselect" section="8">, 
  <manref name="apt" section="8">, 
  <manref name="aptitude" section="1">, etc.)

  <p>A continuación se detalla el significado de las dependencias
  <footnote>N. de t.: la descripción completa está en
  <url id="http://www.debian.org/doc/debian-policy/ch-relationships.html">.</footnote>:

  <list>
  <item>Depends:
  <p>No se instalará el programa a menos que los paquetes de los que
  depende estén ya instalados. Usa esto si tu programa no funcionará de
  ninguna forma (o se romperá fácilmente) a no ser que se haya instalado un
  paquete determinado.</item>

  <item>Recommends:  
  <p>Esta opción es para paquetes cuya instalación no es estrictamente
  necesaria para el funcionamiento de tu programa pero que suelen utilizarse
  junto con tu programa. Cuando los usuarios
  instalen tu paquete, todas las interfaces de instalación
  aconsejaran la instalación de los paquetes recomendados.
  <prgn>aptitude</prgn> y <prgn>apt-get</prgn> instalan los paquetes
  recomendados (pero el usuario puede decidir no hacerlo).
  <prgn>dpkg</prgn> ignora el contenido de este campo.
  </item>

  <item>Suggests:
  <p>Cuando un usuario instale el paquete, todos los programas le
  informarán de que puede instalar los paquetes sugeridos. Salvo
  <prgn/dpkg/ y <prgn/apt/, que ignorarán estas dependencias. Utiliza
  esto para paquetes que funcionarán bien con tu programa pero que no
  son necesarios en absoluto.</item>

  <item>Pre-Depends:
  <p>Esto es más fuerte que «Depends». El paquete no se instalará a menos 
  que los paquetes de los que pre-dependa esten instalados y
  <em>correctamente configurados</em>. Utiliza esto
  <strong>muy</strong> poco y sólo después de haberlo discutido en la
  lista de distribución (<url id="http://lists.debian.org/debian-devel/"
  name="debian-devel@lists.debian.org">).
  En resumidas cuentas: no lo utilices en absoluto :-)</item>

  <item>Conflicts:
  <p>El paquete no se instalará hasta que todos los paquetes con los
  que entra en conflicto hayan sido eliminados. Utiliza esto si tu
  programa no funcionará en absoluto (o fallará fácilmente) si un paquete
  en concreto está instalado.
  </item>

  <item>Breaks:
  <p>Si el paquete se instala, todos los paquetes de la lista se
  romperan. Normalmente, los paquetes incluidos en la lista
  tienen una cláusula de versión anterior. La solución es actualizar
  los paquetes de la lista a la versión más actual.
  </item>

  <item>Provides:
  <p>Se han definido nombres virtuales para algunos tipos determinados de 
  paquetes que ofrecen múltiples alternativas para la misma función.
  Puedes obtener la lista completa en el fichero
  <file>/usr/share/doc/debian-policy/virtual-package-names-list.text.gz</file>.
  Usa esto si tu programa ofrece las funciones de un paquete virtual
  que ya exista.</item>

  <item>Replaces:
  <p>Usa esto si tu programa reemplaza ficheros de otro paquete o
  reemplaza totalmente otro paquete (generalmente se usa conjuntamente
  con «Conflicts:»). Se eliminarán los ficheros de los paquetes
  indicados antes de instalar el tuyo.</item>
  </list>

  <p>Todos estos campos tienen una sintaxis uniforme: se trata de una lista
  de nombres de paquetes separados por comas. Estos nombres de
  paquetes también puede ser listas de paquetes alternativos,
  separados por los símbolos de barra vertical «<tt>|</tt>» (símbolos
  tubería). 
  
  <p>Los campos pueden restringir su aplicación a versiones
  determinadas de cada paquete nombrado. Esto se hace listando después
  de cada nombre de paquete individual las versiones entre paréntesis,
  e indicando antes del número de versión una relación de la siguiente
  lista. Las relaciones permitidas son: <tt>&lt;&lt;</tt>,
  <tt>&lt;=</tt>, <tt>=</tt>, <tt>&gt;=</tt> y <tt>&gt;&gt;</tt>
  para estrictamente anterior, anterior o igual, exactamente igual,
  posterior o igual o estrictamente posterior, respectivamente.
  Por ejemplo:
  
  <p><example>
  Depends: foo (>= 1.2), libbar1 (= 1.3.4)
  Conflicts: baz
  Recommends: libbaz4 (>> 4.0.7)
  Suggests: quux
  Replaces: quux (<< 5), quux-foo (<= 7.6)
  </example>
  
  <p>La última funcionalidad que necesitas conocer es
  <tt>$(shlibs:Depends)</tt>,<tt>${perl:Depends}</tt>, <tt>${misc:Depends}</tt>, etc.
  Estas entradas funionan como variables: son substituidas por
  por listas de paquetes cuando <package>debhelper</package>
  ejecuta el comando <manref name="dh_gencontrol" section="1">.

  <p>Después de que tu paquete se compile y se
  instale en el directorio temporal, 
  <manref name="dh_shlibdeps" section="1"> lo escaneará en busca
  de binarios y bibliotecas para determinar las dependencias
  de bibliotecas compartidas y en qué paquetes están, tales como 
  como libc6 o xlib6g. Luego pasará la lista a
  <manref name="dh_gencontrol" section="1"> que rellenará estas 
  dependencias en el lugar adecuado (<tt>${shlibs:Depends}</tt>).
  De esta forma no tendrás que preocuparte por esto.

  <p>La lista de paquetes generada por <manref name="dh_perl" section="1">
  se usa para <tt>${perl:Depends}</tt>.

  <p>Algunas órdenes de <package>debhelper</package> determinan las
  dependencias de los paquetes listados anteriormente.
  La lista de estos paquetes se usará para <tt>${misc:Depends}</tt>.
  
  <p>Después de decir todo esto, podemos dejar la línea de «Depends:»
  exactamente como está ahora e insertar otra línea tras ésta que diga
  <tt>Suggests: file</tt>, porque <package>gentoo</package> utiliza algunas funciones de 
  este paquete/programa.

  <p>La línea 12 es una descripción corta. La mayor parte de los
  monitores de la gente son de 80 columnas de ancho, así que no
  debería tener más de 60 caracteres. Cambiaré esto a «fully GUI
  configurable GTK+ file manager» («Gestor de ficheros GTK+
  completamente configurable por GUI»).

  <p>La línea 13 es donde va la descripción larga del paquete. Debería
  ser al menos un párrafo que dé más detalles del paquete. La primera 
  columna de cada línea debería estar vacía. No puede haber líneas en
  blanco, pero puede poner un «.» (punto) en una columna para simularlo.
  Tampoco debe haber más de una línea en blanco después de la
  descripción completa
  <footnote>N. de t.: estas descripciones van en inglés. Aún asi
  hay un projecto en marcha para facilitar la traducción de
  las traducciones (<url id="http://www.debian.org/intl/l10n/ddtp.es.html">).
  </footnote>.

  <p>Vamos a poner los campos <tt>Vcs-*</tt> documentados en
  <url name="Developer's Reference, 6.2.5. 'Version Control System location'" 
  id="http://www.debian.org/doc/manuals/developers-reference/best-pkging-practices.html#bpp-vcs">
  entre las lineas 6 y 7. Se supone que el paquete <package>gentoo</package>
  está alojado en el servicio <tt>Debian Alioth Git</tt> en
  <tt>git://git.debian.org/git/collab-maint/gentoo.git</tt>
  <footnote>N. de t.: el <package>gentoo</package> no utiliza
  el servicio Git: actualmente está alojado en 
  <url id="http://sourceforge.net/projects/gentoo/">.</footnote>.

  <p>Aquí está el archivo <file>control</file> actualizado:

<example>
 1 Source: gentoo
 2 Section: x11
 3 Priority: optional
 4 Maintainer: Josip Rodin &lt;joy-mg@debian.org&gt;
 5 Build-Depends: debhelper (>= 7.0.5), xlibs-dev, libgtk1.2-dev,
     libglib1.2-dev
 6 Standards-Version: 3.8.4
 7 Vcs-Git: git://git.debian.org/git/collab-maint/gentoo.git
 8 Vcs-browser: http://git.debian.org/?p=collab-maint/gentoo.git
 9 Homepage: http://www.obsession.se/gentoo/
10
11 Package: gentoo
12 Architecture: any
13 Depends: ${shlibs:Depends}, ${misc:Depends}
14 Suggests: file
15 Description: fully GUI-configurable, two-pane X file manager
16  gentoo is a two-pane file manager for the X Window System. 
    gentoo lets the
17  user do (almost) all of the configuration and customizing 
    from within the
18  program itself. If you still prefer to hand-edit configuration files,
19  they're fairly easy to work with since they are written in an XML format.
20  .
21  gentoo features a fairly complex and powerful file identification system,
22  coupled to a object-oriented style system, which together give you a lot
23  of control over how files of different types are displayed and acted upon.
24  Additionally, over a hundred pixmap images are available for use in file
25  type descriptions.
26  .
29  gentoo was written from scratch in ANSI C, and it utilises the GTK+ 
    toolkit
30  for its interface.
</example>
  (He añadido los números de línea. Las lineas truncadas son para
  mejorar la lectura).

  <sect id="copyright">El archivo <file>copyright</file>

  <p>Este fichero contiene la información sobre la licencia y
  copyright de las fuentes originales del paquete. El formato no está
  definido en las normas, pero sí en sus contenidos (<url name="Debian Policy Manual, 12.5 'Copyright information'" id="http://www.debian.org/doc/debian-policy/ch-docs.html#s-copyrightfile">).
  También puedes consultar <url name="DEP-5: Machine-parseable debian/copyright" id="http://dep.debian.net/deps/dep5/">.
  

  <p><prgn>dh_make</prgn> proporciona una plantilla para
  el archivo <file>copyright</file>. Con la opción <tt>--copyright gpl2</tt>
  se consigue la plantilla para el paquete <package>gentoo</package>
  con la licancia GPL-2.

  <p>Debes completar la información sobre el lugar donde se puede
  obtener el código fuente, la condiciones de derechos de autor
  y la licencia. Las licencias de código libre más comunes son
  GNU GPL-1, GNU GPL-2, GNU GPL-3, LGPL-2, LGPL-2.1, LGPL-3,
  GNU FDL-1.2, GNU FDL-1.3, Apache-2.0 o la «Artistic license»
  <footnote>N. de t.: hay que tener muy presente que las licencias
  afectan a <tt>todos</tt> los archivos que se incluiran en el paquete:
  la documentación, el código fuente, las imágenes, etc.
  Podria darse el caso que se apliquen licencias distintas a
  algunos archivos.</footnote>
  y hacer referencia al archivo correspondiente ubicado en
  el directorio <file>/usr/share/common-licenses/</file> de
  los sistemas Debian. De lo contrario, debe incluirse en el
  archivo <file>copyright</file> el texto de la licencia completo.

  <p>En resumen, el archivo <file>copyright</file> del paquete
  <package>gentoo</package> deberia ser similar a esto
  <footnote>N. de t.: las normas actuales de Debian indican que los
  documentos aquí citados estén escritos en inglés, al ser el idioma
  oficial del proyecto, por lo que no se traducen en este documento.
  Si no estas familiarizado con el texto de las licencias, tal vez
  deberias leerlas. Encontrarás las versiones originales en 
  <url id="http://www.gnu.org/licenses/licenses.es.html"> y las
  traducciones en <url id="http://www.gnu.org/licenses/translations.es.html">.
  </footnote>:

<example>
 1 Format-Specification: http://svn.debian.org/wsvn/dep/web/deps/
    dep5.mdwn?op=file&amp;rev=135
 2 Name: gentoo
 3 Maintainer: Josip Rodin &lt;joy-mg@debian.org&gt;
 4 Source: http://sourceforge.net/projects/gentoo/files/
 5
 6 Copyright: 1998-2010 Emil Brink &lt;emil@obsession.se&gt;
 7 License: GPL-2+
 8
 9 Files: icons/*
10 Copyright: 1998 Johan Hanson &lt;johan@tiq.com&gt;
11 License: GPL-2+
12
13 Files: debian/*
14 Copyright: 1998-2010 Josip Rodin &lt;joy-mg@debian.org&gt;
15 License: GPL-2+
16
17 License: GPL-2+
18  This program is free software; you can redistribute it and/or modify
19  it under the terms of the GNU General Public License as published by
20  the Free Software Foundation; either version 2 of the License, or
21  (at your option) any later version. 
22  .
23  This program is distributed in the hope that it will be useful,
24  but WITHOUT ANY WARRANTY; without even the implied warranty of
25  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
26  GNU General Public License for more details.
27 .
28  You should have received a copy of the GNU General Public License along
29  with this program; if not, write to the Free Software Foundation, Inc.,
30  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
31  .
32  On Debian systems, the full text of the GNU General Public
33  License version 2 can be found in the file
34  `/usr/share/common-licenses/GPL-2'.
</example>
  
  (He añadido los números de línea. Las lineas truncadas son para
  mejorar la lectura).
  
  <p>Por favor, sigue el COMO redactado por «ftpmasters»
  y enviada a «debian-devel-announce»:  <url id="&copyright-howto;">.
  
  <sect id="changelog">El archivo <file>changelog</file>

  <p>Este es un fichero requerido, que tiene un formato especial
  descrito en las normas Debian, <url name="Debian Policy Manual, 4.4 'debian/changelog'" 
  id="http://www.debian.org/doc/debian-policy/ch-source.html#s-dpkgchangelog">.
  Este es el
  formato que usan dpkg y otros programas para obtener el número de
  versión, revisión, distribución y urgencia de tu paquete.

  <p>Para ti es también importante, ya que es bueno tener documentados
  todos los cambios que hayas hecho. Esto ayudará a las personas que se
  descarguen tu paquete para ver si hay temas pendientes en el paquete
  que deberían conocer de forma inmediata. Se guardará como
  <file>/usr/share/doc/gentoo/changelog.Debian.gz</file> en el paquete binario.

  <p><prgn>dh_make</prgn> crea uno por omisión, el cual es como sigue:

<example>
1  gentoo (0.9.12-1) unstable; urgency=low
2
3   * Initial release (Closes: #<var>nnnn</var>)  &lt;<var>nnnn</var> 
    is the bug number of your ITP&gt;
4
5  -- Josip Rodin &lt;joy-mg@debian.org&gt;  Mon, 22 Mar 2010 00:37:31 +0100
6
</example>
  (He añadido los números de línea. Las lineas truncadas son para
  mejorar la lectura).
  
  <p>La línea 1 es el nombre del paquete, versión, distribución y
  urgencia. El nombre debe coincidir con el nombre del paquete fuente,
  la distribución debería ser, por ahora, «unstable» (o incluso «experimental»)
  <footnote>Muchas personas utilizan un nombre de distribución
  erróneo como <tt>UNRELEASED</tt> para prevenir que el paquete
  sea transferido al repositorio accidentalmente al actualizar
  un sistema VCS compartido.</footnote>
  y la urgencia no debería cambiarse a algo mayor que <tt>low</tt>. :-)
  
  <p>Las línea 3-5 son una entrada de registro, donde se documentan
  los cambios hechos en esta revisión del paquete (no los cambios en
  las fuentes originales - hay un fichero especial para este
  propósito, creado por los autores originales y que instalarás luego como
  <file>/usr/share/doc/gentoo/changelog.gz</file>). En el ejemplo
  se supone que el código del informe de error ITP («Intent To Package»,
  intento de empaquetar) es <tt>#12345</tt>. Las nuevas líneas deben
  insertarse justo antes de la línea que hay más arriba que comienza
  por un asterisco («*»). Puede hacerlo con <manref name="dch"
  section="1">, o manualmente con cualquier editor de texto. 
  
  <p>Terminarás con algo así:  
  
<example>
1  gentoo (0.9.12-1) unstable; urgency=low
2
3   * Initial Release. Closes: #12345
4   * This is my first Debian package.
5   * Adjusted the Makefile to fix $(DESTDIR) problems.
6
7  -- Josip Rodin &lt;joy-mg@debian.org&gt;  Mon, 22 Mar 2010 00:37:31 +0100
8
</example>

  (He añadido los números de línea).

  <p>Puedes leer más sobre cómo actualizar el fichero changelog más
  adelante en <ref id="update">.

  <sect id="rules">El archivo <file>rules</file>

  <p>Ahora necesitamos mirar las reglas exactas que <manref
  name="dpkg-buildpackage" section="1"> utilizará para crear el
  paquete. Este fichero es en realidad otro <file>Makefile</file>, 
  pero diferente al que viene en las fuentes originales.
  A diferencia de otros ficheros en  <file>debian</file>, éste
  debe ser un fichero ejecutable.

  <sect1 id="targets">Objetivos del archivo <file>rules</file>
  
  <p>Cada fichero «rules» (de reglas, N. del T.), como muchos otros
  Makefiles, se compone de varias reglas que especifican cómo tratar
  las fuentes.<url name="Debian Policy Manual, 4.9 'Main building script: debian/rules'"
  id="http://www.debian.org/doc/debian-policy/ch-source.html#s-debianrules">
  explica detalladamente su función.

  <p>He aqui una explicación simplificada de los objectivos:

<list>
<item><tt>clean</tt> (obligatorio): elimina todos los archivos generados,
 compilados o innecesarios del árbol de directorios de las fuentes.
<item><tt>build</tt> (obligatorio): para la construcción de archivos compilados a partir
 de los archivos fuente o la construcción de documentos formateados.
<item><tt>install</tt> (opcional): para la instalación en la estructura
 de directorios temporal bajo el directorio  <file>debian</file>
 de los archivos para cada uno de los paquetes binarios.
 Si existe el objetivo <tt>binary*</tt>, dependerá de este.
<item><tt>binary</tt> (obligatorio): para la construcción de cada uno
 de los paquetes binarios (combinado con los objectivos
 <tt>binary-arch</tt> y <tt>binary-indep</tt>).
 <footnote>Este objetivo es utilizado por <tt>dpkg-buildpackage</tt>
 como en <ref id="completebuild">.</footnote>
<item><tt>binary-arch</tt> (obligatorio): para la construcción
 de paquetes dependientes de la arquitectura («arch-dependent»
 los que tienen el campo del archivo <file>control</file> <tt>Architecture: any</tt>)
 <footnote>Este objectivo es utilizado por <tt>dpkg-buildpackage -B</tt>
 como en <ref id="autobuilder">.</footnote>
<item><tt>binary-indep</tt> (obligatorio): para la construcción
 de paquetes independientes de la arquitectura (<tt>Architecture: all</tt>
 en el archivo <file>control</file>).
 <footnote>Este objectivo es utilizado por <tt>dpkg-buildpackage -A</tt>.</footnote>
<item><tt>get-orig-source</tt> (opcional): para obtener la versión
 més reciente de las fuentes originales desde el lugar
 de almacenaje del autor.
</list>

  <p>Cada regla se compone de objetivos, ficheros o nombres
  de acciones que se deben llevar a cabo (por ejemplo, «build:» o
  «install:»). Las reglas que quieras ejecutar deberían llamarse como
  argumentos de la línea de órdenes (por ejemplo, «./debian/rules
  build» o «make -f rules install»). Después del nombre del objetivo,
  puedes nombrar las dependencias, programas o ficheros de los que la
  regla dependa. Después de esto, hay un número cualquiera de
  instrucciones (¡indentado con &lt;tab&gt;!), hasta que se llega a
  una línea en blanco. Ahí empieza otra regla. Las líneas múltiples en
  blanco, y las líneas que empiezan por almohadillas («#») se tratan
  como comentarios y se ignoran.

  <p>Probablemente ya te hayas perdido, pero todo quedará más claro
  después de ver el fichero «rules» que <prgn>dh_make</prgn> pone por omisión.
  Deberías leer también la entrada de «make» en info para más
  información.

  <sect1 id="defaultrules">Archivo <file>rules</file> predeterminado

  <p>La parte importante que debes conocer sobre el fichero de reglas
  creado por <prgn>dh_make</prgn>, es que sólo es una sugerencia. Funcionará para
  paquetes simples pero para más complicados, no te asustes y añade o
  quita cosas de éste para ajustarlo a tus necesidades. Una cosa que
  no debes cambiar son los nombres de las reglas, porque todas las
  herramientas utilizan estos nombres, como se describe en las normas.
  <footnote>N. de t.: este párrafo no está en la versión
  en original en inglés pero se ha mantenido de la anterior
  verisón en español.</footnote>

  <p>La nueva versión de <prgn>dh_make</prgn> genera un
  un archivo <file>rules</file> muy simple pero poderoso
  utilizando la orden <prgn>dh</prgn>:

<example>
 1 #!/usr/bin/make -f
 2 # -*- makefile -*-
 3 # Sample debian/rules that uses debhelper.
 4 # This file was originally written by Joey Hess and Craig Small.
 5 # As a special exception, when this file is copied by dh-make into a
 6 # dh-make output file, you may use that output file without restriction.
 7 # This special exception was added by Craig Small in version 0.37 of dh-make.
 8
 9 # Uncomment this to turn on verbose mode.
10 #export DH_VERBOSE=1
11
12 %:
13        dh $@
</example>
  (He añadido los números de línea. En el fichero <file>debian/rules</file>
  los espacios iniciales de las líneas son códigos de tabulación)

  <p>Probablemente estés familiarizado con líneas como la primera de guiones
  escritos en shell o Perl. Esta línea indica que el fichero debe
  ejecutarse con /usr/bin/make.

  <p>La linea 10 debe descomentarse para asignar el valor 1
  a la variable <tt>DH_VERBOSE</tt>. En ese caso, se escribiran
  las órdenes <prgn>dh_*</prgn> que ejecutadas por
  <prgn>dh</prgn>. Puedes añadir la linea 
  <tt>export DH_OPTIONS=-v</tt> aqui. Asi podrás ver la salida
  de la ejecución de cada orden <prgn>dh_*</prgn> y solucionar
  los problemas que se produzcan. Esto te ayudará a entender
  como funciona el archivo <file>rules</file> y a solucionar
  problemas. Esta nueva orden <prgn>dh</prgn> es parte fundamental
  de la herramientas <package>debhelper</package> y no te esconde nada.
 
  <p>Todo el trabajo del archivo se reduce a las líneas 12 y 13.
  El símbolo de porcentage substituye a cualquier objetivo para
  a continuación ejecutar únicamente <prgn>dh</prgn> con el nombre
  del objetivo (como opción)
  <footnote>Aqui se utilizan las nuevas funciones V7
  de <package>debhelper</package> que se explican en
  <url id="http://joey.kitenet.net/talks/debhelper/debhelper-slides.pdf" name="Not Your Grandpa's Debhelper">
  presentadas en la Debconf9 por el autor de <package>debhelper</package>.
  En <tt>lenny</tt>, <prgn>dh_make</prgn> construia un archivo <file>rules</file>
  más complejo con el listado de todas las órdenes <prgn>dh_*</prgn>
  necesarias para cada objetivo y los mantenia en el estado del empaquetado
  inicial. La nueva orden <prgn>dh</prgn> es simple y nos libera de esta
  restricción. Aún asi, es posible personalizar el archivo con objetivos
  <tt>override_dh_*</tt>. Véase <ref id="customrules">. Se basa únicamente
  en el paquete <package>debhelper</package> y no se debe confundir
  con la construcción de paquetes ligada al paquete <package>cdbs</package>.
  </footnote>.
  La orden <prgn>dh</prgn> es un guión que ejecuta las secuencias necesarias
  de órdenes <prgn>dh_*</prgn> según sus parámetros, como se
  describe a continuación
  <footnote>Pudes comprobar las secuencias de órdenes
  <prgn>dh_*</prgn> invocadas por cada <tt><var>objetivo</var></tt>
  ejecutando <tt>dh --no-act <var>objetivo</var></tt>
  o bien <tt>debian/rules -- '--no-act <var>objetivo</var>'</tt>
  sin que se ejecuten realmente.
  </footnote>:

<list>
  <item><tt>debian/rules clean</tt> ejecuta <tt>dh clean</tt>,
  que a su vez ejecuta lo siguiente:
<example>
dh_testdir
dh_auto_clean
dh_clean
</example>

<item><tt>debian/rules build</tt> ejecuta <tt>dh build</tt>,
 que a su vez ejecuta lo siguiente:
<example>
dh_testdir
dh_auto_configure
dh_auto_build
dh_auto_test
</example>

<item><tt>fakeroot debian/rules binary</tt> ejecuta 
  <tt>fakeroot dh binary</tt>, que a su vez ejecuta lo siguiente
  <footnote>Se asume que el paquete <package>python-support</package>
  está instalado en el sistema.</footnote>:
<example>
dh_testroot
dh_prep
dh_installdirs
dh_auto_install
dh_install
dh_installdocs
dh_installchangelogs
dh_installexamples
dh_installman
dh_installcatalogs
dh_installcron
dh_installdebconf
dh_installemacsen
dh_installifupdown
dh_installinfo
dh_pysupport
dh_installinit
dh_installmenu
dh_installmime
dh_installmodules
dh_installlogcheck
dh_installlogrotate
dh_installpam
dh_installppp
dh_installudev
dh_installwm
dh_installxfonts
dh_bugfiles
dh_lintian
dh_gconf
dh_icons
dh_perl
dh_usrlocal
dh_link
dh_compress
dh_fixperms
dh_strip
dh_makeshlibs
dh_shlibdeps
dh_installdeb
dh_gencontrol
dh_md5sums
dh_builddeb
</example>

<item><tt>fakeroot debian/rules binary-arch</tt> ejecuta <tt>fakeroot dh binary-arch</tt>;
  que a su vez ejecuta la misma secuencia que <tt>fakeroot dh binary</tt>
  pero con la opción <tt>-a</tt> para cada orden.

<item><tt>fakeroot debian/rules binary-indep</tt> ejecuta <tt>fakeroot dh
  binary-indep</tt>; que a su vez ejecuta casi la misma secuencia
  que <tt>fakeroot dh binary</tt> puesto que excluye la ejecución
  de <prgn>dh_strip</prgn>, <prgn>dh_makeshlibs</prgn> y <prgn>dh_shlibdeps</prgn>
  a la vez que ejecuta el resto de órdenes añadiendo la opción <tt>-i</tt>.
  </list>


  <p>La función de las órdenes <prgn>dh_*</prgn> puede deducirse de
  su nombre 
  <footnote>Para una descripción completa de la función de cada
  <prgn>dh_*</prgn> y de sus opciones, lee los manuales respectivos
  asi como la documentación de <package>debhelper</package>.
  </footnote>.
  A continuación se resume las funciones de las órdenes más
  importantes asumiendo que se utiliza un sistema de compilación
  basdo en un archivo <file>Makefile</file>
  <footnote>La orden permite otros sistemas de compilación
  como <file>setup.py</file> y que pueden listarse
  con la ejecución de <tt>dh_auto_build --list</tt>
  desde el directorio de las fuentes del paquete.
  </footnote>.

<list compact>
  <item><p><prgn>dh_auto_clean</prgn> ejecuta
<example>
make distclean
</example>
  si el archivo <file>Makefile</file> contiene el
  objetivo <tt>distclean</tt>
  <footnote>En realidad busca el primer objetivo
  disponible entre <tt>distclean</tt>, <tt>realclean</tt> or <tt>clean</tt>
  en el archivo <file>Makefile</file> y lo ejecuta.
  </footnote>.

<item><p><prgn>dh_auto_configure</prgn> ejecuta
<example>
./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var ...
</example>
  (se han abreviado los argumentos para facilitar la lectura)
  si existe el archivo <file>./configure</file>.

<item><p><prgn>dh_auto_build</prgn> ejecuta 
<example>
make
</example>
  para ejecutar el primer objetivo del archivo <file>Makefile</file>
  (supuesto que este existe).

 <item><p><prgn>dh_auto_test</prgn> ejecuta
<example>
make test
</example>
  si existe el objectivo <tt>test</tt> en el archivo <file>Makefile</file>
  <footnote>En realidad busca el primero de los objetivos
  <tt>test</tt> o <tt>check</tt> en el archivo <file>Makefile</file>
  y lo ejecuta.
  </footnote>.

<item><p><prgn>dh_auto_install</prgn> ejecuta
<example>
make install \
  DESTDIR=<var>/path/to</var>/<var>package</var>_<var>version</var>-<var>revision</var>/debian/<var>package</var>
</example>
  (se ha truncado la linea para permitir su lectura)
  si en el archivo <file>Makefile</file> existe el objetivo <tt>install</tt>
  </list>

  <p>Los objetivos que deben ejecutarse con la
  orden <prgn>fakeroot</prgn> contienen <prgn>dh_testroot</prgn>.
  Si no utilizas la orden para simular la ejecución
  por el usuario «root», se producirá un error que
  detendra la ejecución.

  <p>Es importante tener presente que el archivo <file>rules</file>
  construido por <prgn>dh_make</prgn> es solo una sugerencia.
  Sera útili para la majoria de los paquetes simples, pero no
  dejes de adaptarlo a tus necesidades. Lo único que no debes
  cambiar son los nombres de las reglas, puesto que todas las
  herramientas los utilizan, segun las normas Debian.

  <p>A pesar de que <tt>install</tt> no es un objetivo obligatorio,
  se contempla su uso. <tt>fakeroot dh install</tt> se comporta
  como <tt>fakeroot dh binary</tt> pero se detiene después de
  <prgn>dh_fixperms</prgn>.

  <sect1 id="customrules">Personalización del archivo <file>rules</file>

  <p>Puedes realizar muchos cambios para adaptar el archivo
  <file>rules</file> construido por la orden <prgn>dh</prgn>.

  <p>La orden <tt>dh $@</tt> permite las siguientes adaptaciones
  <footnote>
  Si un paquete instala el archivo
  <file>/usr/share/perl5/Debian/Debhelper/Sequence/<var>nombre_archivo</var>.pm</file>
  puedes activar la función adaptada con
  <tt>dh --with <var>nombre_archivo</var> $@</tt>.
  </footnote>:
  
<list compact>
  <item>Añadir funcionalidad para la orden <prgn>dh_pysupport</prgn>
  (la mejor opción para Python)
  <footnote>Es preferible el uso de la orden <prgn>dh_pysupport</prgn>
  respecto a la orden <prgn>dh_pycentral</prgn>. No uses la orden
  <prgn>dh_python</prgn>.
  </footnote>.
  <list>
    <item>Añade el paquete <package>python-support</package>
    en el campo <tt>Build-Depends</tt> del archivo <file>control</file>.
    <item>No cambia el uso de <tt>dh $@</tt> (es la opción predeterminada).
    <item>Asi se gestiona el módulo Python
    utilizando en entorno («framework») de <package>python-support</package>.
  </list>

  <item>Añadir funcionalidad para la orden <prgn>dh_pycentral</prgn>.
    <list>
    <item>Añade el paquete <package>python-central</package>
    en el campo <tt>Build-Depends</tt> del archivo <file>control</file>.
    <item>Utiliza <tt>dh --with python-central $@</tt>
    en lugar de <tt>dh $@</tt>.
    <item>Esto desactiva la orden <prgn>dh_pysupport</prgn>.
    <item>Asi se gestiona el módulo Python
    utilizando en entorno («framework») de <package>python-central</package>.
    </list>

  <item>Añadir funcionalidad para la orden <prgn>dh_installtex</prgn>.
    <list>
    <item>Añade el paquete <package>tex-common</package>
    en el campo <tt>Build-Depends</tt> del archivo <file>control</file>.
    <item>Utiliza <tt>dh --with tex $@</tt> en lugar de <tt>dh $@</tt>.
    <item>Asi se registran las fuentes «Type 1», los patrones para
    las separación de palabras («hyphenation patterns») o los formatos TeX.
    </list>

  <item>Añadir funcionalidad para las órdenes <prgn>dh_quilt_patch</prgn>
  y <prgn>dh_quilt_unpatch</prgn>.
    <list>
    <item>Añade el paquete <package>quilt</package>
    en el campo <tt>Build-Depends</tt> del archivo <file>control</file>.
    <item>Utiliza <tt>dh --with quilt $@</tt> en lugar de <tt>dh $@</tt>.
    <item>Asi se aplican o deshacen, en los archivos
    de las fuentes originales, los parches del directorio
    <file>debian/patches</file> en los paquetes con el formato <tt>1.0</tt>.
    <item>Esta adaptación no es necesaria para los paquetes
    con el nuevo formato <tt>3.0 (quilt)</tt>.
    </list>


  <item>Añadir funcionalidad para la orden <prgn>dh_dkms</prgn>.
    <list>
    <item>Añade el paquete <package>dkms</package>
    en el campo <tt>Build-Depends</tt> del archivo <file>control</file>.
    <item>Utiliza <tt>dh --with dkms $@</tt> en lugar de <tt>dh $@</tt>.
    <item>Asi se controla correctamente el uso de DKMS
    <footnote>N. de t.:«Dynamic Kernel Module Support» es
    un entorno que permite la compilación de módulos
    del núcleo («kernel») de Linux</footnote>
    en la construcción de paquetes del núcleo.
    </list>

  <item>Añadir funcionalidad para la orden <prgn>dh_autotools-dev_updateconfig</prgn>
  y <prgn>dh_autotools-dev_restoreconfig</prgn>.
    <list>
    <item>Añade el paquete <package>autotools-dev</package>
    en el campo <tt>Build-Depends</tt> del archivo <file>control</file>.
    <item>Utiliza <tt>dh --with autotools-dev $@</tt> en lugar de <tt>dh $@</tt>.
    <item>Asi se actualiza y restaura <file>config.sub</file> y <file>config.guess</file>.
    </list>

  <item>Añadir funcionalidad para la orden <prgn>dh_autoreconf</prgn>
  y <prgn>dh_autoreconf_clean</prgn>.
    <list>
    <item>Añade el paquete <package>dh-autoreconf</package>
    en el campo <tt>Build-Depends</tt> del archivo <file>control</file>.
    <item>Utiliza <tt>dh --with autoreconf $@</tt> en lugar de <tt>dh $@</tt>.
    <item>Asi se actualiza los archivos del sistema de compilación GNU
    y los restaura despuésd de la compilación.
    </list>

  <item>Añadir la funcionalidad de autocompletar a <prgn>bash</prgn>.
    <list>
    <item>Añade el paquete <<package>bash-completion</package>
    en el campo <tt>Build-Depends</tt> del archivo <file>control</file>.
    <item>Utiliza <tt>dh --with bash-completion $@</tt> en lugar de <tt>dh $@</tt>.
    <item>Asi se instala la función autocompletar de <prgn>bash</prgn>
    utlizando el archivo de configuración de 
    <file>debian/<var>nombre_paquete</var>.bash-completion</file>.
    </list>
</list>

  <p>Para las fuentes que usan «Autotools», combinar las opciones
  anteriores con <tt>dh --with autotools-dev --with autoreconf $@</tt>
  es lo habitual con el sistema de compilación GNU.

  <p>Muchas de las órdenes <prgn>dh_*</prgn> invocadas por la nueva orden
  <prgn>dh</prgn> son personalizables mediante sus archivos de configuración
  en el directorio <file>debian</file>. Véase <ref id="dother"> y los
  manuales (las «manpage») para cada orden.

  <p>Algunas órdenes <prgn>dh_*</prgn> invocadas por la nueva orden
  <prgn>dh</prgn> pueden precisar la adición de argumentos (opciones)
  o la ejecución de órdenes adicionales. Para estos casos, deberas
  añadir el objetivo <tt>override_dh_<var>foo</var></tt> en el
  archivo <file>rules</file> solo para la orden <prgn>dh_<var>foo</var></prgn>
  que vas a cambiar. Se trata de decir «ejecútame a mi en su lugar»
  <footnote>En <tt>lenny</tt>, cuando se debia cambiar
  un guión <prgn>dh_*</prgn> debias encontrar la linea
  adecuada en el archivo <file>rules</file> y cambiarla.
  </footnote>.

  <p>Las ordenes <prgn>dh_auto_*</prgn> hacen más cosas
  que las expuestas aqui. El uso de ordenes equivalentes más sencillas
  en lugar de éstas en los objetivos <tt>override_dh_*</tt>
  (excepto el objetivo <tt>override_dh_auto_clean</tt>) es una mala
  idea ya que puede eliminar funciones inteligentes de <package>debhelper</package>.

  <p>Si vas a guardar los datos de configuración del paquete
  <package>gentoo</package> en el directorio  <file>/etc/gentoo</file>
  en lugar del directorio habitual <file>/etc</file>, debes
  anular la ejecución del argumento predeterminado <tt>--sysconfig=/etc</tt>
  de la orden <prgn>dh_auto_configure</prgn> por <prgn>./configure</prgn>
  con lo siguiente
  <footnote>El paquete <package>gentoo</package> utiliza
  el sistema de compilación GNU, también conocido por 
  «Autotools». Véase <url id="http://es.wikipedia.org/wiki/GNU_build_system">.
  </footnote>:

<example>
override_dh_auto_configure:
        dh_auto_configure -- --sysconfig=/etc/gentoo
</example>


  <p>Los argumentos a continuación de <tt>--</tt> se añaden
  a los argumentos predeterminados, anulandolos, en la ejecución automática
  del programa. Es mejor utilizar la orden <prgn>dh_auto_configure</prgn>
  que el <prgn>./configure</prgn> ya que asi sólo anulará el argumento
  <tt>--sysconfig</tt> manteniendo intactos otros argumentos
  de <prgn>./configure</prgn>.

  <p>Si el <file>Makefile</file> de las fuentes de <package>gentoo</package>
  requiere la especificación del objetivo <tt>build</tt> para compilarlo
  <footnote><prgn>dh_auto_build</prgn> sin argumentos ejecutará
  el primer objetivo del archivo <file>Makefile</file>.</footnote>,
  puedes añadir un objetivo <tt>override_dh_auto_build</tt> para anularlo.

<example>
override_dh_auto_build:
        dh_auto_build -- build
</example>


  <p>De esta forma se garantiza la ejecución de $(MAKE)
  con todos los argumentos predeterminados por la orden
  <prgn>dh_auto_build</prgn> y del argumento <tt>build</tt>.

  <p>Si el <file>Makefile</file> de las fuentes de <package>gentoo</package>
  requiere la especificación del objetivo <tt>packageclean</tt>
  para limpiarlo, en lugar de los objetivos <tt>distclean</tt> o
  <tt>clean</tt> en el archivo <file>Makefile</file>, puedes
  añadir un objetivo <tt>override_dh_auto_clean</tt> para
  habilitarlo.

<example>
override_dh_auto_clean:
        $(MAKE) packageclean
</example>

  <p>Si el <file>Makefile</file> de las fuentes de <package>gentoo</package>
  contiene un objetivo <tt>test</tt> que no deseas que se ejecute en
  la construcción del paquete Debian, pudese usar un objetivo
  <tt>override_dh_auto_test</tt> sin órdenes para ignorarlo.

<example>
override_dh_auto_test:
</example>


  <p>Si <package>gentoo</package> contiene el poco frecuente
  archivo de cambios del autor con el nombre <file>FIXES</file>,
  <prgn>dh_installchangelogs</prgn> no lo instalará por omisión.
  La orden <prgn>dh_installchangelogs</prgn> requiere como argumento
  <file>FIXES</file> para instalarlo
  <footnote>Los archivos <file>debian/changelog</file> y
  <file>debian/NEWS</file> siempre se instalan automáticamente.
  También se busca el archivo de cambios del autor para
  cambiar el nombre a minúsculas y por su coincidencia
  con <file>changelog</file>, <file>changes</file>, <file>changelog.txt</file>,
  y <file>changes.txt</file>.</footnote>.

<example>
override_dh_installchangelogs:
        dh_installchangelogs FIXES
</example>


  <p>Si utilizas el nuevo <prgn>dh</prgn>, la utilizació explícita
  de objetivos como los listados en <ref id="targets"> (excepto
  <tt>get-orig-source</tt>) puede dificultar la correcta comprensión
  de sus efectos. Por favor, limita el uso de objetivos explicitos
  a objetivos del tipo <tt>override_dh_*</tt> y de forma que sean
  completamente independientes entre si (siempre que sea posible).
 
  <chapt id="dother">Otros ficheros en el directorio <file>debian</file>.

  <p>Para controlar el trabajo de <package>debhelper</package>
  en la compilación del paquete, puedes añadir archivos de
  configuración en el directorio <file>debian</file>. En este
  capítulo se resumirá lo que puede hacerse con cada uno de
  ellos y su formato. Por favor, lee
  <url name="Debian Policy Manual" id="http://www.debian.org/doc/devel-manuals#policy"> y
  <url name="Debian Developer's Reference" id="http://www.debian.org/doc/devel-manuals#devref">
  para más información. 

  <p>La orden <prgn>dh_make</prgn> construye varios archivos
  de configuración a modo de plantillas y los ubica en el
  directorio <file>debian</file>. Algunos de ellos tienen
  el sufijo <tt>.ex</tt> (de «example») en el nombre.
  Otros tienen como prefijo en el nombre el nombre del paquete
  que estas construyendo. Mira el contenido de todos ellos.

  <p>En otros casos, <prgn>dh_make</prgn> no puede construir
  plantillas de configuración para <package>debhelper</package>.
  En estos casos, deberás construir tu mismo los archivos con un editor.

  <p>Si quieres utilizar estos archivos en la construcción
  de tu paquete, haz lo siguiente:
  <list compact>
    <item>elimina los sufijos <tt>.ex</tt> o <tt>.EX</tt>
    de los archivos de plantilla que lo tengan.
    <item>renombra los archivos de configuración utilizando
    el nombre del archivo del paquete binario en lugar de
    <tt><var>nombre_paquete</var></tt>
    <footnote>N. de t.: puesto que se pueden construir
    varios paquetes binarios simultáneamente. Véase un
    par de párrafos más adelante.</footnote>.
    <item>modifica el contenido de los archivos de plantilla
    para adaptarlos a tus necesidades.
    <item>elimina aquellos archivos que no necesites.
    <item>realiza las modificaciones necesarias en el archivo
    <file>control</file> (véase <ref id="control">). 
    <item>modifica el archivo <file>rules</file> (véase <ref id="rules">)
    si es necesario.
  </list>

  <p>Los archivos de configuración construidos por <package>debhelper</package>
  que no tienen el prefijo <file><var>nombre_paquete</var></file>
  tales como <file>install</file> se aplicaran al primer paquete
  binario. Si hay varios paquetes binarios. sus configuraciones
  se especificaran con el prefijo de paquete binario correspondiente
  en su nombre: asi tendrás los archivos <file><var>paquete-1</var>.install</file>,
  <file><var>package-2</var>.install</file>, etc.
  
  <sect id="readme">README.debian (LÉEME.debian)

  <p>Cualquier detalle extra o discrepancias entre el programa
  original y su versión debianizada debería documentarse aquí.
   
  <p>dh_make crea una por omisión, y éste es su aspecto:

  <p><example>
  gentoo for Debian
  -----------------

  &lt;possible notes regarding this package - if none, delete this file&gt;

   -- Josip Rodin &lt;joy-mg@debian.org&gt;, Wed, 11 Nov 1998 21:02:14 +0100
  </example>

  <p>Dado que no tenemos que poner nada aquí - está permitido
  borrarlo.Véase <manref name="dh_installdocs" section="1">.

  <sect id="compat">Archivo <file>compat</file>

  <p>El archivo <file>compat</file> define el nivel de
  compatibilidad de <package>debhelper</package>.
  Actualmente, estableceras la compatibilidad a
  la versión 7 de <package>debhelper</package> como sigue:

<example>
$ echo 7 > debian/compat
</example>

  <sect id="conffiles">Archivo <file>conffiles</file>

  <p>Una de las cosas más molestas de los programas es cuando pasas
  mucho tiempo y esfuerzo adaptando un programa (como usuario) y una actualización
  destroza todos tus cambios. Debian resuelve este problema marcando
  los ficheros de configuración de forma que cuando actualizas un
  paquete se te pregunta si deseas mantener la nueva
  configuración o no. 
 
  <p>Desde la versión 3 de <package>debhelper</package>,
  <manref name="dh_installdeb" section="1"> considera
  <em>automáticamente</em> a todos los archivos
  ubicados en el directorio <file>/etc</file> como
  archivos de configuración, de forma que si todos los ficheros
  de configuración están en ese directorio, no es necesario
  que los incluyas en el archivo <file>conffiles</file>
  (abreviatura de archivo de configuración). Para la
  majoria de paquetes, la única ubicación de los archivos
  de configuración es <file>/etc</file> por lo que
  este fichero no tiene ninguna razón de ser
  <footnote>N. de t.: la naturaleza exacta del
  archivo <file>conffiles</file> queda más clara en
  <url id="http://www.debian.org/doc/FAQ/ch-pkg_basics.en.html">.
  En la pregunta 7.5, se explica que el <file>conffiles</file>
  contiene una lista de archivos de configuración que no seran
  sobreescritos cuando se actualize el paquete.
  </footnote>.

  <p>En el caso de que tu programa utilice ficheros de configuración pero también los 
  reescriba él mismo es mejor no marcarlos como «conffiles». Si lo haces,
  <prgn>dpkg</prgn> informará a los usuarios que verifiquen los cambios de estos ficheros
  cada vez que lo actualicen.

  <p>Si el programa que estas empaquetando requiere que cada
  usuario modifique los archivos de configuración del directorio
  <file>/etc</file>, hay dos formas para no marcarlos como
  archivos «conffiles» y que no sean manipulados por <prgn>dpkg</prgn>:
  <list>
  <item>Construir un enlace simbólico de los archivos ubicados en
  <file>/etc</file> que apunten a archivos ubicados en el directorio
  <file>/var</file> generados por guiones del desarrollador
  («<em>maintainer scripts</em>»).
  <item>Poner los archivos generados por los guiones del desarrollador
  en el directorio <file>/etc</file>.
  </list>

  <p>Para más información sobre los guiones del desarrollador
  véase <ref id="maintscripts">.

  <sect id="crond">Archivos <file><var>nombre_paquete</var>.cron.*</file>

  <p>Si tu paquete requiere tareas periódicas para funcionar adecuadamente,
  puedes usar este fichero como patrón. Puedes establecer la realización
  de tareas cada hora, dia, semana o mes o en cualquier otro período.
  Los nombres de los archivos son:
  <list>
    <item><file>cron.hourly</file> - instalados como 
      <file>/etc/cron.hourly/<var>nombre_paquete</var></file>:
      se ejecutan cada hora.
    <item><file>cron.daily</file> - instalados como
     <file>/etc/cron.daily/<var>nombre_paquete</var></file>:
    se ejecutan cada dia, habitualmente por la mañana temprano.
    <item><file>cron.weekly</file> - instalados como
      <file>/etc/cron.weekly/<var>nombre_paquete</var></file>:
      se ejecutan cada semana, habitualmente en la mañana del domingo.
    <item><file>cron.monthly</file> - instalados como
      <file>/etc/cron.monthly/<var>nombre_paquete</var></file>:
      se ejecutan cada mes, habitualmente por la mañana del primer dia del mes.
    <item><file>cron.d</file> - instalados como
      <file>/etc/cron.d/<var>package</var></file>: para cualquier otro
      período de tiempo.
  </list>

  <p>Para los archivos mencionados, su formato es el de guiones shell.
  La única excepción son los archivos <file><var>package</var>.cron.d</file>
  que deben ajustarse al formato descrito en 
  <manref name="crontab" section="5">.

  <p>Ten en cuenta que ésto no incluye la rotación de archivos de registro,
  para hacer eso consulta
  <manref name="dh_installlogrotate" section="1"> y
  <manref name="logrotate" section="8">.

  <p>Elimina el fichero si el paquete no utiliza dichas tareas.

  <sect id="dirs">Archivo <file>dirs</file>

  <p>Este fichero especifica los directorios que se necesitan pero que
  por alguna razón no se crean en un proceso de instalación normal
  (<tt>make install DESTDIR=...</tt>" invocado por <tt>dh_auto_install</tt>).
  Generalmente es debido a un problema con el archivo <file>Makefile</file>.
 
  <p>Los archivos listados en el archivo <file>install</file>
  no requieren la creación previa de los directorios. Véase <ref id="install">.

  <p>Es recomendable ejecutar en primer lugar la instalación y solo
  hacer uso de este archivo si se produce algún problema. No debe
  ponerse la barra inicial en los nombres de los directorios
  (listados en el archivo <file>dirs</file>).

  <p>Por omisión, tiene este aspecto
  <footnote>N. de t.: estos últimos párrafos de esta
  sección no están en la versión actual en inglés, pero
  se han mantenido de la versión anterior en español.</footnote>:
  <p><example>
  1 usr/bin
  2 usr/sbin
  </example>

  <p>Observa que la barra precedente no está incluida. Normalmente lo
  cambiaríamos a algo así:
  <p><example>
  1 usr/bin
  2 usr/man/man1
  </example>

  pero estos directorios ya se crean en el <file>Makefile</file>, así que no
  necesitaremos este fichero y lo podremos borrar.
  
  <sect id="doc-base">Archivo <file><var>nombre_paquete</var>.doc-base</file>

  <p>Si tu paquete tiene documentación además de las páginas
  de manual y de información, puedes utilizar el archivo
  <package/doc-base/ para registrarla de modo que el usuario
  pueda encontrar esta documentación suplementaria con
  <manref name="dhelp" section="1">,
  <manref name="dwww" section="1"> o <manref name="doccentral" section="1">.

  <p>La documentación incluirá archivos HTML, PS y PDF
  ubicados en <file>/usr/share/doc/<var>nombre_paquete</var>/</file>.

  <p>Aqui tienes el contenido del archivo <file>gentoo.doc-base</file>:

<example>
Document: gentoo
Title: Gentoo Manual
Author: Emil Brink
Abstract: This manual describes what Gentoo is, and how it can be used.
Section: File Management

Format: HTML
Index: /usr/share/doc/gentoo/html/index.html
Files: /usr/share/doc/gentoo/html/*.html
</example>

  <p>Para más informació sobre el formato del archivo
  véase <manref name="install-docs" section="8">
  y el manual <package/doc-base/ , en
  <file>/usr/share/doc/doc-base/doc-base.html/</file>.

  <p>Para más detalles sobre la instalación de documentación
  adicional, lee <ref id="destdir">.

  <sect id="docs">Archivo <file>docs</file>

  <p>Este fichero especifica los nombres de los ficheros
  de documentación que <manref name="dh_installdocs" section="1">
  instalará en el directorio temporal.

  <p>Por omisión, se incluirán todos los ficheros existentes en los directorios
  de más alto nivel del código que se llamen «BUGS», «README*», «TODO», etc.

  <p>También incluiré algunos otros para <package>gentoo</package>:

  <p><example>
  BUGS
  CONFIG-CHANGES
  CREDITS
  ONEWS
  README
  README.gtkrc
  TODO
  </example>
 

  <sect id="emacsen">Archivo <file>emacsen-*</file>

  <p>Si tu paquete proporciona ficheros Emacs que pueden
  ser compilados a bytes en el momento de la instalación,
  puedes usar estos ficheros.

  <p>Estos archivos seran instalados en el directorio
  temporal por <manref name="dh_installemacsen" section="1">.

  <p>Elimínalos si no los necesitas.

  <sect id="examples">Archivo <file><var>nombre_paquete</var>.examples</file> 

  <p>La orden <manref name="dh_installexamples" section="1">
  instala los archivos y directorios listados en este archivo
  com archivos de ejemplos.

  <sect id="initd">Archivos <file><var>nombre_paquete</var>.init</file> 
  y <file><var>nombre_paquete</var>.default</file>

  <p>Si tu paquete es un demonio que necesita ejecutarse en el arranque
  del sistema, obviamente has desatendido mi recomendación inicial, ¿o no?
  :-)

  <p>El archivo <file><var>nombre_paquete</var>.init</file> se instala
  como un guión en <file>/etc/init.d/<var>nombre_paquete</var></file>.
  Se trata de una plantilla genérica construida por la orden <prgn>dh_make</prgn>
  como <file>init.d.ex</file>. Deberás renombralo y hacerle muchos cambios
  para asegurarte que cumpla con las cabeceras del estándard de
  la jerarquia del sistema de archivos («Filesystem Hierarchy Standard»
  véase <file>/usr/share/doc/debian-policy/fhs/</file>).
  <manref name="dh_installinit" section="1"> lo instalará en el directorio temporal.

  <p>El archivo <file><var>nombre_paquete</var>.default</file> se
  instala en el directorio <file>/etc/default/<var>nombre_paquete</var></file>.
  Este archivo establece los valores predeterminados facilitados
  por el guión «init». En la majoria de casos, este archivo se utiliza
  para desactivar la ejecución del demonio,
  estableciendo algunos indicadores predeterminados o tiempos de espera.
  Si tu guión «init» tiene características configurables, debes
  incluirlas en este archivo <file>default</file>, no
  en el guión «init».

  <p>Si el programa original incluye un archivo «init», tu puedes
  hacer uso de él o bien descartarlo. Si optas por no hacer uso
  del guión «init.d» original, deberas construir uno nuevo en
  <file>debian/<var>nombre_paquete</var>.init</file>.
  Sin embargo, si el guión de original tiene buena pinta
  y se instala en el lugar correcto, aún deberas configurar
  en archivo <file>rc*</file> de enlaces simbólicos.
  Para ello, deberas reescribir el objetivo <prgn>dh_installinit</prgn>
  del archivo <file>rules</file> com sigue:

<example>
override_dh_installinit:
        dh_installinit --onlyscripts
</example>
  
  <p>Elimina el fichero si no lo necesitas.

  <sect id="install">Archivo <file>install</file>

  <p>Si hay archivos que deben ser instalados por el paquete
  pero no lo hace <tt>make install</tt>, puedes listar los
  archivos y sus destinos en el archivo <file>install</file>.
  Se encargará de la instalación la orden <manref name="dh_install" section="1">
  <footnote>Esto reemplaza la orden obsoleta <manref name="dh_movefiles" section="1">
  que se configuraba con el archivo <file>files</file>.
  </footnote>. Debes asegurarte que no hay un sistema más
  específico para hacer esta instalación. Por ejemplo,
  para la documentación debes utilizar el archivo <file>docs</file>,
  en lugar de este archivo.

  <p>El archivo <file>install</file> tendrá una linea para cada
  uno de los archivos a instalar, con el nombre del archivo
  (relativo al directorio superior de la compilación) seguido
  de un espacio y a continuación el directorio de instalación
  (relativo al directorio superior de instalación). Suponiendo
  que el archivo binario no se instalase, debiarias utilizar
  el archivo <file>install</file> como sigue:

<example>
src/nombre_paquete/archivo_binario usr/bin
</example>
 
  <p>Al instalarse el paquete, se instalará el archivo
  binario <file>/usr/bin/archivo_binario</file>.

  <p>En el archivo <file>install</file> puedes escribir el nombre
  del archivo sin el directorio de instalación siempre que no cambie
  la ruta relativa de directorio. Este formato se usa en paquetes grandes
  que separan el resultado de la compilación en múltiples paquetes binarios
  haciendo uso de <file><var>nombre_paquete-1</var>.install</file>,
  <file><var>nombre_paquete-2</var>.install</file>, etc.

  <p>La orden <prgn>dh_install</prgn> retrocederá al
  directorio  <file>debian/tmp</file> buscar los archivos
  si no los encuentra en el directorio actual
  (o en la ubicación que hayas establecido con 
  para la búsqueda con <tt>--sourcedir</tt>).  


  <sect id="info">Archivo <file><var>nombre_paquete</var>.info</file>

  <p>Si tu paquete utiliza páginas «info» (sistema de ayuda),
  podrás instalarlas utilizando <manref name="dh_installinfo" section="1">
  que utilizará el listado del archivo <file><var>package</var>.info</file>.
 
  <sect id="lintian">Archivos <file>{<var>nombre_archivo</var>.|source/}lintian-overrides</file>

  <p>Si el programa <package>lintian</package> emite un informe
  de diagnóstico erróneo en algun caso en que las normas admitan
  excepciones,  podras utilizar los archivos
  <file><var>nombre_paquete</var>.lintian-overrides</file> o
  <file>source/lintian-overrides</file> para evitar que <package>lintian</package>
  emita el error. Por favor, lee
  <file>/usr/share/doc/lintian/lintian.html/index.html</file>
  error y procura no abusar de esta opción (para ocultar errores
  auténticos)

  <p><file><var>nombre_paquete</var>.lintian-overrides</file>
  es para un paquete binario con el nombre <package><var>nombre_paquete</var></package>
  y es instalado en <file>usr/share/lintian/overrides/<var>nombre_paquete</var></file>
  por la orden <prgn>dh_lintian</prgn>.

  <p>El archivo <file>source/lintian-overrides</file> es para los
  paquetes de fuentes y no se instala.

  <sect id="manpage">Archivos <file>manpage.*</file>

  <p>El programa debería tener una página de manual. Si no lo
  incluye, deberas hacer una. La orden <prgn>dh_make</prgn> construye
  varios archivos de plantilla para las páginas de manual.
  Deberás editarlos y rellenarlos en caso de que no tengas una.
  Asegurate que eliminas los que no utilices.

  <sect1 id="manpage1">Archivo <file/manpage.1.ex/

  <p>Las páginas de manual se escriben normalmente con <manref name="nroff" section="1">.
  El ejemplo <tt/manpage.1.ex/ está también escrito con «nroff».
  Consulta la página de manual <manref name="man" section="7"> para una breve
  descripción de cómo editar el fichero.

  <p>El nombre del archivo de manual debería incluir el nombre del programa
  que está documentando, asi que lo renombraremos de «manpage» a «gentoo».
  El nombre del fichero incluye también ".1" como primer sufijo,
  lo que significa que es una página de manual para una programa de usuario.
  Asegurate de verificar que esa sección es la correcta.
  Aquí tienes una pequeña lista de las secciones de las páginas de manual.

  <p><example>
  Sección |     Descripción        |     Notas
     1     Órdenes de Usuario        Programas o guiones ejecutables.
     2     Llamadas al Sistema       Funciones que ofrece el núcleo.
     3     Llamadas a Bibliotecas    Funciones dadas por las bibliotecas 
				     del sistema.
     4     Ficheros Especiales       Generalmente se encuentran en /dev.
     5     Formatos de Fichero       Por ejemplo, el formato del /etc/passwd.
     6     Juegos                    U otros programas frívolos.
     7     Paquetes de Macros        Como las macros de man.
     8     Administración del Sist.  Programas que sólo suele ejecutar 
				     el superusuario.
     9     Rutinas del Núcleo        Llamadas al sistema no estándar.
  </example> 
  
  <p>Así que la página de manual de «gentoo» debería llamarse <tt/gentoo.1/.
  No había una página de manual <tt/gentoo.1/ en el paquete fuente
  asi que la escribí usando la información del ejemplo y de los documentos
  del programador original.

  <sect1 id="manpagesgml">Archivo <file/manpage.sgml.ex/

  <p>Por otro lado, puede que prefieras escribir usando SGML en lugar de
  «nroff». En este caso, puedes usar la plantilla <tt/manpage.sgml.ex/. 
  Si haces esto, tendrás que:
  <list>
    <item>renombrar el fichero a algo como <file/gentoo.sgml/.
    <item>instalar el paquete <package/docbook-to-man/
    <item>añadir <tt/docbook-to-man/ a la línea de <tt/Build-Depends/ 
	      en el fichero de <tt/control/
    <item>eliminar el comentario de la llamada a docbook-to-man en
          la regla «build» de tu fichero <tt/rules/ 
    <item>añadir el objetivo <tt>override_dh_auto_build</tt> 
    en el fichero <file>rules</file> de la siguiente forma:
<example>
override_dh_auto_build:
        docbook-to-man debian/gentoo.sgml > debian/gentoo.1
        dh_auto_build
</example>
  </list>

  <sect1 id="manpagexml">Archivo <file>manpage.xml.ex</file>

  <p>Si prefieres el formato XML en lugar de SGML, puedes utilizar
  la plantilla <tt/manpage.xml.ex/. En este caso debes:
  
  <list>
    <item>renombrar el archivo a <tt/gentoo.1.xml/
    <item>instalar el paquete <package/docbook-xsl/ y un
    procesador XSLT como <package/xsltproc/ (recomendado)
    <item>añadir los paquetes <tt/docbook-xsl/, <tt/docbook-xml/
    y <tt/xsltproc/ a la línea de <tt/Build-Depends/ 
    en el fichero de <tt/control/
    <item>añadir el objetivo <tt>override_dh_auto_build</tt>
    en el fichero <file>rules</file> de la siguiente forma:
<example>
override_dh_auto_build:
        xsltproc --nonet \
         --param make.year.ranges 1 \
         --param make.single.year.ranges 1 \
         --param man.charmap.use.subset 0 \
         -o debian/ \
http://docbook.sourceforge.net/release/xsl/current/manpages/docbook.xsl\
        debian/gentoo.1.xml
        dh_auto_build
</example>
  </list>
 
  <sect id="manpages">Archivo <file><var>nombre_paquete</var>.manpages</file>

  <p>Si tu paquete tienen páginas de manual, las instalarás
  con <manref name="dh_installman" section="1"> listado los
  archivos correspondientes en el archivo 
  <file><var>nombre_paquete</var>.manpages</file>.

  <p>Para instalar el archivo <file>doc/gentoo.1</file>
  del paquete <package>gentoo</package> como su manual,
  construiras el archivo <file>gentoo.manpages</file> con el
  contenido:

<example>
docs/gentoo.1
</example>
  
  <sect id="menu">Archivo <file>menu.ex</file>

  <p>Los usuarios de X Windows suelen tener un gestor de ventanas con menús
  que pueden adaptarse para lanzar programas. Si tienen instalado el
  paquete <package/menu/ de Debian, se creará un conjunto de menús para cada
  programa del sistema para ellos. 
  
  <p>Éste es el fichero <file/menu.ex/ que <prgn>dh_make</prgn>
 contruye por omisión:

  <p><example>
  ?package(gentoo):needs="X11|text|vc|wm" 
    section="Apps/lea-manual-menu"\
    title="gentoo" command="/usr/bin/gentoo"
  </example>

  <p>El primer campo tras la coma («needs») son las necesidades, y especifica
  qué tipo de interfaz necesita el programa. Cambia ésta a una de las
  alternativas que se listan, como por ejemplo «text» o «X11».

  <p>Lo siguiente («section») es la sección donde deberían aparecer la entrada del menú y
  del submenú. La lista actual de secciones está en:
  <file>/usr/share/doc/debian-policy/menu-policy.html/ch2.html#s2.1</file>

  <p>El campo «title» es el nombre del programa. Puedes comenzar este
  en mayúsculas si lo quieres, pero hazlo lo más corto que puedas.

  <p>Finalmente, el campo «command» es la orden que ejecuta el programa.

  <p>Ahora cambiaremos la entrada del menú por ésta:

<example>
?package(gentoo): needs="X11" \
        section="Applications/Tools" \
        title="Gentoo" command="gentoo"
</example>

  <p>También puedes añadir otros campos como son «longtitle» (título largo),
  «icon» (icono), «hints» (pistas), etc.
  Para más información consulta <manref name="dh_installmenu" section="1">,
  <manref name="menufile" section="5">,
  <manref name="update-menus" section="1">
  y <file>/usr/share/doc/debian-policy/menu-policy.html/</file>.

  <sect id="news">Archivo <file>NEWS</file>

  <p>La orden <manref name="dh_installchangelogs" section="1">
  instala este archivo.

  <sect id="maintscripts">Archivos <file>{post|pre}{inst|rm}</file>

  <p>Los ficheros <file>postinst</file>, <file>preinst</file>,
  <file>postrm</file>, y <file>prerm</file>
  <footnote>Aunque aqui he utilizado la expresión «Bash» abreviada
  <file>{post|pre}{inst|rm}</file> para referirme a estos archivos,
  te recomiendo que uses la forma POSIX («non-Bash») pura para estos
  guiones del desarrollador de forma que conserven el mayor grado
  de compatibilidad.</footnote>
  se llaman guiones del desarrollador («maintainer
  scripts»), y son guiones que se colocan en el área de
  control del paquete y que <package/dpkg/ ejecuta cuando tu paquete
  se instala, se actualiza o se elimina.

  <p>Por ahora, deberías intentar evitar editar manualmente estos
  guiones si puedes porque suelen hacerse muy complejos. Para más
  información lee <url name="Debian Policy Manual, 6 
  'Package maintainer scripts and installation procedure'"
  id="http://www.debian.org/doc/debian-policy/ch-maintainerscripts.html">,
  y echa un vistazo a los ejemplos dados por <prgn>dh_make</prgn>.

  <p>Si a pesar de mis advertencias, adaptas los guiones del desarrollador
  para el paquete, asegúrate de comprovar su funcionamiento no
  solo para la <strong>instalación</strong> y <strong>actualización</strong>
  del paquete, sino también para su <strong>desinstalación</strong>
  y <strong>eliminación completa</strong>.

  <p>Las actualizaciones a una nueva versión deben ser «silenciosas»
  y no intrusivas (los usuarios solo deberian ver que se han arreglado
  los errores y que se han añadido nuevas funciones).

  <p>Cuando la actualización es necesariamente intrusiva (p.e. archivos
  de configuración dispersos en varios directorios con una estructura
  totalmente modificada), se deberian establecer los valores predeterminados
  seguros (p.e. desactivar los servicios) y facilitar la documentación
  apropiada establecida por las normas (archivos <file>README.Debian</file>
  y <file>NEWS.Debian</file>) como último recurso. Hay que evitar
  molestar al usuario con notas <prgn>debconf</prgn> invocadas
  por los guiones del desarrollador en las actualizaciones.

  <p>El paquete <package>ucf</package> facilita el sistema <em>conffile-like</em>
  para preservar los cambios de configuración realizados por el
  usuario y por ello no deben nombrarse como <em>conffiles</em>
  los archivos manejados por los guiones del desarrollador. Asi
  se minimizan las incidencias asociadas con ellos.

  <p>Estos guiones del desarrollador son un ejemplo de las
  características de Debian que explican <strong>por qué la gente elige Debian</strong>.
  Debes ser cuidadoso con no molestarles con ellos.

  <sect id="todo">Archivo <file>TODO</file>
  <p>La orden <manref name="dh_installdocs" section="1">
  instala este archivo.


  <sect id="watch">Archivo <file>watch.ex</file>

  <p>El formato del archivo <file>watch</file> se documenta
  en la página de manual de <manref name="uscan" section="1">.
  El archivo <file>watch</file> se usa para configurar el
  programa <manref name="uscan" section="1"> (del paquete
  <package>devscripts</package>) que vigila 
  el servidor de donde obtuviste las fuentes originales.
  También lo utiliza <url id="http://wiki.debian.org/DEHS" 
  name="Debian External Health Status (DEHS)">.


  <p>Esto es lo que he puesto yo
  <footnote>Pista de t.: conéctate a Internet, e intenta ejecutar el programa
  «uscan» en el directorio donde has creado el fichero. Consulta la página
  de manual para más detalles.
  </footnote>:

<example>
# watch control file for uscan
version=3
http://sf.net/gentoo/gentoo-(.*)\.tar\.gz debian uupdate
</example>
  

  <p>Con este archivo, la URL <tt>http://sf.net/gentoo</tt>
  se descarga y se buscan los enlaces del tipo <tt>&lt;a href=...&gt;</tt>.
  El nombre base (justo la parte después del <tt>/</tt> final) de estos
  enlaces URL se comparam con la función «regexp» de Perl
  (véase <manref name="perlre" section="1">) con el patrón
  <tt>gentoo-(.*)\.tar\.gz</tt>. De entre todos los archivos
  encontrados cuyo nombre se ajusta al patrón, se descarga
  el de versión más reciente y el programa <prgn>uupdate</prgn>
  se ejecuta para actualizar las fuentes.

  <p>Aunque es posible hacer esto con otros portales, el servicio
  de descarga de «SourceForge» en <url id="http://sf.net"> es una excepción.
  Cuando el archivo  <file>watch</file> tiene una URL que concuerda con el
  patrón Perl <tt>^http://sf\.net/</tt>, el programa <prgn>uscan</prgn>
  lo subtituye por <tt>http://qa.debian.org/watch/sf.php/</tt> y después
  aplica esta regla. El servicio de redireccionamiento URL a la
  dirección <url id="http://qa.debian.org/"> está diseñado para ofrecer
  un servicio estable de redireccionamiento al archivo presente en <file>watch</file>
  y que concuerda con <tt>http://sf.net/<var>projecto</var>/<var>nombre_archivo_tar</var>-(.+)\.tar\.gz</tt> 

  <sect id="sourcef">Archivo <file>source/format</file>

  <p>El archivo <file>debian/source/format</file>, solo contendrá
  una línea indicando el formato para el paquete
  (véase <manref name="dpkg-source" section="1"> para consultar la lista
  completa). Después de <tt>squeeze</tt> deberia ser:
  <list compact>
  <item><tt>3.0 (native)</tt> para paquetes nativos de Debian 
  <item><tt>3.0 (quilt)</tt> para el resto de paquetes.  
  </list>
   
  <p>El nuevo formato <tt>3.0 (quilt)</tt> registra los cambios
  en series de archivos de parches en el directorio <file>debian/patches</file>.
  Estos cambios se aplican automáticamente en la extracción de las fuentes
  del paquete
  <footnote>Véase <url name="DebSrc3.0"
  id="http://wiki.debian.org/Projects/DebSrc3.0"> para un resumen
  informativo sobre los formatos <tt>3.0 (quilt)</tt> y <tt>3.0 (native)</tt>.
  </footnote>.
  Las modificaciones se guardan en el archivo <file>debian.tar.gz</file>
  que contiene todos los archivos del directorio <file>debian</file>
  utilizado en la construcción del paquete. El nuevo formato
  permite la inclusión de archivos como los iconos PNG sin
  necesidad de trucos
  <footnote>Actualmente, este nuevo formato también permite
  trabajar con múltiples archivos «tar» fuente y otros
  sistemas de compressión. Estas funciones estan
  fuera del objetivo de este documento.</footnote>.

  <p>Cuando <prgn>dpkg-source</prgn> extrae un paquete fuente
  con el formato <tt>3.0 (quilt)</tt>, automáticamente aplica
  todos los parches listados en el archivo <file>debian/patches/series</file>.
  Puedes evitar la ejecución de los parches al final de la extracción
  con la opción <tt>--skip-patches</tt>.

  <sect id="sourcel">Archivo <file>source/local-options</file>

  <p>Si tienes que gestionar los trabajos de empaquetado en un entorno
  VCS, seguramente tendras una rama (p.e. <tt>upstream</tt>) para las
  fuentes originales y otra rama (p.e. normalmente <tt>master</tt> en Git)
  para el paquete Debian. Si es así, tendrás las fuentes originales sin
  modificar (sin aplicarles los parches) con los archivos <file>debian/*</file>
  para el empaquetamiento Debian para fusionarlas con las nuevas versiones
  de las fuentes.

  <p>Una vez compilado el paquete, las fuentes estaran parcheadas. Deberas
  deshacer los parches ejecutando <tt>quilt pop -a</tt> antes de sincronizarlas
  con la rama <tt>master</tt> branch. Puedes automatizar esto añadiendo el
  archivo opcional <file>debian/source/local-options</file> cuyo contenido
  será <tt>unapply-patches</tt>. Este archivo no se incluye en el paquete
  fuente generado y unicamente cambia el entorno local de compilación.
  Este archivo también puede contener la linea <tt>abort-on-upstream-changes</tt>
  (véase <manref name="dpkg-source" section="1">).

  <sect id="patches">Archivos <file>patches/*</file>

  <p>El antiguo formato <tt>1.0</tt> construia un archivo <file>diff.gz</file>
  cuyo contenido era el de los archivos de construcción del paquete del
  directorio <file>debian</file> asi como los cambios a realizar en las fuentes.
  Este formato para conservar los cambios resultaba engorroso cuando se trataba
  de inspeccionar y entender para cada modificación de las fuentes. Ya no
  resulta eficaz.

  <p>El nuevo formato <tt>3.0 (quilt)</tt> de las fuentes, guarda las
  modificaciones (los parches) en archivos en el directorio
  <file>debian/patches/*</file> utilizando la orden <prgn>quilt</prgn>.
  Estos parches y otros datos del paquete que estan en el directorio
  <file>debian</file> se conservan en el archivo <file>debian.tar.gz</file>.
  Desde que la orden <prgn>dpkg-source</prgn> puede aplicar
  los parches en las fuentes con el nuevo formato tipo <tt>3.0 (quilt)</tt>
  sin el paquete <package>quilt</package>, no es necesario
  añadir el paquete <package>quilt</package> en el campo
  <tt>Build-Depends</tt> del fichero <file>control</file>
  <footnote>Se han propuesto y se estan utilizando otros métodos
  de aplicación de los parches en Debian. El sistema <prgn>quilt</prgn>
  es el preferido. Otros sistemas son <prgn>dpatch</prgn>,
  <prgn>dbs</prgn>, <prgn>cdbs</prgn>, etc. La majoria de ellos
  conservan los parches en archivos en el directorio <file>debian/patches</file>.
  </footnote>.

  <p>El funcionamiento de la orden <prgn>quilt</prgn> se
  explica en <manref section="1" name="quilt">. Conserva las
  modificaciones de las fuentes en una colección de archivos
  de parches <tt>-p1</tt> en el directorio <file>debian/patches</file>
  y las fuentes originales permanecen sin modificiar fuera del
  directorio <file>debian</file>. El orden de aplicación de
  las modificaciones se conserva en el archivo <file>debian/patches/series</file>.
  Puedes ejecutar («push»), deshacer («pop») y actualizar las
  modificaciones fácilmente
  <footnote>Si has solicitado a un esponsor que transfiera
  el paquete al repositorio, este sistema de separación y
  documentación de los cambios es muy importante para facilitar
  la revisión del paquete por el esponsor.
  </footnote>.

  <p>En <ref id="modify">, se han construido tres archivos
  de parches en <file>debian/patches</file>.

  <p>Puesto que los parches se ubican en <file>debian/patches</file>,
  por favor asegúrate que has configurado adecuadamente la orden
  <prgn>quilt</prgn> como se describe en <ref id="quiltrc">.

  <p>Cuando alguien (incluido tú mismo), facilita un parche
  <file><var>nombre_parche</var>.patch</file> para las fuentes, cuando
  ya está construido el paquete, la modificación de un paquete
  con formato <tt>3.0 (quilt)</tt> es así de simple:

<example>
$ dpkg-source -x gentoo_0.9.12.dsc
$ cd gentoo-0.9.12
$ quilt import ../<var>nombre_parche</var>.patch
$ quilt push
$ quilt refresh
$ quilt header -e
... descripción de la modificación
</example>

  <p>Los parches conservados con el nuevo formato de fuentes
  <tt>3.0 (quilt)</tt> deben estar exentos de cosas innecesarias.
  Debes asegurarte ejecutando <tt>quilt pop -a; while quilt push; do quilt refresh; done</tt>. 

  <chapt id="build">Construir el paquete
  
  <p>Ahora deberíamos estar preparados para construir el paquete.

  <sect id="completebuild">Reconstrucción completa

  <p>Para realizar correctamente la (re)compilar completa de un
  paquete, debes asegurarte que tienes instalados:
  <list compact>
  <item>el paquete <package>build-essential</package>.
  <item>los paquetes listados en el campo <tt>Build-Depends</tt> del
  archivo «control» (<ref id="control">).
  <item>los paquetes listados en el campo <tt>Build-Depends-indep</tt>
  (también del archivo «control», <ref id="control">).
  </list>


  <p>Accede al directorio principal del código fuente del programa
  y ejecuta la siguiente orden
  <footnote>N. de t.: la versión original en inglés
  no incluye «-rfakeroot». Aqui se incluye por considerarlo más adecuado.
  </footnote>:

  <p><example>
  dpkg-buildpackage -rfakeroot
  </example>
  
  <p>Esto lo hará todo para construir los paquetes binarios y de fuentes para tí:  
  <list compact>
    <item>limpia el árbol del código (<tt>debian/rules clean</tt>), usando <prgn/fakeroot/
    <item>construye el paquete de código (<tt>dpkg-source -b</tt>)
    <item>construye el programa (<tt>debian/rules build</tt>)
    <item>construye el paquete binario (<tt>fakeroot debian/rules binary</tt>), usando <prgn/fakeroot/
    <item>firma el fichero fuente <tt/.dsc/, usando <prgn/gnupg/
    <item>crea y firma el fichero de subida <tt/.changes/, usando
          <prgn/dpkg-genchanges/ y <prgn/gnupg/
  </list>

  <p>Lo único que se te pedirá es que escribas tu contraseña secreta
  de la clave GPG, dos veces
  <footnote>N. de t.: para que los paquetes sean transferidos al repositorio
  de Debian, deben estar firmados por el desarrollador con una firma GPG.
  Deberias crearte una clave GPG si aún no la tienes. Hay mucha información
  sobre este tema: puede ser de ayuda 
  <url id="http://bulma.net/pdf.phtml?nIdNoticia=1684"> y 
  <url id="http://ekaia.org/blog/2009/05/10/creating-new-gpgkey/">.
  </footnote>.

  <p>Después de hacer todo esto, verás los siguientes archivos
  en el directorio superior al directorio de trabajo (<file>~/gentoo/</file>):

  <p><list compact>
  <item><em>gentoo_0.9.12.orig.tar.gz</em>
  <p>Este es el código fuente original comprimido, simplemente se ha renombrado
  para seguir los estándares de Debian. Nótese que ha sido creado usando
  la opción «-f» de <tt>dh_make -f ../gentoo-0.9.12.tar.gz</tt>
  ejecutada en el inicio.
  
  <item><em>gentoo_0.9.12-1.dsc</em>
  <p>Este es un sumario de los contenidos del código fuente. Este
  fichero se genera a partir del fichero de «control» 
  y se usa cuando se descomprimen las fuentes con <manref
  name="dpkg-source" section="1">. Este fichero está firmado con GPG
  de forma que cualquiera pueda estar seguro de que es realmente tuyo.

  <item><file>gentoo_0.9.12-1.debian.tar.gz</file>
  <p>Este fichero comprimido contiene el directorio <file>debian</file>
  completo. Todas las modificaciones de las fuentes originales se
  conservan en los archivos de parches <prgn>quilt</prgn> en el directorio
  <file>debian/patches</file>.

  <p>Si alguien quiere volver a crear tu paquete desde cero, puede hacerlo
  fácilmente usando los tres ficheros de arriba. El proceso de extracción
  es trivial: sólo se debe copiar los tres ficheros en algún lado y ejecutar
  <tt>dpkg-source -x gentoo_0.9.12-1.dsc</tt>
  <footnote>Puedes evitar la aplicación automática de las modificaciones
  por <prgn>quilt</prgn> en los paquetes con formato <tt>3.0 (quilt)</tt>
  al final de la extracción con la opción <tt>--skip-patches</tt>.
  También puedes deshacer las modificacions al finalizar la
  extracción con la ejecución de <tt>quilt pop -a</tt>.
  </footnote>.
  
  <item><em>gentoo_0.9.12-1_i386.deb</em>
  <p>Este es el paquete binario completo. Puedes usar <prgn/dpkg/ 
  para instalar o eliminar tanto este paquete como cualquier otro.
  
  <item><em>gentoo_0.9.12-1_i386.changes</em>
  <p>Este fichero describe todos los cambios hechos en la revisión
  actual del paquete, y se usa por los programas de gestión del
  archivo FTP para instalar los paquetes binarios y fuentes en él. Se
  genera parcialmente a partir del fichero «changelog»  y el fichero «.dsc».
  Este fichero está firmado con GPG, de forma que
  cualquiera puede estar aún más seguro de que es realmente tuyo.
  
  <p>Mientras sigues trabajando en el paquete, éste cambiará su
  comportamiento y se le añadirán nuevas funciones. Las personas que
  descarguen tu paquete pueden leer este fichero y ver qué ha
  cambiado. Los programas de mantenimiento del archivo de Debian, también
  enviarán el contenido de este fichero a la lista de correo
  <url id="http://lists.debian.org/debian-devel-announce/"
  name="debian-devel-announce@lists.debian.org">.
  </list>
  
  <p>Las largas listas de números en los ficheros <file>.dsc</file> y 
  <file>.changes</file> son las sumas MD5/SHA1/SHA256 para los ficheros. 
  Las personas que descarguen estos ficheros pueden
  comprobarlos con <manref name="md5sum" section="1">, 
  <manref name="sha1sum" section="1">  o <manref
  name="sha256sum" section="1">  y si los números
  no coinciden, sabrán que el fichero está corrupto o ha sido
  modificado.

  <sect id="autobuilder">Autobuilder

  <p>Debian mantiene diversas <url name="adaptaciones «ports»" 
  id="http://www.debian.org/ports/"> con la <url name="red de servidors de
  compilación automática" id="http://www.debian.org/devel/buildd/">
  que ejecuta demonios <prgn>buildd</prgn> en ordenadores con diferentes
  arquitecturas. Aunque no deberás hacer todo esto tú mismo, debes
  conocer el procesamiento a que se verá sometido tu paquete.
  Veamos cómo se procesa el paquete para compilarlo en
  diversas arquitecturas.
  <footnote>El funcionamiento del sistema actual de compilación
  automática es más complicado que lo expuesto en este documento.
  Muchos detalles quedan fuera de los objetivos de este documento.
  </footnote>.

  <p>Los paquetes del tipo <tt>Architecture: any</tt>, son construidos
  por el sistema de compilación automática. El sistema garantiza la
  instalación de:
  <list compact>
  <item>el paquete <package>build-essential</package>, y
  <item>los paquetes listados en el campo <tt>Build-Depends</tt>
  (véase <ref id="control">).
  </list>

  <p>A continuación se ejecuta la siguiente orden en el directorio
  de las fuentes:
<example>
$ dpkg-buildpackage -B
</example>

  <p>De esta manera, se ejecuta todo lo necesario para construir
  el paquete binario dependiente de la arquitectura en cada
  arquitectura. Hace lo siguiente:
  <list compact>
    <item>limpia el árbol del código (<tt>debian/rules clean</tt>)
    <item>construye el programa (<tt>debian/rules build</tt>)
    <item>construye el paquete binario para la arquitectura (<tt>fakeroot debian/rules binary-arch</tt>)
    <item>firma el fichero fuente <tt/.dsc/, usando <prgn/gpg/
    <item>crea y firma el fichero de subida <tt/.changes/, usando
          <prgn/dpkg-genchanges/ y <prgn/gpg/
  </list>

  <p>Asi, el paquete estará disponible para otras arquitecturas.

  <p>Aunque es necesario instalar los paquetes listados en el
  campo <tt>Build-Depends-indep</tt> para el empaquetamiento
  normal (véase <ref id="completebuild">), el sistema automático
  de construcción no lo requiere puesto únicamente construye
  paquetes binarios dependientes de la arquitectura
  <footnote>Contrariamente a modo de funcionamiento del paquete
  <package>pbuilder</package> (que se tratará más adelante),
  el entorno <prgn>chroot</prgn> del paquete <package>sbuild</package>
  utilizado por el sistema automático no tiene una instalación
  mínima de paquetes del sistema y puede dejar muchos paquetes
  instalados.
  </footnote>.
  Estas diferencias entre el empaquetamiento normal y el automático
  determinan si los paquetes requeridos para la compilación se deben
  listar en el campo <tt>Build-Depends</tt> o bien en el campo
  <tt>Build-Depends-indep</tt> del archivo <file>debian/control</file>
  (véase <ref id="control">).

  <sect id="option-sa">Incluir <file>orig.tar.gz</file> para la
  transferencia del paquete al repositorio.

  <p>Cuando se envia por primera vez al archivo,
  se debe incluir el archivo <file>orig.tar.gz</file> con las
  fuentes originales. Si la última entrada del último archivo
  de cambios (<file>changelog</file>) no es la primera de la
  versión del autor original, deberás ejecutar la orden
  <prgn>dpkg-buildpackage</prgn> con el la opción <tt>-sa</tt>
  para forzar la inclusión del archivo <file>orig.tar.gz</file>.
  Por otra parte, es posible exluir la inclusión del archivo
  <file>orig.tar.gz</file> con la opció <tt>-sd</tt>.
 
  <sect id="debuild">La orden <prgn>debuild</prgn>

  <p>Puedes automatizar aún más el proceso de construcción de paquetes
  con la orden <prgn>debuild</prgn>.  Veáse <manref name="debuild"
  section="1">.
  
  <p>La personalización de la orden debuild puede hacerse a través de
  <file>/etc/devscripts.conf</file> o <file>~/.devscripts</file>. 
  Te sugiero al menos los siguientes valores:

<example>
DEBSIGN_KEYID="Tu_ID_clave_GPG"
DEBUILD_LINTIAN=yes
DEBUILD_LINTIAN_OPTS="-i -I --show-overrides"
</example>

  <p>Con estos valores, puedes construir paquetes siempre con tu clave
  GPG, evitando incluir componentes no deseados (facilitará que te
  patrocinen el paquete), e inspeccionar el paquete con la orden
  <prgn>lintian</prgn> en el modo detallado.

  <p>Por ejemplo, limpiar el código y reconstruir el
  paquete desde una cuenta de usuario es tan simple como:

  <p><example>
  debuild clean
  debuild
  </example>

  <p>Si incluyes la opción <tt>-sa</tt> a la orden <prgn>dpkg-buildpackage</prgn>
  se incluirá el archivo <file>orig.tar.gz</file> de fuentes:
<example>
$ debuild -sa
</example>

  <sect id="pbuilder">El paquete <package>pbuilder</package> 
 
  <p>El paquete <package>pbuilder</package> es muy útil para conseguir
  un entorno limpio (<package>chroot</package>) donde verificar las dependencias. Esto
  asegura una construcción limpia desde el código en los programas que
  realizan la compilación automática de paquetes para diferentes
  arquitecturas y evita fallos serios del tipo FTBFS (Fallo al
  construir desde la fuente o «Fail to Build From Source»), que son
  siempre del tipo RC (fallos criticos o «release critical»). Para
  más informacon del paquete debian <package/auto-builder/ véase <url
  id="&buildd-home;">.


  <p>Para personalizar el funcionamiento del paquete <package>pbuilder</package>
  haz lo siguiente:
  <list compact>
  <item>permite que tu usuario del sistema tenga permiso de escritura
  en el directorio <file>/var/cache/pbuilder/result</file>.
  <item>crea un directorio, p.e. <file><var>/var/cache/pbuilder/hooks</var></file>,
  con permiso de escritura para tu usuario. En este directorio pondras
  los guiones «hook»
  <item>establece los archivos <file>~/.pbuilderrc</file> o
  <file>/etc/pbuilderrc</file> con el siguiente contenido:
<example>
AUTO_DEBSIGN=yes
HOOKDIR="<var>/var/cache/pbuilder/hooks</var>"
</example>
</list>

  <p>Asi podras firmar los paquetes con tu clave GPG almacenada en
  el directorio <file>~/.gnupg/</file>.

  <p>Ahora puedes inicializar el sistema local <package>pbuilder</package>
  <prgn>chroot</prgn> por primera vez ejecutando:
<example>
$ sudo pbuilder create
</example>


  <p>Si ya dispones de un paquete fuente completo, ejecuta las siguientes
  órdenes en el directorio donde tengas los archivos
  <file><var>nombre_paquete</var>.orig.tar.gz</file>,
  <file><var>nombre_paquete</var>.debian.tar.gz</file> y
  <file><var>nombre_paquete</var>.dsc</file> para actualizar el
  sistema local <package>pbuilder</package> <prgn>chroot</prgn> y,
  a continuación, compilar el paquete binario en él:
<example>
$ sudo pbuilder --update
$ sudo pbuilder --build <var>nombre_paquete</var>.dsc
</example>

  <p>Para incluir el archivo de las fuentes originales
  (para que se ejecute <prgn>dpkg-buildpackage</prgn> con
  la opción <tt>-sa</tt>) <file>orig.tar.gz</file> deberás
  ejecutar lo siguiente:
<example>
$ sudo pbuilder --build --debbuildopts "-sa" <var>nombre_paquete</var>.dsc
</example>

  <p>Una vez finalizada la compilación, el paquete compilado
  estará en el directorio <file>/var/cache/pbuilder/result/</file>
  siendo tu usuario el propietario.

  <p>Si en lugar de iniciar la construcción del paquete a partir
  de un paquete ya construido, dispones de un directorio con las fuentes
  originales actualizadas, deberás ejecutar las siguientes órdenes
  desde el directorio de las fuentes originales (y en el que deberá
  estar presente el directorio <file>debian</file> con todo su contenido):

<example>
$ sudo pbuilder --update
$ pdebuild
</example>

  <p>Para incluir el archivo de las fuentes originales
  (para que se ejecute <prgn>dpkg-buildpackage</prgn> con
  la opción "<tt>-sa</tt>) <file>orig.tar.gz</file> deberas
  ejecutar lo siguiente:
<example>
$ pdebuild --debbuildopts "-sa"
</example>

  <p>Puedes «conectarte» al entorno <prgn>chroot</prgn> ejecutando
  la orden <tt>pbuilder --login --save-after-login</tt> y configurarlo
  para adaptarlo a tus necesidades. Este entorno puede guardarse
  saliendo del «shell» con <tt>^D</tt> (Control-D).

  <p>La última versión de la orden <prgn>lintian</prgn> puede ejecutarse
  automáticamente en el entorno <tt>chroot</tt> utilizando el guión
  «hook» disponible en <file><var>/var/cache/pbuilder/hooks</var>/B90lintian</file>
  y configurado como sigue
  <footnote>Se supone que la variable de entorno
  <tt>HOOKDIR="/var/cache/pbuilder/hooks"</tt> ya está configurada.
  Puedes consultar otros ejemplos en
  <file>/usr/share/doc/pbuilder/examples</file>.
  </footnote>:
<example>
#!/bin/sh
set -e
install_packages() {
    apt-get -y --force-yes install "$@"
    }
install_packages lintian
echo "+++ informe de lintian +++"
su -c "lintian -i -I --show-overrides /tmp/buildd/*.changes" - pbuilder
# si quieres evitar que lintian para la construcción utiliza lo siguiente
#su -c "lintian -i -I --show-overrides /tmp/buildd/*.changes; :" - pbuilder
echo "+++ final del informe de lintian +++"
</example>

  <p>Debes tener un entorno <tt>sid</tt> actualizado para contruir
  correctamente paquetes para <tt>sid</tt>. En realidad, al versión <tt>sid</tt>
  puede contener errores que no hacen recomendable la migración de tu
  sistema a esta versión. El paquete <package>pbuilder</package> te ayuda
  a hacer frente a esta situación.
  <footnote>N. de t.: habitualmente, los paquetes nuevos o las nuevas versiones
  de paquetes que ya estan en el archivo, se compilan para la versión
  <tt>sid</tt>. Una vez han pasado un período de pruebas en esta versión,
  son transferidos a la versión de pruebas («testing») y finalmente
  a la versión estable. La orden <package>pbuilder</package> permite
  construir un entorno para compilar paquetes en la versión <tt>sid</tt>
  en un sistema con la versión de pruebas o la estable. Debes configurar
  la versión que utilizará <package>pbuilder</package> para construir el
  entorno de compilación de paquetes en el archivo <file>./.pbuilderrc</file>
  con la linea DIST=sid</footnote>


  <p>Es posible que debas actualitzar tu paquete <tt>stable</tt> después
  de distribuirlo para <tt>stable-proposed-updates</tt>, <tt>stable/updates</tt>, etc
  <footnote>Hay algunas restricciones para estas actualizaciones de
  tu paquete <tt>stable</tt>.
  </footnote>.
  En algunas ocasiones, «Yo trabajo con la versión <tt>sid</tt>» puede
  no ser una excusa para dejar de actualizar el paquete. El paquete
  <package>pbuilder</package> te ayuda trabajar en entornos para
  todas las distribuciones derivadas Debian para una architectura
  determinada.

  <p>Consulta <url id="&pbuilder-home;">,
<manref section="1" name="pdebuild">,
<manref section="5" name="pbuilderrc">, y
<manref section="8" name="pbuilder">.

  <sect id="git-buildpackage">La orden <prgn>git-buildpackage</prgn>
  y similiares

  <p>Si el autor original utiliza un sistema de gestión de versiones
  para el código (<url id="http://www.debian.org/doc/manuals/debian-reference/ch10.en.html#_version_control_systems" 
  name="VCS">) puedes considerar utilizarlo. Asi se facilita
  la coordinación y la selección de los parches en las fuentes.
  Debian dispone de varios paquetes de guiones especializados
  en cada tipos de VCS:
  <list compact>
  <item><package>git-buildpackage</package>: conjunto para 
    la compilación de paquetes en repositorios «Git».
  <item><package>topgit</package>: para gestionar las pilas
  de parches en «Git».
  <item><package>svn-buildpackage</package>: programas de ayuda
  para el mantenimiento de paquetes Debian con «Subversion».
  <item><package>cvs-buildpackage</package>: conjunto de paquete
  de guiones Debian para estructuras de directorios CVS.
  </list>

  <p>Estos paquetes ofrecen un entorno más cómodo de trabajo
  que la utilización «manual» de órdenes <prgn>quilt</prgn>
  para usuarios experimentados, con el objetivo de <em>automatizar</em>
  la construcción de paquetes. No se explica el uso de estas
  herramientas en este tutorial
  <footnote>Aqui tienes algunos recursos disponibles en la
  red, dirigidos a usuarios expertos:
  <list compact>
  <item>Construcción de paquetes Debian con <package>git-buildpackage</package>
  en <file>/usr/share/doc/git-buildpackage/manual-html/gbp.html</file>.
  <item><url name="«Paquetes Debian en Git»" id="https://honk.sigxcpu.org/piki/development/debian_packages_in_git/">
  <item><url name="«Usando Git para empaquetar en Debian»" id="http://www.eyrie.org/~eagle/notes/debian/git.html">"
  <item><url name="«Usando TpGit para generar series de parches quilt en el empaquetado Debian»"
  id="http://git.debian.org/?p=collab-maint/topgit.git;a=blob_plain;f=debian/HOWTO-tg2quilt;hb=HEAD">
  <item><url name="«git-dpm: paquetes Debian en el gestor Git»" id="http://git-dpm.alioth.debian.org/">
  </list>
  N.de t.: los títulos estan traducidos pero los documentos están en inglés.
  </footnote>.


  <sect id="quickrebuild">Reconstrucción rápida
  
  <p>Con un paquete grande, puede que no quieras recompilar desde cero
  cada vez que tocas un detalle en el fichero <file>debian/rules</file>. 
  Para propósitos de prueba, puedes hacer un fichero <file>.deb</file> sin necesidad de
  recompilar las fuentes originales de esta forma:

  <p><example>
  fakeroot debian/rules binary
  </example>

  <p>O simplemente puedes comprobar si el paquete se compila con:
<example>
$ fakeroot debian/rules build
</example>

  <p>Una vez que has terminado la puesta a punto, recuerda reconstruir
  el paquete siguiendo el procedimiento adecuado que está
  arriba. Puede que no seas capaz de enviar correctamente el paquete
  si intentas enviar los archivos <file>.deb</file> construidos de esta forma.

  <chapt id="checkit">Cómo comprobar tu paquete para encontrar fallos

  <p>Debes conocer varios métodos para comprobar el paquete y localizar
  errores antes de transferirlo a repositorios públicos.

  <p>Probar el paquete en una máquina distinta a la usada en su
  construcción es una magnífica idea. Debes poner atención
  en todos los errores que se produzacan en las pruebas explicadas
  a continuación.

  <sect id="pinstall">Comprobando la instalación del paquete
  (orden <prgn>debi</prgn>)

  <p>Instala el paquete para probarlo tú mismo, por ejemplo, usando la
  orden <manref name="debi" section="1"> como superusuario. Intenta
  instalarlo y ejecutarlo en otras máquinas distintas de la tuya, y
  presta atención para detectar errores o avisos tanto en la instalación
  como en la ejecución del programa.

<example>
$ sudo debi gentoo_0.9.12-1_i386.changes
</example>

  <p>Debes asegurarte que no haya archivos en conflicto con otros
  paquetes utilizando el archivo <file>Contents-<var>i386</var></file>,
  (descargándolo del repositorio Debian) para prevenir problemas
  de instalación en distintos sistemas. La orden <prgn>apt-file</prgn>
  será útil para esta comprobación. Si hay archivos en conflicto,
  deberás hacer lo necesario para evitar problemas utilizando el
  mecanismo de alternativas (véase <manref name="update-alternatives" section="1">)
  coordinandote con los responsables de los otros paquetes o bien
  estableciendo correctamente el campo <tt>Conflicts</tt> del
  archivo <file>debian/control</file>. 
  

  <sect id="pmaintscripts">Comprobando los guiones de instalación («maintainer scripts»)

  <p>Ya se ha comentado que los guiones de instalación (los archivos <file>preinst</file>,
  <file>prerm</file>, <file>postinst</file> y <file>postrm</file>)
  son complicados, excepto si se utilizan los generados por el paquete
  <package>debhelper</package>. No se recomienda su utilización a los
  desarrolladores principiantes (véase <ref id="maintscripts">).

  <p>Si el paquete utiliza guiones modificados, debes comprobar
  su funcionamiento en la instalación, desinstalación, eliminación y
  actualización. Algunos errores en estos guiones sólo se detectaran
  en la eliminación o desinstalación. Utiliza la orden <prgn>dpkg</prgn>
  para hacer la comprobación:

<example>
$ sudo dpkg -r gentoo
$ sudo dpkg -P gentoo
$ sudo dpkg -i gentoo_<var>version</var>-<var>revision</var>_<var>i386</var>.deb
</example>

  <p>Sigue esta secuencia para la comprobación:

  <list compact>
    <item>Instala la versión anterior del paquete (requerido).
    <item>Actualiza ahora a la versión actual.
    <item>Vuelve a la versión anterior (opcional).
    <item>Desinstala el paquete.
    <item>Instala la nueva versión del paquete.
    <item>Elimínalo.
    <item>Instálalo de nuevo.
    <item>Elimínalo.
  </list>

  <p>Si estás trabajando en la construcción de la primera versión
  del paquete, construye versiones «fantasma» anteriores
  (será suficiente cambiar el número de la versión) para
  realizar las pruebas y asi prevenir problemas.

  <p>Recuerda que si ya hay versiones anteriores del paquete en
  el repositorio Debian, los usuarios actualizarán el paquete
  desde la versión anterior disponible (y esta versión puede
  ser distinta en la versión estable y de pruebas). Realiza las
  comprobaciones también con estas versiones.

  <p>Aunque no se garantiza la reinstalación de una versión anterior,
  es preferible asegurarse que es posible sin generar problemas.

  <sect id="lintians">El paquete <package>lintian</package>
 
  <p>Ejecuta <manref name="lintian" section="1"> sobre tu fichero de cambios <file>.changes</file>.
  La orden <prgn>lintian</prgn> ejecuta varios guiones de comprobación
  del paquete para localizar los errores más frecuentes
  <footnote>No es necesario añadir la opción <tt>-i -I --show-overrides</tt>
  si la has incluido en la configuración en <file>/etc/devscripts.conf</file>
  o <file>~/.devscripts</file> según se explicó en <ref id="debuild">.
  </footnote> .
   
<example>
$ lintian -i -I --show-overrides gentoo_0.9.12-1_i386.changes
</example>
  
  <p>Por supuesto, cambia el nombre de fichero con el nombre del
  fichero de cambios generado por tu paquete. Los mensages de
  error de <prgn>lintian</prgn> se codifican con una letra
  al inicio de la línea del mensage:
  <list compact>
  <item><tt>E:</tt> error; para indicar violaciones de las normas o un error en
    el paquete.
  <item><tt>W:</tt> advertencia; para advertir de una posible violación de las normas
   o error en el paquete (pero puediendo ser una falsa alarma).
  <item><tt>I:</tt> información; información sobre algún aspecto del paquete
   (que tal vez sea mejorable).
  <item><tt>N:</tt> nota o anotación; para mensages detallados que pueden ayudarte
    en la depuración del paquete.
  <item><tt>O:</tt> ignorado; un mensage ignorado (según lo configurado en
  los archivos <file>lintian-overrides</file> pero que se emite debido a
  la opción <tt>--show-overrides</tt>.
  </list>

  <p>En el caso de los errores (líneas que comienzan por E:), lee la explicación
  (líneas N:), cambia el paquete para eliminarlos (y reconstruye como se describe en <ref
  id="completebuild"> o verifica que los avisos son falsos.
  En este caso, haz que <file>lintian</file>
  los acepte, como se ha descrito en <ref id="lintian">.
  
  <p>Observa que puedes construir el paquete con
  <prgn/dpkg-buildpackage/ y ejecutar <prgn/lintian/ 
  todo con sólo una orden si utilizas <manref name="debuild" section="1">
  o <manref name="pdebuild" section="1">.

  <sect id="debc">La orden <prgn>debc</prgn>

  <p>Puedes ver la lista de archivos del paquete
  binario Debian ejecutando la orden <manref name="debc" section="1">
  como sigue: 

<example>
$ debc <var>nombre_paquete</var>.changes
</example>

  <sect id="debdiff">La orden <prgn>debdiff</prgn>
 
  <p>Puedes comparar el contenido de dos paquetes de
  fuentes Debian ejecutando la orden <manref name="debdiff" section="1">
  como sigue:

<example>
$ debdiff <var>version_anterior</var>.dsc <var>nueva_version</var>.dsc
</example>


  <p>Puedes comparar la lista de ficheros de dos paquetes binarios de
  Debian con la orden <manref name="debdiff" section="1"> ejecutando
  la orden como sigue:
<example>
$ debdiff <var>version_anterior</var>.changes <var>nueva_version</var>.changes
</example>
 
  <p>Este programa es útil para verificar que no hay ficheros que se hayan
  cambiado de sitio o eliminado por error, y que no se ha realizado
  ningún otro cambio no deseado al actualizar el paquete.

  <sect id="interdiff">La orden <prgn>interdiff</prgn> 
 
  <p>Puedes comparar dos ficheros <file>diff.gz</file> con la orden
  <manref name="interdiff" section="1">. Esto es muy útil para
  verificar que no se han realizado cambios inadvertidos por el
  responsable del paquete al actualizar el paquetes que se han
  contruido con el formato <tt>1.0</tt>
  <footnote>N. de t.: los paquetes construidos con el nuevo
  formato <tt>3.0</tt> no tienen archivo <file>diff.gz</file>.
  </footnote>.  Ejecuta lo siguiente:

<example>
$ interdiff -z <var>verions_anterior</var>.diff.gz <var>nueva_version</var>.diff.gz
</example>

  <sect id="mc">La orden <prgn>mc</prgn>
 
  <p>Algunas de las operaciones de comprobación del paquete descritas
  puede realizarse de forma muy intuitiva si empleamos un gestor de
  ficheros como <manref name="mc" section="1">, que permite visionar
  tanto el contenido del paquete <file>*.deb</file>, como el de los
  ficheros <file>*.udeb</file>, <file>*.debian.tar.gz</file>,
  <file>*.diff.gz</file>, <file>*.orig.tar.gz</file> y <file>*.tar.gz</file>.
  
  <p>Vigila que no haya ficheros innecesarios extra o de tamaño cero,
  tanto en el binario como en el paquete fuente. A veces, hay cosas
  que no se limpiaron adecuadamente, debes ajustar tu fichero «rules»
  para arreglar esto.

  <p>Puedes descomprimir el contenido del paquete <file>*.deb</file> con
  la orden <manref name="dpkg-deb" section="1">

  <chapt id="upload">Enviar el paquete
  
  <p>Ahora que has probado tu nuevo paquete en profundidad, estarás
  preparado para comenzar el proceso de nuevo desarrollador de Debian 
  tal y como se describe en:
  <url id="http://www.debian.org/devel/join/newmaint">

  <sect id="upload-debian">Enviar al repositorio de Debian

  <p>Cuando seas desarrollador oficial Debian, podrás transferir
  el paquete al repositorio de Debian. Puedes hacer esto manualmente,
  pero es más fácil hacerlo con las herramientas automáticas ya disponibles
  como <manref name="dupload" section="1"> o <manref name="dput" section="1">.
  A continuación describiremos cómo hacerlo con <prgn/dupload/
  <footnote>Tal vez el paquete <package>dput</package> tenga más
  funcionalidades y sea más popular. Utiliza el archivo <file>/etc/dput</file>
  para la configuración global y el archivo <file>~/.dput.cf</file> para
  la configuración del usuario. También incorpora la asistencia
  para Ubuntu.
  </footnote>.

  <p>En primer lugar, tienes que crear un fichero de configuración de dupload.
  Puedes hacerlo editando el fichero general del sistema <file>/etc/dupload.conf</file>, 
  o creando tu propio fichero <file>~/.dupload.conf</file> con lo que tu quieras
  cambiar.
  
  <p>A continuación tienes un ejemplo del contenido del fichero
  del configuración:
  
  <p><example>
  package config;

  $default_host = "anonymous-ftp-master";

  $cfg{'anonymous-ftp-master'} = {
        fqdn => "ftp-master.debian.org",
        method => "ftp",
        incoming => "/pub/UploadQueue/",
        # files pass on to dinstall on ftp-master which sends emails itself
        dinstall_runs => 1,
  };

  1;
  </example>

  <p>Por supuesto, cambia el nombre por el tuyo y lee
  la página de manual <manref name="dupload.conf" section="5"> para
  comprender qué significa cada una de estas opciones.
  
  <p>La opción <tt>$default_host</tt> es la más problemática; determina cuál de las
  colas de envios se usará por defecto. "anonymous-ftp-master" es la primaria,
  pero es posible que quieras usar otra más rápida.
  Para más información sobre las colas de envío, consulta la Referencia del 
  desarrollador, en concreto la sección «Uploading a package», en
  <file>&uploading;</file>
  
  <p>Ahora asegúrate que tienes conexión a internet y ejecuta la
  orden:
  
  <p><example>
  dupload gentoo_0.9.12-1_i386.changes
  </example>

  <p><prgn/dupload/ comprueba que las sumas MD5/SHA1/SHA256 de los
  archivos transferidos coinciden con las listadas en el
  fichero <file>.changes</file>, si no coinciden te avisará
  para que reconstruyas el paquete como se
  describe en <ref id="completebuild"> para poder enviarlo correctamente.

  <p>Si encuentras algún problema con la subida del paquete a <url
  id="&ftp-uploadqueue;">, puedes arreglarlo subiendo manualmente a
  <url id="&ftp-uploadqueue;"> a través de <prgn>ftp</prgn> un fichero
  «<file>*.commands</file>» firmado con gnupg  
  <footnote>
  Véase <url id="&ftp-command;">. Como alternativa, puedes usar la orden
  <prgn>dcut</prgn> del paquete <package>dput</package>.
  </footnote>.
    
  Por ejemplo, usando «<file>hello.commands</file>»:
  <example>
   -----BEGIN PGP SIGNED MESSAGE-----
   
   Uploader: tu_nombre_y_apellido &lt; tu_dirección_electrónica;
   Commands: 
    rm hello_1.0-1_i386.deb
    mv hello_1.0-1.dsx hello_1.0-1.dsc
   
   -----BEGIN PGP SIGNATURE-----
   Version: 2.6.3ia
   
   iQCVAwUBNFiQSXVhJ0HiWnvJAQG58AP+IDJVeSWmDvzMUphScg1EK0mvChgnuD7h
   BRiVQubXkB2DphLJW5UUSRnjw1iuFcYwH/lFpNpl7XP95LkLX3iFza9qItw4k2/q
   tvylZkmIA9jxCyv/YB6zZCbHmbvUnL473eLRoxlnYZd3JFaCZMJ86B0Ph4GFNPAf
   Z4jxNrgh7Bc=
   =pH94
   -----END PGP SIGNATURE-----
  </example>

  <p>Lee <url name="mentors.debian.net" 
  id="http://mentors.debian.net/cgi-bin/welcome"> para saber
  cómo enviar tu paquete en el caso que no seas Desarrollador
  Debian.

  <p>Lee <url name="Debian Reference, 2.7.12. 'Pequeño repositorio público de paquetes'"
  id="http://www.debian.org/doc/manuals/debian-reference/ch02.en.html#_small_public_package_archive">
  para saber cómo crear un repositorio personal público compatible con
  el moderno y seguro sistema APT.

  <sect id="skipped-uploads">Envíos discontinuados

  <p>Si en el archivo <file>debian/changelog</file> hay diversas
  entradas correspondientes a diferentes versiones del paquete,
  pero alguna de ellas no se ha enviado al repositorio, deberás generar
  correctamente un archivo <file>*_.changes</file> que incluya todas
  las modificaciones desde la última versión presente en el repositorio.

  <p>Puedes hacer esto añadiendo la opción <tt>-v</tt> en la
  ejecución de las ódenes <prgn>dpkg-buildpackage</prgn>, 
  <prgn>debuild</prgn>, <prgn>pdebuild</prgn>, etc 
  en la construcción del paquete.

  <sect id="upload-private">Enviar a un repositorio privado
   
  <p>Si eres desarrollador oficial Debian, puedes
  <footnote>N. de t.: esta sección no está en la versión
  actual en inglés, pero se ha mantenido de la versión
  anterior en español.</footnote>
  crear un repositorio personal de paquetes en
  <tt>URL="http://people.debian.org/~<var>nombre_de_cuenta</var>"</tt>
  con una simple llamada a <tt>dupload
  -t <var>nombre_de_objetivo</var></tt>. Para hacerlo deberías añadir
  lo siguiente al fichero «<file>/etc/dupload.conf</file>»:

  <example>
# Cuenta de desarrollador
$cfg{'<var>nombre_de_objetivo</var>'} = {
        fqdn =&gt; "people.debian.org",
        method =&gt; "scpb",
        incoming =&gt; "/home/<var>nombre_de_cuenta</var>/public_html/package/",
        # No necesitas anunciarlo
        dinstall_runs =&gt; 1,
};
$cfg{'<var>nombre_de_objetivo</var>'}{preupload}{'changes'} = "
        echo 'mkdir -p public_html/package' | ssh people.debian.org  2&gt;/dev/null ; 
        echo '¡Directorio de paquetes creado!'";
   
$cfg{'<var>nombre_de_objetivo</var>'}{postupload}{'changes'} = "
        echo 'cd public_html/package ;
        dpkg-scanpackages . /dev/null &gt;Packages || true ;
        dpkg-scansources . /dev/null &gt;Sources || true ;
        gzip -c Packages >Packages.gz ;
        gzip -c Sources &gt;Sources.gz ' | ssh people.debian.org  2&gt;/dev/null ;
        echo '¡Archivo de paquetes creado!'";
   
</example>

  Aquí, el repositorio APT se construye mediante una simple ejecución
  remota con SSH.  Los ficheros de sobreescritura que necesitan
  <prgn>dpkg-scanpackages</prgn> y <prgn>dpkg-scansources</prgn> se
  especifican como <file>/dev/null</file>.
 
  Esta técnica la puede emplear alguien que no es desarrollador de
  Debian para almacenar sus paquetes en su página personal. También se
  pueden usar <prgn>apt-ftparchive</prgn> o otros programas para crear
  un repositorio APT.
 
  <chapt id="update">Actualizar el paquete

  <p>Después del lanzamiento del paquete, es posible que debas
  actualizarlo pronto.

  <sect id="newrevision">Nueva revisión Debian del paquete

  <p>Supongamos que se ha creado un informe de fallo en tu paquete
  con el número <tt>#54321</tt>, y que describe un problema que puedes solucionar.
  Para crear una nueva revisión del paquete, necesitas:

  <list>
  <item>Si debes aplicar una modificación nueva, ejecuta:
     <list compact>
     <item><tt>quilt new <var>nombre_modificacion.patch</var></tt> 
       para establecer el nombre de la modificación;
     <item><tt>quilt add <var>archivo_a_modificar</var></tt> para establecer el
       fichero al cual se aplicará la modificación.
     <item>Corregir el problema en el archivo original.
     <item><tt>quilt refresh</tt> para guardar los cambios realizados
       en el archivo del parche <file><var>nombre_modificacion.patch</var></file>.
     <item><tt>quilt header -e</tt> para añadir la descripción (breve) del
       cambio realizado en la cabecera del archivo <file><var>nombre_modificacion.patch</var></file>.
     </list>
  <item>Si debes actualizar una modificación ya existente, ejecuta:
     <list compact>
     <item><tt>quilt pop <var>nombre_modificacion.patch</var></tt> para deshacer
       el parche que debes actualizar (puesto que se habrá ejecutado y se supone
       que es necesario modificarlo).
     <item>Corregir el problema existente en la versión incorrecta
       del archivo de parche <file><var>nombre_modificacion.patch</var></file>.
     <item><tt>quilt refresh</tt> para actualizar <file><var>nombre_modificacion.patch</var></file>.
     <item><tt>quilt header -e</tt> para actualizar la descripción en la 
       cabecera del archivo del parche.
     <item><tt>while quilt push; do quilt refresh; done</tt> para aplicar todos
       los parches.
     </list>
  <item>Añadir la información de la revisión en el inicio del archivo
  <file>changelog</file> (del directorio <file>Debian</file>), por ejemplo
  ejecutando <tt>dch -i</tt> o explícitamente indicando el número de versión
  y revisión ejecutando  <tt>dch -v <var>versiónn</var>-<var>revisión</var></tt>,
  y a continuación detallar los cambios realizados utilizando
  un editor
  <footnote>Para escribir la fecha y hora en el formato requerido, debes
  utilizar <tt>LANG=C date -R</tt>.
  </footnote>.
  <item>Incluye la descripció (breve) del error y la solución, seguida
  de la referencia de la notificación del error con <tt>(Closes: #54321)</tt>.
  De esta manera, el informe de error se «cerrará» <em>automáticamente</em>
  por el sistema de mantenimiento del repositorio Debian cuando el paquete
  sea acceptado en el repositorio.  
  <item>Deberás repetir los pasos anteriores para cada una de las
  modificaciones realizadas en la actualización del paquete.
  <item>Ahora debes reconstruir el paquete con las modificaciones
  segun se ha descrito en <ref id="completebuild">, <ref id="checkit">,
  and <ref id="upload">. La diferencia con el procedimiento anterior
  es que el archivo de las fuentes originales no se incluirá (puesto
  que no se ha sido modificadas por el autor) en el envio al repositorio.
  </list>

  <sect id="inspectnewupstream">Inspección de una nueva versión del autor

  <p>Para la actualización de un paquete cuando el autor original libera
  una nueva versión de las fuentes, debes empezar por revisar la
  nueva versión original.

  <p>Enpieza por leer los archivos <file>changelog</file>,
  <file>NEWS</file> y cualquier otra documentación donde el autor
  original describa los cambios de la nueva versión.

  <p>Puedes comprobar los cambios entre las fuentes originales
  de la nueva versión y de la anterior para detectar cualquier
  cambio sospechoso de producir errores ejecutando:
<example>
$ diff -urN <var>nombre_archivo</var>-<var>version_anterior</var> 
  <var>nombre_archivo</var>-<var>nueva_version</var>
</example>

  <p>Las modificaciones realizadas en los archivos generados
  por «Autotools» (<file>missing</file>, <file>aclocal.m4</file>, <file>config.guess</file>,
  <file>config.h.in</file>, <file>config.sub</file>, <file>configure</file>,
  <file>depcomp</file>, <file>install-sh</file>, <file>ltmain.sh</file> y
  <file>Makefile.in</file>) puedes ignorarlas. Puedes eliminarlos
  antes de ejecutar <prgn>diff</prgn> en las fuentes para inspeccionarlas.

  <sect id="newupstream">Nueva versión del programa fuente
  
  <p>Si el paquete que examinas está correctamente empaquetado
  utilizando los nuevos formatos <tt>3.0 (native)</tt> o <tt>3.0 (quilt)</tt>
  para empaquetar una nueva versión del autor deberia
  ser suficiente copiar el directorio <file>debian</file>
  de la versión anterior a la nueva, para a continuación, realizar
  las adaptaciones necesarias. Puedes copiar el directorio
  <file>debian</file> de la versión anterior a la nueva versión
  ejecutando 
  <tt>tar xvzf /<var>ruta</var>/<var>a</var>/<var>nombre_paquete</var>_<var>version_anterior</var>.debian.tar.gz</tt>
  desde el directorio de las fuentes de la nueva versión
  <footnote>
  <p>Si la versión anterior del paquete está empaquetado en el antiguo formato
  <tt>1.0</tt>, puedes hacer lo mismo ejecutando
  <tt>zcat /<var>ruta</var>/<var>a</var>/<var>nombre_paquete</var>_<var>version_anterior</var>.diff.gz|patch -p1</tt>
  desde el directorio de las fuentes de la nueva versión.
  </footnote>.

  <p>A continuación deberás realizar algunos cambios obvios:
  <list>
  <item>Comprimir las fuentes originales en el archvio
  <file>nombre_paquete_<var>numero_nueva_version</var>.tar.gz</file>
  <footnote>N. de t.: ¡Atención a la barra baja entre el nombre
  y el número de la versión!</footnote>.
  <item>Actualizar el archivo <file>changelog</file> del directorio
  <file>debian</file> ejecutando <tt>dch -v <var>newversion</var>-<var>1</var></tt>.
    <list compact>
    <item>Añade una nuevar linea con el texto «New upstream release»
    para indicar que se trata de una nueva versión de las fuentes originales.
    <item>Describe sucintamente los cambios realizados <em>en las fuentes originales
    por el autor</em> que solucionan errores informados y cierra los informes
    (añadiendo <file>(Closes: #<em>número_del_error</em>)</file>.
    <item>Describe sucintamente los cambios realizados <em>a las fuentes originales</em>
    por el desarrollador (o sea tú mismo) para solucionar los errores
    informados y cierra los informes.
    </list>
  <item>Ejecuta <tt>while quilt push; do quilt refresh; done</tt>
  para aplicar los parches.
  </list>

  <p>Si las modificaciones no se ejecutan correctamente, inspecciona la situación
  (mira la información de los archivos <file>.rej</file>) como sigue:
  <list>
  <item>Si uno de los parches aplicados está integrado en las fuentes
  originales:
    <list compact>
    <item>ejecuta <tt>quilt delete</tt> para eliminarlo.
    </list>
  <item>Si uno de los parches entra en conflicto con los cambios realizados
  por el autor en las fuentes originales:
     <list compact>
     <item>ejecuta <tt>quilt push -f</tt> para aplicar los parches de la versión
     anterior para forzar los rechazos (tendrás la información de los rechazos
     en los archivos <file><var>rechazo</var>.rej</file>).
     <item>Edita los archivos <file><var>rechazo</var>.rej</file>
     manualmente para saber el efecto que se pretende con <file><var>rechazo</var>.rej</file>.
     <item>Ejecuta <tt>quilt refresh</tt> para actualizar el parche.
     </list>
  <item>Continua hasta la ejecución de <tt>while quilt push; do quilt refresh; done</tt>.
  </list>

  <p>Puedes automatizar este proceso utilizando la orden <manref name="uupdate" section="1">
  como sigue:
<example>
$ apt-get source <var>foo</var>
...
dpkg-source: info: extracting <var>foo</var> in <var>foo</var>-<var>oldversion</var>
dpkg-source: info: unpacking <var>foo</var>_<var>oldversion</var>.orig.tar.gz
dpkg-source: info: applying <var>foo</var>_<var>oldversion</var>-1.debian.tar.gz
$ ls -F
<var>foo</var>-<var>oldversion</var>/
<var>foo</var>_<var>oldversion</var>-1.debian.tar.gz
<var>foo</var>_<var>oldversion</var>-1.dsc
<var>foo</var>_<var>oldversion</var>.orig.tar.gz
$ wget http://example.org/<var>foo</var>/<var>foo</var>-<var>newversion</var>.tar.gz
$ cd <var>foo</var>-<var>oldversion</var>
$ uupdate -v <var>newversion</var> ../<var>foo</var>-<var>newversion</var>.tar.gz
$ cd ../<var>foo</var>-<var>newversion</var>
$ while quilt push; do quilt refresh; done
$ dch
... documenta las modificaciones realizadas
</example>

  <p>Si has configurado el archivo <file>debian/watch</file> como
  se ha descrito en  <ref id="watch">, puedes saltarte la orden
  <prgn>wget</prgn>. Simplemente, ejecuta <manref name="uscan" section="1">
  en el directorio <file><var>foo</var>-<var>oldversion</var></file>
  en lugar de la orden <prgn>uupdate</prgn>. Asi, se buscará automáticamente
  el archivo de las fuentes, se descargará en tu ordenador y se ejecutará
  la orden <prgn>uupdate</prgn>
  <footnote>Si la orden <prgn>uscan</prgn> descargar las fuentes pero no
  ejecuta la orden <prgn>uupdate</prgn>, debes corregir el archivo
  <file>debian/watch</file> añadiendo <tt>debian uupdate</tt> al
  final de la URL del archivo.
  </footnote>.

  <p>Puedes liberar la nueva versión del paquete repitiendo lo expuesto
  en <ref id="completebuild">, <ref id="checkit"> y <ref id="upload">.

  <sect id="packagestyle">Actualizar el formato del paquete

  <p>Para actualizar un paquete no es necesario actualizar el formato
  del paquete. Aún asi, puedes aprovechar toda las funcionalidades de
  <package>debhelper</package> y del formato <tt>3.0</tt>
  haciendo lo siguiente
  <footnote>Si quien esponsoriza tu paquete u otros desarrolladores
  hacen objecciones a la actulización del formato del paquete, no vale
  la pena empeñarse en argumentar a favor. Hay otras cosas más importantes
  que atender.
  </footnote>:
  <list>
  <item>Si necesitas de nuevo algunos de los archivos de plantilla
  eliminados, puedes regenerarlos ejecutando otra vez <prgn>dh_make</prgn>
  con la opción <tt>--addmissing</tt> en el directorio de las fuentes.
  A continuación modifícalos correctamente.

  <item>Si el paquete no está actualizado para utilizar la nueva sintaxis de
  <package>debhelper</package> V7 en el archivo  <file>debian/rules</file>,
  actualízalo para usar <prgn>dh</prgn>. También deberás actulizar
  <file>debian/control</file>.

  <item>Si vas ha actualizar el archivo <file>rules</file> construido
  por el mecanismo de inclusión <file>Makefile</file> del sistema de
  compilación Debian (<package>cdbs</package>) a la nueva sintaxis <prgn>dh</prgn>,
  lee <file>/usr/share/doc/cdbs/cdbs-doc.html</file> y aprende las
  variables de configuración <tt>DEB_*</tt>
  <footnote>En el paquete <package>cdbs</package> (versión 0.4.74),
  hay algunos comentarios negativos sobre el archivo <file>rules</file>
  construido por la orden <prgn>dh_make</prgn> al utilizar sistemas
  distintos a <package>cdbs</package>. No debes precuparte. Esto
  solo afecta a la versión <tt>lenny</tt>: entonces se generaban
  objectivos con una larga lista de órdenes <prgn>dh_*</prgn>.
  </footnote>.

  <item>Si estás trabajando con un paquete construido con el
  formato <tt>1.0</tt> sin el archivo <file><var>nombre_paquete</var>.diff.gz</file>,
  puedes actualizarlo a la nueva versión <tt>3.0 (native)</tt> añadiendo
  el archivo <file>debian/source/format</file> con la linea
  <tt>3.0 (native)</tt>. Copia los otros archivos del directorio
  <file>debian/*</file>.  
 
  <item>Si estás trabajando con un paquete construido con el
  formato <tt>1.0</tt> con el archivo <file><var>nombre_paquete</var>.diff.gz</file>,
  puedes actualizarlo a la nueva versión <tt>3.0 (native)</tt> añadiendo
  el archivo <file>debian/source/format</file> con la linea
  <tt>3.0 (native)</tt>. Copia los otros archivos del directorio
  <file>debian/*</file>. Importa el archivo <file>nombre_paquete.diff</file>
  generado por la orden <tt>filterdiff -z -x '*/debian/*' 
  <var>nombre_paquete</var>.diff.gz &gt; nombre_paquete.diff</tt>
  al sistema <prgn>quilt</prgn>
  <footnote>Puedes fragmentar el archivo <file>nombre_paquete.diff</file>
  en varios archivos de parches utilizando la orden <prgn>splitdiff</prgn>.
  </footnote>.

  <item>Si el paquete se ha construido con sistema de parches
  distinto a <prgn>quilt</prgn> como <package>dpatch</package>, 
  <package>dbs</package> o <package>cdbs</package> utilizando las
  opciones <tt>-p0</tt>, <tt>-p1</tt> o <tt>-p2</tt>, puedes
  convertirlo al formato <package>quilt</package> utilizando
  el guión <file>deb3</file> explicado en 
  <url id="http://bugs.debian.org/581186"> y disponible
  en <url id="http://bugs.debian.org/cgi-bin/bugreport.cgi?msg=5;filename=deb3;att=1;bug=581186">.

  <item>Si el paquete se ha construido con ejecutando la orden <prgn>dh</prgn>
  con la opción <tt>--with quilt</tt> o bien con <prgn>dh_quilt_patch</prgn>
  y <prgn>dh_quilt_unpatch</prgn>, elimina todo esto y utiliza
  el formato <tt>3.0 (native)</tt>.
  </list>

  <p>Repasa la sección <ref id="newupstream"> por si debes repetir
  algunos de los pasos indicados en ella.

  <sect id="reminders">Recordatorio para actualizar paquetes

  <p>Aqui tienes un listado de cosas a tener en cuenta al actualizar
  paquetes.
  <list>  
  <item>Conserva las entradas anteriores del archivo <file>changelog</file>
  (suena a obviedad, pero se han dado casos de ejecutar <tt>dch</tt>
  en lugar de <tt>dch -i</tt>).
  <item>Los cambios en la construcción del paquete Debian deben ser
  reconsiderados; elimina las modificaciones anteriores (sea lo que sea)
  y recuerda de añadir todo lo necesario, a no ser que haya una buena
  razón para no hacerlo.
  <item>Si se ha realizado alguna modificación en la compilación (te
  enterarás al inspeccionar los cambios en las fuentes originales)
  puede que sea necesario actualizar el archivo <file>debian/rules</file>
  y las dependencias de compilación en el archivo <file>debian/control</file>.

  <item>Debes comprobar si hay alguna comunicación de parches del
  paquete en el sistema de gestión de errores
  (puede darse el caso que algún usuario envie un parche
  ya construido y que te sea de utilidad) en
  <url name="BTS" id="http://www.debian.org/Bugs/">.

  <item>Comprueba el contenido del archivo <file>.changes</file>
  para asegurarte que envias el paquete a la distribución correcta,
  que los informes de errores que se cierran con la nueva versión del
  paquete están listados en el campo <tt>Closes</tt> del archivo,
  que el contenido de los campos <tt>Maintainer</tt> y <tt>Changed-By</tt> son correctos,
  que has firmado el archivo con tu clave GPG, etc.
  </list>

 </book>

</debiandoc>
