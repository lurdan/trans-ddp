<!doctype debiandoc system>
<!-- comentarios:
* URL's a package manual?
* por qué a veces usa tt y otras no para los programas ?
-->

<debiandoc>

 <book>

  <titlepag>

   <title>Guía del Nuevo Desarrollador de Debian</title>

   <author>
   Javier Fernández-Sanguino Peña <email/jfs@computer.org/
   </author>

   <version>version 0.95, 12 April 1999.</version>

   <copyright>
   <copyrightsummary>Copyright &copy; 1999 Javier Fernández-Sanguino Peña.</copyrightsummary>

   <p>This document may used under the terms of any fully DFSG compliant
   license, preferably GNU General Public License version 2+.

   <p>With permission of their authors, I have used and modified portions
   of these two documents:

   <p>Making a Debian Package (AKA the Debmake Manual), copyright &copy;
   1997 Jaldhar Vyas <email/jaldhar@debian.org/.

   <p>The New-Maintainer's Debian Packaging Howto, copyright &copy; 1997
   Will Lowe <email/lowe@debian.org/.
   </copyright>

  </titlepag>

  <toc sect>

  <chapt id="start">Empezando "de la Forma Correcta"

  <p>Este documento tratará de describir cómo se construye un paquete
  Debian GNU/Linux para el usuario normal de Debian (y futuros
  desarrolladores) en un lenguaje informal, y con multitud de
  ejemplos. Hay un antiguo dicho romano que dice,
  <em>¡Longum
  iter est per preaecepta, breve et efficax per exempla!</em> 
(¡Es un largo camino con las reglas, pero corto y eficiente con
ejemplos!)


  <p>Una de las cosas que hace a Debian una de las distribuciones más
  importantes del mercado es su sistema de paquetes. Aunque hay una
  gran cantidad de programas disponibles en formato de paquetes de
  Debian, algunas veces necesitará instalar programas que no estén
  así. Puede preguntarse cómo hará vd. sus propios paquetes y que
  quizás esta sea una tarea demasiada difícil. Bueno, si es vd. un
  novato en Linux, sí es duro, pero si eres todo un experto, no
  deberías estar leyendo esto ahora mismo. :-)
  Necesitas saber algo sobre programación en Unix, pero desde luego no
  tienes que ser un maestro.

  <sect id="needprogs">Programas que necesitas para el desarrollo

  <p>Antes de empezar nada, deberías asegurarte de instalar
  adecuadamente algunos paquetes con
  <manref name="dpkg" section="8"> (esto es, `dpkg -i paquete`, o a
  través de alguno de sus interfaces como dselect y apt).
  Este documento fue escrito mientras la 'hamm' 2.0 y 'slink' 2.1 eran
  las distribuciones estables oficiales de Debian, por ello los
  paquetes que se indicarán aquí son aquellos de 2.1.

  <p>Los siguientes paquetes vienen en una instalación estándar de
  Debian 2.1, así que probablemente ya los tenga. Aun así, debería
  comprobarlo con  `dpkg -s paquete`.

  <list>
  <item><em>binutils</em> - estos programas se usan para ensamlar y
  enlazar ficheros objetos - aquellos que componen los programas (vea
  `info binutils`)

  <item><em>cpp</em> - el preprocessador de C. (vea <manref name="cpp" section="1">)

  <item><em>cpio</em> - este es un programa archivador como tar o zip.
  (vea
  <manref name="cpio" section="1">)

  <item><em>dpkg-dev</em> - este paquete contiene las herramientas
  necesarias para desempaquetar, construir y enviar paquetes fuente de
  Debian. También contiene los manuales de empaquetamiento y de las
  tripas de dpkg (dpkg-internas, n. del t.).
  (vea <manref name="dpkg-source" section="1">)

  <item><em>file</em> - este útil programa puede determinar de qué
  tipo es un fichero.
  (vea <manref name="file" section="1">)

  <item><em>fileutils</em> - las utilidades esenciales de Linux, como
  ls, chmod, rm y otras.
  (vea `info --file /usr/info/fileutils.info.gz`)

  <item><em>gcc</em> - el compilador de C de  GNU. La mayor parte de
  los programas de Linux están escritos en C. Si su programa está
  escrito en algún otro lenguaje de programación como C++, Fortran o
  Pascal, debería instalar g++, g77, o gpc, respectivamente.
  (lea <manref name="gcc" section="1">,
  <manref name="g++" section="1">, <manref name="g77" section="1">,
  <manref name="gpc" section="1">)

  <item><em>libc6-dev</em> - las librerías y cabeceras de fichero de C
  que gcc necesita para enlazar y crear ficheros objeto. Aunque
  alugnos programas recomienda y/o usan libc5, le sugiero que utilize
  la nueva versión (libc6).
  (vea `info libc`)

  <item><em>make</em> - habitualmente la creación de un programa tiene
  varios pasos. En lugar de ejecutar los mismos comandos una y otra
  vez, puede utilizar este programa para automatizar el proceso,
  creando 'Makefiles'. Algunos programas también usan imake y xmkmf,
  programas para generar Makefiles de un conjunto de funcioens
  macro. Algunos programas más nuevos usan scripts de configuración y
  Makefiles con la ayuda de programas como autoconf y automake, así
  que puede necesitarlos también.
   (vea `info make`, <manref name="imake" section="1">,
  <manref name="xmkmf" section="1">, <manref name="autoconf" section="1">,
  <manref name="automake" section="1">)

  <item><em>patch</em> - esta utilidad es muy útil ya que permite
  coger el fichero que contiene un listado de diferencias (producido
  por el programa diff) y aplicarselas al fichero original,
  produciendo una versión "parcheada".
  (vea <manref name="patch" section="1">)

  <item><em>perl</em> - este es uno de los lenguajes interpretados
  para hacer scripts más usados en los sistemas un*x de hoy,
  comúnmente referido como la
  languages on today's un*x systems, often referred to as
 "Sierra Mecánica Suiza de Unix". (vea <manref name="perl" section="1">)
  </list>

  <p>De la sección 'devel' de la distribución posiblemente necesite
  instalar esto usted mismo:

  <list>
  <item><em>fakeroot</em> o <em>libtricks</em> - estos le permiten
  emular ser root (superusuario, n. del t.) lo cual es necesario para
  ciertas partes del proceso de construcción.
  (vea <manref name="fakeroot" section="1">)

  <item><em>lintian</em> - este paquete le indica muchos de los
  errores comunes después de construir un paquete, y explica los
  errores. Hace falta tener instalado diffstat también, una pequeña
  utilidad que crea histogramas a partir de la salida de diff.
  (vea <manref name="lintian" section="1">, <manref name="diffstat" section="1">,
  /usr/doc/lintian/lintian.html/index.html)
  </list>

  <p>Y de la sección 'utils' necesitará obtener estos paquetes:

  <list>
  <item><em>dh-make</em> y <em>debhelper</em> - dh-make es necesario
  para crear el esqueleto de nuestro paquete de ejemplo, y usará
  algunas de las herramientas de debhelper para crear paquetes. No son
  necesarios para la creación de paquetes, pero se recomienda 
  <strong>encarecidamente</strong> a nuevos desarrolladores.
  Hace que el proceso sea más fácil de empezar y controlar más tarde.
   (vea <manref name="dh_make" section="1">,
  <manref name="debhelper" section="1">, /usr/doc/debhelper/README)

  <item><em>devscripts</em> - este paquete contiene algunos scripts
  bonitos y útiles que pueden ser de ayuda a los desarrolladores, pero
  tampoco son necesarios para construir paquetes.
  (vea /usr/doc/devscripts/README.debian.gz)

  <item><em>debmake</em> - este paquete contiene algunos programas que
  funcionan de manera similar a dh-make, pero su uso específico 
  <strong>no</strong> está cubierto en este documento.
  Lea, si lo desea, <url name="el manual de Debmake" id="http://www.debian.org/~jaldhar/">.
  </list>

  <p>Por último, estos paquetes de <em>gran importancia</em> están en
  la sección 'doc' de la distribución:

  <list>
  <item><em>debian-policy</em> - incluye la estructura y contenidos
  del archivo, ciertas notas sobre diseño del SO, el Estandar de la
  Estructura del Sistema de Ficheros de Linux (Linux Filesystem
  Structure Standard, n. del t), y, lo más importante (para usted) es
  que describe los requisitos que debe satisfacer cada paquete para
  ser incluido en la distribución.
  (vea /usr/doc/debian-policy/policy.html/index.html)

  <item><em>developers-reference</em> - para todos los temas no
  específicamente relacionados con los detalles técnicos de cómo
  empaquetar, como la estructura del archivo, como renombrar,
  abandonar, coger paquetes, cómo hacer NMUs (Non-Maintainer Uploads,
  o envíos por personas distintos del desarrollador, n. del t.), como
  gestionar los bugs (errores, n. del t.) y cómo y cuando enviar etc.
<!-- traduczco upload por "enviar" pero no me gusta mucho - jfs -->
  (lea /usr/doc/developers-reference/developers-reference.html/index.html)

  <item><em>packaging-manual</em> - describe los aspectos técnicos de
  cómo crear paquetes binarios y fuentes en Debian.
  (lea /usr/doc/packaging-manual/packaging.html/index.html)
  </list>

  <p>También necesitará el paquete de criptografía 
  <manref name="pgp" section="1"> para <em>firmar</em> digitalmente su
  paquete. Esto es especialmente importante si quiere distribuir su
  paquete a otras personas (y hará precisamente esto cuando si su
  paquete se incluye en la distribución de Debian). Sin embargo, debido
  a las leyes de exportación de los EEUU, no puede simplemente obtenerlo
  de su servidor de FTP de Debian más cercano. Pero su servidor de FTP
  tendrá un fichero llamado README.non-us, que le indicará cómo obtener
  una copia de pgp (pista: ftp://nonus.debian.org/debian-non-US/).

  <p>Las breves descripciones dadas anteriormente sólo sirven para
  introducirle a lo que hace cada paquete. Antes de continuar, por
  favor lea la documentación de cada programa, al menos para su uso
  normal. Puede parecerle algo duro ahora, pero más adelante estará
  <em>muy</em> contento de haberla leido.


  <sect id="otherinfo">Más información

  <p>Usted puede construir dos tipos de paquetes, fuentes y
  binarios. Un paquete fuente contiene el código que puede compilar en
  un programa. Un paquete binario contiene sólo el programa
  terminado. ¡No mezcle los términos como fuentes de un programa y
  el paquete fuente de un programa! Por favor lea los otros manuales
  si necesita más detalles sobre terminología.

  <p>Debian usa el término 'desarrollador' para la persona que hace
  paquetes, 'autor' para la persona que hizo el programa, y
  'desarrollador fuente' ('upstream maintainer', n. del t.) para la
  persona que actualmenete mantiene el programa. Generalmente el autor
  y el desarrollador fuente son la misma persona - y algunas veces
  incluso el desarrollador es el mismo. Si hace vd. un programa, y
  quiere incluirlo en Debian, tiene total libertad para solicitar
  convertirse en desarrollador.

  <p>Después de construir su paquete (o mientras lo hace), deberá
  convertirse en un desarrollador oficial de Debian si desea que su
  programa entre en la próxima distribución (si el programa es útil,
  ¿por qué no?). Este proceso se explica en la Referencia del
  Desarrollador, por favor, leala.

  <chapt id="first">Primeros pasos

  <p>Mientras que la documentación en el <url name="Rincón del Desarrollador"
   id="http://www.debian.org/devel/"> no está tan clara sobre dónde y
   cómo debería empezar un desarrollador su trabajo, este documento
   explicara cada pequeño (y algunas veces incluso irrelevante)
   detalle, para ayudarle crear ese primer paquete, y ganar alguna
   experiencia en la construcción de nuevas versiones de éste y quizás
   otros paquetes más adelante.


  <sect id="choose">Elija su programa.

  <p>Porbablemente haya escogido ya el paquete que desea construir,
  pero aquí hay algunos punteros para los novatos:

  <list>
  <item>compruebe si el paquete ya está en la distribución. Si usa la
  distribución 'estable', quizás sea mejor que vaya a la 
  <url name="página de búsqueda de paquetes"
  id="http://www.debian.org/distrib/packages.html">.
  Si usa la distribución 'inestable' <strong>actual</strong>,
  compruebe esto con los comandos:
  <example>
  dpkg -s programa
  dpkg -l '*programa*'
  </example>

  <item>consulte la <url name="página WNPP"
  id="http://www.debian.org/doc/prospective-packages.html"> para ver
  si alguna otra persona está construyendo ese mismo programa. Si es
  así, contacte el desarrollador actual si creo que lo necesita mantener. Sino,
  intente buscar otro programa interesante que nadie mantenga.</item>


  <item>el programa <strong>debe</strong> tener una licencia, si es
  posible, libre en el sentido marcado por las
  <url name="Guías del Software Libre de Debian"
  id="http://www.debian.org/social_contract.html#guidelines">.
  Si no sigue una de estas reglas, aún puede incluirse en las
  secciones 'contrib' o 'non-free' de Debian. Si no está seguro sobre
  en qué lugar debería ir, pregunte en 
  <email/debian-legal@lists.debian.org/.
  </item>

  <item>el programa <strong>no</strong> debería ejecutarse con setuid
  root, o aún mejor: no debería estar 'setuid' ni 'setgid' a
  nada.</item>

  <item>el programa no debería ser un demonio, o algo que va en los
  directorios */sbin.</item>

  <item>el programa debería ser binarios ejecutables, no intente
  librerías aún.</item>

  <item>debería estar bien documentado, o al menos legible (para cualquiera)
  </item>

  <item>debería contactar el autor/es del programa para comprobar si
  están de acuerdo con que se empaquete. Esto es importante para
  consultar al autor/es sobre el programa en caso de que haya
  problemas específicos, así que no intente empaquetar programas que
  no estén mantenidos.</item>

  <item>y por último pero no menos importante, debería saber cómo
  funciona, y haberlo utilizado por algún tiempo.</item>
  </list>

  <p>Por supuesto, esta lista es para tomar medidas de seguridad, y
  con la intención de salvarle de usuarios enfurecidos is hace algo
  mal con algún demonio de ftp setuid... Pero cuando tenga más
  experiencia en empaquetar cosas, podrá hacer este tipo de paquetes,
  pero incluso los desarrolladores más experimentados preguntan en la
  lista de distribución de debian-devel cuando tienen dudas. Y la
  gente allí le ayudara gustosamente.


  <p>Para más ayuda sobre esto, lea la Referencia del Desarrollador

  <sect id="getsrc">Obtenga el programa, y pruebelo.

  <p>La primera cosa a hacer es encontrar y descargar el paquete
  original. Supongo que ya tiene el código fuente que obtuvo de la
  página del autor. Las fuentes de Linux generalmente vienen en el
  formato tar/gzip, con extensión <tt>.tar.gz</tt> o <tt>.tgz</tt>, y generalmente
  contienen un subdirectorio llamado programa-versión con todas las
  fuentes en él. Si su programa viene en otro tipo de archivo (como
  por ejemplo, el fichero termina con <tt>.Z</tt> o <tt>.zip</tt>),
  descomprimal con las herramientas adecuadas, o pregunte en
  debian-mentors si no está seguro de cómo se puede desempaquetar
  correctamente (pista: pruebe `file archivo.extension`).


  <p>Como ejemplo, usaré el programa conocido como 'gentoo', un gestor
  de ficheros de X11 con GTK+.


  <p>Cree un subdirectorio bajo /usr/local/src que tenga el mismo
  nombre que su programa (/usr/local/src/gentoo en este caso). Y mueva
  a él el archivo que ha descargado, y descomprimalo de la siguiente
  forma: `tar -xzf gentoo-0.9.12.tar.gz`. Este proceso (algo largo) no
  dará ninguna salida (excepto si hay algún error, con lo que tendrá
  que bajarse de nuevo el archivo o comprobar que es un fichero
  tar/gzip), pero tendrá las fuentes desempaquetadas en un
  subdirectorio llamado 
  'gentoo-0.9.12' en /usr/local/src/gentoo.

  <p>Muevase a ese directorio y lea <strong>en profundidad</strong> la
  documentación que encuentre. Está generalmente en ficheros que se
  llaman README*, INSTALL*, *.lsm o *.html. Allí encontrará
  instrucciones de cómo compilar e instalar el programa (generalmente
  para el directorio /usr/local/bin).

  <p>El proceso varia de programas a programas, pero gran parte de los
  programas modernos vienen con un script 'configure' que configura
  las fuentes para su sistema y se asegura de que su sistema está en
  condiciones de compilarlo. Después de configurarlo (con
  `./configure`), los programas generalmente se compilan con `make`, y
  se instalarn en sus directorios de destino ejecutando `make
  install`.
  
  <p>Así que compile, instale y pruebe el programa, asegurese de que
  funciona bien y que no rompe nada más mientras está instalándose o
  ejecutándose.

  <sect id="naming">Cosas antes de  `dh_make'

  <p>Para construir correctamente el paquete, debería mover el
  directorio de fuentes a
   &lt;nombre_de_paquete&gt;-&lt;versión&gt;. Como puede ver, el
   programa de ejemplo no lo necesita, pero quizás su programa
   sí. También, ponga el nombre en minúsculas si no o está ya. Si
   consiste de una o más palabras, contraialas a una palabra o haga
   una abreviatura. Por ejemplo, el paquete del programa "el editor
   para X de Javi" se podría llamar javiedx o jle4x, o lo que decida,
   siempre y cuando no se exceda de unos límites razonables, como 15
   caracteres.


  <p>También compruebe la versión exacta del programa (¡no del
  paquete!). Si el programa no está numerado con versiones del estilo
  de X.Y.Z, pero con fecha de lanzamiento, es usted libre de utilizar
  la fecha (si la fecha es el 19 de diciembre de 1998, utilize la
  abreviatura norteamericana 19981219) cmomo número de versión. Aún
  así habrá algunos que ni siquiera estén numerados, en cualqueir caso
  debe contactar con el 'desarrollador fuente' para ver si tienen
  algún otro sistema de seguimiento de revisiones.


  <p>Antes de empezar con el proceso dh_make, debería poner en su
  variable de entorno $EMAIL si dirección de correo, y lo hara
  haciendo algo como esto en su shell (esto es para basj).

  <p><example>
  export EMAIL=usuario.login@algun_lugar.net
  </example>

  <sect id="dh_make">Ejecutando `dh_make'
<!-- seguir traduccion AQUI -->
  <p>Asegúrese que está en el directorio donde están las fuentes del
  programa, y ejecute lo siguiente:

  <p><example>
  dh_make
  </example>
 
  <p>Saldrá alguna información. Le preguntará qué tipo de paquete
  desea crear. Gentoo es un solo paquete de binarios - crea sólo un
  binario, y, por tanto, sólo un fichero .deb - así que
  seleccionaremos la primera opción, con la tecla 's'. Como nuevo
  desarrollador, está desaconsejado crear paquetes multibinarios, o
  librerías, como se explicó antes.

  <p>Tenga en cuenta que debería ejecutar dh_make <strong>sólo una
  vez</strong>, y que no se comportará correctamente si lo hace otra
  vez en el mismo directorio, ya "debianizado". Esto también significa
  que usuará un método distinto para crear una nueva revisión o una
  nueva versión de su paquete en el futuro. Lea más sobre esto más
  adelante en el texto.

  <chapt id="modify">Modificando las fuentes.

  <p>Cuando dh_make termina, y haya ajustado el Makefile del propio
  programa, podrá hacer  `cd ..` para ver el nuevo directorio que ha
  creado, que se llama 'gentoo-0.9.12.orig'. Contiene el código fuente
  original que de ahora en adelante permanecerá intacto. El directorio
  'gentoo-0.9.12' todavía existe, es allí donde hará las
  modificaciones.

  <p>Normalmente, los programas se instalan a sí mismos en el
  subdirectorio /usr/local. Pero los paquetes Debian no pueden
  utilizar este directorio ya que está reservado para el uso privado
  del administrador (o del usuario). Esto significa que tiene que
  mirar el Makefile the gentoo. Este es el script <manref name="make"
  section="1"> que usará para automatizar la creación de éste
  programa. Para más detalles sobre Makefiles, mire en <ref
  id="rules">.

  <p>Tenga en cuenta que no hay espacio aquí para entrar en
  <em>todos</em> los detalles respecto a los arreglos, pero aquí hay
  algunos de los problemas frecuentes  a los que se enfrenta uno.

  <sect id="destdir">El problema de  $DESTDIR 

  <p><example>
  # ¿Dónde poner el binario en  'make install'?
  BIN     = /usr/local/bin
  # ¿Dónde poner los iconos en 'make install'? Nota: si cambia esto,
  # gentoo no encontrará los iconos cuando arranque. Deberá cambiar 
  # el path de iconos de gentoo (en la ventana de configuración:
  # "Paths") para que funcione.
  ICONS   = /usr/local/lib/gentoo/
  </example>

  <p>Antes de esto debería insertar dos nuevas líneas que dicen:

  <p><example>
  # Editado para Debian GNU/Linux.
  DESTDIR =
  </example>
  porque el proceso de construcción lo necesita (explicado más tarde).

  <p>Después el Makefile menciona la localización del binario
  final. Sólo necesita cambiar esto:
  <p><example>
  # ¿Dónde poner el binario en  'make install'?
  BIN     = $(DESTDIR)/usr/X11R6/bin
  </example>

  <p>¿Pero por qué en este directorio y no en otro? Porque Debian
  tiene unas reglas definidias de dónde deberían estar instalados los
  programas. Están especificas en el Linux Filesystem Structure
  Standard (/usr/doc/debian-policy/fsstnd) [Estándar de Linux de la
  Estructura de los Sistemas de Ficheros, n. del t.]. Así, deberíamos
  instalar el binario en /usr/X11R6/bin en lugar de /usr/local/bin, y
  la página de manual (no existe aquí, pero casi todos los programas
  tienen una así que haremos una después) en /usr/man/man1 en lugar de
  /usr/local/man/man1.


  <p>Después de esto tenemos un situación un poco más complicada. Si
  cambia la línea a:

  <p><example>
  ICONS   = $(DESTDIR)/usr/share/gentoo/
  </example>
  que estará dentro de la política de Debian, deberá editar algunos
  ficheros de fuentes reales de C. Pero, ¿dónde buscar? Puede probar a
  encontrarlos usando:
  <p><example>
  grep -n usr/local/lib *.[ch]
  </example>
  (en cada subdirectorio que contiene ficheros .c y .h). Grep dirá el
  nombre del fichero y la línea, cuando encuentra una
  ocurrencia. Ahora edite esos ficheros y cambie en esas líneas
  usr/local/lib con usr/share - y ya está. Simplemetne remplaze
  usr/local/lib por su localización, y sea muy cuidadoso para no
  mezclar el resto del código, si no sabe mucho sobre cómo programas
  en C. :-)

  <p>Después de esto debería encontrar el objetivo 'install' (busque
  una línea que comienze por 'install:') y renombre todas las
  referencias a directorios distintos de los definidos al comienzo del
  Makefil. En este caso, hace esto y limpia las cosas un poco,
  anteriormente el objetivo install decía:

  <p><example>
  # ----------------------------------------- Installation

  # ¡Debe ser superusuario para hacer esto!
  install:        gentoo-target
                  install ./gentoo $(BIN)
                  install icons $(ICONS)
                  install gentoorc-example $(HOME)/.gentoorc
  </example>

  <p>Después de su cambio dice:
  <example>
  # ----------------------------------------- Installation

  # You're going to have to be root to do this!
  install:        gentoo-target
                  install -d $(BIN) $(ICONS) $(DESTDIR)/etc
                  install ./gentoo $(BIN)
                  install -m644 icons/* $(ICONS)
                  install -m644 gentoorc-example $(DESTDIR)/etc/gentoorc
                  install -d $(DESTDIR)/usr/doc/gentoo/html
                  cp -a docs/* $(DESTDIR)/usr/doc/gentoo/html
  </example>

  <p>Un lector atento se dará cuenta de que he cambiado 'gentoo' a
  'gentoo-target' en la línea 'install:'. Esto es para arreglar un
  fallo en el programa. :-)

  <p>Siempre que haga cambios que no estén específicamente
  relacionados con el paquete Debian, asegurese de que los envía al
  desarrollador original para que éste los incluya en la próxima
  revisión del programa.

  <sect id="nolibs">Librerias diferentes.

  <p>Hay un problema comúna: las librerías son generalmente diferentes
  de plataforma a plataform. Por ejemplo, un Makefile puede contener
  una referencia a una librería que no exista en Debian. En este caso,
  se necesita cambiarla a una librería que sí existe en Debian y sirve
  para el mismo propósito. La mejor forma es comentar (<em>¡no
  borrar!</em>) esas líneas porque puede que haber otras personas que
  intenten compilar en diferentes plataformas y éstas les pueden dar
  algunas pistas de dónde puede estar el problema.

  <p>Así, si hay una línea en el Makefil de su programa que dice algo
  como lo siguiente (y su programa no compila):

  <p><example>
  LIBS = -lcurses -lsomething -lsomethingelse
  </example>

  <p>Entonces cambiela a lo siguiente, y funcionará casi con
  seguridad:
  <p><example>
  LIBS = -lncurses -lsomething -lsomethingelse
  #LIBS = -lcurses -lsomething -lsomethingelse
  </example>

  <chapt id="crules">Los ficheros debian/control y debian/rules.

  <p>Ahora hay un nuevo subdirectorio en gentoo-0.9.12, que se llama
  'debian'. Hay bastantes ficheros en este directorio. Empezaremos
  editando éstos para adaptar el comportamiento del paquete. La parte
  más importante es modificar los ficheros 'control' y 'rules'
  (reglas, n. del t.).

  <sect id="control">El fichero `control'.

  <p>Este fichero contiene varios valores que dpkg y dselect usarán
  para gestionar el paquete. Aquí está el fichero de control que
  dh_make crea para nosotros.

  <p><example>1 Source: gentoo
  2 Section: unknown
  3 Priority: optional
  4 Maintainer: Josip Rodin &lt;jrodin@jagor.srce.hr&gt;
  5 Standards-Version: 2.4.0.0
  6
  7 Package: gentoo
  8 Architecture: any
  9 Depends: ${shlibs:Depends}
  10 Description: Missing
  11 Missing
  </example>
  (He añadido los números de línea.)

  <p>Las lineas 1 a 5 son la información de contol del paquete
  fuente. La línea 1 es el nombre del paquete fuente.

  <p>La línea  2 es la sección de la distribución en la que va este
  paquete. Como puede haber observado, Debian está divido en
  secciones: main (principal, n. del t.) (el software libre), non-free
  (el software que no es libre) y contrib (el software libre que
  depende del software no libre). Por debajo de éstas, hay
  subsecciones lógicas que describen brevemente qué paquetes
  tienen. Así tenemos 'admin' para programas que son sólo para los
  administradores, 'base' para las herramientas básicas, 'devel' para
  las herramientas de los programadores, 'doc' para documentación,
  'libs' para librerías, 'mail' para lectores y demonios de correo,
  'net' para aplicaciones de red y demonios, 'x11' para programas
  específicos de X11 y muchas otras.

  <p>Lo cambiaremos, pues, a x11.

  <p>La línea 3 describe cómo de importante es para el usuario la
  instalación de éste paquete. La sección y prioridad son actualmente
  sólo usadas por dselect cuando ordena paquetes y selecciona valores
  por defecto, y pueden ser modificadas (y generalmente lo serán) por
  nuestros administradores del FTP. Lea el manual de Política de
  Debian para una guía de qué valor deben tener estos campos.
  
  <p>Como es un paquete de prioridad normal, lo dejaremos con prioridad
  'optional' (opccional, n. del t.).

  <p>La línea 4 es el nombre y correo electrónico del desarrollador.

  <p>La línea 5 es la versión de los estándares de la Política de
  Debian que sigue este paquete (dos versiones importantes del paquete
  debian-policy instalado).

  <p>La línea 7 es el nombre del paquete binario.

  <p>La línea 8 describe la arquitectura de CPU para la que se compiló
  el paquete. Podemos dejar ésta como 'any' (cualquiera, n. del. t),
  ya que <manref name="dpkg-gencontrol" section="1"> lo rellenará con
  el valor apropiado cuando se compile este paquete.

  <p>La línea  9 muestra una de las más poderosas posibilidades del
  sistema de paquetes de Debian. Los paquetes se pueden relacionar
  unos con otros de diversas formas. Aprte de 'Depends:' (depende de,
  n. del t.) otros campos de relación son 'Recommends:' (recomienda,
  n. del t.), 'Suggests:' (sugiere, n. del t.), 'Pre-depends:'
  (predepende de, n. del t.), 'Conflicts:' (entra en conflicto con,
  n. del t.), 'Provides:' (provee, n. del t.), 'Replaces:' (reemplaza
  a, n. del t.). Ésto es lo que significan:


  <p><list>
  <item>Depends:
  <p><manref name="dpkg" section="8"> y <manref name="dselect"
  section="8"> no se instalará el programa a menos que los paquetes de
  los que depende estén instalados. Use esto si su programa no
  funcionará de ninguna forma a menos que esté disponible un paquete
  determinado.</item>

  <item>Recommends:
  <p>Dselect no le permitirá instalar el paquete a menos que los
  paquetes que recomienda estén instalados. Dpkg, sin embargo, sí le
  dejará. Use esto para paquetes que no son estrictamente necesarios
  pero generalmente son usados con su programa.</item>

  <item>Suggests:
  <p>Cuando un usuario instale el programa, dselect le sugerirá
  instalar cualquier paquete que éste sugiera. Dpkg no hace caso a
  esto. Utilize esto para paquetes que funcionarán bien con su
  programa pero no son necesarios en absoluto.</item>

  <item>Pre-Depends:
  <p>Esto es más fuerte que 'Depends'. Dpkg y dselect no instalarán el
  paquete a menos que el paquete del que pre-dependa esté instalado
  <em>y correctamente configurado</em>. Utilize esto
  <strong>muy</strong> poco y sólo después de haberlo discutido en la
  lista de distribución de debian-devel. En resumidas cuentas: no lo
  utilize en absoluto. :-> </item>


  <item>Conflicts:
  <p>Dpkg y dselect no instalarán su programa hasta que todos los
  paquetes con los que entra en conflicto hayan sido eliminados.
  </item>


  <item>Provides:
  <p>Para algunos tipos determinados de paquetes dónde hay múltiples
  alternativas se han definido nombres virtuales. Puede obtener la
  lista completa en el fichero
  /usr/doc/debian-policy/virtual-package-names-list.text.gz.
  Use esto si su pograma provee las funciones de un paquete virtual
  existente.</item>

  <item>Replaces:
  <p>Use esto si su programa reemplaza ficheros de otro paquete, o
  reemplaza totalmente otro paquete (generalmente se usa conjuntamente
  con 'Conflicts':). Dpkg y dselect eliminarán los ficheros de los
  paquetes indicados antes de instalar el suyo.</item>
  </list>

  <p>Todos estos campos tienen una sintaxis uniforme. Tienen una lista
  de nombres de paquetes separados por comas. Estos nombres de
  paquetes también puede ser listas de paquetes alternativos,
  separados por los símbolos de barra vertical <tt>|</tt> (símbolos
  tubería). Los campos pueden restringir su aplicabilidad a versiones
  determinadas de cada paquete nombrado. Esto se hace entre paréntesis
  para cada nombre de paquete individual; los paréntesis deberían
  contener una relación de la siguiente lista seguida por un número de
  versión. Las relaciones permitidas son <tt>&lt;&lt;</tt>,
  <tt>&lt;=</tt>, <tt>=</tt>, <tt>&gt;=</tt> y <tt>&gt;&gt;</tt>
  estrictamente para anterior, anterior o igual, exáctamente igual,
  posterior o igual o estríctamente posterior, respectivamente.

  
  <p>La última funcionalidad que quiero enseñarle es
  $(shlibs:Depends). Ésta se sustituirá automáticamente por <manref
  name="dh_shlibdeps" section="1">  (ver más adelante) por los nombres
  de cualquier librería compartida, como libc6 o xlib6g, que use su
  programa, así que no necesita especificar esto vd. mismo. Habiendo
  dicho todo esto, puede dejar la línea 9 exáctamente como está ahora.


  <p>La línea 10 es donde va la lista de sugereencias. Aquí sólo
  es 'menu', porque gentoo debería estar en los menús del gestor de
  ventanas X11. Esto se controla también por el fichero
  debian/menu. Lea <manref name="menufile"
  section="5">, y <manref name="update-menus" section="1">.

  <p>La línea 11 es una descripción corta. La mayor parte de los
  monitores de la gente son de 80 columnas de ancho, así que no
  debería tener más de 50 caracteres. Cambiaré esto a 
   "A fully GUI configurable GTK+ file manager" ("La GUI a un gestor de
   ficheros GTL+ completamentae configurable").

  <p>La línea 12 es donde va la descripción larga del paquete. Debería
  ser al menos un párrafo que da más detalles del paquete. La Columna
  1 de cada línea debería estar vacía. No puede haber líneas en
  blanco, pero puede poner un . (punto) en una columna para
  simularlo. También debe haber no más de una línea en blanco después
  de la descrición completa.


  <p>Aquí está el fichero de control actualizado:

  <p><example>
  1  Source: gentoo
  2  Section: x11
  3  Priority: optional
  4  Maintainer: Josip Rodin &lt;jrodin@jagor.srce.hr&gt;
  5  Standards-Version: 2.5.0
  6
  7  Package: gentoo
  8  Architecture: any
  9  Depends: ${shlibs:Depends}
  10 Suggests: menu (>= 1.5)
  11 Description: A fully GUI configurable GTK+ file manager
  12 gentoo is a file manager for Linux written from scratch in pure C. It
  13 uses the GTK+ toolkit for all of its interface needs. gentoo provides
  14 100% GUI configurability; no need to edit config files by hand and re-
  15 start the program. gentoo supports identifying the type of various
  16 files (using extension, regular expressions, or the 'file' command),
  17 and can display files of different types with different colors and icons.
  18 .
  19 gentoo borrows some of its look and feel from the classic Amiga file
  20 manager "Directory OPUS" (written by Jonathan Potter).
  </example>

  <sect id="rules">el fichero `rules'.

  <p>Ahora volvemos al directorio 'debian' para mirar las reglas que 
  <manref name="dpkg-buildpackage" section="1"> utilizará para crear
  el paquete. Este fichero es en realidad otro Makefile, ya que es
  ejecutado con 'make -f', pero diferente al que viene en las fuentes
  originales.

  <p>Cada fichero 'rules' (de reglas, n. del t.), como muchos otros
  Makefiles, consisten de varias reglas sobre cómo compilar las
  fuentes. Las reglas consisten en objetivos: ficheros o nombres de
  accioens que se deben llevar a cabo (por ejemplo, 'build:' o
  'install:'). Las reglas que quiere ejecutar deberían llamarse como
  los argumentos de comandos (por ejemplo, 'rules build' o 'rules
  install'). Después del nombre del objetivo, puede nombrar las
  dependencias, programas o ficheros de los que la regla
  depende. Después de esto hay un cualquier número de instrucciones
  (¡que empiezan con &lt;tab&gt;!), hasta que se llega a una línea en
  blanco, ahí empieza otra regla. Los comentarios empiezan con
  almohadillas ('#'), y terminan con el fin de la línea. Puede llamar
  a las reglas desde otra regla o desde la línea de órdenes (esto es
  `debian/rules clean`).

  <p>Probablemente ya se haya perdido, pero todo quedará más claro
  después de ver un fichero 'rules' que dh_make pone por
  defecto. Debería también leer la entrada de 'make' en info para más
  información.



  <p><example>
  1  #!/usr/bin/make -f
  2  # Made with the aid of dh_make, by Craig Small
  3  # Sample debian/rules that uses debhelper. GNU copyright 1997 by Joey Hess.
  4  # Some lines taken from debmake, by Christoph Lameter.
  5
  6  # Uncomment this to turn on verbose mode.
  7  #export DH_VERBOSE=1
  8
  9  build: build-stamp
  10 build-stamp:
  11	dh_testdir
  12
  13	
  14	# Add here commands to compile the package.
  15	$(MAKE)
  16
  17	touch build-stamp
  18
  19 clean:
  20	dh_testdir
  21	dh_testroot
  22	rm -f build-stamp install-stamp
  23
  24	# Add here commands to clean up after the build process.
  25	-$(MAKE) clean
  26
  27	dh_clean
  28
  29 install: install-stamp
  30 install-stamp: build-stamp
  31	dh_testdir
  32	dh_testroot
  33	dh_clean -k
  34	dh_installdirs
  35
  36	# Add here commands to install the package into debian/tmp.
  37	$(MAKE) install DESTDIR=`pwd`/debian/tmp
  38
  39	touch install-stamp
  40
  41 # Build architecture-independent files here.
  42 binary-indep: build install
  43 # We have nothing to do by default.
  44
  45 # Build architecture-dependent files here.
  46 binary-arch: build install
  47 #	dh_testversion
  48	dh_testdir
  49	dh_testroot
  50	dh_installdocs
  51	dh_installexamples
  52	dh_installmenu
  53 #	dh_installemacsen
  54 #	dh_installinit
  55	dh_installcron
  56	dh_installmanpages
  57 #	dh_undocumented
  58	dh_installchangelogs
  59	dh_strip
  60	dh_compress
  61	dh_fixperms
  62	dh_suidregister
  63	dh_installdeb
  64	dh_shlibdeps
  65	dh_gencontrol
  66 #	dh_makeshlibs
  67	dh_md5sums
  68	dh_builddeb
  69
  70 source diff:
  71	@echo >&2 'source and diff are obsolete - use dpkg-source -b'; false
  72
  73 binary: binary-indep binary-arch
  74 .PHONY: build clean binary-indep binary-arch binary
  </example>

  <p>(N. del T.: se traduce el fichero de reglas, dh_make sólo lo
  ofrece en inglés)

  <p><example>
  1  #!/usr/bin/make -f
  2  # Creado con la ayuda de dh_make, por Craig Small 
  3  # Fichero de ejemplo debian/rules que usa debhelper. Copyright GNU 1997 por Joey Hess.
  4  # Algunas líneas son de debmake, por Christoph Lameter.
  5
  6  # Quitele el comentario para activar el modo verboso
  7  #export DH_VERBOSE=1
  8
  9  build: build-stamp
  10 build-stamp:
  11	dh_testdir
  12
  13	
  14	# Añada aquí los comandos para compilar el paquete.
  15	$(MAKE)
  16
  17	touch build-stamp
  18
  19 clean:
  20	dh_testdir
  21	dh_testroot
  22	rm -f build-stamp install-stamp
  23
  24	# Añada aquí los comandos para limpiar después del proceso de creación.
  25	-$(MAKE) clean
  26
  27	dh_clean
  28
  29 install: install-stamp
  30 install-stamp: build-stamp
  31	dh_testdir
  32	dh_testroot
  33	dh_clean -k
  34	dh_installdirs
  35
  36	# Añada aquí los comandos para instalar el paquete en debian/tmp.
  37	$(MAKE) install DESTDIR=`pwd`/debian/tmp
  38
  39	touch install-stamp
  40
  41 # Construir los ficheros independientes de arquitectura aquí
  42 binary-indep: build install
  43 # Por defecto no se hace nada.
  44
  45 # Construir los ficheros dependientes de arquitectura aquí.
  46 binary-arch: build install
  47 #	dh_testversion
  48	dh_testdir
  49	dh_testroot
  50	dh_installdocs
  51	dh_installexamples
  52	dh_installmenu
  53 #	dh_installemacsen
  54 #	dh_installinit
  55	dh_installcron
  56	dh_installmanpages
  57 #	dh_undocumented
  58	dh_installchangelogs
  59	dh_strip
  60	dh_compress
  61	dh_fixperms
  62	dh_suidregister
  63	dh_installdeb
  64	dh_shlibdeps
  65	dh_gencontrol
  66 #	dh_makeshlibs
  67	dh_md5sums
  68	dh_builddeb
  69
  70 source diff:
  71	@echo >&2 'source y diff están obsoletos - use dpkg-source -b'; false
  72
  73 binary: binary-indep binary-arch
  74 .PHONY: build clean binary-indep binary-arch binary
  </example>


  <p>Probablemente esté familiarizado con líneas como la 1 de scripts
  hechos en shell o perl. Esto significa que el fichero debe
  ejecutarse con make. Las líneas vacías se ignoran. Las líneas que
  comienzan con '#' (almohadilla) se tratan como comentarios y pueden
  también ignorarse.
  
  <p>Las líneas 9 a la 17 describen la regla de construcción (en inglés: build,
  n. del t.) y su "hijo" 'build-stamp' que ejecuta el Makefile del
  propio programa para compilarlo.

  <p>Las cosas rara vez funcionan perfectamente la primera vez, así
  que se especifica la regla de limpieza (del inglés 'clean', n. del
  t.) en las líneas 18-26 que limpian cualquier resto innecesario
  dejado de intentos previos fallidos.


  <p>El proceso de instalación, la regla 'install', comienza en la
  línea 29. En la línea 34, todos los directorios necesarios se crean
  en el directorio 'debian'. La línea 37 llama al objetivo de
  instalación del Makefile de gentoo - e instala en el directorio
  debian/tmp - es por esto que específicamos como raíz del directorio
  de instalación $(DESTDIR) en el Makefile de gentoo.

  <p>Como sugiere el comentario, la regla 'binary-indep' en las líneas
  41-43 se usa para construir paquetes independientes de arquitectura,
  pero aquí no hay nada.

  <p>Lo siguiente es la regla 'binary-arch', en las líneas 46 a 68, en
  la que ejecutamos varias utilidades diversas del paquete debhelper
  que nos permiten hacer operaciones variads en nuestro paquete para
  que cumpla la política de Debian.
  
  <p>Los nombres comienza con dh_ y a continuación se indica lo que
  realmente hace cada pequeña utilidad:


  <list>
  <item><manref name="dh_testdir" section="1"> comprueba que estás en
  el directorio correcto (/usr/local/gentoo/gentoo-0.9.12/),
  <item><manref name="dh_testroot" section="1"> comprueba que tienes
  permisos de superusuario (root, n. del t.),
  <item><manref name="dh_installdirs" section="1"> crea los
  directorios que se mencionan en el fichero 'dirs' [no existe aquí],
  <item><manref name="dh_installdocs" section="1"> copia la
  documentación al directorio debian/tmp/usr/doc/gentoo,
  <item><manref name="dh_installmenu" section="1"> copia el fichero
  'menu' a
  debian/tmp/usr/lib/menu/gentoo,
  <item><manref name="dh_installmanpages" section="1"> copia las
  páginas de manual y las enlaza correctamente,
  <item><manref name="dh_installchangelogs" section="1"> copia los
  ficheros 'changelogs' (registros de cambios, n. del t.) en el directorio
  debian/tmp/usr/doc/gentoo,
  <item><manref name="dh_installinit" section="1"> copia los scripts init.d
  [aquí no tenemos ninguno],
  <item><manref name="dh_installcron" section="1"> copia los  scripts
  de crontab a
  debian/tmp/etc/cron.* [aquí no hay ninguno],
  <item><manref name="dh_installexamples" section="1"> copia los
  ficheros de ejemplos a 
  debian/tmp/usr/doc/gentoo/examples [aquí no hay ninguno],
  <item><manref name="dh_strip" section="1"> elimina las cabeceras de
  depuración de los ficheros ejecutables para hacerlos más pequeños,
  <item><manref name="dh_compress" section="1"> comprime con 'gzip¡
  las páginas de manual y los ficheros de documentación que sean más
  grandes de 4 kb, 
  <item><manref name="dh_fixperms" section="1"> comprueba y arregla
  permisos no válidos en el directorio debian/tmp,
  <item><manref name="dh_suidregister" section="1"> adapta los
  ficheros para que se registren los ejecutables con 'setuid' con
  <manref name="suidregister" section="8"> [aquí no hay ninguno],
  <item><manref name="dh_installdeb" section="1"> copia los ficheros
  relativos al sistema de paquetes en el directorio debian/tmp,
  <item><manref name="dh_shlibdeps" section="1"> calcula las
  dependencias de los ejecutables,
  <item><manref name="dh_gencontrol" section="1"> genera e instala el
  fichero de control,
  <item><manref name="dh_makeshlibs" section="1"> genera el fichero de
  dependecias con librerías compartidas [aquí no existe],
  <item><manref name="dh_md5sums" section="1"> genera las sumas de
  chequeo MD5 , y finalmente,
  <item><manref name="dh_builddeb" section="1"> construye el paquete.
  </list>

  <p>Cada uno de estos scripts dh_* tiene su propia página de manual,
  leala para más información. Hay otros scripts con la misma
  nomenclatura (dh_*) que no se han mencionado aquí, pero puede
  necesitar, lea la documentación de debhelper.


  <p>Las líneas  70 a la 74 son sólo algunas necesidades sobre las que
  puede leer en el mual de make. Por ahora, no es importante
  conocerlas.

  <p>La parte importante sobre el fichero de reglas creado por dh_make
  es que sólo es una sugerencia. Funcionará para paquetes simples pero
  para los más complicados no se asuste y modifique, borre o añada a
  éste para ajustarse a sus necesidades. Esto se aplica de forma
  especial a las secciones binary-arch, donde debería comentar las
  líneas que llaman a funciones que no necsita, en este caso he
  comentado las líneas 47, 53, 54, 57 y 66 porque gentoo no las
  necesita. La única cosas que no debe cambiar son los nombre de las
  reglas, porque es necesario que se llamen de esta forma para que
  todas las herramientas que las usan utilizen estos mismos nombres,
  esto se obliga en nuestro manual de Empaquetamiento.

  
  <p>Por supuesto, se necesita hacer algunos ajustes aquí: en la línea
  58 añadiré 'FIXES' porque ese es nombre del fichero de cambios. Para
  cualquier otra opción por favor lea la página de manual del programa
  dh_* involucrado.

  <chapt id="dother">Otros ficheros en el directorio  debian/.

  <sect id="copyright">copyright

  <p>Este fichero contiene la información de copyright del paquete. Su
  formato no está obligado por la Política, pero sus contenidos sí
  (sección 6.5). Dh_make crea uno por defecto, que tiene este aspecto:


  <p><example>
  1  This package was debianized by Josip Rodin jrodin@jagor.srce.hr on
  2  Wed, 11 Nov 1998 21:02:14 +0100.
  3
  4  It was downloaded from &lt;fill in ftp site&gt;
  5
  6  Upstream Author(s): &lt;put author(s) name and email here&gt;
  7
  8  Copyright:
  9
  10 &lt;Must follow here&gt;
  </example>

  <p>(N. del T.: se traduce el fichero de copyright, dh_make sólo lo
  ofrece en inglés)


  <p><example>
  1  Éste paquete fue debianizado por Josip Rodin jrodin@jagor.srce.hr el
  2  Mie, 11 Nov 1998 21:02:14 +0100.
  3
  4  Se descargó de  &lt;rellenar el servidor de ftp&gt;
  5
  6  Autor/es Original/es: &lt;poner el nombre/s de el/los autor/es y
  7  dirección de correo electrónico aquí&gt;
  8  Copyright:
  9
  10 &lt;Debe venir aquí&gt;
  </example>


  <p>Las cosas importantes a añidar a este fichero son el lugar donde
  se obtuvo el paquete y la nota de copyright de éste (debe incluirla
  entera). Si el copyright es una de las licencias de software libre
  populares como GNU, BSD o la licencia Artística, puede sólamente
  referirse al fichero apropiado en /usr/doc/copyright, que existe en
  todo sistema Debian. Gentoo está licenciado bajo la Licencia Pública
  General GNU, así que cambiaremos el fichero a esto:

  <p><example>
  1  This package was debianized by Josip Rodin &lt;jrodin@jagor.srce.hr&gt; on
  2  Wed, 11 Nov 1998 21:02:14 +0100.
  3
  4  It was downloaded from: ftp://ftp.obsession.se/gentoo/
  5
  6  Upstream Author: Emil Brink &lt;emil@obsession.se&gt;
  7
  8  This software is copyright (c) 1998-99 by Emil Brink, Obsession
  9  Development.
  10
  11 You are free to distribute this software under the terms of
  12 the GNU General Public License.
  13 On Debian GNU/Linux systems, the complete text of the GNU General
  14 Public License can be found in /usr/doc/copyright/GPL file.
  </example>

  <sect id="readdeb">README.debian (LEEME.debian, n. del t.)

  <p>Cualquier detalle extra en discrepancias entre el programa
  original y su versión debianizada debería estar documentada
  aquí. Dh_make crea una por defecto, y éste es su aspecto:


  <example>
  gentoo for DEBIAN
  ----------------------

  Comments regarding the Package

  Josip Rodin &lt;jrodin@jagor.srce.hr&gt;, Wed, 11 Nov 1998 21:02:14 +0100
  </example>

  <p>Dado que no tenemos que poner nada aquí - está permitido
  borrarla. Por cierto, sí, puede renombrar el fichero a README.Debian
  :-) 

  <sect id="changelog">changelog

  <p>Este es un fichero necesario, tiene un formato especial descrito
  en el Manual de Empaquetamiento (sección 3.2.3). Este formato es
  usado por dpkg y otros programas para obtener el número de versión,
  revisión, distribución y uregncia de su paquete.

  <p>Para usted, es también importante, ya que es bueno tener
  documentados los cambios que haya hecho. También ayudará a la gente
  que se descarge su paquete para ver si hay algunos temas sin
  resolver con el paquete que deberían saber. Se salvará como 
 /usr/doc/gentoo/changelog.Debian.gz
  en el paquete binario.

  <p>Dh_make crea uno por defecto, y tiene este aspecto:

  <p><example>
  1  gentoo (0.9.12-1) unstable; urgency=low
  2
  3   * Initial Release.
  4
  5  -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt; Wed, 11 Nov 1998 21:02:14 +0100
  6
  7  Local variables:
  8  mode: debian-changelog
  9  add-log-mailing-address: "jrodin@jagor.srce.hr"
  10 End:
  </example>

  <p>La línea  1 es el nombre del paquete, versión, distribución, y
  urgencia. El nombre debe coincidir con el del paquete fuente, por
  ahora, la distribución debería ser 'unstable' (inestable, n. del t.)
  o 'experimental', y la urgencia no debería cambiarse a nada distinto
  a 'low' (baja, n. del t.). :->
  
  <p>Las líneas 3 a 5 son una entrada de registro, donde documenta los
  cambios hechos en esta revisión del paquete (nos los cambios en las
  fuentes hechas por los autores originales - hay un fichero especial
  para este propósito, creado por los autores, y que se instala en
  /usr/doc/gentoo/changelog.gz).
  Las nuevas líneas deben insertarse justo después de la primera línea
  que empieza con un asterisco ('*'). Puede hacer esto con dch, emacs
  (las líneas 7 a 10 son información de modo para el editor Emacs), o
  cualquier editor de texto que desee. Acabará con algo así:

  <p><example>
  1  gentoo (0.9.12-1) unstable; urgency=low
  2
  3   * Initial Release.
  4   * This is my first Debian package.
  5
  6  -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt; Wed, 11 Nov 1998 21:02:14 +0100
  7
  8  Local variables:
  9  mode: debian-changelog
  10  add-log-mailing-address: "jrodin@jagor.srce.hr"
  11 End:
  </example>

  <p>Cuando distribuya una nueva versión, debe incrementar el número
  de versión del paquete. Puede hacer esto con `dch -v
  &lt;versión&gt;-&lt;revisión&gt;` y después insertar los comentarios
  con su editor preferido. Pisa: ¿cómo puede obtener rápidamente la
  fecha en el formato requerido? Utilize el comando `822-date` o
  `date -R`.


  <p>Se añade información sobre la nueva versión al principio del
  fichero 'changelog'. Tendrá este aspecto después:


  <p><example>
  1  gentoo (0.9.12-2) unstable; urgency=low
  2
  3   * Comments about the second revision
  4
  5  -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt; Wed, 11 Nov 1998 22:15:39 +0100
  6
  7  gentoo (0.9.12-1) unstable; urgency=low
  8
  9   * Initial Release.
  10  * This is my first Debian package.
  11
  12 -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt; Wed, 11 Nov 1998 21:02:14 +0100
  13
  14 Local variables:
  15 mode: debian-changelog
  16  add-log-mailing-address: "jrodin@jagor.srce.hr"
  17 End:
  </example>

  <sect id="conffiles">conffiles

  <p>Una de las cosas más molestas de los programas es  cuando 
  pasas mucho tiempo y esfuerzo adaptando un programa y una
  actualización destroza todos tus cambios. Debian arregla este
  problema marcando los ficheros de configuración de forma que cuando
  actualizas un paquete no se le pregunta si desea mantener la nueva
  configuración o no. Lo consigue poniendo la ruta completa a cada
  fichero de configuración (se encuentran generalmente en /etc) una
  por línea, en un fichero llamado 'conffiles'.


  <p>Gentoo tiene un fichero de configuración, /etc/gentoorc, y
  meteremos éste en el fichero 'conffiles'. No es necesario tener este
  último  fichero si su programa no tiene ningún fichero de configuración.

  <sect id="dirs">dirs

  <p>Este fichero especifíca los directorios que se necesitan pero que
  no crea un proceso de instalación normal (make install).

  Por defecto, tiene éste aspecto:
  <p><example>
  1 usr/bin
  2 usr/sbin
  </example>

  <p>Observe que la barra precedente no está incluida. Normalmente lo
  cambiaríamos para gentools a algo así:
  <p><example>
  1 usr/X11R6/bin
  2 usr/X11R6/man/man1
  </example>

  pero estos directorios ya se crean en el Makefile, así que no
  necesitaremos este fichero y lo podremos borrar.

  <sect id="maintscripts">postinst, preinst, postrm, prerm

  <p>Estos ficheros se llaman scripts de gestión, y debería intentar
  evitarlos si puede porque son demasiados complejos. Para más
  información lea el Manual de Empaquetamiento.

  <sect id="manpage">manpage.1.ex

  <p>Los ficheros que terminan en *.ex son ejemplos de cómo añadir ese
  tipo de soporte en el paquete. Si usa uno de ellos, editelo y
  elimine la extensión .ex.


  <p>Su programa debería tener una página de manual. Si no la tiene,
  éste es un esqueleto que puede rellenar. Lea las páginas de manual
  para <manref name="man" section="7"> para una breve descripción de
  cómo crear una página de manual. Asegúrese de renombrar este fichero
  al nombre del programa y modificar la extensión para indicar la
  sección a la que debería ir. Aquí hay una corta lista:


  <p><example>
  Section |     Description        |     Notes
     1     Comandos de Usuario       Programas ejecutables o scripts.
     2     Llamadas al Sistema       Funciones dadas por el kernel.
     3     Llamadas a Librerías      Funciones dadas por las librerías del sistema.
     4     Ficheros Especiales      Generalmente se encuentra en /dev
     5     Formatos de Fichero      Por ejemplo, el formato del /etc/passwd
     6     Juegos                   U otros programas frívolos.
     7     Paquetes de Macros       Como las macros de man.
     8     Administración del Sist. Programas que sólo ejecuta el superusuario.
     9     Routinas del Kernel      Llamadas al sistema no estándar.
  </example>
  
  <p>Así que la página de manual de gentoo debería llamarse gentoo.1,
  o gentoo.1x porque es un programa de X11. Cómo no había página de
  manual en las fuentes originales la escribí del ejemplo.

  <sect id="menu">menu.ex

  <p>Los usuarios de X Windows tendrán un gestor de ventanas con menus
  que pueden adaptarse para lanzar programas. Si tienen instalado el
  paquete de menu de Debian, se creará un conjunto de menus para cada
  programa del sistema para ellos. No se exige en la política de
  Debian, pero los usuarios seguramente lo apreciarán. Podemos añadir
  a Gentoo a los menus editando este fichero. Aquí está el fichero que
  dh_make crea por defecto:
  
  <p><example>
  ?package(gentoo):needs=X11|text|vc|wm section=Apps/see-menu-manual\
    title="gentoo" command="/usr/bin/gentoo"
  </example>

  <p>El primer campo especifica qué tipo de interfaz necesita el
  programa (esto es, texto o X11). La siguiente es el menu y submenu
  dónde debería aparecer. La lista actual de secciones está en 
 /usr/doc/menu/html/ch2.html#s2.2
  El  tercero es el nombre del programa. El cuarto es el icono para el
  programa o nada si no hay ninguno. El quinto es el texto que
  aparecerá en el menu. El sexto es la orden que ejecuta el programa.
  will appear in the menu. The sixth is the command that runs the program.

  <p>Ahora cambiaremos la entrada de menu a ésta:
  <p><example>
  ?package(gentoo):needs=X11 section=Apps/Misc \
    title="gentoo" command="/usr/X11R6/bin/gentoo"
  </example>

  <sect id="watch">watch.ex

  <p>Puede usar este fichero, junto con los programas
<manref name="uscan" section="1">
  y <manref name="uupdate" section="1"> (en el paquete devscripts)
  para vigilar el servidor de donde obtuvo las fuentes originales. Vea
  las páginas de manuales para más detalles. Gentoo no puede usar esta
  función así que borraremos el fichero.

  <p>Ahora estamos preparados para construir el paquete.

  <chapt id="final">Pasos Finales

  <sect id="build">Construir el paquete.

  <p>Entre en el directorio principal de  Gentoo's
  (/usr/local/src/gentoo/gentoo-0.9.12/) y ejecute el siguiente
  comando:

  <p><example>
  dpkg-buildpackage -rfakeroot
  </example>

  <p>Esto hará todo por usted, sólo tendrá que dar su clave secreta
  PGP, dos veces. Una vez haya hecho esto, verá cuatro nuevos ficheros
  en el directorio /usr/local/gentoo:

  <p><list>
  <item><em>gentoo_0.9.12-1_i386.deb</em>
  <p>es el paquete binario completo. Puede usar dpkg o deselect para
  instalar o eliminar éste como cualquier otro paquete.

  <item><em>gentoo_0.9.12-1_i386.changes</em>
  <p>Mientras sigue trabajando en el paquete, campiará su
  comportamiento y se le añadirán nuevas funciones. Las personas que
  descargen su paquete pueden mirar este fichero y ver qué ha
  cambiado. Este fichero es generado a partir del fichero
  gentoo-0.9.12/debian/changelog file, y contiene los cambios actuales
  a la revisión actual del paquete. También lista los ficheros en el
  paquete. Las largas listas de números son las sumas MD5 para los
  ficheros. Las personas que descargen estos ficheros pueden probarlos
  con  <manref name="md5sum" section="1"> y si los números no
  coinciden, sabrán que el fichero está corrupto o ha sido
  modificado. Éste fichero está firmado con PGP de forma que 
  cualquiera puede estar aún más seguro de que es realmente suyo.

  <item><em>gentoo_0.9.12.orig.tar.gz</em>
  <p>Estes es el código fuente original junto de forma que si alguien
  quiere recrear su paquete desde cero puede hacerlo. O si alguien no
  está usando el sistema de paquetes de Debian quiere descargarse las
  fuentes y compilarlo.


  <item><em>gentoo_0.9.12-1.dsc</em>
  <p>Este es un sumario de los contenidos del código fuente. Este
  fichero es generado con el fichero gentoo-0.9.12/debian/control y se
usa cuando se descomprime las fuentes con <manref name="dpkg-source"
section="1">. Éste fichero está firmado con PGP de forma que cualquier
puede estar seguro de que es realmente suyo.
  </list>

  <sect id="errcheck">Comprobar su paquete para encontrar errores.


  <p>Ejecute <manref name="lintian" section="1"> sobre su fichero de
  cambios .changes; éste programa comprobará muchos errores comunes al
  empaquetar. El comando es:
<!-- en qué paquete está lintian? -->
  
  <p><example>
  lintian -i gentoo_0.9.12-1_i386.changes
  </example>
  
  <p>Si parece que hay algunos errores (líneas que comienzan por E:),
  lea la explicación (líneas N:), corriga errores, y reconstruya con
  dpkg-buildpackage. Si hay líneas que comienzan con W:, son sólo
  avisos (warnings, n. del t.), así que puede estar seguro de que su
  paquete está bien (pero seguramente necesita algún ajuste fino).

  <p>Mire dentro del paquete usando un gestor de ficheros como <manref
name="mc" section="1">, o descomprimalo en algún punto temporal usando
 <manref name="dpkg-deb" section="1">.

  <p>Instale el paquete para probarlo usted mismo. Intente instalarlo
  en otroas máquinas distintas de la suye y mire bien para detectar errores
  o avisos.

  <p>Más tarde, cuando construya una nueva versión, debería hacer lo
  siguiente para asegurar la actualización básica del paquete:

  <list>
  <item>actualizese de la versión previa (y de la versión en la última
  versión de Debian),
  <item>vuelva a la versión anterior de nuevo,
  <item>instale el paquete como uno nuevo (esto es, sin ninguna
  verisón instalada previamente),
  <item>desintalelo, reinstalelo y luego purgelo.
  </list>

  <sect id="upload">Enviando su paquete.

  <p>Ahora que ha probado su nuevo paquete en profundidad, necesitará
  enviar estos ficheros a master.debian.org, usando <manref
  name="dupload" section="1">.
  Primero debe editar el fichero de configuración de dupload. Copie
  los valores por defecto del /etc a su directorio personal:
  
  <p><example>
  cp /etc/dupload.conf ~/.dupload.conf
  </example>

  <p>Después edite ese fichero (~/.dupload.conf), y encuentre la parte
  que empieza por  '$cfg{master}' y cambie estas líneas (no
  necesariamente en éste orden):
  <example>
          login => getlogin() || $ENV{USER} || $ENV{LOGNAME},
          visibleuser => getlogin() || $ENV{USER} || $ENV{LOGNAME},
          visiblename => "",
          fullname => "",
  </example>
  a valores equivalentes a estos (cambien mis valores por los suyos):
  <example>
          login => "joy",
          visibleuser => "jrodin",
          visiblename => "jagor.srce.hr",
          fullname => "Josip Rodin",
  </example>

  <p>El primero es su login en master.debian.org (es usted ahora un
  desarrollador oficial de Debian ¿o no? Si no lo es, lea la
  Referencia del Desarrollador), el segundo y el tercero son partes de
  su dirección de contacto antes y después de la arroba ('@'), y el
  cuarto es su nombre completo.


  <p>Entonces conecte con su proveedor de Internet, asegurese una vez
  mas de que está en el directorio /usr/local/src/gentoo, y ejecute la
  orden:

  
  <p><example>
  dupload --to master gentoo_0.9.12-1_i386.changes
  </example>

  <p>Dupload le preguntará su password en master.debian.org, envíe sus
  paquetes, y envíe un pequeño anuncio sobre su envío en 
  <email/debian-devel-changes@lists.debian.org/.
<!-- esto no lo hace ya dupload? -->
  <p>Si vive en Europa, puede usar otras colas de envío en lugar de
  master. Para más detalles mire lea <manref name="dupload" section="1">,
  <manref name="dupload" section="5"> y la Referencia del
  Desarrollador.

  <sect id="whereishelp">Dónde pedir ayuda.

  <p>Antes de que decida preguntar en lugares públicos, por favor
  simplemente RTFM ("Lea el Jodido Manual", n. del t.). Esto incluye
  documentación en /usr/doc/dpkg, /usr/doc/debian,
  /usr/doc/debhelper y las páginas de man/info para todos los
  programas mencionados en este artículo. Cuando reciva un aviso de
  fallo (bug report, n. del t.) (sí, avisos de fallos ¡de verdad!)
  sabrá que es el momento de indagar en el
  <url name="Sistema de Seguimiento de Fallos de Debian"
  id="http://www.debian.org/Bugs/"> y leer la documentación allí.

  <p>Si se une a la lista de distribución de Mentores de Debian en
  <email/debian-mentors@lists.debian.org/ puede unirse con
  desarrolladores de Debian con experiencia que le ayudarán con las
  preguntas que pueda tener. Puede subscribirse a ella enviando un
  correo electrónico a 
  <email/debian-mentors-request@lists.debian.org/ con la palabra 
  'subscribe' en el tema del mensaje.


  <p>Si aún tiene preguntas, hagalas en la lista de distribución de
  Desarrolladores de Debian en
  <email/debian-devel@lists.debian.org/. Puede subscribirse a ella
  enviando un correo electrónico a
  <email/debian-devel-request@lists.debian.org/ con la palabra
  'subscribe' en el tema del mensaje. Si ya es un desarrollador de
  Debian debería estar suscrito a ella de todas formas.

  <p>Aunque todo funcionara bien, es el momento de empezar a
  rezar. ¿Por qué? Por que en sólo unas horas (o días) usuarios de
  todo el mundo empezarán a usar su paquete, y si cometió algún error
  crítico será bombardeado por correos de centenares de usuarios
  furiosos de Debian.... Sólo bromeaba :-)

  <p>Relájese y prepárse para recibir reportes de fallos, porque hay
  mucho más trabajo que hacer antes de seguir completamente las
  políticas de Debian (una vez más lea la <em>documentación real</em>
  para detalles). ¡Buena suerte!

 </book>

</debiandoc>
