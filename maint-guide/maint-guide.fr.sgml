<!doctype debiandoc system>

<debiandoc>

 <book>

  <titlepag>

   <title>Nouveau Guide du Responsable Debian</title>

   <author>
   Josip Rodin <email/jrodin@jagor.srce.hr/
   </author>

   <version>version 0.95, 3 avril 1999</version>

   <copyright>
   <copyrightsummary>Copyright &copy; 1998, 1999 Josip Rodin.</copyrightsummary>

   <p>Ce document peut être utilisé selon les termes de n'importe quelle
   licence strictement conforme au DFSG, de préférence la Licence Publique
   Générale de GNU version 2 ou suivante. 

   <p>Avec la permission de leurs auteurs, j'ai utilisé et modifié des parties
   de ces deux documents :

   <p>Making a Debian Package (AKA the Debmake Manual), copyright &copy;
   1997 Jaldhar Vyas <email/jaldhar@debian.org/.

   <p>The New-Maintainer's Debian Packaging Howto, copyright &copy; 1997
   Will Lowe <email/lowe@debian.org/.
   </copyright>

  </titlepag>

  <toc sect>

  <chapt id="start">Commencer "De la Bonne Manière"

  <p>Ce document va essayer de décrire à l'utilisateur Debian courant (et au
  développeur en devenir) la construction d'un paquet Debian GNU/Linux dans un
  langage courant. Il y a un vieux proverbe romain, <em>Longum iter est per
  preaecepta, breve et efficax par exempla!</em> (C'est long par la règle,
  court et efficace par l'exemple!).

  <p>Une des choses qui font de Debian une distribution de si haut niveau, est
  son système de paquets. Bien qu'il existe une grande quantité de logiciels
  dans le format Debian, parfois vous devrez installer un logiciel qui ne
  l'est pas. Vous pouvez vous demander comment faire vos propres paquets, et
  peut-être pensez vous que c'est une tâche très difficile. Et bien, si vous
  êtes vraiment un débutant sous Linux, c'est dur, mais si vous étiez un
  débutant, vous ne seriez pas en train de lire ce document maintenant. :-)
  Vous devez en savoir un peu sur la programmation Unix, mais vous ne devez
  certainement pas être un magicien.

  <sect id="needprogs">Programmes nécessaires au développement.

  <p>Avant de commencer quoi que ce soit, vous devriez vous assurer que vous
  avez installé certains paquets avec <manref name="dpkg" section="8"> (ie.
  `dpkg -i paquet`, ou avec des programmes utilisateurs comme dselect ou apt).
  Ce document a été écrit alors que les distributions 2.0 'hamm' et 2.1
  'slink' étaient les versions stables officielles de Debian, donc les paquets
  nommés ici sont ceux de la version 2.1.

  <p>Les paquets suivants sont fournies dans l'installation standard de Debian
  2.1, de sorte que vous les avez probablement déjà. Néanmoins, vous devriez
  le vérifier avec `dpkg -s paquet`.

  <list>
  <item><em>binutils</em> - ces programmes sont utilisés pour assembler et
  lier des fichiers objets - la matière dont sont fait les programmes. (voir
  'info binutils')

  <item><em>cpp</em> - le préprocesseur C. (voir <manref name="cpp"
  section="1">)

  <item><em>cpio</em> - c'est un archiveur comme tar ou zip. (voir <manref
  name="cpio" section="1">) 

  <item><em>dpkg-dev</em> - ce paquet contient les outils nécessaires pour
  dépaqueter, construire et télécharger les paquets sources Debian. Il
  contient aussi le manuel packaging et dpkg-internals. (voir <manref
  name="dpkg-source" section="1">)
  
  <item><em>file</em> - ce programme bien pratique peut déterminer la nature
  d'un fichier. (voir <manref name="file" section="1">)
  
  <item><em>fileutils</em> - les utilitaires Linux essentiels, comme ls,
  chmod, rm et d'autres. (voir `info --file /usr/info/fileutils.info.gs`)
  
  <item><em>gcc</em> - Le compilateur C de GNU. La plupart des programmes
  Linux sont écrits en C. Cependant, si votre programme est écrit dans un
  autre langage de programmation, comme en C++, Fortran, ou Pascal, vous
  devriez installer g++, g77, ou gpc, respectivement. (voir <manref name="gcc"
  section="1">, <manref name="g++" section="1">, <manref name="g77" section="1">,
  <manref name="gpc" section="1">)
  
  <item><em>libc6-dev</em> - Les librairies et fichiers d'entête C dont gcc a
  besoin pour les lier aux fichiers objets créés. Bien que certains programmes
  recommandent ou utilisent encore libc5, vous êtes encouragé à utiliser la
  nouvelle version (libc6). (voir `info libc`)
  
  <item><em>make</em> - d'ordinaire la création d'un programme prend plusieurs
  étapes. Plutôt que d'avoir à taper les mêmes commandes encore et encore,
  vous pouvez utiliser ce programme pour automatiser le processus, en
  créant des fichiers Makefile. Certains programmes utilisent aussi imake et
  xmkmf, des programmes utilisés pour générer les fichiers Makefile à partir
  d'un ensemble de fonctions macros. Beaucoup de logiciels récents utilisent
  des scripts de configurations et des fichiers Makefiles créés à l'aide
  d'autoconf et automake, donc vous pourriez avoir besoin de ceux-ci aussi.
  (voir `info make`, <manref name="imake" section="1">, <manref name="xmkmf"
  section="1">, <manref name="autoconf" section="1">, <manref name="automake"
  section="1">)

  <item><em>patch</em> - ce programme très utile prend un fichier contenant
  une liste de différences (produite par le programme diff) et l'appliquer au
  fichier original, produisant une version mise à jour. (voir <manref
  name="patch" section="1">)

  <item><em>perl</em> - celui-ci est un des langages de script les plus
  utilisés sur les systèmes un*x modernes, souvent qualifié de "Tronçoneuse
  Suisse de Unix". (voir <manref name="perl" section="1">)
  </list>

  <p>Vous devrez probablement installer vous-même les programmes suivant de la
  section devel de la distribution :

  <list>
  <item><em>fakeroot</em> ou <em>libtricks</em> - ceux-ci vous permettent de
  prétendre être root ce qui est nécessaire pour certaines parties du
  processus de création. (voir <manref name="fakeroot" section="1">)

  <item><em>lintian</em> - ce paquet peut vous indiquer de nombreuses erreurs
  courantes après que vous ayez construit le paquet, et explique les erreurs.
  Il requiert aussi diffstat, un petit utilitaire qui produit des histogrammes
  à partir des sorties de diff. (voir <manref name="lintian" section="1">,
  <manref name="diffstat" section="1">,
  /usr/doc/lintian/lintian.html/index.html)
  </list>

  <p>Et vous aurez besoin de ces paquets de la section utils :

  <list>
  <item><em>dh-make</em> and <em>debhelper</em> - dh-make est nécessaire pour
  créer le squelette de notre exemple de paquet, et il utilise certains outils
  de debhlper pour créer les paquets. Ils ne sont pas indispensables pour la
  création des paquets, mais il est <strong>fortement</strong> recommandé pour
  les nouveaux responsables. Il rend le processus complet bien plus facile à
  démarrer, et à contrôler par après. (voir <manref name="dh_make"
  section="1">, <manref name="debhelper" section="1">,
  /usr/doc/debhelper/README)

  <item><em>devscripts</em> - ce paquet contient certains scripts utiles qui
  peuvent aider les responsables, mais ils ne sont pas indispensables pour la
  création de paquets. (voir /usr/doc/devscripts/README.debian.gz)
  
  <item><em>debmake</em> - ce paquet contient certains programmes qui
  fonctionnent de manière similaire à dh-make, mais leur utilisation
  spécifique n'est <strong>pas</strong> couvert dans ce document. Voir <url
  name="the Debmake manual" id="http://www.debian.org/~jaldhar/">.
  </list>

  <p>Enfin, ces paquets <em>très importants</em> sont dans la section doc de
  la distribution :

  <list>
  <item><em>debian-policy</em> - inclut la structure et le contenu de
  l'archive, plusieurs considérations sur le design du système d'exploitation,
  le Standard de Structure de Système de Fichiers Linux, et le plus important
  (pour vous) est qu'il décrit les critères que chaque paquet doit vérifier
  pour être inclus dans la distribution. (voir
  /usr/doc/debian-policy/policy.html/index.html)

  <item><em>developers-reference</em> - concerne tout ce qui n'est pas
  spécifique au détails technique de la création de paquets, comme la
  structure des archives, comment renommer, rendre orphelin, choisir un
  paquet, faire un NMU (une version du paquet non responsable),
  comment gérer les bogues, où et quand télécharger, etc. (voir
  /usr/doc/developers-reference/developers-reference.html/index.html)

  <item><em>packaging-manual</em> - décrit les aspects techniques de la
  création des paquets binaires et sources Debian. (voir
  /usr/doc/packaging-manual/packaging.html/index.html)
  </list>

  <p>Vous avez aussi besoin du paquet de cryptographie <manref name="pgp"
  section="1"> pour <em>signer</em> numériquement votre paquet. Ceci est
  spécialement important si vous voulez distribuer votre paquet à d'autres
  personnes (et vous le ferez si votre paquet est inclus dans la distribution
  Debian). Cependant, à cause d'une loi d'exportation américaine plutôt
  stupide, vous ne pouvez pas simplement le télécharger de votre site FTP
  Debian le plus proche. Par contre, votre site FTP va avoir un fichier nommé
  README.non-us, qui vous dira comment avoir une copie de pgp (disponible 
  <url name="ici" id="http://www.debian.org/misc/README.non-US">).

  <p>Les courtes descriptions qui sont données ci-dessus ne servent que
  d'introduction à ce que fait chaque paquet. Avant de continuer, veillez lire
  attentivement la documentation de chaque programme, au moins l'usage
  standard. Cela peut vous sembler fastidieux maintenant, mais plus tard vous
  serez <em>très</em> content de l'avoir fait.

  <sect id="otherinfo">Plus d'information

  <p>Vous pouvez faire deux types de paquets : source et binaire.  Un paquet
  source contient le code que vous pouvez compiler en un programme.  Un paquet
  binaire contient juste le programme fini. Ne mélangez pas les termes comme
  source du programme et le paquet source du programme ! Veuillez lire les
  autres manuels si vous avez besoin de plus de détails sur la terminologie.

  <p>Debian utilise le terme 'responsable' pour la personne qui fait des
  paquets, 'auteur' pour la personne qui fait le programme, et 'responsable
  amont' pour la personne qui maintient le programme actuellement. D'ordinaire
  l'auteur et le responsable amont sont une seule et même personne. Si vous
  avez écrit un programme, et que vous voulez qu'il soit dans Debian, vous
  pouvez remplir une demande pour devenir un responsable.

  <p>Après que vous ayez construit votre paquet (ou pendant la création), vous
  devrez devenir responsable Debian officiel si vous souhaitez que votre
  programme soit dans la prochaine distribution (si le programme est utile,
  pourquoi pas ? Ce processus est expliqué dans la Référence du Développeur.
  Veuillez le lire.

  <chapt id="first">Premiers pas
  <p>Puisque la documentation au <url name="Coin des Développeurs"
  id="http://www.debian.org/devel/"> n'est pas très claire sur où et comment
  les nouveaux responsables devraient commencer leur travail, ce document va
  expliquer chacune des petites étapes (qui peuvent a priori sembler
  insignifiante), et vous aider à créer ce premier paquet, ainsi qu'à gagner
  de l'expérience pour construire les versions suivantes de ce paquet ou
  d'autres plus tard.

  <sect id="choose">Choisir votre programme

  <p>Vous avez probablement déjà choisi le paquet que vous voulez construire,
  mais voici quelques éléments pour les non-initiés :

  <list>
  <item>vérifiez si le paquet est déjà dans la distribution. Si vous utilisez
  la distribution 'stable', peut-être que le mieux est d'aller sur <url
  name="la page de recherche"
  id="http://www.debian.ord/distrib/packages.html">.
  Si vous utilisez une distribution 'unstable' <strong>courante</strong>,
  vérifiez le avec ces commandes :
  <example>
  dpkg -s program
  dpkg -l '*program*'
  </example>
  </item>

  <item>consultez la <url name="page WNPP"
  id="http://www.debian.org/doc/prospective-packages.html"> (Travail
  nécessaire et paquets futurs) pour voir si quelqu'un d'autre construit ce
  paquet. Si c'est le cas, contactez le responsable actuel si vous le voulez
  vraiment. Sinon, trouvez un autre paquet intéressant que personne ne
  maintient.
  </item>

  <item>le programme <strong>doit</strong> avoir une licence, si possible
  libre conformément au <url name="Règles de Logiciel Libre Debian"
  id="http://www.debian.org/social_contract.html#guidelines">.
  S'il n'est pas conforme à l'une de ces règles, il peut malgré tout être
  inclus dans les sections 'contrib' ou 'non-free' de Debian. Si vous n'êtes
  pas sûr, demandez sur <email/debian-legal@lists.debian.org/.
  </item>

  <item>le programme ne devrait <strong>pas</strong> être setuid root, où
  encore mieux, il ne devrait pas être quoique ce soit setuid ou setgid.
  </item>

  <item>le programme ne devrait pas être un démon, ou quelque chose qui va
  dans les répertoires */sbin.
  </item>

  <item>le programme devrait être sous forme de binaire exécutable. N'essayez
  pas encore les librairies.
  </item>

  <item>il devrait être bien documenté, ou au moins compréhensible (par tous).
  </item>

  <item>vous devriez contacter le(s) auteur(s) du programme pour vérifier
  qu'ils sont d'accord pour la création du paquet. Il est important d'être à
  même de consulter le(s) auteur(s) à propos du programme en cas de problèmes
  spécifiques au programme, aussi n'essayez pas de créer un paquet à partir de
  programmes non maintenus.
  </item>

  <item>enfin, vous devriez savoir qu'il fonctionne, et l'avoir testé pendant
  quelques temps.
  </item>
  </list>

  <p>Bien sûr, toutes ces remarques ne sont que des mesures de sécurité, et
  ont pour but de vous sauver d'utilisateurs fous de rage si vous faites
  une erreur dans un démon FTP setuid... Quand vous aurez plus d'expérience
  dans la création des paquets, vous serez capable de faire de tels paquets,
  mais même les développeurs les plus expérimentés consultent la liste de
  discussion debian-devel en cas de doute. Et là les gens seront contents de
  les aider.

  <p>Pour plus d'information à ce sujet, consultez la Référence du Développeur.

  <sect id="getsrc">Obtenir le programme, et l'essayer.

  <p>La première chose à faire est de trouver et de télécharger le paquet
  original. Je suppose que vous avez déjà le fichier source que vous avez pris
  sur la page web de l'auteur. Les sources Linux sont d'habitude au format
  tar/gzip avec l'extension .tar.gz ou .tgz, et contient un sous-répertoire
  nommé programme-version avec toutes les sources dedans. Si votre programme
  se termine par <TT>.Z</TT> ou <TT>.zip</TT>, décompresser le avec les outils
  adéquats ou demandez sur debian-mentors si vous n'êtes pas sûr quant à la
  façon de le décompresser correctement (indice: utilisez `file
  archive.extension`).

  <p>Comme exemple, je vais utiliser un programme nommé 'gentoo', un
  gestionnaire de fichiers pour X11 utilisant GTK+.

  <p>Créez un sous-répertoire sous /usr/local/src du même nom que votre
  programme (/usr/local/src/gentoo dans ce cas-ci). Placez l'archive
  téléchargée dedans, et décompressez la avec `tar -xzf gentoo-0.9.12.tar.gz`.
  Cette étape (un peu longue) ne produira aucun message (sauf en cas
  d'erreur, auquel cas vous devez télécharger à nouveau ou vérifier qu'il
  s'agit bien d'une archive tar/gzip), mais vous aurez les sources
  décompressées dans un sous-répertoire nommé 'gentoo-0.9.12' dans
  /usr/local/src/gentoo.

  <p>Allez dans ce répertoire et lisez <strong>attentivement</strong> la
  documentation fournie. Il s'agit d'habitude de fichiers nommés README*,
  INSTALL*, *.lsm ou *.html. Dedans vous trouverez les instructions pour
  compiler et installer correctement le programme (très probablement dans le
  répertoire /usr/local/bin).

  <p>La méthode varie d'un programme à l'autre, mais de nombreux programmes
  modernes viennent avec un script `configure' qui configure les sources selon
  votre système et s'assure que votre système est à même de les compiler.
  Après la configuration (avec `./configure`), les programmes sont compilés
  avec `make`, et sont installés dans les répertoires de destination en tapant
  `make install`.
  
  <p>donc, compilez, installez et essayez ce programme, pour vous assurer
  qu'il fonctionne correctement et ne casse rien d'autre quand il est installé
  ou qu'il tourne.

  <sect id="naming">Les choses à faire avant `dh_make`

  <p>Pour construire correctement votre programme, vous devriez renommer le
  répertoire source en &lt;nompaquet&gt;-&lt;version&gt;. Comme vous pouvez le
  voir, le programme d'exemple gentoo n'en a pas besoin, mais ce peut-être le
  cas de votre programme. Aussi, changez le nom du programme original en
  minuscules, si ce n'est pas déjà le cas. S'il consiste en plus d'un mot,
  contractez les ou faites une abréviation. Par exemple, le programme "John's
  little editor for X" pourrait être nommé johnledx ou jle4x, ou quoique ce
  soit que vous décidiez, pour autant que cela reste sous une limite
  raisonnable, disons 15 caractères.

  <p>Vérifiez aussi la version exacte du programme (pas du paquet!). Si ce
  logiciel n'est pas numéroté avec un numéro de version comme X.Y.Z, mais avec
  une date de distribution, vous pouvez utiliser cette date (si la date est le
  19 décembre 1998, utilisez la version US courte 19981219) pour le numéro de
  version. Certains ne seront pas numérotés du tout, auquel cas vous devriez
  contacter le responsable amont pour voir si il a une autre méthode de
  gestion des révisions.

  <p>Avant de commencer avec l'étape dh_make, vous devriez mettre la variable
  d'environnement $EMAIL à votre adresse mél, et vous le ferez en utilisant
  cette commande dans le shell (ceci vaut pour bash) :
  
  <p><example>
  export EMAIL=your.login@somewhere.net
  </example>

  <sect id="dh_make">Lancer `dh_make'

  <p>Vérifiez que vous êtes dans le répertoire du code source du programme, et
  lancez ceci :

  <p><example>
  dh_make
  </example>
   
  <p>Des informations sont affichées. Il vous demande quelle sorte de paquet
  vous voulez créer. Gentoo est un paquet binaire simple - il ne crée
  qu'un exécutable, et donc un seul fichier .deb - donc nous sélectionnons la
  première option, avec la touche 's'. En tant que nouveau responsable, vous
  ne devriez pas créer des paquets composés, ou des librairies, comme
  expliqué plus haut.

  <p>Notez que vous ne pouvez exécuter dh_make <strong>qu'une fois</strong>,
  et qu'il ne se comportera par correctement si vous l'exécutez encore dans le
  même répertoire déjà debianisé. Cela signifie aussi que vous devrez utiliser
  une autre méthode pour distribuer une nouvelle révision ou une nouvelle
  version de votre paquet dans le futur. Lisez plus à ce sujet dans ce texte.

  <chapt id="modify">Modifier les sources

  <p>Quand dh_make a fini, et que vous avez ajusté le Makefile du programme,
  vous pouvez `cd ..` pour voir qu'un nouveau répertoire a été créé, et qu'il
  est nommé 'gentoo-0.9.12.orig'. Il contient le code source original qui ne
  sera pas modifié par la suite. Le répertoire 'gentoo-0.9.12' existe
  toujours, et c'est là que vous ferez les modifications.

  <p>Normalement, les programmes s'installent d'eux-mêmes dans les
  sous-répertoires /usr/local. Mais les paquets Debian ne doivent pas
  utiliser ce répertoire, car il est réservé à l'usage privé de
  l'administrateur système (ou de l'utilisateur). Cela signifie que vous devez
  lire le Makefile de gentoo. C'est le script que <manref name="make"
  section="1"> utilisera pour automatiser la création du programme. Pour plus
  de détails sur les Makefiles, regardez <ref id="rules">.

  <p>Notez qu'il n'y a pas la place ici pour entrer dans <em>tout</em> les
  détails sur les modifications, mais voici quelques-uns des problèmes qui
  reviennent souvent.

  <sect id="destdir">Le problème $DESTDIR

  <p><example>
  # Where to put binary on 'make install'?
  BIN     = /usr/local/bin
  # Where to put icons on 'make install'? Note: if you change this,
  # gentoo will not find the icons as it starts up. You're going to
  # have to alter gentoo's icon path (in the config window, "Paths"
  # tab) to get it work.
  ICONS   = /usr/local/lib/gentoo/
  </example>

  <p>Avant tout, vous devriez insérer deux nouvelles lignes qui disent :

  <p><example>
  # Edited for Debian GNU/Linux.
  DESTDIR =
  </example>
  parce que le processus de création en a besoin (ce sera expliqué plus tard).

  <p>Ensuite le Makefile mentionne la position de l'exécutable final. Changez
  le en ceci :
  <p><example>
  # Where to put binary on 'make install'?
  BIN     = $(DESTDIR)/usr/X11R6/bin
  </example>

  <p>Mais pourquoi dans ce répertoire, et pas dans un autre ? Parce que Debian
  a défini quelques règles indiquant où les programmes doivent être installés.
  Ceci est spécifié dans le Standard de Structure du Système de Fichiers Linux
  (/usr/doc/debian-policy/fsstnd). Ainsi, nous devons installer l'exécutable
  dans /usr/X11R6/bin, à la place de /usr/local/bin, et la page de manuel (qui
  n'existe pas dans notre cas, mais presque tous les programmes en ont une,
  aussi nous en ferons une plus tard) dans /usr/man/man1 à la place de
  /usr/local/man/man1. (NdT: /usr/X11R6/man/man1 plutôt, non ?)

  <p>Après cela nous avons une situation un peu plus difficile. Si vous
  changez une ligne en :

  <p><example>
  ICONS   = $(DESTDIR)/usr/share/gentoo/
  </example>
  pour être conforme aux règles, vous devrez éditer quelques sources C. Mais
  où et que chercher ? Vous pouvez trouver où en lançant :
  <p><example>
  grep -n usr/local/lib *.[ch]
  </example>
  (dans chaque sous-répertoire qui contient des fichiers .c et .h). Grep vous
  dira le nom du fichier et le numéro de ligne où il trouve une occurrence.
  Maintenant éditez ces fichiers et aux lignes indiquées, remplacez
  usr/local/lib par usr/share - et voilà. Remplacez juste usr/local/lib avec
  votre répertoire, et faites attention de ne pas casser le reste du code, si
  vous ne vous y connaissez pas trop en programmation C :-)

  <p>Après quoi vous devez trouver la cible d'installation (cherchez une ligne
  qui commence avec 'install:') et renommez toutes les références aux
  répertoires autres que ceux définis au début du Makefile. Dans notre cas,
  c'est déjà fait et simplifie un peu les choses. Auparavant, la cible
  d'installation disait :

  <p><example>
  # ----------------------------------------- Installation

  # You're going to have to be root to do this!
  install:        gentoo-target
                  install ./gentoo $(BIN)
                  install icons $(ICONS)
                  install gentoorc-example $(HOME)/.gentoorc
  </example>

  <p>Après votre modification elle dit :
  <example>
  # ----------------------------------------- Installation

  # You're going to have to be root to do this!
  install:        gentoo-target
                  install -d $(BIN) $(ICONS) $(DESTDIR)/etc
                  install ./gentoo $(BIN)
                  install -m644 icons/* $(ICONS)
                  install -m644 gentoorc-example $(DESTDIR)/etc/gentoorc
                  install -d $(DESTDIR)/usr/doc/gentoo/html
                  cp -a docs/* $(DESTDIR)/usr/doc/gentoo/html
  </example>

  <p>Le lecteur attentif notera que j'ai changé 'gentoo' en 'gentoo-target'
  dans la ligne 'install:'. C'est ce qu'on appelle une correction de bogue :-)

  <p>Chaque fois que vous faites des modifications qui ne sont pas
  spécifiquement lié à Debian, envoyez les au responsable amont pour qu'elles
  puissent être inclue dans la version suivante du programme.

  <sect id="nolibs">Librairies différentes

  <p>Il y a souvent un problème commun : des librairies sont souvent
  différentes d'une plate-forme à l'autre. Par exemple, Makefile peut contenir
  une référence à une librairie qui n'existe pas dans Debian. Dans ce cas,
  nous devons la changer en une librairie qui existe dans Debian, et qui sert
  à la même chose. La meilleure méthode est de commenter (<em>ne pas effacer
  !</em>) ces lignes parce qu'elles peuvent fournir des indices à d'autres qui
  ont le même problème.

  <p>Ainsi, s'il y a une ligne dans le Makefile de votre programme qui dit
  quelque chose comme ceci (et votre programme ne compile pas) :

  <p><example>
  LIBS = -lcurses -lquelquechose -lautrechose
  </example>

  <p>Changez la en ceci, et cela marchera probablement :
  <p><example>
  LIBS = -lncurses -lquelquechose -lautrechose
  #LIBS = -lcurses -lquelquechose -lautrechose
  </example>

  <chapt id="crules">Les fichiers debian/control et debian/rules

  <p>Il y a un nouveau sous-répertoire dans gentoo-0.9.12, nommé 'debian'. Il
  y a un certain nombre de fichiers dans ce répertoire. Nous allons éditer
  ceux-ci pour configurer le comportement du paquet. Les plus importants
  d'entre eux sont 'control' et 'rules'.

  <sect id="control">le fichier 'control'

  <p>Ce fichier contient plusieurs valeurs que dpkg et dselect vont utiliser
  pour gérer le paquet. Voici le fichier control que dh_make crée pour
  nous.

  <p><example>1 Source: gentoo
  2 Section: unknown
  3 Priority: optional
  4 Maintainer: Josip Rodin &lt;jrodin@jagor.srce.hr&gt;
  5 Standards-Version: 2.4.0.0
  6
  7 Package: gentoo
  8 Architecture: any
  9 Depends: ${shlibs:Depends}
  10 Description: Missing
  11 Missing
  </example>
  (J'ai ajouté les numéros de ligne.)

  <p>Les lignes de 1 à 5 sont les informations de contrôle pour le paquet
  source. La ligne 1 est le nom du paquet source.

  <p>La ligne 2 est la section de la distribution dans laquelle ce paquet
  va. Comme vous l'avez constaté, Debian est divisé en sections: main
  (logiciels libres), non-free (logiciels pas vraiment libres), et contrib
  (logiciels libres qui dépendent de logiciels non libres). Sous celles-ci, il
  y a des sous-sections logiques qui décrivent de manière concise les paquets
  qui s'y trouvent. Ainsi nous avons 'admin' pour les programmes réservés à
  l'administrateur, 'base' pour les outils de base, 'devel' pour les outils de
  programmation, 'doc' pour la documentation, 'libs' pour les librairies,
  'mail' pour les lecteurs et les démons de courriel, 'net' pour les
  applications et démons réseaux, 'x11' pour les programmes spécifiques à X11,
  et bien d'autres.

  <p>Changeons donc la section en x11.

  <p>La ligne 3 décrit l'importance pour l'utilisateur d'installer ce paquet.
  Les sections et les priorités ne sont utilisés que par dselect quand il trie
  les paquets et sélectionne les défauts, et elles peuvent (et seront
  probablement) modifiées par nos responsables FTP. Lisez le manuel des règles
  pour des informations sur ces valeurs.

  <p>Comme c'est un paquet de priorité normale, nous le laissons à optional.

  <p>La ligne 4 est le nom et l'adresse email du responsable.

  <p>La ligne 5 est la version du standard de Règles Debian que ce paquet
  respecte (deux versions majeurs du paquet debian-policy installé).

  <p>Les lignes de 7 à 11 sont les information de contrôles pour le paquet
  binaire.

  <p>La ligne 7 est le nom du paquet binaire.

  <p>La ligne 8 décrit l'architecture CPU pour laquelle le paquet binaire a
  été compilé. Vous pouvez le laisser tel quel car <manref
  name="dpkg-gencontrol" section="1"> trouvera la valeur appropriée pour toute
  machine sur laquelle ce paquet sera compilé.

  <p>La ligne 9 montre une des capacités les plus puissantes de système de
  paquet Debian. Les paquets peuvent être liés entre eux de plusieurs
  méthodes. A part Depends les autres relations sont Recommends:, Suggests:,
  Pre-depends:, Conflicts:, Provides:, et Replaces:. Voici ce qu'elles
  signifient :

  <p><list>
  <item>Depends:
  <p><manref name="dpkg" section="8"> and <manref name="dselect" section="8">
  n'installera pas votre programme à moins que le paquet dont il dépend
  sont installé. Utilisez le si votre programme ne s'exécutera absolument pas
  à mois qu'un paquet particulier ne soit présent.</item>

  <item>Recommends:
  <p>dselect n'installera pas votre programme a moins que le paquet qu'il
  recommande ne soit installé. Dpkg vous le laissera faire cependant. Utilisez
  le pour les paquets qui ne sont pas vraiment indispensables mais qui sont
  typiquement utilisés avec votre programme.</item>

  <item>Suggests:
  <p>Quand un utilisateur installe votre programme dselect lui demandera s'il
  faut installer les programmes qu'il suggère.  Dpkg ne s'en soucie pas.
  Utilisez le pour les paquets qui marchent bien avec votre programme mais qui
  ne sont pas nécessaires.</item>

  <item>Pre-Depends:
  <p>Ceci est plus fort que Depends. Dpkg et dselect n'installerons pas votre
  paquet à moins que les paquets dont il pré-dépend ne soient installés <em>et
  correctement configurés</em>. Utilisez le <strong>très</strong> rarement et
  seulement après en avoir discuté sur la liste de discussion debian-devel.
  Traduisez: ne l'utilisez pas du tout. :-)</item>

  <item>Conflicts:
  <p>Dpkg et dselect n'installerons pas votre programme avant que les paquets
  avec lesquels il est en conflict n'aient été retirés.</item>

  <item>Provides:
  <p>Quand il y a plusieurs alternatives pour certains types de paquets,
  des noms virtuels ont été définis. La liste complète se trouve dans
  /usr/doc/debian-policy/virtual-package-name-list.text.gz. Utilisez ceci si
  votre programme fournit une fonction d'un paquet virtuel existant.</item>

  <item>Replaces:
  <p>Utilisez ceci quand votre programme remplace des fichiers d'un autre
  paquet, ou remplace tout un autre paquet. Dpkg et dselect retireront les
  fichiers du paquet remplacé avant d'installer le votre.</item>
  </list>

  <p>Tous ces champs ont une syntaxe uniforme. Il s'agit d'une liste de
  paquets séparés par des virgules. Ces noms de paquets peuvent aussi
  être une liste d'alternatives, séparés par des symboles barre verticale
  <tt>|</tt> (symbole tuyau). Les champs peuvent être restreints a des
  versions particulières de chaque paquet nommé. Ceci est fait entre
  parenthèses après chaque nom de paquet individuel; les parenthèses
  devraient contenir une relation de la liste suivante suivie par un numéro de
  version. Les relations autorisées sont <tt>&lt;&lt;</tt>, <tt>&lt;=</tt>,
  <tt>=</tt>, <tt>&gt;=</tt> et <tt>&gt;&gt</tt> pour strictement plus petit,
  plus petit ou égal, exactement égal, plus grand ou égal et strictement plus
  grand, respectivement.

 <p>La dernière capacité que je veux vous montrer est $(shlibs:Depends). Ceci
 sera automatiquement rempli par <manref name="dh_shlibdeps" section="1">
 (voir plus bas) avec les noms de toutes les librairies partagées, comme libc6
 ou xlib6g, que votre programme utilise, de sorte que vous ne devez pas le
 spécifier vous-même.  Ceci étant dit, nous pouvons laisser la ligne 9
 exactement comme elle est, parce que gentoo de dépendra d'aucun autre paquet.

  <p>La ligne 10 est celle où la liste de suggestions va. Ici on ne met que
  'menu', parce que gentoo devrait être dans les menus des gestionnaires de
  fenêtres X11. Ceci est aussi contrôlé par le fichier debian/menu. Voyez
  <manref name="menufile" section="5">, et <manref name="update-menus"
  section="1">.

  <p>La ligne 11 est la description courte. L'écran de la plupart de gens est
  large de 80 colonnes, aussi cela ne devrait pas dépasser les 50 caractères.
  Je le change en "A fully GUI configurable GTK+ file manager".

  <p>La ligne 12 est là où la description va. Celle-ci devrait être un
  paragraphe qui donne plus de détails sur le paquet. La première colonne de
  chaque ligne doit être vide. Il ne peut y avoir de ligne vide, mais vous
  pouvez  mettre un . (point) dans la colonne 2 pour simuler une ligne vide.
  De plus, il ne peut y avoir plus d'une ligne vide après la description
  longue.

  <p>Voici le fichier control mis à jour:

  <p><example>
  1  Source: gentoo
  2  Section: x11
  3  Priority: optional
  4  Maintainer: Josip Rodin &lt;jrodin@jagor.srce.hr&gt;
  5  Standards-Version: 2.5.0
  6
  7  Package: gentoo
  8  Architecture: any
  9  Depends: ${shlibs:Depends}
  10 Suggests: menu (>= 1.5)
  11 Description: A fully GUI configurable GTK+ file manager
  12 gentoo is a file manager for Linux written from scratch in pure C. It
  13 uses the GTK+ toolkit for all of its interface needs. gentoo provides
  14 100% GUI configurability; no need to edit config files by hand and re-
  15 start the program. gentoo supports identifying the type of various
  16 files (using extension, regular expressions, or the 'file' command),
  17 and can display files of different types with different colors and icons.
  18 .
  19 gentoo borrows some of its look and feel from the classic Amiga file
  20 manager "Directory OPUS" (written by Jonathan Potter).
  </example>

  <sect id="rules">le fichier 'rules'

  <p>Maintenant nous revenons au répertoire 'debian' pour lire les règles que
  <manref name="dpkg-buildpackage" section="1"> va utiliser pour créer
  vraiment le paquet. Ce fichier est en fait un autre Makefile, puisqu'il
  est exécuté avec 'make -f', mais différent de celui des sources amont.

  <p>Chaque fichier 'rules', comme tout autre Makefile, consiste en plusieurs
  règles indiquant comment construire les sources. Les règles sont des cibles,
  noms de fichiers ou d'actions à exécuter (par exemple, 'build:' ou
  'install:'). Les règles que vous voulez exécuter doivent être données comme
  argument à la ligne de commande (par exemple, 'rules build' ou 'rules
  install'). Après le nom de cible, vous pouvez nommer les dépendances,
  programme ou fichier dont la cible dépend. Après cela il peut y avoir un
  nombre quelconque de commandes (qui commencent par &lt;tab&gt;!), jusqu'à ce
  qu'une ligne vide soit trouvée. A ce moment, une autre règle commence. Les
  commentaires commencent avec des cardinaux ('#'), et se terminent avec la
  fin de la ligne. Vous pouvez invoquer des règles soit d'autres règles, soit
  par la ligne de commande (ie. `debian/rules clean`).

  <p>Vous êtes probablement confus pour l'instant, mais cela va devenir clair
  à l'examen du fichier 'rules' que dh_make nous donne comme défaut. Vous
  devriez avoir lu l'entrée 'make' dans info pour plus d'information.

  <p><example>
  1  #!/usr/bin/make -f
  2  # Made with the aid of dh_make, by Craig Small
  3  # Sample debian/rules that uses debhelper. GNU copyright 1997 by Joey Hess.
  4  # Some lines taken from debmake, by Christoph Lameter.
  5
  6  # Uncomment this to turn on verbose mode.
  7  #export DH_VERBOSE=1
  8
  9  build: build-stamp
  10 build-stamp:
  11	dh_testdir
  12
  13	
  14	# Add here commands to compile the package.
  15	$(MAKE)
  16
  17	touch build-stamp
  18
  19 clean:
  20	dh_testdir
  21	dh_testroot
  22	rm -f build-stamp install-stamp
  23
  24	# Add here commands to clean up after the build process.
  25	-$(MAKE) clean
  26
  27	dh_clean
  28
  29 install: install-stamp
  30 install-stamp: build-stamp
  31	dh_testdir
  32	dh_testroot
  33	dh_clean -k
  34	dh_installdirs
  35
  36	# Add here commands to install the package into debian/tmp.
  37	$(MAKE) install DESTDIR=`pwd`/debian/tmp
  38
  39	touch install-stamp
  40
  41 # Build architecture-independent files here.
  42 binary-indep: build install
  43 # We have nothing to do by default.
  44
  45 # Build architecture-dependent files here.
  46 binary-arch: build install
  47 #	dh_testversion
  48	dh_testdir
  49	dh_testroot
  50	dh_installdocs
  51	dh_installexamples
  52	dh_installmenu
  53 #	dh_installemacsen
  54 #	dh_installinit
  55	dh_installcron
  56	dh_installmanpages
  57 #	dh_undocumented
  58	dh_installchangelogs
  59	dh_strip
  60	dh_compress
  61	dh_fixperms
  62	dh_suidregister
  63	dh_installdeb
  64	dh_shlibdeps
  65	dh_gencontrol
  66 #	dh_makeshlibs
  67	dh_md5sums
  68	dh_builddeb
  69
  70 source diff:
  71	@echo >&2 'source and diff are obsolete - use dpkg-source -b'; false
  72
  73 binary: binary-indep binary-arch
  74 .PHONY: build clean binary-indep binary-arch binary
  </example>

  <p>Vous avez probablement l'habitude de la ligne 1 avec les scripts shell et
  perl. Cela signifie que ce fichier doit être exécuté par make. Les lignes
  vides sont ignorées. Les lignes commençant par '#' (cardinal) sont traitées
  comme de commentaires et sont aussi ignorées.

  <p>Les lignes 9 à 17 décrivent la règle 'build' (et sa fille build-stamp)
  qui exécutent le fichier Makefile de l'application pour compiler le
  programme.

  <p>Les choses marchent rarement du premier coup, aussi la règle 'clean',
  spécifiée aux lignes 18 à 26 nettoient toutes les déchets laissés par les
  essais infructueux précédents.

  <p>Le processus d'installation, la règle 'install', commence à la ligne 29.
  À la ligne 34, tous les répertoires nécessaires sont crées dans le
  répertoire 'debian'. La ligne 37 exécute la cible install du Makefile
  de gentoo - et installe dans le répertoire debian/tmp - c'est la raison pour
  laquelle nous avons spécifié $(DESTDIR) comme répertoire d'installation
  racine dans le Makefile de gentoo.

  <p>Comme le commentaire le suggère, la règle 'binary-indep' aux lignes 41 à
  43 est utilisé pour construire les paquets indépendants de l'architecture,
  mais nous n'en avons pas.

  <p>Ensuite on trouve la règle 'binary-arch', des lignes 46 à 68, pour
  laquelle nous exécutons plusieurs petits utilitaires du paquet debhelper qui
  font quelques petites opérations sur votre paquet pour le rendre conforme
  aux Règles Debian.

  <list>
  <item><manref name="dh_testdir" section="1"> vérifie que vous êtes dans le
  bon répertoire (/usr/local/gentoo/gentoo-0.9.12/),
  <item><manref name="dh_testroot" section="1"> vérifie que vous avez les
  permissions root,
  <item><manref name="dh_installdirs" section="1"> crée les répertoires
  mentionnés dans le fichier 'dirs' [n'existe pas ici],
  <item><manref name="dh_installdocs" section="1"> copie la documentation dans
  le répertoire debian/tmp/usr/doc/gentoo,
  <item><manref name="dh_installmenu" section="1"> copie le fichier menu dans
  debian/tmp/usr/lib/menu/gentoo,
  <item><manref name="dh_installmanpages" section="1"> copie les pages de
  manuel et les lie correctement,
  <item><manref name="dh_installchangelogs" section="1"> copie les changelogs
  dans le répertoire debian/tmp/usr/doc/gentoo,
  <item><manref name="dh_installinit" section="1"> copie le script init.d 
  [n'existe pas ici],
  <item><manref name="dh_installcron" section="1"> copie le script crontab
  dans debian/tmp/etc/cron.* [n'existe pas ici],
  <item><manref name="dh_installexamples" section="1"> copie les fichiers
  d'exemple dans debian/tmp/usr/doc/gentoo/examples [n'existe pas ici],
  <item><manref name="dh_strip" section="1"> retire les entêtes de déboguage
  des fichiers exécutables pour les rendre plus petits,
  <item><manref name="dh_compress" section="1"> gzipe les pages de manuel et
  la documentation plus large que 4 kb,
  <item><manref name="dh_fixperms" section="1"> vérifie et fixe les
  permissions invalides dans le répertoire debian/tmp,
  <item><manref name="dh_suidregister" section="1"> crée les fichiers pour
  enregistrer les exécutables setuid avec <manref name="suidregister"
  section="8"> [n'existe pas ici],
  <item><manref name="dh_installdeb" section="1"> copie les fichiers relatifs
  au paquet sous le répertoire debian/tmp,
  <item><manref name="dh_shlibdeps" section="1"> calcule les dependances
  des exécutables,
  <item><manref name="dh_gencontrol" section="1"> génère et installe
  le fichier control,
  <item><manref name="dh_makeshlibs" section="1"> génère le fichier de
  dépendance des librairies partagées [n'existe pas ici],
  <item><manref name="dh_md5sums" section="1"> génère les checksums MD5, et
  finalement,
  <item><manref name="dh_builddeb" section="1"> construit le paquet.
  </list>

  <p>Chacun de ces scripts dh_* a sa propre page de manuel, lisez la pour plus
  d'information. Il y a d'autres scripts dh_* non mentionnés ici, et si vous
  pouvez en avoir besoin, lisez la documentation de debhelper.

  <p>Les lignes 70 à 74 sont juste des choses nécessaires a propos desquelles
  vous pouvez en lire plus dans le manuel de make. Pour l'instant, il n'est pas
  important d'en savoir quelque chose.

  <p>Ce qu'il faut savoir du fichier rules créé par dh_make est qu'il s'agit
  juste d'une suggestion. Cela fonctionnera pour des paquets simples, mais
  pour les plus compliqués, n'ayez pas peur d'y ajouter ou d'en soustraire
  selon vos besoins. Ceci s'applique spécialement aux sections binary-arch, où
  vous pouvez commenter les lignes qui appellent des capacités dont vous
  n'avez pas besoin, et dans ce cas commentez les lignes 47, 53, 54, 57 et 66
  parce que gentoo n'en n'a pas besoin. La seule chose que vous ne devez pas
  changer sont les noms des règles, parce qu'elles doivent être nommées de
  cette manière car touts les outils utilisent ces noms, comme exigé par notre
  manuel de Création de Paquets.

  <p>Bien sûr, il faut modifier un peu ici : sur la ligne 58, je vais ajouter
  'FIXES' parce que c'est le nom du fichier changelog. Pour toute autre
  option, lisez le nom de la page de manuel du programme dh_*.

  <chapt id="dother">Autres fichiers dans le répertoire debian/

  <sect id="copyright">copyright

  <p>Ce fichier contient les informations de licence du paquet. Le format
  n'est pas dicté par les Règles, mais son contenu l'est (section 6.5).
  Dh_make en crée un par défaut, voici à quoi il ressemble :

  <p><example>
  1  This package was debianized by Josip Rodin jrodin@jagor.srce.hr on
  2  Wed, 11 Nov 1998 21:02:14 +0100.
  3
  4  It was downloaded from &lt;fill in ftp site&gt;
  5
  6  Upstream Author(s): &lt;put author(s) name and email here&gt;
  7
  8  Copyright:
  9
  10 &lt;Must follow here&gt;
  </example>

  <p>Les choses importantes à ajouter à ce fichier est l'endroit où vous avez
  trouvé ce paquet et la licence d'exploitation réelle (incluez la en entier).
  Si la licence est l'une d'un logiciel libre populaire comme GNU, BSD ou
  Artistic, vous pouvez juste faire référence au fichier approprié dans
  /usr/doc/copyright, qui existe sur chaque système Debian. Gentoo est
  disponible sous la Licence Publique de GNU (GPL), donc nous changeons le
  fichier en :

  <p><example>
  1  This package was debianized by Josip Rodin &lt;jrodin@jagor.srce.hr&gt; on
  2  Wed, 11 Nov 1998 21:02:14 +0100.
  3
  4  It was downloaded from: ftp://ftp.obsession.se/gentoo/
  5
  6  Upstream Author: Emil Brink &lt;emil@obsession.se&gt;
  7
  8  This software is copyright (c) 1998-99 by Emil Brink, Obsession
  9  Development.
  10
  11 You are free to distribute this software under the terms of
  12 the GNU General Public License.
  13 On Debian GNU/Linux systems, the complete text of the GNU General
  14 Public License can be found in /usr/doc/copyright/GPL file.
  </example>

  <sect id="readdeb">README.debian

  <p>D'autres détails ou différences entre le paquet original et votre
  version debianisée devraient être inclus ici. Voici ce que dh_make crée par
  défaut :

  <example>
  gentoo for DEBIAN
  ----------------------

  Comments regarding the Package

  Josip Rodin &lt;jrodin@jagor.srce.hr&gt;, Wed, 11 Nov 1998 21:02:14 +0100
  </example>

  <p>Nous n'avons rien en particulier à mettre ici - il est permis d'effacer
  le fichier. A propos, oui, vous pouvez renommer le fichier en README.Debian
  :-)

  <sect id="changelog">changelog

  <p>C'est un fichier requis, qui a un format spécial décrit dans le Manuel de
  Création de Paquets (section 3.2.3). Ce format est utilisé par dpkg et
  d'autres programmes pour obtenir le numéro de version, de révision, de
  distribution et l'urgence de votre paquet.

  <p>Pour vous, il est aussi important, puisqu'il est bon de documenter toutes
  les modifications que vous avez faites. Cela aidera les gens qui
  téléchargent votre paquet si il y a des problèmes non résolus a propos
  desquels ils doivent être immédiatement mis au courant. Ce sera sauvé comme
  /usr/doc/gentoo/changelog.Debian.gz dans le paquet binaire.

  <p>Dh_make en crée un par défaut, voici à quoi il ressemble :

  <p><example>
  1  gentoo (0.9.12-1) unstable; urgency=low
  2
  3   * Initial Release.
  4
  5  -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt; Wed, 11 Nov 1998 21:02:14 +0100
  6
  7  Local variables:
  8  mode: debian-changelog
  9  add-log-mailing-address: "jrodin@jagor.srce.hr"
  10 End:
  </example>

  <p>La ligne 1 est le nom du paquet, la version, la distribution et
  l'urgence. Le nom doit correspondre au nom du paquet source, la distribution
  devrait être unstable ou experimental, et l'urgence ne devrait pas être
  changée à quoique ce soit de plus haut que 'low'. :-)

  <p>Les lignes 3 à 5 sont l'entrée d'audit, où vous documentez les
  modifications faites dans la révision du paquet (pas dans
  modifications amonts - il y a un fichier spécial pour cela, créé par les
  auteurs amonts, installé comme /usr/doc/gentoo/changelog.gz). Les nouvelles
  lignes devraient être ajoutées juste avant la première ligne qui commence
  avec une astérisque ('*'). Vous pouvez le faire avec dch, emacs (les lignes
  7 à 10 sont les informations de mode pour l'éditeur Emacs), ou juste un
  éditeur de texte. Vous aurez quelque chose comme :

  <p><example>
  1  gentoo (0.9.12-1) unstable; urgency=low
  2
  3   * Initial Release.
  4   * This is my first Debian package.
  5
  6  -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt; Wed, 11 Nov 1998 21:02:14 +0100
  7
  8  Local variables:
  9  mode: debian-changelog
  10  add-log-mailing-address: "jrodin@jagor.srce.hr"
  11 End:
  </example>

  <p>Quand vous distribuez une nouvelle version, vous devriez incrémenter le
  numéro de version. Vous pouvez le faire `dch -v
  &lt;version&gt;-&lt;révision&gt;` et insérer ensuite les commentaires avec
  votre éditeur préféré. Astuce : comment ajouter facilement la date dans ce
  format ? Utilisez la commande 822-date ou `date -R`.
  
  <p>Les nouvelles informations de version sont ajoutées au sommet du fichier
  changelog.  Voici ce à quoi ressemble changelog après :

  <p><example>
  1  gentoo (0.9.12-2) unstable; urgency=low
  2
  3   * Comments about the second revision
  4
  5  -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt; Wed, 11 Nov 1998 22:15:39 +0100
  6
  7  gentoo (0.9.12-1) unstable; urgency=low
  8
  9   * Initial Release.
  10  * This is my first Debian package.
  11
  12 -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt; Wed, 11 Nov 1998 21:02:14 +0100
  13
  14 Local variables:
  15 mode: debian-changelog
  16  add-log-mailing-address: "jrodin@jagor.srce.hr"
  17 End:
  </example>

  <sect id="conffiles">conffiles

  <p>L'une des choses les plus irritantes a propos des logiciels est que vous
  passez beaucoup de temps et d'efforts pour configurer un programme pour voir
  une mise-à-jour détruire tous vos changements. Debian résout ce problème en
  marquant les fichiers de configuration de sorte que quand vous mettez à jour
  un paquet, il vous sera demandé si vous voulez gardez votre vieille
  configuration ou pas. Vous faites ceci en entrant le chemin complet de
  chaque fichier de configuration (en général sous /etc), un par ligne dans un
  fichier nommé conffiles.
  
  <p>Gentoo a un fichier de configuration, /etc/gentoorc, et nous le mettons
  dans ce fichier. En fait, il n'est pas nécessaire d'avoir ce fichier si
  votre programme n'a pas de fichier de configuration.

  <sect id="dirs">dirs

  <p>Ce fichier spécifie les répertoires que notre paquet va créer. Par
  défaut, il ressemble à ceci :

  <p><example>
  1 usr/bin
  2 usr/sbin
  </example>

  <p>Remarquez que le préfixe slash n'est pas inclus. Nous devrions normalement
  le changer comme ceci :

  <p><example>
  1 usr/X11R6/bin
  2 usr/X11R6/man/man1
  </example>

  mais ces répertoires sont déjà créés dans Makefile, donc nous n'avons pas
  besoin de ce fichier, et pouvons l'effacer.

  <sect id="maintscripts">postinst, preinst, postrm, prerm

  <p>Ces fichiers sont appelés des scripts responsable, et vous devriez
  essayer d'éviter les scripts responsable si vous pouvez parce qu'ils sont
  trop compliqués. Pour plus d'information lisez le Manuel de Paquetage.

  <sect id="manpage">manpage.1.ex

  <p>Les fichiers finissant en *.ex sont des exemples pour savoir comment
  ajouter ce genre de support dans le paquet. Pour utiliser l'un d'entre
  eux, éditez le et retirez l'extension .ex.

  <p>Votre programme devrait avoir une page de manuel. S'il n'en a pas, ceci
  est un squelette que vous pouvez remplir. Lisez la page de manuel de <manref
  name="man" section="7"> pour une brève description de la création d'une page
  de manuel. Faites attention de donner à ce fichier le nom du programme et
  l'extension de la section dans laquelle il doit aller. Voici une courte
  liste :

  <p><example>
  Section |     Description      |     Notes
     1     Commandes utilisateur   Commandes ou scripts exécutables.
     2     Appel système           Fonctions fournies par le noyau.
     3     Appel librairie         Fonctions des librairies système.
     4     Fichiers spéciaux       D'ordinaire trouvés dans /dev.
     5     Formats de fichiers     Par ex. le format /etc/password.
     6     Jeux                    Ou d'autres programmes frivoles.
     7     Paquets de macros       Comme les macros de man.
     8     Administration système  Des programmes d'habitude exécutées par root.
     9     Routines noyau          Appels non standards et routines internes.
  </example>

  <p>Donc, la page de manuel de gentoo devrait être appelée gentoo.1, ou
  gentoo.1x parce que c'est un programme X11. Il n'y avait pas de page de
  manuel gentoo.1 dans les sources original, donc j'en ai écrit un à partir de
  l'exemple.

  <sect id="menu">menu.ex

  <p>Les utilisateurs de X Window ont un gestionnaire de fenêtres avec des
  menus qui peuvent être configurés. S'ils ont installés le paquet menu de
  Debian, un ensemble de menu pour chaque programme sur le système sera créé
  pour eux. Ceci n'est pas requis pas le règlement Debian, mais les
  utilisateurs apprécieront certainement. Nous pouvons ajouter Gentoo aux
  menus en éditant ce fichier. Voici le défaut que dh_make crée :

  <p><example>
  ?package(gentoo):needs=X11|text|vc|wm section=Apps/see-menu-manual\
    title="gentoo" command="/usr/bin/gentoo"
  </example>

  <p>Le premier champs spécifie le genre d'interface dont le programme a besoin
  (i.e. text ou X11). Le suivant est le menu et le sous-menu dans lesquels
  l'entrée devrait apparaître. La liste courante des sections se trouve dans
  /usr/doc/menu/html/ch2.html#s2.2. Le troisième est le nom du programme. Le
  quatrième est l'icône pour le programme ou rien s'il n'en n'a pas. Le
  cinquième est le texte réelle qui apparaîtra dans le menu. Le sixième est la
  commande qui lance le programme.

  <p>Maintenant nous changeons l'entrée menu en ceci :

  <p><example>
  ?package(gentoo):needs=X11 section=Apps/Misc \
    title="gentoo" command="/usr/X11R6/bin/gentoo"
  </example>

  <sect id="watch">watch.ex

  <p>Vous pouvez utiliser ce fichier en plus des programmes <manref name="uscan"
  section="1"> et de <manref name="uupdate" section="1"> (dans le paquet
  devscripts) pour surveiller le site duquel vous avez obtenu les sources.
  Lisez les pages de manuel pour plus de détail. Gentoo ne peut pas utiliser
  cette capacité aussi nous effaçons le fichier.

  <p>Nous sommes maintenant prêt a construire le paquet.

  <chapt id="final">Étapes finales

  <sect id="build">Construire le paquet

  <p>Allez dans le répertoire principal de Gentoo
  (/usr/local/src/gentoo/gentoo-0.9.12/) et lancez ceci :

  <p><example>
  dpkg-buildpackage -rfakeroot
  </example>

  <p>Ceci fera tout pour vous, vous avez juste à entrer votre clé secrète
  PGP, deux fois. Une fois que c'est fait, vous verrez quatre fichiers dans le
  répertoire /usr/local/gentoo :

  <p><list>
  <item><em>gentoo_0.9.12-1_i386.deb</em>
  <p>est le paquet binaire complété. Vous pouvez utiliser dpkg ou dselect
  pour l'installer ou le retirer juste comme tout autre paquet.

  <item><em>gentoo_0.9.12-1_i386.changes</em>
  <p>Au fur et à mesure que vous travaillez sur le paquet, son comportement
  va changer et de nouvelles capacités seront ajoutées. Les gens qui
  téléchargent votre paquet peuvent lire ce fichier et voir ce qui a
  changé. Le fichier est généré à partir du fichier
  gentoo-0.9.12/debian/changelog, qui contient les modification par rapport à
  la révision courante du paquet. Il liste aussi les fichiers dans le
  paquet. Les longues chaînes de chiffres sont des sommes MD5 pour le
  fichier. Les personnes téléchargeant vos fichiers peuvent les tester avec
  <manref name="md5sum" section="1"> et si les fichiers ne correspondent pas,
  ils sauront que le fichier a été corrompu ou qu'il a été piraté. Ce fichier
  est signé avec PGP, de sorte que les gens peuvent être encore plus sûrs
  qu'il s'agit bien du votre.

  <item><em>gentoo_0.9.12.orig.tar.gz</em>
  <p>Ceci est le code source original rassemblé de sorte que si quelqu'un
  d'autre veut recréer votre paquet depuis le début, il le peut. Ou si il
  n'utilise pas le système de paquet Debian, mais a besoin de télécharger
  le code source et de le compiler.

  <item><em>gentoo_0.9.12-1.dsc</em>
  <p>Ceci est un résumé du contenu du code source. Ce fichier est généré à
  partir du fichier gentoo-0.9.12/debian/control, et est utilisé pour
  décompresser les sources avec <manref name="dpkg-source" section="1">. Ceci
  est un fichier signé avec PGP, de sorte que les gens peuvent être sûrs
  qu'il s'agit bien du votre.
  </list>

  <sect id="errcheck">Contrôler les erreurs dans votre paquet

  <p>Lancez <manref name="lintian" section="1"> sur votre fichier .changes; ce
  programme va vérifier un grand nombre d'erreurs de paquetage. La commande
  est :

  <p><example>
  lintian -i gentoo_0.9.12-1_i386.changes
  </example>

  <p>S'il s'avère qu'il y a des erreurs (les lignes commençant avec E:), lisez
  l'explication (les lignes N:), corrigez les erreurs, et reconstruisez avec
  dpkg-buildpackage. S'il y a des lignes qui commencent avec W:, il s'agit de
  mises en garde, donc vous pouvez être sûr que votre paquet est bon (mais
  il nécessite certainement des modifications mineures).

  <p>Regardez dans votre paquet en utilisant un gestionnaire de fichiers comme
  <manref name="mc" section="1"> ou décompressez-le dans une place temporaire
  en utilisant <manref name="dpkg-deb" section="1">.

  <p>Installez le paquet pour le tester vous-même. Essayez de l'installer
  sur d'autres machines que la votre et vérifier attentivement chaque
  avertissement ou erreur.

  <p>Plus tard, quand vous construisez une nouvelle version, vous devriez
  faire les choses suivantes pour assurer une mise à jour de base de votre
  paquet :

  <list>
  <item>mettez à jour à partir de la version précédente (et à partir de la
  version de la dernière distribution Debian),
  <item>revenez à la version précédente.
  <item>installez le paquet comme un nouveau paquet (i.e., sans version
  précédente d'installée),
  <item>retirez le, réinstallez le à nouveau, et puis purgez le.
  </list>

  <sect id="upload">Envoyer votre paquet

  <p>Maintenant que vous avez testé votre nouveau paquet en détail, vous
  devez télécharger ces fichiers à master.debian.org, en utilisant <manref
  name="dupload" section="1">. D'abord vous devez configurer dupload. Copier
  le fichier par défaut depuis /etc dans votre répertoire utilisateur :

  <p><example>
  cp /etc/dupload.conf ~/.dupload.conf
  </example>

  <p>Puis éditez ce fichier (~/.dupload.conf), trouvez la partie qui commence
  avec '$cfg{master}' et changez ces lignes (pas nécessairement dans cet
  ordre) :
  <example>
          login => getlogin() || $ENV{USER} || $ENV{LOGNAME},
          visibleuser => getlogin() || $ENV{USER} || $ENV{LOGNAME},
          visiblename => "",
          fullname => "",
  </example>
  en des valeurs équivalentes a celles-ci (changez mes paramètres en les
  votres) :
  <example>
          login => "joy",
          visibleuser => "jrodin",
          visiblename => "jagor.srce.hr",
          fullname => "Josip Rodin",
  </example>

  <p>Le premier est votre login sur master.debian.org (vous êtes devenu un
  développeur Debian, n'est-ce-pas ? Sinon, lisez la Référence du
  Développeur), les deuxième et troisième sont les parties de votre courriel de
  contact avant et après le '@', et le quatrième est votre nom complet.

  <p>Puis connectez vous à votre fournisseur Internet, vérifiez une fois
  encore que vous êtes dans le répertoire /usr/local/src/gentoo, et lancez
  cette commande :

  <p><example>
  dupload --to master gentoo_0.9.12-1_i386.changes
  </example>

  <p>Dupload vous demandera pour votre mot de passe sur master.debian.org,
  téléchargera vos paquets, et donnera une annonce courte de votre
  téléchargement sur <email/debian-devel-changes@lists.debian.org/.

  <p>Si vous vivez en Europe, vous pouvez utiliser d'autres queues de
  téléchargement à la place de master. Pour des détails lisez <manref
  name="dupload" section="5"> et la Référence du Développeur.

  <sect id="whereishelp">Où demander de l'aide

  <p>Avant de vous décider à poser une question dans un lieu public, s.v.p.
  RTFM. Ceci inclut la documentation sous /usr/doc/dpkg, /usr/doc/debian,
  /usr/doc/debhelper et les pages de manuel/d'info pour tous les programmes
  mentionnés dans cet article. Quand vous recevez un rapport de bogue (oui, un
  rapport de bogue réel!) vous saurez qu'il est temps de plonger dans <url
  name="Système de Suivi de Bogues Debian" id="http://www.debian.org/Bugs/">
  et lisez la documentation là.

  <p>En joignant la liste de discussion Debian Mentors à
  <email/debian-mentors@lists.debian.org/ vous pouvez joindre un développeur
  Debian expérimenté qui vous aidera avec les questions que vous pouvez avoir.
  Vous pouvez y souscrire en envoyant un courriel à
  <email/debian-mentors-request@lists.debian.org/ avec le mot 'subscribe' dans
  le sujet du message.

  <p>Si vous avez encore des questions, posez les sur la liste de discussion
  Debian Developers à <email/debian-devel@lists.debian.org/. Vous pouvez y
  souscrire en envoyant un courriel à
  <email/debian-devel-request@lists.debian.org/ avec le mot 'subscribe' dans
  le sujet du message. Si vous êtes déjà un développeur Debian, vous devriez y
  être souscrit de toute manière.

  <p>Même si tout marche bien, il est temps de commencer à prier. Pourquoi ?
  Parce que dans quelques heures (ou jours) les utilisateurs du monde entier
  vont commencer à utiliser votre paquet, et si vous avec fait des erreurs
  critiques vous serez bombardé par les courriels des utilisateurs Debian
  furieux... Je plaisante. :-)

  <p>Relaxez-vous et soyez prêt pour les rapports de bogues, parce qu'il y aura
  beaucoup plus de travail à faire avant qu'il soit parfaitement conforme
  aux règles Debian (une fois encore, lisez la <em>documentation réelle</em>
  pour les détails). Bonne chance !
 </book>

</debiandoc>
