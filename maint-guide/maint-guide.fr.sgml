<!DOCTYPE debiandoc PUBLIC "-//DebianDoc//DTD DebianDoc//EN" [

<!-- textual data entities -->
<!-- first definition wins in SGML -->
<!ENTITY % default  SYSTEM "default.ent">  %default;

]>
<!-- CVS revision of this document "$Revision: 1.44 $"  -->
<!-- CVS revision of original english document "1.98"  -->

<!-- TRANSLATORS PLEASE NOTE!!! -->
<!-- Do NOT use <prgn> or <package> tags in your section or chapter IDs -->
<!-- You will break the French ps/pdf document generation -->
<!-- It's a bug in debiandoc-sgml, See Debian Bug #562325 -->


<debiandoc>
 <book>
  <titlepag>
   <title>
     Guide du nouveau responsable Debian
   </title>
   <author>
     <name>Josip Rodin </name><email>joy-mg@debian.org</email>
   </author>
<translator>
 <name>Mohammed Adnène Trojette</name>
 <email>adn+deb@diwi.org</email>
</translator>
<translator>
 <name>et les membres de la liste</name>
 <email>debian-l10n-french@lists.debian.org</email>
</translator>
<translator>
 <name>Frédéric Dumont (ancien traducteur)</name>
 <email>frederic.dumont@easynet.be</email>
</translator>
   <version>
     version&nbsp;1.2.3, 18&nbsp;janvier&nbsp;2005.
   </version>
   <copyright>
    <copyrightsummary>
      Copyright &copy; 1998-2002 Josip Rodin.
    </copyrightsummary>
    <p>
      Ce document peut être utilisé selon les termes de la Licence publique 
      générale de GNU version&nbsp;2 ou suivante.
    </p>
    <p>
      Ce document a été créé en se basant sur les deux suivants&nbsp;:
    </p>
    <p>
      Making a Debian Package (the Debmake Manual), copyright &copy; 1997 
      Jaldhar Vyas.
    </p>
    <p>
      The New-Maintainer's Debian Packaging Howto, copyright &copy; 1997 
      Will Lowe.
    </p>
   </copyright>
  </titlepag>
  <toc detail="sect">
 
 <chapt id="start">Commencer de la bonne manière
  <p>
    Ce document essaie de décrire à l'utilisateur Debian moyen, et au 
    développeur en devenir, la construction d'un paquet Debian. Il utilise 
    un langage assez courant et est complété par des exemples, selon le 
    vieux proverbe romain&nbsp;: <em>Longum iter est per preaecepta, breve et 
    efficax per exempla</em> (c'est long par la règle, court et efficace par 
    l'exemple).
  </p>
  <p>
    Une des choses qui font de Debian une distribution de si haut niveau est 
    son système de paquets. Bien qu'il existe une grande quantité de 
    logiciels au format Debian, vous devrez parfois installer un logiciel 
    qui ne l'est pas. Vous pouvez vous demander comment faire vos propres 
    paquets et peut-être pensez-vous que c'est une tâche très difficile. Eh 
    bien, si vous êtes vraiment un débutant sous Linux, c'est dur, mais si 
    vous étiez un débutant, vous ne seriez pas en train de lire ce 
    document. Vous devez en savoir un peu sur la programmation Unix, mais 
    vous n'avez certainement pas besoin d'être un magicien.
  </p>
  <p>
    Une chose est certaine, cependant&nbsp;: pour correctement développer et 
    maintenir des paquets Debian, vous aurez besoin de journées/homme. Ne 
    vous faites pas d'illusion, pour que votre système fonctionne, les 
    responsables doivent à la fois être techniquement compétents et rapides.
  </p>
  <p>
    Ce document va expliquer toutes les étapes les plus petites (et 
    peut-être a priori insignifiantes), vous aider à créer ce premier 
    paquet, et à gagner de l'expérience pour construire les versions 
    suivantes ainsi peut-être que d'autres paquets.
  </p>
  <p>
    Les nouvelles versions de ce document devraient toujours être 
    disponibles en ligne sur <url 
    id="http://www.debian.org/doc/maint-guide/" 
    name="http://www.debian.org/doc/maint-guide/">.
    La version de référence en anglais est disponible sur <url
    id="http://www.debian.org/doc/maint-guide/index.en.html" 
    name="http://www.debian.org/doc/maint-guide/index.en.html">
    et dans le paquet 
    «&nbsp;<package>maint-guide</package>&nbsp;». La traduction en français 
    est également disponible dans le paquet 
    «&nbsp;<package>maint-guide-fr</package>&nbsp;».
  </p>
  <sect id="needprogs">Programmes nécessaires au développement
   <p>
     Avant de commencer quoi que ce soit, vous devriez vous assurer que vous 
     avez correctement installé certains paquets supplémentaires nécessaires 
     pour le développement. Notez que la liste ne contient aucun paquet 
     marqué «&nbsp;essentiel&nbsp;» ou «&nbsp;requis&nbsp;» - nous supposons 
     que vous avez déjà installé ceux-ci.
   </p>
   <p>
     Cette version du document a été mise à jour pour les paquets de 
     Debian&nbsp;2.2 (<em>Potato</em>) et 3.0 (<em>Woody</em>).
   </p>
   <p>
     Les paquets suivants sont fournis dans l'installation standard de 
     Debian&nbsp;2.1, de sorte que vous les avez probablement déjà (ainsi 
     que les paquets supplémentaires dont ils dépendent). Néanmoins, vous 
     devriez le vérifier avec «&nbsp;dpkg -s &lt;paquet&gt;&nbsp;».
    <list>
     <item>
      <p>
        <package>dpkg-dev</package> - ce paquet contient les outils 
        nécessaires pour dépaqueter, construire et télécharger les paquets 
        sources Debian (voir <manref section="1" name="dpkg-source">).
      </p>
     </item>
     <item>
      <p>
        <package>file</package> - ce programme bien pratique peut déterminer 
        la nature d'un fichier (voir <manref section="1" name="file">).
      </p>
     </item>
     <item>
      <p>
        <package>gcc</package> - le compilateur C de GNU, nécessaire si 
        votre programme, comme la plupart, est écrit en C (voir <manref 
        section="1" name="gcc">). Ce paquet va aussi «&nbsp;tirer&nbsp;» 
        plusieurs autres paquets tels que <package>binutils</package> qui 
        inclut les programmes utilisés pour assembler et lier des fichiers 
        objets (voir «&nbsp;info binutils&nbsp;» dans le paquet 
        <package>binutils-doc</package>) et <package>cpp</package>, le 
        préprocesseur C (voir <manref section="1" name="cpp">).
      </p>
     </item>
     <item>
      <p>
        <package>g++</package> - le compilateur C++ de GNU, nécessaire si 
        votre programme est écrit en C++ (voir <manref section="1" 
        name="g++">).
      </p>
     </item>
     <item>
      <p>
        <package>libc6-dev</package> - les bibliothèques et fichiers 
        d'en-têtes C dont gcc a besoin pour les lier aux fichiers objets 
        créés (voir «&nbsp;info libc&nbsp;» dans le paquet 
        <package>glibc-doc</package>).
      </p>
     </item>
     <item>
      <p>
        <package>make</package> - d'ordinaire, la création d'un programme se 
        fait en plusieurs étapes. Plutôt que d'avoir à taper les mêmes 
        commandes encore et encore, vous pouvez utiliser ce programme pour 
        en automatiser le processus, en créant des fichiers 
        «&nbsp;Makefile&nbsp;» (voir «&nbsp;info make&nbsp;»).
      </p>
     </item>
     <item>
      <p>
        <package>patch</package> - ce programme très utile prend un fichier 
        contenant une liste de différences (produite par le programme diff) 
        et l'applique au fichier original, produisant une version mise à 
        jour (voir <manref section="1" name="patch">).
      </p>
     </item>
     <item>
      <p>
        <package>perl</package> - Perl est un des langages de script les 
        plus utilisés sur les systèmes modernes similaires à Unix, souvent 
        qualifié de «&nbsp;couteau suisse d'Unix&nbsp;» (voir <manref 
        section="1" name="perl">).
      </p>
     </item>
    </list>
   </p>
   <p>
     Vous devrez probablement aussi installer les programmes suivants&nbsp;:
    <list>
     <item>
      <p>
        <package>autoconf</package> et <package>automake</package> - 
        beaucoup de nouveaux programmes utilisent des scripts de 
        configuration et des fichiers Makefile prétraités à l'aide de 
        programmes comme ceux-ci (voir «&nbsp;info autoconf&nbsp;», 
        «&nbsp;info automake&nbsp;»)&nbsp;;
      </p>
     </item>
     <item>
      <p>
        <package>dh-make</package> et <package>debhelper</package> - dh-make 
        est nécessaire pour créer le squelette de notre exemple de paquet et 
        il utilise certains outils de debhelper pour créer les paquets. Ils 
        ne sont pas indispensables pour la création des paquets, mais ils 
        sont <strong>fortement</strong> recommandés pour les nouveaux 
        responsables. Ils rendent le processus complet bien plus facile à 
        démarrer et à contrôler par la suite (voir <manref section="1" 
        name="dh_make">, <manref section="1" name="debhelper">, 
        /usr/share/doc/debhelper/README)&nbsp;;
      </p>
     </item>
     <item>
      <p>
        <package>devscripts</package> - ce paquet contient de jolis scripts 
        utiles qui peuvent aider les responsables, mais ils ne sont pas 
        indispensables pour la création de paquets (voir 
        /usr/share/doc/devscripts/README.debian.gz)&nbsp;;
      </p>
     </item>
     <item>
      <p>
        <package>fakeroot</package> - cet utilitaire vous laisse prétendre 
        être le superutilisateur, ce qui est nécessaire pour certaines 
        parties du processus de construction (voir <manref section="1" 
        name="fakeroot">)&nbsp;;
      </p>
     </item>
     <item>
      <p>
        <package>gnupg</package> - un outil qui vous permet de 
        <em>signer</em> numériquement les paquets. Ceci est spécialement 
        important si vous comptez les distribuer à d'autres personnes, et 
        c'est certainement ce que vous ferez quand votre travail sera inclus 
        dans la distribution Debian (voir <manref section="1" 
        name="gpg">)&nbsp;;
      </p>
     </item>
     <item>
      <p>
        <package>g77</package> - le compilateur FORTRAN de GNU, nécessaire 
        si votre programme est écrit en FORTRAN (voir <manref section="1" 
        name="g77">)&nbsp;;
      </p>
     </item>
     <item>
      <p>
        <package>gpc</package> - le compilateur PASCAL de GNU, nécessaire si 
        votre programme est écrit en Pascal. Digne d'être mentionné ici, 
        <package>fp-compiler</package>, le compilateur pascal libre, est 
        également bon pour cette tâche (voir <manref section="1" 
        name="gpc">, <manref section="1" name="ppc386">)&nbsp;;
      </p>
     </item>
     <item>
      <p>
        <package>xutils</package> - certains programmes, d'ordinaire ceux 
        conçus pour X11, utilisent aussi ces programmes pour générer les 
        fichiers Makefile à partir d'un ensemble de fonctions macros (voir 
        <manref section="1" name="imake">, <manref section="1" 
        name="xmkmf">)&nbsp;;
      </p>
     </item>
     <item>
      <p>
        <package>lintian</package> - c'est le vérificateur de paquet Debian, 
        qui peut vous indiquer de nombreuses erreurs courantes après la 
        construction de votre paquet et expliquer les erreurs trouvées (voir 
        <manref section="1" name="lintian">, <manref section="1" 
        name="diffstat">, 
        /usr/share/doc/lintian/lintian.html/index.html)&nbsp;;
      </p>
     </item>
     <item>
      <p>
        <package>pbuilder</package> - ce paquet contient des programmes 
        utilisés pour créer et maintenir un environnement chroot. Construire 
        un paquet Debian dans cet environnement permet de vérifier les 
        dépendances correctes de construction et évite les erreurs FTBFS 
        (voir <manref section="8" name="pbuilder"> et <manref section="1" 
        name="pdebuild">).
      </p>
     </item>
    </list>
   </p>
   <p>
     Enfin, ces paquets <em>très importants</em> doivent être installés et 
     leur contenu lu en parallèle à ce document&nbsp;:
    <list>
     <item>
      <p>
        <package>debian-policy</package> - la Charte inclut des explications 
        sur la structure et le contenu de l'archive Debian, plusieurs 
        considérations sur l'architecture du système d'exploitation, la 
        norme de hiérarchie des fichiers (qui dit où chaque fichier ou 
        répertoire doit aller), etc. Le plus important pour vous est qu'il 
        décrit les critères que chaque paquet doit vérifier pour être inclus 
        dans la distribution (voir &debian-policy;)&nbsp;;
      </p>
     </item>
     <item>
      <p>
        <package>developers-reference</package> - concerne tout ce qui n'est 
        pas spécifique aux détails techniques de la création de paquets, 
        comme la structure des archives, comment renommer, rendre orphelin, 
        choisir un paquet, faire un NMU (une version du paquet non faite par 
        le responsable), comment gérer les bogues, les meilleures pratiques 
        d'empaquetage, où et quand faire des envois de paquets, etc. (voir 
        &developers-reference;).
      </p>
     </item>
    </list>
   </p>
   <p>
     Les courtes descriptions qui sont données ci-dessus ne servent que 
     d'introduction à ce que fait chaque paquet. Avant de continuer, 
     veuillez lire attentivement la documentation de chaque programme, au 
     moins l'usage standard. Cela peut vous sembler fastidieux maintenant, 
     mais plus tard vous serez <em>très</em> content de l'avoir fait.
   </p>
   <p>
     Remarque&nbsp;: <package>debmake</package> est un paquet qui contient 
     certains programmes qui fonctionnent d'une manière similaire à dh-make, 
     mais son usage spécifique n'est <strong>pas</strong> couvert dans ce 
     document, parce qu'il est obsolète. Veuillez lire le <url 
     id="http://www.debian.org/~jaldhar/" name="manuel Debmake"> pour plus 
     d'informations.
   </p>
  </sect>
  <sect id="otherinfo">Plus d'informations
   <p>
     Vous pouvez faire deux types de paquets&nbsp;: source et binaire. Un 
     paquet source contient le code que vous pouvez compiler en un 
     programme. Un paquet binaire contient juste le programme fini. Ne 
     mélangez pas les termes comme source du programme et le paquet source 
     du programme&nbsp;! Veuillez lire les autres manuels si vous avez 
     besoin de plus de détails sur la terminologie.
   </p>
   <p>
     Debian utilise le terme «&nbsp;responsable&nbsp;» pour la personne qui 
     fait des paquets, «&nbsp;auteur&nbsp;» pour la personne qui a créé le 
     programme, et «&nbsp;responsable amont&nbsp;» pour la personne qui 
     maintient le programme actuellement. D'ordinaire, l'auteur et le 
     responsable amont sont une seule et même personne. Si vous avez écrit 
     un programme, et que vous voulez qu'il soit dans Debian, vous pouvez 
     remplir une demande pour devenir un responsable.
   </p>
   <p>
     Après avoir construit votre paquet (ou pendant la création), vous 
     devrez devenir responsable Debian officiel si vous souhaitez que votre 
     programme soit dans la prochaine distribution (si le programme est 
     utile, pourquoi pas&nbsp;?) Ce processus est expliqué dans la Référence 
     du développeur. Veuillez la lire.
   </p>
  </sect>
 </chapt>
 <chapt id="first"> Premiers pas

  <sect id="choose">Choisir votre programme
   <p>
     Vous avez probablement choisi le paquet que vous voulez créer. La 
     première chose à faire est de vérifier si le paquet se trouve déjà dans 
     la distribution. Si vous utilisez la distribution «&nbsp;stable&nbsp;», 
     le mieux est d'aller sur la <url 
     id="http://www.debian.org/distrib/packages" name="page de recherche des 
     paquets">. Si vous utilisez une distribution «&nbsp;unstable&nbsp;» 
     <strong>courante</strong>, vérifiez-le avec ces commandes&nbsp;:
    <example>
  dpkg -s programme
  dpkg -l '*programme*'
  </example>
   </p>
   <p>
     Si le paquet existe déjà, et bien, installez-le&nbsp;:-). S'il se 
     trouve qu'il est orphelin &mdash; si son responsable est «&nbsp;Debian 
     QA Group&nbsp;», vous devriez pouvoir le reprendre. Consultez <url 
     id="http://www.debian.org/devel/wnpp/orphaned" name="la liste des 
     paquets orphelins"> et <url 
     id="http://www.debian.org/devel/wnpp/rfa_bypackage" name="la liste des 
     paquets disponibles pour adoption"> pour vérifier que le paquet est 
     bien disponible.
   </p>
   <p>
     Si vous pouvez adopter le paquet, récupérez les sources (avec quelque 
     chose comme <tt>apt-get source nom_du_paquet</tt>) et 
     examinez-les. Malheureusement ce document n'inclut pas d'informations 
     exhaustives sur l'adoption de paquets. Cependant vous ne devriez pas 
     avoir de problèmes pour comprendre comment le paquet fonctionne puisque 
     quelqu'un a déjà fait la configuration pour vous. Continuez quand même 
     à lire ce document, une bonne partie des conseils qui suivent seront 
     applicables dans votre cas.
   </p>
   <p>
     Si le paquet est nouveau, et que vous décidez que vous voulez le voir 
     dans Debian, procédez comme suit&nbsp;:
    <list>
     <item>
      <p>
        vérifiez que personne d'autre ne travaille déjà sur ce paquet en 
        consultant <url id="http://www.debian.org/devel/wnpp/being_packaged" 
        name="la liste des paquets en cours de création">. Si quelqu'un 
        travaille déjà dessus, contactez-le si vous pensez que vous le 
        devez. Sinon, trouvez un autre programme intéressant dont personne 
        n'est responsable.
      </p>
     </item>
     <item>
      <p>
        le programme <strong>doit</strong> avoir une licence, si possible 
        libre conformément aux <url 
        id="http://www.debian.org/social_contract.html#guidelines" 
        name="principes du logiciel libre selon Debian">. S'il n'est pas 
        conforme à certaines de ces règles mais peut quand même être 
        distribué, il peut malgré tout être inclus dans les sections 
        «&nbsp;contrib &nbsp;» ou «&nbsp;non-free&nbsp;» de Debian. Si vous 
        ne savez pas trop où il doit aller, postez la licence sur 
        <email>debian-legal@lists.debian.org</email> et demandez conseil.
      </p>
     </item>
     <item>
      <p>
        le programme ne devrait certainement <strong>pas</strong> être 
        setuid root, ou encore mieux, il ne devrait pas être setuid ou 
        setgid quoi que ce soit.
      </p>
     </item>
     <item>
      <p>
        le programme ne devrait pas être un démon, ou quelque chose qui va 
        dans les répertoires */sbin, ou ouvre un port comme root.
      </p>
     </item>
     <item>
      <p>
        le programme devrait être sous forme de binaire exécutable, les 
        bibliothèques sont plus dures à gérer.
      </p>
     </item>
     <item>
      <p>
        il devrait être bien documenté, et le code doit être compréhensible 
        (c'est-à-dire, pas volontairement obscur).
      </p>
     </item>
     <item>
      <p>
        vous devriez contacter le(s) auteur(s) du programme pour vérifier 
        qu'il(s) est(sont) d'accord pour la création du paquet. Il est 
        important d'être à même de consulter le(s) auteur(s) à propos du 
        programme en cas de problèmes spécifiques à celui-ci, aussi 
        n'essayez pas de créer un paquet à partir de programmes non 
        maintenus.
      </p>
     </item>
     <item>
      <p>
        enfin, vous devez être sûr qu'il fonctionne, et l'avoir testé 
        pendant quelques temps.
      </p>
     </item>
    </list>
   </p>
   <p>
     Bien sûr, toutes ces remarques ne sont que des mesures de sécurité, et 
     ont pour but de vous sauver d'utilisateurs fous de rage si vous faites 
     une erreur dans un démon setuid. Quand vous aurez plus d'expérience 
     dans la création des paquets, vous serez capable de faire de tels 
     paquets, mais même les développeurs les plus expérimentés consultent la 
     liste de discussion debian-mentors en cas de doute. Et là les gens 
     seront heureux de vous aider.
   </p>
   <p>
     Pour plus d'informations à ce sujet, consultez la Référence du 
     Développeur.
   </p>
  </sect>
  <sect id="getit"> Obtenir le programme, et l'essayer

   <p>
     La première chose à faire est de trouver et de télécharger le paquet 
     original. Je suppose que vous avez déjà le fichier source que vous avez 
     pris sur la page web de l'auteur. Les sources pour les logiciels Unix 
     libres sont d'habitude au format tar/gzip avec l'extension .tar.gz, et 
     contiennent normalement un sous-répertoire nommé programme-version avec 
     toutes les sources dedans. Si le source de votre programme est 
     disponible dans une autre sorte d'archive (par exemple, le programme se 
     termine par '.Z' ou '.zip'), décompressez-le avec les outils adéquats 
     ou demandez sur la liste de discussion debian-mentors si vous n'êtes 
     pas sûr quant à la façon de le décompresser correctement (indice&nbsp;: 
     utilisez «&nbsp;file archive.extension&nbsp;»).
   </p>
   <p>
     Comme exemple, je vais utiliser un programme nommé 
     «&nbsp;gentoo&nbsp;», un gestionnaire de fichiers pour X utilisant 
     GTK+. Sachez qu'il y a déjà un paquet pour ce programme, et qu'il a 
     changé substantiellement depuis que ce texte a été écrit la première 
     fois.
   </p>
   <p>
     Créez un sous-répertoire sous votre répertoire racine nommé 
     «&nbsp;debian&nbsp;» ou «&nbsp;deb&nbsp;» ou quoi que ce soit d'adéquat 
     (ou le nom du programme, <file>~/gentoo</file>, ferait l'affaire dans 
     notre cas). Placez l'archive téléchargée dedans, et décompressez-la 
     avec «&nbsp;tar -xzf gentoo-0.9.12.tar.gz&nbsp;». Assurez-vous qu'il 
     n'y a pas d'erreurs, même «&nbsp;sans importance&nbsp;», parce qu'alors 
     il y aura des problèmes pour décompresser sur les systèmes d'autres 
     personnes, dont les outils de décompression pourraient ne pas gérer ces 
     erreurs.
   </p>
   <p>
     Maintenant vous avez un autre sous-répertoire, nommé 
     «&nbsp;gentoo-0.9.12&nbsp;». Allez dans ce répertoire et lisez 
     <strong>attentivement</strong> la documentation fournie. Il s'agit 
     d'habitude de fichiers nommés README*, INSTALL*, *.lsm ou 
     *.html. Dedans, vous devez trouver les instructions pour compiler et 
     installer correctement le programme (elles supposent très probablement 
     que vous voulez installer dans le répertoire /usr/local/bin&nbsp;; ce 
     n'est pas le cas, mais on reviendra sur ce point plus tard dans <ref 
     id="destdir">).
   </p>
   <p>
     La méthode varie d'un programme à l'autre, mais de nombreux programmes 
     modernes viennent avec un script «&nbsp;configure&nbsp;» qui configure 
     les sources selon votre système et s'assure que votre système est à 
     même de les compiler. Après la configuration avec 
     «&nbsp;./configure&nbsp;», les programmes sont compilés avec 
     «&nbsp;make&nbsp;». Certains d'entre eux supportent «&nbsp;make 
     check&nbsp;», pour se tester eux-mêmes. L'installation dans les 
     répertoires de destination est généralement obtenue avec «&nbsp;make 
     install&nbsp;».
   </p>
   <p>
     Maintenant, essayez de compiler et d'exécuter votre programme, pour 
     vous assurer qu'il fonctionne correctement et ne casse rien d'autre 
     quand il est installé ou qu'il tourne.
   </p>
   <p>
     Sachez aussi que vous pouvez généralement entrer «&nbsp;make 
     clean&nbsp;» (ou mieux, «&nbsp;make distclean&nbsp;») pour nettoyer le 
     répertoire de compilation. Parfois, il y a même un «&nbsp;make 
     uninstall&nbsp;» qui peut être utilisé pour retirer tous les fichiers 
     installés.
   </p>
  </sect>
  <sect id="namever">Les noms et versions des paquets

   <p>
     Vous devriez commencer la création du paquet avec un répertoire source 
     complètement propre (originel), ou plus simplement avec les sources 
     fraîchement décompressées.
   </p>
   <p>
     Pour que le paquet soit correctement construit, vous devez changer le 
     nom du programme en minuscule (si ce n'est déjà fait), et vous devriez 
     changer le répertoire source en &lt;nompaquet&gt;-&lt;version&gt;.
   </p>
   <p>
     Si le nom du programme consiste en plus d'un mot, réduisez-le à un mot, 
     ou faites une abréviation. Par exemple, le paquet du programme 
     «&nbsp;John's little editor for X&nbsp;» serait nommé johnledx, ou 
     jle4x, ou quoi que vous vouliez, aussi longtemps qu'il reste sous une 
     limite raisonnable, en général 20&nbsp;caractères.
   </p>
   <p>
     Vérifiez aussi la version exacte du programme (qui sera inclus dans la 
     version du paquet). Si ce logiciel n'est pas numéroté avec un numéro de 
     version comme X.Y.Z, mais avec une date de distribution, vous pouvez 
     utiliser cette date comme numéro de version, avec comme préfixe 
     «&nbsp;0.0.&nbsp;» (juste au cas où les responsables amont décident de 
     distribuer une jolie version comme 1.0). Donc, si la date est le 
     19&nbsp;décembre&nbsp;1998, vous pouvez utilisez 0.0.19981219 comme 
     chaîne pour la version.
   </p>
   <p>
     Certains ne seront pas numérotés du tout, auquel cas vous devriez 
     contacter le responsable amont pour voir s'il a une autre méthode de 
     gestion des révisions.
   </p>
  </sect>
  <sect id="dh_make"> «&nbsp;Debianisation&nbsp;» initiale

   <p>
     Vérifiez que vous êtes dans le répertoire du code source du programme, 
     et lancez ceci&nbsp;:
   </p>
   <p>
    <example>
  dh_make -e votre.adresse@de.responsable -f ../gentoo-0.9.12.tar.gz
  </example>
   </p>
   <p>
     Bien sûr, remplacez la chaîne 
     «&nbsp;votre.adresse@de.responsable&nbsp;» avec votre adresse 
     électronique pour l'inclure dans l'entrée changelog et dans d'autres 
     fichiers, et le nom du fichier par le nom de la source d'archive 
     originale. Voyez <manref section="1" name="dh_make"> pour plus de 
     détails.
   </p>
   <p>
     Des informations sont affichées. Il vous demande quelle sorte de paquet 
     vous voulez créer. Gentoo est un paquet binaire simple &mdash; il ne 
     crée qu'un exécutable, et donc un seul fichier .deb &mdash; donc nous 
     sélectionnons la première option, avec la touche «&nbsp;s&nbsp;», 
     vérifions l'information sur l'écran et confirmons en pressant 
     &lt;Entrée&gt;.
   </p>
   <p>
     Après cette exécution de <prgn>dh_make</prgn>, une copie de l'archive 
     TAR est créée sous <file>gentoo_0.9.12.orig.tar.gz</file> dans le 
     répertoire parent pour permettre la création d'un paquet source Debian 
     non natif avec le <file>diff.gz</file>. Veuillez noter deux aspects 
     clés dans ce nom de fichier&nbsp;:
    <list compact="compact">
     <item>
      <p>
        le nom de paquet et la version sont séparés par 
        «&nbsp;<tt>_</tt>&nbsp;»&nbsp;
      </p>
     </item>
     <item>
      <p>
        il y a «&nbsp;<tt>orig.</tt>&nbsp;» avant le 
        «&nbsp;<tt>tar.gz</tt>&nbsp;».
      </p>
     </item>
    </list>
   </p>
   <p>
     Rappelons-le, en tant que nouveau responsable, vous ne devriez pas 
     créer des paquets compliqués, par exemple&nbsp;:
    <list compact="compact">
     <item>
      <p>
        des paquets à exécutables multiples&nbsp;;
      </p>
     </item>
     <item>
      <p>
        des paquets de bibliothèque&nbsp;;
      </p>
     </item>
     <item>
      <p>
        des formats de fichier source n'étant ni en <tt>tar.gz</tt> ni 
        <tt>tar.bz2</tt>&nbsp;;
      </p>
     </item>
     <item>
      <p>
        une archive TAR source ayant des contenus non distribuables.
      </p>
     </item>
    </list>
     Ce n'est pas si difficile, mais cela requiert un peu plus de 
     connaissances, et nous n'entrerons pas dans les détails ici.
   </p>
   <p>
     Notez que vous ne pouvez exécuter <prgn>dh_make</prgn> <strong>qu'une 
     fois</strong>, et qu'il ne se comportera pas correctement si vous 
     l'exécutez à nouveau dans le même répertoire déjà debianisé. Cela 
     signifie aussi que vous devrez utiliser une autre méthode pour 
     distribuer une nouvelle révision ou une nouvelle version de votre 
     paquet dans le futur. Pour plus d'informations à ce sujet, lisez <ref 
     id="update">.
   </p>
  </sect>
 </chapt>
 <chapt id="modify">Modifier les sources

  <p>
    Normalement, les programmes s'installent d'eux-mêmes dans les 
    sous-répertoires /usr/local. Mais les paquets Debian ne doivent pas 
    utiliser ce répertoire, car il est réservé à l'usage privé de 
    l'administrateur système (ou de l'utilisateur). Cela signifie que vous 
    devez examiner le système de création de votre programme, en général en 
    commençant par le Makefile. C'est le script que <manref section="1" 
    name="make"> utilisera pour automatiser la création du programme. Pour 
    plus de détails sur les Makefile, regardez <ref id="rules">.
  </p>
  <p>
    Notez que si votre programme utilise GNU <manref section="1" 
    name="automake"> et/ou <manref section="1" name="autoconf">, ce qui 
    signifie que les sources incluent des fichiers Makefile.am et/ou 
    Makefile.in, respectivement, vous devrez modifier ces fichiers, parce 
    que chaque appel d'automake va écraser les Makefile.in avec des 
    informations générées à partir des Makefile.am, et que chaque appel de 
    ./configure fera de même avec les fichiers Makefile, avec des données 
    des Makefile.in. Éditer les fichiers Makefile.am requiert des 
    connaissances sur automake, que vous pouvez apprendre dans la section 
    info d'automake, alors qu'éditer les fichiers Makefile.in est 
    globalement identique à l'édition de fichiers Makefile, si ce n'est 
    qu'il faut faire attention à toutes les variables, à savoir toute chaîne 
    entourée de «&nbsp;@&nbsp;», comme par exemple @CFLAGS@ ou @LN_S@, qui 
    sont remplacées par des valeurs réelles à chaque appel de 
    ./configure. Veuillez lire <file>&autotools-dev;</file> avant de 
    commencer.
  </p>
  <p>
    Notez qu'il n'y a pas la place ici pour entrer dans <em>tous</em> les 
    détails sur les modifications, mais voici quelques-uns des problèmes qui 
    reviennent souvent.
  </p>
  <sect id="destdir">Installer dans un sous-répertoire

   <p>
     La plupart des programmes ont une certaine manière de s'installer dans 
     la structure de répertoires de votre système, de sorte que leurs 
     exécutables sont inclus dans votre $PATH, et que vous trouvez leurs 
     documentation et pages de manuel aux places habituelles. Cependant, si 
     vous faisiez cela, le programme serait installé au milieu de tout ce 
     qui est déjà sur votre système. Les outils de création de paquet 
     auraient plus de difficultés pour décider ce qui appartient ou non à 
     votre paquet.
   </p>
   <p>
     Dès lors, vous devez faire autre chose&nbsp;: installer le programme 
     dans un sous-répertoire temporaire à partir duquel les outils du 
     responsable vont construire un paquet .deb fonctionnel. Tout ce qui est 
     contenu dans ce répertoire sera installé sur le système de 
     l'utilisateur quand il installe votre paquet, la seule différence est 
     que dpkg installera les fichiers dans le répertoire racine.
   </p>
   <p>
     Ce répertoire temporaire est d'ordinaire créé sous votre répertoire 
     debian/ dans l'arbre des sources décompressées. Il est normalement 
     nommé <file>debian/nom_du_paquet</file>.
   </p>
   <p>
     Gardez à l'esprit que bien que vous deviez faire en sorte que le 
     programme s'installe sous debian/nom_du_paquet, il doit continuer à 
     s'exécuter correctement quand il est installé sous le répertoire 
     racine, c'est-à-dire quand il est installé à partir du paquet 
     .deb. Aussi vous ne devez pas laisser le système de création coder en 
     dur dans les fichiers du paquet des chaînes de caractères comme 
     <tt>/home/me/deb/gentoo-0.9.12/usr/share/gentoo</tt>.
   </p>
   <p>
     Avec des programmes utilisant GNU autoconf, cela est relativement 
     facile. La plupart de ces programmes ont des fichiers makefile et sont 
     par défaut configurés de manière à permettre l'installation dans un 
     répertoire quelconque, en gardant à l'esprit que /usr (par exemple) est 
     le préfixe standard. Quand il détecte que votre programme utilise 
     autoconf, dh_make va mettre en place des commandes pour le faire 
     automatiquement, et vous pouvez tout aussi bien passer à la section 
     suivante. Mais avec d'autres programmes, vous devrez plus que 
     probablement examiner et éditer les fichiers Makefile.
   </p>
   <p>
     Voici les parties concernées du Makefile de gentoo&nbsp;:
   </p>
   <p>
    <example>
  # Where to put binary on 'make install'?
  BIN     = /usr/local/bin

  # Where to put icons on 'make install'?
  ICONS   = /usr/local/share/gentoo
  </example>
   </p>
   <p>
     Nous voyons que les fichiers sont configurés pour s'installer sous 
     <file>/usr/local/</file>. Changez ces chemins en&nbsp;:
   </p>
   <p>
    <example>
  # Where to put binary on 'make install'?
  BIN     = $(DESTDIR)/usr/bin

  # Where to put icons on 'make install'?
  ICONS   = $(DESTDIR)/usr/share/gentoo
  </example>
   </p>
   <p>
     Mais pourquoi dans ce répertoire, et pas dans un autre&nbsp;? Parce que 
     Debian n'installe jamais de fichiers sous <file>/usr/local</file> 
     &mdash; cet arbre est réservé à l'usage de l'administrateur 
     système. Sur un système Debian, de tels fichiers doivent plutôt aller 
     sous <file>/usr</file>.
   </p>
   <p>
     Les positions exactes des exécutables, icônes, documentation, etc., 
     sont spécifiées dans le standard de la hiérarchie de fichiers (voir 
     /usr/share/doc/debian-policy/fhs/). Je vous recommande de le 
     consulter et de lire les sections relatives à votre paquet.
   </p>
   <p>
     Dès lors, nous devrions installer l'exécutable sous /usr/bin plutôt que 
     /usr/local/bin, la page de manuel sous /usr/share/man/man1 plutôt que 
     sous /usr/local/man/man1, etc. Notez qu'il n'y a pas de page de manuel 
     mentionnée dans le fichier Makefile, mais comme la Charte Debian 
     requiert que chaque programme en ait une, nous en créerons une plus 
     tard et l'installerons sous /usr/share/man/man1.
   </p>
   <p>
     Certains programmes n'utilisent pas les variables des fichiers Makefile 
     pour définir des chemins comme ceux-ci. Cela signifie que vous pouvez 
     avoir à éditer des fichiers sources C réels pour les faire utiliser les 
     positions correctes. Mais où et que chercher&nbsp;? Vous pouvez trouver 
     où en lançant&nbsp;:
   </p>
   <p>
    <example>
  grep -nr -e 'usr/local/lib' --include='*.[c|h]' .
  </example>
   </p>
   <p>
     Grep va récursivement parcourir l'arbre des sources et vous dire le nom 
     des fichiers et le numéro des lignes où il trouve une occurrence.
   </p>
   <p>
     Éditez ces fichiers et à ces lignes, remplacez /usr/local/* par /usr/* 
     &mdash; et c'est à peu près tout. Soyez attentif à ne pas casser le 
     reste du code&nbsp;!
   </p>
   <p>
     Après quoi, vous devriez trouver la cible d'installation (cherchez une 
     ligne qui commence avec «&nbsp;install:&nbsp;», d'ordinaire cela 
     fonctionne) et renommez toutes les références aux répertoires autres 
     que ceux définis au début du Makefile. Auparavant, la cible 
     d'installation de gentoo disait&nbsp;:
   </p>
   <p>
    <example>
  install:        gentoo
                  install ./gentoo $(BIN)
                  install icons/* $(ICONS)
                  install gentoorc-example $(HOME)/.gentoorc
  </example>
   </p>
   <p>
     Après votre modification elle dit&nbsp;:
    <example>
  install:        gentoo-target
                  install -d $(BIN) $(ICONS) $(DESTDIR)/etc
                  install ./gentoo $(BIN)
                  install -m644 icons/* $(ICONS)
                  install -m644 gentoorc-example $(DESTDIR)/etc/gentoorc
  </example>
   </p>
   <p>
     Vous aurez sûrement remarqué qu'il y a maintenant une commande 
     <tt>install -d</tt> avant les autres commandes dans la règle. Le 
     fichier Makefile originel ne l'avait pas parce qu'habituellement 
     /usr/local/bin et les autres répertoires existent déjà sur le système 
     dans lequel «&nbsp;make install&nbsp;» est exécuté. Cependant, comme 
     nous installerons dans nos propres répertoires vides (ou même non 
     existants), nous aurons à créer chacun de ces répertoires.
   </p>
   <p>
     Nous pouvons ajouter d'autres choses à la fin de la règle, comme 
     l'installation de la documentation additionnelle que l'auteur amont 
     oublie parfois&nbsp;:
   </p>
   <p>
    <example>
                  install -d $(DESTDIR)/usr/share/doc/gentoo/html
                  cp -a docs/* $(DESTDIR)/usr/share/doc/gentoo/html
  </example>
   </p>
   <p>
     Le lecteur attentif notera que j'ai changé «&nbsp;gentoo&nbsp;» en 
     «&nbsp;gentoo-target&nbsp;» dans la ligne «&nbsp;install:&nbsp;». C'est 
     ce qu'on appelle une correction de bogue sans rapport&nbsp;:-).
   </p>
   <p>
     Chaque fois que vous faites des modifications qui ne sont pas 
     spécifiquement liées à Debian, envoyez-les au responsable amont pour 
     qu'elles puissent être incluses dans la version suivante du programme 
     et que tout le monde puisse en bénéficier. Souvenez-vous aussi de ne 
     pas rendre vos corrections spécifiques à Debian ou Linux (ou même 
     Unix&nbsp;!) avant de les envoyer &mdash; faites-les portables. Cela 
     rendra vos corrections beaucoup plus faciles à appliquer.
   </p>
   <p>
     Remarquez que vous ne devez pas envoyer les fichiers debian/* en amont.
   </p>
  </sect>
  <sect id="difflibs">Bibliothèques différentes

   <p>
     Il y a souvent un problème courant&nbsp;: des bibliothèques sont 
     souvent différentes d'une plate-forme à l'autre. Par exemple, Makefile 
     peut contenir une référence à une bibliothèque qui n'existe pas sur les 
     systèmes Debian. Dans ce cas, nous devons la changer en une 
     bibliothèque qui existe dans Debian, et qui sert à la même chose.
   </p>
   <p>
     Ainsi, s'il y a une ligne dans le Makefile (ou Makefile.in) de votre 
     programme qui dit quelque chose comme ceci (et votre programme ne 
     compile pas)&nbsp;:
   </p>
   <p>
    <example>
  LIBS = -lcurses -lquelquechose -lautrechose
  </example>
   </p>
   <p>
     Changez-la en ceci, et cela marchera probablement&nbsp;:
   </p>
   <p>
    <example>
  LIBS = -lncurses -lquelquechose -lautrechose
  </example>
   </p>
   <p>
     (L'auteur réalise que ceci n'est pas le meilleur exemple dans la mesure 
     où notre paquet libncurses est maintenant livré avec un lien symbolique 
     libcurses.o, mais il n'en a pas trouvé de meilleur. Les suggestions 
     sont les bienvenues).
   </p>
  </sect>
 </chapt>
 <chapt id="dreq">Ce qui est requis sous debian/

  <p>
    Il y a un nouveau sous-répertoire sous le répertoire des sources du 
    programme («&nbsp;gentoo-0.9.12&nbsp;»), nommé «&nbsp;debian&nbsp;». Il 
    y a un certain nombre de fichiers dans ce répertoire que vous devriez 
    éditer pour configurer le comportement du paquet. Les plus importants 
    d'entre eux sont «&nbsp;control&nbsp;», «&nbsp;changelog&nbsp;», 
    «&nbsp;copyright&nbsp;» et «&nbsp;rules&nbsp;», qui sont requis pour 
    tous les paquets.
  </p>
  <sect id="control">Fichier «&nbsp;control&nbsp;»

   <p>
     Ce fichier contient plusieurs valeurs que <prgn>dpkg</prgn>, 
     <prgn>dselect</prgn> et d'autres outils de gestions de paquets vont 
     utiliser pour gérer le paquet.
   </p>
   <p>
     Voici le fichier «&nbsp;control&nbsp;» que dh_make crée pour nous.
   </p>
   <p>
    <example>
  1  Source: gentoo
  2  Section: unknown
  3  Priority: optional
  4  Maintainer: Josip Rodin &lt;joy-mg@debian.org&gt;
  5  Build-Depends: debhelper (>> 3.0.0)
  6  Standards-Version: 3.6.2
  7
  8  Package: gentoo
  9  Architecture: any
  10 Depends: ${shlibs:Depends}
  11 Description: &lt;insert up to 60 chars description&gt;
  12  &lt;insert long description, indented with spaces&gt;
  </example>
     (J'ai ajouté les numéros de ligne.)
   </p>
   <p>
     Les lignes&nbsp;1 à 6 sont les informations de contrôle pour le paquet 
     source.
   </p>
   <p>
     La ligne&nbsp;1 est le nom du paquet source.
   </p>
   <p>
     La ligne&nbsp;2 est la section de la distribution dans laquelle ce 
     paquet va.
   </p>
   <p>
     Comme vous l'avez constaté, Debian est divisée en sections&nbsp;: main 
     (logiciels libres), non-free (logiciels non libres), et contrib 
     (logiciels libres qui dépendent de logiciels non libres). Sous 
     celles-ci, il y a des sous-sections logiques qui décrivent de manière 
     concise les paquets qui s'y trouvent. Ainsi nous avons 
     «&nbsp;admin&nbsp;» pour les programmes réservés à l'administrateur, 
     «&nbsp;base&nbsp;» pour les outils de base, «&nbsp;devel&nbsp;» pour 
     les outils de programmation, «&nbsp;doc&nbsp;» pour la documentation, 
     «&nbsp;libs&nbsp;» pour les bibliothèques «&nbsp;mail&nbsp;» pour les 
     lecteurs et les démons de courriel, «&nbsp;net&nbsp;» pour les 
     applications et démons réseaux, «&nbsp;x11&nbsp;» pour les programmes 
     X11 qui ne sont pas plus appropriés ailleurs, et bien d'autres.
   </p>
   <p>
     Changeons donc la section en x11 (le préfixe «&nbsp;main/&nbsp;» est 
     implicite, donc nous pouvons l'omettre).
   </p>
   <p>
     La ligne&nbsp;3 décrit l'importance pour l'utilisateur d'installer ce 
     paquet. Lisez la Charte Debian pour des informations sur ces 
     valeurs. La priorité «&nbsp;optional&nbsp;» marche habituellement pour 
     les nouveaux paquets.
   </p>
   <p>
     Les sections et les priorités sont utilisées par des interfaces comme 
     <prgn>dselect</prgn> quand elles trient les paquets et sélectionnent 
     les valeurs par défaut. Quand vous enverrez votre paquet dans Debian, 
     les valeurs de ces deux champs peuvent être modifiées par les 
     responsables des archives, auquel cas vous serez notifié par courriel.
   </p>
   <p>
     Comme c'est un paquet de priorité normale et qu'il n'entre pas en 
     conflit avec quoi que ce soit, nous le laissons à 
     «&nbsp;optional&nbsp;».
   </p>
   <p>
     La ligne&nbsp;4 est le nom et l'adresse électronique du 
     responsable. Assurez-vous que ce champ contient un en-tête 
     «&nbsp;To:&nbsp;» valide pour un courrier électronique, car après le 
     téléchargement, le système de suivi des bogues l'utilisera pour vous 
     délivrer les courriels de bogues. Évitez d'utiliser des virgules, 
     esperluètes («&nbsp;&amp;&nbsp;») ou parenthèses.
   </p>
   <p>
     La ligne&nbsp;5 contient la liste des paquets nécessaires pour 
     construire le paquet. Certains paquets comme gcc ou make sont 
     implicites, voyez le paquet <package>build-essential</package> pour les 
     détails. Si un compilateur non standard ou un autre outil est 
     nécessaire pour construire le paquet, vous devez l'ajouter dans la 
     ligne «&nbsp;Build-Depends&nbsp;». Les différentes entrées sont 
     séparées par des virgules&nbsp;; lisez ci-dessous les explications sur 
     les dépendances entre binaires pour mieux comprendre la syntaxe de ce 
     champ.
   </p>
   <p>
     Vous pouvez avoir aussi ici des champs Build-Depends-Indep, 
     Build-Conflicts et d'autres champs. Ces données seront utilisées par le 
     logiciel de construction de paquets automatique Debian pour créer les 
     paquets binaires pour d'autres plates-formes d'ordinateurs. Lisez la 
     Charte Debian pour plus d'informations sur les dépendances de 
     construction et la Référence du Développeur pour plus d'informations 
     sur ces autres plates-formes (architectures) et comment porter des 
     logiciels vers celles-ci.
   </p>
   <p>
     Voici une bidouille que vous pouvez utiliser pour découvrir les paquets 
     dont le vôtre a besoin pour être construit&nbsp;:
    <example>
  strace -f -o /tmp/log ./configure
  # ou make à la place de ./configure, si votre paquet n'utilise pas autoconf
  for x in `dpkg -S $(grep open /tmp/log|\
                      perl -pe 's!.* open\(\"([^\"]*).*!$1!' |\
                      grep "^/"| sort | uniq|\
                      grep -v "^\(/tmp\|/dev\|/proc\)" ) 2>/dev/null|\
                      cut -f1 -d":"| sort | uniq`; \
        do \
          echo -n "$x (>=" `dpkg -s $x|grep ^Version|cut -f2 -d":"` "), "; \
        done
  </example>
   </p>
   <p>
     Pour déterminer manuellement la dépendance de construction exacte pour 
     <prgn><var>/usr/bin/foo</var></prgn>, vous exécuterez
    <example>
  objdump -p <var>/usr/bin/foo</var> | grep NEEDED
  </example>
     et pour chaque bibliothèque listée, par exemple 
     <prgn>libfoo.so.6</prgn>, exécutez
    <example>
  dpkg -S libfoo.so.6 
  </example>
     Ensuite vous prenez simplement la version -dev de chaque paquet comme 
     entrée «&nbsp;Build-deps&nbsp;». Si vous utilisez <prgn>ldd</prgn> à 
     cet effet, il va rapporter les dépendances de bibliothèque indirectes, 
     ayant pour résultat un problème de dépendances de constructions 
     excessives.
   </p>
   <p>
     Il se trouve que Gentoo a aussi besoin de <package>xlibs-dev</package>, 
     <package>libgtk1.2-dev</package> et <package>libgl1.2-dev</package> 
     pour être construit, aussi nous les ajouterons ici à côté de 
     <package>debhelper</package>.
   </p>
   <p>
     La ligne&nbsp;6 est la version de la Charte Debian que ce paquet 
     respecte, la version de la Charte Debian que vous lisez quand vous 
     créez votre paquet.
   </p>
   <p>
     La ligne&nbsp;8 est le nom du paquet binaire. C'est d'ordinaire le même 
     que le nom du paquet source, mais ce n'est pas nécessairement le cas.
   </p>
   <p>
     La ligne&nbsp;9 décrit l'architecture CPU pour laquelle le paquet 
     binaire peut être compilé. Nous le laissons à «&nbsp;any&nbsp;» car 
     <manref section="1" name="dpkg-gencontrol"> trouvera la valeur 
     appropriée pour toute machine sur laquelle ce paquet sera compilé.
   </p>
   <p>
     Si votre paquet est indépendant d'une architecture (par exemple, un 
     script shell ou Perl, ou un document), changez cette entrée en 
     «&nbsp;all&nbsp;», et lisez plus loin dans <ref id="rules"> comment 
     utiliser la règle «&nbsp;binary-indep&nbsp;» au lieu de 
     «&nbsp;binary-arch&nbsp;» pour construire le paquet.
   </p>
   <p>
     La ligne&nbsp;10 montre une des caractéristiques les plus puissantes du 
     système de paquet Debian. Les paquets peuvent être liés entre eux de 
     plusieurs façons. Hormis Depends:, les autres champs décrivant ces 
     relations sont Recommends:, Suggests:, Pre-Depends:, Conflicts:, 
     Provides:, et Replaces:.
   </p>
   <p>
     Les outils de gestion de paquets se comportent d'ordinaire de la même 
     manière quand ils gèrent ces relations&nbsp;; sinon, ce sera expliqué 
     (voir <manref section="8" name="dpkg">, <manref section="8" 
     name="dselect">, <manref section="8" name="apt">, <manref section="1" 
     name="aptitude">, etc.).
   </p>
   <p>
     Voici ce que les dépendances veulent dire&nbsp;:
   </p>
   <p>
    <list>
     <item>
      <p>
        Depends:
      </p>
      <p>
        Le paquet ne sera pas installé à moins que les paquets dont il 
        dépend ne soient installés. Utilisez-le si votre programme ne 
        s'exécute absolument pas (ou cause des dégâts sérieux) tant qu'un 
        paquet particulier n'est pas présent&nbsp;;
      </p>
     </item>
     <item>
      <p>
        Recommends:
      </p>
      <p>
        Des interfaces comme dselect ou aptitude vous demanderont 
        d'installer les paquets recommandés en même temps que votre 
        paquet&nbsp;; dselect insistera même. dpkg et apt-get ignoreront ce 
        champ, cependant. Utilisez-le pour les paquets qui ne sont pas 
        vraiment indispensables mais qui sont typiquement utilisés avec 
        votre programme&nbsp;;
      </p>
     </item>
     <item>
      <p>
        Suggests:
      </p>
      <p>
        Quand un utilisateur installe votre programme, toute interface lui 
        demandera probablement s'il faut installer les programmes qu'il 
        suggère. dpkg et apt-get ne s'en soucient pas. Utilisez-le pour les 
        paquets qui marchent bien avec votre programme mais qui ne sont pas 
        nécessaires&nbsp;;
      </p>
     </item>
     <item>
      <p>
        Pre-Depends:
      </p>
      <p>
        Ceci est plus fort que Depends. Le paquet ne sera pas installé à 
        moins que les paquets dont il pré-dépend ne soient installés <em>et 
        correctement configurés</em>. Utilisez-le <strong>très</strong> 
        rarement et seulement après en avoir discuté sur la liste de 
        discussion debian-devel. Traduction&nbsp;: ne l'utilisez pas du 
        tout&nbsp;;&nbsp;:-)
      </p>
     </item>
     <item>
      <p>
        Conflicts:
      </p>
      <p>
        Le paquet ne sera pas installé avant que les paquets avec lesquels 
        il est en conflit n'aient été retirés. Utilisez ceci si votre 
        programme ne peut absolument pas fonctionner ou s'il cause d'énormes 
        problèmes quand un paquet particulier est présent&nbsp;;
      </p>
     </item>
     <item>
      <p>
        Provides:
      </p>
      <p>
        Quand il y a plusieurs alternatives pour certains types de paquets, 
        des noms virtuels ont été définis. Vous pouvez trouver la liste 
        complète dans 
        <file>/usr/share/doc/debian-policy/virtual-package-name-list.text.gz</file>. 
        Utilisez ceci si votre programme fournit une fonction d'un paquet 
        virtuel existant&nbsp;;
      </p>
     </item>
     <item>
      <p>
        Replaces:
      </p>
      <p>
        Utilisez ceci quand votre programme remplace des fichiers d'un autre 
        paquet, ou remplace complètement un autre paquet (utilisé en 
        conjonction avec Conflicts:). Les fichiers du paquet nommé seront 
        écrasés par les fichiers de votre paquet.
      </p>
     </item>
    </list>
   </p>
   <p>
     Tous ces champs ont une syntaxe uniforme. Il s'agit d'une liste de 
     paquets séparés par des virgules. Ces noms de paquets peuvent aussi 
     être une liste d'alternatives, séparés par des symboles barre verticale 
     <tt>|</tt> (symbole tube).
   </p>
   <p>
     Le domaine d'application des champs peut être restreint à des versions 
     particulières de chaque paquet nommé. Ces versions sont listées entre 
     parenthèses après chaque nom de paquet individuel, et doivent contenir 
     une relation de la liste suivante suivie par un numéro de version. Les 
     relations autorisées sont <tt>&lt;&lt;</tt>, <tt>&lt;=</tt>, 
     <tt>=</tt>, <tt>&gt;=</tt> et <tt>&gt;&gt;</tt> pour strictement plus 
     petit, plus petit ou égal, exactement égal, plus grand ou égal et 
     strictement plus grand, respectivement. Par exemple,
   </p>
   <p>
    <example>
  Depends: foo (>= 1.2), libbar1 (= 1.3.4)
  Conflicts: baz
  Recommends: libbaz4 (>> 4.0.7)
  Suggests: quux
  Replaces: quux (<< 5), quux-foo (<= 7.6)
  </example>
   </p>
   <p>
     La dernière caractéristique que vous devez connaître est 
     ${shlibs:Depends}. Lorsque votre paquet aura été construit et installé 
     dans le répertoire temporaire, <manref section="1" name="dh_shlibdeps"> 
     le scannera pour les exécutables et bibliothèques, déterminera leurs 
     dépendances en bibliothèques partagées et détectera dans quels paquets 
     elles se trouvent. Il passera la liste à <manref section="1" 
     name="dh_gencontrol"> qui l'insérera à la bonne place, et vous ne 
     devrez pas vous en soucier.
   </p>
   <p>
     Ceci étant dit, nous pouvons laisser la ligne Depends: exactement comme 
     elle est maintenant, et insérer après une ligne disant <tt>Suggests: 
     file</tt>, car gentoo peut utiliser certaines fonctionnalités fournies 
     par ce programme/paquet.
   </p>
   <p>
     La ligne&nbsp;11 est la description courte. L'écran de la plupart des 
     gens est large de 80 colonnes, aussi cela ne devrait pas dépasser les 
     60 caractères. Je le change en «&nbsp;fully GUI configurable X file 
     manager using GTK+&nbsp;».
   </p>
   <p>
     À la ligne&nbsp;12 commence la description longue. Celle-ci devrait 
     être un paragraphe qui donne plus de détails sur le paquet. La 
     colonne&nbsp;1 de chaque ligne doit être vide. Il ne peut y avoir de 
     ligne vide, mais vous pouvez mettre un seul «&nbsp;.&nbsp;» (point) 
     dans la colonne&nbsp;2 pour simuler une ligne vide. De plus, il ne peut 
     pas y avoir plus d'une ligne vide après la description longue.
   </p>
   <p>
     Finalement, voici le fichier control mis à jour&nbsp;:
   </p>
   <p>
    <example>
  1  Source: gentoo
  2  Section: x11
  3  Priority: optional
  4  Maintainer: Josip Rodin &lt;joy-mg@debian.org&gt;
  5  Build-Depends: debhelper (>> 3.0.0), xlibs-dev, libgtk1.2-dev, libglib1.2-dev
  6  Standards-Version: 3.5.2
  7
  8  Package: gentoo
  9  Architecture: any
  10 Depends: ${shlibs:Depends}
  11 Suggests: file
  12 Description: fully GUI configurable GTK+ file manager
  13  gentoo is a file manager for Linux written from scratch in pure C. It
  14  uses the GTK+ toolkit for all of its interface needs.  gentoo provides
  15  100% GUI configurability; no need to edit config files by hand and re-
  16  start the program. gentoo supports identifying the type of various
  17  files (using extension, regular expressions, or the 'file' command),
  18  and can display files of different types with different colors and icons.
  19  .
  20  gentoo borrows some of its look and feel from the classic Amiga file
  21  manager "Directory OPUS" (written by Jonathan Potter).
  </example>
     (J'ai ajouté les numéros de ligne.)
   </p>
  </sect>
  <sect id="copyright">fichier «&nbsp;copyright&nbsp;»

   <p>
     Ce fichier contient les informations sur les ressources en amont, le 
     copyright et la licence du paquet. Le format n'est pas dicté par la 
     Charte Debian, mais son contenu l'est (voir section&nbsp;12.6 
     «&nbsp;Copyright Information&nbsp;»).
   </p>
   <p>
     dh_make en crée un par défaut, qui ressemble à ceci&nbsp;:
   </p>
   <p>
    <example>
  1  This package was debianized by Josip Rodin &lt;joy-mg@debian.org&gt; on
  2  Wed, 11 Nov 1998 21:02:14 +0100.
  3
  4  It was downloaded from &lt;fill in ftp site&gt;
  5
  6  Upstream Author(s): &lt;put author(s) name and email here&gt;
  7
  8  Copyright:
  9
  10 &lt;Must follow here&gt;
  </example>
     (J'ai ajouté les numéros de ligne.)
   </p>
   <p>
     Les choses importantes à ajouter à ce fichier sont l'endroit où vous 
     avez trouvé ce paquet, ainsi que le copyright et la licence 
     d'exploitation réelle (incluez-la en entier). Si la licence est une des 
     licences de logiciel libre populaires comme GNU GPL ou LGPL, BSD ou 
     Artistic, vous pouvez juste faire référence au fichier approprié dans 
     le répertoire /usr/share/common-licenses/, qui existe sur chaque 
     système Debian.
   </p>
   <p>
     En bref, voici ce à quoi le fichier copyright de gentoo devrait 
     ressembler&nbsp;:
   </p>
   <p>
    <example>
  1  This package was debianized by Josip Rodin &lt;joy-mg@debian.org&gt; on
  2  Wed, 11 Nov 1998 21:02:14 +0100.
  3
  4  It was downloaded from: ftp://ftp.obsession.se/gentoo/
  5
  6  Upstream Author: Emil Brink &lt;emil@obsession.se&gt;
  7
  8  This software is copyright (c) 1998-99 by Emil Brink, Obsession
  9  Development.
  10
  11 You are free to distribute this software under the terms of
  12 the GNU General Public License.
  13 On Debian systems, the complete text of the GNU General Public
  14 License can be found in the file `/usr/share/common-licenses/GPL'.
  </example>
     (J'ai ajouté les numéros de ligne.)
   </p>
  </sect>
  <sect id="changelog">changelog

   <p>
     C'est un fichier requis, qui a un format spécial décrit dans la Charte 
     section&nbsp;4.4 «&nbsp;debian/changelog&nbsp;». Ce format est utilisé 
     par dpkg et d'autres programmes pour obtenir le numéro de version, de 
     révision, de distribution et l'urgence de votre paquet.
   </p>
   <p>
     Pour vous, il est aussi important, puisqu'il est bon de documenter 
     toutes les modifications que vous avez faites. Cela aidera les gens qui 
     téléchargent votre paquet à voir s'il y a des problèmes non résolus à 
     propos desquels ils doivent être immédiatement mis au courant. Il sera 
     sauvé sous «&nbsp;/usr/share/doc/gentoo/changelog.Debian.gz&nbsp;» dans 
     le paquet binaire.
   </p>
   <p>
     dh_make en crée un par défaut, et il ressemble à ceci&nbsp;:
   </p>
   <p>
    <example>
  1  gentoo (0.9.12-1) unstable; urgency=low
  2
  3   * Initial Release.
  4
  5  -- Josip Rodin &lt;joy-mg@debian.org&gt;  Wed, 11 Nov 1998 21:02:14 +0100
  6
  </example>
     (J'ai ajouté les numéros de ligne.)
   </p>
   <p>
     La ligne&nbsp;1 est le nom du paquet, la version, la distribution et 
     l'urgence. Le nom doit correspondre au nom du paquet source, la 
     distribution devrait être «&nbsp;unstable&nbsp;» (ou même 
     «&nbsp;experimental&nbsp;», et l'urgence ne devrait pas être changée en 
     quoique ce soit de plus haut que «&nbsp;low&nbsp;».&nbsp;:-)
   </p>
   <p>
     Les lignes&nbsp;3 à 5 sont l'entrée d'audit, où vous documentez les 
     modifications faites dans la révision du paquet (pas les modifications 
     amont &ndash; il y a un fichier spécial pour cela, créé par les auteurs 
     en amont, que vous installerez comme 
     /usr/share/doc/gentoo/changelog.gz). Les nouvelles lignes doivent être 
     ajoutées juste avant la première ligne qui commence avec une astérisque 
     («&nbsp;*&nbsp;»). Vous pouvez le faire avec <manref section="1" 
     name="dch">, <manref section="1" name="emacs">, ou manuellement avec un 
     éditeur de texte.
   </p>
   <p>
     Vous obtiendrez quelque chose comme&nbsp;:
   </p>
   <p>
    <example>
  1  gentoo (0.9.12-1) unstable; urgency=low
  2
  3   * Initial Release.
  4   * This is my first Debian package.
  5   * Adjusted the Makefile to fix $DESTDIR problems.
  6
  7  -- Josip Rodin &lt;joy-mg@debian.org&gt; Wed, 11 Nov 1998 21:02:14 +0100
  8
  </example>
     (J'ai ajouté les numéros de ligne.)
   </p>
   <p>
     Vous pouvez en apprendre plus sur la mise à jour du fichier changelog 
     plus loin dans <ref id="update">.
   </p>
  </sect>
  <sect id="rules">fichier «&nbsp;rules&nbsp;»

   <p>
     Maintenant nous devons examiner les règles que <manref section="1" 
     name="dpkg-buildpackage"> va utiliser pour créer vraiment le paquet. Ce 
     fichier est en fait un autre Makefile, mais différent de celui/ceux des 
     sources amont. Contrairement aux autres fichiers sous debian/, celui-ci 
     est marqué comme exécutable.
   </p>
   <p>
     Chaque fichier «&nbsp;rules&nbsp;», comme tout autre Makefile, consiste 
     en plusieurs règles indiquant comment manipuler les sources. Les règles 
     sont des cibles, noms de fichiers ou d'actions à exécuter (par exemple, 
     «&nbsp;build:&nbsp;» ou «&nbsp;install:&nbsp;»). Les règles que vous 
     voulez exécuter doivent être données comme paramètre à la ligne de 
     commande (par exemple, «&nbsp;rules build&nbsp;» ou «&nbsp;rules 
     install&nbsp;»). Après le nom de la cible, vous pouvez nommer les 
     dépendances, le programme ou le fichier dont la cible dépend. Après 
     cela il peut y avoir un nombre quelconque de commandes indentées par 
     &lt;tab&gt;, jusqu'à ce qu'une ligne vide soit trouvée. Une nouvelle 
     règle commence avec une déclaration de cible dans la première 
     colonne. Les lignes vides ainsi que celles qui commencent par un 
     «&nbsp;#&nbsp;» (dièse) sont considérées comme des commentaires et sont 
     ignorées.
   </p>
   <p>
     Tout ceci vous semble probablement confus pour l'instant, mais cela va 
     devenir clair à l'examen du fichier «&nbsp;rules&nbsp;» que dh_make 
     nous donne par défaut. Vous devriez avoir lu l'entrée 
     «&nbsp;make&nbsp;» dans info pour plus d'information.
   </p>
   <p>
     Ce qu'il faut savoir à propos du fichier rules créé par dh_make, est 
     qu'il s'agit juste d'une suggestion. Il fonctionnera pour des paquets 
     simples, mais pour ceux qui sont plus compliqués, vous ne devez pas 
     craindre de le modifier pour le faire correspondre à vos besoins. Les 
     seules choses que vous ne pouvez pas changer sont les noms des règles, 
     car tous les outils utilisent ces noms comme requis par la Charte.
   </p>
   <p>
     Voici (approximativement) ce à quoi ressemble le fichier par défaut 
     debian/rules généré pour nous par dh_make&nbsp;:
   </p>
   <p>
    <example>
&makefile;
  </example>
     (J'ai ajouté les numéros de ligne. Dans le <file>debian/rules</file> 
     réel, les espaces en début de ligne sont des codes TAB).
   </p>
   <p>
     Vous avez probablement l'habitude de la ligne&nbsp;1 avec les scripts 
     shell et perl. Cela signifie que ce fichier doit être exécuté par 
     /usr/bin/make.
   </p>
   <p>
     La signification des variables DH_* mentionnées des lignes 
     8&nbsp;à&nbsp;9 devrait être évidente à partir du commentaire. Pour 
     plus d'informations sur DH_COMPAT, lisez la section «&nbsp;Debhelper 
     compatibility levels&nbsp;» de la page de manuel <manref section="1" 
     name="debhelper">.
   </p>
   <p>
     Les lignes&nbsp;11 à&nbsp;16 sont un squelette de support pour les 
     paramètres DEB_BUILD_OPTIONS, décrits dans la Charte section&nbsp;10.1 
     «&nbsp;Binaries&nbsp;». Fondamentalement, ces choses déterminent si 
     l'exécutable doit être construit avec les symboles de débogage, et 
     s'ils doivent être retirés à l'installation. Une fois encore, il s'agit 
     juste d'un squelette, une indication que vous devriez le faire. Vous 
     devriez vérifier comment le système de construction amont gère 
     l'inclusion des symboles de débogage, et comment il les retire à 
     l'installation, et implémenter cela vous-même.
   </p>
   <p>
     D'habitude, vous pouvez dire à gcc de compiler avec «&nbsp;-g&nbsp;» en 
     utilisant la variable CFLAGS &mdash; si c'est le cas pour votre paquet, 
     propagez la variable en <em>ajoutant</em> <tt>CFLAGS="$(CFLAGS)"</tt> à 
     l'invocation de $(MAKE) dans la règle de construction (voir plus 
     bas). Alternativement, si votre paquet utilise un script de 
     configuration autoconf, vous pouvez la lui passer en <em>préfixant</em> 
     la chaîne ci-dessus à l'appel de ./configure dans la règle de 
     construction.
   </p>
   <p>
     Pour ce qui est de retirer les symboles, les programmes sont configurés 
     couramment pour s'installer avec, et souvent sans option pour changer 
     cela. Heureusement, vous avez toujours <manref section="1" 
     name="dh_strip"> qui détecte quand le drapeau DEB_BUILD_OPTIONS=nostrip 
     est mis, et qui quitte silencieusement.
   </p>
   <p>
     Les lignes&nbsp;18 à 26 décrivent la règle «&nbsp;build&nbsp;» (et son 
     enfant «&nbsp;build-stamp&nbsp;»), qui exécute make avec le fichier 
     Makefile de l'application pour compiler le programme. Si votre paquet 
     utilise les utilitaires GNU configure pour construire les exécutables, 
     soyez absolument certain d'avoir lu <file>&autotools-dev;</file>. Nous 
     en dirons plus sur l'exemple commenté docbook-to-man plus loin dans 
     <ref id="manpage">.
   </p>
   <p>
     La règle «&nbsp;clean&nbsp;», spécifiée aux lignes&nbsp;28 à 36, efface 
     tous les binaires inutiles et les trucs générés automatiquement, 
     laissés là par une construction du paquet. Cette règle doit être 
     opérationnelle tout le temps (même si les répertoires sources 
     <em>sont</em> nettoyés&nbsp;!), donc vous devriez utiliser les options 
     pour forcer (par exemple pour rm, c'est «&nbsp;-f&nbsp;») ou pour 
     ignorer la valeur de retour (les échecs), avec un «&nbsp;-&nbsp;» 
     devant le nom de la commande.
   </p>
   <p>
     Le processus d'installation, la règle «&nbsp;install&nbsp;», commence à 
     la ligne&nbsp;38. Fondamentalement, elle exécute la règle install du 
     fichier Makefile du programme, mais installe dans le répertoire 
     <tt>$(CURDIR)/debian/gentoo</tt> &ndash; c'est pour cette raison que 
     nous avons spécifié $(DESTDIR) comme racine de l'installation dans le 
     Makefile de gentoo.
   </p>
   <p>
     Comme le commentaire le laisse penser, la règle 
     «&nbsp;binary-indep&nbsp;», sur la ligne&nbsp;48, est utilisée pour 
     construire des paquets indépendants de l'architecture. Comme il n'y en 
     a pas dans cet exemple, rien n'est fait.
   </p>
   <p>
     Ensuite on trouve la règle «&nbsp;binary-arch&nbsp;», des lignes 52 à 
     79, pour laquelle nous exécutons plusieurs petits utilitaires du paquet 
     debhelper qui font quelques opérations sur votre paquet pour le rendre 
     conforme à la Charte Debian.
   </p>
   <p>
     Si votre paquet est un «&nbsp;Architecture: all&nbsp;», vous devez 
     inclure toutes les commandes pour construire le paquet sous la règle 
     «&nbsp;binary-indep&nbsp;», et laisser la règle 
     «&nbsp;binary-arch&nbsp;» vide.
   </p>
   <p>
     Les noms des programmes debhelper commencent par dh_ et la suite 
     indique ce que chaque petit utilitaire fait. Tout cela est plutôt 
     explicite, mais voici quelques explications supplémentaires&nbsp;:
    <list>
     <item>
      <p>
        <manref section="1" name="dh_testdir"> vérifie que vous êtes dans le 
        bon répertoire (i.e. le répertoire racine des sources),
      </p>
     </item>
     <item>
      <p>
        <manref section="1" name="dh_testroot"> vérifie que vous avez les 
        permissions root, nécessaire pour les cibles 
        «&nbsp;binary-arch&nbsp;», «&nbsp;binary-indep&nbsp;» et 
        «&nbsp;clean&nbsp;»,
      </p>
     </item>
     <item>
      <p>
        <manref section="1" name="dh_installmanpages"> copie les pages de 
        manuel à la bonne place dans le répertoire de destination, vous 
        devez juste lui dire où elles sont, relativement au répertoire 
        racine des sources,
      </p>
     </item>
     <item>
      <p>
        <manref section="1" name="dh_strip"> retire les en-têtes de débogage 
        des fichiers exécutables pour les rendre plus petits,
      </p>
     </item>
     <item>
      <p>
        <manref section="1" name="dh_compress"> compresse les pages de 
        manuel et la documentation plus large que 4&nbsp;kb, avec <manref 
        section="1" name="gzip">,
      </p>
     </item>
     <item>
      <p>
        <manref section="1" name="dh_installdeb"> copie les fichiers 
        relatifs au paquet (par exemple les scripts du responsable) sous le 
        répertoire <file>debian/gentoo/DEBIAN</file>,
      </p>
     </item>
     <item>
      <p>
        <manref section="1" name="dh_shlibdeps"> calcule les dépendances des 
        bibliothèques et des exécutables,
      </p>
     </item>
     <item>
      <p>
        <manref section="1" name="dh_gencontrol"> génère et installe une 
        version soigneusement ajustée du fichier control dans 
        <file>debian/gentoo/DEBIAN</file>
      </p>
     </item>
     <item>
      <p>
        <manref section="1" name="dh_md5sums"> génère les sommes de contrôle 
        MD5 pour tous les fichiers dans le paquet.
      </p>
     </item>
    </list>
   </p>
   <p>
     Pour une information plus complète sur ce que font tous ces scripts 
     dh_*, et ce que sont leurs options, lisez les pages de manuel 
     respectives. Il y en a d'autres, potentiellement très utiles, qui ne 
     sont pas mentionnés ici. Si vous en avez besoin, lisez la documentation 
     de debhelper.
   </p>
   <p>
     La section binary-arch est celle où vous devriez vraiment commenter ou 
     retirer toutes les lignes qui appellent des fonctionnalités dont vous 
     n'avez pas besoin. Pour gentoo, je commente les lignes concernant 
     exemples, cron, init, man et info, simplement parce que gentoo n'en a 
     pas besoin. De plus, à la ligne 68, je remplace «&nbsp;ChangeLog&nbsp;» 
     par «&nbsp;FIXES&nbsp;», parce que c'est le nom du fichier des 
     modifications amont.
   </p>
   <p>
     Les deux dernières lignes (avec toutes celles qui ne sont pas 
     expliquées ici) sont juste des choses plus ou moins nécessaires, à 
     propos desquelles vous pouvez lire le manuel de make, et la Charte 
     Debian. Pour l'instant il n'est pas important d'en savoir plus.
   </p>
  </sect>
 </chapt>
 <chapt id="dother">Autres fichiers dans le répertoire debian/

  <p>
    Vous verrez qu'il y a plusieurs autres fichiers dans le sous-répertoire 
    debian, la plupart d'entre eux avec le suffixe «&nbsp;.ex&nbsp;», ce qui 
    signifie qu'ils sont des exemples. Jetez un coup d'&oelig;il à chacun 
    d'entre eux. Si vous souhaitez ou devez utiliser une de ces 
    options&nbsp;:
   <list>
    <item>
     <p>
       lisez la documentation relative (astuce&nbsp;: la Charte Debian),
     </p>
    </item>
    <item>
     <p>
       si nécessaire, modifiez les fichers selon vos besoins,
     </p>
    </item>
    <item>
     <p>
       renommez-les pour retirer le suffixe «&nbsp;.ex&nbsp;» s'ils en ont,
     </p>
    </item>
    <item>
     <p>
       renommez-les pour retirer le préfixe «&nbsp;ex.&nbsp;» s'ils en ont,
     </p>
    </item>
    <item>
     <p>
       modifiez le fichier «&nbsp;rules&nbsp;» si nécessaire.
     </p>
    </item>
   </list>
  </p>
  <p>
    Certains de ces fichiers, les plus utilisés, sont décrits dans les 
    sections suivantes.
  </p>
  <sect id="readme">README.Debian

   <p>
     Tous les détails ou différences entre le paquet original et votre 
     version debianisée devraient être documentés ici.
   </p>
   <p>
     dh_make en crée un par défaut, qui ressemble à ceci&nbsp;:
   </p>
   <p>
    <example>
  gentoo for Debian
  -----------------

  &lt;possible notes regarding this package - if none, delete this file&gt;

   -- Josip Rodin &lt;joy-mg@debian.org&gt;, Wed, 11 Nov 1998 21:02:14 +0100
  </example>
   </p>
   <p>
     Puisque nous n'avons rien en particulier à mettre ici, nous effaçons le 
     fichier.
   </p>
  </sect>
  <sect id="conffiles">conffiles.ex

   <p>
     L'une des choses les plus irritantes à propos des logiciels est de 
     consacrer beaucoup de temps et d'efforts pour configurer un programme, 
     et de voir une seule mise à jour détruire tous vos changements. Debian 
     résout ce problème en marquant les fichiers de configuration de sorte 
     que quand vous mettez à jour un paquet, il vous sera demandé si vous 
     voulez gardez votre ancienne configuration ou pas.
   </p>
   <p>
     La façon de procéder pour un paquet est d'entrer le chemin complet de 
     chaque fichier de configuration (en général sous /etc), un par ligne 
     dans un fichier nommé <tt>conffiles</tt>. Gentoo a un fichier de 
     configuration, /etc/gentoorc, et nous le mettons dans 
     <tt>conffiles</tt>.
   </p>
   <p>
     Si votre programme utilise des fichiers de configuration, mais les 
     réécrit aussi de son côté, il vaut mieux ne pas les marquer comme 
     conffiles, parce que dpkg va alors interroger les utilisateurs pour 
     vérifier les modifications tout le temps.
   </p>
   <p>
     Si le programme que vous empaquetez requiert que chaque utilisateur 
     modifie le fichier de configuration pour fonctionner tout court, 
     envisagez de ne pas le marquer non plus comme conffile.
   </p>
   <p>
     Vous pouvez gérer des fichiers d'exemple de configuration à partir des 
     «&nbsp;scripts du responsable&nbsp;». Lisez <ref id="maintscripts"> 
     pour plus d'information.
   </p>
   <p>
     Si votre programme n'a pas de conffiles, vous pouvez tranquillement 
     effacer le fichier <tt>conffiles</tt> du répertoire debian.
   </p>
  </sect>
  <sect id="crond">cron.d.ex

   <p>
     Si votre paquet requiert des tâches programmées régulièrement pour 
     fonctionner correctement, vous pouvez utiliser ce fichier pour le 
     configurer.
   </p>
   <p>
     Notez que ceci n'inclut pas la rotation des journaux&nbsp;; pour cela, 
     voyez <manref section="1" name="dh_installlogrotate"> et <manref 
     section="8" name="logrotate">.
   </p>
   <p>
     Sinon, supprimez-le.
   </p>
  </sect>
  <sect id="dirs">dirs

   <p>
     Ce fichier spécifie les répertoires dont nous avons besoin mais que la 
     procédure d'installation normale (make install) ne crée pas.
   </p>
   <p>
     Par défaut, il ressemble à ceci&nbsp;:
   </p>
   <p>
    <example>
  usr/bin
  usr/sbin
  </example>
   </p>
   <p>
     Remarquez que le préfixe slash n'est pas inclus. Nous devrions 
     normalement le changer comme ceci&nbsp;:
   </p>
   <p>
    <example>
  usr/bin
  usr/man/man1
  </example>
   </p>
   <p>
     mais ces répertoires sont déjà créés dans Makefile, donc nous n'avons 
     pas besoin de ce fichier, et allons plutôt l'effacer.
   </p>
  </sect>
  <sect id="docs">docs

   <p>
     Ce fichier spécifie les noms des fichiers de documentation que 
     dh_installdocs peut installer pour nous dans le répertoire temporaire.
   </p>
   <p>
     Par défaut, il inclut tous les fichiers, existant dans le répertoire 
     racine des sources, qui sont nommés «&nbsp;BUGS&nbsp;», 
     «&nbsp;README*&nbsp;», «&nbsp;TODO&nbsp;», etc.
   </p>
   <p>
     Pour gentoo, j'ai aussi inclus d'autres choses&nbsp;:
   </p>
   <p>
    <example>
  BUGS
  CONFIG-CHANGES
  CREDITS
  ONEWS
  README
  README.gtkrc
  TODO
  </example>
   </p>
   <p>
     Nous pouvons aussi retirer ce fichier et à la place lister ces fichiers 
     directement dans la ligne de commande <tt>dh_installdocs</tt> dans le 
     fichier <tt>rules</tt>, comme ceci&nbsp;:
   </p>
   <p>
    <example>
        dh_installdocs BUGS CONFIG-CHANGES CREDITS ONEWS README \
                       README.gtkrc TODO
  </example>
   </p>
   <p>
     Aussi incroyable que cela puisse être, vous pouvez ne pas avoir de tels 
     fichiers dans les sources de votre paquet. Dans ce cas, vous pouvez 
     tranquillement effacer ce fichier. Mais ne retirez pas l'appel 
     <tt>dh_installdocs</tt> du fichier <tt>rules</tt> parce qu'il est 
     utilisé pour installer le fichier <tt>copyright</tt> et d'autres 
     choses.
   </p>
  </sect>
  <sect id="emacsen">emacsen-*.ex

   <p>
     Si votre paquet fournit des fichiers Emacs qui peuvent être 
     byte-compilés au moment de l'installation, vous pouvez utiliser ces 
     fichiers pour les configurer.
   </p>
   <p>
     Ils sont installés dans le répertoire temporaire par <manref 
     section="1" name="dh_installemacsen">, donc n'oubliez pas de 
     décommenter cette ligne dans le fichier <tt>rules</tt> si vous 
     l'utilisez.
   </p>
   <p>
     Si vous n'en avez pas besoin, effacez-les.
   </p>
  </sect>
  <sect id="initd">init.d.ex

   <p>
     Si votre paquet est un démon qui doit être lancé au démarrage du 
     système, vous avez de toute évidence ignoré mes recommandations 
     initiales, n'est-ce-pas&nbsp;? :-)
   </p>
   <p>
     Ceci est un squelette de fichier générique pour un fichier script 
     <file>/etc/init.d/</file>, donc vous aurez à l'éditer souvent. Il est 
     installé dans le répertoire temporaire par <manref section="1" 
     name="dh_installinit">.
   </p>
   <p>
     Si vous n'en avez pas besoin, effacez-le.
   </p>
  </sect>
  <sect id="manpage">manpage.1.ex, manpage.sgml.ex

   <p>
     Votre programme devrait avoir une page de manuel. S'il n'en a pas, 
     chacun de ces fichiers est un squelette que vous pouvez remplir.
   </p>
   <p>
     Les pages de manuel sont normalement écrites en <manref section="1" 
     name="nroff">. L'exemple <tt>manpage.1.ex</tt> est aussi écrit en 
     nroff. Lisez la page de manuel <manref section="7" name="man"> pour une 
     description brève de la façon d'éditer ce genre de fichier.
   </p>
   <p>
     D'un autre côté, si vous préférez écrire du SGML à la place de nroff, 
     vous pouvez utiliser le patron <tt>manpage.sgml.ex</tt>. Si vous le 
     faites, vous devez&nbsp;:
    <list>
     <item>
      <p>
        installer le paquet <package>docbook-to-man</package>
      </p>
     </item>
     <item>
      <p>
        ajouter <tt>docbook-to-man</tt> à la ligne <tt>Build-Depends</tt> 
        dans le fichier <tt>control</tt>
      </p>
     </item>
     <item>
      <p>
        retirer le commentaire de l'appel docbook-to-man dans la règle 
        «&nbsp;build&nbsp;» de votre fichier <tt>rules</tt>.
      </p>
     </item>
    </list>
   </p>
   <p>
     Et souvenez-vous de renommer le fichier en quelque chose comme 
     <tt>gentoo.sgml</tt>&nbsp;!
   </p>
   <p>
     Le nom du fichier de la page de manuel finale devrait inclure le nom du 
     programme qu'elle documente, donc nous le renommons de 
     «&nbsp;manpage&nbsp;» en «&nbsp;gentoo&nbsp;». Le nom du fichier inclut 
     aussi «&nbsp;.1&nbsp;» comme premier suffixe, ce qui signifie que c'est 
     une page de manuel pour une commande utilisateur. Assurez-vous de 
     vérifier que cette section est bien la bonne. Voici une courte liste 
     des sections de pages de manuel&nbsp;:
   </p>
   <p>
    <example>
  Section |     Description      |     Notes
     1     Commandes utilisateur   Commandes ou scripts exécutables.
     2     Appel système           Fonctions fournies par le noyau.
     3     Appel bibliothèque      Fonctions des bibliothèques système.
     4     Fichiers spéciaux       D'ordinaire trouvés dans /dev.
     5     Formats de fichiers     Par ex. le format /etc/password.
     6     Jeux                    Ou d'autres programmes frivoles.
     7     Paquets de macros       Comme les macros de man.
     8     Administration système  Des programmes d'habitude exécutés par root.
     9     Routines noyau          Appels non standards et routines internes.
  </example>
   </p>
   <p>
     Donc, la page de manuel de gentoo devrait être appelée gentoo.1. 
     Il n'y avait pas de page de 
     manuel gentoo.1 dans les sources originales, donc j'en ai écrit une à 
     partir de l'exemple et de la documentation amont.
   </p>
  </sect>
  <sect id="menu"> menu.ex

   <p>
     Les utilisateurs de X Window ont un gestionnaire de fenêtres avec un 
     menu qui peut être configuré. S'ils ont installé le paquet 
     <package>menu</package> de Debian, un ensemble de menus pour chaque 
     programme sur le système sera créé pour eux.
   </p>
   <p>
     Voici le fichier <tt>menu.ex</tt> créé par défaut par dh_make&nbsp;:
   </p>
   <p>
    <example>
  ?package(gentoo):needs="X11|text|vc|wm" section="Apps/see-menu-manual"\
    title="gentoo" command="/usr/bin/gentoo"
  </example>
   </p>
   <p>
     Le premier champ après les deux points est «&nbsp;needs&nbsp;», et il 
     indique le genre d'interface dont a besoin le programme. Changez ceci 
     en une des alternatives listées, par exemple «&nbsp;text&nbsp;» ou 
     «&nbsp;X11&nbsp;».
   </p>
   <p>
     Le suivant est «&nbsp;section&nbsp;», avec le menu et le sous-menu dans 
     lesquels l'entrée devrait apparaître. La liste courante des sections 
     est dans&nbsp;: 
     <file>/usr/share/doc/debian-policy/menu-policy.html/ch2.html#s2.1</file>.
   </p>
   <p>
     le champ «&nbsp;title&nbsp;» est le nom du programme. Vous pouvez le 
     commencer par une majuscule si vous le souhaitez. Mais gardez-le court.
   </p>
   <p>
     Enfin, le champ «&nbsp;command&nbsp;» est la commande qui lance le 
     programme.
   </p>
   <p>
     Maintenant nous changeons l'entrée menu en ceci&nbsp;:
   </p>
   <p>
    <example>
  ?package(gentoo): needs="X11" section="Apps/Tools" title="Gentoo" command="gentoo"
  </example>
   </p>
   <p>
     Vous pouvez aussi ajouter d'autres champs comme 
     «&nbsp;longtitle&nbsp;», «&nbsp;icon&nbsp;», «&nbsp;hint&nbsp;», 
     etc. Voir <manref section="5" name="menufile">, <manref section="1" 
     name="update-menus"> et 
     <file>/usr/share/doc/debian-policy/menu-policy.html/</file> pour plus 
     d'informations.
   </p>
  </sect>
  <sect id="watch"> watch.ex

   <p>
     Ce fichier est utilisé pour configurer les programmes <manref 
     section="1" name="uscan"> et <manref section="1" name="uupdate"> (dans 
     le paquet <package>devscripts</package>). Ils sont utilisés pour 
     surveiller le site sur lequel vous avez obtenu les sources.
   </p>
   <p>
     Voici ce que j'y ai mis&nbsp;:
   </p>
   <p>
    <example>
# watch control file for uscan
# Site            Directory  Pattern               Version  Script
ftp.obsession.se  /gentoo    gentoo-(.*)\.tar\.gz  debian   uupdate
  </example>
   </p>
   <p>
     Astuce&nbsp;: connectez-vous à Internet, et essayez d'exécuter 
     «&nbsp;uscan&nbsp;» dans le répertoire du programme une fois que vous 
     avez créé ce fichier. Et lisez les manuels. :-)
   </p>
  </sect>
  <sect id="doc-base">ex.package.doc-base

   <p>
     Si votre paquet a de la documentation autre que des pages de manuel et 
     des documents info, vous devriez utiliser le fichier 
     <package>doc-base</package> pour l'enregistrer, de sorte que 
     l'utilisateur puisse le trouver avec par exemple <manref section="1" 
     name="dhelp">, <manref section="1" name="dwww"> ou <manref section="1" 
     name="doccentral">.
   </p>
   <p>
     Cela inclut normalement les fichiers HTML, PS et PDF, délivrés dans 
     <file>/usr/share/doc/nom_du_paquet/</file>.
   </p>
   <p>
     Voici ce à quoi le fichier doc-base de gentoo ressemble&nbsp;:
   </p>
   <p>
    <example>
  Document: gentoo
  Title: Gentoo Manual
  Author: Emil Brink
  Abstract: This manual describes what Gentoo is, and how it can be used.
  Section: Apps/Tools

  Format: HTML
  Index: /usr/share/doc/gentoo/html/index.html
  Files: /usr/share/doc/gentoo/html/*.html
  </example>
   </p>
   <p>
     Pour plus d'informations sur le format de ce fichier, voir <manref 
     section="8" name="install-docs"> et le manuel de 
     <package>doc-base</package>, dans 
     <file>/usr/share/doc/doc-base/doc-base.html/index.html</file>.
   </p>
   <p>
     Pour plus d'informations sur l'installation de documentation 
     supplémentaire, voir <ref id="destdir">.
   </p>
  </sect>
  <sect id="maintscripts">postinst.ex, preinst.ex, postrm.ex, prerm.ex

   <p>
     Ces fichiers sont nommés scripts de responsable. Ce sont des scripts 
     placés dans la zone de contrôle du paquet et sont exécutés par 
     <prgn>dpkg</prgn> lorsque votre paquet est installé, mis à jour ou 
     supprimé.
   </p>
   <p>
     Pour l'instant, vous devriez éviter les scripts de responsable si vous 
     le pouvez parce qu'ils ont tendance à être complexes. Pour plus 
     d'informations regardez dans le chapitre&nbsp;6 de la Charte Debian, et 
     examinez les fichiers d'exemples fournis par dh_make.
   </p>
  </sect>
 </chapt>
 <chapt id="build">Construire le paquet

  <p>
    Nous devrions maintenant être prêts à construire le paquet.
  </p>
  <sect id="completebuild">Reconstruction complète

   <p>
     Allez dans le répertoire principal du programme et lancez ceci&nbsp;:
   </p>
   <p>
    <example>
  dpkg-buildpackage -rfakeroot
  </example>
   </p>
   <p>
     Ceci fera tout pour vous. Il va&nbsp;:
    <list>
     <item>
      <p>
        nettoyer l'arbre des sources (debian/rules clean), en utilisant 
        <prgn>fakeroot</prgn>
      </p>
     </item>
     <item>
      <p>
        construire le paquet source (dpkg-source -b)
      </p>
     </item>
     <item>
      <p>
        construire le programme (debian/rules build)
      </p>
     </item>
     <item>
      <p>
        construire le paquet binaire (debian/rules binary), en utilisant 
        <prgn>fakeroot</prgn>
      </p>
     </item>
     <item>
      <p>
        signer le fichier source <tt>.dsc</tt>, en utilisant 
        <prgn>gnupg</prgn>
      </p>
     </item>
     <item>
      <p>
        créer et signer le fichier de téléchargement <tt>.changes</tt>, en 
        utilisant <prgn>dpkg-genchanges</prgn> et <prgn>gnupg</prgn>.
      </p>
     </item>
    </list>
   </p>
   <p>
     La seule entrée qui vous sera demandée est votre phrase de passe 
     secrète GPG, deux fois.
   </p>
   <p>
     Une fois que c'est fait, vous verrez les fichiers suivants dans le 
     répertoire au-dessus (<file>~/gentoo/</file>)&nbsp;:
   </p>
   <p>
    <list>
     <item>
      <p>
        <em>gentoo_0.9.12.orig.tar.gz</em>
      </p>
      <p>
        Ceci est le code source original, simplement renommé pour être 
        conforme aux standards Debian. Notez qu'il a été créé en utilisant 
        l'option «&nbsp;-f&nbsp;» du programme <prgn>dh_make</prgn> quand 
        nous l'avons initialement appelé.
      </p>
     </item>
     <item>
      <p>
        <em>gentoo_0.9.12-1.dsc</em>
      </p>
      <p>
        Ceci est un résumé du contenu du code source. Ce fichier est généré 
        à partir du fichier «&nbsp;control&nbsp;», et est utilisé pour 
        décompresser les sources avec <manref section="1" 
        name="dpkg-source">. Ceci est un fichier signé en GPG, de sorte que 
        les gens peuvent être sûrs qu'il s'agit bien du vôtre.
      </p>
     </item>
     <item>
      <p>
        <em>gentoo_0.9.12-1.diff.gz</em>
      </p>
      <p>
        Ce fichier compressé contient chacune des additions que vous avez 
        faites au code source original, sous une forme connue comme 
        «&nbsp;différence unifiée&nbsp;». Il est créé et utilisé par <manref 
        section="1" name="dpkg-source">. Attention&nbsp;: si vous ne nommez 
        pas le paquet source original nomdupaquet_version.orig.tar.gz, 
        <prgn>dpkg-source</prgn> échouera à générer le fichier .diff.gz 
        correctement.
      </p>
      <p>
        Si quelqu'un d'autre veut recréer votre paquet depuis le début, il 
        peut facilement le faire en utilisant ces trois fichiers. La 
        procédure d'extraction est facile&nbsp;: copier simplement ces trois 
        fichiers quelque part et lancer <tt>dpkg-source -x 
        gentoo_0.9.12-1.dsc</tt>.
      </p>
     </item>
     <item>
      <p>
        <em>gentoo_0.9.12-1_i386.deb</em>
      </p>
      <p>
        Ceci est le paquet binaire finalisé. Vous pouvez utiliser 
        <prgn>dpkg</prgn> pour l'installer ou le retirer comme tout autre 
        paquet.
      </p>
     </item>
     <item>
      <p>
        <em>gentoo_0.9.12-1_i386.changes</em>
      </p>
      <p>
        Ce fichier contient toutes les modifications faites dans la révision 
        courante du paquet, et est utilisé par les programmes de maintenance 
        des archives FTP Debian pour y installer les paquets binaires et 
        sources. Il est partiellement généré à partir du fichier 
        «&nbsp;changelog&nbsp;» et du fichier .dsc. Ce fichier est signé en 
        GPG, de sorte que les gens peuvent être sûrs qu'il s'agit bien du 
        vôtre.
      </p>
      <p>
        Au fur et à mesure que vous travaillez sur le paquet, son 
        comportement va changer et de nouvelles capacités seront 
        ajoutées. Les gens qui téléchargent votre paquet peuvent lire ce 
        fichier et voir rapidement ce qui a changé. Les programmes de 
        maintenance des archives Debian vont aussi poster le contenu de ce 
        fichier sur la liste de distribution debian-devel-change.
      </p>
     </item>
    </list>
   </p>
   <p>
     Les longues chaînes de chiffres dans les fichiers .dsc et .changes sont 
     des sommes MD5 pour les fichiers mentionnés. Les personnes 
     téléchargeant vos fichiers peuvent les tester avec <manref section="1" 
     name="md5sum"> et si les fichiers ne correspondent pas, elles sauront 
     que le fichier a été corrompu ou qu'il a été falsifié.
   </p>
  </sect>
  <sect id="quickrebuild">Reconstruction rapide

   <p>
     Avec un paquet imposant, vous ne voudrez sans doute pas reconstruire 
     depuis le début chaque fois que vous faites une petite modification à 
     <file>debian/rules</file>. Pour tester, vous pouvez faire un fichier 
     .deb sans reconstruire les sources amont comme ceci&nbsp;:
   </p>
   <p>
    <example>
  fakeroot debian/rules binary
  </example>
   </p>
   <p>
     Une fois que vous avez fini vos ajustements, souvenez-vous de 
     reconstruire en suivant la procédure correcte ci-dessus. Vous pouvez ne 
     pas être capable de télécharger correctement si vous essayez de 
     télécharger des fichiers .deb construits comme ceci.
   </p>
  </sect>
  <sect id="debuild">La commande debuild

   <p>
     Vous pouvez automatiser encore plus le processus de construction avec 
     la commande <prgn>debuild</prgn>. Voir <manref section="1" 
     name="debuild">.
   </p>
   <p>
     La configuration de la commande debuild peut être faite via 
     <file>/etc/devscript.conf</file> ou <file>~/.devscript</file>. Je 
     suggère au moins les entrées suivantes:
   </p>
   <p>
    <example>
  DEBSIGN_KEYID="Votre_ID_Cle_GPG"
  DEBUILD_DPKG_BUILDPACKAGE_OPTS="-i -ICVS -I.svn"
  </example>
     Avec ceux-ci, vous pouvez construire des paquets en utilisant toujours 
     votre clé GPG et éviter d'inclure des composants non désirés (c'est bon 
     aussi pour le parrainage). Par exemple, nettoyer les sources et 
     reconstruire le paquet depuis un compte utilisateur est simple 
     comme&nbsp;:
   </p>
   <p>
    <example>
  debuild clean
  debuild
  </example>
   </p>
  </sect>
  <sect id="dpatch">Le système dpatch

   <p>
     Le simple usage des commandes <prgn>dh_make</prgn> et 
     <prgn>dpkg-buildpackage</prgn> va créer un unique et large ficher 
     <file>diff.gz</file> qui contient les fichiers de maintenance de paquet 
     dans <file>debian/</file> et les fichiers de différences par rapport 
     aux sources. Un tel paquet est un peu délicat à inspecter et à 
     comprendre pour chaque modification de l'arbre source par la suite. Ce 
     n'est pas bien. <footnote><p>Si vous n'êtes pas encore développeur 
     Debian et que vous demandez à votre parrain de télécharger votre paquet 
     après son examen, vous devriez rendre ce paquet aussi facile que 
     possible à examiner. </p></footnote>
   </p>
   <p>
     Plusieurs méthodes pour la maintenance de l'ensemble de différences ont 
     été proposées et sont utilisées avec les paquets Debian. Le système 
     <prgn>dpatch</prgn> est l'un des plus simples parmi ce genre de 
     systèmes. D'autres sont dbs, cdbs, etc.
   </p>
   <p>
     Un paquet qui est empaqueté correctement avec le système 
     <prgn>dpatch</prgn> a les modifications des sources clairement 
     documentées comme des ensembles de fichiers de différences dans 
     <file>debian/patches</file> et l'arbre source est intact à l'extérieur 
     du répertoire <file>debian</file>. Si vous demandez à votre parrain de 
     télécharger votre paquet, cette séparation plutôt claire et cette 
     documentation de vos changements sont très importantes pour accélérer 
     l'examen du paquet par votre parrain. La méthode d'utilisation de 
     <prgn>dpatch</prgn> est expliquée dans <manref section="1" 
     name="dpatch">.
   </p>
   <p>
     Quand quelqu'un (éventuellement vous-même) fournit par la suite une 
     différence sur les sources, la modification du paquet avec dpatch est 
     assez simple&nbsp;:
    <list compact="compact">
     <item>
      <p>
        éditez la différence pour en faire une différence -p1 sur l'arbre 
        source&nbsp;;
      </p>
     </item>
     <item>
      <p>
        ajoutez l'en-tête en utilisant <prgn>dpatch 
        patch-template</prgn>&nbsp;;
      </p>
     </item>
     <item>
      <p>
        déposez-le dans <file>debian/patches</file>&nbsp;;
      </p>
     </item>
     <item>
      <p>
        ajoutez les noms de fichiers dpatch à 
        <file>debian/patches/00list</file>.
      </p>
     </item>
    </list>
   </p>
   <p>
     De plus, <prgn>dpatch</prgn> a la capacité de créer des différences 
     liées à l'architecture en utilisant des macros CPP.
   </p>
  </sect>
  <sect id="option-sa">Inclure <file>orig.tar.gz</file> pour le téléchargement

   <p>
     Lorsque vous téléchargez le paquet vers l'archive pour la première 
     fois, vous devez inclure les sources <file>orig.tar.gz</file> 
     originales. Si la version du paquet n'est pas à une révision Debian 
     <tt>-0</tt> ou <tt>-t</tt>, vous devez passer l'option 
     «&nbsp;<tt>-sa</tt>&nbsp;» à la commande 
     <prgn>dpkg-buildpackage</prgn>. D'un autre côté, l'option 
     «&nbsp;<tt>-sd</tt>&nbsp;» forcera l'exclusion des sources 
     <file>orig.tar.gz</file> originales.
   </p>
  </sect>
 </chapt>
 <chapt id="checkit">Contrôler les erreurs du paquet
  <p>
  </p>
  <sect id="lintians">Les paquets lintian

   <p>
     Lancez <manref section="1" name="lintian"> sur votre fichier .changes&nbsp;; ces programmes vont 
     rechercher un grand nombre d'erreurs d'empaquetage courantes. Les 
     commandes sont&nbsp;:
   </p>
   <p>
    <example>
  lintian -i gentoo_0.9.12-1_i386.changes
  </example>
   </p>
   <p>
     Bien sûr, remplacez le nom de fichier par celui du fichier .changes 
     généré pour votre paquet. S'il s'avère qu'il y a des erreurs (les 
     lignes commençant avec E:), lisez l'explication (les lignes N:), 
     corrigez les erreurs, et reconstruisez comme décrit dans <ref 
     id="completebuild">. S'il y a des lignes qui commencent avec W:, il 
     s'agit de mises en garde, donc vous pouvez ajuster votre paquet ou vous 
     assurer que les mises en garde sont inutiles (et faire en sorte que 
     lintian les ignore&nbsp;; voir la documentation pour les détails).
   </p>
   <p>
     Remarquez que vous pouvez reconstruire le paquet avec 
     <prgn>dpkg-buildpackage</prgn> et lancer <prgn>lintian</prgn> en une seule commande avec <manref section="1" 
     name="debuild">.
   </p>
  </sect>
  <sect id="mc">La commande mc

   <p>
     Vous pouvez décompresser le contenu d'un paquet <file>*.deb</file> avec 
     la commande <manref section="1" name="dpkg-deb">. Vous pouvez lister le 
     contenu d'un paquet Debian généré avec <manref section="1" 
     name="debc">.
   </p>
   <p>
     Tout ceci peut être transformé en un processus intuitif en utilisant un 
     gestionaire de fichiers comme <manref section="1" name="mc"> qui vous 
     permet de consulter non seulement le contenu des fichiers paquet 
     <file>*.deb</file>, mais aussi les fichiers <file>*.diff.gz</file> et 
     <file>*.tar.gz</file>.
   </p>
   <p>
     Soyez attentif aux fichiers inutiles ou de taille nulle, à la fois dans 
     les paquets binaires et source. Souvent les fichiers inutiles ne sont 
     pas nettoyés correctement&nbsp;; ajustez votre fichier rules pour 
     compenser.
   </p>
   <p>
     Astuce&nbsp;: «&nbsp;<tt>zgrep ^+++ 
     ../gentoo_0.9.12-1.diff.gz</tt>&nbsp;» vous donnera la liste de 
     changements/additions faites aux fichiers source, et 
     «&nbsp;<tt>dpkg-deb -c gentoo_0.9.12-1_i386.deb</tt>&nbsp;» ou 
     «&nbsp;<tt>debc gentoo_0.9.12-1_i386.changes</tt>&nbsp;» donnera la 
     liste des fichiers dans le paquet binaire.
   </p>
  </sect>
  <sect id="debdiff">La commande debdiff

   <p>
     Vous pouvez comparez la liste des fichiers de deux paquets Debian 
     binaires avec <manref section="1" name="debdiff">. Ceci est utile pour 
     vérifier qu'aucun fichier n'a été déplacé ou supprimé 
     malencontreusement, et qu'aucune autre modification inattendue n'a été 
     faite en mettant à jour les paquets. Vous pouvez vérifier un groupe de 
     fichiers <file>*.deb</file> simplement avec «&nbsp;<tt>debdiff 
     old-package.change new-package.change</tt>&nbsp;».
   </p>
  </sect>
  <sect id="interdiff">La commande interdiff
  
   <p>
     Vous pouvez comparer deux fichiers <file>diff.gz</file> avec la 
     commande <manref section="1" name="interdiff">. Ceci est utile pour 
     vérifier qu'aucune modification inattendue n'a été effectuée sur les 
     sources par le gestionnaire en mettant à jour les paquets. Exécutez 
     «&nbsp;<tt>interdiff -z old-package.diff.gz 
     new-package.diff.gz</tt>&nbsp;».
   </p>
  </sect>
  <sect id="debi">La commande debi

   <p>
     Installez le paquet pour le tester vous-même, par exemple en utilisant 
     <manref section="1" name="debi"> en tant que root. Essayez de 
     l'installer sur d'autres machines que la vôtre et vérifiez 
     attentivement chaque avertissement ou erreur tant à l'installation 
     qu'en exécutant le programme.
   </p>
  </sect>
  <sect id="pbuilder">Le paquet pbuilder
   <p>
     Pour un environnement de construction propre (chroot) permettant de 
     vérifier les dépendances de construction, <package>pbuilder</package> 
     est très utile. Cela garantit une construction propre des sources en 
     construction automatique pour différentes architectures et évite 
     l'erreur de gravité sérieuse FTBFS (Fails To Build From Source, ne se 
     construit pas à partir des sources), qui est toujours en catégorie RC 
     (Release Critical, bloquant l'intégration). Voir <url 
     id="&buildd-home;"> pour plus d'informations sur le constructeur 
     automatique de paquet Debian.
   </p>
   <p>
     L'usage le plus basique du paquet <package>pbuilder</package> est 
     l'invocation directe de la commande <prgn>pbuilder</prgn> en tant que 
     root. Par exemple, exécutez les commandes qui suivent dans le 
     répertoire où <file>.orig.tar.gz</file>, <file>.diff.gz</file> et 
     <file>.dsc</file> se trouvent pour construire un paquet.
    <example>
  root # pbuilder create # if second time, pbuilder update
  root # pbuilder build foo.dsc
</example>
     Les paquets nouvellement créés seront placés dans 
     <file>/var/cache/pbuilder/result/</file> et appartiendront au 
     superutilisateur.
   </p>
   <p>
     La commande <prgn>pdebuild</prgn> vous aide a utiliser les fonctions du 
     paquet <package>pbuilder</package> depuis un compte utilisateur 
     normal. Depuis la racine de l'arbre source, en ayant le fichier 
     <file>orig.tar.gz</file> dans son répertoire parent, vous exécutez les 
     commandes suivantes&nbsp;:
    <example>
  $ sudo pbuilder create # si deuxième fois, sudo pbuilder update
  $ pdebuild
</example>
     Les paquets nouvellement créés seront placés dans 
     <file>/var/cache/pbuilder/result/</file> et n'appartiendront pas au 
     superutilisateur. <footnote><p>Pour l'instant, je vous recommande de 
     configurer votre système en donnant accès en écriture au répertoire 
     <file>/var/cache/pbuilder/result/</file> à l'utilisateur, et en 
     ajoutant aux fichiers <file>~/.pbuilderrc</file> au 
     <file>/etc/pbuilderrc</file> la ligne <example> AUTO_DEBSIGN=yes 
     </example> Ceci vous permettra de signer les paquets générés avec votre 
     clé secrète GPG sous <file>~/.gnupg/</file>. Dans la mesure où le 
     paquet <package>pbuilder</package> évolue toujours, vous aurez à 
     vérifier la configuration réelle en consultant la dernière 
     documentation officielle. </p></footnote>
   </p>
   <p>
     Si vous voulez ajouter des sources supplémentaires apt pour être 
     utilisées par le paquet <package>pbuilder</package>, mettez 
     <tt>OTHERMIRROR</tt> dans <file>~/.pbuilderrc</file> ou 
     <file>/etc/pbuilderrc</file> et exécutez (pour <em>Sarge</em>)&nbsp;:
    <example>
$ sudo pbuilder update --distribution sarge --override-config
</example>
     L'utilisation de <tt>--override-config</tt> est nécessaire pour mettre 
     à jour les sources apt dans l'environnement chroot.
   </p>
   <p>
     Voir <url id="&pbuilder-home;">, <manref section="1" name="pdebuild">, 
     <manref section="5" name="pbuilderrc">, et <manref section="8" 
     name="pbuilder"> .
   </p>
  </sect>
 </chapt>
 <chapt id="upload">Envoyer votre paquet

  <p>
    Maintenant que vous avez testé votre nouveau paquet en détail, vous êtes 
    prêt à commencer le processus d'application de nouveau responsable 
    Debian, comme décrit dans <url 
    id="http://www.debian.org/devel/join/newmaint">.
  </p>
  <sect id="upload-debian">Envoyer vers l'archive Debian

   <p>
     Une fois que vous êtes devenu un responsable Debian officiel, vous 
     devrez télécharger le paquet sur les archives Debian. Vous pouvez le 
     faire manuellement, mais c'est plus facile d'utiliser les outils 
     automatiques fournis, comme <manref section="1" name="dupload"> ou 
     <manref section="1" name="dput">. Nous décrirons la façon de faire avec 
     <prgn>dupload</prgn>.
   </p>
   <p>
     D'abord vous devez écrire le fichier de configuration de dupload. Vous 
     pouvez soit éditer le fichier global <file>/etc/dupload.conf</file>, ou 
     avoir votre propre fichier <file>~/.dupload</file> pour remplacer les 
     quelques détails que vous voulez changer. Mettez quelque chose comme 
     ceci dans le fichier&nbsp;:
   </p>
   <p>
    <example>
  package config;

  $default_host = "anonymous-ftp-master";

  $cfg{'anonymous-ftp-master'} = {
      fqdn => "ftp-master.debian.org",
      method => "ftp",
      incoming => "/pub/UploadQueue/",
      # les fichiers passent par dinstall sur ftp-master qui envoie
      # les courriers électroniques lui-même
      dinstall_runs => 1,
  };

  1;
  </example>
   </p>
   <p>
     Bien sûr, remplacez mes informations personnelles par les vôtres, et 
     lisez la page de manuel <manref section="5" name="dupload.conf"> pour 
     comprendre ce que chacune de ces options signifie.
   </p>
   <p>
     L'option $default_host est la plus compliquée &mdash; elle détermine la 
     queue de téléchargement qui sera utilisée par 
     défaut. «&nbsp;anonymous-ftp-master&nbsp;» est la principale, mais il 
     est possible que vous souhaitiez en utiliser une autre, plus 
     rapide. Pour plus d'informations sur les queues de téléchargement, 
     lisez la Référence du Développeur, section «&nbsp;La mise à jour d'un 
     paquet&nbsp;», dans <file>&uploading;</file>.
   </p>
   <p>
     Puis connectez-vous à votre fournisseur d'accès Internet et lancez 
     cette commande&nbsp;:
   </p>
   <p>
    <example>
  dupload gentoo_0.9.12-1_i386.changes
  </example>
   </p>
   <p>
     <prgn>dupload</prgn> vérifie que les sommes md5 des fichiers sont 
     identiques à celles du fichier .changes, pour qu'il puisse vous avertir 
     de reconstruire comme décrit dans <ref id="completebuild"> et qu'il 
     charge le fichier correctement.
   </p>
   <p>
     Si vous rencontrez un problème d'envoi à <url id="&ftp-uploadqueue;">, 
     vous pouvez le résoudre manuellement en envoyant un fichier 
     <file>*.commands</file> signé gpg à <url id="&ftp-uploadqueue;"> avec 
     <prgn>ftp</prgn>. <footnote><p>Voyez <url 
     id="&ftp-command;">. Alternativement, vous pouvez utiliser la commande 
     <prgn>dcut</prgn> du paquet <package>dput</package>. </p></footnote> 
     Par exemple, utilisez <file>hello.commands</file>&nbsp;:
    <example>
  -----BEGIN PGP SIGNED MESSAGE-----
   
  Uploader: Roman Hodek &lt;Roman.Hodek@informatik.uni-erlangen.de&gt;
  Commands:
   rm hello_1.0-1_i386.deb
   mv hello_1.0-1.dsx hello_1.0-1.dsc
   
  -----BEGIN PGP SIGNATURE-----
  Version: 2.6.3ia
   
  iQCVAwUBNFiQSXVhJ0HiWnvJAQG58AP+IDJVeSWmDvzMUphScg1EK0mvChgnuD7h
  BRiVQubXkB2DphLJW5UUSRnjw1iuFcYwH/lFpNpl7XP95LkLX3iFza9qItw4k2/q
  tvylZkmIA9jxCyv/YB6zZCbHmbvUnL473eLRoxlnYZd3JFaCZMJ86B0Ph4GFNPAf
  Z4jxNrgh7Bc=
  =pH94
  -----END PGP SIGNATURE-----
</example>
   </p>
  </sect>
  <sect id="upload-private">Envoyer vers une archive privée

   <p>
     Si vous souhaitez créer une archive personnelle de paquets à 
     <tt>URL="http://people.debian.org/~<var>nom_compte</var>"</tt> en tant 
     que développeur avec une simple invocation de <tt>dupload -t 
     <var>nom_cible</var></tt>, vous devriez ajouter les lignes suivantes au 
     fichier <file>/etc/dupload.conf</file>:
    <example>
# Compte developpeur
$cfg{'<var>nom_cible</var>'} = {
        fqdn =&gt; "people.debian.org",
        method =&gt; "scpb",
        incoming =&gt; "/home/<var>nom_compte</var>/public_html/package/",
        # Je n'ai pas besoin d'annonce
        dinstall_runs =&gt; 1,
};
$cfg{'<var>nom_cible</var>'}{preupload}{'changes'} = "
        echo 'mkdir -p public_html/package' | ssh people.debian.org  2&gt;/dev/null ;
        echo 'Répertoire paquet créé !'";

$cfg{'<var>nom_cible</var>'}{postupload}{'changes'} = "
        echo 'cd public_html/package ;
        dpkg-scanpackages . /dev/null &gt;Packages || true ;
        dpkg-scansources . /dev/null &gt;Sources || true ;
        gzip -c Packages >Packages.gz ;
        gzip -c Sources &gt;Sources.gz ' | ssh people.debian.org  2&gt;/dev/null ;
        echo 'Archive paquet créée !'";

</example>
     Ici, l'archive APT est créée avec une exécution rapide et sale shell à 
     distance sur SSH. Les fichiers de remplacement requis par 
     <prgn>dpkg-scanpackages</prgn> et <prgn>dpkg-scansources</prgn> sont 
     spécifiés comme <file>/dev/null</file>. Cette technique peut être 
     utilisée par d'autres que les Développeur Debian pour placer leurs 
     paquets dans leur site web personnel. Vous pouvez aussi utiliser 
     <prgn>apt-ftparchive</prgn> ou d'autres scripts pour créer une archive 
     APT.
   </p>
  </sect>
 </chapt>
 <chapt id="update">Mettre à jour le paquet

  <sect id="newrevision">Nouvelle révision Debian

   <p>
     Disons qu'un rapport de bogue a été rempli pour votre paquet, #54321, 
     et qu'il décrit un problème que vous pouvez résoudre. Pour créer une 
     nouvelle révision du paquet, vous devez&nbsp;:
    <list>
     <item>
      <p>
        Corriger le problème dans le paquet source, bien sûr.
      </p>
     </item>
     <item>
      <p>
        Ajouter une nouvelle révision au sommet du fichier changelog Debian, 
        par exemple avec «&nbsp;<tt>dch -i</tt>&nbsp;», ou explicitement 
        avec «&nbsp;<tt>dch -v &lt;version&gt;-&lt;revision&gt;</tt> 
        &nbsp;», et ajoutez ensuite les commentaires en utilisant votre 
        éditeur favori.
      </p>
      <p>
        Astuce&nbsp;: comment obtenir facilement la date au format 
        requis&nbsp;? Utilisez «&nbsp;<tt>822-date</tt>&nbsp;» ou 
        «&nbsp;<tt>date -R</tt>&nbsp;».
      </p>
     </item>
     <item>
      <p>
        Ajoutez une courte description du bogue et de la solution dans 
        l'entrée du changelog, suivie par ceci&nbsp;: 
        «&nbsp;Closes:&nbsp;#54321&nbsp;». De cette manière, le rapport de 
        bogue sera automatiquement fermé par le logiciel de maintenance des 
        archives au moment où votre paquet sera accepté dans l'archive 
        Debian.
      </p>
     </item>
     <item>
      <p>
        Recommencez ce que vous aviez fait dans <ref id="completebuild">, 
        <ref id="checkit">, et <ref id="upload">. La différence est que 
        cette fois, l'archive des sources originales ne sera pas incluse, 
        car elle n'a pas été changée et est déjà dans l'archive Debian.
      </p>
     </item>
    </list>
   </p>
  </sect>
  <sect id="newupstream">Nouvelle version amont (basique)

   <p>
     Considérons maintenant une autre situation, légèrement plus compliquée 
     &ndash; une nouvelle version amont est disponible, et bien sûr vous 
     voulez en faire un paquet. Vous devez donc&nbsp;:
    <list>
     <item>
      <p>
        télécharger les sources et mettre l'archive source (par exemple 
        nommée «&nbsp;<file>gentoo-0.9.13.tar.gz</file>&nbsp;») dans le 
        répertoire au dessus des anciennes sources (par exemple 
        <file>~/gentoo/</file>)&nbsp;;
      </p>
     </item>
     <item>
      <p>
        entrer dans l'ancien répertoire source, et lancer&nbsp;:
       <example>
  uupdate -u gentoo-0.9.13.tar.gz
  </example>
      </p>
      <p>
        Bien sûr, remplacez le nom de fichier par celui de l'archive source 
        de votre programme. <manref section="1" name="uupdate"> va 
        correctement renommer cette archive, essayer d'appliquer les 
        modifications de votre précédent fichier <file>.diff.gz</file>, et 
        mettre à jour le nouveau fichier 
        <file>debian/changelog</file>&nbsp;;
      </p>
     </item>
     <item>
      <p>
        aller dans le répertoire 
        «&nbsp;<file>../gentoo-0.9.13</file>&nbsp;», l'arbre des sources du 
        nouveau paquet, et recommencer ce que vous aviez fait dans <ref 
        id="completebuild">, <ref id="checkit"> et <ref id="upload">.
      </p>
     </item>
    </list>
   </p>
   <p>
     Remarquez que si vous configurez 
     «&nbsp;<file>debian/watch</file>&nbsp;» comme indiqué dans <ref 
     id="watch">, vous pouvez lancer <manref section="1" name="uscan"> pour 
     automagiquement chercher les nouvelles sources, les télécharger et 
     exécuter <prgn>uupdate</prgn> dessus.
   </p>
  </sect>
  <sect id="newupstream-real">Nouvelle version amont (réel)

   <p>
     Lorsque vous préparez des paquets pour l'archive Debian, vous devez 
     vérifier les paquets en résultant en détail. Voici un exemple plus 
     réaliste de cette procédure&nbsp;:
    <enumlist numeration="arabic" compact="compact">
     <item>
      <p>
        vérifiez les modification dans la source amont&nbsp;;
       <list compact="compact">
        <item>
         <p>
           lisez les <file>changelog</file> et <file>NEWS</file> amonts, 
           ainsi que toute autre documentation distribuée avec la nouvelle 
           version&nbsp;;
         </p>
        </item>
        <item>
         <p>
           faites un «&nbsp;<tt>diff -urN</tt>&nbsp;» entre l'ancienne et la 
           nouvelle source amont pour avoir une idée de l'étendue des 
           modifications, où le travail est en cours (et donc où les 
           nouveaux bogues sont susceptibles d'apparaître), et pour avoir à 
           l'&oelig;il quoi que ce soit de suspect&nbsp;;
         </p>
        </item>
       </list>
      </p>
     </item>
     <item>
      <p>
        portez l'ancien empaquetage Debian dans la nouvelle version&nbsp;;
       <list compact="compact">
        <item>
         <p>
           décompressez l'archive source et renommez la racine de 
           l'arborescence source en 
           <file>&lt;nompaquet&gt;-&lt;version_amont&gt;/</file> et 
           «&nbsp;<tt>cd</tt>&nbsp;» dans ce répertoire&nbsp;;
         </p>
        </item>
        <item>
         <p>
           copiez l'archive source et renommez-la en 
           <file>&lt;nompaquet&gt;_&lt;version_amont&gt;.orig.tar.gz</file>&nbsp;;
         </p>
        </item>
        <item>
         <p>
           appliquez les mêmes modifications au nouvel arbre source qu'à 
           l'ancien. Les méthodes possibles sont&nbsp;;:
          <list compact="compact">
           <item>
            <p>
              la commande «&nbsp;<tt>zcat 
              <var>/path/to/</var>&lt;nompaquet&gt;_&lt;ancienne-version&gt;.diff.gz 
              | patch -p1</tt>&nbsp;»&nbsp;;
            </p>
           </item>
           <item>
            <p>
              la commande «&nbsp;<prgn>uupdate</prgn>&nbsp;»&nbsp;;
            </p>
           </item>
           <item>
            <p>
              la commande «&nbsp;<tt>svn merge</tt>&nbsp;» si vous gérez les 
              sources dans un répertoire Subversion&nbsp;;
            </p>
           </item>
           <item>
            <p>
              simplement copier le répertoire <file>debian/</file> de 
              l'ancien arbre source s'il a été empaqueté avec 
              <package>dpatch</package>.
            </p>
           </item>
          </list>
         </p>
        </item>
        <item>
         <p>
           préservez les anciennes entrées changelog (cela va de soit, mais 
           il y a déjà eu des incidents...)&nbsp;;
         </p>
        </item>
        <item>
         <p>
           le nouveau numéro de version et le numéro de version amont ajouté 
           au numéro de révision Debian <tt>-t</tt>, par exemple 
           «&nbsp;`<tt>0.9.13-1</tt>&nbsp;»&nbsp;;
         </p>
        </item>
        <item>
         <p>
           ajoutez une entrée changelog avec "New upstream release" pour 
           cette nouvelle version au sommet de 
           <file>debian/changelog</file>. Par exemple, «&nbsp;<tt>dch -v 
           0.9.13-1</tt>&nbsp;»&nbsp;;
         </p>
        </item>
        <item>
         <p>
           décrivez succinctement les modifications <em>dans</em> la 
           nouvelle version amont qui fixent des bogues et qui ferment les 
           rapports associés dans le changelog&nbsp;;
         </p>
        </item>
        <item>
         <p>
           décrivez succinctement les modifications <em>à</em> la nouvelle 
           version amont par le responsable qui fixent des bogues rapportés 
           et qui ferment les rapports dans le changelog&nbsp;;
         </p>
        </item>
        <item>
         <p>
           si les modifications/fusions<footnote><p>NdT&nbsp;: 
           patch/merge</p></footnote> ne s'appliquent pas proprement, 
           inspectez la situation pour déterminer ce qui a échoué (les 
           indices sont dans les fichiers <file>.rej</file>). La plupart du 
           temps, le problème est qu'une modification que vous aviez 
           appliquée aux sources a été intégrée en amont, et donc n'est plus 
           pertinente&nbsp;;
         </p>
        </item>
        <item>
         <p>
           les mises à jour vers la nouvelle version devraient être 
           silencieuses et non intrusives (les utilisateurs existants ne 
           devraient pas remarquer la mise à jour à part en découvrant que 
           de vieux bogues ont été résolus, et peut-être que de nouvelles 
           fonctionnalités sont présentes)&nbsp;; <footnote><p>Faites en 
           sorte que votre paquet mette à jour correctement les fichiers de 
           configuration lors des mises à jour en utilisant des scripts de 
           responsable (<prgn>postinst</prgn>,&nbsp;...) bien conçus, de 
           sorte qu'il ne <strong>fasse pas</strong> ce que l'utilisateur ne 
           veut pas&nbsp;! Ce sont ces améliorations qui expliquent 
           <strong>pourquoi</strong> les gens choisissent Debian. </p><p> 
           Lorsque la mise à jour est nécessairement intrusive (par exemple 
           des fichiers de configuration éparpillés à travers plusieurs 
           répertoires home avec des structures complètement différentes), 
           vous pouvez envisager de remettre une configuration par défaut 
           sûre du paquet (par exemple, le service est désactivé), et de 
           fournir les documentations adéquates requises par la Charte 
           Debian (<file>README.Debian</file> et <file>NEWS.Debian</file>) 
           en dernier ressort. Mais ne vous souciez pas d'une note 
           debconf. </p></footnote>
         </p>
        </item>
        <item>
         <p>
           si vous devez, pour quelque raison que ce soit, ajouter des 
           fichiers modèles qui avaient été effacés, pour pouvez exécuter 
           <prgn>dh_make</prgn> à nouveau dans le même répertoire, déjà 
           «&nbsp;debianisé&nbsp;», avec l'option <tt>-o</tt>. Puis éditez 
           les correctement&nbsp;;
         </p>
        </item>
        <item>
         <p>
           les modifications Debian existantes doivent être réévaluées; 
           jetez tout ce qui a été incorporé en amont (sous une forme ou une 
           autre), et souvenez-vous de garder ce qui ne l'a pas été, à moins 
           qu'il n'y ait une bonne raison de ne pas le faire&nbsp;;
         </p>
        </item>
        <item>
         <p>
           si le système de construction a été changé (avec un peu de 
           chance, vous êtes au courant depuis l'étape&nbsp;1), mettez à 
           jour les dépendances de construction <file>debian/rules</file> et 
           <file>debian/control</file>, si besoin est.
         </p>
        </item>
       </list>
      </p>
     </item>
     <item>
      <p>
        construisez le nouveau paquet comme expliqué dans <ref id="debuild"> 
        ou <ref id="pbuilder">. L'utilisation de <package>pbuilder</package> 
        est souhaitable&nbsp;;
      </p>
     </item>
     <item>
      <p>
        vérifiez que le nouveau paquet est construit correctement&nbsp;;
       <list compact="compact">
        <item>
         <p>
           effectuez <ref id="checkit">&nbsp;;
         </p>
        </item>
        <item>
         <p>
           effectuez <ref id="upgrading">&nbsp;;
         </p>
        </item>
        <item>
         <p>
           vérifiez à nouveau si des bogues rapportés dans le <url 
           id="http://www.debian.org/Bugs/" name="système de suivi des 
           bogues Debian (Bug Tracking System BTS)"> ont été résolus&nbsp;;
         </p>
        </item>
        <item>
         <p>
           vérifiez le contenu du fichier .changes pour vous assurer que 
           vous téléchargez vers la bonne distribution, que les rapports de 
           bogues refermés sont correctement listés dans les champs Closes:, 
           que les champs Maintainer: et Changed-By: correspondent, que le 
           fichier est signé GPG, etc.&nbsp;;
         </p>
        </item>
       </list>
      </p>
     </item>
     <item>
      <p>
        si des modifications devaient être faites pour corriger quoi que ce 
        soit dans l'empaquetage, recommencez à l'étape 2 jusqu'à obtenir 
        satisfaction&nbsp;;
      </p>
     </item>
     <item>
      <p>
        si votre téléchargement doit être parrainé, souvenez-vous de noter 
        toute option spéciale requise pour construire le paquet (comme 
        «&nbsp;<tt>dpkg-buildpackage -sa -v ...</tt>&nbsp;») et d'en 
        informer votre parrain/marraine pour qu'il/elle construise le paquet 
        correctement&nbsp;;
      </p>
     </item>
     <item>
      <p>
        si vous téléchargez vous-même, effectuez <ref id="upload">.
      </p>
     </item>
    </enumlist>
   </p>
  </sect>
  <sect id="orig-tar">Le fichier <file>orig.tar</file>

   <p>
     Si vous essayez de construire des paquets seulement à partir de la 
     nouvelle arborescence source avec le répertoire <file>debian</file> 
     sans le fichier <file>orig.tar.gz</file> dans le répertoire parent, 
     vous aurez créé sans le vouloir un paquet source natif, qui vient sans 
     fichier <file>diff.gz</file>. Ce genre d'empaquetage n'est approprié 
     que pour les paquets spécifiques à Debian, qui ne seront jamais utiles 
     dans une autre distribution. <footnote><p>Certains affirment que, même 
     pour des paquets spécifiques à Debian, il est préférable de conserver 
     le contenu du répertoire <file>debian/</file> dans le fichier 
     <file>diff.gz</file>, plutôt que dans le fichier 
     <file>orig.tar.gz</file>. </p></footnote>
   </p>
   <p>
     Pour obtenir un paquet source non natif qui contient à la fois le 
     fichier <file>orig.tar.gz</file> et le fichier <file>diff.gz</file>, 
     vous devez copier manuellement l'archive amont dans le répertoire 
     parent avec son nom changé en 
     <file>&lt;nompaquet&gt;_&lt;version_amont&gt;.orig.tar.gz</file>, comme 
     l'avait fait la commande <prgn>dh_make</prgn> dans <ref id="dh_make">.
   </p>
  </sect>
  <sect id="cvs-buildpackage">La commande cvs-buildpackage et similaires

   <p>
     Vous devriez considérer l'usage d'un système de gestion de code source 
     pour gérer l'activité d'empaquetage. Il y a plusieurs scripts qui sont 
     personnalisés pour être utilisés avec les plus populaires.
    <list compact="compact">
     <item>
      <p>
        CVS
       <list compact="compact">
        <item>
         <p>
           <package>cvs-buildpackage</package>
         </p>
        </item>
       </list>
      </p>
     </item>
     <item>
      <p>
        Subversion
       <list compact="compact">
        <item>
         <p>
           <package>svn-buildpackage</package>
         </p>
        </item>
       </list>
      </p>
     </item>
     <item>
      <p>
        Arch (tla)
       <list compact="compact">
        <item>
         <p>
           <package>tla-buildpackage</package>
         </p>
        </item>
        <item>
         <p>
           <package>arch-buildpackage</package>
         </p>
        </item>
       </list>
      </p>
     </item>
    </list>
   </p>
   <p>
     Ces commandes automatisent aussi l'empaquetage de nouvelles versions 
     amonts.
   </p>
  </sect>
  <sect id="upgrading">Vérifier les mises à jour de paquet

   <p>
     Quand vous construisez une nouvelle version du paquet, vous devriez 
     toujours suivre cette procédure pour vérifier le paquet, pour être 
     tranquillement mis à jour&nbsp;:
    <list>
     <item>
      <p>
        mettez à jour depuis la version précédente&nbsp;;
      </p>
     </item>
     <item>
      <p>
        revenez à la version précédente, puis retirez-la&nbsp;;
      </p>
     </item>
     <item>
      <p>
        installez le nouveau paquet&nbsp;;
      </p>
     </item>
     <item>
      <p>
        retirez-le et réinstallez-le à nouveau&nbsp;;
      </p>
     </item>
     <item>
      <p>
        purgez-le.
      </p>
     </item>
    </list>
   </p>
   <p>
     Si le paquet utilise des scripts pre/post/inst/rm non triviaux, veillez 
     à tester leurs chemins de mises à jour.
   </p>
   <p>
     Gardez à l'esprit que si votre paquet a été livré avec Debian, les gens 
     vont souvent mettre à jour votre paquet à partir de la révision qui 
     était dans la dernière version Debian. Souvenez-vous de tester aussi 
     les mises à jour à partir de cette révision.
   </p>
  </sect>
 </chapt>
 <chapt id="helpme">Où demander de l'aide

  <p>
    Avant de vous décider à poser une question dans un lieu public, 
    s.v.p. RTFM. Ceci inclut la documentation sous 
    <file>/usr/share/doc/dpkg</file>, <file>/usr/share/doc/debian</file>, 
    <file>&autotools-dev;</file>, <file>/usr/share/doc/paquet/*</file> et 
    les pages de manuel/d'info pour tous les programmes mentionnés dans ce 
    document. Consultez toutes les informations dans <url id="&nm-home;"> et 
    <url id="&mentors-faq;">.
  </p>
  <p>
    Si vous avez des questions sur la création de paquets pour lesquelles 
    vous n'avez pas pu trouver de réponse dans la documentation, vous pouvez 
    les poser sur la liste de diffusion Debian Mentors, sur 
    <email>debian-mentors@lists.debian.org</email>. Les responsables Debian 
    les plus expérimentés seront heureux de vous aider, mais au moins lisez 
    une partie de la documentation avant de poser une question&nbsp;!
  </p>
  <p>
    Consultez <url id="http://lists.debian.org/debian-mentors/"> pour plus 
    d'informations sur cette liste de diffusion.
  </p>
  <p>
    Quand vous recevez un rapport de bogue (oui, un rapport de bogue 
    réel&nbsp;!) vous saurez qu'il est temps pour vous de plonger dans le 
    <url id="http://www.debian.org/Bugs/" name="système de suivi de bogues 
    Debian"> et de lire la documentation, pour être à même de gérer les 
    rapports efficacement. Je recommande chaudement la lecture de la 
    Référence du Développeur, chapitre «&nbsp;Gérer les bogues&nbsp;», dans 
    <file>&bughandling;</file>.
  </p>
  <p>
    Si vous avez encore des questions, posez-les sur la liste de diffusion 
    Debian Developers à 
    <email>debian-devel@lists.debian.org</email>. Consultez <url 
    id="http://lists.debian.org/debian-devel/"> pour plus d'informations sur 
    cette liste de diffusion.
  </p>
  <p>
    Même si tout marche bien, il est temps de commencer à 
    prier. Pourquoi&nbsp;? Parce que dans quelques heures (ou jours) les 
    utilisateurs du monde entier vont commencer à utiliser votre paquet, et 
    si vous avez fait des erreurs critiques, vous serez bombardé par les 
    courriers électroniques d'utilisateurs Debian furieux... Je 
    plaisante.&nbsp;:-)
  </p>
  <p>
    Relaxez-vous et soyez prêt pour les rapports de bogues, parce qu'il y 
    aura beaucoup plus de travail à faire avant que votre paquet soit 
    parfaitement conforme aux règles Debian (une fois encore, lisez la 
    <em>documentation réelle</em> pour les détails). Bonne chance&nbsp;!
  </p>
 </chapt>
 <appendix id="pkg-eg">Exemples

  <p>
    Ici nous empaquetons l'archive amont <var>gentoo-1.0.2</var>.tar.gz et 
    envoyons tous les paquets vers la <tt><var>cible_nm</var></tt>.
  </p>
  <sect id="pkg-simple">Exemple d'empaquetage simple

   <p>
    <example>
  $ mkdir -p <var>/chemin/vers</var> # nouveau répertoire vide
  $ cd <var>/chemin/vers</var>
  $ tar -xvzf <var>/chemin/depuis/gentoo-1.0.2</var>.tar.gz # prendre les sources
  $ cd <var>gentoo-1.0.2</var>
  $ dh_make -e <var>nom@domaine.dom</var> -f <var>/chemin/depuis/gentoo-1.0.2</var>.tar.gz
  ... Répondre aux questions.
  ... Corriger l'arbre source
  ... Si c'est un paquet script, mettre debian/control à "Architecture: all"
  ... Ne pas effacer ../<var>gentoo_1.0.2</var>.orig.tar.gz
  $ debuild
  ... S'assurer qu'il n'y a pas d'alerte
  $ cd ..
  $ dupload -t <var>cible_nm</var> <var>gentoo_1.0.2-1</var>_i386.changes
</example>
   </p>
  </sect>
  <sect id="pkg-dpatch">Exemple d'empaquetage avec les paquets dpatch et pbuilder

   <p>
    <example>
  $ mkdir -p <var>/chemin/vers</var> # nouveau répertoire vide
  $ cd <var>/chemin/vers</var>
  $ tar -xvzf <var>/chemin/depuis/gentoo-1.0.2</var>.tar.gz
  $ cp -a  <var>gentoo-1.0.2</var> <var>gentoo-1.0.2-orig</var>
  $ cd <var>gentoo-1.0.2</var>
  $ dh_make -e <var>nom@domaine.dom</var> -f /chemin/depuis/<var>gentoo-1.0.2</var>.tar.gz
  ... Répondre aux questions.
  ... Corriger l'arbre source
  ... Essayer de construire le paquet avec "dpkg-buildpackage -rfakeroot -us -uc"
  ... Éditer les sources pour permettre la construction du paquet
  ... Ne pas effacer ../<var>gentoo_1.0.2</var>.orig.tar.gz
  $ cd ..
  $ cp -a <var>gentoo-1.0.2</var> <var>gentoo-1.0.2-keep</var> # copie de sauvegarde
  $ mv <var>gentoo-1.0.2</var>/debian debian
  $ diff -Nru  <var>gentoo-1.0.2-orig</var> <var>gentoo-1.0.2</var> &gt; <var>fichier-diff</var>
  ... Vous pouvez écraser le répertoire <var>gentoo-1.0.2</var> en faisant ceci.
  ... Assurez-vous de garder <var>gentoo-1.0.2</var>-keep pour votre sécurité
  $ mkdir -p debian/patches
  $ dpatch patch-template <var>fichier-diff</var> \
     -p "01_patchname" "description fichier-diff" \
     &lt; <var>fichier-diff</var> &gt; debian/patches/01_patchname.dpatch
  $ cd debian/patches
  $ echo 01_patchname.dpatch >00list
  $ cd ../.. # retour vers <var>/chemin/vers</var>
  $ rm -rf <var>gentoo-1.0.2</var>
  $ editor debian/rules
</example>
     Voici à quoi ressemble le <file>debian/rules</file> originel&nbsp;:
    <example>
  config.status: configure
       ./configure --prefix=/usr --mandir=/usr/share
  build: config.status
       ${MAKE}
  clean:
       $(testdir)
       $(testroot)
       ${MAKE} distclean
       rm -rf debian/imaginary-package debian/files debian/substvars
</example>
     Éditez <file>debian/rules</file> de la manière suivante pour utiliser 
     <package>dpatch</package>:
    <example>
  config.status: patch configure
       ./configure --prefix=/usr --mandir=/usr/share
  build: config.status
       ${MAKE}
  clean: clean-patched unpatch
  clean-patched:
       $(testdir)
       $(testroot)
       ${MAKE} distclean
       rm -rf debian/imaginary-package debian/files debian/substvars
  patch: patch-stamp
  patch-stamp:
       dpatch apply-all
       dpatch call-all -a=pkg-info >patch-stamp
  
  unpatch:
       dpatch deapply-all
       rm -rf patch-stamp debian/patched
</example>
   </p>
   <p>
     Vous êtes maintenant prêt pour réempaqueter l'arbre source avec le 
     système <package>dpatch</package>.
    <example>
  $ tar -xvzf <var>gentoo_1.0.2</var>.orig.tar.gz
  $ cp -a debian/ <var>gentoo-1.0.2</var>/debian
  $ cd <var>gentoo-1.0.2</var>
  $ sudo pbuilder update
  $ pdebuild
  $ cd /var/cache/pbuilder/result/
  $ dupload -t <var>cible_nm</var> <var>gentoo_1.0.2-1</var>_i386.changes
</example>
   </p>
  </sect>
 </appendix>
</book>
</debiandoc>
