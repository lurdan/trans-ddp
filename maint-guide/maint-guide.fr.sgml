<!doctype debiandoc system>

<debiandoc>

<book>

<titlepag>

<title>Guide du nouveau responsable Debian</title>

<author>Josip Rodin <email/jrodin@jagor.srce.hr/
</author>
<author>Traducteur&nbsp;: Frédéric Dumont <email/frederic.dumont@easynet.be/
</author>

<version>version 1.2, 6 avril 2002.</version>
<!-- version CVS de l'original : 1.37 -->

<copyright>
<copyrightsummary>Copyright &copy; 1998-2002 Josip Rodin.</copyrightsummary>

<p>Ce document peut être utilisé selon les termes de la Licence publique
générale de GNU version 2 ou suivante. 

<p>Ce document a été créé avec ces deux documents comme exemple&nbsp;:

<p>Making a Debian Package (the Debmake Manual), copyright &copy;
1997 Jaldhar Vyas.

<p>The New-Maintainer's Debian Packaging Howto, copyright &copy; 1997
Will Lowe.
</copyright>

</titlepag>

<toc sect>

<chapt id="start">Commencer de la bonne manière

<p>Ce document essaye de décrire à l'utilisateur Debian courant (et au
développeur en devenir) la construction d'un paquet Debian. Il utilise
un langage assez courant, et est complété avec des exemples. Il y a un
vieux proverbe romain, <em>Longum iter est per preaecepta, breve et
efficax per exempla!</em> (C'est long par la règle, court et efficace
par l'exemple&nbsp;!).

<p>Une des choses qui font de Debian une distribution de si haut niveau est
son système de paquets. Bien qu'il existe une grande quantité de logiciels
dans le format Debian, parfois vous devrez installer un logiciel qui ne
l'est pas. Vous pouvez vous demander comment faire vos propres paquets et
peut-être pensez vous que c'est une tâche très difficile. Éh bien, si vous
êtes vraiment un débutant sous Linux, c'est dur, mais si vous étiez un
débutant, vous ne seriez pas en train de lire ce document maintenant. :-)
Vous devez en savoir un peu sur la programmation Unix, mais vous n'avez
certainement pas besoin d'être un magicien.

<p>Une chose est certaine, cependant&nbsp;: pour correctement développer et
maintenir des paquets Debian, vous aurez besoin de journées/homme.  Ne vous
faites pas d'illusion, pour que votre système fonctionne les responsables
doivent à la fois être techniquement compétents et rapides.

<p>Ce document va expliquer toutes les étapes les plus petites (et peut-être
a priori insignifiantes), vous aider à créer ce premier paquet, et à gagner
de l'expérience pour construire les révisions suivantes ainsi peut-être que
d'autres paquets.

<p>Les nouvelles versions de ce document devraient toujours être disponible
«&nbsp;online&nbsp;» sur <url name="http://www.debian.org/doc/maint-guide/"
  id="http://www.debian.org/doc/maint-guide/"> et dans le paquet
  «&nbsp;<package/maint-guide/&nbsp;».  La traduction en français est également
  disponible dans le paquet «&nbsp;<package/maint-guide-fr/&nbsp;».

  <sect id="needprogs">Programmes nécessaires au développement.

  <p>Avant de commencer quoi que ce soit, vous devriez vous assurer que vous
  avez correctement installé certains paquets supplémentaires nécessaires pour
  le développement. Notez que la liste ne contient aucun paquet marqué
  «&nbsp;essentiel&nbsp;» ou «&nbsp;requis&nbsp;» - nous supposons que vous avez déjà installé
  ceux-ci.
  
  <p>Cette version du document a été mise à jour pour les paquets de Debian
  2.2 («&nbsp;potato&nbsp;») et 3.0 («&nbsp;woody&nbsp;»).

  <p>Les paquets suivants sont fournis dans l'installation standard de Debian
  2.1, de sorte que vous les avez probablement déjà (ainsi que les paquets
  supplémentaires dont ils dépendent). Néanmoins, vous devriez le vérifier avec
  «&nbsp;dpkg -s &lt;paquet&gt;&nbsp;».

  <list>
  <item><package/dpkg-dev/ - ce paquet contient les outils nécessaires pour
  dépaqueter, construire et télécharger les paquets sources Debian.  (voir
  <manref name="dpkg-source" section="1">)
  
  <item><package/file/ - ce programme bien pratique peut déterminer la nature
  d'un fichier. (voir <manref name="file" section="1">)
  
  <item><package/gcc/ - Le compilateur C de GNU, nécessaire si votre
  programme, comme la plupart, est écrit en C  (voir <manref name="gcc"
  section="1">).  Ce paquet va aussi «&nbsp;attirer&nbsp;» plusieurs autres paquets tels
  que <package/binutils/ qui inclut les programmes utilisés pour assembler et
  lier des fichiers objets (voir «&nbsp;info binutils&nbsp;» dans le paquet
  <package/binutils-doc/) et <package/cpp/, le préprocesseur C (voir <manref
  name="cpp" section="1">).

  <item><package/g++/ - le compilateur C++ de GNU, nécessaire si votre
  programme est écrit en C++ (voir <manref name="g++" section="1">).

  <item><package/libc6-dev/ - Les bibliothèques et fichiers d'en-tête C dont gcc a
  besoin pour les lier aux fichiers objets créés (voir «&nbsp;info libc&nbsp;» dans le
  paquet <package/glibc-doc/).
  
  <item><package/make/ - d'ordinaire, la création d'un programme prend plusieurs
  étapes. Plutôt que d'avoir à taper les mêmes commandes encore et encore,
  vous pouvez utiliser ce programme pour automatiser le processus, en
  créant des fichiers «&nbsp;Makefile&nbsp;» (voir «&nbsp;info make&nbsp;»).

  <item><package/patch/ - ce programme très utile prend un fichier contenant
  une liste de différences (produite par le programme diff) et l'applique au
  fichier original, produisant une version mise à jour. (voir <manref
  name="patch" section="1">)

  <item><package/perl/ - Perl est un des langages de script les plus
  utilisés sur les systèmes modernes similaires à Unix, souvent
  qualifié de «&nbsp;tronçonneuse suisse d'Unix&nbsp;». (voir <manref name="perl"
  section="1">)
  </list>

  <p>Vous devrez probablement aussi installer les programmes suivants.

  <list>
  <item><package/autoconf/ et <package/automake/ - beaucoup de nouveaux
  programmes utilisent des scripts de configuration et des fichiers Makefile
  pré-traités à l'aide de programmes comme ceux-ci (voir «&nbsp;info autoconf&nbsp;»,
  «&nbsp;info automake&nbsp;»). 

  <item><package/dh-make/ et <package/debhelper/ - dh-make est nécessaire pour
  créer le squelette de notre exemple de paquet et il utilise certains outils
  de debhelper pour créer les paquets. Ils ne sont pas indispensables pour la
  création des paquets, mais ils sont <strong>fortement</strong> recommandés
  pour les nouveaux responsables. Ils rendent le processus complet bien plus
  facile à démarrer, et à contrôler par après. (voir <manref name="dh_make"
  section="1">, <manref name="debhelper" section="1">,
  /usr/share/doc/debhelper/README)

  <item><package/devscripts/ - ce paquet contient de jolis scripts utiles qui
  peuvent aider les responsables, mais ils ne sont pas indispensables pour la
  création de paquets. (voir /usr/share/doc/devscripts/README.debian.gz)

  <item><package/fakeroot/ - cet utilitaire vous laisse prétendre être root, ce
  qui est nécessaire pour certaines parties du processus de construction. (voir
  <manref name="fakeroot" section="1">)

  <item><package/gnupg/ - un outil qui vous permet de <em>signer</em>
  numériquement les paquets.  Ceci est spécialement important si vous comptez
  les distribuer à d'autres personnes, et c'est certainement ce que vous ferez
  quand votre travail sera inclus dans la distribution Debian (voir <manref
  name="gpg" section="1">). 

  <item><package/g77/ - le compilateur FORTRAN de GNU, nécessaire si votre
  programme est écrit en FORTRAN (voir <manref name="g77" section="1">).

  <item><package/gpc/ - le compilateur Pascal de GNU, nécessaire si
  votre programme est écrit en Pascal. Digne d'être mentionné ici,
  <package/fp-compiler/, le compilateur pascal libre, est également
  bon pour cette tâche (voir <manref name="gpc" section="1">, <manref
  name="ppc386" section="1">).

  <item><package/imake/ et <package/xmkmf/ - certains programmes, d'ordinaire
  ceux conçus pour X11, utilisent aussi ces programmes pour générer les
  fichiers Makefile à partir d'un ensemble de fonctions macros (voir <manref
  name="imake" section="1">, <manref name="xmkmf" section="1">).

  <item><package/lintian/ - c'est le vérificateur de paquet Debian, qui peut
  vous indiquer de nombreuses erreurs courantes après que vous ayez construit
  le paquet et expliquer les erreurs trouvées. (voir <manref name="lintian"
  section="1">, <manref name="diffstat" section="1">,
  /usr/share/doc/lintian/lintian.html/index.html) </list>

  <p>Enfin, ces paquets <em>très importants</em> doivent être lus en parallèle
  à ce document&nbsp;:

  <list>
  <item><package/debian-policy/ - les Normes incluent des
  explications sur la structure et le contenu de l'archive
  Debian, plusieurs considérations sur l'architecture du système
  d'exploitation, la Norme de hiérarchie des fichiers (qui dit où
  chaque fichier et répertoire doit aller), etc. Le plus important
  pour vous est qu'il décrit les critères que chaque paquet
  doit vérifier pour être inclus dans la distribution. (voir
  /usr/share/doc/debian-policy/policy.html/index.html)

  <item><package/developers-reference/ - concerne tout ce qui n'est pas
  spécifique aux détails techniques de la création de paquets, comme la
  structure des archives, comment renommer, rendre orphelin, choisir un
  paquet, faire un NMU (une version du paquet non faite par le responsable),
  comment gérer les bogues, où et quand télécharger, etc. (voir
  /usr/share/doc/developers-reference/developers-reference.fr.html/index.fr.html)
  </list>

  <p>Les courtes descriptions qui sont données ci-dessus ne servent que
  d'introduction à ce que fait chaque paquet. Avant de continuer, veuillez lire
  attentivement la documentation de chaque programme, au moins l'usage
  standard. Cela peut vous sembler fastidieux maintenant, mais plus tard vous
  serez <em>très</em> content de l'avoir fait.
  
  <p>Remarque&nbsp;: <package/debmake/ est un paquet qui contient certains programmes
  qui fonctionnent d'une manière similaire à dh-make, mais son usage
  spécifique n'est <strong>pas</strong> couvert dans ce document, parce qu'il
  est obsolète.  Veuillez lire le <url name="Debmake manual"
  id="http://www.debian.org/~jaldhar/"> pour plus d'information.

  <sect id="otherinfo">Plus d'information

  <p>Vous pouvez faire deux types de paquets&nbsp;: source et binaire.  Un paquet
  source contient le code que vous pouvez compiler en un programme.  Un paquet
  binaire contient juste le programme fini. Ne mélangez pas les termes comme
  source du programme et le paquet source du programme&nbsp;! Veuillez lire les
  autres manuels si vous avez besoin de plus de détails sur la terminologie.

  <p>Debian utilise le terme «&nbsp;responsable&nbsp;» pour la personne qui fait des
  paquets, «&nbsp;auteur&nbsp;» pour la personne qui a fait le programme, et
  «&nbsp;responsable amont&nbsp;» pour la personne qui maintient le programme
  actuellement. D'ordinaire
  l'auteur et le responsable amont sont une seule et même personne. Si vous
  avez écrit un programme, et que vous voulez qu'il soit dans Debian, vous
  pouvez remplir une demande pour devenir un responsable.

  <p>Après avoir construit votre paquet (ou pendant la création), vous
  devrez devenir responsable Debian officiel si vous souhaitez que votre
  programme soit dans la prochaine distribution (si le programme est utile,
  pourquoi pas&nbsp;?) Ce processus est expliqué dans la Référence du développeur.
  Veuillez le lire.

  <chapt id="first">Premiers pas

  <sect id="choose">Choisir votre programme

  <p>Vous avez probablement choisi le paquet que vous voulez créer.  La
  première chose à faire est de vérifier si le paquet si trouve déjà dans la
  distribution.  Si vous utilisez la distribution «&nbsp;stable&nbsp;», le mieux est
  d'aller sur la <url name="page de recherche des paquets"
  id="http://www.debian.org/distrib/packages/">.
  Si vous utilisez une distribution «&nbsp;unstable&nbsp;» <strong>courante</strong>,
  vérifiez le avec ces commandes&nbsp;:
  <example>
  dpkg -s programme
  dpkg -l '*programme*'
  </example>

  <p>Si le paquet existe déjà, et bien, installez-le&nbsp;:-).  Si il se trouve
  qu'il est orphelin -- si son responsable est «&nbsp;Debian QA Group&nbsp;», vous
  devriez être capable de le reprendre.  Consultez <url name="la liste des
  paquets orphelins"
  id="http://www.debian.org/devel/wnpp/orphaned"> et <url name="la liste des
  paquets disponibles pour adoption"
  id="http://www.debian.org/devel/wnpp/rfa_bypackage"> pour vérifier que le
  paquet est bien disponible.

  <p>Si vous pouvez adopter le paquet, récupérez les sources (avec quelque
  chose comme <tt/apt-get source nom_du_paquet/) et examinez-les.
  Malheureusement ce document n'inclut pas des informations exaustives sur
  l'adoption de paquets.  Cependant vous ne devriez pas avoir de problèmes
  pour comprendre comment le paquet fonctionne puisque quelqu'un a déjà fait
  la configuration pour vous.  Continuez quand même à lire, une bonne partie
  des conseils qui suivent seront applicables dans votre cas.

  <p>Si le paquet est nouveau, et que vous décidez que vous voulez le voir
  dans Debian, procédez comme suit&nbsp;:

  <list>
  <item>vérifiez que personne d'autre ne travaille déjà sur ce paquet en
  consultant <url name="la liste des paquets en cours de création"
  id="http://www.debian.org/devel/wnpp/being_packaged">.  Si quelqu'un
  travaille déjà dessus, contactez-les si vous pensez que vous le devez.
  Sinon, trouvez un autre programme intéressant que dont personne n'est
  responsable.
  </item>

  <item>
  le programme <strong>doit</strong> avoir une licence, si possible
  libre conformément aux <url name="Règles de Logiciel Libre Debian"
  id="http://www.debian.org/social_contract.html#guidelines">. S'il
  n'est pas conforme à certaines de ces règles mais peut quand même être
  distribué, il peut malgré tout être inclus dans les sections «&nbsp;contrib
 &nbsp;» ou «&nbsp;non-free&nbsp;» de Debian. Si vous ne savez pas trop où il doit
  aller, postez la licence sur <email/debian-legal@lists.debian.org/ et
  demandez conseil.
  </item>

  <item>le programme ne devrait certainement <strong>pas</strong> être
  setuid root, ou encore mieux, il ne devrait pas être setuid ou setgid
  quoique ce soit.
  </item>

  <item>le programme ne devrait pas être un démon, ou quelque chose qui va
  dans les répertoires */sbin, ou ouvre un port comme root.
  </item>

  <item>le programme devrait être sous forme de binaire exécutable, les
  bibliothèques sont plus dures à gérer.</item>

  <item>il devrait être bien documenté, et le code doit être compréhensible
  (c'est-à-dire, pas volontairement obscur).
  </item>

  <item>vous devriez contacter le(s) auteur(s) du programme pour vérifier
  qu'ils sont d'accord pour la création du paquet. Il est important d'être à
  même de consulter le(s) auteur(s) à propos du programme en cas de problèmes
  spécifiques au programme, aussi n'essayez pas de créer un paquet à partir de
  programmes non maintenus.
  </item>

  <item>enfin, vous devez être sûr qu'il fonctionne, et l'avoir testé pendant
  quelques temps.
  </item>
  </list>

  <p>Bien sûr, toutes ces remarques ne sont que des mesures de sécurité, et
  ont pour but de vous sauver d'utilisateurs fous de rage si vous faites
  une erreur dans un démon setuid... Quand vous aurez plus d'expérience
  dans la création des paquets, vous serez capable de faire de tels paquets,
  mais même les développeurs les plus expérimentés consultent la liste de
  discussion debian-mentors en cas de doute. Et là les gens seront contents de
  vous aider.

  <p>Pour plus d'informations à ce sujet, consultez la Référence du
  Développeur.

  <sect id="getit">Obtenir le programme, et l'essayer.

  <p>La première chose à faire est de trouver et de télécharger le
  paquet original. Je suppose que vous avez déjà le fichier source
  que vous avez pris sur la page web de l'auteur. Les sources pour
  les logiciels Unix libres sont d'habitude au format tar/gzip avec
  l'extension .tar.gz, et contiennent normalement un sous-répertoire
  nommé programme-version avec toutes les sources dedans. Si la
  source de votre programme est disponible dans une autre sorte
  d'archive (par exemple, le programme se termine par '.Z' ou '.zip'),
  décompressez-le avec les outils adéquats ou demandez sur la liste
  de discussion debian-mentors si vous n'êtes pas sûr quant à la
  façon de le décompresser correctement (indice&nbsp;: utilisez «&nbsp;file
  archive.extension&nbsp;»).

  <p>Comme exemple, je vais utiliser un programme nommé «&nbsp;gentoo&nbsp;», un
  gestionnaire de fichiers pour X utilisant GTK+.  Sachez qu'il y a
  déjà un paquet pour ce programme, et qu'il a changé
  substantiellement depuis que ce texte a été écrit la
  première fois.

  <p>Créez un sous-répertoire sous votre répertoire racine nommé
  «&nbsp;debian&nbsp;» ou «&nbsp;deb&nbsp;» ou quoi que ce soit d'adéquat (ou le nom du programme,
  ~/gentoo, ferait l'affaire dans notre cas). Placez l'archive
  téléchargée dedans, et décompressez la avec «&nbsp;tar
  -xzf gentoo-0.9.12.tar.gz&nbsp;».  Assurez-vous qu'il n'y a pas d'erreurs, même
  «&nbsp;sans importance&nbsp;», parce qu'alors il y aura des problèmes pour décompresser
  sur les systèmes d'autres personnes, dont les outils de décompressions
  pourraient ne pas supporter ces erreurs.

  <p>Maintenant vous avez un autre sous-répertoire, nommé «&nbsp;gentoo-0.9.12&nbsp;».
  Allez dans ce répertoire et lisez <strong>attentivement</strong> la
  documentation fournie. Il s'agit d'habitude de fichiers nommés
  README*, INSTALL*, *.lsm ou *.html. Dedans, vous devez trouver les
  instructions pour compiler et installer correctement le programme
  (très probablement elles supposent que vous voulez installer dans le
  répertoire /usr/local/bin; ce n'est pas le cas, mais on reviendra sur
  ce point plus tard dans <ref id="destdir">).

  <p>La méthode varie d'un programme à l'autre, mais de nombreux programmes
  modernes viennent avec un script «&nbsp;configure&nbsp;» qui configure les
  sources selon
  votre système et s'assure que votre système est à même de les compiler.
  Après la configuration avec «&nbsp;./configure&nbsp;», les programmes sont compilés
  avec «&nbsp;make&nbsp;».  Certains d'entre eux supportent «&nbsp;make check&nbsp;», pour
  se tester
  eux-mêmes.  L'installation dans les répertoires de destination est
  généralement obtenue avec «&nbsp;make install&nbsp;».
  
  <p>Maintenant, essayez de compiler et d'exécuter votre programme, pour vous
  assurer qu'il fonctionne correctement et ne casse rien d'autre quand il est
  installé ou qu'il tourne.

  <p>Sachez aussi que vous pouvez généralement entrer «&nbsp;make clean&nbsp;» (ou mieux,
  «&nbsp;make distclean&nbsp;») pour nettoyer le répertoire de compilation.  Parfois, il y a
  même un «&nbsp;make uninstall&nbsp;» qui peut être utilisé pour retirer tous les
  fichiers installés.

  <sect id="namever">Les noms et versions des paquets

  <p>Vous devriez commencer la création du paquet avec un répertoire source
  complètement propre (originel), ou plus simplement avec les sources
  fraîchement décompressées.

  <p>Pour que le paquet soit correctement construit, vous devez changer le nom
  du programme en minuscule (si ce n'est déjà fait), et vous devriez changer
  le répertoire source en &lt;nompaquet&gt;-&lt;version&gt;.

  <p>Si le nom du programme consiste en plus d'un mot, réduisez-le à un mot,
  ou faites une abréviation.  Par exemple, le paquet du programme «&nbsp;John's
  little editor for X&nbsp;» serait nommé johnledx, ou jle4x, ou quoi que vous
  vouliez, aussi longtemps qu'il reste sous une limite raisonnable, en général
  20 caractères.

  <p>Vérifiez aussi la version exacte du programme (qui sera inclus
  dans la version du paquet). Si ce logiciel n'est pas numéroté
  avec un numéro de version comme X.Y.Z, mais avec une date de
  distribution, vous pouvez utiliser cette date comme numéro de version, avec
  comme préfixe '0.0.' (juste au cas où les responsables amont décident de
  distribuer une jolie version comme 1.0).  Donc, si la date est le 19
  décembre 1998, vous pouvez utilisez 0.0.19981219 comme chaîne pour la
  version. 
  
  <p>Certains ne seront pas numérotés du tout, auquel cas
  vous devriez contacter le responsable amont pour voir s'il a une autre
  méthode de gestion des révisions.

  <sect id="dh_make">«&nbsp;Debianization&nbsp;» initiale

  <p>Vérifiez que vous êtes dans le répertoire du code source du programme, et
  lancez ceci&nbsp;:

  <p><example>
  dh_make -e votre.adresse@de.responsable -f ../gentoo-0.9.12.tar.gz
  </example>

  <p>Bien sûr, remplacez la chaîne «&nbsp;votre.adresse@de.responsable&nbsp;» avec votre
  adresse mél pour l'inclure dans l'entrée changelog et dans d'autres
  fichiers, et le nom du fichier par le nom de la source d'archive originale.
  Voyez <manref name="dh_make" section="1"> pour plus de détails.
   
  <p>Des informations sont affichées. Il vous demande quelle sorte de
  paquet vous voulez créer. Gentoo est un paquet binaire simple - il ne
  crée qu'un exécutable, et donc un seul fichier .deb - donc
  nous sélectionnons la première option, avec la touche «&nbsp;s&nbsp;»,
  vérifions l'information sur l'écran et confirmons en pressant
  &lt;entrée&gt;.
  
  <p>Rappelons-le, en tant que nouveau responsable, vous ne devriez pas
  créer des paquets avec plusieurs exécutables, ou des bibliothèques.
  Ce n'est pas si difficile, mais cela requiert un peu plus de
  connaissances, et nous n'entrerons pas dans les détails ici.

  <p>Notez que vous ne pouvez exécuter dh_make <strong>qu'une fois</strong>,
  et qu'il ne se comportera pas correctement si vous l'exécutez encore dans le
  même répertoire déjà debianisé. Cela signifie aussi que vous devrez utiliser
  une autre méthode pour distribuer une nouvelle révision ou une nouvelle
  version de votre paquet dans le futur. Lisez plus à ce sujet dans ce texte
  dans <ref id="update">

  <chapt id="modify">Modifier les sources

  <p>Normalement, les programmes s'installent d'eux-mêmes dans les
  sous-répertoires /usr/local. Mais les paquets Debian ne doivent pas utiliser
  ce répertoire, car il est réservé à l'usage privé de l'administrateur
  système (ou de l'utilisateur). Cela signifie que vous devez examinez le
  système de création de votre programme, en général en commençant par le
  Makefile. C'est le script que <manref name="make" section="1"> utilisera
  pour automatiser la création du programme. Pour plus de détails sur les
  Makefile, regardez <ref id="rules">.

  <p>Notez que si votre programme utilise GNU <manref name="automake"
  section="1"> et/ou <manref name="autoconf" section="1">, ce qui signifie que
  les sources incluent des fichiers Makefile.am et/ou Makefile.in,
  respectivement, vous devrez modifier ces fichiers, parce que chaque appel
  d'automake va écraser les Makefile.in avec des informations générées à
  partir des Makefile.am, et que chaque appel de ./configure fera de même avec
  les fichiers Makefile, avec des données des Makefile.in.  Éditer les fichiers
  Makefile.am requiert des connaissances sur automake, que vous pouvez
  apprendre dans la section info d'automake, alors qu'éditer les fichiers
  Makefile.in est globalement identique à l'édition de fichiers Makefile, si
  ce n'est qu'il faut faire attention à toutes les variables, à savoir toute
  chaîne entourée de «&nbsp;@&nbsp;», comme par exemple @CFLAGS@ ou @LN_S@, qui sont
  remplacées par des valeurs réelles à chaque appel d'autoconf.
  
  <p>Notez qu'il n'y a pas la place ici pour entrer dans <em>tous</em> les
  détails sur les modifications, mais voici quelques-uns des problèmes qui
  reviennent souvent.

  <sect id="destdir">Installer dans un sous-répertoire

  <p>La plupart des programmes ont une certaine manière de s'installer
  dans la structure de répertoire de votre système, de sorte que
  leurs exécutables sont inclus dans votre $PATH, et que vous trouvez leurs
  documentation et pages de manuel aux places habituelles.  Cependant, si vous
  faisiez cela, le programme serait installé au milieu de tout ce qui est déjà
  sur votre système.  Les outils de création de paquet auraient plus de
  difficultés pour décider ce qui appartient ou non à votre paquet.

  <p>Dès lors vous devez faire autre chose&nbsp;: installer le programme
  dans un sous-répertoire temporaire à partir duquel les outils du
  responsable vont construire un paquet .deb fonctionnel. Tout ce
  qui est contenu dans ce répertoire sera installé sur le système de
  l'utilisateur quand il installe votre paquet, la seule différence est
  que dpkg installera les fichiers dans le répertoire racine.

  <p>Ce répertoire temporaire est d'ordinaire créé sous votre répertoire
  debian/ dans l'arbre des sources décomprimées.  Il est normalement nommé
  <file>debian/tmp</file> ou <file>debian/nom_du_paquet</file>.

  <p>Gardez à l'esprit que bien que vous deviez faire en sorte que le
  programme s'installe sous debian/nom_du_paquet, il doit continuer
  à s'exécuter correctement quand il est installé sous le répertoire
  racine, c'est-à-dire quand il est installé à partir du paquet .deb.
  Aussi vous ne devez pas laisser le système de création coder en
  dur dans les fichiers du paquet des chaînes de caractères comme
  <tt>/home/me/deb/gentoo-0.9.12/usr/share/gentoo</tt>.

  <p>Avec des programmes utilisant GNU autoconf, ceci est relativement
  facile. La plupart de ces programmes ont des fichiers makefile
  sont par défaut configurés de manière à permettre l'installation
  dans un répertoire quelconque, en gardant à l'esprit que /usr (par
  exemple) est le préfixe standard. Quand il détecte que votre programme
  utilise autoconf, dh_make va mettre en place des commandes pour le
  faire automatiquement, et vous pouvez tout aussi bien passer à la
  section suivante. Mais avec d'autres programmes, vous devrez plus que
  probablement examiner et éditer les Makefiles.

  <p>Voici les parties concernées du Makefile de gentoo&nbsp;:

  <p><example>
  # Where to put binary on 'make install'?
  BIN     = /usr/local/bin

  # Where to put icons on 'make install'?
  ICONS   = /usr/local/lib/gentoo/
  </example>

  <p>Nous voyons que les fichiers sont configurés pour s'installer sous
  <file>/usr/local/</file>.  Changez ces chemins en&nbsp;:

  <p><example>
  # Where to put binary on 'make install'?
  BIN     = $(DESTDIR)/usr/bin

  # Where to put icons on 'make install'?
  ICONS   = $(DESTDIR)/usr/share/gentoo/
  </example>

  <p>Mais pourquoi dans ce répertoire, et pas dans un autre&nbsp;? Parce que Debian
  n'installe jamais de fichiers sous <file>/usr/local</file> -- cet arbre est
  réservé à l'usage de l'administrateur système.  Sur un système Debian, de
  tels fichiers doivent plutôt aller sous <file>/usr</file>.

  <p>Les positions exactes des exécutables, icônes, documentations, etc, sont
  spécifiées dans le Standard de la Hiérarchie de Fichiers (voir
  /usr/share/doc/debian/debian-policy/fhs/).  Je vous recommande de le
  consulter et de lire les sections relatives à votre paquet. 

  <p>Dès lors, nous devrions installer l'exécutable sous /usr/bin plutôt que
  /usr/local/bin, la page de manuel sous /usr/share/man/man1 plutôt que sous
  /usr/local/man/man1, etc.  Notez qu'il n'y a pas de page de manuel mentionnée
  dans le fichier makefile, mais comme les Normes Debian requièrent que chaque
  programme en ait une, nous en créerons une plus tard et l'installerons sous
  /usr/share/man/man1.

  <p>Certains programmes n'utilisent pas les variables des fichiers
  makefile pour définir des chemins comme ceux-ci. Cela signifie que
  vous pouvez avoir à éditer des fichiers sources C réels pour les faire
  utiliser les positions correctes. Mais où et que chercher&nbsp;? Vous
  pouvez trouver où en lançant&nbsp;:

  <p><example>
  grep -rn usr/local/lib *.[ch]
  </example>

  <p>Grep va récursivement parcourir l'arbre des sources et vous dire le nom
  des fichiers et le numéro de ligne où il trouve une occurrence.

  <p>Éditez ces fichiers et à ces lignes remplacez /usr/local/* par /usr/* --
  et c'est à peu près tout.  Soyez attentif à ne pas casser le reste du code&nbsp;!
  :-)

  <p>Après quoi vous devriez trouver la cible d'installation (cherchez
  une ligne qui commence avec «&nbsp;install:&nbsp;», d'ordinaire cela fonctionne)
  et renommez toutes les références aux répertoires autres que ceux
  définis au début du Makefile. Auparavant, la cible d'installation de
  gentoo disait&nbsp;:

  <p><example>
  install:        gentoo
                  install ./gentoo $(BIN)
                  install icons/* $(ICONS)
                  install gentoorc-example $(HOME)/.gentoorc
  </example>

  <p>Après votre modification elle dit&nbsp;:
  <example>
  install:        gentoo-target
                  install -d $(BIN) $(ICONS) $(DESTDIR)/etc
                  install ./gentoo $(BIN)
                  install -m644 icons/* $(ICONS)
                  install -m644 gentoorc-example $(DESTDIR)/etc/gentoorc
  </example>

  <p>Vous aurez sûrement remarqué qu'il y a maintenant une commande
  <tt>install -d</tt> avant les autres commandes dans la règle.  Le fichier
  makefile originel ne l'avait pas parce que habituellement /usr/local/bin et
  les autres répertoires existent déjà sur le système dans lequel «&nbsp;make install&nbsp;» est
  exécuté.  Cependant, comme nous installerons dans nos propres répertoires
  vides (ou même non-existants), nous aurons à créer chacun de ces répertoires.

  <p>Nous pouvons ajouter d'autres choses à la fin de la règle, comme
  l'installation de la documentation additionnelle que l'auteur amont oublie
  parfois&nbsp;:

  <p><example>
                  install -d $(DESTDIR)/usr/share/doc/gentoo/html
                  cp -a docs/* $(DESTDIR)/usr/share/doc/gentoo/html
  </example>

  <p>Le lecteur attentif notera que j'ai changé «&nbsp;gentoo&nbsp;» en «&nbsp;gentoo-target&nbsp;»
  dans la ligne «&nbsp;install:&nbsp;». C'est ce qu'on appelle une correction de
  bogue sans rapport&nbsp;:-).

  <p>Chaque fois que vous faites des modifications qui ne sont pas
  spécifiquement liées à Debian, envoyez les au responsable amont pour qu'elles
  puissent être incluses dans la version suivante du programme et que tout le
  monde puisse en bénéficier.  Souvenez-vous aussi de ne pas rendre vos
  corrections spécifiques à Debian ou Linux (ou même Unix&nbsp;!) avant de les
  envoyer -- faites les portables.  Cela rendra vos corrections beaucoup plus
  faciles à appliquer.

  <p>Remarquez que vous ne devez pas envoyer les fichiers debian/* en
  amont.

  <sect id="difflibs">Bibliothèques différentes

  <p>Il y a souvent un problème commun&nbsp;: des bibliothèques sont souvent
  différentes d'une plate-forme à l'autre. Par exemple, Makefile peut contenir
  une référence à une bibliothèque qui n'existe pas sur les systèmes Debian. Dans ce cas,
  nous devons la changer en une bibliothèque qui existe dans Debian, et qui sert
  à la même chose.

  <p>Ainsi, s'il y a une ligne dans le Makefile (ou Makefile.in) de votre
  programme qui dit quelque chose comme ceci (et votre programme ne compile
  pas)&nbsp;:

  <p><example>
  LIBS = -lcurses -lquelquechose -lautrechose
  </example>

  <p>Changez la en ceci, et cela marchera probablement&nbsp;:
  <p><example>
  LIBS = -lncurses -lquelquechose -lautrechose
  </example>

  <p>(L'auteur réalise que ceci n'est pas le meilleur exemple dans la mesure
  où notre paquet libncurses est maintenant livrées avec un lien symbolique
  libcurses.o, mais il n'en a pas trouvé de meilleur.  Toutes suggestions
  bienvenues&nbsp;:-).

  <chapt id="dreq">Ce qui est requis sous debian/

  <p>Il y a un nouveau sous-répertoire sous le répertoire des sources
  du programme ('gentoo-0.9.12'), nommé «&nbsp;debian&nbsp;». Il y a un certain
  nombre de fichiers dans ce répertoire que vous devriez éditer pour
  configurer le comportement du paquet. Les plus importants d'entre eux
  sont «&nbsp;control&nbsp;», «&nbsp;changelog&nbsp;», «&nbsp;copyright&nbsp;» et «&nbsp;rules&nbsp;», qui sont
  requis pour tous les paquets.

      <sect id="control">fichier «&nbsp;control&nbsp;»

  <p>Ce fichier contient plusieurs valeurs que <prgn/dpkg/,
  <prgn/dselect/ et d'autres outils de gestions de paquets vont utiliser
  pour gérer le paquet.
  
  <p>Voici le fichier «&nbsp;control&nbsp;» que dh_make crée pour nous.

  <p><example>
  1  Source: gentoo
  2  Section: unknown
  3  Priority: optional
  4  Maintainer: Josip Rodin &lt;jrodin@jagor.srce.hr&gt;
  5  Build-Depends: debhelper (>> 3.0.0)
  6  Standards-Version: 3.5.2
  7
  8  Package: gentoo
  9  Architecture: any
  10 Depends: ${shlibs:Depends}
  11 Description: &lt;insert up to 60 chars description&gt;
  12  &lt;insert long description, indented with spaces&gt;
  </example>
  (J'ai ajouté les numéros de ligne.)

  <p>Les lignes de 1 à 6 sont les informations de contrôle pour le paquet
  source. 
  
  <p>La ligne 1 est le nom du paquet source.

  <p>La ligne 2 est la section de la distribution dans laquelle ce paquet
  va. 
  
  <p>Comme vous l'avez constaté, Debian est divisée en sections&nbsp;: main
  (logiciels libres), non-free (logiciels pas vraiment libres), et contrib
  (logiciels libres qui dépendent de logiciels non libres). Sous celles-ci, il
  y a des sous-sections logiques qui décrivent de manière concise les paquets
  qui s'y trouvent. Ainsi nous avons «&nbsp;admin&nbsp;» pour les programmes réservés à
  l'administrateur, «&nbsp;base&nbsp;» pour les outils de base, «&nbsp;devel&nbsp;» pour les outils de
  programmation, «&nbsp;doc&nbsp;» pour la documentation, «&nbsp;libs&nbsp;» pour les bibliothèques
  «&nbsp;mail&nbsp;» pour les lecteurs et les démons de courriel, «&nbsp;net&nbsp;» pour les
  applications et démons réseaux, «&nbsp;x11&nbsp;» pour les programmes X11 qui ne sont
  pas plus appropriés ailleurs, et bien d'autres.

  <p>Changeons donc la section en x11 (un préfixe «&nbsp;main/&nbsp;» est implicite,
  donc nous pouvons l'omettre).

  <p>La ligne 3 décrit l'importance pour l'utilisateur d'installer ce
  paquet. Lisez le manuel des Normes pour des informations sur ces
  valeurs. La priorité «&nbsp;optional&nbsp;» marche habituellement pour les
  nouveaux paquets.
  
  <p>Les sections et les priorités sont utilisés par des interfaces
  comme <prgn/dselect/ quand elles trient les paquets et sélectionnent
  les défauts. Quand vous téléchargerez votre paquet sur Debian, les
  valeurs de ces deux champs peuvent être modifiées par les responsables
  des archives, auquel cas vous serez notifié par courriel.

  <p>Comme c'est un paquet de priorité normale et qu'il n'entre pas en conflit
  avec quoi que ce soit, nous le laissons à «&nbsp;optional&nbsp;».

  <p>La ligne 4 est le nom et l'adresse mél du responsable.  Assurez-vous que
  ce champ contient une entête «&nbsp;To:&nbsp;» valide pour un courriel, car après le
  téléchargement, le système de suivi des bogues l'utilisera pour vous délivrer les
  courriels de bogues.  Évitez d'utiliser des virgules, esperluètes ou parenthèses.

  <p>La ligne 5 contient la liste des paquets nécessaires pour construire le
  paquet. Certains paquets comme gcc ou make sont implicites, voyez le paquet
  <package/build-essential/ pour les détails. Si un compilateur non-standard
  ou un autre outil est nécessaire pour construire le paquet. vous devez
  l'ajouter dans la ligne «&nbsp;Build-Depends&nbsp;». Les différentes entrées
  sont séparées par des virgules&nbsp;; lisez ci-dessous les explications sur
  les dépendances entre binaires pour mieux comprendre la syntaxe de ce champ.

  <p>Vous pouvez aussi avoir Build-Depends-Indep, Build-Conflicts et d'autres
  champs ici.  Ces données seront utilisées par le logiciel de construction de
  paquets automatique Debian pour créer les paquets binaires pour d'autres
  plate-formes d'ordinateurs.  Lisez le manuel des Normes pour plus
  d'informations sur les dépendances de construction et la Référence du
  Développeur pour plus d'information sur ces autres plate-formes
  (architectures) et comment porter des logiciels vers celles-ci.

  <p>Voici une bidouille que vous pouvez utiliser pour découvrir les paquets
  dont le votre a besoin pour être construit&nbsp;:
  <example>
  strace -f -o /tmp/log ./configure
  # ou make à la place de ./configure, si votre paquet n'utilise pas autoconf
  for x in `dpkg -S $(grep open /tmp/log | perl -pe 's!.* open\(\"([^\"]*).*!$1!' | grep "^/" | sort | uniq | grep -v "^\(/tmp\|/dev\|/proc\)" ) 2>/dev/null|cut -f1 -d":"| sort | uniq`; do echo -n "$x (>=" `dpkg -s $x | grep ^Version | cut -f2 -d":"` "), "; done
  </example>

  <p>Il se trouve que Gentoo a aussi besoin de <package/xlibs-dev/,
  <package/libgtk1.2-dev/ et <package/libgl1.2-dev/ pour être construit, aussi
  nous les ajouterons ici à côté de <package/debhelper/.

  <p>La ligne 6 est la version du standard de Normes Debian que ce paquet
  respecte, la version du manuel des Normes que vous lisez quand vous créez
  votre paquet.

  <p>La ligne 8 est le nom du paquet binaire.  C'est d'ordinaire le même que
  le nom du paquet source, mais ce ne doit pas être nécessairement le cas.

  <p>La ligne 9 décrit l'architecture CPU pour laquelle le paquet
  binaire peut être compilé. Nous le laissons à «&nbsp;any&nbsp;» car <manref
  name="dpkg-gencontrol" section="1"> trouvera la valeur appropriée
  pour toute machine sur laquelle ce paquet sera compilé.
  
  <p>Si votre paquet est indépendant d'une architecture (par
  exemple, un script shell ou Perl, ou un document), changez cette
  entrée en «&nbsp;all&nbsp;», et lisez plus tard dans <ref id="rules"> comment
  utiliser la règle «&nbsp;binary-indep&nbsp;» au lieu de «&nbsp;binary-arch&nbsp;» pour
  construire le paquet.

  <p>La ligne 10 montre une des caractéristiques les plus puissantes du système de
  paquet Debian. Les paquets peuvent être liés entre eux de plusieurs
  façons. À part Depends: les autres champs décrivant ces relations sont
  Recommends:, Suggests:, Pre-Depends:, Conflicts:, Provides:, et Replaces:.

  <p>Les outils de gestion de paquets se comportent d'ordinaire de la même manière quand ils gèrent
  ces relations; sinon, ce sera expliqué.
  (voir <manref name="dpkg" section="8">, <manref name="dselect" section="8">, 
  <manref name="apt" section="8">, <manref name="aptitude" section="1">, etc.)

  <p>Voici ce que les dépendances veulent dire&nbsp;:

  <p><list>
  <item>Depends:
  <p>Le paquet ne sera pas installé à moins que les paquets dont il dépend ne
  soient installés. Utilisez-le si votre programme ne s'exécute absolument
  pas (ou cause des dégâts sérieux) tant qu'un paquet particulier n'est pas
  présent.</item>

  <item>Recommends:
  <p>Des interfaces comme dselect ou aptitude vous demanderons
  d'installer les paquets recommandés en même temps que votre paquet;
  dselect insistera même. dpkg et apt-get ignorerons ce champ,
  cependant. Utilisez le pour les paquets qui ne sont pas vraiment
  indispensables mais qui sont typiquement utilisés avec votre
  programme.</item>

  <item>Suggests:
  <p>Quand un utilisateur installe votre programme, toute interface
  lui demandera probablement s'il faut installer les programmes qu'il
  suggère. Dpkg et apt-get ne s'en soucient pas. Utilisez le pour les
  paquets qui marchent bien avec votre programme mais qui ne sont pas
  nécessaires.</item>

  <item>Pre-Depends:
  <p>Ceci est plus fort que Depends. Le paquet ne sera pas installé à moins
  que les paquets dont il pré-dépend ne soient installés <em>et correctement
  configurés</em>. Utilisez le <strong>très</strong> rarement et seulement
  après en avoir discuté sur la liste de discussion debian-devel.  Traduisez&nbsp;:
  ne l'utilisez pas du tout.&nbsp;:-)</item>

  <item>Conflicts:
  <p>Le paquet se sera pas installé avant que les paquets avec lesquels
  il est en conflit n'aient été retirés. Utilisez ceci si votre
  programme ne peut absolument pas fonctionner ou s'il cause d'énormes
  problèmes quand un paquet particulier est présent.</item>

  <item>Provides:
  <p>Quand il y a plusieurs alternatives pour certains
  types de paquets, des noms virtuels ont été définis.
  Vous pouvez trouver la liste complète se trouve dans
  /usr/share/doc/debian-policy/virtual-package-name-list.text.gz.
  Utilisez ceci si votre programme fournit une fonction d'un paquet
  virtuel existant.</item>

  <item>Replaces:
  <p>Utilisez ceci quand votre programme remplace des fichiers d'un autre
  paquet, ou remplace complètement un autre paquet (utilisé en conjonction
  avec Conflicts:). Les fichiers du paquet nommé seront écrasés par les
  fichiers de votre paquet.</item>
  </list>

  <p>Tous ces champs ont une syntaxe uniforme. Il s'agit d'une liste de
  paquets séparés par des virgules. Ces noms de paquets peuvent aussi être une
  liste d'alternatives, séparés par des symboles barre verticale <tt>|</tt>
  (symbole tube).
  
  <p>Le domaine d'application des champs peut être restreints à des
  versions particulières de chaque paquet nommé. Ces versions sont
  listées entre parenthèses après chaque nom de paquet individuel, et
  doivent contenir une relation de la liste suivante suivie par un
  numéro de version. Les relations autorisées sont <tt>&lt;&lt;</tt>,
  <tt>&lt;=</tt>, <tt>=</tt>, <tt>&gt;=</tt> et <tt>&gt;&gt</tt> pour
  strictement plus petit, plus petit ou égal, exactement égal, plus
  grand ou égal et strictement plus grand, respectivement.  Par exemple,

  <example>
  Depends: foo (>= 1.2), libbar1 (= 1.3.4)
  Conflicts: baz
  Recommends: libbaz4 (>> 4.0.7)
  Suggests: quux
  Replaces: quux (<< 5), quux-foo (<= 7.6)
  </example>

  <p>La dernière caractéristique que vous devez connaître est
  ${shlibs:Depends}. Après que votre paquet ait été construit et
  installé dans le répertoire temporaire, <manref name="dh_shlibdeps"
  section="1"> le scannera pour les exécutables et bibliothèques,
  déterminera leurs dépendances en bibliothèques partagées et détectera
  dans quels paquets elles se trouvent. Il passera la liste à <manref
  name="dh_gencontrol" section="1"> qui l'insérera à la bonne place, et
  vous ne devrez pas vous en soucier.
  
  Ceci étant dit, nous pouvons laisser la ligne Depends: exactement
  comme elle est maintenant, et insérer après une ligne disant
  <tt>Suggests: file</tt>, car gentoo peut utiliser certaines
  fonctionnalités fournies par ce programme/paquet.

  <p>La ligne 10 est celle où la liste de suggestions va. Ici on ne met que
  «&nbsp;file&nbsp;», parce que gentoo peut utiliser certaines capacités de ce
  programme/paquet.

  <p>La ligne 11 est la description courte. L'écran de la plupart de gens est
  large de 80 colonnes, aussi cela ne devrait pas dépasser les 60 caractères.
  Je le change en «&nbsp;A fully GUI configurable X file manager using GTK+&nbsp;».

  <p>À la ligne 12 commence la description longue. Celle-ci devrait être
  un paragraphe qui donne plus de détails sur le paquet. La colonne 1 de
  chaque ligne doit être vide. Il ne peut y avoir de ligne vide, mais
  vous pouvez mettre un seul . (point) dans la colonne 2 pour simuler
  une ligne vide. De plus, il ne peut pas y avoir plus d'une ligne vide
  après la description longue.

  <p>Finalement, voici le fichier control mis à jour&nbsp;:

  <p><example>
  1  Source: gentoo
  2  Section: x11
  3  Priority: optional
  4  Maintainer: Josip Rodin &lt;jrodin@jagor.srce.hr&gt;
  5  Build-Depends: debhelper (>> 3.0.0), xlibs-dev, libgtk1.2-dev, libglib1.2-dev
  6  Standards-Version: 3.5.2
  7
  8  Package: gentoo
  9  Architecture: any
  10 Depends: ${shlibs:Depends}
  11 Suggests: file
  12 Description: A fully GUI configurable GTK+ file manager
  13  gentoo is a file manager for Linux written from scratch in pure C. It
  14  uses the GTK+ toolkit for all of its interface needs.  gentoo provides
  15  100% GUI configurability; no need to edit config files by hand and re-
  16  start the program. gentoo supports identifying the type of various
  17  files (using extension, regular expressions, or the 'file' command),
  18  and can display files of different types with different colors and icons.
  19  .
  20  gentoo borrows some of its look and feel from the classic Amiga file
  21  manager "Directory OPUS" (written by Jonathan Potter).
  </example>
  (J'ai ajouté les numéros de ligne.)

  <sect id="copyright">fichier «&nbsp;copyright&nbsp;»

  <p>Ce fichier contient les informations sur les ressources amonts, le
  copyright et la licence du paquet.  Le format n'est pas dicté par les Normes,
  mais son contenu l'est (voir section 13.6 «&nbsp;Copyright Information&nbsp;»).  
  
  <p>dh_make en crée un par défaut, qui ressemble à ceci&nbsp;:

  <p><example>
  1  This package was debianized by Josip Rodin &lt;jrodin@jagor.srce.hr&gt; on
  2  Wed, 11 Nov 1998 21:02:14 +0100.
  3
  4  It was downloaded from &lt;fill in ftp site&gt;
  5
  6  Upstream Author(s): &lt;put author(s) name and email here&gt;
  7
  8  Copyright:
  9
  10 &lt;Must follow here&gt;
  </example>
  (J'ai ajouté les numéros de ligne.)

  <p>Les choses importantes à ajouter à ce fichier sont l'endroit où vous avez
  trouvé ce paquet, ainsi que le copyright et la licence d'exploitation réelle
  (incluez-la en entier).  Si la licence est une des licences de logiciel
  libre populaires comme GNU GPL ou LGPL, BSD ou Artistic, vous pouvez juste
  faire référence au fichier approprié dans le répertoire
  /usr/share/common-licenses/, qui existe sur chaque système Debian.
  
  <p>En bref, voici ce à quoi le fichier copyright de gentoo devrait
  ressembler&nbsp;:

  <p><example>
  1  This package was debianized by Josip Rodin &lt;jrodin@jagor.srce.hr&gt; on
  2  Wed, 11 Nov 1998 21:02:14 +0100.
  3
  4  It was downloaded from: ftp://ftp.obsession.se/gentoo/
  5
  6  Upstream Author: Emil Brink &lt;emil@obsession.se&gt;
  7
  8  This software is copyright (c) 1998-99 by Emil Brink, Obsession
  9  Development.
  10
  11 You are free to distribute this software under the terms of
  12 the GNU General Public License.
  13 On Debian systems, the complete text of the GNU General Public
  14 License can be found in the file `/usr/share/common-licenses/GPL'.
  </example>
  (J'ai ajouté les numéros de ligne.)

  <sect id="changelog">changelog

  <p>C'est un fichier requis, qui a un format spécial décrit dans le
  manuel des Normes section 5.3 «&nbsp;debian/changelog&nbsp;». Ce
  format est utilisé par dpkg et d'autres programmes pour obtenir le
  numéro de version, de révision, de distribution et l'urgence de votre
  paquet.

  <p>Pour vous, il est aussi important, puisqu'il est bon de
  documenter toutes les modifications que vous avez faites.
  Cela aidera les gens qui téléchargent votre paquet à voir
  si il y a des problèmes non résolus à propos desquels ils
  doivent être immédiatement mis au courant. Il sera sauvé sous
  «&nbsp;/usr/share/doc/gentoo/changelog.Debian.gz&nbsp;» dans le paquet binaire.

  <p>Dh_make en crée un par défaut, et c'est à ceci qu'il ressemble&nbsp;:

  <p><example>
  1  gentoo (0.9.12-1) unstable; urgency=low
  2
  3   * Initial Release.
  4
  5  -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt;  Wed, 11 Nov 1998 21:02:14 +0100
  6
  7  Local variables:
  8  mode: debian-changelog
  9  End:
  </example>
  (J'ai ajouté les numéros de ligne.)

  <p>La ligne 1 est le nom du paquet, la version, la distribution et
  l'urgence. Le nom doit correspondre au nom du paquet source, la distribution
  devrait être «&nbsp;unstable&nbsp;» (ou même «&nbsp;experimental&nbsp;», et l'urgence ne
  devrait pas être changée en quoique ce soit de plus haut que «&nbsp;low&nbsp;». :-)

  <p>Les lignes 3 à 5 sont l'entrée d'audit, où vous documentez les
  modifications faites dans la révision du paquet (pas les modifications
  amont - il y a un fichier spécial pour cela, créé par les auteurs en amont,
  que vous installerez comme /usr/share/doc/gentoo/changelog.gz). Les nouvelles lignes
  doivent être ajoutées juste avant la première ligne qui commence avec une
  astérisque («&nbsp;*&nbsp;»). Vous pouvez le faire avec <manref name="dch" section="1">
  <manref name="emacs" section="1">, ou manuellement avec un éditeur de texte.
  
  <p>Vous obtiendrez quelque chose comme&nbsp;:

  <p><example>
  1  gentoo (0.9.12-1) unstable; urgency=low
  2
  3   * Initial Release.
  4   * This is my first Debian package.
  5   * Adjusted the Makefile to fix $DESTDIR problems.
  6
  7  -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt; Wed, 11 Nov 1998 21:02:14 +0100
  8
  </example>
  (J'ai ajouté les numéros de ligne.)

  <p>Vous pouvez en apprendre plus sur la mise à jour du fichier
  changelog plus loin dans <ref id="update">.

  <sect id="rules">fichier «&nbsp;rules&nbsp;»

  <p>Maintenant nous devons examiner les règles que <manref
  name="dpkg-buildpackage" section="1"> va utiliser pour créer vraiment le
  paquet. Ce fichier est en fait un autre Makefile, mais différent de
  celui/ceux des sources amont.  Contrairement aux autres fichiers sous
  debian/, celui-ci est marqué comme exécutable.

  <p>Chaque fichier «&nbsp;rules&nbsp;», comme tout autre Makefile, consiste
  en plusieurs règles indiquant comment construire les sources. Les
  règles sont des cibles, noms de fichiers ou d'actions à exécuter (par
  exemple, «&nbsp;build:&nbsp;» ou «&nbsp;install:&nbsp;»). Les règles que vous voulez
  exécuter doivent être données comme argument à la ligne de commande
  (par exemple, 'rules build' ou 'rules install'). Après le nom de la
  cible, vous pouvez nommer les dépendances, le programme ou le fichier dont
  la cible dépend. Après cela il peut y avoir un nombre quelconque de
  commandes indentées par &lt;tab&gt;!, jusqu'à ce qu'une ligne vide
  soit trouvée. Une nouvelle règle commence avec une déclaration de
  cible dans la première colonne. Les lignes vides ainsi que celles
  qui commencent par un «&nbsp;#&nbsp;» (dièse) sont considérées comme des
  commentaires et sont ignorées.
  
  <p>Tout ceci vous semble probablement confus pour l'instant, mais cela va devenir clair
  à l'examen du fichier «&nbsp;rules&nbsp;» que dh_make nous donne par défaut. Vous
  devriez avoir lu l'entrée «&nbsp;make&nbsp;» dans info pour plus d'information.

  <p>Ce qu'il faut savoir à propos du fichier rules créé par dh_make, est
  qu'il s'agit juste d'une suggestion.  Il fonctionnera pour des paquets
  simples, mais pour ceux qui sont plus compliqués, vous ne devez pas craindre
  de le modifier pour le faire correspondre à vos besoins.
  Les seules choses que vous ne pouvez pas changer sont les noms des règles,
  car tous les outils utilisent ces noms comme requis par le manuel des
  Normes.

  <p>Voici (approximativement) ce à quoi ressemble le fichier par défaut
  debian/rules généré pour nous par dh_make&nbsp;:

  <p><example>
  1  #!/usr/bin/make -f
   2  # Sample debian/rules that uses debhelper.
   3  # GNU copyright 1997 to 1999 by Joey Hess.
   4
   5  # Uncomment this to turn on verbose mode.
   6  #export DH_VERBOSE=1
   7
   8  # This is the debhelper compatibility version to use.
   9  export DH_COMPAT=3
   10
   11 ifneq (,$(findstring debug,$(DEB_BUILD_OPTIONS)))
   12         CFLAGS += -g
   13 endif
   14 ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
   15         INSTALL_PROGRAM += -s
   16 endif
   17
   18 build: build-stamp
   19 build-stamp:
   20  dh_testdir
   21
   22  # Add here commands to compile the package.
   23  $(MAKE)
   24  #/usr/bin/docbook-to-man debian/gentoo.sgml > gentoo.1
   25
   26  touch build-stamp
   27
   28 clean:
   29  dh_testdir
   30  dh_testroot
   31  rm -f build-stamp
   32
   33  # Add here commands to clean up after the build process.
   34  -$(MAKE) clean
   35
   36  dh_clean
   37
   38 install: build
   39  dh_testdir
   40  dh_testroot
   41  dh_clean -k
   42  dh_installdirs
   43
   44  # Add here commands to install the package into debian/gentoo.
   45  $(MAKE) install DESTDIR=$(CURDIR)/debian/gentoo
   46
   47 # Build architecture-independent files here.
   48 binary-indep: build install
   49 # We have nothing to do by default.
   50
   51 # Build architecture-dependent files here.
   52 binary-arch: build install
   53  dh_testdir
   54  dh_testroot
   55 #        dh_installdebconf
   56  dh_installdocs
   57  dh_installexamples
   58  dh_installmenu
   59 #        dh_installlogrotate
   60 #        dh_installemacsen
   61 #        dh_installpam
   62 #        dh_installmime
   63 #        dh_installinit
   64  dh_installcron
   65  dh_installman
   66  dh_installinfo
   67 #        dh_undocumented
   68  dh_installchangelogs ChangeLog
   69  dh_link
   70  dh_strip
   71  dh_compress
   72  dh_fixperms
   73 #        dh_makeshlibs
   74  dh_installdeb
   75 #        dh_perl
   76  dh_shlibdeps
   77  dh_gencontrol
   78  dh_md5sums
   79  dh_builddeb
   80
   81 binary: binary-indep binary-arch
   82 .PHONY: build clean binary-indep binary-arch binary install
  </example>
  (J'ai ajouté les numéros de ligne).

  <p>Vous avez probablement l'habitude de la ligne 1 avec les scripts shell et
  perl. Cela signifie que ce fichier doit être exécuté par /usr/bin/make.

  <p>La signification des variables DH_* mentionnées des lignes 6 à 9 devrait
  être évidente à partir de la description courte.  Pour plus d'information
  sur DH_COMPAT, lisez la section «&nbsp;Debhelper compatibility levels&nbsp;» de la
  page de manuel <manref name="debhelper" section="1">.

  <p>Les lignes 11 à 16 sont un squelette de support pour les paramètres
  DEB_BUILD_OPTIONS, décrits dans les Normes section 11.1 «&nbsp;Binaries&nbsp;».
  Fondamentalement, ces choses déterminent si l'exécutable doit être construit
  avec les symboles de débogage, et s'ils doivent être retirés à
  l'installation.  Une fois encore, il s'agit juste d'un squelette, une
  indication que vous devriez le faire.  Vous devriez vérifier comment le
  système de construction amont gère l'inclusion des symboles de débogage, et
  comment il les retire à l'installation, et implémenter cela vous-même.

  <p>D'habitude, vous pouvez dire à gcc de compiler avec «&nbsp;-g&nbsp;» en utilisant
  la variable CFLAGS -- si c'est le cas pour votre paquet, propagez la
  variable en <em>ajoutant</em> <tt>CFLAGS="$(CFLAGS)"</tt> à l'invocation de
  $(MAKE) dans la règle de construction (vois plus bas).  Alternativement, si
  votre paquet utilise un script de configuration autoconf, vous pouvez la lui
  passer en <em>préfixant</em> la chaîne ci-dessus à l'appel à ./configure
  dans la règle de construction.

  <p>Pour ce qui est de retirer les symboles, les programmes sont configurés
  couramment pour s'installer avec, et souvent sans option pour changer cela.
  Heureusement, vous avez toujours <manref name="dh_strip" section="1"> qui
  détecte quand le drapeau DEB_BUILD_OPTIONS=nostrip est mis, et qui quitte
  silencieusement.

  <p>Les lignes 18 à 26 décrivent la règle «&nbsp;build&nbsp;» (et son enfant «
  build-stamp&nbsp;»), qui exécute make avec le fichier Makefile de l'application
  pour compiler le programme.  Nous en dirons plus sur l'exemple commenté
  docbook-to-man plus loin dans <ref id="manpage">.
  
  <p>La règle «&nbsp;clean&nbsp;», spécifiée aux lignes 28-36, efface tous les
  binaires inutiles et les trucs générés automatiquement, laissés là par
  une construction du paquet. Cette règle doit être opérationnelle tout
  le temps (même si les répertoires sources <em>sont</em> nettoyés&nbsp;!),
  donc vous devriez utiliser les options pour forcer (p.e. pour rm,
  c'est «&nbsp;-f&nbsp;») ou pour ignorer la valeur de retour (les échecs), avec
  un «&nbsp;-&nbsp;» devant le nom de la commande.

  <p>Le processus d'installation, la règle «&nbsp;install&nbsp;», commence à
  la ligne 38. Fondamentalement, elle exécute la règle install du
  fichier Makefile du programme, mais installe dans le répertoire
  <tt>$(CURDIR)/debian/gentoo</tt> - c'est pour cette raison que nous
  avons spécifié $(DESTDIR) comme racine de l'installation dans le
  Makefile de gentoo.
  
  <p>Comme le commentaire le laisse à penser, la règle
  «&nbsp;binary-indep&nbsp;», sur la ligne 48, est utilisée pour construire
  des paquets indépendants de l'architecture. Comme il n'y en a pas dans cet
  exemple, rien n'est fait.

  <p>Ensuite on trouve la règle «&nbsp;binary-arch&nbsp;», des lignes 52 à 79, pour
  laquelle nous exécutons plusieurs petits utilitaires du paquet debhelper qui
  font quelques opérations sur votre paquet pour le rendre conforme aux Normes
  Debian.

  <p>Si votre paquet est un «&nbsp;Architecture: all&nbsp;», vous devez inclure toutes
  les commandes pour construire le paquet sous la règle «&nbsp;binary-indep&nbsp;», et
  laisser la règle «&nbsp;binary-arch&nbsp;» vide.

  <p>Les noms des programmes debhelper commencent par dh_ et la suite
  indique ce que chaque petit utilitaire fait. Tout cela est plutôt
  explicite, mais voici quelques explications supplémentaires&nbsp;:

  <list>
  <item><manref name="dh_testdir" section="1"> vérifie que vous êtes dans le
  bon répertoire (i.e. le répertoire racine des sources),
  <item><manref name="dh_testroot" section="1"> vérifie que vous avez les
  permissions root, nécessaire pour les cibles «&nbsp;binary-arch&nbsp;», «&nbsp;binary-indep&nbsp;»
  et «&nbsp;clean&nbsp;»,
  <item><manref name="dh_installmanpages" section="1"> copie les pages de
  manuel à la bonne place dans le répertoire de destination, vous devez juste
  lui dire où elles sont, relativement au répertoire racine des sources,
  <item><manref name="dh_strip" section="1"> retire les entêtes de débogage
  des fichiers exécutables pour les rendre plus petits,
  <item><manref name="dh_compress" section="1"> compresse les pages de manuel et
  la documentation plus large que 4 kb, avec <manref name="gzip" section="1">,
  <item><manref name="dh_installdeb" section="1"> copie les fichiers relatifs
  au paquet (p.e. les scripts du responsable) sous le répertoire
  <file>debian/gentoo/DEBIAN</file>,
  <item><manref name="dh_shlibdeps" section="1"> calcule les dépendances
  des bibliothèques et des exécutables,
  <item><manref name="dh_gencontrol" section="1"> génère et installe une
  version soigneusement ajustée du fichier control dans
  <file>debian/gentoo/DEBIAN</file>
  <item><manref name="dh_md5sums" section="1"> génère les sommes de contrôle 
  MD5 pour tous les fichiers dans le paquet.
  </list>

  <p>Pour une information plus complète sur ce que font tous ces scripts dh_*,
  et ce que sont leurs options, lisez les pages de manuel respectives.  Il y en a
  d'autres, potentiellement très utiles, qui ne sont pas mentionnés ici.  Si
  vous en avez besoin, lisez la documentation de debhelper.

  <p>La section binary-arch est celle où vous devriez vraiment commenter
  ou retirer toutes les lignes qui appellent des fonctionnalités dont
  vous n'avez pas besoin. Pour gentoo, je commente les lignes concernant
  exemples, cron, init, man et info, simplement parce que gentoo n'en a
  pas besoin. De plus, à la ligne 68, je remplace «&nbsp;ChangeLog&nbsp;» par «
  FIXES&nbsp;», parce que c'est le nom du fichier des modifications amont.

  <p>Les deux dernières lignes (avec toutes celles qui ne sont pas expliquées
  ici) sont juste des choses plus ou moins nécessaires, à propos desquelles
  vous pouvez lire dans le manuel de make, et dans le manuel des Normes.
  Pour l'instant il n'est pas important d'en savoir plus.

  <chapt id="dother">Autres fichiers dans le répertoire debian/

  <p>Vous verrez qu'il y a plusieurs autres fichiers dans le
  sous-répertoire debian, la plupart d'entre eux avec le suffixe «&nbsp;.ex
 &nbsp;», ce qui signifie qu'ils sont des exemples. Jetez un coup d'oeil à
  chacun d'entre eux. Si vous souhaitez ou devez utiliser une de ces
  options&nbsp;:

  <list>
    <item>lisez la documentation relative (astuce&nbsp;: le manuel des Normes),
    <item>si nécessaire, modifiez les fichers selon vos besoins,
    <item>renommez-les pour retirer le suffixe «&nbsp;.ex&nbsp;» s'ils en ont,
    <item>modifiez le fichier «&nbsp;rules&nbsp;» si nécessaire.
  </list>

  <p>Certains de ces fichiers, les plus utilisés, sont décrits dans les
  sections suivantes.

  <sect id="readme">README.Debian

  <p>Tous les détails ou différences entre le paquet original et votre
  version debianisée devraient être documentés ici. 
  
  <p>dh_make en crée un par défaut, voici ce à quoi il ressemble&nbsp;:

  <p><example>
  gentoo for Debian
  -----------------

  &lt;possible notes regarding this package - if none, delete this file&gt;

   -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt;, Wed, 11 Nov 1998 21:02:14 +0100
  </example>

  <p>Puisque nous n'avons rien en particulier à mettre ici, nous
  effaçons le fichier.

  <sect id="conffiles">conffiles.ex

  <p>L'une des choses les plus irritantes à propos des logiciels est de
  consacrer beaucoup de temps et d'efforts pour configurer un programme,
  et de voir une seule mise à jour détruire tous vos changements. Debian
  résout ce problème en marquant les fichiers de configuration de sorte
  que quand vous mettez à jour un paquet, il vous sera demandé si vous
  voulez gardez votre vieille configuration ou pas. 
  
  <p>La façon de procéder pour un paquet est d'entrer le chemin complet
  de chaque fichier de configuration (en général sous /etc), un par
  ligne dans un fichier nommé <tt/conffiles/.  Gentoo a un fichier de configuration, /etc/gentoorc, et nous le mettons
  dans <tt/conffiles/. 

  <p>Si votre programme utilise des fichiers de configuration, mais les
  réécrit aussi de son côté, il vaut mieux ne pas les marquer comme conffiles,
  parce que dpkg va alors interroger les utilisateurs pour vérifier les
  modifications tout le temps.

  <p>Si le programme que vous paquetez requiert que chaque utilisateur
  modifie le fichier de configuration pour fonctionner tout court, envisagez
  de ne pas le marquer non plus comme conffile.

  <p>Vous pouvez gérer des fichiers d'exemple de configuration à partir des «
  scripts du responsable&nbsp;».  Lisez <ref id="maintscripts"> pour plus
  d'information.

  <p>Si votre programme n'a pas de conffiles, vous pouvez tranquillement
  effacer le fichier <tt/conffiles/ du répertoire debian.

  <sect id="crond">cron.d.ex

  <p>Si votre paquet requiert des tâches programmées régulièrement pour
  fonctionner correctement, vous pouvez utiliser ce fichier pour le
  configurer.

  <p>Notez que ceci n'inclut pas la rotation des journaux; pour cela, voyez
  <manref name="dh_installlogrotate" section="1"> et <manref name="logrotate"
  section="8">.

  <p>Sinon, supprimez-le.

  <sect id="dirs">dirs

  <p>Ce fichier spécifie les répertoires dont nous avons besoin mais que la
  procédure d'installation normale (make install) ne crée pas.
  
  <p>Par défaut, il ressemble à ceci&nbsp;:

  <p><example>
  usr/bin
  usr/sbin
  </example>

  <p>Remarquez que le préfixe slash n'est pas inclus. Nous devrions normalement
  le changer comme ceci&nbsp;:

  <p><example>
  usr/bin
  usr/man/man1
  </example>

  <p>mais ces répertoires sont déjà créés dans Makefile, donc nous n'avons pas
  besoin de ce fichier, et allons plutôt l'effacer.

  <sect id="docs">docs

  <p>Ce fichier spécifie les noms des fichiers de documentation que
  dh_installdocs peut installer pour nous dans le répertoire temporaire.

  <p>Par défaut, il inclut tous les fichiers, existant dans le répertoire
  racine des sources, qui sont nommés «&nbsp;BUGS&nbsp;», «&nbsp;README*&nbsp;», «&nbsp;TODO&nbsp;», etc.

  <p>Pour gentoo, j'ai aussi inclus d'autres choses&nbsp;:

  <p><example>
  BUGS
  CONFIG-CHANGES
  CREDITS
  ONEWS
  README
  README.gtkrc
  TODO
  </example>

  <p>Nous pouvons aussi retirer ce fichier et à la place lister ces fichiers
  directement dans la ligne de commande <tt/dh_installdocs/ dans le fichier
  <tt/rules/, comme ceci&nbsp;:

  <p><example>
      dh_installdocs BUGS CONFIG-CHANGES CREDITS ONEWS README \
                       README.gtkrc TODO
  </example>

  <p>Aussi incroyable que cela puisse être, vous pouvez ne pas avoir de tels
  fichiers dans les sources de votre paquet.  Dans ce cas, vous pouvez
  tranquillement effacer ce fichier.  Mais ne retirez l'appel <tt/dh_installdocs/
  du fichier <tt/rules/ parce qu'il est utilisé pour installer le fichier
  <tt/copyright/ et d'autres choses.

  <sect id="emacsen">emacsen-*.ex

  <p>Si votre paquet fournit des fichiers Emacs qui peuvent être byte-compilés
  au moment de l'installation, vous pouvez utiliser ces fichiers pour les
  configurer.

  <p>Ils sont installés dans le répertoire temporaire par <manref
  name="dh_installemacsen" section="1">, donc n'oubliez pas de décommenter
  cette ligne dans le fichier <tt/rules/ si vous l'utilisez.

  <p>Si vous n'en avez pas besoin, effacez-les.

  <sect id="initd">init.d.ex

  <p>Si votre paquet est un démon qui doit être lancé au démarrage du système,
  vous avez de toute évidence ignoré mes recommandations initiales,
  n'est-ce-pas&nbsp;? :-)

  <p>Ceci est un squelette de fichier générique pour un fichier script
  <file>/etc/init.d/</file>, donc vous aurez à l'éditer, beaucoup.  Il est
  installé dans le répertoire temporaire par <manref name="dh_installinit"
  section="1">.

  <p>Si vous n'en avez pas besoin, effacez-le.

  <sect id="manpage">manpage.1.ex, manpage.sgml.ex

  <p>Votre programme devrait avoir une page de manuel. S'il n'en a pas, chacun
  de ces fichiers est un squelette que vous pouvez remplir.

  <p>Les pages de manuel sont normalement écrites en <manref name="nroff"
  section="1">.  L'exemple <tt/manpage.1.ex/ est aussi écrit en nroff.  Lisez
  la page de manuel <manref name="man" section="7"> pour une description
  brève de la façon d'éditer ce genre de fichier.

  <p>D'un autre côté, si vous préférez écrire du SGML à la place de nroff,
  vous pouvez utiliser le patron <tt/manpage.sgml.ex/.  Si vous le faites,
  vous devez&nbsp;:
  <list>
    <item>installer le paquet <package/docbook-to-man/
    <item>ajouter <tt/docbook-to-man/ à la ligne <tt/Build-Depends/ dans le
      fichier <tt/control/
    <item>retirer le commentaire de l'appel docbook-to-man dans la règle «
    build&nbsp;» de votre fichier <tt/rules/.
  </list>
  
  <p>Et souvenez-vous de renommer le fichier en quelque chose comme
  <tt/gentoo.sgml/&nbsp;!

  <p>Le nom du fichier de la page de manuel finale devrait inclure le nom du
  programme qu'elle documente, donc nous le renommons de «&nbsp;manpage&nbsp;» en «
  gentoo&nbsp;».  Le nom du fichier inclut aussi «&nbsp;.1&nbsp;» comme premier suffixe, ce
  qui signifie que c'est une page de manuel pour une commande utilisateur.
  Assurez-vous de vérifier que cette section est bien la bonne.  Voici une
  courte liste des sections de pages de manuel&nbsp;:

  <p><example>
  Section |     Description      |     Notes
     1     Commandes utilisateur   Commandes ou scripts exécutables.
     2     Appel système           Fonctions fournies par le noyau.
     3     Appel bibliothèque      Fonctions des bibliothèques système.
     4     Fichiers spéciaux       D'ordinaire trouvés dans /dev.
     5     Formats de fichiers     Par ex. le format /etc/password.
     6     Jeux                    Ou d'autres programmes frivoles.
     7     Paquets de macros       Comme les macros de man.
     8     Administration système  Des programmes d'habitude exécutés par root.
     9     Routines noyau          Appels non standards et routines internes.
  </example>

  <p>Donc, la page de manuel de gentoo devrait être appelée gentoo.1, ou
  gentoo.1x parce que c'est un programme X11. Il n'y avait pas de page de
  manuel gentoo.1 dans les sources originales, donc j'en ai écrit un à partir de
  l'exemple et de la documentation amont.

  <sect id="menu">menu.ex

  <p>Les utilisateurs de X Window ont un gestionnaire de fenêtres avec un
  menu qui peut être configuré. S'ils ont installé le paquet <package/menu/ de Debian,
  un ensemble de menu pour chaque programme sur le système sera créé
  pour eux.
  
  <p>Voici le fichier <tt/menu.ex/ créé par défaut par dh_make&nbsp;:

  <p><example>
  ?package(gentoo):needs=X11|text|vc|wm section=Apps/see-menu-manual\
    title="gentoo" command="/usr/bin/gentoo"
  </example>

  <p>Le premier champ après le caractère deux-points est «&nbsp;needs&nbsp;», et il
  indique le genre d'interface dont a besoin le programme.  Changez ceci en
  une des alternatives listées, par exemple «&nbsp;text&nbsp;» ou «&nbsp;X11&nbsp;».

  <p>Le suivant est «&nbsp;section&nbsp;», avec le menu et le sous-menu dans lesquels
  l'entrée devrait apparaître.  La liste courante des sections est dans&nbsp;:
  <file>/usr/share/doc/debian-policy/menu-policy.html/ch2.html#s2.1</file>.

  <p>le champ «&nbsp;title&nbsp;» est le nom du programme.  Vous pouvez le commencer par
  une majuscule si vous le souhaitez.  Mais gardez-le court.

  <p>Enfin, le champ «&nbsp;command&nbsp;» est la commande qui lance le programme.

  <p>Maintenant nous changeons l'entrée menu en ceci&nbsp;:

  <p><example>
  ?package(gentoo): needs=X11 section=Apps/Tools title="Gentoo" command="gentoo"
  </example>

  <p>Vous pouvez aussi ajouter d'autres champs comme «&nbsp;longtitle
 &nbsp;», «&nbsp;icon&nbsp;», «&nbsp;hint&nbsp;», etc. Voir <manref name="menufile"
  section="5">, <manref name="update-menus" section="1"> et
  <file>/usr/share/doc/debian-policy/menu-policy.html/</file> pour plus
  d'information.


  <sect id="watch">watch.ex

  <p>Ce fichier est utilisé pour configurer les programmes <manref
  name="uscan" section="1"> et de <manref name="uupdate" section="1">
  (dans le paquet <package/devscripts/). Ils sont utilisés pour
  surveiller le site sur lequel vous avez obtenu les sources. 
  
  <p>Voici ce que j'y ai mis&nbsp;:

  <p><example>
  # watch control file for uscan
  # Site                  Directory       Pattern                Version Script
  ftp.obsession.se        /gentoo         gentoo-(.*)\.tar\.gz   debian  uupdate
  </example>

  <p>Astuce&nbsp;: connectez-vous à Internet, et essayez d'exécuter «&nbsp;uscan&nbsp;» dans le
  répertoire du programme une fois que vous avez créé ce fichier. Et lisez
  les manuels. :-)

  <sect id="doc-base">ex.package.doc-base

  <p>Si votre paquet a de la documentation autre que
  des pages de manuel et des documents info, vous devriez
  utiliser le fichier <package/doc-base/ pour l'enregistrer, de sorte que
  l'utilisateur puisse le trouver avec par exemple <manref name="dhelp"
  section="1">, <manref name="dwww" section="1"> ou <manref name="doccentral"
  section="1">.

  <p>Cela inclut normalement les fichiers HTML, PS et PDF, délivrés dans
  <file>/usr/share/doc/nom_du_paquet/</file>.

  <p>Voici ce à quoi le fichier doc-base de gentoo ressemble&nbsp;:

  <p><example>
  Document: gentoo
  Title: Gentoo Manual
  Author: Emil Brink
  Abstract: This manual describes what Gentoo is, and how it can be used.
  Section: Apps/Tools

  Format: HTML
  Index: /usr/share/doc/gentoo/html/index.html
  Files: /usr/share/doc/gentoo/html/*.html
  </example>

  <p>Pour plus d'information sur le format de ce fichier, voir <manref
  name="install-docs" section="8"> et le manuel de <package/doc-base/, dans
  <file>/usr/doc/doc-base/doc-base.html/index.html</file>.

  <sect id="maintscripts">postinst.ex, preinst.ex, postrm.ex, prerm.ex

  <p>Ces fichiers sont nommés scripts de responsable. Ce sont des
  scripts placés dans la zone de contrôle du paquet et sont exécutés par
  <prgn/dpkg/ lorsque votre paquet est installé, mis à jour ou supprimé.
  
  <p>Pour l'instant, vous devriez éviter les scripts de responsable si vous le
  pouvez parce qu'ils ont tendance à être complexes.  Pour plus d'information
  regardez dans le chapitre 6 du manuel des Normes, et examinez les fichiers
  d'exemples fournis par dh_make.

  <chapt id="build">Construire le paquet

  <p>Nous devrions maintenant être prêt à construire le paquet.

  <sect id="completebuild">Reconstruction complète

  <p>Allez dans le répertoire principal du programme et lancez ceci&nbsp;:

  <p><example>
  dpkg-buildpackage -rfakeroot
  </example>

  <p>Ceci fera tout pour vous.  Il va&nbsp;:
  <list>
    <item>nettoyer l'arbre des sources (debian/rules clean), en utilisant
      <prgn/fakeroot/
    <item>construire le paquet source (dpkg-source -b)
    <item>construire le programme (debian/rules build)
    <item>construire le paquet binaire (debian/rules binary), en utilisant
      <prgn/fakeroot/
    <item>signer le fichier source <tt/.dsc/, en utilisant <prgn/gnupg/
    <item>créer et signer le fichier de téléchargement <tt/.changes/, en
      utilisant <prgn/dpkg-genchanges/ et <prgn/gnupg/.
  </list>
  
  <p>La seule entrée qui vous sera demandée est votre phrase de passe secrète
  GPG, deux fois.
  
  <p>Une fois que c'est fait, vous verrez les fichiers suivants dans le
  répertoire au-dessus (<tt>~/debian</tt>)&nbsp;:

  <p><list>
  <item><em>gentoo_0.9.12.orig.tar.gz</em>

  <p>Ceci est le code source original, simplement renommé pour être conforme
  aux standards Debian.  Notez qu'il a été créé en utilisant l'option «&nbsp;-f&nbsp;»
  du programme <prgn/dh_make/ quand nous l'avons initialement appelé.
  
  <item><em>gentoo_0.9.12-1.dsc</em>

  <p>Ceci est un résumé du contenu du code source. Ce fichier est généré à
  partir du fichier «&nbsp;control&nbsp;», et est utilisé pour
  décompresser les sources avec <manref name="dpkg-source" section="1">. Ceci
  est un fichier signé en PGP, de sorte que les gens peuvent être sûrs
  qu'il s'agit bien du vôtre.

  <item><em>gentoo_0.9.12-1.diff.gz</em>

  <p>Ce fichier compressé contient chacune des additions que vous avez faites
  au code source original, sous une forme connue comme «&nbsp;différence unifiée&nbsp;».
  Il est créé et utilisé par <manref name="dpkg-source" section="1">.
  Attention&nbsp;: si vous ne nommez pas le paquet source original
  nomdupaquet_version.orig.tar.gz, <prgn/dpkg-source/ échouera à générer le
  fichier .diff.gz correctement.

  Si quelqu'un
  d'autre veut recréer votre paquet depuis le début, il le peut facilement en
  utilisant ces trois fichiers. La procédure d'extraction est facile&nbsp;: juste
  copier ces trois fichiers quelque part et lancer <tt>dpkg-source -x
  gentoo_0.9.12-1.dsc</tt>.

  <item><em>gentoo_0.9.12-1_i386.deb</em>

  <p>Ceci est le paquet binaire complété. Vous pouvez utiliser <prgn/dpkg/ 
  pour l'installer ou le retirer juste comme tout autre paquet.

  <item><em>gentoo_0.9.12-1_i386.changes</em>

  <p>Ce fichier contient toutes les modifications faites dans la
  révision courante du paquet, et est utilisé par les programmes de
  maintenance des archives FTP Debian pour y installer les paquets
  binaires et sources. Il est partiellement généré à partir du fichier «
  changelog&nbsp;» et du fichier .dsc. Ce fichier est signé en PGP, de sorte
  que les gens peuvent être sûrs qu'il s'agit bien du vôtre.

  <p>Au fur et à mesure que vous travaillez sur le paquet, son comportement va
  changer et de nouvelles capacités seront ajoutées. Les gens qui téléchargent
  votre paquet peuvent lire ce fichier et voir rapidement ce qui a changé.
  Les programmes de maintenance des archives Debian vont aussi poster le
  contenu de ce fichier sur la liste de distribution debian-devel-change.
  </list>

  <p>Les longues chaînes de chiffres dans les fichiers .dsc et
  .changes sont des sommes MD5 pour les fichiers mentionnés. Les
  personnes téléchargeant vos fichiers peuvent les tester avec <manref
  name="md5sum" section="1"> et si les fichiers ne correspondent pas,
  elles sauront que le fichier a été corrompu ou qu'il a été piraté.

  <sect id="quickrebuild">Reconstruction rapide

  <p>Avec un paquet imposant, vous ne voudrez sans doute pas
  reconstruire depuis le début chaque fois que vous faites une petite
  modification à <file>debian/rules</file>. Pour tester, vous pouvez
  faire un fichier .deb sans reconstruire les sources amont comme ceci&nbsp;:

  <p><example>
  fakeroot debian/rules binary
  </example>

  <p>Une fois que vous avez fini vos ajustements, souvenez-vous de
  reconstruire en suivant la procédure correcte ci-dessus.  Vous pouvez ne pas
  être capable de télécharger correctement si vous essayez de télécharger des
  fichiers .deb construit comme ceci.

  <chapt id="checkit">Contrôler les erreurs du paquet

  <p>Lancez <manref name="lintian" section="1"> sur votre fichier .changes; ce
  programme va examiner un grand nombre d'erreurs de paquetage courantes. La
  commande est&nbsp;:

  <p><example>
  lintian -i gentoo_0.9.12-1_i386.changes
  </example>

  <p>Bien sûr, remplacez le nom de fichier par celui du fichier .changes 
  généré pour votre paquet.  S'il s'avère qu'il y a des erreurs (les lignes
  commençant avec E:), lisez l'explication (les lignes N:), corrigez les
  erreurs, et reconstruisez comme décrit dans <ref id="completebuild">. S'il y a des
  lignes qui commencent avec W:, il s'agit de mises en garde, donc vous pouvez
  ajuster votre paquet ou vous assurer que les mises en garde sont inutiles
  (et faire en sorte que Lintian les ignore; voir la documentation pour les
  détails).

  <p>Remarquez que vous pouvez reconstruire le paquet avec
  <prgn/dpkg-buildpackage/ et lancer <prgn/lintian/ en une seule
  commande avec <manref name="debuild" section="1">.

  <p>Regardez dans votre paquet en utilisant un gestionnaire de
  fichiers comme <manref name="mc" section="1"> ou décompressez-le
  dans une place temporaire en utilisant <manref name="dpkg-deb"
  section="1">. Cherchez avant tout les fichiers inutiles, à la fois
  dans les paquets binaire et source. Souvent des crasses ne sont pas
  nettoyées correctement; ajustez votre fichier rules pour compenser.
  Astuce&nbsp;: `zgrep ^+++ ../gentoo_0.9.12-1.diff.gz` vous donnera la liste
  de vos modifications/additions au fichiers sources, et `dpkg-deb -c
  gentoo_0.9.12-1_i386.deb` la liste des fichiers dans le paquet.

  <p>Installez le paquet pour le tester vous-même, par exemple en utilisant
  <manref name="debi" section="1"> en tant que root.  Essayez de l'installer
  sur d'autres machines que la vôtre et vérifier attentivement chaque
  avertissement ou erreur tant à l'installation qu'en exécutant le programme.

  <chapt id="upload">Envoyer votre paquet

  <p>Maintenant que vous avez testé votre nouveau paquet en détails, vous êtes
  prêt à commencer le processus d'application de nouveau responsable Debian,
  comme décrit dans <url id="http://www.debian.org/devel/join/newmaint">.
  
  <p>Une fois que vous êtes devenu un responsable Debian officiel, vous devrez
  télécharger le paquet sur les archives Debian.  Vous pouvez le faire
  manuellement, mais c'est plus facile d'utiliser les outils automatiques
  fournis, comme <manref name="dupload" section="1"> ou <manref name="dput"
  section="1">.  Nous décrirons la façon de faire avec <prgn/dupload/.

  <p>D'abord vous devez écrire le fichier de configuration de dupload.  Vous
  pouvez soit éditer le fichier global <file>/etc/dupload.conf</file>, ou
  avoir votre propre fichier <file>~/.dupload</file> pour remplacer les
  quelques détails que vous voulez changer.  Mettez quelque chose comme ceci
  dans le fichier&nbsp;:

  <p><example>
  package config;

  $default_host = "ftp-master";

  $cfg{"ftp-master"}{"login"} = "votrenomdebian";

  $cfg{non-us}{"login"} = "votrenomdebian";
  
  1;
  </example>

  <p>Bien sûr, remplacez mes informations personnelles par les vôtres, et lisez
  la page de manuel <manref name="dupload.conf" section="5"> pour comprendre
  ce que chacune de ces options signifie.

  <p>L'option $default_host est la plus compliquée -- elle détermine
  quelle queue de téléchargement sera utilisée par défaut.
  «&nbsp;ftp-master&nbsp;» est la principale, mais il est possible
  que vous souhaitiez en utiliser une autre, plus rapide. Pour plus
  d'information sur les queues de téléchargement, lisez la Référence du
  Développeur, section «&nbsp;La mise à jour d'un paquet&nbsp;», dans
  <file>/usr/share/doc/developers-reference/developers-reference.fr.html
  /ch-upload.fr.html#s-uploading</file>.

  <p>Puis connectez-vous à votre fournisseur Internet et lancez cette
  commande&nbsp;:

  <p><example>
  dupload gentoo_0.9.12-1_i386.changes
  </example>

  <p><prgn/dupload/ vérifie que les sommes md5 des fichiers sont identiques à celles
  du fichier .changes, pour qu'il puisse vous avertir de reconstruire comme
  décrit dans <ref id="completebuild"> et qu'il charge le fichier correctement.

  <p>Si vous téléchargez sur «&nbsp;ftp-master&nbsp;», <prgn/dupload/ vous demandera
  votre mot de passe sur les machines Debian, et ensuite téléchargera les
  paquets.

  <chapt id="update">Mettre à jour le paquet

  <sect id="newrevision">Nouvelle révision Debian

  <p>Disons qu'un rapport de bogue a été rempli pour votre paquet, #54321, et
  qu'il décrit un problème que vous pouvez résoudre.  Pour créer une nouvelle
  révision du paquet, vous devez&nbsp;:

  <list>
  <item>Corriger le problème dans le paquet source, bien sûr.
  
  <item>Ajouter une nouvelle révision au sommet du fichier changelog Debian,
  par exemple avec
  «&nbsp;dch -i&nbsp;», ou explicitement avec «&nbsp;dch -v &lt;version&gt;-&lt;revision&gt;
 &nbsp;», et ajoutez ensuite les commentaires en utilisant votre éditeur favori.

  <p>Astuce&nbsp;: comment obtenir facilement la date au format requis&nbsp;?  Utilisez
  «&nbsp;822-date&nbsp;» ou «&nbsp;date -R&nbsp;».

  <item>Ajoutez une courte description du bogue et de la solution dans
  l'entrée du changelog, suivie par ceci&nbsp;: «&nbsp;Closes: #54321&nbsp;». De
  cette manière, le rapport de bogue sera automatiquement fermé par le
  logiciel de maintenance des archives au moment où votre paquet sera
  accepté dans l'archive Debian.

  <item>Recommencez ce que vous aviez fait dans <ref
  id="completebuild">, <ref id="checkit">, et <ref id="upload">. La
  différence est que cette fois, l'archive des sources originales
  ne sera pas incluse, car elle n'a pas été changée et est déjà dans
  l'archive Debian. </list>

  <sect id="newupstream">Nouvelle version amont

  <p>Considérons maintenant une autre situation, légèrement plus compliquée -
  une nouvelle version amont est disponible, et bien sûr vous voulez en faire
  un paquet.  Vous devez donc&nbsp;:

  <list>
  <item>télécharger les sources et mettre l'archive source (par exemple nommée
  `gentoo-0.9.13.tar.gz') dans le répertoire au dessus des anciennes sources
  (par exemple ~/debian/).

  <item>Entrez dans le répertoire source ancien, et lancez&nbsp;:

  <example>
  uupdate -u gentoo-0.9.13.tar.gz
  </example>

  Bien sûr, remplacez le nom de fichier par celui de l'archive source de votre
  programme.  <manref name="uupdate" section="1"> va correctement renommer
  cette archive, essayer d'appliquer les modifications de votre précédent
  fichier .diff.gz, et mettre à jour le nouveau fichier debian/changelog.

  <item>Allez dans le répertoire `../gentoo-0.9.13', l'arbre des sources
  du nouveau paquet, et recommencez ce que vous aviez fait dans <ref
  id="completebuild">, <ref id="checkit"> et <ref id="upload">.
  </list>

  <p>Remarquez que si vous configurez `debian/watch' comme indiqué dans <ref
  id="watch">, vous pouvez lancer <manref name="uscan" section="1"> pour
  automagiquement chercher les nouvelles sources, les télécharger et exécuter
  <prgn/uupdate/ dessus.

  <sect id="upgrading">Vérifier les mises à jour de paquet

  <p>Quand vous construisez une nouvelle version du paquet, vous devriez
  toujours suivre cette procédure pour vérifier que le paquet pour être
  tranquillement mis à jour&nbsp;:

  <list>
    <item>mettez à jour depuis la version précédente
    <item>revenez à la version précédente, puis retirez-la
    <item>installez le nouveau paquet
    <item>retirez-le et réinstallez-le à nouveau
    <item>purgez-le.
  </list>

  <p>Gardez à l'esprit que si votre paquet a été livré avec Debian, les gens
  vont souvent mettre à jour votre paquet à partir de la révision qui était
  dans la dernière version Debian.  Souvenez-vous de tester aussi les mises à jour à
  partir de cette révision.


  <chapt id="helpme">Où demander de l'aide

  <p>Avant de vous décider à poser une question dans un lieu public, s.v.p.
  RTFM. Ceci inclut la documentation sous <file>/usr/share/doc/dpkg</file>,
  <file>/usr/share/doc/debian</file>, <file>/usr/share/doc/paquet/*</file> et les pages de
  manuel/d'info pour tous les programmes mentionnés dans ce document.
  
  <p>Si vous avez des questions sur la création de paquets pour lesquelles
  vous n'avez pas pu trouver de réponses dans la documentation, vous pouvez
  les poser sur la liste de distribution Debian Mentors, sur
  <email/debian-mentors@lists.debian.org/.  Les responsables Debian les plus
  expérimentés seront heureux de vous aider, mais au moins lisez une partie de
  la documentation avant de poser une question&nbsp;!

  <p>Consultez <url id="http://lists.debian.org/debian-mentors/"> pour plus
  d'information sur cette liste de distribution.
  
  <p>Quand vous recevez un rapport de bogue (oui, un rapport
  de bogue réel&nbsp;!) vous saurez qu'il est temps de plonger
  dans le <url name="Système de Suivi de Bogues Debian"
  id="http://www.debian.org/Bugs/"> et lisez la documentation,
  pour être à même de gérer les rapports efficacement.
  Je recommande chaudement la lecture de la Référence du
  Développeur, chapitre «&nbsp;Gérer les bogues&nbsp;», dans
  <file>/usr/share/doc/developers-reference/developers-reference.fr.html
  /ch-bug-handling.fr.html</file>.

  <p>Si vous avez encore des questions, posez-les sur la liste de
  discussion Debian Developers à <email/debian-devel@lists.debian.org/.
  Consultez <url id="http://lists.debian.org/debian-devel/"> pour plus
  d'information sur cette liste de distribution.

  <p>Même si tout marche bien, il est temps de commencer à prier. Pourquoi&nbsp;?
  Parce que dans quelques heures (ou jours) les utilisateurs du monde entier
  vont commencer à utiliser votre paquet, et si vous avec fait des erreurs
  critiques vous serez bombardé par les courriels d'utilisateurs Debian
  furieux... Je plaisante. :-)

  <p>Relaxez-vous et soyez prêt pour les rapports de bogues, parce qu'il y aura
  beaucoup plus de travail à faire avant que votre paquet soit parfaitement conforme
  aux règles Debian (une fois encore, lisez la <em>documentation réelle</em>
  pour les détails). Bonne chance&nbsp;!
 </book>

</debiandoc>
