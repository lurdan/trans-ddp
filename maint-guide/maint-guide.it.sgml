<!DOCTYPE debiandoc PUBLIC "-//DebianDoc//DTD DebianDoc//EN" [

<!-- textual data entities -->
<!-- first definition wins in SGML -->
<!ENTITY % default  SYSTEM "default.ent">  %default;
<!ENTITY % version  SYSTEM "version.ent">  %version;

]>
<!-- CVS revision of this document "$Revision: 1.28 $"  -->
<!-- CVS revision of original english document "1.116"  -->

<!-- In order to make translation easy, please do not continue text beyond
     normal boundary of SGML tag.  This file will be converted to po4a system.
     If you see too much us of "the following" and "as follows", 
     this is intentional. -->

<debiandoc>

 <book>

  <titlepag>

   <title>Guida per il nuovo Maintainer</title>

   <author>Josip Rodin <email/joy-mg@debian.org/
   </author>
   <author>Traduzione: Calogero Lo Leggio <email/kalos@nerdrug.org/
   </author>
   <author>Traduzione: Jacopo Reggiani <email/jacopo.reggiani@gmail.com/</author>
   <author>Traduzione: Francesco P. Lovergine</author>

   <version>version &docversion;, &docisodate;</version>

   <copyright>
   <copyrightsummary>Copyright &copy; 1998-2002 Josip Rodin.</copyrightsummary>
   <copyrightsummary>Copyright &copy; 2005-2010 Osamu Aoki.</copyrightsummary>
   <copyrightsummary>Copyright &copy; 2010 Craig Small.</copyrightsummary>
   <copyrightsummary>Copyright &copy; 2010 Raphael Hertzog.</copyrightsummary>

<!-- For now we stick with ASCII for best compatibility.  No UTF-8 please.  
     Osamu Aoki
     Raphaël Hertzog
     If we have to, this should be in latin-1
     Translators, please let Osamu know you are translating.
     We should be able to set up better po4a based work flow, now.
-->

   <p>Questa guida può essere utilizzata nei termini della GNU General Public License
   versione 2 o successive.

   <p>Questo documento è stato realizzato utilizzando come modello i documenti seguenti:

   <p>Making a Debian Package (noto come Manuale di Debmake), copyright &copy;
   1997 Jaldhar Vyas.

   <p>The New-Maintainer's Debian Packaging Howto, copyright &copy; 1997
   Will Lowe.
   </copyright>

  </titlepag>

  <toc sect1>

  <chapt id="start">Partire nel modo giusto

  <p>Questo documento ha l'obbiettivo di descrivere le procedure necessarie per la costruzione
  di un pacchetto Debian GNU/Linux, per un normale utente Debian e aspirante
  sviluppatore, utilizzando un linguaggio immediato e con l'ausilio di esempi
  concreti. C'è un detto latino che dice <em>Longum iter est per preaecepta,
  breve et efficax per exempla!</em> (La via è lunga usando la teoria, ma breve
  ed efficiente con gli esempi!).

  <p>Questo documento è stato aggiornato per la distribuzione Debian <tt>squeeze</tt>.
  <footnote>Nel documento si suppone l'utilizzo di un sistema <tt>squeeze</tt>.
  Se si intende seguire questo documento per un sistema <tt>lenny</tt>,
  bisognerebbe almeno installare delle versioni backport (n.d.t. versioni dei programmi presenti nei pacchetti di testing e unstable, compilate per poter funzionare in un sistema stable) di 
  <package>dpkg</package> e <package>debhelper</package>.</footnote>

  <p>Una delle cose che rende Debian una delle distribuzioni Linux più importanti, è il
  suo sistema di pacchettizzazione. Sebbene ci sia una vasta quantità di software
  disponibile sotto forma di pacchetto Debian, qualche volta è necessario installare
  del software per il quale non è stato ancora creato il pacchetto. Si potrebbe pensare
  che creare dei pacchetti sia un compito molto difficile. In effetti, se si 
  è alle prime armi con Linux è dura, ma se si ha esperienza non si può non leggere
  questo documento. :-) Servirà conoscere dei rudimenti di programmazione
  Unix, ma di sicuro non sarà necessario essere un mago della programmazione.

  <p>Una cosa però è certa: per creare in maniera corretta e manutenere dei pacchetti Debian
  serviranno svariate ore di lavoro. Per far funzionare il nostro sistema, i maintainer
  devono stare attenti a non commettere errori, essere scrupolosi e tecnicamente competenti.

  <p>Questo documento spiegherà ogni piccolo (e forse all'inizio irrilevante) passo,
  aiuterà nella creazione del primo pacchetto e ad acquisire l'esperienza necessaria
  per manutenerne i successivi rilasci e possibilmente creare in futuro ulteriori pacchetti.

  <p>Se è necessario qualche aiuto sulla pacchettizazione, si consiglia la lettura di <ref id="helpme">.
  
  <p>Le versioni aggiornate di questo documento dovrebbero essere disponibili
  all'indirizzo <url name="http://www.debian.org/doc/maint-guide/"
  id="http://www.debian.org/doc/maint-guide/">
  e nel pacchetto <package/maint-guide/.
  La traduzione in italiano è disponibile anche nel pacchetto <package/maint-guide-it/.

  <sect id="needprogs">Programmi necessari per lo sviluppo

  <p>Prima di iniziare, bisogna assicurarsi di avere installato correttamente
  alcuni pacchetti aggiuntivi, necessari per lo sviluppo. Da notare che la lista
  non contiene nessun pacchetto etichettato come <tt>essenziale</tt> o
  <tt>richiesto</tt> - ci aspettiamo che siano già installati nel sistema.

  <p>I seguenti pacchetti fanno parte dell'installazione standard di
  Debian, per cui probabilmente sono già presenti nel sistema (insieme ai
  pacchetti aggiuntivi dai quali dipendono). Si può effettuare un controllo
  con "<tt>aptitude show <var>pacchetto</var></tt>".

  <p>
  Il pacchetto più importante da installare in un sistema in cui si ha intenzione
  di sviluppare è <package/build-essential/. Questo <em>includerà</em> altri
  pacchetti necessari per avere un ambiente di base per la compilazione dei programmi.

  <p>
  Per alcuni tipi di pacchetti questo è tutto quello che serve, ci sono però una
  serie di pacchetti che pur non essendo essenziali per lo sviluppo, vengono in aiuto
  allo sviluppatore o possono essere richiesti dal pacchetto su cui si lavora:

  <list>
  <item><package/file/ - questo semplice programma stabilisce la tipologia di un
  file. (vedere <manref name="file" section="1">)

  <item><package/patch/ - questo utile programma usa un file contenente una serie
  di differenze (prodotta dal programma diff) e le applica al file originale, per
  produrre una versione modificata. (vedere <manref name="patch" section="1">)

  <item><package/perl/ - Perl è uno dei linguaggi di scripting più utilizzati
  sui moderni sistemi Unix e derivati, spesso definito come "il coltellino
  svizzero di Unix". (vedere <manref name="perl" section="1">)

  <item><package/python/ - Python è un altro linguaggio di scripting molto
  utilizzato sui sistemi Debian, combina una notevole potenza con una sintassi
  molto chiara. (vedere <manref name="python" section="1">)

  <item><package/autoconf/, <package/automake/ e <package/autotools-dev/ - diversi
  programmi recenti usano script di configurazione e <file>Makefile</file> preprocessati
  con l'aiuto di programmi come questi.  (vedere "<tt>info autoconf</tt>", "<tt>info automake</tt>")
  <package/autotools-dev/ tiene aggiornate le versioni di alcuni file di automazione,
  usati processo di compilazione, e contiene la documentazione che spiega il modo migliore per utilizare questi file.

  <item><package/dh-make/ e <package/debhelper/ - <package/dh-make/ è necessario
  per creare lo scheletro del pacchetto, utilizza alcuni strumenti di <package/debhelper/
  per creare i pacchetti. Non sono essenziali per la creazione di pacchetti, ma sono
  <em>fortemente</em> consigliati per i nuovi maintainer. Questo rende l'intero processo
  molto più semplice da iniziare e controllare successivamente. (vedere
  <manref name="dh_make" section="1">, <manref name="debhelper" section="1">,
  <file>/usr/share/doc/debhelper/README</file>)

  <item><package/devscripts/ - questo pacchetto contiene alcuni pratici script che possono
  essere utili ai maintainer, anche se non sono strettamente necessari per la creazione
  dei pacchetti. I pacchetti consigliati o suggeriti da questo pacchetto andrebbero
  presi in considerazione. (vedere <file>/usr/share/doc/devscripts/README.gz</file>)

  <item><package/fakeroot/ - questo programma permette di fingere di essere
  root, dato che è necessario per l'esecuzione di alcune parti del processo
  di creazione del pacchetto. (vedere <manref name="fakeroot" section="1">)

  <item><package/gnupg/ - questo programma consente di <em>firmare</em> elettronicamente
  i pacchetti. Questo è importante soprattutto se si vuole distribuirli ad altre persone,
  e verrà sicuramente fatto quando un pacchetto sarà pronto per essere incluso nella
  distribuzione Debian. (vedere <manref name="gpg" section="1">)

  <item><package/gfortran/ - il compilatore GNU Fortran 95, necessario se il
  programma è scritto in Fortran. (vedere <manref name="gfortran" section="1">)
  
  <item><package/gpc/ - il compilatore GNU Pascal, necessario se il programma
  è scritto in Pascal. Un sostituto degno di nota è <package/fp-compiler/,
  il Compilatore Free Pascal.
  (vedere <manref name="gpc" section="1">, <manref name="ppc386" section="1">)

  <item><package/xutils-dev/ - alcuni programmi, generalmente quelli fatti per
  X11, usano questi strumenti per generare i <file>Makefile</file>
  da una serie di funzioni macro. (vedere <manref name="imake" section="1">,
  <manref name="xmkmf" section="1">)

  <item><package/lintian/ - questo è l'analizzatore dei pacchetti Debian,
  una volta costruito il pacchetto, permette di scoprire gli errori più
  comuni, cercando di spiegarli. (vedere <manref name="lintian" section="1">, 
  <file>/usr/share/doc/lintian/lintian.html/index.html</file>)

  <item><package/pbuilder/ - questo pacchetto contiene i programmi che vengono
  usati per creare e manutenere un ambiente <prgn>chroot</prgn>. Creare pacchetti
  Debian nell'ambiente <prgn>chroot</prgn> permette di verificare le dipendenze appropriate ed evitare
  bug di tipo FTBS (Fails To Build From Source, non compila da sorgente).
  (vedere <manref name="pbuilder" section="8"> e <manref name="pdebuild" section="1">)

  <item><package/patchutils/ - questo pacchetto contiene dei programmi che
  lavorano con i file di patch, come <prgn>lsdiff</prgn>,
  <prgn>interdiff</prgn> e <prgn>filterdiff</prgn>.

  <item><package/quilt/ - questo pacchetto aiuta a gestire una serie di patch,
  tenendo traccia dei cambiamenti apportati. Le patch sono organizzate in maniera
  logica come una pila, è possibile applicare(=push) le modifiche apportate dalla
  patch, oppure annullarle(=pop), semplicemente muovendosi attraverso la pila.
  (vedere <manref name="quilt" section="1">, <file>/usr/share/doc/quilt/README.Debian</file>)

  <item><package/git-core/ - questo pacchetto contiene un famoso sistema per il
  controllo delle versioni, progettato per gestire progetti molto grandi con
  velocità ed efficienza; è utilizzato da molti progetti open source, tra cui
  il kernel Linux.  (see <manref name="git" section="1">,
  <file>/usr/share/doc/git-doc/index.html</file>)

  </list>

  <p>Segue una serie di documenti <em>molto importanti</em> 
  che è consigliabile leggere insieme a questo documento:

  <list>
  <item><package/debian-policy/ - il <url name="manuale delle policy Debian" id="http://www.debian.org/doc/devel-manuals#policy">
  comprende le spiegazioni riguardanti la struttura e il contenuto dell'archivio
  Debian, numerose problematiche inerenti la progettazione del sistema operativo,
  lo Standard della Gerarchia del Filesystem (ndr. Filesystem Hierarchy
  Standard), (che indica la posizione di prevista per ogni file e directory), ecc.
  In questo contesto, l'argomento più importante è la descrizione dei requisiti
  che ogni pacchetto deve soddisfare per essere incluso nella distribuzione.
  (vedere <file>&debian-policy;</file>)

  <item><package/developers-reference/ - la
  <url name="guida di riferimento per gli sviluppatori Debian" id="http://www.debian.org/doc/devel-manuals#devref">
  descrive tutti gli argomenti che non riguardano in maniera specifica i dettagli
  tecnici sulla pacchettizzazione, come la struttura dell'archivio, come rinominarlo,
  come rendere orfano o prendere in carico un pacchetto, come fare gli NMU, come
  gestire i bug, i metodi migliori per creare pacchetti, quando e dove depositarli, ecc.
  (vedere &developers-reference;)

  <item><package/gnu-standards/ - questo pacchetto contiene due documenti
  provenienti dal progetto GNU:
  <url name="GNU Coding Standards" id="http://www.gnu.org/prep/standards/html_node/index.html">, and
  <url name="Information for Maintainers of GNU Software" id="http://www.gnu.org/prep/maintain/html_node/index.html">.
  Nonostante debian non necessiti del loro utilizzo, sono
  comunque utili come linee guida e buona prassi.
  (vedere <file>/usr/share/doc/gnu-standards/standards.html</file> e
  <file>/usr/share/doc/gnu-standards/maintain.html</file>).

  </list>

  <p>Se questo documento contraddice quanto scritto nel manuale delle policy
  Debian e nella guida di riferimento per gli sviluppatori Debian, si
  considerino corrette quest'ultime. Si prega di mandare una segnalazione di bug al pacchetto <package>maint-guide</package>.

  <p>Le brevi note elencate qui sopra servono solo ad accennare lo
  scopo di ogni pacchetto. Prima di continuare, è opportuno leggere in modo
  approfondito la documentazione di ogni programma, almeno per
  un utilizzo di base. Può sembrare molto pesante farlo adesso, ma 
  in seguito ti renderai conto che sarà stato <em>utilissimo</em>.

  <sect id="terminology">Terminologia base

  <p>Ci sono due tipi di pacchetti.

  <list>

  <item><strong>pacchetto sorgente</strong>: Un pacchetto sorgente è composto da 
  una serie di file che contengono codice sorgente e dati, che possono essere
  compilati ed elaborati per diventare programmi e documenti formattati. Di
  solito viene distribuito in una combinazione di <file>*.orig.tar.gz</file>,
  <file>*.debian.tar.gz</file> (oppure <file>*.diff.gz</file>), e <file>*.dsc</file>.
  Possono essere utilizzati anche altri tipi di archivio e metodi di compressione.

  <item><strong>pacchetto binario</strong>: Un pacchetto binario contiene il programma
  già compilato e la documentazione formattata. Di solito viene distribuito come <file>*.deb</file>
  per i normali pacchetti Debian, e come <file>*.udeb</file> per i pacchetti del Debian Installer.

  </list>

  <p>Attenzione a non confondere termini come: sorgente di un programma e
  pacchetto sorgente del programma!

  <p>Nel mondo Debian sono previsti diversi ruoli.

  <list>

  <item><strong>autore originale (upstream author)</strong>: La persona che ha
  iniziato lo sviluppo del programma.

  <item><strong>responsabile del programma (upstream maintainer)</strong>: La
  persona che attualmente sviluppa il programma.

  <item><strong>responsabile del pacchetto (maintainer)</strong>: La persona
  che ha creato il pacchetto Debian del programma.

  <item><strong>sponsor</strong>: La persona che aiuta i responsabili dei
  pacchetti a verificarne la correttezza dei contenuti ed a depositarli
  nell'archivio Debian ufficiale.

  <item><strong>mentore</strong>: La persona che aiuta i responsabili dei
  pacchetti alle prime armi nelle operazioni di creazione del pacchetto, ecc.

  <item><strong>sviluppatore Debian (Debian Developer)</strong> (DD): membro del progetto Debian.
  Questa persona ha la possibilità di depositare i pacchetti all'interno dell'archivio Debian ufficiale.

  <item><strong>responsabile Debian (Debian Maintainer)</strong> (DM): Questa persona ha la possibilità
  di depositare i pacchetti all'interno dell'archivio Debian ufficiale.

  </list>

  <p>Ci sono molti nomi di versioni usati in Debian.

  <list>
  <item><strong>versione originale del sorgente (upstream source version)</strong>: La versione originale del sorgente è denominata <tt><var>versione</var></tt>.

  <item><strong>revisione Debian (Debian revision)</strong>: La revisione di Debian del pacchetto è denominata <tt><var>revisione</var></tt>.

  <item><strong>versione del pacchetto Debian (Debian package version)</strong>: La versione del pacchetto Debian è composta come segue.
  <list>
  <item><tt><var>versione</var></tt> per i pacchetti binari e sorgenti nativi Debian.
  <item><tt><var>versione</var>-<var>revisione</var></tt> per i pacchetti binari non-nativi Debian (esempio quelli di terze parti).
  </list>

  </list>

  <p>Se si vuole approfondire nel dettaglio la terminologia, si consiglia la lettura di altri manuali.

  <sect id="debiandeveloper">Sviluppatore ufficiale Debian

  <p>Non è possibile diventare uno <strong>sviluppatore Debian</strong> (DD) dal giorno
  alla notte, perché questo richiede più che delle semplici conoscenze tecniche. Ma non
  ci si deve lasciare scoraggiare da questo. Se il lavoro che si è fatto è utile a
  qualcun altro, si può sempre depositare il proprio pacchetto sia come <strong>maintainer</strong>
  attraverso uno <strong>sponsor</strong> che come <strong>maintainer Debian</strong>.
  Vedere <url name="L'Angolo del Nuovo Manutentore Debian" id="&newmaint;"> per maggiori informazioni.

  <p>Non è necessario creare un nuovo pacchetto per diventare uno sviluppatore
  ufficiale Debian. Lo si può diventare anche semplicemente contribuendo alla
  manutenzione di pacchetti già esistenti. Ci sono molti pacchetti che 
  aspettano solo dei bravi responsabili (vedere <ref id="choose">).
  
  <sect id="helpme">Dove trovare aiuto

  <p>Prima di chiedere pubblicamente aiuto, si prega di consultare la
  documentazione.
  Questo comprende la documentazione in <file>/usr/share/doc/dpkg</file>,
  <file>/usr/share/doc/debian</file>, <file>&autotools-dev;</file>, nei file
  <file>/usr/share/doc/<var>package</var>/*</file> e le pagine di
  <prgn>man</prgn>/<prgn>info</prgn> di tutti i programmi citati in questo documento.
  Ulteriori informazioni sono disponibili su <url id="&nm-home;">.

  <p>Creare un piccolo pacchetto di test è un ottimo metodo per imparare i dettagli della pacchettizzazione.
  Analizzare dei pacchetti già esistenti e ben manutenuti, è invece, il metodo
  migliore per capire come creano i pacchetti le altre persone.

  <p>Se si ha una domanda a cui non si è trovata risposta né nella
  documentazione che nelle varie risorse web, si può chiedere nella mailing
  list dei mentori Debian, all'indirizzo <url id="http://lists.debian.org/debian-mentors/"
  name="debian-mentors@lists.debian.org">. Dei sviluppatori Debian esperti
  saranno lieti di aiutarvi, ma prima di porre una domanda è necessario leggere almeno parte della documentazione!

  <p>Vedere <url id="http://lists.debian.org/debian-mentors/"> per avere più
  informazioni a riguardo della mailing list.

  <p>Quando si ricevono delle segnalazioni di bug (si, proprio quelle!), si dovrà
  approfondire l'utilizzo del <url name="Sistema di tracciamento dei bug
  di Debian" id="http://www.debian.org/Bugs/"> e leggere la relativa
  documentazione, per essere in grado di gestire le segnalazioni in maniera
  efficiente. È fortemente consigliato leggere <url name="Developer's Reference, 5.8. 'Handling bugs'"
  id="http://www.debian.org/doc/manuals/developers-reference/pkgs.html#bug-handling">.

  <p>Se rimangono delle domande, si può chiedere nella mailing list degli
  sviluppatori Debian, all'indirizzo <url id="http://lists.debian.org/debian-devel/"
  name="debian-devel@lists.debian.org">. Vedere <url id="http://lists.debian.org/debian-devel/">
  per avere più informazioni a riguardo della mailing list.

  <p>Anche se tutto è andato per il meglio, è arrivato il momento di pregare.
  Perché? Perché in poche ore (o giorni) utenti da tutto il mondo cominceranno
  ad usare il vostro pacchetto, e se si è commesso qualche grave errore, si avrà
  la proprio email inondata da messaggi di molti utenti Debian arrabbiati... Si scherza ovviamente. :-)

  <p>Ci si deve rilassarsi ed essere pronti per le segnalazioni di bug, perché
  c'è molto lavoro prima che un pacchetto sia completamente conforme alle politiche
  di Debian (ancora una volta, si legga la <em>vera documentazione</em> per i dettagli). In bocca al lupo!

  <chapt id="first">Primi passi

  <p>Costruire il pacchetto.

  <sect id="choose">Scegliamo il programma

  <p>La prima cosa da fare, dopo quella di scegliere il programma per
  cui creare il pacchetto, è controllare se il pacchetto è già presente negli
  archivi della distribuzione, utilizzando <prgn>aptitude</prgn>. 

  <p>Si possono controllare le informazioni sui pacchetti anche nella 
  <url name="pagina di ricerca dei pacchetti" id="http://www.debian.org/distrib/packages"> e nel
  <url name="sistema di tracciamento dei bug di Debian" id="http://packages.qa.debian.org/common/index.html">.

  <p>Se il pacchetto esiste già, allora non rimane che installarlo! :-) Se
  invece divenisse orfano -- ovvero se il suo maintainer è configurato come
  "Debian QA Group", si può sempre prenderlo in carico. 
  
  <p>Si può consultare nel sito web Debian la <url name="lista dei pacchetti
  che hanno bisogno di un nuovo manutentore e dei futuri pacchetti Debian"
  id="http://www.debian.org/devel/wnpp/"> e gli
  <url name="ultimi aggiornamenti sui pacchetti da adottare e orfani" id="http://wnpp.debian.net/">.

  <p>Appena ci si sente in grado di adottare un pacchetto, bisogna prendere i
  sorgenti (con qualcosa tipo "<tt>apt-get source <var>pacchetto</var></tt>")
  ed esaminarli. Questo documento purtroppo non include tutte le informazioni
  che riguardano l'adozione dei pacchetti. Fortunatamente non sarà difficile
  capire come funziona il pacchetto dal momento che qualcuno avrà già
  effettuato la configurazione iniziale. Continua a leggere comunque, molti dei
  suggerimenti qui di seguito saranno ancora utili al caso.
  
  <p>Se il pacchetto è nuovo, e si pensa che sarebbe bello entrare a far parte
  di Debian, ecco come procedere:

  <list>
  <item>Prima di tutto bisogna capire se il programma funziona in modo
  corretto, e averlo provato per almeno un po' di tempo e dimostrarne
  l'utilità.

  <item>Bisogna controllare su <url name="lista dei pacchetti sui quali si lavora" id="http://www.debian.org/devel/wnpp/being_packaged">
  che nessun altro stia lavorando sullo stesso pacchetto. Se nessuno ci sta lavorando,
  si può segnalare un bug di tipo ITP (Intent To Package) allo pseudo-pacchetto <package>wnpp</package>
  usando il programma <prgn>reportbug</prgn>. Se qualcuno ci sta lavorando e si ritiene necessario si
  potrebbe contattare il maintainer. Altrimenti - si potrebbe trovare un altro programma
  interessante che non manutenuto.</item>

  <item>il programma <strong>deve avere una licenza</strong>. 
  
  <list>
  <item>I programmi nella sezione <tt>main</tt>, <strong>devono essere in accordo con le 
  Linee Guida per il Software Libero Debian (DFSG, Debian Free Software Guidelines)</strong> (vedere <url id="http://www.debian.org/social_contract#guidelines">)
  e <strong>non devono richiede nessun pacchetto che non sia presente nella sezione <tt>main</tt></strong>,
  per la compilazione o l'esecuzione, come previsto dalla policy di Debian.
  Questo è il caso preferito.</item>
  <item>I programmi nella sezione <tt>contrib</tt>, devono
  essere conformi alle DSFG, ma potrebbero richiedere, per la compilazione o
  l'esecuzione, un pacchetto che non è presente nella sezione main.</item>
  <item>I programmi nella sezione <tt>non-free</tt>, possono
  non essere conformi alle DSFG, ma <strong>devono poter
  essere distribuibili</strong>.</item>
  </list>

  Se non si è sicuri su quale sezione il pacchetto dovrebbe essere incluso, si
  può mandare il testo della licenza alla mailing list <url id="http://lists.debian.org/debian-legal/" name="debian-legal@lists.debian.org">
  e chiedere consigli.</item>

  <item>il programma <strong>non</strong> dovrebbe girare come setuid root, o meglio,
  non dovrebbe richiedere di essere setuid o setgid per nessun utente.</item>

  <item>il programma non dovrebbe essere un daemon, o qualcosa che debba essere installato
  nelle directory <file>*/sbin</file>, o aprire una porta come root.</item>

  <item>il programma dovrebbe essere in formato binario eseguibile,
  le librerie sono più difficili da gestire.</item>

  <item>il programma dovrebbe essere ben documentato e il suo codice
  facilmente comprensibile (ad es. non offuscato).</item>

  <item>si dovrebbe contattare l'autore o gli autori del programma per verificare che
  siano d'accordo con la sua pacchettizzazione.  È importante essere in grado di
  consultarsi con l'autore/i sul programma nel caso di problemi specifici del programma,
  per questo è meglio non provare a pacchettizzare programmi non più manutenuti.</item>

  </list>

  <p>Ovviamente queste sono solo misure di sicurezza, fatte per salvare il futuro maintainer
  dall'ira degli utenti se si commette qualche errore in qualche daemon setuid...
  Una volta acquisita esperienza nella pacchettizzazione, si riuscirà pure a creare quel
  tipo di pacchetti, ma anche lo sviluppatore più esperto consulta la mailing list <url id="http://lists.debian.org/debian-mentors/" name="debian-mentors@lists.debian">
  quando ha qualche dubbio. E i partecipanti saranno lieti di dare una mano.

  <p>Per maggiori informazioni, consulta la <url name="Guida di Riferimento per lo Sviluppatore" id="http://www.debian.org/doc/devel-manuals#devref">.
  
  <sect id="getit">Prendere il programma e provarlo

  <p>La prima cosa da fare è trovare e scaricare il codice sorgente del programma.
  Supponendo che si è recuperato il file dal sito web dell'autore. Generalmente il
  codice sorgente di programmi liberi per Unix e derivati sono in formato <prgn>tar</prgn>+<prgn>gzip</prgn>
  con estensione <file>.tar.gz</file>, oppure in formato <prgn>tar</prgn>+<prgn>bzip2</prgn>
  con estensione <file>.tar.bz2</file>.
  Di solito, questi file, contengono la sottodirectory dal nome
  <file><var>programma</var>-<var>versione</var></file> con tutti i
  sorgenti.

  <p>Se è presente un sistema di controllo di versione (VCS) come Git,
  Subversion o CVS, è possibile scaricare l'ultima versione del codice
  sorgente con "<tt>git clone</tt>", "<tt>svn co</tt>", o "<tt>cvs co</tt>"
  e comprimerlo in formato <prgn>tar</prgn>+<prgn>gzip</prgn> utilizzando
  l'opzione "<tt>--exclude-vcs</tt>".
  
  <p>Se il codice sorgente è in qualche altro formato di archiviazione
  (per esempio, con estensione <file>.Z</file> o <file>.zip</file><footnote>
  si può utilizzare il comando <prgn>file</prgn> per scoprire il formato di
  archiviazione</footnote>), scompattalo con i programmi appropriati, e
  comprimilo di nuovo.

  <p>A titolo di esempio, verrà utilizzato il programma <prgn>gentoo</prgn>, un gestore file per X basato
  su GTK+.<footnote>Osserva che il programma in questione è già stato pacchettizzato, e la versione corrente
  0.15.3 ha subito sostanziali modifiche dalla versione 0.9.12 menzionata nei seguenti esempi.</footnote>

  <p>È buona regola creare una sottodirectory nella home directory e nominarla <file>debian</file> o <file>deb</file>
  o qualsiasi altro nome appropriato (ad es. in questo caso <file>~/gentoo</file> andrebbe più che bene).
  Una volta scaricato l'archivio e scompattato (con il comando "<tt>tar xzf gentoo-0.9.12.tar.gz</tt>").
  Bisogna assicurarsi che non ci siano errori, per quanto in apparenza <em>irrilevanti</em>, perché
  potrebbero causare problemi nell'estrazione dell'archivio sul sistema di
  altre persone, alcuni strumenti di estrazione a volte ignorano queste
  anomalie. Nella console dovrebbe esserci quanto segue.

<example>
$ mkdir ~/gentoo ; cd ~/gentoo
$ wget http://<var>www.example.org</var>/gentoo-0.9.12.tar.gz
$ tar xvzf gentoo-0.9.12.tar.gz
$ ls -F
gentoo-0.9.12/                                                                                                                       
gentoo-0.9.12.tar.gz  
</example>

  <p>A questo punto si avrà un'altra sottodirectory, dal nome
  <file>gentoo-0.9.12</file>. Ci si sposti in questa directory e si legga
  <em>attentamente</em> la documentazione fornita. Di solito si avranno dei
  file come <file>README*</file>, <file>INSTALL*</file>, <file>*.lsm</file>
  o <file>*.html</file>. È necessario trovare istruzioni su come compilare
  e installare correttamente il programma (si potrebbe supporre di installare
  il programma nella directory <file>/usr/local/bin</file>, ma questo non è
  il comportamento corretto, tratteremo l'argomento più avanti <ref id="destdir">).

  <p>La procedura cambia da programma a programma, ma molti programmi recenti
  hanno uno script <prgn>./configure</prgn>> che configura i sorgenti del
  programma in modo da essere compilati nel sistema in uso. Dopo la configurazione
  (con il comando <prgn>./configure</prgn>), i programmi sono generalmente compilati con
  <tt>"make"</tt>. Alcuni supportano il comando "<tt>make check</tt>", che serve per
  eseguire dei controlli automatici. L'installazione nelle directory di destinazione
  viene fatta generalmente con "<tt>make install</tt>".
  
  <p>Adesso si provi a compilare ed eseguire il programma, assicurandosi che funzioni
  correttamente e niente sia andato male durante l'installazione o l'esecuzione.
  
  <p>Di solito per ripulire la directory di compilazione si usa il comando "<tt>make clean</tt>"
  (o meglio ancora "<tt>make distclean</tt>"). Talvolta c'è anche il comando
  "<tt>make uninstall</tt>" che serve a rimuovere tutti i file installati.

  <sect id="namever">Nome e versione del pacchetto

  <p>Si dovrebbe iniziare la fase di pacchettizzazione con la directory dei sorgenti completamente
  ripulita, o semplicemente partendo da una nuova estrazione dall'archivio dei sorgenti.

  <p>Per costruire correttamente il pacchetto, si deve convertire in minuscolo
  il nome del programma originale (se non lo fosse), e rinominare la directory
  dei sorgenti in <file><var>pacchetto</var>-<var>versione</var></file>.
  
  <p>Se il nome del programma è formato da più di una parola, si deve contrarlo in una
  sola parola, o abbreviarlo. Per esempio, il pacchetto del programma "John's little editor
  for X" potrebbe essere chiamato <package>johnledx</package>, o <package>jle4x</package>, o
  qualsiasi altra cosa attinente, che riesca a stare sotto un numero ragionevole di caratteri, ad esempio 20.

  <p>Bisogna controllare pure l'esatta versione del programma (che deve 
  essere inclusa nella versione del pacchetto). Se il programma non 
  usa una numerazione delle versioni tipo <tt>X.Y.Z</tt>, ma qualche tipo di
  data, si può utilizzare tale data come numero di versione, a condizione che
  la numerazione vada ad aumentare.  Anche se è meglio utilizzare lo stesso numero di versione usato dal
  programma, se il formato è <tt>09Oct23</tt> potrebbe essere necessario convertirlo nel formato <tt>YYYYMMDD</tt>,
  la data di prima quindi diventerebbe <tt>20091023</tt>, questo è utile per garantire il corretto
  ordine di aggiornamento con il programma <prgn>dpkg</prgn>. <footnote>La stringa della versione può essere
  confrontata con "<tt>dpkg --compare-versions <var>ver1</var> <var>op</var> <var>ver2</var></tt>".
  Vedere <manref name="dpkg" section="1"> manpage.</footnote>
  
  <p>Alcuni programmi non usano alcun tipo di numerazione, in questo caso si
  dovrebbe contattare l'autore del programma, per controllare se viene usato
  qualche altro metodo di revisione.

  <sect id="dh_make">La <em>debianizzazione</em> iniziale

  <p>Una delle prime cose da fare è impostare le variabili d'ambiente 
  <tt>$DEBEMAIL</tt> e <tt>$DEBFULLNAME</tt> visto che molti strumenti di
  gestione di Debian usano queste variabili per recuperare il nome e l'email da utilizzare nei pacchetti. Ecco come fare.

<example>
$ cat &gt;&gt;~/.bashrc &lt;&lt;EOF
DEBEMAIL=il.vostro.indirizzo.email@example.org
DEBFULLNAME="Nome Cognome"
EOF
</example>

  <p>Adesso si può iniziare la <em>debianizzazione</em> eseguendo il programma <prgn>dh_make</prgn> come segue:
  
<p><example>
$ . ~/.bashrc
$ cd ~/gentoo/gentoo-0.9.12
$ dh_make -f ../gentoo-0.9.12.tar.gz
</example>

  <p>Ovviamente, si deve sostituire il nome del file con il nome
  dell'archivio dei sorgenti originali.
  <footnote>Se i sorgenti originali forniscono la directory <file>debian</file>
  e il suo contenuto, si deve eseguire il comando <prgn>dh_make</prgn> con
  l'opzione <tt>--addmissing</tt>. Il nuovo formato dei sorgenti
  <tt>3.0 (quilt)</tt> è abbastanza maturo da non corrompere questi pacchetti.
  Potrebbe essere necessario aggiornare i contenuti forniti nei sorgenti
  originali per il pacchetto debian.</footnote>
  Vedere <manref name="dh_make" section="1"> per dettagli.

  <p>Verranno visualizzate alcune informazioni. Verrà chiesto che tipo
  di pacchetto creare. Gentoo è un singolo pacchetto binario
  - crea un solo binario, e quindi un solo file <file>.deb</file> - per cui
  si dovrà selezionare la prima opzione con il tasto "<tt>s</tt>",
  controllare le informazioni sullo schermo e confermare la scelta con
  "<tt><var>ENTER</var></tt>".
  <footnote>Ecco le varie opzioni: "<tt>s</tt>" che sta per "binario Singolo"
  (Single binary), "<tt>i</tt>" per "Indipendente dall'architettura"
  (Arch-Independent), "<tt>m</tt>" per "binario Multiplo" (Multiple binary), "<tt>l</tt>" per "Libreria" (Library), "<tt>k</tt>" per "modulo del Kernel"
  (Kernel module), "<tt>b</tt>" per "<package>cdbs</package>", "<tt>--kpatch</tt>" per "patch del Kernel".
  Questo documento si concentra sull'uso del pacchetto <package>debhelper</package> con il comando <prgn>dh</prgn>.
  Verrà trattato l'utilizzo del nuovo programma <prgn>dh</prgn> per i "binari Singoli" e tratta brevemente
  gli "Indipendenti dall'architettura" e i "binari Multipli". Il pacchetto
  <package>cdbs</package> offre un'infrastruttura di script alternativa al
  comando <prgn>dh</prgn> e non rientra nel tema di questo documento.</footnote>

  <p>Dopo l'esecuzione di <prgn>dh_make</prgn>, verrà fatta una copia
  dell'archivio originale del programma, come nome <file>gentoo_0.9.12.orig.tar.gz</file>,
  nella directory superiore, per consentire, più avanti, la creazione di un pacchetto Debian sorgente
  non-nativo con il <file>debian.tar.gz</file>.

<p><example>
$ cd ~/gentoo ; ls -F
gentoo-0.9.12/                                                                                                                       
gentoo-0.9.12.tar.gz                                                                                                                 
gentoo_0.9.12.orig.tar.gz 
</example>

  <p>Si presti attenzione a 2 caratteristiche presenti nel nome del file <file>gentoo_0.9.12.orig.tar.gz</file>:
  <list>
  <item>Il nome del pacchetto e la versione sono separati da "<tt>_</tt>" (underscore).
  <item>C'è <file>.orig</file> prima di <file>.tar.gz</file> .
  </list>

  <p>Si dovrebbe aver notato che nella sottodirectory dei sorgenti
  <file>debian</file> sono stati creati molti modelli di file. Questo verrà trattato in
  <ref id="dreq"> e <ref id="dother">.  Dovreste aver capito che la pacchettizzazione non è un processo automatico.
  È necessario modificare il sorgente originale per Debian come descritto in
  <ref id="modify">. Dopo tutti questi passaggi, è necessario creare i pacchetti Debian in maniera appropriata
  come descritto in <ref id="build">, controllarli come descritto in <ref id="checkit">, e
  caricarli come descritto in <ref id="upload">.
  Verranno approfonditi tutti questi passaggi.

  <p>Ancora una volta, visto che si è alle prime armi come maintainer non è
  consigliato creare pacchetti complessi, ad esempio:
  <list>
  <item>pacchetti binari multipli,
  <item>pacchetti di libreria,
  <item>pacchetti di moduli del kernel,
  <item>pacchetti di patch del kernel,
  <item>pacchetti i cui sorgenti non sono in formato <tt>tar.gz.</tt> o
     <tt>tar.bz2</tt>, oppure
  <item>l'archivio dei sorgenti ha contenuti non distribuibili.
  </list>
  Non è difficile, ma richiede un po' più di conoscenze, per cui non
  ne parleremo in questo documento.

  <p>Se accidentalmente viene cancellato qualche modello di file mentre ci
  si lavora, è possibile recuperarlo eseguendo <prgn>dh_make</prgn> con
  l'opzione <tt>--addmissing</tt> nella directory già
  <em>debianizzata</em>.

  <p>L'aggiornamento di un pacchetto già esistente può diventare complicato, perché è
  possibile che si siano usate vecchie tecniche di pacchettizzazione. Per adesso, è consigliabile,
  concentrarsi sulla creazione di nuovi pacchetti per imparare le basi. Si tornerà ad approfondire l'argomento più avanti su <ref id="update">.

  <chapt id="modify">Modificare i sorgenti

  <p>Non c'è spazio qui per approfondire <em>tutti</em> i dettagli su come
  modificare i sorgenti originali, ma verranno trattati alcuni passaggi
  fondamentali e le problematiche più comuni.

  <sect id="quiltrc">Configurare <prgn>quilt</prgn>

  <p>Il programma <prgn>quilt</prgn> permette di registrare le modiche al
  sorgente per i pacchetti Debian. Si imposti <file>~/.quilrc</file> come
  segue.

<example>
$ cat &gt;&gt;~/.quiltrc &lt;&lt;EOF
d=.
while [ ! -d "$d/debian" -a `readlink -e $d` != / ]; do
    d="$d/.."
done
if [ -d "$d/debian" ]; then
    export QUILT_PATCHES=debian/patches
    if ! [ -d $d/debian/patches ]; then mkdir $d/debian/patches; fi
fi
QUILT_PATCH_OPTS="--unified-reject-files"
QUILT_DIFF_ARGS="-p ab --no-timestamps --no-index --color=auto"
QUILT_REFRESH_ARGS="-p ab --no-timestamps --no-index"
QUILT_COLORS="diff_hdr=1;32:diff_add=1;34:diff_rem=1;31:diff_hunk=1;33:\
diff_ctx=35:diff_cctx=33"
EOF
</example>

  <p>Per l'utilizzo di <prgn>quilt</prgn> vedere <manref name="quilt" section="1"> e
  <file>/usr/share/doc/quilt/quilt.html</file>.

  <sect id="fixupstream">Correggere i bug nel sorgente originale

  <p>Si supponga di trovare un errore, nel file <file>Makefile</file> distribuito con il programma originale, ad esempio la stringa
  "<tt>install: gentoo</tt>" avrebbe dovuto essere
  "<tt>install: gentoo-target</tt>".

<example>
install: gentoo
        install ./gentoo $(BIN)
        install icons/* $(ICONS)
        install gentoorc-example $(HOME)/.gentoorc
</example>

  <p>Si può correggere questo errore e registrarlo, con il comando
  <prgn>quilt</prgn> utilizzando come file <file>fix-gentoo-target.patch</file>.
  <footnote>La directory <file>debian/patches</file> dovrebbe essere creata se
  si esegue <prgn>dh_make</prgn>, come descritto prima. Questo esempio crea la
  directory nel caso in cui si stia aggiornando un pacchetto esistente.</footnote>

<example>
$ mkdir debian/patches
$ quilt new fix-gentoo-target.patch
$ quilt add Makefile
</example>

  Si modifichi il file <file>Makefile</file> come segue.

<example>
install: gentoo-target
        install ./gentoo $(BIN)
        install icons/* $(ICONS)
        install gentoorc-example $(HOME)/.gentoorc
</example>

  <p>Adesso bisogna chiedere a quilt di aggiornare e creare la patch <file>debian/patches/fix-gentoo-target.patch</file> e di aggiungere una descrizione.

<example>
$ quilt refresh
$ quilt header -e
... describe patch
</example>

  <sect id="destdir">Installazione in una sotto-directory

  <p>Normalmente, i programmi si auto-installano in sottodirectory di
  <file>/usr/local</file>. I pacchetti Debian invece non devono usare quella directory,
  dal momento che è riservata agli amministratori (o utenti) del sistema per uso privato,
  ma dovrebbero usare le directory di sistema come la sottodirectory <file>/usr/bin</file>,
  conformi allo Standard di Gerarchia dei Filesystem
  (<url name="FHS" id="http://www.debian.org/doc/packaging-manuals/fhs/fhs-2.3.html">,
  <file>/usr/share/doc/debian-policy/fhs/fhs-2.3.html</file>).
  
  <p>Normalmente, <manref name="make" section="1"> è usato per costruire
  automaticamente il programma, invece l'esecuzione di "<tt>make install</tt>" installa il programma direttamente nella
  destinazione prestabilita. Questa è configurata nella sezione <tt>install</tt>
  del file <file>Makefile</file>. Per far in modo che Debian fornisca dei
  pacchetti binari, il sistema di compilazione installa i programmi in
  un'immagine dell'albero dei file, creata dentro una directory temporanea, anziché nella destinazione prestabilita.

  <p>
  Le 2 differenze tra (1) la normale installazione di un programma e
  (2) l'installazione tramite il sistema di pacchettizzazione Debian
  può essere affrontato in modo trasparente dal pacchetto <package>debhelper</package>,
  attraverso i comandi <prgn>dh_auto_configure</prgn> e <prgn>dh_auto_install</prgn>,
  se le seguenti condizioni sono soddisfatte.
  <list>
  <item>Il file <file>Makefile</file> è conforme alle convenzioni GNU
  supportando la variabile <tt>$(DESTDIR)</tt>
  (<file>/usr/share/doc/gnu-standards/standards.html#Makefile-Conventions</file>).
  <item>Il sorgente è conforme allo Standard di Gerarchia dei Filesystem (FHS)
  </list>
  <p>I programmi che usano GNU <prgn>autoconf</prgn> sono <em>automaticamente</em>
  conformi alle convenzioni GNU e la loro pacchettizzazione è quasi <em>automatica</em>. Con questi ed altri
  accorgimenti, si stima che il pacchetto <package>debhelper</package>
  funzioni sul quasi il 90% dei pacchetti senza apportare pesanti modifiche al loro
  sistema di compilazione. La pacchettizzazione non è così complicata come
  potrebbe sembrare.
  
  <p>Se è necessario apportare modifiche al file <file>Makefile</file>, ci si
  dovrebbe assicurare che supporti la variabile <tt>$(DESTDIR)</tt>. La
  variabile <tt>$(DESTDIR)</tt> non è impostata nel <file>Makefile</file>, è
  anteposta ad ogni percorso del file, utilizzato per l'installazione del programma.
  Lo script di pacchettizzazione imposta la variabile <tt>$(DESTDIR)</tt> in una directory temporanea.

  <p>La directory temporanea, utilizzata dal comando
  <prgn>dh_auto_install</prgn>, è <file>debian/<var>pacchetto</var></file>
  per i pacchetti binari singoli.
  <footnote>Per i pacchetti binari multipli, il comando <prgn>dh_auto_install</prgn>
  utilizza la directory temporanea <file>debian/tmp</file>, mentre il comando
  <prgn>dh_install</prgn>, con l'aiuto dei file
  <file>debian/<var>pacchetto-1</var>.install</file> e
  <file>debian/<var>pacchetto-2</var>.install</file> suddivide il
  contenuto di <file>debian/tmp</file> nelle directory temporanee
  <file>debian/<var>pacchetto-1</var></file> e <file>debian/<var>pacchetto-2</var></file>
  per creare pacchetti binari multipli <file>*.deb</file>.</footnote>
  Tutto quello contenuto nella directory temporanea verrà installato sul
  sistema dell'utente, appena si installa il pacchetto, l'unica differenza è
  che <prgn>dpkg</prgn> installerà i file nella radice del file system.

  <p>Bisogna tenere in considerazione che, anche se il programma viene installato in
  <file>debian/<var>pacchetto</var></file>, deve comunque rispettare i
  percorsi convenzionali, una volta posizionato nella radice, ad es. quando si
  installa un pacchetto <file>.deb</file>. Per questo motivo non bisogna
  consentire al sistema di compilazione di utilizzare stringhe impostate
  manualmente come costanti, ad esempio <tt>/home/me/deb/<var>package</var>-<var>version</var>/usr/share/<var>pacchetto</var></tt>
  nel file del pacchetto.

  <p>Notare che se il programma che si intende pacchettizzare, utilizza GNU
  <manref name="automake" section="1"> e/o <manref name="autoconf" section="1">,
  i sorgenti includeranno i file <file>Makefile.am</file> e/o <file>Makefile.in</file>,
  a cui si dovranno apportare modificare se si vuole cambiare il file
  <file>Makefile</file>. Questo perché ogni esecuzione di <prgn>automake</prgn>
  provoca la riscrittura del file <file>Makefile.in</file> con informazioni generate
  a partire dal file <file>Makefile.am</file>, e ogni esecuzione di "<prgn>./configure</prgn>"
  farà lo stesso con il corrispondente <file>Makefile</file>, con i dati ricavati dal
  file <file>Makefile.in</file>. Modificare i file <file>Makefile.am</file> richiede
  qualche conoscenza di <prgn>automake</prgn>, per più informazioni si può
  consultare "<tt>info automake</tt>", mentre la modifica del file
  <file>Makefile.in</file>, è abbastanza simile alla modifica del file
  <file>Makefile</file>, è necessario solamente fare attenzione alle
  variabili, ad es. qualunque stringa tra i simboli "<tt>@</tt>", come
  <tt>@CFLAGS@</tt> o <tt>@LN_S@</tt>, che saranno sostituite ad ogni
  esecuzione di "<prgn>./configure</prgn>". Prima di procedere è vivamente
  consigliata la lettura di <file>&autotools-dev;</file>.

  <p>Questa è la parte più importante del <file>Makefile</file> del pacchetto
  <package>gentoo</package>
  <footnote>Questo è solo un esempio che mostra come
  un <file>Makefile</file> dovrebbe apparire. Se il <file>Makefile</file> è
  creato dal comando <prgn>./configure</prgn>, il modo giusto per correggere
  il <file>Makefile</file> è eseguire il comando <prgn>./configure</prgn> dal
  comando <prgn>dh_auto_configure</prgn> includendo come opzione
  predefinita <tt>--prefix=/usr</tt>.</footnote>:

<example>
# Where to put binary on 'make install'?
BIN     = /usr/local/bin

# Where to put icons on 'make install'?
ICONS   = /usr/local/share/gentoo
</example>

  <p>Da notare che i file verranno installati in <file>/usr/local</file>.
  Si modifichino questi percorsi con:

<example>
# Where to put binary on 'make install'?
BIN     = $(DESTDIR)/usr/bin

# Where to put icons on 'make install'?
ICONS   = $(DESTDIR)/usr/share/gentoo
</example>

  <p>Ma perché in questa directory e non altrove? Perché i
  pacchetti Debian non installano mai dei file nella directory
  <file>/usr/local</file> -- questo percorso è riservato all'amministratore
  di sistema. Questi file, invece, nei sistemi Debian vanno posizionati in <file>/usr</file>.

  <p>L'esatta posizione dei binari, delle icone, della documentazione, ecc. è
  specificata nella Gerarchia dei Filesystem
  (vedere <file>/usr/share/doc/debian-policy/fhs/</file>). Si consiglia di
  sfogliarlo e leggere le sezioni riguardanti il pacchetto interessato.

  <p>Si dovrà installare, quindi, il binario in <file>/usr/bin</file> anziché in <file>/usr/local/bin</file>,
  la pagina di manuale in <file>/usr/share/man/man1</file> anziché <file>/usr/local/man/man1</file>, ecc.
  Da notare che nel <file>Makefile</file> del pacchetto <package>gentoo</package> non è
  presente una pagina di manuale, ma dal momento che la policy di Debian prevede che
  ogni programma ne abbia una, ne verrà creata una e sarà installata in <file>/usr/share/man/man1</file>.

  <p>Alcuni programmi non usano le variabili nel <file>Makefile</file> per
  definire dei percorsi come questi. Questo indica che potrebbe essere necessario
  modificare qualche sorgente in C, per fargli usare il percorso giusto.
  Ma dove cercarlo, e per farci cosa? Lo si può scoprire eseguento questo:

<example>
$ grep -nr -e 'usr/local/lib' --include='*.[c|h]' .
</example>

  <p><prgn>grep</prgn> cercherà tutte le corrispondenze in maniera ricorsiva attraverso
  tutto l'albero dei sorgenti, indicando il nome del file e il numero della riga.

  <p>Si modifichino quei file in quelle righe, sostituendo <tt>/usr/local/lib</tt> con <tt>/usr/lib</tt>.
<example>
$ vim '+argdo %s/usr\/local\/lib\//usr\/lib\//gce|update' +q \
      $(find . -type f -name '*.[c|h]')
</example>

  <p>Si faccia attenzione a non pasticciare il resto dei sorgenti! :-)

  <p>A questo punto si dovrebbe trovare il percorso di destinazione per l'installazione 
  (si cerchi la riga che inizia con <tt>install:</tt>, di solito è quella corretta)
  e modificare tutti i riferimenti alle directory diverse da quelle definite nel <file>Makefile</file>.

  <p>Dopo aver corretto il bug, il percorso di destinazione per l'installazione del pacchetto <package>gentoo</package> riporterà:

<example>
install: gentoo-target
        install ./gentoo $(BIN)
        install icons/* $(ICONS)
        install gentoorc-example $(HOME)/.gentoorc
</example>

  <p>Si può correggere e registrare la modifica con il comando <prgn>quilt</prgn> salvandola come <file>debian/patches/install.patch</file>.

<example>
$ quilt new install.patch
$ quilt add Makefile
</example>

  <p>Per il pacchetto debian si modifichi come segue, utilizzando un editor:
<example>
install: gentoo-target
        install -d $(BIN) $(ICONS) $(DESTDIR)/etc
        install ./gentoo $(BIN)
        install -m644 icons/* $(ICONS)
        install -m644 gentoorc-example $(DESTDIR)/etc/gentoorc
</example>

  <p>Si sarà sicuramente notato che c'è adesso un comando "<tt>install -d</tt>"
  prima degli altri, nella regola. Il <file>Makefile</file> originale non ce l'ha
  perchè generalmente usa <tt>/usr/local/bin</tt> e altre directory che già esistono
  nel sistema su cui si esegue "<tt>make install</tt>". Tuttavia, dal momento
  che verrà installato nella nostra directory vuota (o anche inesistente), si
  dovrà creare ogni singola directory.

  <p>È possibile anche aggiungere altre cose alla fine della regola, come
  l'installazione di documentazione aggiuntiva che gli autori originali
  talvolta omettono:

<example>
        install -d $(DESTDIR)/usr/share/doc/gentoo/html
        cp -a docs/* $(DESTDIR)/usr/share/doc/gentoo/html
</example>

  <p>Dopo un'attenta analisi, se tutto è andato bene, si può aggiornare con quilt la patch creando il file <file>debian/patches/install.patch</file> ed aggiungendogli una descrizione.

<example>
$ quilt refresh
$ quilt header -e
... describe patch
</example>

  <p>Adesso si avranno una serie di patch.
  <enumlist>
    <item>Correzzione del bug riguardante il sorgente originale: <file>debian/patches/fix-gentoo-target.patch</file> 
    <item>Modifica specifica per il sistema di pacchettizzazione Debian: <file>debian/patches/install.patch</file>
  </enumlist>

  <p>Ogni volta che si apportano delle modifiche che non sono specificatamente 
  legate alla pacchettizzazione Debian, come <file>debian/patches/fix-gentoo-target.patch</file>,
  bisogna assicurarsi di inviare le modifiche al manutentore originale,
  in modo che possano essere incluse nella prossima versione del programma e
  possano beneficiarne altri utenti.
  Ci si ricordi, di creare delle correzioni portabili, ovvero di non renderle specifiche per Debian
  o Linux (o altri Unix!), prima di inviarle. Questo renderà più semplice applicare le correzioni.
  
  <p>Da notare che non è necessario inviare i file <file>debian/*</file> all'autore originale.

  <sect id="difflibs">Distinguere le librerie

  <p>C'è un altro problema comune: le librerie sono spesso diverse 
  da piattaforma a piattaforma. Per esempio, il <file>Makefile</file> può contenere
  un riferimento a una libreria che non esiste nei sistemi Debian.
  In tal caso occorre cambiare il riferimento ad una libreria che serve allo
  stesso scopo e che esista in Debian.
  
  <p>Così, se c'è una riga nel <file>Makefile</file> del programma (o nel <file>Makefile.in</file>)
  che dice qualcosa tipo (e il programma non compila) <footnote><p>L'autore si rende conto che questo
  non è il miglior esempio, considerando che con il pacchetto <package>libncurses</package>
  viene fornito il link simbolico <file>libcurses.so</file>, ma non è riuscito a
  trovare di meglio. Sono molto graditi dei suggerimenti :-)</footnote>:

<example>
LIBS = -lcurses -lsomething -lsomethingelse
</example>

  <p>Si cambi <tt>curses</tt> con <tt>ncurses</tt> e si salvi la correzione come <file>debian/patches/ncurse.patch</file>.

<example>
$ quilt new ncurse.patch
$ quilt add Makefile
$ sed -i -e "s/-lcurses/-lncurses/g" Makefile
$ quilt refresh
$ quilt header -e
... describe patch
</example>

  <chapt id="dreq">File richiesti nella directory <file>debian</file>

  <p>C'è una nuova sottodirectory all'interno della cartella contenente i sorgenti del programma ed
  è chiamata <file>debian</file>. All'interno di questa vi sono una serie di file che dovranno essere
  modificati per personalizzare il comportamento del pacchetto.
  I più importanti fra tutti questi sono i file <file>control</file>, <file>changelog</file>, <file>copyright</file>
  e <file>rules</file>, che vengono richiesti per tutti i pacchetti.

  <sect id="control">Il file <file>control</file>

  <p>Questo file contiene diversi valori che <prgn/dpkg/, <prgn/dselect/, 
  <prgn/apt-get/, <prgn/apt-cache/, <prgn/aptitude/, ed altri strumenti utilizzeranno per
  gestire il pacchetto. Il tutto è definito nel 
  <url name="Manuale delle policy di Debian, 5 'File di controllo e loro campi'" id="http://www.debian.org/doc/debian-policy/ch-controlfields.html">.

  <p>Questo è il file di controllo che <prgn>dh_make</prgn> crea:

<example>
 1 Source: gentoo
 2 Section: unknown
 3 Priority: extra
 4 Maintainer: Josip Rodin &lt;joy-mg@debian.org&gt;
 5 Build-Depends: debhelper (>= 7.0.50~)
 6 Standards-Version: 3.8.4
 7 Homepage: &lt;insert the upstream URL, if relevant&gt;
 8
 9 Package: gentoo
10 Architecture: any
11 Depends: ${shlibs:Depends}, ${misc:Depends}
12 Description: &lt;insert up to 60 chars description&gt;
13  &lt;insert long description, indented with spaces&gt;
</example>
  (Sono stati aggiunti i numeri di riga.)

  <p>Le righe 1-6 contengono informazioni di controllo per il pacchetto sorgente.

  <p>La riga 1 contiene il nome del pacchetto sorgente.

  <p>La riga 2 indica la sezione della distribuzion in cui il pacchetto sorgente dovrà andare. 

  <p>Come si sarà notato, Debian è diviso in sezioni: <tt>main</tt> (il software
  libero), <tt>non-free</tt> (il software non propriamente libero) e <tt>contrib</tt> (il software
  libero che dipende da software non libero). Sotto queste esistono delle
  sottosezioni che descrivono brevemente quali pacchetti vi si possono trovare.
  Quindi si hanno le sezioni <tt>admin</tt> per i programmi dell'amministratore, <tt>base</tt> per gli
  strumenti di base, <tt>devel</tt> per gli strumenti di sviluppo, <tt>doc</tt> per la documentazione,
  <tt>libs</tt> per le librerie, <tt>mail</tt> per client di posta e demoni associati, <tt>net</tt> per
  applicazioni e demoni di rete, <tt>x11</tt> per programmi X11 che non appartengono alle altre
  categorie, e tanti altri.
  Si legga
  <url name="Manuale delle policy di Debian, 2.4 'Sezioni'" id="http://www.debian.org/doc/debian-policy/ch-archive.html#s-subsections"> e
  <url name="List of sections in 'sid'" id="http://packages.debian.org/unstable/">
  per maggiori informazioni.

  <p>Si può quindi cambiare il valore alla seconda riga in x11. (Il prefisso <tt>main/</tt> è implicito e può
  essere omesso.)

  <p>La riga numero 3 indica quanto sia importante per l'utente installare questo pacchetto.
  Si legga <url name="Manuale delle policy di Debian, 2.5 'Priorità'" id="http://www.debian.org/doc/debian-policy/ch-archive.html#s-priorities">
  per maggiori informazioni.
  <list>
  <item> La priorità <tt>optional</tt> solitamente viene usata per i nuovi pacchetti che non vanno in conflitto con altri pacchetti con priorità <tt>required</tt>, <tt>important</tt> o <tt>standard</tt>.
  <item> La priorità <tt>extra</tt> solitamente viene usata per i nuovi pacchetti, che andrebbero in conflitto con altri pacchetti che non hanno questa priorità
  </list>

  <p>Le sezioni e le priorità vengono solitamente utilizzate da interfacce come <prgn/aptitude/ in cui
  i pacchetti vengono suddivisi e vengono selezionati quelli predefiniti. Una volta caricato il pacchetto in
  Debian, il valore di ciascuno di questi due campi può essere sovrascritto dai manutentori dell'archivio, in
  tal caso si verrà avvertiti via mail.
  
  <p>Dal momento che il pacchetto trattato ha una priorità normale e non va in conflitto con altri,
  si cambierà la priorità a "<tt>optional</tt>".

  <p>La riga 4 indica il nome e l'indirizzo email del manutentore. Ci si assicuri che
  questo campo includa una testata "<tt>To: </tt>" valida per un indirizzo mail, perché una volta
  caricato il pacchetto, il sistema di rilevazione bug la userà per inviare le mail contenenti i bug.
  Si eviti di utilizzare virgole, 'e' commerciali e parentesi.
  
  <p>La quinta linea include la lista dei pacchetti richiesti per costruire il
  pacchetto, ad es. il campo <tt>Build-Depends:</tt>. Si può, inoltre, avere
  una riga contenente il campo <tt>Build-Depends-Indep:</tt>. (vedere il
  <url name="Manuale delle policy di Debian, 7.7 'Relazione tra pacchetti sorgenti e binari - Build-Depends, Build-Depends-Indep, Build-Conflicts, Build-Conflicts-Indep'" id="http://www.debian.org/doc/debian-policy/ch--relationships.html#s-sourcebinarydeps">).
  Alcuni pacchetti come <package>gcc</package> e <package>make</package> sono
  richiesti implicitamente, dal pacchetto <package>build-essential</package>.
  Se si ha la necessità di avere altri strumenti per costruire il pacchetto,
  questi devono essere aggiunti negli appositi campi. I campi multipli sono
  separati con le virgole; si legga una spiegazione sulle dipendenze binarie per scoprirne di più sulla sintassi di
  queste righe.
  
  <list>
  <item>Per tutti i pacchetti creati utilizzando il comando <prgn>dh</prgn>
  nel file <file>debian/rules</file>, è necessario avere "<tt>debhelper (>=7.0.50~)</tt>"
  nel campo <tt>Build-Depends:</tt>, per aderire alle policy di Debian che
  richiedono un DA_CONTROLLARE <tt>pulito</tt>.

DA_CONTROLLARE
  <item>I sorgenti dei pacchetti che hanno qualche pacchetto binario con
  il campo "<tt>Architecture: any</tt>", devono essere ricompilati dal sistema
  di auto-costruzione. 
  



  <item>For source packages which have binary packages only with 
  "<tt>Architecture: all</tt>", the <tt>Build-Depends-Indep</tt> field may list
  all the required packages unless they are already listed in the
  <tt>Build-Depends</tt> field to satisfy the Debian Policy requirement for the
  <tt>clean</tt> target.
  </list>
  
  
  Si possono avere anche altri campi in questa riga,
  come <tt>Build-Depends-Indep</tt>, <tt>Build-Conflicts</tt> e altri.
  Si legga <url name="Manuale delle policy di Debian, 7.7 'relazioni stra i pacchetti sorgente ed i pacchetti binari - Build-Depends, Build-Depends-Indep, Build-Conflicts, Build-Conflicts-Indep'" id="http://www.debian.org/doc/debian-policy/ch-relationships.html#s-sourcebinarydeps"> per una guida e <ref id="completebuild">, e "ref id="porterbuild"" per le reali implicazioni.

   <p>Per scoprire di quali pacchetti si ha bisogno per la compilazione si può eseguire il comando:
<example>
$ dpkg-depcheck -d ./configure
</example>

  <p>Per scoprire manualmene le esatte dipendenze per
  <prgn><var>/usr/bin/foo</var></prgn>, si esegue

<example>
$ objdump -p <var>/usr/bin/foo</var> | grep NEEDED
</example>
  e per ogni libreria elencata, ad esempio, <prgn>libfoo.so.6</prgn>, si esegue
<example>
$ dpkg -S libfoo.so.6 
</example>
  A questo punto si indica la versione <tt>-dev</tt> di ogni pacchetto 
  come voce <tt>Build-Depends</tt>. Se si usa <prgn>ldd</prgn> per questo
  scopo, verranno considerate anche le dipendenze indirette, il che potrà
  portare ad avere un numero eccessivo di dipendeze. 

  <p>Il pacchetto <package>gentoo</package> richiede anche <package/xlibs-dev/,
  <package/libgtk1.2-dev/ e <package/libglib1.2-dev/ per poter essere costruito, quindi
  tali dipendenze si aggiungeranno subito dopo <package/debhelper/.

  <p>La riga 6 indica la versione degli standard delle policy Debian che il pacchetto segue,
  corrispondenti alle versioni del <url name="Manuale delle policy Debian"
  id="http://www.debian.org/doc/devel-manuals#policy"> che si sono seguite per
  costruire il pacchetto.

  <p>Nella riga 7 si può inserire l'URL della pagina da cui prelevare il pacchetto originale.

  <p>La riga 9 indica il nome del pacchetto binario. Questo è normalmente lo stesso nome
  del pacchetto sorgente, ma non deve essere necessariamente
  così.
  
  <p>Alla riga 10 viene descritta l'architettura CPU per cui può essere compilato il pacchetto
  binario. Si lascerà "<tt>any</tt>" perchè <manref name="dpkg-gencontrol"
  section="1"> riempià questo campo con un valore adeguato per ciascuna macchina in cui
  il pacchetto viene compilato.

  <p>Se il pacchetto è indipendente dall'architettura della CPE
  (per esempio, uno script shell o Perl, o un documento), si cambi questo valore in
  "<tt>all</tt>", e si legga seguentemente in <ref id="rules"> riguardo l'utilizzo della regola <tt>binary-indep</tt>
  al posto di <tt>binary-arch</tt> per costruire il pacchetto.

  <p>La riga 11 mostra una delle caratteristiche più potenti del sistema di pacchettizzazione Debian.
  I pacchetti infatti possono relazionarsi tra di loro in differenti modi. A parte la già nota
  <tt>Depends:</tt>, altre relazioni sono <tt>Recommends:</tt>, <tt>Suggests:</tt>,
  <tt>Pre-Depends:</tt>, <tt>Conflicts:</tt>, <tt>Provides:</tt>, e <tt>Replaces:</tt>.

  <p>Gli strumenti di gestione dei pacchetti solitamente si comportano allo stesso modo quando si occupano
  di tali relazioni; in caso contrario, il comportamento verrà spiegato.
  (si legga <manref name="dpkg" section="8">, <manref name="dselect" section="8">,
  <manref name="apt" section="8">, <manref name="aptitude" section="1"> ecc.)

  <p>Questo è il significato delle relazioni:

  <p><list>
  <item><tt>Depends:</tt>
  <p>Il pacchetto non verrà installato a meno che tutti i pacchetti da cui dipende
  vengono installati. Si usi questa relazione se il programma non funzionerà assolutamente
  (o sarà praticamente inutilizzabile) a meno della presenza di particolari pacchetti.</item>

  <item><tt>Recommends:</tt>
  <p>Si usi questa relazione per pacchetti che non sono strettamente necessari ma sono
  solitamente utilizzati dal programma. Quando un utente installa il programma, tutte le interfacce
  probabilmente chiederanno l'installazione dei pacchetti raccomandati.
  <prgn>aptitude</prgn> e <prgn>apt-get</prgn> installano i pacchetti raccomandati
  insieme al pacchetto principale (ma l'utente può disabiltare questo comportamento di default).
  <prgn>dpkg</prgn> ignorerà questo campo.
  </item>

  <item><tt>Suggests:</tt>
  <p>Si usi questa relazione per pacchetti che funzionano bene con il programma ma non sono
  per niente necessari.
  Quando un utente installa il programma, tutte le interfacce probabilmente chiederanno l'installazione dei
  pacchetti consigliati.  
  <prgn>aptitude</prgn> può essere configurato per installare i pacchetti consigliati insieme
  al pacchetto proncipale ma questo non è il comportamento di default.
  <prgn>dpkg</prgn> ed <prgn>apt-get</prgn> ignoreranno questo campo.
  </item>


  <item><tt>Pre-Depends:</tt>
  <p>Questa relazione è più forte di <tt>Depends:</tt>. Il pacchetto non verrà installato
  a meno che i pacchetti da cui pre-dipende sono stati installati e <em>correttamente
  configurati</em>. Si usi questa relazione con <em>molta</em> parsimonia e solo dopo averne
  discusso sulla mailing list <url id="http://lists.debian.org/debian-devel/" name="debian-devel@lists.debian.org"> . Leggasi: non utilizzarla
  affatto. :-)</item>

  <item><tt>Conflicts:</tt>
  <p>Il pacchetto non verrà installato a meno che tuttti i pacchetti con i quali va in conflitto
  siano rimossi. Si usi questa relazione se il programma non funzionerà o causerà gravi problemi se
  un certo pacchetto è prsente.</item>

  <item><tt>Provides:</tt>
  <p>Per alcuni tipi di pacchetto in cui vi sono molteplici alternaive sono stati
  definiti dei nomi virtuali. Si può trovare la lista completa nel file
  <file>/usr/share/doc/debian-policy/virtual-package-names-list.txt.gz</file>.
  Si usi questa relazione se il programma fornisce la funzione di un pacchetto virtuale
  esistente.</item>

  <item><tt>Replaces:</tt>
  <p>Si usi questa relazione quando il programma rimpiazza i file di un altro pacchetto, o
  lo rimpiazza completamente (utilizzato in congiunzione con <tt>Conflicts:</tt>).
  I file dei pacchetti indicati saranno sovrascritti con i file del nuovo 
  pacchetto.
  </item>
  </list>

  <p>Tutti i campi qui descritti hanno una sintassi uniforme. Sono costituiti da una lista
  contenente i nomi dei pacchetti separati da virgole. Questi possono essere anche
  costituiti da liste di nomi di pacchetto alternativi, separati da barre verticali "<tt>|</tt>" (simboli pipe).

  <p>I campi possono limitare la loro applicabilità a particolari versioni di
  ogni pacchetto indicato. Queste versioni sono elencate tra parentesi dopo ogni
  singolo nome di pacchetto, e dovrebbero contenere una relazione presa dalla lista qui sotto
  seguita dal numero di versione. Le relazioni permesse sono:
  <tt>&lt;&lt;</tt>, <tt>&lt;=</tt>, <tt>=</tt>, <tt>&gt;=</tt> e
  <tt>&gt;&gt;</tt> per strettamente inferiore, inferiore o uguale, esattamente uguale,
  superiore o uguale e strettamente superiore, rispettivamente. Per esempio,

<example>
Depends: foo (&gt;= 1.2), libbar1 (= 1.3.4)
Conflicts: baz
Recommends: libbaz4 (&gt;&gt; 4.0.7)
Suggests: quux
Replaces: quux (&lt;&lt; 5), quux-foo (&lt;= 7.6)
</example>
  
  <p>L'ultima caratteristica che si deve conoscere riguarda <tt>${shlibs:Depends}</tt>,
  <tt>${perl:Depends}</tt>, <tt>${misc:Depends}</tt>, ecc. Queste voci sono
  sostituite dalle liste generate da altri componenti di <package>debhelper</package>
  quando il comando <manref name="dh_gencontrol" section="1"> viene
  eseguito.

  <p><manref name="dh_shlibdeps" section="1"> farà la scansione alla ricerca di binari
  e librerie per determinare le loro dipendenze da altre librerie e individuare in quali
  pacchetti si trovano, come <package>libc6</package> o
  <package>xlib6g</package>, dopo che il pacchetto sia stato costruito ed installato
  nella directory temporanea. Questa lista di dipendenze di libreria condivise è utilizzata
  per <tt>${shlibs:Depends}</tt>.

  <p>La lista di pacchetti generata da <manref name="dh_perl" section="1"> viene
  utilizzata per <tt>${perl:Depends}</tt>.

  <p>Alcuni comandi <package>debhelper</package> possono far si che il pacchetto generato
  abbia bisogno di dipendere da altri pacchetti. Questra lista di pacchetti richiesti è
  utilizzata per <tt>${misc:Depends}</tt>.

  <p>Avendo detto ciò, si può lasciare la riga <tt>Depends:</tt> esattamente come è 
  ora,  si può inserire un'altra riga dopo questa che dica "<tt>Suggests: file</tt>",
  perchè <package>gentoo</package> può utilizzare alcune caratteristiche fornite dal pacchetto
  <package>file</package>.

  <p>La riga 12 contiene una breve descrizione del pacchetto. La maggioranza degli schermi
  degli utenti è larga 80 colonne quindi il contenuto non dovrebbe superare i 60 caratteri.
  Si cambia questo valore in "<tt>fully GUI configurable X file manager using GTK+</tt>".

  <p>Nella riga 13 va messa la descrizione lunga. Questa dovrebbe consistere in un
  paragrafo che fornisce più dettagli sul pacchetto. La prima colonna di ogni riga dovrebbe
  essere vuota. Non ci dovrebbero essere linee vuote, ma si può mettere un
  singolo "<tt>.</tt>" (punto) in una colonna per simularle. Inoltre non ci dovrebbe essere più
  di una linea vuota dopo questa descrizione.

  <p>Si inseriscono quindi i campi <tt>Vcs-*</tt> documentati su 
  <url name="Developer's Reference, 6.2.5. 'Version Control System location'" id="http://www.debian.org/doc/manuals/developers-reference/best-pkging-practices.html#bpp-vcs"> tra la linea 6 e 7. Si supponga
  che il pacchetto <package>gentoo</package> è posizionato nel Debian Alioth Git
  Service su <tt>git://git.debian.org/git/collab-maint/gentoo.git</tt>.

  <p>Infine, ecco come appare il file di controllo aggiornato:

<example>
 1 Source: gentoo
 2 Section: x11
 3 Priority: optional
 4 Maintainer: Josip Rodin &lt;joy-mg@debian.org&gt;
 5 Build-Depends: debhelper (>= 7.0.5), xlibs-dev, libgtk1.2-dev, libglib1.2-dev
 6 Standards-Version: 3.8.4
 7 Vcs-Git: git://git.debian.org/git/collab-maint/gentoo.git
 8 Vcs-browser: http://git.debian.org/?p=collab-maint/gentoo.git
 9 Homepage: http://www.obsession.se/gentoo/
10
11 Package: gentoo
12 Architecture: any
13 Depends: ${shlibs:Depends}, ${misc:Depends}
14 Suggests: file
15 Description: fully GUI configurable X file manager using GTK+
16  gentoo is a file manager for Linux written from scratch in pure C. It
17  uses the GTK+ toolkit for all of its interface needs. gentoo provides
18  100% GUI configurability; no need to edit config files by hand and re-
19  start the program. gentoo supports identifying the type of various
20  files (using extension, regular expressions, or the 'file' command),
21  and can display files of different types with different colors and icons.
22  .
23  gentoo borrows some of its look and feel from the classic Amiga file
24  manager "Directory OPUS" (written by Jonathan Potter).
</example>
  (Sono stati aggiunti i numeri di riga.)

  <sect id="copyright">Il file <file>copyright</file>

  <p>Questo file contiene le informazioni sulle risorse del pacchetto,
  il copyright e la licenza. Il suo formato non è definito dal Manuale delle 
  policy di Debian, ma il contenuto si trova in 
  (<url name="Manuale delle policy di Debian, 12.5 'Informazioni di copyright'" id="http://www.debian.org/doc/debian-policy/ch-docs.html#s-copyrightfile">).  Si può anche consultare <url name="DEP-5: Machine-parseable debian/copyright" id="http://dep.debian.net/deps/dep5/">.

  <p><prgn>dh_make</prgn> può fornire un modello di file del copyright, basta utilizzare l'opzione
  <tt>--copyright</tt> per selezionare quello giusto, se si desidera
  rilasciare il pacchetto <package>gentoo</package> sotto licenza GPL-2.

  <p>Si devono inserire le informazioni mancanti per completare questo file, come la fonte utilizzata per
  recuperare il pacchetto, le informazioni attuali di copyright e la licenza.
  Per le licenze più comuni relative al software libero come, GNU GPL-2, GNU
  GPL-3, LGPL-2, LGPL-3, BSD, Apache o la licenza Artistic, è possibile fare
  riferimento al file appropriato nella directory
  <file>/usr/share/common-licenses/</file> presente su ogni sistema Debian. In
  alternativa è necessario includere la licenza completa.

  <p>In breve ecco come appare il file di copyright del pacchetto <package>gentoo</package>:
  
<example>
 1 This work was packaged for Debian by:
 2
 3   Josip Rodin &lt;joy-mg@debian.org&gt; on Wed, 11 Nov 1998 21:02:14 +0100.
 4
 5 It was downloaded from:
 6
 7    &lt;url://example.com&gt;
 8
 9 Upstream Author(s):
10
11    &lt;put author's name and email here&gt;
12
13 Copyright:
14
15      &lt;Copyright (C) YYY Firstname Lastname&gt;
16      &lt;likewise for another author&gt;
17
18 License:
19
20 ### SELECT: ###
21     This package is free software; you can redistribute it and/or modify
22     it under the terms of the GNU General Public License as published by
23     the Free Software Foundation; either version 2 of the License, or
24     (at your option) any later version.
25 ### OR ###
26     This package is free software; you can redistribute it and/or modify
27     it under the terms of the GNU General Public License version 2 as
28     published by the Free Software Foundation.
29  ##########
30
31     This package is distributed in the hope that it will be useful,
32     but WITHOUT ANY WARRANTY; without even the implied warranty of
33     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
34     GNU General Public License for more details.
35
36     You should have received a copy of the GNU General Public License
37     along with this package; if not, write to the Free Software
38     Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
39
40  Debian systems, the complete text of the GNU General
41  License version 2 can be found in `/usr/share/common-licenses/GPL-2'.
42
43  Debian packaging is:
44
45     Copyright (C) 1998 Josip Rodin &lt;joy-mg@debian.org&gt;
46
47 You can redistribute it and/or modify
48 it under the terms of the GNU General Public License as published by
49  Free Software Foundation; either version 2 of the License, or
50 (at your option) any later version.
51
52 # Please also look if there are files or directories which have a
53 # different copyright/license attached and list them here.
</example>
  (Sono stati aggiunti i numeri di riga.)

  <p>Le cose importanti da aggiungere a questo file sono il posto in cui si è preso
  il pacchetto e l'attuale nota di copyright comprensiva di licenza. Bisogna
  includere il testo completo della licenza, a meno che non sia una delle licenze relative
  al software libero come la GNU GPL-2, GNU GPL-3, LGPL-2, LGPL-3, BSD, Apache o la Artistic license,
  in tal caso si può rimandare al file appropriato nella directory <file>/usr/share/common-licenses/</file>
  che esiste in ogni sistema Debian.

  <p>Brevemente, ecco come il file di <file>copyright</file> del pacchetto <package>gentoo</package> dovrebbe apparire:

<example>
 1 This work was packaged for Debian by:
 2
 3     Josip Rodin &lt;joy-mg@debian.org&gt; on 2  Wed, 11 Nov 1998 21:02:14 +0100.
 4
 5 It was downloaded from:
 6     ftp://ftp.obsession.se/gentoo/
 7
 8 Upstream author:
 9
10     Emil Brink &lt;emil@obsession.se&gt;
11
12 Copyright:
13     Copyright (C) 1998-99 by Emil Brink, Obsession Development.
14
15 License:
16     You are free to distribute this software under the terms of
17     the GNU General Public License  either version 2 of the License,
18     or (at your option) any later version.
19
20     This package is distributed in the hope that it will be useful,
21     but WITHOUT ANY WARRANTY; without even the implied warranty of
22     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
23     GNU General Public License for more details.
24
25     You should have received a copy of the GNU General Public License
26     along with this package; if not, write to the Free Software
27     Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
28
29 On Debian systems, the complete text of the GNU General
30 Public License version 2 can be found in `/usr/share/common-licenses/GPL-2'.
31
32 The Debian packaging is:
33
34     Copyright (C) 1998 Josip Rodin &lt;joy-mg@debian.org&gt;
35
36 You can redistribute it and/or modify
37 it under the terms of the GNU General Public License as published by
38  Free Software Foundation; either version 2 of the License, or
39 (at your option) any later version.
</example>
  (Sono stati aggiunti i numeri di riga.)

  <p>Si prega di seguire l'HOWTO fornito da ftpmasters ed inviato a debian-devel-announce: 
  <url id="&copyright-howto;"> .


  <sect id="changelog">Il file <file>changelog</file>

  <p>Questo è un file obbbligatorio, che ha un formato speciale descritto
  nel <url name="Manuale delle policy di Debian, 4.4 'debian/changelog'" id="http://www.debian.org/doc/debian-policy/ch-source.html#s-dpkgchangelog">. 
  Questo formato è utilizzato da <prgn>dpkg</prgn> ed altri programmi per
  ottenere il numero di versione, revisione, distribuzione ed urgenza del pacchetto.

  <p>Tale file è anche utile allo scopo di aver documentato tutti i cambiamenti
  che sono stati fatti. Sarà inoltre d'aiuto agli utenti che scaricano il pacchetto
  per vedere se ci sono problemi di cui dovrebbero essere al corrente.
  Il file verrà salvato come
  <file>/usr/share/doc/gentoo/changelog.Debian.gz</file> nel pacchetto binario.

  <p><prgn>dh_make</prgn> ne crea uno predefinito, ecco come appare:

<example>
1  gentoo (0.9.12-1) unstable; urgency=low
2
3   * Initial release (Closes: #<var>nnnn</var>)  &lt;<var>nnnn</var> is the bug number of your ITP&gt;
4
5  -- Josip Rodin &lt;joy-mg@debian.org&gt;  Mon, 22 Mar 2010 00:37:31 +0100
6
</example>
  (Sono stati aggiunti i numeri di riga.)

  <p>La riga 1 indica il nome del pacchetto, la versione, la distribuzione e l'urgenza.
  Il nome deve combacire con il nome del pacchetto sorgente, mentre la distribuzione
  dovrebbe essere <tt>unstable</tt> (o anche <tt>experimental</tt>) <footnote>Alcune persone utilizzano
  dei valori di distribuzione non validi come <tt>UNRELEASED</tt> per evitare che un pacchetto venga
  accidentalmente caricato in una VCS condivisa. </footnote>
  , e l'urgenza non dovrebbe essere cambiata in qualcosa di più alto di
  <tt>low</tt>. :-)
  
  <p>Le righe 3-5 sono una voce del registro, in cui vengono documentati i cambiamenti fatti
  nella revisione del pacchetto (non dei cambiamenti del pacchetto originario - c'è un file apposta
  per questo scopo, creato dagli autori originali, che verrà installato successivamente
  <file>/usr/share/doc/gentoo/changelog.gz</file>). Supponiamo che il numero di servizio
  del ticket ITP fosse "<tt>12345</tt>".  Nuove righe devono essere aggiunte
  appena prima della riga più in alto che comincia con "<tt>*</tt>" (asterisco). 
  Ciò si può fare con <manref name="dch" section="1">, o manualmente con un editor testuale.
  
  <p>Alla fine si avrà qualcosa del genere:

<example>
1  gentoo (0.9.12-1) unstable; urgency=low
2
3   * Initial Release. Closes: #12345
4   * This is my first Debian package.
5   * Adjusted the Makefile to fix $(DESTDIR) problems.
6
7  -- Josip Rodin &lt;joy-mg@debian.org&gt; Mon, 22 Mar 2010 00:37:31 +0100
8
</example>
  (Sono stati aggiunti i numeri di riga.)

  <p>Si possono leggere ulteriori informazioni sull'aggiornamentop del file changelog
  successivamente in <ref id="update">.

  <sect id="rules">Il file <file>rules</file>

  <p> Ora si darà uno sguardo alle regole esatte che
  <manref name="dpkg-buildpackage" section="1"> userà per creare il
  pacchetto. In realtà questo file non è che un altro <file>Makefile</file>, ma diverso
  da quelli della sorgente originale. Differentemente dagli altri files sotto
  <file>debian</file>, questop qui è marcato come eseguibile.

  <sect1 id="targets">Obiettivi del file <file>rules</file>

  <p>Ogni file <file>rules</file>, come qualsiasi altro <file>Makefile</file>,
  consiste di diversi obiettivi e regole che specificano come gestire 
  il sorgente.  
  <url name="Manuale delle policy di Debian, 4.9 'Script principale per la creazione: debian/rules'"
  id="http://www.debian.org/doc/debian-policy/ch-source.html#s-debianrules">
  ne spiega i dettagli.

  <p>La spiegazione breve degli obiettivi è la seguente.

<list>
<item>obiettivo <tt>clean</tt>: ripulire tutti i file compilati, generati ed inutili nella struttura di cartelle del pacchetto. (richiesto)
<item>obiettivo <tt>build</tt>: costruire tutti i sorgenti per ottenere programmi compilati e documenti formattati nell'albero delle cartelle del pacchetto. (richiesto)
<item>obiettivo <tt>install</tt>: installare i file in una struttura ad albero per ogni pacchetto binario nella directory <file>debian</file>.  Se definito, tutti gli obiettivi <tt>binary*</tt> dipenderanno effettivamente da quest'ultimo. (opzionale)
<item>obiettivo <tt>binary</tt>: creare tutta una serie di pacchetti binari (combinando gli obiettivi <tt>binary-arch</tt> e <tt>binary-indep</tt>). (richiesto)<footnote>Questo obiettivo è utilizzato da "<tt>dpkg-buildpackage</tt>" come in <ref id="completebuild">.</footnote>
<item>obiettivo <tt>binary-arch</tt>: creare una serie di pacchetti binari dipendenti dall'architettura (<tt>Architecture: any</tt>) nella directory padre. (richiesto)<footnote>Questo obiettivo è utilizzato da "<tt>dpkg-buildpackage -B</tt>" come in "ref id="porterbuild"".</footnote>
<item>obiettivo <tt>binary-indep</tt>: creare una serie di pacchetti binari indipendenti dall'architettura (<tt>Architecture: all</tt>) nella directory padre. (richiesto)<footnote>Questo obiettivo è utilizzato da "<tt>dpkg-buildpackage -A</tt>".</footnote>
<item>obiettivo <tt>get-orig-source</tt>: ottenere la versione più recente del pacchetto sorgente originale dal relativo sito. (optional)
</list>

  DA_CONTROLLARE
  <p>Le regole che si vogliono applicare vengono applicate come parametri
  da linea di comando (per esempio, "<tt>./debian/rules build</tt>" o "<tt>fakeroot make -f debian/rules
  binary</tt>"). Dopo il nome dell'obiettivo si può scrivere il nome della dipendenza, programma o file 
  da cui dipende la regola. Dopo aver fatto questo ci può essere un qualsiasi numero 
  di comandi, separati da <tt><var>TAB</var></tt>. Una nuova regola comincia con la dichiarazione
  dell'obiettivo nella prima colonna. Le righe vuote e le righe che cominciano
  con "<tt>#</tt>" (cancelletto) vengono trattate come commenti e rimosse.

  <p>Probabilmente si potrà essere creata un pò di confusione, ma sarà tutto più chiaro una volta esaminato
  il file <file>rules</file> che <prgn>dh_make</prgn> fornisce di default. Inoltre si consiglia di leggere
  "<tt>info make</tt>" per maggiori informazioni.

  <sect1 id="defaultrules">Il fille <file>rules</file> di default

  <p>Le nuove versioni di <prgn>dh_make</prgn> generano un file <file>rules</file> 
  molto semplice ma potente utilizzando il comando 
  <prgn>dh</prgn>:

<example>
 1 #!/usr/bin/make -f
 2 # -*- makefile -*-
 3 # Sample debian/rules that uses debhelper.
 4 # This file was originally written by Joey Hess and Craig Small.
 5 # As a special exception, when this file is copied by dh-make into a
 6 # dh-make output file, you may use that output file without restriction.
 7 # This special exception was added by Craig Small in version 0.37 of dh-make.
 8
 9 # Uncomment this to turn on verbose mode.
10 #export DH_VERBOSE=1
11
12 %:
13        dh $@
</example>
  (Sono stati aggiunti i numeri di riga.  Nel vero file <file>rules</file>, gli
  spazi vengono sostituiti da TAB.)

  <p>Probabilmente si sarà già familiari con le righe tipo la prima che ricordano gli script
  shell e Perl. In pratica indica al sistema operativo che il file andrà elaborato
  con <file>/usr/bin/make</file>.

  <p>La riga 10 può essere decommentata per impostare la variabile <tt>DH_VERBOSE</tt> ad 1. In tal caso,
  DA_CONTROLLARE lo strumento <package>debhelper</package> fornirà più informazioni come risultato.  Questo
  aiuta a capire cosa stia succedendo dietro questo semplice file
  <file>rules</file> ed ad analizzarne i problemi.  Questo nuovo comando <prgn>dh</prgn>
  è una parte cruciale dello strumento <package>debhelper</package> e non nasconde nulla
  all'utente.

  DA_CONTROLLARE
  <p>Nelle righe 12 e 13 viene svolto il grosso del lavoro. Il simbolo percentuale indica
  qualsiasi obiettivo che poi verrà chiamato da un singolo programma, <prgn>dh</prgn> con il nome dell'obiettivo stesso.

  <p><prgn>dh</prgn> è uno script involucro che esegue delle sequenze appropriate di programmi
  <prgn>dh_*</prgn> a seconda dei propri argomenti.

  <list>
  <item>"<tt>debian/rules clean</tt>" esegue "<tt>dh clean</tt>"; che a sua volta 
  esegue i seguenti:
<example>
dh_testdir
dh_auto_clean
dh_clean
</example>
  <item>"<tt>debian/rules build</tt>" esegue "<tt>dh build</tt>"; che a sua volta 
  esegue i seguenti:
<example>
dh_testdir
dh_auto_configure
dh_auto_build
dh_auto_test
</example>
  <item>"<tt>fakeroot debian/rules binary</tt>" esegue "<tt>fakeroot dh binary</tt>";
  che a sua volta esegue i seguenti<footnote>DA_CONTROLLARE</footnote>:
<example>
dh_testroot
dh_prep
dh_installdirs
dh_auto_install
dh_install
dh_installdocs
dh_installchangelogs
dh_installexamples
dh_installman
dh_installcatalogs
dh_installcron
dh_installdebconf
dh_installemacsen
dh_installifupdown
dh_installinfo
dh_pysupport
dh_installinit
dh_installmenu
dh_installmime
dh_installmodules
dh_installlogcheck
dh_installlogrotate
dh_installpam
dh_installppp
dh_installudev
dh_installwm
dh_installxfonts
dh_bugfiles
dh_lintian
dh_gconf
dh_icons
dh_perl
dh_usrlocal
dh_link
dh_compress
dh_fixperms
dh_strip
dh_makeshlibs
dh_shlibdeps
dh_installdeb
dh_gencontrol
dh_md5sums
dh_builddeb
</example>
  <item>"<tt>fakeroot debian/rules binary-arch</tt>" esegue "<tt>fakeroot dh binary-arch</tt>";
  che a sua volta esegue la stessa sequenza di "<tt>fakeroot dh binary</tt>" ma con
  l'opzione "<tt>-a</tt>" aggiunta ad ogni comando.
  <item>"<tt>fakeroot debian/rules binary-indep</tt>" esegue "<tt>fakeroot dh
  binary-indep</tt>"; che a sua volta esegue la stessa sequenza di
  "<tt>fakeroot dh binary</tt>" ma escludendo <prgn>dh_strip</prgn>,
  <prgn>dh_makeshlibs</prgn>, e <prgn>dh_shlibdeps</prgn> con l'opzione
  "<tt>-i</tt>" aggiunta ad ogni comando rimanente.
  </list>

  <p>Le funzioni dei comandi <prgn>dh_*</prgn> sono quasi auto-esplicative dai
  loro nomi.  
  <footnote>Per informazioni complete su tutto quello che questi scipt <prgn>dh_*</prgn>
  fanno esattamente, e quali sono le loro opzioni, si prega di leggere i loro
  rispettivi manuali e la documentazione
  <package>debhelper</package>.</footnote>
  Ci sono una serie di appunti da fare in questa spiegazione semplificata
  che assume un ambiente di costruzione tipico basato su <file>Makefile</file>.
  <footnote>Questi comandi supportano anche altri ambienti di costruzione come
  <file>setup.py</file>, <file>Makefile.PL</file>, <file>Build.PL</file> ed anche
  <file>cmake</file>.</footnote>
  <list>
  <item><p><prgn>dh_auto_clean</prgn> normalmente esegue i seguenti comandi con l'obiettivo <tt>distclean</tt> se
  esiste il file <file>Makefile</file>.<footnote>DA_CONTROLLARE</footnote>
<example>
make distclean
</example>
  <item><p><prgn>dh_auto_configure</prgn> normalmente esegue i seguenti comandi se
  esiste il file <file>./configure</file> (argomenti abbreviati for una maggiore leggibilità).
<example>
./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var ...
</example>
  <item><p><prgn>dh_auto_build</prgn> normalmente lancia il seguente comando per eseguire, se esiste, il primo obiettivo del <file>Makefile</file>.
<example>
make
</example>
  <item><p><prgn>dh_auto_test</prgn> normalmente esegue il seguente comando con l'obiettivo <tt>test</tt> se esiste il
  file <file>Makefile</file>.
<example>
make test
</example>
  <item><p><prgn>dh_auto_install</prgn> normalmente esegue il seguente comando con l'obiettivo <tt>install</tt>
  se esiste il file <file>Makefile</file> (riga spezzata per aumentare la leggibilità).
<example>
make install \
  DESTDIR=<var>/path/to</var>/<var>package</var>_<var>version</var>-<var>revision</var>/debian/<var>package</var>
</example>
  </list>

  <p>Gli obiettivi che richiedono il comando <prgn>fakeroot</prgn> contengono
  <prgn>dh_testroot</prgn>.  Se non si sta fingendo di essere root utilizzando
  questo comando, questo terminerà con un errore.

  <p>La cosa importante da sapere riguardo al file <file>rules</file> creato da
  <prgn>dh_make</prgn>, è che il suo contenuto contiene dei semplici consigli. Funzionerà
  per la maggior parte dei pacchetti ma per i più complicati non si esiti a personalizzarlo secondo
  le proprie esigenze. Le uniche cose che non vanno cambiate sono i nomi delle regole,
  perchè tutti gli strumenti utilizzano questi nomi, così come è indicato dalle policy di Debian.

  <p>Anche se l'obiettivo "<tt>install</tt>" non è richiesto, è comunque supportato.  
  "<tt>fakeroot dh install</tt>" si comporta come 
  "<tt>fakeroot dh binary</tt>" ma si ferma dopo <prgn>dh_fixperms</prgn>.

  <sect1 id="customrules">Personalizzazione del file <file>rules</file>

  <p>Verrà qui spiegata la personalizzazione del file <file>rules</file>,
  creato con il nuovo comando <prgn>dh</prgn>.

  <p>Molti comandi del tipo <prgn>dh_*</prgn>, invocati da <prgn>dh</prgn>, possono
  essere personalizzati modificando i rispettivi file di configurazione nella
  directory <file>debian</file>. Si veda <ref id="dother"> per la personalizzazione
  di tali caratteristiche.

  <p>Alcuni comandi del tipo <prgn>dh_*</prgn>, invocati da <prgn>dh</prgn>, possono
  richiedere la propria esecuzione con alcuni parametri o in aggiunta ad altri comandi
  da eseguire contestualmente o al posto dei comandi originali.
  In tali casi viene creato nel file <file>rules</file> l' obiettivo <tt>override_dh_<var>foo</var></tt>
  aggiungendo una regola solo per il comando <prgn>dh_<var>foo</var></prgn> che
  si intende modificare. Fondamentalmente tale regola dice "<em>esegui me al posto di</em>".
  <footnote>Sotto <tt>lenny</tt>, se si vuole cambiare il comportamento di uno script
  <prgn>dh_*</prgn> basta cercare la riga relativa nel file
  <file>rules</file> e modificarla.</footnote>

  <p>Si noti che i comandi <prgn>dh_auto_*</prgn> tendono a fare più di quanto si
  sia qui illustrato in questa ultra-semplificata spiegazione per tenere in conto
  tutti casi limite. L'utilizzo di comandi semplificati nell'obiettivo
  <tt>override_dh_*</tt> è una cattiva idea in quanto potrebbe annullare molte delle
  caratteristiche utili di <package>debhelper</package>.

  <p>Se si vogliono resgistrare i dati di configurazione di sistema del pacchetto
  <package>gentoo</package> nella directory <file>/etc/gentoo</file> invece che nella solita
  directory <file>/etc</file>, si può sovrascrivere il parametro predefinito
  <tt>--sysconfig=/etc</tt> dato dal comando
  <prgn>dh_auto_configure</prgn> al comando <prgn>./configure</prgn> nel modo seguente.
  <footnote>Il pacchetto <package>gentoo</package> utilizza il sistema di costruzione GNU,
  conosciuto anche come Autotools.  
  Si veda <url id="http://en.wikipedia.org/wiki/GNU_build_system">.</footnote>

<example>
override_dh_auto_configure:
        dh_auto_configure -- --sysconfig=/etc/gentoo
</example>

  <p>I parametri immessi dopo <tt>--</tt> vengono aggiunti dopo i parametri
  predefiniti dei programmi eseguiti pr sovrascriverli. Utilizzare
  il comando <prgn>dh_auto_configure</prgn> è preferibile rispetto al comando
  <prgn>./configure</prgn> dal momento che sovrascriverà esclusivamente il parametro
  <tt>--sysconfig</tt> e manterrà gli altri parametri del comando
  <prgn>./configure</prgn>.

  <p>Se il <file>Makefile</file> di un sorgente per il pacchetto <package>gentoo</package>
  necessita che venga specificato l'obiettivo <tt>build</tt> per essere costruito
  <footnote><prgn>dh_auto_build</prgn> senza alcun argomento eseguirà
  il primo obiettivo del file <file>Makefile</file>.</footnote>, basterà creare
  l'obiettivo <tt>override_dh_auto_build</tt> pe abilitarlo.

<example>
override_dh_auto_build:
        dh_auto_build -- build
</example>

  <p>Questo ci assicura che $(MAKE) verrà eseguito con tutti i parametri predefiniti
  del comando <prgn>dh_auto_build</prgn> ed il parametro di <tt>build</tt>.

  <p>Se il <file>Makefile</file> di un sorgente per il pacchetto <package>gentoo</package>
  contiene l'obiettivo <tt>test</tt> che non vuole essere eseguito nel processo
  di costruzione del pacchetto Debian, si può utilizzare l'obiettivo <tt>override_dh_auto_test</tt>
  per saltarlo.

<example>
override_dh_auto_test:
        :
</example>

  <p>Se il pacchetto <package>gentoo</package> contiene un inusuale file di changelog chiamato
  <file>FIXES</file>, <prgn>dh_installchangelogs</prgn> non installerà questo file
  di default. Il comando <prgn>dh_installchangelogs</prgn> richiede che venga fornito
  il parametro <file>FIXES</file> per installarlo.

<example>
override_dh_installchangelogs:
        dh_installchangelogs FIXES
</example>
  
  <chapt id="dother">Altri file nella directory <file>debian</file>

  <p>Per controllare la maggior parte delle operazioni che <package>debhelper</package> 
  effettua durante la creazione del pacchetto, si possono inserire dei file di configurazione
  all'interno della directory <file>debian</file>. Questo capitolo fornirà una panoramica
  sull'utilizzo di ciascuno di essi ed il loro formato. Si legga
  <url name="Manuale delle policy di Debian" id="http://www.debian.org/doc/devel-manuals#policy"> e
  <url name="Guida di riferimento per lo sviluppatore Debian" id="http://www.debian.org/doc/devel-manuals#devref">
  per le linee guida sulla creazione dei pacchetti.

  <p>Il comando <prgn>dh_make</prgn> creerà il modello dei file
  di configurazione nella directory <file>debian</file>. Molti di questi
  file terminano con l'estensione "<tt>.ex</tt>". In altri inoltre il nome
  del file viene preceduto dal nome del pacchetto in binario, come <tt><var>pacchetto</var></tt>.
  Si dia uno sguardo a tutti i differenti file di configurazione.

  <p>Se si vuole o si ha bisogno di attivare alcuno di questi file, si effettuino le seguenti operazioni:
  <list>
    <item>si rinomini il file modello rimuovendo l'estensione <tt>.ex</tt> o <tt>.EX</tt> se presente.
    <item>si modifichi il contenuto del file in base al bisogno.
    <item>si elimini il file modello di cui non si ha più bisogno.
    <item>si modifichi il file di <file>controllo</file> (si veda <ref id="control">), se necessario. 
    <item>si modifiche il file delle <file>regole</file> (si veda <ref id="rules">), se necessario. 
  </list>

  <p>Questi file di configurazione di <package>debhelper</package> senza
  prefisso del <file><var>pacchetto</var></file>, come nel file <file>install</file>
  vengono applicati al primo pacchetto binario. Quando ci sono molti pacchetti binari
  le loro configurazioni possono essere specificate aggiungendo il loro prefisso al
  nome del file di configurazione come  <file><var>pacchetto-1</var>.install</file>,
  <file><var>pacchetto-2</var>.install</file>, ecc.

  <sect id="readme">Il file <file>README.Debian</file>

  <p>Ogni ulteriore dettaglio o discrepanza tra il pacchetto originale e la
  versione <em>debianizzata</em>, che si è creata, dovrebbe essere documentato qui.

  <p><prgn>dh_make</prgn> ne crea uno di default, ecco come appare:

<example>
gentoo per Debian
-----------------

&lt;possibili note riguardanti questo pacchetto - se non presenti, si cancelli questo file&gt;

 -- Josip Rodin &lt;joy-mg@debian.org&gt;, Wed, 11 Nov 1998 21:02:14 +0100
</example>

  <p>Qui dovrebbero inserire delle brevi informazioni specifiche di Debian.
  Si veda <manref name="dh_installdocs" section="1">.

  <sect id="compat">Il file <file>compat</file>

  <p>Il file <file>compat</file> definisce il livello di compatibilità del 
  pacchetto <package>debhelper</package>. Al momento dovrebbe essere impostato
  a <package>debhelper</package> V7 nel modo seguente.
<example>
$ echo 7 > debian/compat
</example>

  <sect id="conffiles">I file <file>conffiles</file>

  <p>Una delle cose più fastidiose riguardanti il software accade quando
  si spende una grande quantità di tempo e di sforzi per personalizzare
  un programma solo per vedere un aggiornamento spazzare via tutte le
  modifiche fatte. Debian risolve questo problema applicando un marchio
  ai file di configurazione in modo tale che, quando si aggiorna un pacchetto,
  verrà richiesto se si vogliono mantenere o meno i vecchi file di configurazione.
  
  <p>A partire da <package>debhelper</package> V3, <manref name="dh_installdeb" section="1">
  <em>automaticamente</em> marcherà ogni file che si trova nella directory 
  <file>/etc</file> come conffiles, così che se il programma
  ha soli file di configurazione in quella directory, non ci sarà bisogno
  di specificarli in questo file. Per la maggioranza dei tipi di pacchetto, 
  l'unico posto in cui si trovano (ed in cui si dovrebbero trovare i conffile)
  è all'interno di <file>/etc</file> e quindi non c'è bisogno che questo file
  esista.

  <p>Se il programma creato utilizza file di configurazione e li sovrascrive
  in automatico, è meglio non rendere questi ultimi dei conffiles perchè <prgn>dpkg</prgn>
  chiederà ogni volta agli utenti di verificare i cambiamenti.

  <p>Se il programma di cui si sta creando il pacchetto richiede ad ogni utente
  di modificare i file di configurazione nella directory <file>/etc</file>,
  ci sono principalmente 2 modi per non renderli conffiles e quindi di mantenere
  <prgn>dpkg</prgn> tranquillo. 
  <list>
  <item>Si può creare un link simbolico nella directory <file>/etc</file> che punti
  ad un file nella directory <file>/var</file> generato dagli <em>script del
  manutentore</em>.
  <item>Si fa generare un file dagli <em>script del manutentore</em> nella directory
  <file>/etc</file>.
  </list>

  <p>Per maggiori informazioni sugli <em>script del manutentore</em>, si veda <ref id="maintscripts">.

  <sect id="crond">I file <file><var>pacchetto</var>.cron.*</file>

  <p>Se il pacchetto creato richiede che vengano programmate delle operazioni 
  per funzionare correttamente, si può utilizzare questo file per lo scopo.
  Si possono programmare delle operazioni in modo tale che vengano eseguite
  su base oraria, giornaliera, settimanale, mensile o che vengano eseguite
  alternativamente in qualsiasi momento si voglia.   
  <p>If your package requires regularly scheduled tasks to operate properly, 
  you can use this file to set it up. You can either setup regular tasks 
  that happen hourly, daily, weekly or monthly or alternatively happen any
  other time that you wish. I nomi dei file sono:

  <list>
    <item><file>cron.hourly</file> - Installato come <file>/etc/cron.hourly/<var>pacchetto</var></file>:
    viene eseguito una volta all'ora, ogni ora.
    <item><file>cron.daily</file> - Installato as <file>/etc/cron.daily/<var>pacchetto</var></file>:
    viene eseguito una volta al giorno, di solito ogni mattino.
    <item><file>cron.weekly</file> - Installato come <file>/etc/cron.weekly/<var>pacchetto</var></file>:
    viene eseguito una volta a settimana, di solito ogni mattino di Domenica.
    <item><file>cron.monthly</file> - Installato come <file>/etc/cron.monthly/<var>pacchetto</var></file>:
    viene eseguito una volta al mese, di solito ogni mattino del primo del mese.
    <item><file>cron.d</file> - Installato come <file>/etc/cron.d/<var>pacchetto</var></file>: per qualsiasi altro periodo
  </list>

  <p>Il formato dei file qui presentati è lo script di shell. L'unico che diiferisce
  dagli altri è <file><var>pacchetto</var>.cron.d</file> che segue il formato di <manref name="crontab" section="5">.

  <p>Si noti che qui non è stata illustrata la rotazione dei log; a questo proposito si veda
  <manref name="dh_installlogrotate" section="1"> e
  <manref name="logrotate" section="8">.

  <sect id="dirs">Il file <file>dirs</file>

  <p>Questo file specifica le directory di cui si ha bisogno ma che la normale
  pocedura di installazione ("<tt>make install DESTDIR=...</tt>" chiamata da
  "<tt>dh_auto_install</tt>") non crea. Questo generalmente indica la presenza
  di un problema nel <file>Makefile</file>.
  
  <p>I file elencati nel file <file>install</file> non hanno bisogno che
  le directory vengano create prima. Si veda <ref id="install">

  <p>Si raccomanda di provare prima ad eseguire l'installazione ed
  utilizzare questo file solo se si incorre in problemi. Si noti che non il carattere
  slash non precede il nome delle directory.  

  <sect id="doc-base">Il file <file><var>pacchetto</var>.doc-base</file>

  <p>Se il pacchetto generato ha altra documentazione oltre alle pagine del manuale
  e documenti informativi, dovrebbe essere utilizzato il file <package/doc-base/
  per segnalarla in modo che l'utente possa trovarla con, ad esempio <manref name="dhelp" section="1">,
  <manref name="dwww" section="1"> o <manref name="doccentral" section="1">.

  <p>Questa documentazione è solitamente costituita da documenti HTML, file PS e PDF,
  disponibili in <file>/usr/share/doc/<var>nomepacchetto</var>/</file>.

  <p>Questo è il modo in cui il file doc-base di <package>gentoo</package>, <file>gentoo.doc-base</file>, appare:

<example>
Document: gentoo
Title: Gentoo Manual
Author: Emil Brink
Abstract: This manual describes what Gentoo is, and how it can be used.
Section: File Management

Format: HTML
Index: /usr/share/doc/gentoo/html/index.html
Files: /usr/share/doc/gentoo/html/*.html
</example>

  <p>Per informazioni sul formato del file si veda
  <manref name="install-docs" section="8"> ed il manuale <package/doc-base/ ,
  reperibile in <file>/usr/share/doc/doc-base/doc-base.html/</file>.

  <p>Per ulteriori dettagli su come installare documentazione aggiuntiva, si veda in <ref id="destdir">.

  <sect id="docs">Il file <file>docs</file>

  <p>Questo file specifica il nome dei file di documentazione che si possono avere
  <manref name="dh_installdocs" section="1"> li installa nella directory temporanea automaticamente.

  <p>Normalmente, questo file includerà tutti i file esistenti nella directory dei sorgenti di più alto
  livello che sono chiamati "<file>BUGS</file>", "<file>README*</file>", "<file>TODO</file>" ecc.

  <p>Per il pacchetto <package>gentoo</package>, nell'esempio, sono stati inclusi anche altri files:

<example>
BUGS
CONFIG-CHANGES
CREDITS
ONEWS
README
README.gtkrc
TODO
</example>

  <sect id="emacsen">Il file <file>emacsen-*</file>

  <p>Se il pacchetto generato contiene file Emacs che possono essere compilati
  al momento dell'installazione, i file emacsen-* possono essere usati per impostarne la compilazione

  <p>Tali file sono installati nella directory temporanea con
  <manref name="dh_installemacsen" section="1">.

  <p>Se non se ne ha bisogno, possono essere eliminati.

  <sect id="examples"><file>Il file <var>pacchetto</var>.examples</file> 
  <p>Il comando <manref name="dh_installexamples" section="1"> installa i file
  e le directory elencati al suo interno come file di esempio.
 
  <sect id="initd">I file <file><var>pacchetto</var>.init</file> e <file><var>pacchetto</var>.default</file>

  <p>Se il pacchetto generato è un demone che deve partire all'avvio del sistema,
  hai chiaramente ignorato le mie raccomandazioni iniziali, vero? :-)

  <p>Il file <file><var>pacchetto</var>.init</file> viene installato come lo script
  <file>/etc/init.d/<var>pacchetto</var></file>. La sua struttura abbastanza generica 
  è fornita dal comando <prgn>dh_make</prgn> come <file>init.d.ex</file>. 
  Probabilmente si dovrà rinominare e modificare un bel po', cercando
  di assicurarsi di fornire degli header che rispettino gli standard della gerarchia
  dei filesystem (si veda <file>/usr/share/doc/debian-policy/fhs/</file>). Il file viene installato
  nella directory temporanea con <manref name="dh_installinit" section="1">.

  <p>Il file <file><var>pacchetto</var>.default</file> viene installato in
  <file>etc/default/<var>pacchetto</var></file>. Questo file imposta
  delle variabili che vengono caricate dallo script di init. La maggioranza delle volte
  questoo file di default viene utilizzato per disabilitare l'esecuzione di un demone, impostare dei
  flag di default oppure dei timeout. Se lo script di init ha alcune caratteristiche <em>impostabili</em>
  si dovrà installare queste nel file di default, non nello script di init.
  
  <p>Se il pacchetto originario ha un file di init si può decidere di utilizzarlo o meno.
  Se non viene utilizzato quello script init.d allorà ne dovrà essere creato uno nuovo in <file>debian/init</file>.
  Comunque se lo script di init originario sembra funzionare bene ed installa tutto nella
  corretta destinazione, si devono comunque impostare i link simbolici <file>rc*</file>. Per fare questo si deve
  sovrascrivere <prgn>dh_installinit</prgn> nel file <file>rules</file> con le seguenti righe:

<example>
override_dh_installinit:
        dh_installinit --onlyscripts
</example>

  <p>Se non si ha bisogno di tutto ciò, si possono rimuovere i file.

  <sect id="install">Il file <file>install</file>

  <p>Se ci sono dei file che devono essere insallati nel pacchetto ma con il normale comando 
  "<tt>make install</tt>" non vengono elaborati, i nomi di quest'ultimi e le cartelle di destinazione
  vanno messe in questo file <file>install</file>. Tali file vengono installati con il comando
  <manref name="dh_install" section="1">.<footnote>Questo comando rimpiazza il comando
  <manref name="dh_movefiles" section="1">, ormai deprecato, che veniva configurato dal file 
  <file>files</file>.</footnote> Andrebbe innanzitutto controllato che non ci sia uno strumento 
  più specifico da poter utilizzare. Per esempio, i documenti dovrebbero essere elencati nel file
  <file>docs</file> e non in questo file.

  <p>Nel file <file>install</file> compare una riga per ogni file installato, contenente il nome del file   
  (relativo alla directory in cui avviene la costruzione del pacchatto), uno spazio e la directory 
  di installazione (relativa alla posizione del file install). Un esempio dell'utilizzo è quando
  un file binario non è stato installato, in questo caso il file <file>install</file>
  dovrebbe essere:

<example>
src/foo/mybin usr/bin
</example>

  <p>Questo significa che quando il pacchetto verrà installato, ci sarà un file binario
  <file>/usr/bin/mybin</file>.

  <p>Alternativamente, questo file <file>install</file> può presentare il nome del file
  senza la directory di installazione solo quando il percorso relativo della directory non cambia.
  Questo formato è solitamente utilizzato per grandi pacchetti che organizzano i risultati della
  costruzione in paccketti multipli utilizzando <file><var>pacchetto-1</var>.install</file>,
  <file><var>pacchetto-2</var>.install</file>, ecc.
  
  <p>Il comando <prgn>dh_install</prgn> andrà a controllare nella cartella
  <file>debian/tmp</file> alla ricerca di file, se non ne trova nella directory
  corrente (or in qualsiasi altro posto si sia indicato di guardare utilizzando <tt>--sourcedir</tt>).

  <sect id="info">I file <file><var>pacchetto</var>.info</file>

  <p>Se il pacchetto generato ha delle pagine informative, queste andrebbero installate
  utilizzando il comando <manref name="dh_installinfo" section="1"> ed elencandole nei file
  <file><var>pacchetto</var>.info</file>.

  <sect id="lintian">I file <file>{<var>pacchetto</var>.|source/}lintian-overrides</file>

  <p>Se il pacchetto <package>lintian</package> segnala degli errori di diagnostica in
  un caso in cui esista una policy che ammette delle eccezioni alle regole, si possono
  utilizzare i file <file><var>pacchetto</var>.lintian-overrides</file> o
  <file>source/lintian-overrides</file> per inibire le segnalazioni. Si legga
  <file>/usr/share/doc/lintian/lintian.html/index.html</file> e si eviti di farne
  un uso eccessivo.

  <p>Il file <file><var>pacchetto</var>.lintian-overrides</file> è ovviamente utilizzato per il
  pacchetto binario chiamato <package><var>pacchetto</var></package> ed è installato in
  <file>usr/share/lintian/overrides/<var>pacchetto</var></file> dal comando
  <prgn>dh_lintian</prgn>.

  <p>Il file <file>source/lintian-overrides</file> è utilizzato per il pacchetto sorgente. Questo
  non viene installato.

  <sect id="manpage">I file <file>manpage.*</file>

  <p>I programmi creati dovrebbero avere una pagina che faccia da manuale. In caso contrario ciascuno
  di questi file contiene un modello che può essere riempito. Il comando <prgn>dh_make</prgn> crea
  diversi file modello per la pagina del manuale. Questi devono essere rinominati e modificati.
  Si faccia attenzione a rimuovere i file modello non utilizzati.

  <sect1 id="manpage1">Il file <file/manpage.1.ex/

  <p>Le pagine del manuale sono solitamente scritte per <manref name="nroff" section="1">.
  Anche il file modello <file/manpage.1.ex/ è scritto per <prgn>nroff</prgn>.
  Si veda la pagina di manuale <manref name="man" section="7"> per una
  breve descrizione su come modificare un file del genere.

  <p>L'ultimo file delle pagine del manuale dovrebbe includere il nome del programma
  che si sta documentando, quindi verrà rinominato da "<tt>manpage</tt>" a "<tt>gentoo</tt>". 
  Il nome del file include anche "<tt>.1</tt>" come primo suffisso, il che sta ad indicare che
  la sezione della pagina del manuale è relativa ad un comando dell'utente. Si verifichi che questa sezione
  sia quella corretta. Qui di seguito viene presentata una breve lista delle sezioni delle pagine del manuale:
  
<example>
Section |     Description     |     Notes
   1     User commands          Executable commands or scripts.
   2     System calls           Functions provided by the kernel.
   3     Library calls          Functions within system libraries.
   4     Special files          Usually found in /dev
   5     File formats           E.g. /etc/passwd's format
   6     Games                  Or other frivolous programs
   7     Macro packages         Such as man macros.
   8     System administration  Programs typically only run by root.
   9     Kernel routines        Non-standard calls and internals.
</example>
  
  <p>Così la pagina man del pacchetto <package>gentoo</package> dovrebbe chiamarsi
  <file>gentoo.1</file>. Se non ci fosse alcuna pagina man <file>gentoo.1</file>
  nei sorgenti originali, andrebbe creata rinominando il modello <file/manpage.1.ex/
  in <file>gentoo.1</file> e modificandolo utilizzando le informazioni contenute
  negli esempi e nei documenti originali.

  <p>Si può utilizzare il comando <prgn>help2man</prgn> anche  per generare una pagina 
  del manuale priva del risultato di "<tt>--help</tt>" and "<tt>--version</tt>" per ogni programma.
  <footnote>Se al comando manca la pagina info ma esistono file di documentazione nella
  directory <file>/usr/share/<var>pacchetto</var></file>, si dovrebbe manualmente modificare
  la pagina man generata dal comando <prgn>help2man</prgn>.
  </footnote>
  
  <sect1 id="manpagesgml">Il file <file/manpage.sgml.ex/

  <p>Se d'altra pate si preferisce scrivere in SGML piuttosto che utilizzare <prgn>nroff</prgn>, si
  può utilizzare il modello <file/manpage.sgml.ex/ . Se si procede in questo modo andrà:
  
  <list>
    <item>rinominato il file in qualcosa del tipo <file/gentoo.sgml/
    <item>installato il pacchetto <package/docbook-to-man/
    <item>aggiunto <tt/docbook-to-man/ alla linea <tt/Build-Depends/ nel file
          <file/control/ 
    <item>aggiunto l'obiettivo <tt>override_dh_auto_build</tt> al file <file>rules</file> :
<example>
override_dh_auto_build:
        docbook-to-man debian/gentoo.sgml > debian/gentoo.1
        dh_auto_build
</example>
  </list>

  <sect1 id="manpagexml">Il file <file>manpage.xml.ex</file>

  <p>Se si preferisce l'XML all'SGML, si può utilizzare il modello <tt/manpage.xml.ex/ .
  se si sceglie questa via si avranno due scelte:
  
  <list>
    <item>rinominare il file in qualcosa del tipo <tt/gentoo.1.xml/
    <item>installare il pacchetto <package/docbook-xsl/  e l'elaboratore XSLT come
          <package/xsltproc/ (recommended)
    <item>aggiungere i pacchetti <tt/docbook-xsl/, <tt/docbook-xml/ e <tt/xsltproc/ alla linea
          <tt/Build-Depends/ nel file <tt/control/ 
    <item>aggiungere un obiettivo <tt>override_dh_auto_build</tt> al file <file>rules</file> :
<example>
override_dh_auto_build:
        xsltproc --nonet \
         --param make.year.ranges 1 \
         --param make.single.year.ranges 1 \
         --param man.charmap.use.subset 0 \
         -o debian/ \
  /usr/share/xml/docbook/stylesheet/nwalsh/manpages/docbook.xsl \
        debian/gentoo.1.xml
        dh_auto_build
</example>
  </list>

  <sect id="manpages">I file <file><var>pacchetto</var>.manpages</file>

  <p>Se il pacchetto creato presenta delle pagine del manuale, queste andrebbero
  installate uilizzando il comando <manref name="dh_installman" section="1"> ed elencandole
  nei file <file><var>pacchetto</var>.manpages</file> .

  <sect id="menu">Il file <file>menu</file>

  <p>Gli utenti dell'X Window System solitamente hanno un gestore di 
  finestre che può essere personalizzato per lanciare programmi. 
  Se hanno installato il pacchetto <package/menu/ , verrà creato un 
  set di menu per ogni programma del sistema.

  <p>Questo è il modello del file <file/menu.ex/ che il comando <prgn>dh_make</prgn> crea:
  
<example>
?package(gentoo):needs="X11|text|vc|wm" \
        section="Applications/see-menu-manual"\
        title="gentoo" command="/usr/bin/gentoo"
</example>

  <p>Il primo campo dopo i due punti è <tt>needs</tt>, e specifica il tipo
  di interfacia di cui ha bisogno il programma. Questo valore può essere cambiato
  con una delle alternative elencate, ad esempio <tt>text</tt> o <tt>X11</tt>.

  <p>Il campo successivo è <tt>section</tt>, in cui dovrebbero apparire le voci
  del menu e del sottomenu. L'attuale lista delle sezioni <footnote>Si noti che
  è avvenuta una grossa riorganizzazione della struttura dei menu.</footnote> si trova in:
  <file>/usr/share/doc/debian-policy/menu-policy.html/ch2.html#s2.1</file>

  <p>Il campo <tt>title</tt> indica il nome del programma. Se si vuole si può scrivere
  in maiuscolo. Basta che si mantenga corto.

  <p>Infine, il campo <tt>command</tt> indica il comando che manda in esecuzione il programma.

  <p>Si può quindi cambiare il file <file>menu</file> e la voce del menu nel modo seguente:

<example>
?package(gentoo): needs="X11" \
        section="Applications/Tools" \
        title="Gentoo" command="gentoo"
</example>

  <p>Si possono anche aggiungere altri campi come <tt>longtitle</tt>, <tt>icon</tt>, <tt>hints</tt> ecc.
  Si veda <manref name="dh_installmenu" section="1">, <manref name="menufile" section="5">,
  <manref name="update-menus" section="1">
  e <file>/usr/share/doc/debian-policy/menu-policy.html/</file> per maggiori
  informazioni.

  <sect id="news">Il file <file>NEWS</file>

  <p>Il comando <manref name="dh_installchangelogs" section="1"> installa questo file.

  <sect id="maintscripts">I file <file>{post|pre}{inst|rm}</file>

  <p>I files <file>postinst</file>, <file>preinst</file>,
  <file>postrm</file> e <file>prerm</file> 
  <footnote>Anche se è stata utilizzata una corta espressione Bash per indicare
  questi file come "<file>{post|pre}{inst|rm}</file>" , si raccomanda di utilizzare
  una shell POSIX (non Bash) per questi <em>script del manutentore</em> il più possibile
  per massimizzare la compatibilità.</footnote>
  vengono chiamati <em>script del manutentore</em>. Questi sono script che vengono messi
  nell'area di controllo del pacchetto e vengono lanciati bdal comando <prgn/dpkg/ 
  quando il pacchetto viene installato, aggiornato o rimosso.

  <p>Un nuovo manutentore dovrebbe, se possibile, evitare ogni modifica manuale
  degli <em>script del manutentore</em> perchè potrebbero creare dei problemi. Per
  maggiori informazioni si guardi nel 
  <url name="Manuale delle policy di Debian, 6 'Script di manutenzione del pacchetto e procedure di installazione'" id="http://www.debian.org/doc/debian-policy/ch-maintainerscripts.html">, 
  e si dia un'occhiata ai file di esempio forniti da <prgn>dh_make</prgn>.

  <p>Il pacchetto <package>ucf</package> fornisce una infrastruttura di gestione
  <em>simil-conffile</em> per preservare cambiamenti effettuati dall'utente in file
  che non possono essere etichettati come <em>conffile</em>, come ad esempio quelli gestiti
  dagli <em>script del manutentore</em>.

  <p>Se non si è data retta e si sono creati dei <em>script del manutentore</em>
  personalizzati per un pacchetto, bisogna essere sicuri di averli provati non solo per
  <strong>install</strong> e <strong>upgrade</strong>, ma anche per
  <strong>remove</strong> e <strong>purge</strong>.

  <p>Gli aggiornamenti alle nuove versioni dovrebbero essere indolore e non invadenti (gli utenti
  esistenti non dovrebbero notare gli aggiornamenti a meno di scoprire che vecchi bug sono stati
  corretti e che vi sono magari delle nuove funzionalità).  

  <p>Quando l'aggiornamento deve per forza di cose essere invadente (per esempio, file di
  configurazione sparsi all'interni didiverse cartelle home con strutture totalmente differenti), si
  può impostare il pacchetto ai valori sicuri predefiniti (esempio, servizi disabilitati) e
  fornire una valida documentazione come richiesto dalla policy
  (<file>README.Debian</file> e <file>NEWS.Debian</file>) come ultima spiaggia.
  Sarebbe meglio non disturbare l'utente con la nota <prgn>debconf</prgn> richiamata
  da questi <em>script del manutentore</em> per gli aggiornamenti.

  <p>Questi <em>script del manutentore</em> sono delle migliorie di Debian che fanno capire 
  <strong>come mai le persone scelgano Debian</strong>. Bisogna stare molo attenti a non
  infastidirle a causa loro.  

  <sect id="todo">Il file <file>TODO</file>
  <p>Il comando <manref name="dh_installdocs" section="1"> installa questo file.

  <sect id="watch">Il file <file>watch</file>

  <p>Questo file è utilizzato per configurare il programma <manref name="uscan" section="1">
  (nel pacchetto <package/devscripts/ ). Questo viene utilizzato per
  controllare il sito da cui sono stati presi i sorgenti originali. Viene utilizzato anche da 
  <url id="http://wiki.debian.org/DEHS" name="Debian External Health Status (DEHS)">.

  <p>Questo è ciò che si può mettere al suo interno:

<example>
# watch control file for uscan
version=3
http://sf.net/gentoo/gentoo-(.*)\.tar\.gz
</example>

  <p>L'URL "<tt>http://sf.net/gentoo</tt>" viene scaricato alla ricerca di collegamenti
  nella forma "<tt>&lt;a href=...&gt;</tt>". Il nome base (la parte appena dopo
  l'ultimo "<tt>/</tt>") di questi URL sono confrontati con l'espressione regolare
  Perl (see <manref name="perlre" section="1">) "<tt>gentoo-(.*)\.tar\.gz</tt>".
  Tra i file che combaciano viene scaricato quello avente il numero di versione
  più grande.

  <p>Il formato del file <file>watch</file> è documentato in <manref name="uscan" section="1">.

  <sect id="sourcef">Il file <file>source/format</file>

  <p>Nel file <file>debian/source/format</file>, ci dovrebbe essere una unica
  riga che indichi il formato desiderato per il pacchetto sorgente
  (controllare <manref name="dpkg-source" section="1"> per una lista completa). Dopo
  <tt>squeeze</tt>, dovrebbe scrivere:
  <list>
  <item><tt>3.0 (native)</tt> for Debian native packages or 
  <item><tt>3.0 (quilt)</tt> for everything else.  
  </list>

  <p>Il nuovo formato sorgente <tt>3.0 (quilt)</tt> registra le modifiche
  in una serie di patch <prgn>quilt</prgn> all'interno di
  <file>debian/patches</file>. Questi cambiamenti vengono poi automaticamente
  applicati durante l'estrazione del pacchetto sorgente.
  <footnote>Si veda <url name="DebSrc3.0"
  id="http://wiki.debian.org/Projects/DebSrc3.0"> per una serie di informazioni generali
  riguardanti il passaggio al nuovo formato <tt>3.0 (quilt)</tt> ed ai formati
  sorgente <tt>3.0 (native)</tt>.</footnote> Le modifiche di Debian sono semplicemente
  mantenute in un archivio <file>debian.tar.gz</file> contenente tutti i file sotto
  la directory <file>debian</file>. Questo nuovo formato supporta l'inclusione
  di file binari come per esempio le icone PNG del manutentore del pacchetto
  senza richiedere trucchi.<footnote>Al momento questo nuovo formato supporta anche
  molteplici archivi e più metodi di compressione.
  Questi però esulano dall'obiettivo di questo documento.</footnote>

  <p>Quando <prgn>dpkg-source</prgn> estrae un pacchetto sorgente nel formato
  <tt>3.0 (quilt)</tt>, applica automaticamente tutte le patch elencate
  nel file <file>debian/patches/series</file>. Si può evitare di 
  applicare le patch alla fine dell'estrazione con l'opzione
  <tt>--skip-patches</tt>.

  <sect id="patches">I file <file>patches/*</file>

  <p>Il vecchio formato sorgente <tt>1.0</tt> creava un singoglo, grosso file
  <file>diff.gz</file> file che conteneva tutti i file di manutenzione del pacchetto
  che stavano in <file>debian</file> ed i file di patch del sorgente. Un pacchetto così
  è un poco ingombrante da ispezionare per capire successivamente la sequenza delle modifiche.
  Per questo tale formato non è considerato soddisfacente.

  <p>Il nuovo formato sergente <tt>3.0 (quilt)</tt> immagazzina le patch in alcuni
  file <file>debian/patches/*</file> utilizzando il comando <prgn>quilt</prgn>.
  Queste patch ed altri dati del pacchetto che sono tutti reperibili nella
  directory <file>debian</file> vengono compressi nel file
  <file>debian.tar.gz</file>
  <footnote>Alcuni metodi per la manutenzione delle patch dei pacchetti sono stati proposti
  e vengono utilizzati nei pacchetti Debian. Il sistema <prgn>quilt</prgn> è quello
  che viene preferito. Altri sistemi sono <prgn>dpatch</prgn>,
  <prgn>dbs</prgn>, <prgn>cdbs</prgn>, ecc. Molti di questi mantengono tali patch
  nei file <file>debian/patches/*</file>.</footnote>


  <p>Il comando <prgn>quilt</prgn> è spiegato in <manref section="1"
  name="quilt">. Esso registra le modifiche ai sorgenti come una coda di file
  di patch <tt>-p1</tt> nella directory <file>debian/patches</file> e l'albero
  dei sorgenti non varia al di fuori della directory <file>debian</file>.
  L'ordine delle patch è registrato nel file
  <file>debian/patches/series</file>.  Si può applicare (=push),
  togliere(=pop), ed aggiornare le patch con facilità.
  <footnote>Se si sta chiedendo ad uno sponsor di caricare il proprio pacchetto, questo
  tipo di chiara separazione e documentazione dei cambiamenti è molto importante per
  per accelerare la revisione del pacchetto da parte dello sponsor.</footnote>

  <p>Per <ref id="first">, sono state create 3 patch in <file>debian/patches</file>.

  <p>Dal momento che le patch di Debian sono posizionate in <file>debian/patches</file>,
  si prega di impostare correttamente il comando <prgn>quilt</prgn> come descritto
  in TODO "ref id="quiltrc"".

  <p>Quando una qualsiasi persona fornisce una patch <file><var>foo</var>.patch</file> per i sorgenti,
  allora la modifica del pacchetto sorgente di tipo <tt>3.0 (quilt)</tt>è abbastanza semplice:

<example>
$ dpkg-source -x gentoo_0.9.12.dsc
$ cd gentoo-0.9.12
$ quilt import ../<var>foo</var>.patch
$ quilt push
$ quilt refresh
$ quilt header -e
... describe patch
</example>

  <p>Le patch salvate nel nuovo formato sorgente <tt>3.0 (quilt)</tt> devono essere
  prive di <em>fuzz</em>.  Bisogna quindi assicurarsi di ciò eseguendo 
  "<tt>quilt pop -a; while quilt push; do quilt refresh; done</tt>".

  <chapt id="build">Costruzione del pacchetto

  <p>A questo punto, si dovrebbe essere pronti a creare il pacchetto.

  <sect id="completebuild">(ri)Creazione completa
  
  <p>Al fine di (ri)creare un pacchetto in modo appropriato, è necessasio
  assicurarsi di installare
  <list>
  <item>il pacchetto <package>build-essential</package>,
  <item>i pacchetti elencati nel campo <tt>Build-Depends:</tt> (vedere <ref id="control">), e
  <item>i pacchetti elencati nel campo <tt>Build-Depends-indep:</tt> (vedere <ref id="control">).
  </list>

  <p>Adesso ci si sposti nella directory dei sorgenti del programma e si lancia il comando:

<example>
$ dpkg-buildpackage
</example>

  <p>Questo comando creerà i pacchetti binari e sorgenti al posto vostro.  Eseguirà le seguenti operazioni:
  <list>
    <item>pulirà l'albero dei sorgenti ("<tt>debian/rules clean</tt>")
    <item>costruirà il pacchetto sorgente ("<tt>dpkg-source -b</tt>")
    <item>costruirà il programma ("<tt>debian/rules build</tt>")
    <item>costruirà il pacchetto binario ("<tt>fakeroot debian/rules binary</tt>")
    <item>firmerà il file sorgente <file/.dsc/ file, usando <prgn/gpg/
    <item>creerà e firmerà il file di upload <file/.changes/ file, usando
          <prgn/dpkg-genchanges/ e <prgn/gpg/
  </list>

  <p>Il solo input richiesto è la password per la propria chiave GPG,
  due volte.
  
  <p>Fatto ciò, si vedranno quattro nuovi file nella directory dei sorgenti
  (<file>~/gentoo</file>):
  
  <p><list>
  <item><file>gentoo_0.9.12.orig.tar.gz</file>
  
  <p>Questo è il codice sorgente originale, semplicemente rinominato in modo
  da aderire allo standard Debian. Da notare che questo è stato creato
  inizialmente con "<tt>dh_make -f ../gentoo-0.9.12.tar.gz</tt>".
  
  <item><file>gentoo_0.9.12-1.dsc</file>
  
  <p>Questo è un sommario del contenuto del codice sorgente. Questo file è
  generato dal file <file>control</file>, ed è usato quando si decomprime il
  sorgente con <manref name="dpkg-source" section="1">. Questo file è firmato
  con GPG, in modo da confermare l'autenticità dell'autore del pacchetto.
  
  <item><file>gentoo_0.9.12-1.debian.tar.gz</file>
  
  <p>Questo file compresso contiene il contenuto della directory
  <file>debian</file>. Ogni modifica effettuata al codice sorgente originale,
  verrà memorizzata come patch di quilt in <file>debian/patches</file>.
  
  <p>Se qualcun altro volesse ri-creare il pacchetto da zero,
  potrebbe farlo facilmente usando i suddetti tre file.
  La procedura di estrazione è banale: basta copiare i tre file
  da qualche parte ed eseguire "<tt>dpkg-source -x gentoo_0.9.12-1.dsc</tt>".
  <footnote>È possibile evitare di applicare la patch con <prgn>quilt</prgn>,
  nel formato sorgente <tt>3.0 (quilt)</tt>, aggiungento il parametro
  <tt>--skip-patches</tt> al comando di estrazione. In alternativa, è possibile
  eseguire "<tt>quilt pop -a</tt>" dopo le normali operazioni.</footnote>

  <item><file>gentoo_0.9.12-1_i386.deb</file>

  <p>Questo è il pacchetto binario completo. Si può usare <prgn/dpkg/
  per installarlo e rimuoverlo, come per ogni altro pacchetto.

  <item><file>gentoo_0.9.12-1_i386.changes</file>
  
  <p>Questo file descrive tutte le modifiche effettuate nella revisione
  corrente del pacchetto, ed è usata dai programmi di manutenzione dell'archivio
  FTP di Debian, per installare i pacchetti binari e sorgenti. È generato parzialmente
  dal contenuto del file <file>changelog</file> e dal file <file>.dsc</file>. Questo file è firmato con GPG, 
  in modo da confermare l'autenticità dell'autore del pacchetto.

  <p>Quando si lavora sul pacchetto, potrebbero cambiare il funzionamento del
  programma, o potrebbero venire introdotte nuove funzionalità. Chi scaricherà
  il pacchetto, potrà controllare questo file per vedere velocemente quali sono i cambiamenti.
  I programmi di manutenzione dell'archivio Debian invieranno anche
  i contenuti di questo file alla mailing list <url id="http://lists.debian.org/debian-devel-announce/"
  name="debian-devel-announce@lists.debian.org">.
  </list>
  
  <p>Le lunghe stringhe di numeri nei file <file>.dsc</file> e
  <file>.changes</file> sono codici di controllo MD5/SHA1/SHA256 per i file
  menzionati. Chi scarica questi file, può controllarli con <manref
  name="md5sum" section="1">, <manref name="sha1sum" section="1">, o <manref
  name="sha256sum" section="1"> e se i numeri non corrispondessero
  saprebbe che il file relativo è corrotto, o è stato alterato. 

  <sect id="autobuilder">Auto-costruzione

  <p>Debian supporta molti <url name="port" id="http://www.debian.org/ports/">
  tramite la <url name="autobuilder network" id="http://www.debian.org/devel/buildd/">,
  su cui sono in esecuzione i demoni di <prgn>buildd</prgn> su molti computer con architetture differenti.
  Anche se non sarà necessario fare questo da soli, si dovrebbe essere
  consapevoli di quello che succederà ai pacchetti. Si vedrà, in maniera non
  approfondita, come i pacchetti vengono ricostruiti per architetture differenti.
  <footnote>L'attuale sistema di auto-costruzione è molto più complicato di
  come è qui documentato. Tali dettagli esulano dallo scopo del documento.</footnote>

  <p>I pacchetti con "<tt>Architecture: any</tt>", verranno ricostruiti dal sistema di
  auto-costruzione. Ci si assicuri di avere installato
  <list>
  <item>il pacchetto <package>build-essential</package>, e
  <item>i pacchetti elencati nel campo <tt>Build-Depends:</tt> (vedere <ref id="control">).
  </list>

  <p>Dopo si può eseguire il comando seguente nella directory dei sorgenti:

<example>
$ dpkg-buildpackage -B
</example>

  <p>Questo comando creerà i pacchetti binari e sorgenti al posto vostro. Eseguirà le seguenti operazioni:
  <list>
    <item>pulirà l'albero dei sorgenti ("<tt>debian/rules clean</tt>")
    <item>costruirà il programma ("<tt>debian/rules build</tt>")
    <item>costruirà il pacchetto binario per una specifica architettura
    ("<tt>fakeroot debian/rules binary-arch</tt>")
    <item>firmerà il file sorgente <file/.dsc/ file, usando <prgn/gpg/
    <item>creerà e firmerà il file di upload <file/.changes/ file, usando
          <prgn/dpkg-genchanges/ e <prgn/gpg/
  </list>

  <p>È questo il motivo per il quale si vede il proprio pacchetto per altre architetture.

  <p>Anche se i pacchetti sono elencati nel campo <tt>Build-Depends-indep:</tt>,
  per la normale creazione del pacchetto, devono comunque essere installati
  (vedere <ref id="completebuild">), invece per il sistema di auto-costruzione non
  è necessario installarli dato che costruisce solamente pacchetti binari per una
  specifica architettura.
  <footnote>Diversamente dal pacchetto <package>pbuilder</package>, l'ambiente
  <prgn>chroot</prgn> sotto il pacchetto <package>sbuild</package>, usato dal
  sistema di auto-costruzione, non forza la creazione di un sistema minimale,
  e potrebbe lasciare installati molti pacchetti.</footnote>
  Questa differenza tra la normale pacchettizzazione e il sistema di auto-costruzione
  determina se i pacchetti richiesti devono essere registrati nei campi <tt>Build-Depends:</tt> o
  <tt>Build-Depends-indep:</tt> nel file <file>debian/control</file> (vedere <ref id="control">).

  <sect id="option-sa">DA_CONTROLLARE Includere <file>orig.tar.gz</file> per il caricamento.

  <p>
  Quando si carica per la prima volta il pacchetto nell'archivio, si deve includere
  il file dei sorgenti originali <file>orig.tar.gz</file>.  
  DA_CONTROLLARE Se l'ultima voce del changelog non è la prima della versione originale, si
  deve eseguire il comando <prgn>dpkg-buildpackage</prgn> con l'attributo "<tt>-sa</tt>".
  Al contrario, l'opzione "<tt>-sd</tt>" forzerà l'esclusione del sorgente
  originale <file>orig.tar.gz</file>.

  <sect id="debuild">Il comando <prgn>debuild</prgn>

  <p>È possibile automatizzare ulteriormente il processo di creazione del
  pacchetto, eseguito con il comando <prgn>dpkg-buildpackage</prgn>,
  utilizzando il comando <prgn>debuild</prgn>.
  Vedere <manref name="debuild" section="1">.
  
  <p>La configurazione del comando <prgn>debuild</prgn> può essere fatta
  usando <file>/etc/devscripts.conf</file> o <file>~/.devscripts</file>. 
  Ecco alcune impostazioni consigliate:

<example>
DEBSIGN_KEYID="ID_della_vostra_chiave_GPG"
DEBUILD_LINTIAN=yes
DEBUILD_LINTIAN_OPTS="-i -I --show-overrides"
</example>
  Con queste impostazioni, i pacchetti saranno firmati usando la chiave GPG
  con l'ID specificato (questo è utile per le sponsorizzazioni) e controllati
  con il programma <prgn>lintian</prgn> in modo dettagliato.
  
  <p>Per esempio, si può ripulire i sorgenti e ricreare il pacchetto da un
  account utente, con:
<example>
$ debuild
</example>

  <p>Si noti che per includere il sorgente originale <file>orig.tar.gz</file>,
  si può utilizzare <prgn>dpkg-buildpackage</prgn> con il parametro "<tt>-sa</tt>", come riportato di seguito:
<example>
$ debuild -sa
</example>

  <p>È possibile ripulire l'albero dei sorgenti con:
<example>
$ debuild clean
</example>

  <sect id="pbuilder">Il pacchetto <package>pbuilder</package>
  <p>
  Il pacchetto <package>pbuilder</package> è molto utile per verificare le 
  dipendenze di creazione del pacchetto da un ambiente (<prgn>chroot</prgn>) di compilazione sano e minimale.
  <footnote><package>pbuilder</package> è ancora in evoluzione, si dovrebbe 
  controllare l'attuale configurazione consultando la documentazione ufficiale
  più recente.</footnote>
  DA_CONTROLLARE Questo assicura di compilare i sorgenti in maniera pulita, usando la
  distribuzione <tt>sid</tt> un compilatore automatico (auto-builder)
  per differenti architetture ed evita i bug FTBS (Fails To Build from Source) di severità seria, che sono
  sempre di categoria RC (Critici per il Rilascio). Vedi <url id="&buildd-home;"> per maggiori
  informazioni sul compilatore automatico di pacchetti Debian. 
  

<p>Si configuri il pacchetto <package>pbuilder</package> come segue.
<list>
<item>impostare il permesso di scrittura per l'utente alla directory
<file>/var/cache/pbuilder/result</file>. 
<item>creare una directory, ad es. <file><var>/var/cache/pbuilder/hooks</var></file>,
con i permessi di scrittura per l'utente per potergli inserire degli script di hook.
<item>configurare il file <file>~/.pbuilderrc</file> o
<file>/etc/pbuilderrc</file> in modo che includa le seguenti righe.
<example>
AUTO_DEBSIGN=yes
HOOKDIR="<var>/var/cache/pbuilder/hooks</var>"
</example>
</list>

<p>Questo permetterà di firmare i pacchetti generati con la tua chiave GPG
segreta situata nella directory <file>~/.gnupg/</file>.

<p>Si avvii <package>pbuilder</package> per costruire l'ambiente
<prgn>chroot</prgn> locale, come segue.
<example>
$ sudo pbuilder create
</example>

<p>Se si hanno già i pacchetti sorgenti, eseguire i seguenti comandi nella
directory in cui si trovano i file <file><var>foo</var>.orig.tar.gz</file>,
<file><var>foo</var>.debian.tar.gz</file>, e <file><var>foo</var>.dsc</file>
per aggiornare l'ambiente <prgn>chroot</prgn> di <package>pbuilder</package>
e per costruirci dentro il pacchetto binario.
<example>
$ sudo pbuilder --update
$ sudo pbuilder --build <var>foo</var>.dsc
</example>

  <p>Si noti che il programma <prgn>dpkg-buildpackage</prgn> eseguito con
  l'opzione "<tt>-sa</tt>", può includere il sorgente originale <file>orig.tar.gz</file>, DA_CONTROLLARE eccone un esempio:
<example>
$ sudo pbuilder --build --debbuildopts "-sa" <var>foo</var>.dsc
</example>

<p>
Il nuovo pacchetto sarà creato nella directory <file>/var/cache/pbuilder/result/</file>
con proprietà non assegnata all'utente root.

<p>Se si ha già l'albero dei sorgenti aggiornato, senza generare i rispettivi pacchetti
sorgenti, eseguire i seguenti comandi nella directory dei sorgenti in cui si
trova il file <file>debian</file>.
<example>
$ sudo pbuilder --update
$ pdebuild
</example>

  <p>Si noti che il programma <prgn>dpkg-buildpackage</prgn> eseguito con
  l'opzione "<tt>-sa</tt>", può includere il sorgente originale <file>orig.tar.gz</file>, DA_CONTROLLARE eccone un esempio:
<example>
$ pdebuild --debbuildopts "-sa"
</example>

<p>È possibile accedere all'ambiente <prgn>chroot</prgn> con il comando
"<tt>pbuilder --login --save-after-login</tt>" e configurarlo come si vuole.
Questo ambiente può essere salvato, semplicemente uscendo dalla shell con
<tt>^D</tt> (Control-D).

<p>L'ultima versione del programma <prgn>lintian</prgn> può essere eseguita
nell'ambiente <tt>chroot</tt>, usando gli script di hook, configurati come segue.
<footnote>È possibile trovare numerosi esempi di script di hook, nella
directory <file>/usr/share/doc/pbuilder/examples</file>.</footnote>
<example>
$ cat &gt; <var>/var/cache/pbuilder/hooks</var>/B90lintian &lt;&lt;EOF
#!/bin/sh
set -e
install_packages() {
    apt-get -y --force-yes install "$@"
    }
install_packages lintian
echo "+++ lintian output +++"
su -c "lintian -i -I --show-overrides /tmp/buildd/*.changes" - pbuilder
# use this version if you don't want lintian to fail the build
#su -c "lintian -i -I --show-overrides /tmp/buildd/*.changes; :" - pbuilder
echo "+++ end of lintian output +++"
EOF
</example>

<p>
Vedere <url id="&pbuilder-home;">,
<manref section="1" name="pdebuild">,
<manref section="5" name="pbuilderrc">, e
<manref section="8" name="pbuilder">.

  <sect id="git-buildpackage">Il comando <prgn>git-buildpackage</prgn> ed altri simili
  <p>
  Se l'autore originale utilizza un sistema di controllo di versione (<url id="http://www.debian.org/doc/manuals/debian-reference/ch10.en.html#_version_control_systems" name="VCS">) 
  per gestire il proprio codice, si dovrebbe prendere in considerazione di usarlo.
  Questo rende molto più semplice la fusione e la raccolta di patch dai sorgenti originali.
  Ci sono diversi pacchetti di script adatti alla costruzione di pacchetti Debian per ogni sistema VCS.
<list>
<item><package>git-buildpackage</package>: Suite to help with Debian packages in Git repositories.
<item><package>topgit</package>: un gestore di code per le patch che utilizza Git
<item><package>svn-buildpackage</package>: programmi di supporto per mantenere i pacchetti Debian con Subversion.
<item><package>cvs-buildpackage</package>: una serie di script per i pacchetti Debian per gli alberi di sorgenti sotto CVS.
</list>

<p>Questi pacchetti offrono un'alternativa più elegante, per gli utenti più esperti,
all'utilizzo manuale del comando <prgn>quilt</prgn>, per <em>automatizzare</em>
la creazione dei pacchetti. Non verranno trattati in questo manuale.
<footnote>
Ecco alcune risorse web, per gli utenti esperti.
<list>
<item>"<url name="debian packages in git" id="https://honk.sigxcpu.org/piki/development/debian_packages_in_git/">"
<item>"<url name="Using Git for Debian Packaging" id="http://www.eyrie.org/~eagle/notes/debian/git.html">"
<item>"<url name="Using TopGit to generate quilt series for Debian packaging" id="http://git.debian.org/?p=collab-maint/topgit.git;a=blob_plain;f=debian/HOWTO-tg2quilt;hb=HEAD">"
<item>"<url name="git-dpm: debian packages in git manager" id="http://git-dpm.alioth.debian.org/">"
</list>
</footnote>

  <sect id="quickrebuild">Ricostruzione veloce

  <p>Con un pacchetto di grandi dimensioni, si potrebbe non voler ricostruire tutto da zero,
  ogni volte che si modifica un dettaglio in <file>debian/rules</file>. Per
  effettuare delle prove, si può creare un file <file>.deb</file>, senza
  ricompilare i sorgenti originali, come segue:
<footnote>Le variabili d'ambiente, che sono normalmente impostate con dei valori corretti, non sono
utilizzati in questa modalità. Mai creare dei pacchetti, che poi andranno caricati,
utilizzando il metodo <strong>veloce</strong>.</footnote>:

<example>
$ fakeroot debian/rules binary
</example>

Oppure, semplicemente controllando se costruirlo o no. Come:

<example>
$ fakeroot debian/rules build
</example>

  <p>Una volta completati i vari aggiustamenti, bisogna ricordarsi di ricostruire il
  pacchetto usando la giusta procedura. Si potrebbe non essere in grado di caricare il
  pacchetto correttamente se si prova con dei file <file>.deb</file> creati in questo modo.


  <chapt id="checkit">Controllare il pacchetto per errori
  
  <p>Ci sono un paio di questioni da tenere in conto per controllare autonomamente che il pacchetto
  creato sia privo di errori prima di procedere a caricarlo negli archivi pubblici.

  <p>Effettuare dei test su altre macchine oltre a quella con cui si è sviluppato è una buona idea.
  Si deve inoltre fare attenzione a tutti gli avvisi ed agli errori per tutti i test che verranno qui descritti.

  <sect id="pinstall">Verifica del pacchetto per l'installazione

  <p>Bisogna verificare che il pacchetto si installi senza problemi.
  Il comando <manref name="debi" section="1"> aiuta a testare l'installazione
  di tutti i pacchetti binari generati.

<example>
$ sudo debi gentoo_0.9.12-1_i386.changes
</example>

  <p>Bisogna assicurarsi che non ci siano file che si sovrappongono ad altri
  pacchetti esistenti utilizzando il file <file>Contents-<var>i386</var></file>
  scaricato dall'archivio Debian per prevenire problemi di installazione su 
  sistemi differenti. Il comando <prgn>apt-file</prgn> può tornare utile a questo
  scopo. Se ci sono file che si sovrappongono, si prega di prendere delle misure
  per evitare l'insorgere del problema utilizzando meccanismi alternativi (si veda 
  <manref name="update-alternatives" section="1">) che permettondo di coordinarsi
  con gli altri pacchetti interessati o settano la voce "<tt>Conflicts:</tt>" nel file
  <file>debian/control</file>.

  <sect id="pmaintscripts">Verifica del pacchetto per gli <em>script del manutentore</em>

  <p>Tutti gli <em>script del manutntore</em>, ad esempio, <file>preinst</file>,
  <file>prerm</file>, <file>postinst</file>, e <file>postrm</file>, non sono
  di poco conto a meno che non siano stati generati automaticamente dai programmi di
  <package>debhelper</package>.  Si consiglia pertanto di non utilizzarli se non si
  ha sufficiente esperienza come manutentore (si veda <ref id="maintscripts">).

  <p>Se il pacchetto utilizza questi particolari <em>script del manutentore</em>,
  ci si assicuri di effettuare delle prove non solo per l'operazione di install, ma anche per
  il remove, purge, e l'upgrade.
  Molti bu degli <em>script del manutentore</em> vengono fuori quando i pacchetti sono rimossi o
  viene applicato il purge. Si utilizzi il comando <prgn>dpkg</prgn> nel seguente modo per testarli.

<example>
$ sudo dpkg -r gentoo
$ sudo dpkg -P gentoo
$ sudo dpkg -i gentoo_<var>version</var>-<var>revision</var>_<var>i386</var>.deb
</example>

  <p>Questa operazione si dovrebbe effettuare con delle sequenze di questo tipo.
  
  <list>
    <item>installazione della versione precedente (se necessaria).
    <item>aggiornamento dalla versione precedente.
    <item>ritorno alla versione precedente (opzionale).
    <item>applicazione del purge.
    <item>installazione del nuovo pacchetto.
    <item>rimozione del pacchetto.
    <item>reinstallazione del pacchetto.
    <item>applicazione del purge.
  </list>

  <p>Se si sta creando il primo pacchetto, andrebbero creati dei pacchetti fittizi con
  diversi numeri di versione per testare il pacchetto originale in anticipo e prevenire
  problemi futuri.

  <p>Si tenga in mente che se il pacchetto è stato già rilasciato in Debian,
  le persone spesso effettueranno un aggiorneranno a quest'ultimo a partire dall'ultima
  versione disponibile su Debian. Si ricordi di testare gli aggiornamenti anche a partire da questa
  versione.

  <p>Anche se il ritorno ad una versione precedente non è supportato ufficialmente, sarebbe
  buona abitudine che lo fosse.

  <sect id="lintians">Il pacchetto <package>lintian</package>

  <p>Si esegua <manref name="lintian" section="1"> sul file <file>.changes</file>.
  Il comando <prgn>lintian</prgn> esegue molti script di test alla ricerca dei più comuni
  errori di impacchettamento.
  <footnote>Non c'è bisogno di fornire l'opzione <prgn>lintian</prgn> 
  "<tt>-i -I --show-overrides</tt>" se si è personalizzato il file <file>/etc/devscripts.conf</file> o
  il file <file>~/.devscripts</file> come descritto in <ref id="debuild">.
  </footnote> 
  
<example>
$ lintian -i -I --show-overrides gentoo_0.9.12-1_i386.changes
</example>

  <p>Ovviamente va rimpiazzato il nome con quello del file <file>.changes</file>
  generato per il pacchetto. I risultati del comando <prgn>lintian</prgn>
  vengono qui elencati di seguito.
  <list>
  <item><tt>E:</tt> errore; una violazione certa di una policy o un errore di impacchettamento.
  <item><tt>W:</tt> attenzione; una possibile violazione di policy o un errore di impacchettamento.
  <item><tt>I:</tt> informazione; una informazione su alcuni aspetti dell'impacchettamento.
  <item><tt>N:</tt> nota; un messaggio dettagliato per aiutare nell'analisi degli errori.
  </list>

  <p>Per gli avvertimenti, si imposti il pacchetto in modo tale da evitarli o si verifichi che tali avvertimenti
  non siano indicativi di un errore. In quest'ultimo caso, si impostino i file <file>lintian-overrides</file>
  come descritto in <ref id="lintian">.

  <p>Si noti che si può costruire il pacchetto con <prgn/dpkg-buildpackage/ ed eseguire
  <prgn/lintian/ su di esso in una sola volta con <manref name="debuild" section="1"> o 
  con <manref name="pdebuild" section="1">.
  
  <sect id="debc">Il comando <prgn>debc</prgn>

  <p>Si possono elemcare i file nel pacchetto binario Debian con il comando
  <manref name="debc" section="1">. 

<example>
$ debc <var>package</var>.changes
</example>

  <sect id="debdiff">Il comando <prgn>debdiff</prgn>

  <p>Si può confrontare il contenuto dei file in due pacchetti sorgente Debian con il
  comando <manref name="debdiff" section="1">.  

<example>
$ debdiff <var>old-package</var>.dsc <var>new-package</var>.dsc
</example>

  <p>Si possono anche confrontare le liste di file in due set di pacchetti binari Debian con
  il comando <manref name="debdiff" section="1">.  

<example>
$ debdiff <var>old-package</var>.changes <var>new-package</var>.changes
</example>

  <p>Questi comandi sono utili per vedere cosa sia cambiato nei pacchetti sorgente,
  se alcun file sia stato spostato non avvertitamente o rimosso dai pacchetti,
  e se altri cambiamenti non intenzionali siano stati fatti durante l'aggiornamento dei pacchetti binari.

  <sect id="interdiff">Il comando <prgn>interdiff</prgn>

  <p>Si possono confrontare due file <file>diff.gz</file> con il comando 
  <manref name="interdiff" section="1">. Questo è utile per verificare che il manutentore
  non abbia inavvertitamente fatto dei cambiamenti ai sorgenti durante il processo
  di aggiornamento dei pacchettinel vecchio formato sorgente <tt>1.0</tt>.

<example>
$ interdiff -z <var>old-package</var>.diff.gz <var>new-package</var>.diff.gz
</example>

  <sect id="mc">Il comando <prgn>mc</prgn>

  <p>Molte delle operazione di ispezione dei file possono essere rese più semplici
  utilizzando un gestore dei file come <manref name="mc" section="1">, che permette di
  navigare non solo il contenuto dei pacchetti in formato <file>*.deb</file> ma anche
  degli <file>*.udeb</file>, <file>*.debian.tar.gz</file>,
  <file>*.diff.gz</file>, e dei file <file>*.orig.tar.gz</file>.
  <p> 
  Si faccia attenzione ad ulteriori file non necessari o vuoti, sia nel
  pacchetto binario che in quello sorgente. Spesso non vengono ripuliti
  correttamente; si aggiusti il file <file>rules</file> per riparare a questo problema.

  <chapt id="upload">Caricamento del pacchetto

  <p>Una volta testato il nuovo pacchetto approfonditamente, 
  si potrà procedere con il processo di candidatura a nuovo manutentore Debian, come descritto in 
  <url id="http://www.debian.org/devel/join/newmaint">.

  <sect id="upload-debian">Caricamento nell'archivio Debian

  <p>Una volta diventati sviluppatori ufficiali, 
  si dovrà caricare il pacchetto nell'archivio Debian.
  Si potebbe fare manualmente, ma è più semplice usare i tool automatici che vengono forniti, come
  <manref name="dupload" section="1"> o <manref name="dput" section="1">.
  Verrà qui descritto come tutto ciò può essere fatto utilizzando <prgn/dupload/.
  <footnote>
  Il pacchetto <package>dput</package> sembra avere più funzionalità e sta divenendo
  più famoso del pacchetto <package>dupload</package>. Questo utilizza il file
  <file>/etc/dput</file> per la configurazione globale ed il file
  <file>~/.dput.cf</file> per quella dei singoli utenti. Inoltre supporta
  nativamente anche i servizi relativi ad Ubuntu.
  </footnote>

  <p>Innanzitutto andrà impostato il file di configurazione di <prgn>dupload</prgn>. Si può modificare
  il file <file>/etc/dupload.conf</file> per l'intero sistema, oppure far si che il file
  <file>~/.dupload.conf</file> sovrascriva le poche cose che si vogliono
  cambiare.

  <p>Si legga la pagina del manuale <manref name="dupload.conf" section="5"> 
  per capire cosa significhino tutte le opzioni.

  <p>L'opzione <tt>$default_host</tt> determina quali tra le code di caricamento
  vengano utilizzate di default. <tt>anonymous-ftp-master</tt> è quella primaria,
  ma è possibile utilizzarne anche altre.

  <p>Se si è connessi ad internet, si può caricare il proprio pacchetto con il comando:
  
<example>
$ dupload gentoo_0.9.12-1_i386.changes
</example>

  <p><prgn/dupload/ controlla che i checksum MD5/SHA1/SHA256 dei file corrispondano con quelli
  del file <file>.changes</file>, così si verrà avvertiti di ricostruire il pacchetto come descritto in
  <ref id="completebuild"> per poi poterlo ricaricare.

  <!-- (No more use of ftp-master nor faster queue.  It is not so useful these days.
  <p>If you upload to "ftp-master", <prgn/dupload/ will ask for your
  password on Debian machines, and then upload the packages.
  -->

  <p>Se si incontrano problemi nel caricamento su <url id="&ftp-uploadqueue;">,
  si può porre rimedio caricando automaticamente il file <file>*.commands</file>
  firmato con GPG via <prgn>ftp</prgn>.
  <footnote>
  Si veda <url id="&ftp-command;">.  Alternativamente, si può utilizzare
  il comando <prgn>dcut</prgn> del pacchetto <package>dput</package>.
  </footnote>
  Per esempio, si prenda il file <file>hello.commands</file>:
<example>
-----BEGIN PGP SIGNED MESSAGE-----

Uploader: Foo Bar &lt;Foo.Bar@example.org&gt;
Commands: 
 rm hello_1.0-1_i386.deb
 mv hello_1.0-1.dsx hello_1.0-1.dsc

-----BEGIN PGP SIGNATURE-----
Version: 2.6.3ia

iQCVAwUBNFiQSXVhJ0HiWnvJAQG58AP+IDJVeSWmDvzMUphScg1EK0mvChgnuD7h
BRiVQubXkB2DphLJW5UUSRnjw1iuFcYwH/lFpNpl7XP95LkLX3iFza9qItw4k2/q
tvylZkmIA9jxCyv/YB6zZCbHmbvUnL473eLRoxlnYZd3JFaCZMJ86B0Ph4GFNPAf
Z4jxNrgh7Bc=
=pH94
-----END PGP SIGNATURE-----
</example>

  <p>Si veda <url name="mentors.debian.net"
  id="http://mentors.debian.net/cgi-bin/welcome"> per l'area pubblica di
  caricamento per gli sviluppatori non Debian.

  <p>Si veda <url name="Debian Reference, 2.7.12. 'Small public package archive'"
  id="http://www.debian.org/doc/manuals/debian-reference/ch02.en.html#_small_public_package_archive">
  per avere un esempio di creazione di un piccolo archivio pubblico di pacchetti
  che sia compatibile con il moderno e sicuro sistema APT.
 
  <chapt id="update">Aggiornamento del pacchetto
 
  <p>Una volta rilasciato un pacchetto, ci sarà presto bisogno di aggiornarlo.

  <sect id="newrevision">Nuova revisione Debian

  <p>Si supponga che sia stato compilato il bug report <tt>#54321</tt> per il pacchetto creato,
  e che questo descriva un problema che si può risolvere. Per creare una nuova revisione
  del pacchetto Debian, si proceda come qui di seguito descritto:

  <list>
  <item>Se la modifica deve essere registrata come una nuova patch, si seguano queste istruzioni.
  <list>
  <item>"<tt>quilt new <var>bugname.patch</var></tt>" per impostare il nome della patch.
  <item>"<tt>quilt add <var>buggy-file</var></tt>" per indicare i file modificati.
  <item>Correggere il problema evidenziato dal bug report nel pacchetto sorgente.
  <item>"<tt>quilt refresh</tt>" per registrare le modifiche in <file><var>bugname.patch</var></file>.
  <item>"<tt>quilt header -e</tt>" per aggiungere una descrizione.
  </list>
  <item>Se la modifica è un aggiornamento ad una patch esistente, si seguano queste istruzioni.
  <list>
  <item>"<tt>quilt pop <var>foo.patch</var></tt>" per richiamare la patch <file><var>foo.patch</var></file> esistente.
  <item>Correggere il problema nella vecchia patch <file><var>foo.patch</var></file>.
  <item>"<tt>quilt refresh</tt>" per aggiornare <file><var>foo.patch</var></file>.
  <item>"<tt>quilt header -e</tt>" per aggiornarne la descrizione.
  <item>"<tt>while quilt push; do quilt refresh; done</tt>" per applicare
  tutte le patch mentre si sta rimuovendo il "<em>fuzz</em>" (n.d.t. rimuovendo cioè il superfluo).
  </list>
  <item>Aggiuungere una nuova revisione in cima al file di <file>changelog</file> Debian, per esempio
  con "<tt>dch -i</tt>", o esplicitamente con
  "<tt>dch -v <var>version</var>-<var>revision</var></tt>"
  e poi inserire i commenti utilizzando l'editor preferito.
  <footnote>Per impostare la data nel formato corretto, si usi "<tt>LANG=C date -R</tt>".</footnote>

  <item>Includere nella nuova voce del changelog una breve descrizione del problema e della
  relativa soluzione,
  seguita da "<tt>Closes: #54321</tt>". In questo modo, il report del problema verrà
  <em>automagicamente</em> chiuso dal programma di manutenzione dell'archivio Debian nel momento
  stesso in cui il pacchetto viene accettato.

  <item>Si ripetano questi passaggi per risolvere ulteriori problemi e si ricordi nel frattempo
  di aggiornare il file Debian di <file>changelog</file> con "<tt>dch</tt>" a seconda della necessità.

  <item>Si ripetano i passi fatti in <ref id="completebuild">, <ref id="checkit">,
  e <ref id="upload">. La differenza è che questa volta, l'archivio sorgente originale
  non sarà incluso, dal momento che non è stato modificato ed esiste già
  nell'archivio Debian.
  </list>

  <sect id="inspectnewupstream">Controllo della nuova distribuzione

  <p>Quando si stanno preparando i pacchetti della nuova distribuzione per l'archivio
  Debian, bisogna innanzitutto effettuare dei controlli.

  <p>Si comincia leggendo i file originali <file>changelog</file>,
  <file>NEWS</file>, e qualsiasi altra documentazione che possa essere stata rilasciata
  con la nuova versione.

  <p>Successivamentesi controllano i cambiamenti tra i sorgenti originali e quelli nuovi,
  come mostrato in seguito, alla ricerca di qualsiasi modifica sospetta.
<example>
$ diff -urN <var>foo</var>-<var>oldversion</var> <var>foo</var>-<var>newversion</var>
</example>

  <p>Cambiamenti effettuati ad alcuni file generati automaticamente dagli autotools come
  <file>missing</file>, <file>aclocal.m4</file>, <file>config.guess</file>,
  <file>config.h.in</file>, <file>config.sub</file>, <file>configure</file>,
  <file>depcomp</file>, <file>install-sh</file>, <file>ltmain.sh</file>, e
  <file>Makefile.in</file> possono essere ignorati. Possono anzi venire cancellati prima
  di eseguire <prgn>diff</prgn> per controllare i sorgenti.

  <sect id="newupstream">Nuova distribuzione

  <p>Se un pacchetto <package><var>foo</var></package> è stato impacchettato correttamente
  nei nuovi formati <tt>3.0 (native)</tt> o <tt>3.0 (quilt)</tt>,
  si rende necessario impacchettare anche la versione originale muovendo la directory
  <file>debian</file> nella nuova sorgente.  Questo può essere fatto eseguendo
  "<tt>tar xvzf /<var>path</var>/<var>to</var>/<var>foo</var>_<var>oldversion</var>.debian.tar.gz</tt>" 
  nella nuova directory sorgente scompattata.
  <footnote>
  <p>Se un pacchetto <package><var>foo</var></package> è stato impacchettato nel vecchio
  formato <tt>1.0</tt>, si deve invece eseguire
  "<tt>zcat /<var>path</var>/<var>to</var>/<var>foo</var>_<var>oldversion</var>.diff.gz|patch -p1</tt>" 
  nella nuova directory sorgente scompattata.
  </footnote>
  Ovviamente bisognerà effettuare alcuni passaggi.
  <list>
  <item>Creare una copia dela sorgente originale nel file <file>foo_<var>newversion</var>.tar.gz</file>.
  <item>Aggiornare il file di <file>changelog</file> Debian con 
  "<tt>dch -v <var>newversion</var>-<var>1</var></tt>".
  <list>
  <item>Aggiungere una voce che dica "New upstream release".
  <item>Descrivere brevemente i cambiamenti <em>nella nuova distribuzione</em>
  che correggono i bug riportati e ne chiudono altri.
  <item>Descrivere brevemente i cambiamenti <em>nella nuova distribuzione</em>, effettuati
  dal manutentore, che correggono i bug riportati e li chiudono.
  </list>
  <item>"<tt>while quilt push; do quilt refresh; done</tt>" per applicare tutte le patch mentre si sta rimouvendo il "<em>fuzz</em>".
  </list>
 

  <p>Se la patch/merge non è stata applicata in maniera corretta, si controlli la situazione (gli indizi vengono lasciati nei file <file>.rej</file>).
  <list>
  <item>Se una patch applicata alla sorgente è stata integrata nei sorgenti originali,
  <list>
  <item>si rimuova con "<tt>quilt delete</tt>".
  </list>
  <item>Se una patch applicata alla sorgente è andata in conflitto con i nuovi cambiamenti ni sorgenti originali,
  <list>
  <item>si esegua "<tt>quilt push -f</tt>" per applicare le vecchie patch forzando gli scarti nel file
  <file><var>baz</var>.rej</file>.
  <item>Modificare manualmente il file <file><var>baz</var></file> per applicare gli effetti desiderati
  presenti nel file <file><var>baz</var>.rej</file>.
  <item>"<tt>quilt refresh</tt>" per aggiornare la patch.
  </list>
  <item>Ritornare alla procedura "<tt>while quilt push; do quilt refresh; done</tt>".
  </list>

  <p> Questo processo può essere automatizzato utilizzando il comando <manref name="uupdate" section="1"> come segue:
  <example>
$ apt-get source <var>foo</var>
...
dpkg-source: info: extracting <var>foo</var> in <var>foo</var>-<var>oldversion</var>
dpkg-source: info: unpacking <var>foo</var>_<var>oldversion</var>.orig.tar.gz
dpkg-source: info: applying <var>foo</var>_<var>oldversion</var>-1.debian.tar.gz
$ ls -F
<var>foo</var>-<var>oldversion</var>/
<var>foo</var>_<var>oldversion</var>-1.debian.tar.gz
<var>foo</var>_<var>oldversion</var>-1.dsc
<var>foo</var>_<var>oldversion</var>.orig.tar.gz
$ wget http://sf.net/<var>foo</var>/<var>foo</var>-<var>newversion</var>.tar.gz
$ cd <var>foo</var>-<var>oldversion</var>
$ uupdate -v <var>newversion</var> ../<var>foo</var>-<var>newversion</var>.tar.gz
$ cd ../<var>foo</var>-<var>newversion</var>
$ while quilt push; do quilt refresh; done
$ dch
... cambiamenti effettuati al documento
</example>

  <p>Se si imposta un file <file>debian/watch</file> come descritto in <ref
  id="watch">, si può saltare il comando <prgn>wget</prgn>.  Basterà eseguire
  <manref name="uscan" section="1"> nella directory
  <file><var>foo</var>-<var>oldversion</var></file> al posto del comando
  <prgn>uupdate</prgn>.  Questo cercherà <em>automagicamente</em> i sorgenti
  corretti, li scaricherà ed eseguirà <prgn>uupdate</prgn>.

  <p>Si possono rilasciare questi sorgenti aggiornati ripetendo ciò che si è fatto in <ref
  id="completebuild">, <ref id="checkit">, ed <ref id="upload">.

  <sect id="packagestyle">Aggiornare lo stile di impacchettamento

  <p>L'aggiornamento dello stile del pacchetto non è una attività obbligatoria nel processo di aggiornamento
  di quest'ultimo. Tuttavia facendo ciò si può sfruttare appieno la capacità del moderno sistema
  <package>debhelper</package> ed il formato sorgente 
  <tt>3.0</tt>.
  <footnote>Se il proprio sponsor o altri manutentori non ritengono sia necessario aggiornare
  lo stile del pacchetto, allora non vale la pena impegnarcisi.  Ci sono cose
  più importanti da fare.</footnote>

<list>

  <item>Se c'è bisogno per qualsiasi motivo di aggiungere file di template cancellati, si può ancora
  eseguire il comando <prgn>dh_make</prgn> nella stessa directory, già <em>debianizzata</em>,
  con l'opzione <tt>--addmissing</tt>.  Fatto ciò si potrà modificarla di conseguenza.
  
  <item>Se il pacchetto non è stato aggiornato per utilizzare la sintassi V7 di <prgn>dh</prgn> del
  pacchetto <package>debhelper</package> per il file <file>debian/rules</file>, si deve effettuare una aggiornamento
  per poter usare <prgn>dh</prgn>.  Si aggiorni di conseguenza anche il file <file>debian/control</file>.

  <item>Se si vuole aggiornare il file <file>rules</file> creato con il meccanismo di 
  inclusione del makefile del Common Debian Build System
  (<package>cdbs</package>) per la sintassi di <prgn>dh</prgn>, si veda
  <file>/usr/share/doc/cdbs/cdbs-doc.html</file> e si presti attenzione alle
  sue variabili di configurazione <tt>DEB_*</tt>. 
  <footnote>Nel pacchetto <package>cdbs</package> (0.4.74), ci sono alcune
  note errate riguardo al file <file>rules</file> creato dal comando
  <prgn>dh_make</prgn> per le scelte che non utilizzano <package>cdbs</package>.
  Non ce se ne deve preoccupare. Queste ultime si riferivano solo alla distribuzione <tt>lenny</tt>
  che creava esplicitamente delle regole DA_CONTROLLARE come una lunga lista di comandi <prgn>dh_*</prgn>.</footnote>
  
  <item>Se si ha un pacchetto sorgente nella versione <tt>1.0</tt> senza il file
  <file><var>foo</var>.diff.gz</file>, si può aggiornare al nuovo formato sorgente 
  <tt>3.0 (native)</tt> creando il file
  <file>debian/source/format</file> con "<tt>3.0 (native)</tt>".  Gli altri file
  <file>debian/*</file> possono essere semplicemente copiati.

  <item>Se si ha un pacchetto sorgente nella versione <tt>1.0</tt> con il file
  <file><var>foo</var>.diff.gz</file> , si può aggiornare al nuovo formato sorgente
  <tt>3.0 (native)</tt> creando il file
  <file>debian/source/format</file> con "<tt>3.0 (quilt)</tt>".  Gli altri file
  <file>debian/*</file> possono essere semplicemente copiati. Si importi il file
  <file>big.diff</file> generato dal comando
  "<tt>filterdiff -z -x '*/debian/*' <var>foo</var>.diff.gz &gt; big.diff</tt>" 
  nel sistema <prgn>quilt</prgn>, se richiesto.

  <item>Se è stato pacchettizzato con il comando <package>dpatch</package>, si converta
  con il comando <package>quilt</package> usando lo script
  <file>/usr/share/doc/quilt/examples/dpatch2quilt.sh</file>.

</list>

  <p>Ci sarà anche bisogno di eseguire ulteriori operazioni descritte in <ref id="newupstream">.

  <sect id="reminders">Note per l'aggiornamento dei pacchetti

  <p>Vengono qui presentate alcune note per l'aggiornamento dei pacchetti.

  <list>

<item>Si preservino le vecchie voci del changelog (sembra ovvio, ma a volte si sono verificati
problemi per aver scritto "<tt>dch</tt>" mentre si sarebbe dovuto scrivere "<tt>dch -i</tt>".)

<item>Cambiamenti preesistenti devono essere ricontrollati; si scarti tutto ciò che è stato
incorporato in upstream DA_CONTROLLARE (in una forma o nell'altra) e ci si ricordi di
mantenere tutto quello che non è stato incorporato dall'upstream, a meno che non ci sia
una buona ragione per non farlo.

<item>Se è stato fatto qualsiasi cambiamento nel sistema di costruzione del pacchetto (sperabilmente ce se
ne renderà conto controllando i cambiamenti dall'originale) allora si aggiorni il file <file>debian/rules</file> e
le dipendenze di <file>debian/control</file> se necessario.

<item>Si controlli <url name="Debian Bug Tracking System (BTS)"
id="http://www.debian.org/Bugs/"> se qualcuno abbia fornito delle patch a bug che sono
attualmente aperti.

<item>Si controlli il contenuto del file <file>.changes</file> per essere sicuri che si stia
caricando la distribuzione corretta; le risoluzioni ai bug vengono listate
nel campo <tt>Closes:</tt>, i campi <tt>Maintainer:</tt> e <tt>Changed-By:</tt> corrispondono,
il file è firmato con GPG, ecc.

</list>

 </book>

</debiandoc>



