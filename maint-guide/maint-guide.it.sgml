<!DOCTYPE debiandoc PUBLIC "-//DebianDoc//DTD DebianDoc//EN" [




  <!--  ( This is taken from debian-reference)

When editing this file, use 8 bit clean and dumb editor such as mcedit.

Do not use smart editor such as emacs and vim.

These variables are read and used by all ???.??.sgml; they are included
separate from the main document since they may need to change.  This
allows builders to override the defaults without editing the main SGML
file.

Remember, this is SGML; the *first* definition of an entity wins.

-->
<!-- Update this as you update English version -->
<!ENTITY dochome "/usr/share/doc">
<!ENTITY developers-reference "&dochome;/developers-reference/index.en.html">
<!ENTITY uploading "&dochome;/developers-reference/pkgs.html#upload">
<!ENTITY bughandling "&dochome;/developers-reference/pkgs.html#bug-handling">
<!ENTITY debian-policy "&dochome;/debian-policy/policy.html/index.html">
<!ENTITY maint-guide "&dochome;/maint-guide/maint-guide.en.html/index.en.html">
<!ENTITY autotools-dev "&dochome;/autotools-dev/README.Debian.gz">
<!ENTITY newmaint "http://www.debian.org/devel/join/newmaint">
<!ENTITY nm-home "http://nm.debian.org/">
<!ENTITY buildd-home "http://buildd.debian.org/">
<!ENTITY mentors-faq "http://people.debian.org/~mpalmer/debian-mentors_FAQ.html">
<!ENTITY pbuilder-home "http://www.netfort.gr.jp/~dancer/software/pbuilder.html">
<!ENTITY ftp-uploadqueue "ftp://ftp.upload.debian.org/pub/UploadQueue/">
<!ENTITY ftp-command "&ftp-uploadqueue;README">
<!ENTITY copyright-howto "http://lists.debian.org/debian-devel-announce/2006/03/msg00023.html">

<!-- I decided not to mention this in NM guide --> 
<!ENTITY repackage-source "http://bugs.debian.org/278524">

<!ENTITY makefile "     1  #!/usr/bin/make -f
     2  # -*- makefile -*-
     3  # Sample debian/rules that uses debhelper.
     4  # This file was originally written by Joey Hess and Craig Small.
     5  # As a special exception, when this file is copied by dh-make into a
     6  # dh-make output file, you may use that output file without restriction.
     7  # This special exception was added by Craig Small in version 0.37 of dh-make.
     8  # Uncomment this to turn on verbose mode.
     9  #export DH_VERBOSE=1
    10  configure: configure-stamp
    11  configure-stamp:
    12          dh_testdir
    13          # Add here commands to configure the package.
    14          touch configure-stamp
    15  build: build-stamp
    16  build-stamp: configure-stamp  
    17          dh_testdir
    18          # Add here commands to compile the package.
    19          $(MAKE)
    20          #docbook-to-man debian/testpack.sgml > testpack.1
    21          touch $@
    22  clean: 
    23          dh_testdir
    24          dh_testroot
    25          rm -f build-stamp configure-stamp
    26          # Add here commands to clean up after the build process.
    27          $(MAKE) clean
    28          dh_clean 
    29  install: build
    30          dh_testdir
    31          dh_testroot
    32          dh_clean -k 
    33          dh_installdirs
    34          # Add here commands to install the package into debian/testpack.
    35          $(MAKE) DESTDIR=$(CURDIR)/debian/testpack install
    36  # Build architecture-independent files here.
    37  binary-indep: build install
    38  # We have nothing to do by default.
    39  # Build architecture-dependent files here.
    40  binary-arch: build install
    41          dh_testdir
    42          dh_testroot
    43          dh_installchangelogs 
    44          dh_installdocs
    45          dh_installexamples
    46  #       dh_install
    47  #       dh_installmenu
    48  #       dh_installdebconf       
    49  #       dh_installlogrotate
    50  #       dh_installemacsen
    51  #       dh_installpam
    52  #       dh_installmime
    53  #       dh_python
    54  #       dh_installinit
    55  #       dh_installcron
    56  #       dh_installinfo
    57          dh_installman
    58          dh_link
    59          dh_strip
    60          dh_compress
    61          dh_fixperms
    62  #       dh_perl
    63  #       dh_makeshlibs
    64          dh_installdeb
    65          dh_shlibdeps
    66          dh_gencontrol
    67          dh_md5sums
    68          dh_builddeb
    69  binary: binary-indep binary-arch
    70  .PHONY: build clean binary-indep binary-arch binary install configure">

  <!ENTITY docisodate "2010-05-14 18:33:03 UTC">
<!ENTITY docversion "1.2.18">


]>
<debiandoc>
 <book>
  <titlepag>
   <title>
     Guida per il nuovo Maintainer
   </title>
   <author>
     <name>Josip Rodin </name><email>joy-mg@debian.org</email>
   </author>
   <author>Traduzione: Calogero Lo Leggio <email>kalos@nerdrug.org</email></author>
   <author>Traduzione: Jacopo Reggiani <email/jacopo.reggiani@gmail.com/</author>
   <author>Traduzione: Francesco P. Lovergine</author>

   <version>
     version &docversion;, &docisodate;
   </version>
   <copyright>
    <copyrightsummary>
      Copyright &copy; 1998-2002 Josip Rodin.
    </copyrightsummary>
    <copyrightsummary>
      Copyright &copy; 2005-2010 Osamu Aoki.
    </copyrightsummary>
    <copyrightsummary>
      Copyright &copy; 2010 Craig Small.
    </copyrightsummary>
    <copyrightsummary>
      Copyright &copy; 2010 Raphael Hertzog.
    </copyrightsummary>
    <p>
      Questa guida può essere utilizzata nei termini della GNU General
      Public License versione 2 o successive.
    </p>
    <p>
      Questo documento è stato realizzato utilizzando come modello i
      documenti seguenti:
    </p>
    <p>
      Making a Debian Package (noto come Manuale di Debmake), copyright
      &copy; 1997 Jaldhar Vyas.
    </p>
    <p>
      The New-Maintainer's Debian Packaging Howto, copyright &copy; 1997
      Will Lowe.
    </p>
   </copyright>
  </titlepag>
  <toc detail="sect1">
 
 <chapt id="start">
  <heading>
    Partire nel modo giusto
  </heading>
  <p>
    Questo documento ha l'obbiettivo di descrivere le procedure necessarie
    per la costruzione di un pacchetto Debian GNU/Linux, per un normale
    utente Debian e aspirante sviluppatore, utilizzando un linguaggio
    immediato e con l'ausilio di esempi concreti. C'è un detto latino che
    dice <em>Longum iter est per preaecepta, breve et efficax per
    exempla!</em> (La via è lunga usando la teoria, ma breve ed efficiente
    con gli esempi!).
  </p>
  <p>
    Questo documento è stato aggiornato per la distribuzione Debian
    <tt>squeeze</tt>. <footnote><p>Nel documento si suppone l'utilizzo di un
    sistema <tt>squeeze</tt>. Se si intende seguire questo documento per un
    sistema <tt>lenny</tt>, bisognerebbe almeno installare delle versioni
    backport (n.d.t. versioni dei programmi presenti nei pacchetti di
    testing e unstable, compilate per poter funzionare in un sistema stable)
    di <package>dpkg</package> e
    <package>debhelper</package>.</p></footnote>
  </p>
  <p>
    Una delle cose che rende Debian una delle distribuzioni Linux più
    importanti, è il suo sistema di pacchettizzazione. Sebbene ci sia una
    vasta quantità di software disponibile sotto forma di pacchetto Debian,
    qualche volta è necessario installare del software per il quale non è
    stato ancora creato il pacchetto. Si potrebbe pensare che creare dei
    pacchetti sia un compito molto difficile. In effetti, se si è alle prime
    armi con Linux è dura, ma se si ha esperienza non si può non leggere
    questo documento. :-) Servirà conoscere dei rudimenti di programmazione
    Unix, ma di sicuro non sarà necessario essere un mago della
    programmazione.
  </p>
  <p>
    Una cosa però è certa: per creare in maniera corretta e manutenere dei
    pacchetti Debian serviranno svariate ore di lavoro. Per far funzionare
    il nostro sistema, i maintainer devono stare attenti a non commettere
    errori, essere scrupolosi e tecnicamente competenti.
  </p>
  <p>
    Questo documento spiegherà ogni piccolo (e forse all'inizio irrilevante)
    passo, aiuterà nella creazione del primo pacchetto e ad acquisire
    l'esperienza necessaria per manutenerne i successivi rilasci e
    possibilmente creare in futuro ulteriori pacchetti.
  </p>
  <p>
    Se è necessario qualche aiuto sulla pacchettizazione, si consiglia la
    lettura di <ref id="helpme">.
  </p>
  <p>
    Le versioni aggiornate di questo documento dovrebbero essere disponibili
    all'indirizzo <url id="http://www.debian.org/doc/maint-guide/"
    name="http://www.debian.org/doc/maint-guide/"> e nel pacchetto
    <package>maint-guide</package>. La traduzione in italiano è disponibile
    anche nel pacchetto <package>maint-guide-it</package>.
  </p>
  <sect id="needprogs">
   <heading>
     Programmi necessari per lo sviluppo
   </heading>
   <p>
     Prima di iniziare, bisogna assicurarsi di avere installato
     correttamente alcuni pacchetti aggiuntivi, necessari per lo
     sviluppo. Da notare che la lista non contiene nessun pacchetto
     etichettato come <tt>essenziale</tt> o <tt>richiesto</tt> - ci
     aspettiamo che siano già installati nel sistema.
   </p>
   <p>
     I seguenti pacchetti fanno parte dell'installazione standard di Debian,
     per cui probabilmente sono già presenti nel sistema (insieme ai
     pacchetti aggiuntivi dai quali dipendono). Si può effettuare un
     controllo con "<tt>aptitude show <var>pacchetto</var></tt>".
   </p>
   <p>
     Il pacchetto più importante da installare in un sistema in cui si ha
     intenzione di sviluppare è <package>build-essential</package>. Questo
     <em>includerà</em> altri pacchetti necessari per avere un ambiente di
     base per la compilazione dei programmi.
   </p>
   <p>
     Per alcuni tipi di pacchetti questo è tutto quello che serve, ci sono
     però una serie di pacchetti che pur non essendo essenziali per lo
     sviluppo, vengono in aiuto allo sviluppatore o possono essere richiesti
     dal pacchetto su cui si lavora:
    <list>
     <item>
      <p>
        <package>file</package> - questo semplice programma stabilisce la
        tipologia di un file. (vedere <manref section="1" name="file">)
      </p>
     </item>
     <item>
      <p>
        <package>patch</package> - questo utile programma usa un file
        contenente una serie di differenze (prodotta dal programma diff) e
        le applica al file originale, per produrre una versione
        modificata. (vedere <manref section="1" name="patch">)
      </p>
     </item>
     <item>
      <p>
        <package>perl</package> - Perl è uno dei linguaggi di scripting più
        utilizzati sui moderni sistemi Unix e derivati, spesso definito come
        "il coltellino svizzero di Unix". (vedere <manref section="1"
        name="perl">)
      </p>
     </item>
     <item>
      <p>
        <package>python</package> - Python è un altro linguaggio di
        scripting molto utilizzato sui sistemi Debian, combina una notevole
        potenza con una sintassi molto chiara. (vedere <manref section="1"
        name="python">)
      </p>
     </item>
     <item>
      <p>
        <package>autoconf</package>, <package>automake</package> e
        <package>autotools-dev</package> - diversi programmi recenti usano
        script di configurazione e <file>Makefile</file> preprocessati con
        l'aiuto di programmi come questi. (vedere "<tt>info autoconf</tt>",
        "<tt>info automake</tt>") <package>autotools-dev</package> tiene
        aggiornate le versioni di alcuni file di automazione, usati processo
        di compilazione, e contiene la documentazione che spiega il modo
        migliore per utilizare questi file.
      </p>
     </item>
     <item>
      <p>
        <package>dh-make</package> and <package>debhelper</package> -
        <package>dh-make</package> is necessary to create the skeleton of
        our example package, and it will use some of the
        <package>debhelper</package> tools for creating packages. They are
        not essential for creation of packages, but are <em>highly</em>
        recommended for new maintainers. It makes the whole process very
        much easier to start, and control afterwards. (see <manref
        section="1" name="dh_make">, <manref section="1" name="debhelper">,
        <file>/usr/share/doc/debhelper/README</file>) <footnote><p>There are
        few similar but specialized packages such as
        <package>dh-make-perl</package>, <package>dh-make-php</package>,
        etc. </p></footnote>
      </p>
     </item>
     <item>
      <p>
        <package>devscripts</package> - questo pacchetto contiene alcuni
        pratici script che possono essere utili ai maintainer, anche se non
        sono strettamente necessari per la creazione dei pacchetti. I
        pacchetti consigliati o suggeriti da questo pacchetto andrebbero
        presi in considerazione. (vedere
        <file>/usr/share/doc/devscripts/README.gz</file>)
      </p>
     </item>
     <item>
      <p>
        <package>fakeroot</package> - questo programma permette di fingere
        di essere root, dato che è necessario per l'esecuzione di alcune
        parti del processo di creazione del pacchetto. (vedere <manref
        section="1" name="fakeroot">)
      </p>
     </item>
     <item>
      <p>
        <package>gnupg</package> - questo programma consente di
        <em>firmare</em> elettronicamente i pacchetti. Questo è importante
        soprattutto se si vuole distribuirli ad altre persone, e verrà
        sicuramente fatto quando un pacchetto sarà pronto per essere incluso
        nella distribuzione Debian. (vedere <manref section="1" name="gpg">)
      </p>
     </item>
     <item>
      <p>
        <package>gfortran</package> - il compilatore GNU Fortran 95,
        necessario se il programma è scritto in Fortran. (vedere <manref
        section="1" name="gfortran">)
      </p>
     </item>
     <item>
      <p>
        <package>gpc</package> - il compilatore GNU Pascal, necessario se il
        programma è scritto in Pascal. Un sostituto degno di nota è
        <package>fp-compiler</package>, il Compilatore Free Pascal. (vedere
        <manref section="1" name="gpc">, <manref section="1" name="ppc386">)
      </p>
     </item>
     <item>
      <p>
        <package>xutils-dev</package> - alcuni programmi, generalmente
        quelli fatti per X11, usano questi strumenti per generare i
        <file>Makefile</file> da una serie di funzioni macro. (vedere
        <manref section="1" name="imake">, <manref section="1"
        name="xmkmf">)
      </p>
     </item>
     <item>
      <p>
        <package>lintian</package> - questo è l'analizzatore dei pacchetti
        Debian, una volta costruito il pacchetto, permette di scoprire gli
        errori più comuni, cercando di spiegarli. (vedere <manref
        section="1" name="lintian">,
        <file>/usr/share/doc/lintian/lintian.html/index.html</file>)
      </p>
     </item>
     <item>
      <p>
        <package>pbuilder</package> - questo pacchetto contiene i programmi
        che vengono usati per creare e manutenere un ambiente
        <prgn>chroot</prgn>. Creare pacchetti Debian nell'ambiente
        <prgn>chroot</prgn> permette di verificare le dipendenze appropriate
        ed evitare bug di tipo FTBS (Fails To Build From Source, non compila
        da sorgente). (vedere <manref section="8" name="pbuilder"> e <manref
        section="1" name="pdebuild">)
      </p>
     </item>
     <item>
      <p>
        <package>patchutils</package> - questo pacchetto contiene dei
        programmi che lavorano con i file di patch, come
        <prgn>lsdiff</prgn>, <prgn>interdiff</prgn> e
        <prgn>filterdiff</prgn>.
      </p>
     </item>
     <item>
      <p>
        <package>quilt</package> - this package helps you to manage a series
        of patches by keeping track of the changes each of them makes. They
        are logically organized as a stack, and you can apply (=push),
        un-apply (=pop), refresh them easily by traveling into the
        stack. (see <manref section="1" name="quilt">,
        <file>/usr/share/doc/quilt/README.Debian</file>)
      </p>
     </item>
     <item>
      <p>
        <package>git-core</package> - questo pacchetto contiene un famoso
        sistema per il controllo delle versioni, progettato per gestire
        progetti molto grandi con velocità ed efficienza; è utilizzato da
        molti progetti open source, tra cui il kernel Linux. (see <manref
        section="1" name="git">,
        <file>/usr/share/doc/git-doc/index.html</file>)
      </p>
     </item>
    </list>
   </p>
   <p>
     Segue una serie di documenti <em>molto importanti</em> che è
     consigliabile leggere insieme a questo documento:
    <list>
     <item>
      <p>
        <package>debian-policy</package> - il <url
        id="http://www.debian.org/doc/devel-manuals#policy" name="manuale
        delle policy Debian"> comprende le spiegazioni riguardanti la
        struttura e il contenuto dell'archivio Debian, numerose
        problematiche inerenti la progettazione del sistema operativo, lo
        Standard della Gerarchia del Filesystem (ndr. Filesystem Hierarchy
        Standard), (che indica la posizione di prevista per ogni file e
        directory), ecc. In questo contesto, l'argomento più importante è la
        descrizione dei requisiti che ogni pacchetto deve soddisfare per
        essere incluso nella distribuzione. (vedere
        <file>&debian-policy;</file>)
      </p>
     </item>
     <item>
      <p>
        <package>developers-reference</package> - la <url
        id="http://www.debian.org/doc/devel-manuals#devref" name="guida di
        riferimento per gli sviluppatori Debian"> descrive tutti gli
        argomenti che non riguardano in maniera specifica i dettagli tecnici
        sulla pacchettizzazione, come la struttura dell'archivio, come
        rinominarlo, come rendere orfano o prendere in carico un pacchetto,
        come fare gli NMU, come gestire i bug, i metodi migliori per creare
        pacchetti, quando e dove depositarli, ecc. (vedere
        &developers-reference;)
      </p>
     </item>
     <item>
      <p>
        <package>gnu-standards</package> - questo pacchetto contiene due
        documenti provenienti dal progetto GNU: <url
        id="http://www.gnu.org/prep/standards/html_node/index.html"
        name="GNU Coding Standards">, and <url
        id="http://www.gnu.org/prep/maintain/html_node/index.html"
        name="Information for Maintainers of GNU Software">. Nonostante
        debian non necessiti del loro utilizzo, sono comunque utili come
        linee guida e buona prassi. (vedere
        <file>/usr/share/doc/gnu-standards/standards.html</file> e
        <file>/usr/share/doc/gnu-standards/maintain.html</file>).
      </p>
     </item>
    </list>
   </p>
   <p>
     Se questo documento contraddice quanto scritto nel manuale delle policy
     Debian e nella guida di riferimento per gli sviluppatori Debian, si
     considerino corrette quest'ultime. Si prega di mandare una segnalazione
     di bug al pacchetto <package>maint-guide</package>.
   </p>
   <p>
     Le brevi note elencate qui sopra servono solo ad accennare lo scopo di
     ogni pacchetto. Prima di continuare, è opportuno leggere in modo
     approfondito la documentazione di ogni programma, almeno per un
     utilizzo di base. Può sembrare molto pesante farlo adesso, ma in
     seguito ti renderai conto che sarà stato <em>utilissimo</em>.
   </p>
  </sect>
  <sect id="terminology">
   <heading>
     Terminologia base
   </heading>
   <p>
     Ci sono due tipi di pacchetti.
    <list>
     <item>
      <p>
        <strong>pacchetto sorgente</strong>: Un pacchetto sorgente è
        composto da una serie di file che contengono codice sorgente e dati,
        che possono essere compilati ed elaborati per diventare programmi e
        documenti formattati. Di solito viene distribuito in una
        combinazione di <file>*.orig.tar.gz</file>,
        <file>*.debian.tar.gz</file> (oppure <file>*.diff.gz</file>), e
        <file>*.dsc</file>. Possono essere utilizzati anche altri tipi di
        archivio e metodi di compressione.
      </p>
     </item>
     <item>
      <p>
        <strong>pacchetto binario</strong>: Un pacchetto binario contiene il
        programma già compilato e la documentazione formattata. Di solito
        viene distribuito come <file>*.deb</file> per i normali pacchetti
        Debian, e come <file>*.udeb</file> per i pacchetti del Debian
        Installer.
      </p>
     </item>
    </list>
   </p>
   <p>
     Attenzione a non confondere termini come: sorgente di un programma e
     pacchetto sorgente del programma!
   </p>
   <p>
     Nel mondo Debian sono previsti diversi ruoli.
    <list>
     <item>
      <p>
        <strong>autore originale (upstream author)</strong>: La persona che
        ha iniziato lo sviluppo del programma.
      </p>
     </item>
     <item>
      <p>
        <strong>responsabile del programma (upstream maintainer)</strong>:
        La persona che attualmente sviluppa il programma.
      </p>
     </item>
     <item>
      <p>
        <strong>responsabile del pacchetto (maintainer)</strong>: La persona
        che ha creato il pacchetto Debian del programma.
      </p>
     </item>
     <item>
      <p>
        <strong>sponsor</strong>: La persona che aiuta i responsabili dei
        pacchetti a verificarne la correttezza dei contenuti ed a
        depositarli nell'archivio Debian ufficiale.
      </p>
     </item>
     <item>
      <p>
        <strong>mentore</strong>: La persona che aiuta i responsabili dei
        pacchetti alle prime armi nelle operazioni di creazione del
        pacchetto, ecc.
      </p>
     </item>
     <item>
      <p>
        <strong>sviluppatore Debian (Debian Developer)</strong> (DD): membro
        del progetto Debian. Questa persona ha la possibilità di depositare
        i pacchetti all'interno dell'archivio Debian ufficiale.
      </p>
     </item>
     <item>
      <p>
        <strong>responsabile Debian (Debian Maintainer)</strong> (DM):
        Questa persona ha la possibilità di depositare i pacchetti
        all'interno dell'archivio Debian ufficiale.
      </p>
     </item>
    </list>
   </p>
   <p>
     Ci sono molti nomi di versioni usati in Debian.
    <list>
     <item>
      <p>
        <strong>versione originale del sorgente (upstream source
        version)</strong>: La versione originale del sorgente è denominata
        <tt><var>versione</var></tt>.
      </p>
     </item>
     <item>
      <p>
        <strong>revisione Debian (Debian revision)</strong>: La revisione di
        Debian del pacchetto è denominata <tt><var>revisione</var></tt>.
      </p>
     </item>
     <item>
      <p>
        <strong>versione del pacchetto Debian (Debian package
        version)</strong>: La versione del pacchetto Debian è composta come
        segue.
       <list>
        <item>
         <p>
           <tt><var>versione</var></tt> per i pacchetti binari e sorgenti
           nativi Debian.
         </p>
        </item>
        <item>
         <p>
           <tt><var>versione</var>-<var>revisione</var></tt> per i pacchetti
           binari non-nativi Debian (esempio quelli di terze parti).
         </p>
        </item>
       </list>
      </p>
     </item>
    </list>
   </p>
   <p>
     Se si vuole approfondire nel dettaglio la terminologia, si consiglia la
     lettura di altri manuali.
   </p>
  </sect>
  <sect id="debiandeveloper">
   <heading>
     Sviluppatore ufficiale Debian
   </heading>
   <p>
     Non è possibile diventare uno <strong>sviluppatore Debian</strong> (DD)
     dal giorno alla notte, perché questo richiede più che delle semplici
     conoscenze tecniche. Ma non ci si deve lasciare scoraggiare da
     questo. Se il lavoro che si è fatto è utile a qualcun altro, si può
     sempre depositare il proprio pacchetto sia come
     <strong>maintainer</strong> attraverso uno <strong>sponsor</strong> che
     come <strong>maintainer Debian</strong>. Vedere <url id="&newmaint;"
     name="L'Angolo del Nuovo Manutentore Debian"> per maggiori
     informazioni.
   </p>
   <p>
     Non è necessario creare un nuovo pacchetto per diventare uno
     sviluppatore ufficiale Debian. Lo si può diventare anche semplicemente
     contribuendo alla manutenzione di pacchetti già esistenti. Ci sono
     molti pacchetti che aspettano solo dei bravi responsabili (vedere <ref
     id="choose">).
   </p>
  </sect>
  <sect id="helpme">
   <heading>
     Dove trovare aiuto
   </heading>
   <p>
     Before you decide to ask your question in some public place, please
     just RTFM.  That includes documentation in
     <file>/usr/share/doc/dpkg</file>, <file>/usr/share/doc/debian</file>,
     <file>&autotools-dev;</file>,
     <file>/usr/share/doc/<var>package</var>/*</file> files and the
     <prgn>man</prgn>/<prgn>info</prgn> pages for all the programs mentioned
     in this document. See all the information at <url id="&nm-home;">.
   </p>
   <p>
     Creare un piccolo pacchetto di test è un ottimo metodo per imparare i
     dettagli della pacchettizzazione. Analizzare dei pacchetti già
     esistenti e ben manutenuti, è invece, il metodo migliore per capire
     come creano i pacchetti le altre persone.
   </p>
   <p>
     Se si ha una domanda a cui non si è trovata risposta né nella
     documentazione che nelle varie risorse web, si può chiedere nella
     mailing list dei mentori Debian, all'indirizzo <url
     id="http://lists.debian.org/debian-mentors/"
     name="debian-mentors@lists.debian.org">. Dei sviluppatori Debian
     esperti saranno lieti di aiutarvi, ma prima di porre una domanda è
     necessario leggere almeno parte della documentazione!
   </p>
   <p>
     Vedere <url id="http://lists.debian.org/debian-mentors/"> per avere più
     informazioni a riguardo della mailing list.
   </p>
   <p>
     Quando si ricevono delle segnalazioni di bug (si, proprio quelle!), si
     dovrà approfondire l'utilizzo del <url id="http://www.debian.org/Bugs/"
     name="Sistema di tracciamento dei bug di Debian"> e leggere la relativa
     documentazione, per essere in grado di gestire le segnalazioni in
     maniera efficiente. È fortemente consigliato leggere <url
     id="http://www.debian.org/doc/manuals/developers-reference/pkgs.html#bug-handling"
     name="Developer's Reference, 5.8. 'Handling bugs'">.
   </p>
   <p>
     Se rimangono delle domande, si può chiedere nella mailing list degli
     sviluppatori Debian, all'indirizzo <url
     id="http://lists.debian.org/debian-devel/"
     name="debian-devel@lists.debian.org">. Vedere <url
     id="http://lists.debian.org/debian-devel/"> per avere più informazioni
     a riguardo della mailing list.
   </p>
   <p>
     Anche se tutto è andato per il meglio, è arrivato il momento di
     pregare. Perché? Perché in poche ore (o giorni) utenti da tutto il
     mondo cominceranno ad usare il vostro pacchetto, e se si è commesso
     qualche grave errore, si avrà la proprio email inondata da messaggi di
     molti utenti Debian arrabbiati... Si scherza ovviamente. :-)
   </p>
   <p>
     Relax and be ready for bug reports, because there is a lot more work to
     be done before your package will be fully in line with Debian policies
     and its best practice guidelines (once again, read the <em>real
     documentation</em> for details). Good luck!
   </p>
  </sect>
 </chapt>
 <chapt id="first">
  <heading>
    Primi passi
  </heading>
  <p>
    Costruire il pacchetto.
  </p>
  <sect id="choose">
   <heading>
     Scegliamo il programma
   </heading>
   <p>
     La prima cosa da fare, dopo quella di scegliere il programma per cui
     creare il pacchetto, è controllare se il pacchetto è già presente negli
     archivi della distribuzione, utilizzando <prgn>aptitude</prgn>.
   </p>
   <p>
     Si possono controllare le informazioni sui pacchetti anche nella <url
     id="http://www.debian.org/distrib/packages" name="pagina di ricerca dei
     pacchetti"> e nel <url
     id="http://packages.qa.debian.org/common/index.html" name="sistema di
     tracciamento dei bug di Debian">.
   </p>
   <p>
     Se il pacchetto esiste già, allora non rimane che installarlo! :-) Se
     invece divenisse orfano -- ovvero se il suo maintainer è configurato
     come "Debian QA Group", si può sempre prenderlo in carico.
   </p>
   <p>
     Si può consultare nel sito web Debian la <url
     id="http://www.debian.org/devel/wnpp/" name="lista dei pacchetti che
     hanno bisogno di un nuovo manutentore e dei futuri pacchetti Debian"> e
     gli <url id="http://wnpp.debian.net/" name="ultimi aggiornamenti sui
     pacchetti da adottare e orfani">.
   </p>
   <p>
     Appena ci si sente in grado di adottare un pacchetto, bisogna prendere
     i sorgenti (con qualcosa tipo "<tt>apt-get source
     <var>pacchetto</var></tt>") ed esaminarli. Questo documento purtroppo
     non include tutte le informazioni che riguardano l'adozione dei
     pacchetti. Fortunatamente non sarà difficile capire come funziona il
     pacchetto dal momento che qualcuno avrà già effettuato la
     configurazione iniziale. Continua a leggere comunque, molti dei
     suggerimenti qui di seguito saranno ancora utili al caso.
   </p>
   <p>
     Se il pacchetto è nuovo, e si pensa che sarebbe bello entrare a far
     parte di Debian, ecco come procedere:
    <list>
     <item>
      <p>
        Prima di tutto bisogna capire se il programma funziona in modo
        corretto, e averlo provato per almeno un po' di tempo e dimostrarne
        l'utilità.
      </p>
     </item>
     <item>
      <p>
        Bisogna controllare su <url
        id="http://www.debian.org/devel/wnpp/being_packaged" name="lista dei
        pacchetti sui quali si lavora"> che nessun altro stia lavorando
        sullo stesso pacchetto. Se nessuno ci sta lavorando, si può
        segnalare un bug di tipo ITP (Intent To Package) allo
        pseudo-pacchetto <package>wnpp</package> usando il programma
        <prgn>reportbug</prgn>. Se qualcuno ci sta lavorando e si ritiene
        necessario si potrebbe contattare il maintainer. Altrimenti - si
        potrebbe trovare un altro programma interessante che non manutenuto.
      </p>
     </item>
     <item>
      <p>
        il programma <strong>deve avere una licenza</strong>.
       <list>
        <item>
         <p>
           I programmi nella sezione <tt>main</tt>, <strong>devono essere in
           accordo con le Linee Guida per il Software Libero Debian (DFSG,
           Debian Free Software Guidelines)</strong> (vedere <url
           id="http://www.debian.org/social_contract#guidelines">) e
           <strong>non devono richiede nessun pacchetto che non sia presente
           nella sezione <tt>main</tt></strong>, per la compilazione o
           l'esecuzione, come previsto dalla policy di Debian. Questo è il
           caso preferito.
         </p>
        </item>
        <item>
         <p>
           I programmi nella sezione <tt>contrib</tt>, devono essere
           conformi alle DSFG, ma potrebbero richiedere, per la compilazione
           o l'esecuzione, un pacchetto che non è presente nella sezione
           main.
         </p>
        </item>
        <item>
         <p>
           I programmi nella sezione <tt>non-free</tt>, possono non essere
           conformi alle DSFG, ma <strong>devono poter essere
           distribuibili</strong>.
         </p>
        </item>
       </list>
        Se non si è sicuri su quale sezione il pacchetto dovrebbe essere
        incluso, si può mandare il testo della licenza alla mailing list
        <url id="http://lists.debian.org/debian-legal/"
        name="debian-legal@lists.debian.org"> e chiedere consigli.
      </p>
     </item>
     <item>
      <p>
        il programma <strong>non</strong> dovrebbe girare come setuid root,
        o meglio, non dovrebbe richiedere di essere setuid o setgid per
        nessun utente.
      </p>
     </item>
     <item>
      <p>
        il programma non dovrebbe essere un daemon, o qualcosa che debba
        essere installato nelle directory <file>*/sbin</file>, o aprire una
        porta come root.
      </p>
     </item>
     <item>
      <p>
        il programma dovrebbe essere in formato binario eseguibile, le
        librerie sono più difficili da gestire.
      </p>
     </item>
     <item>
      <p>
        il programma dovrebbe essere ben documentato e il suo codice
        facilmente comprensibile (ad es. non offuscato).
      </p>
     </item>
     <item>
      <p>
        si dovrebbe contattare l'autore o gli autori del programma per
        verificare che siano d'accordo con la sua pacchettizzazione. È
        importante essere in grado di consultarsi con l'autore/i sul
        programma nel caso di problemi specifici del programma, per questo è
        meglio non provare a pacchettizzare programmi non più manutenuti.
      </p>
     </item>
    </list>
   </p>
   <p>
     Ovviamente queste sono solo misure di sicurezza, fatte per salvare il
     futuro maintainer dall'ira degli utenti se si commette qualche errore
     in qualche daemon setuid... Una volta acquisita esperienza nella
     pacchettizzazione, si riuscirà pure a creare quel tipo di pacchetti, ma
     anche lo sviluppatore più esperto consulta la mailing list <url
     id="http://lists.debian.org/debian-mentors/"
     name="debian-mentors@lists.debian"> quando ha qualche dubbio. E i
     partecipanti saranno lieti di dare una mano.
   </p>
   <p>
     Per maggiori informazioni, consulta la <url
     id="http://www.debian.org/doc/devel-manuals#devref" name="Guida di
     Riferimento per lo Sviluppatore">.
   </p>
  </sect>
  <sect id="getit">
   <heading>
     Prendere il programma e provarlo
   </heading>
   <p>
     La prima cosa da fare è trovare e scaricare il codice sorgente del
     programma. Supponendo che si è recuperato il file dal sito web
     dell'autore. Generalmente il codice sorgente di programmi liberi per
     Unix e derivati sono in formato <prgn>tar</prgn>+<prgn>gzip</prgn> con
     estensione <file>.tar.gz</file>, oppure in formato
     <prgn>tar</prgn>+<prgn>bzip2</prgn> con estensione
     <file>.tar.bz2</file>. Di solito, questi file, contengono la
     sottodirectory dal nome
     <file><var>programma</var>-<var>versione</var></file> con tutti i
     sorgenti.
   </p>
   <p>
     Se è presente un sistema di controllo di versione (VCS) come Git,
     Subversion o CVS, è possibile scaricare l'ultima versione del codice
     sorgente con "<tt>git clone</tt>", "<tt>svn co</tt>", o "<tt>cvs
     co</tt>" e comprimerlo in formato <prgn>tar</prgn>+<prgn>gzip</prgn>
     utilizzando l'opzione "<tt>--exclude-vcs</tt>".
   </p>
   <p>
     Se il codice sorgente è in qualche altro formato di archiviazione (per
     esempio, con estensione <file>.Z</file> o
     <file>.zip</file><footnote><p>si può utilizzare il comando
     <prgn>file</prgn> per scoprire il formato di
     archiviazione</p></footnote>), scompattalo con i programmi appropriati,
     e comprimilo di nuovo.
   </p>
   <p>
     A titolo di esempio, verrà utilizzato il programma <prgn>gentoo</prgn>,
     un gestore file per X basato su GTK+.<footnote><p>Osserva che il
     programma in questione è già stato pacchettizzato, e la versione
     corrente 0.15.3 ha subito sostanziali modifiche dalla versione 0.9.12
     menzionata nei seguenti esempi.</p></footnote>
   </p>
   <p>
     È buona regola creare una sottodirectory nella home directory e
     nominarla <file>debian</file> o <file>deb</file> o qualsiasi altro nome
     appropriato (ad es. in questo caso <file>~/gentoo</file> andrebbe più
     che bene). Una volta scaricato l'archivio e scompattato (con il comando
     "<tt>tar xzf gentoo-0.9.12.tar.gz</tt>"). Bisogna assicurarsi che non
     ci siano errori, per quanto in apparenza <em>irrilevanti</em>, perché
     potrebbero causare problemi nell'estrazione dell'archivio sul sistema
     di altre persone, alcuni strumenti di estrazione a volte ignorano
     queste anomalie. Nella console dovrebbe esserci quanto segue.
    <example>
$ mkdir ~/gentoo ; cd ~/gentoo
$ wget http://<var>www.example.org</var>/gentoo-0.9.12.tar.gz
$ tar xvzf gentoo-0.9.12.tar.gz
$ ls -F
gentoo-0.9.12/                                                                                                                       
gentoo-0.9.12.tar.gz
</example>
   </p>
   <p>
     A questo punto si avrà un'altra sottodirectory, dal nome
     <file>gentoo-0.9.12</file>. Ci si sposti in questa directory e si legga
     <em>attentamente</em> la documentazione fornita. Di solito si avranno
     dei file come <file>README*</file>, <file>INSTALL*</file>,
     <file>*.lsm</file> o <file>*.html</file>. È necessario trovare
     istruzioni su come compilare e installare correttamente il programma
     (si potrebbe supporre di installare il programma nella directory
     <file>/usr/local/bin</file>, ma questo non è il comportamento corretto,
     tratteremo l'argomento più avanti <ref id="destdir">).
   </p>
   <p>
     La procedura cambia da programma a programma, ma molti programmi
     recenti hanno uno script <prgn>./configure</prgn>> che configura i
     sorgenti del programma in modo da essere compilati nel sistema in
     uso. Dopo la configurazione (con il comando <prgn>./configure</prgn>),
     i programmi sono generalmente compilati con <tt>"make"</tt>. Alcuni
     supportano il comando "<tt>make check</tt>", che serve per eseguire dei
     controlli automatici. L'installazione nelle directory di destinazione
     viene fatta generalmente con "<tt>make install</tt>".
   </p>
   <p>
     Adesso si provi a compilare ed eseguire il programma, assicurandosi che
     funzioni correttamente e niente sia andato male durante l'installazione
     o l'esecuzione.
   </p>
   <p>
     Di solito per ripulire la directory di compilazione si usa il comando
     "<tt>make clean</tt>" (o meglio ancora "<tt>make
     distclean</tt>"). Talvolta c'è anche il comando "<tt>make
     uninstall</tt>" che serve a rimuovere tutti i file installati.
   </p>
  </sect>
  <sect id="namever">
   <heading>
     Nome e versione del pacchetto
   </heading>
   <p>
     Si dovrebbe iniziare la fase di pacchettizzazione con la directory dei
     sorgenti completamente ripulita, o semplicemente partendo da una nuova
     estrazione dall'archivio dei sorgenti.
   </p>
   <p>
     Per costruire correttamente il pacchetto, si deve convertire in
     minuscolo il nome del programma originale (se non lo fosse), e
     rinominare la directory dei sorgenti in
     <file><var>pacchetto</var>-<var>versione</var></file>.
   </p>
   <p>
     Se il nome del programma è formato da più di una parola, si deve
     contrarlo in una sola parola, o abbreviarlo. Per esempio, il pacchetto
     del programma "John's little editor for X" potrebbe essere chiamato
     <package>johnledx</package>, o <package>jle4x</package>, o qualsiasi
     altra cosa attinente, che riesca a stare sotto un numero ragionevole di
     caratteri, ad esempio 20.
   </p>
   <p>
     Bisogna controllare pure l'esatta versione del programma (che deve
     essere inclusa nella versione del pacchetto). Se il programma non usa
     una numerazione delle versioni tipo <tt>X.Y.Z</tt>, ma qualche tipo di
     data, si può utilizzare tale data come numero di versione, a condizione
     che la numerazione vada ad aumentare. Anche se è meglio utilizzare lo
     stesso numero di versione usato dal programma, se il formato è
     <tt>09Oct23</tt> potrebbe essere necessario convertirlo nel formato
     <tt>YYYYMMDD</tt>, la data di prima quindi diventerebbe
     <tt>20091023</tt>, questo è utile per garantire il corretto ordine di
     aggiornamento con il programma <prgn>dpkg</prgn>. <footnote><p>La
     stringa della versione può essere confrontata con "<tt>dpkg
     --compare-versions <var>ver1</var> <var>op</var>
     <var>ver2</var></tt>". Vedere <manref section="1" name="dpkg">
     manpage.</p></footnote>
   </p>
   <p>
     Alcuni programmi non usano alcun tipo di numerazione, in questo caso si
     dovrebbe contattare l'autore del programma, per controllare se viene
     usato qualche altro metodo di revisione.
   </p>
  </sect>
  <sect id="dh_make">
   <heading>
     La <em>debianizzazione</em> iniziale
   </heading>
   <p>
     Una delle prime cose da fare è impostare le variabili d'ambiente
     <tt>$DEBEMAIL</tt> e <tt>$DEBFULLNAME</tt> visto che molti strumenti di
     gestione di Debian usano queste variabili per recuperare il nome e
     l'email da utilizzare nei pacchetti. Ecco come fare.
    <example>
$ cat &gt;&gt;~/.bashrc &lt;&lt;EOF
DEBEMAIL=il.vostro.indirizzo.email@example.org
DEBFULLNAME="Nome Cognome"
EOF
</example>
   </p>
   <p>
     Adesso si può iniziare la <em>debianizzazione</em> eseguendo il
     programma <prgn>dh_make</prgn> come segue:
    <example>
$ . ~/.bashrc
$ cd ~/gentoo/gentoo-0.9.12
$ dh_make -f ../gentoo-0.9.12.tar.gz
</example>
   </p>
   <p>
     Ovviamente, si deve sostituire il nome del file con il nome
     dell'archivio dei sorgenti originali. <footnote><p>Se i sorgenti
     originali forniscono la directory <file>debian</file> e il suo
     contenuto, si deve eseguire il comando <prgn>dh_make</prgn> con
     l'opzione <tt>--addmissing</tt>. Il nuovo formato dei sorgenti <tt>3.0
     (quilt)</tt> è abbastanza maturo da non corrompere questi
     pacchetti. Potrebbe essere necessario aggiornare i contenuti forniti
     nei sorgenti originali per il pacchetto debian.</p></footnote> Vedere
     <manref section="1" name="dh_make"> per dettagli.
   </p>
   <p>
     Verranno visualizzate alcune informazioni. Verrà chiesto che tipo di
     pacchetto creare. Gentoo è un singolo pacchetto binario - crea un solo
     binario, e quindi un solo file <file>.deb</file> - per cui si dovrà
     selezionare la prima opzione con il tasto "<tt>s</tt>", controllare le
     informazioni sullo schermo e confermare la scelta con
     "<tt><var>ENTER</var></tt>". <footnote><p>Ecco le varie opzioni:
     "<tt>s</tt>" che sta per "binario Singolo" (Single binary),
     "<tt>i</tt>" per "Indipendente dall'architettura" (Arch-Independent),
     "<tt>m</tt>" per "binario Multiplo" (Multiple binary), "<tt>l</tt>" per
     "Libreria" (Library), "<tt>k</tt>" per "modulo del Kernel" (Kernel
     module), "<tt>b</tt>" per "<package>cdbs</package>",
     "<tt>--kpatch</tt>" per "patch del Kernel". Questo documento si
     concentra sull'uso del pacchetto <package>debhelper</package> con il
     comando <prgn>dh</prgn>. Verrà trattato l'utilizzo del nuovo programma
     <prgn>dh</prgn> per i "binari Singoli" e tratta brevemente gli
     "Indipendenti dall'architettura" e i "binari Multipli". Il pacchetto
     <package>cdbs</package> offre un'infrastruttura di script alternativa
     al comando <prgn>dh</prgn> e non rientra nel tema di questo
     documento.</p></footnote>
   </p>
   <p>
     Dopo l'esecuzione di <prgn>dh_make</prgn>, verrà fatta una copia
     dell'archivio originale del programma, come nome
     <file>gentoo_0.9.12.orig.tar.gz</file>, nella directory superiore, per
     consentire, più avanti, la creazione di un pacchetto Debian sorgente
     non-nativo con il <file>debian.tar.gz</file>.
    <example>
$ cd ~/gentoo ; ls -F
gentoo-0.9.12/
gentoo-0.9.12.tar.gz
gentoo_0.9.12.orig.tar.gz
</example>
   </p>
   <p>
     Si presti attenzione a 2 caratteristiche presenti nel nome del file
     <file>gentoo_0.9.12.orig.tar.gz</file>:
    <list>
     <item>
      <p>
        Il nome del pacchetto e la versione sono separati da "<tt>_</tt>"
        (underscore).
      </p>
     </item>
     <item>
      <p>
        C'è <file>.orig</file> prima di <file>.tar.gz</file> .
      </p>
     </item>
    </list>
   </p>
   <p>
     Si dovrebbe aver notato che nella sottodirectory dei sorgenti
     <file>debian</file> sono stati creati molti modelli di file. Questo
     verrà trattato in <ref id="dreq"> e <ref id="dother">. Dovreste aver
     capito che la pacchettizzazione non è un processo automatico. È
     necessario modificare il sorgente originale per Debian come descritto
     in <ref id="modify">. Dopo tutti questi passaggi, è necessario creare i
     pacchetti Debian in maniera appropriata come descritto in <ref
     id="build">, controllarli come descritto in <ref id="checkit">, e
     caricarli come descritto in <ref id="upload">. Verranno approfonditi
     tutti questi passaggi.
   </p>
   <p>
     Ancora una volta, visto che si è alle prime armi come maintainer non è
     consigliato creare pacchetti complessi, ad esempio:
    <list>
     <item>
      <p>
        pacchetti binari multipli,
      </p>
     </item>
     <item>
      <p>
        pacchetti di libreria,
      </p>
     </item>
     <item>
      <p>
        pacchetti di moduli del kernel,
      </p>
     </item>
     <item>
      <p>
        pacchetti di patch del kernel,
      </p>
     </item>
     <item>
      <p>
        pacchetti i cui sorgenti non sono in formato <tt>tar.gz.</tt> o
        <tt>tar.bz2</tt>, oppure
      </p>
     </item>
     <item>
      <p>
        l'archivio dei sorgenti ha contenuti non distribuibili.
      </p>
     </item>
    </list>
     Non è difficile, ma richiede un po' più di conoscenze, per cui non ne
     parleremo in questo documento.
   </p>
   <p>
     Se accidentalmente viene cancellato qualche modello di file mentre ci
     si lavora, è possibile recuperarlo eseguendo <prgn>dh_make</prgn> con
     l'opzione <tt>--addmissing</tt> nella directory già
     <em>debianizzata</em>.
   </p>
   <p>
     L'aggiornamento di un pacchetto già esistente può diventare complicato,
     perché è possibile che si siano usate vecchie tecniche di
     pacchettizzazione. Per adesso, è consigliabile, concentrarsi sulla
     creazione di nuovi pacchetti per imparare le basi. Si tornerà ad
     approfondire l'argomento più avanti su <ref id="update">.
   </p>
  </sect>
 </chapt>
 <chapt id="modify">
  <heading>
    Modificare i sorgenti
  </heading>
  <p>
    Non c'è spazio qui per approfondire <em>tutti</em> i dettagli su come
    modificare i sorgenti originali, ma verranno trattati alcuni passaggi
    fondamentali e le problematiche più comuni.
  </p>
  <sect id="quiltrc">
   <heading>
     Configurare <prgn>quilt</prgn>
   </heading>
   <p>
     The <prgn>quilt</prgn> program offers the basic method to record
     modification to the source for the Debian packaging. Since slightly
     different default is desirable for Debian packaging, let's set up
     <file>~/.quilrc</file> as follows. <footnote><p>You can disable this
     configuration by starting the <prgn>quilt</prgn> command as "<tt>quilt
     --quiltrc /dev/null ...</tt>". </p></footnote>
    <example>
$ cat &gt;&gt;~/.quiltrc &lt;&lt;EOF
d=. ; while [ ! -d "$d/debian" -a `readlink -e $d` != / ]; do d="$d/.."; done
if [ -d "$d/debian" ] && [ -z "$QUILT_PATCHES" ]; then
    # Debian packaging case and unset $QUILT_PATCHES
    QUILT_PATCHES=debian/patches
    QUILT_PATCH_OPTS="--unified-reject-files"
    QUILT_DIFF_ARGS="-p ab --no-timestamps --no-index --color=auto"
    QUILT_REFRESH_ARGS="-p ab --no-timestamps --no-index"
    QUILT_COLORS="diff_hdr=1;32:diff_add=1;34:diff_rem=1;31:\
diff_hunk=1;33:diff_ctx=35:diff_cctx=33"
    if ! [ -d $d/debian/patches ]; then mkdir $d/debian/patches; fi
fi
EOF
</example>
   </p>
   <p>
     Per l'utilizzo di <prgn>quilt</prgn> vedere <manref section="1"
     name="quilt"> e <file>/usr/share/doc/quilt/quilt.html</file>.
   </p>
  </sect>
  <sect id="fixupstream">
   <heading>
     Correggere i bug nel sorgente originale
   </heading>
   <p>
     Si supponga di trovare un errore, nel file <file>Makefile</file>
     distribuito con il programma originale, ad esempio la stringa
     "<tt>install: gentoo</tt>" avrebbe dovuto essere "<tt>install:
     gentoo-target</tt>".
    <example>
install: gentoo
        install ./gentoo $(BIN)
        install icons/* $(ICONS)
        install gentoorc-example $(HOME)/.gentoorc
</example>
   </p>
   <p>
     Si può correggere questo errore e registrarlo, con il comando
     <prgn>quilt</prgn> utilizzando come file
     <file>fix-gentoo-target.patch</file>. <footnote><p>La directory
     <file>debian/patches</file> dovrebbe essere creata se si esegue
     <prgn>dh_make</prgn>, come descritto prima. Questo esempio crea la
     directory nel caso in cui si stia aggiornando un pacchetto
     esistente.</p></footnote>
    <example>
$ mkdir debian/patches
$ quilt new fix-gentoo-target.patch
$ quilt add Makefile
</example>
     Si modifichi il file <file>Makefile</file> come segue.
    <example>
install: gentoo-target
        install ./gentoo $(BIN)
        install icons/* $(ICONS)
        install gentoorc-example $(HOME)/.gentoorc
</example>
   </p>
   <p>
     Adesso bisogna chiedere a quilt di aggiornare e creare la patch
     <file>debian/patches/fix-gentoo-target.patch</file> e di aggiungere una
     descrizione.
    <example>
$ quilt refresh
$ quilt header -e
... describe patch
</example>
   </p>
  </sect>
  <sect id="destdir">
   <heading>
     Installazione in una sotto-directory
   </heading>
   <p>
     Normalmente, i programmi si auto-installano in sottodirectory di
     <file>/usr/local</file>. I pacchetti Debian invece non devono usare
     quella directory, dal momento che è riservata agli amministratori (o
     utenti) del sistema per uso privato, ma dovrebbero usare le directory
     di sistema come la sottodirectory <file>/usr/bin</file>, conformi allo
     Standard di Gerarchia dei Filesystem (<url
     id="http://www.debian.org/doc/packaging-manuals/fhs/fhs-2.3.html"
     name="FHS">,
     <file>/usr/share/doc/debian-policy/fhs/fhs-2.3.html</file>).
   </p>
   <p>
     Normalmente, <manref section="1" name="make"> è usato per costruire
     automaticamente il programma, invece l'esecuzione di "<tt>make
     install</tt>" installa il programma direttamente nella destinazione
     prestabilita. Questa è configurata nella sezione <tt>install</tt> del
     file <file>Makefile</file>. Per far in modo che Debian fornisca dei
     pacchetti binari, il sistema di compilazione installa i programmi in
     un'immagine dell'albero dei file, creata dentro una directory
     temporanea, anziché nella destinazione prestabilita.
   </p>
   <p>
     Le 2 differenze tra (1) la normale installazione di un programma e (2)
     l'installazione tramite il sistema di pacchettizzazione Debian può
     essere affrontato in modo trasparente dal pacchetto
     <package>debhelper</package>, attraverso i comandi
     <prgn>dh_auto_configure</prgn> e <prgn>dh_auto_install</prgn>, se le
     seguenti condizioni sono soddisfatte.
    <list>
     <item>
      <p>
        Il file <file>Makefile</file> è conforme alle convenzioni GNU
        supportando la variabile <tt>$(DESTDIR)</tt>
        (<file>/usr/share/doc/gnu-standards/standards.html#Makefile-Conventions</file>).
      </p>
     </item>
     <item>
      <p>
        Il sorgente è conforme allo Standard di Gerarchia dei Filesystem
        (FHS)
      </p>
     </item>
    </list>
   </p>
   <p>
     I programmi che usano GNU <prgn>autoconf</prgn> sono
     <em>automaticamente</em> conformi alle convenzioni GNU e la loro
     pacchettizzazione è quasi <em>automatica</em>. Con questi ed altri
     accorgimenti, si stima che il pacchetto <package>debhelper</package>
     funzioni sul quasi il 90% dei pacchetti senza apportare pesanti
     modifiche al loro sistema di compilazione. La pacchettizzazione non è
     così complicata come potrebbe sembrare.
   </p>
   <p>
     Se è necessario apportare modifiche al file <file>Makefile</file>, ci
     si dovrebbe assicurare che supporti la variabile
     <tt>$(DESTDIR)</tt>. La variabile <tt>$(DESTDIR)</tt> non è impostata
     nel <file>Makefile</file>, è anteposta ad ogni percorso del file,
     utilizzato per l'installazione del programma. Lo script di
     pacchettizzazione imposta la variabile <tt>$(DESTDIR)</tt> in una
     directory temporanea.
   </p>
   <p>
     La directory temporanea, utilizzata dal comando
     <prgn>dh_auto_install</prgn>, è
     <file>debian/<var>pacchetto</var></file> per i pacchetti binari
     singoli. <footnote><p>Per i pacchetti binari multipli, il comando
     <prgn>dh_auto_install</prgn> utilizza la directory temporanea
     <file>debian/tmp</file>, mentre il comando <prgn>dh_install</prgn>, con
     l'aiuto dei file <file>debian/<var>pacchetto-1</var>.install</file> e
     <file>debian/<var>pacchetto-2</var>.install</file> suddivide il
     contenuto di <file>debian/tmp</file> nelle directory temporanee
     <file>debian/<var>pacchetto-1</var></file> e
     <file>debian/<var>pacchetto-2</var></file> per creare pacchetti binari
     multipli <file>*.deb</file>.</p></footnote> Tutto quello contenuto
     nella directory temporanea verrà installato sul sistema dell'utente,
     appena si installa il pacchetto, l'unica differenza è che
     <prgn>dpkg</prgn> installerà i file nella radice del file system.
   </p>
   <p>
     Bisogna tenere in considerazione che, anche se il programma viene
     installato in <file>debian/<var>pacchetto</var></file>, deve comunque
     rispettare i percorsi convenzionali, una volta posizionato nella
     radice, ad es. quando si installa un pacchetto <file>.deb</file>. Per
     questo motivo non bisogna consentire al sistema di compilazione di
     utilizzare stringhe impostate manualmente come costanti, ad esempio
     <tt>/home/me/deb/<var>package</var>-<var>version</var>/usr/share/<var>pacchetto</var></tt>
     nel file del pacchetto.
   </p>
   <p>
     Notare che se il programma che si intende pacchettizzare, utilizza GNU
     <manref section="1" name="automake"> e/o <manref section="1"
     name="autoconf">, i sorgenti includeranno i file
     <file>Makefile.am</file> e/o <file>Makefile.in</file>, a cui si
     dovranno apportare modificare se si vuole cambiare il file
     <file>Makefile</file>. Questo perché ogni esecuzione di
     <prgn>automake</prgn> provoca la riscrittura del file
     <file>Makefile.in</file> con informazioni generate a partire dal file
     <file>Makefile.am</file>, e ogni esecuzione di
     "<prgn>./configure</prgn>" farà lo stesso con il corrispondente
     <file>Makefile</file>, con i dati ricavati dal file
     <file>Makefile.in</file>. Modificare i file <file>Makefile.am</file>
     richiede qualche conoscenza di <prgn>automake</prgn>, per più
     informazioni si può consultare "<tt>info automake</tt>", mentre la
     modifica del file <file>Makefile.in</file>, è abbastanza simile alla
     modifica del file <file>Makefile</file>, è necessario solamente fare
     attenzione alle variabili, ad es. qualunque stringa tra i simboli
     "<tt>@</tt>", come <tt>@CFLAGS@</tt> o <tt>@LN_S@</tt>, che saranno
     sostituite ad ogni esecuzione di "<prgn>./configure</prgn>". Prima di
     procedere è vivamente consigliata la lettura di
     <file>&autotools-dev;</file>.
   </p>
   <p>
     Questa è la parte più importante del <file>Makefile</file> del
     pacchetto <package>gentoo</package> <footnote><p>Questo è solo un
     esempio che mostra come un <file>Makefile</file> dovrebbe apparire. Se
     il <file>Makefile</file> è creato dal comando <prgn>./configure</prgn>,
     il modo giusto per correggere il <file>Makefile</file> è eseguire il
     comando <prgn>./configure</prgn> dal comando
     <prgn>dh_auto_configure</prgn> includendo come opzione predefinita
     <tt>--prefix=/usr</tt>.</p></footnote>:
    <example>
# Where to put binary on 'make install'?
BIN     = /usr/local/bin

# Where to put icons on 'make install'?
ICONS   = /usr/local/share/gentoo
</example>
   </p>
   <p>
     Da notare che i file verranno installati in <file>/usr/local</file>. Si
     modifichino questi percorsi con:
    <example>
# Where to put binary on 'make install'?
BIN     = $(DESTDIR)/usr/bin

# Where to put icons on 'make install'?
ICONS   = $(DESTDIR)/usr/share/gentoo
</example>
   </p>
   <p>
     Ma perché in questa directory e non altrove? Perché i pacchetti Debian
     non installano mai dei file nella directory <file>/usr/local</file> --
     questo percorso è riservato all'amministratore di sistema. Questi file,
     invece, nei sistemi Debian vanno posizionati in <file>/usr</file>.
   </p>
   <p>
     L'esatta posizione dei binari, delle icone, della documentazione,
     ecc. è specificata nella Gerarchia dei Filesystem (vedere
     <file>/usr/share/doc/debian-policy/fhs/</file>). Si consiglia di
     sfogliarlo e leggere le sezioni riguardanti il pacchetto interessato.
   </p>
   <p>
     Si dovrà installare, quindi, il binario in <file>/usr/bin</file>
     anziché in <file>/usr/local/bin</file>, la pagina di manuale in
     <file>/usr/share/man/man1</file> anziché
     <file>/usr/local/man/man1</file>, ecc. Da notare che nel
     <file>Makefile</file> del pacchetto <package>gentoo</package> non è
     presente una pagina di manuale, ma dal momento che la policy di Debian
     prevede che ogni programma ne abbia una, ne verrà creata una e sarà
     installata in <file>/usr/share/man/man1</file>.
   </p>
   <p>
     Alcuni programmi non usano le variabili nel <file>Makefile</file> per
     definire dei percorsi come questi. Questo indica che potrebbe essere
     necessario modificare qualche sorgente in C, per fargli usare il
     percorso giusto. Ma dove cercarlo, e per farci cosa? Lo si può scoprire
     eseguento questo:
    <example>
$ grep -nr -e 'usr/local/lib' --include='*.[c|h]' .
</example>
   </p>
   <p>
     <prgn>grep</prgn> cercherà tutte le corrispondenze in maniera ricorsiva
     attraverso tutto l'albero dei sorgenti, indicando il nome del file e il
     numero della riga.
   </p>
   <p>
     Si modifichino quei file in quelle righe, sostituendo
     <tt>/usr/local/lib</tt> con <tt>/usr/lib</tt>.
    <example>
$ vim '+argdo %s/usr\/local\/lib\//usr\/lib\//gce|update' +q \
      $(find . -type f -name '*.[c|h]')
</example>
   </p>
   <p>
     Si faccia attenzione a non pasticciare il resto dei sorgenti! :-)
   </p>
   <p>
     A questo punto si dovrebbe trovare il percorso di destinazione per
     l'installazione (si cerchi la riga che inizia con <tt>install:</tt>, di
     solito è quella corretta) e modificare tutti i riferimenti alle
     directory diverse da quelle definite nel <file>Makefile</file>.
   </p>
   <p>
     Dopo aver corretto il bug, il percorso di destinazione per
     l'installazione del pacchetto <package>gentoo</package> riporterà:
    <example>
install: gentoo-target
        install ./gentoo $(BIN)
        install icons/* $(ICONS)
        install gentoorc-example $(HOME)/.gentoorc
</example>
   </p>
   <p>
     Si può correggere e registrare la modifica con il comando
     <prgn>quilt</prgn> salvandola come
     <file>debian/patches/install.patch</file>.
    <example>
$ quilt new install.patch
$ quilt add Makefile
</example>
   </p>
   <p>
     Per il pacchetto debian si modifichi come segue, utilizzando un editor:
    <example>
install: gentoo-target
        install -d $(BIN) $(ICONS) $(DESTDIR)/etc
        install ./gentoo $(BIN)
        install -m644 icons/* $(ICONS)
        install -m644 gentoorc-example $(DESTDIR)/etc/gentoorc
</example>
   </p>
   <p>
     Si sarà sicuramente notato che c'è adesso un comando "<tt>install
     -d</tt>" prima degli altri, nella regola. Il <file>Makefile</file>
     originale non ce l'ha perchè generalmente usa <tt>/usr/local/bin</tt> e
     altre directory che già esistono nel sistema su cui si esegue "<tt>make
     install</tt>". Tuttavia, dal momento che verrà installato nella nostra
     directory vuota (o anche inesistente), si dovrà creare ogni singola
     directory.
   </p>
   <p>
     È possibile anche aggiungere altre cose alla fine della regola, come
     l'installazione di documentazione aggiuntiva che gli autori originali
     talvolta omettono:
    <example>
        install -d $(DESTDIR)/usr/share/doc/gentoo/html
        cp -a docs/* $(DESTDIR)/usr/share/doc/gentoo/html
</example>
   </p>
   <p>
     Dopo un'attenta analisi, se tutto è andato bene, si può aggiornare con
     quilt la patch creando il file
     <file>debian/patches/install.patch</file> ed aggiungendogli una
     descrizione.
    <example>
$ quilt refresh
$ quilt header -e
... describe patch
</example>
   </p>
   <p>
     Adesso si avranno una serie di patch.
    <enumlist numeration="arabic">
     <item>
      <p>
        Correzzione del bug riguardante il sorgente originale:
        <file>debian/patches/fix-gentoo-target.patch</file>
      </p>
     </item>
     <item>
      <p>
        Modifica specifica per il sistema di pacchettizzazione Debian:
        <file>debian/patches/install.patch</file>
      </p>
     </item>
    </enumlist>
   </p>
   <p>
     Ogni volta che si apportano delle modifiche che non sono
     specificatamente legate alla pacchettizzazione Debian, come
     <file>debian/patches/fix-gentoo-target.patch</file>, bisogna
     assicurarsi di inviare le modifiche al manutentore originale, in modo
     che possano essere incluse nella prossima versione del programma e
     possano beneficiarne altri utenti. Ci si ricordi, di creare delle
     correzioni portabili, ovvero di non renderle specifiche per Debian o
     Linux (o altri Unix!), prima di inviarle. Questo renderà più semplice
     applicare le correzioni.
   </p>
   <p>
     Da notare che non è necessario inviare i file <file>debian/*</file>
     all'autore originale.
   </p>
  </sect>
  <sect id="difflibs">
   <heading>
     Distinguere le librerie
   </heading>
   <p>
     C'è un altro problema comune: le librerie sono spesso diverse da
     piattaforma a piattaforma. Per esempio, il <file>Makefile</file> può
     contenere un riferimento a una libreria che non esiste nei sistemi
     Debian. In tal caso occorre cambiare il riferimento ad una libreria che
     serve allo stesso scopo e che esista in Debian.
   </p>
   <p>
     Così, se c'è una riga nel <file>Makefile</file> del programma (o nel
     <file>Makefile.in</file>) che dice qualcosa tipo (e il programma non
     compila) <footnote><p>L'autore si rende conto che questo non è il
     miglior esempio, considerando che con il pacchetto
     <package>libncurses</package> viene fornito il link simbolico
     <file>libcurses.so</file>, ma non è riuscito a trovare di meglio. Sono
     molto graditi dei suggerimenti :-)</p></footnote>:
    <example>
LIBS = -lcurses -lsomething -lsomethingelse
</example>
   </p>
   <p>
     Si cambi <tt>curses</tt> con <tt>ncurses</tt> e si salvi la correzione
     come <file>debian/patches/ncurse.patch</file>.
    <example>
$ quilt new ncurse.patch
$ quilt add Makefile
$ sed -i -e "s/-lcurses/-lncurses/g" Makefile
$ quilt refresh
$ quilt header -e
... describe patch
</example>
   </p>
  </sect>
 </chapt>
 <chapt id="dreq">
  <heading>
    File richiesti nella directory <file>debian</file>
  </heading>
  <p>
    C'è una nuova sottodirectory all'interno della cartella contenente i
    sorgenti del programma ed è chiamata <file>debian</file>. All'interno di
    questa vi sono una serie di file che dovranno essere modificati per
    personalizzare il comportamento del pacchetto. I più importanti fra
    tutti questi sono i file <file>control</file>, <file>changelog</file>,
    <file>copyright</file> e <file>rules</file>, che vengono richiesti per
    tutti i pacchetti.
  </p>
  <sect id="control">
   <heading>
     Il file <file>control</file>
   </heading>
   <p>
     Questo file contiene diversi valori che <prgn>dpkg</prgn>,
     <prgn>dselect</prgn>, <prgn>apt-get</prgn>, <prgn>apt-cache</prgn>,
     <prgn>aptitude</prgn>, ed altri strumenti utilizzeranno per gestire il
     pacchetto. Il tutto è definito nel <url
     id="http://www.debian.org/doc/debian-policy/ch-controlfields.html"
     name="Manuale delle policy di Debian, 5 'File di controllo e loro
     campi'">.
   </p>
   <p>
     Questo è il file di controllo che <prgn>dh_make</prgn> crea:
    <example>
 1 Source: gentoo
 2 Section: unknown
 3 Priority: extra
 4 Maintainer: Josip Rodin &lt;joy-mg@debian.org&gt;
 5 Build-Depends: debhelper (>= 7.0.50~)
 6 Standards-Version: 3.8.4
 7 Homepage: &lt;insert the upstream URL, if relevant&gt;
 8
 9 Package: gentoo
10 Architecture: any
11 Depends: ${shlibs:Depends}, ${misc:Depends}
12 Description: &lt;insert up to 60 chars description&gt;
13  &lt;insert long description, indented with spaces&gt;
</example>
     (Sono stati aggiunti i numeri di riga.)
   </p>
   <p>
     Le righe 1-6 contengono informazioni di controllo per il pacchetto
     sorgente.
   </p>
   <p>
     La riga 1 contiene il nome del pacchetto sorgente.
   </p>
   <p>
     La riga 2 indica la sezione della distribuzion in cui il pacchetto
     sorgente dovrà andare.
   </p>
   <p>
     Come si sarà notato, Debian è diviso in sezioni: <tt>main</tt> (il
     software libero), <tt>non-free</tt> (il software non propriamente
     libero) e <tt>contrib</tt> (il software libero che dipende da software
     non libero). Sotto queste esistono delle sottosezioni che descrivono
     brevemente quali pacchetti vi si possono trovare. Quindi si hanno le
     sezioni <tt>admin</tt> per i programmi dell'amministratore,
     <tt>base</tt> per gli strumenti di base, <tt>devel</tt> per gli
     strumenti di sviluppo, <tt>doc</tt> per la documentazione,
     <tt>libs</tt> per le librerie, <tt>mail</tt> per client di posta e
     demoni associati, <tt>net</tt> per applicazioni e demoni di rete,
     <tt>x11</tt> per programmi X11 che non appartengono alle altre
     categorie, e tanti altri. Si legga <url
     id="http://www.debian.org/doc/debian-policy/ch-archive.html#s-subsections"
     name="Manuale delle policy di Debian, 2.4 'Sezioni'"> e <url
     id="http://packages.debian.org/unstable/" name="List of sections in
     'sid'"> per maggiori informazioni.
   </p>
   <p>
     Si può quindi cambiare il valore alla seconda riga in x11. (Il prefisso
     <tt>main/</tt> è implicito e può essere omesso.)
   </p>
   <p>
     La riga numero 3 indica quanto sia importante per l'utente installare
     questo pacchetto. Si legga <url
     id="http://www.debian.org/doc/debian-policy/ch-archive.html#s-priorities"
     name="Manuale delle policy di Debian, 2.5 'Priorità'"> per maggiori
     informazioni.
    <list>
     <item>
      <p>
        La priorità <tt>optional</tt> solitamente viene usata per i nuovi
        pacchetti che non vanno in conflitto con altri pacchetti con
        priorità <tt>required</tt>, <tt>important</tt> o <tt>standard</tt>.
      </p>
     </item>
     <item>
      <p>
        La priorità <tt>extra</tt> solitamente viene usata per i nuovi
        pacchetti, che andrebbero in conflitto con altri pacchetti che non
        hanno questa priorità
      </p>
     </item>
    </list>
   </p>
   <p>
     Le sezioni e le priorità vengono solitamente utilizzate da interfacce
     come <prgn>aptitude</prgn> in cui i pacchetti vengono suddivisi e
     vengono selezionati quelli predefiniti. Una volta caricato il pacchetto
     in Debian, il valore di ciascuno di questi due campi può essere
     sovrascritto dai manutentori dell'archivio, in tal caso si verrà
     avvertiti via mail.
   </p>
   <p>
     Dal momento che il pacchetto trattato ha una priorità normale e non va
     in conflitto con altri, si cambierà la priorità a "<tt>optional</tt>".
   </p>
   <p>
     La riga 4 indica il nome e l'indirizzo email del manutentore. Ci si
     assicuri che questo campo includa una testata "<tt>To: </tt>" valida
     per un indirizzo mail, perché una volta caricato il pacchetto, il
     sistema di rilevazione bug la userà per inviare le mail contenenti i
     bug. Si eviti di utilizzare virgole, 'e' commerciali e parentesi.
   </p>
   <p>
     La quinta linea include la lista dei pacchetti richiesti per costruire
     il pacchetto, ad es. il campo <tt>Build-Depends:</tt>. Si può, inoltre,
     avere una riga contenente il campo
     <tt>Build-Depends-Indep:</tt>. (vedere il <url
     id="http://www.debian.org/doc/debian-policy/ch--relationships.html#s-sourcebinarydeps"
     name="Manuale delle policy di Debian, 7.7 'Relazione tra pacchetti
     sorgenti e binari - Build-Depends, Build-Depends-Indep,
     Build-Conflicts, Build-Conflicts-Indep'">). Alcuni pacchetti come
     <package>gcc</package> e <package>make</package> sono richiesti
     implicitamente, dal pacchetto <package>build-essential</package>. Se si
     ha la necessità di avere altri strumenti per costruire il pacchetto,
     questi devono essere aggiunti negli appositi campi. I campi multipli
     sono separati con le virgole; si legga una spiegazione sulle dipendenze
     binarie per scoprirne di più sulla sintassi di queste righe.
    <list>
     <item>
      <p>
        Per tutti i pacchetti creati utilizzando il comando <prgn>dh</prgn>
        nel file <file>debian/rules</file>, è necessario avere
        "<tt>debhelper (>=7.0.50~)</tt>" nel campo <tt>Build-Depends:</tt>,
        per aderire alle policy di Debian che richiedono per l'obiettivo
        <tt>clean</tt>.
      </p>
     </item>
     <item>
      <p>
        I sorgenti dei pacchetti che hanno qualche pacchetto binario con il
        campo "<tt>Architecture: any</tt>", devono essere ricompilati dal
        sistema di auto-costruzione.
      </p>
     </item>
     <item>
      <p>
        For source packages which have binary packages only with
        "<tt>Architecture: all</tt>", the <tt>Build-Depends-Indep</tt> field
        may list all the required packages unless they are already listed in
        the <tt>Build-Depends</tt> field to satisfy the Debian Policy
        requirement for the <tt>clean</tt> target.
      </p>
     </item>
    </list>
   </p>
   <p>
     If you are not sure which one should be used, use the
     <tt>Build-Depends</tt> field to be on the safe side. <footnote><p>This
     somewhat strange situation is a feature well documented in the <url
     id="http://www.debian.org/doc/debian-policy/footnotes.html#f43"
     name="Debian Policy Manual, Footnotes 43">. This is not due to the use
     of the <prgn>dh</prgn> command in the <file>debian/rules</file> file
     but due to how the <prgn>dpkg-buildpackage</prgn> works. The same
     situation applies to the <url
     id="https://bugs.launchpad.net/launchpad-buildd/+bug/238141" name="auto
     build system for Ubuntu">. </p></footnote>
   </p>
   <p>
     Per scoprire di quali pacchetti si ha bisogno per la compilazione si
     può eseguire il comando:
    <example>
$ dpkg-depcheck -d ./configure
</example>
   </p>
   <p>
     Per scoprire manualmene le esatte dipendenze per
     <prgn><var>/usr/bin/foo</var></prgn>, si esegue
    <example>
$ objdump -p <var>/usr/bin/foo</var> | grep NEEDED
</example>
     e per ogni libreria elencata, ad esempio, <prgn>libfoo.so.6</prgn>, si
     esegue
    <example>
$ dpkg -S libfoo.so.6 
</example>
     A questo punto si indica la versione <tt>-dev</tt> di ogni pacchetto
     come voce <tt>Build-Depends</tt>. Se si usa <prgn>ldd</prgn> per questo
     scopo, verranno considerate anche le dipendenze indirette, il che potrà
     portare ad avere un numero eccessivo di dipendeze.
   </p>
   <p>
     Il pacchetto <package>gentoo</package> richiede anche
     <package>xlibs-dev</package>, <package>libgtk1.2-dev</package> e
     <package>libglib1.2-dev</package> per poter essere costruito, quindi
     tali dipendenze si aggiungeranno subito dopo
     <package>debhelper</package>.
   </p>
   <p>
     La riga 6 indica la versione degli standard delle policy Debian che il
     pacchetto segue, corrispondenti alle versioni del <url
     id="http://www.debian.org/doc/devel-manuals#policy" name="Manuale delle
     policy Debian"> che si sono seguite per costruire il pacchetto.
   </p>
   <p>
     Nella riga 7 si può inserire l'URL della pagina da cui prelevare il
     pacchetto originale.
   </p>
   <p>
     La riga 9 indica il nome del pacchetto binario. Questo è normalmente lo
     stesso nome del pacchetto sorgente, ma non deve essere necessariamente
     così.
   </p>
   <p>
     Alla riga 10 viene descritta l'architettura CPU per cui può essere
     compilato il pacchetto binario. Si lascerà "<tt>any</tt>" perchè
     <manref section="1" name="dpkg-gencontrol"> riempià questo campo con un
     valore adeguato per ciascuna macchina in cui il pacchetto viene
     compilato.
   </p>
   <p>
     Se il pacchetto è indipendente dall'architettura della CPE (per
     esempio, uno script shell o Perl, o un documento), si cambi questo
     valore in "<tt>all</tt>", e si legga seguentemente in <ref id="rules">
     riguardo l'utilizzo della regola <tt>binary-indep</tt> al posto di
     <tt>binary-arch</tt> per costruire il pacchetto.
   </p>
   <p>
     La riga 11 mostra una delle caratteristiche più potenti del sistema di
     pacchettizzazione Debian. I pacchetti infatti possono relazionarsi tra
     di loro in differenti modi. A parte la già nota <tt>Depends:</tt>,
     altre relazioni sono <tt>Recommends:</tt>, <tt>Suggests:</tt>,
     <tt>Pre-Depends:</tt>, <tt>Conflicts:</tt>, <tt>Provides:</tt>, e
     <tt>Replaces:</tt>.
   </p>
   <p>
     Gli strumenti di gestione dei pacchetti solitamente si comportano allo
     stesso modo quando si occupano di tali relazioni; in caso contrario, il
     comportamento verrà spiegato. (si legga <manref section="8"
     name="dpkg">, <manref section="8" name="dselect">, <manref section="8"
     name="apt">, <manref section="1" name="aptitude"> ecc.)
   </p>
   <p>
     Questo è il significato delle relazioni:
   </p>
   <p>
    <list>
     <item>
      <p>
        <tt>Depends:</tt>
      </p>
      <p>
        Il pacchetto non verrà installato a meno che tutti i pacchetti da
        cui dipende vengono installati. Si usi questa relazione se il
        programma non funzionerà assolutamente (o sarà praticamente
        inutilizzabile) a meno della presenza di particolari pacchetti.
      </p>
     </item>
     <item>
      <p>
        <tt>Recommends:</tt>
      </p>
      <p>
        Si usi questa relazione per pacchetti che non sono strettamente
        necessari ma sono solitamente utilizzati dal programma. Quando un
        utente installa il programma, tutte le interfacce probabilmente
        chiederanno l'installazione dei pacchetti
        raccomandati. <prgn>aptitude</prgn> e <prgn>apt-get</prgn>
        installano i pacchetti raccomandati insieme al pacchetto principale
        (ma l'utente può disabiltare questo comportamento di
        default). <prgn>dpkg</prgn> ignorerà questo campo.
      </p>
     </item>
     <item>
      <p>
        <tt>Suggests:</tt>
      </p>
      <p>
        Si usi questa relazione per pacchetti che funzionano bene con il
        programma ma non sono per niente necessari. Quando un utente
        installa il programma, tutte le interfacce probabilmente chiederanno
        l'installazione dei pacchetti consigliati. <prgn>aptitude</prgn> può
        essere configurato per installare i pacchetti consigliati insieme al
        pacchetto proncipale ma questo non è il comportamento di
        default. <prgn>dpkg</prgn> ed <prgn>apt-get</prgn> ignoreranno
        questo campo.
      </p>
     </item>
     <item>
      <p>
        <tt>Pre-Depends:</tt>
      </p>
      <p>
        Questa relazione è più forte di <tt>Depends:</tt>. Il pacchetto non
        verrà installato a meno che i pacchetti da cui pre-dipende sono
        stati installati e <em>correttamente configurati</em>. Si usi questa
        relazione con <em>molta</em> parsimonia e solo dopo averne discusso
        sulla mailing list <url id="http://lists.debian.org/debian-devel/"
        name="debian-devel@lists.debian.org"> . Leggasi: non utilizzarla
        affatto. :-)
      </p>
     </item>
     <item>
      <p>
        <tt>Conflicts:</tt>
      </p>
      <p>
        Il pacchetto non verrà installato a meno che tuttti i pacchetti con
        i quali va in conflitto siano rimossi. Si usi questa relazione se il
        programma non funzionerà o causerà gravi problemi se un certo
        pacchetto è prsente.
      </p>
     </item>
     <item>
      <p>
        <tt>Provides:</tt>
      </p>
      <p>
        Per alcuni tipi di pacchetto in cui vi sono molteplici alternaive
        sono stati definiti dei nomi virtuali. Si può trovare la lista
        completa nel file
        <file>/usr/share/doc/debian-policy/virtual-package-names-list.txt.gz</file>.
        Si usi questa relazione se il programma fornisce la funzione di un
        pacchetto virtuale esistente.
      </p>
     </item>
     <item>
      <p>
        <tt>Replaces:</tt>
      </p>
      <p>
        Si usi questa relazione quando il programma rimpiazza i file di un
        altro pacchetto, o lo rimpiazza completamente (utilizzato in
        congiunzione con <tt>Conflicts:</tt>). I file dei pacchetti indicati
        saranno sovrascritti con i file del nuovo pacchetto.
      </p>
     </item>
    </list>
   </p>
   <p>
     Tutti i campi qui descritti hanno una sintassi uniforme. Sono
     costituiti da una lista contenente i nomi dei pacchetti separati da
     virgole. Questi possono essere anche costituiti da liste di nomi di
     pacchetto alternativi, separati da barre verticali "<tt>|</tt>"
     (simboli pipe).
   </p>
   <p>
     I campi possono limitare la loro applicabilità a particolari versioni
     di ogni pacchetto indicato. Queste versioni sono elencate tra parentesi
     dopo ogni singolo nome di pacchetto, e dovrebbero contenere una
     relazione presa dalla lista qui sotto seguita dal numero di
     versione. Le relazioni permesse sono: <tt>&lt;&lt;</tt>,
     <tt>&lt;=</tt>, <tt>=</tt>, <tt>&gt;=</tt> e <tt>&gt;&gt;</tt> per
     strettamente inferiore, inferiore o uguale, esattamente uguale,
     superiore o uguale e strettamente superiore, rispettivamente. Per
     esempio,
    <example>
Depends: foo (&gt;= 1.2), libbar1 (= 1.3.4)
Conflicts: baz
Recommends: libbaz4 (&gt;&gt; 4.0.7)
Suggests: quux
Replaces: quux (&lt;&lt; 5), quux-foo (&lt;= 7.6)
</example>
   </p>
   <p>
     L'ultima caratteristica che si deve conoscere riguarda
     <tt>${shlibs:Depends}</tt>, <tt>${perl:Depends}</tt>,
     <tt>${misc:Depends}</tt>, ecc. Queste voci sono sostituite dalle liste
     generate da altri componenti di <package>debhelper</package> quando il
     comando <manref section="1" name="dh_gencontrol"> viene eseguito.
   </p>
   <p>
     <manref section="1" name="dh_shlibdeps"> farà la scansione alla ricerca
     di binari e librerie per determinare le loro dipendenze da altre
     librerie e individuare in quali pacchetti si trovano, come
     <package>libc6</package> o <package>xlib6g</package>, dopo che il
     pacchetto sia stato costruito ed installato nella directory
     temporanea. Questa lista di dipendenze di libreria condivise è
     utilizzata per <tt>${shlibs:Depends}</tt>.
   </p>
   <p>
     La lista di pacchetti generata da <manref section="1" name="dh_perl">
     viene utilizzata per <tt>${perl:Depends}</tt>.
   </p>
   <p>
     Alcuni comandi <package>debhelper</package> possono far si che il
     pacchetto generato abbia bisogno di dipendere da altri
     pacchetti. Questra lista di pacchetti richiesti è utilizzata per
     <tt>${misc:Depends}</tt>.
   </p>
   <p>
     Avendo detto ciò, si può lasciare la riga <tt>Depends:</tt> esattamente
     come è ora, si può inserire un'altra riga dopo questa che dica
     "<tt>Suggests: file</tt>", perchè <package>gentoo</package> può
     utilizzare alcune caratteristiche fornite dal pacchetto
     <package>file</package>.
   </p>
   <p>
     La riga 12 contiene una breve descrizione del pacchetto. La maggioranza
     degli schermi degli utenti è larga 80 colonne quindi il contenuto non
     dovrebbe superare i 60 caratteri. Si cambia questo valore in "<tt>fully
     GUI configurable X file manager using GTK+</tt>".
   </p>
   <p>
     Nella riga 13 va messa la descrizione lunga. Questa dovrebbe consistere
     in un paragrafo che fornisce più dettagli sul pacchetto. La prima
     colonna di ogni riga dovrebbe essere vuota. Non ci dovrebbero essere
     linee vuote, ma si può mettere un singolo "<tt>.</tt>" (punto) in una
     colonna per simularle. Inoltre non ci dovrebbe essere più di una linea
     vuota dopo questa descrizione.
   </p>
   <p>
     Si inseriscono quindi i campi <tt>Vcs-*</tt> documentati su <url
     id="http://www.debian.org/doc/manuals/developers-reference/best-pkging-practices.html#bpp-vcs"
     name="Developer's Reference, 6.2.5. 'Version Control System location'">
     tra la linea 6 e 7. Si supponga che il pacchetto
     <package>gentoo</package> è posizionato nel Debian Alioth Git Service
     su <tt>git://git.debian.org/git/collab-maint/gentoo.git</tt>.
   </p>
   <p>
     Infine, ecco come appare il file di controllo aggiornato:
    <example>
 1 Source: gentoo
 2 Section: x11
 3 Priority: optional
 4 Maintainer: Josip Rodin &lt;joy-mg@debian.org&gt;
 5 Build-Depends: debhelper (>= 7.0.5), xlibs-dev, libgtk1.2-dev, libglib1.2-dev
 6 Standards-Version: 3.8.4
 7 Vcs-Git: git://git.debian.org/git/collab-maint/gentoo.git
 8 Vcs-browser: http://git.debian.org/?p=collab-maint/gentoo.git
 9 Homepage: http://www.obsession.se/gentoo/
10
11 Package: gentoo
12 Architecture: any
13 Depends: ${shlibs:Depends}, ${misc:Depends}
14 Suggests: file
15 Description: fully GUI configurable X file manager using GTK+
16  gentoo is a file manager for Linux written from scratch in pure C. It
17  uses the GTK+ toolkit for all of its interface needs. gentoo provides
18  100% GUI configurability; no need to edit config files by hand and re-
19  start the program. gentoo supports identifying the type of various
20  files (using extension, regular expressions, or the 'file' command),
21  and can display files of different types with different colors and icons.
22  .
23  gentoo borrows some of its look and feel from the classic Amiga file
24  manager "Directory OPUS" (written by Jonathan Potter).
</example>
     (Sono stati aggiunti i numeri di riga.)
   </p>
  </sect>
  <sect id="copyright">
   <heading>
     Il file <file>copyright</file>
   </heading>
   <p>
     Questo file contiene le informazioni sulle risorse del pacchetto, il
     copyright e la licenza. Il suo formato non è definito dal Manuale delle
     policy di Debian, ma il contenuto si trova in (<url
     id="http://www.debian.org/doc/debian-policy/ch-docs.html#s-copyrightfile"
     name="Manuale delle policy di Debian, 12.5 'Informazioni di
     copyright'">). Si può anche consultare <url
     id="http://dep.debian.net/deps/dep5/" name="DEP-5: Machine-parseable
     debian/copyright">.
   </p>
   <p>
     <prgn>dh_make</prgn> può fornire un modello di file del copyright,
     basta utilizzare l'opzione <tt>--copyright</tt> per selezionare quello
     giusto, se si desidera rilasciare il pacchetto
     <package>gentoo</package> sotto licenza GPL-2.
   </p>
   <p>
     Si devono inserire le informazioni mancanti per completare questo file,
     come la fonte utilizzata per recuperare il pacchetto, le informazioni
     attuali di copyright e la licenza. Per le licenze più comuni relative
     al software libero come, GNU GPL-2, GNU GPL-3, LGPL-2, LGPL-3, BSD,
     Apache o la licenza Artistic, è possibile fare riferimento al file
     appropriato nella directory <file>/usr/share/common-licenses/</file>
     presente su ogni sistema Debian. In alternativa è necessario includere
     la licenza completa.
   </p>
   <p>
     Brevemente, ecco come il file di <file>copyright</file> del pacchetto
     <package>gentoo</package> dovrebbe apparire:
    <example>
 1 This work was packaged for Debian by:
 2
 3     Josip Rodin &lt;joy-mg@debian.org&gt; on 2  Wed, 11 Nov 1998 21:02:14 +0100.
 4
 5 It was downloaded from:
 6     ftp://ftp.obsession.se/gentoo/
 7
 8 Upstream author:
 9
10     Emil Brink &lt;emil@obsession.se&gt;
11
12 Copyright:
13     Copyright (C) 1998-99 by Emil Brink, Obsession Development.
14
15 License:
16     You are free to distribute this software under the terms of
17     the GNU General Public License  either version 2 of the License,
18     or (at your option) any later version.
19
20     This package is distributed in the hope that it will be useful,
21     but WITHOUT ANY WARRANTY; without even the implied warranty of
22     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
23     GNU General Public License for more details.
24
25     You should have received a copy of the GNU General Public License
26     along with this package; if not, write to the Free Software
27     Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
28
29 On Debian systems, the complete text of the GNU General
30 Public License version 2 can be found in `/usr/share/common-licenses/GPL-2'.
31
32 The Debian packaging is:
33
34     Copyright (C) 1998 Josip Rodin &lt;joy-mg@debian.org&gt;
35
36 You can redistribute it and/or modify
37 it under the terms of the GNU General Public License as published by
38  Free Software Foundation; either version 2 of the License, or
39 (at your option) any later version.
</example>
     (Sono stati aggiunti i numeri di riga.)
   </p>
   <p>
     Si prega di seguire l'HOWTO fornito da ftpmasters ed inviato a
     debian-devel-announce: <url id="&copyright-howto;"> .
   </p>
  </sect>
  <sect id="changelog">
   <heading>
     Il file <file>changelog</file>
   </heading>
   <p>
     Questo è un file obbbligatorio, che ha un formato speciale descritto
     nel <url
     id="http://www.debian.org/doc/debian-policy/ch-source.html#s-dpkgchangelog"
     name="Manuale delle policy di Debian, 4.4 'debian/changelog'">. Questo
     formato è utilizzato da <prgn>dpkg</prgn> ed altri programmi per
     ottenere il numero di versione, revisione, distribuzione ed urgenza del
     pacchetto.
   </p>
   <p>
     Tale file è anche utile allo scopo di aver documentato tutti i
     cambiamenti che sono stati fatti. Sarà inoltre d'aiuto agli utenti che
     scaricano il pacchetto per vedere se ci sono problemi di cui dovrebbero
     essere al corrente. Il file verrà salvato come
     <file>/usr/share/doc/gentoo/changelog.Debian.gz</file> nel pacchetto
     binario.
   </p>
   <p>
     <prgn>dh_make</prgn> ne crea uno predefinito, ecco come appare:
    <example>
1  gentoo (0.9.12-1) unstable; urgency=low
2
3   * Initial release (Closes: #<var>nnnn</var>)  &lt;<var>nnnn</var> is the bug number of your ITP&gt;
4
5  -- Josip Rodin &lt;joy-mg@debian.org&gt;  Mon, 22 Mar 2010 00:37:31 +0100
6
</example>
     (Sono stati aggiunti i numeri di riga.)
   </p>
   <p>
     La riga 1 indica il nome del pacchetto, la versione, la distribuzione e
     l'urgenza. Il nome deve combacire con il nome del pacchetto sorgente,
     mentre la distribuzione dovrebbe essere <tt>unstable</tt> (o anche
     <tt>experimental</tt>) <footnote><p>Alcune persone utilizzano dei
     valori di distribuzione non validi come <tt>UNRELEASED</tt> per evitare
     che un pacchetto venga accidentalmente caricato in una VCS
     condivisa. </p></footnote> , e l'urgenza non dovrebbe essere cambiata
     in qualcosa di più alto di <tt>low</tt>. :-)
   </p>
   <p>
     Le righe 3-5 sono una voce del registro, in cui vengono documentati i
     cambiamenti fatti nella revisione del pacchetto (non dei cambiamenti
     del pacchetto originario - c'è un file apposta per questo scopo, creato
     dagli autori originali, che verrà installato successivamente
     <file>/usr/share/doc/gentoo/changelog.gz</file>). Supponiamo che il
     numero di servizio del ticket ITP fosse "<tt>12345</tt>". Nuove righe
     devono essere aggiunte appena prima della riga più in alto che comincia
     con "<tt>*</tt>" (asterisco). Ciò si può fare con <manref section="1"
     name="dch">, o manualmente con un editor testuale.
   </p>
   <p>
     Alla fine si avrà qualcosa del genere:
    <example>
1  gentoo (0.9.12-1) unstable; urgency=low
2
3   * Initial Release. Closes: #12345
4   * This is my first Debian package.
5   * Adjusted the Makefile to fix $(DESTDIR) problems.
6
7  -- Josip Rodin &lt;joy-mg@debian.org&gt; Mon, 22 Mar 2010 00:37:31 +0100
8
</example>
     (Sono stati aggiunti i numeri di riga.)
   </p>
   <p>
     Si possono leggere ulteriori informazioni sull'aggiornamentop del file
     changelog successivamente in <ref id="update">.
   </p>
  </sect>
  <sect id="rules">
   <heading>
     Il file <file>rules</file>
   </heading>
   <p>
     Ora si darà uno sguardo alle regole esatte che <manref section="1"
     name="dpkg-buildpackage"> userà per creare il pacchetto. In realtà
     questo file non è che un altro <file>Makefile</file>, ma diverso da
     quelli della sorgente originale. Differentemente dagli altri files
     sotto <file>debian</file>, questop qui è marcato come eseguibile.
   </p>
   <sect1 id="targets">
    <heading>
      Obiettivi del file <file>rules</file>
    </heading>
    <p>
      Ogni file <file>rules</file>, come qualsiasi altro
      <file>Makefile</file>, consiste di diversi obiettivi e regole che
      specificano come gestire il sorgente. <url
      id="http://www.debian.org/doc/debian-policy/ch-source.html#s-debianrules"
      name="Manuale delle policy di Debian, 4.9 'Script principale per la
      creazione: debian/rules'"> ne spiega i dettagli.
    </p>
    <p>
      La spiegazione breve degli obiettivi è la seguente.
     <list>
      <item>
       <p>
         obiettivo <tt>clean</tt>: ripulire tutti i file compilati, generati
         ed inutili nella struttura di cartelle del pacchetto. (richiesto)
       </p>
      </item>
      <item>
       <p>
         obiettivo <tt>build</tt>: costruire tutti i sorgenti per ottenere
         programmi compilati e documenti formattati nell'albero delle
         cartelle del pacchetto. (richiesto)
       </p>
      </item>
      <item>
       <p>
         obiettivo <tt>install</tt>: installare i file in una struttura ad
         albero per ogni pacchetto binario nella directory
         <file>debian</file>. Se definito, tutti gli obiettivi
         <tt>binary*</tt> dipenderanno effettivamente da
         quest'ultimo. (opzionale)
       </p>
      </item>
      <item>
       <p>
         obiettivo <tt>binary</tt>: creare tutta una serie di pacchetti
         binari (combinando gli obiettivi <tt>binary-arch</tt> e
         <tt>binary-indep</tt>). (richiesto)<footnote><p>Questo obiettivo è
         utilizzato da "<tt>dpkg-buildpackage</tt>" come in <ref
         id="completebuild">.</p></footnote>
       </p>
      </item>
      <item>
       <p>
         obiettivo <tt>binary-arch</tt>: creare una serie di pacchetti
         binari dipendenti dall'architettura (<tt>Architecture: any</tt>)
         nella directory padre. (richiesto)<footnote><p>Questo obiettivo è
         utilizzato da "<tt>dpkg-buildpackage -B</tt>" come in "ref
         id="porterbuild"".</p></footnote>
       </p>
      </item>
      <item>
       <p>
         obiettivo <tt>binary-indep</tt>: creare una serie di pacchetti
         binari indipendenti dall'architettura (<tt>Architecture: all</tt>)
         nella directory padre. (richiesto)<footnote><p>Questo obiettivo è
         utilizzato da "<tt>dpkg-buildpackage -A</tt>".</p></footnote>
       </p>
      </item>
      <item>
       <p>
         obiettivo <tt>get-orig-source</tt>: ottenere la versione più
         recente del pacchetto sorgente originale dal relativo
         sito. (optional)
       </p>
      </item>
     </list>
    </p>
    <p>
      Le regole che si vogliono applicare vengono applicate come parametri
      da linea di comando (per esempio, "<tt>./debian/rules build</tt>" o
      "<tt>fakeroot make -f debian/rules binary</tt>"). Dopo il nome
      dell'obiettivo si può scrivere il nome della dipendenza, programma o
      file da cui dipende la regola. Dopo aver fatto questo ci può essere un
      qualsiasi numero di comandi, separati da <tt><var>TAB</var></tt>. Una
      nuova regola comincia con la dichiarazione dell'obiettivo nella prima
      colonna. Le righe vuote e le righe che cominciano con "<tt>#</tt>"
      (cancelletto) vengono trattate come commenti e rimosse.
    </p>
    <p>
      Probabilmente si potrà essere creata un pò di confusione, ma sarà
      tutto più chiaro una volta esaminato il file <file>rules</file> che
      <prgn>dh_make</prgn> fornisce di default. Inoltre si consiglia di
      leggere "<tt>info make</tt>" per maggiori informazioni.
    </p>
   </sect1>
   <sect1 id="defaultrules">
    <heading>
      Il fille <file>rules</file> di default
    </heading>
    <p>
      Le nuove versioni di <prgn>dh_make</prgn> generano un file
      <file>rules</file> molto semplice ma potente utilizzando il comando
      <prgn>dh</prgn>:
     <example>
 1 #!/usr/bin/make -f
 2 # -*- makefile -*-
 3 # Sample debian/rules that uses debhelper.
 4 # This file was originally written by Joey Hess and Craig Small.
 5 # As a special exception, when this file is copied by dh-make into a
 6 # dh-make output file, you may use that output file without restriction.
 7 # This special exception was added by Craig Small in version 0.37 of dh-make.
 8
 9 # Uncomment this to turn on verbose mode.
10 #export DH_VERBOSE=1
11
12 %:
13        dh $@
</example>
      (Sono stati aggiunti i numeri di riga. Nel vero file
      <file>rules</file>, gli spazi vengono sostituiti da TAB.)
    </p>
    <p>
      Probabilmente si sarà già familiari con le righe tipo la prima che
      ricordano gli script shell e Perl. In pratica indica al sistema
      operativo che il file andrà elaborato con <file>/usr/bin/make</file>.
    </p>
    <p>
      La riga 10 può essere decommentata per impostare la variabile
      <tt>DH_VERBOSE</tt> ad 1. In tal caso, lo strumento
      <package>debhelper</package> fornirà più informazioni come
      risultato. Questo aiuta a capire cosa stia succedendo dietro questo
      semplice file <file>rules</file> ed ad analizzarne i problemi. Questo
      nuovo comando <prgn>dh</prgn> è una parte cruciale dello strumento
      <package>debhelper</package> e non nasconde nulla all'utente.
    </p>
    <p>
      Lines 12 and 13 are where all the work is done. The percent sign means
      any targets which then call a single program, <prgn>dh</prgn> with the
      target name. <footnote><p>Under <tt>lenny</tt>, <prgn>dh_make</prgn>
      created much more complicated <file>rules</file> file with many
      <prgn>dh_*</prgn> scripts listed for each required explicit targets
      and frozen them to the state when it was initially packaged. This new
      <prgn>dh</prgn> command is simpler and frees us from this
      constrain. You still have full power to customize this with
      <tt>override_dh_*</tt> targets. See <ref id="customrules">. It is
      based only on the <package>debhelper</package> package and does not
      obfuscate the package building process like the
      <package>cdbs</package> package.</p></footnote> The <prgn>dh</prgn>
      command is a wrapper script which runs appropriate sequences of
      <prgn>dh_*</prgn> programs depending on its argument.
     <list>
      <item>
       <p>
         "<tt>debian/rules clean</tt>" esegue "<tt>dh clean</tt>"; che a sua
         volta esegue i seguenti:
        <example>
dh_testdir
dh_auto_clean
dh_clean
</example>
       </p>
      </item>
      <item>
       <p>
         "<tt>debian/rules build</tt>" esegue "<tt>dh build</tt>"; che a sua
         volta esegue i seguenti:
        <example>
dh_testdir
dh_auto_configure
dh_auto_build
dh_auto_test
</example>
       </p>
      </item>
      <item>
       <p>
         "<tt>fakeroot debian/rules binary</tt>" runs "<tt>fakeroot dh
         binary</tt>"; which in turn runs the following<footnote><p>This
         assumes that the <package>python-support</package> package is
         installed on the system.</p></footnote>:
        <example>
dh_testroot
dh_prep
dh_installdirs
dh_auto_install
dh_install
dh_installdocs
dh_installchangelogs
dh_installexamples
dh_installman
dh_installcatalogs
dh_installcron
dh_installdebconf
dh_installemacsen
dh_installifupdown
dh_installinfo
dh_pysupport
dh_installinit
dh_installmenu
dh_installmime
dh_installmodules
dh_installlogcheck
dh_installlogrotate
dh_installpam
dh_installppp
dh_installudev
dh_installwm
dh_installxfonts
dh_bugfiles
dh_lintian
dh_gconf
dh_icons
dh_perl
dh_usrlocal
dh_link
dh_compress
dh_fixperms
dh_strip
dh_makeshlibs
dh_shlibdeps
dh_installdeb
dh_gencontrol
dh_md5sums
dh_builddeb
</example>
       </p>
      </item>
      <item>
       <p>
         "<tt>fakeroot debian/rules binary-arch</tt>" esegue "<tt>fakeroot
         dh binary-arch</tt>"; che a sua volta esegue la stessa sequenza di
         "<tt>fakeroot dh binary</tt>" ma con l'opzione "<tt>-a</tt>"
         aggiunta ad ogni comando.
       </p>
      </item>
      <item>
       <p>
         "<tt>fakeroot debian/rules binary-indep</tt>" esegue "<tt>fakeroot
         dh binary-indep</tt>"; che a sua volta esegue la stessa sequenza di
         "<tt>fakeroot dh binary</tt>" ma escludendo <prgn>dh_strip</prgn>,
         <prgn>dh_makeshlibs</prgn>, e <prgn>dh_shlibdeps</prgn> con
         l'opzione "<tt>-i</tt>" aggiunta ad ogni comando rimanente.
       </p>
      </item>
     </list>
    </p>
    <p>
      Le funzioni dei comandi <prgn>dh_*</prgn> sono quasi auto-esplicative
      dai loro nomi. <footnote><p>Per informazioni complete su tutto quello
      che questi scipt <prgn>dh_*</prgn> fanno esattamente, e quali sono le
      loro opzioni, si prega di leggere i loro rispettivi manuali e la
      documentazione <package>debhelper</package>.</p></footnote> Ci sono
      una serie di appunti da fare in questa spiegazione semplificata che
      assume un ambiente di costruzione tipico basato su
      <file>Makefile</file>. <footnote><p>Questi comandi supportano anche
      altri ambienti di costruzione come <file>setup.py</file>,
      <file>Makefile.PL</file>, <file>Build.PL</file> ed anche
      <file>cmake</file>.</p></footnote>
     <list>
      <item>
       <p>
         <prgn>dh_auto_clean</prgn> normalmente esegue i seguenti comandi
         con l'obiettivo <tt>distclean</tt> se esiste il file
         <file>Makefile</file>.<footnote><p>DA_CONTROLLARE</p></footnote>
        <example>
make distclean
</example>
       </p>
      </item>
      <item>
       <p>
         <prgn>dh_auto_configure</prgn> normalmente esegue i seguenti
         comandi se esiste il file <file>./configure</file> (argomenti
         abbreviati for una maggiore leggibilità).
        <example>
./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var ...
</example>
       </p>
      </item>
      <item>
       <p>
         <prgn>dh_auto_build</prgn> normalmente lancia il seguente comando
         per eseguire, se esiste, il primo obiettivo del
         <file>Makefile</file>.
        <example>
make
</example>
       </p>
      </item>
      <item>
       <p>
         <prgn>dh_auto_test</prgn> normalmente esegue il seguente comando
         con l'obiettivo <tt>test</tt> se esiste il file
         <file>Makefile</file>.
        <example>
make test
</example>
       </p>
      </item>
      <item>
       <p>
         <prgn>dh_auto_install</prgn> normalmente esegue il seguente comando
         con l'obiettivo <tt>install</tt> se esiste il file
         <file>Makefile</file> (riga spezzata per aumentare la leggibilità).
        <example>
make install \
  DESTDIR=<var>/path/to</var>/<var>package</var>_<var>version</var>-<var>revision</var>/debian/<var>package</var>
</example>
       </p>
      </item>
     </list>
    </p>
    <p>
      Gli obiettivi che richiedono il comando <prgn>fakeroot</prgn>
      contengono <prgn>dh_testroot</prgn>. Se non si sta fingendo di essere
      root utilizzando questo comando, questo terminerà con un errore.
    </p>
    <p>
      La cosa importante da sapere riguardo al file <file>rules</file>
      creato da <prgn>dh_make</prgn>, è che il suo contenuto contiene dei
      semplici consigli. Funzionerà per la maggior parte dei pacchetti ma
      per i più complicati non si esiti a personalizzarlo secondo le proprie
      esigenze. Le uniche cose che non vanno cambiate sono i nomi delle
      regole, perchè tutti gli strumenti utilizzano questi nomi, così come è
      indicato dalle policy di Debian.
    </p>
    <p>
      Anche se l'obiettivo "<tt>install</tt>" non è richiesto, è comunque
      supportato. "<tt>fakeroot dh install</tt>" si comporta come
      "<tt>fakeroot dh binary</tt>" ma si ferma dopo
      <prgn>dh_fixperms</prgn>.
    </p>
   </sect1>
   <sect1 id="customrules">
    <heading>
      Personalizzazione del file <file>rules</file>
    </heading>
    <p>
      Verrà qui spiegata la personalizzazione del file <file>rules</file>,
      creato con il nuovo comando <prgn>dh</prgn>.
    </p>
    <p>
      The "<tt>dh $@</tt>" command can be customized as
      follows. <footnote><p>If a package installs the
      <file>/usr/share/perl5/Debian/Debhelper/Sequence/<var>custom_name</var>.pm</file>
      file, you should activate its customization function by "<tt>dh --with
      <var>custom-name</var> $@</tt>". </p></footnote>
     <list>
      <item>
       <p>
         Add support of the <prgn>dh_pysupport</prgn> command.
        <list>
         <item>
          <p>
            Install the <package>python-support</package> package in
            "<tt>Build-Depends:</tt>".
          </p>
         </item>
         <item>
          <p>
            Use "<tt>dh $@</tt>" as usual. (This is enabled by default)
          </p>
         </item>
         <item>
          <p>
            This handles Python modules using the
            <package>python-support</package> framework.
          </p>
         </item>
        </list>
       </p>
      </item>
      <item>
       <p>
         Add support of the <prgn>dh_pycentral</prgn> command.
        <list>
         <item>
          <p>
            Install the <package>python-central</package> package in
            "<tt>Build-Depends:</tt>".
          </p>
         </item>
         <item>
          <p>
            Use "<tt>dh --with python-central $@</tt>" instead.
          </p>
         </item>
         <item>
          <p>
            This also deactivates the <prgn>dh_pysupport</prgn> command.
          </p>
         </item>
         <item>
          <p>
            This handles Python modules using the
            <package>python-central</package> framework.
          </p>
         </item>
        </list>
       </p>
      </item>
      <item>
       <p>
         Add support of the <prgn>dh_installtex</prgn> command.
        <list>
         <item>
          <p>
            Install the <package>tex-common</package> package in
            "<tt>Build-Depends:</tt>".
          </p>
         </item>
         <item>
          <p>
            Use "<tt>dh --with tex $@</tt>" instead.
          </p>
         </item>
         <item>
          <p>
            This registers Type 1 fonts, hyphenation patterns, or formats
            with TeX.
          </p>
         </item>
        </list>
       </p>
      </item>
      <item>
       <p>
         Add support of the <prgn>dh_quilt_patch</prgn> and
         <prgn>dh_quilt_unpatch</prgn> commands.
        <list>
         <item>
          <p>
            Install the <package>quilt</package> package in
            "<tt>Build-Depends:</tt>".
          </p>
         </item>
         <item>
          <p>
            Use "<tt>dh --with quilt $@</tt>" instead.
          </p>
         </item>
         <item>
          <p>
            This applies and un-applies patches to the upstream source from
            files in the <file>debian/patches</file> directory for the
            <tt>1.0</tt> source package.
          </p>
         </item>
         <item>
          <p>
            This is not needed if you use the new <tt>3.0 (quilt)</tt>
            source package.
          </p>
         </item>
        </list>
       </p>
      </item>
      <item>
       <p>
         Add support of the <prgn>dh_dkms</prgn> command.
        <list>
         <item>
          <p>
            Install the <package>dkms</package> package in
            "<tt>Build-Depends:</tt>".
          </p>
         </item>
         <item>
          <p>
            Use "<tt>dh --with dkms $@</tt>" instead.
          </p>
         </item>
         <item>
          <p>
            This correctly handles DKMS usage by the kernel module package.
          </p>
         </item>
        </list>
       </p>
      </item>
      <item>
       <p>
         Add support of the <prgn>dh_autotools-dev_updateconfig</prgn> and
         <prgn>dh_autotools-dev_restoreconfig</prgn> commands.
        <list>
         <item>
          <p>
            Install the <package>autotools-dev</package> package in
            "<tt>Build-Depends:</tt>".
          </p>
         </item>
         <item>
          <p>
            Use "<tt>dh --with autotools-dev $@</tt>" instead.
          </p>
         </item>
         <item>
          <p>
            This updates and restores <file>config.sub</file> and
            <file>config.guess</file>.
          </p>
         </item>
        </list>
       </p>
      </item>
      <item>
       <p>
         Add support of the <prgn>dh_autoreconf</prgn> and
         <prgn>dh_autoreconf_clean</prgn> commands.
        <list>
         <item>
          <p>
            Install the <package>dh-autoreconf</package> package in
            "<tt>Build-Depends:</tt>".
          </p>
         </item>
         <item>
          <p>
            Use "<tt>dh --with autoreconf $@</tt>" instead.
          </p>
         </item>
         <item>
          <p>
            This updates the GNU Build System files and restores them after
            the build.
          </p>
         </item>
        </list>
       </p>
      </item>
     </list>
    </p>
    <p>
      Molti comandi del tipo <prgn>dh_*</prgn>, invocati da <prgn>dh</prgn>,
      possono essere personalizzati modificando i rispettivi file di
      configurazione nella directory <file>debian</file>. Si veda <ref
      id="dother"> per la personalizzazione di tali caratteristiche.
    </p>
    <p>
      Alcuni comandi del tipo <prgn>dh_*</prgn>, invocati da
      <prgn>dh</prgn>, possono richiedere la propria esecuzione con alcuni
      parametri o in aggiunta ad altri comandi da eseguire contestualmente o
      al posto dei comandi originali. In tali casi viene creato nel file
      <file>rules</file> l' obiettivo <tt>override_dh_<var>foo</var></tt>
      aggiungendo una regola solo per il comando
      <prgn>dh_<var>foo</var></prgn> che si intende
      modificare. Fondamentalmente tale regola dice "<em>esegui me al posto
      di</em>". <footnote><p>Sotto <tt>lenny</tt>, se si vuole cambiare il
      comportamento di uno script <prgn>dh_*</prgn> basta cercare la riga
      relativa nel file <file>rules</file> e modificarla.</p></footnote>
    </p>
    <p>
      Si noti che i comandi <prgn>dh_auto_*</prgn> tendono a fare più di
      quanto si sia qui illustrato in questa ultra-semplificata spiegazione
      per tenere in conto tutti casi limite. L'utilizzo di comandi
      semplificati nell'obiettivo <tt>override_dh_*</tt> è una cattiva idea
      in quanto potrebbe annullare molte delle caratteristiche utili di
      <package>debhelper</package>.
    </p>
    <p>
      Se si vogliono resgistrare i dati di configurazione di sistema del
      pacchetto <package>gentoo</package> nella directory
      <file>/etc/gentoo</file> invece che nella solita directory
      <file>/etc</file>, si può sovrascrivere il parametro predefinito
      <tt>--sysconfig=/etc</tt> dato dal comando
      <prgn>dh_auto_configure</prgn> al comando <prgn>./configure</prgn> nel
      modo seguente. <footnote><p>Il pacchetto <package>gentoo</package>
      utilizza il sistema di costruzione GNU, conosciuto anche come
      Autotools. Si veda <url
      id="http://en.wikipedia.org/wiki/GNU_build_system">.</p></footnote>
     <example>
override_dh_auto_configure:
        dh_auto_configure -- --sysconfig=/etc/gentoo
</example>
    </p>
    <p>
      I parametri immessi dopo <tt>--</tt> vengono aggiunti dopo i parametri
      predefiniti dei programmi eseguiti pr sovrascriverli. Utilizzare il
      comando <prgn>dh_auto_configure</prgn> è preferibile rispetto al
      comando <prgn>./configure</prgn> dal momento che sovrascriverà
      esclusivamente il parametro <tt>--sysconfig</tt> e manterrà gli altri
      parametri del comando <prgn>./configure</prgn>.
    </p>
    <p>
      Se il <file>Makefile</file> di un sorgente per il pacchetto
      <package>gentoo</package> necessita che venga specificato l'obiettivo
      <tt>build</tt> per essere costruito
      <footnote><p><prgn>dh_auto_build</prgn> senza alcun argomento eseguirà
      il primo obiettivo del file <file>Makefile</file>.</p></footnote>,
      basterà creare l'obiettivo <tt>override_dh_auto_build</tt> pe
      abilitarlo.
     <example>
override_dh_auto_build:
        dh_auto_build -- build
</example>
    </p>
    <p>
      Questo ci assicura che $(MAKE) verrà eseguito con tutti i parametri
      predefiniti del comando <prgn>dh_auto_build</prgn> ed il parametro di
      <tt>build</tt>.
    </p>
    <p>
      If <file>Makefile</file> of a source for <package>gentoo</package>
      requires you to specify the <tt>packageclean</tt> target to clean it
      for Debian package instead of the <tt>distclean</tt> or <tt>clean</tt>
      targets in the <file>Makefile</file> file, you create an
      <tt>override_dh_auto_clean</tt> target to enable it.
     <example>
override_dh_auto_clean:
        $(MAKE) packageclean
</example>
    </p>
    <p>
      Se il <file>Makefile</file> di un sorgente per il pacchetto
      <package>gentoo</package> contiene l'obiettivo <tt>test</tt> che non
      vuole essere eseguito nel processo di costruzione del pacchetto
      Debian, si può utilizzare l'obiettivo <tt>override_dh_auto_test</tt>
      per saltarlo.
     <example>
override_dh_auto_test:
</example>
    </p>
    <p>
      Se il pacchetto <package>gentoo</package> contiene un inusuale file di
      changelog chiamato <file>FIXES</file>,
      <prgn>dh_installchangelogs</prgn> non installerà questo file di
      default. Il comando <prgn>dh_installchangelogs</prgn> richiede che
      venga fornito il parametro <file>FIXES</file> per installarlo.
     <example>
override_dh_installchangelogs:
        dh_installchangelogs FIXES
</example>
    </p>
    <p>
      When you use the new <prgn>dh</prgn> command, use of explicit targets
      such as the ones listed in <ref id="targets"> except
      <tt>get-orig-source</tt> target may make it difficult to understand
      their exact effects. Please limit explicit targets to
      <tt>override_dh_*</tt> targets and completely independent ones, if
      possible.
    </p>
   </sect1>
  </sect>
 </chapt>
 <chapt id="dother">
  <heading>
    Altri file nella directory <file>debian</file>
  </heading>
  <p>
    Per controllare la maggior parte delle operazioni che
    <package>debhelper</package> effettua durante la creazione del
    pacchetto, si possono inserire dei file di configurazione all'interno
    della directory <file>debian</file>. Questo capitolo fornirà una
    panoramica sull'utilizzo di ciascuno di essi ed il loro formato. Si
    legga <url id="http://www.debian.org/doc/devel-manuals#policy"
    name="Manuale delle policy di Debian"> e <url
    id="http://www.debian.org/doc/devel-manuals#devref" name="Guida di
    riferimento per lo sviluppatore Debian"> per le linee guida sulla
    creazione dei pacchetti.
  </p>
  <p>
    Il comando <prgn>dh_make</prgn> creerà il modello dei file di
    configurazione nella directory <file>debian</file>. Molti di questi file
    terminano con l'estensione "<tt>.ex</tt>". In altri inoltre il nome del
    file viene preceduto dal nome del pacchetto in binario, come
    <tt><var>pacchetto</var></tt>. Si dia uno sguardo a tutti i differenti
    file di configurazione.
  </p>
  <p>
    Se si vuole o si ha bisogno di attivare alcuno di questi file, si
    effettuino le seguenti operazioni:
   <list>
    <item>
     <p>
       si rinomini il file modello rimuovendo l'estensione <tt>.ex</tt> o
       <tt>.EX</tt> se presente.
     </p>
    </item>
    <item>
     <p>
       si modifichi il contenuto del file in base al bisogno.
     </p>
    </item>
    <item>
     <p>
       si elimini il file modello di cui non si ha più bisogno.
     </p>
    </item>
    <item>
     <p>
       si modifichi il file di <file>controllo</file> (si veda <ref
       id="control">), se necessario.
     </p>
    </item>
    <item>
     <p>
       si modifiche il file delle <file>regole</file> (si veda <ref
       id="rules">), se necessario.
     </p>
    </item>
   </list>
  </p>
  <p>
    Questi file di configurazione di <package>debhelper</package> senza
    prefisso del <file><var>pacchetto</var></file>, come nel file
    <file>install</file> vengono applicati al primo pacchetto
    binario. Quando ci sono molti pacchetti binari le loro configurazioni
    possono essere specificate aggiungendo il loro prefisso al nome del file
    di configurazione come <file><var>pacchetto-1</var>.install</file>,
    <file><var>pacchetto-2</var>.install</file>, ecc.
  </p>
  <sect id="readme">
   <heading>
     Il file <file>README.Debian</file>
   </heading>
   <p>
     Ogni ulteriore dettaglio o discrepanza tra il pacchetto originale e la
     versione <em>debianizzata</em>, che si è creata, dovrebbe essere
     documentato qui.
   </p>
   <p>
     <prgn>dh_make</prgn> ne crea uno di default, ecco come appare:
    <example>
gentoo per Debian
-----------------

&lt;possibili note riguardanti questo pacchetto - se non presenti, si cancelli questo file&gt;

 -- Josip Rodin &lt;joy-mg@debian.org&gt;, Wed, 11 Nov 1998 21:02:14 +0100
</example>
   </p>
   <p>
     Qui dovrebbero inserire delle brevi informazioni specifiche di
     Debian. Si veda <manref section="1" name="dh_installdocs">.
   </p>
  </sect>
  <sect id="compat">
   <heading>
     Il file <file>compat</file>
   </heading>
   <p>
     Il file <file>compat</file> definisce il livello di compatibilità del
     pacchetto <package>debhelper</package>. Al momento dovrebbe essere
     impostato a <package>debhelper</package> V7 nel modo seguente.
    <example>
$ echo 7 > debian/compat
</example>
   </p>
  </sect>
  <sect id="conffiles">
   <heading>
     I file <file>conffiles</file>
   </heading>
   <p>
     Una delle cose più fastidiose riguardanti il software accade quando si
     spende una grande quantità di tempo e di sforzi per personalizzare un
     programma solo per vedere un aggiornamento spazzare via tutte le
     modifiche fatte. Debian risolve questo problema applicando un marchio
     ai file di configurazione in modo tale che, quando si aggiorna un
     pacchetto, verrà richiesto se si vogliono mantenere o meno i vecchi
     file di configurazione.
   </p>
   <p>
     A partire da <package>debhelper</package> V3, <manref section="1"
     name="dh_installdeb"> <em>automaticamente</em> marcherà ogni file che
     si trova nella directory <file>/etc</file> come conffiles, così che se
     il programma ha soli file di configurazione in quella directory, non ci
     sarà bisogno di specificarli in questo file. Per la maggioranza dei
     tipi di pacchetto, l'unico posto in cui si trovano (ed in cui si
     dovrebbero trovare i conffile) è all'interno di <file>/etc</file> e
     quindi non c'è bisogno che questo file esista.
   </p>
   <p>
     Se il programma creato utilizza file di configurazione e li sovrascrive
     in automatico, è meglio non rendere questi ultimi dei conffiles perchè
     <prgn>dpkg</prgn> chiederà ogni volta agli utenti di verificare i
     cambiamenti.
   </p>
   <p>
     Se il programma di cui si sta creando il pacchetto richiede ad ogni
     utente di modificare i file di configurazione nella directory
     <file>/etc</file>, ci sono principalmente 2 modi per non renderli
     conffiles e quindi di mantenere <prgn>dpkg</prgn> tranquillo.
    <list>
     <item>
      <p>
        Si può creare un link simbolico nella directory <file>/etc</file>
        che punti ad un file nella directory <file>/var</file> generato
        dagli <em>script del manutentore</em>.
      </p>
     </item>
     <item>
      <p>
        Si fa generare un file dagli <em>script del manutentore</em> nella
        directory <file>/etc</file>.
      </p>
     </item>
    </list>
   </p>
   <p>
     Per maggiori informazioni sugli <em>script del manutentore</em>, si
     veda <ref id="maintscripts">.
   </p>
  </sect>
  <sect id="crond">
   <heading>
     I file <file><var>pacchetto</var>.cron.*</file>
   </heading>
   <p>
     Se il pacchetto creato richiede che vengano programmate delle
     operazioni per funzionare correttamente, si può utilizzare questo file
     per lo scopo. Si possono programmare delle operazioni in modo tale che
     vengano eseguite su base oraria, giornaliera, settimanale, mensile o
     che vengano eseguite alternativamente in qualsiasi momento si voglia.
    <list>
     <item>
      <p>
        <file>cron.hourly</file> - Installato come
        <file>/etc/cron.hourly/<var>pacchetto</var></file>: viene eseguito
        una volta all'ora, ogni ora.
      </p>
     </item>
     <item>
      <p>
        <file>cron.daily</file> - Installato as
        <file>/etc/cron.daily/<var>pacchetto</var></file>: viene eseguito
        una volta al giorno, di solito ogni mattino.
      </p>
     </item>
     <item>
      <p>
        <file>cron.weekly</file> - Installato come
        <file>/etc/cron.weekly/<var>pacchetto</var></file>: viene eseguito
        una volta a settimana, di solito ogni mattino di Domenica.
      </p>
     </item>
     <item>
      <p>
        <file>cron.monthly</file> - Installato come
        <file>/etc/cron.monthly/<var>pacchetto</var></file>: viene eseguito
        una volta al mese, di solito ogni mattino del primo del mese.
      </p>
     </item>
     <item>
      <p>
        <file>cron.d</file> - Installato come
        <file>/etc/cron.d/<var>pacchetto</var></file>: per qualsiasi altro
        periodo
      </p>
     </item>
    </list>
   </p>
   <p>
     Il formato dei file qui presentati è lo script di shell. L'unico che
     diiferisce dagli altri è <file><var>pacchetto</var>.cron.d</file> che
     segue il formato di <manref section="5" name="crontab">.
   </p>
   <p>
     Si noti che qui non è stata illustrata la rotazione dei log; a questo
     proposito si veda <manref section="1" name="dh_installlogrotate"> e
     <manref section="8" name="logrotate">.
   </p>
  </sect>
  <sect id="dirs">
   <heading>
     Il file <file>dirs</file>
   </heading>
   <p>
     Questo file specifica le directory di cui si ha bisogno ma che la
     normale pocedura di installazione ("<tt>make install DESTDIR=...</tt>"
     chiamata da "<tt>dh_auto_install</tt>") non crea. Questo generalmente
     indica la presenza di un problema nel <file>Makefile</file>.
   </p>
   <p>
     I file elencati nel file <file>install</file> non hanno bisogno che le
     directory vengano create prima. Si veda <ref id="install">
   </p>
   <p>
     Si raccomanda di provare prima ad eseguire l'installazione ed
     utilizzare questo file solo se si incorre in problemi. Si noti che non
     il carattere slash non precede il nome delle directory.
   </p>
  </sect>
  <sect id="doc-base">
   <heading>
     Il file <file><var>pacchetto</var>.doc-base</file>
   </heading>
   <p>
     Se il pacchetto generato ha altra documentazione oltre alle pagine del
     manuale e documenti informativi, dovrebbe essere utilizzato il file
     <package>doc-base</package> per segnalarla in modo che l'utente possa
     trovarla con, ad esempio <manref section="1" name="dhelp">, <manref
     section="1" name="dwww"> o <manref section="1" name="doccentral">.
   </p>
   <p>
     Questa documentazione è solitamente costituita da documenti HTML, file
     PS e PDF, disponibili in
     <file>/usr/share/doc/<var>nomepacchetto</var>/</file>.
   </p>
   <p>
     Questo è il modo in cui il file doc-base di <package>gentoo</package>,
     <file>gentoo.doc-base</file>, appare:
    <example>
Document: gentoo
Title: Gentoo Manual
Author: Emil Brink
Abstract: This manual describes what Gentoo is, and how it can be used.
Section: File Management

Format: HTML
Index: /usr/share/doc/gentoo/html/index.html
Files: /usr/share/doc/gentoo/html/*.html
</example>
   </p>
   <p>
     Per informazioni sul formato del file si veda <manref section="8"
     name="install-docs"> ed il manuale <package>doc-base</package> ,
     reperibile in <file>/usr/share/doc/doc-base/doc-base.html/</file>.
   </p>
   <p>
     Per ulteriori dettagli su come installare documentazione aggiuntiva, si
     veda in <ref id="destdir">.
   </p>
  </sect>
  <sect id="docs">
   <heading>
     Il file <file>docs</file>
   </heading>
   <p>
     Questo file specifica il nome dei file di documentazione che si possono
     avere <manref section="1" name="dh_installdocs"> li installa nella
     directory temporanea automaticamente.
   </p>
   <p>
     Normalmente, questo file includerà tutti i file esistenti nella
     directory dei sorgenti di più alto livello che sono chiamati
     "<file>BUGS</file>", "<file>README*</file>", "<file>TODO</file>" ecc.
   </p>
   <p>
     Per il pacchetto <package>gentoo</package>, nell'esempio, sono stati
     inclusi anche altri files:
    <example>
BUGS
CONFIG-CHANGES
CREDITS
ONEWS
README
README.gtkrc
TODO
</example>
   </p>
  </sect>
  <sect id="emacsen">
   <heading>
     Il file <file>emacsen-*</file>
   </heading>
   <p>
     Se il pacchetto generato contiene file Emacs che possono essere
     compilati al momento dell'installazione, i file emacsen-* possono
     essere usati per impostarne la compilazione
   </p>
   <p>
     Tali file sono installati nella directory temporanea con <manref
     section="1" name="dh_installemacsen">.
   </p>
   <p>
     Se non se ne ha bisogno, possono essere eliminati.
   </p>
  </sect>
  <sect id="examples">
   <heading>
     <file>Il file <var>pacchetto</var>.examples</file>
   </heading>
   <p>
     Il comando <manref section="1" name="dh_installexamples"> installa i
     file e le directory elencati al suo interno come file di esempio.
   </p>
  </sect>
  <sect id="initd">
   <heading>
     I file <file><var>pacchetto</var>.init</file> e
     <file><var>pacchetto</var>.default</file>
   </heading>
   <p>
     Se il pacchetto generato è un demone che deve partire all'avvio del
     sistema, hai chiaramente ignorato le mie raccomandazioni iniziali,
     vero? :-)
   </p>
   <p>
     Il file <file><var>pacchetto</var>.init</file> viene installato come lo
     script <file>/etc/init.d/<var>pacchetto</var></file>. La sua struttura
     abbastanza generica è fornita dal comando <prgn>dh_make</prgn> come
     <file>init.d.ex</file>. Probabilmente si dovrà rinominare e modificare
     un bel po', cercando di assicurarsi di fornire degli header che
     rispettino gli standard della gerarchia dei filesystem (si veda
     <file>/usr/share/doc/debian-policy/fhs/</file>). Il file viene
     installato nella directory temporanea con <manref section="1"
     name="dh_installinit">.
   </p>
   <p>
     Il file <file><var>pacchetto</var>.default</file> viene installato in
     <file>etc/default/<var>pacchetto</var></file>. Questo file imposta
     delle variabili che vengono caricate dallo script di init. La
     maggioranza delle volte questoo file di default viene utilizzato per
     disabilitare l'esecuzione di un demone, impostare dei flag di default
     oppure dei timeout. Se lo script di init ha alcune caratteristiche
     <em>impostabili</em> si dovrà installare queste nel file di default,
     non nello script di init.
   </p>
   <p>
     Se il pacchetto originario ha un file di init si può decidere di
     utilizzarlo o meno. Se non viene utilizzato quello script init.d allorà
     ne dovrà essere creato uno nuovo in <file>debian/init</file>. Comunque
     se lo script di init originario sembra funzionare bene ed installa
     tutto nella corretta destinazione, si devono comunque impostare i link
     simbolici <file>rc*</file>. Per fare questo si deve sovrascrivere
     <prgn>dh_installinit</prgn> nel file <file>rules</file> con le seguenti
     righe:
    <example>
override_dh_installinit:
        dh_installinit --onlyscripts
</example>
   </p>
   <p>
     Se non si ha bisogno di tutto ciò, si possono rimuovere i file.
   </p>
  </sect>
  <sect id="install">
   <heading>
     Il file <file>install</file>
   </heading>
   <p>
     Se ci sono dei file che devono essere insallati nel pacchetto ma con il
     normale comando "<tt>make install</tt>" non vengono elaborati, i nomi
     di quest'ultimi e le cartelle di destinazione vanno messe in questo
     file <file>install</file>. Tali file vengono installati con il comando
     <manref section="1" name="dh_install">.<footnote><p>Questo comando
     rimpiazza il comando <manref section="1" name="dh_movefiles">, ormai
     deprecato, che veniva configurato dal file
     <file>files</file>.</p></footnote> Andrebbe innanzitutto controllato
     che non ci sia uno strumento più specifico da poter utilizzare. Per
     esempio, i documenti dovrebbero essere elencati nel file
     <file>docs</file> e non in questo file.
   </p>
   <p>
     Nel file <file>install</file> compare una riga per ogni file
     installato, contenente il nome del file (relativo alla directory in cui
     avviene la costruzione del pacchatto), uno spazio e la directory di
     installazione (relativa alla posizione del file install). Un esempio
     dell'utilizzo è quando un file binario non è stato installato, in
     questo caso il file <file>install</file> dovrebbe essere:
    <example>
src/foo/mybin usr/bin
</example>
   </p>
   <p>
     Questo significa che quando il pacchetto verrà installato, ci sarà un
     file binario <file>/usr/bin/mybin</file>.
   </p>
   <p>
     Alternativamente, questo file <file>install</file> può presentare il
     nome del file senza la directory di installazione solo quando il
     percorso relativo della directory non cambia. Questo formato è
     solitamente utilizzato per grandi pacchetti che organizzano i risultati
     della costruzione in paccketti multipli utilizzando
     <file><var>pacchetto-1</var>.install</file>,
     <file><var>pacchetto-2</var>.install</file>, ecc.
   </p>
   <p>
     Il comando <prgn>dh_install</prgn> andrà a controllare nella cartella
     <file>debian/tmp</file> alla ricerca di file, se non ne trova nella
     directory corrente (or in qualsiasi altro posto si sia indicato di
     guardare utilizzando <tt>--sourcedir</tt>).
   </p>
  </sect>
  <sect id="info">
   <heading>
     I file <file><var>pacchetto</var>.info</file>
   </heading>
   <p>
     Se il pacchetto generato ha delle pagine informative, queste andrebbero
     installate utilizzando il comando <manref section="1"
     name="dh_installinfo"> ed elencandole nei file
     <file><var>pacchetto</var>.info</file>.
   </p>
  </sect>
  <sect id="lintian">
   <heading>
     I file <file>{<var>pacchetto</var>.|source/}lintian-overrides</file>
   </heading>
   <p>
     Se il pacchetto <package>lintian</package> segnala degli errori di
     diagnostica in un caso in cui esista una policy che ammette delle
     eccezioni alle regole, si possono utilizzare i file
     <file><var>pacchetto</var>.lintian-overrides</file> o
     <file>source/lintian-overrides</file> per inibire le segnalazioni. Si
     legga <file>/usr/share/doc/lintian/lintian.html/index.html</file> e si
     eviti di farne un uso eccessivo.
   </p>
   <p>
     Il file <file><var>pacchetto</var>.lintian-overrides</file> è
     ovviamente utilizzato per il pacchetto binario chiamato
     <package><var>pacchetto</var></package> ed è installato in
     <file>usr/share/lintian/overrides/<var>pacchetto</var></file> dal
     comando <prgn>dh_lintian</prgn>.
   </p>
   <p>
     Il file <file>source/lintian-overrides</file> è utilizzato per il
     pacchetto sorgente. Questo non viene installato.
   </p>
  </sect>
  <sect id="manpage">
   <heading>
     I file <file>manpage.*</file>
   </heading>
   <p>
     I programmi creati dovrebbero avere una pagina che faccia da
     manuale. In caso contrario ciascuno di questi file contiene un modello
     che può essere riempito. Il comando <prgn>dh_make</prgn> crea diversi
     file modello per la pagina del manuale. Questi devono essere rinominati
     e modificati. Si faccia attenzione a rimuovere i file modello non
     utilizzati.
   </p>
   <sect1 id="manpage1">
    <heading>
      Il file <file>manpage.1.ex</file>
    </heading>
    <p>
      Le pagine del manuale sono solitamente scritte per <manref section="1"
      name="nroff">. Anche il file modello <file>manpage.1.ex</file> è
      scritto per <prgn>nroff</prgn>. Si veda la pagina di manuale <manref
      section="7" name="man"> per una breve descrizione su come modificare
      un file del genere.
    </p>
    <p>
      L'ultimo file delle pagine del manuale dovrebbe includere il nome del
      programma che si sta documentando, quindi verrà rinominato da
      "<tt>manpage</tt>" a "<tt>gentoo</tt>". Il nome del file include anche
      "<tt>.1</tt>" come primo suffisso, il che sta ad indicare che la
      sezione della pagina del manuale è relativa ad un comando
      dell'utente. Si verifichi che questa sezione sia quella corretta. Qui
      di seguito viene presentata una breve lista delle sezioni delle pagine
      del manuale:
     <example>
Section |     Description     |     Notes
   1     User commands          Executable commands or scripts.
   2     System calls           Functions provided by the kernel.
   3     Library calls          Functions within system libraries.
   4     Special files          Usually found in /dev
   5     File formats           E.g. /etc/passwd's format
   6     Games                  Or other frivolous programs
   7     Macro packages         Such as man macros.
   8     System administration  Programs typically only run by root.
   9     Kernel routines        Non-standard calls and internals.
</example>
    </p>
    <p>
      Così la pagina man del pacchetto <package>gentoo</package> dovrebbe
      chiamarsi <file>gentoo.1</file>. Se non ci fosse alcuna pagina man
      <file>gentoo.1</file> nei sorgenti originali, andrebbe creata
      rinominando il modello <file>manpage.1.ex</file> in
      <file>gentoo.1</file> e modificandolo utilizzando le informazioni
      contenute negli esempi e nei documenti originali.
    </p>
    <p>
      You can use the <prgn>help2man</prgn> command to generate a man page
      out of "<tt>--help</tt>" and "<tt>--version</tt>" output of each
      program, too. <footnote><p>If the command is missing <prgn>info</prgn>
      page but have documentation files in the
      <file>/usr/share/<var>package</var></file> directory, you should
      manually edit generated the man page created by the
      <prgn>help2man</prgn> command. </p></footnote>
    </p>
   </sect1>
   <sect1 id="manpagesgml">
    <heading>
      Il file <file>manpage.sgml.ex</file>
    </heading>
    <p>
      Se d'altra pate si preferisce scrivere in SGML piuttosto che
      utilizzare <prgn>nroff</prgn>, si può utilizzare il modello
      <file>manpage.sgml.ex</file> . Se si procede in questo modo andrà:
     <list>
      <item>
       <p>
         rinominato il file in qualcosa del tipo <file>gentoo.sgml</file>
       </p>
      </item>
      <item>
       <p>
         installato il pacchetto <package>docbook-to-man</package>
       </p>
      </item>
      <item>
       <p>
         aggiunto <tt>docbook-to-man</tt> alla linea <tt>Build-Depends</tt>
         nel file <file>control</file>
       </p>
      </item>
      <item>
       <p>
         aggiungere un obiettivo <tt>override_dh_auto_build</tt> al file
         <file>rules</file> :
        <example>
override_dh_auto_build:
        docbook-to-man debian/gentoo.sgml > debian/gentoo.1
        dh_auto_build
</example>
       </p>
      </item>
     </list>
    </p>
   </sect1>
   <sect1 id="manpagexml">
    <heading>
      Il file <file>manpage.xml.ex</file>
    </heading>
    <p>
      Se si preferisce l'XML all'SGML, si può utilizzare il modello
      <tt>manpage.xml.ex</tt> . se si sceglie questa via si avranno due
      scelte:
     <list>
      <item>
       <p>
         rinominare il file in qualcosa del tipo <tt>gentoo.1.xml</tt>
       </p>
      </item>
      <item>
       <p>
         installare il pacchetto <package>docbook-xsl</package> e
         l'elaboratore XSLT come <package>xsltproc</package> (recommended)
       </p>
      </item>
      <item>
       <p>
         aggiungere i pacchetti <tt>docbook-xsl</tt>, <tt>docbook-xml</tt> e
         <tt>xsltproc</tt> alla linea <tt>Build-Depends</tt> nel file
         <tt>control</tt>
       </p>
      </item>
      <item>
       <p>
         aggiungere un obiettivo <tt>override_dh_auto_build</tt> al file
         <file>rules</file> :
        <example>
override_dh_auto_build:
        xsltproc --nonet \
         --param make.year.ranges 1 \
         --param make.single.year.ranges 1 \
         --param man.charmap.use.subset 0 \
         -o debian/ \
  /usr/share/xml/docbook/stylesheet/nwalsh/manpages/docbook.xsl \
        debian/gentoo.1.xml
        dh_auto_build
</example>
       </p>
      </item>
     </list>
    </p>
   </sect1>
  </sect>
  <sect id="manpages">
   <heading>
     I file <file><var>pacchetto</var>.manpages</file>
   </heading>
   <p>
     Se il pacchetto creato presenta delle pagine del manuale, queste
     andrebbero installate uilizzando il comando <manref section="1"
     name="dh_installman"> ed elencandole nei file
     <file><var>pacchetto</var>.manpages</file> .
   </p>
  </sect>
  <sect id="menu">
   <heading>
     Il file <file>menu</file>
   </heading>
   <p>
     Gli utenti dell'X Window System solitamente hanno un gestore di
     finestre che può essere personalizzato per lanciare programmi. Se hanno
     installato il pacchetto <package>menu</package> , verrà creato un set
     di menu per ogni programma del sistema.
   </p>
   <p>
     Questo è il modello del file <file>menu.ex</file> che il comando
     <prgn>dh_make</prgn> crea:
    <example>
?package(gentoo):needs="X11|text|vc|wm" \
        section="Applications/see-menu-manual"\
        title="gentoo" command="/usr/bin/gentoo"
</example>
   </p>
   <p>
     Il primo campo dopo i due punti è <tt>needs</tt>, e specifica il tipo
     di interfacia di cui ha bisogno il programma. Questo valore può essere
     cambiato con una delle alternative elencate, ad esempio <tt>text</tt> o
     <tt>X11</tt>.
   </p>
   <p>
     Il campo successivo è <tt>section</tt>, in cui dovrebbero apparire le
     voci del menu e del sottomenu. L'attuale lista delle sezioni
     <footnote><p>Si noti che è avvenuta una grossa riorganizzazione della
     struttura dei menu.</p></footnote> si trova in:
     <file>/usr/share/doc/debian-policy/menu-policy.html/ch2.html#s2.1</file>
   </p>
   <p>
     Il campo <tt>title</tt> indica il nome del programma. Se si vuole si
     può scrivere in maiuscolo. Basta che si mantenga corto.
   </p>
   <p>
     Infine, il campo <tt>command</tt> indica il comando che manda in
     esecuzione il programma.
   </p>
   <p>
     Si può quindi cambiare il file <file>menu</file> e la voce del menu nel
     modo seguente:
    <example>
?package(gentoo): needs="X11" \
        section="Applications/Tools" \
        title="Gentoo" command="gentoo"
</example>
   </p>
   <p>
     Si possono anche aggiungere altri campi come <tt>longtitle</tt>,
     <tt>icon</tt>, <tt>hints</tt> ecc. Si veda <manref section="1"
     name="dh_installmenu">, <manref section="5" name="menufile">, <manref
     section="1" name="update-menus"> e
     <file>/usr/share/doc/debian-policy/menu-policy.html/</file> per
     maggiori informazioni.
   </p>
  </sect>
  <sect id="news">
   <heading>
     Il file <file>NEWS</file>
   </heading>
   <p>
     Il comando <manref section="1" name="dh_installchangelogs"> installa
     questo file.
   </p>
  </sect>
  <sect id="maintscripts">
   <heading>
     I file <file>{post|pre}{inst|rm}</file>
   </heading>
   <p>
     I files <file>postinst</file>, <file>preinst</file>,
     <file>postrm</file> e <file>prerm</file> <footnote><p>Anche se è stata
     utilizzata una corta espressione Bash per indicare questi file come
     "<file>{post|pre}{inst|rm}</file>" , si raccomanda di utilizzare una
     shell POSIX (non Bash) per questi <em>script del manutentore</em> il
     più possibile per massimizzare la compatibilità.</p></footnote> vengono
     chiamati <em>script del manutentore</em>. Questi sono script che
     vengono messi nell'area di controllo del pacchetto e vengono lanciati
     bdal comando <prgn>dpkg</prgn> quando il pacchetto viene installato,
     aggiornato o rimosso.
   </p>
   <p>
     Un nuovo manutentore dovrebbe, se possibile, evitare ogni modifica
     manuale degli <em>script del manutentore</em> perchè potrebbero creare
     dei problemi. Per maggiori informazioni si guardi nel <url
     id="http://www.debian.org/doc/debian-policy/ch-maintainerscripts.html"
     name="Manuale delle policy di Debian, 6 'Script di manutenzione del
     pacchetto e procedure di installazione'">, e si dia un'occhiata ai file
     di esempio forniti da <prgn>dh_make</prgn>.
   </p>
   <p>
     Se non si è data retta e si sono creati dei <em>script del
     manutentore</em> personalizzati per un pacchetto, bisogna essere sicuri
     di averli provati non solo per <strong>install</strong> e
     <strong>upgrade</strong>, ma anche per <strong>remove</strong> e
     <strong>purge</strong>.
   </p>
   <p>
     Gli aggiornamenti alle nuove versioni dovrebbero essere indolore e non
     invadenti (gli utenti esistenti non dovrebbero notare gli aggiornamenti
     a meno di scoprire che vecchi bug sono stati corretti e che vi sono
     magari delle nuove funzionalità).
   </p>
   <p>
     Quando l'aggiornamento deve per forza di cose essere invadente (per
     esempio, file di configurazione sparsi all'interni didiverse cartelle
     home con strutture totalmente differenti), si può impostare il
     pacchetto ai valori sicuri predefiniti (esempio, servizi disabilitati)
     e fornire una valida documentazione come richiesto dalla policy
     (<file>README.Debian</file> e <file>NEWS.Debian</file>) come ultima
     spiaggia. Sarebbe meglio non disturbare l'utente con la nota
     <prgn>debconf</prgn> richiamata da questi <em>script del
     manutentore</em> per gli aggiornamenti.
   </p>
   <p>
     The <package>ucf</package> package provides <em>conffile-like</em>
     handling infrastructure to preserve user changes for files that may not
     be labeled <em>conffiles</em> such as ones managed by the
     <em>maintainer scripts</em>. This should minimize issues associated
     with them.
   </p>
   <p>
     Questi <em>script del manutentore</em> sono delle migliorie di Debian
     che fanno capire <strong>come mai le persone scelgano
     Debian</strong>. Bisogna stare molo attenti a non infastidirle a causa
     loro.
   </p>
  </sect>
  <sect id="todo">
   <heading>
     Il file <file>TODO</file>
   </heading>
   <p>
     Il comando <manref section="1" name="dh_installdocs"> installa questo
     file.
   </p>
  </sect>
  <sect id="watch">
   <heading>
     Il file <file>watch</file>
   </heading>
   <p>
     Questo file è utilizzato per configurare il programma <manref
     section="1" name="uscan"> (nel pacchetto <package>devscripts</package>
     ). Questo viene utilizzato per controllare il sito da cui sono stati
     presi i sorgenti originali. Viene utilizzato anche da <url
     id="http://wiki.debian.org/DEHS" name="Debian External Health Status
     (DEHS)">.
   </p>
   <p>
     Questo è ciò che si può mettere al suo interno:
    <example>
# watch control file for uscan
version=3
http://sf.net/gentoo/gentoo-(.*)\.tar\.gz debian uupdate
</example>
   </p>
   <p>
     Normally with this <file>watch</file> file, the URL at
     "<tt>http://sf.net/gentoo</tt>" is downloaded and searched for links of
     the form "<tt>&lt;a href=...&gt;</tt>". The base name (just the part
     after the final "<tt>/</tt>") of these linked URLs are matched against
     Perl regexp (see <manref section="1" name="perlre">) pattern
     "<tt>gentoo-(.*)\.tar\.gz</tt>". Out of matched files, the file with
     the greatest version number is downloaded and the <prgn>uupdate</prgn>
     program is run to create the updated source tree from them.
   </p>
   <p>
     Although this is true for other sites, the SourceForge download service
     at <url id="http://sf.net"> is an exception. When the
     <file>watch</file> file has an URL matching with the Perl regexp
     "<tt>^http://sf\.net/</tt>", the <prgn>uscan</prgn> program substitutes
     it with "<tt>http://qa.debian.org/watch/sf.php/</tt>" and then applies
     this rule. The URL redirector service at this <url
     id="http://qa.debian.org/"> is designed to offer a stable redirect
     service to the desired file for the <file>watch</file> file having
     "<tt>http://sf.net/<var>project</var>/<var>tar-name</var>-(.+)\.tar\.gz</tt>".
     This solves issues related to the periodically changing URL there.
   </p>
  </sect>
  <sect id="sourcef">
   <heading>
     Il file <file>source/format</file>
   </heading>
   <p>
     Nel file <file>debian/source/format</file>, ci dovrebbe essere una
     unica riga che indichi il formato desiderato per il pacchetto sorgente
     (controllare <manref section="1" name="dpkg-source"> per una lista
     completa). Dopo <tt>squeeze</tt>, dovrebbe scrivere:
    <list>
     <item>
      <p>
        <tt>3.0 (native)</tt> for Debian native packages or
      </p>
     </item>
     <item>
      <p>
        <tt>3.0 (quilt)</tt> for everything else.
      </p>
     </item>
    </list>
   </p>
   <p>
     Il nuovo formato sorgente <tt>3.0 (quilt)</tt> registra le modifiche in
     una serie di patch <prgn>quilt</prgn> all'interno di
     <file>debian/patches</file>. Questi cambiamenti vengono poi
     automaticamente applicati durante l'estrazione del pacchetto
     sorgente. <footnote><p>Si veda <url
     id="http://wiki.debian.org/Projects/DebSrc3.0" name="DebSrc3.0"> per
     una serie di informazioni generali riguardanti il passaggio al nuovo
     formato <tt>3.0 (quilt)</tt> ed ai formati sorgente <tt>3.0
     (native)</tt>.</p></footnote> Le modifiche di Debian sono semplicemente
     mantenute in un archivio <file>debian.tar.gz</file> contenente tutti i
     file sotto la directory <file>debian</file>. Questo nuovo formato
     supporta l'inclusione di file binari come per esempio le icone PNG del
     manutentore del pacchetto senza richiedere trucchi.<footnote><p>Al
     momento questo nuovo formato supporta anche molteplici archivi e più
     metodi di compressione. Questi però esulano dall'obiettivo di questo
     documento.</p></footnote>
   </p>
   <p>
     Quando <prgn>dpkg-source</prgn> estrae un pacchetto sorgente nel
     formato <tt>3.0 (quilt)</tt>, applica automaticamente tutte le patch
     elencate nel file <file>debian/patches/series</file>. Si può evitare di
     applicare le patch alla fine dell'estrazione con l'opzione
     <tt>--skip-patches</tt>.
   </p>
  </sect>
  <sect id="patches">
   <heading>
     I file <file>patches/*</file>
   </heading>
   <p>
     Il vecchio formato sorgente <tt>1.0</tt> creava un singoglo, grosso
     file <file>diff.gz</file> file che conteneva tutti i file di
     manutenzione del pacchetto che stavano in <file>debian</file> ed i file
     di patch del sorgente. Un pacchetto così è un poco ingombrante da
     ispezionare per capire successivamente la sequenza delle modifiche. Per
     questo tale formato non è considerato soddisfacente.
   </p>
   <p>
     The newer <tt>3.0 (quilt)</tt> source format stores patches in
     <file>debian/patches/*</file> files using the <prgn>quilt</prgn>
     command. These patches and other package data which are all constrained
     under the <file>debian</file> directory are packaged as the
     <file>debian.tar.gz</file> file. Since the <prgn>dpkg-source</prgn>
     command can handle <prgn>quilt</prgn> formatted patch data in the
     <tt>3.0 (quilt)</tt> source without the <package>quilt</package>
     package, it does not need to <tt>Build-Depends:</tt> on the
     <package>quilt</package> package. <footnote><p>Several methods for the
     patch set maintenance have been proposed and are in use with Debian
     packages. The <prgn>quilt</prgn> system is the preferred maintenance
     system in use. Other ones are <prgn>dpatch</prgn>, <prgn>dbs</prgn>,
     <prgn>cdbs</prgn>, etc. Many of these keep such patches as
     <file>debian/patches/*</file> files.</p></footnote>
   </p>
   <p>
     The <prgn>quilt</prgn> command is explained in <manref section="1"
     name="quilt">. It records modifications to the source as a stack of
     <tt>-p1</tt> patch files in the <file>debian/patches</file> directory
     and the source tree is untouched outside of the <file>debian</file>
     directory. The order of these patches are recorded in the
     <file>debian/patches/series</file> file. You can apply (=push),
     un-apply (=pop), and refresh patches easily. <footnote><p>If you are
     asking a sponsor to upload your package, this kind of clear separation
     and documentation of your changes are very important to expedite the
     package review by your sponsor.</p></footnote>
   </p>
   <p>
     Per <ref id="first">, sono state create 3 patch in
     <file>debian/patches</file>.
   </p>
   <p>
     Dal momento che le patch di Debian sono posizionate in
     <file>debian/patches</file>, si prega di impostare correttamente il
     comando <prgn>quilt</prgn> come descritto in TODO "ref id="quiltrc"".
   </p>
   <p>
     Quando una qualsiasi persona fornisce una patch
     <file><var>foo</var>.patch</file> per i sorgenti, allora la modifica
     del pacchetto sorgente di tipo <tt>3.0 (quilt)</tt>è abbastanza
     semplice:
    <example>
$ dpkg-source -x gentoo_0.9.12.dsc
$ cd gentoo-0.9.12
$ quilt import ../<var>foo</var>.patch
$ quilt push
$ quilt refresh
$ quilt header -e
... describe patch
</example>
   </p>
   <p>
     Le patch salvate nel nuovo formato sorgente <tt>3.0 (quilt)</tt> devono
     essere prive di <em>fuzz</em>. Bisogna quindi assicurarsi di ciò
     eseguendo "<tt>quilt pop -a; while quilt push; do quilt refresh;
     done</tt>".
   </p>
  </sect>
 </chapt>
 <chapt id="build">
  <heading>
    Costruzione del pacchetto
  </heading>
  <p>
    A questo punto, si dovrebbe essere pronti a creare il pacchetto.
  </p>
  <sect id="completebuild">
   <heading>
     (ri)Creazione completa
   </heading>
   <p>
     Al fine di (ri)creare un pacchetto in modo appropriato, è necessasio
     assicurarsi di installare
    <list>
     <item>
      <p>
        il pacchetto <package>build-essential</package>,
      </p>
     </item>
     <item>
      <p>
        i pacchetti elencati nel campo <tt>Build-Depends:</tt> (vedere <ref
        id="control">), e
      </p>
     </item>
     <item>
      <p>
        i pacchetti elencati nel campo <tt>Build-Depends-indep:</tt> (vedere
        <ref id="control">).
      </p>
     </item>
    </list>
   </p>
   <p>
     Adesso ci si sposti nella directory dei sorgenti del programma e si
     lancia il comando:
    <example>
$ dpkg-buildpackage
</example>
   </p>
   <p>
     Questo comando creerà i pacchetti binari e sorgenti al posto
     vostro. Eseguirà le seguenti operazioni:
    <list>
     <item>
      <p>
        pulirà l'albero dei sorgenti ("<tt>debian/rules clean</tt>")
      </p>
     </item>
     <item>
      <p>
        costruirà il pacchetto sorgente ("<tt>dpkg-source -b</tt>")
      </p>
     </item>
     <item>
      <p>
        costruirà il programma ("<tt>debian/rules build</tt>")
      </p>
     </item>
     <item>
      <p>
        costruirà il pacchetto binario ("<tt>fakeroot debian/rules
        binary</tt>")
      </p>
     </item>
     <item>
      <p>
        firmerà il file sorgente <file>.dsc</file> file, usando
        <prgn>gpg</prgn>
      </p>
     </item>
     <item>
      <p>
        creerà e firmerà il file di upload <file>.changes</file> file,
        usando <prgn>dpkg-genchanges</prgn> e <prgn>gpg</prgn>
      </p>
     </item>
    </list>
   </p>
   <p>
     Il solo input richiesto è la password per la propria chiave GPG, due
     volte.
   </p>
   <p>
     Fatto ciò, si vedranno quattro nuovi file nella directory dei sorgenti
     (<file>~/gentoo</file>):
   </p>
   <p>
    <list>
     <item>
      <p>
        <file>gentoo_0.9.12.orig.tar.gz</file>
      </p>
      <p>
        Questo è il codice sorgente originale, semplicemente rinominato in
        modo da aderire allo standard Debian. Da notare che questo è stato
        creato inizialmente con "<tt>dh_make -f
        ../gentoo-0.9.12.tar.gz</tt>".
      </p>
     </item>
     <item>
      <p>
        <file>gentoo_0.9.12-1.dsc</file>
      </p>
      <p>
        Questo è un sommario del contenuto del codice sorgente. Questo file
        è generato dal file <file>control</file>, ed è usato quando si
        decomprime il sorgente con <manref section="1"
        name="dpkg-source">. Questo file è firmato con GPG, in modo da
        confermare l'autenticità dell'autore del pacchetto.
      </p>
     </item>
     <item>
      <p>
        <file>gentoo_0.9.12-1.debian.tar.gz</file>
      </p>
      <p>
        Questo file compresso contiene il contenuto della directory
        <file>debian</file>. Ogni modifica effettuata al codice sorgente
        originale, verrà memorizzata come patch di quilt in
        <file>debian/patches</file>.
      </p>
      <p>
        Se qualcun altro volesse ri-creare il pacchetto da zero, potrebbe
        farlo facilmente usando i suddetti tre file. La procedura di
        estrazione è banale: basta copiare i tre file da qualche parte ed
        eseguire "<tt>dpkg-source -x
        gentoo_0.9.12-1.dsc</tt>". <footnote><p>È possibile evitare di
        applicare la patch con <prgn>quilt</prgn>, nel formato sorgente
        <tt>3.0 (quilt)</tt>, aggiungento il parametro
        <tt>--skip-patches</tt> al comando di estrazione. In alternativa, è
        possibile eseguire "<tt>quilt pop -a</tt>" dopo le normali
        operazioni.</p></footnote>
      </p>
     </item>
     <item>
      <p>
        <file>gentoo_0.9.12-1_i386.deb</file>
      </p>
      <p>
        Questo è il pacchetto binario completo. Si può usare
        <prgn>dpkg</prgn> per installarlo e rimuoverlo, come per ogni altro
        pacchetto.
      </p>
     </item>
     <item>
      <p>
        <file>gentoo_0.9.12-1_i386.changes</file>
      </p>
      <p>
        Questo file descrive tutte le modifiche effettuate nella revisione
        corrente del pacchetto, ed è usata dai programmi di manutenzione
        dell'archivio FTP di Debian, per installare i pacchetti binari e
        sorgenti. È generato parzialmente dal contenuto del file
        <file>changelog</file> e dal file <file>.dsc</file>. Questo file è
        firmato con GPG, in modo da confermare l'autenticità dell'autore del
        pacchetto.
      </p>
      <p>
        Quando si lavora sul pacchetto, potrebbero cambiare il funzionamento
        del programma, o potrebbero venire introdotte nuove
        funzionalità. Chi scaricherà il pacchetto, potrà controllare questo
        file per vedere velocemente quali sono i cambiamenti. I programmi di
        manutenzione dell'archivio Debian invieranno anche i contenuti di
        questo file alla mailing list <url
        id="http://lists.debian.org/debian-devel-announce/"
        name="debian-devel-announce@lists.debian.org">.
      </p>
     </item>
    </list>
   </p>
   <p>
     Le lunghe stringhe di numeri nei file <file>.dsc</file> e
     <file>.changes</file> sono codici di controllo MD5/SHA1/SHA256 per i
     file menzionati. Chi scarica questi file, può controllarli con <manref
     section="1" name="md5sum">, <manref section="1" name="sha1sum">, o
     <manref section="1" name="sha256sum"> e se i numeri non
     corrispondessero saprebbe che il file relativo è corrotto, o è stato
     alterato.
   </p>
  </sect>
  <sect id="autobuilder">
   <heading>
     Auto-costruzione
   </heading>
   <p>
     Debian supporta molti <url id="http://www.debian.org/ports/"
     name="port"> tramite la <url id="http://www.debian.org/devel/buildd/"
     name="autobuilder network">, su cui sono in esecuzione i demoni di
     <prgn>buildd</prgn> su molti computer con architetture
     differenti. Anche se non sarà necessario fare questo da soli, si
     dovrebbe essere consapevoli di quello che succederà ai pacchetti. Si
     vedrà, in maniera non approfondita, come i pacchetti vengono
     ricostruiti per architetture differenti. <footnote><p>L'attuale sistema
     di auto-costruzione è molto più complicato di come è qui
     documentato. Tali dettagli esulano dallo scopo del
     documento.</p></footnote>
   </p>
   <p>
     I pacchetti con "<tt>Architecture: any</tt>", verranno ricostruiti dal
     sistema di auto-costruzione. Ci si assicuri di avere installato
    <list>
     <item>
      <p>
        il pacchetto <package>build-essential</package>, e
      </p>
     </item>
     <item>
      <p>
        i pacchetti elencati nel campo <tt>Build-Depends:</tt> (vedere <ref
        id="control">).
      </p>
     </item>
    </list>
   </p>
   <p>
     Dopo si può eseguire il comando seguente nella directory dei sorgenti:
    <example>
$ dpkg-buildpackage -B
</example>
   </p>
   <p>
     Questo comando creerà i pacchetti binari e sorgenti al posto
     vostro. Eseguirà le seguenti operazioni:
    <list>
     <item>
      <p>
        pulirà l'albero dei sorgenti ("<tt>debian/rules clean</tt>")
      </p>
     </item>
     <item>
      <p>
        costruirà il programma ("<tt>debian/rules build</tt>")
      </p>
     </item>
     <item>
      <p>
        costruirà il pacchetto binario per una specifica architettura
        ("<tt>fakeroot debian/rules binary-arch</tt>")
      </p>
     </item>
     <item>
      <p>
        firmerà il file sorgente <file>.dsc</file> file, usando
        <prgn>gpg</prgn>
      </p>
     </item>
     <item>
      <p>
        creerà e firmerà il file di upload <file>.changes</file> file,
        usando <prgn>dpkg-genchanges</prgn> e <prgn>gpg</prgn>
      </p>
     </item>
    </list>
   </p>
   <p>
     È questo il motivo per il quale si vede il proprio pacchetto per altre
     architetture.
   </p>
   <p>
     Anche se i pacchetti sono elencati nel campo
     <tt>Build-Depends-indep:</tt>, per la normale creazione del pacchetto,
     devono comunque essere installati (vedere <ref id="completebuild">),
     invece per il sistema di auto-costruzione non è necessario installarli
     dato che costruisce solamente pacchetti binari per una specifica
     architettura. <footnote><p>Diversamente dal pacchetto
     <package>pbuilder</package>, l'ambiente <prgn>chroot</prgn> sotto il
     pacchetto <package>sbuild</package>, usato dal sistema di
     auto-costruzione, non forza la creazione di un sistema minimale, e
     potrebbe lasciare installati molti pacchetti.</p></footnote> Questa
     differenza tra la normale pacchettizzazione e il sistema di
     auto-costruzione determina se i pacchetti richiesti devono essere
     registrati nei campi <tt>Build-Depends:</tt> o
     <tt>Build-Depends-indep:</tt> nel file <file>debian/control</file>
     (vedere <ref id="control">).
   </p>
  </sect>
  <sect id="option-sa">
   <heading>
     Includere <file>orig.tar.gz</file> per il caricamento.
   </heading>
   <p>
     Quando si carica per la prima volta il pacchetto nell'archivio, si deve
     includere il file dei sorgenti originali <file>orig.tar.gz</file>. Se
     l'ultima voce del changelog non è la prima della versione originale, si
     deve eseguire il comando <prgn>dpkg-buildpackage</prgn> con l'attributo
     "<tt>-sa</tt>". Al contrario, l'opzione "<tt>-sd</tt>" forzerà
     l'esclusione del sorgente originale <file>orig.tar.gz</file>.
   </p>
  </sect>
  <sect id="debuild">
   <heading>
     Il comando <prgn>debuild</prgn>
   </heading>
   <p>
     È possibile automatizzare ulteriormente il processo di creazione del
     pacchetto, eseguito con il comando <prgn>dpkg-buildpackage</prgn>,
     utilizzando il comando <prgn>debuild</prgn>. Vedere <manref section="1"
     name="debuild">.
   </p>
   <p>
     La configurazione del comando <prgn>debuild</prgn> può essere fatta
     usando <file>/etc/devscripts.conf</file> o
     <file>~/.devscripts</file>. Ecco alcune impostazioni consigliate:
    <example>
DEBSIGN_KEYID="ID_della_vostra_chiave_GPG"
DEBUILD_LINTIAN=yes
DEBUILD_LINTIAN_OPTS="-i -I --show-overrides"
</example>
     Con queste impostazioni, i pacchetti saranno firmati usando la chiave
     GPG con l'ID specificato (questo è utile per le sponsorizzazioni) e
     controllati con il programma <prgn>lintian</prgn> in modo dettagliato.
   </p>
   <p>
     Per esempio, si può ripulire i sorgenti e ricreare il pacchetto da un
     account utente, con:
    <example>
$ debuild
</example>
   </p>
   <p>
     Si noti che il programma <prgn>dpkg-buildpackage</prgn> eseguito con
     l'opzione "<tt>-sa</tt>", può includere il sorgente originale
     <file>orig.tar.gz</file>, eccone un esempio:
    <example>
$ debuild -sa
</example>
   </p>
   <p>
     È possibile ripulire l'albero dei sorgenti con:
    <example>
$ debuild clean
</example>
   </p>
  </sect>
  <sect id="pbuilder">
   <heading>
     Il pacchetto <package>pbuilder</package>
   </heading>
   <p>
     Il pacchetto <package>pbuilder</package> è molto utile per verificare
     le dipendenze di creazione del pacchetto da un ambiente
     (<prgn>chroot</prgn>) di compilazione sano e
     minimale. <footnote><p><package>pbuilder</package> è ancora in
     evoluzione, si dovrebbe controllare l'attuale configurazione
     consultando la documentazione ufficiale più recente.</p></footnote>
     Questo assicura di compilare i sorgenti in maniera pulita, usando la
     distribuzione <tt>sid</tt> un compilatore automatico (auto-builder) per
     differenti architetture ed evita i bug FTBS (Fails To Build from
     Source) di severità seria, che sono sempre di categoria RC (Critici per
     il Rilascio). Vedi <url id="&buildd-home;"> per maggiori informazioni
     sul compilatore automatico di pacchetti Debian.
   </p>
   <p>
     Si configuri il pacchetto <package>pbuilder</package> come segue.
    <list>
     <item>
      <p>
        impostare il permesso di scrittura per l'utente alla directory
        <file>/var/cache/pbuilder/result</file>.
      </p>
     </item>
     <item>
      <p>
        creare una directory, ad
        es. <file><var>/var/cache/pbuilder/hooks</var></file>, con i
        permessi di scrittura per l'utente per potergli inserire degli
        script di hook.
      </p>
     </item>
     <item>
      <p>
        configurare il file <file>~/.pbuilderrc</file> o
        <file>/etc/pbuilderrc</file> in modo che includa le seguenti righe.
       <example>
AUTO_DEBSIGN=yes
HOOKDIR="<var>/var/cache/pbuilder/hooks</var>"
</example>
      </p>
     </item>
    </list>
   </p>
   <p>
     Questo permetterà di firmare i pacchetti generati con la tua chiave GPG
     segreta situata nella directory <file>~/.gnupg/</file>.
   </p>
   <p>
     Si avvii <package>pbuilder</package> per costruire l'ambiente
     <prgn>chroot</prgn> locale, come segue.
    <example>
$ sudo pbuilder create
</example>
   </p>
   <p>
     Se si hanno già i pacchetti sorgenti, eseguire i seguenti comandi nella
     directory in cui si trovano i file
     <file><var>foo</var>.orig.tar.gz</file>,
     <file><var>foo</var>.debian.tar.gz</file>, e
     <file><var>foo</var>.dsc</file> per aggiornare l'ambiente
     <prgn>chroot</prgn> di <package>pbuilder</package> e per costruirci
     dentro il pacchetto binario.
    <example>
$ sudo pbuilder --update
$ sudo pbuilder --build <var>foo</var>.dsc
</example>
   </p>
   <p>
     Si noti che il programma <prgn>dpkg-buildpackage</prgn> eseguito con
     l'opzione "<tt>-sa</tt>", può includere il sorgente originale
     <file>orig.tar.gz</file>, eccone un esempio:
    <example>
$ sudo pbuilder --build --debbuildopts "-sa" <var>foo</var>.dsc
</example>
   </p>
   <p>
     Il nuovo pacchetto sarà creato nella directory
     <file>/var/cache/pbuilder/result/</file> con proprietà non assegnata
     all'utente root.
   </p>
   <p>
     Se si ha già l'albero dei sorgenti aggiornato, senza generare i
     rispettivi pacchetti sorgenti, eseguire i seguenti comandi nella
     directory dei sorgenti in cui si trova il file <file>debian</file>.
    <example>
$ sudo pbuilder --update
$ pdebuild
</example>
   </p>
   <p>
     Si noti che il programma <prgn>dpkg-buildpackage</prgn> eseguito con
     l'opzione "<tt>-sa</tt>", può includere il sorgente originale
     <file>orig.tar.gz</file>, eccone un esempio:
    <example>
$ pdebuild --debbuildopts "-sa"
</example>
   </p>
   <p>
     È possibile accedere all'ambiente <prgn>chroot</prgn> con il comando
     "<tt>pbuilder --login --save-after-login</tt>" e configurarlo come si
     vuole. Questo ambiente può essere salvato, semplicemente uscendo dalla
     shell con <tt>^D</tt> (Control-D).
   </p>
   <p>
     The latest version of the <prgn>lintian</prgn> command can be executed
     in the <tt>chroot</tt> environment using the hook script configured as
     follows. <footnote><p>This assumes
     <tt>HOOKDIR="/var/cache/pbuilder/hooks"</tt>. You can find many
     examples of the hook script in the
     <file>/usr/share/doc/pbuilder/examples</file> directory.</p></footnote>
    <example>
$ cat &gt; <var>/var/cache/pbuilder/hooks</var>/B90lintian &lt;&lt;EOF
#!/bin/sh
set -e
install_packages() {
    apt-get -y --force-yes install "$@"
    }
install_packages lintian
echo "+++ lintian output +++"
su -c "lintian -i -I --show-overrides /tmp/buildd/*.changes" - pbuilder
# use this version if you don't want lintian to fail the build
#su -c "lintian -i -I --show-overrides /tmp/buildd/*.changes; :" - pbuilder
echo "+++ end of lintian output +++"
EOF
</example>
   </p>
   <p>
     You need to have access to the latest <tt>sid</tt> environment to build
     packages properly for <tt>sid</tt>. In reality, <tt>sid</tt> may be
     experiencing issues which makes it not desirable for you to migrate
     your whole system. The <package>pbuilder</package> package can help you
     to cope with this kind of situation.
   </p>
   <p>
     You may need to update your <tt>stable</tt> packages after their
     release for <tt>stable-proposed-updates</tt>, <tt>stable/updates</tt>,
     etc. <footnote><p>There are some restrictions for such updates of your
     <tt>stable</tt> package.</p></footnote> For such occasions, "I am
     running <tt>sid</tt> system" is not good enough excuse not to update
     them promptly. The <package>pbuilder</package> package can help you to
     access environments of almost any Debian derivative distributions of
     the same CPU architecture.
   </p>
   <p>
     Vedere <url id="&pbuilder-home;">, <manref section="1"
     name="pdebuild">, <manref section="5" name="pbuilderrc">, e <manref
     section="8" name="pbuilder">.
   </p>
  </sect>
  <sect id="git-buildpackage">
   <heading>
     Il comando <prgn>git-buildpackage</prgn> ed altri simili
   </heading>
   <p>
     Se l'autore originale utilizza un sistema di controllo di versione
     (<url
     id="http://www.debian.org/doc/manuals/debian-reference/ch10.en.html#_version_control_systems"
     name="VCS">) per gestire il proprio codice, si dovrebbe prendere in
     considerazione di usarlo. Questo rende molto più semplice la fusione e
     la raccolta di patch dai sorgenti originali. Ci sono diversi pacchetti
     di script adatti alla costruzione di pacchetti Debian per ogni sistema
     VCS.
    <list>
     <item>
      <p>
        <package>git-buildpackage</package>: Suite to help with Debian
        packages in Git repositories.
      </p>
     </item>
     <item>
      <p>
        <package>topgit</package>: un gestore di code per le patch che
        utilizza Git
      </p>
     </item>
     <item>
      <p>
        <package>svn-buildpackage</package>: programmi di supporto per
        mantenere i pacchetti Debian con Subversion.
      </p>
     </item>
     <item>
      <p>
        <package>cvs-buildpackage</package>: una serie di script per i
        pacchetti Debian per gli alberi di sorgenti sotto CVS.
      </p>
     </item>
    </list>
   </p>
   <p>
     These packages offer more elegant working environment than manual use
     of the <prgn>quilt</prgn> commands for advanced audiences to
     <em>automate</em> building of packages. I will not explain them in this
     tutorial. <footnote><p>Here are few web resources available for
     advanced audiences. <list><item><p>"Building Debian Packages with
     git-buildpackage" at
     <file>/usr/share/doc/git-buildpackage/manual-html/gbp.html</file>/</p></item><item><p>"<url
     id="https://honk.sigxcpu.org/piki/development/debian_packages_in_git/"
     name="debian packages in git">"</p></item><item><p>"<url
     id="http://www.eyrie.org/~eagle/notes/debian/git.html" name="Using Git
     for Debian Packaging">"</p></item><item><p>"<url
     id="http://git.debian.org/?p=collab-maint/topgit.git;a=blob_plain;f=debian/HOWTO-tg2quilt;hb=HEAD"
     name="Using TopGit to generate quilt series for Debian
     packaging">"</p></item><item><p>"<url
     id="http://git-dpm.alioth.debian.org/" name="git-dpm: debian packages
     in git manager">"</p></item></list></p></footnote>
   </p>
  </sect>
  <sect id="quickrebuild">
   <heading>
     Ricostruzione veloce
   </heading>
   <p>
     Con un pacchetto di grandi dimensioni, si potrebbe non voler
     ricostruire tutto da zero, ogni volte che si modifica un dettaglio in
     <file>debian/rules</file>. Per effettuare delle prove, si può creare un
     file <file>.deb</file>, senza ricompilare i sorgenti originali, come
     segue: <footnote><p>Le variabili d'ambiente, che sono normalmente
     impostate con dei valori corretti, non sono utilizzati in questa
     modalità. Mai creare dei pacchetti, che poi andranno caricati,
     utilizzando il metodo <strong>veloce</strong>.</p></footnote>:
    <example>
$ fakeroot debian/rules binary
</example>
     Oppure, semplicemente controllando se costruirlo o no. Come:
    <example>
$ fakeroot debian/rules build
</example>
   </p>
   <p>
     Una volta completati i vari aggiustamenti, bisogna ricordarsi di
     ricostruire il pacchetto usando la giusta procedura. Si potrebbe non
     essere in grado di caricare il pacchetto correttamente se si prova con
     dei file <file>.deb</file> creati in questo modo.
   </p>
  </sect>
 </chapt>
 <chapt id="checkit">
  <heading>
    Controllare il pacchetto per errori
  </heading>
  <p>
    Ci sono un paio di questioni da tenere in conto per controllare
    autonomamente che il pacchetto creato sia privo di errori prima di
    procedere a caricarlo negli archivi pubblici.
  </p>
  <p>
    Effettuare dei test su altre macchine oltre a quella con cui si è
    sviluppato è una buona idea. Si deve inoltre fare attenzione a tutti gli
    avvisi ed agli errori per tutti i test che verranno qui descritti.
  </p>
  <sect id="pinstall">
   <heading>
     Verifica del pacchetto per l'installazione
   </heading>
   <p>
     Bisogna verificare che il pacchetto si installi senza problemi. Il
     comando <manref section="1" name="debi"> aiuta a testare
     l'installazione di tutti i pacchetti binari generati.
    <example>
$ sudo debi gentoo_0.9.12-1_i386.changes
</example>
   </p>
   <p>
     Bisogna assicurarsi che non ci siano file che si sovrappongono ad altri
     pacchetti esistenti utilizzando il file
     <file>Contents-<var>i386</var></file> scaricato dall'archivio Debian
     per prevenire problemi di installazione su sistemi differenti. Il
     comando <prgn>apt-file</prgn> può tornare utile a questo scopo. Se ci
     sono file che si sovrappongono, si prega di prendere delle misure per
     evitare l'insorgere del problema utilizzando meccanismi alternativi (si
     veda <manref section="1" name="update-alternatives">) che permettondo
     di coordinarsi con gli altri pacchetti interessati o settano la voce
     "<tt>Conflicts:</tt>" nel file <file>debian/control</file>.
   </p>
  </sect>
  <sect id="pmaintscripts">
   <heading>
     Verifica del pacchetto per gli <em>script del manutentore</em>
   </heading>
   <p>
     Tutti gli <em>script del manutntore</em>, ad esempio,
     <file>preinst</file>, <file>prerm</file>, <file>postinst</file>, e
     <file>postrm</file>, non sono di poco conto a meno che non siano stati
     generati automaticamente dai programmi di
     <package>debhelper</package>. Si consiglia pertanto di non utilizzarli
     se non si ha sufficiente esperienza come manutentore (si veda <ref
     id="maintscripts">).
   </p>
   <p>
     Se il pacchetto utilizza questi particolari <em>script del
     manutentore</em>, ci si assicuri di effettuare delle prove non solo per
     l'operazione di install, ma anche per il remove, purge, e
     l'upgrade. Molti bu degli <em>script del manutentore</em> vengono fuori
     quando i pacchetti sono rimossi o viene applicato il purge. Si utilizzi
     il comando <prgn>dpkg</prgn> nel seguente modo per testarli.
    <example>
$ sudo dpkg -r gentoo
$ sudo dpkg -P gentoo
$ sudo dpkg -i gentoo_<var>version</var>-<var>revision</var>_<var>i386</var>.deb
</example>
   </p>
   <p>
     Questa operazione si dovrebbe effettuare con delle sequenze di questo
     tipo.
    <list>
     <item>
      <p>
        installazione della versione precedente (se necessaria).
      </p>
     </item>
     <item>
      <p>
        aggiornamento dalla versione precedente.
      </p>
     </item>
     <item>
      <p>
        ritorno alla versione precedente (opzionale).
      </p>
     </item>
     <item>
      <p>
        applicazione del purge.
      </p>
     </item>
     <item>
      <p>
        installazione del nuovo pacchetto.
      </p>
     </item>
     <item>
      <p>
        rimozione del pacchetto.
      </p>
     </item>
     <item>
      <p>
        reinstallazione del pacchetto.
      </p>
     </item>
     <item>
      <p>
        applicazione del purge.
      </p>
     </item>
    </list>
   </p>
   <p>
     Se si sta creando il primo pacchetto, andrebbero creati dei pacchetti
     fittizi con diversi numeri di versione per testare il pacchetto
     originale in anticipo e prevenire problemi futuri.
   </p>
   <p>
     Si tenga in mente che se il pacchetto è stato già rilasciato in Debian,
     le persone spesso effettueranno un aggiorneranno a quest'ultimo a
     partire dall'ultima versione disponibile su Debian. Si ricordi di
     testare gli aggiornamenti anche a partire da questa versione.
   </p>
   <p>
     Anche se il ritorno ad una versione precedente non è supportato
     ufficialmente, sarebbe buona abitudine che lo fosse.
   </p>
  </sect>
  <sect id="lintians">
   <heading>
     Il pacchetto <package>lintian</package>
   </heading>
   <p>
     Si esegua <manref section="1" name="lintian"> sul file
     <file>.changes</file>. Il comando <prgn>lintian</prgn> esegue molti
     script di test alla ricerca dei più comuni errori di
     impacchettamento. <footnote><p>Non c'è bisogno di fornire l'opzione
     <prgn>lintian</prgn> "<tt>-i -I --show-overrides</tt>" se si è
     personalizzato il file <file>/etc/devscripts.conf</file> o il file
     <file>~/.devscripts</file> come descritto in <ref
     id="debuild">. </p></footnote>
    <example>
$ lintian -i -I --show-overrides gentoo_0.9.12-1_i386.changes
</example>
   </p>
   <p>
     Ovviamente va rimpiazzato il nome con quello del file
     <file>.changes</file> generato per il pacchetto. I risultati del
     comando <prgn>lintian</prgn> vengono qui elencati di seguito.
    <list>
     <item>
      <p>
        <tt>E:</tt> errore; una violazione certa di una policy o un errore
        di impacchettamento.
      </p>
     </item>
     <item>
      <p>
        <tt>W:</tt> attenzione; una possibile violazione di policy o un
        errore di impacchettamento.
      </p>
     </item>
     <item>
      <p>
        <tt>I:</tt> informazione; una informazione su alcuni aspetti
        dell'impacchettamento.
      </p>
     </item>
     <item>
      <p>
        <tt>N:</tt> nota; un messaggio dettagliato per aiutare nell'analisi
        degli errori.
      </p>
     </item>
     <item>
      <p>
        <tt>O:</tt> for overridden; a message overridden by the
        <file>lintian-overrides</file> files but displayed by the
        <tt>--show-overrides</tt> option.
      </p>
     </item>
    </list>
   </p>
   <p>
     Per gli avvertimenti, si imposti il pacchetto in modo tale da evitarli
     o si verifichi che tali avvertimenti non siano indicativi di un
     errore. In quest'ultimo caso, si impostino i file
     <file>lintian-overrides</file> come descritto in <ref id="lintian">.
   </p>
   <p>
     Si noti che si può costruire il pacchetto con
     <prgn>dpkg-buildpackage</prgn> ed eseguire <prgn>lintian</prgn> su di
     esso in una sola volta con <manref section="1" name="debuild"> o con
     <manref section="1" name="pdebuild">.
   </p>
  </sect>
  <sect id="debc">
   <heading>
     Il comando <prgn>debc</prgn>
   </heading>
   <p>
     Si possono elemcare i file nel pacchetto binario Debian con il comando
     <manref section="1" name="debc">.
    <example>
$ debc <var>package</var>.changes
</example>
   </p>
  </sect>
  <sect id="debdiff">
   <heading>
     Il comando <prgn>debdiff</prgn>
   </heading>
   <p>
     Si può confrontare il contenuto dei file in due pacchetti sorgente
     Debian con il comando <manref section="1" name="debdiff">.
    <example>
$ debdiff <var>old-package</var>.dsc <var>new-package</var>.dsc
</example>
   </p>
   <p>
     Si possono anche confrontare le liste di file in due set di pacchetti
     binari Debian con il comando <manref section="1" name="debdiff">.
    <example>
$ debdiff <var>old-package</var>.changes <var>new-package</var>.changes
</example>
   </p>
   <p>
     Questi comandi sono utili per vedere cosa sia cambiato nei pacchetti
     sorgente, se alcun file sia stato spostato non avvertitamente o rimosso
     dai pacchetti, e se altri cambiamenti non intenzionali siano stati
     fatti durante l'aggiornamento dei pacchetti binari.
   </p>
  </sect>
  <sect id="interdiff">
   <heading>
     Il comando <prgn>interdiff</prgn>
   </heading>
   <p>
     Si possono confrontare due file <file>diff.gz</file> con il comando
     <manref section="1" name="interdiff">. Questo è utile per verificare
     che il manutentore non abbia inavvertitamente fatto dei cambiamenti ai
     sorgenti durante il processo di aggiornamento dei pacchettinel vecchio
     formato sorgente <tt>1.0</tt>.
    <example>
$ interdiff -z <var>old-package</var>.diff.gz <var>new-package</var>.diff.gz
</example>
   </p>
  </sect>
  <sect id="mc">
   <heading>
     Il comando <prgn>mc</prgn>
   </heading>
   <p>
     Molte delle operazione di ispezione dei file possono essere rese più
     semplici utilizzando un gestore dei file come <manref section="1"
     name="mc">, che permette di navigare non solo il contenuto dei
     pacchetti in formato <file>*.deb</file> ma anche degli
     <file>*.udeb</file>, <file>*.debian.tar.gz</file>,
     <file>*.diff.gz</file>, e dei file <file>*.orig.tar.gz</file>.
   </p>
   <p>
     Si faccia attenzione ad ulteriori file non necessari o vuoti, sia nel
     pacchetto binario che in quello sorgente. Spesso non vengono ripuliti
     correttamente; si aggiusti il file <file>rules</file> per riparare a
     questo problema.
   </p>
  </sect>
 </chapt>
 <chapt id="upload">
  <heading>
    Caricamento del pacchetto
  </heading>
  <p>
    Una volta testato il nuovo pacchetto approfonditamente, si potrà
    procedere con il processo di candidatura a nuovo manutentore Debian,
    come descritto in <url id="http://www.debian.org/devel/join/newmaint">.
  </p>
  <sect id="upload-debian">
   <heading>
     Caricamento nell'archivio Debian
   </heading>
   <p>
     Una volta diventati sviluppatori ufficiali, si dovrà caricare il
     pacchetto nell'archivio Debian. Si potebbe fare manualmente, ma è più
     semplice usare i tool automatici che vengono forniti, come <manref
     section="1" name="dupload"> o <manref section="1" name="dput">. Verrà
     qui descritto come tutto ciò può essere fatto utilizzando
     <prgn>dupload</prgn>. <footnote><p>Il pacchetto <package>dput</package>
     sembra avere più funzionalità e sta divenendo più famoso del pacchetto
     <package>dupload</package>. Questo utilizza il file
     <file>/etc/dput</file> per la configurazione globale ed il file
     <file>~/.dput.cf</file> per quella dei singoli utenti. Inoltre supporta
     nativamente anche i servizi relativi ad Ubuntu. </p></footnote>
   </p>
   <p>
     Innanzitutto andrà impostato il file di configurazione di
     <prgn>dupload</prgn>. Si può modificare il file
     <file>/etc/dupload.conf</file> per l'intero sistema, oppure far si che
     il file <file>~/.dupload.conf</file> sovrascriva le poche cose che si
     vogliono cambiare.
   </p>
   <p>
     Si legga la pagina del manuale <manref section="5" name="dupload.conf">
     per capire cosa significhino tutte le opzioni.
   </p>
   <p>
     L'opzione <tt>$default_host</tt> determina quali tra le code di
     caricamento vengano utilizzate di
     default. <tt>anonymous-ftp-master</tt> è quella primaria, ma è
     possibile utilizzarne anche altre.
   </p>
   <p>
     Se si è connessi ad internet, si può caricare il proprio pacchetto con
     il comando:
    <example>
$ dupload gentoo_0.9.12-1_i386.changes
</example>
   </p>
   <p>
     <prgn>dupload</prgn> controlla che i checksum MD5/SHA1/SHA256 dei file
     corrispondano con quelli del file <file>.changes</file>, così si verrà
     avvertiti di ricostruire il pacchetto come descritto in <ref
     id="completebuild"> per poi poterlo ricaricare.
   </p>
   <p>
     Se si incontrano problemi nel caricamento su <url
     id="&ftp-uploadqueue;">, si può porre rimedio caricando automaticamente
     il file <file>*.commands</file> firmato con GPG via
     <prgn>ftp</prgn>. <footnote><p>Si veda <url
     id="&ftp-command;">. Alternativamente, si può utilizzare il comando
     <prgn>dcut</prgn> del pacchetto
     <package>dput</package>. </p></footnote> Per esempio, si prenda il file
     <file>hello.commands</file>:
    <example>
-----BEGIN PGP SIGNED MESSAGE-----

Uploader: Foo Bar &lt;Foo.Bar@example.org&gt;
Commands: 
 rm hello_1.0-1_i386.deb
 mv hello_1.0-1.dsx hello_1.0-1.dsc

-----BEGIN PGP SIGNATURE-----
Version: 2.6.3ia

iQCVAwUBNFiQSXVhJ0HiWnvJAQG58AP+IDJVeSWmDvzMUphScg1EK0mvChgnuD7h
BRiVQubXkB2DphLJW5UUSRnjw1iuFcYwH/lFpNpl7XP95LkLX3iFza9qItw4k2/q
tvylZkmIA9jxCyv/YB6zZCbHmbvUnL473eLRoxlnYZd3JFaCZMJ86B0Ph4GFNPAf
Z4jxNrgh7Bc=
=pH94
-----END PGP SIGNATURE-----
</example>
   </p>
   <p>
     Si veda <url id="http://mentors.debian.net/cgi-bin/welcome"
     name="mentors.debian.net"> per l'area pubblica di caricamento per gli
     sviluppatori non Debian.
   </p>
   <p>
     Si veda <url
     id="http://www.debian.org/doc/manuals/debian-reference/ch02.en.html#_small_public_package_archive"
     name="Debian Reference, 2.7.12. 'Small public package archive'"> per
     avere un esempio di creazione di un piccolo archivio pubblico di
     pacchetti che sia compatibile con il moderno e sicuro sistema APT.
   </p>
  </sect>
 </chapt>
 <chapt id="update">
  <heading>
    Aggiornamento del pacchetto
  </heading>
  <p>
    Una volta rilasciato un pacchetto, ci sarà presto bisogno di
    aggiornarlo.
  </p>
  <sect id="newrevision">
   <heading>
     Nuova revisione Debian
   </heading>
   <p>
     Si supponga che sia stato compilato il bug report <tt>#54321</tt> per
     il pacchetto creato, e che questo descriva un problema che si può
     risolvere. Per creare una nuova revisione del pacchetto Debian, si
     proceda come qui di seguito descritto:
    <list>
     <item>
      <p>
        Se la modifica deve essere registrata come una nuova patch, si
        seguano queste istruzioni.
       <list>
        <item>
         <p>
           "<tt>quilt new <var>bugname.patch</var></tt>" per impostare il
           nome della patch.
         </p>
        </item>
        <item>
         <p>
           "<tt>quilt add <var>buggy-file</var></tt>" per indicare i file
           modificati.
         </p>
        </item>
        <item>
         <p>
           Correggere il problema evidenziato dal bug report nel pacchetto
           sorgente.
         </p>
        </item>
        <item>
         <p>
           "<tt>quilt refresh</tt>" per registrare le modifiche in
           <file><var>bugname.patch</var></file>.
         </p>
        </item>
        <item>
         <p>
           "<tt>quilt header -e</tt>" per aggiungere una descrizione.
         </p>
        </item>
       </list>
      </p>
     </item>
     <item>
      <p>
        Se la modifica è un aggiornamento ad una patch esistente, si seguano
        queste istruzioni.
       <list>
        <item>
         <p>
           "<tt>quilt pop <var>foo.patch</var></tt>" per richiamare la patch
           <file><var>foo.patch</var></file> esistente.
         </p>
        </item>
        <item>
         <p>
           Correggere il problema nella vecchia patch
           <file><var>foo.patch</var></file>.
         </p>
        </item>
        <item>
         <p>
           "<tt>quilt refresh</tt>" per aggiornare
           <file><var>foo.patch</var></file>.
         </p>
        </item>
        <item>
         <p>
           "<tt>quilt header -e</tt>" per aggiornarne la descrizione.
         </p>
        </item>
        <item>
         <p>
           "<tt>while quilt push; do quilt refresh; done</tt>" per applicare
           tutte le patch mentre si sta rimouvendo il "<em>fuzz</em>".
         </p>
        </item>
       </list>
      </p>
     </item>
     <item>
      <p>
        Aggiuungere una nuova revisione in cima al file di
        <file>changelog</file> Debian, per esempio con "<tt>dch -i</tt>", o
        esplicitamente con "<tt>dch -v
        <var>version</var>-<var>revision</var></tt>" e poi inserire i
        commenti utilizzando l'editor preferito. <footnote><p>Per impostare
        la data nel formato corretto, si usi "<tt>LANG=C date
        -R</tt>".</p></footnote>
      </p>
     </item>
     <item>
      <p>
        Includere nella nuova voce del changelog una breve descrizione del
        problema e della relativa soluzione, seguita da "<tt>Closes:
        #54321</tt>". In questo modo, il report del problema verrà
        <em>automagicamente</em> chiuso dal programma di manutenzione
        dell'archivio Debian nel momento stesso in cui il pacchetto viene
        accettato.
      </p>
     </item>
     <item>
      <p>
        Si ripetano questi passaggi per risolvere ulteriori problemi e si
        ricordi nel frattempo di aggiornare il file Debian di
        <file>changelog</file> con "<tt>dch</tt>" a seconda della necessità.
      </p>
     </item>
     <item>
      <p>
        Si ripetano i passi fatti in <ref id="completebuild">, <ref
        id="checkit">, e <ref id="upload">. La differenza è che questa
        volta, l'archivio sorgente originale non sarà incluso, dal momento
        che non è stato modificato ed esiste già nell'archivio Debian.
      </p>
     </item>
    </list>
   </p>
  </sect>
  <sect id="inspectnewupstream">
   <heading>
     Controllo della nuova distribuzione
   </heading>
   <p>
     Quando si stanno preparando i pacchetti della nuova distribuzione per
     l'archivio Debian, bisogna innanzitutto effettuare dei controlli.
   </p>
   <p>
     Si comincia leggendo i file originali <file>changelog</file>,
     <file>NEWS</file>, e qualsiasi altra documentazione che possa essere
     stata rilasciata con la nuova versione.
   </p>
   <p>
     Successivamentesi controllano i cambiamenti tra i sorgenti originali e
     quelli nuovi, come mostrato in seguito, alla ricerca di qualsiasi
     modifica sospetta.
    <example>
$ diff -urN <var>foo</var>-<var>oldversion</var> <var>foo</var>-<var>newversion</var>
</example>
   </p>
   <p>
     Cambiamenti effettuati ad alcuni file generati automaticamente dagli
     autotools come <file>missing</file>, <file>aclocal.m4</file>,
     <file>config.guess</file>, <file>config.h.in</file>,
     <file>config.sub</file>, <file>configure</file>, <file>depcomp</file>,
     <file>install-sh</file>, <file>ltmain.sh</file>, e
     <file>Makefile.in</file> possono essere ignorati. Possono anzi venire
     cancellati prima di eseguire <prgn>diff</prgn> per controllare i
     sorgenti.
   </p>
  </sect>
  <sect id="newupstream">
   <heading>
     Nuova distribuzione
   </heading>
   <p>
     Se un pacchetto <package><var>foo</var></package> è stato impacchettato
     correttamente nei nuovi formati <tt>3.0 (native)</tt> o <tt>3.0
     (quilt)</tt>, si rende necessario impacchettare anche la versione
     originale muovendo la directory <file>debian</file> nella nuova
     sorgente. Questo può essere fatto eseguendo "<tt>tar xvzf
     /<var>path</var>/<var>to</var>/<var>foo</var>_<var>oldversion</var>.debian.tar.gz</tt>"
     nella nuova directory sorgente scompattata. <footnote><p>Se un
     pacchetto <package><var>foo</var></package> è stato impacchettato nel
     vecchio formato <tt>1.0</tt>, si deve invece eseguire "<tt>zcat
     /<var>path</var>/<var>to</var>/<var>foo</var>_<var>oldversion</var>.diff.gz|patch
     -p1</tt>" nella nuova directory sorgente scompattata. </p></footnote>
     Ovviamente bisognerà effettuare alcuni passaggi.
    <list>
     <item>
      <p>
        Creare una copia dela sorgente originale nel file
        <file>foo_<var>newversion</var>.tar.gz</file>.
      </p>
     </item>
     <item>
      <p>
        Aggiornare il file di <file>changelog</file> Debian con "<tt>dch -v
        <var>newversion</var>-<var>1</var></tt>".
       <list>
        <item>
         <p>
           Aggiungere una voce che dica "New upstream release".
         </p>
        </item>
        <item>
         <p>
           Descrivere brevemente i cambiamenti <em>nella nuova
           distribuzione</em> che correggono i bug riportati e ne chiudono
           altri.
         </p>
        </item>
        <item>
         <p>
           Descrivere brevemente i cambiamenti <em>nella nuova
           distribuzione</em>, effettuati dal manutentore, che correggono i
           bug riportati e li chiudono.
         </p>
        </item>
       </list>
      </p>
     </item>
     <item>
      <p>
        "<tt>while quilt push; do quilt refresh; done</tt>" per applicare
        tutte le patch mentre si sta rimouvendo il "<em>fuzz</em>".
      </p>
     </item>
    </list>
   </p>
   <p>
     Se la patch/merge non è stata applicata in maniera corretta, si
     controlli la situazione (gli indizi vengono lasciati nei file
     <file>.rej</file>).
    <list>
     <item>
      <p>
        Se una patch applicata alla sorgente è stata integrata nei sorgenti
        originali,
       <list>
        <item>
         <p>
           si rimuova con "<tt>quilt delete</tt>".
         </p>
        </item>
       </list>
      </p>
     </item>
     <item>
      <p>
        Se una patch applicata alla sorgente è andata in conflitto con i
        nuovi cambiamenti ni sorgenti originali,
       <list>
        <item>
         <p>
           si esegua "<tt>quilt push -f</tt>" per applicare le vecchie patch
           forzando gli scarti nel file <file><var>baz</var>.rej</file>.
         </p>
        </item>
        <item>
         <p>
           Modificare manualmente il file <file><var>baz</var></file> per
           applicare gli effetti desiderati presenti nel file
           <file><var>baz</var>.rej</file>.
         </p>
        </item>
        <item>
         <p>
           "<tt>quilt refresh</tt>" per aggiornare la patch.
         </p>
        </item>
       </list>
      </p>
     </item>
     <item>
      <p>
        Ritornare alla procedura "<tt>while quilt push; do quilt refresh;
        done</tt>".
      </p>
     </item>
    </list>
   </p>
   <p>
     Questo processo può essere automatizzato utilizzando il comando <manref
     section="1" name="uupdate"> come segue:
    <example>
$ apt-get source <var>foo</var>
...
dpkg-source: info: extracting <var>foo</var> in <var>foo</var>-<var>oldversion</var>
dpkg-source: info: unpacking <var>foo</var>_<var>oldversion</var>.orig.tar.gz
dpkg-source: info: applying <var>foo</var>_<var>oldversion</var>-1.debian.tar.gz
$ ls -F
<var>foo</var>-<var>oldversion</var>/
<var>foo</var>_<var>oldversion</var>-1.debian.tar.gz
<var>foo</var>_<var>oldversion</var>-1.dsc
<var>foo</var>_<var>oldversion</var>.orig.tar.gz
$ wget http://example.org/<var>foo</var>/<var>foo</var>-<var>newversion</var>.tar.gz
$ cd <var>foo</var>-<var>oldversion</var>
$ uupdate -v <var>newversion</var> ../<var>foo</var>-<var>newversion</var>.tar.gz
$ cd ../<var>foo</var>-<var>newversion</var>
$ while quilt push; do quilt refresh; done
$ dch
... document changes made
</example>
   </p>
   <p>
     If you set up a <file>debian/watch</file> file as described in <ref
     id="watch">, you can skip the <prgn>wget</prgn> command. You simply run
     <manref section="1" name="uscan"> in the
     <file><var>foo</var>-<var>oldversion</var></file> directory instead of
     the <prgn>uupdate</prgn> command. This will <em>automagically</em> look
     for the updated source, download it, and run the <prgn>uupdate</prgn>
     command. <footnote><p>If the <prgn>uscan</prgn> command downloads the
     updated source but it does not run the <prgn>uupdate</prgn> command,
     you should correct the <file>debian/watch</file> file to have
     "<tt>debian uupdate</tt>" at the end of the URL. </p></footnote>
   </p>
   <p>
     Si possono rilasciare questi sorgenti aggiornati ripetendo ciò che si è
     fatto in <ref id="completebuild">, <ref id="checkit">, ed <ref
     id="upload">.
   </p>
  </sect>
  <sect id="packagestyle">
   <heading>
     Aggiornare lo stile di impacchettamento
   </heading>
   <p>
     L'aggiornamento dello stile del pacchetto non è una attività
     obbligatoria nel processo di aggiornamento di quest'ultimo. Tuttavia
     facendo ciò si può sfruttare appieno la capacità del moderno sistema
     <package>debhelper</package> ed il formato sorgente
     <tt>3.0</tt>. <footnote><p>Se il proprio sponsor o altri manutentori
     non ritengono sia necessario aggiornare lo stile del pacchetto, allora
     non vale la pena impegnarcisi. Ci sono cose più importanti da
     fare.</p></footnote>
    <list>
     <item>
      <p>
        Se c'è bisogno per qualsiasi motivo di aggiungere file di template
        cancellati, si può ancora eseguire il comando <prgn>dh_make</prgn>
        nella stessa directory, già <em>debianizzata</em>, con l'opzione
        <tt>--addmissing</tt>. Fatto ciò si potrà modificarla di
        conseguenza.
      </p>
     </item>
     <item>
      <p>
        Se il pacchetto non è stato aggiornato per utilizzare la sintassi V7
        di <prgn>dh</prgn> del pacchetto <package>debhelper</package> per il
        file <file>debian/rules</file>, si deve effettuare una aggiornamento
        per poter usare <prgn>dh</prgn>. Si aggiorni di conseguenza anche il
        file <file>debian/control</file>.
      </p>
     </item>
     <item>
      <p>
        Se si vuole aggiornare il file <file>rules</file> creato con il
        meccanismo di inclusione del makefile del Common Debian Build System
        (<package>cdbs</package>) per la sintassi di <prgn>dh</prgn>, si
        veda <file>/usr/share/doc/cdbs/cdbs-doc.html</file> e si presti
        attenzione alle sue variabili di configurazione
        <tt>DEB_*</tt>. <footnote><p>Nel pacchetto <package>cdbs</package>
        (0.4.74), ci sono alcune note errate riguardo al file
        <file>rules</file> creato dal comando <prgn>dh_make</prgn> per le
        scelte che non utilizzano <package>cdbs</package>. Non ce se ne deve
        preoccupare. Queste ultime si riferivano solo alla distribuzione
        <tt>lenny</tt> che creava esplicitamente delle regole come una lunga
        lista di comandi <prgn>dh_*</prgn>.</p></footnote>
      </p>
     </item>
     <item>
      <p>
        Se si ha un pacchetto sorgente nella versione <tt>1.0</tt> senza il
        file <file><var>foo</var>.diff.gz</file>, si può aggiornare al nuovo
        formato sorgente <tt>3.0 (native)</tt> creando il file
        <file>debian/source/format</file> con "<tt>3.0 (native)</tt>". Gli
        altri file <file>debian/*</file> possono essere semplicemente
        copiati.
      </p>
     </item>
     <item>
      <p>
        If you have a <tt>1.0</tt> source package with the
        <file><var>foo</var>.diff.gz</file> file, you can update it to the
        newer <tt>3.0 (native)</tt> source format by creating
        <file>debian/source/format</file> with "<tt>3.0 (quilt)</tt>". The
        rest of <file>debian/*</file> files can be just copied. Import the
        <file>big.diff</file> file generated by the "<tt>filterdiff -z -x
        '*/debian/*' <var>foo</var>.diff.gz &gt; big.diff</tt>" command to
        your <prgn>quilt</prgn> system, if needed. <footnote><p>You may
        split <file>big.diff</file> into many small incremental patches
        using the <prgn>splitdiff</prgn> command.</p></footnote>
      </p>
     </item>
     <item>
      <p>
        Se è stato pacchettizzato con il comando <package>dpatch</package>,
        si converta con il comando <package>quilt</package> usando lo script
        <file>/usr/share/doc/quilt/examples/dpatch2quilt.sh</file>.
      </p>
     </item>
     <item>
      <p>
        If it was packaged with the <prgn>dh</prgn> command with the
        "<tt>--with quilt</tt>" option or with the
        <prgn>dh_quilt_patch</prgn> and <prgn>dh_quilt_unpatch</prgn>
        commands, remove such things and make it use the newer <tt>3.0
        (native)</tt> source format.
      </p>
     </item>
    </list>
   </p>
   <p>
     Ci sarà anche bisogno di eseguire ulteriori operazioni descritte in
     <ref id="newupstream">.
   </p>
  </sect>
  <sect id="reminders">
   <heading>
     Note per l'aggiornamento dei pacchetti
   </heading>
   <p>
     Vengono qui presentate alcune note per l'aggiornamento dei pacchetti.
    <list>
     <item>
      <p>
        Si preservino le vecchie voci del changelog (sembra ovvio, ma a
        volte si sono verificati problemi per aver scritto "<tt>dch</tt>"
        mentre si sarebbe dovuto scrivere "<tt>dch -i</tt>".)
      </p>
     </item>
     <item>
      <p>
        Cambiamenti preesistenti devono essere ricontrollati; si scarti
        tutto ciò che è stato incorporato in upstream (in una forma o
        nell'altra) e ci si ricordi di mantenere tutto quello che non è
        stato incorporato dall'upstream, a meno che non ci sia una buona
        ragione per non farlo.
      </p>
     </item>
     <item>
      <p>
        Se è stato fatto qualsiasi cambiamento nel sistema di costruzione
        del pacchetto (sperabilmente ce se ne renderà conto controllando i
        cambiamenti dall'originale) allora si aggiorni il file
        <file>debian/rules</file> e le dipendenze di
        <file>debian/control</file> se necessario.
      </p>
     </item>
     <item>
      <p>
        Si controlli <url id="http://www.debian.org/Bugs/" name="Debian Bug
        Tracking System (BTS)"> se qualcuno abbia fornito delle patch a bug
        che sono attualmente aperti.
      </p>
     </item>
     <item>
      <p>
        Si controlli il contenuto del file <file>.changes</file> per essere
        sicuri che si stia caricando la distribuzione corretta; le
        risoluzioni ai bug vengono listate nel campo <tt>Closes:</tt>, i
        campi <tt>Maintainer:</tt> e <tt>Changed-By:</tt> corrispondono, il
        file è firmato con GPG, ecc.
      </p>
     </item>
    </list>
   </p>
  </sect>
 </chapt>
</book>
</debiandoc>
