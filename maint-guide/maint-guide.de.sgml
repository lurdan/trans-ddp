<!DOCTYPE debiandoc PUBLIC "-//DebianDoc//DTD DebianDoc//EN" [




  <!--  ( This is taken from debian-reference)

When editing this file, use 8 bit clean and dumb editor such as mcedit.

Do not use smart editor such as emacs and vim.

These variables are read and used by all ???.??.sgml; they are included
separate from the main document since they may need to change.  This
allows builders to override the defaults without editing the main SGML
file.

Remember, this is SGML; the *first* definition of an entity wins.

-->
<!-- Update this as you update English version -->
<!ENTITY dochome "/usr/share/doc">
<!ENTITY developers-reference "&dochome;/developers-reference/">
<!ENTITY uploading "&dochome;/developers-reference/pkgs.html#upload">
<!ENTITY bughandling "&dochome;/developers-reference/pkgs.html#bug-handling">
<!ENTITY debian-policy "&dochome;/debian-policy/policy.html/index.html">
<!ENTITY maint-guide "&dochome;/maint-guide/maint-guide.en.html/index.en.html">
<!ENTITY autotools-dev "&dochome;/autotools-dev/README.Debian.gz">
<!ENTITY newmaint "http://www.debian.org/devel/join/newmaint">
<!ENTITY nm-home "http://nm.debian.org/">
<!ENTITY buildd-home "http://buildd.debian.org/">
<!ENTITY mentors-faq "http://people.debian.org/~mpalmer/debian-mentors_FAQ.html">
<!ENTITY pbuilder-home "http://www.netfort.gr.jp/~dancer/software/pbuilder.html">
<!ENTITY ftp-uploadqueue "ftp://ftp.upload.debian.org/pub/UploadQueue/">
<!ENTITY ftp-command "&ftp-uploadqueue;README">
<!ENTITY copyright-howto "http://lists.debian.org/debian-devel-announce/2006/03/msg00023.html">

<!-- I decided not to mention this in NM guide --> 
<!ENTITY repackage-source "http://bugs.debian.org/278524">

<!ENTITY makefile "     1  #!/usr/bin/make -f
     2  # -*- makefile -*-
     3  # Sample debian/rules that uses debhelper.
     4  # This file was originally written by Joey Hess and Craig Small.
     5  # As a special exception, when this file is copied by dh-make into a
     6  # dh-make output file, you may use that output file without restriction.
     7  # This special exception was added by Craig Small in version 0.37 of dh-make.
     8  # Uncomment this to turn on verbose mode.
     9  #export DH_VERBOSE=1
    10  configure: configure-stamp
    11  configure-stamp:
    12          dh_testdir
    13          # Add here commands to configure the package.
    14          touch configure-stamp
    15  build: build-stamp
    16  build-stamp: configure-stamp  
    17          dh_testdir
    18          # Add here commands to compile the package.
    19          $(MAKE)
    20          #docbook-to-man debian/testpack.sgml > testpack.1
    21          touch $@
    22  clean: 
    23          dh_testdir
    24          dh_testroot
    25          rm -f build-stamp configure-stamp
    26          # Add here commands to clean up after the build process.
    27          $(MAKE) clean
    28          dh_clean 
    29  install: build
    30          dh_testdir
    31          dh_testroot
    32          dh_clean -k 
    33          dh_installdirs
    34          # Add here commands to install the package into debian/testpack.
    35          $(MAKE) DESTDIR=$(CURDIR)/debian/testpack install
    36  # Build architecture-independent files here.
    37  binary-indep: build install
    38  # We have nothing to do by default.
    39  # Build architecture-dependent files here.
    40  binary-arch: build install
    41          dh_testdir
    42          dh_testroot
    43          dh_installchangelogs 
    44          dh_installdocs
    45          dh_installexamples
    46  #       dh_install
    47  #       dh_installmenu
    48  #       dh_installdebconf       
    49  #       dh_installlogrotate
    50  #       dh_installemacsen
    51  #       dh_installpam
    52  #       dh_installmime
    53  #       dh_python
    54  #       dh_installinit
    55  #       dh_installcron
    56  #       dh_installinfo
    57          dh_installman
    58          dh_link
    59          dh_strip
    60          dh_compress
    61          dh_fixperms
    62  #       dh_perl
    63  #       dh_makeshlibs
    64          dh_installdeb
    65          dh_shlibdeps
    66          dh_gencontrol
    67          dh_md5sums
    68          dh_builddeb
    69  binary: binary-indep binary-arch
    70  .PHONY: build clean binary-indep binary-arch binary install configure">

<!ENTITY % version SYSTEM "version.ent">  %version;

]>
<debiandoc>
 <book>
  <titlepag>
   <title>
     Anleitung für zukünftige Debian-Betreuer
   </title>
   <author>
     <name>Josip Rodin </name><email>joy-mg@debian.org</email>
   </author>
   <translator>Übersetzung von Tobias Quathamer <email>toddy@debian.org</email></translator>
   <translator>Erik Schanze <email>mail@erikschanze.de</email></translator>
   <translator>und Eduard Bloch <email>blade@debian.org</email></translator>
   <version>
     Diese Übersetzung wird derzeit aktualisiert.
     Teile beruhen auf Version 1.2.3 vom 18. Januar 2005,
     die aktuelle Version ist &docversion;, &docisodate;
   </version>
   <copyright>
    <copyrightsummary>
      Copyright &copy; 1998-2002 Josip Rodin
    </copyrightsummary>
    <copyrightsummary>
      Copyright &copy; 2005-2010 Osamu Aoki
    </copyrightsummary>
    <copyrightsummary>
      Copyright &copy; 2010 Craig Small
    </copyrightsummary>
    <copyrightsummary>
      Copyright &copy; 2010 Raphaël Hertzog
    </copyrightsummary>
    <p>
      Dieses Dokument darf gemäß der Bedingungen der GNU General Public
      License Version 2 oder neuer verwendet werden.
    </p>
    <p>
      Diesem Dokument liegen die Beispiele der folgenden zwei Dokumente zu
      Grunde:
    </p>
    <p>
      Making a Debian Package (AKA the Debmake Manual), Copyright &copy;
      1997 Jaldhar Vyas.
    </p>
    <p>
      The New-Maintainer's Debian Packaging Howto, Copyright &copy; 1997
      Will Lowe.
    </p>
   </copyright>
  </titlepag>
  <toc detail="sect1">
 
 <chapt id="start">
  <heading>
    Einstieg, aber richtig!
  </heading>
  <p>
    Dieses Dokument versucht, einem typischen Debian-Benutzer und
    zukünftigen Entwickler in einer verständlichen Sprache die Technik der
    Paketerstellung für Debian beizubringen, begleitet von funktionierenden
    Beispielen. Ein altes lateinisches Sprichwort lautet: <em>Longum iter
    est per preaecepta, breve et efficax per exempla!</em> (Es ist ein
    langer Weg mit Regeln, aber ein kurzer und effizienter mit Beispielen!)
  </p>
  <p>
    Dieses Dokument wurde für die Debian-Release <tt>Squeeze</tt>
    aktualisiert. <footnote><p>In diesem Dokument wird davon ausgegangen,
    dass Sie ein <tt>Squeeze</tt>-System verwenden. Wenn Sie diesen Text auf
    einem <tt>Lenny</tt>-System lesen, müssen Sie mindestens die
    zurückportierten Pakete <package>dpkg</package> und
    <package>debhelper</package> installieren.</p></footnote>
  </p>
  <p>
    Eines der Dinge, die Debian zu einer hervorragenden Distribution machen,
    ist das Paket-System. Obwohl massenhaft Software im Debian-Format
    vorhanden ist, muss man manchmal auch Software installieren, die nicht
    in diesem Format vorliegt. Sie fragen sich vermutlich, wie man eigene
    Pakete erstellt und vielleicht meinen Sie, es sei eine sehr komplizierte
    Aufgabe. Nun, wenn Sie ein absoluter Linux-Neuling sind, dann ist es
    wirklich schwierig, aber als Anfänger würden Sie dieses Dokument jetzt
    nicht lesen. :-) Sie sollten schon ein wenig Kenntnisse über die
    Unix-Programmierung mitbringen, aber Sie brauchen ganz sicher kein Guru
    zu sein.
  </p>
  <p>
    Eines ist wohl sicher: um Debian-Pakete richtig zu bauen und zu warten,
    brauchen Sie viel Zeit. Schätzen Sie das nicht falsch ein; damit unser
    System funktioniert, muss der Betreuer sowohl technisch kompetent sein
    als auch fleißig und sorgfältig arbeiten.
  </p>
  <p>
    Dieses Dokument wird jeden kleinen (möglicherweise auch irrelevanten)
    Schritt erklären, um Ihnen bei der Erstellung des ersten Pakets zu
    helfen. Außerdem bekommen Sie etwas Erfahrung im Erstellen neuer
    Veröffentlichungen des Pakets undvielleicht später anderer Pakete.
  </p>
  <p>
    Wenn Sie Hilfe beim Erstellen des Pakets brauchen, lesen Sie bitte <ref
    id="helpme">.
  </p>
  <p>
    Neuere Versionen dieses Dokuments sollten immer über <url
    id="http://www.debian.org/doc/maint-guide/"
    name="http://www.debian.org/doc/maint-guide/"> und in dem Paket
    <package>maint-guide-de</package> zu finden sein.
  </p>
  <sect id="needprogs">
   <heading>
     Programme, die Sie zum Entwickeln brauchen
   </heading>
   <p>
     Bevor Sie loslegen können, müssen Sie sicherstellen, dass einige
     zusätzliche Pakete richtig installiert sind, die für die Entwicklung
     benötigt werden. Beachten Sie, dass die Liste keine Pakete enthält, die
     als <tt>essential</tt> oder <tt>required</tt> markiert sind - wir gehen
     davon aus, dass Sie diese schon installiert haben.
   </p>
   <p>
     Die folgenden Pakete sind in der Standardinstallation von Debian
     enthalten, also werden Sie sie vermutlich schon haben (und zusätzliche
     Pakete, von denen diese abhängen). Sie sollten es dennoch mit
     »<tt>aptitude show <var>Paket</var></tt>« überprüfen.
   </p>
   <p>
     Das wichtigste Paket, dass auf Ihrem Entwicklungssystem installiert
     werden sollte, ist das Paket <package>build-essential</package>. Wenn
     Sie es installieren, wird es andere Paket <em>hinterherziehen (»pull
     in«)</em>, die für eine grundlegende Build-Umgebung notwendig sind.
   </p>
   <p>
     Für manche Arten von Paketen ist das alles, was Sie benötigen. Es gibt
     allerdings noch eine weitere Sammlung von Paketen, die - obwohl sie
     nicht essenziell für jede Paketerstellung sind - sinnvoll installiert
     werden können oder sogar von Ihrem Paket benötigt werden:
    <list>
     <item>
      <p>
        <package>file</package> - Dieses nützliche Programm kann den Typ
        einer Datei feststellen (siehe <manref section="1" name="file">).
      </p>
     </item>
     <item>
      <p>
        <package>patch</package> - Ein sehr nützliches Programm, das eine
        Datei mit einer Auflistung der Unterschiede im Dateiinhalt (erstellt
        mit dem Programm <prgn>diff</prgn>) auf die ursprüngliche Datei
        anwendet und daraus die neue Version erzeugt (siehe <manref
        section="1" name="patch">).
      </p>
     </item>
     <item>
      <p>
        <package>perl</package> - Perl ist eine der am meisten gebrauchten
        interpretierten Skriptsprachen auf heutigen Unix-ähnlichen Systemen,
        oft bezeichnet als »Unix' Schweizer Offizierskettensäge« (siehe
        <manref section="1" name="perl">).
      </p>
     </item>
     <item>
      <p>
        <package>python</package> - Python ist eine weitere der am meisten
        gebrauchten interpretierten Skriptsprachen auf Debiansystemen, die
        bemerkenwerte Stärke mit einer sehr klaren Syntax kombiniert (siehe
        <manref section="1" name="python">).
      </p>
     </item>
     <item>
      <p>
        <package>autoconf</package>, <package>automake</package> und
        <package>autotools-dev</package> - Viele neuere Programme benutzen
        configure-Skripte und <file>Makefile</file>-Dateien, die mit Hilfe
        dieser Programme vorproduziert wurden (siehe »<tt>info
        autoconf</tt>«, »<tt>info automake</tt>«). Das Paket
        <package>autotools-dev</package> enthält aktuelle Versionen von
        bestimmten auto-Dateien sowie Informationen über die beste Art und
        Weise, diese Dateien zu verwenden.
      </p>
     </item>
     <item>
      <p>
        <package>dh-make</package> und <package>debhelper</package> -
        <package>dh-make</package> wird benötigt, um eine Vorlage des
        Beispielpakets zu erstellen. Es verwendeteinige der
        <package>debhelper</package>-Werkzeuge für die Paketerstellung. Sie
        sind nicht zwingend erforderlich, um Pakete zu erstellen, aber für
        neue Betreuer <em>sehr</em> empfohlen. Sie vereinfachen den Einstieg
        in den ganzen Prozess sehr, ebenso die spätere Kontrolle (siehe
        <manref section="1" name="dh_make">, <manref section="1"
        name="debhelper">,
        <file>/usr/share/doc/debhelper/README</file>). <footnote><p>Es gibt
        einige ähnliche, aber spezialisierte Pakete wie
        <package>dh-make-perl</package>, <package>dh-make-php</package>
        usw.</p></footnote>
      </p>
     </item>
     <item>
      <p>
        <package>devscripts</package> - Dieses Paket enthält einige nette
        und nützliche Skripte, die für die Betreuer hilfreich sein können,
        aber nicht zum Bauen der Pakete benötigt werden. Die von diesem
        Paket empfohlenen und vorgeschlagenen Pakete sind ebenfalls einen
        Blick wert (siehe <file>/usr/share/doc/devscripts/README.gz</file>).
      </p>
     </item>
     <item>
      <p>
        <package>fakeroot</package> - Dieses Hilfsprogramm ermöglicht Ihnen,
        die Identität von »root« vorzutäuschen, was für einige Teile des
        Build-Prozesses benötigt wird (siehe <manref section="1"
        name="fakeroot">).
      </p>
     </item>
     <item>
      <p>
        <package>gnupg</package> - Ein Werkzeug, mit dem Sie Pakete digital
        <em>signieren</em> können. Dies ist besonders wichtig, wenn Sie das
        Paket an andere Leute verteilen wollen und das werden Sie sicher,
        wenn Ihre Arbeit in die Debian-Distribution aufgenommen wird (siehe
        <manref section="1" name="gpg">).
      </p>
     </item>
     <item>
      <p>
        <package>gfortran</package> - Der GNU-Fortran-95-Compiler wird
        benötigt, wenn Ihr Programm in Fortran geschrieben ist (siehe
        <manref section="1" name="gfortran">).
      </p>
     </item>
     <item>
      <p>
        <package>gpc</package> - Der GNU-Pascal-Compiler wird benötigt, wenn
        Ihr Programm in Pascal geschrieben ist. Erwähnenswert ist an dieser
        Stelle der »Free Pascal Compiler« <package>fp-compiler</package>,
        der sich dafür ebenfalls gut eignet (siehe <manref section="1"
        name="gpc">, <manref section="1" name="ppc386">).
      </p>
     </item>
     <item>
      <p>
        <package>xutils-dev</package> - Einige Programme, üblicherweise die
        für X11 erstellten, benutzen diese Programme zum Erzeugen von
        <file>Makefile</file>-Dateien aus einem Satz von Makro-Funktionen
        (siehe <manref section="1" name="imake">, <manref section="1"
        name="xmkmf">).
      </p>
     </item>
     <item>
      <p>
        <package>lintian</package> - Das ist Debians Paket-Prüfer, der Sie
        über die häufigen Fehler nach der Paketerstellung informiert und die
        gefundenen Fehler erklärt (siehe <manref section="1"
        name="lintian">,
        <file>/usr/share/doc/lintian/lintian.html/index.html</file>).
      </p>
     </item>
     <item>
      <p>
        <package>pbuilder</package> - Dieses Paket enthält Programme, um
        eine <prgn>chroot</prgn>-Umgebung aufzubauen und zu betreuen. Beim
        Bauen eines Debian-Pakets in dieser <prgn>chroot</prgn>-Umgebung
        wird geprüft, ob die Build-Abhängigkeiten stimmen, wodurch
        FTBFS-Fehler (»Fails To Build From Source«, kann nicht aus der
        Quelle gebaut werden) verhindert werden (siehe <manref section="8"
        name="pbuilder"> und <manref section="1" name="pdebuild">).
      </p>
     </item>
     <item>
      <p>
        <package>patchutils</package> - Dieses Paket enthält einige
        Hilfsprogramme, um mit Patches zu arbeiten, beispielsweise die
        Befehle <prgn>lsdiff</prgn>, <prgn>interdiff</prgn> und
        <prgn>filterdiff</prgn>.
      </p>
     </item>
     <item>
      <p>
        <package>quilt</package> - Dieses Paket hilft Ihnen dabei, eine
        Serie von Patches zu verwalten, indem es die Änderungen verfolgt,
        die jeder Patch vornimmt. Sie sind logisch als Stack organisiert und
        Sie können sie leicht anwenden (= »push«), rückgängig machen (=
        »pop«) sowie aktualisieren, während Sie sich innerhalb des Stacks
        bewegen (siehe <manref section="1" name="quilt">,
        <file>/usr/share/doc/quilt/README.Debian</file>).
      </p>
     </item>
     <item>
      <p>
        <package>git</package> - Dieses Paket stellt das populäre
        Versionskontrollsystem zur Verfügung, das dafür entworfen wurde, bei
        sehr großen Projekten schnell und effizient zu arbeiten. Es wird in
        vielen hoch angesehenen Open-Source-Projekten eingesetzt,
        beispielsweise beim Linux-Kernel (siehe <manref section="1"
        name="git">, <file>/usr/share/doc/git-doc/index.html</file>).
      </p>
     </item>
    </list>
   </p>
   <p>
     Das Folgende sind <em>sehr wichtige</em> Dokumente, die Sie neben
     diesem Dokument auch lesen sollten:
    <list>
     <item>
      <p>
        <package>debian-policy</package> - Die <url
        id="http://www.debian.org/doc/devel-manuals#policy"
        name="Debian-Richtlinien"> beinhalten Beschreibungen der Struktur
        und des Inhalts des Debian-Archivs, mehrere Besonderheiten des
        Betriebssystemdesigns, den »Filesystem Hierarchy Standard« (der
        beschreibt, wo jede Datei und jedes Verzeichnis sein sollte)
        usw. Das Wichtigste für Sie ist, dass sie die Anforderungen
        beschreiben, die ein Paket erfüllen muss, um in die Distribution
        aufgenommen zu werden (siehe <file>&debian-policy;</file>).
      </p>
     </item>
     <item>
      <p>
        <package>developers-reference</package> - Die <url
        id="http://www.debian.org/doc/devel-manuals#devref" name="Debian
        Entwickler-Referenz"> beschreibt alle Dinge, die nicht speziell die
        technischen Details der Paketerstellung betreffen, beispielsweise
        die Struktur des Archivs, wie man Pakete umbenennt, aufgibt,
        übernimmt, NMUs durchführt, Fehler verwaltet, gute Pakete erstellt,
        wie und wo ins Archiv hochlädt usw. (siehe
        <file>&developers-reference;</file>).
      </p>
     </item>
     <item>
      <p>
        Das <url id="http://www.lrde.epita.fr/~adl/autotools.html"
        name="Autotools Tutorial"> ist eine sehr gute Einführung für <url
        id="http://de.wikipedia.org/wiki/GNU_Build_System" name="das
        GNU-Build-System, das als GNU Autotools bekannt ist">. Die
        wichtigsten Komponenten sind Autoconf, Automake, Libtool und
        gettext.
      </p>
     </item>
     <item>
      <p>
        <package>gnu-standards</package> - Dieses Paket enthält zwei Teile
        der Dokumentation des GNU-Projekts: die <url
        id="http://www.gnu.org/prep/standards/html_node/index.html"
        name="GNU Coding Standards"> und <url
        id="http://www.gnu.org/prep/maintain/html_node/index.html"
        name="Informationen für Betreuer von GNU-Software">. Obwohl Debian
        nicht verlangt, dass diese befolgt werden, sind sie trotzdem
        hilfreich als Richtlinie und sinnvoll (siehe
        <file>/usr/share/doc/gnu-standards/standards.html</file> und
        <file>/usr/share/doc/gnu-standards/maintain.html</file>).
      </p>
     </item>
    </list>
   </p>
   <p>
     Wenn dieses Dokument mit den Debian-Richtlinien oder der Debian
     Entwickler-Referenz im Widerspruch steht, dann haben die beiden anderen
     Recht. Bitte schreiben Sie einen Fehlerbericht an das Paket
     <package>maint-guide</package>.
   </p>
   <p>
     Die kurzen Erklärungen oben dienen nur dazu, Ihnen eine Einführung in
     die verschiedenen Pakete zu geben. Bevor Sie weitermachen, sollten Sie
     die Dokumentation jedes Programms durchlesen, zumindest was die normale
     Arbeitsweise angeht. Das mag Ihnen am Anfang überflüssig vorkommen,
     aber schon bald werden Sie <em>sehr</em> froh darüber sein, sich schon
     vorher informiert zu haben.
   </p>
  </sect>
  <sect id="terminology">
   <heading>
     Grundlegende Terminologie
   </heading>
   <p>
     Es gibt zwei Arten von Paketen.
    <list>
     <item>
      <p>
        <strong>Quellpaket (»source package«)</strong>: Ein Quellpaket ist
        eine Sammlung von Dateien, die Code und Daten enthalten. Diese
        können Sie kompilieren und ausführbare Programme und formatierte
        Dokumente erzeugen. Üblicherweise ist ein Quellpaket eine
        Kombination aus <file>*.orig.tar.gz</file>,
        <file>*.debian.tar.gz</file> (oder <file>*.diff.gz</file>) und
        <file>*.dsc</file>. Es können auch einige andere Archive und
        Kompressionsmethoden verwendet werden.
      </p>
     </item>
     <item>
      <p>
        <strong>Binärpaket (»binary package«)</strong>: Ein Binärpaket
        enthält ausführbare Programme und formatierte
        Dokumente. Üblicherweise ist dies eine <file>*.deb</file>-Datei für
        das normale Debiansystem und eine <file>*.udeb</file>-Datei für den
        Debian-Installer.
      </p>
     </item>
    </list>
   </p>
   <p>
     Verwechseln Sie nicht Begriffe wie »Quelle des Programms« und
     »Quellpaket des Programms«!
   </p>
   <p>
     Es werden innerhalb von Debian verschiedene Namen für bestimmte Rollen
     benutzt.
    <list>
     <item>
      <p>
        <strong>Ursprünglicher Autor (»upstream author«)</strong>: Die
        Person, die das ursprüngliche Programm geschrieben hat.
      </p>
     </item>
     <item>
      <p>
        <strong>Ursprünglicher Betreuer (»upstream maintainer«)</strong>:
        Die Person, die das Programm zurzeit betreut.
      </p>
     </item>
     <item>
      <p>
        <strong>Betreuer (»maintainer«)</strong>: Die Person, die ein
        Debian-Paket des Programms erstellt oder betreut.
      </p>
     </item>
     <item>
      <p>
        <strong>Sponsor</strong>: Die Person, die Betreuern hilft, Pakete in
        das offizielle Debian-Archiv hochzuladen, nachdem sie den Inhalt
        überprüft hat.
      </p>
     </item>
     <item>
      <p>
        <strong>Mentor</strong>: Die Person, die neuen Betreuern beim
        Paketieren usw. hilft.
      </p>
     </item>
     <item>
      <p>
        <strong>Debian-Entwickler (»Debian Developer«, DD)</strong>: Die
        Person, die ein Debian-Mitglied ist. Sie hat unbeschränkte Rechte,
        Pakete in das offizielle Debian-Paketarchiv hochzuladen.
      </p>
     </item>
     <item>
      <p>
        <strong>Debian-Betreuer (»Debian Maintainer«, DM)</strong>: Die
        Person, die beschränkte Rechte hat, Pakete in das offizielle
        Debian-Paketarchiv hochzuladen.
      </p>
     </item>
    </list>
   </p>
   <p>
     Es werden innerhalb von Debian verschiedene Namen für Versionen
     benutzt.
    <list>
     <item>
      <p>
        <strong>Version der Originalquelle (»upstream source
        version«)</strong>: Die Version der Originalquelle wird als
        <tt><var>Version</var></tt> bezeichnet.
      </p>
     </item>
     <item>
      <p>
        <strong>Debian-Revision (»Debian revision«)</strong>: Die Revision
        des Pakets innerhalb von Debian wird als
        <tt><var>Revision</var></tt> bezeichnet.
      </p>
     </item>
     <item>
      <p>
        <strong>Debian-Paketversion (»Debian package version«)</strong>: Die
        Debian-Paketversion wird wie folgt bezeichnet.
       <list>
        <item>
         <p>
           <tt><var>Version</var></tt> für native Debian-Binärpakete und für
           das Debian-Quellpaket.
         </p>
        </item>
        <item>
         <p>
           <tt><var>Version</var>-<var>Revision</var></tt> für nichtnative
           Debian-Binärpakete.
         </p>
        </item>
       </list>
      </p>
     </item>
    </list>
   </p>
   <p>
     Bitte lesen Sie die anderen Handbücher, wenn Sie weitere Details über
     die Terminologie benötigen.
   </p>
  </sect>
  <sect id="debiandeveloper">
   <heading>
     Offizieller Debian-Entwickler
   </heading>
   <p>
     Sie können nicht über Nacht offizieller
     <strong>Debian-Entwickler</strong> (»Debian Developer«, DD) werden,
     weil es dafür mehr als nur technische Fähigkeiten braucht. Bitte lassen
     Sie sich davon nicht entmutigen. Wenn Ihr Paket für andere nützlich
     ist, können Sie es entweder als <strong>Betreuer</strong> über einen
     <strong>Sponsor</strong> oder als <strong>Debian-Betreuer</strong>
     trotzdem hochladen. Siehe <url id="&newmaint;" name="Debian New
     Maintainers"> für mehr Informationen.
   </p>
   <p>
     Bitte beachten Sie, dass Sie kein neues Paket erstellen müssen, um
     offizieller Debian-Entwickler zu werden. Auch Beiträge zu existierenden
     Paketen können ein Weg sein, offizieller Debian-Entwickler zu
     werden. Es gibt viele Pakete, die auf einen guten Betreuer warten
     (siehe <ref id="choose">).
   </p>
  </sect>
  <sect id="helpme">
   <heading>
     Wo man Hilfe bekommen kann
   </heading>
   <p>
     Bevor Sie Ihre Frage in aller Öffentlichkeit stellen, lesen Sie bitte
     die verfügbaren Anleitungen (»RTFM«). Dies beeinhaltet die
     Dokumentation in <file>/usr/share/doc/dpkg</file>,
     <file>/usr/share/doc/debian</file>, <file>&autotools-dev;</file>,
     <file>/usr/share/doc/<var>Paket</var>/*</file>-Dateien und die
     <prgn>man</prgn>/<prgn>info</prgn>-Seiten für alle Programme, die in
     diesem Dokument erwähnt werden. Siehe auch die gesamten Informationen
     unter <url id="&nm-home;">.
   </p>
   <p>
     Das Erstellen eines kleinen Testpakets ist ein guter Weg, um die
     Details der Paketerstellung zu lernen. Das Untersuchen von
     existierenden, gut betreuten Paketen ist die beste Art zu lernen, wie
     andere Leute Pakete machen.
   </p>
   <p>
     Wenn Sie immer noch Fragen über das Paketieren haben und in der
     vorhandenen Dokumentation sowie den Webressourcen keine Antworten
     finden konnten, können Sie die Fragen auf der Mailingliste der
     Debian-Mentoren unter <url id="http://lists.debian.org/debian-mentors/"
     name="debian-mentors@lists.debian.org"> stellen. Die erfahreneren
     Debian-Entwickler werden Ihnen gerne helfen, aber lesen Sie zumindest
     einiges der Dokumentation, bevor Sie Fragen stellen!
   </p>
   <p>
     Siehe <url id="http://lists.debian.org/debian-mentors/"> für mehr
     Informationen über diese Mailingliste.
   </p>
   <p>
     Wenn Sie einen Fehlerbericht erhalten (ja, tatsächliche
     Fehlerberichte!), ist es Zeit für Sie, tiefer in das <url
     id="http://www.debian.org/Bugs/" name="Debian-Fehlerverfolgungssystem">
     einzusteigen und die dort vorhandene Dokumentation zu lesen, damit Sie
     mit den Berichten effizient umgehen können. Ich empfehle dringend, die
     <url
     id="http://www.debian.org/doc/manuals/developers-reference/pkgs.html#bug-handling"
     name="Entwickler-Referenz, 5.8. »Handling bugs«"> zu lesen.
   </p>
   <p>
     Wenn Sie immer noch Fragen haben, stellen Sie diese auf der
     Mailingliste für Debian-Entwickler unter <url
     id="http://lists.debian.org/debian-devel/"
     name="debian-devel@lists.debian.org">. Siehe <url
     id="http://lists.debian.org/debian-devel/"> für mehr Informationen über
     diese Mailingliste.
   </p>
   <p>
     Selbst wenn alles gut funktioniert hat, ist es jetzt an der Zeit, mit
     dem Beten anzufangen. Warum? Weil in wenigen Stunden (oder Tagen)
     Benutzer überall auf der Welt Ihr Paket verwenden werden, und wenn Sie
     einen kritischen Fehler gemacht haben, werden Sie von unzähligen
     verärgerten Debian-Benutzern mit E-Mails überschüttet ... war nur ein
     Scherz. :-)
   </p>
   <p>
     Entspannen Sie sich und stellen Sie sich auf Fehlerberichte ein, denn
     es ist noch viel mehr Arbeit zu erledigen, bevor Ihr Paket vollständig
     im Einklang mit den Debian-Richtlinien sowie dessen bewährten Verfahren
     ist (nochmals: lesen Sie die <em>wirkliche Dokumentation</em> für
     Details). Viel Glück!
   </p>
  </sect>
 </chapt>
 <chapt id="first">
  <heading>
    Erste Schritte
  </heading>
  <p>
    Lassen Sie uns versuchen, Ihr eigenes Paket zu erstellen (oder, noch
    besser, ein vorhandenes zu übernehmen).
  </p>
  <sect id="choose">
   <heading>
     Ihr Programm auswählen
   </heading>
   <p>
     Sie haben sich wahrscheinlich schon ein Paket ausgesucht, das Sie
     erstellen wollen. Zuerst müssen Sie überprüfen, ob das Paket bereits in
     der Distribution existiert, indem Sie <prgn>aptitude</prgn> benutzen.
   </p>
   <p>
     Sie können die Paketinformationen auch über die <url
     id="http://www.debian.org/distrib/packages" name="Paket-Suchseite"> und
     das <url id="http://packages.qa.debian.org/common/index.html"
     name="Debian Package Tracking System"> überprüfen.
   </p>
   <p>
     Wenn es das Paket schon gibt, na, dann installieren Sie es! :-) Wenn es
     <strong>aufgegeben (»orphaned«)</strong> wurde -- wenn als Betreuer
     »<url id="http://qa.debian.org/" name="Debian QA Group">« eingetragen
     ist, dann können Sie es übernehmen, wenn es noch verfügbar ist
     (überprüfen Sie den Besitzerstatus unter »<url
     id="http://bugs.debian.org/wnpp" name="Debian Bug report logs: Bugs in
     package wnpp in unstable">«). Sie können auch ein Paket adoptieren, für
     das der entsprechende Betreuer einen »Request for Adoption«
     (<strong>RFA</strong>) geschrieben hat.
   </p>
   <p>
     Es gibt verschiedene Listen von aufgegebenen oder zur Übernahme
     ausgeschriebenen Paketen, die zur Verfügung stehen:
    <list>
     <item>
      <p>
        <url id="http://www.debian.org/devel/wnpp/" name="Work-Needing and Prospective Packages">

      </p>
     </item>
     <item>
      <p>
        <url id="http://wnpp.debian.net/" name="Debian Packages that Need Lovin'">

      </p>
     </item>
     <item>
      <p>
        <url id="http://members.hellug.gr/serzan/wnpp/" name="Browse WNPP bugs based on debtags">

      </p>
     </item>
    </list>
   </p>
   <p>
     Als wichtige Randbemerkung sei darauf hingewiesen, dass Debian bereits
     für fast alle Arten von Programmen Pakete enthält und die Anzahl der
     Pakete im Debian-Archiv wesentlich größer ist als die der Mitwirkenden
     mit Berechtigung zum Hochladen. Daher werden Beiträge zu Paketen, die
     bereits im Archiv enthalten sind, von anderen Entwicklern wesentlich
     mehr gewürdigt (und haben bessere Chancen, gesponsert zu werden)
     <footnote><p>Trotzdem gibt es natürlich immer neue Programme, die es
     wert sind, für Debian paketiert zu werden.</p></footnote>. Sie können
     dies auf verschiedene Arten tun.
    <list>
     <item>
      <p>
        Pakete übernehmen, die aufgegeben wurden, aber aktiv benutzt werden
      </p>
     </item>
     <item>
      <p>
        Mitglied in einem <url id="http://wiki.debian.org/Teams"
        name="Paketierungs-Team"> werden
      </p>
     </item>
     <item>
      <p>
        Fehler von sehr beliebten Paketen sortieren und bewerten
      </p>
     </item>
     <item>
      <p>
        Vorbereiten von <url
        id="http://www.debian.org/doc/developers-reference/pkgs.html#nmu-qa-upload"
        name="QA- oder NMU-Uploads">
      </p>
     </item>
    </list>
   </p>
   <p>
     Wenn Sie ein Paket übernehmen möchten, laden Sie sich das Quell-Paket
     herunter (z. B. mit »<tt>apt-get source <var>Paketname</var></tt>«) und
     nehmen Sie es unter die Lupe. Leider enthält dieses Dokument keine
     umfassende Anleitung zum Übernehmen von Paketen. Der Vorteil ist, dass
     schon jemand das Paket für Sie vorbereitet hat und Sie keine
     Schwierigkeiten haben sollten, herauszufinden, wie das Paket
     funktioniert. Doch lesen Sie weiter, denn viele der folgenden
     Ratschläge werden auch für Sie nützlich sein.
   </p>
   <p>
     Wenn das Paket neu ist und Sie es gern in Debian integrieren möchten,
     gehen Sie wie folgt vor:
    <list>
     <item>
      <p>
        Zuerst sollten Sie sicher sein, dass das Programm funktioniert und
        es bereits einige Zeit ausprobiert haben, damit Sie die Nützlichkeit
        bestätigen können.
      </p>
     </item>
     <item>
      <p>
        Überprüfen Sie auf der <url
        id="http://www.de.debian.org/devel/wnpp/being_packaged" name="Liste
        der Pakete in Arbeit">, dass niemand bereits an diesem Paket
        arbeitet. Wenn noch niemand daran arbeitet, schreiben Sie mit
        <prgn>reportbug</prgn> einen ITP-Fehlerbericht (»Intent To Package«;
        Absicht, das Paket zu erstellen) an das
        <package>wnpp</package>-Pseudopaket. Wenn schon jemand an dem Paket
        arbeitet, nehmen Sie mit ihm Verbindung auf, wenn es nötig
        ist. Andernfalls finden Sie bestimmt ein anderes interessantes
        Paket, das von niemandem betreut wird.
      </p>
     </item>
     <item>
      <p>
        Das Programm <strong>muss eine Lizenz haben</strong>.
       <list>
        <item>
         <p>
           Für die <tt>main</tt>-Sektion <strong>muss es zu allen Punkten
           der Debian-Richtlinien für Freie Software (DFSG) konform
           sein</strong> (siehe <url
           id="http://www.debian.org/social_contract#guidelines">) und
           <strong>das Programm darf kein Paket außerhalb von <tt>main</tt>
           benötigen</strong>, um kompiliert oder ausgeführt zu werden, wie
           in den Debian-Richtlinien gefordert. Dies ist der erwünschte
           Fall.
         </p>
        </item>
        <item>
         <p>
           Für die <tt>contrib</tt>-Sektion muss es zu allen Punkten der
           DFSG konform sein, darf aber ein Paket außerhalb von
           <tt>main</tt> für die Kompilierung oder Ausführung erfordern.
         </p>
        </item>
        <item>
         <p>
           Für die <tt>non-free</tt>-Sektion darf es gegen Punkte der DFSG
           verstoßen, es <strong>muss aber verteilbar sein</strong>.
         </p>
        </item>
       </list>
        Sind Sie nicht sicher, wohin das Paket gehört, schicken Sie den
        Lizenztext an <url id="http://lists.debian.org/debian-legal/"
        name="debian-legal@lists.debian.org"> und bitten um Rat.
      </p>
     </item>
     <item>
      <p>
        Das Programm sollte sicherlich <strong>nicht</strong> als »setuid
        root« laufen, oder noch besser, es sollte für die Ausführung
        überhaupt keine setuid- oder setgid-Rechte brauchen.
      </p>
     </item>
     <item>
      <p>
        Das Programm sollte kein Daemon sein oder in die Verzeichnisse
        <file>*/sbin</file> installiert werden und auch keinen Port als root
        öffnen.
      </p>
     </item>
     <item>
      <p>
        Das Programm sollte in einer binären ausführbaren Form erstellt
        werden, es ist schwieriger, mit Bibliotheken umzugehen.
      </p>
     </item>
     <item>
      <p>
        Das Programm sollte gut dokumentiert und der Quellcode verständlich
        (d.h. nicht verschleiert) sein.
      </p>
     </item>
     <item>
      <p>
        Sie sollten den oder die Autoren des Programms kontaktieren und
        sicherstellen, dass sie mit dem Paketieren einverstanden und Debian
        wohlgesonnen sind. Es ist wichtig, dass man die Autoren auch später
        über das Programm befragen kann, falls spezifische Probleme bei dem
        Programm auftreten. Versuchen Sie also nicht, aufgegebene Programme
        zu packen.
      </p>
     </item>
    </list>
   </p>
   <p>
     Natürlich sind die aufgeführten Punkte eher Sicherheitsmaßnahmen und
     sollen Sie vor tobenden Benutzern schützen, falls ihr setuid-Daemon
     irgendetwas Schlimmes anstellt ... Wenn Sie mehr Erfahrungen im
     Erstellen von Paketen gesammelt haben, können Sie sich auch an solchen
     Paketen versuchen, aber selbst erfahrene Debian-Entwickler fragen schon
     mal auf der Mailingliste <url
     id="http://lists.debian.org/debian-mentors/"
     name="debian-mentors@lists.debian.org"> nach, wenn sie bei irgendetwas
     unsicher sind. Und die Leute dort helfen gern.
   </p>
   <p>
     Für weitere Fragen konsultieren Sie die <url
     id="http://www.debian.org/doc/devel-manuals#devref" name="Debian
     Entwickler-Referenz">.
   </p>
  </sect>
  <sect id="getit">
   <heading>
     Besorgen Sie sich das Programm und probieren Sie es aus
   </heading>
   <p>
     Als Erstes müssen Sie die Originalquellen des Programms finden und
     herunterladen. Ich nehme an, dass Sie bereits die Quellcode-Dateien von
     der Homepage des Autors bezogen haben. Quellen freier Unix-Programme
     sind üblicherweise im Format <prgn>tar</prgn>+<prgn>gzip</prgn> mit der
     Erweiterung <file>.tar.gz</file> oder im Format
     <prgn>tar</prgn>+<prgn>bzip2</prgn> mit der Erweiterung
     <file>.tar.bz2</file>. Sie enthalten üblicherweise ein
     Unterverzeichnis, das
     <file><var>Programmname</var>-<var>Version</var></file> genannt ist
     sowie alle Quellcode-Dateien darin.
   </p>
   <p>
     Wenn die neueste Version dieser Quellen über Versionskontrollsysteme
     wie Git, Subversion oder CVS verfügbar ist, müssen Sie sie mit »<tt>git
     clone</tt>«, »<tt>cvs co</tt>« oder »<tt>svn co</tt>« herunterladen und
     dann selbst einen Tarball im Format <prgn>tar</prgn>+<prgn>gzip</prgn>
     erstellen, indem Sie die Option »<tt>--exclude-vcs</tt>« verwenden.
   </p>
   <p>
     Kommt der Quellcode in einem anderen Archivtyp daher (beispielsweise
     wenn der Dateiname auf <file>.Z</file> oder <file>.zip</file> endet
     <footnote><p>Sie können das Archivformat herausfinden, indem Sie den
     Befehl <prgn>file</prgn> verwenden, wenn die Dateierweiterung nicht
     genug ist.</p></footnote>), entpacken Sie ihn mit den entsprechenden
     Werkzeugen und packen Sie ihn ebenfalls erneut.
   </p>
   <p>
     Als Beispiel verwende ich hier ein Programm namens <prgn>gentoo</prgn>,
     einen X GTK+-Dateimanager. <footnote><p>Das Programm ist bereits
     paketiert worden. Die aktuelle Version 0.15.3 hat sich gegenüber der in
     den folgenden Beispielen benutzten Version 0.9.12 drastisch
     geändert.</p></footnote>
   </p>
   <p>
     Erstellen Sie ein Unterverzeichnis in Ihrem Home-Verzeichnis namens
     <file>debian</file> oder <file>deb</file> oder irgendetwas, das Sie
     passend finden (beispielsweise wäre in diesem Fall nur
     <file>~/gentoo</file> völlig in Ordnung). Kopieren Sie das
     heruntergeladene Archiv dorthin und entpacken Sie es (mit »<tt>tar xzf
     gentoo-0.9.12.tar.gz</tt>«). Vergewissern Sie sich, dass es keine
     Fehler beim Entpacken gab, nicht mal so genannte <em>irrelevante</em>
     Fehler, weil es dann höchstwahrscheinlich auf anderen Systemen Probleme
     beim Entpacken gibt, denn andere Entpacker ignorieren diese Anomalien
     vielleicht nicht. Auf Ihrer Konsole sollten Sie das Folgende sehen.
    <example>
$ mkdir ~/gentoo ; cd ~/gentoo
$ wget http://<var>www.example.org</var>/gentoo-0.9.12.tar.gz
$ tar xvzf gentoo-0.9.12.tar.gz
$ ls -F
gentoo-0.9.12/
gentoo-0.9.12.tar.gz
</example>
   </p>
   <p>
     Jetzt haben Sie ein neues Unterverzeichnis namens
     <file>gentoo-0.9.12</file>. Wechseln Sie dorthin und lesen Sie die
     mitgelieferte Dokumentation <em>aufmerksam</em> durch. Meistens gibt es
     Dateien mit den Namen <file>README*</file>, <file>INSTALL*</file>,
     <file>*.lsm</file> oder <file>*.html</file>. Sie müssen eine Anleitung
     finden, wie man das Programm richtig kompiliert und installiert
     (meistens wird von einer Installation in <file>/usr/local/bin</file>
     ausgegangen, aber das wollen Sie nicht. Mehr dazu später in <ref
     id="destdir">).
   </p>
   <p>
     Einfache Programme enthalten eine <file>Makefile</file>-Datei und
     können einfach durch den Aufruf von »<tt>make</tt>« kompiliert
     werden. Einige von ihnen unterstützen »<tt>make check</tt>«, wodurch
     die mitgelieferten Selbstüberprüfungen gestartet werden. Die
     Installation in das Zielverzeichnis wird üblicherweise mittels
     »<tt>make install</tt>« durchgeführt.
   </p>
   <p>
     Versuchen Sie nun, das Programm zu kompilieren und auszuführen. Stellen
     Sie sicher, dass es einwandfrei funktioniert und nichts anderes während
     der Installation oder der Ausführung kaputt macht.
   </p>
   <p>
     Meistens können Sie außerdem »<tt>make clean</tt>« (oder besser
     »<tt>make distclean</tt>«) ausführen, um im Build-Verzeichnis
     aufzuräumen. Manchmal gibt es sogar ein »<tt>make uninstall</tt>«,
     womit alle installierten Dateien gelöscht werden können.
   </p>
  </sect>
  <sect id="portable">
   <heading>
     Freie portierbare Programme
   </heading>
   <p>
     Viele Freie Programme sind in den Sprachen <url
     id="http://de.wikipedia.org/wiki/C_(Programmiersprache)" name="C"> oder
     <url id="http://de.wikipedia.org/wiki/C++" name="C++"> geschrieben. Die
     meisten von ihnen verwenden Autotools oder CMake, um auf verschiedene
     Plattformen portierbar zu sein. Die Werkzeuge werden benutzt, um die
     Datei <file>Makefile</file> und andere benötigte Quelldateien zu
     erzeugen. Anschließend werden solche Programme mit dem üblichen
     »<tt>make; make install</tt>« gebaut.
   </p>
   <p>
     Die <url id="http://de.wikipedia.org/wiki/GNU_Build_System"
     name="Autotools"> sind das GNU-Buildsystem, das aus <url
     id="http://en.wikipedia.org/wiki/Autoconf" name="Autoconf">, <url
     id="http://en.wikipedia.org/wiki/Automake" name="Automake">, <url
     id="http://en.wikipedia.org/wiki/GNU_Libtool" name="Libtool"> und <url
     id="http://de.wikipedia.org/wiki/GNU_gettext" name="gettext">
     besteht. Sie erkennen solche Quellen an den Dateien
     <file>configure.ac</file>, <file>Makefile.am</file> und
     <file>Makefile.in</file>. <footnote><p>Siehe <url
     id="http://www.lrde.epita.fr/~adl/autotools.html" name="Autotools
     Tutorial"> und <file>&autotools-dev;</file>.</p></footnote>
   </p>
   <p>
     Der erste Schritt im Arbeitsablauf der Autotools ist üblicherweise,
     dass der ursprüngliche Autor »<tt>autoreconf -i -f</tt>« in den Quellen
     aufruft und diese Quellen dann mit den erzeugten Dateien verteilt.
    <example>
configure.ac-----+-> autoreconf -+-> configure
Makefile.am -----+        |      +-> Makefile.in
src/Makefile.am -+        |      +-> src/Makefile.in
                          |      +-> config.h.in
                      automake
                      aclocal
                      aclocal.m4
                      autoheader
</example>
   </p>
   <p>
     Das Bearbeiten der Dateien <file>configure.ac</file> und
     <file>Makefile.am</file> erfordert etwas Wissen über
     <prgn>autoconf</prgn> und <prgn>automake</prgn>. Siehe »<tt>info
     autoconf</tt>« und »<tt>info automake</tt>«.
   </p>
   <p>
     Der zweite Schritt im Arbeitsablauf der Autotools ist üblicherweise,
     dass der Benutzer diese verteilten Quellen erhält und »<tt>./configure
     &amp;&amp; make</tt>« in den Quellen aufruft, um das Programm zu einer
     <prgn><var>Binärdatei</var></prgn> zu kompilieren.
    <example>
Makefile.in -----+                +-> Makefile -----+-> make -> <var>Binärdatei</var>
src/Makefile.in -+-> ./configure -+-> src/Makefile -+
config.h.in -----+                +-> config.h -----+
                          |
           config.status -+
           config.guess --+
</example>
   </p>
   <p>
     Sie können in der Datei <file>Makefile</file> viele Dinge ändern,
     beispielsweise den voreingestellten Installationsort für Dateien, wenn
     Sie die Befehlszeilenoption »<prgn>./configure --prefix=/usr</prgn>«
     benutzen.
   </p>
   <p>
     Obwohl es nicht erforderlich ist, kann die Aktualisierung der Datei
     <file>configure</file> sowie anderer Dateien durch den Benutzer mittels
     »<tt>autoreconf -i -f</tt>« die Kompatibilität der Quellen verbessern.
   </p>
   <p>
     <url id="http://de.wikipedia.org/wiki/CMake" name="CMake"> ist ein
     alternatives Build-System. Sie erkennen solche Quellen an der Datei
     <file>CMakeLists.txt</file>.
   </p>
  </sect>
  <sect id="namever">
   <heading>
     Name und Version des Pakets
   </heading>
   <p>
     Sie sollten das Paketieren mit einem komplett aufgeräumten (»pristine«,
     makellosen) Quellcode-Verzeichnis anfangen oder die Quellen einfach
     frisch entpacken.
   </p>
   <p>
     Damit das Paket richtig gebaut werden kann, müssen Sie den
     ursprünglichen Programmnamen in Kleinbuchstaben umwandeln (falls das
     nicht schon der Fall ist). Außerdem sollten Sie das Quellverzeichnis in
     <file><var>Paketname</var>-<var>Version</var></file> umbenennen.
   </p>
   <p>
     Wenn der Programmname aus mehr als einem Wort besteht, ziehen Sie sie
     zu einem Wort zusammen oder erstellen eine Abkürzung. Zum Beispiel
     könnte das Paket des Programms »John's little editor for X«
     <package>johnledx</package> oder <package>jle4x</package> genannt
     werden -- oder was immer Ihnen einfällt, solange es in einem
     vernünftigen Rahmen bleibt, beispielsweise 20 Zeichen.
   </p>
   <p>
     Überprüfen Sie außerdem die exakte Version des Programms (die in der
     Paketversion enthalten sein wird). Wenn die Software nicht mit
     Versionen wie <tt>X.Y.Z</tt> nummeriert ist, sondern mit einer Art
     Datum, können Sie dieses Datum als Versionsnummer benutzen, solange
     neuere Versionsnummern größer sind. Obwohl es am besten ist, dieselbe
     Versionsnummer zu verwenden, die der urspüngliche Autor benutzt, kann
     eine Umwandlung notwendig sein. Wenn die Version im Format
     <tt>09Oct23</tt> ist, müssen Sie sie in das Format <tt>YYYYMMDD</tt>
     umwandeln, also <tt>20091023</tt>, damit das Programm <prgn>dpkg</prgn>
     eine vernünftige Aktualisierung durchführen kann. <footnote><p>Die
     Versionszeichenkette kann mit »<tt>dpkg --compare-versions
     <var>Ver1</var> <var>Op</var> <var>Ver2</var></tt>« verglichen
     werden. Siehe die Handbuchseite von <manref section="1"
     name="dpkg">.</p></footnote>
   </p>
   <p>
     Einige Programme haben gar keine Versionsnummerierung. In diesem Fall
     sollten Sie den ursprünglichen Betreuer kontaktieren, um
     herauszufinden, ob er eine andere Methode benutzt, die Versionen
     zuzuordnen.
   </p>
  </sect>
  <sect id="dh_make">
   <heading>
     Das erste Debian-Paket
   </heading>
   <p>
     Lassen Sie uns die Umgebungsvariablen <tt>$DEBEMAIL</tt> und
     <tt>$DEBFULLNAME</tt> in der Shell setzen, damit viele
     Debian-Hilfswerkzeuge Ihren Namen und Ihre E-Mail-Adresse für Pakete
     verwenden können: <footnote><p>Der folgende Text setzt voraus, dass Sie
     Bash als Ihre Loginshell benutzen. Wenn Sie eine andere Loginshell wie
     beispielsweise die Z-Shell verwenden, benutzen Sie die dazugehörigen
     Konfigurationsdateien statt <file>~/.bashrc</file>.</p></footnote>
    <example>
$ cat &gt;&gt;~/.bashrc &lt;&lt;EOF
DEBEMAIL=ihre.e-mail.adresse@example.org
DEBFULLNAME="Vorname Nachname"
export DEBEMAIL DEBFULLNAME
EOF
</example>
   </p>
   <p>
     Lassen Sie uns das erste Debian-Paket erstellen, indem Sie den Befehl
     <prgn>dh_make</prgn> wie folgt aufrufen.
    <example>
$ . ~/.bashrc
$ cd ~/gentoo/gentoo-0.9.12
$ dh_make -f ../gentoo-0.9.12.tar.gz
</example>
   </p>
   <p>
     Natürlich ersetzen Sie den Dateinamen mit dem Namen Ihres originalen
     Quellcode-Archivs. <footnote><p>Wenn die originalen Quellen das
     Verzeichnis <file>debian</file> und seinen Inhalt enthalten, rufen Sie
     den Befehl <prgn>dh_make</prgn> stattdessen mit der Option
     <tt>--addmissing</tt> auf. Das neue Quellformat <tt>3.0 (quilt)</tt>
     ist sehr robust und kann selbst mit solchen Paketen umgehen. Sie müssen
     wahrscheinlich die vom ursprünglichen Autor bereitgestellten Inhalte
     für Ihr Debian-Paket aktualisieren.</p></footnote> Siehe <manref
     section="1" name="dh_make"> für Details.
   </p>
   <p>
     Es werden einige Informationen angezeigt. Sie werden gefragt, welche
     Art Paket Sie erstellen wollen. Gentoo ist ein »single binary package«
     - es wird nur eine Binärdatei und deshalb eine <file>.deb</file>-Datei
     erstellt, also wählen Sie die erste Option mit der »<tt>s</tt>«-Taste,
     überprüfen nochmal die Informationen auf dem Bildschirm und bestätigen
     mit »<tt><var>ENTER</var></tt>«. <footnote><p>Es gibt hier einige
     Auswahlmöglichkeiten: »<tt>s</tt>« für »Single binary« (einzelnes
     Binärpaket), »<tt>i</tt>« für »Arch-Independent«
     (Architektur-unabhängig), »<tt>m</tt>« für »Multiple binary« (mehrere
     Binärpakete), »<tt>l</tt>« für »Library« (Bibliothek), »<tt>k</tt>« für
     »Kernel module« (Kernelmodul), »<tt>n</tt>« für »Kernel patch«
     (Kernelpatch) und »<tt>b</tt>« für »<package>cdbs</package>«. Dieses
     Dokument konzentriert sich auf das Paket <package>debhelper</package>
     mit dem Befehl <prgn>dh</prgn>. Dieses Dokument konzentriert sich auf
     die Verwendung des neuen Befehls <prgn>dh</prgn> für »Single binary«
     und streift die Verwendung für »Arch-Independent« und »Multiple
     binary«. Das Paket <package>cdbs</package> bietet eine alternative
     Paketierungs-Skriptinfrastruktur zum Befehl <prgn>dh</prgn> und wird in
     diesem Dokument nicht behandelt.</p></footnote>
   </p>
   <p>
     Nach diesem Aufruf von <prgn>dh_make</prgn> wird eine Kopie des
     ursprünglichen Tarballs mit dem Namen
     <file>gentoo_0.9.12.orig.tar.gz</file> im übergeordneten Verzeichnis
     angelegt, um später ein nichtnatives Debian-Quellpaket mit der Datei
     <file>debian.tar.gz</file> erstellen zu können.
    <example>
$ cd ~/gentoo ; ls -F
gentoo-0.9.12/
gentoo-0.9.12.tar.gz
gentoo_0.9.12.orig.tar.gz
</example>
   </p>
   <p>
     Bitte beachten Sie zwei entscheidende Merkmale in dem Dateinamen
     <file>gentoo_0.9.12.orig.tar.gz</file>:
    <list>
     <item>
      <p>
        Paketname und Version sind durch »<tt>_</tt>« (Unterstrich)
        getrennt.
      </p>
     </item>
     <item>
      <p>
        Es steht <file>.orig</file> vor <file>.tar.gz</file>.
      </p>
     </item>
    </list>
   </p>
   <p>
     Beachten Sie außerdem, dass viele Schablonendateien im Quellverzeichnis
     im Unterverzeichnis <file>debian</file> erstellt werden. Diese werden
     in <ref id="dreq"> und <ref id="dother"> erklärt. Weiterhin sollte
     Ihnen klar sein, dass das Paketieren kein automatischer Prozess
     ist. Sie müssen die ursprünglichen Quellen für Debian verändern, wie in
     <ref id="modify"> beschrieben. Nach all diesen Schritten müssen Sie die
     Debian-Pakete bauen, wie in <ref id="build"> beschrieben, müssen sie
     überprüfen wie in <ref id="checkit"> beschrieben und zuletzt hochladen,
     wie in <ref id="upload"> beschrieben. Ich werde alle diese Schritte
     erläutern.
   </p>
   <p>
     Um es noch einmal deutlich zu machen, als neuer Betreuer wird Ihnen
     davon abgeraten, komplizierte Pakete zu bauen, beispielsweise:
    <list>
     <item>
      <p>
        Mehrere Binärpakete (»multiple binary packages«),
      </p>
     </item>
     <item>
      <p>
        Bibliotheken (»libraries«),
      </p>
     </item>
     <item>
      <p>
        Kernelmodul-Pakete,
      </p>
     </item>
     <item>
      <p>
        Kernelpatch-Pakete,
      </p>
     </item>
     <item>
      <p>
        Wenn das Dateiformat der Quellen weder <file>tar.gz</file> noch
        <file>tar.bz2</file> ist oder
      </p>
     </item>
     <item>
      <p>
        Der Quell-Tarball nicht verteilbaren Inhalt hat.
      </p>
     </item>
    </list>
     Es ist nicht allzu schwierig, erfordert aber etwas mehr
     Wissen. Deswegen wird hier nicht näher darauf eingegangen.
   </p>
   <p>
     Wenn Sie versehentlich einige der Schablonendateien gelöscht haben,
     während Sie sie bearbeitet haben, können Sie diese wiederherstellen,
     indem Sie erneut <prgn>dh_make</prgn> mit der Option
     <tt>--addmissing</tt> in einem Debian-Quellverzeichnis aufrufen.
   </p>
   <p>
     Das Aktualisieren eines existierenden Pakets kann kompliziert werden,
     weil es eventuell ältere Techniken verwendet. Bitte bleiben Sie für's
     Erste bei aktuellen Paketierungen, um die Grundlagen zu lernen. Ich
     werde später in <ref id="update"> darauf zurückkommen und dies
     erklären.
   </p>
  </sect>
 </chapt>
 <chapt id="modify">
  <heading>
    Den Quellcode verändern
  </heading>
  <p>
    Bitte beachten Sie, dass an dieser Stelle nicht auf <em>alle</em>
    Details eingegangen wird, wie die ursprünglichen Quellen korrigiert
    werden können, aber hier sind ein paar grundlegende Schritte und
    Probleme, auf die man häufig stößt.
  </p>
  <sect id="quiltrc">
   <heading>
     Einrichten von <prgn>quilt</prgn>
   </heading>
   <p>
     Das Programm <prgn>quilt</prgn> bietet die Basismethode, um Änderungen
     an den ursprünglichen Quellen für das Debian-Paket aufzuzeichnen. Da
     leicht geänderte Voreinstellungen sinnvoller sind, ändern wir die Datei
     <file>~/.quiltrc</file> wie folgt. <footnote><p>Sie können diese
     Konfiguration ausschalten, indem Sie den Befehl <prgn>quilt</prgn>
     folgendermaßen aufrufen: »<tt>quilt --quiltrc /dev/null
     ...</tt>«.</p></footnote>
    <example>
d=. ; while [ ! -d "$d/debian" -a `readlink -e $d` != / ]; do d="$d/.."; done
if [ -d "$d/debian" ] && [ -z "$QUILT_PATCHES" ]; then
    # Debian packaging case and unset $QUILT_PATCHES
    QUILT_PATCHES=debian/patches
    QUILT_PATCH_OPTS="--unified-reject-files"
    QUILT_DIFF_ARGS="-p ab --no-timestamps --no-index --color=auto"
    QUILT_REFRESH_ARGS="-p ab --no-timestamps --no-index"
    QUILT_COLORS="diff_hdr=1;32:diff_add=1;34:diff_rem=1;31:diff_hunk=1;33:diff_ctx=35:diff_cctx=33"
    if ! [ -d $d/debian/patches ]; then mkdir $d/debian/patches; fi
fi
</example>
   </p>
   <p>
     Siehe <manref section="1" name="quilt"> und
     <file>/usr/share/doc/quilt/quilt.html</file> für eine Anleitung, wie
     <prgn>quilt</prgn> benutzt wird.
   </p>
  </sect>
  <sect id="fixupstream">
   <heading>
     Einen Fehler in den ursprünglichen Quellen korrigieren
   </heading>
   <p>
     Nehmen wir an, Sie finden den folgenden Fehler in der originalen
     <file>Makefile</file>-Datei, wo statt »<tt>install: gentoo</tt>« besser
     »<tt>install: gentoo-target</tt>« stehen sollte.
    <example>
install: gentoo
        install ./gentoo $(BIN)
        install icons/* $(ICONS)
        install gentoorc-example $(HOME)/.gentoorc
</example>
   </p>
   <p>
     Wir beheben dies und speichern es mit dem Befehl <prgn>quilt</prgn> wie
     folgt als <file>fix-gentoo-target.patch</file>. <footnote><p>Das
     Verzeichnis <file>debian/patches</file> sollte inzwischen existieren,
     wenn Sie <prgn>dh_make</prgn> wie vorher beschrieben ausgeführt
     haben. In diesem Beispiel wird es sicherheitshalber erstellt, nur für
     den Fall, dass Sie das existierende Paket aktualisieren.</p></footnote>
    <example>
$ mkdir debian/patches
$ quilt new fix-gentoo-target.patch
$ quilt add Makefile
</example>
     Sie können die Datei <file>Makefile</file> wie folgt ändern.
    <example>
install: gentoo-target
        install ./gentoo $(BIN)
        install icons/* $(ICONS)
        install gentoorc-example $(HOME)/.gentoorc
</example>
   </p>
   <p>
     Jetzt muss <prgn>quilt</prgn> noch mitgeteilt werden, dass der Patch
     erneuert werden soll, so dass die Datei
     <file>debian/patches/fix-gentoo-target.patch</file> erstellt
     wird. Außerdem können Sie eine Beschreibung hinzufügen.
    <example>
$ quilt refresh
$ quilt header -e
... Patch beschreiben
</example>
   </p>
  </sect>
  <sect id="destdir">
   <heading>
     Installation von Dateien in das Zielverzeichnis
   </heading>
   <p>
     Normalerweise werden Programme im Unterverzeichnis
     <file>/usr/local</file> installiert. Da dieses Verzeichnis jedoch für
     die private Benutzung durch den Systemadministrator (oder andere
     Benutzer) reserviert ist, dürfen Debian-Pakete dieses Verzeichnis nicht
     verwenden. Stattdessen sollten Systemverzeichnisse wie das
     Unterverzeichnis <file>/usr/bin</file> benutzt werden, gemäß dem
     »Filesystem Hierarchy Standard« (<url
     id="http://www.debian.org/doc/packaging-manuals/fhs/fhs-2.3.html"
     name="FHS">,
     <file>/usr/share/doc/debian-policy/fhs/fhs-2.3.html</file>).
   </p>
   <p>
     Normalerweise wird <manref section="1" name="make"> benutzt, um das
     Programm automatisch zu bauen. Der Aufruf von »<tt>make install</tt>«
     installiert das Programm dann gemäß dem <tt>install</tt>-Target der
     Datei <file>Makefile</file>. Damit Debian Binärpakete bereitstellen
     kann, installiert das Build-System die Programme innerhalb des
     Verzeichnisbaums, der in einem temporären Verzeichnis angelegt wurde
     anstatt am tatsächlichen Ziel.
   </p>
   <p>
     Diese beiden Unterschiede zwischen (1) der normalen
     Programminstallation und (2) dem Paketieren für Debian können vom Paket
     <package>debhelper</package> transparent adressiert werden. Es benutzt
     dazu die Befehle <prgn>dh_auto_configure</prgn> und
     <prgn>dh_auto_install</prgn>, sofern die folgenden Bedingungen erfüllt
     sind.
    <list>
     <item>
      <p>
        Die Datei <file>Makefile</file> folgt den GNU-Konventionen und
        unterstützt die Variable <tt>$(DESTDIR)</tt>
        (<file>/usr/share/doc/gnu-standards/standards.html#Makefile-Conventions</file>).
      </p>
     </item>
     <item>
      <p>
        Die Quelle folgt dem »Filesystem Hierarchy Standard« (FHS).
      </p>
     </item>
    </list>
   </p>
   <p>
     Programme, die GNU <prgn>autoconf</prgn> einsetzen, folgen
     <em>automatisch</em> den GNU-Konventionen, so dass die Paketerstellung
     fast <em>automatisch</em> funktioniert. Auf Grund dieser Tatsache und
     weiterer Heuristik wird geschätzt, dass das Paket
     <package>debhelper</package> für ungefähr 90% aller Pakete richtig
     funktioniert, ohne dass irgendwelche Änderungen an deren Build-System
     vorgenommen werden müssen. Daher ist das Paketieren nicht so
     kompliziert, wie es zunächst aussieht.
   </p>
   <p>
     Wenn Sie Änderungen an der Datei <file>Makefile</file> vornehmen
     müssen, sollten Sie sicherstellen, dass die Variable
     <tt>$(DESTDIR)</tt> beachtet wird. Die Variable <tt>$(DESTDIR)</tt>
     wird darin auf einen leeren Wert gesetzt und dann vorne mit dem
     jeweiligen Dateipfad ergänzt, der für die Programminstallation
     verwendet wird. Das Skript für das Paketieren setzt <tt>$(DESTDIR)</tt>
     auf das temporäre Verzeichnis.
   </p>
   <p>
     Das temporäre Verzeichnis, das vom Befehl <prgn>dh_auto_install</prgn>
     benutzt wird, ist für einzelne Binärpakete (»single binary packages«)
     <file>debian/<var>Paket</var></file>. <footnote><p>Bei mehreren
     Binärpaketen (»multiple binary packages«) verwendet der Befehl
     <prgn>dh_auto_install</prgn> das temporäre Verzeichnis
     <file>debian/tmp</file>. Der Befehl <prgn>dh_install</prgn> teilt dann
     den Inhalt von <file>debian/tmp</file> mit Hilfe von
     <file>debian/<var>Paket-1</var>.install</file> und
     <file>debian/<var>Paket-2</var>.install</file> in die temporären
     Verzeichnisse <file>debian/<var>Paket-1</var></file> und
     <file>debian/<var>Paket-2</var></file> auf, um daraus mehrere binäre
     <file>*.deb</file>-Pakete zu erstellen.</p></footnote> Alles, was im
     temporären Verzeichnis enthalten ist, wird auf dem System eines
     Benutzers installiert, wenn dieser Ihr Paket installiert. Der einzige
     Unterschied ist, dass <prgn>dpkg</prgn> die Dateien im
     Wurzelverzeichnis installieren wird.
   </p>
   <p>
     Vergessen Sie nicht, dass Ihr Programm zwar unter
     <file>debian/<var>Paket</var></file> installiert wird, es sich aber
     trotzdem korrekt verhalten muss, wenn es im Wurzelverzeichnis platziert
     wird, d. h. wenn es mittels des <file>.deb</file>-Pakets installiert
     wird. Daher dürfen durch das Build-System keine fest eingestellten
     Zeichenketten wie
     <tt>/home/ich/deb/<var>Paket</var>-<var>Version</var>/usr/share/<var>Paket</var></tt>
     in die Paketdatei geschrieben werden.
   </p>
   <p>
     Dies ist der relevante Abschnitt aus der Datei <file>Makefile</file>
     von <package>gentoo</package>: <footnote><p>Dies ist nur ein Beispiel,
     wie die Datei <file>Makefile</file> aussehen sollte. Wenn die
     <file>Makefile</file>-Datei durch den Befehl <prgn>./configure</prgn>
     erstellt wird, ist die richtige Vorgehensweise, um diese Art
     <file>Makefile</file> zu korrigieren, den Befehl
     <prgn>./configure</prgn> durch den Befehl
     <prgn>dh_auto_configure</prgn> aufrufen zu lassen. Dabei kommen die
     voreingestellten Optionen zum Tragen, einschließlich der Option
     <tt>--prefix=/usr</tt>.</p></footnote>
    <example>
# Where to put binary on 'make install'?
BIN     = /usr/local/bin

# Where to put icons on 'make install'?
ICONS   = /usr/local/share/gentoo
</example>
   </p>
   <p>
     Sie sehen, dass die Dateien unter <file>/usr/local</file> installiert
     werden sollen. Ändern Sie diese Pfade in:
    <example>
# Where to put binary on 'make install'?
BIN     = $(DESTDIR)/usr/bin

# Where to put icons on 'make install'?
ICONS   = $(DESTDIR)/usr/share/gentoo
</example>
   </p>
   <p>
     Aber warum in dieses Verzeichnis und nicht in irgendein anderes? Weil
     Debian-Pakete niemals Dateien unter <file>/usr/local</file> ablegen --
     dieses Verzeichnis ist für den Systemadministrator reserviert. Solche
     Dateien werden auf einem Debian-System stattdessen unter
     <file>/usr</file> installiert.
   </p>
   <p>
     Eine genauere Beschreibung der Installationsverzeichnisse für
     Binärdateien, Icons, Dokumentationen usw. finden Sie im »Filesystem
     Hierarchy Standard« (siehe
     <file>/usr/share/doc/debian-policy/fhs/</file>). Ich empfehle, dass Sie
     sich dies anschauen und die Abschnitte lesen, die Ihr Paket betreffen
     könnten.
   </p>
   <p>
     Sie sollten also die Binärdateien in <file>/usr/bin/</file> statt
     <file>/usr/local/bin/</file> installieren, die Handbuchseiten in
     <file>/usr/share/man/man1/</file> statt
     <file>/usr/local/man/man1/</file> usw. Beachten Sie, dass im
     <file>Makefile</file> von <package>gentoo</package> keine Handbuchseite
     auftaucht. Da die Debian-Richtlinien aber verlangen, dass jedes
     Programm eine hat, schreiben Sie später eine und installieren sie unter
     <file>/usr/share/man/man1/</file>.
   </p>
   <p>
     Manche Programme nutzen die <file>Makefile</file>-Variablen nicht, um
     solche Pfade zu definieren. Das bedeutet, dass Sie wahrscheinlich die
     C-Quelltexte direkt bearbeiten müssen, damit diese dann die richtigen
     Pfade benutzen. Aber wo soll man suchen, und wonach eigentlich genau?
     Sie können dies herausfinden, indem Sie folgendes eingeben:
    <example>
$ grep -nr -e 'usr/local/lib' --include='*.[c|h]' .
</example>
   </p>
   <p>
     <prgn>Grep</prgn> durchsucht das Quellverzeichnis rekursiv und gibt
     Ihnen den Dateinamen und die Zeilennummer für alle Treffer aus.
   </p>
   <p>
     Sie müssen diese Dateien nun bearbeiten und in den entsprechenden
     Zeilen <tt>usr/local/lib</tt> durch <tt>usr/lib</tt> ersetzen.
    <example>
$ vim '+argdo %s/usr\/local\/lib/usr\/lib/gce|update' +q \
      $(find . -type f -name '*.[c|h]')
</example>
   </p>
   <p>
     Passen Sie auf, dass Sie den restlichen Code nicht beschädigen! :-)
   </p>
   <p>
     Danach suchen Sie das »install«-Target im <file>Makefile</file> (suchen
     Sie nach der Zeile, die mit <tt>install:</tt> beginnt, das funktioniert
     üblicherweise) und benennen Sie alle Verweise auf Verzeichnisse um, die
     nicht denen entsprechen, die Sie am Anfang definiert haben.
   </p>
   <p>
     Nach Ihrer Fehlerkorrektur an den originalen Quellen sieht das
     »install«-Target von <package>gentoo</package> folgendermaßen aus:
    <example>
install: gentoo-target
        install ./gentoo $(BIN)
        install icons/* $(ICONS)
        install gentoorc-example $(HOME)/.gentoorc
</example>
   </p>
   <p>
     Wir beheben dies und speichern es mit dem Befehl <prgn>quilt</prgn> als
     <file>debian/patches/install.patch</file>.
    <example>
$ quilt new install.patch
$ quilt add Makefile
</example>
   </p>
   <p>
     Wir ändern dies für das Debian-Paket im Editor wie folgt:
    <example>
install: gentoo-target
        install -d $(BIN) $(ICONS) $(DESTDIR)/etc
        install ./gentoo $(BIN)
        install -m644 icons/* $(ICONS)
        install -m644 gentoorc-example $(DESTDIR)/etc/gentoorc
</example>
   </p>
   <p>
     Sie haben sicherlich bemerkt, dass jetzt der Befehl »<tt>install
     -d</tt>« vor den anderen Befehlen in dieser Regel steht. Das originale
     <file>Makefile</file> hatte das nicht, weil normalerweise die
     Verzeichnisse <tt>/usr/local/bin/</tt> und andere Verzeichnisse schon
     auf dem System vorhanden sind, wenn »<tt>make install</tt>« aufgerufen
     wird. Weil wir aber in unser eigenes, leeres (oder sogar nicht
     vorhandenes) Verzeichnis installieren, müssen wir jedes einzelne
     Verzeichnis anlegen.
   </p>
   <p>
     Wir können am Ende der Regel noch weitere Dinge einfügen, wie
     beispielsweise die Installation zusätzlicher Dokumentation, die die
     ursprünglichen Autoren manchmal weglassen:
    <example>
        install -d $(DESTDIR)/usr/share/doc/gentoo/html
        cp -a docs/* $(DESTDIR)/usr/share/doc/gentoo/html
</example>
   </p>
   <p>
     Nachdem Sie sorgfältig überprüft haben, ob alles in Ordnung ist, weisen
     Sie <prgn>quilt</prgn> an, den Patch zu aktualisieren und die Datei
     <file>debian/patches/install.patch</file> neu zu erstellen. Fügen Sie
     außerdem noch eine Beschreibung hinzu.
    <example>
$ quilt refresh
$ quilt header -e
... Patch beschreiben
</example>
   </p>
   <p>
     Jetzt haben Sie eine Reihenfolge von Patches.
    <enumlist numeration="arabic">
     <item>
      <p>
        Die Fehlerkorrektur der originalen Quellen:
        <file>debian/patches/fix-gentoo-target.patch</file>
      </p>
     </item>
     <item>
      <p>
        Die Debian-spezifische Änderung für's Paketieren:
        <file>debian/patches/install.patch</file>
      </p>
     </item>
    </enumlist>
   </p>
   <p>
     Wann immer Sie Änderungen machen, die nicht spezifisch für das
     Debian-Paket sind (so wie
     <file>debian/patches/fix-gentoo-target.patch</file>), sollten Sie diese
     dem ursprünglichen Betreuer zukommen lassen, damit er sie in der
     nächsten Programmversion verwenden kann und sie für andere auch
     nützlich sind. Denken Sie vor dem Verschicken auch daran, Ihre Patches
     nicht spezifisch für Debian oder Linux (oder sogar Unix!) zu gestalten,
     sondern sie portierbar zu machen. Dadurch können Ihre Änderungen
     wesentlich leichter übernommen werden.
   </p>
   <p>
     Beachten Sie, dass Sie dem ursprünglichen Betreuer die
     <file>debian/*</file>-Dateien nicht schicken müssen.
   </p>
  </sect>
  <sect id="difflibs">
   <heading>
     Unterschiedliche Bibliotheken
   </heading>
   <p>
     Es gibt noch ein weiteres häufiges Problem: Bibliotheken sind oftmals
     von Plattform zu Plattform verschieden. Beispielsweise kann ein
     <file>Makefile</file> einen Verweis auf eine Bibliothek enthalten, die
     es auf Debian-Systemen nicht gibt. In diesem Fall müssen Sie das
     <file>Makefile</file> so verändern, dass eine Bibliothek verwendet
     wird, die es in Debian gibt und die denselben Zweck erfüllt.
   </p>
   <p>
     Wenn also im <file>Makefile</file> (oder in <file>Makefile.in</file>)
     des Programms eine Zeile wie die folgende vorkommt und Ihr Programm
     sich nicht kompilieren lässt <footnote><p> Der Autor ist sich bewusst,
     dass dies nicht das beste Beispiel ist, weil das Paket
     <package>libncurses</package> mittlerweise einen symbolischen Link auf
     <file>libcurses.so</file> enthält, aber er konnte sich kein besseres
     ausdenken. Vorschläge sind sehr erwünscht :-)</p></footnote>:
    <example>
LIBS = -lcurses -lirgendwas -lirgendwasanderes
</example>
   </p>
   <p>
     Wir korrigieren dies, indem wir <tt>curses</tt> in <tt>ncurses</tt>
     umbenennen und als <file>debian/patches/ncurse.patch</file> speichern.
    <example>
$ quilt new ncurse.patch
$ quilt add Makefile
$ sed -i -e "s/-lcurses/-lncurses/g" Makefile
$ quilt refresh
$ quilt header -e
... Patch beschreiben
</example>
   </p>
  </sect>
 </chapt>
 <chapt id="dreq">
  <heading>
    Benötigte Dateien im Verzeichnis <file>debian</file>
  </heading>
  <p>
    Im Quellverzeichnis des Programms gibt es ein neues Unterverzeichnis,
    das <file>debian</file> heißt. In diesem Verzeichnis sind einige
    Dateien, die wir ändern müssen, um die Eigenschaften des Pakets
    anzupassen. Die wichtigsten davon sind <file>control</file>,
    <file>changelog</file>, <file>copyright</file> und <file>rules</file>,
    die für jedes Paket benötigt werden.
  </p>
  <sect id="control">
   <heading>
     Die Datei <file>control</file>
   </heading>
   <p>
     Diese Datei enthält verschiedene Werte, die <prgn>dpkg</prgn>,
     <prgn>dselect</prgn>, <prgn>apt-get</prgn>, <prgn>apt-cache</prgn>,
     <prgn>aptitude</prgn> und andere Paketverwaltungswerkzeuge verwenden,
     um das Paket zu verwalten. Sie wird in den <url
     id="http://www.debian.org/doc/debian-policy/ch-controlfields.html"
     name="Debian-Richtlinien, Kapitel 5 »Control files and their fields«">
     festgelegt.
   </p>
   <p>
     Dies ist die Datei »control«, die <prgn>dh_make</prgn> für uns erstellt
     hat:
    <example>
 1 Source: gentoo
 2 Section: unknown
 3 Priority: extra
 4 Maintainer: Josip Rodin &lt;joy-mg@debian.org&gt;
 5 Build-Depends: debhelper (>= 7.0.50~)
 6 Standards-Version: 3.8.4
 7 Homepage: &lt;insert the upstream URL, if relevant&gt;
 8
 9 Package: gentoo
10 Architecture: any
11 Depends: ${shlibs:Depends}, ${misc:Depends}
12 Description: &lt;insert up to 60 chars description&gt;
13  &lt;insert long description, indented with spaces&gt;
</example>
     (Die Zeilennummerierung habe ich hinzugefügt.)
   </p>
   <p>
     Die Zeilen 1-6 sind die Steuerinformationen für das Quellcode-Paket.
   </p>
   <p>
     Zeile 1 ist der Name des Quellcode-Pakets.
   </p>
   <p>
     Zeile 2 bestimmt die Sektion der Distribution, in die das
     Quellcode-Paket gehört.
   </p>
   <p>
     Sie haben bestimmt schon gemerkt, dass das Debianarchiv in Sektionen
     aufgeteilt ist: <tt>main</tt> (freie Software), <tt>non-free</tt>
     (nicht wirklich freie Software) und <tt>contrib</tt> (freie Software,
     die von non-free-Software abhängt). Unterhalb dieser Sektionen
     existieren logische Untersektionen, die eine minimale Beschreibung der
     Pakete geben. Dementsprechend enthält die Sektion <tt>admin</tt>
     Programme für dieAdministration, <tt>base</tt> die grundlegenden
     Pakete, <tt>devel</tt> die Pakete für die Programmierer, <tt>doc</tt>
     die Dokumentation, <tt>libs</tt> die Programmbibliotheken,
     <tt>mail</tt> die E-Mail-Leseprogramme und -Daemons, <tt>net</tt> die
     Netzwerk-Anwendungen und Daemons, <tt>x11</tt> die X11-Programme, die
     nirgendwo anders unterkommen und viele mehr. Siehe die <url
     id="http://www.debian.org/doc/debian-policy/ch-archive.html#s-subsections"
     name="Debian-Richtlinien, Kapitel 2.4 »Sections«"> und die <url
     id="http://packages.debian.org/unstable/" name="Liste der Sektionen in
     »Sid«"> für eine Orientierung.
   </p>
   <p>
     Verändern Sie die Sektion also zu x11 (Das Präfix <tt>main/</tt> wird
     impliziert, also können wir es weglassen).
   </p>
   <p>
     Zeile 3 beschreibt, wie wichtig es ist, dass der Benutzer das Paket
     installiert. Lesen Sie die <url
     id="http://www.debian.org/doc/debian-policy/ch-archive.html#s-priorities"
     name="Debian-Richtlinien, 2.5 »Priorities«"> als Anleitung.
    <list>
     <item>
      <p>
        Die Priorität <tt>optional</tt> ist normalerweise für neue Pakete
        sinnvoll, die nicht mit anderen Paketen der Prioritäten
        <tt>required</tt>, <tt>important</tt> oder <tt>standard</tt>
        kollidieren.
      </p>
     </item>
     <item>
      <p>
        Die Priorität <tt>extra</tt> ist normalerweise für neue Pakete
        sinnvoll, die mit anderen Paketen kollidieren, die eine andere
        Priorität als <tt>extra</tt> besitzen.
      </p>
     </item>
    </list>
   </p>
   <p>
     Sektion und Priorität werden von Frontends wie <prgn>aptitude</prgn>
     benutzt, um Pakete zu sortieren und Standardparameter auszuwählen. Wenn
     Sie das Paket für Debian hochladen, können die Werte dieser beiden
     Felder von den Archivbetreuern überschrieben werden. Sie erhalten dann
     eine Nachricht darüber per E-Mail.
   </p>
   <p>
     Da es sich um ein Paket mit normaler Priorität handelt und nichts
     anderes stört, ändern wir die Priorität auf »<tt>optional</tt>«.
   </p>
   <p>
     Zeile 4 ist der Name und die E-Mail-Adresse des Betreuers. Sie müssen
     sicherstellen, dass dieses Feld eine gültige »<tt>To</tt>«-Kopfzeile
     für eine E-Mail enthält, weil nach dem Hochladen das
     Fehlerverfolgungssystem diesen Eintrag nutzt, um die Fehler-E-Mails an
     Sie zuzustellen. Benutzen Sie keine Kommata, das Et-Zeichen (&amp;)
     oder Klammern.
   </p>
   <p>
     Zeile 5 enthält die Liste der Pakete, die zum Bauen des Pakets benötigt
     werden, im Feld <tt>Build-Depends</tt>. Sie können hier ebenso das Feld
     <tt>Build-Depends-Indep</tt> in einer zusätzlichen Zeile benutzen
     (siehe die <url
     id="http://www.debian.org/doc/debian-policy/ch-relationships.html#s-sourcebinarydeps"
     name="Debian-Richtlinien, 7.7 »Relationships between source and binary
     packages - Build-Depends, Build-Depends-Indep, Build-Conflicts,
     Build-Conflicts-Indep«">). Einige Pakete wie <package>gcc</package> und
     <package>make</package> werden impliziert, weil sie vom Paket
     <package>build-essential</package> benötigt werden. Falls Sie andere
     Werkzeuge zum Bauen Ihres Pakets brauchen, müssen Sie sie zu diesen
     Feldern hinzufügen. Mehrere Einträge werden durch Kommata getrennt;
     mehr über die Syntax dieser Zeilen finden Sie in den Erläuterungen der
     binären Abhängigkeiten.
    <list>
     <item>
      <p>
        Bei allen Paketen, die auf den Befehl <prgn>dh</prgn> in der Datei
        <file>debian/rules</file> zugreifen, müssen Sie »<tt>debhelper
        (>=7.0.50~)</tt>« in das Feld <tt>Build-Depends</tt> eintragen, um
        die Debian-Richtlinien für das Target <tt>clean</tt> zu erfüllen.
      </p>
     </item>
     <item>
      <p>
        Bei Quellpaketen, die binäre Pakete mit »<tt>Architecture: any</tt>«
        erstellen, werden diese vom automatischen Buildsystem
        (»Autobuilder«) neu gebaut. Da während dieser Autobuilder-Prozedur
        »<tt>debian/rules build</tt>« aufgerufen wird und nur Pakete
        installiert werden, die im Feld <tt>Build-Depends</tt> aufgeführt
        sind (siehe <ref id="autobuilder">), muss das Feld
        <tt>Build-Depends</tt> praktisch alle erforderlichen Pakete
        auflisten. Das Feld <tt>Build-Depends-Indep</tt> wird daher selten
        benutzt.
      </p>
     </item>
     <item>
      <p>
        Bei Quellpaketen, die nur binäre Pakete mit »<tt>Architecture:
        all</tt>« erstellen, kann das Feld <tt>Build-Depends-Indep</tt> alle
        erforderlichen Pakete auflisten, es sei denn, diese sind bereits im
        Feld <tt>Build-Depends</tt> aufgeführt, um die Debian-Richtlinie für
        das Target <tt>clean</tt> zu erfüllen.
      </p>
     </item>
    </list>
   </p>
   <p>
     Wenn Sie sich nicht sicher sind, welches von beiden Sie benutzen
     sollten, verwenden Sie das Feld <tt>Build-Depends</tt>, um auf der
     sicheren Seite zu sein. <footnote><p>Diese etwas merkwürdige Situation
     ist eine Besonderheit, die in den <url
     id="http://www.debian.org/doc/debian-policy/footnotes.html#f48"
     name="Debian-Richtlinien, Fußnote 48"> sehr gut dokumentiert ist. Es
     liegt nicht an der Verwendung des Befehls <prgn>dh</prgn> in der Datei
     <file>debian/rules</file>, sondern daran, wie das Programm
     <prgn>dpkg-buildpackage</prgn> arbeitet. Dieselbe Situation gilt auch
     für das <url
     id="https://bugs.launchpad.net/launchpad-buildd/+bug/238141"
     name="»auto build system« von Ubuntu">.</p></footnote>
   </p>
   <p>
     Um herauszufinden, welche Pakete Ihr Paket zum Bauen benötigt, führen
     Sie diesen Befehl aus:
    <example>
$ dpkg-depcheck -d ./configure
</example>
   </p>
   <p>
     Um die genauen Build-Abhängigkeiten für
     <prgn><var>/usr/bin/foo</var></prgn> manuell herauszufinden, führen Sie
    <example>
$ objdump -p <var>/usr/bin/foo</var> | grep NEEDED
</example>
     aus. Rufen Sie dann für jede aufgelistete Bibliothek, beispielsweise
     <prgn>libfoo.so.6</prgn>, diesen Befehl auf:
    <example>
$ dpkg -S libfoo.so.6 
</example>
     Dann nehmen Sie die Entwicklerversion (<tt>-dev</tt>) jedes Pakets als
     einen <tt>Build-Depends</tt>-Eintrag. Wenn Sie dafür <prgn>ldd</prgn>
     benutzen, werden auch indirekt abhängende Bibliotheken aufgelistet und
     überflüssige Build-Abhängigkeiten geliefert.
   </p>
   <p>
     <package>Gentoo</package> benötigt noch <package>xlibs-dev</package>,
     <package>libgtk1.2-dev</package> und <package>libglib1.2-dev</package>
     um gebaut werden zu können, deshalb hängen wir diese direkt hinter
     <package>debhelper</package> an.
   </p>
   <p>
     Zeile 6 enthält die Version der <url
     id="http://www.debian.org/doc/devel-manuals#policy"
     name="Debian-Richtlinien">, dessen Standards dieses Paket entspricht,
     also die Version, die Sie gelesen haben, während Sie Ihr Paket
     erstellten.
   </p>
   <p>
     In Zeile 7 können Sie die URL der Homepage für das ursprüngliche
     Programm notieren.
   </p>
   <p>
     Zeile 9 enthält den Namen des Binärpakets. Üblicherweise ist dies der
     gleiche Name wie der des Quellpakets, aber das muss nicht immer so
     sein.
   </p>
   <p>
     Zeile 10 beschreibt die CPU-Architektur, für die das Binärpaket
     kompiliert werden kann. Wir können das bei »<tt>any</tt>« belassen,
     weil es dann von <manref section="1" name="dpkg-gencontrol"> mit dem
     richtigen Inhalt ersetzt wird, der für den Rechner gilt, auf dem das
     Paket gebaut wird.
   </p>
   <p>
     Wenn Ihr Paket unabhängig von der Architektur funktioniert
     (beispielsweise ein Shell- oder Perl-Skript oder Dokumentation), ändern
     Sie dies in »<tt>all</tt>« und lesen Sie später unter <ref id="rules">
     über die Benutzung der Regel <tt>binary-indep</tt> statt
     <tt>binary-arch</tt> für den Bau des Pakets.
   </p>
   <p>
     Zeile 11 zeigt eine der mächtigsten Eigenschaften des Paketsystems von
     Debian. Pakete können auf verschiedene Arten miteinander in Beziehung
     stehen. Neben <tt>Depends</tt> (hängt ab von) gibt es noch die
     Beziehungsfelder <tt>Recommends</tt> (empfiehlt), <tt>Suggests</tt>
     (schlägt vor), <tt>Pre-Depends</tt> (setzt voraus), <tt>Breaks</tt>
     (beschädigt), <tt>Conflicts</tt> (kollidiert mit), <tt>Provides</tt>
     (enthält) und <tt>Replaces</tt> (ersetzt).
   </p>
   <p>
     Die verschiedenen Paketverwaltungswerkzeuge verhalten sich
     normalerweise bei der Behandlung dieser Beziehungen gleich; wenn nicht,
     wird dies erklärt (siehe <manref section="8" name="dpkg">, <manref
     section="8" name="dselect">, <manref section="8" name="apt">, <manref
     section="1" name="aptitude"> usw.).
   </p>
   <p>
     Und das bedeuten die Abhängigkeiten:
   </p>
   <p>
    <list>
     <item>
      <p>
        <tt>Depends</tt>
      </p>
      <p>
        Das Paket wird erst installiert, wenn die hier aufgelisteten Pakete
        ebenfalls installiert sind. Benutzen Sie dies, wenn ihr Programm
        ohne ein bestimmtes Paket überhaupt nicht läuft (oder schwere
        Schäden verursacht).
      </p>
     </item>
     <item>
      <p>
        <tt>Recommends</tt>
      </p>
      <p>
        Benutzen Sie dies für Pakete, die nicht absolut notwendig sind, die
        aber typischerweise mit Ihrem Programm verwendet werden. Wenn ein
        Benutzer Ihr Programm installiert, fragen wahrscheinlich alle
        Frontends nach, ob die empfohlenen Pakete auch installiert werden
        sollen. <prgn>Aptitude</prgn> und <prgn>apt-get</prgn> installieren
        alle empfohlenen Pakete zusammen mit Ihrem Paket (aber der Benutzer
        kann diese Voreinstellung außer Kraft setzen). <prgn>Dpkg</prgn>
        ignoriert dieses Feld.
      </p>
     </item>
     <item>
      <p>
        <tt>Suggests</tt>
      </p>
      <p>
        Benutzen Sie dies für Pakete, die mit Ihrem Programm gut
        zusammenarbeiten, aber absolut nicht notwendig sind. Wenn ein
        Benutzer Ihr Programm installiert, fragen wahrscheinlich alle
        Frontends nach, ob die vorgeschlagenen Pakete auch installiert
        werden sollen. <prgn>Aptitude</prgn> kann so konfiguriert werden,
        dass es vorgeschlagene Pakete zusammen mit Ihrem Paket installiert,
        aber dies ist nicht die Voreinstellung.<prgn>Dpkg</prgn> und
        <prgn>apt-get</prgn> ignorieren dieses Feld.
      </p>
     </item>
     <item>
      <p>
        <tt>Pre-Depends</tt>
      </p>
      <p>
        Dies ist stärker als <tt>Depends</tt>. Das Paket wird nicht
        installiert, bevor die hier aufgelisteten Pakete fertig installiert
        <em>und richtig konfiguriert</em> sind. Benutzen Sie dies
        <em>sehr</em> sparsam und nur, nachdem auf der Mailingliste <url
        id="http://lists.debian.org/debian-devel/"
        name="debian-devel@lists.debian.org"> darüber diskutiert
        wurde. Lies: Verwenden Sie es überhaupt nicht. :-)
      </p>
     </item>
     <item>
      <p>
        <tt>Conflicts</tt>
      </p>
      <p>
        Das Paket wird nicht installiert, bevor alle Pakete, mit denen es
        kollidiert, entfernt wurden. Benutzen Sie dies, wenn ihr Programm
        überhaupt nicht läuft oder schwere Probleme verursacht, solange ein
        bestimmtes Paket installiert ist.
      </p>
     </item>
     <item>
      <p>
        <tt>Breaks</tt>
      </p>
      <p>
        Wenn dieses Paket installiert wird, werden alle aufgeführten Pakete
        als beschädigt markiert. Normalerweise hat ein Eintrag unter
        <tt>Breaks</tt> einen Versionseintrag mit dem Vergleich »früher
        als«. Die Lösung ist üblicherweise, dass die aufgelisteten Pakete
        von den höhergradigen Paketverwaltungswerkzeugen aktualisiert
        werden.
      </p>
     </item>
     <item>
      <p>
        <tt>Provides</tt>
      </p>
      <p>
        Für einige Paketarten mit mehreren Alternativen wurden virtuelle
        Namen definiert. Die vollständige Liste dieser virtuellen Pakete
        finden Sie in der Datei
        <file>/usr/share/doc/debian-policy/virtual-package-names-list.txt.gz</file>.
        Benutzen Sie dies, wenn Ihr Paket die Funktionalität eines
        existierenden virtuellen Pakets bietet.
      </p>
     </item>
     <item>
      <p>
        <tt>Replaces</tt>
      </p>
      <p>
        Benutzen Sie dies, wenn Ihr Paket Dateien eines anderen Pakets
        überschreibt oder ein anderes Paket vollständig ersetzt (wird
        zusammen mit <tt>Conflicts</tt> benutzt). Dateien der genannten
        Pakete werden mit den Dateien aus Ihrem Paket überschrieben.
      </p>
     </item>
    </list>
   </p>
   <p>
     All diese Felder haben eine einheitliche Syntax. Es ist jeweils eine
     durch Kommata getrennte Liste der Paketnamen. Diese Paketnamen können
     auch aus einer Liste von alternativen Paketnamen bestehen, die durch
     senkrechte Striche »<tt>|</tt>« (»pipe«-Zeichen) getrennt werden.
   </p>
   <p>
     Die Anwendung der Felder kann auf bestimmte Versionen eines genannten
     Pakets beschränkt werden. Diese Versionen werden in Klammern nach jedem
     einzelnen Paketnamen aufgeführt und müssen einen Vergleich aus der
     folgenden Liste enthalten, gefolgt von der Versionsnummer. Die
     erlaubten Vergleiche sind <tt>&lt;&lt;</tt>, <tt>&lt;=</tt>,
     <tt>=</tt>, <tt>&gt;=</tt> und <tt>&gt;&gt;</tt> für strikt niedriger,
     niedriger oder gleich, genau gleich, höher oder gleich und strikt
     höher. Ein Beispiel:
    <example>
Depends: foo (&gt;= 1.2), libbar1 (= 1.3.4)
Conflicts: baz
Recommends: libbaz4 (&gt;&gt; 4.0.7)
Suggests: quux
Replaces: quux (&lt;&lt; 5), quux-foo (&lt;= 7.6)
</example>
   </p>
   <p>
     Die letzten Merkmale, die Sie kennen sollten, sind
     <tt>${shlibs:Depends}</tt>, <tt>${perl:Depends}</tt>,
     <tt>${misc:Depends}</tt> usw. Diese Einträge werden durch die Liste
     ersetzt, die von anderen <package>debhelper</package>-Komponenten
     erstellt wurde, während der Befehl <manref section="1"
     name="dh_gencontrol"> ausgeführt wird.
   </p>
   <p>
     Nachdem Ihr Paket gebaut und in das temporäre Verzeichnis installiert
     wurde, untersucht <manref section="1" name="dh_shlibdeps"> die
     Binärdateien und Bibliotheken auf Abhängigkeiten von
     Laufzeitbibliotheken und stellt fest, in welchen Paketen diese
     enthalten sind, beispielsweise <package>libc6</package> oder
     <package>xlib6g</package>. Diese Liste von Laufzeitbibliotheken, von
     denen Ihr Programm abhängt, wird für <tt>${shlibs:Depends}</tt>
     benutzt.
   </p>
   <p>
     Die Paketliste, die von <manref section="1" name="dh_perl"> erzeugt
     wurde, wird für <tt>${perl:Depends}</tt> verwendet.
   </p>
   <p>
     Einige <package>debhelper</package>-Befehle können eine Abhängigkeit
     von einem anderen Paket im erzeugten Paket bewirken. Die Liste solcher
     benötigten Pakete wird für <tt>${misc:Depends}</tt> benutzt.
   </p>
   <p>
     Nach all diesen Erklärungen können wir das Feld <tt>Depends</tt> aber
     exakt so belassen, wie es jetzt ist und eine weitere Zeile dahinter
     einfügen, in der »<tt>Suggests: file</tt>« steht, weil
     <package>gentoo</package> einige Funktionen des Pakets
     <package>file</package> nutzen kann.
   </p>
   <p>
     Zeile 12 enthält eine Kurzbeschreibung. Bei den meisten Leuten sind die
     Terminalzeilen 80 Zeichen breit, also sollte die Kurzbeschreibung nicht
     länger als etwa 60 Zeichen sein. Ich ändere es in "<tt>fully
     GUI-configurable, two-pane X file manager</tt>".
   </p>
   <p>
     In die Zeile 13 kommt eine ausführliche Beschreibung. Sie sollte aus
     einem kleinen Text bestehen, der mehr über das Paket verrät. Die erste
     Spalte jeder Zeile muss leer sein. Es dürfen keine leeren Zeilen
     vorkommen, Sie können aber welche simulieren, indem Sie einen einzelnen
     »<tt>.</tt>« (Punkt) in die Zeile einsetzen. Es darf nach der
     ausführlichen Beschreibung auch nicht mehr als eine Leerzeile
     vorkommen.
   </p>
   <p>
     Lassen Sie uns zwischen die Zeilen 6 und 7 die Felder <tt>Vcs-*</tt>
     einsetzen, die in der <url
     id="http://www.debian.org/doc/manuals/developers-reference/best-pkging-practices.html#bpp-vcs"
     name="Entwickler-Referenz, 6.2.5. »Version Control System location«">
     beschrieben sind. Wir nehmen an, dass das Paket
     <package>gentoo</package> im Git-Service von Debian Alioth unter
     <tt>git://git.debian.org/git/collab-maint/gentoo.git</tt> zu finden
     ist.
   </p>
   <p>
     Zum Schluss ist dies die aktualisierte Datei <file>control</file>:
    <example>
 1 Source: gentoo
 2 Section: x11
 3 Priority: optional
 4 Maintainer: Josip Rodin &lt;joy-mg@debian.org&gt;
 5 Build-Depends: debhelper (>= 7.0.5), xlibs-dev, libgtk1.2-dev, libglib1.2-dev
 6 Standards-Version: 3.8.4
 7 Vcs-Git: git://git.debian.org/git/collab-maint/gentoo.git
 8 Vcs-browser: http://git.debian.org/?p=collab-maint/gentoo.git
 9 Homepage: http://www.obsession.se/gentoo/
10
11 Package: gentoo
12 Architecture: any
13 Depends: ${shlibs:Depends}, ${misc:Depends}
14 Suggests: file
15 Description: fully GUI-configurable, two-pane X file manager
16  gentoo is a two-pane file manager for the X Window System. gentoo lets the
17  user do (almost) all of the configuration and customizing from within the
18  program itself. If you still prefer to hand-edit configuration files,
19  they're fairly easy to work with since they are written in an XML format.
20  .
21  gentoo features a fairly complex and powerful file identification system,
22  coupled to a object-oriented style system, which together give you a lot
23  of control over how files of different types are displayed and acted upon.
24  Additionally, over a hundred pixmap images are available for use in file
25  type descriptions.
26  .
29  gentoo was written from scratch in ANSI C, and it utilises the GTK+ toolkit
30  for its interface.
</example>
     (Die Zeilennummerierung habe ich hinzugefügt.)
   </p>
  </sect>
  <sect id="copyright">
   <heading>
     Die Datei <file>copyright</file>
   </heading>
   <p>
     In dieser Datei stehen Informationen über die Herkunft des Pakets, das
     Copyright und die Lizenz. Die <url
     id="http://www.debian.org/doc/debian-policy/ch-docs.html#s-copyrightfile"
     name="Debian-Richtlinien, 12.5 »Copyright information«"> schreiben
     keine bestimmte Form vor, aber den benötigten Inhalt. Sie können auch
     <url id="http://dep.debian.net/deps/dep5/" name="DEP-5:
     »Machine-parseable debian/copyright«"> zu Rate ziehen.
   </p>
   <p>
     <prgn>Dh_make</prgn> kann eine Vorlage für die Datei
     <file>copyright</file> erzeugen. Verwenden Sie hier die Option
     »<tt>--copyright gpl2</tt>«, um eine Vorlage für das Paket
     <package>gentoo</package> zu erhalten, das unter GPL-2 veröffentlicht
     wurde.
   </p>
   <p>
     Sie müssen hier fehlende Informationen eintragen, beispielsweise die
     Quelle, von der Sie das Paket bezogen haben, die tatsächlichen
     Copyright-Vermerke und die Lizenz, damit die Datei vollständig ist. Bei
     den verbreiteten Lizenzen von freier Software wie GNU GPL-1, GNU GPL-2,
     GNU GPL-3, LGPL-2, LGPL-2.1, LGPL-3, GNU FDL-1.2, GNU FDL-1.3,
     Apache-2.0 oder der Artistic license können Sie auf die entsprechende
     Datei im Verzeichnis <file>/usr/share/common-licenses/</file>
     verweisen, das auf jedem Debian-System existiert. Anderenfalls müssen
     Sie die vollständige Lizenz einfügen.
   </p>
   <p>
     Zusammengefasst sollte die Datei <file>copyright</file> von
     <package>gentoo</package> so aussehen:
    <example>
 1 Format-Specification: http://svn.debian.org/wsvn/dep/web/deps/dep5.mdwn?op=file&amp;rev=135
 2 Name: gentoo
 3 Maintainer: Josip Rodin &lt;joy-mg@debian.org&gt;
 4 Source: http://sourceforge.net/projects/gentoo/files/
 5
 6 Copyright: 1998-2010 Emil Brink &lt;emil@obsession.se&gt;
 7 License: GPL-2+
 8
 9 Files: icons/*
10 Copyright: 1998 Johan Hanson &lt;johan@tiq.com&gt;
11 License: GPL-2+
12
13 Files: debian/*
14 Copyright: 1998-2010 Josip Rodin &lt;joy-mg@debian.org&gt;
15 License: GPL-2+
16
17 License: GPL-2+
18  This program is free software; you can redistribute it and/or modify
19  it under the terms of the GNU General Public License as published by
20  the Free Software Foundation; either version 2 of the License, or
21  (at your option) any later version. 
22  .
23  This program is distributed in the hope that it will be useful,
24  but WITHOUT ANY WARRANTY; without even the implied warranty of
25  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
26  GNU General Public License for more details.
27 .
28  You should have received a copy of the GNU General Public License along
29  with this program; if not, write to the Free Software Foundation, Inc.,
30  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
31  .
32  On Debian systems, the full text of the GNU General Public
33  License version 2 can be found in the file
34  `/usr/share/common-licenses/GPL-2'.
</example>
     (Die Zeilennummerierung habe ich hinzugefügt.)
   </p>
   <p>
     Bitte befolgen Sie das »HOWTO«, das von den FTP-Masters zur Verfügung
     gestellt wird und an debian-devel-announce geschickt wurde: <url
     id="&copyright-howto;">.
   </p>
  </sect>
  <sect id="changelog">
   <heading>
     Die Datei <file>changelog</file>
   </heading>
   <p>
     Dies ist eine zwingend vorgeschriebene Datei, deren Format in den <url
     id="http://www.debian.org/doc/debian-policy/ch-source.html#s-dpkgchangelog"
     name="Debian-Richtlinien, 4.4 »debian/changelog«"> beschrieben
     wird. Dieses Format benötigen <prgn>dpkg</prgn> und andere Programme um
     die Versionsnummer, Revision, Distribution und die Dringlichkeit Ihres
     Pakets zu bestimmen.
   </p>
   <p>
     Für Sie ist die Datei ebenfalls wichtig, weil es sinnvoll ist, alle von
     Ihnen vorgenommenen Änderungen zu dokumentieren. Damit können Leute,
     die Ihr Paket herunterladen, einfacher herausfinden, ob es Probleme mit
     dem Paket gibt, die sie kennen sollten. Diese Datei wird im Binärpaket
     als <file>/usr/share/doc/gentoo/changelog.Debian.gz</file> gespeichert.
   </p>
   <p>
     <prgn>Dh_make</prgn> hat eine Standardvorlage erstellt, die so
     aussieht:
    <example>
1  gentoo (0.9.12-1) unstable; urgency=low
2
3   * Initial release (Closes: #<var>nnnn</var>)  &lt;<var>nnnn</var> is the bug number of your ITP&gt;
4
5  -- Josip Rodin &lt;joy-mg@debian.org&gt;  Mon, 22 Mar 2010 00:37:31 +0100
6
</example>
     (Die Zeilennummerierung habe ich hinzugefügt.)
   </p>
   <p>
     In der Zeile 1 stehen der Paketname, die Version, die Distribution und
     die Dringlichkeit. Der Name muss mit dem Namen des Quellpakets
     übereinstimmen, die Distribution sollte entweder <tt>unstable</tt>
     (oder sogar <tt>experimental</tt>) sein <footnote><p>Einige Leute
     verwenden ungültige Werte für die Distribution wie <tt>UNRELEASED</tt>,
     um zu verhindern, dass ein Paket versehentlich hochgeladen wird, wenn
     es in einem verteilten Versionskontrollsystem aktualisiert
     wird.</p></footnote> und die Dringlichkeit sollte nicht auf etwas
     höheres als <tt>low</tt> geändert werden. :-)
   </p>
   <p>
     Zeilen 3-5 sind Log-Einträge, in denen Sie die in dieser Paketrevision
     gemachten Änderungen dokumentieren können (hier kommen keine Änderungen
     des ursprünglichen Betreuers hinein; für diese Zwecke gibt es eine
     spezielle Datei, die von den ursprünglichen Betreuern erstellt wurde
     und die Sie später als <file>/usr/share/doc/gentoo/changelog.gz</file>
     installieren werden). Wir nehmen an, dass die Nummer Ihres
     ITP-Fehlerberichts (»Intent To Package«; Absicht, ein Paket zu
     erstellen) »<tt>12345</tt>« lautet. Neue Zeilen werden direkt über der
     obersten Zeile, die mit einem Stern (»<tt>*</tt>«) beginnt,
     eingefügt. Sie können das mit <manref section="1" name="dch"> oder per
     Hand mit einem Texteditor erledigen.
   </p>
   <p>
     Schließlich kommen Sie zu einer Datei wie dieser hier:
    <example>
1  gentoo (0.9.12-1) unstable; urgency=low
2
3   * Initial Release. Closes: #12345
4   * This is my first Debian package.
5   * Adjusted the Makefile to fix $(DESTDIR) problems.
6
7  -- Josip Rodin &lt;joy-mg@debian.org&gt;  Mon, 22 Mar 2010 00:37:31 +0100
8
</example>
     (Die Zeilennummerierung habe ich hinzugefügt.)
   </p>
   <p>
     Sie können später mehr über Aktualisierungen der Datei
     <file>changelog</file> in <ref id="update"> lesen.
   </p>
  </sect>
  <sect id="rules">
   <heading>
     Die Datei <file>rules</file>
   </heading>
   <p>
     Wir werfen nun einen Blick auf die genauen Regeln, die <manref
     section="1" name="dpkg-buildpackage"> verwenden wird, um das Paket zu
     bauen. Diese Datei ist in Wirklichkeit ein weiteres
     <file>Makefile</file>, aber anders als die von den ursprünglichen
     Betreuern mitgelieferten. Im Unterschied zu den anderen Dateien im
     Verzeichnis <file>debian</file> ist diese Datei als ausführbar
     gekennzeichnet.
   </p>
   <sect1 id="targets">
    <heading>
      Targets der Datei <file>rules</file>
    </heading>
    <p>
      Wie jedes andere <file>Makefile</file> besteht die Datei
      <file>rules</file> aus mehreren Targets, deren Regeln bestimmen, wie
      mit dem Quellcode verfahren wird. In den <url
      id="http://www.debian.org/doc/debian-policy/ch-source.html#s-debianrules"
      name="Debian-Richtlinien, 4.9 »Main building script: debian/rules«">
      werden die Details erklärt.
    </p>
    <p>
      Vereinfachte Erklärungen der Targets sind im Folgenden aufgeführt.
     <list>
      <item>
       <p>
         <tt>clean</tt>-Target: Löschen aller kompilierten, erzeugten und
         nicht benötigten Dateien im Build-Verzeichnis (erforderlich).
       </p>
      </item>
      <item>
       <p>
         <tt>build</tt>-Target: Bauen der Quellen zu kompilierten Programmen
         und formatierten Dokumenten im Build-Verzeichnis (erforderlich).
       </p>
      </item>
      <item>
       <p>
         <tt>install</tt>-Target: Installieren der Dateien in einen
         Verzeichnisbaum unterhalb des Verzeichnisses <file>debian</file>
         für jedes Binärpaket. Wenn sie festgelegt wurden, hängen
         <tt>binary*</tt>-Targets effektiv von diesem Target ab (optional).
       </p>
      </item>
      <item>
       <p>
         <tt>binary</tt>-Target: Erstellt alle Binärpakete (effektiv ist
         dies die Kombination der <tt>binary-arch</tt>- und
         <tt>binary-indep</tt>-Targets) (erforderlich). <footnote><p>Dieses
         Target wird von »<tt>dpkg-buildpackage</tt>« wie in <ref
         id="completebuild"> beschrieben benutzt.</p></footnote>
       </p>
      </item>
      <item>
       <p>
         <tt>binary-arch</tt>-Target: Erstellt Architektur-abhängige
         (<tt>Architecture: any</tt>) Binärpakete im übergeordneten
         Verzeichnis (erforderlich). <footnote><p>Dieses Target wird von
         »<tt>dpkg-buildpackage -B</tt>« wie in <ref id="autobuilder">
         beschrieben benutzt.</p></footnote>
       </p>
      </item>
      <item>
       <p>
         <tt>binary-indep</tt>-Target: Erstellt Architektur-unabhängige
         (<tt>Architecture: all</tt>) Binärpakete im übergeordneten
         Verzeichnis (erforderlich). <footnote><p>Dieses Target wird von
         »<tt>dpkg-buildpackage -A</tt>« benutzt.</p></footnote>
       </p>
      </item>
      <item>
       <p>
         <tt>get-orig-source</tt>-Target: Herunterladen der neuesten Version
         des Quellpakets von der ursprünglichen Website (optional).
       </p>
      </item>
     </list>
    </p>
    <p>
      Regeln, die Sie ausführen möchten, werden beim Aufruf als
      Befehlszeilenargumente angegeben (beispielsweise »<tt>./debian/rules
      build</tt>« oder »<tt>fakeroot make -f debian/rules
      binary</tt>«). Nach dem Namen des Targets können Sie weitere benötigte
      Targets, Programme oder Dateien angeben, von der die Ausführung der
      Regel abhängt. Danach folgt eine beliebige Anzahl von Befehlen,
      eingerückt mit <tt><var>TAB</var></tt>. Eine neue Regel beginnt mit
      der Deklaration eines Targets in der ersten Spalte. Leerzeilen und mit
      einem »<tt>#</tt>« (hash) beginnende Zeilen werden als Kommentare
      betrachtet und ignoriert.
    </p>
    <p>
      Sie sind jetzt wahrscheinlich verwirrt, aber nach der genaueren
      Betrachtung der Datei <file>rules</file>, die uns <prgn>dh_make</prgn>
      erstellt hat, wird alles klar werden. Sie sollten außerdem die Ausgabe
      von »<tt>info make</tt>« für weitere Informationen lesen.
    </p>
   </sect1>
   <sect1 id="defaultrules">
    <heading>
      Die vorgegebene Datei <file>rules</file>
    </heading>
    <p>
      Neuere Versionen von <prgn>dh_make</prgn> erzeugen als Vorgabe eine
      sehr einfache, doch mächtige Datei <file>rules</file>, indem sie den
      Befehl <prgn>dh</prgn> verwenden:
     <example>
 1 #!/usr/bin/make -f
 2 # -*- makefile -*-
 3 # Sample debian/rules that uses debhelper.
 4 # This file was originally written by Joey Hess and Craig Small.
 5 # As a special exception, when this file is copied by dh-make into a
 6 # dh-make output file, you may use that output file without restriction.
 7 # This special exception was added by Craig Small in version 0.37 of dh-make.
 8
 9 # Uncomment this to turn on verbose mode.
10 #export DH_VERBOSE=1
11
12 %:
13        dh $@
</example>
      (Die Zeilennummerierung habe ich hinzugefügt. In der richtigen
      <file>rules</file>-Datei sind die führenden Leerzeichen Tabulatoren.)
    </p>
    <p>
      Sie sind wahrscheinlich mit ähnlichen Zeilen wie der Zeile 1 aus
      Shell- oder Perlskripten vertraut. Sie teilt dem Betriebssystem mit,
      dass das Skript mit <file>/usr/bin/make</file> verarbeitet werden
      soll.
    </p>
    <p>
      In Zeile 10 kann der Kommentar entfernt werden, damit die Variable
      <tt>DH_VERBOSE</tt> auf 1 gesetzt wird. Dann gibt der Befehl
      <prgn>dh</prgn> aus, welche <prgn>dh_*</prgn>-Befehle vom Befehl
      <prgn>dh</prgn> ausgeführt werden. Sie können hier auch die Zeile
      »<tt>export DH_OPTIONS=-v</tt>« hinzufügen. Dann gibt jeder
      <prgn>dh_*</prgn>-Befehl aus, welche Befehle von jedem
      <prgn>dh_*</prgn>-Befehl ausgeführt werden. Das hilft Ihnen dabei, zu
      verstehen, was genau hinter den Kulissen dieser einfachen
      <file>rules</file>-Datei passiert. So können Sie Probleme besser
      finden. Das neue <prgn>dh</prgn> ist ein zentraler Bestandteil der
      <package>debhelper</package>-Werkzeuge und versteckt nichts vor Ihnen.
    </p>
    <p>
      In den Zeilen 12 und 13 wird die gesamte Arbeit erledigt. Das
      Prozentzeichen steht für ein beliebiges Target, das dann lediglich ein
      Programm aufruft, nämlich <prgn>dh</prgn> mit dem Namen des
      Targets. <footnote><p>Dies verwendet die neuen Möglichkeiten von
      <package>debhelper</package> V7. Dessen Designkonzepte werden in <url
      id="http://joey.kitenet.net/talks/debhelper/debhelper-slides.pdf"
      name="»Not Your Grandpa's Debhelper«"> erklärt, das auf der Debconf9
      vom <package>debhelper</package>-Betreuer präsentiert wurde. Unter
      <tt>lenny</tt> erzeugte <prgn>dh_make</prgn> eine wesentlich
      kompliziertere Datei <file>rules</file>, die für jedes erforderliche
      und explizit benannte Target vielen <prgn>dh_*</prgn>-Skripte
      auflistete. Dadurch wurde der Status eingefroren, der während der
      initialen Paketerstellung aktuell war. Der neue <prgn>dh</prgn>-Befehl
      ist einfacher und befreit uns von dieser Beschränkung. Sie haben mit
      den <tt>override_dh_*</tt>-Targets weiterhin die vollständige
      Kontrolle über Anpassungen. Siehe <ref id="customrules">. Es basiert
      lediglich auf dem Paket <package>debhelper</package> und verschleiert
      den Prozess des Paketbaus nicht wie das Paket
      <package>cdbs</package>.</p></footnote> Der Befehl <prgn>dh</prgn> ist
      ein Skript, das abhängig vom übergebenen Argument die entsprechenden
      Sequenzen von <prgn>dh_*</prgn>-Programmen ausführt. <footnote><p>Sie
      können überprüfen, welche Sequenzen von <prgn>dh_*</prgn>-Programmen
      für ein bestimmtes <tt><var>Target</var></tt> tatsächlich aufgerufen
      werden, indem Sie »<tt>dh --no-act <var>Target</var></tt>« oder
      »<tt>debian/rules -- '--no-act <var>Target</var>'</tt>«
      ausführen. Dadurch werden die Sequenzen nicht
      ausgeführt.</p></footnote>
     <list>
      <item>
       <p>
         »<tt>debian/rules clean</tt>« ruft »<tt>dh clean</tt>« auf, das
         wiederum das Folgende ausführt:
        <example>
dh_testdir
dh_auto_clean
dh_clean
</example>
       </p>
      </item>
      <item>
       <p>
         »<tt>debian/rules build</tt>« ruft »<tt>dh build</tt>« auf, das
         wiederum das Folgende ausführt:
        <example>
dh_testdir
dh_auto_configure
dh_auto_build
dh_auto_test
</example>
       </p>
      </item>
      <item>
       <p>
         »<tt>fakeroot debian/rules binary</tt>« ruft »<tt>fakeroot dh
         binary</tt>« auf, das wiederum das Folgende ausführt
         <footnote><p>Hier wird vorausgesetzt, dass das Paket
         <package>python-support</package> auf dem System installiert
         ist.</p></footnote>:
        <example>
dh_testroot
dh_prep
dh_installdirs
dh_auto_install
dh_install
dh_installdocs
dh_installchangelogs
dh_installexamples
dh_installman
dh_installcatalogs
dh_installcron
dh_installdebconf
dh_installemacsen
dh_installifupdown
dh_installinfo
dh_pysupport
dh_installinit
dh_installmenu
dh_installmime
dh_installmodules
dh_installlogcheck
dh_installlogrotate
dh_installpam
dh_installppp
dh_installudev
dh_installwm
dh_installxfonts
dh_bugfiles
dh_lintian
dh_gconf
dh_icons
dh_perl
dh_usrlocal
dh_link
dh_compress
dh_fixperms
dh_strip
dh_makeshlibs
dh_shlibdeps
dh_installdeb
dh_gencontrol
dh_md5sums
dh_builddeb
</example>
       </p>
      </item>
      <item>
       <p>
         »<tt>fakeroot debian/rules binary-arch</tt>« ruft »<tt>fakeroot dh
         binary-arch</tt>« auf, das wiederum dieselbe Sequenz ausführt wie
         »<tt>fakeroot dh binary</tt>«, allerdings wird an jeden Befehl die
         Option »<tt>-a</tt>« angehängt.
       </p>
      </item>
      <item>
       <p>
         »<tt>fakeroot debian/rules binary-indep</tt>« ruft »<tt>fakeroot dh
         binary-indep</tt>« auf, das wiederum fast dieselbe Sequenz ausführt
         wie »<tt>fakeroot dh binary</tt>«, allerdings wird an jeden Befehl
         die Option »<tt>-i</tt>« angehängt und die Befehle
         <prgn>dh_strip</prgn>, <prgn>dh_makeshlibs</prgn> und
         <prgn>dh_shlibdeps</prgn> weggelassen.
       </p>
      </item>
     </list>
    </p>
    <p>
      Die Funktion der <prgn>dh_*</prgn>-Befehle erschließt sich aus den
      Namen fast von selbst. <footnote><p>Für vollständige Informationen
      darüber, was all diese <prgn>dh_*</prgn>-Skripte genau machen und was
      ihre weiteren Optionen sind, lesen Sie bitte die jeweiligen
      Handbuchseiten und die Dokumentation von
      <package>debhelper</package>.</p></footnote> Es gibt einige wenige,
      die hier (stark) vereinfacht erklärt werden sollen. Dafür wird eine
      typische Build-Umgebung vorausgesetzt, basierend auf einem
      <file>Makefile</file>. <footnote><p>Diese Befehle unterstützen andere
      Build-Umgebungen wie beispielsweise <file>setup.py</file>, die durch
      das Aufrufen von »<tt>dh_auto_build --list</tt>« im Quellverzeichnis
      eines Pakets aufgelistet werden können.</p></footnote>
     <list>
      <item>
       <p>
         <prgn>dh_auto_clean</prgn> führt normalerweise das Folgende aus,
         wenn ein <file>Makefile</file> existiert und das Target
         <tt>distclean</tt> enthält. <footnote><p>Tatsächlich wird nach dem
         ersten verfügbaren Target aus der Liste <tt>distclean</tt>,
         <tt>realclean</tt> oder <tt>clean</tt> im <file>Makefile</file>
         gesucht und dieses ausgeführt.</p></footnote>
        <example>
make distclean
</example>
       </p>
      </item>
      <item>
       <p>
         <prgn>dh_auto_configure</prgn> führt normalerweise das Folgende
         aus, wenn die Datei <file>configure</file> existiert (Argumente zur
         besseren Lesbarkeit abgekürzt).
        <example>
./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var ...
</example>
       </p>
      </item>
      <item>
       <p>
         <prgn>dh_auto_build</prgn> führt normalerweise das Folgende aus, um
         das erste Target des <file>Makefile</file> auszuführen, falls
         dieses existiert.
        <example>
make
</example>
       </p>
      </item>
      <item>
       <p>
         <prgn>dh_auto_test</prgn> führt normalerweise das Folgende aus,
         wenn ein <file>Makefile</file> mit dem Target <tt>test</tt>
         existiert. <footnote><p>Tatsächlich wird nach dem ersten
         verfügbaren Target aus der Liste <tt>test</tt> oder <tt>check</tt>
         im <file>Makefile</file> gesucht und dieses
         ausgeführt.</p></footnote>
        <example>
make test
</example>
       </p>
      </item>
      <item>
       <p>
         <prgn>dh_auto_install</prgn> führt normalerweise das Folgende aus,
         wenn ein <file>Makefile</file> mit dem Target <tt>install</tt>
         existiert (Zeile zur besseren Lesbarkeit umgebrochen).
        <example>
make install \
  DESTDIR=<var>/Pfad/zum</var>/<var>Paket</var>_<var>Version</var>-<var>Revision</var>/debian/<var>Paket</var>
</example>
       </p>
      </item>
     </list>
    </p>
    <p>
      Targets, die den Befehl <prgn>fakeroot</prgn> erfordern, enthalten
      <prgn>dh_testroot</prgn>. Wenn Sie diesen Befehl benutzen und nicht
      vorgeben, »root« zu sein, wird er mit einer Fehlermeldung beendet.
    </p>
    <p>
      Das Wichtigste, was Sie über die Datei <file>rules</file> wissen
      müssen, die von <prgn>dh_make</prgn> erzeugt wurde, ist, dass sie
      lediglich ein Vorschlag ist. Sie funktioniert für die meisten Pakete,
      aber für etwas kompliziertere Pakete sollten Sie sich nicht scheuen,
      sie für Ihre Zwecke umzuschreiben. Das Einzige, was Sie nicht ändern
      dürfen, sind die Namen der Regeln, weil alle Werkzeuge diese Namen
      verwenden und sie von den Debian-Richtlinien vorgegeben sind.
    </p>
    <p>
      Obwohl »<tt>install</tt>« kein erforderliches Target ist, wird es
      unterstützt. »<tt>fakeroot dh install</tt>« verhält sich wie
      »<tt>fakeroot dh binary</tt>«, stoppt aber nach
      <prgn>dh_fixperms</prgn>.
    </p>
   </sect1>
   <sect1 id="customrules">
    <heading>
      Anpassungen der Datei <file>rules</file>
    </heading>
    <p>
      Es gibt viele Arten, die <file>rules</file>-Datei anzupassen, die den
      neuen Befehl <prgn>dh</prgn> verwendet.
    </p>
    <p>
      Der Befehl »<tt>dh $@</tt>« kann wie folgt angepasst
      werden. <footnote><p>Wenn ein Paket die Datei
      <file>/usr/share/perl5/Debian/Debhelper/Sequence/<var>eigener_name</var>.pm</file>
      installiert, können Sie dessen angepasste Funktion mittels »<tt>dh
      --with <var>eigener-name</var> $@</tt>« aktivieren.</p></footnote>
     <list>
      <item>
       <p>
         Unterstützung des Befehls <prgn>dh_pysupport</prgn> hinzufügen (Die
         beste Wahl für Python). <footnote><p>Die Benutzung des Befehls
         <prgn>dh_pysupport</prgn> wird gegenüber dem Befehl
         <prgn>dh_pycentral</prgn> bevorzugt. Verwenden Sie nicht den Befehl
         <prgn>dh_python</prgn>.</p></footnote>
        <list>
         <item>
          <p>
            Installieren Sie das Paket <package>python-support</package> in
            »<tt>Build-Depends</tt>«.
          </p>
         </item>
         <item>
          <p>
            Verwenden Sie »<tt>dh $@</tt>« wie sonst auch (Dies ist die
            Voreinstellung).
          </p>
         </item>
         <item>
          <p>
            Hiermit werden Python-Module mit dem Framework
            <package>python-support</package> bearbeitet.
          </p>
         </item>
        </list>
       </p>
      </item>
      <item>
       <p>
         Unterstützung des Befehls <prgn>dh_pycentral</prgn> hinzufügen.
        <list>
         <item>
          <p>
            Installieren Sie das Paket <package>python-central</package> in
            »<tt>Build-Depends</tt>«.
          </p>
         </item>
         <item>
          <p>
            Verwenden Sie stattdessen »<tt>dh --with python-central
            $@</tt>«.
          </p>
         </item>
         <item>
          <p>
            Hierdurch wird auch der Befehl <prgn>dh_pysupport</prgn>
            deaktiviert.
          </p>
         </item>
         <item>
          <p>
            Hiermit werden Python-Module mit dem Framework
            <package>python-central</package> bearbeitet.
          </p>
         </item>
        </list>
       </p>
      </item>
      <item>
       <p>
         Unterstützung des Befehls <prgn>dh_installtex</prgn> hinzufügen.
        <list>
         <item>
          <p>
            Installieren Sie das Paket <package>tex-common</package> in
            »<tt>Build-Depends</tt>«.
          </p>
         </item>
         <item>
          <p>
            Verwenden Sie stattdessen »<tt>dh --with tex $@</tt>«.
          </p>
         </item>
         <item>
          <p>
            Hiermit werden Type-1-Schriften, Muster für Silbentrennung oder
            Formate für TeX registriert.
          </p>
         </item>
        </list>
       </p>
      </item>
      <item>
       <p>
         Unterstützung der Befehle <prgn>dh_quilt_patch</prgn> und
         <prgn>dh_quilt_unpatch</prgn> hinzufügen.
        <list>
         <item>
          <p>
            Installieren Sie das Paket <package>quilt</package> in
            »<tt>Build-Depends</tt>«.
          </p>
         </item>
         <item>
          <p>
            Verwenden Sie stattdessen »<tt>dh --with quilt $@</tt>«.
          </p>
         </item>
         <item>
          <p>
            Hiermit werden Patches auf die ursprünglichen Quellen angewendet
            und auch wieder rückgängig gemacht. Dafür werden Dateien aus dem
            Verzeichnis <file>debian/patches</file> für das Quellpaketformat
            <tt>1.0</tt> verwendet.
          </p>
         </item>
         <item>
          <p>
            Dies wird nicht benötigt, wenn Sie das neue Quellpaketformat
            <tt>3.0 (quilt)</tt> benutzen.
          </p>
         </item>
        </list>
       </p>
      </item>
      <item>
       <p>
         Unterstützung des Befehls <prgn>dh_dkms</prgn> hinzufügen.
        <list>
         <item>
          <p>
            Installieren Sie das Paket <package>dkms</package> in
            »<tt>Build-Depends</tt>«.
          </p>
         </item>
         <item>
          <p>
            Verwenden Sie stattdessen »<tt>dh --with dkms $@</tt>«.
          </p>
         </item>
         <item>
          <p>
            Hiermit wird die korrekte Verwendung von DKMS durch das
            Kernelmodul-Paket sichergestellt.
          </p>
         </item>
        </list>
       </p>
      </item>
      <item>
       <p>
         Unterstützung der Befehle
         <prgn>dh_autotools-dev_updateconfig</prgn> und
         <prgn>dh_autotools-dev_restoreconfig</prgn> hinzufügen.
        <list>
         <item>
          <p>
            Installieren Sie das Paket <package>autotools-dev</package> in
            »<tt>Build-Depends</tt>«.
          </p>
         </item>
         <item>
          <p>
            Verwenden Sie stattdessen »<tt>dh --with autotools-dev $@</tt>«.
          </p>
         </item>
         <item>
          <p>
            Hiermit werden die Dateien <file>config.sub</file> und
            <file>config.guess</file> aktualisiert und wiederhergestellt.
          </p>
         </item>
        </list>
       </p>
      </item>
      <item>
       <p>
         Unterstützung der Befehle <prgn>dh_autoreconf</prgn> und
         <prgn>dh_autoreconf_clean</prgn> hinzufügen.
        <list>
         <item>
          <p>
            Installieren Sie das Paket <package>dh-autoreconf</package> in
            »<tt>Build-Depends</tt>«.
          </p>
         </item>
         <item>
          <p>
            Verwenden Sie stattdessen »<tt>dh --with autoreconf $@</tt>«.
          </p>
         </item>
         <item>
          <p>
            Hiermit werden die Dateien des GNU-Build-Systems aktualisiert
            und nach dem Bau wiederhergestellt.
          </p>
         </item>
        </list>
       </p>
      </item>
      <item>
       <p>
         Unterstützung der Vervollständigung in der <prgn>bash</prgn>
         hinzufügen.
        <list>
         <item>
          <p>
            Installieren Sie das Paket <package>bash-completion</package> in
            »<tt>Build-Depends</tt>«.
          </p>
         </item>
         <item>
          <p>
            Verwenden Sie stattdessen »<tt>dh --with bash-completion
            $@</tt>«.
          </p>
         </item>
         <item>
          <p>
            Hiermit wird die Vervollständigung durch <prgn>bash</prgn> unter
            Verwendung der Konfigurationsdatei in
            <file>debian/<var>Paket</var>.bash-completion</file>
            installiert.
          </p>
         </item>
        </list>
       </p>
      </item>
     </list>
    </p>
    <p>
      Bei Quellen, die die Autotools benutzen, verwenden Sie eine
      Kombination des oben genannten wie »<tt>dh --with autotools-dev --with
      autoreconf $@</tt>«, um das aktuellste GNU-Build-System zu benutzen.
    </p>
    <p>
      Viele <prgn>dh_*</prgn>-Befehle, die vom neuen <prgn>dh</prgn>-Befehl
      aufgerufen werden, können durch entsprechende Konfigurationsdateien im
      <file>debian</file>-Verzeichnis angepasst werden. Siehe <ref
      id="dother"> sowie die Handbuchseite jedes Befehls für Anpassungen
      dieser Merkmale.
    </p>
    <p>
      Einige <prgn>dh_*</prgn>-Befehle, die vom neuen <prgn>dh</prgn>-Befehl
      aufgerufen werden, erfordern beim Aufruf Argumente, benötigen
      zusätzliche Befehle oder müssen ganz ausgelassen werden. In solchen
      Fällen können Sie ein <tt>override_dh_<var>foo</var></tt>-Target mit
      der entsprechenden Regel in der Datei <file>rules</file> erstellen,
      das nur für den Befehl <prgn>dh_<var>foo</var></prgn> gilt, den Sie
      ändern wollen. Im Grunde bedeutet das nur »<em>führe stattdessen mich
      aus</em>«. <footnote><p>Wenn Sie unter <tt>Lenny</tt> das Verhalten
      eines <prgn>dh_*</prgn>-Skripts ändern wollten, mussten Sie die
      entsprechende Zeile in der Datei <file>rules</file> aufsuchen und dort
      anpassen.</p></footnote>
    </p>
    <p>
      Bitte beachten Sie, dass die <prgn>dh_auto_*</prgn>-Befehle dazu
      tendieren, mehr als das zu tun, was als (stark) vereinfachte Erklärung
      besprochen wurde, damit auch die Sonderfälle berücksichtigt
      werden. Die Verwendung eines vereinfachten äquivalenten Befehls statt
      der <prgn>dh_auto_*</prgn>-Befehle in den
      <tt>override_dh_*</tt>-Targets ist allerdings keine gute Idee, weil
      dadurch intelligente Funktionen von <package>debhelper</package>
      ausgehebelt werden können. Die einzige Ausnahme ist das Target
      <tt>override_dh_auto_clean</tt>.
    </p>
    <p>
      Wenn Sie systemweite Konfigurationsdaten für das Paket
      <package>gentoo</package> im Verzeichnis <file>/etc/gentoo</file>
      statt dem üblichen Verzeichnis <file>/etc</file> speichern wollen,
      können Sie das von <prgn>dh_auto_configure</prgn> vorgegebene Argument
      <tt>--sysconfig=/etc</tt> für den Befehl <prgn>./configure</prgn> wie
      folgt überschreiben. <footnote><p>Das Paket <package>gentoo</package>
      verwendet das GNU-Build-System, auch bekannt als die Autotools. Siehe
      <url
      id="http://de.wikipedia.org/wiki/GNU_Build_System">.</p></footnote>
     <example>
override_dh_auto_configure:
        dh_auto_configure -- --sysconfig=/etc/gentoo
</example>
    </p>
    <p>
      Die nach dem <tt>--</tt> übergebenen Argumente werden zu den
      vorgegebenen Argumenten des automatisch ausgeführten Programms
      hinzugefügt, um sie zu überschreiben. Die Benutzung des Befehls
      <prgn>dh_auto_configure</prgn> ist besser als der direkte Aufruf von
      <prgn>./configure</prgn>, weil in diesem Fall lediglich das Argument
      <tt>--sysconfig</tt> überschrieben wird und andere, sehr wohl
      beabsichtigte, Argumente für den Befehl <prgn>./configure</prgn>
      erhalten bleiben.
    </p>
    <p>
      Falls das <file>Makefile</file> der Quellen von
      <package>gentoo</package> zum Bauen explizit das Target <tt>build</tt>
      benötigt, <footnote><p><prgn>dh_auto_build</prgn> ohne Argumente führt
      das erste Target in der Datei <file>Makefile</file>
      aus.</p></footnote>, können Sie ein Target namens
      <tt>override_dh_auto_build</tt> erstellen, um dies möglich zu machen.
     <example>
override_dh_auto_build:
        dh_auto_build -- build
</example>
    </p>
    <p>
      Hiermit wird sichergestellt, dass $(MAKE) mit allen voreingestellten
      Argumenten des Befehls <prgn>dh_auto_build</prgn> ausgeführt und dabei
      das Argument <tt>build</tt> übergeben wird.
    </p>
    <p>
      Falls das <file>Makefile</file> der Quellen von
      <package>gentoo</package> zum Aufräumen für das Debianpaket explizit
      das Target <tt>packageclean</tt> benötigt statt der Targets
      <tt>distclean</tt> oder <tt>clean</tt> der Datei
      <file>Makefile</file>, können Sie ein Target namens
      <tt>override_dh_auto_clean</tt> erstellen, um dies möglich zu machen.
     <example>
override_dh_auto_clean:
        $(MAKE) packageclean
</example>
    </p>
    <p>
      Falls das <file>Makefile</file> der Quellen von
      <package>gentoo</package> das Target <tt>test</tt> enthält, das Sie im
      Paketbau-Prozess für Debian nicht ausführen wollen, können Sie ein
      leeres Target namens <tt>override_dh_auto_test</tt> erstellen, um dies
      zu übergehen.
     <example>
override_dh_auto_test:
</example>
    </p>
    <p>
      Wenn <package>gentoo</package> eine unübliche ursprüngliche
      Changelog-Datei namens <file>FIXES</file> enthält, wird diese
      standardmäßig von <prgn>dh_installchangelogs</prgn> nicht
      installiert. Der Befehl <prgn>dh_installchangelogs</prgn> braucht den
      Namen <file>FIXES</file> als Argument, um die Datei zu
      installieren. <footnote><p>Die Dateien <file>debian/changelog</file>
      und <file>debian/NEWS</file> werden immer automatisch installiert. Das
      ursprüngliche Changelog wird gesucht, indem die Dateinamen in
      Kleinbuchstaben umgewandelt werden und mit <file>changelog</file>,
      <file>changes</file>, <file>changelog.txt</file> und
      <file>changes.txt</file> verglichen werden.</p></footnote>
     <example>
override_dh_installchangelogs:
        dh_installchangelogs FIXES
</example>
    </p>
    <p>
      Wenn Sie den neuen <prgn>dh</prgn>-Befehl benutzen, wird es schwierig,
      die genauen Effekte von expliziten Targets wie den in <ref
      id="targets"> aufgelisteten zu verstehen. Eine Ausnahme stellt
      <tt>get-orig-source</tt> dar. Bitte beschränken Sie daher - soweit
      möglich - explizite Targets auf solche mit den Namen
      <tt>override_dh_*</tt> sowie vollständig davon unabhängige.
    </p>
   </sect1>
  </sect>
 </chapt>
 <chapt id="dother">
  <heading>
    Andere Dateien im Verzeichnis <file>debian</file>
  </heading>
  <p>
    Um kontrollieren zu können, was genau <package>debhelper</package>
    während des Paketbauens durchführt, erstellen Sie optionale
    Konfigurationsdateien im Verzeichnis <file>debian</file>. In diesem
    Kapitel finden Sie einen Überblick darüber, wofür die einzelnen Dateien
    benötigt werden und wie ihr jeweiliges Format aussieht. Bitte lesen Sie
    die <url id="http://www.debian.org/doc/devel-manuals#policy"
    name="Debian-Richtlinien"> und die <url
    id="http://www.debian.org/doc/devel-manuals#devref" name="Debian
    Entwickler-Referenz"> für einen Leitfaden zum Paketieren.
  </p>
  <p>
    Der Befehl <prgn>dh_make</prgn> erstellt einige Vorlagen für
    Konfigurationsdateien im Verzeichnis <file>debian</file>. Die meisten
    sind mit dem Suffix »<tt>.ex</tt>« versehen. Andere haben den Namen des
    Binärpakets als Präfix wie beispielsweise
    <tt><var>Paket</var></tt>. Schauen Sie sich alle an.
  </p>
  <p>
    Der Befehl <prgn>dh_make</prgn> erstellt für
    <package>debhelper</package> nicht alle Konfigurationsdateien. Falls Sie
    diese benötigen, müssen Sie sie mit einem Editor erstellen.
  </p>
  <p>
    Wenn Sie eine dieser Dateien verwenden möchten oder müssen, machen Sie
    bitte folgendes:
   <list>
    <item>
     <p>
       Benennen Sie die Vorlagedateien um, indem Sie das Suffix <tt>.ex</tt>
       oder <tt>.EX</tt> entfernen, falls vorhanden.
     </p>
    </item>
    <item>
     <p>
       Ändern Sie den Namen der Konfigurationsdateien und verwenden Sie den
       tatsächlichen Namen des Binärpakets statt <tt><var>Paket</var></tt>.
     </p>
    </item>
    <item>
     <p>
       Passen Sie die Inhalte der Vorlagedateien Ihren Bedürfnissen an.
     </p>
    </item>
    <item>
     <p>
       Löschen Sie Vorlagedateien, die Sie nicht benötigen.
     </p>
    </item>
    <item>
     <p>
       Passen Sie die Datei <file>control</file> an, falls notwendig (siehe
       <ref id="control">).
     </p>
    </item>
    <item>
     <p>
       Passen Sie die Datei <file>rules</file> an, falls notwendig (siehe
       <ref id="rules">).
     </p>
    </item>
   </list>
  </p>
  <p>
    Die <package>debhelper</package>-Konfigurationsdateien ohne das
    <file><var>Paket</var></file>-Präfix wie beispielsweise die Datei
    <file>install</file> beziehen sich auf das erste Binärpaket. Wenn es
    mehrere Binärpakete gibt, können die jeweiligen Konfigurationen dadurch
    zugeordnet werden, dass der Name des Pakets als Präfix vor den Namen der
    Konfigurationsdatei gestellt wird. Beispiele sind
    <file><var>Paket-1</var>.install</file>,
    <file><var>Paket-2</var>.install</file> usw.
  </p>
  <sect id="readme">
   <heading>
     Die Datei <file>README.Debian</file>
   </heading>
   <p>
     Alle zusätzlichen Details oder Unterschiede zwischen dem urspünglichen
     Paket und Ihrer Debian-Version sollten hier dokumentiert werden.
   </p>
   <p>
     <prgn>dh_make</prgn> erstellt eine Standardvorlage, die so aussieht:
    <example>
gentoo for Debian
-----------------

&lt;possible notes regarding this package - if none, delete this file&gt;

 -- Josip Rodin &lt;joy-mg@debian.org&gt;, Wed, 11 Nov 1998 21:02:14 +0100
</example>
   </p>
   <p>
     Wenn Sie nichts zu dokumentieren haben, löschen Sie diese Datei. Siehe
     <manref section="1" name="dh_installdocs">.
   </p>
  </sect>
  <sect id="compat">
   <heading>
     Die Datei <file>compat</file>
   </heading>
   <p>
     Die Datei <file>compat</file> legt den
     <package>debhelper</package>-Kompatibilitätslevel fest. Derzeit sollten
     Sie <package>debhelper</package> V7 verwenden, indem Sie folgendes
     ausführen:
    <example>
$ echo 7 > debian/compat
</example>
   </p>
  </sect>
  <sect id="conffiles">
   <heading>
     Die Datei <file>conffiles</file>
   </heading>
   <p>
     Eine der ärgerlichsten Sachen bei Software ist es, wenn Sie richtig
     viel Zeit und Mühe in die Konfiguration eines Programms investieren und
     schon das nächste Upgrade alle Ihre Änderungen zunichte macht. Debian
     löst dieses Problem, indem die Konfigurationsdateien markiert werden
     und Sie beim nächsten Paket-Upgrade gefragt werden, ob Sie Ihre alte
     Konfiguration behalten wollen oder nicht.
   </p>
   <p>
     Seit <package>debhelper</package> V3 markiert <manref section="1"
     name="dh_installdeb"> <em>automatisch</em> alle Dateien im Verzeichnis
     <file>/etc</file> als »conffiles«. Wenn Ihr Programm also nur dort
     Konfigurationsdateien besitzt, müssen Sie sie nicht in dieser Datei
     auflisten. Bei den meisten Paketarten ist der einzige Platz, wo sich
     Konfigurationsdateien befinden (und befinden sollten), unterhalb von
     <file>/etc</file>. In diesen Fällen kann diese Datei gelöscht werden.
   </p>
   <p>
     Wenn Ihr Programm Konfigurationsdateien nutzt, diese aber auch selbst
     zurückschreibt, ist es das Beste, diese nicht als »conffiles« zu
     kennzeichnen, weil sonst <prgn>dpkg</prgn> den Nutzer jedes Mal
     auffordert, Änderungen zu bestätigen.
   </p>
   <p>
     Wenn es für das Programm, das Sie paketieren, erforderlich ist, dass
     jeder Nutzer die Konfigurationsdateien im Verzeichnis <file>/etc</file>
     anpassen muss, gibt es zwei populäre Arten, diese nicht als »conffiles«
     zu markieren, um <prgn>dpkg</prgn> ruhig zu stellen.
    <list>
     <item>
      <p>
        Sie erstellen einen symbolischen Link im Verzeichnis
        <file>/etc</file>, der auf eine Datei im Verzeichnis
        <file>/var</file> zeigt. Diese kann von den <em>maintainer
        scripts</em> erzeugt werden.
      </p>
     </item>
     <item>
      <p>
        Sie erstellen eine Datei, die von den <em>maintainer scripts</em> im
        Verzeichnis <file>/etc</file> erzeugt wird.
      </p>
     </item>
    </list>
   </p>
   <p>
     Für weitere Informationen über die <em>maintainer scripts</em> siehe
     <ref id="maintscripts">.
   </p>
  </sect>
  <sect id="crond">
   <heading>
     Die Dateien <file><var>Paket</var>.cron.*</file>
   </heading>
   <p>
     Wenn Ihr Paket immer wiederkehrende Aufgaben erledigen muss, um
     ordentlich zu arbeiten, können Sie diese Datei benutzen, um das
     einzurichten. Sie können regelmäßige Aufgaben erstellen, die stündlich,
     täglich, wöchentlich oder monatlich ausgeführt werden. Alternativ kann
     auch jedes andere gewünschte Intervall verwendet werden. Die Dateinamen
     sind:
    <list>
     <item>
      <p>
        <file>cron.hourly</file> - Wird als
        <file>/etc/cron.hourly/<var>Paket</var></file> installiert:
        Ausführung einmal pro Stunde; jede Stunde.
      </p>
     </item>
     <item>
      <p>
        <file>cron.daily</file> - Wird als
        <file>/etc/cron.daily/<var>Paket</var></file> installiert:
        Ausführung einmal pro Tag; üblicherweise am frühen Morgen.
      </p>
     </item>
     <item>
      <p>
        <file>cron.weekly</file> - Wird als
        <file>/etc/cron.weekly/<var>Paket</var></file> installiert:
        Ausführung einmal pro Woche; üblicherweise ist dies Sonntags am
        frühen Morgen.
      </p>
     </item>
     <item>
      <p>
        <file>cron.monthly</file> - Wird als
        <file>/etc/cron.monthly/<var>Paket</var></file> installiert:
        Ausführung einmal pro Monat; üblicherweise ist dies am frühen Morgen
        des ersten Tages jedes Monats.
      </p>
     </item>
     <item>
      <p>
        <file>cron.d</file> - Wird als
        <file>/etc/cron.d/<var>Paket</var></file> installiert: Ausführung zu
        anderen Zeiten.
      </p>
     </item>
    </list>
   </p>
   <p>
     Das Format aller genannten Dateien ist ein Shellskript. Die einzige
     Ausnahme stellt <file><var>Paket</var>.cron.d</file> dar, das im Format
     einer <manref section="5" name="crontab"> vorliegen muss.
   </p>
   <p>
     Beachten Sie, dass dies nicht die »log-rotation« einschließt. Dafür
     lesen Sie bitte <manref section="1" name="dh_installlogrotate"> und
     <manref section="8" name="logrotate">.
   </p>
  </sect>
  <sect id="dirs">
   <heading>
     Die Datei <file>dirs</file>
   </heading>
   <p>
     In dieser Datei werden Verzeichnisse festgelegt, die wir brauchen, die
     aber von der normalen Installationsprozedur (»<tt>make install
     DESTDIR=...</tt>«, aufgerufen von »<tt>dh_auto_install</tt>«) aus
     irgendwelchen Gründen nicht automatisch erstellt werden. Dies bedeutet
     fast immer, dass es ein Problem mit dem <file>Makefile</file> gibt.
   </p>
   <p>
     Für Dateien, die in der Datei <file>install</file> aufgelistet sind,
     müssen die Verzeichnisse nicht zuerst erstellt werden. Siehe <ref
     id="install">.
   </p>
   <p>
     Am besten ist es, wenn Sie zunächst die Installation ausprobieren und
     diesen Mechanismus nur dann benutzen, wenn es dabei Probleme gibt. Es
     gibt keinen einleitenden Schrägstrich bei den Verzeichnisnamen.
   </p>
  </sect>
  <sect id="doc-base">
   <heading>
     Die Datei <file><var>paket</var>.doc-base</file>
   </heading>
   <p>
     Hat Ihr Programm außer Handbuchseiten und Info-Seiten noch andere
     Dokumentation, sollten Sie die Datei <package>doc-base</package>
     benutzen, um diese zu registrieren, damit der Benutzer sie mit
     Programmen wie <manref section="1" name="dhelp">, <manref section="1"
     name="dwww"> oder <manref section="1" name="doccentral"> finden kann.
   </p>
   <p>
     Das schließt normalerweise HTML-, PS- und PDF-Dateien ein, die sich in
     <file>/usr/share/doc/<var>Paketname</var>/</file> befinden.
   </p>
   <p>
     So sieht die doc-base-Datei <file>gentoo.doc-base</file> für das Paket
     <package>gentoo</package> aus:
    <example>
Document: gentoo
Title: Gentoo Manual
Author: Emil Brink
Abstract: This manual describes what Gentoo is, and how it can be used.
Section: File Management

Format: HTML
Index: /usr/share/doc/gentoo/html/index.html
Files: /usr/share/doc/gentoo/html/*.html
</example>
   </p>
   <p>
     Informationen über das Format dieser Datei finden Sie in <manref
     section="8" name="install-docs"> und der Anleitung von
     <package>doc-base</package> in
     <file>/usr/share/doc/doc-base/doc-base.html/</file>.
   </p>
   <p>
     Für weitere Details über das Installieren von zusätzlicher
     Dokumentation sehen Sie bitte in <ref id="destdir"> nach.
   </p>
  </sect>
  <sect id="docs">
   <heading>
     Die Datei <file>docs</file>
   </heading>
   <p>
     Diese Datei enthält die Dateinamen der Dokumentationsdateien, die
     <manref section="1" name="dh_installdocs"> für uns in das temporäre
     Verzeichnis installiert.
   </p>
   <p>
     Standardmäßig schließt das alle Dateien im obersten Verzeichnis des
     Quellcodes ein, die da heißen »<file>BUGS</file>«,
     »<file>README*</file>«, »<file>TODO</file>« usw.
   </p>
   <p>
     Für <package>gentoo</package> habe ich noch weitere Dateien
     hinzugefügt:
    <example>
BUGS
CONFIG-CHANGES
CREDITS
NEWS
README
README.gtkrc
TODO
</example>
   </p>
  </sect>
  <sect id="emacsen">
   <heading>
     Die Datei <file>emacsen-*</file>
   </heading>
   <p>
     Wenn Ihr Paket Emacs-Dateien bereitstellt, die während der Installation
     des Pakets kompiliert werden, können Sie diese Dateien dafür nutzen.
   </p>
   <p>
     Sie werden durch <manref section="1" name="dh_installemacsen"> ins
     temporäre Verzeichnis installiert.
   </p>
   <p>
     Wenn Sie dies nicht benötigen, löschen Sie die Dateien.
   </p>
  </sect>
  <sect id="examples">
   <heading>
     Die Datei <file><var>paket</var>.examples</file>
   </heading>
   <p>
     Der Befehl <manref section="1" name="dh_installexamples"> installiert
     die in dieser Datei aufgelisteten Dateien und Verzeichnisse als
     Beispieldateien.
   </p>
  </sect>
  <sect id="initd">
   <heading>
     Die Dateien <file><var>paket</var>.init</file> und
     <file><var>paket</var>.default</file>
   </heading>
   <p>
     Wenn Ihr Paket einen Daemon enthält, der beim Hochfahren des Systems
     gestartet werden muss, haben Sie offensichtlich meine anfängliche
     Empfehlung missachtet, stimmt's? :-)
   </p>
   <p>
     Die Datei <file><var>Paket</var>.init</file> wird als Skript
     <file>/etc/init.d/<var>Paket</var></file> installiert. Die Vorlage mit
     einem sehr allgemeinen Grundgerüst wird als <file>init.d.ex</file> vom
     Befehl <prgn>dh_make</prgn> bereitgestellt. Sie müssen sie umbenennen
     und wahrscheinlich (viel) anpassen. Gleichzeitig müssen Sie darauf
     achten, dass die Kopfzeilen konform zum »Filesystem Hierarchy Standard«
     (siehe <file>/usr/share/doc/debian-policy/fhs/</file>) sind. Es wird
     von <manref section="1" name="dh_installinit"> in das temporäre
     Verzeichnis installiert.
   </p>
   <p>
     Die Datei <file><var>Paket</var>.default</file> wird als
     <file>/etc/default/<var>Paket</var></file> installiert. Diese Datei
     legt Voreinstellungen fest, die vom Init-Skript eingelesen
     werden. Meistens wird diese Voreinstellungsdatei dafür benutzt, das
     Starten eines Daemons zu verhindern oder Voreinstellungen für bestimmte
     Schalter oder Timeouts festzulegen. Wenn Ihr Init-Skript bestimmte
     Merkmale hat, die <em>eingestellt</em> werden können, sollten diese in
     der Voreinstellungsdatei festgelegt werden, nicht im Init-Skript.
   </p>
   <p>
     Wenn Ihr ursprüngliches Programm ein Init-Skript enthält, können Sie
     dies entweder benutzten oder ein eigenes erstellen. Wenn Sie das
     mitgelieferte init.d-Skript nicht verwenden, erstellen Sie ein neues in
     <file>debian/<var>Paket</var>.init</file>. Falls das von den
     ursprünglichen Autoren mitgelieferte Init-Skript aber gut aussieht und
     an der richtigen Stelle installiert wird, müssen Sie trotzdem die
     symbolischen Links für <file>rc*</file> erzeugen. Dafür müssen Sie
     <prgn>dh_installinit</prgn> in der Datei <file>rules</file> mit den
     folgenden Zeilen überschreiben:
    <example>
override_dh_installinit:
        dh_installinit --onlyscripts
</example>
   </p>
   <p>
     Wenn Sie das nicht benötigen, löschen Sie die Dateien.
   </p>
  </sect>
  <sect id="install">
   <heading>
     Die Datei <file>install</file>
   </heading>
   <p>
     Wenn es Dateien gibt, die in Ihr Paket installiert werden müssen, die
     aber vom Standardaufruf »<tt>make install</tt>« nicht erfasst werden,
     können Sie diese Dateinamen und Ziele in die Datei <file>install</file>
     schreiben. Sie werden dann von <manref section="1" name="dh_install">
     installiert. <footnote><p>Dies ersetzt den veralteten Befehl <manref
     section="1" name="dh_movefiles">, der durch die Datei
     <file>files</file> konfiguriert wurde.</p></footnote> Sie sollten
     zunächst überprüfen, ob es nicht ein spezielleres Werkzeug gibt, das
     verwendet werden kann. Beispielsweise sollten Dokumente in der Datei
     <file>docs</file> stehen und nicht in dieser hier.
   </p>
   <p>
     Die Datei <file>install</file> enthält pro Zeile eine zu installierende
     Datei, zunächst den Namen der Datei (relativ zum obersten Verzeichnis
     des Paketbaus), dann ein Leerzeichen und zuletzt das
     Installationsverzeichnis (relativ zum Install-Verzeichnis). Ein
     Beispiel, wo dies benutzt werden kann, ist eine Binärdatei, die
     vergessen wurde zu installieren. Die Datei <file>install</file> würde
     so aussehen:
    <example>
src/foo/mybin usr/bin
</example>
   </p>
   <p>
     Dies würde bedeuten, dass bei der Installation des Pakets eine
     Binärdatei namens <file>/usr/bin/mybin</file> erstellt wird.
   </p>
   <p>
     Alternativ kann die Datei <file>install</file> nur den Dateinamen ohne
     Installationsverzeichnis enthalten, wenn sich der relative
     Verzeichnispfad nicht ändert. Dieses Format wird üblicherweise für
     große Pakete benutzt, die das Ergebnis des Baus auf mehrere Binärpakete
     verteilen. Dafür verwenden diese
     <file><var>Paket-1</var>.install</file>,
     <file><var>Paket-2</var>.install</file> usw.
   </p>
   <p>
     Der Befehl <prgn>dh_install</prgn> fällt darauf zurück, im Verzeichnis
     <file>debian/tmp</file> nach Dateien zu suchen, wenn er sie im
     aktuellen Verzeichnis nicht findet (oder wo auch immer Sie das Programm
     mit <tt>--sourcedir</tt> angewiesen haben, zu suchen).
   </p>
  </sect>
  <sect id="info">
   <heading>
     Die Datei <file><var>paket</var>.info</file>
   </heading>
   <p>
     Wenn Ihr Paket »info«-Seiten hat, sollten Sie diese mit <manref
     section="1" name="dh_installinfo"> installieren, indem Sie sie in der
     Datei <file><var>Paket</var>.info</file> auflisten.
   </p>
  </sect>
  <sect id="lintian">
   <heading>
     Die Dateien <file>{<var>paket</var>.|source/}lintian-overrides</file>
   </heading>
   <p>
     Wenn die Richtlinien eine Ausnahme von einer Regel erlauben, erzeugt
     <package>lintian</package> eventuell eine falsche Meldung. Wenn dies
     der Fall ist, können Sie
     <file><var>Paket</var>.lintian-overrides</file> oder
     <file>source/lintian-overrides</file> benutzen, um die Meldung zu
     unterdrücken. Bitte lesen Sie
     <file>/usr/share/doc/lintian/lintian.html/index.html</file> und
     missbrauchen Sie diesen Mechanismus nicht.
   </p>
   <p>
     <file><var>Paket</var>.lintian-overrides</file> ist für das Binärpaket
     <package><var>Paket</var></package> und wird als
     <file>usr/share/lintian/overrides/<var>Paket</var></file> vom Befehl
     <prgn>dh_lintian</prgn> installiert.
   </p>
   <p>
     <file>source/lintian-overrides</file> ist für das Quellpaket. Diese
     Datei wird nicht installiert.
   </p>
  </sect>
  <sect id="manpage">
   <heading>
     Die Dateien <file>manpage.*</file>
   </heading>
   <p>
     Ihr(e) Programm(e) sollte(n) eine Handbuchseite haben. Ist keine
     vorhanden, müssen Sie sie erstellen. Der Befehl <prgn>dh_make</prgn>
     erzeugt verschiedene Vorlagen für eine Handbuchseite. Diese müssen für
     jedes Programm kopiert und bearbeitet werden, das keine eigene
     Handbuchseite mitbringt. Bitte löschen Sie alle nicht benutzten
     Vorlagen.
   </p>
   <sect1 id="manpage1">
    <heading>
      Die Datei <file>manpage.1.ex</file>
    </heading>
    <p>
      Handbuchseiten werden üblicherweise in <manref section="1"
      name="nroff"> geschrieben. Das Beispiel <file>manpage.1.ex</file> ist
      auch in <prog>nroff</prog> geschrieben. In der Handbuchseite von
      <manref section="7" name="man"> finden Sie eine kurze Erklärung, wie
      solche Dateien bearbeitet werden können.
    </p>
    <p>
      Der endgültige Name der Handbuchseite sollte den Namen des Programms,
      das dokumentiert wird, erhalten. Deshalb ändern wir den Namen von
      »<tt>manpage</tt>« nach »<tt>gentoo</tt>«. Der Dateiname muss auch
      eine »<tt>.1</tt>« als erstes Suffix erhalten, was bedeutet, dass es
      sich um eine Handbuchseite für einen Benutzerbefehl
      handelt. Vergewissern Sie sich, dass dieser Abschnitt tatsächlich
      richtig ist. Hier ist eine kurze Liste der Abschnitte für
      Handbuchseiten:
     <example>
Abschnitt |     Beschreibung     |     Anmerkungen
   1       Benutzerbefehle         Ausführbare Programme oder Skripte.
   2       Systemaufrufe           Kernelfunktionen.
   3       Bibliotheksaufrufe      Funktionen in Systembibliotheken.
   4       Spezielle Dateien       Gewöhnlich in /dev
   5       Dateiformate            z. B. das Format von /etc/passwd
   6       Spiele                  Und ähnliche Programme
   7       Makropakete             Beispielsweise man-Makros
   8       Systemadministration    Programme, die üblicherweise nur von root ausgeführt werden.
   9       Kernelroutinen          Nicht-Standardaufrufe und Interna.
</example>
    </p>
    <p>
      Also bekommt <package>gentoo</package>s Handbuchseite den Namen
      <file>gentoo.1</file>. Wenn es in den ursprünglichen Quellen keine
      Handbuchseite namens <file>gentoo.1</file> gibt, müssen Sie diese
      erstellen, indem Sie die Vorlage <file>manpage.1.ex</file> in
      <file>gentoo.1</file> umbenennen und sie bearbeiten. Dabei verwenden
      Sie die Informationen aus dem Beispiel und die Dokumentation des
      ursprünglichen Autors.
    </p>
    <p>
      Sie können auch den Befehl <prgn>help2man</prgn> benutzen, um eine
      Handbuchseite aus der Ausgabe des Programms mit den Optionen
      »<tt>--help</tt>« und »<tt>--version</tt>« zu
      erzeugen. <footnote><p>Wenn der Befehl keine <prgn>info</prgn>-Seite
      hat, aber Dateien im Verzeichnis
      <file>/usr/share/<var>Paket</var></file> enthält, sollten Sie die vom
      Befehl <prgn>help2man</prgn> erzeugte Handbuchseite manuell
      bearbeiten.</p></footnote>
    </p>
   </sect1>
   <sect1 id="manpagesgml">
    <heading>
      Die Datei <file>manpage.sgml.ex</file>
    </heading>
    <p>
      Wenn Sie es andererseits bevorzugen, in SGML anstatt
      <prog>nroff</prog> zu schreiben, können Sie die Vorlage
      <file>manpage.sgml.ex</file> benutzen. Dann müssen Sie Folgendes tun:
     <list>
      <item>
       <p>
         Benennen Sie die Datei um, beispielsweise <file>gentoo.sgml</file>.
       </p>
      </item>
      <item>
       <p>
         Installieren Sie das Paket <package>docbook-to-man</package>
       </p>
      </item>
      <item>
       <p>
         Fügen Sie <tt>docbook-to-man</tt> der Zeile <tt>Build-Depends</tt>
         in der Datei <file>control</file> hinzu
       </p>
      </item>
      <item>
       <p>
         Fügen Sie das Target <tt>override_dh_auto_build</tt> in Ihrer Datei
         <file>rules</file> hinzu:
        <example>
override_dh_auto_build:
        docbook-to-man debian/gentoo.sgml > debian/gentoo.1
        dh_auto_build
</example>
       </p>
      </item>
     </list>
    </p>
   </sect1>
   <sect1 id="manpagexml">
    <heading>
      Die Datei <file>manpage.xml.ex</file>
    </heading>
    <p>
      Wenn Sie XML gegenüber SGML bevorzugen, können Sie die Vorlage
      <tt>manpage.xml.ex</tt> benutzen. Dann müssen Sie Folgendes tun:
     <list>
      <item>
       <p>
         Benennen Sie die Datei um, beispielsweise <file>gentoo.1.xml</file>
       </p>
      </item>
      <item>
       <p>
         Installieren Sie das Paket <package>docbook-xsl</package> und einen
         XSLT-Prozessor wie <package>xsltproc</package> (empfohlen)
       </p>
      </item>
      <item>
       <p>
         Fügen Sie die Pakete <tt>docbook-xsl</tt>, <tt>docbook-xml</tt> und
         <tt>xsltproc</tt> der Zeile <tt>Build-Depends</tt> in der Datei
         <file>control</file> hinzu
       </p>
      </item>
      <item>
       <p>
         Fügen Sie das Target <tt>override_dh_auto_build</tt> in Ihrer Datei
         <file>rules</file> hinzu:
        <example>
override_dh_auto_build:
        xsltproc --nonet \
         --param make.year.ranges 1 \
         --param make.single.year.ranges 1 \
         --param man.charmap.use.subset 0 \
         -o debian/ \
 http://docbook.sourceforge.net/release/xsl/current/manpages/docbook.xsl\
        debian/gentoo.1.xml
        dh_auto_build
</example>
       </p>
      </item>
     </list>
    </p>
   </sect1>
  </sect>
  <sect id="manpages">
   <heading>
     Die Datei <file><var>Paket</var>.manpages</file>
   </heading>
   <p>
     Wenn Ihr Paket Handbuchseiten hat, sollten Sie sie mit <manref
     section="1" name="dh_installman"> installieren, indem Sie sie in den
     Dateien <file><var>Paket</var>.manpages</file> auflisten.
   </p>
   <p>
     Um die Datei <file>doc/gentoo.1</file> für das Paket
     <package>gentoo</package> als Handbuchseite zu installieren, erstellen
     Sie die Datei <file>gentoo.manpages</file> folgendermaßen:
    <example>
docs/gentoo.1
</example>
   </p>
  </sect>
  <sect id="menu">
   <heading>
     Die Datei <file>menu</file>
   </heading>
   <p>
     Benutzer des X-Window-System haben normalerweise einen Fenstermanager
     mit einem Menü, das konfiguriert werden kann, um Programme zu
     starten. Wenn sie das Debian-Paket <package>menu</package> installiert
     haben, werden Menüeinträge für die installierten Programme automatisch
     hinzugefügt.
   </p>
   <p>
     Hier ist die Standarddatei <file>menu.ex</file>, die von
     <prgn>dh_make</prgn> erstellt wurde:
    <example>
?package(gentoo):needs="X11|text|vc|wm" \
        section="Applications/see-menu-manual"\
        title="gentoo" command="/usr/bin/gentoo"
</example>
   </p>
   <p>
     Das erste Feld nach dem Doppelpunkt ist <tt>needs</tt> und bestimmt,
     welche Art der Benutzerschnittstelle das Programm braucht. Ändern Sie
     dies auf eine der aufgeführten Alternativen, beispielsweise
     <tt>text</tt> oder <tt>X11</tt>.
   </p>
   <p>
     Das nächste ist <tt>section</tt>, in welchem Menü und Untermenü der
     Eintrag später erscheinen soll. Die aktuelle Liste der Sektionen
     <footnote><p>Es gab eine große Reorganisation der Menüstruktur für
     <tt>Squeeze</tt>.</p></footnote> ist in
     <file>/usr/share/doc/debian-policy/menu-policy.html/ch2.html#s2.1</file>
     zu finden.
   </p>
   <p>
     Das Feld <tt>title</tt> enthält den Namen des Programms. Dieser kann
     mit Großbuchstaben beginnen, sollte aber kurz gehalten werden.
   </p>
   <p>
     Zuletzt das Feld <tt>command</tt>, das den Kommandoaufruf zum Starten
     des Programms enthält.
   </p>
   <p>
     Lassen Sie uns den Dateinamen in <file>menu</file> und den Menüeintrag
     wie folgt ändern:
    <example>
?package(gentoo): needs="X11" \
        section="Applications/Tools" \
        title="Gentoo" command="gentoo"
</example>
   </p>
   <p>
     Sie können noch weitere Felder wie <tt>longtitle</tt>, <tt>icon</tt>,
     <tt>hints</tt> usw. hinzufügen. Siehe <manref section="1"
     name="dh_installmenu">, <manref section="5" name="menufile">, <manref
     section="1" name="update-menus"> und
     <file>/usr/share/doc/debian-policy/menu-policy.html/</file> für mehr
     Informationen.
   </p>
  </sect>
  <sect id="news">
   <heading>
     Die Datei <file>NEWS</file>
   </heading>
   <p>
     Der Befehl <manref section="1" name="dh_installchangelogs"> installiert
     diese Datei.
   </p>
  </sect>
  <sect id="maintscripts">
   <heading>
     Die Dateien <file>{post|pre}{inst|rm}</file>
   </heading>
   <p>
     These <file>postinst</file>, <file>preinst</file>, <file>postrm</file>,
     and <file>prerm</file> files <footnote><p>Although I used Bash short
     hand expression to indicate these files as
     "<file>{post|pre}{inst|rm}</file>" here, I recommend you to use pure
     POSIX (non-Bash) shell for these <em>maintainer scripts</em> as much as
     possible for the better compatibility.</p></footnote> are called
     <em>maintainer scripts</em>. They are scripts which are put in the
     control area of the package and run by <prgn>dpkg</prgn> when your
     package is installed, upgraded or removed.
   </p>
   <p>
     As a novice maintainer, you should avoid any manual editing of
     <em>maintainer scripts</em> because they are problematic. For more
     information look in the <url
     id="http://www.debian.org/doc/debian-policy/ch-maintainerscripts.html"
     name="Debian Policy Manual, 6 'Package maintainer scripts and
     installation procedure'">, and take a look at these example files
     provided by <prgn>dh_make</prgn>.
   </p>
   <p>
     If you did not listen to me and made your custom <em>maintainer
     scripts</em> for a package, you should make sure to test them not only
     for <strong>install</strong> and <strong>upgrade</strong> but also for
     <strong>remove</strong> and <strong>purge</strong>.
   </p>
   <p>
     Upgrades to the new version should be silent and non-intrusive
     (existing users should not notice the upgrade except by discovering
     that old bugs have been fixed and there perhaps are new features).
   </p>
   <p>
     When the upgrade is necessarily intrusive (eg., config files scattered
     through various home directories with totally different structure), you
     may consider to set package to the safe default (e.g., disabled
     service) and provide proper documentations required by the policy
     (<file>README.Debian</file> and <file>NEWS.Debian</file>) as the last
     resort. Don't bother user with the <prgn>debconf</prgn> note invoked
     from these <em>maintainer scripts</em> for upgrades.
   </p>
   <p>
     The <package>ucf</package> package provides <em>conffile-like</em>
     handling infrastructure to preserve user changes for files that may not
     be labeled <em>conffiles</em> such as ones managed by the
     <em>maintainer scripts</em>. This should minimize issues associated
     with them.
   </p>
   <p>
     These <em>maintainer scripts</em> are the Debian enhancements that
     explain <strong>why people choose Debian</strong>. You must be very
     careful not to annoy them with these.
   </p>
  </sect>
  <sect id="watch">watch.ex

  <p>Mit dieser Datei können Sie <manref name="uscan" section="1">- und
  <manref name="uupdate" section="1">-Programme (aus dem Paket <package/devscripts/)
  konfigurieren. Diese sind nützlich, um die Seite zu überwachen, von der Sie
  die Original-Quellen bezogen haben.

  <p>Folgendes könnten Sie da eintragen:

  <p><example>
# watch control file for uscan
# Site             Directory  Pattern               Version  Script
ftp.obsession.se   /gentoo    gentoo-(.*)\.tar\.gz  debian   uupdate
  </example>

  <p>Hinweis: Wechseln Sie, wenn Sie die Datei einmal erstellt haben, mit
  einer bestehenden Internetverbindung in das Arbeitsverzeichnis und
  probieren Sie, "uscan" auszuführen. Und RTFM. :)

  <chapt id="build">"Bau" des Pakets

  <p>Nun sollten Sie soweit sein, das Paket zu "bauen".

  <sect id="completebuild">Kompletter Neubau

  <p>Wechseln Sie nun in das Verzeichnis des Programms und führen Sie
  das folgende Kommando aus:

  <p><example>
dpkg-buildpackage -rfakeroot
  </example>

  <p>Das wird alles für Sie erledigen. In Einzelnen:
  <list>
    <item>Aufräumen des Quell-Verzeichnisbaumes (debian/rules clean), mittels
    <prgn/fakeroot/,
    <item>Bauen des Quell-Pakets (dpkg-source -b),
    <item>Bauen des Programms (debian/rules build,)
    <item>Bauen des Binär-Pakets (debian/rules binary), mittels
    <prgn/fakeroot/,
    <item>signieren der Quell-Datei `*.dsc', mittels <prgn/gnupg/,
    <item>erstellen und signieren der Upload-Datei `.changes', mittels
    <prgn/dpkg-genchanges/ und <prgn/gnupg/.
  </list>

  <p>Sie müssen nur zweimal Ihr Passwort für den GPG-Schlüssel eingeben.

  <p>Nachdem das erledigt ist, werden Sie folgende Dateien im darüberliegenden
  Verzeichnis (<file>~/gentoo/</file>) vorfinden:

  <p><list>
    <item><em>gentoo_0.9.12.orig.tar.gz</em>

    <p>Dies ist der ursprüngliche Quellcode-Tarball, lediglich umbenannt,
    um dem Debian-Standard zu genügen.

    <item><em>gentoo_0.9.12-1.dsc</em>

    <p>Dies ist eine Zusammenfassung des Inhalts des Quellcode-Pakets. Sie
    wird aus Ihrer Datei `control' generiert und
    für das Entpacken des Quellcodes mittels <manref name="dpkg-source"
    section="1"> benötigt. Diese Datei ist mit GPG signiert, somit können
    sich die Leute vergewissern, dass sie von ihnen kommt.

    <item><em>gentoo_0.9.12-1.diff.gz</em>

    <p>Diese komprimierte Datei enthält alle Zusätze und Änderungen, die
    Sie mit dem ursprünglichen Quellcode gemacht haben, im Format, das als
    "unified diff" bekannt ist. Die Datei wird erstellt und benutzt von
    <manref name="dpkg-source" section="1">. Wenn Sie den originalen Tarball nicht
    `paketname_version.orig.tar.gz' genannt haben, wird <prgn/dpkg-source/ bei der
    Generierung der Datei `*.diff.gz' scheitern!

    <p>Wenn jemand Ihr Paket von Grund auf neu bauen will, kann er die drei
    o.g. Dateien dazu verwenden. Das Verfahren ist trivial: kopieren Sie
    einfach die drei Dateien in ein Verzeichnis und starten Sie `dpkg-source
    -x gentoo_0.9.12-1.dsc`.

    <item><em>gentoo_0.9.12-1_i386.deb</em>

    <p>Das ist Ihr fertiges Binär-Paket. Sie können es mit <prgn/dpkg/
    installieren und wieder entfernen wie jedes andere Paket auch.

    <item><em>gentoo_0.9.12-1_i386.changes</em>

    <p>Diese Datei beschreibt die Änderungen  in dieser Paket-Revision.
    Die Verwaltungsprogramme für Debians FTP-Archive benötigen diese Datei
    zur Installation der Binär- und Quellcode-Pakete ins FTP-Archiv. Sie
    wird zum Teil aus den Dateien `changelog' und `*.dsc' generiert. Diese Datei
    ist GPG-signiert, so dass man sicher sein kann, dass sie wirklich von Ihnen
    ist.

    <p>Wenn Sie weiter an dem Paket arbeiten, wird sich das Verhalten ändern und
    Sie werden neue Funktionen hinzufügen. Leute, die Ihr Paket herunterladen,
    können sich die Datei ansehen und feststellen, was sich geändert hat. Das
    Debian-Archiv-Verwaltungsprogramm wird den Inhalt dieser Datei auch an die
    debian-devel-changes Mailingliste schicken.
  </list>

  <p>Die langen Zahlenreihen in den Dateien `*.dsc' und `.changes' sind
  MD5-Prüfsummen dieser Dateien.
  Jemand, der Ihr Paket herunterlädt, kann die enthaltenen Dateien mit <manref
  name="md5sum" section="1"> testen und wenn die Zahlen nicht übereinstimmen,
  weiß er, die geprüfte Datei ist beschädigt oder manipuliert.

  <sect id="autobuilder">
   <heading>
     Autobuilder
   </heading>
   <p>
     Debian supports many <url id="http://www.debian.org/ports/"
     name="ports"> with the <url id="http://www.debian.org/devel/buildd/"
     name="autobuilder network"> running <prgn>buildd</prgn> daemons on many
     different architecture computers. Although you do not need to do this
     by yourself, you should be aware of what will happen on your
     packages. Let's look into roughly how your packages are rebuild for
     many different architectures by them. <footnote><p>The actual
     autobuilder system involves much more complicated schemes than the one
     documented here. Such details are beyond the scope of this
     document.</p></footnote>
   </p>
   <p>
     For "<tt>Architecture: any</tt>" packages, the autobuilder system
     rebuild them. It ensures to install
    <list>
     <item>
      <p>
        the <package>build-essential</package> package, and
      </p>
     </item>
     <item>
      <p>
        packages listed in the <tt>Build-Depends</tt> field (see <ref
        id="control">).
      </p>
     </item>
    </list>
   </p>
   <p>
     Then it issues the following command in the source directory:
    <example>
$ dpkg-buildpackage -B
</example>
   </p>
   <p>
     This will do everything to make architecture dependent binary packages
     on another architecture. It will:
    <list>
     <item>
      <p>
        clean the source tree ("<tt>debian/rules clean</tt>")
      </p>
     </item>
     <item>
      <p>
        build the program ("<tt>debian/rules build</tt>")
      </p>
     </item>
     <item>
      <p>
        build architecture dependent binary packages ("<tt>fakeroot
        debian/rules binary-arch</tt>")
      </p>
     </item>
     <item>
      <p>
        sign the source <file>.dsc</file> file, using <prgn>gpg</prgn>
      </p>
     </item>
     <item>
      <p>
        create and sign the upload <file>.changes</file> file, using
        <prgn>dpkg-genchanges</prgn> and <prgn>gpg</prgn>
      </p>
     </item>
    </list>
   </p>
   <p>
     This is why you see your package for other architectures.
   </p>
   <p>
     Although packages listed in the <tt>Build-Depends-indep</tt> field are
     required to be installed for the normal packaging by us (see <ref
     id="completebuild">), they are not required to be installed for the
     autobuilder system since it build only architecture dependent binary
     packages. <footnote><p>Unlike under the <package>pbuilder</package>
     package, the <prgn>chroot</prgn> environment under the
     <package>sbuild</package> package used by the autobuilder system does
     not force the minimal system and may leave many packages
     installed.</p></footnote> This difference between normal packaging and
     autobuilder situation dictates whether you record such required
     packages in the <tt>Build-Depends</tt> or <tt>Build-Depends-indep</tt>
     fields of the <file>debian/control</file> file (see <ref
     id="control">).
   </p>
  </sect>

  <sect id="quickrebuild">Schneller Neubau

  <p>Bei einem großen Paket wollen Sie bestimmt nicht alles nach jeder
  kleiner Änderung in <file>debian/rules</file> neu kompilieren. Für Testzwecke
  können Sie ein .deb erstellen, ohne alle Schritte durchzumachen, z.B.
  so:

  <p><example>
fakeroot debian/rules binary
  </example>

  <p>Wenn Sie mit Ihren Anpassungen fertig sind, vergessen Sie nicht, nach der
  kompletten Prozedur das Paket endgültig zu bauen. Sie werden Pakete, die auf
  diese Weise gebaut sind, nicht korrekt hochladen können.

  <sect id="debuild">Das Kommando <prgn>debuild</prgn>

  <p>Sie können das Paketbauen in Zukunft mit dem Kommando
  <prgn>debuild</prgn> automatisieren.
  (siehe <manref name="debuild" section="1">)

  <p>Das Kommando <prgn>debuild</prgn> kann in den Dateien
  <file>/etc/devscripts.conf</file> oder <file>~/.devscripts</file>
  benutzerbezogen angepasst werden.
  Die folgenden Einträge sind mindestens empfohlen:

  <p><example>
DEBSIGN_KEYID="Ihre_GPG_Schlüssel_ID"
DEBUILD_DPKG_BUILDPACKAGE_OPTS="-i -ICVS -I.svn"
  </example>
  Damit werden Ihre gebauten Pakete immer mit Ihrem GPG-Schlüssel signiert und
  es werden unerwünschte Dateien und Verzeichnisse im Paket verhindert.
  (Das ist auch für Sponsoren geeignet.)
  Beispielsweise ist das Säubern des Quellverzeichnisses und Neubauen des
  Pakets als Benutzer so einfach, wie:

  <p><example>
debuild clean
debuild
  </example>

  <sect id="dpatch">Das <prgn>dpatch</prgn>-System
  <p>Die einfach zu nutzenden Kommandos <prgn>dh_make</prgn> und
  <prgn>dpkg-buildpackage</prgn> erstellen eine große Datei
  <file>*.diff.gz</file>, die alle Dateien für die Paketbetreuung in
  <file>debian/</file> und Patch-Dateien für den Quellcode enthält.
  So ein Paket ist sehr mühselig zu kontrollieren und jede Änderung
  des Quellcodes ist später schwer zu verstehen. Das ist nicht so schön.
  <footnote>
  Wenn Sie noch kein Debian-Entwickler sind und Ihren Sponsor bitten, Ihr
  Paket nach einer Überprüfung hochzuladen, sollten Sie Ihr Paket so einfach
  wie möglich für ihn überprüfbar machen.
  </footnote>

  <p>Verschiedene Möglichkeiten der Betreuung von Patch-Sets wurden
  vorgeschlagen und werden in Debian verwendet. Das <prgn>dpatch</prgn>-System
  ist eines der einfachsten. Andere sind dbs, cdbs, etc.

  <p>Ein Paket, das ordentlich mit dem <prgn>dpatch</prgn>-System erstellt
  wurde, enthält die Änderungen des Quellcodes klar dokumentiert als
  Patch-Set-Dateien in <file>debian/patches/</file> und der Quellcode außerhalb
  des Verzeichnisses <file>debian/</file> bleibt unberührt. Wenn Sie Ihren
  Sponsor bitten, Ihr Paket hochzuladen, ist diese klare Trennung und
  Dokumentation Ihrer Änderungen für die zügige Überprüfung des Pakets durch
  Ihren Sponsor sehr wichtig. Der Umgang mit <prgn>dpatch</prgn> wird in
  <manref section="1" name="dpatch"> erklärt.

  <p>Wenn Ihnen jemand (einschließlich Ihnen selbst) später einen Patch
  für den Quellcode zur Verfügung stellt, ist die Anpassung des Pakets mit
  <prgn>dpatch</prgn> recht einfach:
  <list compact>
  <item>Patch anpassen, zu einem "-p1"-Patch zum Quellcode machen.
  <item>Kopfzeilen mit dem Kommando <prgn>dpatch patch-template</prgn>
  hinzufügen.
  <item>Im Verzeichnis <file>debian/patches</file> ablegen.
  <item>Den Dateinamen in die <file>debian/patches/00list</file> schreiben.
  </list>

  <p><prgn>dpatch</prgn> bietet auch die Möglichkeit, Patches durch das CPP-Macro
  architekturabhängig zu machen.

  <sect id="option-sa">Einbeziehen von <file>*.orig.tar.gz</file> beim Hochladen

  <p>Wenn Sie das Paket zum ersten Mal in das Archiv hochladen, müssen Sie die
  Original-Quellen <file>*.orig.tar.gz</file> einbeziehen. Wenn die Paketversion
  nicht eine <tt>-0</tt> oder <tt>-1</tt> als Debian-Revisionsnummer hat,
  müssen Sie dem Kommando <prgn>dpkg-buildpackage</prgn> die Option
  "<tt>-sa</tt>" mitgeben. Dem gegenüber erzwingt die Option "<tt>-sd</tt>" den
  Ausschluss der Original-Quellen <file>*.orig.tar.gz</file>.

  <chapt id="checkit">Überprüfung des Pakets auf Fehler

  <p>
  <sect id="lintians">Die Pakete <package>lintian</package>

  <p>Lassen Sie <manref name="lintian" section="1"> auf ihre
  Datei `*.changes' los; diese Programme finden viele Fehler, die beim
  Paketerstellen häufig gemacht werden. Die Aufrufe sind folgende:

  <p><example>
lintian -i gentoo_0.9.12-1_i386.changes
  </example>

  <p>Den Dateinamen ersetzen Sie durch den Namen der Datei `*.changes' Ihres
  Pakets. Erscheinen bei der Überprüfung einige Fehler, (mit E:
  anfangende Zeilen), lesen Sie die Erklärung (die N:-Zeilen),
  korrigieren Sie die Fehler und erstellen Sie das Paket neu, wie in
  <ref id="completebuild"> beschrieben wurde. Erscheinen nur Zeilen mit W: am
  Anfang, dann sind es Warnungen. Sie sollten die Ursachen berichtigen
  oder sich davon überzeugen, dass die Warnungen unbegründet sind (und
  <prgn/lintian/ zwingen, das zu akzeptieren; siehe die Dokumentation für Details).

  <p>Noch ein Tipp: Sie können <prgn/dpkg-buildpackage/ und <prgn/lintian/
  auf einmal
  ausführen, mit dem Befehl <manref name="debuild" section="1">.

  <sect id="mc">Das Programm <prgn>mc</prgn>

  <p>Sie können den Inhalt eines <file>.deb</file>-Pakets mit dem Kommando
  <manref name="dpkg-deb" section="1"> auspacken. Sie können den Inhalt eines
  Debian-Pakets mit dem Kommando <manref name="debc" section="1"> anzeigen.

  <p>Ein Dateimanager wie <manref name="mc" section="1"> kann die Arbeit
  vereinfachen, indem er Ihnen nicht nur den Inhalt eines
  <file>.deb</file>-Pakets anzeigt, sondern auch die Dateien
  <file>*.diff.gz</file> und <file>*.tar.gz</file>.

  <p>Halten Sie im Binär- und Quell-Paket Ausschau nach unnötigen oder leeren
  Dateien. Meistens wurde dieser Müll nicht richtig entfernt; passen Sie die
  Datei <file>rules</file> an, das zu tun.

  <p>Tipps:
  <list compact>
  <item>`<tt>zgrep ^+++ ../gentoo_0.9.12-1.diff.gz</tt>' zeigt Ihnen eine Liste
  Ihre Änderungen/Hinzufügungen zu den Quellcode-Dateien
  <item>`<tt>dpkg-deb -c gentoo_0.9.12-1_i386.deb</tt>' oder `<tt>debc
  gentoo_0.9.12-1_i386.changes</tt>' listet die Dateien des Binär-Pakets auf.
  </list>

  <sect id="debdiff">Das Kommando <prgn>debdiff</prgn>

  <p>Sie können mit dem Kommando <manref name="debdiff" section="1"> die
  Dateilisten in zwei Binär-Paketen vergleichen. Damit können Sie überprüfen,
  dass keine Dateien unabsichtlich verschoben oder gelöscht wurden und keine
  anderen versehentlichen Veränderungen bei der Aktualisierung des Pakets
  eingetreten sind.
  Mit dem Kommando `<tt>debdiff old-package.change new-package.change</tt>'
  können Sie einfach mehrere <file>.deb</file>-Pakete überprüfen.

  <sect id="interdiff">Das Kommando <prgn>interdiff</prgn>

  <p>Sie können mit dem Kommando <manref name="interdiff" section="1"> zwei
  Dateien <file>*.diff.gz</file> vergleichen. Damit können Sie überprüfen,
  dass keine versehentlichen Veränderungen am Quellcode bei der Aktualisierung
  des Pakets durch den Paket-Betreuer eingetreten sind.
  Rufen Sie `<tt>interdiff -z old-package.diff.gz new-package.diff.gz</tt>'
  auf.

  <sect id="debi">Das Kommando <prgn>debi</prgn>

  <p>Installieren Sie das Paket nun selbst, z.B. mit dem Kommando
  <manref name="debi" section="1"> als root. Versuchen Sie jetzt, das
  Paket auf anderen Rechnern zu installieren und das Programm laufen zu
  lassen, achten Sie dabei auf Warnungen und Fehlermeldungen während der
  Installation und Ausführung.

  <sect id="pbuilder">Das Paket <package>pbuilder</package>

  <p>Das Paket <package>pbuilder</package> ist sehr gut geeignet, die
  Build-Abhängigkeiten in einer sauberen Build-Umgebung (chroot) zu überprüfen.
  Das stellt ein problemloses Bauen des Pakets aus den Quellen auf den
  Auto-Buildern für verschiedene Architekturen sicher und verhindert einen
  schwerwiegenden FTBFS-Bug, der immer release-kritisch (RC) ist. Siehe
  <url id="&buildd-home;"> für mehr Informationen über die Debian-Auto-Builder.

  <p>Am einfachsten nutzen Sie das Paket <package>pbuilder</package> durch
  direkten Aufruf des Kommandos <prgn>pbuilder</prgn> als Benutzer root.
  Führen Sie beispielsweise folgende Kommandos in dem Verzeichnis aus, das die
  Dateien <file>*.orig.tar.gz</file>, <file>*.diff.gz</file> und
  <file>*.dsc</file> enthält, um ein Paket zu bauen.
  <example>
root # pbuilder create # if second time, pbuilder update
root # pbuilder build foo.dsc
  </example>
  Das neu gebaute Paket befindet sich unter
  <file>/var/cache/pbuilder/result/</file> und gehört root.

  <p>Das Kommando <prgn>pdebuild</prgn> ermöglicht Ihnen, das Paket
  <package>pbuilder</package> als normaler Benutzer zu nutzen. Im
  Wurzelverzeichnis des Quellcodes, die Datei <file>*.orig.tar.gz</file>
  liegt im übergeordneten Verzeichnis, führen Sie folgende Kommandos aus:
  <example>
$ sudo pbuilder create # if second time, sudo pbuilder update
$ pdebuild
  </example>
  Das neu gebaute Paket befindet sich unter
  <file>/var/cache/pbuilder/result/</file> und gehört nicht root.
  <footnote>
  Sie sollten eventuell Ihr System anpassen, indem Sie das Verzeichnis
  <file>/var/cache/pbuilder/result/</file> für die Benutzer schreibbar machen
  und in der Datei <file>~/.pbuilderrc</file> oder <file>/etc/pbuilderrc</file>
  Folgendes hinzufügen:
  <example>
AUTO_DEBSIGN=yes
  </example>
  Damit können Sie die erzeugten Pakete mit Ihrem geheimen GPG-Schlüssel unter
  <file>~/.gnupg/</file> signieren. Da sich das Paket
  <package>pbuilder</package> in ständiger Entwicklung befindet, sollten Sie
  die aktuellen Einstellmöglichkeiten in der letzten offiziellen Dokumentation
  nachschlagen.
  </footnote>
  <p>Wenn Sie in eine zusätzliche APT-Quelle hinzufügen wollen, die vom Paket
  <package>pbuilder</package> benutzt werden soll, setzen Sie
  <tt>OTHERMIRROR</tt> in der Datei <file>~/.pbuilderrc</file> oder
  <file>/etc/pbuilderrc</file> und starten (für Sarge):
  <example>
$ sudo pbuilder update --distribution sarge --override-config
  </example>
  Die Option <tt>--override-config</tt> muss mitgegeben werden, um die
  APT-Quelle in der chroot-Umgebung zu aktualisieren.

  <p>Siehe <url id="&pbuilder-home;">, <manref section="1" name="pdebuild">,
  <manref section="5" name="pbuilderrc"> und
  <manref section="8" name="pbuilder">.


  <chapt id="upload">Hochladen des Pakets

  <p>Nun, nachdem Sie das Paket ausreichend getestet haben, können Sie
  sich als neuer Debian-Entwickler bewerben, der sog. "Debian new maintainer
  application process", näher beschrieben unter
  <url id="http://www.debian.org/devel/join/newmaint">, beginnt.

  <sect id="upload-debian">Hochladen in das Debian-Archiv

  <p>Wenn Sie dann offizieller Entwickler geworden sind, werden Sie das Paket
  in das Debian-Archiv hochladen wollen. Sie können das per Hand erledigen,
  aber es ist einfacher, das mit den bereitgestellten Werkzeugen wie
  <manref name="dupload" section="1"> oder <manref name="dput"
  section="1"> zu automatisieren.
  Hier wird die Handhabung von <prgn/dupload/ beschrieben.

  <p>Zunächst müssen Sie <prgn/dupload/'s Konfigurationsdatei erstellen.
  Sie können entweder die systemweite Datei
  <file>/etc/dupload.conf</file> verändern oder Sie nehmen in Ihrer
  eigenen Datei `<file>~/.dupload.conf</file>' die wenigen Änderungen,
  die Sie benötigen, vor. Schreiben Sie etwas wie folgendes dort hinein:

  <example>
package config;

$default_host = "anonymous-ftp-master";

$cfg{'anonymous-ftp-master'} = {
      fqdn => "ftp-master.debian.org",
      method => "ftp",
      incoming => "/pub/UploadQueue/",
      # files pass on to dinstall on ftp-master which sends emails itself
      dinstall_runs => 1,
};

1;
  </example>

  <p>Natürlich ersetzen Sie die Angaben durch Ihre eigenen und lesen
  die Manpage für <manref name="dupload.conf" section="5">,
  um die einzelnen Optionen zu verstehen.

  <p>Die schwierigste Option ist <var>$default_host</var> -- sie legt fest,
  welche Warteschlange beim Hochladen normalerweise benutzt wird. Die
  bevorzugte Queue ist "anonymous-ftp-master", aber es ist möglich, dass Sie
  eine andere, schnellere nutzen wollen. Mehr Informationen über die
  "Upload Queues" finden Sie in der Entwickler-Referenz, Sektion
  "Uploading a package", in
  <file>&uploading;</file>

  <p>Bauen Sie eine Verbindung zu Ihrem Internet-Provider auf, und
  führen Sie dieses Kommando aus:

  <example>
dupload gentoo_0.9.12-1_i386.changes
  </example>

  <p><prgn/dupload/ vergleicht die MD5-Prüfsummen mit denen aus der
  Datei `<file>*.changes</file>' und weist Sie ggf. an, das Paket neu zu
  "bauen", wie es unter <ref id="completebuild"> bereits beschrieben wurde.

<!-- (ftp-master wird nicht mehr benutzt)
  <p>Wenn Sie zum "ftp-master" hochladen, fragt <prgn/dupload/ nach ihrem
  Passwort auf den Debian-Rechnern und lädt dann die Pakete hoch.
-->

  <p>Wenn Sie ein Problem beim Hochladen auf <url id="&ftp-uploadqueue;">
  feststellen, können Sie das selbst beheben, indem Sie mit dem Programm
  <prgn>ftp</prgn> eine GPG-signierte Datei <file>*.commands</file> nach
  <url id="&ftp-uploadqueue;"> kopieren.
  <footnote>
  Siehe <url id="&ftp-command;">. Sie können auch das Kommando
  <prgn>dcut</prgn> aus dem Paket <package>dput</package> benutzen.
  </footnote>
  Beispiel <file>hello.commands</file>:
  <example>
-----BEGIN PGP SIGNED MESSAGE-----

Uploader: Roman Hodek &lt;Roman.Hodek@informatik.uni-erlangen.de&gt;
Commands:
 rm hello_1.0-1_i386.deb
 mv hello_1.0-1.dsx hello_1.0-1.dsc

-----BEGIN PGP SIGNATURE-----
Version: 2.6.3ia

iQCVAwUBNFiQSXVhJ0HiWnvJAQG58AP+IDJVeSWmDvzMUphScg1EK0mvChgnuD7h
BRiVQubXkB2DphLJW5UUSRnjw1iuFcYwH/lFpNpl7XP95LkLX3iFza9qItw4k2/q
tvylZkmIA9jxCyv/YB6zZCbHmbvUnL473eLRoxlnYZd3JFaCZMJ86B0Ph4GFNPAf
Z4jxNrgh7Bc=
=pH94
-----END PGP SIGNATURE-----
  </example>

  <sect id="upload-private">Hochladen in ein privates Archiv

  <p>Wenn Sie ein privates Archiv unter
  <tt>URL="http://people.debian.org/~<var>account_name</var>"</tt> erstellen
  wollen, können Sie das als Entwickler durch den einfachen Aufruf von
  <tt>dupload -t <var>target_name</var></tt>. Die sollten der Datei
  <file>/etc/dupload.conf</file> folgende Zeilen hinzufügen:
  <example>
# Entwickler-Zugang
$cfg{'<var>target_name</var>'} = {
    fqdn =&gt; "people.debian.org",
    method =&gt; "scpb",
    incoming =&gt; "/home/<var>account_name</var>/public_html/package/",
    # I do not need to announce
    dinstall_runs =&gt; 1,
};
$cfg{'<var>target_name</var>'}{preupload}{'changes'} = "
    echo 'mkdir -p public_html/package' | ssh people.debian.org \
         2&gt;/dev/null;
    echo 'Package directory created!'";

$cfg{'<var>target_name</var>'}{postupload}{'changes'} = "
    echo 'cd public_html/package ;
    dpkg-scanpackages . /dev/null &gt;Packages || true ;
    dpkg-scansources . /dev/null &gt;Sources || true ;
    gzip -c Packages >Packages.gz ;
    gzip -c Sources &gt;Sources.gz ' | ssh people.debian.org \
         2&gt;/dev/null;
    echo 'Package archive created!'";

  </example>
  Dabei wird das APT-Archiv durch einen entfernten
  "quick-and-dirty"-Shell-Aufruf über SSH realisiert. Die von den Programmen
  <prgn>dpkg-scanpackages</prgn> und <prgn>dpkg-scansources</prgn> benötigten
  Dateien <file>override</file> werden durch <file>/dev/null</file> ersetzt.
  Auf diese Weise können Sie auch ohne Debian-Entwickler zu sein, Ihre Pakete
  auf Ihrer privaten Internetseite bereitstellen. Sie können aber auch
  <prgn>apt-ftparchive</prgn> oder andere Skripte benutzen, um das APT-Archiv
  zu erstellen.

  <chapt id="update">Weiterentwicklung des Pakets

  <sect id="newrevision">Eine neue Debian Revision

  <p>Angenommen, es wurde ein Bug-Report (#54321) erstellt,
  und er beschreibt ein Problem, das Sie lösen können. Um eine neue
  Revision zu erstellen haben Sie folgendes zu tun:

  <list>
  <item>Lösen Sie das Problem im Quellcode (wohl selbstverständlich).

  <item>Machen Sie einen neuen Revisions-Eintrag an oberster Stelle in der
  Datei `changelog', z.B. mit `<tt>dch -i</tt>`, oder explizit mit
  `<tt>dch -v &lt;version&gt;-&lt;revision&gt;</tt>`

  <p>Tipp: Wie bekommen Sie das Datum ins richtige Format?
  Nehmen Sie <prgn/822-date/ oder <prgn/date/ mit der Option "-R".

  <item>Fügen Sie eine kleine Beschreibung des Bugs und der Lösung dem
  Eintrag hinzu, gefolgt von: "Closes: #54321". Auf diese Weise wird der
  Bug-Report von der Verwaltungssoftware "automagisch" geschlossen, sobald
  das Paket ins Debian-Archiv übernommen wurde.

  <item>Wiederholen Sie die Schritte aus <ref id="completebuild">, <ref
  id="checkit">, und <ref id="upload">. Der einzige Unterschied ist
  jetzt nur, dass der Original-Quellcode nicht mehr hochgeladen wird, da
  das Tar-Archiv nicht mehr geändert wurde und die alte Version bereits
  auf dem Server liegt.
  </list>

  <sect id="newupstream">Ein neues Upstream-Release (einfach)

  <p>Dies ist eine andere, etwas kompliziertere Situation -
  eine neue Upstream-Version wurde freigegeben und Sie wollen diese
  natürlich gleich übernehmen. Sie können nun folgendes tun:

  <list>
  <item>Den neuen Quellcode-Tarball herunterladen (z.B. das Archiv
  `<file>gentoo-0.9.13.tar.gz</file>'), in das Verzeichnis über dem alten
  Quellcode-Verzeichnis (z.B. `<file>~/gentoo/</file>') ablegen.

  <item>Das alte Quellcode-Verzeichnis (gentoo-0.9.12) betreten und folgendes
  ausführen:

  <example>
uupdate -u gentoo-0.9.13.tar.gz
  </example>

  <p>Natürlich ersetzen Sie den Dateinamen durch den Namen des neuen
  Source-Tarballs Ihres Programms.
  <manref name="uupdate" section="1"> wird es dann richtig umbenennen und
  versuchen, alle Änderungen aus Ihrer vorherigen Datei
  `<file>*.diff.gz</file>' in die neue Version zu übernehmen. Anschließend
  wird die Datei `<file>debian/changelog</file>' aktualisiert.

  <item>Wechseln Sie in das neue Verzeichnis `<file>../gentoo-0.9.13</file>',
  Ihr neues Quellcode-Arbeitsverzeichnis, und wiederholen Sie die Schritte
  aus <ref id="completebuild">, <ref id="checkit"> und <ref id="upload">.
  </list>

  <p>Übrigens können Sie, vorausgesetzt Sie haben `debian/watch' wie in
  <ref id="watch"> aufgesetzt, durch Ausführung von <manref name="uscan"
  section="1"> "automagisch" nach aktuellem Quellcode suchen,
  ihn herunterladen und <prgn/uupdate/ durchführen.

  <sect id="newupstream-real">Ein neues Upstream-Release (in Wirklichkeit)

  <p>Wenn Sie Pakete für das Debian-Archiv vorbereiten, müssen Sie die
  erstellten Paket eingehend prüfen. Es folgt ein realistischeres Beispiel
  für dieses Vorgehen.

  <p><enumlist compact>

  <item>Überprüfen der Änderungen im Programm-Quellcode

  <list compact>

  <item>Lesen Sie die Dateien <file>changelog</file>, <file>NEWS</file> und
  andere Dokumentationen der neuen Version des Upstream-Autors.

  <item>Führen Sie `<tt>diff -urN</tt>' zwischen dem alten und neuen
  Programm-Quellcode aus, um ein Gefühl für den Umfang der Änderungen zu
  bekommen, woran aktiv gearbeitet wurde (wodurch neue Fehler auftreten könnten)
  und halten Sie Ausschau nach allem, was verdächtig erscheint.

  </list>

  <item>Bringen Sie das alte Debian-Paket auf die neue Version.

  <list compact>

  <item>Packen Sie den Quell-Tarball aus, benennen Sie das Wurzelverzeichnis
  des Quellcodes in <file>&lt;Paketname&gt;-&lt;Upstream_Version&gt;/</file>
  um und wechseln Sie in dieses Verzeichnis.

  <item>Kopieren Sie den Quell-Tarball in das übergeordnete Verzeichnis und
  benennen Sie ihn in
  <file>&lt;Paketname&gt;_&lt;Upstream_Version&gt;.orig.tar.gz</file> um.

  <item>Wenden Sie auf den Quellcode der neuen Version die gleichen Änderungen
  an, wie bei der alten. Möglich ist das durch:
  <list compact>
  <item>das Kommando `<tt>zcat
  <var>/Pfad/zu/</var>&lt;Paketname&gt;_&lt;alte-Version&gt;.diff.gz |
  patch -p1</tt>',
  <item>das Kommando `<prgn>uupdate</prgn>',
  <item>das Kommando `<tt>svn merge</tt>', wenn Sie den Quellcode in einem
  Subversion-Repository verwalten oder
  <item>einfaches Kopieren des Verzeichnisses <file>debian/</file> aus dem
  alten Paketverzeichnis, wenn es mit <package>dpatch</package> erstellt wurde.
  </list>

  <item>Behalten Sie die alten Changelog-Einträge (sollte klar sein, aber es
  kam schon vor ...)

  <item>Die neue Paketversion besteht aus der Upstream-Release-Version,
  erweitert um eine <tt>-1</tt> als Debian-Revisionsnummer, z.B.
  `<tt>0.9.13-1</tt>'.

  <item>Fügen Sie einen Changelog-Eintrag mit "New upstream release" für
  diese neue Version oben in die Datei <file>debian/changelog</file> ein,
  z.B.: mit dem Aufruf `<tt>dch -v 0.9.13-1</tt>'.

  <item>Beschreiben Sie kurz die Änderungen <em>im</em> neuen Upstream-Release,
  die gemeldete Fehler beheben und schließen Sie diese Fehler im Changelog.

  <item>Beschreiben Sie kurz die Änderungen <em>am</em> neuen Upstream-Release,
  die Sie als Betreuer vorgenommen haben und die gemeldete Fehler beheben;
  schließen Sie diese Fehler im Changelog.

  <item>Wenn das Patchen/Zusammenführen nicht problemlos abläuft, untersuchen
  Sie die Fehler, um zu sehen, was schief geht (Hinweise geben die Dateien
  <file>*.rej</file>). Meistens stellt sich heraus, dass ein Patch, den Sie
  auf den Quellcode anwenden wollen, schon durch den Upstream-Autor in den
  Quellcode integriert wurde und der Patch nicht mehr gebraucht wird.

  <item>Die Aktualisierung des Pakets beim Benutzer sollte still und
  unauffällig ablaufen (bestehende Benutzer sollten von der Aktualisierung
  nichts mitbekommen, außer der Feststellung, dass alte Fehler behoben wurden
  oder vielleicht neue Funktionen vorhanden sind).
  <footnote>
  Bitte sorgen Sie dafür, dass Ihr Paket durch wohldurchdachtes
  <prgn>postinst</prgn> etc. die Konfigurationsdateien ordentlich aktualisiert,
  damit <strong>nichts</strong> geschieht, was der Benutzer nicht will! Das
  sind die Verbesserungen, die erklären, <strong>warum</strong> sich Leute
  für Debian entscheiden.

  <p>Wenn es nötig ist, die Aktualisierung auffällig ablaufen zu lassen
  (z.B. Konfigurationsdateien sind in verschiedenen Home-Verzeichnissen mit
  völlig unterschiedlicher Struktur verstreut), sollten Sie als letzte
  Möglichkeit das Paket in einen sicheren Standardmodus bringen (z.B. den Dienst
  abschalten) und eine ordentliche Dokumentation gemäß der Policy
  (<file>README.Debian</file> und <file>NEWS.Debian</file>) bereitstellen.
  Aber nicht den Admin mit einer debconf-Meldung belästigen.
  </footnote>

  <item>Wenn Sie aus irgendeinem Grund gelöschte debhelper-Template-Dateien
  wieder haben wollen, können Sie <prgn>dh_make</prgn> mit der Option
  <tt>-o</tt> nocheinmal im schon "debianisierten" Verzeichnis aufrufen und dann
  entsprechend ändern.

  <item>Vorhandene Änderungen für Debian müssen nochmals überprüft werden;
  entfernen Sie Sachen, die der Upstream-Autor schon eingebaut hat (in welcher
  Form auch immer) und behalten Sie Sachen, die noch nicht eingebaut sind, außer
  es gibt zwingende Gründe dagegen.

  <item>Wenn Sie Änderungen beim Bauen des Pakets vornehmen (hoffentlich haben
  Sie es gleich am Anfang gemerkt und die Dateien <file>debian/rules</file> und
  <file>debian/control</file> für die Build-Abhängigkeiten wenn nötig angepasst.

  </list>

  <item>Bauen Sie das neue Paket, wie in <ref id="debuild"> oder
  <ref id="pbuilder"> beschrieben. Die Nutzung von
  <package>pbuilder</package> ist wünschenswert.

  <item>Überprüfen, dass neue Pakete richtig gebaut werden.

  <list compact>

  <item>Verfahren Sie wie in <ref id="checkit">.

  <item>Weiter mit <ref id="upgrading">.

  <item>Überprüfen Sie erneut, ob Fehler behoben wurden, die im
  <url name="Debian Bug Tracking System (BTS)"
  id="http://www.debian.org/Bugs/"> noch offen sind.

  <item>Überprüfen Sie den Inhalt der Datei <file>*.changes</file>, damit Sie
  zur richtigen Distribution hochladen, die zutreffenden Fehlerbehebungen
  im Feld `Closes:' aufgelistet sind, die Felder `Maintainer:' und `Changed-By:'
  übereinstimmen, die Dateien GPG-signiert sind etc.

  </list>

  <item>Wenn Sie während der Arbeit an dem Paket irgendetwas an der Paketierung
  ändern, gehen Sie zu Punkt 2 bis es passt.

  <item>Wenn Sie einen Sponsor hochladen lassen, weisen Sie auf alle speziellen
  Optionen hin, die beim Bauen des Pakets angegeben werden müssen (z.B.
  '<tt>dpkg-buildpackage -sa -v ...</tt>') hin und informieren Sie Ihren Sponsor
  darüber, damit er oder sie das Paket richtig baut.

  <item>Wenn Sie selbst hochladen, machen Sie mit <ref id="upload"> weiter.
  </enumlist>

  <sect id="orig-tar">Die Datei <file>*.orig.tar.gz</file>

  <p>Wenn Sie versuchen, ein Paket nur aus dem neuen entpackten Quellcode mit
  dem Verzeichnis <file>debian/</file> und ohne die Datei
  <file>*.orig.tar.gz</file> im übergeordneten Verzeichnis zu bauen, werden Sie
  unabsichtlich ein Nativ-Quellpaket erstellen, das keine Datei
  <file>*.diff.gz</file> enthält. Diese Art von Paketen sollte nur für
  Debian-spezifische Pakete verwendet werden, die für andere Distributionen
  nicht nützlich sind.
  <footnote>
  Einige Leute lehnen das sogar für Debian-spezifische Pakete ab und finden es
  besser, den Inhalt des Verzeichnisses <file>debian/</file> in die Datei
  <file>*.diff.gz</file> zu packen, als in die Datei <file>*.orig.tar.gz</file>.
  </footnote>

  <p>Um kein Nativ-Quellpaket zu erstellen, sondern eins, das die Dateien
  <file>*.orig.tar.gz</file> und <file>*.diff.gz</file> enthält, müssen Sie
  den Quellcode-Tarball selbst in das übergeordnete Verzeichnis kopieren und
  seinen Namen in
  <file>&lt;Paketname&gt;_&lt;Upstream_Version&gt;.orig.tar.gz</file> ändern,
  wie es das Kommando <prgn>dh_make</prgn> in <ref id="dh_make"> macht.

  <sect id="cvs-buildpackage">Das Kommando <prgn>cvs-buildpackage</prgn> und
  ähnliche

  <p>Sie sollten überlegen, ein Versionskontrollsystem für die Verwaltung der
  Paketierungsdateien einzusetzen. Es gibt verschiedene Wrapper-Skripte, die
  auf die Verwendung mit den populärsten angepasst sind.
  <p><list compact>
  <item>CVS
  <list compact>
  <item><package>cvs-buildpackage</package>
  </list>
  <item>Subversion
  <list compact>
  <item><package>svn-buildpackage</package>
  </list>
  <item>Arch (tla)
  <list compact>
  <item><package>tla-buildpackage</package>
  <item><package>arch-buildpackage</package>
  </list>
  </list>

  <p>Diese Kommandos automatisieren auch das Paketieren neuer Upstream-Releases.

  <sect id="upgrading">Überprüfen des Upgrades

  <p>Wenn Sie eine neue Version Ihres Pakets gebaut haben, sollten Sie
  folgende Schritte ausführen, um sicher zu stellen, dass Ihr Paket
  problemlos aktualisiert werden kann:
  <list>
    <item>Upgrade von der vorherigen Version
    <item>Downgrade zurück und dann löschen,
    <item>Installation des neuen Pakets (A.d.Ü.: ohne, dass
    eine vorherige  Version installiert ist),
    <item>Deinstallation, erneute Installation,
    <item>dann ein "Purge".
  </list>

  <p>Wenn das Paket nicht triviale pre/post/inst/rm-Skripte enthält, testen Sie
  unbedingt deren Verhalten während einer Aktualisierung.

  <p>Wenn Ihr Paket in einer früheren Version schon in Debian integriert
  ist, vergessen Sie nicht, auch gegen diese Version zu testen, weil viele
  Leute die Version aus dem letzten Debian-Release upgraden werden.

  </book>

</debiandoc>
