<!doctype debiandoc system>

<debiandoc>

 <book>

  <titlepag>

   <title>Anleitung für zukünftige Debian-Maintainer</title>

   <author>Josip Rodin <email/jrodin@jagor.srce.hr/
   </author>

   <author>Übersetzer: Eduard Bloch <email/edi@ka.linux.de/
   </author>

   <version>Version 1.0.2, 10. Juni 2001.</version>

   <copyright>
   <copyrightsummary>Copyright &copy; 1998-2001 Josip Rodin.</copyrightsummary>

   <p>Dieses Dokument darf gemäß der GNU General Public License (Version 2 oder höher) verwendet werden. 
   <p>Diesem Dokument liegen die Beispiele der folgenden zwei Dokumente zugrunde:

   <p>Making a Debian Package (AKA the Debmake Manual), copyright &copy;
   1997 Jaldhar Vyas <email/jaldhar@debian.org/.

   <p>The New-Maintainer's Debian Packaging Howto, copyright &copy; 1997
   Will Lowe <email/lowe@debian.org/.
   </copyright>
  </titlepag>
  
   <toc sect>

   <chapt id=trans>Zur dieser Übersetzung...
   
   <sect id="Vorwort">Vorwort
   <p>Anmerkung des Übersetzers:
   Ich habe bei dieser Übersetzung versucht, mich so eng wie möglich an
   das englischsprachige Original zu halten. Dennoch musste ich an
   vielen Stellen Änderungen vornehmen, damit Zusammenhänge verständlich
   bleiben; es kann deswegen sinnvoll sein, bei Unklarheiten das
   Original oder die genannten Referenzdokumente zu lesen. Meine
   eigenen Ergänzungen und Kommentare sind mit A.d.Ü. gekennzeichnet.
   Leider können viele englisch Begriffe nicht sinnvoll übersetzt
   werden; in solchen Fällen habe ich versucht, sie so gut wie möglich
   einzudeutschen. Im Anhang finden Sie einen ein Glossar, der die
   Bedeutung der die einzelnen Begriffe näher erläutert. Weiterhin
   übernehme ich keine Verantwortung für Fehler und dadurch verursachte
   Schäden. Verbesserungen sind jederzeit willkommen.
   
  <sect id="gloss">Mini-Glossar
  <p>

  <list>
  <item><em>Feature</em>: Eigenschaft, eine spezielle Funktion.
  <item><em>rtfm</em>:  "read the fucking manual" - "lies das verdammte Handbuch",
  eine Aufforderung, die zugehörige Dokumentation zu lesen.
  <item><em>Maintainer</em>: der zuständige Entwickler eines Softwarepakets. Der
  M. "wartet" seine Pakete, korrigiert Bugs usw.
  <item><em>Policy</em>, auch <em>"Policy Manual"</em>: eine Sammlung der Vorschriften, an
  die sich alle Debian-Entwickler halten müssen. Siehe....
  <item><em>Bug</em>: Ein Software-Fehler, meist ein Programmierfehler.
  <item><em>Manpage</em> oder <em>Man-Seite</em> bzw.
  <em>Manual-Seite</em>: "Bedienungsanleitung" eines Programms,
  gespeichert in einer gleichnamigen Datei (plus Erweiterung nach
  Kategorie). Siehe Handbuch, man(1) und die Verweise dort..
  <item><em>Upstream, Upstream Author</em>: der eigentliche Autor der
  Software, meist ausserhalb der Distribution.
  </list>

  <chapt id="start">Einstieg auf die "richtige Art"

  <p>Dieses Dokument versucht, einem typischen Debian-Benutzer (und
  einem Möchtegern-Entwickler) in einer verständlichen Sprache die
  Technik der Paketerstellung für Debian GNU/Linux beizubringen,
  begleitet von funktionierenden Beispielen. Ein alter Römer hat mal
  gesagt:
  <em>Longum
  iter est per preaecepta, breve et efficax per exempla!</em> 
  (Es ist ein langer Weg mit Regeln, aber ein kurzer und effizienter mit
  Beispielen).

  <p>Eines der Dinge, die Debian zu einer hervorragender Distribution
  machen, ist das Paket-System. Auch wenn es inzwischen massenhaft
  Linux-Software im Debian-Format vorhanden ist, muss man manchmal auch
  Software installieren, die es eben nicht als ".deb" gibt. Sie fragen
  sich vermutlich, wie man eigene Pakete erstellt, und vielleicht
  meinen Sie,  es sei eine komplizierte Aufgabe. Nun, wenn sie ein
  blutiger Linux-Neuling sind, dann ist es wirklich hart, aber als
  Anfänger würden Sie dieses Dokument jetzt nicht lesen. :-)
  Sie sollten nur wenige Kenntnisse über die Unix-Programmierung
  mitbringen, aber Sie brauchen ganz sicher kein Guru zu sein.

  <p>Aktuelle Versionen dieses Dokuments sollten immer über
  <url name="http://www.debian.org/doc/maint-guide"
  id="http://www.debian.org/doc/maint-guide">  oder in dem
  `maint-guide'-Paket zu finden sein.

  <sect id="needprogs">Benötigte Programme

  <p>Bevor Sie loslegen können, müssen Sie sicherstellen,
  daß einige zusätzliche Pakete richtig installiert sind, die
  für die Entwicklung benötigt werden. Beachten Sie, dass die
  Liste keine Pakete enthält, die als `essential' oder `required'
  markiert sind - wir gehen aber davon aus, daß Sie diese Pakete
  schon installiert haben.

  <P>Dieses Dokument entstand noch als die Slink-Distribution (2.1)
  die stabile Version war, und Potato (2.2) gerade entwickelt wurde - deswegen
  sind die die meisten aufgeführten Pakete aus `Potato'.
  
  <P>Die folgenden Pakete kommen mit der Standard-Installation von
  Debian 2.1, also werden Sie sie vermuttlich schon haben (und
  zusätzliche Pakete, von den sie abhängen). Sie können
  es dennoch überprüfen, z.B. mit `dpkg -s &lt;package&gt;`.

  <list>
  <item><em>binutils</em> - diese Programme werden zum Assemblieren und
  Linken der Objekt-Dateien benötigt - den Stoff, aus dem die
  Programme sind. (siehe `info binutils')

  <item><em>cpp</em> - der C-Präprozessor. (siehe <manref name="cpp" section="1">)

  <item><em>cpio</em> - das ist ein Archivierungsprogramm wie tar oder zip. (siehe
  <manref name="cpio" section="1">)

  <item><em>dpkg-dev</em> - dieses Paket enthält die Tools, die zum
  Entpacken, Erstellen und dem Hochladen der Quell-Pakete benötigt
  werden. (siehe <manref name="dpkg-source" section="1">)

  <item><em>file</em> - dieses handliche Programm kann den Typ einer
  Datei feststellen. (siehe <manref name="file" section="1">)

  <item><em>gcc</em> - der GNU-C-Compiler. Die meisten Linux-Programme
  sind in C geschrieben. Ist ihr Programm in einer anderen Sprache
  geschrieben, z.B. C++, Fortran, Pascal, sollten Sie g++, g77, gpc oder
  einen anderen benötigten Compiler installieren.  (siehe <manref
  name="gcc" section="1">, <manref name="g++" section="1">, <manref
  name="g77" section="1">, <manref name="gpc" section="1">)

  <item><em>libc6-dev</em> - die C-Bibliotheken und Header-Dateien, die
  gcc zum Linken und Erstellen von Objekt-Dateien benötigt. Auch
  wenn einige Programme immer noch libc5 empfehlen/benutzen, sollten Sie
  die neuere Version verwenden (libc6). (siehe `info libc')

  <item><em>make</em> - normallerweise wird ein Programm in mehreren
  Schritten erstellt. Statt wieder und wieder die selben Befehle zu
  tippen, können Sie das Ganze mit Hilfe dieses Programms und der
  sogenannten `Makefile's automatisieren. Einige Programme verwenden
  auch imake und xmkmf, beides Programme die zur Generierung von
  Makefile aus einem Satz von Makro-Funktionen dienen. Viele neue
  Programme benutzen auch configure-Skripte und Makefile-Vorlage mit
  Hilfe der Programm wie autoconf und automake, also benötigen Sie
  diese wahrscheinlich auch.  (siehe `info make`, <manref name="imake"
  section="1">, <manref name="xmkmf" section="1">, <manref
  name="autoconf" section="1">, <manref name="automake" section="1">)

  <item><em>patch</em> - ein sehr nützliches Programm, dass eine
  sog. diff-Datei, eine Auflistung der Unterschiede im Dateiinhalt
  (produziert mit dem Programm "diff"), auf die ursprüngliche Datei
  anwendet und daraus die neue Version erzeugt. (siehe <manref name="patch" section="1">)

  <item><em>perl5</em> - Perl ist eine der am meisten gebrauchten
  Skript-Sprachen auf heutigen Un*x-Systemen, oft betrachtet als "Unix'
  Schweizer Offizierskettensäge".
  (siehe <manref name="perl" section="1">)
  </list>

  <p>Aus der `devel'-Sektion der Distribution sollten Sie vielleicht
  folgendes installieren:

  <list>
  <item><em>dh-make</em> und <em>debhelper</em> - dh-make wird
  benötigt, um eine Vorlage des Beispiel-Pakets zu erstellen, und
  es benötigt einige debhelper-Tools für die Paketerstellung.
  Sie sind nicht zwingend erforderlich, aber für neue Maintainer
  <strong>sehr</strong> empfohlen. Es vereinfacht den ersten Einstieg
  sehr, ebenso die später Kontrolle.  (siehe <manref name="dh_make"
  section="1">, <manref name="debhelper" section="1">,
  /usr/share/doc/debhelper/README)

  <item><em>devscripts</em> - dieses Paket enthält einige 
  nützliche Skripte, die für die Maintainer oft sehr hilfreich sein
  können, aber nicht unbedingt zum Bauen der Pakete benötigt
  werden. (siehe /usr/share/doc/devscripts/README.gz)

  <item><em>fakeroot</em> - dieses Utility ermöglicht ihnen, die
  Identität des "root"s vorzutäuschen, was für einige
  Teile des Build-Prozesses benötigt wird. (siehe <manref
  name="fakeroot" section="1">)

  <item><em>lintian</em> - das ist Debians Paket-Prüfer, der sie
  über die üblichen Fehler nach der Paketerstellung informiert
  und die gefundenen Fehler erklärt.  (siehe <manref name="lintian"
  section="1">, /usr/share/doc/lintian/lintian.html/index.html) </list>

  <p>Und schliesslich noch diese <em>sehr wichtigen</em> Pakete in der
  doc-Sektion der Distribution:

  <list>
  <item><em>debian-policy</em> - beinhaltet die Beschreibung der
  Struktur und des Inhalts eines Archives, Texte über das Systemdesign,
  den Filesystem Hierarchy Standard, und das wichtigste (für Sie), es
  beschreibt die Anforderungen, die ein Paket erfüllen muss, um in eine
  Distribution aufgenommen zu werden.  (siehe
  /usr/share/doc/debian-policy/policy.html/index.html)

  <item><em>developers-reference</em> - für alle Fragen, die nicht
  ausschliesslich technischer Natur der Paketerstellung sind, z.B. über
  die Struktur des Archivs, wie man Pakete umbenennt, aufgibt,
  übernimmt, NMUs durchführt, Fehler verwaltet, wie und wo die Archive
  hochlädt usw.
  (siehe /usr/share/doc/developers-reference/developers-reference.html/index.html)
  </list>

  <p>Sie werden ebenfalls ein Verschlüsselungsprogramm brauchen,
  entweder PGP (die "pgp-*"-Pakete) oder GPG (das gnupg-Paket), um ihr
  Paket digital zu <em>signieren</em>. Dies ist besonders wichtig, wenn
  Sie das Paket an andere Menschen verteilen wollen (und das werden Sie
  sicher tun, wenn ihre Arbeit in die Debian-Distribution aufgenommen
  wird). Dummerweise kann aufgrund der bescheuerten U.S.-Exportgesetze
  nicht jeder diese Pakete von dem nächstliegenden Debian-FTP-Server
  beziehen. Dennoch bietet Debian diese Pakete an, und zwar über
  FTP-Server, die physisch ausserhalb von USA liegen, z.B.
  non-US.debian.org (ftp://non-us.debian.org/debian-non-US/). Auf
  "ihrem" FTP-Server befindet sich eine Datei namens README.non-US, mit
  der Sie den nächstliegenden non-US-Spiegelserver finden können.
  
  <p>Die kurzen Erklärungen oben dienen nur der
  Einführung. Bevor sie weitermachen, sollten Sie die Dokumentation
  jedes Programms durchlesen, dass Sie verwenden werden. Das mag am
  Anfang überflüssig vorkommen, aber schon bald werden Sie <em>froh</em>
  darüber sein, sich schon vorher informiert zu haben.
  
  Anmerkung: das Paket <em>debmake</em> enthält einige Programme, die
  dh-make in der Funktionalität sehr ähneln. Die Benutzung von debmake
  wird hier nicht weiterbeschrieben, die Dokumentation von debmake
  finden Sie im <url name="the Debmake manual"
  id="http://www.debian.org/~jaldhar/">.

  <sect id="otherinfo">Andere Informationen

  <p>Sie können zwei Arten von Paketen erstellen: binäre und
  Quell-Pakete. Ein Quell-Paket enthält den Code, aus dem man ein
  Programm kompilieren kann.  Ein Binär-Paket enthält das
  fertige Programm. Bringen Sie die Begriffe Quellcode und Quell-Paket
  des Programms nicht durcheinander! Lesen Sie andere Anleitungen, falls
  die Terminologie nicht klar ist.

  <p>In Debian bezeichnet der Ausdruck: `maintainer' eine Person, die
  Pakete baut, `upstream author' die Person, die das Programm eigentlich
  macht und `upstream maintainer' die Person ausserhalb von Debian, die
  zur Zeit das Programm pflegt. üblicherweise sind `upstream
  author´ und `upstream maintainer' die selbe Person, und manchmal ist
  es sogar der Maintainer selbst.  Wenn Sie also ein Programm erstellen
  und in Debian integriert sehen möchten, dann können Sie sich
  ruhig als Maintainer bewerben.

  <p>Nachdem Sie ein eigenes Paket erstellt haben (oder während Sie
  gerade dabei sind), möchten Sie vermuttlich ein offizieller
  Debian-Maintainer werden, damit ihr Paket den Weg in die nächste
  Distribution findet (wenn das Programm wirklich nützlich ist, warum
  nicht?). Dieser Prozess ist in der "Developer's Reference"
  beschrieben; bitte lesen Sie es.

  <chapt id="first">Erste Schritte

  <p>Während die Dokumentation unter <url name="Developers corner"
  id="http://www.debian.org/devel/"> nicht richtig erklärt, wo ein
  neuer Maintainer mit der Arbeit beginnen soll,  wird dieses Dokument
  jeden kleinsten Schritt beschreiben (auch möglicherweise
  irrelevante Schritte), um ihnen bei der Erstellung zu helfen damit Sie
  etwas mehr Erfahrungen sammeln, die Sie bei anderen Paketen gebrauchen
  können.

  <sect id="choose">Ein Programm wählen

  <p>Sie werden wahrscheinlich schon ein Programm ausgesucht haben, aber
  hier noch einige Hinweise für Sie als Erstmaintainer:

  <list>
  <item>überprüfen Sie, ob das Paket nicht bereits in der
  Distribution existiert. Wenn eine `stable´-Distribution verwendet
  wird, sollte man am besten ein über <url name="package search
  page" id="http://www.debian.org/distrib/packages.html"> nach dem Paket
  suchen.  [A.d.ü.: Oder von der unstable-Distribution die
  Contents-Datei zieht und nach bekannten Dateinamen durch'grep'en]

  Benutzen Sie die <strong>aktuelle</strong> `unstable'-Distribution,
  versuchen Sie es mit Kommandos wie:
  <example>
  dpkg -s program
  dpkg -l '*program*'
  </example>

  <item>Durchsuchen Sie <url name="WNPP page"
  id="http://www.debian.org/devel/wnpp/"> und die
  List-Archvie der Mailingliste debian-devel nach den Hinweisen auf die
  gleichzeitige Arbeit eines anderen Maintainers an dem selben Paket.
  Wenn es so ist, können Sie den Maintainer kontaktieren (sofern
  Sie ihm etwas mitteilen möchten). Andernfalls werden Sie
  sicherlich ein anderes Programm finden, an dem noch kein Maintainer
  arbeitet.  </item>

  <item>Das Programm <strong>muss</strong> eine Lizense haben, eine
  möglichst `frei´ nach den Richtlinien der <url name="Debian Free
  Software Guidelines"
  id="http://www.debian.org/social_contract.html#guidelines">.  Wenn sie
  diesen Richtlinien nicht entspricht, kann das Paket oft noch in die
  Sektionen `contrib' oder `non-free' der Debian-Distribution
  aufgenommen werden. Sind Sie sich über die Lizenzfragen nicht
  sicher, fragen Sie ruhig auf <email/debian-legal@lists.debian.org/.
  </item>

  <item>Das Programm sollte sicherlich <strong>nicht</strong> als
  "setuid root" laufen, oder noch besesr, es sollte für die Ausführung
  überhaupt keine setuid- oder setgid-Rechte brauchen.</item>

  <item>Das Programm sollte kein daemon sein, oder etwas was in in die
  */sbin-Verzeichnisse installiert wird.</item>

  <item>Das Programm sollte in einer binären ausführbaren Form daher
  kommen, versuchen Sie sich (noch) nicht an Bibliotheken.</item>

  <item>Es sollte gut dokumentiert sein, oder zumindest verständlich
  sein (für jedermann).</item>

  <item>Sie sollten den Autor des Programms kontaktieren und
  sicherstellen, dass er mit ihrer Aktion einverstanden ist. Es ist
  wichtig, dass man den Autor auch später über
  programmspezifische Probleme fragen kann, versuchen Sie also nicht,
  ungepflegte/aufgegebene Programme zu packen.

  <item>And last but not the least, Sie müssen wissen, wie es
  funktioniert und damit schon einige Zeit arbeiten.</item>
  </list>

  <p>Natürlich sind die aufgeführten Punkte eher Sicherheitsmassnahmen
  und sollten Sie vor tobenden Benutzern schützen, falls ihr
  setuid-Daemon irgendwo mistbaut. Wenn Sie mehr Erfahrungen im
  Paketerstellen gesammelt haben, können Sie sich auch an solchen
  Paketen versuchen, aber selbst die erfahrensten Debian-Entwickler
  fragen schon mal in der debian-devel-Mailingliste, wenn sie irgendwo
  Zweifel haben. Und die Menschen dort helfen gern.

  <p>Für weitere Fragen konsultieren Sie die `Developer's Reference´.

  <sect id="getit">Programm holen und ausprobieren
  
  <p>Als Erstes müssen Sie das Original-Paket des Programms finden und
  herunterladen. Ich nehme an, dass sie bereits die Quell-Dateien von
  der Homepage des Autors gezogen haben. Quellen der freien
  Linux-Programm kommen i.d.R. im tar/gzip-Format, mit der erweiterung
  .tar.gz, und enthalten üblicherweise ein Unterverzeichniss, genannt
  nach dem PROGRAMM-VERSION-Schema, das alle Quellcode-Dateien enthält.
  Kommt der Quellcode in einem anderen Archivtyp daher (z.B. wenn der
  Dateiname auf ".Z" oder ".zip" ender), entpacken Sie es mit den
  entsprechenden Tools oder fragen Sie in debian-menthors, wie man es
  richtig entpackt (Tip: `file archive.extension´ versuchen.)

  <p>Als Beispiel nehme ich hier das Programm namens `gentoo', ein
  X11/GTK+-Dateimanager. Das Programm ist bereits verpackt, und wurde
  wesentlich verändert seit dieser Text geschrieben wurde.

  <p>Erstellen Sie ein Verzeichniss in ihrem Heimverzeichniss, z.B.
  'debian' oder 'deb' oder irgendwas anderes, was für Sie geeignet
  erscheint, etwa ~/gentoo/ in diesem Fall. Kopieren sie das
  heruntergeladene Archiv dorthin, und entpacken Sie es, z.B. mit 
  `tar zxvf gentoo-0.9.12.tar.gz´. Vergewissern Sie sich, dass es keine
  Fehler beim Entpacken gab, nicht mal soz. `irrelevante´ Fehler, weil
  es auf anderen Systemen Probleme geben kann, wenn andere Entpacker
  bestimmte Anomalien nicht ignorieren.

  <p>Jetzt haben Sie ein neues Unterverzeichniss, 'gentoo-0.9.12'.
  Wechseln Sie dorthin und lesen Sie die mitgelieferte Dokumentation
  <strong>komplett durch</strong>. Meist sind es die Dateien mit Namen
  nach dem Schema README*, INSTALL*, *.lsm oder *.html. Sie müssen
  eine Anleitung finden, wie man das Programm richtig übersetzt und
  installiert (meistens wird von einer Installation in /usr/local/bin
  ausgegangen, aber das wollen wir nicht. Mehr dazu später in <ref
  id="destdir">).

  <p>Der Prozess ist vom Programm zu Programm unterschiedlich, aber
  viele moderne Programme kommen mit einem `configure'-Skript, dass den
  Quellcode an die Systemumgebung anpasst. Nach dem Erfolgreien
  `konfigurieren´ mit `./configure' können die Programm mit `make´
  kompiliert werden. Einige unterstützen auch `make check´, dass
  zusätzlche Selbsttests durchführt. Die Installation in die
  Zielverzeichnisse geschieht dann mit `make install´.
  
  <p>Versuchen Sie nun, das Programm zu kompilieren und stellen Sie
  sicher, dass es einwandfrei funktioniert und nichts anderes während
  der Installation oder der Ausführung kaputt macht.

  <p>Ebenfalls kann man oft `make uninstall` ausführen, dass die
  installierten Dateien entfernt, und `make clean´ (oder besser `make
  distclean`), um im aktuellen Arbeitsverzeichniss aufzuräumen.

  <sect id="namever">Bevor man mit `dh_make' loslegt...

  <p>Sie sollten mit einem aufgeräumten oder besser frisch
  ausgepackten Quellcode-Verzeichniss anfangen.
  
  <p>Damit alles richtig funktioniert sollten Sie den ursprünglichen
  Namen in Kleinbuchstaben umwandeln. Ebenfalls sollten Sie den Namen zu
  &lt;Paketname&gt;-&lt;Version&gt; verändern.
  
  <p>Wenn der Programmname aus mehr als einem Wort besteht, machen Sie
  ein Wort oder eine Abkürzung verwenden. Zum Beispiel könnte man
  "John's little editor for X" in johnledx, oder jle4x umbennen, oder
  wie auch immer, solange die Länge in einem vernünftigen Rahmen von
  etwa 20 Zeichen bleibt.
  
  <p>Überprüfen Sie auch die exakte Versionsnummer des Programms, die
  als Versionsnummer des Pakets verwendet wird. Wenn dieses Stück
  Software keine Nummerierung nach dem Schema X.Y.Z, sondern nach dem
  Datum verwendet, können Sie dieses Datum mit davorstehenden "0.0"
  verwenden ("0.0" für den Fall, das sich der `upstream author´ dazu
  entschliesst, eine zukünftige Version mit 1.0 nummeriert). In diesem
  Fall bekommt ein Abzug vom 19. Dezember 1998 eine Versionsnummer wie
  0.0.19981219. Einige Programme haben gar keine Versionsnummeriurung -
  in diesem Fall sollten Sie den `upstream maintainer´ kontaktieren und
  eine eindeutige Methode ausarbeiten.
  
  <sect id="dh_make">`dh_make' ausführen

  <p>Wechseln Sie in das Quell-Verzeichniss des Programms und führen Sie
  folgendes aus:

  <p><example>
  dh_make -e your.maintainer@address -f ../gentoo-0.9.12.tar.gz
  </example>

  <p>Natürlich ersetzen Sie "your.maintainer@address" mit ihren
  eigenen E-Mail-Adresse für den Eintrag in changelog sowie andere
  Dateien, ebenfalls verwenden Sie den Dateinamen ihres Quell-Archivs.
  (Weitere Details in <manref name="dh_make" section="1">).
 
  <p>Es werden einige Informationen angezeigt und Sie werden gefragt,
  welcher Art das Paket sein wird. Gentoo ist ein "single binary
  package" - es wird eine Binärdatei und ein .deb-Paket erstellt,
  also wählen wir die erste Option mit der `s´-Taste,
  überprüfen nochmal die Informationen und bestätigen mit
  &lt;enter&gt;. Als einem beginnenden Maintainer wird es davon
  abgeraten, mehrere Binär-Pakete (`multiple binary packages´) oder
  Bibliotheken (`libraries´) zu erstellen, wie es schon vorher
  erwähnt wurde, deswegen gehen ich hier nicht weiter darauf ein.

  <p>Beachten Sie, dass dh_make nur <strong>ein Mal</strong> ausgeführt
  wird und bei späteren Aufrufen nicht sauber funktionieren wird, wenn
  es im "debianisierten" Verzeichniss ausgeführt wird. Das bedeutet
  auch, dass Sie bei späteren Updates mit neueren Programm-Versionen
  anders vorgehen müssen, mehr dazu später in <ref id="update">.

  <chapt id="modify">Quellcode modifizieren

  <p>Normallerweise installieren sich die Programme in Verzeichnissen
  unterhalb von /usr/local. Da bei Debian-Paketen dieses Verzeichniss
  nicht verwendet werden darf und ausschliesslich zur Verfügung des
  lokalen Administrators (oder der User) steht, müssen Sie einen Blick
  auf den Erstellungsprozess werfen, normallerweise beginnend mit dem
  Makefile. Das ist der Skript, mit dem <manref name="make" section="1">
  die Arbeit automatisiert. Weitere Details über Makefiles in <ref
  id="rules">.

  <p>Beachten Sie, daß wenn ihr Programm GNU <manref
  name="automake" section="1"> und/oder <manref name="autoconf"
  section="1"> verwendet, werden Sie die Änderungen in der Datei
  Makefile.am bzw. Makefile.in machen müssen, weil jeder Aufruf von
  automake die Datei Makefile.in mit Informationen aus Makefile.am neu
  erzeugt (und die vorhandene Maikefile.in-Datei überschreibt!),
  genau wie jeder Aufruf von ./configure mit den Daten aus Makefile.in
  die fertige Makefile-Datei erzeugt. Änderungen in Makefile.am
  erfordern einige Kenntnisse über die Funktionsweise von automake;
  mehr darüber finden Sie in der "info"-Hilfe von automake.
  Bearbeiten von Makefile.in-Dateien geht dagegen fast genauso einfach
  wie das Bearbeiten von Makefiles, man muss lediglich bei der
  Verwendung der Variablen aufpassen, d.h. Strings, die mit `@' umgeben
  sind, z.B. @CFLAGS@ oder @LN_S@; in diese werden beim
  ./configure-Aufruf die entsprechenden Werte eingesetzt.

  <p>Wir können an dieser Stelle nicht auf <EM>alle</EM> Feinheiten
  eingehen, denn es würde den Ramen dieser Anleitung sprengen, aber
  an dieser Stelle tretten auch die wenigsten Probleme auf.
  
  <sect id="destdir">Installation in ein Unterverzeichnis

  <p>Die meisten Programme installieren sich in die vorhandene
  Verzeichnisstruktur, so dass die ausführbaren Binärdateien
  irgendwo in ihrem $PATH landen und die Dokumentation an einem der
  üblichen Positionen. Sie müssen sicherstellen, dass dies
  korrekt funktioniert, anderseits muss sich das Programm auch in ein
  alternatives Verzeichniss installieren lassen, das in unserem Fall
  unterhalb des debian/-Verzeichnisses erstellt wird (normallerweise
  <tt>debian/tmp/</tt>), aus dem die Maintainer-Tools dann das Paket
  bauen werden. Alles, was dieses Unterverzeichniss enthält, wird
  später auf das System des Benutzers installiert, mit dem einzigen
  Unterschied, dass dpkg den Inhalt im Stamm-Verzeichniss auspackt.

  <p>Grundsätzlich müssen sie das Programm in debian/tmp
  installiert, dabei soll das Programm aber auch noch dann korrekt
  funktionieren, wenn es im Stamm-Verzeichniss installiert ist. Mit
  Programmen, die GNU autoconf benutzen wird es ein leichtes Spiel sein,
  weil dh_make schon die richtigen Kommandos auswählt, also
  können Sie diesen Abschnitt vermuttich überspringen. Bei
  anderen Programmen müssen Sie die entsprechenden Makefiles
  untersuchen und ggf. anpassen. (A.d.Ü.: Bei einigen Programmen
  kommt man auch um das Anpassen des Quellcodes nicht herum, wenn z.B.
  die Pfade zu best. Konfigurationsdateien fest einkompiliert werden).
  
  <p>Hier ist der relevante Abschnitt des Makefiles von gentoo:

  <p><example>
  # Where to put binary on 'make install'?
  BIN     = /usr/local/bin
  # Where to put icons on 'make install'? Note: if you change this,
  # gentoo will not find the icons as it starts up. You're going to
  # have to alter gentoo's icon path (in the config window, "Paths"
  # tab) to get it work.
  ICONS   = /usr/local/lib/gentoo/
  </example>

  <p>Bevor dieser kommt sollten Sie zwei neue Zeilen einsetzen:

  <p><example>
  # Edited for Debian GNU/Linux.
  DESTDIR =
  </example>
  Dies wird beim build-Prozess benötigt (Erklörungen kommen
  später in <ref id="rules">).

  <p>Dann legt das Makefile die Position der endgültigen Programmdatei fest, dies ändern wir zu:
  <p><example>
  # Where to put binary on 'make install'?
  BIN     = $(DESTDIR)/usr/X11R6/bin
  </example>

  <p>Sie fragen sich vielleicht, warum in dieses Verzeichniss, warum
  nicht in irgendeinen anderen? Weil Debian klar definierte Regeln hat,
  die beschreiben, wohin die Programm zu installieren sind. Diese sind
  in dem Filesystem Hierarchy Standard näher spezifiziert (siehe
  /usr/share/doc/debian-policy/fhs/).  Demnach soll die Binärdatei
  (für X11) in /usr/X11R6/bin und nicht in /usr/local/bin
  installiert sein, genau wie die Man-Seite in /usr/share/man/man1 statt
  in /usr/local/man/man1.

  <p>Danach haben wir eine etwas kompliziertere Situation. Wenn man die
  nächste Zeile entsprechend veröndert, also zu:

  <p><example>
  ICONS   = $(DESTDIR)/usr/share/gentoo/
  </example>
  (das der Policy entspricht), werden Sie wahrscheinlich die
  C-Quelltexte direkt bearbeiten müssen. (A.d.Ü.: Warum? Ganz
  einfach, weil dieser Pfad beim Kompilieren nirgendwo verwendet wird,
  müssen wir davon ausgehen, dass der Autor die Pfadangaben direkt
  einkodiert hat). Aber wie und wo soll man suchen? Man kann z.B. mit
  <p><example>
  grep -n usr/local/lib *.[ch]
  </example>
  jedes Verzeichniss durch'grep'en, das .c- und .h-Dateien enthält.
  Grep wird die Stellen aufzeigen, an den der Pfadname verwendet wurde.
  (A.d.Ü.:Meine Idee wäre eher: 
  <example>find -regex ".*\.h$\|.*\.c$"|xargs grep -n usr/local/lib | less
  </example>
  oder ähnliches). Nunmüssen Sie die entsprechenden Dateien
  bearbeiten und usr/local/lib mit den neuen Pfad ersetzen - und dabei
  aufpassen, dass Sie den restlichen Code nicht versauen. Keine Angst,
  für diese simple Aufgabe man muss nicht gleich C programmieren
  können ;)

  <p>Wenn alles erledigt ist, sollten Sie das Install-Target im Makefile
  lokalisieren (suchen Sie nach der Zeile die mit `install:' beginnt)
  und die Verweise auf die Verzeichnisse gegen die Variablen
  austauschen, die wir am Anfang definiert haben. Früher hat das
  Install-Target so ausgesehen:

  <p><example>
  # ----------------------------------------- Installation

  # You're going to have to be root to do this!
  install:        gentoo
                  install ./gentoo $(BIN)
                  install icons $(ICONS)
                  install gentoorc-example $(HOME)/.gentoorc
  </example>

  <p>Nach unseren Änderungen sieht es so aus:
  <example>
  # ----------------------------------------- Installation

  # You're going to have to be root to do this!
  install:        gentoo-target
                  install -d $(BIN) $(ICONS) $(DESTDIR)/etc
                  install ./gentoo $(BIN)
                  install -m644 icons/* $(ICONS)
                  install -m644 gentoorc-example $(DESTDIR)/etc/gentoorc
                  install -d $(DESTDIR)/usr/share/doc/gentoo/html
                  cp -a docs/* $(DESTDIR)/usr/share/doc/gentoo/html
  </example>

  <p>Einem aufmerksamem Leser wird auffallen, dass ich gentoo zu
  gentoo-target geänder habe. Das nennt man auch Bugfix ;-)

  <p>Wo sie auch immer Änderungen machen, die nicht aussliesslich
  auf Debian bezogen sind, sollten Sie diese dem Upstream-Maintainer
  zukommen lassen, damit er diese in zukünftigen Programm-Versionen
  verwenden kann. Sie brauchen dem Upstream nicht das ganze
  debian/-Verzeichniss zu schicken, sondern nur die einzelnen Patches.
  Und versuchen Sie, dem Upstream entgegen zu kommen, in dem Sie keine
  Debian- oder Linux- (oder eben Unix-)spezifische Patches senden.

  <p>(A.d.Ü.: Speziell hier könnte man dem Upstream mit
  wenigen C-Kenntnissen helfen, in dem man die Pfade variabel macht.
  D.h. man verändert im Makefile die gcc-Parameter so, dass die
  Variable ICONS an den C-Präprozessor übergeben wird. In
  dem Programm verwendet man dann ICONS statt den festgelegten Pfaden.)

  <sect id="difflibs">Unterschiedliche Programmbibliotheken

  <p>Das ist ein alltägliches Problem: Bibliotheken sind von
  Plattform zu Plattform verschieden. Z.b. kann ein Makefile ein Verweis
  auf eine Bibliothek enthalten, die es für Debian oder vieleicht
  überhaupt nicht für Linux gibt. In diesem Fall müssen
  wir ihn so verändern, dass eine Bibliothek verwendet wird, die es
  in Debian gibt und den selben Zweck erfüllt. Am besten, man
  kommentiert die Zeilen nur aus, weil andere vielleicht auf anderen
  Plattformen kompilieren und auf die gleiche Schwierigkeiten stossen.

  <p>Wenn also im Makefile (bzw. in Makefile.in) eine Zeile wie die
  Folgende vorkommt, und ihr Programm sich nicht kompiliert lässt:

  <p><example>
  LIBS = -lcurses -lsomething -lsomethingelse
  </example>

  <p>Ändern Sie sie zum Folgenden und es könnte funktionieren:
  <p><example>
  LIBS = -lncurses -lsomething -lsomethingelse
  #LIBS = -lcurses -lsomething -lsomethingelse
  </example>

  <chapt id="dreq">Benötigte Sachen in debian/

  <p>Es gibt nun ein neues Unterverzeichniss `debian´ im
  Hauptverzeichniss des Quellcode-Pakets (`gentoo-0.9.12'), in dem
  bereits einige Dateien liegen. Wir werden diese ändern, um die
  Eigenschaften des Pakets anzupassen. Die wichtigsten Dateien sind `control',
  `changelog', `copyright' und 'rules', die für die Erstellung
  jedes Pakets benötigt werden.

  <sect id="control">Die `control'-Datei

  <p>Diese Datei enthält verschiedene Werte, die dpkg und dselect
  für die Paketverwaltung benötigen. Das ist die
  control-Datei, die dh_make für uns erstellt hat:

  <p><example>
  1  Source: gentoo
  2  Section: unknown
  3  Priority: optional
  4  Maintainer: Josip Rodin &lt;jrodin@jagor.srce.hr&gt;
  5  Standards-Version: 3.0.1
  6
  7  Package: gentoo
  8  Architecture: any
  9  Depends: ${shlibs:Depends}
  10 Description: &lt;insert up to 60 chars description&gt;
  11  &lt;insert long description, indented with spaces&gt;
  </example>
  (Zeilennummerierung habe ich für dieses Beispiel hinzugefügt.)

  <p>Zeilen 1-5 sind Kontrol-Informationen für das Quellcode-Paket.
  Zeile 1 ist die Bezeichnung des Quellcode-Pakets.
  
  <p>Zeile 2 bestimmt die Sektion der Distribution, in die das Paket
  gehört. Sie haben bestimmt schon gemerkt, dass Debian in
  Sektionen aufgeteilt ist: main (die Freie Software), non-free (nicht
  wirklich freie Software) und contrib (Freie Software, die von
  non-free-Sachen abhängt). Unterhalb dieser Sektionen existieren
  logische Untersektionen, die eine minimale Beschreibung des Pakets
  geben. D.h. die `admin'-Sektion enthält Programme für
  Administration, `base' die grundlegenden Pakete, `devel' die
  Pakete für die Programmierer, `doc' die Dokumentation, `libs' die
  Programmbibliotheken, `mail' die E-Mail-Reader und -Daemonen, `net'
  die Netzwerk-Anwendungen und Daemonen, `x11'-Sektion die
  X11-spezifischen Programme, usw.

  <p>Verändern wir Sektion also zu x11.

  <p>Die dritte Zeile beschreibt, wie wichtig es für den
  durschnittlichen Benutzer es wäre, das Paket zu installieren.
  Sektion und Priorität werden zur Zeit nur von dselect benutzt, um
  die Pakete zu sortieren, und können (und werden es wahrscheinlich
  auch) von den FTP-Maintainern überschrieben. Die Policy
  enthält weitere Vorschriften für die Wahl der Sektion und
  Priorität.
  
  <p>Da es sich um ein normalles Paket handelt, lassen wir es bei
  optional.

  <p>Zeile 4 ist der Name und die E-Mail-Adresse des Maintainers.

  <p>Zeile 5 enthält die Version des Debian-Policy-Standards, dem
  dieses Paket folgt. (Zwei Hauptversionen des installierten
  debian-policy-Pakets).

  <p>Wenn ein nicht-standardisierter Compiler oder ein anderes Tool
  für die Paketerstellung benötigt wird, sollten Sie hier noch
  eine Zeile mit `Build-Depends', in der benötigten Pakete
  auflistet werden. Mehr Informationen darüber finden Sie in dem
  Packaging Manual (Sektion 8.7) und in der Documentation des
  `build-essential'-Pakets.
  
  <p>Zeile 7 enthält die Bezeichnung des Binärpakets.

  <p>Zeile 8 beschreibt die CPU-Architektur für die das
  Binärpaket kompiliert wird. Wir können das bei "any"
  belassen, weil es dann von  <manref name="dpkg-gencontrol"
  section="1"> mit dem richtigen Inhalt ersetzt wird, der für den
  Rechner gilt, auf dem das Paket gebaut wird (siehe die
  Erklärungen über die Portierung in Developer's Reference).
  Wenn ihr Paket unabhängig von der Architektur funktioniert (z.B.
  ein Shell- oder Perl-Skript, oder Dokumentation), ändern Sie dies
  zu "all", und lesen Sie später unter <ref id="rules"> über
  die Benutzung der `binary-indep'-"rule" statt `binary-arch'.

  <p>Zeile 9 zeigt eine der mächtigsten Eigenschaften des
  Paketsystems von Debian. Über spezielle Attribute kann das Verhalten
  des Paketmanagers in Bezug auf andere  Pakete verändert werden.  Neben
  Depends: (d.h. Abhänqiqkeit) gibt es noch weitere Attribute:
  Recommends: (Empfehlung), Suggests: (Vorschlag), Pre-Depends:
  (Voraussetzung), Conflicts: (Konflikt), Provides: (Enthält) und
  Replaces: (Ersetzt) .  <p>Paketverwaltungsprogramme  wie  dpkg,
  dselect oder APT (und seine Frontends) verhalten sich dabei ähnlich
  (Abweichungen weden weiter unten erklärt).  (siehe <manref name="dpkg"
  section="8">, <manref name="dselect" section="8">, <manref name="apt"
  section="8">, <manref name="console-apt" section="8">, <manref
  name="gnome-apt" section="8">)

  <p>Und das bedeuten die einzelnen Felder:

  <p><list>
  <item>Depends:
  <p>Das Paket wird erst installiert, wenn die hier aufgelisteten Pakete
  ebenfalls installiert sind. Benutzen Sie dies, wenn ihr Programm ohne
  diese Pakete überhaupt nicht (oder nicht vernünftig) laufen kann.
  .</item>

  <item>Recommends:
  <p>Dselect lässt das Paket nicht ohne weiteres installieren, wenn die
  hier aufgelisteten Pakete nicht ebenfalls installiert werden. Dpkg und
  APT erlauben es trotzdem. Benutzen Sie dieses Feld, wenn die Pakete
  nicht zwingend erforderlich sind, aber normalerweise mitinstalliert
  werden.</item>

  <item>Suggests:
  <p>Wenn der Benutzer ihr Programm installiert, wird Dselect ihn
  auffordern, die hier aufgelisteten Pakete zu installeren. Dpkg und APT
  kümmern sich nicht weiter darum. Benutzen Sie dies für Pakete, die mit
  ihrem Programm gut zusammenarbeiten, aber eigentlich nicht benötigt
  werden.</item>

  <item>Pre-Depends:
  <p>Dies "wirkt"  stärker  als Depends:. Das Paket wird nicht
  installiert, bevor die hier aufgelisteten Pakete fertig installiert
  <em>und richtig konfiguriert</em> sind. Benutzen Sie dies sehr sparsam
  damit und erst, wenn auf  debian-devel-Mailingliste darüber diskutiert
  wurde. Lies: verwende es überhaupt nicht. :-)</item>

  <item>Conflicts:
  <p>Das Paket wird nicht installiert, bevor alle aufgelisteten Pakete
  deinstalliert sind.  Benutzen Sie dies, wenn ihr Programm überhaupt
  nicht (oder nicht vernünftig) laufen kann, solange eines dieser Pakete
  installiert ist.</item>

  <item>Provides:
  <p>Für einige Paketarten mit mehreren Alternativen wurden sog.
  "virtual names" eingeführt. Die vollständige Liste dieser virtuellen
  Pakete (A.d.Ü.:leider nicht immer aktuell) finden Sie in der Datei
  /usr/share/doc/debian-policy/virtual-package-names-list.text.gz .
  Benutzen Sie dies, wenn ihr Paket die Funktionalität eines
  existierenden virtuellen Pakets bietet.
  </item>

  <item>Replaces:
  <p>Benutzen Sie dies, wenn ihr Paket die Dateien eines anderen Pakets
  überschreibt oder dieses Paket vollständig ersetzt (benutzt zusmmen
  mit Conflicts:). Die Dateien des gennanten Pakets werden gelöscht,
  bevor ihre Versionen  installiert werden.

  </item>
  </list>

  <p>All diese Felder haben eine einheitliche Syntax. Dies ist eine
  Liste der Paketnamen, getrennt durch Kommas.  Ein Paketname kann auch
  aus einer Liste der alternativen Paketnamen bestehen, die durch
  senkrechte Striche <tt>|</tt> ("pipe"-Zeichen)  getrennt werden.  Die
  Angabe des Pakets kann auch auf ganz bestimmte Paketversionen
  beschränkt werden. Diese Versionen werden in Klammern nach jedem
  einzelnen Paketnamen aufgeführt und werden durch spezielle Symbole
  festgelegt, gefolgt von einer Versionsnummer. Folgende Symbole sind
  erlaubt: <tt>&lt;&lt;</tt>, <tt>&lt;=</tt>, <tt>=</tt>, <tt>&gt;=</tt>
  und <tt>&gt;&gt;</tt> für niedriger, niedriger oder gleich, gleich,
  höher oder gleich und höher.

  <p>Das letzte Feature, das erwähnt werden sollte, ist die Variable
  $(shlibs:Depends). Der Inhalt wird automatisch mit  <manref
  name="dh_shlibdeps" section="1"> erzeugt und von <manref
  name="dh_gencontrol" section="1"> eingesetzt. Die Variable enthält die
  Namen der Programmbibliothken, die ihr Programm benutzt, z. B. libc6
  oder xlib6g; somit brauchen Sie nicht jedesmal die passenden
  Paketnamem angeben. Nachdem es nun gesagt wurde können wir die Zeile 9
  so stehen lassen.

  <p>Zeile 10 enthält die Liste der Paketvorschl.äge.Hier steht nur
  `file', weil  gentoo für einige Funktionen dieses Programm/Paket
  braucht.

  <p>Zeile 11 enthält eine Kurzbeschreibung. Bei den meisten Leuten sind
  die Terminalzeilen 80 Zeichen breit, also sollte die Kurubeschreibung
  nicht länger als 60 Zeichen sein. Ich ändere es ins  "A fully GUI
  configurable GTK+ file manager".

  <p>In die Zeile 12 kommt eine ausführliche Beschreibung des Pakets.
  Sie sollte aus einem kleinen Text bestehen, der mehr über das Paket
  verrät. Der erste Spalt der Zeilen sollte immer leer sein. Es dürfen
  keine leeren Zeilen vorkommen, Sie können aber welche simulieren, in
  dem Sie ein . (Punkt) in die Zeile einsetzen. Es darf nach der
  ausführlichen Beschreibung auch nicht mehr als eine Leerzeile
  vorkommen.

  <p>Und so sieht die angepasste control-Datei aus:

  <p><example>
  1  Source: gentoo
  2  Section: x11
  3  Priority: optional
  4  Maintainer: Josip Rodin &lt;jrodin@jagor.srce.hr&gt;
  5  Standards-Version: 3.0.1
  6
  7  Package: gentoo
  8  Architecture: any
  9  Depends: ${shlibs:Depends}
  10 Suggests: file
  11 Description: A fully GUI configurable GTK+ file manager
  12  gentoo is a file manager for Linux written from scratch in pure C. It
  13  uses the GTK+ toolkit for all of its interface needs. gentoo provides
  14  100% GUI configurability; no need to edit config files by hand and re-
  15  start the program. gentoo supports identifying the type of various
  16  files (using extension, regular expressions, or the 'file' command),
  17  and can display files of different types with different colors and icons.
  18  .
  19  gentoo borrows some of its look and feel from the classic Amiga file
  20  manager "Directory OPUS" (written by Jonathan Potter).
  </example>
  (Zeilennummerierung habe ich für dieses Beispiel hinzugefügt.)

  <sect id="copyright">Die `copyright'-Datei

  <p>In dieser Datei stehen Informationen über die Herkunft des Pakets
  (bzw. der Quellen), über die Lizenz und das Urheberrecht (Copyright).
  Die Policy schreibt keine bestimmte Form vor, aber den benötigten
  Inhalt  (siehe Abschnitt 6.5). Dh_make erstellt uns eine
  Standardvorlage, die etwa so aussieht:

  <p><example>
  1  This package was debianized by Josip Rodin &lt;jrodin@jagor.srce.hr&gt; on
  2  Wed, 11 Nov 1998 21:02:14 +0100.
  3
  4  It was downloaded from &lt;fill in ftp site&gt;
  5
  6  Upstream Author(s): &lt;put author(s) name and email here&gt;
  7
  8  Copyright:
  9
  10 &lt;Must follow here&gt;
  </example>
   (Zeilennummerierung habe ich für dieses Beispiel hinzugefügt.)

  <p>Die wichtigsten Dinge, die Sie hier einzutragen haben, sind die
  Quelle, von der Sie das Paket bezogen haben, die  geltenden
  Copyright-Vermerke  und die Lizenz. Sie müssen die komplete Lizenz
  einfügen, sofern es sich nicht um eine der gängigen freien
  Softwarelizenzen handelt, z.B. die GNU GPL oder LGPL, die BSD- oder
  die Artistic-Lizenz; in diesem Fall reicht ein Verweiss auf die
  entsprechende Datei im Verzeichniss /usr/share/common-licenses/, das
  auf jedem Debian-System existieren sollte. Gentoo unterliegt der "GNU
  General Public License", also bearbeiten wir die Datei und machen
  Folgendes daraus:

  <p><example>
  1  This package was debianized by Josip Rodin &lt;jrodin@jagor.srce.hr&gt; on
  2  Wed, 11 Nov 1998 21:02:14 +0100.
  3
  4  It was downloaded from: ftp://ftp.obsession.se/gentoo/
  5
  6  Upstream author: Emil Brink &lt;emil@obsession.se&gt;
  7
  8  This software is copyright (c) 1998-99 by Emil Brink, Obsession
  9  Development.
  10
  11 You are free to distribute this software under the terms of
  12 the GNU General Public License.
  13 On Debian systems, the complete text of the GNU General Public
  14 License can be found in /usr/share/common-licenses/GPL file.
  </example>
   (Zeilennummerierung habe ich für dieses Beispiel hinzugefügt.)

  <sect id="changelog">Die `changelog'-Datei

  <p>Dies ist eine zwingend vorgeschriebene Datei, deren Format in
  Packaging Manual (Sektion 3.2.3) beschrieben wird. Dieses Format
  benötigen dpkg und andere Programme um Dinge wie  Versionsnummer,
  Revision, Distribution und die Wichtigkeit ihres Pakets zu bestimmen.
  <p>Für sie ist es ebenfalls wichtig, weil man hier die gemachten
  Änderungen dokumentieren kann. Damit können Leute, die ihr Paket
  herunterladen, einfacher herausfinden, ob es noch ungelöste Probleme
  mit dem Paket gibt, über die Sie wissen sollten. Diese Datei wird im
  Biärpaket als `/usr/share/doc/gentoo/changelog.Debian.gz' gespeichert.

  <p>Dh_make erstellt uns eine Standardvorlage, die etwa so aussieht:

  <p><example>
  1  gentoo (0.9.12-1) unstable; urgency=low
  2
  3   * Initial Release.
  4
  5  -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt; Wed, 11 Nov 1998 21:02:14 +0100
  6
  7  Local variables:
  8  mode: debian-changelog
  9  End:
  </example>
  (Zeilennummerierung habe ich für dieses Beispiel hinzugefügt.)

  <p>In der Zeile 1 stehen der Paketname, die Version, die Distribution
  und die Wichtigkeit.  Der Name muss mit dem Namen des
  Quellpaketsübereinstimmen, Distribution sollte vorerst `unstable' oder
  `experimental' sein und die Wichtigkeit nicht höher als `low'. :-)
  <p>Zeilen 3-5 sind Logeinträge, in den Sie die in dieser Revision
  gemachten Änderungen dokumentieren können. Hierher kommt nichts über
  die Änderungen des Upstream-Maintainers, für diese Zwecke gibt es eine
  separate Datei, die als /usr/share/doc/gentoo/changelog.gz)
  gespeichert wird. Neue Zeilen werden direkt über die oberste Zeile,
  die mit einem Stern (`*') beginnt, eingefügt. Sie können das mit
  <manref name="dch" section="1">, <manref name="emacs" section="1">
  oder einem anderen Texteditor erledigen (die letzten Zeilen enthalten
  Informationen für den Editor Emacs). Schliesslich kommen Sie zu einer
  Datei wie diese hier:

  <p><example>
  1  gentoo (0.9.12-1) unstable; urgency=low
  2
  3   * Initial Release.
  4   * This is my first Debian package.
  5   * Adjusted the Makefile to fix $DESTDIR problems.
  6
  7  -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt; Wed, 11 Nov 1998 21:02:14 +0100
  8
  9  Local variables:
  10  mode: debian-changelog
  11 End:
  </example>
    (Zeilennummerierung habe ich für dieses Beispiel hinzugefügt.)

  <p>Wenn Sie eine neue Revision herausbringen, müssen Sie die
  Versionsnummer erhöhen.  Das kann man  `dch -i` machen (oder explizit
  with `dch -v &lt;version&gt;-&lt;revision&gt;`) und dann die
  Kommentare mit ihrem Lieblingsedior einfügen.  Tip: wie bekommt man
  das Datum im passenden Format?  Verwenden Sie `822-date`, oder `date
  -R` (A.d.Ü.: für eingedeutschte Umgebung: "LC_ALL=C date -R").

  <p>Neuere Versionsinformation wird immer oben eingefügt..
  Und so siht die changelog-Datei später aus:

  <p><example>
  1  gentoo (0.9.12-2) unstable; urgency=low
  2
  3   * Fixed a glitch in the menu file.
  4
  5  -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt; Wed, 11 Nov 1998 22:15:39 +0100
  6
  7  gentoo (0.9.12-1) unstable; urgency=low
  8
  9   * Initial Release.
  10  * This is my first Debian package.
  11  * Adjusted the Makefile to fix $DESTDIR problems.
  12
  13 -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt; Wed, 11 Nov 1998 21:02:14 +0100
  14
  15 Local variables:
  16 mode: debian-changelog
  17 End:
  </example>
    (Zeilennummerierung habe ich für dieses Beispiel hinzugefügt.)

  <p>Mehr über die neuen Versionen/Revisionen können Sie später in
  <ref id="update"> lesen.

  <sect id="rules">Die `rules'-Datei

  <p>Nun müssen wir einen Blick auf die eigentlichen Befehlssequenzen,
  sog. Rules, werfen, mit den <manref name="dpkg-buildpackage"
  section="1">  das Paket schliesslich erstellt. Die "rules"-Datei ist
  im Prinzip ein weiteres Makefile, das mit  `make -f` ausgeführt wird,
  und nur etwas anders als Upstreams Makefile aufgebaut ist.

  <p>Wie jedes andere Makefile besteht eine `rules'-Datei aus mehreren
  Rules, die bestimmen, wie mit dem Quellcode verfahren wird. Jede Rule
  besteht wiederrum aus weiteren Targets, Dateinamen oder Namen der
  Aktionen, die durchgeführt werden (z.B.. `build:' oder `install:').
  Rules, die Sie ausführen möchten, werden beim Aufruf als
  Programmparameter angegeben (z.B., `./debian/rules build` oder `make
  -f rules install`). Nach dem Targetnamen  (A.d.Ü.: d.h. nach der
  Bezeichnung unserer Rule) können Sie Programme oder Dateinamen
  angeben, von der die Ausführung der Rule abhängt. Danach folgt eine
  beliebige Anzahl von Kommandos (WICHTIG: eingerückt mit
  &lt;tab&gt;!), bis eine leere Zeile vorkommt. Danach beginnt eine neue
  Rule bzw. ein neues Target. Mehrere Leerzeilen und mit einem `#'
  (hash) beginnende Zeilen werden als Kommentare betrachtet und
  ignoriert.

  <p>Sie sind vielleicht etwas verwirrt, aber es wird alles verständlich
  nach der genaueren Betrachtung der `rules'-Datei, die uns dh_make
  erstellt hat. Sie sollten evtl. die Info-Seiten von `make' lesen, um
  mehr über die Funktionsweise zu erfahren.
  <p>Wichtig zu wissen ist noch, dass dh_make nur einen Muster der
  "rules"-Date erzeugt, also einen Vorschlag, wie sie ungefähr
  auszusehen hat. Diese Datei wird für simple Packete wahrscheinlich
  funktionieren, aber bei komplizierteren dürfen Sie die Datei nach
  Bedarf anpassen und erweitern. Sie dürfen nur die Namen der Rules
  nicht ändern, weil diese im "Packaging Manual" vorgeschrieben sind und
  von allen Programmen (für die Paketerstellung) so erwartet werden.

  <p><example>
  1  #!/usr/bin/make -f
  2  # Made with the aid of dh_make, by Craig Small
  3  # Sample debian/rules that uses debhelper. GNU copyright 1997 by Joey Hess.
  4  # Some lines taken from debmake, by Christoph Lameter.
  5
  6  # Uncomment this to turn on verbose mode.
  7  #export DH_VERBOSE=1
  8
  9  # This is the debhelper compatability version to use.
  10 export DH_COMPAT=1
  11
  12 build: build-stamp
  13 build-stamp:
  14	dh_testdir
  15
  16	# Add here commands to compile the package.
  17	$(MAKE)
  18
  19	touch build-stamp
  20
  21 clean:
  22	dh_testdir
  23	dh_testroot
  24	rm -f build-stamp
  25
  26	# Add here commands to clean up after the build process.
  27	-$(MAKE) clean
  28
  29	dh_clean
  30
  31 install: build-stamp
  32	dh_testdir
  33	dh_testroot
  34	dh_clean -k
  35	dh_installdirs
  36
  37	# Add here commands to install the package into debian/tmp.
  38	$(MAKE) install DESTDIR=`pwd`/debian/tmp
  39
  40 # Build architecture-independent files here.
  41 binary-indep: build install
  42 # We have nothing to do by default.
  43
  44 # Build architecture-dependent files here.
  45 binary-arch: build install
  46 #	dh_testversion
  47	dh_testdir
  48	dh_testroot
  49 #	dh_installdebconf
  50	dh_installdocs
  51	dh_installexamples
  52	dh_installmenu
  53 #	dh_installemacsen
  54 #	dh_installpam
  55 #	dh_installinit
  56	dh_installcron
  57	dh_installmanpages
  58	dh_installinfo
  59 #	dh_undocumented
  60	dh_installchangelogs
  61	dh_link
  62	dh_strip
  63	dh_compress
  64	dh_fixperms
  65	# You may want to make some executables suid here.
  66	dh_suidregister
  67 #	dh_makeshlibs
  68	dh_installdeb
  69 #	dh_perl
  70	dh_shlibdeps
  71	dh_gencontrol
  72	dh_md5sums
  73	dh_builddeb
  74
  75 binary: binary-indep binary-arch
  76 .PHONY: build clean binary-indep binary-arch binary install
  </example>
  (Zeilennummerierung habe ich für dieses Beispiel hinzugefügt.)
  <p>Die Funktion der ersten Zeile kennen Sie vielleicht von den Perl-
  oder Shell-Skripts. Sie teilt dem Betriebssystem mit, dass das Skript
  mit /usr/bin/make interpretiert wird.

  <p>Zeilen 12 bis 19 enthalten die `build'-Rule (und die untergeordnete
  `build-stamp'-Rule), die mit dem Makefile der Anwendung das Programm
  kompiliert.

  <p>Die  `clean'-Rule in 21-29, entsorgt alle unnötigen binäre und
  automatisch generierte Dateien, die nach der Paketerstellung
  zurückbleiben. Diese Rule muss jederzeit funktionsfähig sein, aucj
  wenn im Quellcode-Verzeichniss bereits aufgeräumt wurde, also sollren
  Sie evtl. die "zwang"-Optionen benutzen (z.B. "-f" bei  rm), oder die
  Rückgabewerte  ignorieren (mit einem `-' am Anfang des Befehls).

  <p>Der Installationsprozess, die `install'-Rule, beginnt in der Zeile
  31.  Es wird einfach die `install'-Rule des programmeigenen Makefiles
  ausgeführt, aber in das Verzeichniss `pwd`/debian/tmp installiert -
  aus diesem Grund haben wir in Gentoos Makefile auch die
  "$(DESTDIR)"-Variable (als Root-Verzeichniss der Installation)
  eingebaut.

  <p>Die Rule `binary-indep' in der Zeile 41, ist, wie das Komentar
  bereits sagt, für die Erstellung von architekturunabhängigen Paketen
  vorgesehen. Das ist beim unseren Paket nicht der Fall, also wird hier
  auch nichts gemacht. Wäre ihr Paket vom Typ `Architecture: all',
  müssten Sie alle Befehle für den "build" in diese Rule packen und
  stattdessen die nächste Rule (`binary-arch') leer lassen.

  <p>Auf zur nächsten Rule - `binary-arch' in den Zeilen 45 bis 73, in
  der wir verschiedene kleine Utilities aus dem Debhelper-Paket starten,
  die an unseren Dateien verschiedene Operation durchführen, um das
  Paket Policy-konform zu machen.

  <p>Die Namen beginnen mit dh_ und der Rest erklärt bereits die Aufgabe
  des Tools.  Alles ist praktisch selbsterklärend, hier noch einige
  zusätzlichen Erkärungen:

  <list>
  <item><manref name="dh_testdir" section="1"> überprüft, ob Sie im
  richtigen Verzeichniss sind (d.h. im obersten Verzeichniss des
  Quellcode-Verzeichnissbaums).
  <item><manref name="dh_testroot" section="1"> überprüft, ob Sie
  root-Rechte besitzen, die für die binary*-Targets benötigt werden.
  <item><manref name="dh_installmanpages" section="1"> kopiert alle
  Manpages, die es in Quellcode-Verzeichnissen finden kann  (aufgepasst,
  das ist DWIM).
  <item><manref name="dh_strip" section="1"> "stript" (A.d.Ü.: siehe
  'man strip') die Debugging-Header aus Libs und ausführbaren Dateien,
  um die Dateigrösse zu reduzieren.
  <item><manref name="dh_compress" section="1"> komprimiert (mit gzip)
  Manpages und Doku-Dateien, die grösser als 4 kB sind.
  <item><manref name="dh_installdeb" section="1"> kopiert sonstige, fürs
  Paket benötigte Dateien (z.B. die Maintainer-Skripte) ins Verzeichniss
  debian/tmp/DEBIAN.
  <item><manref name="dh_shlibdeps" section="1"> berechnet
  Abhängigkeiten von Libs und anderen Binäries.
  <item><manref name="dh_gencontrol" section="1"> erweitert und
  installiert die control-Datei.
  <item><manref name="dh_md5sums" section="1"> generiert MD5-Prüfsummen
  für alle Dateien im Paket.
  </list>

  <p>Die vollständigeren Infos über die Aufgaben und Bedienung all
  dieser dh_*-Skripte finden Sie in den jeweiligen Manpages.  Es gibt
  noch weitere, möglicherweise sehr nützliche dh_*-Skripte, die hier
  nicht weiter erwähnt werden. Wenn Sie sie mal brauchen, lesen Sie die
  Debhelper-Dokumentation.

  <p>Die Sektion "binary-arch" ist so eine, in der Sie wirklich alle
  Zeilen, in den nicht benötigte Features installert werden,
  auskomentieren sollten. Bei Gentoo komentiere ich Zeilen mit folgenden
  Befehlen aus, und zwar weil Gentoo diese einfach nicht braucht:
  testversion, emacsen, pam, init, cron, manpages, info, undocumented,
  suidregister, makeshlibs und perl. In der Zeile 60 werde ich ebenfalls
  `FIXES' hinzufügen, weil das der Name der Changelog-Datei des
  Upstreams ist.

  <p>Die letzten zwei Zeilen sind (genau wie andere, nicht weiter
  erklärte Zeien) einfach nur irgendwelche, mehr oder weniger benötigen
  Dinge, über die Sie mehr im Make- oder Packaging-Manual nachlesen
  können. Im Moment brauchen wir darüber nichts zu wissen.

  <chapt id="dother">Andere Dateien unter debian/

  <p>Wie Sie sehen gibt es noch verschiedene weitere Dateien im
  "debian/"-Unterverzeichniss, von den die meisten mit der `.ex'-Endung
  versehen sind, was bedeutet, dass es sich um Beispiele handelt. Wenn
  Sie eines dieser Features unbedingt brauchen oder einfach so verwenden
  möchten, lesen Sie die entsprechende Dokumentation (Tip: Policy
  Manual), bennen Sie die Datei um (`.ex' entfernen) und passen Sie die
  rules-Datei an, soweit notwendig..  Einige dieser Dateien, die am
  meisten benutzten,  werden in den follgenden Abschnitten beschrieben.

  <sect id="readme">README.Debian

  <p>Alle zusätzlichen Details und nennenswerte Unterschiede zw. dem
  Original und ihrer "debianisierten" Version sollten hier dokumentiert
  werden. Dh_make erstellt uns eine  Standardvorlage, die etwa so
  aussieht:

  <example>
  gentoo for Debian
  ----------------------

  &lt;possible notes regarding this package - if none, delete this file&gt;

  Josip Rodin &lt;jrodin@jagor.srce.hr&gt;, Wed, 11 Nov 1998 21:02:14 +0100
  </example>

  <p>Da wir nichts einzutragen haben, kann die Datei ruhig gelöscht werden.


  <sect id="conffiles">conffiles

  <p>Eine der ärgerlichsten Sachen bei der Software ist es, wenn Sie
  richtig viel Zeit und Mühe in die Konfiguration eines Programms
  investieren, und schon das nächste Update ihre Konfigurationsdateien
  platt macht. Debian löst dieses Problem, in dem die
  Konfigurationsdateien markiert werden und der Administrator beim
  nächsten Paketupgrde gefragt wird, ob er seine Konfiguration behalten
  will oder nicht.
   <p>Zu markierende Konfigurationsdateien können Sie in die Datei
   "conffiles" eintragen, pro Zeile ein Dateiname mit dem vollständigen
   Pfad der Konfigurationsdatei (normallerweise in /etc/...)

  <p>Gentoo hat eine Konfigurationsdatei, "/etc/gentoorc", also werden
  wir diesen String in die `conffiles'-Datei eintragen. Wenn ihr
  Programm keine Konfigurationsdateien braucht, kann diese Datei
  natürlich verschwinden.

  <sect id="dirs">dirs

  <p>In dieser Datei werden Verzeichnisse festgelegt, die wir brauchen,
  die von der Installationsprozedur (hier: "make install") aber nicht
  automatisch erstellt werden. 

  Die Vorlage sieht so aus:
  <p><example>
  usr/bin
  usr/sbin
  </example>

  <p>Beachten Sie, dass kein einleitender Schrägstrich dabei ist.
  Normallerweise würden wir das jetzt ins Folgende ändern:

  <p><example>
  usr/X11R6/bin
  usr/X11R6/man/man1
  </example>
  
  Allerdings werden diese Verzeichnisse bereits durch das Makefile
  erstellt, wir brauchen die "dirs"-Datei also nicht und können sie
  ruhig löschen.

  <sect id="manpage">manpage.1.ex

  <p>Die Dateien mit der ".ex"-Erweiterung sind Beispiele dafür, wie man
  bestimmte Features in das Paket einbaut. Um diese zu verwenden,
  bearbeiten Sie die entsprechende Dateien und entfernen die "
  .ex"-Erweiterung. Wenn Sir die Funktion nicht brauchen, löschen Sie
  die Datei.

  <p>Ihr Programm sollte eine Manpage haben. Hat es keine, dann können
  Sie die erstellte Vorlage umbennen und mit dem eigenen Text füllen. In
  den Manpages von <manref name="man" section="7"> finden Sie weitere
  Hinweise zur Erstellung von Man-Seiten. Geben Sie der fertigen Datei
  auf jeden Fall den Namen des Programms mit der Endung der
  Zielkategorie dieser Manpage. Hier ist eine kurze Liste der
  Kategorien:

  <p><example>
  Sektion |     Beschreibung     |     Anmerkungen
     1     Benutzerkomandos       Ausführbare Programme oder Skripte
     2     Systemaufrufe          Kernelfunktionen
     3     Bibliotheksaufrufe     Funktionen in System-Bibliotheken
     4     Spezielle Dateien      gewöhnlich in /dev
     5     Dateiformate und 
           Konventionen           z.B. das Format von /etc/passwd
     6     Spiele                 und ähnliche Programme
     7     Makropakete und 
           Konventionen           z.B. man(7), groff(7)
     8     Systemadministrations-
           befehle                in der Regel nur für root
     9     Kernelroutinen         [Nicht Standard]
  </example>
  
  <p>Also bekommt unsere Manpage den Dateinamen gentoo.1, oder besser
  gentoo.1x, weil es ein X11-Programm ist. Im gentoo-Archiv gab es keine
  gentoo.1-Manpage, also habe ich eine geschrieben, mit Hilfe der
  Informationen aus dem Beispiel und aus der Doku des Upstream's.

  <sect id="menu">menu.ex

  <p>Benutzer von  "X Window System" haben normallerweise einen
  Fenstermanager mit konfigurierbaren Menüs, aus den die Programme
  gestartet werden. Wenn Sie Debian's "menu"-Paket installiert haben,
  wird eine Reihe Menüeinträge für die installierten Programme
  automatisch hinzugefügt. Dies ist von der Policy nicht vorgeschrieben,
  wird aber sicherlich von vielen Benutzern erwünscht. Wir können Gentoo
  in das Menüsystem eintragen, in dem wir die "menu"-Datei erstellen.
  Das Beispiel von dh_make sieht so aus:
  
  <p><example>
  ?package(gentoo):needs=X11|text|vc|wm section=Apps/see-menu-manual\
    title="gentoo" command="/usr/bin/gentoo"
  </example>

  <p>Das erste Feld (needs) bestimmt, welche Art der Benutzerschnittstelle das
  Programm braucht (z.B. Text oder X11). Das nächste ist das
  Menü/Untermenü (section), in dem der Eintrag später erscheinen soll.  Die
  aktuelle Liste der Sektionen ist in:
  /usr/share/doc/debian-policy/menu-policy.html/ch2.html#s2.1 zu finden.
  Das dritte Feld (title) enthält die Bezeichnung des Programms. Das
  "icon"-Feld gibt die Icondatei an oder keinen Icon mit dem Eintrag
  "none". Und das letzte Feld ist das Kommando, das das Programm
  ausführt.

  <p>Die Menü-Datei verändern wir also zum folgenden:
  <p><example>
  ?package(gentoo):needs=X11 section=Apps/Misc \
    title="Gentoo" command="/usr/X11R6/bin/gentoo"
  </example>

  <p>Siehe <manref name="menufile" section="5">, <manref
  name="update-menus" section="1"> und
  /usr/share/doc/debian-policy/menu-policy.html/ für mehr Info über das
  Menüsystem.

  <sect id="watch">watch.ex

  <p>Sie können diese Datei mit Programmen <manref name="uscan"
  section="1"> und <manref name="uupdate" section="1"> (aus dem
  devscripts-Paket) benutzen, um die Seite zu überwachen, von der Sie
  die Original-Quellen bezogen haben. Folgendes habe ich da eingetragen:

  <p><example>
  # watch control file for uscan
  # Site		Directory	Pattern			Version	Script
  ftp.obsession.se	/gentoo		gentoo-(.*)\.tar\.gz	debian	uupdate
  </example>

  <p>Hinweiss: wechseln Sie, wenn Sie die Datei mal erstellt haben, mit
  einer stehenden Internetverbindung in das Arbeitsverzeichniss und
  probieren Sie "uscan" auszuführen. Und RTFM.

  <sect id="doc-base">ex.doc-base

  <p>Hat ihr Programm Dokumentation in HTML oder einem anderen Format
  (ausser Man- und Info-Seiten), so sollten die Datei `doc-base'
  benutzen, um diese zu registrieren, damit der Benutzer sie mit
  Programmen wie <manref name="dhelp" section="1"> oder <manref
  name="dwww" section="1"> einfacher finden kann.

  <p>So könnte Gentoo's doc-base-Datei dann aussehen.
  <p><example>
  Document: gentoo
  Title: Gentoo Manual
  Author: Emil Brink
  Abstract: This manual describes what Gentoo is, and how it can be used.
  Section: Apps/Tools

  Format: HTML
  Index: /usr/share/doc/gentoo/html/index.html
  Files: /usr/share/doc/gentoo/html/*.html
  </example>

  <p>Informationen über das Format dieser Datei finden Sie in <manref name="install-docs" section="8">
  und der Anleitung von doc-base in /usr/doc/doc-base/doc-base.html/index.html.

  <sect id="maintscripts">postinst.ex, preinst.ex, postrm.ex, prerm.ex

  <p>Diese Dateien werden Maintainer-Skripte gennant, Skripte die im
  Kontrol-Bereich des Pakets ligen und von dpkg ausgeführt werden, und
  zwar wenn ihr Paket installiert, aktualisiert oder entfernt wird.

  <p>Vorerst sollten Sie aber von den Maintainer-Skripten die Finger
  lassen, weil die manuelle Bearbeitung schnell kompliziert werden kann.
  Mehr Informationen finden Sie im Packaging Manual, Sektion 6, und
  werfen Sie einen Blick auf die Beispiele von dh_make.

  <p>Nun sollten wir soweit sein, das Paket zu "bauen".

  <chapt id="final">Letzte Schritte

  <sect id="build">"Bau" des Pakets.

  <p>Wechseln Sie nun in das Verzeichniss des Programms und führen Sie
  das folgende Kommando aus:

  <p><example>
  dpkg-buildpackage -rfakeroot
  </example>

  <p>Das wird alles für Sie erledigen, Sie müssen nur noch zwei mal die
  PGP-Mantra eingeben. Anschliessend finden Sie vier neue Dateien im
  darüberliegenden Verzeichniss:

  <p><list>
  <item><em>gentoo_0.9.12-1_i386.deb</em>
  <p>Das ist das komplete Binärpaket, Sie können es mit dpkg oder
  dselect wie jedes andere Paket (de)installieren.

  <item><em>gentoo_0.9.12.orig.tar.gz</em>
  <p>Dies ist der ursprüngliche Quellcode, mit dem jemand ihr Paket von
  Grund auf erstellen kann, auch wenn diese Person Debians Paketsystem
  nicht benutzt und den Quellcode manuell herunterladen und kompilieren
  muss.

  <item><em>gentoo_0.9.12-1.dsc</em>
  <p>Dies ist eine Zusammenfassung des Inhalts des Quellcode-Pakets. Die
  Datei wird aus der Datei gentoo-0.9.12/debian/control generiert und
  für das Entpacken des Quellcodes mittels <manref name="dpkg-source"
  section="1"> benötigt. Diese Datei ist mit PGP signiert, somit können
  sich die Leute vergewissern, dass sie von ihnen kommt.
  <item><em>gentoo_0.9.12-1.diff.gz</em>
  <p>Diese komprimierte Datei enthält alle Zusätze und Änderungen, die
  Sie mit dem ursprünglichen Quellcode gemacht haben, im Format, der als
  "unified diff" bekannt ist. Die Datei wird erstellt und benutzt von
  <manref name="dpkg-source" section="1">.

  <item><em>gentoo_0.9.12-1_i386.changes</em>
  <p>Diese Datei beschreibt die Änderungen  in dieser Paket-Revision.
  Die Verwaltungsprogramme für Debians FTP-Archive benötigen diese Datei
  zur Installation der Binär- und Quellcode-Pakete ins FTP-Archiv. Sie
  wird zum Teil aus den Dateien gentoo-0.9.12/debian/changelog und
  ...dsc generiert.
  
  Personen, die ihre Dateien herunterladen, können diese mit <manref
  name="md5sum" section="1"> überprüfen und sollten die Zahl nicht
  übereinstimmen, dann wissen sie, das die Datei beschädigt oder gehackt
  wurde. Die changes-Datei ist PGP-signert, damit die Leute ganz sicher
  sein können, das sie von Ihnen kommt.
  </list>

  <p>Bei einem grossen Paket wollen Sie bestimmt nicht alles nach jeder
  kleiner Änderung in debian/rules neu kompilieren. Für Testzwecke
  können Sie ein .deb erstellen, ohne alles Schritte durchmachen, z.B.
  so:

  <p><example>
  fakeroot debian/rules binary
  </example>

  <p>Vergewissern Sie sich nur, dass ihre `install'-Rule <strong/nie/
  das untergeordnete Target `install-stamp' aufruft (ist heutzutage
  Normallfall), damit auch sichergestellt wird, dass `dh_clean -k`
  jedesmal aufgerufen wird. Und wenn irgendwann alles richtig
  funktioniert, führen Sie den kompleten build-Prozess nochmal aus,
  damit Sie korrekt uploaden können.

  <sect id="checkit">Überprüfung auf Fehler
  <p>Lassen Sie <manref name="lintian" section="1"> auf ihre
  .changes-Datei los; dieses Programm findet viele Fehler, die beim
  Paketerstellen häufig gemacht werden. Der Aufruf ist folgender:
  
  <p><example>
  lintian -i gentoo_0.9.12-1_i386.changes
  </example>
  
  <p>Den Dateinamen ersetzen Sie durch den Namen der changes-Datei ihres
  Pakets. Erscheinen bei der Überprüfung einige Fehler, (mit E:
  anfangende Zeilen), lesen Sie die Erklärung (die N:-Zeilen),
  korrigieren Sie die Fehler und erstellen Sie das Paket neu, wie in
  <ref id="build"> beschrieben wurde. Erscheinen nur Zeilen mit W: am
  Anfang, dann sind es nur Warnungen und Sie können davon ausgehen, dass
  ihr Paket in Ordnung ist und wahrscheinlich nur einige Verbesserungen
  braucht.

  <p>Noch ein Tip: Sie können dpkg-buildpackage und lintian auf einmal
  ausführen, mit dem Befehl <manref name="debuild" section="1">.

  <p>Betrachten Sie nun den Inhalt des Pakets mit einem Dateimanager wie
  <manref name="mc" section="1"> oder entpacken Sie es temporär mit
  Hilfe von  <manref name="dpkg-deb" section="1">. Halten Sie Ausschau
  nach unnötigen Dateien im Quellcode und im Binär-Paket, für den Fall
  das etwas schief ging oder irgendwelcher Scrott beim "clean" übrig
  geblieben ist. Tips: `zgrep ^+++ ../gentoo_0.9.12-1.diff.gz` erzeugt
  eine Liste der neuen und veränderten Dateien im Quellcode, und
  `dpkg-deb -c gentoo_0.9.12-1_i386.deb` listet die im Paket enthaltenen
  Dateien auf.
  <p>Installieren Sie das Paket nun selbst, z.B. mit dem Kommando
  <manref name="debi" section="1"> als root. Versuchen Sie jetzt, das
  Paket auf anderen Rechnern zu installieren und das Programm laufen zu
  lassen, passen  Sie dabei auf Warnungen und Fehlermeldungen bei der
  Installation und Ausführung auf.

  <p>Später, wenn Sie eine neue Version des Pakets erstellen, sollten
  Sie folgende Schritte durchführen, um die Upgrade-Kompabilität zu
  überprüfen:

  <list>
  <item>Upgrade von der vorherigen Version (und von der Version im letzten Debian-Release),
  <item>Downgrade zurück
  <item>Installation des Pakets als ein neues Paket (d.h., ohne dass eine vorherige Version installiert ist),
  <item>Deinstallation, Neuinstallation, dann ein "Purge".
  </list>

  <sect id="upload">Upload des Pakets

  <p>Nun, nach dem Sie das Paket ausreichend getestet haben, sollten Sie
  die Paketdateien auf master.debian.org uploaden, z.B. mit Hilfe von
  <manref name="dupload" section="1">.  Zunächst müssen Sie duploads
  Konfigurationsdatei ~/.dupload.conf erstellen. Schreiben Sie etwas wie
  folgendes dort rein:

  <p><example>
  package config;
  $default_host = "master";
  
  $cfg{"master"}{"method"} = "scpb";
  $cfg{"master"}{"login"} = "joy";
  $cfg{"master"}{"visibleuser"} = "jrodin";
  $cfg{"master"}{"visiblename"} = "jagor.srce.hr";
  $cfg{"master"}{"fullname"} = "Josip Rodin";
  
  $cfg{"non-us"}{"method"} = "scpb";
  $cfg{"non-us"}{"login"} = "joy";
  $cfg{"non-us"}{"visibleuser"} = "jrodin";
  $cfg{"non-us"}{"visiblename"} = "jagor.srce.hr";
  $cfg{"non-us"}{"fullname"} = "Josip Rodin";
  
  1;
  </example>

  <p>Angaben zu meiner Person ersetzen Sie natürlich durch ihre eigenen, und lesen Sie die Manpage für 
  <manref name="dupload.conf" section="5"> um die einzelnen Optionen zu verstehen.

  <p>Bauen Sie eine Verbindung zu ihrem Internet-Provider auf, und führen Sie dieses Kommando aus:
  
  <p><example>
  dupload --to master gentoo_0.9.12-1_i386.changes
  </example>

  <p>Dupload vergleicht die md5-Prüfsummen mit denen aus der
  changes-Datei und weisst Sie ggf. an, das Paket neu zu "bauen", wie
  unter <ref id="build"> bereits beschrieben.

  <p>Dupload fragt nach ihrem Passwort auf master.debian.org, lädt die
  Pakete hoch und schickt eine kurze Info-Mail über ihren Upload an
  <email/debian-devel-changes@lists.debian.org/, falls erforderlich.

  <p>Wenn Sie in Europa wohnen, dann können Sie auch andere
  Upload-Stellen anstelle von Master benutzen. Mehr darüber in <manref
  name="dupload" section="1">, <manref name="dupload.conf" section="5">
  und der "Developer's Reference".

  <sect id="update">Weiterentwicklung des Pakets

  <p>Nehmen wir mal an, es wurde ein Bug-Report(#54321) erstellt wurde,
  und er beschreibt ein Problem, das Sie lösen können. Um eine neue
  Revision zu erstellen brauchen Sie folgendes zu tun:

  <list>
  <item>Lösen Sie das Problem im Quellode (wohl selbstverständlich)

  <item>Machen Sie einen neuen Revision-Eintrag in der changelog-Datei mit
  `dch -i`, fügen Sie eine kleine Beschreibung des Bugs und der Lösung
  hinzu, gefolgt von: "Closes: #54321". Auf diese Weise wird der
  Bugreport von der Verwaltungssoftware"automagisch" geschlossen, sobald
  das Paket ins Debian-Archive übernommen ist.

  <item>Wiederholen Sie die Schritte aus <ref id="build">, <ref
  id="checkit">, und <ref id="upload">. Der einzige Unterschied ist
  jetzt nur, dass der Original-Quellcode nicht mehr hochgeladen wird, da
  das Tar-Archiv nicht mehr geändert wurde und die alte Version bereits
  auf dem Server liegt.
  </list>

  <p>Betrachten wir jetzt eine andere, etwas kompliziertere Situation -
  eine neue Upstream-Version wurde freigegeben, und Sie wollen sie
  natürlich gleich übernehmen. Sie können nun folgendes tun:

  <list>
  <item>Den neuen Quellcode-Tarball herunterladen (z.B. das Archive
  `gentoo-0.9.13.tar.gz'), in das Verzeichniss über dem alten
  Source-Verzeichniss (z.B. ~/debian/) ablegen.

  <item>Das alte Quellcode-Verzeichniss betretten und folgendes
  ausführen:

  <example>
  uupdate -u gentoo-0.9.13.tar.gz
  </example>

  Natürlich ersetzen Sie den Dateinamen mit dem Namen des neuen
  Source-Tarballs ihres Programms.
  <manref name="uupdate" section="1"> wird es dann richtig umbennen und
  versuchen, alle Änderungen aus ihrer vorherigen .diff.gz-Datei in die
  neue Version zu übernehmen. Anschliessend wird debian/changelog
  aktualisiert.

  <item>Wechseln Sie in das neue Verzeichniss `../gentoo-0.9.13' (ihr
  neues Quellcode-Arbeitsverzeichniss) und wiederholen Sie die Schritte
  aus <ref id="build">, <ref id="checkit"> und <ref id="upload">.
  </list>

  <p>Übrigens können Sie, vorausgesetzt Sie haben `debian/watch' wie in 
  <ref id="watch"> aufgesetzt, durch Ausführung von <manref name="uscan"
  section="1"> "automagisch" nach aktuellem Quellcode suchen,
  herunterladen und "uupdate" durchführen.

  <sect id="helpme">Wo kriegt man Hilfe?

  <p>Bevor Sie sich dazu entschliessen, ihre Frage irgendwo zu
  veröffentlichen, versuchen Sie es doch einfach mal zuerst mit RTFM.
  Dazu gehört Dokumentation in
   /usr/share/doc/dpkg,
  /usr/share/doc/debian, /usr/share/doc/package/*-Dateien und die
  man/info-Seiten für alle Programme, die in diesem Artikel erwähnt
  wurden. Wenn Sie ein Bug-Report erhalten (ja, richtige Bug-Reports!),
  dann wissen Sie auch, dass es an der Zeit ist, sich näher mit der
  Fehlerdatenbank <url name="Fehlerdatenbank"
  id="http://www.debian.org/Bugs/"> zu beschäftigen, d.h. die Doku dort
  zu lesen, um mit den Reports effizient umgehen zu können.
 
  <p>Durch das Beitreten der "Debian Mentors"-Mailing-Liste über
  <email/debian-mentors@lists.debian.org/ kommen Sie in Kontakt mit
  erfahrenen Debian-Entwicklern, die ihnen mit potentiellen Fragen
  helfen können. Sie können die Liste über Mail zu
  <email/debian-mentors-request@lists.debian.org/ abonnieren, mit dem
  Wort `subscribe' im Betreff der Nachricht.

  <p>Wenn Sie dann immer noch Fragen haben, stellen Sie diese auf der 
  "Debian Developers"-Mailing-Liste über <email/debian-devel@lists.debian.org/.
   Sie können die Liste über Mail zu <email/debian-devel-request@lists.debian.org/ abonnieren, mit dem
  Wort `subscribe' im Betreff der Nachricht. Wenn Sie bereits ein
  Debian-Entwickler sind, sollten Sie sowieso abonnieren.

  <p>Auch wenn alles richtig funktioniert hat, ist es jetzt Zeit für ein
  Gebet. Warum? Weil in wenigen Stunden (oder Tagen) die Benutzer aus
  aller Welt ihr Paket benutzen werden - und da Sie irgendwo kritische
  Fehler gemacht haben, werden Sie von Tausenden von verärgerten
  Debian-Benutzern zugemailt... Nur ein Scherz. :-)

  <p>Entspannen sie Sich und machen Sie sich gefasst auf Bug-Meldungen,
  da i.d.R. noch viel Arbeit zu erledigen ist, bis alles den "Debian
  policies" vollständig entspricht (und noch einmal: lesen Sie in der
  <em>richtigen Doku</em> über Details). Viel Glück!

 </book>

</debiandoc>
