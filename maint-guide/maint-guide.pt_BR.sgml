<!doctype debiandoc system>

<debiandoc>

 <book>

  <titlepag>

   <title>Guia dos Novos Mantenedores Debian</title>

   <author>Josip Rodin <email/jrodin@jagor.srce.hr/
   </author>

   <author>Traduzido por: Gustavo Noronha Silva (KoV) <email/dockov@zaz.com.br/
   </author>
   <author> Revisado por: Cristian S. Privat (HellBlade) <email/hellblade@linuxbr.com.br/
   </author>

   <version>versão 1.0, 25 de Janeiro de 2000.</version>

   <copyright>
   <copyrightsummary>Copyright &copy; 1998, 1999, 2000 Josip Rodin.</copyrightsummary>

   <p>Esse documento pode ser usado sob os termos da Licença Pública Geral da GNU, 
   versão 2 ou maior.

   <p>Esse documento foi feito usando os seguintes documentos como exemplos:

   <p>Fazendo um Pacote Debian (AKA o Manual do DebMake), copyright &copy;
   1997 Jaldhar Vyas <email/jaldhar@debian.org/.

   <p>O "HowTo" de Empacotamento Debian para Novos Mantenedores, copyright &copy; 1997
   Will Lowe <email/lowe@debian.org/.
   </copyright>

  </titlepag>

  <toc sect>

  <chapt id="start">Começando: "O Jeito Certo"

  <p>Esse documento tentará descrever como construir um pacote Debian GNU/Linux
  ao usuário comum do Debian (e aspirante a desenvolvedor) em linguagem fácil, e
  bem coberto com exemplos que funcionam. Há um velho ditado Romano, <em>Longum
  iter est per preaecepta, breve et efficax per exempla!</em> (É um longo caminho
  pelas regras, mas curto e eficiente com exemplos!).

  <p>Uma das coisas que fazem o Debian uma Distribuição Linux de topo de linha
  é seu sistema de empacotamento. Enquanto há uma vasta quantidade de pacotes já
  no formato Debian, algumas vezes você precisa instalar programas que não estão.
  Você pode estar pensando como você pode fazer seus próprios pacotes e talvez pense
  que é uma tarefa difícil. Bem, se você é um novato completo no Linux, 
  é difícil, mas se você fosse um novato não estaria lendo esse documento agora =).
  Você precisa saber um pouco sobre programação Linux mas certamente não
  precisa ser um mago.

  <p>Novas versões desse documento devem sempre estar disponíveis na rede em:
  <url name="http://www.debian.org/doc/maint-guide" id="http://www.debian.org/doc/maint-guide">
  e no pacote `maint-guide' para a versão em inglês e em
  <url name="http://www.linuxsolutions.com.br/debian-br" id="http://www.linuxsolutions.com.br/debian-br">
  para a versão em português, o pacote está sendo planejado para o futuro.

  <sect id="needprogs">Programas que você precisa para desenvolver

  <p>Antes de começar qualquer coisa, você deve estar certo de ter propriamente
  instalados alguns pacotes adicionais necessários ao desenvolvimento. Note que
  a lista não contém nenhum pacote marcado `essential' (essencial) ou
  `required' (requerido) - nós esperamos que você já os tenha corretamente 
  instalados.

  <p>Esse documento foi escrito enquanto a versão 2.1 (slink) era
  a oficialmente estável do Debian e a 2.2 (potato) estava sendo criada,
  Assim os pacotes estão nomeados aqui como aqueles da 2.2.

  <p>Os pacotes a seguir vêm com a instalação padrão do Debian 2.1,
  então você provavelmente já os tem (e os pacotes dos quais eles dependem).
  Ainda assim, você deve checar com `dpkg -S &lt;pacote&gt;`.

  <list>
  <item><em>binutils</em> - esses programas são usados para reunir e ligar
  arquivos objeto - as coisas que compõe um programa (veja `info binutils`)

  <item><em>cpp</em> - O preprocessador C. (veja <manref name="cpp" section="1">)

  <item><em>cpio</em> - esse é um arquivador como tar ou zip. (veja
  <manref name="cpio" section="1">)

  <item><em>dpkg-dev</em> - esse pacote contém as ferramentas necessárias para
  desenpacotar, construir e fazer "upload" (enviar para algum servidor da rede) de pacotes
  de código fonte do Debian. (veja
  <manref name="dpkg-source" section="1">)

  <item><em>file</em> - esse programa útil pode determinar o tipo de um arquivo.
  (veja <manref name="file" section="1">)

  <item><em>gcc</em> - O compilador C do GNU. A maioria dos programas do Linux são
  escritos em C. No entanto, se seu programa é escrito em alguma outra linguagem de
  programação, como C++, Fortran, Pascal, você deve pegar g++, g77 ou gpc, respectivamente.
  (veja <manref name="gcc" section="1">,
  <manref name="g++" section="1">, <manref name="g77" section="1">,
  <manref name="gpc" section="1">)

  <item><em>libc6-dev</em> - as bibliotecas e arquivos cabeçalho do C
  que o gcc precisa para "linkar" e criar arquivos objeto. Apesar de alguns
  programas ainda recomendarem e/ou usarem libc5, você é encorajado a
  usar a nova versão (libc6) (veja `info libc`)

  <item><em>make</em> - usualmente a criação de um programa tem muitos
  passos. Ao invés de ter de digitar os mesmos comandos de novo e de novo, você
  pode usar esse programa para automatizar o processo, criando `Makefile's
  de conjuntos de funções macro. Muitos programas novos usam scripts `configure'
  e Makefile's com a ajuda de programas como autoconf e automake, então você
  deve precisar desses também. (veja `info make`, <manref name="imake" section="1">,
  <manref name="xmkmf" section="1">, <manref name="autoconf" section="1">,
  <manref name="automake" section="1">)

  <item><em>patch</em> - esse utilitário muito útil vai pegar um arquivo contendo
  uma listagem de diferenças (produzido pelo programa diff) e aplicá-las ao arquivo
  original, produzinho uma versão "patcheada" (algo como consertada, aprimorada).
  (veja <manref name="patch" section="1">)

  <item><em>perl5</em> - Perl é uma das linguagens de interpretação de scripts
  usadas nos sistemas unix atuais, muitas vezes referidas como "Canivete do Exército
  Suíço dos usuários de Unix). (see <manref name="perl" section="1">)
  </list>

  <p>Da seção `devel' da distribuição você irá precisar provavelmente de instalar esses
  por si mesmo:

  <list>
  <item><em>dh-make</em> e <em>debhelper</em> - dh-make é necessário para
  criar o esqueleto de nosso pacote de exemplo, e irá usar algumas das
  ferramentas do debhelper para criar pacotes. Eles não são essenciais para
  a criação de pacotes, mas é <strong>altamente</strong> recomendado para
  novos mantenedores. Isso faz o processo muito mais fácil de começar, e
  controlar mais tarde. (veja <manref name="dh_make" section="1">,
  <manref name="debhelper" section="1">, /usr/share/doc/debhelper/README)

  <item><em>devscripts</em> - esse pacote contém alguns scripts bons e úteis
  que podem ser de grande ajuda para os mantenedores, mas eles não são necessários
  para construir os pacotes, também. (veja /usr/share/doc/devscripts/README.gz)

  <item><em>fakeroot</em> - esse utilitário deixa que você simule que é root,
  o que é necessário para algumas partes do processo de construção. (veja
  <manref name="fakeroot" section="1">)

  <item><em>lintian</em> - esse é um pacote Debian que permite que você saiba
  de alguns erros comuns depois de construir seu pacote, e explica os erros encontrados.
  (veja <manref name="lintian" section="1">,
  /usr/share/doc/lintian/lintian.html/index.html)
  </list>

  <p>Finalmente, esses pacotes <em>muito importantes</em> estão na seção doc
  da distribuição:

  <list>
  <item><em>debian-policy</em> - inclui a estrutura e o conteúdo do arquivo,
  muitos assuntos de design de SOs, o padrão de hierarquia de sistema de
  arquivos e a coisa mais importante (para você) é que ele descreve os
  requerimentos que cada pacote deve satisfazer para ser incluído na distribuição.
  (veja /usr/share/doc/debian-policy/policy.html/index.html)

  <item><em>developers-reference</em> - para todos os assuntos que não
  são específicos de detalhes técnicos de empacotamento, como a estrutura
  do arquivo, como renomear, deixá-lo órfão, pegar pacotes, como fazer
  NMUs, como lidar com bugs, onde e quando transferir o pacote, etc.
  (veja /usr/share/doc/developers-reference/developers-reference.html/index.html)

  <item><em>packaging-manual</em> - descreve aspectos técnicos sobre
  criar um binário Debian e pacotes de código fonte.
  (veja /usr/share/doc/packaging-manual/packaging.html/index.html)
  </list>

  <p>Você irá também precisar do pacote de encriptação, ou PGP (os pacotes
  pgp-*) ou GPG (o pacote gnupg), para <em>assinar</em> digitalmente seu
  pacote. Esse é especialmente importante se você quer distribuí-lo a outras
  pessoas (e certamente o estará fazendo quando seu trabalho for incluído
  na distribuição Debian). No entanto, por causa das leis de exportação
  dos E.U.A., você não pode simplesmente fazer o download deles do servidor
  FTP do Debian mais próximo de você. Mas o Debian disponibiliza esses pacotes
  de um servidor não localizado fisicamente nos E.U.A, chamado non-US.debian.org
  (ftp://non-us.debian.org/debian-non-US/). Seu site de FTP terá um arquivo
  chamado README.non-US, que irá explicar como encontrar um mirror próximo
  de onde você se localiza.

  <p>As descrições pequenas que são dadas acima apenas servem para introduzi-lo
  ao que cada pacote faz. Antes de continuar por favor, leia a documentação
  de cada programa, ao menos o uso padrão. Pode parecer estressante agora
  mas depois você estará <em>muito</em> feliz por ter lido.

  Nota: <em>debmake</em> é um pacote que contém alguns programas que
  funcionam de modo similar ao dh-make, mas seu uso específico <strong>não</strong>
  é coberto por esse documento. Visite <url name="O manual Debmake"
  id="http://www.debian.org/~jaldhar/"> para maiores informações.

  <sect id="otherinfo">Outras informações

  <p>Há dois tipos de pacotes que você pode fazer, código fonte e binário.
  Um pacote de código fonte, contém o código que você compila em um programa.
  Um pacote binário contém apenas o programa finalizado. Não misture
  termos como o código fonte do programa e o pacote fonte do programa!
  Por favor leia os outros manuais se você precisa de terminologia mais
  detalhada.

  <p>No Debian, o termo `mantenedor' (mantainer) é usado pela pessoa que
  faz os pacotes, `autor externo (upstream)' pela pessoa que faz o programa, e
  `mantenedor externo (upstream)' pela pessoa que mantém o programa fora do Debian.
  Normalmente autor e mantenedor upstream são a mesma pessoa - e algumas
  vezes o mantenedor é a mesma pessoa. Se você fez um programa e quer
  que ele entre no Debian, sinta-se livre para enviá-lo para se tornar um
  mantenedor.

  <p>Depois de construir seu pacote (ou enquanto o faz), você irá ter de se
  tornar um mantenedor oficial do Debian se você deseja que seu programa
  entre na próxima distribuição (se o programa é útil, por quê não?).
  Esse processo é explicado no "Referência dos Desenvolvedores
  (Developer's Reference). Por favor, leia-o.

  <chapt id="first">Primeiros passos

  <p>Enquanto a documentação no <url name="Canto dos Desenvolvedores" id="http://www.debian.org/devel/">
  não é tão clara sobre quando, onde e como os novos mantenedores devem começar
  seu trabalho, esse documento irá explicar cada pequeno (de início, talvez,
  irrelevante) passo e irá ajudá-lo a criar seu primeiro pacote e ganhar
  experiência em construir as próximas versões e talvez outros pacotes
  mais tarde.

  <sect id="choose">Escolha seu programa

  <p>Você já, provavelmente escolheu o pacote que quer construir, mas aqui
  estão algumas notas para você iniciar:

  <list>
  <item>cheque se o pacote já está na distribuição. Se você usa a distribuição
  `stable' (estável), talvez seja melhor ir até a
  <url name="página de procura de pacotes" id="http://www.debian.org/distrib/packages.html">.
  Se você usa a <strong>atual</strong> distribuição `unstable' (instável), cheque isso com esses comandos:
  <example>
  dpkg -s programa
  dpkg -l "*programa*"
  </example>

  <item>consulte a <url name="página do WNPP" id="http://www.debian.org/devel/wnpp/">
  e os arquivos da lista de e-mails debian-devel para ver se alguém está
  produzindo o mesmo pacote. Se sim, contate o atual mantenedor se você sentir
  que precisa. Se não - encontre algum outro programa interessante que
  ninguém mantenha.
  </item>

  <item>o programa <strong>deve</strong> ter uma licença, se possível livre
  de acordo com as <url name="Regras de Software Livre do Debian (Debian Free Software Guidelines)" id="http://www.debian.org/social_contract.html#guidelines">.
  Se ele não entra em conformidade com essas regras, ele ainda pode ser incluído
  nas seções `contrib' ou `non-free' do Debian. Se você tem dúvidas sobre para
  onde o pacote deve ir, pergunte em: <email/debian-legal@lists.debian.org/.
  </item>

  <item>o programa certamente <strong>não</strong> deve rodar em
  setuid root, ou melhor ainda - não deve precisar ser setuid ou setgid
  para nada.</item>

  <item>o programa não deve ser um servidor ou algo que vá nos diretórios
   */sbin.</item>

  <item>o programa deve ser um binário executável, não tente as bibliotecas
  ainda.</item>

  <item>ele deve ser bem documentado, ou pelo menos de entendimento (a qualquer
  um).</item>

  <item>você deve contatar o(s) autor(es) do programa para checar se eles
  concordam com o empacotamento. Isso é importante ter a possibilidade de
  consultar o(s) autor(es) sobre o programa em caso de algum problema específico
  do programa, então não tente empacotar programas não documentados.</item>

  <item>e por último mas não menos importante, você deve saber que ele funciona,
  e já deve tê-lo testado por algum tempo.</item>
  </list>

  <p>Claro que essas coisas são apenas assuntos de segurança, e tem por intenção
  salvar você de atrapalhar usuários se você fizer alguma coisa errado em algum
  servidor setuid... Quando você ganhar mais experiência em empacotar, você
  estará apto a construir tais pacotes, mas mesmo os mais experientes desenvolvedores
  consultam a lista de e-mail debian-devel quando têm dúvidas. E as pessoas irão
  ajudar com prazer.

  <p>Para mais ajuda sobre isso, cheque na Referência do Desenvolvedor.

  <sect id="getit">Pegue o programa e experimente

  <p>Então a primeira coisa a fazer é encontrar e fazer o download do pacote
  original. Eu presumo que você já tenha o código fonte que pegou na página
  do autor. Código fonte para programas livres para Linux normalmente vêm
  no formato tar/gzip, com extensão tar.gz e normalmente contêm o subdiretório
  chamado programa-versão e todos os arquivos fonte nele. Se os fontes do
  seu programa vêm em outro tipo de arquivo (por exemplo, o arquivo termina
  em ".Z" ou ".zip"), descompacte-o com as ferramentas apropriadas ou pergunte
  em debian-mentor (mentores do Debian) se você não tem certeza como
  descompactá-lo corretamente (dica: tente `file arquivo.extensão`).

  <p>Como exemplo, irei usar um programa chamado `gentoo', um gerenciador
  de arquivos feito em GTK+ para X11. Note que o programa já está
  empacotado, e tem mudado substancialmente de versão desde que esse
  texto foi escrito pela primeira vez.

  <p>Crie um subdiretório no seu diretório "home" chamado `debian' ou
  `deb' ou alguma coisa que você ache apropriado (ex. apenas ~/gentoo/
  seria o suficiente nesse caso). Ponha o arquivo que você pegou lá e o
  descompacte (com `tar zxpvf gentoo-0.9.12.tar.gz`). Tenha certeza de
  que não houve erros, mesmo alguns erros "irrelevantes", porque haverá
  certamente problemas com a descompactação em sistemas alheios, nos
  quais as ferramentas de descompactação podem ou não ignorar essas
  anomalias.

  <p>Agora você tem um outro subdiretório chamado `gentoo-0.9.12'. Entre
  nesse diretório e <strong>atentamente</strong> leia a documentação
  disponível. Normalmente há arquivos chamados README*, INSTALL*,
  *.lsm ou *.html. Você deve encontrar instruções sobre como compilar
  corretamente e instalar o programa (provavelmente eles irão assumir
  que você quer instalar no diretório /usr/local/bin; você não fará isso,
  veremos mais detalhes mais a frente em <ref id="destdir">).

  <p>O processo varia de programa para programa, mas muitos dos programas
  atuais vêm com um script `configure' que configura o código sob seu sistema
  e checa se seu sistema tem condições de compilar. Depois de configurar
  (com `./configure`), os programas são normalmente compilados com `make`.
  Alguns deles suportam `make check`, para executar auto checagens inclusas.
  A instalação nos diretórios destino é feita normalmente com `make install`.
  
  <p>Agora tente compilar e rodar seu programa, para ter certeza que ele
  funciona bem e não atrapalha nada enquanto está sendo instalado ou executado.

  <p>Também, você pode normalmente digitar `make uninstall` para remover
  todos os arquivos instalados, e `make clean` (ou melhor `make distclean`) para
  limpar o diretório de construção.

  <sect id="namever">Antes de `dh_make'

  <p>Você deve começar a empacotar com um diretório completamente limpo
  ou simplesmente com os códigos recém descompactados.
  
  <p>Para que o pacote seja construído corretamente, você deve tornar o
  nome original do programa todo minúsculo (se já não for), e deve mover o
  diretório fonte para &lt;nomedopacote&gt;-&lt;versão&gt;.
  
  <p>Se o nome do programa consiste em mais de uma palavra, junte-as
  em apenas uma palavra, ou faça uma abreviação. Por exemplo: o programa
  "Pequeno editor para X do João" seria renomeado para pexjoao ou pexj, ou
  o que você decidir, desde que esteja abaixo de um certo limite, ex: 20
  caracteres.

  <p>Também cheque a versão exata do programa (a ser incluído na versão
  do pacote). Se o programa não está numerado com versões como X.Y.Z, mas
  com algum tipo de data, sinta-se livre para usar a data como um número de
  versão, começado por um "0.0" (apenas para o caso de outras pessoas
  resolverem um dia decidirem criar uma versão melhor como 1.0). Então, se
  o lançamento ou dia de apresentação foi 19 de Dezembro de 1998, você pode
  usar 0.0.19981219. Alguns programas não estarão numerados, nesse caso
  você deve contactar o mantenedor externo e ver se ele tem algum modo
  de controle de revisão.

  <sect id="dh_make">Rodando o `dh_make'

  <p>Esteja certo de que você está no diretório do código fonte do programa
  e digite isso:

  <p><example>
  dh_make -e seu.endereco@de.mantenedor -f ../gentoo-0.9.12.tar.gz
  </example>

  <p>Claro, troque "seu.endereco@de.mantenedor" pelo seu e-mail, para
  inclusão nas entradas do changelog e outros arquivos, e o nome do arquivo
  com o nome do seu arquivo compactado original. Veja
  <manref name="dh_make" section="1"> para detalhes.
 
  <p>Aparecerão informações. Ele vai perguntar que tipo de pacote você
  quer criar. Gentoo é um pacote de apenas um binário - ele cria apenas
  um binário, e assim, um arquivo .deb - então nós vamos selecionar a
  primeira opção, com a tecla `s', cheque as informações na tela e confirme
  pressionando &lt;enter&gt;. Como um novo mantenedor você não é aconselhado
  a criar pacotes com múltiplos binários, ou bibliotecas, como será explicado
  mais tarde. Não é difícil, mas requer um pouco mais de conhecimento,
  então não o descreveremos agora.

  <p>Note que você deve rodar o dh_make <strong>apenas uma vez</strong>,
  e que ele não agirá corretamente se você o fizer pela segunda vez no
  mesmo diretório "debianizado". Isso também significa que você irá usar
  um método diferente para lançar uma nova revisão ou nova versão de seu
  pacote no futuro. Leia mais sobre isso depois em <ref id="update">

  <chapt id="modify">Modificando o código

  <p>Normalmente, os programas se instalam nos subdiretórios de /usr/local/.
  Mas os pacotes Debian não devem usar esse diretório, já que ele é reservado
  ao uso privado dos administradores de sistema (ou usuários). Isso significa que
  você tem que dar uma olhada no sistema de construção do programa, normalmente
  começando pelo Makefile. Esse script é o que é usado pelo  <manref name="make" section="1">
  para automatizar a construção do programa. Para mais detalhes sobre Makefiles,
  olhe em <ref id="rules">.

  <p>Note que se seu programa usa o <manref name="automake" section="1">
  e/ou <manref name="autoconf" section="1"> do GNU, significa que os
  fontes incluem os arquivos Makefile.am e/ou Makefile.in, respectivamente,
  você irá precisar de modificar esses arquivos, porque cada chamada ao
  automake irá rescrever o Makefile.in com informação gerada do Makefile.am
  e cada chamada ao ./configure irá fazer o mesmo com os Makefile's, com dados
  do Makefile.in. Editar arquivos Makefile.am requer um pouco de conhecimento
  sobre o automake, sobre o qual você pode ler na entrada info do automake,
  como escrever arquivos Makefile.in é quase a mesma coisa que escrever arquivos
  Makefile, apenas preste atenção às variáveis, por exemplo, qualquer string
  rodeada de `@'s, por exemplo @CFLAGS@ ou @LN_S@, que são trocadas
  com coisas atuais em cada chamada a ./configure.

  <p>Note também que aqui não há espaço para nos aprofundarmos em <em>todos</em>
  os detalhes de consertos mas aqui vão alguns poucos problemas encontrados
  freqüentemente pelas pessoas.

  <sect id="destdir">Instalando em um subdiretório

  <p>A maioria dos programas têm algum jeito de instalar a si mesmo na
  estrutura de diretórios existente, fazendo com que seus binários
  estejam incluídos no seu $PATH, e que você encontre sua documentação
  e páginas de manual (man pages) nos lugares comuns. Você deve ter
  certeza de que eles o fazem corretamente, mas você tem de instalá-los
  num subdiretório temporário que vai ser criado dentro do seu diretório
  debian/, usualmente chamado <tt>debian/tmp</tt>, do qual as ferramentas
  do mantenedor irão construir um pacote .deb que funciona. Tudo que está
  contido nesse diretório será instalado no sistema do usuário quando ele
  instala o pacote, a única diferença é que o dpkg vai instalar os arquivos
  no diretório raiz.

  <p>Basicamente, você precisa fazer o programa se instalar em debian/tmp,
  mas tem de fazê-lo se comportar corretamente quando colocado no diretório
  raiz, exemplo: quando instalado do pacote .deb. Com programas que usam o
  autoconf do GNU, isso será muito fácil, porque o dh_make irá configurar
  comandos para fazê-lo automaticamente, então você pode saltar essa seção.
  Mas com outros programas, você irá mais provavelmente ter de examinar e
  editar os Makefiles.

  <p>Aqui está a parte relevante do Makefile do gentoo:

  <p><example>
  # Where to put binary on 'make install'?
  BIN     = /usr/local/bin
  # Where to put icons on 'make install'? Note: if you change this,
  # gentoo will not find the icons as it starts up. You're going to
  # have to alter gentoo's icon path (in the config window, "Paths"
  # tab) to get it work.
  ICONS   = /usr/local/lib/gentoo/
  </example>

  <p>Antes disso você deve inserir duas novas linhas dizendo:

  <p><example>
  # Edited for Debian GNU/Linux.
  DESTDIR =
  </example>
  porque o processo de construção requer isso (será explicado mais tarde, em
  <ref id="rules">).

  <p>Então o Makefile menciona a localização do binário final. Apenas mude
  para isso:

  <p><example>
  # Where to put binary on 'make install'?
  BIN     = $(DESTDIR)/usr/X11R6/bin
  </example>

  <p>Mas por que nesse diretório e não em outro? Porque o Debian definiu
  algumas regras sobre onde colocar os programas a serem instalados. Isso
  está especificado no Filesystem Hierarchy Standard (Padrão de Hierarquia
  no Sistema de Arquivos) (veja /usr/share/doc/debian-policy/fhs/). Então,
  nós devemos instalar o binário em /usr/X11R6/bin ao invés de /usr/local/bin,
  e a página de manual (não existe aqui, mas quase todo programa tem uma,
  então faremos uma mais tarde) no /usr/share/man/man1 ao invés de
  /usr/local/man/man1.

  <p>Depois disso temos uma situação um pouco mais complicada. Se você mudar
  uma linha para:

  <p><example>
  ICONS   = $(DESTDIR)/usr/share/gentoo/
  </example>
  que entra em conformidade com a política do Debian, você precisará de editar
  alguns códigos fonte reais em C. Mas onde e o quê procurar? Você pode procurar
  por isso digitando:
  <p><example>
  grep -n usr/local/lib *.[ch]
  </example>
  (em cada subdiretório que contém arquivos .c e .h). O grep irá dizer o nome do
  arquivos e a linha nele, quando ele achar uma ocorrência. Agora edite aqueles
  arquivos e troque usr/local/lib com usr/share - e é isso. Apenas troque
  o usr/local/lib pela sua localização, e fique atento para não atrapalhar o
  resto do código, se você não sabe muito de programação em C. =)

  <p>Depois disso você deve achar o alvo de instalação (procure pela linha que
  começa com `install:') e renomeie todas as referências a diretórios diferentes
  dos definidos no Makefile principal. Anteriormente, o alvo de instalação do gentoo
  era:

  <p><example>
  # ----------------------------------------- Installation

  # You're going to have to be root to do this!
  install:        gentoo
                  install ./gentoo $(BIN)
                  install icons $(ICONS)
                  install gentoorc-example $(HOME)/.gentoorc
  </example>

  <p>Depois das modificações:
  <example>
  # ----------------------------------------- Installation

  # You're going to have to be root to do this!
  install:        gentoo-target
                  install -d $(BIN) $(ICONS) $(DESTDIR)/etc
                  install ./gentoo $(BIN)
                  install -m644 icons/* $(ICONS)
                  install -m644 gentoorc-example $(DESTDIR)/etc/gentoorc
                  install -d $(DESTDIR)/usr/share/doc/gentoo/html
                  cp -a docs/* $(DESTDIR)/usr/share/doc/gentoo/html
  </example>

  <p>Um leitor cuidadoso notará que eu mudei `gentoo' para `gentoo-target'
  na linha `install:'. Isso se chama conserto de erro =)

  <p>Sempre que você fizer mudanças que não são específicas do pacote Debian,
  esteja certo de mandá-las ao mantenedor externo para que elas possam ser
  incluídas na próxima revisão do programa. Note que você não tem que mandar
  os arquivos debian/*, mas deve fazer isso com qualquer outro conserto.
  E tente ser legal ao enviar consertos externos, não os fazendo específicos
  para o Debian ou para Linux (ou mesmo Unix) antes de enviá-los.

  <sect id="difflibs">Diferenciando Bibliotecas

  <p>Há um outro problema comum: bibliotecas são freqüentemente diferentes
  de plataforma para plataforma. Por exemplo, Makefile pode conter uma referência
  a uma biblioteca que não existe no Debian, ou mesmo no Linux. Nesse caso, nós
  temos de mudar isso para uma biblioteca que existe no Debian, e serve ao mesmo
  propósito. O melhor jeito é comentar as linhas porque podem haver outros que irão
  tentar compilar em plataformas diferentes, assim, eles terão algumas dicas de qual
  pode ser o problema.

  <p>Então, se há uma linha no Makefile do seu programa (ou no Makefile.in) que
  diz algo como isso (e seu programa não compila):

  <p><example>
  LIBS = -lcurses -lalgumacoisa -lalgumaoutracoisa
  </example>

  <p>Mude-as para isso, e provavelmente irá funcionar:
  <p><example>
  LIBS = -lncurses -lalgumacoisa -lalgumaoutracoisa
  #LIBS = -lcurses -lalgumacoisa -lalgumaoutracoisa
  </example>

  <chapt id="dreq">Coisas requeridas sob o debian/

  <p>Há um novo subdiretório sob o diretório principal do programa
  (`gentoo-0.9.12'), ele é chamado `debian'. Há alguns arquivos nesse
  diretório. Nós iremos editar esses arquivos para customizar o
  comportamento do pacote. Os mais importantes são `control',
  `changelog', `copyright' e `rules', que são requeridos para todos
  os pacotes.

  <sect id="control">arquivo `control'

  <p>Esse arquivo contém vários valores que dpkg e dselect usaram para
  lidar com o pacote. Aqui está o arquivo control que o dh_make criou para
  nós.

  <p><example>
  1  Source: gentoo
  2  Section: unknown
  3  Priority: optional
  4  Maintainer: Josip Rodin &lt;jrodin@jagor.srce.hr&gt;
  5  Standards-Version: 3.0.1
  6
  7  Package: gentoo
  8  Architecture: any
  9  Depends: ${shlibs:Depends}
  10 Description: &lt;insert up to 60 chars description&gt;
  11  &lt;insert long description, indented with spaces&gt;
  </example>
  (Incluí o número nas linhas.)

  <p>As linhas 1 a 5 são informações de controle para o pacote de código
  fonte. Linha 1 é o nome do pacote fonte.

  <p>Linha 2 é a seção da distribuição na qual o pacote vai. Como você
  pode ter notado, o Debian é dividido nas seções: main (principal - o
  software livre), non-free (não livre - os pacotes não totalmente
  livres) e contrib (software livre que depende de software não livre).
  Sob essas, há subseções lógicas que descrevem resumidamente que
  pacotes estão dentro. Temos a `admin' para programas de administração,
  `base' para as ferramentas básicas, `devel' para ferramentas de
  programadores, `doc' para documentação, `libs' para bibliotecas,
  `mail' para leitores e servidores de email, `net' para aplicativos e
  servidores de rede, `x11' para programas específicos do X11, e muito
  mais.

  <p>Vamos mudá-lo então para x11.

  <p>Linha 3 descreve quão importante é que o usuário instale esse pacote.
  Seção e prioridade são atualmente usadas apenas pelo dselect quando
  ele ordena os pacotes e seleciona padrões, e ele podem (e muito
  provavelmente serão) mudados pelos nossos mantenedores de FTP.
  Veja o manual de Política para um guia sobre o que configurar nos campos.
  
  <p>Como esse é um pacote de prioridade normal, vamos deixá-lo como
  opcional.

  <p>Linha 4 é o nome e o endereço de e-mail do mantenedor.

  <p>Linha 5 é a versão dos padrões de Política Debian que esse pacote segue
  (as duas maiores versões do pacote debian-policy instalado).

  <p>Se algum compilador não padrão ou outra ferramenta é necessária para
  se construir o pacote, você deve adicionar uma linha `Build-Depends' e listar
  os pacotes requeridos. Para maiores informações nisso, leia o Manual de
  Empacotamento (seção 8.7) e a documentação do pacote `build-essential'.

  <p>Linha 7 é o nome do pacote binário.

  <p>Linha 8 descreve as arquiteturas de CPU para as quais o pacote binário
  pode ser compilado. Podemos deixar como "any" porque <manref name="dpkg-gencontrol"
  section="1"> irá preencher o valor apropriado para cada máquina em que esse
  pacote se compile (veja a Referência do Desenvolvedor para uma explicação
  sobre o que é portar pacotes). Se seu pacote é independente de arquitetura
  (por exemplo, um shell ou script Perl, ou documento), mude isso para "all",
  e leia depois em <ref id="rules"> sobre usar a regra `binary-indep' ao invés da
  `binary-arch' para construir o pacote.

  <p>A linha 9 mostra um dos mais poderosos recursos do sistema de
  empacotamento Debian. Pacotes podem relatar outros em vários modos.
  Além de Dependências (Depends:), outras relações são: Recomenda
  (Recommends:), Sugere (Suggests:), Pré-Depende (Pre-Depends:), Conflita
  (Conflicts:), Provê (Provides:) e Substitui (Replaces:).

  <p>As ferramentas de manejo de pacotes como dpkg, dselect ou APT (e seus
  front-ends) normalmente se comportam da mesma maneira quando lidando com
  essas relações; se não, isso será explicado.
  (veja <manref name="dpkg" section="8">, <manref name="dselect" section="8">,
  <manref name="apt" section="8">, <manref name="console-apt" section="8">,
  <manref name="gnome-apt" section="8">)

  <p>Isso é o que elas normalmente significam:

  <p><list>
  <item>Depends:
  <p>O pacote não irá ser instalado a menos que o pacote do qual ele depende
  esteja instalado. Use isso se seu programa absolutamente não irá rodar (ou
  irá causar paradas críticas) a menos que um pacote em particular esteja
  presente.</item>

  <item>Recommends:
  <p>Dselect não instalará seu pacote a menos que o pacote que ele recomenda
  esteja instalado. Dpkg e APT podem deixar que você faça isso, no entanto. Use
  isso para pacotes que não são estritamente necessários mas que são tipicamente
  usados com seu programa.</item>

  <item>Suggests:
  <p>Quando um usuário instalar seu programa, o dselect irá pedir para instalar
  os pacotes que ele sugere. Dpkg e APT não vão ligar muito. Use isso para pacotes
  que irão rodar bem com seu programa mas não são realmente necessários.</item>

  <item>Pre-Depends:
  <p>Esse é mais forte que Depends:. O pacote não irá ser instalado a menos
  que o pacote do qual ele pré depende esteja instalado <em>e corretamente
  configurado</em>. Use isso <strong>com muita</strong> moderação e só
  depois de discutir isso na lista de e-mail debian-devel. Leia: não use isso de
  qualquer modo. =)</item>

  <item>Conflicts:
  <p>O pacote não será instalado até que o pacote que está em conflito com
  ele tenha sido removido. Use isso se seu programa não irá rodar absolutamente
  (ou causará quebras severas) se um pacote em particular está presente.</item>

  <item>Provides:
  <p>Para alguns tipos de pacote onde há muitas alternativas, nomes virtuais
  foram definidos. Você pode pegar a lista completa no arquivo
   /usr/share/doc/debian-policy/virtual-package-names-list.text.gz.
   Use isso se seu programa proporciona uma função de um pacote virtual.</item>

  <item>Replaces:
  <p>Use isso quando seu programa repõe arquivos de outro pacote, ou completamente
  substitui o outro pacote (usado em conjunto com Conflicts:). Arquivos do pacote
  nomeado serão removidos antes de instalar os do seu.
  </item>
  </list>

  <p>Todos esses campos tem sintaxe uniforme. Eles são uma lista de pacotes
  separados por vírgulas. Esses nomes de pacotes podem também ser listas
  de pacotes alternativos, separados pela barra vertical <tt>|</tt> (símbolo
  de pipe(cano)). Os campos podem restringir sua aplicabilidade para versões
  particulares de cada pacote nomeado. Esses versão são listadas em parênteses
  depois de cada nome de pacote individual, e eles devem conter uma relação
  da lista abaixo seguido do número de versão. As relações permitidas são:
  <tt>&lt;&lt;</tt>, <tt>&lt;=</tt>, <tt>=</tt>, <tt>&gt;=</tt> e
  <tt>&gt;&gt;</tt> para estritamente menor, menor ou igual, exatamente
  igual, maior ou igual e estritamente maior, respectivamente.
  
  <p>O último recurso que você precisa saber é $(shlibs:Depends). Ele vai
  ser automaticamente gerado pelo <manref name="dh_shlibdeps" section="1">
  e preenchido pelo <manref name="dh_gencontrol" section="1"> com os nomes
  de qualquer biblioteca compartilhada que o programa use, como libc6 ou xlib6g,
  então você não precisa especificá-las você mesmo. Dito isso, podemos deixar
  a linha 9 do jeitinho que está.

  <p>A linha 10 é onde vai a lista de. Aqui é apenas `file'  porque o gentoo
  pode usar alguns recursos desse programa/pacote.

  <p>Linha 11 é a breve descrição. A maioria das telas das pessoas tem
  80 colunas então ela não deve ser maior que 60 caracteres. Vou colocar:
  "A fully GUI configurable GTK+ file manager" (Um gerenciador de arquivos
  feito em GTK+ totalmente configurável graficamente).

  <p>Linha 12 é onde vai a descrição longa. Ela deve ter um parágrafo que
  dá mais detalhes sobre o pacote. Coluna 1 de cada linha deve estar vazia.
  Não deve haver linhas em branco, mas você pode por um . (ponto) numa coluna
  para simular isso. Também, deve haver não mais que uma linha em branco
  depois da descrição longa..

  <p>Aqui está o arquivo control atualizado:

  <p><example>
  1  Source: gentoo
  2  Section: x11
  3  Priority: optional
  4  Maintainer: Josip Rodin &lt;jrodin@jagor.srce.hr&gt;
  5  Standards-Version: 3.0.1
  6
  7  Package: gentoo
  8  Architecture: any
  9  Depends: ${shlibs:Depends}
  10 Suggests: file
  11 Description: A fully GUI configurable GTK+ file manager
  12  gentoo is a file manager for Linux written from scratch in pure C. It
  13  uses the GTK+ toolkit for all of its interface needs. gentoo provides
  14  100% GUI configurability; no need to edit config files by hand and re-
  15  start the program. gentoo supports identifying the type of various
  16  files (using extension, regular expressions, or the 'file' command),
  17  and can display files of different types with different colors and icons.
  18  .
  19  gentoo borrows some of its look and feel from the classic Amiga file
  20  manager "Directory OPUS" (written by Jonathan Potter).
  </example>
  (Adicionei os números de linha.)

  <sect id="copyright">`copyright' file

  <p>Esse arquivo contém a informação sobre os recursos externos do pacote,
  copyright e informações de licença. Seu formato não é ditado pela Política,
  mas o conteúdo é (seção 6.5). Dh_make cria um padrão, ele é assim:

  <p><example>
  1  This package was debianized by Josip Rodin &lt;jrodin@jagor.srce.hr&gt; on
  2  Wed, 11 Nov 1998 21:02:14 +0100.
  3
  4  It was downloaded from &lt;fill in ftp site&gt;
  5
  6  Upstream Author(s): &lt;put author(s) name and email here&gt;
  7
  8  Copyright:
  9
  10 &lt;Must follow here&gt;
  </example>
  (Adicionei os números de linha.)

  <p>As coisas importantes a serem adicionadas a esse arquivo são o lugar
  de onde você pegou o pacote e a licença e nota de copyright atuais. Você
  deve incluir a licença completa a menos que seja uma das licenças comuns
  de software livre como a GNU GPL ou LGPL, BSD ou a Artistic license,
  quando você pode apenas referir ao arquivo apropriado no diretório
  /usr/share/common-licenses/ que existe em todo sistema Debian. O
  Gentoo está licenciado sob a Licença Pública Geral GNU (GNU GPL -
  General Public License), então nós poderemos modificar o arquivo assim:

  <p><example>
  1  This package was debianized by Josip Rodin &lt;jrodin@jagor.srce.hr&gt; on
  2  Wed, 11 Nov 1998 21:02:14 +0100.
  3
  4  It was downloaded from: ftp://ftp.obsession.se/gentoo/
  5
  6  Upstream author: Emil Brink &lt;emil@obsession.se&gt;
  7
  8  This software is copyright (c) 1998-99 by Emil Brink, Obsession
  9  Development.
  10
  11 You are free to distribute this software under the terms of
  12 the GNU General Public License.
  13 On Debian systems, the complete text of the GNU General Public
  14 License can be found in /usr/share/common-licenses/GPL file.
  </example>
  (Adicionei os números de linha.)

  <sect id="changelog">arquivo `changelog'

  <p>Esse é um arquivo requerido, que tem um formato especial descrito
  no Manual de Empacotamento (seção 3.2.3). Esse formato é usado pelo
  dpkg e pelos outros programas para obter o número de versão, revisão,
  distribuição e urgência de seu pacote.

  <p>Para você, também é importante, já que é bom ter documentadas todas
  as mudanças feitas. Ele irá ajudar as pessoas que pegarem seu pacote
  a ver se há qualquer problema não resolvido com o pacote sobre o qual
  eles devem saber instantaneamente. Ele irá ser salvo como
  `/usr/share/doc/gentoo/changelog.Debian.gz' no pacote binário.

  <p>Dh_make cria um arquivo padrão que é assim:

  <p><example>
  1  gentoo (0.9.12-1) unstable; urgency=low
  2
  3   * Initial Release.
  4
  5  -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt; Wed, 11 Nov 1998 21:02:14 +0100
  6
  7  Local variables:
  8  mode: debian-changelog
  9  End:
  </example>
  (Eu adicionei os números às linhas.)

  <p>Linha 1 é o nome do pacote, versão, distribuição e urgência. O nome
  deve ser o mesmo do nome do pacote fonte, distribuição deve ser
  ou `unstable' (instável) ou `experimental' (por agora), e urgência
  não deve ser mudada para nada maior que `low' (baixa). =)
  
  <p>Linhas 3 a 5 são as entradas do log, onde você documenta as mudanças
  feitas nessa revisão do pacote (não as mudanças externas - há um arquivo
  especial para esse propósito, criado pelos autores externos, instalado como
  /usr/share/doc/gentoo/changelog.gz). Novas linhas devem ser inseridas apenas
  antes da linha mais acima que começa com um asterisco (`*'). Você pode fazê-lo
  com  <manref name="dch" section="1">, <manref name="emacs" section="1">
  (linhas 7-9 contêm informações de modo para o editor Emacs), ou qualquer outro
  editor de texto. Você terá algo assim:

  <p><example>
  1  gentoo (0.9.12-1) unstable; urgency=low
  2
  3   * Initial Release.
  4   * This is my first Debian package.
  5   * Adjusted the Makefile to fix $DESTDIR problems.
  6
  7  -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt; Wed, 11 Nov 1998 21:02:14 +0100
  8
  9  Local variables:
  10  mode: debian-changelog
  11 End:
  </example>
  (Adicionei os números de linha.)

  <p>Quando você lança uma nova revisão, você precisa aumentar o número de
  versão. Você pode fazê-lo com `dch -i' ou explicitamente `dch -v 
  &lt;versão&gt;-&lt;revisão&gt;` e então inserir os comentários usando
  seu editor preferido. Dica: como colocar a data no formato requerido facilmente?
  Use `822-date' ou `date -R'.

  <p>A informação de nova versão é adicionada no topo do changelog. O changelog
  fica assim depois:
  
  <p><example>
  1  gentoo (0.9.12-2) unstable; urgency=low
  2
  3   * Fixed a glitch in the menu file.
  4
  5  -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt; Wed, 11 Nov 1998 22:15:39 +0100
  6
  7  gentoo (0.9.12-1) unstable; urgency=low
  8
  9   * Initial Release.
  10  * This is my first Debian package.
  11  * Adjusted the Makefile to fix $DESTDIR problems.
  12
  13 -- Josip Rodin &lt;jrodin@jagor.srce.hr&gt; Wed, 11 Nov 1998 21:02:14 +0100
  14
  15 Local variables:
  16 mode: debian-changelog
  17 End:
  </example>
  (Adicionei os números de linha.)

  <p>Você pode ler mais sobre novas versões/revisões de pacote mais tarde em
  <ref id="update">.

  <sect id="rules">o arquivo `rules'

  <p>Agora precisamos dar uma olhada nas regras exatas que o 
  <manref name="dpkg-buildpackage" section="1"> irá usar para criar o 
  pacote. Esse arquivo é atualmente outro Makefile, já que é executado com
  `make -f', mas diferente do que está no código externo.

  <p>Cada arquivo `rules', como qualquer outro Makefile, consiste em 
  várias regras especificando como manipular o código. Cada regra consiste
  de alvos, nomes de arquivos ou ações que devem ser carregadas (ex: `build:'
  ou `install:'). Regras que você quer executar são chamadas como argumentos
  na linha de comando (por exemplo, `./debian/rules build` ou `make -f rules
  install`). Depois do nome do alvo, você pode nomear a dependência, 
  programa ou arquivo do qual essa regra depende. Depois disso, pode
  haver qualquer número de comandos (indentados com &lt;tab&gt;!), até que uma
  linha vazia é encontrada. Aí começa uma nova regra. Múltiplas linhas vazias,
  e linhas iniciadas com `#' (hash) são tratadas como comentários ou ignoradas.

  <p>Você está provavelmente confuso agora, mas isso estará mais claro depois
  de examinarmos o arquivo `rules' que o dh_make nos dá como padrão. Você deve
  também ler a entrada `make' no info (`info make`) para mais informações.

  <p>A parte importante sobre o arquivo rules criado pelo dh_make, é que ele
  é apenas uma sugestão. Ele funcionará para programas simples mas não para
  programas mais complicados, não tenha medo de retirar ou adicionar linhas
  dele para suprir suas necessidades. A única coisa que você não deve mudar
  são os nomes das regras, porque todas as ferramentas usam esses nomes, 
  como é descrito no Manual de Empacotamento.

  <p><example>
  1  #!/usr/bin/make -f
  2  # Made with the aid of dh_make, by Craig Small
  3  # Sample debian/rules that uses debhelper. GNU copyright 1997 by Joey Hess.
  4  # Some lines taken from debmake, by Christoph Lameter.
  5
  6  # Uncomment this to turn on verbose mode.
  7  #export DH_VERBOSE=1
  8
  9  # This is the debhelper compatability version to use.
  10 export DH_COMPAT=1
  11
  12 build: build-stamp
  13 build-stamp:
  14	dh_testdir
  15
  16	# Add here commands to compile the package.
  17	$(MAKE)
  18
  19	touch build-stamp
  20
  21 clean:
  22	dh_testdir
  23	dh_testroot
  24	rm -f build-stamp
  25
  26	# Add here commands to clean up after the build process.
  27	-$(MAKE) clean
  28
  29	dh_clean
  30
  31 install: build-stamp
  32	dh_testdir
  33	dh_testroot
  34	dh_clean -k
  35	dh_installdirs
  36
  37	# Add here commands to install the package into debian/tmp.
  38	$(MAKE) install DESTDIR=`pwd`/debian/tmp
  39
  40 # Build architecture-independent files here.
  41 binary-indep: build install
  42 # We have nothing to do by default.
  43
  44 # Build architecture-dependent files here.
  45 binary-arch: build install
  46 #	dh_testversion
  47	dh_testdir
  48	dh_testroot
  49 #	dh_installdebconf
  50	dh_installdocs
  51	dh_installexamples
  52	dh_installmenu
  53 #	dh_installemacsen
  54 #	dh_installpam
  55 #	dh_installinit
  56	dh_installcron
  57	dh_installmanpages
  58	dh_installinfo
  59 #	dh_undocumented
  60	dh_installchangelogs
  61	dh_link
  62	dh_strip
  63	dh_compress
  64	dh_fixperms
  65	# You may want to make some executables suid here.
  66	dh_suidregister
  67 #	dh_makeshlibs
  68	dh_installdeb
  69 #	dh_perl
  70	dh_shlibdeps
  71	dh_gencontrol
  72	dh_md5sums
  73	dh_builddeb
  74
  75 binary: binary-indep binary-arch
  76 .PHONY: build clean binary-indep binary-arch binary install
  </example>
  (Eu adicionei os números de linha.)

  <p>Você é provavelmente familiarizado com as linhas como a 1 de scripts
  shell ou Perl. Ela diz ao sistema operacional que esse arquivo é para ser 
  processado com /usr/bin/make.

  <p>Linhas 12 a 19 descrevem a regra `build' (e seu filho `build-stamp'),
  que roda o Makefile da própria aplicação para compilar o programa.

  <p>A regra `clean', especificada nas linhas 21 a 29, limpam qualquer
  binário desnecessário ou coisas auto geradas, deixadas da construção
  do pacote. Essa regra precisa estar funcionando todo o tempo (mesmo 
  quando a árvore de código <em/é/ limpa!), então por favor use 
  as opções de força (ex: para rm, a opção `-f'), ou ignore valores 
  de retorno (com um `-' na frente de cada comando).

  <p>O processo de instalação, a regra `install', começa na linha 31.
  Ela basicamente roda a regra `install' do Makefile do próprio
  programa, mas instala no diretório `pwd`/debian/tmp - que é o 
  porque de nós especificarmos $(DESTDIR) como o diretório 
  de instalação root no Makefile do gentoo.

  <p>Como o comando sugere, a regra `binary-indep', na linha 41, é usada para
  construir pacotes independentes de arquitetura. Como não temos nenhum,
  nada será feito aqui. Se seu pacote é `Architecture: all', você precisa
  incluir todos os comandos para construir o pacote sob essa regra, e deixar
  a próxima regra (`binary-arch') vazia.

  <p>Na próxima regra - `binary-arch', nas linhas 45 até 73, nas quais nós 
  rodamos vários pequenos utilitários do pacote debhelper que fazem várias
  operações nos arquivos do seu pacote para fazer o pacote conformar com
  a Política.
  
  <p>Os nomes começam com dh_, e o resto é a descrição de o que aquele
  utilitário em particular faz realmente. Ele é bastante auto-explicativo, 
  mas aqui estão algumas explicações adicionais:

  <list>
  <item><manref name="dh_testdir" section="1"> checa se você está no
  diretório correto (ex: o diretório principal do fonte).
  <item><manref name="dh_testroot" section="1"> checa se você tem 
  permissões de root que são necessárias para alvos binary*, e clean.
  <item><manref name="dh_installmanpages" section="1"> copia todas
  as páginas de manual que pode encontrar na árvore de diretórios do fonte
  do pacote (tome cuidado, ele é WIM).
  <item><manref name="dh_strip" section="1"> tira os cabeçalhos de debugging
  dos arquivos executáveis e bibliotecas, para fazê-los menores.
  <item><manref name="dh_compress" section="1"> gzipa as páginas de manual
  e documentação com tamanho acima de 4 kB.
  <item><manref name="dh_installdeb" section="1"> copia arquivos relacionados
  com o pacote (ex: os scripts do mantenedor) sob o diretório debian/tmp/DEBIAN.
  <item><manref name="dh_shlibdeps" section="1"> calcula as dependências de 
  bibliotecas compartilhadas das bibliotecas e executáveis.
  <item><manref name="dh_gencontrol" section="1"> adiciona coisas ao arquivo
  control e o instala.
  <item><manref name="dh_md5sums" section="1"> gera checksums MD5 para todos
  os arquivos do pacote.
  </list>

  <p>Para informações mais completas sobre o que cada um desses
  scripts dh_* faz, e quais suas opções, leia suas respectivas páginas
  de manual. Há alguns outros, possivelmente muitos e úteis scripts
  dh_*, que não foram mencionados aqui. Se você precisar deles, leia 
  a documentação do debhelper.

  <p>A seção binary-arch é onde você deve realmente comentar algumas
  linhas que chamam recursos que você não precisa. Para gentoo, eu irei
  comentar linhas sobre testversion, emacsen, pam, init, cron, manpages,
  info, undocumented, suidregister, makeshlibs e perl, simplesmente porque
  o gentoo não precisa delas. Também, na linha 60, irei precisar adicionar 
  `FIXES', porque esse é o nome do changelog externo.

  <p>As últimas duas linhas (junto com quaisquer outras linhas não explicadas
  são apenas algumas coisas mais ou menos necessárias, considerando as
  que você pode ler no manual do make, e no Manual de Empacotamento.
  Por agora, elas não são importantes para se saber.

  <chapt id="dother">Outros arquivos no debian/

  <p>Você verá que existem vários outros arquivos dentro do subdiretório
  debian/, a maioria deles com o sufixo `.ex', significando que eles são
  exemplos. Se você deseja ou precisa usar qualquer desses recursos, 
  examine-os e sua documentação relacionada (dica: o Manual de Política), 
  renomeie-os para remover o sufixo `.ex', e modifique-os e o arquivo
  rules se necessário. Alguns desses arquivos, aqueles comumente usados,
  são explicados nas seções seguintes.

  <sect id="readme">README.Debian

  <p>Qualquer detalhe extra ou discrepâncias entre o pacote original
  e sua versão 'debianizada' devem ser documentadas aqui. DH_make cria
  um padrão, ele é assim:

  <example>
  gentoo for Debian
  ----------------------

  &lt;possible notes regarding this package - if none, delete this file&gt;

  Josip Rodin &lt;jrodin@jagor.srce.hr&gt;, Wed, 11 Nov 1998 21:02:14 +0100
  </example>

  <p>Já que não temos nada para colocar aqui - é permitida a deleção desse
  arquivo.


  <sect id="conffiles">conffiles

  <p>Uma das coisas mais chatas dos softwares é quando você gasta um
  grande tempo e esforço customizando um programa apenas para vir uma
  atualização e perder suas mudanças. O Debian resolve esse problema
  marcando os arquivos de configuração para que quando você atualize
  um pacote ele pergunte se você quer manter sua velha configuração ou
  não. Você faz isso entrando o caminho completo de cada arquivo de
  configuração (eles estão normalmente no /etc) um por linha, num arquivo
  chamado conffiles.

  <p>Gentoo tem um conffile, /etc/gentoorc, e nós iremos colocá-lo no
  arquivo `conffiles'. Não é necessário atualmente ter aquele arquivo,
  se seu programa não tem arquivos de configuração.

  <sect id="dirs">dirs

  <p>Esse arquivo especifica os diretórios que nós precisamos mas que
  a instalação normal, por alguma razão, não cria.

  Por padrão, ele é assim:
  <p><example>
  usr/bin
  usr/sbin
  </example>

  <p>Note que a barra inicial não é incluída. Nós normalmente o teríamos 
  modificado para ficar assim:
  
  <p><example>
  usr/X11R6/bin
  usr/X11R6/man/man1
  </example>
  
  mas esses diretórios já são criados no Makefile, então nós não precisamos
  desses arquivos, podemos deletá-los.

  <sect id="manpage">manpage.1.ex

  <p>Os arquivos que terminam com *.ex são exemplos de como adicionar
  um tipo de suporte no pacote. Para usar um deles, edite e remova a
  extensão .ex dele. Se você não quer usá-lo, apenas delete.

  <p>Seu programa deve ter uma página de manual. Se não, esse é o esqueleto
  que você pode preencher. Veja as páginas de manual do 
  <manref name="man" section="7"> para uma breve descrição do nome
  do programa de como criar uma página de manual. Esteja certo de
  renomear esse arquivo para o nome do programa e fazer a extensão
  dele a seção do manual para que ele deve ir. Aqui uma pequena lista:

  <p><example>
  Section |     Description     |     Notes
     1      Comandos do usuário          Comandos executáveis ou scripts.
     2     Chamadas de sistema          Funções providas pelo kernel.
     3     Chamadas de biblioteca      Funções dentro de bibliotecas de sistema.
     4     Arquivos especiais             Normalmente encontrados no /dev.
     5     Formatos de arquivos          Ex: o formato do /etc/passwd
     6     Jogos                                    Ou outros programas do gênero
     7     Pacotes de macro                 Como macros man.
     8     Administração do Sistema  Programas tipicamente rodados pelo root.
     9     Rotinas de Kernel                 Chamadas não-padrão.
  </example>
  
  <p>Então a página de manual do gentoo deve ser chamada gentoo.1, ou gentoo.1x
  porque ele é um programa de X. Não havia a página de manual gentoo.1 então eu
  a escrevi usando informações do exemplo e de documentos externos.

  <sect id="menu">menu.ex

  <p>Usuários de X normalmente têm um gerenciador de janelas com um menu
  que pode ser customizado para executar programas. Se eles instalaram 
  o pacote "menu" do Debian, um conjunto de menus para cada programa
  será criado para eles. Isso não é requerido pela Política Debian, mas os 
  usuários vão certamente gostar. Nós podemos adicionar o Gentoo aos menus
  editando esse arquivo. Aqui está o padrão que o dh_make cria:
  
  <p><example>
  ?package(gentoo):needs=X11|text|vc|wm section=Apps/see-menu-manual\
    title="gentoo" command="/usr/bin/gentoo"
  </example>

  <p>O primeiro campo especifica que tipo de interface o programa precisa
  (ex: texto ou X11). O próximo é a entrada de menu e submenu que ele deve
  entrar. A lista atual de seções está em: 
  /usr/share/doc/debian-policy/menu-policy.html/ch2.html#s2.1
  O terceiro campo é o nome do programa. O quarto é o ícone para o programa ou
  nada se não há um. O quinto é o texto que aparecerá no menu. Finalmente,
  o sexto é o comando que roda o programa.

  <p>Vamos mudar a entrada de menu para:
  <p><example>
  ?package(gentoo):needs=X11 section=Apps/Misc \
    title="Gentoo" command="/usr/X11R6/bin/gentoo"
  </example>

  <p>Veja <manref name="menufile" section="5">, <manref name="update-menus" section="1">
  e /usr/share/doc/debian-policy/menu-policy.html/ para maiores informações.

  <sect id="watch">watch.ex

  <p>Você pode usar esse arquivo em adição aos programas <manref name="uscan" section="1">
  e <manref name="uupdate" section="1"> (no pacote devscripts)
  para scanear o site de onde você pegou o código original do programa. Aqui está o que eu
  pus:

  <p><example>
  # watch control file for uscan
  # Site		Directory	Pattern			Version	Script
  ftp.obsession.se	/gentoo		gentoo-(.*)\.tar\.gz	debian	uupdate
  </example>

  <p>Dica: conecte à Internet e tente rodar "uscan" no diretório do programa depois
  de criar esse arquivo. E leia a página de manual.
  
  <sect id="doc-base">ex.doc-base

  <p>Se seu pacote tem documentação em HTML ou outro tipo (exceto páginas de manual
  e documentos de info), você deve usar o arquivo `doc-base' para registrá-lo,
  então o usuário poderá encontrá-lo com ex: <manref name="dhelp" section="1"> ou
  <manref name="dwww" section="1">.

  <p>É assim que o arquivo doc-base do gentoo fica:

  <p><example>
  Document: gentoo
  Title: Gentoo Manual
  Author: Emil Brink
  Abstract: This manual describes what Gentoo is, and how it can be used.
  Section: Apps/Tools

  Format: HTML
  Index: /usr/share/doc/gentoo/html/index.html
  Files: /usr/share/doc/gentoo/html/*.html
  </example>

  <p>Para informação sobre formato do arquivo, veja <manref name="install-docs" section="8">
  e o manual do doc-base, em /usr/doc/doc-base/doc-base.html/index.html.

  <sect id="maintscripts">postinst.ex, preinst.ex, postrm.ex, prerm.ex

  <p>Esses arquivos são chamados scripts do mantenedor, scripts que são colocados 
  na área de controle do pacote e executadas pelo dpkg quando seu pacote é
  instalado, atualizado ou removido.

  <p>Por agora, você deve tentar evitar editar manualmente scripts de mantenedor
  se você puder porque eles tendem a se tornar complexos. Para mais informações
  olhe no Manual de Empacotamento, seção 6, e olhe esses arquivos de exemplo 
  providos pelo dh_make.

  <p>Nós devemos agora estar prontos para construir o pacote.

  <chapt id="final">Passos finais

  <sect id="build">Construindo o pacote

  <p>Entre no diretório principal do programa e então execute o seguinte comando:

  <p><example>
  dpkg-buildpackage -rfakeroot
  </example>

  <p>Isso irá fazer tudo por você, você terá apenas que digitar sua senha PGP secreta
  duas vezes. Depois disso, você verá quatro novos arquivos no diretório acima
  (~/debian/):

  <p><list>
  <item><em>gentoo_0.9.12-1_i386.deb</em>
  <p>Esse é o pacote binário completado. Você pode usar dpkg ou dselect para instalar
  e removê-lo como qualquer outro pacote.

  <item><em>gentoo_0.9.12.orig.tar.gz</em>
  <p>Esse é o código fonte original feito para que, se alguém quiser recriar seu pacote
  do começo, eles poderão. Ou se eles não estão usando o sistema de empacotamento Debian,
  mas precisam fazer o download manual do código e compilar.

  <item><em>gentoo_0.9.12-1.dsc</em>
  <p>Esse é um sumário do conteúdo do código fonte. O arquivo é gerado do arquivo
  gentoo-0.9.12/debian/control, e é usado quando se desempacota o código com 
  <manref name="dpkg-source" section="1">. Esse arquivo é assinado com PGP, 
  para que as pessoas possam ter certeza que ele é realmente seu.

  <item><em>gentoo_0.9.12-1.diff.gz</em>
  <p>Esse arquivo comprimido contém cada e toda adição que você fez ao código fonte
  original, na forma conhecida como "unified diff". Isso é feito e usado pelo 
  <manref name="dpkg-source" section="1">.

  <item><em>gentoo_0.9.12-1_i386.changes</em>
  <p>Esse arquivo descreve todas as mudanças feitas na revisão atual do  pacote e 
  é usado pelos programas de manutenção do arquivo de FTP Debian para instalar
  é os pacotes binários e fonte em si. É parcialmente gerado do arquivo
  é gentoo-0.9.12/debian/changelog e do arquivo .dsc.

  <p>Enquanto você trabalha no pacote, comportamentos irão mudar e novos
  recursos serão adicionados. Pessoas que fizerem o download do seu pacote
  podem olhar nesse arquivo e ver rapidamente o que mudou. Os grandes números
  são checksums MD5 para os arquivos mencionados. Pessoas que fizerem o
  download dos seus arquivos podem testá-los com 
  <manref name="md5sum" section="1"> e se os números não forem iguais, eles
  saberão que o arquivo está corrompido ou foi hackeado. Esse arquivo é assinado
  com PGP, para que as pessoas possam ter maior certeza de que é realmente seu.
  </list>

  <p>Com um pacote grande, você pode não querer reconstruir do início tudo de novo
  a cada vez que você arruma um detalhe no debian/rules. Para propósito de teste, 
  você pode fazer um arquivo .deb sem reconstruir os códigos externos assim:

  <p><example>
  fakeroot debian/rules binary
  </example>

  <p>Tenha certeza que sua regra `install' <strong/não/ tem
  a `install-stamp' (é o padrão dos dias atuais), para ter certeza de que
  o `dh_clean -k` é executado a cada vez. E uma vez terminadas as limpezas,
  lembre-se de reconstruir seguindo o procedimento correto, para estar
  apto a enviá-lo corretamente.

  <sect id="checkit">Checando o pacote para erros

  <p>Rode <manref name="lintian" section="1"> no seu arquivo .changes; esse programa
  irá checar por muitos erros de empacotamento. O comando é:
  
  <p><example>
  lintian -i gentoo_0.9.12-1_i386.changes
  </example>
  
  <p>Claro que você deve trocar o nome do arquivo com o nome do arquivo
  .changes gerado para seu pacote. Se parecer haver alguns erros (linhas
  iniciando com E:), leia a explicação (as linhas N:), corrija os erros e
  reconstrua como descrito em <ref id="build">. Se há linhas que comecem
  com W:, esses são apenas avisos, então você pode ter certeza que seu pacote
  está ok (mas provavelmente precisa de algum pequeno conserto).

  <p>Note que você pode construir o pacote com dpkg-buildpackage e rodar
  lintian em apenas um comando com <manref name="debuild" section="1">.

  <p>Olhe dentro do pacote usando um gerenciador de arquivos como 
  <manref name="mc" section="1">, ou descompacte-o num lugar temporário 
  usando <manref name="dpkg-deb" section="1">. Olhe sempre alerta para 
  arquivos não necessários tanto no pacote binário como no fonte, em caso
  de alguma coisa dar errado e alguma coisa não ser limpada. Dicas: 
  `zgrep ^+++ ./gentoo_0.9.12-1.diff.gz` dará a você uma lista de suas 
  mudanças/adições nos arquivos fonte, e `dpkg-deb -c gentoo_0.9.12-1_i386.deb`
  listará os arquivos no pacote.

  <p>Instale o pacote para testar você mesmo, ex: usando o comando
  <manref name="debi" section="1"> como root. Tente instalar e rodá-lo
  em máquinas diferentes e olhar atentamente pelos avisos ou erros na 
  instalação ou execução do programa.

  <p>Depois, quando você construir uma nova versão, você deve fazer o seguinte
  para assegurar a possibilidade de atualização do pacote:

  <list>
  <item>atualize da versão anterior (e da versão na última versão do Debian),
  <item>desatualize de novo,
  <item>instale o pacote como um novo pacote (ex.: sem nenhuma versão instalada antes).
  <item>desinstale, reinstale de novo, e então expurgue ele.
  </list>

  <sect id="upload">Enviando o pacote

  <p>Agora que você testou seu novo pacote minuciosamente, você precisa enviar os
  arquivos para master.debian.org, usando <manref name="dupload" section="1">.
  Primeiro você tem de configurar o arquivo de configuração do dupload, ~/.dupload.conf . 
  Ponha algo assim nele:

  <p><example>
  package config;
  $default_host = "master";
  
  $cfg{"master"}{"method"} = "scpb";
  $cfg{"master"}{"login"} = "joy";
  $cfg{"master"}{"visibleuser"} = "jrodin";
  $cfg{"master"}{"visiblename"} = "jagor.srce.hr";
  $cfg{"master"}{"fullname"} = "Josip Rodin";
  
  $cfg{"non-us"}{"method"} = "scpb";
  $cfg{"non-us"}{"login"} = "joy";
  $cfg{"non-us"}{"visibleuser"} = "jrodin";
  $cfg{"non-us"}{"visiblename"} = "jagor.srce.hr";
  $cfg{"non-us"}{"fullname"} = "Josip Rodin";
  
  1;
  </example>

  <p>É claro, mude minhas configurações pessoais pelas suas, e leia a página
  de manual do <manref name="dupload.conf" section="5"> para entender o
  que cada uma dessas opções significa.

  <p>Então conecte-se à Internet e digite esse comando:
  
  <p><example>
  dupload --to master gentoo_0.9.12-1_i386.changes
  </example>

  <p>Dupload irá checar se os checksums md5 dos arquivos batem com
  os do arquivo .changes, então irá avisar a você para reconstruir o pacote
  como descrito em <ref id="build"> para poder propriamente enviar.

  <p>Dupload irá perguntar sua senha no master.debian.ogr, enviar os
  pacotes, dar um pequeno anúncio sobre seu envio em
  <email/debian-devel-changes@lists.debian.org/ se necessário.

  <p>Se você mora na Europa, você pode usar alguns outros servidores
  de envio ao invés do master. Para detalhes olhe em 
  <manref name="dupload" section="1">,
  <manref name="dupload.conf" section="5"> e na Referência do 
  Desenvolvedor.

  <sect id="update">Atualizando o pacote

  <p>Vamos dizer que um relatório de erro tenha sido preenchido sobre 
  seu pacote, #54321 e ele descreve um problema que você pode resolver. 
  Para criar uma nova revisão do pacote Debian, você precisa de:

  <list>
  <item>Corrigir o problema no fonte do pacote, claro.

  <item>Adicionar uma nova revisão no arquivo changelog do Debian, 
  com `dch -i` e incluir uma pequena descrição do problema e sua
  solução, seguido disse: "Closes: #54321". Desse modo, o relatório
  de erro será automaticamente fechado pelo software do manutenção
  de arquivamento no momento que seu pacote for aceito no arquivo
  do Debian.

  <item>Repita o que você fez em <ref id="build">, <ref id="checkit">,
  e <ref id="upload">. A diferença é que dessa vez o fonte original
  não será incluído, por ele não ter mudado e já existir no arquivo do
  Debian.
  </list>

  <p>Agora vamos considerar uma situação diferente, um pouco mais 
  complicada - uma nova versão externa foi lançada, e claro, você quer
  empacotá-la. Você precisa fazer o seguinte:

  <list>
  <item>Fazer o download do código fonte e colocar o tarball (e.g. chamado
  `gentoo-0.9.13.tar.gz') no diretório acima da velha árvore de código (ex:
  ~/debian/).

  <item>Entre no velho diretório fonte e execute:
  <example>
  uupdate -u gentoo-0.9.13.tar.gz
  </example>

  Claro, troque esse nome de arquivo pelo nome do arquivo de fonte do seu 
  programa. <manref name="uupdate" section="1"> irá propriamente 
  renomear seu .diff.gz anterior, e atualizará o novo debian/changelog.

  <item>Vá ao diretório `../gentoo-0.9.13', a nova árvore fonte do pacote,
  e repita o que você fez em <ref id="build">, <ref id="checkit">, e
  <ref id="upload">.
  </list>

  <p>Note que se você configurou `debian/watch' como descrito em
  <ref id="watch">, você pode rodar <manref name="uscan" section="1"> 
  para automaticamente olhar por fontes revisados, faça download deles,
  e rode uupdate.

  <sect id="helpme">Onde pedir por ajuda

  <p>Antes de decidir perguntar em algum lugar público, por favor apenas
  RTFM. Isso inclui documentação em /usr/share/doc/dpkg,
  /usr/share/doc/debian, /usr/share/doc/package/* e as páginas de manual
  e de info de todos os programas mencionados nesse artigo. Quando
  você receber um relatório de erros (sim, relatórios atuais de erros!), 
  você saberá que é hora de cavar no 
  <url name="Debian Bug Tracking System (Sistema de Procura de Erros" id="http://www.debian.org/Bugs/">
  e ler a documentação de lá, para estar apto a lidar com esses relatórios
  eficientemente.

  <p>Entrando na lista de Mentores do Debian em <email/debian-mentors@lists.debian.org/
  você pode se relacionar com desenvolvedores experientes que irão ajudá-lo
  com dúvidas que você possa ter. Você pode se inscrever enviando um
  e-mail para <email/debian-mentors-request@lists.debian.org/ com a palavra
  `subscribe' no assunto da mensagem.

  <p>Se você ainda tem dúvidas, pergunte na lista dos Desenvolvedores Debian
  em <email/debian-devel@lists.debian.org/. Você pode se inscrever nela
  enviando um e-mail para <email/debian-devel-request@lists.debian.org/ 
  com a palavra `subscribe' no assunto da mensagem. Se você é um 
  desenvolvedor Debian, você deve ser inscrito de qualquer modo.

  <p>Mesmo se tudo foi bem, é hora de começar a jogar. Por quê? Porque
  em poucas horas (ou dias) os usuários de todo o mundo irão começar
  a usar seu pacote, e se você fez erros críticos você receberá e-mails
  bomba de numerosos usuários do Debian nervosos... Tô brincando. =)

  <p>Relaxe e esteja pronto para relatórios de erro, porque há muito trabalho
  a ser feito antes de estar totalmente endireitado com as políticas do Debian
  (mais uma vez leia a <em>documentação real</em> para detalhes. Boa Sorte!

 </book>

</debiandoc>
