<!DOCTYPE debiandoc PUBLIC "-//DebianDoc//DTD DebianDoc//EN" [

<!-- textual data entities -->
<!-- first definition wins in SGML -->
<!ENTITY % default  SYSTEM "default.ent">  %default;
<!ENTITY % version  SYSTEM "version.ent">  %version;

]>
<!-- CVS revision of this document "$Revision: 1.116 $"  -->
<!-- CVS revision of original english document "*.**"  -->

<debiandoc>

 <book>

  <titlepag>

   <title>Debian New Maintainers' Guide</title>

   <author>Josip Rodin <email/joy-mg@debian.org/
   </author>
<!--
   <author>Translated by: [put your name here] <email/[put your e-mail here]/
   </author>
  -->

   <version>version &docversion;, &docisodate;</version>

   <copyright>
   <copyrightsummary>Copyright &copy; 1998-2002 Josip Rodin.</copyrightsummary>
   <copyrightsummary>Copyright &copy; 2005-2010 Osamu Aoki.</copyrightsummary>
   <copyrightsummary>Copyright &copy; 2010 Craig Small.</copyrightsummary>

   <p>This document may be used under the terms the GNU General Public License
   version 2 or higher.

   <p>This document was made using with these two documents as examples:

   <p>Making a Debian Package (AKA the Debmake Manual), copyright &copy;
   1997 Jaldhar Vyas.

   <p>The New-Maintainer's Debian Packaging Howto, copyright &copy; 1997
   Will Lowe.
   </copyright>

  </titlepag>

  <toc sect>

  <chapt id="start">Getting started The Right Way

  <p>This document tries to describe building of a Debian package to the
  common Debian user, and the prospectus developer. It uses pretty common language,
  and it's well covered with working examples.
  There is an old Roman saying, <em>Longum
  iter est per preaecepta, breve et efficax per exempla!</em> (It's a long way
  by the rules, but short and efficient with examples!).

  <p>This document has been updated for the Debian <tt>squeeze</tt> release.

  <p>One of the things that makes Debian such a top-notch Linux distribution
  is its package system. While there is a vast quantity of software already
  in the Debian format, sometimes you need to install software that isn't.
  You may be wondering how you can make your own packages and perhaps you
  think it is a very difficult task. Well, if you are a real novice on Linux,
  it is hard, but if you were rookie, you wouldn't be reading this doc now. :-)
  You do need to know a little about Unix programming but you certainly
  don't need to be a wizard.

  <p>One thing is certain, though: to properly create and maintain Debian
  packages you need many hours. Make no mistake, for our system to work the
  maintainers need to be both technically competent and diligent.

  <p>This document will explain every little (at first maybe irrelevant)
  step, and help you create that first package, and to gain some experience
  in building next releases of that and maybe other packages later on.

  <p>If you need some help on packaging, please read <ref id="helpme">.

  <p>Newer versions of this document should always be available online at
  <url name="http://www.debian.org/doc/maint-guide/" id="http://www.debian.org/doc/maint-guide/">
  and in the <package/maint-guide/ package.
  <!-- Translation in <this language> is also available in the
       <package/maint-guide-xy/ package. -->

  <sect id="needprogs">Programs you need for development

  <p>Before you start anything, you should make sure that you have properly
  installed some additional packages needed for development. Note that the
  list doesn't contain any packages marked <tt>essential</tt> or <tt>required</tt> - we
  expect that you have those installed already.

  <p>The following packages come with the standard Debian installation,
  so you probably have them already (along with any additional packages
  they depend on).
  Still, you should check it with "<tt>aptitude show <var>package</var></tt>".

  <p>
  The most important package to install on your development system is the
  <package/build-essential/ package. Once you try to install it, it will
  <em>pull in</em> other packages required to have a basic build environment.

  <p>
  For some types of packages, that is all you will require, however there
  is another set of packages that while not essential for all package builds 
  are useful to have install or may be required by your package:

  <list>
  <item><package/file/ - this handy program can determine what type a file is.
  (see <manref name="file" section="1">)

  <item><package/patch/ - this very useful utility will take a file containing
  a difference listing (produced by the <prgn>diff</prgn> program) and apply it to the
  original file, producing a patched version. (see <manref name="patch" section="1">)

  <item><package/perl/ - Perl is one of the most used interpreted scripting
  languages on today's Unix-like systems, often referred to as "Unix's Swiss Army
  Chainsaw". (see <manref name="perl" section="1">)

  <item><package/python/ - Python is another of the most used interpreted
  scripting languages on the Debian system that combines remarkable power
  with very clear syntax.  (see <manref name="python" section="1">)

  <item><package/autoconf/, <package/automake/ and <package/autotools-dev/ - 
  many newer programs use configure scripts and <file>Makefile</file> files preprocessed with 
  help of programs like these. (see "<tt>info autoconf</tt>", "<tt>info automake</tt>").
  The <package/autotools-dev/ keeps up-to-date versions of certain auto
  files and has documentation about the best way to use those files.

  <item><package/dh-make/ and <package/debhelper/ - <package/dh-make/ is necessary to
  create the skeleton of our example package, and it will use some of the
  <package>debhelper</package> tools for creating packages. They are not essential for creation
  of packages, but are <em>highly</em> recommended for new
  maintainers. It makes the whole process very much easier to start, and
  control afterwards. (see <manref name="dh_make" section="1">,
  <manref name="debhelper" section="1">, <file>/usr/share/doc/debhelper/README</file>)

  <item><package/devscripts/ - this package contains some nice and useful
  scripts that can be helpful to the maintainers, but they are also not
  necessary for building packages. Packages recommended and suggested by 
  this package are worth looking into.  (see <file>/usr/share/doc/devscripts/README.gz</file>)

  <item><package/fakeroot/ - this utility lets you emulate being root which
  is necessary for some parts of the build process. (see
  <manref name="fakeroot" section="1">)

  <item><package/gnupg/ - a tool that enables you to digitally <em>sign</em>
  packages. This is especially important if you want to distribute it to
  other people, and you will certainly be doing that when your work gets
  included in the Debian distribution. (see <manref name="gpg" section="1">)

  <item><package/gfortran/ - the GNU Fortran 95 compiler, necessary if your
  program is written in Fortran. (see <manref name="gfortran" section="1">)

  <item><package/gpc/ - the GNU Pascal compiler, necessary if your
  program is written in Pascal. Worthy of note here is <package/fp-compiler/,
  the Free Pascal Compiler, which is also good at this task.
  (see <manref name="gpc" section="1">, <manref name="ppc386" section="1">)

  <item><package/xutils-dev/ - some programs, usually those
  made for X11, also use these programs to generate <file>Makefile</file> files from sets of
  macro functions. (see <manref name="imake" section="1">,
  <manref name="xmkmf" section="1">)

  <item><package/lintian/ - this is the Debian package checker that can let
  you know of any common mistakes after you build the package, and explains
  the errors found. (see <manref name="lintian" section="1">,
  <file>/usr/share/doc/lintian/lintian.html/index.html</file>)

  <item><package/pbuilder/ - this package contains programs which are used 
  for creating and maintaining <prgn>chroot</prgn> environment.  Building Debian 
  package in this <prgn>chroot</prgn> environment verifies the proper build dependency
  and avoid FTBFS (Fails To Build From Source) bugs.  (see <manref
  name="pbuilder" section="8"> and <manref name="pdebuild" section="1">)

  <item><package/quilt/ - this package helps you to manage a series
  of patches by keeping track of the changes each of them makes. They are
  logically organized as a stack, and you can apply(=push), un-apply(=pop),
  refresh them easily by traveling into the stack. (see <manref name="quilt"
  section="1">, <file>/usr/share/doc/quilt/README.Debian</file>)

  <item><package/git-core/ - this package provides popular version control 
  system designed to handle very large projects with speed and efficiency; 
  it is used for many high profile open source projects, most notably the
  Linux kernel. (see <manref name="git" section="1">,
  <file>/usr/share/doc/git-doc/index.html</file>)

  </list>

  <p>The following is the <em>very important</em> documentation which you
  should read along with this document:

  <list>
  <item><package/debian-policy/ - the <url name="Debian Policy Manual" id="http://www.debian.org/doc/devel-manuals#policy"> 
  includes explanations of the
  structure and contents of the Debian archive, several OS design issues,
  the Filesystem Hierarchy Standard (which says where each file and
  directory should be) etc.
  For you, the most important thing is that it describes requirements that
  each package must satisfy to be included in the distribution
  (see <file>&debian-policy;</file>).

  <item><package/developers-reference/ - the 
  <url name="Debian Developer's Reference" id="http://www.debian.org/doc/devel-manuals#devref"> 
  describes all matters not specifically
  about the technical details of packaging, like the structure of the
  archive, how to rename, orphan, pick up packages, how to do NMUs, how to
  manage bugs, best packaging practices, when and where to upload etc.
  (see <file>&developers-reference;</file>).

  <item><package/gnu-standards/ - this package contains two pieces of
  documentation from the GNU project: 
  <url name="GNU Coding Standards" id="http://www.gnu.org/prep/standards/html_node/index.html">, and 
  <url name="Information for Maintainers of GNU Software" id="http://www.gnu.org/prep/maintain/html_node/index.html">.
  Although Debian does not require these to be followed, these are still
  helpful as guidelines and common sense.
  (see <file>/usr/share/doc/gnu-standards/standards.html</file> and
  <file>/usr/share/doc/gnu-standards/maintain.html</file>).

  </list>

  <p>The short descriptions that are given above only serve to introduce
  you to what each package does. Before continuing please thoroughly read
  the documentation of each program, at least, for the standard usage.
  It may seem like heavy going now, but later on you'll be <em>very</em>
  glad you read it.

  <sect id="terminology">Basic terminology

  <p>There are two types of packages.

  <list>

  <item><strong>source package</strong>: A source package is a set of files
  which contain code and data which you can compile and process into execution
  programs and formatted documents.  It usually comes as a combination of
  <file>*.orig.tar.gz</file>, <file>*.debian.tar.gz</file> (or
  <file>*.diff.gz</file>), and <file>*.dsc</file>.  Some other archive and
  compression methods may be used, too.

  <item><strong>binary package</strong>: A binary package contains execution
  programs and formatted documents.  It usually comes as <file>*.deb</file> for
  the normal Debian system and as <file>*.udeb</file> for the Debian Installer.

  </list>

  <p> Don't mix terms like source of the program and the source package of the
  program!

  <p>There are several role names used around Debian.

  <list>

  <item><strong>upstream author</strong>: The person who made the original
  program.

  <item><strong>upstream maintainer</strong>: The person who currently
  maintains the program.

  <item><strong>maintainer</strong>: The person who makes Debian package of the
  program.

  <item><strong>sponsor</strong>: The person who helps maintainers to upload
  packages to the official Debian Package Archive after checking their
  contents.

  <item><strong>mentor</strong>: The person who helps novice maintainers on
  packaging etc.

  <item><strong>Debian Developer</strong> (DD): The person who is a member of
  Debian.  He has full upload right to the official Debian Package Archive.

  <item><strong>Debian Maintainer</strong> (DM): The person who has limited upload
  right to the official Debian Package Archive.

  <item><strong>upstream source version</strong>: The upstream source version is referred as <tt><var>version</var></tt>.

  <item><strong>Debian revision</strong>: The revision by Debian on package is referred as <tt><var>revision</var></tt>.

  <item><strong>Debian package version</strong>: The Debian package version is referred as the following.
  <list>
  <item><tt><var>version</var></tt> for the native Debian binary package and for the Debian source package.
  <item><tt><var>version</var>-<var>revision</var></tt> for the non-native Debian binary package.
  </list>

  </list>

  <p>Please read the other manuals if you need more details on terminology.

  <sect id="debiandeveloper">Official Debian Developer

  <p>You can not become an official <strong>Debian Developer</strong> (DD) over
  night because it takes more than technical skill.  Please do not be
  discouraged by this.  If it is useful to others, you can still upload your
  package either as a <strong>maintainer</strong> through a
  <strong>sponsor</strong> or as a <strong>Debian Maintainer</strong>.
  See <url name="Debian New Maintainers" id="&newmaint;"> for more.

  <p>Please note that you do not need to create any new package to
  become an official Debian Developer.  Contributing to the existing
  packages can provide a path to become an official Debian Developer
  too.  There are many packages waiting for good maintainers (see <ref id="choose">).

  <chapt id="first">First steps

  <p>Let's try to make your own package.

  <sect id="choose">Choose your program

  <p>You have probably chosen the package you want to create. The first
  thing you need to do is check if the package is in the distribution archive
  already by using <prgn>aptitude</prgn>.

  <p>You can also check package information through
  <url name="package search page" id="http://www.debian.org/distrib/packages"> and
  <url name="Debian Package Tracking System" id="http://packages.qa.debian.org/common/index.html">.

  <p>If the package already exists, well, install it! :-) If it happens to
  be orphaned -- if its maintainer is set to "Debian QA Group", you may
  be able to pick it up. 

<p>Then you should consult the Debian web site at
  <url name="Work-Needing and Prospective Packages" id="http://www.debian.org/devel/wnpp/">
  and its linked pages to check the latest adoption/orphan status of the
  package. 

  <p>If you are able to adopt the package, get the sources (with something
  like "<tt>apt-get source <var>packagename</var></tt>") and examine them. This document
  unfortunately doesn't include comprehensive information about adopting
  packages. Thankfully you shouldn't have a hard time figuring out how the
  package works since someone has already done the initial set up for you.
  Keep reading, though, a lot of the advice below will still be applicable
  for your case.

  <p>If the package is new, and you decide you'd like to see it in Debian,
  proceed as follows:

  <list>
  <item>First, you must know that program works, and
  have tried it for some time to confirm its usefulness.</item>

  <item>You must check if no one else is working on the package already at
  <url name="the list of packages being worked on" id="http://www.de.debian.org/devel/wnpp/being_packaged">.
  If no one else is working on it, file an ITP (Intent To Package) bug report
  to the <package>wnpp</package> pseudo-package using <prgn>reportbug</prgn>.
  If someone's already on it, contact them if you feel you need to.
  If not - find another interesting program that nobody maintains.
  </item>

  <item>That program <strong>must</strong> have a license.

  <list>
  <item>For the <tt>main</tt> section, it must be compliant to all the 
  <url name="Debian Free Software Guidelines"
  id="http://www.debian.org/social_contract#guidelines"> (DFSG) and
  <strong>That program must not</strong> require a package outside of <tt>main</tt> for
  compilation or execution as required by the 
  <url name="Debian Policy Manual" id="http://www.debian.org/doc/devel-manuals#policy">.  
  This is desired case.</item>
  <item>For the <tt>contrib</tt> section, it <strong>must</strong> be compliant
  to all the DSFG but it may require a package outside of main for compilation
  or execution.</item>
  <item>For the <tt>non-free</tt> section, it <strong>may not</strong> be
  compliant to some of the DSFG but it <strong>must</strong> be
  distributable.</item>
  </list>

  If you are unsure about where it should go, post the license text on
  <url id="http://lists.debian.org/debian-legal/" name="debian-legal@lists.debian.org"> and ask for advice.
  </item>

  <item>That program certainly should <strong>not</strong> run setuid root, or
  even better - it shouldn't need to be setuid or setgid to anything.</item>

  <item>That program should not be a daemon, or something that goes in <file>*/sbin</file>
  directories, or open a port as root.</item>

  <item>That program should result in binary executable form, libraries are
  harder to handle.</item>

  <item>That program should be well documented and its code needs to be
  understandable (i.e. not obfuscated).</item>

  <item>You should contact program's author(s) to check if they agree
  with packaging it and amicable to Debian. It is important to be able to consult with author(s)
  about the program in case of any program specific problems, so don't
  try to package unmaintained pieces of software.</item>

  </list>

  <p>Of course, these things are just safety measures, and intended to save
  you from raging users if you do something wrong in some setuid daemon...
  When you gain some more experience in packaging, you'll be able to do such
  packages, but even the experienced developers consult the <url id="http://lists.debian.org/debian-mentors/" name="debian-mentors@lists.debian.org">
  mailing list when they are in doubt. And people there will gladly help.

  <p>For more help about these, check in <url name="Debian Developer's Reference" id="http://www.debian.org/doc/devel-manuals#devref">.

  <sect id="getit">Get the program, and try it out

  <p>So the first thing to do is to find and download the original source code.
  I presume that you already have the source file that you picked up at the
  author's homepage. Sources for free Unix programs usually come in
  <prgn>tar</prgn>+<prgn>gzip</prgn> format with extension
  <file>.tar.gz</file>, or <prgn>tar</prgn>+<prgn>bzip2</prgn> format with
  extension <file>.tar.bz2</file>.  These usually contain the subdirectory
  called <file><var>programname</var>-<var>version</var></file> in them and all the
  sources under it.

  <p>If the latest version of such sources are available through VCS such as
  Git, Subversion, or CVS repository, you need to get it with "<tt>git
  clone</tt>", "<tt>cvs co</tt>", or "<tt>svn co</tt>" and repack it into
  <prgn>tar</prgn>+<prgn>gzip</prgn> format by yourself using the
  "<tt>--exclude-vcs</tt>" option.

  <p>If your program's source comes as some other sort of archive (for
  instance, the filename ends in <file>.Z</file> or
  <file>.zip</file><footnote>You can identify the archive format using the
  <prgn>file</prgn> command when the file extension is not enough.</footnote>),
  unpack it with appropriate tools and repack it, too.

  <p>As an example, I'll use a program called <prgn>gentoo</prgn>, an X GTK+ file
  manager.<footnote>This program is already packaged.  Current version 0.15.3 has changed
  substantially from the version 0.9.12 in the following examples.</footnote>

  <p>Create a subdirectory under your home directory named <file>debian</file> or <file>deb</file>
  or anything you find appropriate (e.g. just <file>~/gentoo</file> would do fine in
  this case). Place the downloaded archive in it, and uncompress it (with
  "<tt>tar xzf gentoo-0.9.12.tar.gz</tt>"). Make sure there are no errors, even some
  <em>irrelevant</em> ones, because there will most probably be problems unpacking
  on other people's systems, whose unpacking tools may or may not ignore
  those anomalies.  On your console screen, you should see the following.

<example>
$ mkdir ~/gentoo ; cd ~/gentoo
$ wget http://<var>www.example.org</var>/gentoo-0.9.12.tar.gz
$ tar xvzf gentoo-0.9.12.tar.gz
$ ls -l
drwxrwxr-x 3 foo   foo   4096 Mar 21 20:43 gentoo-0.9.12
-rw-rw-r-- 1 foo   foo    196 Mar 21 20:43 gentoo-0.9.12.tar.gz
</example>

  <p>Now you have another subdirectory, called <file>gentoo-0.9.12</file>.
  Change to that directory and <em>thoroughly</em> read the provided
  documentation. Usually there are files named <file>README*</file>,
  <file>INSTALL*</file>, <file>*.lsm</file> or <file>*.html</file>. You must
  find instructions on how to correctly compile and install the program (most
  probably they'll assume you want to install to <file>/usr/local/bin</file>
  directory; you won't be doing that, but more on that later in <ref
  id="destdir">).

  <p>The process varies from program to program, but a lot of modern
  programs come with a <prgn>configure</prgn> script that configures the source under
  your system and makes sure that your system is in condition to compile it.
  After configuring with <tt>./configure</tt>, programs are usually compiled
  with "<tt>make</tt>". Some of them support "<tt>make check</tt>", to run included
  self-checks. Installation in destination directories is usually done with
  "<tt>make install</tt>".
  
  <p>Now try to compile and run your program, to make sure it works properly
  and doesn't break something else while it's installing or running.

  <p>Also, you can usually run "<tt>make clean</tt>" (or better "<tt>make distclean</tt>") to
  clean up the build directory. Sometimes there's even a "<tt>make uninstall</tt>"
  which can be used to remove all the installed files.

  <sect id="namever">Package name and version

  <p>You should start packaging with a completely clean (pristine) source
  directory, or simply with freshly unpacked sources.
  
  <p>For the package to be built correctly, you must make the program's
  original name lowercase (if it isn't already), and you should move the
  source directory to <file><var>packagename</var>-<var>version</var></file>.
  
  <p>If the program name consists of more than one word, contract them to one
  word, or make an abbreviation. For example, program "John's little editor
  for X" package would be named <package>johnledx</package>, or <package>jle4x</package>, or whatever you decide,
  as long as it's under some reasonable limit, e.g. 20 characters.

  <p>Also check for the exact version of the program (to be included in the
  package version). If that piece of software is not numbered with versions
  like <tt>X.Y.Z</tt>, but with some kind of date, feel free to use that date as the
  version number, as long as newer version numbers will look larger.
  While it is best to use the same version number as what upstream uses,
  if it is in the format of <tt>09Oct23</tt> you may need to convert it to
  <tt>YYYYMMDD</tt> format, which would be <tt>20091023</tt>, to ensure 
  proper order for upgrade with the <prgn>dpkg</prgn> program.<footnote>Version string can be compared by
  "<tt>dpkg --compare-versions <var>ver1</var> <var>op</var> <var>ver2</var></tt>". 
  See <manref name="dpkg" section="1"> manpage.</footnote>

  <p>Some programs won't be numbered at all, in which case you
  should contact the upstream maintainer to see if they've got some other
  revision-tracking method.

  <sect id="dh_make">Initial <em>debianization</em>

  <p>Let's set up the Bash shell environment variable <tt>$DEBEMAIL</tt> and
  <tt>$DEBFULLNAME</tt> so many Debian maintenance tools recognize your name and
  email address to use for packages as follows.

<example>
$ cat &gt;&gt;~/.bashrc &lt;&lt;EOF
DEBEMAIL=your.email.address@example.org
DEBFULLNAME="Firstname Lastname"
EOF
</example>

  <p>Let's make initial <em>debianization</em> by issuing the <prgn>dh_make</prgn> command as follows.

<example>
$ . ~/.bashrc
$ cd ~/gentoo/gentoo-0.9.12
$ dh_make -f ../gentoo-0.9.12.tar.gz
</example>

  <p>Of course, replace the filename with the name of your original source
  archive. 
  <footnote>If the upstream source provides the <file>debian</file> directory
  and its contents, run the <prgn>dh_make</prgn> command with the
  <tt>--addmissing</tt> option, instead.  The new source format 
  <tt>3.0 (quilt)</tt> system is quite robust not to break even for these packages.
  You may need to update contents provided by the upstream for your Debian
  package.</footnote>
  See <manref name="dh_make" section="1"> for details.
 
  <p>Some information will come up. It will ask you what sort of package you
  want to create. Gentoo is a single binary package - it creates only one
  binary, and thus one <file>.deb</file> file - so we will select the first option, with
  the "<tt>s</tt>" key, check the information on the screen and confirm by pressing
  "<tt><var>ENTER</var></tt>".
  <footnote>There are few choices here: "<tt>s</tt>" for "Single
  binary", "<tt>i</tt>" for "Arch-Independent", "<tt>m</tt>" for "Multiple
  binary", "<tt>l</tt>" for "Library", "<tt>k</tt>" for "Kernel module",
  "<tt>b</tt>" for "<package>cdbs</package>", "<tt>--kpatch</tt>" for "Kernel patch".  This
  document focuses on the use of the <package>debhelper</package> package with
  the <prgn>dh</prgn> command.  The <package>cdbs</package> package offers
  alternative package script infrastructure to the <prgn>dh</prgn> command and
  outside of the main scope of this document.</footnote>

  <p>After this execution of <prgn>dh_make</prgn>, a copy of the
  upstream tarball is created as <file>gentoo_0.9.12.orig.tar.gz</file>
  in the parent directory to accommodate the creation of the non-native
  Debian source package with the <file>debian.tar.gz</file> later. 

<example>
$ cd ~/gentoo ; ls -l
drwxrwxr-x 3 foo   foo   4096 Mar 21 20:43 gentoo-0.9.12
-rw-rw-r-- 1 foo   foo    196 Mar 21 20:43 gentoo-0.9.12.tar.gz
-rw-rw-r-- 1 foo   foo    196 Mar 21 20:43 gentoo_0.9.12.orig.tar.gz
</example>
 
  <p>Please note 2 key features in this <file>gentoo_0.9.12.orig.tar.gz</file> file name:
  <list>
  <item>Package name and version are separated by the "<tt>_</tt>" .
  <item>There is the <file>.orig</file> before the <file>.tar.gz</file> .
  </list>

  <p>You should also notice that many template files are created in the source
  under the <file>debian</file> directory.  These will be explained in <ref
  id="dreq"> and <ref id="dother">.  You should also understand that the
  packaging is not automatic process.  You need to modify the upstream source
  for Debian as <ref id="modify">.  After all these, you need to build Debian
  packages under the proper method as <ref id="build">, check them as <ref
  id="checkit">, and upload them as <ref id="upload">.  I will explain all
  these steps.

  <p>Once again, as a new maintainer you are discouraged from creating
  complicated packages, e.g.,
  <list>
  <item>multiple binary packages,
  <item>library packages,
  <item>the source file format being neither in <file>tar.gz</file> nor
       <file>tar.bz2</file>, or
  <item>the source tarball containing undistributable contents.
  </list>
  It's not too hard, but it does require a bit more knowledge, so we
  won't describe all of it here. 

  <p>Please note that you should run <prgn>dh_make</prgn> <em>only once</em>.
  If you must run it again in an already <em>debianized</em> directory, run
  this with the <tt>--addmissing</tt> option.  Read more in <ref id="update">.

  <chapt id="modify">Modifying the source

  <p>Please note that there isn't space here to go into <em>all</em> the
  details of fixing upstream sources, but here are some basic steps and
  problems people often run across.

  <sect id="quiltrc">Set up <prgn>quilt</prgn>

  <p>The <prgn>quilt</prgn> program offers the basic method to record
  modification to the source for the Debian packaging.  Let's set up
  <file>~/.quilrc</file> for it as follows.

<example>
$ cat &gt;&gt;~/.quiltrc &lt;&lt;EOF
for where in ./ ../ ../../ ../../../ ../../../../ ../../../../../; do
        if [ -e ${where}debian/rules -a -d ${where}debian/patches ]; then
                export QUILT_PATCHES=debian/patches
                break
        fi
done

QUILT_PATCH_OPTS="--unified-reject-files"
QUILT_DIFF_ARGS="-p ab --no-timestamps --no-index --color=auto"
QUILT_REFRESH_ARGS="-p ab --no-timestamps --no-index"
QUILT_COLORS="diff_hdr=1;32:diff_add=1;34:diff_rem=1;31:diff_hunk=1;33:\
diff_ctx=35:diff_cctx=33"
EOF
</example>

  <p>See <manref name="quilt" section="1"> and
  <file>/usr/share/doc/quilt/quilt.html</file> for how to use <prgn>quilt</prgn>.

  <sect id="fixupstream">Fixing upstream bug
 
  <p>Let's assume you find an error in the upstream <file>Makefile</file> file as follows where
  "<tt>install: gentoo</tt>" should have been 
  "<tt>install: gentoo-target</tt>".

<example>
install: gentoo
        install ./gentoo $(BIN)
        install icons/* $(ICONS)
        install gentoorc-example $(HOME)/.gentoorc
</example>

  <p>Let's fix this and record this with the <prgn>quilt</prgn> command as <file>fix-gentoo-target.patch</file>.

<example>
$ mkdir debian/patches
$ quilt new fix-gentoo-target.patch
$ quilt add Makefile
</example>

You change the <file>Makefile</file> file as follows.

<example>
install: gentoo-target
        install ./gentoo $(BIN)
        install icons/* $(ICONS)
        install gentoorc-example $(HOME)/.gentoorc
</example>

<p>Ask quilt to refresh the patch to create <file>debian/patches/fix-gentoo-target.patch</file>.

<example>
$ quilt refresh
</example>

  <sect id="destdir">Installation of files to the destination

  <p>Normally, programs install themselves in the <file>/usr/local</file>
  subdirectory.  Since it is reserved for system administrator's (or user's)
  private use, Debian packages must not use that directory but should use
  system directories such as the <file>/usr/bin</file> subdirectory following
  the Filesystem Hierarchy Standard 
  (FHS:<file>/usr/share/doc/debian-policy/fhs/fhs-2.3.html</file>). 

  <p>Normally, <manref name="make" section="1"> is used to automate building
  the program and the execution of "<tt>make install</tt>" installs programs
  directly to the desired destination.  It is configured by the
  <tt>install</tt> target of the <file>Makefile</file> file.  Since Debian
  provides binary packages, its build system should install programs to
  a file tree image created under a temporary directory, instead.

  <p>
  These 2 differences between 
  <list compact>
  <item>the normal program installation and
  <item>the Debian packaging
  </list>
  can be transparently addressed by the <package>debhelper</package> package
  through the <prgn>dh_auto_configure</prgn> and <prgn>dh_auto_install</prgn>
  commands,
  <list>
  <item>if the <file>Makefile</file> file follows the GNU conventions to
  support <tt>$(DESTDIR)</tt> variable
  (<file>/usr/share/doc/gnu-standards/standards.html#Makefile-Conventions</file>)
  and
  <item>if the source follows FHS.
  </list>
  <p>Programs that use GNU <prgn>autoconf</prgn> <em>automatically</em> follow
  the GNU conventions and their packaging is almost <em>automatic</em>.  With
  this and other heuristics, the <package>debhelper</package> package estimates
  that it work for about 90% of packages without making any intrusive changes
  to their build system.  So the packaging is not as complicated as it may
  seem.
  
  <p>If you need to make changes in the <file>Makefile</file> file, you should
  make sure to support these <tt>$(DESTDIR)</tt> 
  variable.  The <tt>$(DESTDIR)</tt> variable is unset in it and is prepended
  to each file path used for the program installation.  The packaging
  script will set <tt>$(DESTDIR)</tt> to the temporary directory.

  <p>The temporary directory used by the <prgn>dh_auto_install</prgn> command
  is chosen as <file>debian/<var>package</var></file> for single binary
  packages.
  <footnote>For multiple binary packages, the <prgn>dh_auto_install</prgn>
  command uses <file>debian/tmp</file> as the temporary directory while the
  <prgn>dh_install</prgn> command with the help of
  <file>debian/<var>package-1</var>.install</file> and
  <file>debian/<var>package-2</var>.install</file> files will split contents of
  <file>debian/tmp</file> into <file>debian/<var>package-1</var></file> and
  <file>debian/<var>package-2</var></file> temporary directories to create
  multiple binary <file>*.deb</file> packages.</footnote>
  Everything that is contained in the temporary directory will be installed on
  a user's system when they install your package, the only difference is that
  <prgn>dpkg</prgn> will be installing the files in the root directory.

  <p>Bear in mind that even though your program installs in
  <file>debian/<var>package</var></file>, it still needs to behave
  correctly when placed in the root directory, i.e. when installed from the
  <file>.deb</file> package. So you must not allow the build system to hardcode
  strings like
  <tt>/home/me/deb/<var>package</var>-<var>version</var>/usr/share/<var>package</var></tt>
  into the package file.

  <p>Note that if your program uses GNU <manref name="automake" section="1">
  and/or <manref name="autoconf" section="1">, meaning the source includes
  <file>Makefile.am</file> and/or <file>Makefile.in</file> files, respectively,
  you will need to modify these files if you need to change the
  <file>Makefile</file> file. This is because each <prgn>automake</prgn>
  invocation will rewrite <file>Makefile.in</file> files with information
  generated from <file>Makefile.am</file> files, and each
  "<tt>./configure</tt>" invocation will do the same with <file>Makefile</file>
  files, with data from <file>Makefile.in</file> files. Editing
  <file>Makefile.am</file> files requires some knowledge of
  <prgn>automake</prgn>, which you can read about in "<tt>info automake</tt>",
  whereas editing <file>Makefile.in</file> files is pretty much the same as
  editing <file>Makefile</file> files, just pay attention to the variables,
  i.e. any strings surrounded with "<tt>@</tt>"s, for example <tt>@CFLAGS@</tt>
  or <tt>@LN_S@</tt>, which are replaced with actual stuff on each
  "<tt>./configure</tt>" invocation.  Please make sure to read
  <file>&autotools-dev;</file> before proceeding.

  <p>Here's the relevant part of <package>gentoo</package>'s <file>Makefile</file>:

<example>
# Where to put binary on 'make install'?
BIN     = /usr/local/bin

# Where to put icons on 'make install'?
ICONS   = /usr/local/share/gentoo
</example>

  <p>We see that the files are set to install under <file>/usr/local</file>.
  Change those paths to:

<example>
# Where to put binary on 'make install'?
BIN     = $(DESTDIR)/usr/bin

# Where to put icons on 'make install'?
ICONS   = $(DESTDIR)/usr/share/gentoo
</example>

  <p>But why in that directory, and not some other? Because Debian packages
  never install files beneath <file>/usr/local</file> -- that tree is
  reserved for the system administrator's use. Such files on Debian
  systems go under <file>/usr</file> instead.

  <p>The more exact locations for binaries, icons, documentation etc. are
  specified in the Filesystem Hierarchy Standard
  (see <file>/usr/share/doc/debian-policy/fhs/</file>). I recommend you browse it and read
  the sections that might concern your package.

  <p>So, we should install the binary in <file>/usr/bin</file> instead of <file>/usr/local/bin</file>,
  the manual page in <file>/usr/share/man/man1</file> instead of <file>/usr/local/man/man1</file> etc.
  Notice how there's no manual page mentioned in <package>gentoo</package>'s <file>Makefile</file>, but
  since the <url name="Debian Policy Manual" id="http://www.debian.org/doc/devel-manuals#policy"> 
  requires that every program has one, we'll make
  one later and install it in <file>/usr/share/man/man1</file>.

  <p>Some programs don't use <file>Makefile</file> variables to define paths such as
  these. This means you might have to edit some real C sources in order to
  fix them to use the right locations.
  But where to search, and exactly what for? You can find this out by issuing:

<example>
$ grep -nr -e 'usr/local/lib' --include='*.[c|h]' .
</example>

  <p><prgn>grep</prgn> will run recursively through the source tree and tell
  you the filename and the line number for all matches.

  <p>Edit those files and in those lines replace <tt>/usr/local/lib</tt> with <tt>usr/lib</tt>.
<example>
$ vim '+argdo %s/usr\/local\/lib\//usr\/lib\//gce|update' +q \
      $(find . -type f -name '*.[c|h]')
</example>

  <p>Be careful that you don't mess up the rest of the code! :-)

  <p>After that you should find the install target (search for line that
  starts with <tt>install:</tt>, that will usually work) and rename all references
  to directories other than ones defined at the top of the <file>Makefile</file>.

  <p>After your upstream bug fix, <package>gentoo</package>'s install target said:

<example>
install: gentoo-target
        install ./gentoo $(BIN)
        install icons/* $(ICONS)
        install gentoorc-example $(HOME)/.gentoorc
</example>

  <p>Let's fix this and record this with the <prgn>quilt</prgn> command as <file>debian/patches/install.patch</file>.

<example>
$ quilt new install.patch
$ quilt add Makefile
</example>

  <p>Let's change this for Debian package as following using the editor:
<example>
install: gentoo-target
        install -d $(BIN) $(ICONS) $(DESTDIR)/etc
        install ./gentoo $(BIN)
        install -m644 icons/* $(ICONS)
        install -m644 gentoorc-example $(DESTDIR)/etc/gentoorc
</example>

  <p>You've surely noticed that there's now a "<tt>install -d</tt>" command
  before the other commands in the rule. The original <file>Makefile</file> didn't have
  it because usually the <tt>/usr/local/bin</tt> and other directories already exist
  on the system where one runs "<tt>make install</tt>". However, since we will
  install into our own empty (or even nonexistent) directory, we will have
  to create each and every one of those directories.

  <p>We can also add in other things at the end of the rule, like the
  installation of additional documentation that the upstream authors
  sometimes omit:

<example>
        install -d $(DESTDIR)/usr/share/doc/gentoo/html
        cp -a docs/* $(DESTDIR)/usr/share/doc/gentoo/html
</example>

  <p>After careful check, if everything is fine, ask quilt to refresh the patch to create <file>debian/patches/install.patch</file>.

<example>
$ quilt refresh
</example>

  <p>Now you have a series of patches.
  <enumlist>
    <item>Upstream bug fix: <file>debian/patches/fix-gentoo-target.patch</file> 
    <item>Debian specific packaging modification: <file>debian/patches/install.patch</file>
  </enumlist>

  <p>Whenever you make changes that are not specifically related to Debian
  package such as <file>debian/patches/fix-gentoo-target.patch</file>, 
  be sure to send them to the upstream maintainer so they can be
  included in the next program revision and be useful to everyone else.
  Also remember to make your fixes not specific to Debian or Linux (or even
  Unix!) prior to sending them -- make them portable. This will make your
  fixes much easier to apply.

  <p>Note that you don't have to send the <file>debian/*</file> files upstream.

  <sect id="difflibs">Differing libraries

  <p>There is one other common problem: libraries are often different from
  platform to platform. For example, a <file>Makefile</file> can contain a reference to a
  library which doesn't exist on Debian systems. In that case, we
  need to change it to a library which does exist in Debian, and serves the
  same purpose.

  <p>So, if there is a line in your program's <file>Makefile</file> (or <file>Makefile.in</file>) that
  says something like this (and your program doesn't compile)
  <footnote><p>The author realizes that this is not the best example considering our
  <package>libncurses</package> package now ships with a <file>libcurses.so</file> symlink, but he couldn't
  think of a better one. Suggestions very welcome :-)</footnote>:

<example>
LIBS = -lcurses -lsomething -lsomethingelse
</example>

  <p>Let's fix this as <file>debian/patches/ncurse.patch</file> by changing <tt>curses</tt> into <tt>ncurses</tt>.

<example>
$ quilt new ncurse.patch
$ quilt add Makefile
$ sed -i -e "s/-lcurses/-lncurses/g" Makefile
$ quilt refresh
</example>

  <chapt id="dreq">Required files under the <file>debian</file> directory

  <p>There is a new subdirectory under the program's source directory,
  it's called <file>debian</file>. There are a number of files in this directory that
  we should edit in order to customize
  the behavior of the package. The most important of them are <file>control</file>,
  <file>changelog</file>, <file>copyright</file> and <file>rules</file>, which are required for all packages.

  <sect id="control"><file>control</file> file

  <p>This file contains various values which <prgn/dpkg/, <prgn/dselect/, 
  <prgn/apt-get/, <prgn/apt-cache/, <prgn/aptitude/, and
  other package management tools will use to manage the package.

  <p>Here is the control file <prgn>dh_make</prgn> created for us:

<example>
 1 Source: gentoo
 2 Section: unknown
 3 Priority: extra
 4 Maintainer: Josip Rodin &lt;joy-mg@debian.org&gt;
 5 Build-Depends: debhelper (>= 7.0.50)
 6 Standards-Version: 3.8.4
 7 Homepage: &lt;insert the upstream URL, if relevant&gt;
 8
 9 Package: gentoo
10 Architecture: any
11 Depends: ${shlibs:Depends}, ${misc:Depends}
12 Description: &lt;insert up to 60 chars description&gt;
13  &lt;insert long description, indented with spaces&gt;
</example>
  (I've added the line numbers.)

  <p>Lines 1-6 are the control information for the source package.

  <p>Line 1 is the name of the source package.

  <p>Line 2 is the section of the distribution the source package goes into. 

  <p>As you may have noticed, Debian is divided in sections: <tt>main</tt> (the free
  software), <tt>non-free</tt> (the not really free software) and <tt>contrib</tt> (free
  software that depends on non-free software). Under those, there are
  logical subsections that describe in short what packages are in.
  So we have <tt>admin</tt> for administrator-only programs, <tt>base</tt> for the
  basic tools, <tt>devel</tt> for programmer tools, <tt>doc</tt> for documentation,
  <tt>libs</tt> for libraries, <tt>mail</tt> for e-mail readers and daemons, <tt>net</tt> for
  network apps and daemons, <tt>x11</tt> for X11 programs that don't fit anywhere
  else, and many more.

  <p>Let's change it then to x11. (A <tt>main/</tt> prefix is implied so we can
  omit it.)

  <p>Line 3 describes how important it is that the user installs this package.
  See the <url name="Debian Policy Manual" id="http://www.debian.org/doc/devel-manuals#policy"> 
  for guidance on what to set this field to. The
  "<tt>extra</tt>" priority will usually work for new packages.

  <p>Section and priority are used by the frontends like <prgn/aptitude/ when
  they sort packages and select defaults. Once you upload the package to
  Debian, the value of these two fields can be overridden by the archive
  maintainers, in which case you will be notified by email.
  
  <p>As this is a normal priority package and doesn't conflict with anything
  else, we will change the priority to "<tt>optional</tt>".

  <p>Line 4 is the name and email address of the maintainer. Make sure that
  this field includes a valid "<tt>To: </tt>" header for an email, because after you
  upload it, the bug tracking system will use it to deliver bug emails to
  you. Avoid using commas, ampersands and parenthesis.

  <p>The 5th line includes the list of packages required to build your
  package. Some packages like <package>gcc</package> and <package>make</package> are implied, see the
  <package/build-essential/ package for details. If some non-standard
  compiler or other tool is needed to build your package, you should add
  it to the <tt>Build-Depends</tt> line. Multiple entries are separated with
  commas; read on for the explanation of binary dependencies to find out
  more about the syntax of this field.

  <p>You can also have <tt>Build-Depends-Indep</tt>, <tt>Build-Conflicts</tt> and other fields
  here. This data will be used by the Debian automatic package building
  software in order to create binary packages for other computer platforms.
  See the <url name="Debian Policy Manual" id="http://www.debian.org/doc/devel-manuals#policy"> 
  for more information about the build-dependencies
  and the <url name="Developer's Reference" id="http://www.debian.org/doc/devel-manuals#devref"> 
  for more information about these other
  platforms (architectures) and how to port software to them.

  <p>To find out what packages your package needs to be built run the command:
<example>
$ dpkg-depcheck -d ./configure
</example>

  <p>To manually find exact build dependency for
  <prgn><var>/usr/bin/foo</var></prgn>, you execute

<example>
$ objdump -p <var>/usr/bin/foo</var> | grep NEEDED
</example>
  and for each library listed, e.g., <prgn>libfoo.so.6</prgn>, execute
<example>
$ dpkg -S libfoo.so.6 
</example>
  Then you just take <tt>-dev</tt> version of every package as
  <tt>Build-Depends</tt> entry.  If you use <prgn>ldd</prgn> for this
  purpose, it will report indirect lib dependencies as well, resulting
  in the problem of excessive build dependencies.

  <p><package>gentoo</package> also happens to require <package/xlibs-dev/,
  <package/libgtk1.2-dev/ and <package/libglib1.2-dev/ to build, so we'll
  add them here next to <package/debhelper/.

  <p>Line 6 is the version of the Debian Policy standards this package follows,
  the versions of the <url name="Debian Policy Manual"
  id="http://www.debian.org/doc/devel-manuals#policy"> you read while making
  your package.

  <p>On line 7 you can put the URL of the homepage for the upstream package.

  <p>Line 9 is the name of the binary package. This is usually the same as
  the name of the source package, but it doesn't necessarily have to be that
  way.

  <p>Line 10 describes the CPU architecture the binary package can be compiled
  for. We'll leave this as "<tt>any</tt>" because <manref name="dpkg-gencontrol"
  section="1"> will fill in the appropriate value for any machine this
  package gets compiled on.

  <p>If your package is architecture independent
  (for example, a shell or Perl script, or a document), change this to
  "<tt>all</tt>", and read later in <ref id="rules"> about using the <tt>binary-indep</tt>
  rule instead of <tt>binary-arch</tt> for building the package.

  <p>Line 11 shows one of the most powerful features of the Debian packaging
  system. Packages can relate to each other in various ways. Apart from
  <tt>Depends:</tt>, other relationship fields are <tt>Recommends:</tt>, <tt>Suggests:</tt>,
  <tt>Pre-Depends:</tt>, <tt>Conflicts:</tt>, <tt>Provides:</tt>, and <tt>Replaces:</tt>.

  <p>The package management tools usually behave the same way when dealing
  with these relations; if not, it will be explained.
  (see <manref name="dpkg" section="8">, <manref name="dselect" section="8">,
  <manref name="apt" section="8">, <manref name="aptitude" section="1"> etc.)

  <p>This is what the dependencies mean:

  <p><list>
  <item><tt>Depends:</tt>
  <p>The package will not be installed unless the packages it depends on
  are installed. Use this if your program absolutely will not run (or will
  cause severe breakage) unless a particular package is present.</item>

  <item><tt>Recommends:</tt>
  <p>Use this for packages that are not strictly necessary but are typically
  used with your program.  When a user installs your program, all frontends
  will likely prompt them to install the recommended packages.
  <prgn>aptitude</prgn> and <prgn>apt-get</prgn> install recommended packages
  along with your package (but the user can disable this default
  behaviour). <prgn>dpkg</prgn> will ignore this field.
  </item>

  <item><tt>Suggests:</tt>
  <p>Use this for packages which will work nicely with your program but are not
  at all necessary.
  When a user installs your program, all frontends will likely prompt them to
  install the suggested packages.  
  <prgn>aptitude</prgn> can be configured to install suggested packages along
  with your package but this is not its default.
  <prgn>dpkg</prgn> and <prgn>apt-get</prgn> will ignore this field.
  </item>

  <item><tt>Pre-Depends:</tt>
  <p>This is stronger than <tt>Depends:</tt>. The package will not be installed
  unless the packages it pre-depends on are installed and <em>correctly
  configured</em>. Use this <em>very</em> sparingly and only after
  discussing it on the <url id="http://lists.debian.org/debian-devel/" name="debian-devel@lists.debian.org"> mailing list. Read: don't use it at
  all. :-)</item>

  <item><tt>Conflicts:</tt>
  <p>The package will not be installed until all the packages it conflicts
  with have been removed. Use this if your program absolutely will not run
  or will cause severe problems if a particular package is present.</item>

  <item><tt>Provides:</tt>
  <p>For some types of packages where there are multiple alternatives
  virtual names have been defined. You can get the full list in the
  <file>/usr/share/doc/debian-policy/virtual-package-names-list.txt.gz</file> file.
  Use this if your program provides a function of an existing virtual
  package.</item>

  <item><tt>Replaces:</tt>
  <p>Use this when your program replaces files from another package, or
  completely replaces another package (used in conjunction with <tt>Conflicts:</tt>).
  Files from the named packages will be overwritten with the files from your
  package.
  </item>
  </list>

  <p>All these fields have uniform syntax. They are a list of package names
  separated by commas. These package names may also be lists of alternative
  package names, separated by vertical bar symbols "<tt>|</tt>" (pipe symbols).

  <p>The fields may restrict their applicability to particular versions of
  each named package. These versions are listed in parentheses after each
  individual package name, and they should contain a relation from the list
  below followed by the version number. The relations allowed are:
  <tt>&lt;&lt;</tt>, <tt>&lt;=</tt>, <tt>=</tt>, <tt>&gt;=</tt> and
  <tt>&gt;&gt;</tt> for strictly lower, lower or equal, exactly equal,
  greater or equal and strictly greater, respectively. For example,

<example>
Depends: foo (&gt;= 1.2), libbar1 (= 1.3.4)
Conflicts: baz
Recommends: libbaz4 (&gt;&gt; 4.0.7)
Suggests: quux
Replaces: quux (&lt;&lt; 5), quux-foo (&lt;= 7.6)
</example>
  
  <p>The last feature you need to know about is <tt>${shlibs:Depends}</tt>.
  After your package has been built and installed into the temporary
  directory, <manref name="dh_shlibdeps" section="1"> will scan it for
  binaries and libraries, determine their shared library dependencies and
  detect which packages they are in, such as <package>libc6</package> or <package>xlib6g</package>. It'll pass
  on the list to <manref name="dh_gencontrol" section="1"> which will fill
  it in the right place, and you won't have to worry about this yourself.

  <p>Having said all that, we can leave the <tt>Depends:</tt> line exactly as it is
  now, and insert another line after it saying "<tt>Suggests: file</tt>",
  because <package>gentoo</package> can use some features provided by that `file' package.

  <p>Line 12 is the short description. Most people screens are 80 columns
  wide so this shouldn't be longer than about 60 characters. I'll change
  it to "<tt>fully GUI configurable X file manager using GTK+</tt>".

  <p>Line 13 is where the long description goes. This should be a paragraph
  which gives more details about the package. Column 1 of each line should
  be empty. There must be no blank lines, but you can put a single "<tt>.</tt>" (dot)
  in a column to simulate that. Also, there must be no more than one blank
  line after the long description.

  <p>Let's insert <tt>Vcs-*</tt> fields documented in 
  <url name="Developer's Reference, 6.2.5. 'Version Control System location'" id="http://www.debian.org/doc/manuals/developers-reference/best-pkging-practices.html#bpp-vcs"> between line 6 and 7.  Let's assume
  that the <package>gentoo</package> package is located in Debian Alioth Git
  Service at <tt>git://git.debian.org/git/collab-maint/gentoo.git</tt>.

  <p>Finally, here is the updated control file:

<example>
 1 Source: gentoo
 2 Section: x11
 3 Priority: optional
 4 Maintainer: Josip Rodin &lt;joy-mg@debian.org&gt;
 5 Build-Depends: debhelper (>= 7.0.5), xlibs-dev, libgtk1.2-dev, libglib1.2-dev
 6 Standards-Version: 3.8.4
 7 Vcs-Git: git://git.debian.org/git/collab-maint/gentoo.git
 8 Vcs-browser: http://git.debian.org/?p=collab-maint/gentoo.git
 9 Homepage: http://www.obsession.se/gentoo/
10
11 Package: gentoo
12 Architecture: any
13 Depends: ${shlibs:Depends}, ${misc:Depends}
14 Suggests: file
15 Description: fully GUI configurable X file manager using GTK+
16  gentoo is a file manager for Linux written from scratch in pure C. It
17  uses the GTK+ toolkit for all of its interface needs. gentoo provides
18  100% GUI configurability; no need to edit config files by hand and re-
19  start the program. gentoo supports identifying the type of various
20  files (using extension, regular expressions, or the 'file' command),
21  and can display files of different types with different colors and icons.
22  .
23  gentoo borrows some of its look and feel from the classic Amiga file
24  manager "Directory OPUS" (written by Jonathan Potter).
</example>
  (I've added the line numbers.)

  <sect id="copyright"><file>copyright</file> file

  <p>This file contains the information about package upstream resources,
  copyright and license information. Its format is not dictated by the
  Debian Policy Manual, but the content is 
  (<url name="Debian Policy Manual, 12.5 'Copyright information'" id="http://www.debian.org/doc/debian-policy/ch-docs.html#s-copyrightfile">).  You may also consult <url name="DEP-5: Machine-parseable debian/copyright" id="http://dep.debian.net/deps/dep5/">.

  <p><prgn>dh_make</prgn> can give you a template copyright file, use the <tt>--copyright</tt>
  option to select the right template. As <package>gentoo</package> is licensed under the
  GPLv2 license, using the "<tt>--copyright gpl2</tt>" option will give the following:

<example>
 1 This work was packaged for Debian by:
 2
 3   Josip Rodin &lt;joy-mg@debian.org&gt; on Wed, 11 Nov 1998 21:02:14 +0100.
 4
 5 It was downloaded from:
 6
 7    &lt;url://example.com&gt;
 8
 9 Upstream Author(s):
10
11    &lt;put author's name and email here&gt;
12
13 Copyright:
14
15      &lt;Copyright (C) YYY Firstname Lastname&gt;
16      &lt;likewise for another author&gt;
17
18 License:
19
20 ### SELECT: ###
21     This package is free software; you can redistribute it and/or modify
22     it under the terms of the GNU General Public License as published by
23     the Free Software Foundation; either version 2 of the License, or
24     (at your option) any later version.
25 ### OR ###
26     This package is free software; you can redistribute it and/or modify
27     it under the terms of the GNU General Public License version 2 as
28     published by the Free Software Foundation.
29  ##########
30
31     This package is distributed in the hope that it will be useful,
32     but WITHOUT ANY WARRANTY; without even the implied warranty of
33     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
34     GNU General Public License for more details.
35
36     You should have received a copy of the GNU General Public License
37     along with this package; if not, write to the Free Software
38     Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
39
40  Debian systems, the complete text of the GNU General
41  License version 2 can be found in `/usr/share/common-licenses/GPL-2'.
42
43  Debian packaging is:
44
45     Copyright (C) 1998 Josip Rodin &lt;joy-mg@debian.org&gt;
46
47 You can redistribute it and/or modify
48 it under the terms of the GNU General Public License as published by
49  Free Software Foundation; either version 2 of the License, or
50 (at your option) any later version.
51
52 # Please also look if there are files or directories which have a
53 # different copyright/license attached and list them here.
</example>
  (I've added the line numbers.)

  <p>The important things to add to this file are the place you got the
  package from and the actual copyright notice and license. You must
  include the complete license, unless it's one of the common free software
  licenses such as GNU GPL-2, GNU GPL-3, LGPL-2, LGPL-3, BSD, Apache or the Artistic license, when you
  can just refer to the appropriate file in <file>/usr/share/common-licenses/</file>
  directory that exists on every Debian system.

  <p>In short, here's how <package>gentoo</package>'s <file>copyright</file> file should look like:

<example>
 1 This work was packaged for Debian by:
 2
 3     Josip Rodin &lt;joy-mg@debian.org&gt; on 2  Wed, 11 Nov 1998 21:02:14 +0100.
 4
 5 It was downloaded from:
 6     ftp://ftp.obsession.se/gentoo/
 7
 8 Upstream author:
 9
10     Emil Brink &lt;emil@obsession.se&gt;
11
12 Copyright:
13     Copyright (C) 1998-99 by Emil Brink, Obsession Development.
14
15 License:
16     You are free to distribute this software under the terms of
17     the GNU General Public License  either version 2 of the License,
18     or (at your option) any later version.
19
20     This package is distributed in the hope that it will be useful,
21     but WITHOUT ANY WARRANTY; without even the implied warranty of
22     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
23     GNU General Public License for more details.
24
25     You should have received a copy of the GNU General Public License
26     along with this package; if not, write to the Free Software
27     Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
28
29 On Debian systems, the complete text of the GNU General
30 Public License version 2 can be found in `/usr/share/common-licenses/GPL-2'.
31
32 The Debian packaging is:
33
34     Copyright (C) 1998 Josip Rodin &lt;joy-mg@debian.org&gt;
35
36 You can redistribute it and/or modify
37 it under the terms of the GNU General Public License as published by
38  Free Software Foundation; either version 2 of the License, or
39 (at your option) any later version.
</example>
  (I've added the line numbers.)

  <p>Please follow the HOWTO provided by ftpmasters and sent to debian-devel-announce: 
  <url id="&copyright-howto;"> .


  <sect id="changelog"><file>changelog</file> file

  <p>This is a required file, which has a special format described in
  the <url name="Debian Policy Manual, 4.4 'debian/changelog'" id="http://www.debian.org/doc/debian-policy/ch-source.html#s-dpkgchangelog">. 
  This format is used by dpkg and
  other programs to obtain the version number, revision, distribution and
  urgency of your package.

  <p>For you, it is also important, since it is good to have documented
  all changes you have done. It will help people downloading your package
  to see whether there are issues with the package that they should know
  about. It will be saved as
  <file>/usr/share/doc/gentoo/changelog.Debian.gz</file> in the binary package.

  <p><prgn>dh_make</prgn> created a default one, and this is how it looks like:

<example>
1  gentoo (0.9.12-1) unstable; urgency=low
2
3   * Initial release (Closes: #<var>nnnn</var>)  &lt;<var>nnnn</var> is the bug number of your ITP&gt;
4
5  -- Josip Rodin &lt;joy-mg@debian.org&gt;  Mon, 22 Mar 2010 00:37:31 +0100
6
</example>
  (I've added the line numbers.)

  <p>Line 1 is the package name, version, distribution, and urgency.
  The name must match the source package name, distribution should be
  either <tt>unstable</tt> (or even <tt>experimental</tt>), and urgency shouldn't
  be changed to anything higher than <tt>low</tt>. :-)
  
  <p>Lines 3-5 are a log entry, where you document changes made in this
  package revision (not the upstream changes - there is special file for that
  purpose, created by the upstream authors, which you will later install as
  <file>/usr/share/doc/gentoo/changelog.gz</file>). Let's assume your ITP bug
  report number was "<tt>12345</tt>".  New lines must be inserted just before
  the uppermost line that begins with "<tt>*</tt>" (asterisk). You can do it
  with <manref name="dch" section="1">, or manually with a text editor.

  <p>You will end up with something like this:

<example>
1  gentoo (0.9.12-1) unstable; urgency=low
2
3   * Initial Release. Closes: #12345
4   * This is my first Debian package.
5   * Adjusted the Makefile to fix $DESTDIR problems.
6
7  -- Josip Rodin &lt;joy-mg@debian.org&gt; Mon, 22 Mar 2010 00:37:31 +0100
8
</example>
  (I've added the line numbers.)

  <p>You can read more about updating the changelog file later in
  <ref id="update">.

  <sect id="rules"><file>rules</file> file

  <p>Now we need to take a look at the exact rules which 
  <manref name="dpkg-buildpackage" section="1"> will use to actually create the
  package. This file is actually another <file>Makefile</file>, but different
  from the one(s) in the upstream source. Unlike other files in
  <file>debian</file>, this one is marked as executable.

  <sect1 id="targets">Targets of <file>rules</file> file

  <p>Every <file>rules</file> file, as any other <file>Makefile</file>,
  consists of several targets and their rules specifying how to handle the
  source.  
  <url name="Debian Policy Manual, 4.9 'Main building script: debian/rules'"
  id="http://www.debian.org/doc/debian-policy/ch-source.html#s-debianrules">
  explains its details.

  <p>The simplified explanation of targets are the following.

<list>
<item><tt>clean</tt> target: to clean all compiled, generated, and useless files in the build-tree. (required)
<item><tt>build</tt> target: to build the source into compiled programs and formatted documents in the build-tree. (required)
<item><tt>binary</tt> target: to depend usually on <tt>binary-arch</tt> and <tt>binary-indep</tt>. (required)
<item><tt>binary-arch</tt> target: to create arch-dependent (<tt>Architecture: any</tt>) binary packages in the parent directory. (required)
<item><tt>binary-indep</tt> target: to create arch-independent (<tt>Architecture: all</tt>) binary packages in the parent directory. (required)
<item><tt>get-orig-source</tt> target: to obtain the most recent version of the original source package from upstream archive site. (optional)
<item><tt>install</tt> target: to install files into a file tree for each binary package under the <file>debian</file> directory.  If defined, <tt>binary*</tt> targets depend on this target. (optional)
</list>

  <p>Rules that you want to execute are invoked as command
  line arguments (for example, "<tt>./debian/rules build</tt>" or "<tt>fakeroot make -f debian/rules
  binary</tt>"). After the target name, you can name the dependency, program
  or file that the rule depends on. After that, there can be any number
  of commands, indented with <tt><var>TAB</var></tt>. A new rule begins with the target
  declaration in the first column. Empty lines and lines beginning
  with "<tt>#</tt>" (hash) are treated as comments and ignored.

  <p>You are probably confused now, but it will all be clear upon examination
  of the <file>rules</file> file that <prgn>dh_make</prgn> gives us as a default. You should also
  read "<tt>info make</tt>" for more information.

  <sect1 id="defaultrules">Default <file>rules</file> file

  <p>Newer <prgn>dh_make</prgn> generates a very
  simple but powerful default <file>rules</file> file using the <prgn>dh</prgn>
  command:

<example>
 1 #!/usr/bin/make -f
 2 # -*- makefile -*-
 3 # Sample debian/rules that uses debhelper.
 4 # This file was originally written by Joey Hess and Craig Small.
 5 # As a special exception, when this file is copied by dh-make into a
 6 # dh-make output file, you may use that output file without restriction.
 7 # This special exception was added by Craig Small in version 0.37 of dh-make.
 8
 9 # Uncomment this to turn on verbose mode.
10 #export DH_VERBOSE=1
11
12 %:
13        dh $@
</example>
  (I've added the line numbers.  In the actual <file>rules</file> file, the
  leading white spaces are TAB codes.  <footnote>Under <tt>lenny</tt>,
  <prgn>dh_make</prgn> created much more complicated <file>rules</file> file
  with many <prgn>dh_*</prgn> scripts listed for each required explicit
  targets.</footnote>)

  <p>You are probably familiar with lines like line 1 from shell and Perl
  scripts. It tells the operating system that this file is to be processed
  with <file>/usr/bin/make</file>.

  <p>Line 10 can be uncommented to set <tt>DH_VERBOSE</tt> variable to 1. Then,
  the <package>debhelper</package> tools will output more information.  This
  helps you to understand what exactly is going on behind this simple
  <file>rules</file> file and to debug its problems.

  <p>Lines 12 and 13 are where all the work is done. The percent sign means
  any targets which then call a single program, <prgn>dh</prgn> with the target name. 

  <p><prgn>dh</prgn> is a wrapper script which runs appropriate sequences of
  <prgn>dh_*</prgn> programs depending on its argument.

  <list>
  <item>"<tt>debian/rules clean</tt>" runs "<tt>dh clean</tt>" which in turn
  runs the following:
<example>
dh_testdir
dh_auto_clean
dh_clean
</example>
  <item>"<tt>debian/rules build</tt>" runs "<tt>dh build</tt>" which in turn
  runs the following:
<example>
dh_testdir
dh_auto_configure
dh_auto_build
dh_auto_test
</example>
  <item>"<tt>fakeroot debian/rules binary</tt>" runs "<tt>fakeroot dh binary</tt>"
  which in turn runs "<tt>fakeroot dh binary-arch</tt>" and "<tt>fakeroot dh
  binary-indep</tt>". The commands listed below are run twice, once with
  the "-a" option (in binary-arch) and once with the "-i" option (in
  binary-indep):
<example>
dh_testroot
dh_prep
dh_installdirs
dh_auto_install
dh_install
dh_installdocs
dh_installchangelogs
dh_installexamples
dh_installman
dh_installcatalogs
dh_installcron
dh_installdebconf
dh_installemacsen
dh_installifupdown
dh_installinfo
dh_pysupport
dh_installinit
dh_installmenu
dh_installmime
dh_installmodules
dh_installlogcheck
dh_installlogrotate
dh_installpam
dh_installppp
dh_installudev
dh_installwm
dh_installxfonts
dh_bugfiles
dh_lintian
dh_gconf
dh_icons
dh_perl
dh_usrlocal
dh_link
dh_compress
dh_fixperms
dh_strip
dh_makeshlibs
dh_shlibdeps
dh_installdeb
dh_gencontrol
dh_md5sums
dh_builddeb
</example>
  </list>

  <p>The function of <prgn>dh_*</prgn> commands are almost self-evident from
  their names.  
  <footnote>For complete information on what do all these <prgn>dh_*</prgn>
  scripts exactly do, and what their other options are, please read their
  respective manual pages and the <package>debhelper</package>
  documentation.</footnote>
  There are few notable ones worth making (over)simplified explanation here
  assuming typical build environment based on <file>Makefile</file>.
  <footnote>These commands support other build environments such as
  <file>setup.py</file>, <file>Makefile.PL</file>, <file>Build.PL</file>, and
  <file>cmake</file>, too. Please test them by yourself to find them
  out.</footnote>
  <list>
  <item><p><prgn>dh_auto_clean</prgn> usually executes the following if
  <file>Makefile</file> exists with the <tt>distclean</tt> target.
<example>
make distclean
</example>
  <item><p><prgn>dh_auto_configure</prgn> usually executes the following, e.g.,
  on the <tt><var>x86_64-linux-gnu</var></tt> system, if <file>configure</file>
  exists (line folded for readability).
<example>
./configure --build=<var>x86_64-linux-gnu</var> --prefix=/usr \
  --includedir=${prefix}/include --mandir=${prefix}/share/man \
  --infodir=${prefix}/share/info --sysconfdir=/etc \
  --localstatedir=/var --libexecdir=${prefix}/lib/<var>package</var> \
  --disable-maintainer-mode --disable-dependency-tracking
</example>
  <item><p><prgn>dh_auto_build</prgn> usually executes the following to execute the first target of <file>Makefile</file> if it exists.
<example>
make
</example>
  <item><p><prgn>dh_auto_test</prgn> usually executes the following if
  <file>Makefile</file> exists with the <tt>test</tt> target.
<example>
make test
</example>
  <item><p><prgn>dh_auto_install</prgn> usually executes the following if
  <file>Makefile</file> exists with the <tt>install</tt> target (line folded for readability).
<example>
make install \
  DESTDIR=<var>/path/to</var>/<var>package</var>_<var>version</var>-<var>revision</var>/debian/<var>package</var>
</example>
  </list>

  <p>Targets which require the <prgn>fakeroot</prgn> command contain
  <prgn>dh_testroot</prgn>.  If you are not pretending to be root using this
  command, it exits with an error.

  <p>The important part to know about the <file>rules</file> file created by
  <prgn>dh_make</prgn>, is that it is just a suggestion. It will work for most
  packages but for more complicated ones, don't be afraid to customize it to
  fit your needs. Only things that you must not change are the names of the
  rules, because all the tools use these names, as mandated by the 
  <url name="Debian Policy Manual" id="http://www.debian.org/doc/devel-manuals#policy">.

  <p>Although "<tt>install</tt>" is not required target, it is supported.  
  "<tt>fakeroot dh install</tt>" behaves like 
  "<tt>fakeroot dh binary</tt>" but stops after <prgn>dh_fixperms</prgn>. 

  <sect1 id="customrules">Customization of <file>rules</file> file

  <p>I will explain customization of the <file>rules</file> file
  created with the new <prgn>dh</prgn> command here.
  <footnote>Alternatively, the <file>rules</file> file can be created with the
  makefile inclusion mechanism of the Common Debian Build System
  (<package>cdbs</package>).  It is customized via makefile <tt>DEB_*</tt>
  variables.  See <file>/usr/share/doc/cdbs/cdbs-doc.html</file>.  Do not worry
  about the description of the <file>rules</file> file created by the
  <prgn>dh_make</prgn> command in the <package>cdbs</package> (0.4.74) package.
  It applies only for <tt>lenny</tt> which created explicit targets with long
  list of <prgn>dh_*</prgn> commands.</footnote>

  <p>Many <prgn>dh_*</prgn> commands invoked by the new <prgn>dh</prgn> command
  can be customized by the corresponding configuration files in the
  <file>debian</file> directory.  See <ref id="dother"> for customization of
  such features.

  <p>Some <prgn>dh_*</prgn> commands invoked by the new <prgn>dh</prgn> command
  may require you to run it with some arguments or to run additional commands
  with them or to skip them.  For such cases, you create an
  <tt>override_dh_<var>foo</var></tt> target with its rule in the
  <file>rules</file> file only for the <prgn>dh_<var>foo</var></prgn> command
  you want to change.  It basically say "<em>run me instead</em>".
  <footnote>Under <tt>lenny</tt>, if you wanted to change the behavior of a
  <prgn>dh_*</prgn> script you found the relevant line in the
  <file>rules</file> file and adjusted it.</footnote>

  <p>If you want to store the system configuration data for the
  <package>gentoo</package> package in the <file>/etc/gentoo</file> directory
  instead of the usual <file>/etc</file> directory, you can override the
  default <tt>--sysconfig=/etc</tt> argument given by the
  <prgn>dh_auto_configure</prgn> command to the <prgn>configure</prgn> command by
  the following.
  <footnote>The <package>gentoo</package> package uses the GNU build system,
  also known as the Autotools.  
  See <url id="http://en.wikipedia.org/wiki/GNU_build_system">.</footnote>

<example>
override_dh_auto_configure:
        dh_auto_configure -- --sysconfig=/etc/gentoo
</example>

  <p>Here, using the <prgn>dh_auto_configure</prgn> command is better than the
  <prgn>configure</prgn> command since it will only override the
  <tt>--sysconfig</tt> argument and keeps well intended other arguments to the
  <prgn>configure</prgn> command.<footnote>The arguments given after
  <tt>--</tt> are appended to the default arguments of the auto-executed
  program.</footnote>

  <p>If <file>Makefile</file> of a source for <package>gentoo</package>
  requires you to specify <tt>build</tt> as its target to build it
  <footnote><prgn>dh_auto_build</prgn> without any arguments will execute the
  first target in the <file>Makefile</file> file.</footnote>, you create an
  <tt>override_dh_auto_build</tt> target to enable it.

<example>
override_dh_auto_build:
        dh_auto_build -- build
</example>

  <p>If <package>gentoo</package> has an unusual upstream changelog file called
  <file>FIXES</file>, <prgn>dh_installchangelogs</prgn> will not install that
  file by default.  The <prgn>dh_installchangelogs</prgn> command requires
  <file>FIXES</file> as its argument to install it.

<example>
override_dh_installchangelogs:
        dh_installchangelogs FIXES
</example>

  <chapt id="dother">Other files under the <file>debian</file> directory

  <p>To control most of what <package>debhelper</package> does while building
  the package, you put optional configuration files under the
  <file>debian</file> directory. This chapter will describe what each of these
  does and its format.

  <p>The <prgn>dh_make</prgn> command will create some template configuration
  files under the <file>debian</file> directory.  Most of them come with
  filenames suffixed by "<tt>ex</tt>".  Some of them come with filenames
  prefixed by the binary package name such as  <tt><var>package</var></tt>.
  Take a look at all of them. 

  <p>If you wish or need to use any of those features, please do the following.
  <list>
    <item>read <url name="Debian Policy Manual" id="http://www.debian.org/doc/devel-manuals#policy">.
    <item>read <url name="Debian Developer's Reference" id="http://www.debian.org/doc/devel-manuals#devref">).
    <item>modify template files to suit your needs, if necessary.
    <item>rename them to remove the <tt>.ex</tt> suffix if they have one.
    <item>rename them to remove the <tt>ex.</tt> prefix if they have one.
    <item>modify the <file>rules</file> file (see <ref id="rules">), if necessary. 
  </list>

  <p>Those <package>debhelper</package> configuration files without
  <file><var>package</var></file> prefix such as <file>install</file> apply to
  the first binary package.  When there are many binary packages, their
  configurations can be specified by prefixing their name to their
  configuration filenames such as <file><var>package-1</var>.install</file>,
  <file><var>package-2</var>.install</file>, etc.

  <sect id="readme"><file>README.Debian</file> file

  <p>Any extra details or discrepancies between the original package and
  your <em>debianized</em> version should be documented here.

  <p><prgn>dh_make</prgn> created a default one, this is what it looks like:

<example>
gentoo for Debian
-----------------

&lt;possible notes regarding this package - if none, delete this file&gt;

 -- Josip Rodin &lt;joy-mg@debian.org&gt;, Wed, 11 Nov 1998 21:02:14 +0100
</example>

  <p>Since we don't have anything to put there, we'll delete the file.

  <sect id="compat"><file>compat</file> file

  <p>The <file>compat</file> file defines the <package>debhelper</package>
  compatibility level.  Currently, you should set it to
  <package>debhelper</package> V7 by the following.
<example>
$ echo 7 > debian/compat
</example>

  <sect id="conffiles"><file>conffiles</file> file

  <p>One of the most annoying things about software is when you spend a
  great deal of time and effort customizing a program, only to have an
  upgrade stomp all over your changes. Debian solves this problem by
  marking configuration files so that when you upgrade a package, you'll
  be prompted whether you want to keep your old configuration or not.

  <p>Since <package>debhelper</package> V3, <prgn>dh_installdeb</prgn> will
  <em>automatically</em> flag any files under the <file>/etc</file> directory
  as conffiles, so if your program only has conffiles there you do not need to
  specify them in this file. For most package types, the only place there is
  (and should be conffiles) is under <file>/etc</file> and so this file doesn't
  need to exist.

  <p>If your program uses configuration files but also rewrites them on its
  own, it's best not to make them as conffiles because <prgn>dpkg</prgn> will
  then prompt users to verify the changes all the time.

  <p>If the program you're packaging requires every user to modify the
  configuration files in the <file>/etc</file> directory, there are 2 popular
  ways to make them not as conffiles to keep <prgn>dpkg</prgn> quiet.
  <list>
  <item>You make a symlink under the <file>/etc</file> directory pointing to a
  file under the <file>/var</file> directory generated by the <em>maintainer
  scripts</em>.
  <item>You make a file generated by the <em>maintainer scripts</em> under the
  <file>/etc</file> directory.
  </list>

  <p>For more information on the <em>maintainer scripts</em>, see <ref id="maintscripts">.

  <sect id="crond"><file><var>package</var>.cron.*</file> files

  <p>If your package requires regularly scheduled tasks to operate properly, 
  you can use this file to set it up. You can either setup regular tasks 
  that happen hourly, daily, weekly or monthly or alternatively happen any
  other time that you wish.  The filenames are:

  <list>
    <item><file>cron.hourly</file> - Installed as <file>/etc/cron.hourly/<var>package</var></file>:
    run once an hour every hour.
    <item><file>cron.daily</file> - Installed as <file>/etc/cron.daily/<var>package</var></file>:
    run once a day, usually early morning.
    <item><file>cron.weekly</file> - Installed as <file>/etc/cron.weekly/<var>package</var></file>:
    run once a week, usually early Sunday morning.
    <item><file>cron.monthly</file> - Installed as <file>/etc/cron.monthly/<var>package</var></file>:
    run once a month, usually early morning on the first of the month.
    <item><file>cron.d</file> - Installed as <file>/etc/cron.d/<var>package</var></file>: for any other time
  </list>

  <p>For the named files, the format of them is the shell script.  The different
  one is <file><var>package</var>.cron.d</file> which follows the format of
  <manref name="crontab" section="5">.

  <p>Note that this doesn't include log rotation; for that, see
  <manref name="dh_installlogrotate" section="1"> and
  <manref name="logrotate" section="8">.

  <sect id="dirs"><file>dirs</file> file

  <p>This file specifies the directories which we need but the normal
  installation procedure ("<tt>make install DESTDIR=...</tt>" invoked by
  "<tt>dh_auto_install</tt>") somehow doesn't create. This generally
  means there is a problem with the <file>Makefile</file>.

  <p>Files listed in the <file>install</file> file doesn't need
  the directories created first. See <ref id="rules">

  <p>It is best to first try to run the installation first and only use
  this if you run into trouble.  There is no preceding slash on the 
  directory names.  

  <sect id="doc-base"><file><var>package</var>.doc-base.EX</file> file

  <p>If your package has documentation other than manual pages and info
  docs, you should use the <package/doc-base/ file to register it,
  so the user can find it with e.g. <manref name="dhelp" section="1">,
  <manref name="dwww" section="1"> or <manref name="doccentral" section="1">.

  <p>This usually includes HTML, PS and PDF files, shipped in
  <file>/usr/share/doc/<var>packagename</var>/</file>.

  <p>This is how <package>gentoo</package>'s doc-base file <file>gentoo.doc-base.EX</file> looks like:

<example>
Document: gentoo
Title: Gentoo Manual
Author: Emil Brink
Abstract: This manual describes what Gentoo is, and how it can be used.
Section: File Management

Format: HTML
Index: /usr/share/doc/gentoo/html/index.html
Files: /usr/share/doc/gentoo/html/*.html
</example>

  <p>For information on the file format, see
  <manref name="install-docs" section="8"> and the <package/doc-base/ manual,
  in <file>/usr/share/doc/doc-base/doc-base.html/</file>.

  <p>For more details on installing additional documentation, look in <ref id="destdir">.

  <sect id="docs"><file>docs</file> file

  <p>This file specifies the file names of documentation files we can have
  <prgn>dh_installdocs</prgn> install into the temporary directory for us.

  <p>By default, it will include all existing files in the top-level source
  directory that are called "<file>BUGS</file>", "<file>README*</file>", "<file>TODO</file>" etc.

  <p>For <package>gentoo</package>, I also included some other files:

<example>
BUGS
CONFIG-CHANGES
CREDITS
ONEWS
README
README.gtkrc
TODO
</example>
  
  <sect id="emacsen"><file>emacsen-*.ex</file> file

  <p>If your package supplies Emacs files that can be bytecompiled at
  package installation time, you can use these files to set it up.

  <p>They are installed into the temporary directory by
  <manref name="dh_installemacsen" section="1">.

  <p>If you don't need these, remove them.

  <sect id="initd"><file>init.d.ex</file> and <file><var>package</var>.default</file> files

  <p>If your package is a daemon that needs to be run at the system start-up,
  you've obviously disregarded my initial recommendation, haven't you? :-)

  <p><file>init.d.ex</file> is a fairly generic init skeleton file for an <file>/etc/init.d/</file>
  script, so you'll likely have to edit it, a lot, while making sure to 
  provide Filesystem Hierarchy Standard
    (see <file>/usr/share/doc/debian-policy/fhs/</file>) compliant headers. It gets installed into
  the temporary directory by <manref name="dh_installinit" section="1">.

  <p><file><var>package</var>.default</file> will be installed into <file>etc/default/<var>package</var></file>. This file
  sets defaults that are sourced by the init script.  Most times this
  default file is used to disable running a daemon, set some default flags
  or timeouts.  If your init script has certain <em>settable</em> features you want
  to install these into the default file, not the init script.
  
  <p>If your upstream package has an init file you can either use it or not. 
  If you don't use their init.d script then create a new one in <file>debian/init.d</file>.
  However if the upstream init script looks fine and installs in the right
  place you still need to setup the <file>rc*</file> symlinks. To do this you will need
  to override <prgn>dh_installinit</prgn> in the <file>rules</file> file with the following lines:

<example>
override_dh_installinit:
        dh_installinit --onlyscripts
</example>

  <p>If you don't need this, remove the files.

  <sect id="install"><file>install</file> file

  <p>If there are files that need to be installed into your package but
  your standard "<tt>make install</tt>" won't do it, you put the filenames and
  destinations into this <file>install</file> file. They are installed by
  <manref name="dh_install" section="1">.<footnote>This replaces the deprecated 
  <manref name="dh_movefiles" section="1"> command which is configured by the
  <file>files</file> file.</footnote>  You should first check there is not a
  more specific tool to use.  For example, documents should be in the
  <file>docs</file> file and not in this one.

  <p>This <file>install</file> file has one line per file installed, with the name of the file
  (relative to the top build directory) then a space then the installation
  directory (relative to the install directory). One example of where this
  is used is where a binary is forgotten to be installed, the <file>install</file> file
  would look like:

<example>
src/foo/mybin usr/bin
</example>

  <p>This will mean when this package is installed, there will be a binary
  file <file>/usr/bin/mybin</file>.

  <p>Alternatively, this <file>install</file> can have the name of the file only without
  the installation directory when the relative directory path does not change.
  This format is usually used for a large package that splits build result into
  multiple binary packages using <file><var>package-1</var>.install</file>,
  <file><var>package-2</var>.install</file>, etc.

  <p>The <prgn>dh_install</prgn> command will fall back to look in
  <file>debian/tmp</file> for files, if it doesn't find them in the current
  directory (or wherever you've told it to look using <tt>--sourcedir</tt>).

  <sect id="lintian"><file>{<var>package</var>.|source/}lintian-overrides</file> files

  <p>If <package>lintian</package> reports an erroneous lintian diagnostics for
  a case when the policy allows exceptions to some rule, you can use
  <file><var>package</var>.lintian-overrides</file> or
  <file>source/lintian-overrides</file> to quiet it.  Please read
  <file>/usr/share/doc/lintian/lintian.html/index.html</file> and refrain from
  abusing this.

  <p><file><var>package</var>.lintian-overrides</file> is for the binary
  package named as <package><var>package</var></package> and is installed into
  <file>usr/share/lintian/overrides/<var>package</var></file> by the
  <prgn>dh_lintian</prgn> command.

  <p><file>source/lintian-overrides</file> is for the source packge. This is
  not installed.

  <sect id="manpage"><file>manpage.*.ex</file> files

  <p>Your program(s) should have a manual page. If they don't, each of these
  files is a template that you can fill out.

  <sect1 id="manpage1"><file/manpage.1.ex/ file

  <p>Manual pages are normally written in <manref name="nroff" section="1">.
  The <tt/manpage.1.ex/ template is written in <prgn>nroff</prgn>, too. 
  See the <manref name="man" section="7"> manual page
  for a brief description of how to edit such a file.

  <p>The final manual page file name should include the name of the program
  it is documenting, so we will rename it from "<tt>manpage</tt>" to "<tt>gentoo</tt>". 
  The file name also includes "<tt>.1</tt>" as the first suffix, which means it's a
  manual page for a user command. Be sure to verify that this section is
  indeed the correct one. Here's a short list of manual page sections:

<example>
Section |     Description     |     Notes
   1     User commands          Executable commands or scripts.
   2     System calls           Functions provided by the kernel.
   3     Library calls          Functions within system libraries.
   4     Special files          Usually found in /dev
   5     File formats           E.g. /etc/passwd's format
   6     Games                  Or other frivolous programs
   7     Macro packages         Such as man macros.
   8     System administration  Programs typically only run by root.
   9     Kernel routines        Non-standard calls and internals.
</example>
  
  <p>So <package>gentoo</package>'s man page should be called <file/gentoo.1/. 
  There was no <file>gentoo.1</file> man page in the original source, you should create
  it using information from the example and from upstream docs. 

  <p>You can use the <prgn>help2man</prgn> command to generate a man page out of
  "<tt>--help</tt>" and "<tt>--version</tt>" output of each program, too.

  <sect1 id="manpagesgml"><file/manpage.sgml.ex/ file

  <p>If on the other hand you prefer writing SGML instead of <prgn>nroff</prgn>, you can
  use the <file/manpage.sgml.ex/ template. If you do this, you have to:
  
  <list>
    <item>rename the file to something like <tt/gentoo.sgml/.
    <item>install the <package/docbook-to-man/ package
    <item>add <tt/docbook-to-man/ to the <tt/Build-Depends/ line in the
          <file/control/ file
    <item>add a <tt>override_dh_auto_build</tt> target to your <file>rules</file> file:
<example>
override_dh_auto_build:
        docbook-to-man debian/gentoo.sgml > debian/gentoo.1
        dh_auto_build
</example>
  </list>

  <sect1 id="manpagexml"><file/manpage.xml.ex/ file

  <p>If you prefer XML over SGML, you can use the <tt/manpage.xml.ex/ template.
  If you do this, you have two choices:
  
  <list>
    <item>rename the source file to something like <tt/gentoo.1.xml/
    <item>install the <package/docbook-xsl/ package and an XSLT processor like
          <package/xsltproc/ (recommended)
    <item>add the <tt/docbook-xsl/, <tt/docbook-xml/ and <tt/xsltproc/ packages to the
          <tt/Build-Depends/ line in the <tt/control/ file
    <item>add a <tt>override_dh_auto_build</tt> target to your <file>rules</file> file:
<example>
override_dh_auto_build:
        xsltproc --nonet \
         --param make.year.ranges 1 \
         --param make.single.year.ranges 1 \
         --param man.charmap.use.subset 0 \
         -o debian/ \
  /usr/share/xml/docbook/stylesheet/nwalsh/manpages/docbook.xsl \
        debian/gentoo.1.xml
        dh_auto_build
</example>
  </list>
 
  <sect id="menu"><file>menu.ex</file> file

  <p>X Window System users usually have a window manager with a menu that
  can be customized to launch programs. If they have installed the Debian
  <package/menu/ package, a set of menus for every program on the system will be
  created for them.

  <p>Here's the default <file/menu.ex/ file that <prgn>dh_make</prgn> created:
  
<example>
?package(gentoo):needs="X11|text|vc|wm" \
        section="Applications/see-menu-manual"\
        title="gentoo" command="/usr/bin/gentoo"
</example>

  <p>The first field after the colon character is <tt>needs</tt>, and it specifies
  what kind of interface the program needs. Change this to one of the listed
  alternatives, e.g. <tt>text</tt> or <tt>X11</tt>.

  <p>The next is <tt>section</tt>, where the menu and submenu the entry should
  appear in. The current list of sections <footnote>There were a major
  reorganization of menu structure for squeeze.</footnote> is at:
  <file>/usr/share/doc/debian-policy/menu-policy.html/ch2.html#s2.1</file>

  <p>The <tt>title</tt> field is the name of the program. You can start this one
  in uppercase if you like. Just keep it short.

  <p>Finally, the <tt>command</tt> field is the command that runs the program.

  <p>Now we'll change the menu entry to this:

<example>
?package(gentoo): needs="X11" \
        section="Applications/Tools" \
        title="Gentoo" command="gentoo"
</example>

  <p>You can also add other fields like <tt>longtitle</tt>, <tt>icon</tt>, <tt>hints</tt> etc.
  See <manref name="menufile" section="5">,
  <manref name="update-menus" section="1">
  and <file>/usr/share/doc/debian-policy/menu-policy.html/</file> for more
  information.

  <sect id="maintscripts"><file>{post|pre}{inst|rm}.ex</file> files

  <p>These <file>postinst.ex</file>, <file>preinst.ex</file>, <file>postrm.ex</file>, and <file>prerm.ex</file> files
  <footnote>Although I used BASH short hand expression to indicate these files
  as "<file>{post|pre}{inst|rm}.ex</file>" here, I recommend you to use pure
  POSIX (non-BASH) shell for these <em>maintainer scripts</em> as much as possible for
  the better compatibility.</footnote>
  are called <em>maintainer scripts</em>. They are scripts which are
  put in the control area of the package and run by <prgn/dpkg/ when your
  package is installed, upgraded or removed.

  <p>For now, you should try to avoid any manual editing of maintainer
  scripts if you possibly can because they tend to get complex. For more
  information look in the <url name="Debian Policy Manual, 6 'Package maintainer scripts and installation procedure'" id="http://www.debian.org/doc/debian-policy/ch-maintainerscripts.html">, and take a look at
  these example files provided by <prgn>dh_make</prgn>.

  <p>The <package>ucf</package> package provides <em>conffile-like</em>
  handling infrastructure to preserve user changes for files that may not be
  labeled <em>conffiles</em> such as ones managed by the <em>maintainer
  scripts</em>.

  <p>If you create custom <em>maintainer scripts</em> for a package, you should
  make sure to test them not only for install and upgrade but also for remove
  and purge.

  <sect id="watch"><file>watch.ex</file> file

  <p>This file is used to configure the <manref name="uscan" section="1">
  and <manref name="uupdate" section="1"> programs (in the
  <package/devscripts/ package). These are used to watch the site you got
  the original source from.  This is also used by 
  <url id="http://wiki.debian.org/DEHS" name="Debian External Health Status (DEHS)">.

  <p>Here's what I put in it:

<example>
# watch control file for uscan
version=3
#
http://ftp.obsession.se/gentoo/ gentoo-(.*)\.tar\.gz
</example>

  <p>Hint: connect to the Internet, and try running <prgn>uscan</prgn> in the program
  directory once you create the file. And read the manuals! :)

  <sect id="sourcef"><file>source/format</file> file

  <p>In the <file>debian/source/format</file> file, there should be a single
  line indicating the desired format for the source package
  (check <manref name="dpkg-source" section="1"> for an exhaustive list).  After
  <tt>squeeze</tt>, it should say either:
  <list>
  <item><tt>3.0 (native)</tt> for Debian native packages or 
  <item><tt>3.0 (quilt)</tt> for everything else.  
  </list>

  <p>The newer <tt>3.0 (quilt)</tt> source format automatically records
  modifications in a <prgn>quilt</prgn> patch series within
  <file>debian/patches/</file>. Those changes are then automatically
  applied during extraction of the source package. 
  <footnote>See <url name="DebSrc3.0"
  id="http://wiki.debian.org/Projects/DebSrc3.0"> for the summary information
  concerning the switch to the new <tt>3.0 (quilt)</tt> and <tt>3.0
  (native)</tt> source formats.</footnote> The Debian modifications are simply
  stored in a <file>debian.tar.gz</file> archive containing all files under the
  <file>debian</file> directory.  This new format supports
  inclusion of binary files such as PNG icons by the package maintainer without
  requiring tricks.  <footnote>Actually, this new format also supports
  multiple upstream tarballs and more compression methods.
  These are beyond the scope of this document.</footnote>

  <p>When <prgn>dpkg-source</prgn> extracts a source package in 
  <tt>3.0 (quilt)</tt> source format, it automatically applies all
  patches listed in <file>debian/patches/series</file>.  You can avoid
  applying patches at the end of the extraction with the <tt>--skip-patches</tt>
  option.

  <sect id="patches"><file>patches/*</file> files

  <p>The old <prgn>dpkg</prgn> <tt>1.0</tt> source format created a single large
  <file>diff.gz</file> file which contains package maintenance files in
  <file>debian</file> and patch files to the source.  Such a package is a bit
  cumbersome to inspect and understand for each source tree modification later.
  This is not so nice.

  <p>Several methods for the patch set maintenance have been proposed and are
  in use with Debian packages.  The <prgn>quilt</prgn> system is the preferred
  maintenance system in use.  Other ones are <prgn>dpatch</prgn>,
  <prgn>dbs</prgn>, <prgn>cdbs</prgn>, etc.  Many of these keep such patches as
  <file>debian/patches/*</file> files.  

  <p>The newer <tt>3.0 (quilt)</tt> source format is storing patches in a
  <prgn>quilt</prgn> series.  It also keeps such patches as
  <file>debian/patches/*</file> files which are packaged in the
  <file>debian.tar.gz</file> file.

  <p>The <prgn>quilt</prgn> command is explained in <manref section="1"
  name="quilt">. It records modifications to the source as a stack of
  <tt>-p1</tt> patch files in the <file>debian/patches/</file> directory and
  the source tree is untouched outside of the <file>debian</file> directory.
  The order of these patches are recorded in the
  <file>debian/patches/series</file> file.  You can apply (=push),
  un-apply(=pop), and refresh patches easily.
  <footnote>If you are asking a sponsor to upload your package, this kind of
  clear separation and documentation of your changes are very important to
  expedite the package review by your sponsor.</footnote>

  <p>For <ref id="first">, we created 3 patches in <file>debian/patches/</file>.

  <p>Since Debian patches are located in <file>debian/patches/</file>, please
  make sure to setup the <prgn>quilt</prgn> command properly as described
  in <ref id="quiltrc">.

  <p>When someone (including yourself) provides you with a patch <file><var>foo</var>.patch</file> to the source
  later, then the modification of a <tt>3.0 (quilt)</tt> source package is quite simple:

<example>
$ dpkg-source -x gentoo_0.9.12.dsc
$ cd gentoo-0.9.12
$ quilt import ../<var>foo</var>.patch
$ quilt push
$ quilt refresh
</example>

  <chapt id="build">Building the package

  <p>We should now be ready to build the package.

  <sect id="completebuild">Complete (re)build

  <p>Enter the program's main directory and then issue this command:

<example>
$ dpkg-buildpackage
</example>

  <p>This will do everything for you. It will:
  <list>
    <item>clean the source tree ("<tt>debian/rules clean</tt>")
    <item>build the source package ("<tt>dpkg-source -b</tt>")
    <item>build the program ("<tt>debian/rules build</tt>")
    <item>build the binary package ("<tt>fakeroot debian/rules binary</tt>")
    <item>sign the source <file/.dsc/ file, using <prgn/gpg/
    <item>create and sign the upload <file/.changes/ file, using
          <prgn/dpkg-genchanges/ and <prgn/gpg/
  </list>

  <p>The only input that will be required of you is your GPG secret pass
  phrase, twice.

  <p>After all this is done, you will see the following files in the
  directory above (<file>~/gentoo</file>):

  <p><list>
  <item><file>gentoo_0.9.12.orig.tar.gz</file>

  <p>This is the original source code tarball, merely renamed to the above
  so that it adheres to the Debian standard. Note that this was created
  initially by the "<tt>dh_make -f ../gentoo-0.9.12.tar.gz</tt>".

  <item><file>gentoo_0.9.12-1.dsc</file>

  <p>This is a summary of the contents of the source code. The file is
  generated from your <file>control</file> file, and is used when
  unpacking the source with <manref name="dpkg-source" section="1">. This
  file is GPG signed, so that people can be sure that it's really yours.

  <item><file>gentoo_0.9.12-1.debian.tar.gz</file>

  <p>This compressed tarball contains your <file>debian</file> directory
  contents. Each and every addition you made to the original source code are
  stored as quilt patches in <file>debian/patches</file>.

  <p>If someone else wants to re-create your package from scratch, they can
  easily do so using the above three files. The extraction procedure is
  trivial: just copy the three files somewhere else and run
  "<tt>dpkg-source -x gentoo_0.9.12-1.dsc</tt>".
  <footnote>You can avoid applying <prgn>quilt</prgn> patches in the
  <tt>3.0 (quilt)</tt> source format at the end of the
  extraction with the <tt>--skip-patches</tt> option.  Alternatively, you can
  run "<tt>quilt pop -a</tt>" after normal operation.</footnote>

  <item><file>gentoo_0.9.12-1_i386.deb</file>

  <p>This is your completed binary package. You can use <prgn/dpkg/ to
  install and remove this just like any other package.

  <item><file>gentoo_0.9.12-1_i386.changes</file>

  <p>This file describes all the changes made in the current package
  revision, and it is used by the Debian FTP archive maintenance programs
  to install the binary and source packages in it. It is partly generated
  from the <file>changelog</file> file and the <file>.dsc</file> file. This file is GPG signed, so
  that people can be sure that it's really yours.

  <p>As you keep working on the package, behavior will change and new
  features will be added. People downloading your package can look at this
  file and quickly see what has changed. Debian archive maintenance programs
  will also post the contents of this file to the <url
  id="http://lists.debian.org/debian-devel-announce/"
  name="debian-devel-announce@lists.debian.org"> mailing list.
  </list>

  <p>The long strings of numbers in the <file>.dsc</file> and
  <file>.changes</file> files are MD5/SHA1/SHA256 checksums for the files
  mentioned.  A person downloading your files can test them with <manref
  name="md5sum" section="1">, <manref name="sha1sum" section="1">, or <manref
  name="sha256sum" section="1"> and if the numbers don't match, they'll know
  the file is corrupt or has been tampered with.

  <sect id="option-sa">Including <file>orig.tar.gz</file> for upload
  <p>
When you first upload the package to the archive, you need to include
the original <file>orig.tar.gz</file> source.  If the last changelog entry is
not the first one for the given upstream version, you must provide
<prgn>dpkg-buildpackage</prgn> command with the "<tt>-sa</tt>" option.
On the other hand, the "<tt>-sd</tt>" option will force to exclude the
original <file>orig.tar.gz</file> source.

  <sect id="debuild"><prgn>debuild</prgn> command

  <p>You can automate package build process of the
  <prgn>dpkg-buildpackage</prgn> command further with the <prgn>debuild</prgn>
  command.  
  See <manref name="debuild" section="1">.
  
  <p>Customization of the <prgn>debuild</prgn> command can be done through 
  <file>/etc/devscripts.conf</file> or <file>~/.devscripts</file>. 
  I would suggest at least following items:

<example>
DEBSIGN_KEYID="Your_GPG_keyID"
</example>
  With these, you can build package always with your GPG pass phrase and avoid 
  including undesired components.  (This is good for sponsoring too.)
  For example, cleaning source and rebuilding package from a user account 
  is as simple as:

<example>
$ debuild
</example>

  <p>You can clean source tree as simple as:

<example>
$ debuild clean
</example>

  <sect id="pbuilder"><package>pbuilder</package> package
  <p>
For a clean room (<prgn>chroot</prgn>) build environment to verify the build
dependencies, the <package>pbuilder</package> package is very useful.  
<footnote>Since the <package>pbuilder</package> package is still evolving, you
have to check the actual configuration situation by consulting the latest
official documentation.</footnote>
This ensures a clean build from the source under the <tt>sid</tt> auto-builder
for different architectures and avoids the severity serious FTBFS (Fails To
Build From Source) bug which is always in the RC (release critical) category.
See <url id="&buildd-home;"> for more on the Debian package auto-builder.

<p>Let's customize the <package>pbuilder</package> package by setting
<file>/var/cache/pbuilder/result/</file> directory writable by the user
and setting <file>~/.pbuilderrc</file> or <file>/etc/pbuilderrc</file>
to include
<example>
AUTO_DEBSIGN=yes
</example>
This will allow you to sign generated packages with your secret GPG key in the
<file>~/.gnupg/</file> directory.

<p>Let's then initialize the local <package>pbuilder</package>
<prgn>chroot</prgn> system first as follows.
<example>
$ sudo pbuilder create
</example>

<p>If you already have the completed source packages, issue the following
commands in the directory where the <file><var>foo</var>.orig.tar.gz</file>,
<file><var>foo</var>.debian.tar.gz</file>, and <file><var>foo</var>.dsc</file>
files exist to update the local <package>pbuilder</package> <prgn>chroot</prgn>
system and to build binary packages in it.
<example>
$ sudo pbuilder --update
$ sudo pbuilder --build <var>foo</var>.dsc
</example>
<p>
The newly built packages will be located in
<file>/var/cache/pbuilder/result/</file> with non-root ownership.

<p>If you already have the updated source tree without generating the matching
source packages, issue the following commands in the source directory where the
<file>debian</file> directory exists, instead.
<example>
$ sudo pbuilder --update
$ pdebuild
</example>

<p>
See <url id="&pbuilder-home;">,
<manref section="1" name="pdebuild">,
<manref section="5" name="pbuilderrc">, and
<manref section="8" name="pbuilder"> .

  <sect id="git-buildpackage"><prgn>git-buildpackage</prgn> command and similars
<p>
If your upstream uses the source code management system 
(<url id="http://www.debian.org/doc/manuals/debian-reference/ch10.en.html#_version_control_systems" name="VCS">) 
to maintain their code, you should consider to use them.  That makes merging
and cherry-picking upstream patches much easier.  There are several specialized
wrapper script packages for the Debian package building for each VCS.
<list>
<item>Git (<package>git-core</package>)
<list>
<item><package>git-buildpackage</package>: Suite to help with Debian packages in Git repositories.
<item><package>topgit</package>: a Git patch queue manager
</list>
<item>Subversion (<package>subversion</package>)
<list>
<item><package>svn-buildpackage</package>: helper programs to maintain Debian packages with Subversion.
</list>
<item>CVS (<package>cvs</package>)
<list>
<item><package>cvs-buildpackage</package>: A set of Debian package scripts for CVS source trees.
</list>
</list>

<p>These packages offer more elegant working environment than manual use of the
<prgn>quilt</prgn> commands for advanced audiences to <em>automate</em>
building of packages.  I will not explain them in this tutorial.  Please seek
help with other web resources.

<list>
<item>"<url name="debian packages in git" id="https://honk.sigxcpu.org/piki/development/debian_packages_in_git/">"
<item>"<url name="Using Git for Debian Packaging" id="http://www.eyrie.org/~eagle/notes/debian/git.html">"
<item>"<url name="Using TopGit to generate quilt series for Debian packaging" id="http://git.debian.org/?p=collab-maint/topgit.git;a=blob_plain;f=debian/HOWTO-tg2quilt;hb=HEAD">"
<item>"<url name="git-dpm: debian packages in git manager" id="http://git-dpm.alioth.debian.org/">"
</list>

  <sect id="quickrebuild">Quick rebuild

  <p>With a large package, you may not want to rebuild from scratch every time
  while you tune details in <file>debian/rules</file>. For testing purposes,
  you can make a <file>.deb</file> file without rebuilding the upstream sources
  like this:

<example>
$ fakeroot debian/rules binary
</example>

  <p>Once you are finished with your tuning, remember to rebuild following
  the proper procedure. You may not be able to upload correctly if
  you try to upload <file>.deb</file> files built this way.


  <chapt id="checkit">Checking the package for errors
  
  <p>There are few chores you shuld know to check the package for errors.

  <sect id="debi"><prgn>debi</prgn> command

  <p>You must test to install all the generated binary packages by
  yourself.  This can be done using the <manref name="debi" section="1">
  command. 
<example>
$ sudo debi gentoo_0.9.12-1_i386.changes
</example>

  <p>You must also test to remove and purge these packages by yourself.
  Many <em>maintainer script</em> bugs show up when it is removed.  Testing on
  machine other than your own is also good idea.  You must watch closely for
  any warnings or errors both during the installation and while the program is
  being run.

  <sect id="lintians"><package>lintian</package> package

  <p>Run <manref name="lintian" section="1"> on your <file>.changes</file>
  file.  The <prgn>lintian</prgn> command runs many test scripts to check for
  many common packaging errors. 
  
<example>
$ lintian -I -i gentoo_0.9.12-1_i386.changes
</example>
  
  <p>Of course, replace the filename with the name of the <file>.changes</file> file
  generated for your package. If it appears that there are some errors
  (lines beginning with <tt>E:</tt>), read the explanation (the <tt>N:</tt> lines), correct
  mistakes, and rebuild as described in <ref id="completebuild">. If there are
  lines that begin with <tt>W:</tt>, those are warnings, so tune the package or
  verify that the warnings are spurious (and make Lintian overrides; see
  the documentation for details). Lines beginning with <tt>I:</tt> are
  minor issues or even suggestions of improvements (better packaging practices).

  <p>Note that you can build the package with <prgn/dpkg-buildpackage/ and run
  <prgn/lintian/ on it in one command with <manref name="debuild" section="1"> or 
  with <manref name="pdebuild" section="1">.
  
  <sect id="debc"><prgn>debc</prgn> command

  <p>You can list files in the binary Debian package by
  <manref name="debc" section="1"> command. 

<example>
$ debc <var>package</var>.changes
</example>

  <sect id="debdiff"><prgn>debdiff</prgn> command

  <p>You can compare file lists in two binary Debian packages with
  <manref name="debdiff" section="1"> command.  This is useful for
  verifying that no files have been unintentionally misplaced or removed,
  and no other inadvertent changes were made when updating packages.
  You can check group of <file>*.deb</file> files simply by the following.

<example>
$ debdiff <var>old-package</var>.changes <var>new-package</var>.changes
</example>

  <sect id="tardiff"><prgn>tar</prgn> command

  <p>You can compare two <file>debian.tar.gz</file> files with <manref
  name="tar" section="1"> command with the <tt>-d</tt> option.  This is useful
  for verifying that no inadvertent changes were made to the source by the
  maintainer when updating packages.

<example>
$ tar -z -d <var>old-package</var>.debian.tar.gz <var>new-package</var>.debian.tar.gz
</example>

  <p>You can also compare two <file>orig.tar.gz</file> files too.  This is
  useful for verifying what the upstream has done.

  <p>You can always compare the extracted source trees simply by the following.  This is useful even when the source package formats are changed.
<example>
$ diff -Nru  <var>old-package/</var> <var>new-package/</var>
</example>

  <sect id="mc"><prgn>mc</prgn> command

  <p>Many of these file inspection operations can be made into an intuitive process by
  using a file manager like <manref name="mc" section="1"> which will
  let you browse not only the contents of <file>*.deb</file> package files but
  also <file>*.udeb</file>, <file>*.debian.tar.gz</file>,
  <file>*.diff.gz</file>, and <file>*.orig.tar.gz</file> files.
  <p> 
  Be on the lookout for extra unneeded files or zero length files, both
  in the binary and source package. Often cruft doesn't get cleaned up
  properly; adjust your <file>rules</file> file to compensate for that.
 
  <chapt id="upload">Uploading the package

  <p>Now that you have tested your new package thoroughly, you will be technically ready
  to start the Debian new maintainer application process, as described at
  <url id="http://www.debian.org/devel/join/newmaint">

  <sect id="upload-debian">Uploading to the Debian archive
  
  <p>Once you become an official developer, you'll need to upload the
  package to the Debian archive. You can do this manually, but it's easier
  to use the provided automated tools, like
  <manref name="dupload" section="1"> or <manref name="dput" section="1">.
  We'll describe how it's done with <prgn/dupload/.

  <p>First you have to set up <prgn>dupload</prgn>'s config file. You can either edit the
  system-wide <file>/etc/dupload.conf</file> file, or have your own
  <file>~/.dupload.conf</file> file override the few things you want to
  change. Put something like this in the file:

<example>
package config;

$default_host = "anonymous-ftp-master";

$cfg{'anonymous-ftp-master'} = {
      fqdn => "ftp.upload.debian.org",
      method => "ftp",
      incoming => "/pub/UploadQueue/",
      # files pass on to dinstall on ftp-master which sends emails itself
      dinstall_runs => 1,
};

1;
</example>

  <p>You can read the <manref name="dupload.conf" section="5"> manual
  page to understand what each of these options means.

  <p>The <tt>$default_host</tt> option is the trickiest one -- it determines which of
  the upload queues will be used by default. <tt>anonymous-ftp-master</tt> is the primary
  one, but it's possible that you will want to use another, faster one.
  For more information about the upload queues, read the 
  <url name="Debian Developer's Reference, 5.6. 'Uploading a package'" id="http://www.debian.org/doc/manuals/developers-reference/pkgs.html#upload">.

  <p>Then connect to your Internet provider, and issue this command:
  
<example>
$ dupload gentoo_0.9.12-1_i386.changes
</example>

  <p><prgn/dupload/ checks that the MD5/SHA1/SHA256 checksums of the files match those from the
  <file>.changes</file> file, so it will warn you to rebuild it as described in
  <ref id="completebuild"> so it can properly upload.

  <!-- (No more use of ftp-master)
  <p>If you upload to "ftp-master", <prgn/dupload/ will ask for your
  password on Debian machines, and then upload the packages.
  -->

  <p>If you encounter an upload problem at <url id="&ftp-uploadqueue;">,
  you can fix this by manually uploading GPG signed
  <file>*.commands</file> file to there with <prgn>ftp</prgn>.
  <footnote>
  See <url id="&ftp-command;">.  Alternatively, you may use
  <prgn>dcut</prgn> command from the <package>dput</package> package.
  </footnote>
  For example, use <file>hello.commands</file>:
<example>
-----BEGIN PGP SIGNED MESSAGE-----

Uploader: Roman Hodek &lt;Roman.Hodek@informatik.uni-erlangen.de&gt;
Commands: 
 rm hello_1.0-1_i386.deb
 mv hello_1.0-1.dsx hello_1.0-1.dsc

-----BEGIN PGP SIGNATURE-----
Version: 2.6.3ia

iQCVAwUBNFiQSXVhJ0HiWnvJAQG58AP+IDJVeSWmDvzMUphScg1EK0mvChgnuD7h
BRiVQubXkB2DphLJW5UUSRnjw1iuFcYwH/lFpNpl7XP95LkLX3iFza9qItw4k2/q
tvylZkmIA9jxCyv/YB6zZCbHmbvUnL473eLRoxlnYZd3JFaCZMJ86B0Ph4GFNPAf
Z4jxNrgh7Bc=
=pH94
-----END PGP SIGNATURE-----
</example>

  <p>See <url name="mentors.debian.net"
  id="http://mentors.debian.net/cgi-bin/welcome"> for publically accessible
  upload area for non-DD.

  <p>See <url name="Debian Reference, 2.7.12. 'Small public package archive'"
  id="http://www.debian.org/doc/manuals/debian-reference/ch02.en.html#_small_public_package_archive">
  for an example for creating a small public package archive compatible with
  the modern secure APT system.

  <chapt id="update">Updating the package

  <p>Once you release a package, you need to update it soon.

  <sect id="newrevision">New Debian revision

  <p>Let's say that a bug report was filed against your package as <tt>#54321</tt>,
  and it describes a problem that you can solve. To create a new Debian
  revision of the package, you need to:

  <list>
  <item>"<tt>quilt new <var>bugname.patch</var></tt>" to set patch name.
  <item>"<tt>quilt add <var>buggy-file</var></tt>" to declare file to be modified.
  <item>Correct the problem in the package source for the upstream bug.
  <item>"<tt>quilt refresh</tt>" to record to <file><var>bugname.patch</var></file>.
  <item>"<tt>while quilt push; do quilt refresh; done</tt>" to apply all patches while removing <em>fuzz</em>.
  <item>"<tt>quilt pop <var>foo.patch</var></tt>" to recall existing <file><var>foo.patch</var></file>.
  <item>Correct the problem in the old <file><var>foo.patch</var></file>.
  <item>"<tt>quilt refresh</tt>" to update <file><var>foo.patch</var></file>.
  <item>"<tt>while quilt push; do quilt refresh; done</tt>" to apply all patches while removing <em>fuzz</em>.
  <item>Add a new revision at the top of the Debian <file>changelog</file> file, for
  example with "<tt>dch -i</tt>", or explicitly with
  "<tt>dch -v <var>version</var>-<var>revision</var></tt>"
  and then insert the comments using your preferred editor.
  <footnote>To get the date in the required format, use "<tt>LANG=C date -R</tt>".</footnote>

  <item>Include a short description of the bug and the solution in the
  changelog entry,
  followed by "<tt>Closes: #54321</tt>". That way, the bug report will be
  <em>automagically</em> closed by the archive maintenance software the moment your
  package gets accepted in the Debian archive.

  <item>Repeat what you did in <ref id="completebuild">, <ref id="checkit">,
  and <ref id="upload">. The difference is that this time, the original source
  archive won't be included, as it hasn't been changed and it already
  exists in the Debian archive.
  </list>

  <sect id="newupstream">New upstream release (basic)

  <p>Now let's consider a different, slightly more complicated situation
  - a new upstream version was released, and of course you want it packaged.
  You need to do the following:

  <list>
  <item>Download the new sources and put the tarball (e.g. named
  <file>gentoo-0.9.13.tar.gz</file>) in the directory above the old source tree
  (e.g. <file>~/gentoo</file>).

  <item>Enter the old source directory, and run:

  <example>
$ uupdate -u gentoo-0.9.13.tar.gz
</example>

  <p>Of course, replace this file name with the name of your program's new
  source archive. <manref name="uupdate" section="1"> will properly rename that
  tarball, try to apply all the changes from your previous
  <file>.debian.tar.gz</file> file or <file>.diff.gz</file> file, and update the
  new <file>debian/changelog</file> file.

  <item>Change directory to <file>../gentoo-0.9.13</file>, the new package source tree,
  and repeat what you did in <ref id="completebuild">, <ref id="checkit">, and
  <ref id="upload">.
  </list>

  <p>Note that if you set up a <file>debian/watch</file> file as described in
  <ref id="watch">, you can run <manref name="uscan" section="1"> to
  <em>automagically</em> look for revised sources, download them, and run
  <prgn/uupdate/.

  <sect id="newupstream-real">New upstream release (realistic)

<p>
When preparing packages for the Debian archive, you must check
the resulting packages in detail.  Here is a more realistic example of this
procedure.

<enumlist>

<item>Verify changes in upstream source

<list>

<item>Read the upstream <file>changelog</file>, <file>NEWS</file>, and
whatever other documentations they may have released with the new
version.

<item>Do a "<tt>diff -urN</tt>" between the old and new upstream sources
to try to get a feel for the scope of the changes, where work is
actively being done (and thus where new bugs may appear), and also watch out
for anything suspicious.

</list>

<item>Port the old Debian packaging to the new version.  

<list>

<item>Unpack the source tarball and rename the root of the source tree as
<file><var>package</var>-<var>upstream_version</var>/</file> and 
<tt>cd</tt> into this directory.

<item>Copy the source tarball in the parent directory and rename it as
<file><var>package</var>_<var>upstream_version</var>.orig.tar.gz</file> .

<item>Apply the same kind of modification to the new source tree as the
old source tree.  Possible methods are:
<list>
<item>"<tt>tar xvzf /<var>path</var>/<var>to</var>/<var>package</var>_<var>old-version</var>.debian.tar.gz</tt>" command for <tt>3.0 (quilt)</tt> source,
<item>"<tt>zcat /<var>path</var>/<var>to</var>/<var>package</var>_<var>old-version</var>.diff.gz|patch -p1</tt>" command for old <tt>1.0</tt> source,
<item><prgn>uupdate</prgn> command,
<item>"<tt>svn merge</tt>" command if you manage the source with
Subversion repository, or
<item>simply copying <file>debian</file> directory from the old source
tree if it was packaged with the <package>dpatch</package> or <package>quilt</package> commands.
</list>

<item>Preserve old changelog entries (sounds obvious, but there have
been incidents...)

<item>The new binary package version, e.g., "<tt>0.9.13-1</tt>" is the upstream
release version "<tt>0.9.13</tt>" appended with the Debian revision number
<tt>-1</tt>.

<item>Add changelog record entry with "New upstream release" for this
new version at the top of <file>debian/changelog</file>.  For example
"<tt>dch -v 0.9.13-1</tt>".

<item>Describe concisely the changes <em>in the new upstream release</em>
that fix reported bugs and close those bugs in the <file>debian/changelog</file>.

<item>Describe concisely the changes <em>to the new upstream release</em>
by the maintainer that fix reported bugs and close those bugs in
the <file>debian/changelog</file>.

<item>If the package has not updated to use the <package>debhelper</package> V7
<prgn>dh</prgn> syntax for <file>debian/rules</file> file, update it to use
<prgn>dh</prgn>.  Update <file>debian/control</file> file accordingly.

<item>If it was packaged with the <package>dpatch</package> command, convert it to
the <package>quilt</package> command using
<file>/usr/share/doc/quilt/examples/dpatch2quilt.sh</file>.

<item>If the package has not updated to the newer <prgn>dpkg</prgn> <tt>3.0
(native)</tt> or <tt>3.0 (quilt)</tt> source format, create
<file>debian/source/format</file> with "<tt>3.0 (native)</tt>" or "<tt>3.0
(quilt)</tt>" in it.

<item>If the new upstream source tree is populated with the old <file>debian</file> directory, update patch series in the <file>debian/patches</file> directory.

<list>
<item>"<tt>quilt pop -a</tt>" and "<tt>quilt push -a</tt>" to verify that patches apply cleanly to the source.
<item>If the patch/merge did not apply cleanly, inspect the situation to
determine what failed (clues are left in <file>.rej</file> files).  Most often
the problem is that a patch you applied to the source was integrated upstream,
and thus the patch is no longer relevant.  Then remove it with "<tt>quilt delete</tt>".
<item>"<tt>quilt push -f</tt>" to apply old patches while forcing rejects.
<item>Correct the <file><var>baz</var></file> file with <file><var>baz</var>.rej</file>.
<item>"<tt>quilt refresh</tt>" to update the patch.
</list>

<item>Upgrades to the new version should be silent and non-intrusive
(existing users should not notice the upgrade except by discovering that
old bugs have been fixed and there perhaps are new features).

<item>If you need to add erased template files for any reason, you
may run <prgn>dh_make</prgn> again in the same, already <em>debianized</em>,
directory with <tt>--addmissing</tt> option.  Then edit it properly.

<item>Existing Debian changes need to be reevaluated; throw away stuff that
upstream has incorporated (in one form or another) and remember to
keep stuff that hasn't been incorporated by upstream, unless there is
a compelling reason not to.

<item>If any changes were made to the build system (hopefully you'd know
from step 1) then update the <file>debian/rules</file> and
<file>debian/control</file> build dependencies if necessary.

</list>

<item>Build the new package with <prgn>debuild</prgn> (<ref id="debuild">) or
<prgn>pdebuild</prgn> (<ref id="pbuilder">). Use of <prgn>pdebuild</prgn>
is desirable.

<item>Verify new packages are built correctly.

<list>

<item>Perform <ref id="checkit">.

<item>Perform <ref id="upgrading">.   

<item>Check again to see if any bugs have been fixed that are currently
open in the <url name="Debian Bug Tracking System (BTS)"
id="http://www.debian.org/Bugs/"> .

<item>Check the contents of the <file>.changes</file> file to make sure you are
uploading to the correct distribution, the proper bugs closures are
listed in the <tt>Closes:</tt> field, the <tt>Maintainer:</tt> and <tt>Changed-By:</tt> fields
match, the file is GPG-signed, etc.

</list>

<item>If any changes were made to correct anything in the packaging along
the way, go back to the step 2 until satisfied.  

<item>If your upload needs to be sponsored, be sure to note any special
options required when building the package (like "<tt>dpkg-buildpackage
-sa -v ...</tt>") and be sure to inform your sponsor so he or she builds
it correctly.

<item>If you are uploading yourself, perform <ref id="upload">.
</enumlist>

<p>If you did not listen to me and made your custom <em>maintainer
scripts</em>, please make your package properly updates the config file upon
upgrades and removes using well designed <prgn>postinst</prgn>,
<prgn>postrm</prgn>, etc., so that it <strong>doesn't do things</strong> not
wanted by the user!  These are the Debian enhancements that explain
<strong>why</strong> people choose Debian.
<p>
When the upgrade is necessarily intrusive (eg., config files scattered
through various home directories with totally different structure), you
may consider to set package to the safe default (e.g., disabled service)
and provide proper documentations required by the policy
(<file>README.Debian</file> and <file>NEWS.Debian</file> ) as the last
resort. But don't bother with the <prgn>debconf</prgn> note to annoy the user.

  <sect id="upgrading">Verifying package upgrades

  <p>When you build a new version of the package, you should do the
  following to verify that the package behaves as expected.

  <list>
    <item>upgrade it from the previous version.
    <item>downgrade it back to the previous version (optional).
    <item>purge it.
    <item>install the new package.
    <item>remove it.
    <item>install it again.
    <item>purge it.
  </list>

  <p>If the package makes use of non-trivial <file>{post|pre}{inst|rm}</file> scripts, be 
  sure to test the upgrade paths of those.

  <p>Bear in mind that if your package has previously been released in
  Debian, people will often be upgrading to your package from the version
  that was in the last Debian release. Remember to test upgrades from that
  version too.

  <p>Although downgrade is not officially supported, it should be nice to support it.

  <chapt id="helpme">Where to ask for help

  <p>Before you decide to ask your question in some public place, please
  just RTFM. 
  That includes documentation in <file>/usr/share/doc/dpkg</file>,
  <file>/usr/share/doc/debian</file>, <file>&autotools-dev;</file>, 
  <file>/usr/share/doc/<var>package</var>/*</file>
  files and the <prgn>man</prgn>/<prgn>info</prgn> pages for all the programs mentioned in this document.
  See all the information at <url id="&nm-home;">.

  <p>Making a small test package is good way to learn details of packaging.
  Inspecting existing well maintained packages is the best way to learn how other
  people make packages.

  <p>If you still have questions about packaging that you couldn't find answers to
  in the available documentation and web resources, you can ask them on the Debian Mentors' mailing list
  at <url id="http://lists.debian.org/debian-mentors/" name="debian-mentors@lists.debian.org">. The more experienced Debian
  developers will gladly help you, but do read at least some of the
  documentation before asking a question!

  <p>See <url id="http://lists.debian.org/debian-mentors/"> for more
  information about this mailing list.

  <p>When you receive
  a bug report (yes, actual bug reports!), you will know that it is time for you
  to dig into the <url name="Debian Bug Tracking System" id="http://www.debian.org/Bugs/">
  and read the documentation there, to be able to deal with the reports
  efficiently. I highly recommend reading the <url name="Developer's Reference, 5.8. 'Handling bugs'"
  id="http://www.debian.org/doc/manuals/developers-reference/pkgs.html#bug-handling">.

  <p>If you still have questions, ask on the Debian Developers' mailing list
  at <url id="http://lists.debian.org/debian-devel/" name="debian-devel@lists.debian.org">. See
  <url id="http://lists.debian.org/debian-devel/"> for more information
  about this mailing list.

  <p>Even if it all worked well, it's time to start praying. Why? Because
  in just a few hours (or days) users from all around the world will start
  to use your package, and if you made some critical error you'll get
  mailbombed by numerous angry Debian users... Just kidding. :-)

  <p>Relax and be ready for bug reports, because there is a lot more work
  to be done before your package will be fully in line with Debian policies
  (once again, read the <em>real documentation</em> for details). Good luck!

<appendix id="pkg-eg">Examples
<p>
Here we package the upstream tarball <var>gentoo-1.0.2</var>.tar.gz and
uploading all the packages to the <tt><var>nm_target</var></tt>.

<sect id="pkg-simple">Simple packaging example
<p>
<example>
$ mkdir -p <var>/path/to</var> # new empty directory
$ cd <var>/path/to</var>
$ tar -xvzf <var>/path/from/gentoo-1.0.2</var>.tar.gz # get source
$ cd <var>gentoo-1.0.2</var>
$ dh_make -f <var>/path/from/gentoo-1.0.2</var>.tar.gz
... Answer prompts.
... Fix source tree
... If it is a script package, set debian/control to "Architecture: all"
... Do not erase ../<var>gentoo_1.0.2</var>.orig.tar.gz
$ sudo pbuilder update
$ pdebuild
... Make sure no warning happens.
$ cd /var/cache/pbuilder/result
$ dupload -t <var>nm_target</var> <var>gentoo_1.0.2-1</var>_i386.changes
</example>

 </book>

</debiandoc>
