<!DOCTYPE debiandoc PUBLIC "-//DebianDoc//DTD DebianDoc//EN" [

<!-- textual data entities -->
<!-- first definition wins in SGML -->
<!ENTITY % default  SYSTEM "default.ent">  %default;
<!ENTITY % version  SYSTEM "version.ent">  %version;

]>
<!-- CVS revision of this document "$Revision: 1.116 $"  -->
<!-- CVS revision of original english document "*.**"  -->

<debiandoc>

 <book>

  <titlepag>

   <title>Debian New Maintainers' Guide</title>

   <author>Josip Rodin <email/joy-mg@debian.org/
   </author>
<!--
   <author>Translated by: [put your name here] <email/[put your e-mail here]/
   </author>
  -->

   <version>version &docversion;, &docisodate;</version>

   <copyright>
   <copyrightsummary>Copyright &copy; 1998-2002 Josip Rodin.</copyrightsummary>
   <copyrightsummary>Copyright &copy; 2005-2010 Osamu Aoki.</copyrightsummary>

   <p>This document may be used under the terms the GNU General Public License
   version 2 or higher.

   <p>This document was made using with these two documents as examples:

   <p>Making a Debian Package (AKA the Debmake Manual), copyright &copy;
   1997 Jaldhar Vyas.

   <p>The New-Maintainer's Debian Packaging Howto, copyright &copy; 1997
   Will Lowe.
   </copyright>

  </titlepag>

  <toc sect>

  <chapt id="start">Getting started The Right Way

  <p>This document tries to describe building of a Debian package to the
  common Debian user, and prospectus developer. It uses pretty common language,
  and it's well covered with working examples.
  There is an old Roman saying, <em>Longum
  iter est per preaecepta, breve et efficax per exempla!</em> (It's a long way
  by the rules, but short and efficient with examples!).

  <p>One of the things that makes Debian such a top-notch Linux distribution
  is its package system. While there is a vast quantity of software already
  in the Debian format, sometimes you need to install software that isn't.
  You may be wondering how you can make your own packages and perhaps you
  think it is a very difficult task. Well, if you are a real novice on Linux,
  it is hard, but if you were rookie, you wouldn't be reading this doc now. :-)
  You do need to know a little about Unix programming but you certainly
  don't need to be a wizard.

  <p>One thing is certain, though: to properly create and maintain Debian
  packages you need many hours. Make no mistake, for our system to work the
  maintainers need to be both technically competent and diligent.

  <p>This document will explain every little (at first maybe irrelevant)
  step, and help you create that first package, and to gain some experience
  in building next releases of that and maybe other packages later on.

  <p>Newer versions of this document should always be available online at
  <url name="http://www.debian.org/doc/maint-guide/" id="http://www.debian.org/doc/maint-guide/">
  and in the <package/maint-guide/ package.
  <!-- Translation in <this language> is also available in the
       <package/maint-guide-xy/ package. -->

  <sect id="needprogs">Programs you need for development

  <p>Before you start anything, you should make sure that you have properly
  installed some additional packages needed for development. Note that the
  list doesn't contain any packages marked <tt>essential</tt> or <tt>required</tt> - we
  expect that you have those installed already.

  <p>This revision of this document has been updated for the packages in
  &release-based;.

  <p>The following packages come with the standard Debian installation,
  so you probably have them already (along with any additional packages
  they depend on).
  Still, you should check it with `aptitude show &lt;package&gt;`.

  <p>
  The most important package to install on your development system is the
  <package/build-essential/ package. Once you try to install it, it will
  "pull in" other packages required to have a basic build environment.

  <p>
  For some types of packages, that is all you will require, however there
  is another set of packages that while not essential for all package builds 
  are useful to have install or may be required by your package:

  <list>
  <item><package/file/ - this handy program can determine what type a file is.
  (see <manref name="file" section="1">)

  <item><package/patch/ - this very useful utility will take a file containing
  a difference listing (produced by the diff program) and apply it to the
  original file, producing a patched version. (see <manref name="patch" section="1">)

  <item><package/perl/ - Perl is one of the most used interpreted scripting
  languages on today's Unix-like systems, often referred to as "Unix's Swiss Army
  Chainsaw". (see <manref name="perl" section="1">)

  <item><package/python/ - Python is another of the most used interpreted
  scripting languages on the Debian system that combines remarkable power
  with very clear syntax.  (see <manref name="python" section="1">)

  <item><package/autoconf/, <package/automake/ and <package/autotools-dev/ - 
  many newer programs use configure scripts and <file>Makefile</file>s preprocessed with 
  help of programs like these. (see `info autoconf`, `info automake`).
  The <package/autotools-dev/ keeps up-to-date versions of certain auto
  files and has documentation about the best way to use those files.

  <item><package/dh-make/ and <package/debhelper/ - dh-make is necessary to
  create the skeleton of our example package, and it will use some of the
  debhelper tools for creating packages. They are not essential for creation
  of packages, but are <em>highly</em> recommended for new
  maintainers. It makes the whole process very much easier to start, and
  control afterwards. (see <manref name="dh_make" section="1">,
  <manref name="debhelper" section="1">, <file>/usr/share/doc/debhelper/README</file>)

  <item><package/devscripts/ - this package contains some nice and useful
  scripts that can be helpful to the maintainers, but they are also not
  necessary for building packages. Packages recommended and suggested by 
  this package are worth looking into.  (see <file>/usr/share/doc/devscripts/README.gz</file>)

  <item><package/fakeroot/ - this utility lets you emulate being root which
  is necessary for some parts of the build process. (see
  <manref name="fakeroot" section="1">)

  <item><package/gnupg/ - a tool that enables you to digitally <em>sign</em>
  packages. This is especially important if you want to distribute it to
  other people, and you will certainly be doing that when your work gets
  included in the Debian distribution. (see <manref name="gpg" section="1">)

  <item><package/gfortran/ - the GNU Fortran 95 compiler, necessary if your
  program is written in Fortran. (see <manref name="gfortran" section="1">)

  <item><package/gpc/ - the GNU Pascal compiler, necessary if your
  program is written in Pascal. Worthy of note here is <package/fp-compiler/,
  the Free Pascal Compiler, which is also good at this task.
  (see <manref name="gpc" section="1">, <manref name="ppc386" section="1">)

  <item><package/xutils-dev/ - some programs, usually those
  made for X11, also use these programs to generate <file>Makefile</file>s from sets of
  macro functions. (see <manref name="imake" section="1">,
  <manref name="xmkmf" section="1">)

  <item><package/lintian/ - this is the Debian package checker that can let
  you know of any common mistakes after you build the package, and explain
  the errors found. (see <manref name="lintian" section="1">,
  <file>/usr/share/doc/lintian/lintian.html/index.html</file>)

  <item><package/pbuilder/ - this package contains programs which is used 
  for creating and maintaining chroot environment.  Building Debian 
  package in this chroot environment verifies the proper build dependency
  and avoid FTBFS bugs.  (see <manref name="pbuilder" section="8"> and 
  <manref name="pdebuild" section="1">)

  <item><package/git-core/ - this package provides popular version control 
  system designed to handle very large projects with speed and efficiency; 
  it is used for many high profile open source projects, most notably the
  Linux kernel. (see <manref name="git" section="1">,
  <file>/usr/share/doc/git-doc/index.html</file>)

  </list>

  <p>The following is the <em>very important</em> documentation which you
  should read along with this document:

  <list>
  <item><package/debian-policy/ - the Policy includes explanations of the
  structure and contents of the Debian archive, several OS design issues,
  the Filesystem Hierarchy Standard (which says where each file and
  directory should be) etc.
  For you, the most important thing is that it describes requirements that
  each package must satisfy to be included in the distribution.
  (see &debian-policy;)

  <item><package/developers-reference/ - for all matters not specifically
  about the technical details of packaging, like the structure of the
  archive, how to rename, orphan, pick up packages, how to do NMUs, how to
  manage bugs, best packaging practices, when and where to upload etc.
  (see &developers-reference;)
  </list>

  <p>The short descriptions that are given above only serve to introduce
  you to what each package does. Before continuing please thoroughly read
  the documentation of each program, at least the standard usage.
  It may seem like heavy going now, but later on you'll be <em>very</em>
  glad you read it.

  <sect id="debiandeveloper">Official Debian Developer

  <p>After you build your package (or while doing that), you may want to 
  become an official Debian Developer to get your new package into the 
  next distribution (if the program is useful, why not?).
  
  <p>You can not become an official Debian Developer over night because
  it takes more than technical skill.  Please do not be discouraged by
  this.  You can still upload your package, if it is useful to others 
  either as a Maintainer through a Sponsor or as a Debian Maintainer.
  See <url name="Debian New Maintainers" id="&newmaint;"> for more.

  <p>Please note that you do not need to create any new package to
  become an official Debian Developer.  Contributing to the existing
  packages can provide a path to become an official Debian Developer
  too.

  <sect id="otherinfo">Other information

  <p>There are two types of packages you can make, source and binary.
  A source package contains code which you can compile into a program.
  A binary package contains just the finished program. Don't mix terms
  like source of the program and the source package of the program!
  Please read the other manuals if you need more details on terminology.

  <p>In Debian, the term <em>maintainer</em> is used for the person who makes
  packages, <em>upstream author</em> for the person that made the program, and
  <em>upstream maintainer</em> for the person who currently maintains that program,
  outside of Debian. Usually author and the upstream maintainer are the
  same person - and sometimes even the maintainer is the same person.
  If you made a program, and want it to get in Debian, feel free to submit
  your application to become a maintainer.

  <chapt id="first">First steps

  <sect id="choose">Choose your program

  <p>You have probably chosen the package you want to create. The first
  thing you need to do is check if the package is in the distribution archive
  already by using <prgn>aptitude</prgn>.

  <p>You can also check package information through
  <url name="package search page" id="http://www.debian.org/distrib/packages"> and
  <url name="Debian Package Tracking System" id="http://packages.qa.debian.org/common/index.html">.

  <p>If the package already exists, well, install it! :-) If it happens to
  be orphaned -- if its maintainer is set to "Debian QA Group", you may
  be able to pick it up. 

<p>Then you should consult the Debian web site at
  <url name="Work-Needing and Prospective Packages" id="http://www.debian.org/devel/wnpp/">
  and its linked pages to check the latest adoption/orphan status of the
  package. 

  <p>If you are able to adopt the package, get the sources (with something
  like <tt/apt-get source packagename/) and examine them. This document
  unfortunately doesn't include comprehensive information about adopting
  packages. Thankfully you shouldn't have a hard time figuring out how the
  package works since someone has already done the initial set up for you.
  Keep reading, though, a lot of the advice below will still be applicable
  for your case.

  <p>If the package is new, and you decide you'd like to see it in Debian,
  proceed as follows:

  <list>
  <item>check if no one else is working on the package already at
  <url name="the list of packages being worked on" id="http://www.de.debian.org/devel/wnpp/being_packaged">.
  If someone's already on it, contact them if you feel you need to.
  If not - find another interesting program that nobody maintains.
  </item>

  <item>program <strong>must</strong> have a license.
  <list>
  <item>For the <tt>main</tt> section, it must be compliant to all the 
  <url name="Debian Free Software Guidelines"
  id="http://www.debian.org/social_contract#guidelines"> (DFSG) and
  <strong>must not</strong> require a package outside of <tt>main</tt> for
  compilation or execution as required by the Debian Policy.  This is desired
  case.</item>
  <item>For the <tt>contrib</tt> section, it <strong>must</strong> be compliant
  to all the DSFG but it may require a package outside of main for compilation
  or execution.</item>
  <item>For the <tt>non-free</tt> section, it <strong>may not</strong> be
  compliant to some of the DSFG but it <strong>must</strong> be
  distributable.</item>
  </list>
  If you are unsure about where it should go, post the license text on
  <email/debian-legal@lists.debian.org/ and ask for advice.
  </item>

  <item>program certainly should <strong>not</strong> run setuid root, or
  even better - it shouldn't need to be setuid or setgid to anything.</item>

  <item>program should not be a daemon, or something that goes in <file>*/sbin</file>
  directories, or open a port as root.</item>

  <item>program should result in binary executable form, libraries are
  harder to handle.</item>

  <item>it should be well documented, or and the code needs to be
  understandable (i.e. not obfuscated).</item>

  <item>you should contact program's author(s) to check if they agree
  with packaging it. It is important to be able to consult with author(s)
  about the program in case of any program specific problems, so don't
  try to package unmaintained pieces of software.</item>

  <item>and last but not least, you must know that it works, and
  have tried it for some time.</item>
  </list>

  <p>Of course, these things are just safety measures, and intended to save
  you from raging users if you do something wrong in some setuid daemon...
  When you gain some more experience in packaging, you'll be able to do such
  packages, but even the experienced developers consult the debian-mentors
  mailing list when they are in doubt. And people there will gladly help.

  <p>For more help about these, check in Developer's Reference.

  <sect id="getit">Get the program, and try it out

  <p>So the first thing to do is to find and download the original package.
  I presume that you already have the source file that you picked up at
  the author's homepage. Sources for free Unix programs usually come in
  tar/gzip format, with extension <file>.tar.gz</file>, and usually contain the
  subdirectory called program-version and all the sources in it. If your
  program's source comes as some other sort of archive (for instance, the
  filename ends in <file>.Z</file> or <file>.zip</file>), unpack it with appropriate
  tools, or ask on the debian-mentors mailing list if you're not sure how to unpack it
  correctly (hint: issue "<tt>file archive.extension</tt>").

  <p>As an example, I'll use a program called <prgn>gentoo</prgn>, an X GTK+ file
  manager. Note that the program is already packaged, and has changed
  substantially from the version while this text was first written.

  <p>Create a subdirectory under your home directory named <file>debian</file> or <file>deb</file>
  or anything you find appropriate (e.g. just <file>~/gentoo/</file> would do fine in
  this case). Place the downloaded archive in it, and uncompress it (with
  "<tt>tar xzf gentoo-0.9.12.tar.gz</tt>"). Make sure there are no errors, even some
  "irrelevant" ones, because there will most probably be problems unpacking
  on other people's systems, whose unpacking tools may or may not ignore
  those anomalies.

  <p>Now you have another subdirectory, called <file>gentoo-0.9.12</file>. Change to
  that directory and <em>thoroughly</em> read the provided
  documentation. Usually there are files named <file>README*</file>, <file>INSTALL*</file>, <file>*.lsm</file>
  or <file>*.html</file>. You must find instructions on how to correctly compile and
  install the program (most probably they'll assume you want to install to
  <file>/usr/local/bin</file> directory; you won't be doing that, but more on that later
  in <ref id="destdir">).

  <p>The process varies from program to program, but a lot of modern
  programs come with a <prgn>configure</prgn> script that configures the source under
  your system and makes sure that your system is in condition to compile it.
  After configuring with <tt>./configure</tt>, programs are usually compiled
  with "<tt>make</tt>". Some of them support "<tt>make check</tt>", to run included
  self-checks. Installation in destination directories is usually done with
  "<tt>make install</tt>".
  
  <p>Now try to compile and run your program, to make sure it works properly
  and doesn't break something else while it's installing or running.

  <p>Also, you can usually run "<tt>make clean</tt>" (or better "<tt>make distclean</tt>") to
  clean up the build directory. Sometimes there's even a "<tt>make uninstall</tt>"
  which can be used to remove all the installed files.

  <sect id="namever">Package name and version

  <p>You should start packaging with a completely clean (pristine) source
  directory, or simply with freshly unpacked sources.
  
  <p>For the package to be built correctly, you must make the program's
  original name lowercase (if it isn't already), and you should move the
  source directory to <file>&lt;packagename&gt;-&lt;version&gt;</file>.
  
  <p>If the program name consists of more than one word, contract them to one
  word, or make an abbreviation. For example, program "John's little editor
  for X" package would be named <package>johnledx</package>, or <package>jle4x</package>, or whatever you decide,
  as long as it's under some reasonable limit, e.g. 20 characters.

  <p>Also check for the exact version of the program (to be included in the
  package version). If that piece of software is not numbered with versions
  like <tt>X.Y.Z</tt>, but with some kind of date, feel free to use that date as the
  version number, as long as newer version numbers will look larger.
  While it is best to use the same version number as what upstream uses,
  if it is in the format of <tt>09Oct23</tt> you may need to convert it to
  <tt>YYYYMMDD</tt> format, which would be <tt>20091023</tt>, to ensure 
  proper order for upgrade with the <prgn>dpkg</prgn> program.

  <p>Some programs won't be numbered at all, in which case you
  should contact the upstream maintainer to see if they've got some other
  revision-tracking method.

  <sect id="dh_make">Initial <em>debianization</em>

  <p>Make sure you're in the program source directory, and issue this:

  <p><example>
  dh_make -e your.maintainer@address -f ../gentoo-0.9.12.tar.gz
  </example>

  <p>Of course, replace the string "your.maintainer@address" with your
  e-mail address for inclusion in the changelog entry and other files,
  and the filename with the name of your original source archive. See
  <manref name="dh_make" section="1"> for details.
 
  <p>Some information will come up. It will ask you what sort of package you
  want to create. Gentoo is a single binary package - it creates only one
  binary, and thus one <file>.deb</file> file - so we will select the first option, with
  the "<tt>s</tt>" key, check the information on the screen and confirm by pressing
  &lt;enter&gt;.

  <p>After this execution of <prgn>dh_make</prgn>, a copy of the
  upstream tarball is created as <file>gentoo_0.9.12.orig.tar.gz</file>
  in the parent directory to accommodate the creation of the non-native
  Debian source package with the <file>diff.gz</file>.  
  Please note 2 key features in this file name:
  <list compact>
  <item>Package name and version are separated by the "<tt>_</tt>" .
  <item>There is the <tt>orig.</tt> before the <tt>tar.gz</tt> .
  </list>

  <p>Once again, as a new maintainer you are discouraged from creating
  complicated packages, e.g.,
  <list compact>
  <item>multiple binary packages,
  <item>library packages,
  <item>the source file format being neither in <tt>tar.gz.</tt> nor
       <tt>tar.bz2</tt>, or
  <item>the source tarball containing undistributable contents.
  </list>
  It's not too hard, but it does require a bit more knowledge, so we
  won't describe all of it here. 

  <p>Please note that you should run <prgn>dh_make</prgn> <em>only once</em>,
  and that it won't behave correctly if you run it again in the same,
  already <em>debianized</em>, directory.  That also means that you will use a
  different method to release a new revision or a new version of your
  package in the future. Read more about that later in <ref id="update">

  <chapt id="modify">Modifying the source

  <p>Normally, programs install themselves in the <file>/usr/local</file> subdirectories. 
  But, Debian packages must not use that directory, since it is reserved for
  system administrator's (or user's) private use. This means that you have
  to take a look at your program's build system, usually starting with the
  <file>Makefile</file>. This is the script <manref name="make" section="1"> will use to
  automate building this program. For more details on <file>Makefile</file>s, look in
  <ref id="rules">.

  <p>Note that if your program uses GNU <manref name="automake" section="1">
  and/or <manref name="autoconf" section="1">, meaning the source includes
  <file>Makefile.am</file> and/or <file>Makefile.in</file> files, respectively, you will need to
  modify those files. This is because each automake invocation will rewrite
  <file>Makefile.in</file>'s with information generated from <file>Makefile.am</file>'s, and each
  ./configure invocation will do the same with <file>Makefile</file>'s, with data from
  <file>Makefile.in</file>'s. Editing <file>Makefile.am</file> files requires some knowledge of
  automake, which you can read about in the automake info entry, whereas editing
  <file>Makefile.in</file> files is pretty much the same as editing <file>Makefile</file> files, just
  pay attention to the variables, i.e. any strings surrounded with "<tt>@</tt>"s, for
  example <tt>@CFLAGS@</tt> or <tt>@LN_S@</tt>, which are replaced with actual stuff on each
  "<tt>./configure invocation</tt>".  Please make sure to read 
  <file>&autotools-dev;</file> before proceeding.

  <p>Also note that there isn't space here to go into <em>all</em> the
  details of fixing upstream sources, but here are a few problems people
  often run across.

  <sect id="destdir">Installation in a subdirectory

  <p>Most of the programs have some way of installing themselves in the
  existing directory structure of your system, so that their binaries get
  included in your <tt>$PATH</tt>, and that you find their documentation and manual
  pages in common places. However, if you do that, the program will be
  installed among everything else already on your system. This would make
  it hard for the packaging tools to figure out which files belong to your
  package and which don't.

  <p>Therefore you need to do something else: install the program into a
  temporary subdirectory from which the maintainer tools will build a working
  <file>.deb</file> package. Everything that is contained in this directory will be
  installed on a user's system when they install your package, the only
  difference is that dpkg will be installing the files in the root
  directory.

  <p>This temporary directory is usually created under your <file>debian/</file>
  directory in the unpacked source tree. It is usually called
  <file>debian/packagename</file>.

  <p>Bear in mind that even though you need to make the program install in
  debian/packagename, it still needs to behave correctly when placed in the
  root directory, i.e. when installed from the <file>.deb</file> package. So you mustn't
  allow the build system to hardcode strings like
  <tt>/home/me/deb/gentoo-0.9.12/usr/share/gentoo</tt> into the package
  files.

  <p>With programs that use GNU <prgn>autoconf</prgn>, this will be quite easy. Most such
  programs have makefiles that are by default set up to allow installation
  into a random subdirectory while keeping in mind that <file>/usr</file> (for example)
  is the canonical prefix. When it detects your program uses <prgn>autoconf</prgn>,
  <prgn>dh_make</prgn> will set up commands for doing all this
  automatically, so you might as well skip reading this section. But with
  other programs, you will most probably have to examine and edit the
  <file>Makefile</file>s.

  <p>Here's the relevant part of gentoo's <file>Makefile</file>:

  <p><example>
  # Where to put binary on 'make install'?
  BIN     = /usr/local/bin

  # Where to put icons on 'make install'?
  ICONS   = /usr/local/share/gentoo
  </example>

  <p>We see that the files are set to install under <file>/usr/local</file>.
  Change those paths to:

  <p><example>
  # Where to put binary on 'make install'?
  BIN     = $(DESTDIR)/usr/bin

  # Where to put icons on 'make install'?
  ICONS   = $(DESTDIR)/usr/share/gentoo
  </example>

  <p>But why in that directory, and not some other? Because Debian packages
  never install files beneath <file>/usr/local</file> -- that tree is
  reserved for the system administrator's use. Such files on Debian
  systems go under <file>/usr</file> instead.

  <p>The more exact locations for binaries, icons, documentation etc are
  specified in the Filesystem Hierarchy Standard
  (see <file>/usr/share/doc/debian-policy/fhs/</file>). I recommend you browse it and read
  the sections that might concern your package.

  <p>So, we should install the binary in <file>/usr/bin</file> instead of <file>/usr/local/bin</file>,
  the manual page in <file>/usr/share/man/man1</file> instead of <file>/usr/local/man/man1</file> etc.
  Notice how there's no manual page mentioned in gentoo's makefile, but
  since the Debian Policy requires that every program has one, we'll make
  one later and install it in <file>/usr/share/man/man1</file>.

  <p>Some programs don't use makefile variables to define paths such as
  these. This means you might have to edit some real C sources in order to
  fix them to use the right locations.
  But where to search, and exactly what for? You can find this out by issuing:

  <p><example>
  grep -nr -e 'usr/local/lib' --include='*.[c|h]' .
  </example>

  <p>Grep will run recursively through the source tree and tell
  you the name of the file and the line in it, when it finds an occurrence.

  <p>Edit those files and in those lines replace <tt>/usr/local/*</tt> with <tt>usr/*</tt>
  -- and that's about it. Be careful that you don't mess up the rest of
  the code! :-)

  <p>After that you should find the install target (search for line that
  starts with <tt>install:</tt>, that will usually work) and rename all references
  to directories other than ones defined at the top of the <file>Makefile</file>.
  Previously, gentoo's install target said:

  <p><example>
  install:        gentoo
                  install ./gentoo $(BIN)
                  install icons/* $(ICONS)
                  install gentoorc-example $(HOME)/.gentoorc
  </example>

  <p>After our change it says:
  <example>
  install:        gentoo-target
                  install -d $(BIN) $(ICONS) $(DESTDIR)/etc
                  install ./gentoo $(BIN)
                  install -m644 icons/* $(ICONS)
                  install -m644 gentoorc-example $(DESTDIR)/etc/gentoorc
  </example>

  <p>You've surely noticed that there's now a "<tt>install -d</tt>" command
  before the other commands in the rule. The original makefile didn't have
  it because usually the <tt>/usr/local/bin</tt> and other directories already exist
  on the system where one runs "<tt>make install</tt>". However, since we will
  install into our own empty (or even nonexistent) directory, we will have
  to create each and every one of those directories.

  <p>We can also add in other things at the end of the rule, like the
  installation of additional documentation that the upstream authors
  sometimes omit:

  <p><example>
                  install -d $(DESTDIR)/usr/share/doc/gentoo/html
                  cp -a docs/* $(DESTDIR)/usr/share/doc/gentoo/html
  </example>

  <p>A careful reader will notice that I changed <tt>gentoo</tt> to <tt>gentoo-target</tt>
  in the <tt>install:</tt> line. That is called an unrelated bug fix :-)

  <p>Whenever you make changes that are not specifically related to Debian
  package, be sure to send them to the upstream maintainer so they can be
  included in the next program revision and be useful to everyone else.
  Also remember to make your fixes not specific to Debian or Linux (or even
  Unix!) prior to sending them -- make them portable. This will make your
  fixes much easier to apply.

  <p>Note that you don't have to send the <file>debian/*</file> files upstream.

  <sect id="difflibs">Differing libraries

  <p>There is one other common problem: libraries are often different from
  platform to platform. For example, a <file>Makefile</file> can contain a reference to a
  library which doesn't exist on Debian systems. In that case, we
  need to change it to a library which does exist in Debian, and serves the
  same purpose.

  <p>So, if there is a line in your program's <file>Makefile</file> (or <file>Makefile.in</file>) that
  says something like this (and your program doesn't compile):

  <p><example>
  LIBS = -lcurses -lsomething -lsomethingelse
  </example>

  <p>Change it to this, and it will most probably work:
  <p><example>
  LIBS = -lncurses -lsomething -lsomethingelse
  </example>

  <p>(The author realizes that this is not the best example considering our
  libncurses package now ships with a libcurses.so symlink, but he couldn't
  think of a better one. Suggestions very welcome :-)

  <chapt id="dreq">Required files under <file>debian/</file> directory

  <p>There is a new subdirectory under the program's source directory,
  it's called <file>debian</file>. There are a number of files in this directory that
  we should edit in order to customize
  the behavior of the package. The most important of them are <file>control</file>,
  <file>changelog</file>, <file>copyright</file> and <file>rules</file>, which are required for all packages.

  <sect id="control"><file>control</file> file

  <p>This file contains various values which <prgn/dpkg/, <prgn/dselect/, 
  <prgn/apt-get/, <prgn/apt-cache/, <prgn/aptitude/, and
  other package management tools will use to manage the package.

  <p>Here is the control file <prgn>dh_make</prgn> created for us:

  <p><example>
  1  Source: gentoo
  2  Section: unknown
  3  Priority: extra
  4  Maintainer: Josip Rodin &lt;joy-mg@debian.org&gt;
  5  Build-Depends: debhelper (>= 7.0.50)
  6  Standards-Version: 3.8.4
  7  Homepage: &lt;insert the upstream URL, if relevant&gt;
  8
  9  Package: gentoo
  10 Architecture: any
  11 Depends: ${shlibs:Depends}, ${misc:Depends}
  12 Description: &lt;insert up to 60 chars description&gt;
  13  &lt;insert long description, indented with spaces&gt;
  </example>
  (I've added the line numbers.)

  <p>Lines 1-6 are the control information for the source package.

  <p>Line 1 is the name of the source package.

  <p>Line 2 is the section of the distribution the source package goes into. 

  <p>As you may have noticed, Debian is divided in sections: main (the free
  software), non-free (the not really free software) and contrib (free
  software that depends on non-free software). Under those, there are
  logical subsections that describe in short what packages are in.
  So we have <tt>admin</tt> for administrator-only programs, <tt>base</tt> for the
  basic tools, <tt>devel</tt> for programmer tools, <tt>doc</tt> for documentation,
  <tt>libs</tt> for libraries, <tt>mail</tt> for e-mail readers and daemons, <tt>net</tt> for
  network apps and daemons, <tt>x11</tt> for X11 programs that don't fit anywhere
  else, and many more.

  <p>Let's change it then to x11. (A <tt>main/</tt> prefix is implied so we can
  omit it.)

  <p>Line 3 describes how important it is that the user installs this package.
  See the Policy manual for guidance on what to set this field to. The
  "extra" priority will usually work for new packages.

  <p>Section and priority are used by frontends like <prgn/aptitude/ when
  they sort packages and select defaults. Once you upload the package to
  Debian, the value of these two fields can be overridden by the archive
  maintainers, in which case you will be notified by email.
  
  <p>As this is a normal priority package and doesn't conflict with anything
  else, we will change the priority to "optional".

  <p>Line 4 is the name and email address of the maintainer. Make sure that
  this field includes a valid "To: " header for an email, because after you
  upload it, the bug tracking system will use it to deliver bug emails to
  you. Avoid using commas, ampersands and parenthesis.

  <p>The 5th line includes the list of packages required to build your
  package. Some packages like gcc and make are implied, see the
  <package/build-essential/ package for details. If some non-standard
  compiler or other tool is needed to build your package, you should add
  it to the <tt>Build-Depends</tt> line. Multiple entries are separated with
  commas; read on for the explanation of binary dependencies to find out
  more about the syntax of this field.

  <p>You can also have Build-Depends-Indep, Build-Conflicts and other fields
  here. This data will be used by the Debian automatic package building
  software in order to create binary packages for other computer platforms.
  See the Policy manual for more information about the build-dependencies
  and the Developer's Reference for more information about these other
  platforms (architectures) and how to port software to them.

  <p>To find out what packages your package needs to be built run the command:
  <example>
  dpkg-depcheck -d ./configure
  </example>

  <p>To manually find exact build dependency for
  <prgn><var>/usr/bin/foo</var></prgn>, you execute

  <example>
  objdump -p <var>/usr/bin/foo</var> | grep NEEDED
  </example>
  and for each library listed, e.g., <prgn>libfoo.so.6</prgn>, execute
  <example>
  dpkg -S libfoo.so.6 
  </example>
  Then you just take -dev version of every package as
  <tt>Build-deps</tt> entry.  If you use <prgn>ldd</prgn> for this
  purpose, it will report indirect lib dependencies as well, resulting
  in the problem of excessive build deps.

  <p>Gentoo also happens to require <package/xlibs-dev/,
  <package/libgtk1.2-dev/ and <package/libglib1.2-dev/ to build, so we'll
  add them here next to <package/debhelper/.

  <p>Line 6 is the version of the Debian Policy standards this package
  follows, the versions of the Policy manual you read while making your
  package.

  <p>On line 7 you can put the URL of the homepage for the upstream package.

  <p>Line 9 is the name of the binary package. This is usually the same as
  the name of the source package, but it doesn't necessarily have to be that
  way.

  <p>Line 10 describes the CPU architecture the binary package can be compiled
  for. We'll leave this as "<tt>any</tt>" because <manref name="dpkg-gencontrol"
  section="1"> will fill in the appropriate value for any machine this
  package gets compiled on.

  <p>If your package is architecture independent
  (for example, a shell or Perl script, or a document), change this to
  "<tt>all</tt>", and read later in <ref id="rules"> about using the <tt>binary-indep</tt>
  rule instead of <tt>binary-arch</tt> for building the package.

  <p>Line 11 shows one of the most powerful features of the Debian packaging
  system. Packages can relate to each other in various ways. Apart from
  <tt>Depends:</tt>, other relationship fields are <tt>Recommends:</tt>, <tt>Suggests:</tt>,
  <tt>Pre-Depends:</tt>, <tt>Conflicts:</tt>, <tt>Provides:</tt>, and <tt>Replaces:</tt>.

  <p>The package management tools usually behave the same way when dealing
  with these relations; if not, it will be explained.
  (see <manref name="dpkg" section="8">, <manref name="dselect" section="8">,
  <manref name="apt" section="8">, <manref name="aptitude" section="1"> etc.)

  <p>This is what the dependencies mean:

  <p><list>
  <item><tt>Depends:</tt>
  <p>The package will not be installed unless the packages it depends on
  are installed. Use this if your program absolutely will not run (or will
  cause severe breakage) unless a particular package is present.</item>

  <item><tt>Recommends:</tt>
  <p>Frontends such as dselect or aptitude will prompt you to install the
  recommended packages along with your package; dselect will even insist. 
  dpkg and apt-get will ignore this field, though. Use this for packages
  that are not strictly necessary but are typically used with your
  program.</item>

  <item><tt>Suggests:</tt>
  <p>When a user installs your program, all frontends will likely prompt
  them to install the suggested packages. dpkg and apt-get won't care. Use
  this for packages which will work nicely with your program but are not at
  all necessary.</item>

  <item><tt>Pre-Depends:</tt>
  <p>This is stronger than <tt>Depends:</tt>. The package will not be installed
  unless the packages it pre-depends on are installed and <em>correctly
  configured</em>. Use this <em>very</em> sparingly and only after
  discussing it on the debian-devel mailing list. Read: don't use it at
  all. :-)</item>

  <item><tt>Conflicts:</tt>
  <p>The package will not be installed until all the packages it conflicts
  with have been removed. Use this if your program absolutely will not run
  or will cause severe problems if a particular package is present.</item>

  <item><tt>Provides:</tt>
  <p>For some types of packages where there are multiple alternatives
  virtual names have been defined. You can get the full list in the
  <file>/usr/share/doc/debian-policy/virtual-package-names-list.txt.gz</file> file.
  Use this if your program provides a function of an existing virtual
  package.</item>

  <item><tt>Replaces:</tt>
  <p>Use this when your program replaces files from another package, or
  completely replaces another package (used in conjunction with <tt>Conflicts:</tt>).
  Files from the named packages will be overwritten with the files from your
  package.
  </item>
  </list>

  <p>All these fields have uniform syntax. They are a list of package names
  separated by commas. These package names may also be lists of alternative
  package names, separated by vertical bar symbols "<tt>|</tt>" (pipe symbols).

  <p>The fields may restrict their applicability to particular versions of
  each named package. These versions are listed in parentheses after each
  individual package name, and they should contain a relation from the list
  below followed by the version number. The relations allowed are:
  <tt>&lt;&lt;</tt>, <tt>&lt;=</tt>, <tt>=</tt>, <tt>&gt;=</tt> and
  <tt>&gt;&gt;</tt> for strictly earlier, earlier or equal, exactly equal,
  later or equal and strictly later, respectively. For example,

  <p><example>
  Depends: foo (>= 1.2), libbar1 (= 1.3.4)
  Conflicts: baz
  Recommends: libbaz4 (>> 4.0.7)
  Suggests: quux
  Replaces: quux (<< 5), quux-foo (<= 7.6)
  </example>
  
  <p>The last feature you need to know about is <tt>${shlibs:Depends}</tt>.
  After your package has been built and installed into the temporary
  directory, <manref name="dh_shlibdeps" section="1"> will scan it for
  binaries and libraries, determine their shared library dependencies and
  detect which packages they are in, such as libc6 or xlib6g. It'll pass
  on the list to <manref name="dh_gencontrol" section="1"> which will fill
  it in the right place, and you won't have to worry about this yourself.

  <p>Having said all that, we can leave the <tt>Depends:</tt> line exactly as it is
  now, and insert another line after it saying "<tt>Suggests: file</tt>",
  because gentoo can use some features provided by that `file' package.

  <p>Line 12 is the short description. Most people screens are 80 columns
  wide so this shouldn't be longer than about 60 characters. I'll change
  it to "<tt>fully GUI configurable X file manager using GTK+</tt>".

  <p>Line 13 is where the long description goes. This should be a paragraph
  which gives more details about the package. Column 1 of each line should
  be empty. There must be no blank lines, but you can put a single . (dot)
  in a column to simulate that. Also, there must be no more than one blank
  line after the long description.

  <p>Finally, here is the updated control file:

  <p><example>
  1  Source: gentoo
  2  Section: x11
  3  Priority: optional
  4  Maintainer: Josip Rodin &lt;joy-mg@debian.org&gt;
  5  Build-Depends: debhelper (>= 7.0.5), xlibs-dev, libgtk1.2-dev, libglib1.2-dev
  6  Standards-Version: 3.8.4
  7  Homepage: http://www.obsession.se/gentoo/
  8
  9  Package: gentoo
  10 Architecture: any
  11 Depends: ${shlibs:Depends}, ${misc:Depends}
  12 Suggests: file
  13 Description: fully GUI configurable X file manager using GTK+
  14  gentoo is a file manager for Linux written from scratch in pure C. It
  15  uses the GTK+ toolkit for all of its interface needs. gentoo provides
  16  100% GUI configurability; no need to edit config files by hand and re-
  17  start the program. gentoo supports identifying the type of various
  18  files (using extension, regular expressions, or the 'file' command),
  19  and can display files of different types with different colors and icons.
  20  .
  21  gentoo borrows some of its look and feel from the classic Amiga file
  22  manager "Directory OPUS" (written by Jonathan Potter).
  </example>
  (I've added the line numbers.)

  <sect id="copyright"><file>copyright</file> file

  <p>This file contains the information about package upstream resources,
  copyright and license information. Its format is not dictated by the
  Policy, but the content is (section 12.5 "Copyright information").

  <p><prgn>dh_make</prgn> can give you a template copyright file, use the <tt>--copyright</tt>
  option to select the right template. As gentoo is licensed under the
  GPLv2 license, using the "<tt>--copyright gpl2</tt>" option will give the following:

  <p><example>
  1  This work was packaged for Debian by:
  2
  3    Josip Rodin &lt;joy-mg@debian.org&gt; on Wed, 11 Nov 1998 21:02:14 +0100.
  4
  5  It was downloaded from:
  6
  7     &lt;url://example.com&gt;
  8
  9  Upstream Author(s):
  10
  11    &lt;put author's name and email here&gt;
  12
  13 Copyright:
  14
  15      &lt;Copyright (C) YYY Firstname Lastname&gt;
  16      &lt;likewise for another author&gt;
  17
  18 License:
  19
  20 ### SELECT: ###
  21     This package is free software; you can redistribute it and/or modify
  22     it under the terms of the GNU General Public License as published by
  23     the Free Software Foundation; either version 2 of the License, or
  24     (at your option) any later version.
  25 ### OR ###
  26     This package is free software; you can redistribute it and/or modify
  27     it under the terms of the GNU General Public License version 2 as
  28     published by the Free Software Foundation.
  29  ##########
  30
  31     This package is distributed in the hope that it will be useful,
  32     but WITHOUT ANY WARRANTY; without even the implied warranty of
  33     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  34     GNU General Public License for more details.
  35
  36     You should have received a copy of the GNU General Public License
  37     along with this package; if not, write to the Free Software
  38     Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
  39
  40  Debian systems, the complete text of the GNU General
  41  License version 2 can be found in `/usr/share/common-licenses/GPL-2'.
  42
  43  Debian packaging is:
  44
  45     Copyright (C) 1998 Josip Rodin &lt;joy-mg@debian.org&gt;
  46
  47 You can redistribute it and/or modify
  48 it under the terms of the GNU General Public License as published by
  49  Free Software Foundation; either version 2 of the License, or
  50 (at your option) any later version.
  51
  52 # Please also look if there are files or directories which have a
  53 # different copyright/license attached and list them here.
  </example>
  (I've added the line numbers.)

  <p>The important things to add to this file are the place you got the
  package from and the actual copyright notice and license. You must
  include the complete license, unless it's one of the common free software
  licenses such as GNU GPL-2, GNU GPL-3, LGPL-2, LGPL-3, BSD, Apache or the Artistic license, when you
  can just refer to the appropriate file in <file>/usr/share/common-licenses/</file>
  directory that exists on every Debian system.

  <p>In short, here's how gentoo's copyright file should look like:

  <p><example>
  1  This work was packaged for Debian by:
  2
  3      Josip Rodin &lt;joy-mg@debian.org&gt; on 2  Wed, 11 Nov 1998 21:02:14 +0100.
  4
  5  It was downloaded from:
  6      ftp://ftp.obsession.se/gentoo/
  7
  8  Upstream author:
  9
  10     Emil Brink &lt;emil@obsession.se&gt;
  11
  12 Copyright:
  13     Copyright (C) 1998-99 by Emil Brink, Obsession Development.
  14
  15 License:
  16     You are free to distribute this software under the terms of
  17     the GNU General Public License  either version 2 of the License,
  18     or (at your option) any later version.
  19
  20     This package is distributed in the hope that it will be useful,
  21     but WITHOUT ANY WARRANTY; without even the implied warranty of
  22     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  23     GNU General Public License for more details.
  24
  25     You should have received a copy of the GNU General Public License
  26     along with this package; if not, write to the Free Software
  27     Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
  28
  29 On Debian systems, the complete text of the GNU General
  30 Public License version 2 can be found in `/usr/share/common-licenses/GPL-2'.
  31
  32 The Debian packaging is:
  33
  34     Copyright (C) 1998 Josip Rodin &lt;joy-mg@debian.org&gt;
  35
  36 You can redistribute it and/or modify
  37 it under the terms of the GNU General Public License as published by
  38  Free Software Foundation; either version 2 of the License, or
  39 (at your option) any later version.
  </example>
  (I've added the line numbers.)

  <p>Please follow the HOWTO from the debian-devel-announce: 
  <url id="&copyright-howto;"> .


  <sect id="changelog"><file>changelog</file> file

  <p>This is a required file, which has a special format described in
  the Policy section 4.4 "debian/changelog". This format is used by dpkg and
  other programs to obtain the version number, revision, distribution and
  urgency of your package.

  <p>For you, it is also important, since it is good to have documented
  all changes you have done. It will help people downloading your package
  to see whether there are issues with the package that they should know
  about. It will be saved as
  <file>/usr/share/doc/gentoo/changelog.Debian.gz</file> in the binary package.

  <p><prgn>dh_make</prgn> created a default one, and this is how it looks like:

  <p><example>
  1  gentoo (0.9.12-1) unstable; urgency=low
  2
  3   * Initial Release.
  4
  5  -- Josip Rodin &lt;joy-mg@debian.org&gt;  Wed, 11 Nov 1998 21:02:14 +0100
  6
  </example>
  (I've added the line numbers.)

  <p>Line 1 is the package name, version, distribution, and urgency.
  The name must match the source package name, distribution should be
  either <tt>unstable</tt> (or even <tt>experimental</tt>), and urgency shouldn't
  be changed to anything higher than <tt>low</tt>. :-)
  
  <p>Lines 3-5 are a log entry, where you document changes made in this
  package revision (not the upstream changes - there is special file for
  that purpose, created by the upstream authors, which you will later install as
  <file>/usr/share/doc/gentoo/changelog.gz</file>). New lines must be inserted just
  before the uppermost line that begins with asterisk (<tt>*</tt>). You can do
  it with <manref name="dch" section="1">, or manually with a text editor.

  <p>You will end up with something like this:

  <p><example>
  1  gentoo (0.9.12-1) unstable; urgency=low
  2
  3   * Initial Release.
  4   * This is my first Debian package.
  5   * Adjusted the Makefile to fix $DESTDIR problems.
  6
  7  -- Josip Rodin &lt;joy-mg@debian.org&gt; Wed, 11 Nov 1998 21:02:14 +0100
  8
  </example>
  (I've added the line numbers.)

  <p>You can read more about updating the changelog file later in
  <ref id="update">.

  <sect id="rules"><file>rules</file> file

  <p>Now we need to take a look at the exact rules which
  <manref name="dpkg-buildpackage" section="1"> will use to actually create
  the package. This file is actually another <file>Makefile</file>, but different than
  the one(s) in the upstream source. Unlike other files in debian/, this one
  is marked as executable.

  <p>Every <file>rules</file> file, as any other <file>Makefile</file>, consists of several rules
  specifying how to handle the source.  
  <url name="Debian Policy, 4.9 Main building script: debian/rules"
  id="http://www.debian.org/doc/debian-policy/ch-source.html#s-debianrules">
  explains its details.  The required targets are <tt>clean</tt>,
  <tt>binary</tt>, <tt>binary-arch</tt>, <tt>binary-indep</tt>, and
  <tt>build</tt>.  Each performs respective function.

  <p>Rules that you want to execute are invoked as command
  line arguments (for example, "<tt>./debian/rules build</tt>" or "<tt>make -f debian/rules
  install</tt>"). After the target name, you can name the dependency, program
  or file that the rule depends on. After that, there can be any number
  of commands, indented with <tt>&lt;tab&gt;</tt>. A new rule begins with the target
  declaration in the first column. Empty lines and lines beginning
  with "<tt>#</tt>" (hash) are treated as comments and ignored.

  <p>You are probably confused now, but it will all be clear upon examination
  of the <file>rules</file> file that <prgn>dh_make</prgn> gives us as a default. You should also
  read the <tt>make</tt> entry in info for more information.

  <p>The important part to know about the <file>rules</file> file created by <prgn>dh_make</prgn>, is
  that it is just a suggestion. It will work for simple packages but for
  more complicated ones, don't be afraid to add and subtract from it to fit
  your needs. Only thing that you must not change are the names of the
  rules, because all the tools use these names, as mandated by the Policy.

  <p>Here's (approximately) how the default <file>rules</file> file that
  <prgn>dh_make</prgn> generated for us looks like:

  <p><example>
  1  #!/usr/bin/make -f
  2  # -*- makefile -*-
  3  # Sample debian/rules that uses debhelper.
  4  # This file was originally written by Joey Hess and Craig Small.
  5  # As a special exception, when this file is copied by dh-make into a
  6  # dh-make output file, you may use that output file without restriction.
  7  # This special exception was added by Craig Small in version 0.37 of dh-make.
  8
  9  # Uncomment this to turn on verbose mode.
  10 #export DH_VERBOSE=1
  11
  12 %:
  13    dh $@
  </example>
  (I've added the line numbers.  In the actual <file>rules</file> file,
  the leading white spaces are TAB codes.  Under lenny, dh-make created much
  more complicated <file>rules</file> file with many <prgn>dh_*</prgn>
  scripts unless you use the backported dh-make package.)

  <p>You are probably familiar with lines like line 1 from shell and Perl
  scripts. It tells the operating system that this file is to be processed
  with <file>/usr/bin/make</file>.

  <p>Line 10 can be uncommented which will mean <tt>DH_VERBOSE</tt> variable is set
  to 1. This will mean the debhelper tools will output more information
  which can be helpful in understanding and debugging what is going wrong.

  <p>Lines 12 and 13 are where all the work is done. The percent sign means
  any targets which then call a single program, <prgn>dh</prgn> with the target name. For
  example, when <prgn>dpkg-buildpackage</prgn> wants to do the pre-build cleaning, it runs
  "<tt>debian/rules clean</tt>" which in turn calls "<tt>dh clean</tt>".

  <p><prgn>dh</prgn> is a wrapper script which runs appropriate sequences of
  <prgn>dh_*</prgn> programs.

  <p>For more complete information on what do all these <prgn>dh_*</prgn> scripts do, and
  what their other options are, please read their respective manual pages. There
  are some other (possibly very useful) <prgn>dh_*</prgn> scripts which were not
  mentioned here. If you need them, read the debhelper documentation.

  <p>The major change between older <file>rules</file> files that used debhelper and the 
  current ones, is that the old ones had very large <file>rules</file> file which called
  each <prgn>dh_*</prgn> script, while the new ones have a single line calling <prgn>dh</prgn>.

  <p>Previously, if you wanted to change the behaviour of a <prgn>dh_*</prgn> script
  you found the relevant line in the <file>rules</file> file and adjusted it. Now you use
  overrides lines in the <file>rules</file> file, only for the command you want to change.

  <p>Override lines are targets that basically say "<em>run me instead</em>". If you
  have a target for <tt>override_dh_foo</tt> then instead of <prgn>dh_foo</prgn> being run, your
  commands for that target are run instead.

  <p>Gentoo has an unusual upstream changelog file called FIXES. Now,
  <prgn>dh_installchangelogs</prgn> will not install that file by default, so we 
  need to change what is run at this point and the 
  following lines need to be appended to the <file>rules</file> file:

  <p><example>
  override_dh_installchangelogs:
      dh_installchangelogs FIXES
  </example>

  <chapt id="dother">Other files under <file>debian/</file> directory

  <p>To control most of what debhelper is doing when it builds the package,
  you put files under the debian directory. This chapter will describe
  what each of the files does and its format.

  <p><prgn>dh_make</prgn> will create some example files in this directory, you will 
  see that there are several other files in the debian/
  subdirectory, most of them with the <tt>ex</tt> suffix or prefix, meaning that
  they are examples. Take a look at all of them. If you wish or need to
  use any of those features:

  <list>
    <item>take a look at the related documentation (hint: the Policy Manual),
    <item>if necessary modify the files to suit your needs,
    <item>rename them to remove the <tt>.ex</tt> suffix if they have one,
    <item>rename them to remove the <tt>ex.</tt> prefix if they have one,
    <item>modify the <file>rules</file> file if necessary.
  </list>

  <p>Some of those files, the commonly used ones, are explained in the
  following sections. Filenames can either start with the package name, for 
  example <file>gentoo.dirs</file> or not. If there is no package name then the first
  binary package uses these files, if there is no same filename prepended
  with package.

  <sect id="readme"><file>README.Debian</file> file

  <p>Any extra details or discrepancies between the original package and
  your debianized version should be documented here.

  <p><prgn>dh_make</prgn> created a default one, this is what it looks like:

  <p><example>
  gentoo for Debian
  -----------------

  &lt;possible notes regarding this package - if none, delete this file&gt;

   -- Josip Rodin &lt;joy-mg@debian.org&gt;, Wed, 11 Nov 1998 21:02:14 +0100
  </example>

  <p>Since we don't have anything to put there, we'll delete the file.

  <sect id="conffiles"><file>conffiles</file> file

  <p>One of the most annoying things about software is when you spend a
  great deal of time and effort customizing a program, only to have an
  upgrade stomp all over your changes. Debian solves this problem by
  marking configuration files so that when you upgrade a package, you'll
  be prompted whether you want to keep your old configuration or not.

  <p>Since debhelper version 3, dh_installdeb will automatically flag any files
  under the <file>/etc</file> directory as conffiles, so if your program only has 
  conffiles there you do not need to specify them in this file. For
  most package types, the only place there is (and should be conffiles)
  is under <file>/etc</file> and so this file doesn't need to exist.

  <p>If your program uses configuration files but also rewrites them on its
  own, it's best not to mark them as conffiles because dpkg will then prompt
  users to verify the changes all the time.

  <p>If the program you're packaging requires every user to modify the
  configuration file in order to work at all, also consider not marking the
  file as a conffile.

  <p>You can handle example configuration files from the <em>maintainer
  scripts</em>, for more information see <ref id="maintscripts">.

  <sect id="crond">Cron files

  <p>If your package requires regularly scheduled tasks to operate properly, 
  you can use this file to set it up. You can either setup regular tasks 
  that happen hourly, daily, weekly or monthly or alternatively happen any
  other time that you wish.  The filenames are:

  <list>
    <item><file>cron.hourly</file> - Installed as <file>/etc/cron.hourly/package</file>:
    run once an hour every hour.
    <item><file>cron.daily</file> - Installed as <file>/etc/cron.daily/package</file>:
    run once a day, usually early morning.
    <item><file>cron.weekly</file> - Installed as <file>/etc/cron.weekly/package</file>:
    run once a week, usually early Sunday morning.
    <item><file>cron.monthly</file> - Installed as <file>/etc/cron.monthly/package</file>:
    run once a month, usually early morning on the first of the month.
    <item><file>cron.d</file> - Installed as <file>/etc/cron.d/package</file>: for any other time
  </list>

  <p>For the named files, the format of them is a shell script.  The different
  one is <file>package.cron.d</file> which follows the format of
  <manref name="crontab" section="5">.

  <p>Note that this doesn't include log rotation; for that, see
  <manref name="dh_installlogrotate" section="1"> and
  <manref name="logrotate" section="8">.

  <sect id="dirs"><file>dirs</file> file

  <p>This file specifies the directories which we need but the normal
  installation procedure ("<tt>make install</tt>") somehow doesn't create. This generally
  means there is a problem with the <file>Makefile</file>.

  <p>It is best to first try to run the installation first and only use
  this if you run into trouble.  There is no preceding slash on the 
  directory names. <prgn>dh_install</prgn> when it uses
  the <file>install</file> file doesn't need the directories created first.

  <sect id="docs"><file>docs</file> file

  <p>This file specifies the file names of documentation files we can have
  dh_installdocs install into the temporary directory for us.

  <p>By default, it will include all existing files in the top-level source
  directory that are called "<file>BUGS</file>", "<file>README*</file>", "<file>TODO</file>" etc.

  <p>For gentoo, I also included some other files:

  <p><example>
  BUGS
  CONFIG-CHANGES
  CREDITS
  ONEWS
  README
  README.gtkrc
  TODO
  </example>
  
  <sect id="emacsen"><file>emacsen-*.ex</file> file

  <p>If your package supplies Emacs files that can be bytecompiled at
  package installation time, you can use these files to set it up.

  <p>They are installed into the temporary directory by
  <manref name="dh_installemacsen" section="1">.

  <p>If you don't need these, remove them.

  <sect id="install"><file>install</file> file

  <p>If there are files that need to be installed into your package but
  your standard make install won't do it, you put the filenames and 
  destinations into this <file>install</file>. They are installed by <manref
  name="dh_install" section="1">.  You should first check there is not a more
  specific tool to use before; for example documents should be in the docs file
  and not this one.

  <p>This <file>install</file> has one line per file installed, with the name of the file
  (relative to the top build directory) then a space then the installation
  directory (relative to the install directory). One example of where this
  is used is where a binary is forgotten to be installed, the <file>install</file> file
  would look like:

  <example>
   src/foo/mybin usr/bin
  </example>

  <p>This will mean when this package is installed, there will be a binary
  file <file>/usr/bin/mybin</file>.

  <p>Alternatively, this <file>install</file> can have the name of the file only without
  the installation directory when the relative directory path does not change.
  This format is usually used for a large package that splits build result into
  multiple binary packages using <file>&lt;package-1&gt;.install</file>,
  <file>&lt;package-2&gt;.install</file>, etc.

  <p>From debhelper compatibility level 7 on, dh_install will fall back to
  looking in <file>debian/tmp</file> for files, if it doesn't find them in the
  current directory (or whereever you've told it to look using
  <tt>--sourcedir</tt>).

  <sect id="initd">init.d and <file>package.default</file> file

  <p>If your package is a daemon that needs to be run at system startup,
  you've obviously disregarded my initial recommendation, haven't you? :-)

  <p>This is a fairly generic skeleton file for an <file>/etc/init.d/</file>
  script, so you'll likely have to edit it, a lot, while making sure to 
  provide Filesystem Hierarchy Standard
    (see <file>/usr/share/doc/debian-policy/fhs/</file>) compliant headers. It gets installed into
  the temporary directory by <manref name="dh_installinit" section="1">.

  <p><file>package.default</file> will be installed into <file>etc/default/package</file>. This file
  sets defaults that are sourced by the init script.  Most times this
  default file is used to disable running a daemon, set some default flags
  or timeouts.  If your init script has certain <em>settable</em> features you want
  to install these into the default file, not the init script.
  
  <p>If your upstream package has an init file you can either use it or not. 
  If you don't use their init.d script then create a new one in <file>debian/init.d</file>.
  However if the upstream init script looks fine and installs in the right
  place you still need to setup the <file>rc*</file> symlinks. To do this you will need
  to override <prgn>dh_installinit</prgn> in the <file>rules</file> file with the following lines:

  <example>
  override_dh_installinit:
      dh_installinit --onlyscripts
  </example>

  <p>If you don't need this, remove the files.

  <sect id="manpage"><file>manpage.1.ex</file>, <file>manpage.sgml.ex</file>, and <file>manpage.xml.ex</file> files

  <p>Your program(s) should have a manual page. If they don't, each of these
  files is a template that you can fill out.

  <taglist>

  <tag><file/manpage.1.ex/
  <item><p>Manual pages are normally written in <manref name="nroff" section="1">.
  The <tt/manpage.1.ex/ example is written in nroff, too. 
  See the <manref name="man" section="7"> manual page
  for a brief description of how to edit such a file.

  <p>The final manual page file name should include the name of the program
  it is documenting, so we will rename it from "<tt>manpage</tt>" to "<tt>gentoo</tt>". 
  The file name also includes "<tt>.1</tt>" as the first suffix, which means it's a
  manual page for a user command. Be sure to verify that this section is
  indeed the correct one. Here's a short list of manual page sections:

  <p><example>
  Section |     Description     |     Notes
     1     User commands          Executable commands or scripts.
     2     System calls           Functions provided by the kernel.
     3     Library calls          Functions within system libraries.
     4     Special files          Usually found in /dev
     5     File formats           E.g. /etc/passwd's format
     6     Games                  Or other frivolous programs
     7     Macro packages         Such as man macros.
     8     System administration  Programs typically only run by root.
     9     Kernel routines        Non-standard calls and internals.
  </example>
  
  <p>So gentoo's man page should be called <tt/gentoo.1/. 
  There was no <file>gentoo.1</file> man page in the original source so I wrote
  it using information from the example and from upstream docs.
  
  <tag><file/manpage.sgml.ex/
  <item><p>If on the other hand you prefer writing SGML instead of <prgn>nroff</prgn>, you can
  use the <tt/manpage.sgml.ex/ template. If you do this, you have to:
  
  <list>
    <item>install the <package/docbook-to-man/ package
    <item>add <tt/docbook-to-man/ to the <tt/Build-Depends/ line in the
          <file/control/ file
    <item>remove the comment from the docbook-to-man invocation in the
          <tt>build</tt> target of your <file>rules</file> file
          if you are using old <prgn>dh_*</prgn> format
  </list>

  <p>And remember to rename the file to something like <tt/gentoo.sgml/!

  <tag><file/manpage.xml.ex/
  <item><p>If you prefer XML over SGML, you can use the <tt/manpage.xml.ex/ template.
  If you do this, you have two choices:
  
  <list>
    <item>install the <package/docbook-xsl/ package and an XSLT processor like
          <package/xsltproc/ (recommended)
    <item>add the <tt/docbook-xsl/, <tt/docbook-xml/ and <tt/xsltproc/ packages to the
          <tt/Build-Depends/ line in the <tt/control/ file
    <item>add a rule to the <tt>build</tt> target of your <file>rules</file> file
          if you are using old <prgn>dh_*</prgn> format:
      <example>
xsltproc --nonet \
         --param make.year.ranges 1 \
         --param make.single.year.ranges 1 \
         --param man.charmap.use.subset 0 \
         -o debian/ \
         /usr/share/xml/docbook/stylesheet/nwalsh/manpages/docbook.xsl \
         debian/manpage.xml
      </example>
    </item>
  </list>
  
  <p>Alternatively:

  <list>
    <item>install the <package/docbook2x/ package
    <item>add the <tt/docbook2x/ package to the <tt/Build-Depends/ line in the
          <tt/control/ file
    <item>add a rule to the <tt>build</tt> target of your <file>rules</file> file
          if you are using old <prgn>dh_*</prgn> format:
      <example>
docbook2-man debian/manpage.xml
      </example>
    </item>
  </list>
  
  <p>Rename the source file(s) to something like <tt/gentoo.1.xml/ or so and check
        the package documentations for stylesheet parameters and output options.
  
  </taglist>

  <sect id="menu"><file>menu.ex</file> file

  <p>X Window System users usually have a window manager with a menu that
  can be customized to launch programs. If they have installed the Debian
  <package/menu/ package, a set of menus for every program on the system will be
  created for them.

  <p>Here's the default <file/menu.ex/ file that <prgn>dh_make</prgn> created:
  
  <p><example>
  ?package(gentoo):needs="X11|text|vc|wm" section="Applications/see-menu-manual"\
    title="gentoo" command="/usr/bin/gentoo"
  </example>

  <p>The first field after the colon character is <tt>needs</tt>, and it specifies
  what kind of interface the program needs. Change this to one of the listed
  alternatives, e.g. <tt>text</tt> or <tt>X11</tt>.

  <p>The next is <tt>section</tt>, where the menu and submenu the entry should
  appear in. The current list of sections is at:
  <file>/usr/share/doc/debian-policy/menu-policy.html/ch2.html#s2.1</file>

  <p>The <tt>title</tt> field is the name of the program. You can start this one
  in uppercase if you like. Just keep it short.

  <p>Finally, the <tt>command</tt> field is the command that runs the program.

  <p>Now we'll change the menu entry to this:

  <p><example>
  ?package(gentoo): needs="X11" section="Applications/Tools" title="Gentoo" command="gentoo"
  </example>

  <p>You can also add other fields like <tt>longtitle</tt>, <tt>icon</tt>, <tt>hints</tt> etc.
  See <manref name="menufile" section="5">,
  <manref name="update-menus" section="1">
  and <file>/usr/share/doc/debian-policy/menu-policy.html/</file> for more
  information.

  <sect id="doc-base"><file>package.doc-base.EX</file> file

  <p>If your package has documentation other than manual pages and info
  docs, you should use the <package/doc-base/ file to register it,
  so the user can find it with e.g. <manref name="dhelp" section="1">,
  <manref name="dwww" section="1"> or <manref name="doccentral" section="1">.

  <p>This usually includes HTML, PS and PDF files, shipped in
  <file>/usr/share/doc/packagename/</file>.

  <p>This is how gentoo's doc-base file <file>gentoo.doc-base.EX</file> looks like:

  <p><example>
  Document: gentoo
  Title: Gentoo Manual
  Author: Emil Brink
  Abstract: This manual describes what Gentoo is, and how it can be used.
  Section: File Management

  Format: HTML
  Index: /usr/share/doc/gentoo/html/index.html
  Files: /usr/share/doc/gentoo/html/*.html
  </example>

  <p>For information on the file format, see
  <manref name="install-docs" section="8"> and the <package/doc-base/ manual,
  in <file>/usr/share/doc/doc-base/doc-base.html/</file>.

  <p>For more details on installing additional documentation, look in <ref id="destdir">.

  <sect id="maintscripts"><file>postinst.ex</file>, <file>preinst.ex</file>, <file>postrm.ex</file>, and <file>prerm.ex</file> files

  <p>These files are called maintainer scripts. They are scripts which are
  put in the control area of the package and run by <prgn/dpkg/ when your
  package is installed, upgraded or removed.

  <p>For now, you should try to avoid any manual editing of maintainer
  scripts if you possibly can because they tend to get complex. For more
  information look in the Policy Manual, chapter 6, and take a look at
  these example files provided by <prgn>dh_make</prgn>.

  <sect id="watch"><file>watch.ex</file> file

  <p>This file is used to configure the <manref name="uscan" section="1">
  and <manref name="uupdate" section="1"> programs (in the
  <package/devscripts/ package). These are used to watch the site you got
  the original source from.

  <p>Here's what I put in it:

  <p><example>
# watch control file for uscan
version=3
#
http://ftp.obsession.se/gentoo/ gentoo-(.*)\.tar\.gz
  </example>

  <p>Hint: connect to the Internet, and try running "uscan" in the program
  directory once you create the file. And read the manuals! :)

  <sect id="sourcef"><file>source/format</file> file

  <p>In the file <file>debian/source/format</file> there should be a single
  line describing the type of <prgn>dpkg</prgn> format your source file will be
  as defined in <manref name="dpkg-source" section="1">.  After
  <tt>squeeze</tt>, it should say either:
  <list compact>
  <item><tt>3.0 (native)</tt> for Debian native packages or 
  <item><tt>3.0 (quilt)</tt> for everything else.  
  </list>

  <p>The newer <prgn>dpkg</prgn> format <tt>3.0 (quilt)</tt> source format
  integrates the <prgn>quilt</prgn> patch system into the Debian package
  system.  This enables (but not requires) a packager to create a Debian source
  package not just with a single large <file>diff.gz</file> file but with
  multiple patch files.  <footnote>Actually, mulitiple source <file>tar.gz</file> files
  can be used too.  That is beyond scope of this document.</footnote>  When
  <prgn>dpkg-source</prgn> extracts sources, it applies all patches in
  <file>debian/patches/*</file> files to them.

  <sect id="patches"><file>debian/patches/*</file> files

  <p>The simple use of <prgn>dh_make</prgn> and <prgn>dpkg-buildpackage</prgn>
  commands will create a single large <file>diff.gz</file> file which contains
  package maintenance files in <file>debian/</file> and patch files to the
  source.  Such a package is a bit cumbersome to inspect and understand for
  each source tree modification later.  This is not so nice.

  <p>Several methods for the patch set maintenance have been proposed and are
  in use with Debian packages.  The <prgn>quilt</prgn> system is the preffered
  maintenance system in use.  Other ones are <prgn>dpatch</prgn>,
  <prgn>dbs</prgn>, <prgn>cdbs</prgn>, etc.  Many of these keep such patches as
  <file>debian/patches/*</file> files.

  <p>A package which is packaged properly with the <prgn>quilt</prgn> system
  for the newer <prgn>dpkg</prgn> format <tt>3.0 (quilt)</tt> source format has
  modifications to the source clearly documented as a set of <tt>-p1</tt> patch
  files with header in <file>debian/patches/</file> and the source tree is
  untouched outside of <file>debian/</file> directory.  When
  <prgn>dpkg-source</prgn> extracts sources, it applies all patches in
  <file>debian/patches/*</file> files to them.  <footnote>If you are asking a
  sponsor to upload your package, this kind of clear separation and
  documentation of your changes are very important to expedite the package
  review by your sponsor.</footnote>

  <p>The <prgn>quilt</prgn> command is explained in <manref section="1"
  name="quilt">.  You can apply (=push), un-apply(=pop), and refresh patches
  easily using <prgn>quilt</prgn> as if they are a stack.  Since Debian patches
  are located in <file>debian/patches/</file>, please make sure to export
  <tt>QUILT_PATCHES=debian/patches</tt> in your shell resource file and reload
  it. 

  <p> When someone (including yourself) provides you with a patch to the source
  later, then the package modification is quite simple:
<list compact>
<item>Edit patch to make it a <tt>-p1</tt> patch to the source tree.
<item>Add header to patch file with editor.
<item>Drop it into <file>debian/patches</file>
<item>Add the patch filenames to <file>debian/patches/series</file>.
</list>

  <chapt id="build">Building the package

  <p>We should now be ready to build the package.

  <sect id="completebuild">Complete (re)build

  <p>Enter the program's main directory and then issue this command:

  <p><example>
  dpkg-buildpackage -rfakeroot
  </example>

  <p>This will do everything for you. It will:
  <list>
    <item>clean the source tree ("<tt>fakeroot debian/rules clean</tt>")
    <item>build the source package ("<tt>dpkg-source -b</tt>")
    <item>build the program ("<tt>debian/rules build</tt>")
    <item>build the binary package ("<tt>fakeroot debian/rules binary</tt>")
    <item>sign the source <file/.dsc/ file, using <prgn/gnupg/
    <item>create and sign the upload <file/.changes/ file, using
          <prgn/dpkg-genchanges/ and <prgn/gnupg/
  </list>

  <p>The only input that will be required of you is your GPG key secret pass
  phrase, twice.

  <p>After all this is done, you will see the following files in the
  directory above (<file>~/gentoo/</file>):

  <p><list>
  <item><file>gentoo_0.9.12.orig.tar.gz</file>

  <p>This is the original source code tarball, merely renamed to the above
  so that it adheres to the Debian standard. Note that this was created
  using the <tt>-f</tt> option to <prgn/dh_make/ when we initially ran it.

  <item><file>gentoo_0.9.12-1.dsc</file>

  <p>This is a summary of the contents of the source code. The file is
  generated from your <file>control</file> file, and is used when
  unpacking the source with <manref name="dpkg-source" section="1">. This
  file is GPG signed, so that people can be sure that it's really yours.

  <item><file>gentoo_0.9.12-1.diff.gz</file>

  <p>This compressed file contains each and every addition you made to the
  original source code, in the form known as <em>unified diff</em>. It is made and
  used by <manref name="dpkg-source" section="1">. Warning: if you don't name
  the original tarball packagename_version.orig.tar.gz, <prgn/dpkg-source/
  will fail to generate the <file>.diff.gz</file> file properly!

  <p>If someone else wants to re-create your package from scratch, they can
  easily do so using the above three files. The extraction procedure is
  trivial: just copy the three files somewhere else and run
  "<tt>dpkg-source -x gentoo_0.9.12-1.dsc</tt>".

  <item><file>gentoo_0.9.12-1_i386.deb</file>

  <p>This is your completed binary package. You can use <prgn/dpkg/ to
  install and remove this just like any other package.

  <item><file>gentoo_0.9.12-1_i386.changes</file>

  <p>This file describes all the changes made in the current package
  revision, and it is used by the Debian FTP archive maintenance programs
  to install the binary and source packages in it. It is partly generated
  from the <file>changelog</file> file and the .dsc file. This file is GPG signed, so
  that people can be sure that it's really yours.

  <p>As you keep working on the package, behavior will change and new
  features will be added. People downloading your package can look at this
  file and quickly see what has changed. Debian archive maintenance programs
  will also post the contents of this file to the debian-devel-changes
  mailing list.
  </list>

  <p>The long strings of numbers in the <file>.dsc</file> and <file>.changes</file> files are MD5
  checksums for the files mentioned.
  A person downloading your files can test them with <manref name="md5sum"
  section="1"> and if the numbers don't match, they'll know the file is
  corrupt or has been tampered with.

  <sect id="option-sa">Including <file>orig.tar.gz</file> for upload
  <p>
When you first upload the package to the archive, you need to include
the original <file>orig.tar.gz</file> source.  If the last changelog entry is
not the first one for the given upstream version, you must provide
<prgn>dpkg-buildpackage</prgn> command with the "<tt>-sa</tt>" option.
On the other hand, the "<tt>-sd</tt>" option will force to exclude the
original <file>orig.tar.gz</file> source.

  <sect id="quickrebuild">Quick rebuild

  <p>With a large package, you may not want to rebuild from scratch every
  time while you tune a detail in <file>debian/rules</file>. For testing
  purposes, you
  can make a <file>.deb</file> file without rebuilding the upstream sources like this:

  <p><example>
  fakeroot debian/rules binary
  </example>

  <p>Once you are finished with your tuning, remember to rebuild following
  the above, proper procedure. You may not be able to upload correctly if
  you try to upload <file>.deb</file> files built this way.

  <sect id="debuild"><prgn>debuild</prgn> command

  <p>You can automate package build process further with 
  <prgn>debuild</prgn> command.  
  See <manref name="debuild" section="1">.
  
  <p>Customization of the debuild command can be done through 
  <file>/etc/devscripts.conf</file> or <file>~/.devscripts</file>. 
  I would suggest at least following items:

  <p><example>
  DEBSIGN_KEYID="Your_GPG_keyID"
  </example>
  With these, you can build package always with your GPG key and avoid 
  including undesired components.  (This is good for sponsoring too.)
  For example, cleaning source and rebuilding package from a user account 
  is as simple as:

  <p><example>
  debuild clean
  debuild
  </example>

  <sect id="pbuilder"><package>pbuilder</package> package
  <p>
For a clean room (chroot) build environment to verify the build
dependencies, the <package>pbuilder</package> package is very useful.  This
ensures a clean build from source under the auto-builder for different
architectures and avoids the severity serious FTBFS (Fails To Build From
Source) bug which is always in the RC (release critical) category.  See
<url id="&buildd-home;"> for more on the Debian package auto-builder.
<p>
The most basic use of the <package>pbuilder</package> package is the direct
invocation of <prgn>pbuilder</prgn> command from root.  For example,
issue the following commands in the directory where
<file>.orig.tar.gz</file>, <file>.diff.gz</file>, and <file>.dsc</file>
exist to build a package.
<example>
root # pbuilder create # if second time, pbuilder update
root # pbuilder build foo.dsc
</example>
The newly built packages will be located in
<file>/var/cache/pbuilder/result/</file> with root ownership.
<p>
The <prgn>pdebuild</prgn> command helps you to use
<package>pbuilder</package> package functions from the normal user
account.  From the root of the source tree while having
<file>orig.tar.gz</file> file in its parent directory, you issue
the following commands:
<example>
$ sudo pbuilder create # if second time, sudo pbuilder update
$ pdebuild
</example>
The newly built packages will be located in
<file>/var/cache/pbuilder/result/</file> with non-root ownership.
<footnote>
Currently, I would suggest customizing your system by setting
<file>/var/cache/pbuilder/result/</file> directory writable by the user
and setting <file>~/.pbuilderrc</file> or <file>/etc/pbuilderrc</file>
to include
<example>
AUTO_DEBSIGN=yes
</example>
This will allow you to sign generated packages with your secret GPG key
under <file>~/.gnupg/</file>.  Since the <package>pbuilder</package> package
is still evolving, you have to check the actual configuration situation by 
consulting the latest official documentation.
</footnote>
<p>
If you want to add an additional apt source to be used by the
<package>pbuilder</package> package, you set <tt>OTHERMIRROR</tt> in
<file>~/.pbuilderrc</file> or
<file>/etc/pbuilderrc</file> and run (for <tt>squeeze</tt>)
<example>
$ sudo pbuilder update --distribution squeeze --override-config
</example>
The use of <tt>--override-config</tt> is needed to update apt source
within chroot environment.
<p>
See <url id="&pbuilder-home;">,
<manref section="1" name="pdebuild">,
<manref section="5" name="pbuilderrc">, and
<manref section="8" name="pbuilder"> .

  <sect id="cvs-buildpackage"><prgn>cvs-buildpackage</prgn> command and similars
<p>
You should consider using a source code management system to manage
packaging activity.  There are several wrapper scripts which are customized 
to be used with the most popular ones.
<list compact>
<item>CVS
<list compact>
<item><package>cvs-buildpackage</package>
</list>
<item>Subversion
<list compact>
<item><package>svn-buildpackage</package>
</list>
<item>Git (git-core)
<list compact>
<item><package>git-buildpackage</package>
</list>
</list>
<p>
These commands also automate the packaging of new upstream releases.

  <chapt id="checkit">Checking the package for errors
  <p>
  
  <sect id="lintians"><package>lintian</package> package

  <p>Run <manref name="lintian" section="1"> on your .changes file; these
  programs will check for many common packaging errors. The commands are:
  
  <p><example>
  lintian -i gentoo_0.9.12-1_i386.changes
  </example>
  
  <p>Of course, replace the filename with the name of the .changes file
  generated for your package. If it appears that there are some errors
  (lines beginning with E:), read the explanation (the N: lines), correct
  mistakes, and rebuild as described in <ref id="completebuild">. If there are
  lines that begin with W:, those are warnings, so tune the package or
  verify that the warnings are spurious (and make Lintian overrides; see
  the documentation for details).

  <p>Note that you can build the package with <prgn/dpkg-buildpackage/ and run
  <prgn/lintian/ all in one command with 
  <manref name="debuild" section="1">.
  
  <sect id="mc"><prgn>mc</prgn> command

  <p>You can unpack the contents of <file>*.deb</file> package with <manref
  name="dpkg-deb" section="1"> command.  You can list the contents of a
  generated Debian package with <manref name="debc" section="1">.
  <p>
  This can be made into an intuitive process by
  using a file manager like <manref name="mc" section="1"> which will
  let you browse not only the contents of <file>*.deb</file> package
  files but also <file>*.diff.gz</file> and <file>*.tar.gz</file> files.
  <p> 
  Be on the lookout for extra unneeded files or zero length files, both
  in the binary and source package. Often cruft doesn't get cleaned up
  properly; adjust your <file>rules</file> file to compensate for that. 
  <p>
  Tips: "<tt>zgrep ^+++ ../gentoo_0.9.12-1.diff.gz</tt>" will give you a
  list of your changes/additions to the source files, and "<tt>dpkg-deb
  -c gentoo_0.9.12-1_i386.deb</tt>" or "<tt>debc
  gentoo_0.9.12-1_i386.changes</tt>" will list the files in the binary
  package.  

  <sect id="debdiff"><prgn>debdiff</prgn> command

  <p>You can compare file lists in two binary Debian packages with
  <manref name="debdiff" section="1"> command.  This is useful for
  verifying that no files have been unintentionally misplaced or removed,
  and no other inadvertent changes were made when updating packages.
  You can check group of <file>*.deb</file> files simply by "<tt>debdiff
  old-package.change new-package.change</tt>".

  <sect id="interdiff"><prgn>interdiff</prgn> command

  <p>You can compare two <file>diff.gz</file> files with <manref
  name="interdiff" section="1"> command.  This is useful for verifying
  that no inadvertent changes were made to the source by the maintainer
  when updating packages.  Run "<tt>interdiff -z old-package.diff.gz
  new-package.diff.gz</tt>".

  <sect id="debi"><prgn>debi</prgn> command

  <p>Install the package to test it yourself, e.g. using the
  <manref name="debi" section="1"> command as root. Try to install and run
  it on machines other than your own and watch closely for any warnings
  or errors both during the installation and while the program is being run.

  <chapt id="upload">Uploading the package

  <p>Now that you have tested your new package thoroughly, you will be ready
  to start the Debian new maintainer application process, as described at
  <url id="http://www.debian.org/devel/join/newmaint">

  <sect id="upload-debian">Uploading to the Debian archive
  
  <p>Once you become an official developer, you'll need to upload the
  package to the Debian archive. You can do this manually, but it's easier
  to use the provided automated tools, like
  <manref name="dupload" section="1"> or <manref name="dput" section="1">.
  We'll describe how it's done with <prgn/dupload/.

  <p>First you have to set up dupload's config file. You can either edit the
  system-wide <file>/etc/dupload.conf</file> file, or have your own
  <file>~/.dupload.conf</file> file override the few things you want to
  change. Put something like this in the file:

  <p><example>
  package config;

  $default_host = "anonymous-ftp-master";

  $cfg{'anonymous-ftp-master'} = {
        fqdn => "ftp-master.debian.org",
        method => "ftp",
        incoming => "/pub/UploadQueue/",
        # files pass on to dinstall on ftp-master which sends emails itself
        dinstall_runs => 1,
  };

  1;
  </example>

  <p>You can read the <manref name="dupload.conf" section="5"> manual
  page to understand what each of these options means.

  <p>The <tt>$default_host</tt> option is the trickiest one -- it determines which of
  the upload queues will be used by default. "anonymous-ftp-master" is the primary
  one, but it's possible that you will want to use another, faster one.
  For more information about the upload queues, read the Developer's
  Reference, section "Uploading a package", at
  <file>&uploading;</file>

  <p>Then connect to your Internet provider, and issue this command:
  
  <p><example>
  dupload gentoo_0.9.12-1_i386.changes
  </example>

  <p><prgn/dupload/ checks that the MD5 checksums of the files match those from the
  .changes file, so it will warn you to rebuild it as described in
  <ref id="completebuild"> so it can properly upload.

  <!-- (No more use of ftp-master)
  <p>If you upload to "ftp-master", <prgn/dupload/ will ask for your
  password on Debian machines, and then upload the packages.
  -->

  <p>If you encounter an upload problem at <url id="&ftp-uploadqueue;">,
  you can fix this by manually uploading gnupg signed
  <file>*.commands</file> file to <url id="&ftp-uploadqueue;"> with
  <prgn>ftp</prgn>.
  <footnote>
  See <url id="&ftp-command;">.  Alternatively, you may use
  <prgn>dcut</prgn> command from the <package>dput</package> package.
  </footnote>
  For example, use <file>hello.commands</file>:
<example>
-----BEGIN PGP SIGNED MESSAGE-----

Uploader: Roman Hodek &lt;Roman.Hodek@informatik.uni-erlangen.de&gt;
Commands: 
 rm hello_1.0-1_i386.deb
 mv hello_1.0-1.dsx hello_1.0-1.dsc

-----BEGIN PGP SIGNATURE-----
Version: 2.6.3ia

iQCVAwUBNFiQSXVhJ0HiWnvJAQG58AP+IDJVeSWmDvzMUphScg1EK0mvChgnuD7h
BRiVQubXkB2DphLJW5UUSRnjw1iuFcYwH/lFpNpl7XP95LkLX3iFza9qItw4k2/q
tvylZkmIA9jxCyv/YB6zZCbHmbvUnL473eLRoxlnYZd3JFaCZMJ86B0Ph4GFNPAf
Z4jxNrgh7Bc=
=pH94
-----END PGP SIGNATURE-----
</example>

<p>See <url name="Debian Reference, 2.7.12. Small public package archive"
id="http://www.debian.org/doc/manuals/debian-reference/ch02.en.html#_small_public_package_archive">for
an example for creating a small public package archive compatible with the
modern secure APT system.

  <chapt id="update">Updating the package

  <sect id="newrevision">New Debian revision

  <p>Let's say that a bug report was filed against your package, #54321,
  and it describes a problem that you can solve. To create a new Debian
  revision of the package, you need to:

  <list>
  <item>Correct the problem in the package source, of course.

  <item>Add a new revision at the top of the Debian changelog file, for
  example with "<tt>dch -i</tt>", or explicitly with
  "<tt>dch -v &lt;version&gt;-&lt;revision&gt;</tt>"
  and then insert the comments using your preferred editor.

  <p>Tip: how to easily get the date in required format?
  Use "<tt>822-date</tt>", or "<tt>date -R</tt>".

  <item>Include a short description of the bug and the solution in the
  changelog entry,
  followed by "<tt>Closes: #54321</tt>". That way, the bug report will be
  automagically closed by the archive maintenance software the moment your
  package gets accepted in the Debian archive.

  <item>Repeat what you did in <ref id="completebuild">, <ref id="checkit">,
  and <ref id="upload">. The difference is that this time, the original source
  archive won't be included, as it hasn't been changed and it already
  exists in the Debian archive.
  </list>

  <sect id="newupstream">New upstream release (basic)

  <p>Now let's consider a different, slightly more complicated situation
  - a new upstream version was released, and of course you want it packaged.
  You need to do the following:

  <list>
  <item>Download the new sources and put the tarball (e.g. named
  <file>gentoo-0.9.13.tar.gz</file>) in the directory above the old source tree
  (e.g. <file>~/gentoo/</file>).

  <item>Enter the old source directory, and run:

  <example>
  uupdate -u gentoo-0.9.13.tar.gz
  </example>

  <p>Of course, replace this file name with the name of your program's new source
  archive. <manref name="uupdate" section="1"> will properly rename that
  tarball, try to apply all the changes from your previous <file>.diff.gz</file> file,
  and update the new <file>debian/changelog</file> file.

  <item>Change directory to <file>../gentoo-0.9.13</file>, the new package source tree,
  and repeat what you did in <ref id="completebuild">, <ref id="checkit">, and
  <ref id="upload">.
  </list>

  <p>Note that if you set up a <file>debian/watch</file> file as described in
  <ref id="watch">, you can run <manref name="uscan" section="1"> to
  automagically look for revised sources, download them, and run
  <prgn/uupdate/.

  <sect id="newupstream-real">New upstream release (realistic)

<p>
When preparing packages for the Debian archive, you must check
the resulting packages in detail.  Here is a more realistic example of this
procedure.

<enumlist compact>

<item>Verify changes in upstream source

<list compact>

<item>Read the upstream <file>changelog</file>, <file>NEWS</file>, and
whatever other documentation they may have released with the new
version.

<item>Do a "<tt>diff -urN</tt>" between the old and new upstream sources
to try to get a feel for the scope of the changes, where work is
actively being done (and thus where new bugs may appear), and also keep
an eye out for anything suspicious.

</list>

<item>Port the old Debian packaging to the new version.  

<list compact>

<item>Unpack the source tarball and rename the root of the source tree as
<file>&lt;packagename&gt;-&lt;upstream_version&gt;/</file> and 
<tt>cd</tt> into this directory.

<item>Copy the source tarball in the parent directory and rename it as
<file>&lt;packagename&gt;_&lt;upstream_version&gt;.orig.tar.gz</file> .

<item>Apply the same kind of modification to the new source tree as the
old source tree.  Possible methods are:
<list compact>
<item>"<tt>zcat <var>/path/to/</var>&lt;packagename&gt;_&lt;old-version&gt;.diff.gz | patch -p1</tt>" command,
<item><prgn>uupdate</prgn> command,
<item>"<tt>svn merge</tt>" command if you manage the source with
Subversion repository, or
<item>simply copying <file>debian/</file> directory from the old source
tree if it was packaged with <package>dpatch</package> or <package>quilt</package>.
</list>

<item>Preserve old changelog entries (sounds obvious, but there have
been incidents...)

<item>The new package version is the upstream release version appended
with a <tt>-1</tt> Debian revision number, e.g., <tt>0.9.13-1</tt>.

<item>Add changelog record entry with "New upstream release" for this
new version at the top of <file>debian/changelog</file>.  For example
"<tt>dch -v 0.9.13-1</tt>".

<item>Describe concisely the changes <em>in</em> the new upstream
release that fix reported bugs and close those bugs in the changelog.

<item>Describe concisely the changes <em>to</em> the new upstream
release by the maintainer that fix reported bugs and close those bugs in
the changelog.

<item>If the patch/merge did not apply cleanly, inspect the situation to
determine what failed (clues are left in <file>.rej</file> files).  Most
often the problem is that a patch you applied to the source was
integrated upstream, and thus the patch is no longer relevant.

<item>Upgrades to the new version should be silent and nonintrusive
(existing users should not notice the upgrade except by discovering that
old bugs have been fixed and there perhaps are new features).
<footnote>
Please make your package properly updates the config file upon upgrades
using well designed <prgn>postinst</prgn> etc., so that it
<strong>doesn't</strong> do things not wanted by the user!  These are
the enhancements that explain <strong>why</strong> people choose Debian.
<p>
When the upgrade is necessarily intrusive (eg., config files scattered
through various home directories with totally different structure), you
may consider to set package to the safe default (e.g., disabled service)
and provide proper documentations required by the policy
(<file>README.Debian</file> and <file>NEWS.Debian</file> ) as the last
resort. But don't bother with the debconf note.
</footnote>

<item>If you need to add erased template files for any reason, you
may run <prgn>dh_make</prgn> again in the same, already <em>debianized</em>,
directory with <tt>-o</tt> option.  Then edit it properly.

<item>Existing Debian changes need to be reevaluated; throw away stuff that
upstream has incorporated (in one form or another) and remember to
keep stuff that hasn't been incorporated by upstream, unless there is
a compelling reason not to.

<item>If any changes were made to the build system (hopefully you'd know
from step 1) then update the <file>debian/rules</file> and
<file>debian/control</file> build dependencies if necessary.

</list>

<item>Build the new package as described in <ref id="debuild"> or
<ref id="pbuilder">. Use of <package>pbuilder</package> is desirable.

<item>Verify new packages are built correctly.

<list compact>

<item>Perform <ref id="checkit">.

<item>Perform <ref id="upgrading">.   

<item>Check again to see if any bugs have been fixed that are currently
open in the <url name="Debian Bug Tracking System (BTS)"
id="http://www.debian.org/Bugs/"> .

<item>Check the contents of the .changes file to make sure you are
uploading to the correct distribution, the proper bugs closures are
listed in the Closes: field, the Maintainer: and Changed-By: fields
match, the file is GPG-signed, etc.

</list>

<item>If any changes were made to correct anything in the packaging along
the way, go back to the step 2 until satisfied.  

<item>If your upload needs to be sponsored, be sure to note any special
options required when building the package (like "<tt>dpkg-buildpackage
-sa -v ...</tt>") and be sure to inform your sponsor so he or she builds
it correctly.

<item>If you are uploading yourself, perform <ref id="upload">.
</enumlist>

  <sect id="orig-tar"><file>orig.tar.gz</file> file
<p>
If you try to build packages only from the new source tree with
<file>debian/</file> directory without the <file>orig.tar.gz</file> file
in its parent directory, you will end up unintentionally creating a
native source package, which comes without the <file>diff.gz</file>
file.  This type of packaging is only appropriate for the
debian-specific packages, which will never be useful in another
distribution.
<footnote>
Some people argue that, even for Debian specific packages, it is still
better practice to package the contents of the <file>debian/</file>
directory residing in the <file>diff.gz</file> file, rather than in the
<file>orig.tar.gz</file> file.
</footnote>
<p>
In order to obtain a non-native source package which consists of both
the <file>orig.tar.gz</file> file and the <file>diff.gz</file> file, you
must manually copy the upstream tarball to the parent directory with its
file name changed into
<file>&lt;packagename&gt;_&lt;upstream_version&gt;.orig.tar.gz</file> as
it was done by <prgn>dh_make</prgn> command in <ref id="dh_make">.

  <sect id="upgrading">Verifying package upgrades

  <p>When you build a new version of the package, you should do the
  following to verify that the package can be safely upgraded:

  <list>
    <item>upgrade from the previous version
    <item>downgrade back again and then remove it,
    <item>install the new package
    <item>remove it and then reinstall it again,
    <item>purge it.
  </list>

  <p>If the package makes use of non-trivial pre/post/inst/rm scripts, be 
  sure to test the upgrade paths of those.

  <p>Bear in mind that if your package has previously been released in
  Debian, people will often be upgrading to your package from the version
  that was in the last Debian release. Remember to test upgrades from that
  version too.

  <chapt id="helpme">Where to ask for help

  <p>Before you decide to ask your question in some public place, please
  just RTFM. That includes documentation in <file>/usr/share/doc/dpkg</file>,
  <file>/usr/share/doc/debian</file>, <file>&autotools-dev;</file>, 
  <file>/usr/share/doc/package/*</file>
  files and the man/info pages for all the programs mentioned in this document.
  See all the information at <url id="&nm-home;">.

  <p>If you have questions about packaging that you couldn't find answers to
  in the documentation, you can ask them on the Debian Mentors' mailing list
  at <email/debian-mentors@lists.debian.org/. The more experienced Debian
  developers will gladly help you, but do read at least some of the
  documentation before asking a question!

  <p>See <url id="http://lists.debian.org/debian-mentors/"> for more
  information about this mailing list.

  <p>When you receive
  a bug report (yes, actual bug reports!), you will know that it is time for you
  to dig into the <url name="Debian Bug Tracking System" id="http://www.debian.org/Bugs/">
  and read the documentation there, to be able to deal with the reports
  efficiently. I highly recommend reading the Developer's Reference,
  chapter "Handling Bugs", at
  <file>&bughandling;</file>

  <p>If you still have questions, ask on the Debian Developers' mailing list
  at <email/debian-devel@lists.debian.org/. See
  <url id="http://lists.debian.org/debian-devel/"> for more information
  about this mailing list.

  <p>Even if it all worked well, it's time to start praying. Why? Because
  in just a few hours (or days) users from all around the world will start
  to use your package, and if you made some critical error you'll get
  mailbombed by numerous angry Debian users... Just kidding. :-)

  <p>Relax and be ready for bug reports, because there is a lot more work
  to be done before your package will be fully in line with Debian policies
  (once again, read the <em>real documentation</em> for details). Good luck!

<appendix id="pkg-eg">Examples
<p>
Here we package the upstream tarball <var>gentoo-1.0.2</var>.tar.gz and
uploading all the packages to the <tt><var>nm_target</var></tt>.

<sect id="pkg-simple">Simple packaging example
<p>
<example>
$ mkdir -p <var>/path/to</var> # new empty directory
$ cd <var>/path/to</var>
$ tar -xvzf <var>/path/from/gentoo-1.0.2</var>.tar.gz # get source
$ cd <var>gentoo-1.0.2</var>
$ dh_make -e <var>name@domain.dom</var> -f <var>/path/from/gentoo-1.0.2</var>.tar.gz
... Answer prompts.
... Fix source tree
... If it is a script package, set debian/control to "Architecture: all"
... Do not erase ../<var>gentoo_1.0.2</var>.orig.tar.gz
$ debuild
... Make sure no warning happens.
$ cd ..
$ dupload -t <var>nm_target</var> <var>gentoo_1.0.2-1</var>_i386.changes
</example>

<!-- This whole section needs to be written for dpkg format 3.0(quilt) -->
<!-- Use of git with rebase/cherry-pick , git-buildpackage,  etc. is ideal -->
<!-- Now disabled following ...
<sect id="pkg-dpatch">Packaging example with the <package>dpatch</package> and the <package>pbuilder</package>
<p>
<example>
$ mkdir -p <var>/path/to</var> # new empty directory
$ cd <var>/path/to</var>
$ tar -xvzf <var>/path/from/gentoo-1.0.2</var>.tar.gz
$ cp -a  <var>gentoo-1.0.2</var> <var>gentoo-1.0.2-orig</var>
$ cd <var>gentoo-1.0.2</var>
$ dh_make -e <var>name@domain.dom</var> -f /path/from/<var>gentoo-1.0.2</var>.tar.gz
... Answer prompts.
</example>
Here part of <file>debian/rules</file> originally looks like:
<example>
configure: configure-stamp
configure-stamp:
        dh_testdir
        # Add here commands to configure the package.
        touch configure-stamp
build: build-stamp
build-stamp: configure-stamp 
        dh_testdir
        # Add here commands to compile the package.
        $(MAKE)
        #docbook-to-man debian/gentoo.sgml > gentoo.1
        touch $@
clean:
        dh_testdir
        dh_testroot
        rm -f build-stamp configure-stamp
        # Add here commands to clean up after the build process.
        -$(MAKE) clean
        dh_clean 
</example>
You change this part of <file>debian/rules</file> to the following 
by the editor to use <package>dpatch</package> and add 
<package>dpatch</package> to the <tt>Build-Depends:</tt> line in the 
<file>debian/control</file> file:
<example>
configure: configure-stamp
configure-stamp: patch
        dh_testdir
        # Add here commands to configure the package.
        touch configure-stamp
build: build-stamp
build-stamp: configure-stamp 
        dh_testdir
        # Add here commands to compile the package.
        $(MAKE)
        #docbook-to-man debian/gentoo.sgml > gentoo.1
        touch $@
clean: clean-patched unpatch
clean-patched:
        dh_testdir
        dh_testroot
        rm -f build-stamp configure-stamp
        # Add here commands to clean up after the build process.
        -$(MAKE) clean
        dh_clean 
patch: patch-stamp
patch-stamp:
     dpatch apply-all
     dpatch call-all -a=pkg-info >patch-stamp
unpatch:
     dpatch deapply-all
     rm -rf patch-stamp debian/patched
</example>
<p>
Now you are ready to repackage the source tree with
<package>dpatch</package> system with the help of 
<prgn>dpatch-edit-patch</prgn>.
<example>
$ dpatch-edit-patch patch 10_firstpatch
... Fix source tree by editor
$ exit 0
... Try building packages with "debuild -us -uc"
... Clean source with "debuild clean"
... Repeat dpatch-edit-patch until making source buildable.
$ sudo pbuilder update
$ pdebuild
$ cd /var/cache/pbuilder/result/
$ dupload -t <var>nm_target</var> <var>gentoo_1.0.2-1</var>_i386.changes
</example>
-->

 </book>

</debiandoc>
