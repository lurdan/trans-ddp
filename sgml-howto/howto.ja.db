<?xml version="1.0" encoding="euc-jp"?>

<!DOCTYPE article PUBLIC "-//Norman Walsh//DTD DocBk XML V3.1//EN"
     "dtd/docbook-xml/docbookx.dtd"[

<!-- TODO: a <man> element with a link to -->
<!-- http://www.sources.org/cgi-bin/dwww?type=man&location=/usr/man/man1/sgml2latex.1.gz for the HTML output -->

<!-- TODO: externalize the following declarations in other -->
<!-- files. Warning: this will mean a validating XML parser to treat -->
<!-- the conditionals. First attemps with XML::Checker are not -->
<!-- convincing. -->

<!-- Programs -->
<!ENTITY sgmltools2 '<link linkend="sgmltools2">SGMLtools, version 2</link>'>
<!ENTITY sgmltools1 '<link linkend="sgmltools1">sgml-tools, version 1</link>'>
<!ENTITY jade '<link linkend="jade">jade</link>'>
<!ENTITY jadetex '<link linkend="jadetex">jadetex</link>'>
<!ENTITY psgml '<application>Emacs</application> の SGML mode 、 <link linkend="psgml">psgml</link>'>
<!ENTITY modular_ss '<link linkend="modularss">モジュール化 DocBook スタイルシート</link>'>

<!-- Files -->
<!ENTITY print_ss
       '/usr/lib/sgml/stylesheet/dsssl/docbook/nwalsh/print/docbook.dsl'>
<!ENTITY html_ss 
       '/usr/lib/sgml/stylesheet/dsssl/docbook/nwalsh/html/docbook.dsl'>
<!ENTITY xml_decl '<filename>/usr/lib/sgml/declaration/xml.decl</filename>'>

<!-- New elements -->

<!-- The contents of the debianpackage element is the official name -->
<!-- The name attribute holds the Debian name, if it's different -->
<!ELEMENT debianpackage (#PCDATA)>
<!ATTLIST debianpackage name CDATA #IMPLIED>
<!ATTLIST debianpackage refserver CDATA #IMPLIED>
<!ENTITY % local.title.char.mix
	"|debianpackage">

<!ELEMENT debiandoc (#PCDATA)>
<!ATTLIST debiandoc file CDATA #IMPLIED>
<!ATTLIST debiandoc text CDATA #IMPLIED>
<!ENTITY % local.para.char.mix
	"|debiandoc|debianpackage">

<!ELEMENT manpage (#PCDATA)>

<!-- New attributes -->
<!ENTITY % local.common.attrib 
      "debianversionequal CDATA #IMPLIED
       debianversionmin   CDATA #IMPLIED
       debianversionmax   CDATA #IMPLIED">


]>

<article>

  <artheader>
    <title>Debian SGML/XML HOWTO</title>
    <author>
      <firstname>St&eacute;phane</firstname>
      <surname>Bortzmeyer</surname>
      <affiliation>
	<orgname>The Debian Project</orgname>
	<address><email>bortzmeyer@debian.org</email></address>
      </affiliation>   
    </author>
    <othercredit>
      <contrib>スペルおよび文法修正</contrib>
      <firstname>Guy</firstname>
      <surname>Brand</surname>
      <affiliation>
	<address><email>guybrand@chimie.u-strasbg.fr</email></address>
      </affiliation>   
    </othercredit>
    <othercredit>
      <contrib>スペルおよび文法、スタイル修正</contrib>
      <firstname>John</firstname>
      <surname>van der Koijk</surname>
      <affiliation>
	<address><email>jvdkoijk@wirehub.nl</email></address>
      </affiliation>   
    </othercredit>
    <othercredit>
      <contrib>日本語翻訳</contrib>
      <firstname>Kenshi</firstname>
      <surname>Muto</surname>
      <affiliation>
	<address><email>kmuto@debian.org</email></address>
      </affiliation>   
    </othercredit>
    <releaseinfo>$Id: howto.ja.db,v 1.1 1999-11-06 00:32:06 sano Exp $</releaseinfo>
    <copyright>
      <year>1999</year>
      <holder>St&eacute;phane Bortzmeyer</holder>
    </copyright>
    <legalnotice>
      <para>このテキストは <ulink url="http://www.gnu.org/copyleft/gpl.html">General Public License</ulink> にて配布されます。</para>
    </legalnotice>
  </artheader>

  <sect1>
    <title>なぜこの HOWTO が?これはなんですか?</title>
    <para>この章ではなぜこの HOWTO が存在し、どのような人々を助けようとしているか説明します。時間の無駄になる前に最初に読んでください。</para>
    <sect2>
      <title>この HOWTO は何か</title>
      <para>この HOWTO は Debian オペレーティングシステムで SGML や XML を使う上で<emphasis>実用的</emphasis>な情報を含んでいます。</para>
      <para>HOWTO はタスク指向です: あなたはさまざまな作業に必要な Debian パッケージが何か、そしてそれをどのように使うかわかるでしょう。開始する前にすべてを読んだり理解するのを好まなかったり "hands on" トレーニングのほうを好むせっかちな人々向けになっています。
      </para>
      <para>我々は SGML (およびそのサブセットの XML) 、重要と思われるいくつかの DTD と書くためのツール、 SGML のフォーマットとWeb や印刷の双方での表示、をカバーします。一般データの交換ツールではなく、 SGML ドキュメントを書くためのやり方であることを強調しておきます。</para>
    </sect2>
    <sect2>
      <title>この HOWTO には何がないですか</title>
      <para>私たちは Debian システムを想定し、ソフトウェアはすべてパッケージ化されているので、あなたはそのインストールやセットアップについては何も見い出せないでしょう。私たちは <phrase debianversionequal="2.2">Debian 2.2 、通称 'potato' (執筆時点ではまだリリースではありません)</phrase>、<phrase debianversionequal="2.1">Debian 2.1 、通称 'slink'</phrase> として出している Debian パッケージだけを使います。
</para>
      <para>これは SGML や XML のチュートリアルではありません。この種の情報については、<xref linkend="references"/> を参照してください。その代わり、あなたは正しく開始するのに十分な SGML を得られるでしょう。
</para>
    </sect2>
    <sect2>
      <title>この HOWTO についてのメタ情報</title>
      <para>この HOWTO はそれ自身が Debian システムの DocBook (XML) で書かれています。 HOWTO は<ulink url="http://www.debian.org/~bortz/SGML-HOWTO/">筆者の Web ページ</ulink>からその<ulink url="http://www.debian.org/~bortz/SGML-HOWTO/howto.db">ソースコード</ulink>を含めて取得できます。
</para>
    </sect2>
    <sect2>
      <title>なぜこの HOWTO は Debian 固有なのか?</title>
      <para>私は、早く開始する、ということを言いました。思い出しましたか? これは、実際のファイル名、実際のコマンドを意味しており、 <application>jade</application>をコンパイルするという時間の消費を意味してはいません。それに私は "Your mileage way vary" (人それぞれ) という警告をすべてに挿入するのは嫌いです。そのため、私は特定のオペレーティングシステム、私が最もよく使っていて、統合 SGML 環境のある唯一のものである <ulink url="http://www.debian.org/">Debian</ulink> を選択します。完璧ではないにせよ、動作しますし、この HOWTO も含めドキュメントも持っています。
</para>
      <para>私は<link linkend="otheros">その他のオペレーティングシステム</link>にいくつかのポインタを追加しました。
</para>
    </sect2>
  </sect1>

  <sect1>
    <title>あなたが実際に SGML について知る必要があること</title>
    <para>私はこの節を短いままにしておこうと努めました。しかしながら、私は SGML についての概念の少数の基礎知識なしにすべてを説明できません。そのため、私たちが実際にソースコードに移る前にやっておきましょう。
</para>
    <sect2>
      <title>構造化ドキュメントとは何か?</title>
      <para>構造化ドキュメントは構造化エレメント (要素) の上に構築されています:
      章、節、段落、などなどすべてのエレメントはそれらが何かによって明らかにラベルされます: 参照、プログラムの出力、など。ドキュメントをどのように表現すべきかについての明確な情報は何も与えられていません; その構造 (およびコンテンツ (テキスト内容) )についての情報だけが与えられます。
      体裁の明確なルールがあるときには、それらは SGML ドキュメントの外側に置かれます。
</para>
      <para>これは AI システムを待つことなくドキュメントの自動的な処理を可能とします。それは意味を伝達する構造に集中し、著者を助けます。
</para>
      <para>ですから、 "私は SGML でボールドの単語はどうやって置いたらいいのか?" という疑問はあまり適切ではありません。どうやってテキストの広がりに強調を置くか尋ねることは<emphasis>できる</emphasis>でしょう。
</para>
    </sect2>
    <sect2>
      <title>SGML とは何か?</title>
      <para>Standard Generalized Markup Language (標準汎用マークアップ言語) は、構造化ドキュメントの著述を容易にするための標準化された言語です
	<footnote><para>データ交換のようなそのほかの用途もあります。</para></footnote>。 さらに特定すると、それはメタ言語です。あなたは実際に SGML をタイプすることはありませんが、 SGML は、どのように特定のドキュメントが構造化されて (書かれて) いるか定義するドキュメントタイプの特定の構造化言語 (これは DTD 、 Document Type Definition (ドキュメント型定義) と呼ばれます) を著述するために使われます。
</para>
      <para>そのため、 "SGML フォーマットによる" ドキュメントは、技術的に正しいですが、誤りやすいものです。 DocBook フォーマットや LinuxDoc フォーマット、 TEI フォーマットによるドキュメントはそう言えます。
</para>
    </sect2>

    <sect2>
      <title>SGML の見ためはどのようなものか?</title>
      <para>SGML はマークアップ言語です。すべての SGML ドキュメントは、<emphasis>エレメント</emphasis>(要素)を区切る<emphasis>タグ</emphasis>の合わさったテキストを含んでいます<footnote><para>終了タグが必須かどうかは DTD に依存します。 XML では、終了タグは常に必須です。</para>
	</footnote>。 SGML はいくつかの文法を使えますが、最も共通な、アングル括弧 &lt; と &gt; で囲まれるタグを使った、指示文法を守っていきます。例は次のとおりです:</para>
	<programlisting role="docbook">
<![CDATA[
<article>

<title>The Foo software</title>

<para>
Foo is very fast. And its documentation can be read easily.
</para>
]]>
	</programlisting>
      <para>HTML に似ているように見えますが、その理由は HTML が (理論的には) SGML の DTD だからです。</para>
      <para>エレメントは<emphasis>コンテンツ</emphasis> (内容) を持ちます。たとえば、上記の <sgmltag>para</sgmltag> エレメントのコンテンツは "Foo is very fast. 
	And its documentation can be read easily." です。</para>
      <para>エレメントはさらなる情報を示す<emphasis>アトリビュート</emphasis> (属性) を持つことができます。たとえば:</para>
	<programlisting role="docbook">
<![CDATA[
<example tested="true">
	    *c++;
</example>
]]>
	</programlisting>
      <para>いくつかのテキストをパラメータ化できる<emphasis>エンティティ</emphasis> (実体) もまた持つことができます。たとえば、もしあなたがしばしば "the Best Operating System, Debian" を参照し、毎回これをタイプするのを避けたい、いっそう悪いことに、もしあなたが最終的により上品な単語に決めたときにすべてのこの文字列を変更しなければならない、といったときには、エンティティを宣言できます。それを "debian" と呼び、アンパサンドと共に "&amp;debian;" のように使います<footnote><para>これは<emphasis>実体参照</emphasis>です。 SGML はその他の実体タイプも使いますが、この HOWTO ではカバーしません。</para></footnote>。</para>
	<para>1つのエレメントは特別です:<emphasis>ルートエレメント</emphasis>はグローバルエレメントで、すべてを含みます。 XML では、 DOCTYPE 行がどのエレメントがルートであるかを示します。例は次のとおりです<phrase debianversionequal="2.2"> (Debian 2.2 の SGML 環境には次の DTD の完全パス名を必要とする<emphasis>バグがある</emphasis>ように見えます。もしそうなら、これはバグで、私が調査します。<comment>TODO: それをしなさい。psgml に対するバグは記入しました。それにフォローしなさい。</comment>)</phrase>:</para>
      <programlisting role="docbook">
<![CDATA[
<!DOCTYPE article PUBLIC "-//Norman Walsh//DTD DocBk XML V3.1//EN"
     "dtd/docbook-xml/docbookx.dtd"[
]]>
      </programlisting>
	<sect3><title>そして XML ファイル?</title>
	<para>あなたは<link linkend="xml">あとで XML について</link>学びます。 XML ファイルは、いくつかのメタ情報と同様、 XML ファイルであることを示すための &lt;? で開始する<emphasis>処理指示</emphasis>で最初にはじまる、と言っておきます。例:</para>
	<programlisting role="docbook">
<![CDATA[
	<?xml version="1.0" encoding="utf-8"?>
]]>
	</programlisting>
	<para>XML ファイルは、タグのバランスが取れている (多くの Web エディタの HTML 出力に共通の、タグの交差がない) ことを意味する<emphasis>正しい書式</emphasis>になっている必要があり、それらの DTD に従っていることを意味する<emphasis>妥当性</emphasis>があります。
</para>
	<para>XML では、開始タグは常に終了タグを持ちますが、あなたは、
	開始タグと終了タグを、終了に似せて / が書かれたタグにマージした<emphasis>空エレメント</emphasis>を持つことができます:</para>
	  <programlisting role="xml">
<![CDATA[
	    <foobar/>
]]>
	  </programlisting>
	</sect3>
    </sect2>

    <sect2>
      <title>DTD とは何か?</title>
      <para>Document Type Definition (ドキュメント型定義) は固有の言語の (SGML による) 著述です。あなたはあなた自身の DTD (XML でも特に非常に異なるというわけではありません) を書くことも、あなたがほかの人々とドキュメントを交換したいと思うなら適切な既存の DTD を使うこともできます。いつかのそれぞれの DTD は一般的に、人々のグループ (天文学者、科学者、古代文学の古典学者 ...) に与えられた目的のために存在します。
</para>
      <para>DTD は許可されたエレメントとそれらの関係 (たとえば、 <sgmltag>chapter</sgmltag> (章) は少なくとも1つの <sgmltag>section</sgmltag> (節) を持つ必要があることを表す) を一覧します。</para>
      <para>有用と思われる典型的な DTD:</para>
      <itemizedlist>
	<listitem>
	  <para><ulink url="http://www.oasis-open.org/docbook/">DocBook</ulink> は主に技術ドキュメント、特にソフトウェアについてのドキュメントを書くためのものです。
</para>
	</listitem>
	<listitem>
	  <para><ulink url="http://www.linuxdoc.org/">LinuxDoc</ulink>
	  は、たとえば Linux HOWTO のような Linux Documentation Project によって使われています。 LDP は DocBook に切り替えることを決定しましたが、転換は実行されていません。</para>
	</listitem>
	<listitem>
	  <para><ulink url="http://www.debian.org/~elphick/ddp/manuals.html#doc">DebianDoc</ulink> は
	    <ulink url="http://www.debian.org/~elphick/ddp/">Debian Documentation Project</ulink> によって一部で使われます。</para>
	</listitem>
	<listitem>
	  <para><ulink url="http://www.w3.org/MarkUp/">HTML</ulink> は理論的に SGML DTD ですが、実際には、従っている Web ページは 非常に少数です。そのため、ほとんどの SGML ツールは典型的な Web ページを受け入れないでしょう。
</para>
	</listitem>
      </itemizedlist>
      <para>ドキュメントの最初の部分で、あなたは使う DTD への参照 (そのような参照を示すためのいくつかのやり方があります; 次の例は LinuxDoc 用です) を見いだすでしょう:
</para>
	<programlisting role="linuxdoc">
<![CDATA[
<!doctype linuxdoc system>

<article>

<title>The Linux Kernel HOWTO
]]>
	</programlisting>
      <comment>TODO: FPI 、 PUBLIC 、それに SYSTEM、などなどについて言及。</comment>
    </sect2>

    <sect2>
      <title>どの DTD を選ぶか?</title>
      <para>たいてい、あなたは選択の余地はないでしょう: あなたが属するプロジェクトはすでに選んでいるでしょう。大きなプロジェクトでは標準化はもちろん非常に重要なので、あなたがそれを変更することができる機会はわずかでしょう。たとえば、 Linux Documentation Project は LinuxDoc を使い、 <ulink
      url="http://www.freebsd.org/docproj/docproj.html">FreeBSD</ulink> 、
      <ulink url="http://developer.gnome.org/arch/doc/tools.html">GNOME</ulink> あるいは <ulink
      url="http://www.kde.org/documentation/index.html">KDE</ulink> は DocBook を使います、などなど。</para>
      <para>もしあなたが選択権を持つなら、私は似たプロジェクトが行っているものに合わせることを提案します。もしあなたがコンピュータのハードウェアやソフトウェアについての技術ドキュメントを書くのなら、これはたぶん DocBook を使うことを意味するでしょう。</para>
    </sect2>

    <sect2>
      <title>私は SGML をどのように書くのか?</title>
      <para>SGML はマークアップ言語なので、あなたは <application>vi</application> やさらには <application>cat</application> のようなどのエディタを使ってもかまいません。
</para>
      <para>しかし、タグの挿入、知識 - たとえば妥当であること、といったあなたを援助するエディタを使うほうがしばしばより簡単です。私は<application>Emacs</application> とその <link linkend="psgml">SGML mode</link> を推奨します。
</para>
    </sect2>

    <sect2 id="xml">
      <title>XML とは何か?</title>
      <para>XML (Extensible Markup Language (拡張可能マークアップ言語) ) は SGML のサブセットで、 SGML-- の一種です。最初に World-Wide Web のために設計されましたが、無関係の分野でも現在使われています。</para>
      <para>XML は SGML よりもずっとシンプルで、オプションは少なく、そのためにパーサはより軽くより高速です。</para>
    </sect2>

    <sect2>
      <title>スタイルシートとは何か?</title>
      <para>マークアップの世界において、あなたは体裁からコンテンツを分割するために努めます。コンテンツは SGML ドキュメントで明示され、与えられた DTD に従います。体裁はドキュメントの外側で明示され、一般的には DTD 固有で、適切な言語 (<ulink
      url="http://www.jclark.com/dsssl/">DSSSL
	</ulink> - Document Style Semantics and
      Specification Language - が最も一般的です<footnote><para>
      XML の世界では、現時点ではいくつかの実装を持つ新しい言語 <ulink
      url="http://www.w3.org/Style/XSL/">XSL</ulink> が作られています<phrase debianversionmax="2.1">
      (Debian 2.2 の前にはありません)</phrase>。
      あなたが実行サマリで読めるものにかかわらず、 XML ファイルを表現するために DSSSL を使うことは完璧に受容できます。
</para></footnote>) によって著述された、確かな DTD で書かれたドキュメント用のレイアウトルールのスタイルシートです。
</para>
      <para>たとえば、タイトルはボールドで表現、 URL は赤で印刷、などといったことを決めるのは、スタイルシートの著者です。</para>
      <para>もしあなたが <ulink url="http://www.w3.org/Style/css/">
	  CSS</ulink> (Cascading
      Style Sheets) 言語を知っているのであれば、 SGML スタイルシートの形式言語はより混み入っていることを注意しておきます: それらはエレメントの表現を指定するだけでなく、エレメントの整理、いくつかのエレメントからのデータの計算などもまた許可します。 DSSSL は、たとえばスタイルシートを構成するための豊富な full blowin プログラミング言語 (Scheme がベース) です。</para>
    </sect2>

  </sect1>

  <sect1>
    <title>DocBook でドキュメントを作成</title>
    <para>ここでは、私たちは DocBook DTD を使ってドキュメントをどのように書き、処理するかを理解します。私が XML <footnote><para>さらに DocBook の将来のバージョンは <ulink url="http://www.oasis-open.org/docbook/meetings/min19990308.html">XML</ulink> だからでもあります。</para></footnote> を好むので、私たちはしばしば DocBk と名付けられた XML バージョンを使いますが、ここに書かれたことのほとんどは SGML バージョンにも同様に応用できます。
</para>
    <para debianversionmax="2.1">2.2 'potato' よりも前の Debian システムでそれを使うためには、 <debianpackage>docbook-xml</debianpackage> が必要です。 'slink' システムに正常にインストールでき、何も破壊しません(単に DTD で、特有のライブラリに依存しません) 。
</para>
    <sect2>
      <title>DocBook を書く</title>
      <para>もし DocBook ファイルを受け取っていてそれを編集するよりむしろ処理したいのであれば、あなたはこの節を飛ばせます。</para>
      <para>あらゆる DTD に似て、私は DocBook を書くのに &psgml; を推奨します。</para>
<para>最初に、最もシンプルで望ましい <sgmltag>article</sgmltag> をルートエレメントを選択します。次のように開始します:
</para>
	<programlisting role="docbook">
<![CDATA[
<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//Norman Walsh//DTD DocBk XML V3.1//EN"
     "dtd/docbook-xml/docbookx.dtd">
<article>
  <artheader>
    <title>My first XML document</title>
  </artheader>
  <section>
    <title>My first section</title>
    <para>My first paragraph.</para>
  </section>
</article>
]]>
	</programlisting>
<para>これは完全な DocBook ドキュメントです。あなたは<link linkend="nsgmls">それの妥当性確認</link>ができます。
</para>
<para>典型的な DocBook ドキュメントは book 、 chapter 、あるいは article をルートエレメントとして使います。さらに、それらはドキュメントのタイトルのようなメタ情報を見い出せるヘッダを含みます。このヘッダのあとに、 DocBook ドキュメントはそれぞれがタイトルを持つ節に分割されます。
<comment>もっと詳細にするのがよいだろう。</comment>
</para>
<para>エレメントの完全な一覧を知るためには、
	<debiandoc text="the set of DocBook texts">docbook-doc</debiandoc> 、 さらに特別には
	<debiandoc file="r2333.html" text="DocBook DTD Reference">docbook-doc</debiandoc> を参照してください。</para>
    </sect2>

    <sect2>
      <title>DocBook ドキュメントの処理</title>
      <para>思い出してください。 DocBook はプログラムではなく、フォーマットです。 "DocBook は PDF 出力を持っていますか?" という質問は無意味です。 DocBook を使うソフトウェアは PDF を製作できるでしょう。 DocBook それ自身は何もありません。
</para>
      <para>DocBook ドキュメントから印刷された紙、 Web ページやマニュアルページを製作するためにはいくつかの異なる解決があります。あなたは、 Perl モジュール XML::Parser や Java モジュール XP のようなツールを使って、変換のようなことをあなた自身でプログラムできます。あるいは、あなた自身が書いてもよくまた書かなくてもよいスタイルシートを使えます。もしあなたがそれらを書かないことを決めたら、 &jade; と共に &modular_ss; を使うことができます。</para>
      <para>私たちは DocBook の XML バージョンを使っているので、 <filename>myfile.db</filename> を TeX に変換するために &jade; を呼び出す方法は次のとおりです:
</para>
	<programlisting role="shell">
	jade -t tex \ 
                -d &print_ss; \
                &xml_decl; myfile.db
	</programlisting>
	  <para>&jadetex; マクロと 処理に必要となる &jadetex; プログラムを使って TeX ファイルを製作します:</para>
      <programlisting role="shell">
	jadetex myfile.tex
      </programlisting>
      <para>HTML のためには:</para>
	<programlisting role="shell">
	jade -t sgml \ 
                -d &html_ss; \
                &xml_decl; myfile.db
	</programlisting>
	<para>不運にも、 DocBook ファイルからテキストだけの出力、たとえば Usenet に投稿するためのテキストを作る簡単な方法はありません。最も役に立つ解決は、次のように <application>lynx</application> と共にごちゃごちゃとやることです。:</para>
      <programlisting role="shell">
	jade -t sgml -V nochunks \
                 -d &html_ss; \
                 &xml_decl; myfile.db > dump.html
	lynx -force_html -dump dump.html > myfile.txt
      </programlisting>
      	<sect3 debianversionmin="2.2"><title>SGMLtools の使用</title>
	<para>あなたは &sgmltools2; もまた使うことができます。これはよりシンプルで、 &sgmltools2; は jade 、 jadetex 、それに lynx によって実行されるタスクを自動化します。しかし、 DocBook の XML バージョンでは動作<emphasis>しません</emphasis>。ファイルを HTML に変換するためには:
</para>
	    <programlisting role="shell">
	  sgmltools --backend=ps howto.db
	    </programlisting>
	    <para>PostScriptのためには:</para>
	    <programlisting role="shell">
	  sgmltools --backend=ps howto.db
	    </programlisting>
	    <para>純粋なテキストのためには:</para>
	    <programlisting role="shell">
	  sgmltools --backend=txt howto.db
	    </programlisting>
	  </sect3>
      <sect3><title><application>make</application> による自動化</title>
		<para>DocBook から複雑なすべてへの変換に必要な操作には、 <application>make</application> の利用を推奨します。
	    <filename>Makefile</filename> の例は次のとおりです:</para>
      <programlisting role="makefile">
<![CDATA[
MAX_TEX_RECURSION=4
XML_DECL=/usr/lib/sgml/declaration/xml.decl
HTML_SS=/usr/lib/sgml/stylesheet/dsssl/docbook/nwalsh/html/docbook.dsl
PRINT_SS=/usr/lib/sgml/stylesheet/dsssl/docbook/nwalsh/print/docbook.dsl

all: myfile

myfile: myfile.ps myfile.txt myfile.html

myfile.tex: myfile.db 
	jade -t tex \
		-d $(PRINT_SS) \
		$(XML_DECL) $<

myfile.dvi: myfile.tex
	# Trick from Adam Di Carlo <adam@onshore.com> to recurse jadetex 
	# "just enough".
	-cp -pf prior.aux pprior.aux
	-cp -pf $(shell basename $< .tex).aux prior.aux
	jadetex $<
	if ! cmp $(shell basename $< .tex).aux prior.aux &&		\
	   ! cmp $(shell basename $< .tex).aux pprior.aux &&		\
	   expr $(MAKELEVEL) '<' $(MAX_TEX_RECURSION); then		\
		rm -f $@						;\
		$(MAKE) $@						;\
	fi
	rm -f prior.aux pprior.aux

myfile.ps: myfile.dvi
	dvips -f $< > $@

myfile.html: myfile.db html.dsl
	jade -t sgml \
		-d $(HTML_SS) \
		$(XML_DECL) $< 

myfile.txt: myfile.db
	jade -t sgml -V nochunks \
		-d $(HTML_SS) \
	$(XML_DECL) $< > dump.html
	lynx -force_html -dump dump.html > $@
	-rm -f dump.html

validate:
	nsgmls -s -wxml $(XML_DECL) myfile.db

clean: 
	rm -f *.html *.aux *.log *.dvi *.ps *.tex *.txt
]]>
      </programlisting>
	</sect3>
	<sect3 debianversionmin="2.2"><title>Misc</title>
	<comment>TODO: さまざまな言語による局所化。</comment>
		<para>DocBook を man ページやその他のフォーマットに変換するためには、 <debianpackage name="docbook2X"
		refserver="http://shell.ipoline.com/~elmert/hacks/docbook2X/">docbook2man</debianpackage>
		および <debianpackage>docbook-to-man-ans</debianpackage> を参照してください。
</para>
	</sect3>
      <sect3>
	<title>モジュール DocBook スタイルシートのカスタマイズ</title>
	<para>もしあなたが<link linkend="customdb">カスタムエレメントを書</link>いたり、デフォルトのエレメントの表現を変更したかったり、単に少しだけ出力をカスタマイズしたかったり (デフォルトのフォントを変更するなど) ということなら、カスタムスタイルシートを定義する必要があるでしょう。これはすべてを再度打ち直すことを意味しません。 DSSSL は1つのスタイルシートをもう1つで "使う" ことができます。スタイルシートは、それが使っているスタイルシートのプロパティのすべてを継承しますが、ローカルな定義がインポートしているそれよりも優先権を得ます。カスタムスタイルシートの例は次のとおりです:
</para>

	<programlisting role="dsssl">
<![CDATA[

<!DOCTYPE style-sheet PUBLIC "-//James Clark//DTD DSSSL Style Sheet//EN" [
<!ENTITY docbook.dsl 
         PUBLIC "-//Norman Walsh//DOCUMENT DocBook Print Stylesheet//EN"
         CDATA DSSSL>
]>

<style-sheet>
<style-specification use="docbook">
<style-specification-body>

(define %body-font-family% 
  ;; The font family used in body text
  "Palatino")

</style-specification-body>
</style-specification>

<external-specification id="docbook" document="docbook.dsl">

</style-sheet>
]]>
	</programlisting>
	<para>あなたのスタイル指示 (ここではフォントを Palatino に変更) は、 DSSSL で書かれている必要があります。 DSSSL の文法と多くの語義は、それ自身は Lisp の方言であるプログラミング言語 Scheme から来ています。あなたは Scheme について学ぶ必要はありません。 <phrase debianversionmax="2.1"><debiandoc text="documentation of the Modular Stylesheets" file="doc/custom.html">docbook-stylesheets</debiandoc></phrase><phrase debianversionmin="2.2"><debiandoc text="documentation of the Modular Stylesheets" file="custom.html">docbook-stylesheets-doc</debiandoc></phrase>
	はたくさんの用途例を含んでいます。</para>
<para>1つは印刷用で、もう1つは HTML 用の2つのスタイルシートが実際にあります。上のカスタムスタイルシートは最初の1つのほうだけで動きます。2つめのために、例を次に挙げます:</para>
	<programlisting role="dsssl">
<![CDATA[
<!DOCTYPE style-sheet PUBLIC "-//James Clark//DTD DSSSL Style Sheet//EN" [
<!ENTITY docbook.dsl PUBLIC "-//Norman Walsh//DOCUMENT DocBook HTML Stylesheet//EN" CDATA dsssl>
]>
<style-sheet>

<style-specification id="html" use="docbook">
<style-specification-body> 

(define %generate-article-titlepage% #t)

</style-specification-body>
</style-specification>

<external-specification id="docbook" document="docbook.dsl">

</style-sheet>
]]>
	  </programlisting>
	<para>双方のケースで、あなたは使うスタイルシートを Jade に教える必要があります。ここでは <filename>myprint.dsl</filename> です:</para>
	<programlisting role="shell">
	jade -t tex \ 
                -d myprint.dsl \
                &xml_decl; myfile.db
	</programlisting>

      </sect3>
      <sect3 id="customdb"><title>DocBook DTD のカスタマイズ</title>
	<para>
	  DocBook はカスタマイズできるようになっています。たくさんのやり方<footnote><para>DTD のコピーとその編集を含みます。しかし、私は、 DocBook の今後のバージョンで多すぎる問題を作ることなしに DTD を変更する `クリーン' なやり方に言及していました。</para></footnote>がありますが、注意してください: カスタマイズはドキュメントをその他と交換するときに問題を導くことがあります。 <debiandoc
	  text="Customizer's Guide for the DocBook DTD" file="book68527.html">docbook-doc</debiandoc> を参照してください。
	</para>
	    <para>もしあなたが新しいエレメントを追加したら、たぶんスタイルシートも同様にカスタマイズして作らなければならないでしょう。</para>
	    <comment>
	      カスタマイズの例を挙げる。
	    </comment>
      </sect3>
    </sect2>
    
  </sect1>
  
  <sect1>
    <title>LinuxDoc によるドキュメントの作成</title>
    <para>LinuxDoc DTD を使ってドキュメントを書き、処理してみましょう。</para>
    <sect2>
      <title>LinuxDoc を書く</title>
      <para>もし LinuxDoc ファイル (たとえば <ulink
      url="http://metalab.unc.edu/pub/Linux/docs/HOWTO/other-formats/sgml/">
	  LinuxDoc サーバー</ulink>で見つけられるような Linux HOWTO の1つ) をちょうど受け取っているなら、あなたはこの節を飛ばせます。
</para>
      <para>あなたは LinuxDoc ドキュメントを &psgml; を使って書くことができます。次のものは、サンプルの例です:</para>
      <programlisting role="linuxdoc">
<![CDATA[
<!doctype linuxdoc system>
<article>

<title>Quick SGML Example
<author>Matt Welsh, <tt>mdw@cs.cornell.edu</tt>
<date>v1.0, 28 March 1994
<abstract>
This document is a brief example using the Linuxdoc-SGML DTD.
</abstract>

<sect>Introduction

<p>
This is an SGML example file using the Linuxdoc-SGML DTD.

</article>
]]>
	</programlisting>
      <para>LinuxDoc ドキュメントのより複雑な例は、 <debiandoc file="example.sgml.gz">sgml-tools</debiandoc> です。</para>
      <para>合法のエレメントの一覧を学ぶためには、 <debiandoc
      file="html/guide.html.gz">sgml-tools</debiandoc><phrase
      debianversionmax="2.2"> (現在のものはバギーです: HTML ファイルは圧縮されており、あなたのブラウザに損害を与えるでしょう) </phrase><comment>TODO 動いているかな? HTML ファイルが gzip されるように見える :-( バグ報告に記入しよう。</comment> あるいは <ulink
	    url="http://www.sgmltools.org/guide/guide.html">Matt Welsh's guide</ulink> を参照してください。</para>
      </sect2>
    <sect2>
      <title>LinuxDoc の処理</title>
      <para>あなたは &sgmltools1; を使うことになります。 LinuxDoc ドキュメントを HTML に変換するためには:
</para>
      <programlisting role="shell">
	sgml2html document.sgml
      </programlisting>
      <para>通常のテキスト、たとえば News にそれを投稿するためには:</para>
       <programlisting role="shell">
	sgml2txt  document.sgml
      </programlisting>
      <para>LaTeX を使って PostScript にするためには:</para>
            <programlisting role="shell">
	sgml2latex --output=ps document.sgml
      </programlisting>
      <comment>
	拡張子は .sgml でなければならないか、 sgml-tools では不適当。
	things.
      </comment >
      <para>あなたはさらなる情報を <phrase
      debianversionmax="2.1">sgmltools(1)</phrase><phrase debianversionmin="2.2">sgmltools.v1(1)</phrase> で得られます。</para>
      <comment>TODO: さまざまな言語での局所化。</comment>
      </sect2>

  </sect1>

  <sect1>
    <title>DebianDoc によるドキュメントの作成</title>
    <para>ここでは、私たちは、 DebianDoc DTD を使ってドキュメントをどうやって書き、処理するか理解するでしょう。
</para>
    <sect2><title>DebianDoc ドキュメントを書く</title>
      <para>次のものは、 DebianDoc ドキュメントのサンプルです:</para>
      <programlisting role="debiandoc">
<![CDATA[
<!doctype debiandoc public "-//DebianDoc//DTD DebianDoc//EN">

<debiandoc>
  <book>
    <titlepag>
      <title>FooBar</title>
      <author>
	<name>Bortzmeyer</name>
	<email>bortzmeyer@debian.org</email>
      </author>
    </titlepag>
    <chapt>
      <heading>Title</heading>
      <p>Content</p>
    </chapt>
  </book>
</debiandoc>
]]>
      </programlisting>
      <para>合法なタグの一覧を知るためには、 <phrase
debianversionmax="2.1">
<debiandoc
file="debiandoc-sgml.html/index.html">debiandoc-sgml</debiandoc>
</phrase>
<phrase debianversionmin="2.2"><debiandoc
file="debiandoc-sgml.html/index.html">debiandoc-sgml-doc</debiandoc>
<comment>Bug #47300</comment></phrase> を参照してください。</para>
    </sect2>
    <sect2><title>DebianDoc ドキュメントの処理</title>
      <para>
	PostScript に変換するために:      
      </para>
      <programlisting role="shell">
	 debiandoc2ps -1 myfile.dd
      </programlisting>
      <para>HTML に変換するために:</para>
    <programlisting role="shell">
	 debiandoc2html myfile.dd
      </programlisting>
      </sect2>
    
  </sect1>

  <sect1>
    <title>ツール</title>
    <para>この節は、まだタスク指向ではありませんが、あなたが SGML を書き、処理するのに使えるソフトウェアについてです。
</para>
    <para debianversionmin="2.2">これらすべてのツールを取得する最もシンプルなやり方は、 <debianpackage>task-sgml</debianpackage> をインストールすることです。
</para>
    <para debianversionmax="2.1">これらすべてのツールを取得するためには、いくつかのパッケージをインストールする必要があるでしょう。次に挙げるのはそうするための <application>apt</application> コマンドです<footnote><para>当然、提供する前に <application>apt</application> が正しく設定されていなければなりません。</para></footnote>:
	<programlisting role="shell">
	  apt-get install docbook docbook-doc sp jade \
	    docbook-stylesheets jadetex debiandoc-sgml \
            psgml 
	</programlisting>
      </para>
    <sect2 id="psgml">
      <title><debianpackage name="psgml" refserver="http://www.lysator.liu.se/projects/about_psgml.html">PSGML</debianpackage></title>
      <para>Emacs 用の優れた SGML モード。使えるたくさんの機能の中から:
</para>
      <itemizedlist>
	<listitem><para>どのタグがそのポイントで有効かをあなたに見せます。
</para>
	</listitem>
	<listitem><para>有効なタグ (これはあなたが新しい複雑な DTD を使いはじめるときには、すばらしく有用) だけを示すメニューからタグを挿入 (開始と終了、そのあいだの必須タグはもちろん) します。
</para>
	</listitem>
	<listitem><para>SGML エレメントの操作、エレメントに従った移動など。
</para>
	</listitem>
      </itemizedlist>
      <para>そのドキュメントは<debiandoc file="psgml_toc.html">psgml</debiandoc> の中にあります。</para>
      <para>
        いくつかのオプションのセットアップをあなたの <filename>~/.emacs</filename> に持たせることで、あなたの psgml の利用が簡単になります。ここにいくつかのサンプルを挙げます:
</para>
	<programlisting role="emacs-lisp">
<![CDATA[
	  (autoload 'xml-mode "psgml" "Major mode to edit XML files." t )
	  
          (setq
               auto-mode-alist (append '(
                           ;; DocBook-XML
                           ("\\.db" . xml-mode)
			   )
                         auto-mode-alist))

          (add-hook 'sgml-mode-hook 'turn-on-auto-fill)
          (setq sgml-custom-dtd '(
            ( "HTML 4.0 Strict"
              "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\"
              \"dtd/html-4.0s.dtd\">" )
            ( "HTML 4.0 Blaireau"
              "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML Transitional 4.0//EN\"
              \"dtd/html-4.0-loose.dtd\">" )
            ( "DocBook 3.1 XML Article"
               "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>
               <!DOCTYPE article PUBLIC \"-//Norman Walsh//DTD DocBk XML V3.1//EN\"
               \"dtd/docbook-xml/docbookx.dtd\">" )
          ))
          (setq sgml-insert-missing-element-comment nil)
]]>
	</programlisting>
	<para>多くの有用な psgml コマンドの中から:
	<itemizedlist>
	  <listitem><para>C-c C-t :
<command>sgml-list-valid-tags</command>
はあなたに DTD を気付かせます (あるいは教示します) 。 DocBook のような怪物と遊びはじめるには、非常に便利です。
</para>
	  </listitem>
	  <listitem><para><command>sgml-insert-element</command>。再び、 DTD を学ぶための重要なやり方です。
</para>
	  </listitem>
	</itemizedlist>
</para>
    </sect2>
    <sect2 id="nsgmls">
      <title><debianpackage name="sp" refserver="http://www.jclark.com/sp/nsgmls.htm">nsgmls</debianpackage></title>
      <para>たとえば SGML ドキュメントの妥当性検証に使える SGML ツールです。典型的な使い方はドキュメントの妥当性のチェックです:</para>
      <programlisting role="shell">
	nsgmls -s file.sgml
      </programlisting>
      <para>これはファイル <filename>file.sgml</filename> のコンテンツがファイルのヘッダで示される DTD を守っているかどうかをチェックします。
</para>
      <para>もし XML ドキュメントを書くのなら、2つの nsgmls のオプションが必要です:
</para>
      <programlisting role="shell">
	nsgmls -s -wxml &xml_decl; file.sgml
      </programlisting>
	<para><debiandoc
	file="nsgmls.htm">sp</debiandoc> というものがあります。 nsgmls は sp パッケージの一部です。 sp の <debiandoc file="index.htm">sp</debiandoc> も有用でしょう。
</para>
    </sect2>
    <sect2 id="rxp" debianversionmin="2.2">
      <title><debianpackage>rxp</debianpackage></title>
      <para>純粋な XML ツールです; たとえば、 XML ドキュメントの妥当性検証に使えます。
</para>
      </sect2>
    <sect2 id="jade">
      <title><debianpackage
      refserver="http://www.jclark.com/jade/">jade</debianpackage></title>
      <comment>TODO: 私たちは OpenJade に言及すべきだ! http://jade-cvs.avionitek.com/</comment>
      <para>jade は DSSSL プロセッサです。 SGML ファイルと DSSSL 言語で書かれたスタイルシートを受け、 TeX (PostScript が生成できる) 、 RTF 、 HTML フォーマットの出力を提供します。 <application>groff</application> のバックエンドを何も持っていないので、 ASCII フォーマットの提供は障害となります。 <application>TeX</application> バックエンドは &jadetex; ファイルを提供します。
</para>
      <para>ドキュメントはまだクリアではありませんが、少なくともさまざまなオプションは挙げられます。 <debiandoc file="jade.htm">jade</debiandoc> を参照してください。</para>
      <para>定型の使い方:</para>
      <programlisting role="shell">
	jade -t 使用するバックエンド -d スタイルシート名 入力ファイル
      </programlisting>
    </sect2>
    <sect2 id="jadetex">
	<title><debianpackage>jadetex</debianpackage></title>
		<comment>http://www.tug.org/applications/jadetex/"</comment>
      <para>jade の出力を処理するための <application>TeX</application> マクロのセットです。ドキュメントは貧弱で、カスタマイズは複雑です。すべての TeX マクロに似て、特に参照を解決するために、数回実行する必要があります。
</para>
    </sect2>
    <sect2 id="sgmltools2" debianversionmin="2.2">
      <title><debianpackage name="sgmltoolsv2" refserver="http://www.sgmltools.org/">SGMLtools</debianpackage></title>
      <para>SGMLtools は2つのバージョン、1と2が存在します。 SGMLtools はバージョン2です。
</para>
      <para>LinuxDoc を処理する sgml-tools のバージョン1と異なり、SGMLtools のバージョン2 は DocBook ドキュメントを扱います。あなたは &jade; を直接呼び出せばすべてできますが、 SGMLtools を使うほうがよりシンプルでしょう。
</para>
    </sect2>
    <sect2 id="sgmltools1">
	<title><debianpackage name="sgml-tools"
	refserver="http://www.sgmltools.org/download-1.0.html">sgml-tools,
	version 1</debianpackage></title>
      <para>
	  <footnote debianversionmin="2.2"><para>大文字化していることに気付きましたか?</para></footnote>
	このバージョンは公式には無効で理論的にはもうどこにもないものです。しかし、実際問題として、 Linux Documentation Project の LinuxDoc から DocBook DTD への移行はまだ起きていないので、 sgml-tools version 1 はまだ必要です。
</para>
      </sect2>
    <sect2 id="modularss">
      <title><debianpackage name="docbook-stylesheets"
			    refserver="http://www.nwalsh.com/docbook/dsssl/index.html"> 
	  Norman Walsh の "DocBook Modular Stylesheets"</debianpackage></title>
      <para>これらは DSSSL スタイルシート (新しい XSL バージョン入り) のセットです。あなたは DocBook ドキュメントを処理するために、 &jade; のようななんらかの DSSSL ツールをこれらと共に使うことができます。
</para>
    </sect2>
  </sect1>

  <sect1 id="references">
    <title>参照</title>
    <itemizedlist>
      <listitem>
	<para>SGML 一般</para>
	<itemizedlist>
	  <listitem>
	    <para><ulink
			 url="http://www.oasis-open.org/cover/">Cover's
		page</ulink></para>
	  </listitem>
	  <listitem>
	    <para>TEI の人々による <ulink
			 url="http://www-tei.uic.edu/orgs/tei/sgml/teip3sg/index.html">
		A Gentle Introduction to SGML</ulink> 。 私見を言えば、実践的というわけではありません。<comment>TODO: もう1度読みなさい、 Sam。</comment>
	    </para>
	  </listitem>
	</itemizedlist>
      </listitem>
      <listitem>
	<para>XML 一般</para>
	<itemizedlist>
	  <listitem>
	    <para><ulink
	    url="http://www.w3.org/XML/">Official XML</ulink></para>
	  </listitem>
	  <listitem>
	    <para><ulink
	    url="http://www.oasis-open.org/cover/xml.html">Cover's XML
	    page</ulink></para>
	  </listitem>
	  <listitem>
	    <para><ulink
	    url="http://www.ucc.ie/xml/">XML FAQ</ulink></para>
	  </listitem>
	</itemizedlist>
      </listitem>
      <listitem>
	<para>DocBook</para>
	<itemizedlist>
	  <listitem>
	<para><ulink url="http://www.oasis-open.org/docbook/">Official
	DocBook</ulink></para>
	  </listitem>
	  <listitem>
	    <para><debiandoc file="index.html">docbook-doc</debiandoc></para>
	  </listitem>
<listitem>
<para><ulink url="http://www.nwalsh.com/docbook/dsssl/">
Modular DocBook Stylesheets</ulink></para>
</listitem>
<listitem>
<para><ulink url="http://www.freebsd.org/tutorials/docproj-primer/">
FreeBSD Documentation Project Primer</ulink> は SGML と DocBook のよい導入部です。
</para>
</listitem>
	  <listitem>
	    <para><ulink
			 url="http://www.nwalsh.com/docbook/simple/sdocbook/">
		Simplified DocBook</ulink> はより少ないエレメントにして学びやすくした DocBook のバージョンです。</para>
	  </listitem>
	</itemizedlist>
      </listitem>
      <listitem>
	<para>LinuxDoc</para>
	<itemizedlist>
	  <listitem>
	    <para><ulink
	    url="http://www.sgmltools.org/guide/guide.html">Matt
	    Welsh's SGML-Tools User's Guide</ulink></para>
	  </listitem>
	</itemizedlist>
      </listitem>
      <listitem id="otheros">
	<para>その他のオペレーティングシステム: この節は、 Debian 以外のオペレーティングシステム用に、この HOWTO に似た (<emphasis>実践的</emphasis>なドキュメントという意味です) ドキュメントを一覧します。
</para>
	<itemizedlist>
	  <listitem>
	    <para><ulink
	    url="http://ourworld.compuserve.com/homepages/hoenicka_markus/ntsgml.html">Microsoft
	    Windows NT</ulink></para>
	  </listitem>
	  <listitem>
	    <para>RedHat の DocBook ユーザーはたぶん <ulink url="http://sourceware.cygnus.com/docbook-tools/">Cygnus tools</ulink> を見るべきでしょう。
</para>
	    </listitem>
	</itemizedlist>
      </listitem>
    </itemizedlist>
    <bibliography>
      <title>興味深い書籍</title>
      <biblioentry>
	  <citetitle><ulink url="http://www.snee.com/bob/sgmlfree/">SGML CD</ulink></citetitle>
	  <author>
	    <surname>DuCHARME</surname>
	    <firstname>Bob</firstname>
	  </author>
	  <editor>
	    <surname>Prentice-Hall</surname>
	  </editor>
	  <isbn>0-13-475740-8</isbn>
	  <abstract>
	    <para>Unix や Windows NT 上で SGML を書き処理するために必要なツールについての、非常によい実践的な書籍です。 XML はカバーしていません。非常によい &psgml; についての章と <ulink url="http://www.snee.com/bob/sgmlfree/emcspsgm.html">PSGML トリック</ulink>の適切なページがあります。
</para>
	  </abstract>
      </biblioentry>
      <biblioentry>
	   <citetitle>DocBook: <ulink url="http://www.docbook.org/">The Definitive Guide</ulink></citetitle>
	  <author>
	    <surname>Walsh</surname>
	    <firstname>Norman</firstname>
	  </author>
	  <author>
	    <surname>Muellner</surname>
	    <firstname>Leonard</firstname>
	  </author>
	  <editor>
	    <surname>O'Reilly</surname>
	  </editor>
	  <isbn>1-56592-580-7</isbn>
	  <abstract>
	    <para>私はまだ読んでいません。本のすべてはオンラインにもあります。</para>
	  </abstract>
	</biblioentry>
    </bibliography>
  </sect1>
</article>




