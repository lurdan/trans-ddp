<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % shareddata   SYSTEM "../release-notes.ent" > %shareddata;
]>

<chapter id="ch-upgrading" lang="en">
<title>Upgrades from Debian &oldrelease; (&oldreleasename;)</title>
<section id="backup">
<title>Preparing for the upgrade</title>
<para>
We suggest that before upgrading you also read the information in <xref
linkend="ch-information"/>.  That chapter covers potential issues which are not directly
related to the upgrade process but could still be important to know about
before you begin.
</para>
<section id="data-backup">
<title>Back up any data or configuration information</title>
<para>
Before upgrading your system, it is strongly recommended that you make a full
backup, or at least back up any data or configuration information you can't
afford to lose.  The upgrade tools and process are quite reliable, but a
hardware failure in the middle of an upgrade could result in a severely damaged
system.
</para>
<para>
The main things you'll want to back up are the contents of
<filename>/etc</filename>, <filename>/var/lib/dpkg</filename>,
<filename>/var/lib/apt/extended_states</filename> and the output of
<literal>dpkg --get-selections "*"</literal> (the quotes are important).  If
you use <command>aptitude</command> to manage packages on your system, you
will also want to back up <filename>/var/lib/aptitude/pkgstates</filename>.
</para>
<para>
The upgrade process itself does not modify anything in the
<filename>/home</filename> directory.  However, some applications (e.g.  parts
of the Mozilla suite, and the GNOME and KDE desktop environments) are known to
overwrite existing user settings with new defaults when a new version of the
application is first started by a user.  As a precaution, you may want to make
a backup of the hidden files and directories (<quote>dotfiles</quote>) in users' home
directories.  This backup may help to restore or recreate the old settings.
You may also want to inform users about this.
</para>
<para>
Any package installation operation must be run with superuser privileges, so
either log in as <literal>root</literal> or use <command>su</command> or <command>sudo</command> to
gain the necessary access rights.
</para>
<para>
The upgrade has a few preconditions; you should check them before actually
executing the upgrade.
</para>

</section>

<section id="inform-users">
<title>Inform users in advance</title>
<para>
It's wise to inform all users in advance of any upgrades you're planning,
although users accessing your system via an <command>ssh</command> connection
should notice little during the upgrade, and should be able to continue
working. 
</para>
<para>
If you wish to take extra precautions, back up or unmount the
<filename>/home</filename> partition before upgrading.
</para>
<para>
You will have to do a kernel upgrade when upgrading to &releasename;, so a
reboot will be necessary. 
Typically, this will be done after the upgrade is finished.
</para>
</section>

<!-- Based on information/complains from upgrade-reports, such as #602797 -->
<section id="services-downtime">
<title>Prepare for downtime on services</title>

<para>
There might be services that are offered by the system which are associated with packages
that will be included in the upgrade. If this is the case, please note that,
during the upgrade, these services will be stopped while their associated packages 
are being replaced and configured. During this time, these services will not be
available.
</para>

<para>
The precise downtime for these services will vary depending on the number of
packages being upgraded in the system, and it also includes the time the system
administrator spends answering any configuration questions from package
upgrades.  Notice that if the upgrade process is left unattended and
the system requests input during the upgrade there is a high
possibility of services being unavailable<footnote><para>If the debconf
priority is set to a very high level you might prevent configuration prompts,
but services that rely on default answers that are not applicable to your
system will fail to start.</para></footnote> for a significant period of time.
</para>

<para>
If the system being upgraded provides critical services for your users or the
network<footnote><para>For example: DNS or DHCP services, especially when
there is no redundancy or failover. In the DHCP case end-users might be disconnected 
from the network if the lease time is lower than the time it takes for the
upgrade process to complete.</para></footnote>, you can reduce the downtime if
you do a minimal system upgrade, as described in <xref
linkend="minimal-upgrade"/>, followed by a kernel upgrade and reboot,
and then upgrade the packages associated with your
critical services. Upgrade these packages  prior to doing the full upgrade
described in <xref linkend="upgrading-full"/>.  This way you can ensure that
these critical services are running and available through the full upgrade
process, and their downtime is reduced.
</para>

</section>

<section id="recovery">
<title>Prepare for recovery</title>
<para>
Although Debian tries to ensure that your system stays bootable at all times,
there is always a chance that you may experience problems
rebooting your system after the upgrade.  Known potential issues are
documented in this and the next chapters of these Release Notes.
</para>
<para>
For this reason it makes sense to ensure that you will be able to recover if
your system should fail to reboot or, for remotely managed systems, fail to
bring up networking.
</para>

<para>
If you are upgrading remotely via an <command>ssh</command> link it is
recommended that you take the necessary precautions to be able to access the
server through a remote serial terminal.  There is a chance that, after
upgrading the kernel and rebooting, you will have to fix the system
configuration through a local console.  Also, if the system is rebooted
accidentally in the middle of an upgrade there is a chance you will need to
recover using a local console.
</para>

<!-- FIXME: The next paragraph might not be true for Lenn? -->
<para>
The most obvious thing to try first is to reboot with your old kernel.
However, this is not guaranteed to work.
</para>
<para>
If that fails, you will need an alternative way to boot your system so you can
access and repair it.  One option is to use a special rescue image or a Linux
live CD.  After booting from that, you should be able to mount your root file
system and <literal>chroot</literal> into it to investigate and fix the
problem.
</para>

<!-- FIXME: Consider putting this option first, as it should be the
recommended rescue method -->
<para>
Another option we'd like to recommend is to use the <emphasis>rescue
mode</emphasis> of the &releasename; Debian Installer.  The advantage of using the
installer is that you can choose between its many installation methods to find one
that best suits your situation.  For more information, please consult the
section <quote>Recovering a Broken System</quote> in chapter 8 of the <ulink
url="&url-install-manual;">Installation
Guide</ulink> and the <ulink
url="&url-wiki;DebianInstaller/FAQ">Debian Installer FAQ</ulink>.
</para>
<section id="recovery-initrd">
<title>Debug shell during boot using initrd</title>
<para>
The <systemitem role="package">initramfs-tools</systemitem> package includes a debug
shell<footnote><para> This feature can be disabled by adding the parameter
<literal>panic=0</literal> to your boot parameters.  </para> </footnote> in the
initrds it generates.  If for example the initrd is unable to mount your root
file system, you will be dropped into this debug shell which has basic commands
available to help trace the problem and possibly fix it.
</para>
<para>
Basic things to check are: presence of correct device files in
<filename>/dev</filename>; what modules are loaded (<literal>cat
/proc/modules</literal>); output of <command>dmesg</command> for errors loading
drivers.  The output of <command>dmesg</command> will also show what device
files have been assigned to which disks; you should check that against the
output of <literal>echo $ROOT</literal> to make sure that the root file system
is on the expected device.
</para>
<para>
If you do manage to fix the problem, typing <literal>exit</literal> will quit
the debug shell and continue the boot process at the point it failed.  Of
course you will also need to fix the underlying problem and regenerate the
initrd so the next boot won't fail again.
</para>
</section>

</section>

<section id="upgrade-preparations">
<title>Prepare a safe environment for the upgrade</title>
<para>
The distribution upgrade should be done either locally from a textmode virtual
console (or a directly connected serial terminal), or remotely via an
<command>ssh</command> link. 
</para>
<important>
  <para>
  If you are using some VPN services (such as <systemitem
  role="package">tinc</systemitem>) they might not be available
  throughout the upgrade process. Please see 
  <xref linkend="services-downtime"/>.
  </para>
</important>
<para>
In order to gain extra safety margin when upgrading remotely, we suggest that
you run upgrade processes in the virtual console provided by the
<command>screen</command> program, which enables safe reconnection and ensures
the upgrade process is not interrupted even if the remote connection process
fails.
</para>
<important>
  <para>
    You should <emphasis>not</emphasis> upgrade using <command>telnet</command>,
    <command>rlogin</command>, <command>rsh</command>, or from an X
    session managed by <command>xdm</command>, <command>gdm</command>
    or <command>kdm</command> etc. on the machine you are upgrading.
    That is because each of those services may well be terminated
    during the upgrade, which can result in an
    <emphasis>inaccessible</emphasis> system that is only half-upgraded.
    Use of the GNOME application <command>update-manager</command> is
    <emphasis>strongly discouraged</emphasis> for upgrades to new releases, as
    this tool relies on the desktop session remaining active.
  </para>
</important>

<para arch="armel">
  Users of the watchdog daemon provided by the <systemitem
    role="package">micro-evtd</systemitem> package should stop the daemon and
  disable the watchdog timer before the upgrade, to avoid a spurious reboot in
  the middle of the upgrade process:
  <screen>
# service micro-evtd stop
# /usr/sbin/microapl -a system_set_watchdog off</screen>
</para>

<programlisting condition="fixme">
TODO: surely gdm/kdm are sane?
(vorlon) haha, no, gdm is not; I had that thought, and tested a gdm
         restart on my live session ;)
</programlisting>

</section>

</section>

<section id="system-status">
<title>Checking system status</title>
<para>
The upgrade process described in this chapter has been designed for upgrades
from <quote>pure</quote> &oldreleasename; systems without third-party packages.
For the greatest reliability of the
upgrade process, you may wish to remove third-party packages from your system
before you begin upgrading.
</para>
<para>
Direct upgrades from Debian releases older than &oldrelease; (&oldreleasename;)
are not supported.
Please follow the instructions in the <ulink
url="http://www.debian.org/releases/&oldreleasename;/releasenotes">Release
Notes for &debian; &oldrelease;</ulink> to upgrade to &oldrelease; first.
</para>
<para>
This procedure also assumes your system has been updated to the latest point
release of &oldreleasename;.  If you have not done this or are unsure, follow the
instructions in <xref linkend="old-upgrade"/>.
</para>

<section id="review-actions">
<title>Review actions pending in package manager</title>
<para>
In some cases, the use of <command>apt-get</command> for installing packages
instead of <command>aptitude</command> might make <command>aptitude</command>
consider a package as <quote>unused</quote> and schedule it for removal.  In general, you
should make sure the system is fully up-to-date and <quote>clean</quote> before proceeding
with the upgrade.
</para>
<para>
Because of this you should review if there are any pending actions in the
package manager <command>aptitude</command>.  If a package is scheduled for
removal or update in the package manager, it might negatively impact the
upgrade procedure.  Note that correcting this is only possible if your
<filename>sources.list</filename> still points to <emphasis>&oldreleasename;</emphasis>
and not to <emphasis>stable</emphasis> or <emphasis>&releasename;</emphasis>; see <xref
linkend="old-sources"/>.
</para>
<para>
To perform this review, launch <command>aptitude</command> in <quote>visual mode</quote> and
press <keycap>g</keycap> (<quote>Go</quote>).  If it shows any actions, you should review them and either fix
them or implement the suggested actions.  If no actions are suggested you will
be presented with a message saying <quote>No packages are scheduled to be installed,
removed, or upgraded</quote>.
</para>
</section>

<section id="disable-apt-pinning">
<title>Disabling APT pinning</title>
<para>
If you have configured APT to install certain packages from a distribution
other than stable (e.g.  from testing), you may have to change your APT pinning
configuration (stored in <filename>/etc/apt/preferences</filename> and <filename>/etc/apt/preferences.d/</filename>) to allow
the upgrade of packages to the versions in the new stable release.  Further
information on APT pinning can be found in <citerefentry>
<refentrytitle>apt_preferences</refentrytitle> <manvolnum>5</manvolnum>
</citerefentry>.
</para>
</section>

<section id="package-status">
<title>Checking packages status</title>
<para>
Regardless of the method used for upgrading, it is recommended that you check
the status of all packages first, and verify that all packages are in an
upgradable state.  The following command will show any packages which have a
status of Half-Installed or Failed-Config, and those with any error status.
</para>
<screen>
# dpkg --audit
</screen>
<para>
You could also inspect the state of all packages on your system using
<command>aptitude</command> or with commands such
as
</para>
<screen>
# dpkg -l | pager
</screen>
<para>
or
</para>
<screen>
# dpkg --get-selections "*" &gt; ~/curr-pkgs.txt
</screen>
<para>
It is desirable to remove any holds before upgrading.  If any package that is
essential for the upgrade is on hold, the upgrade will fail.
</para>
<para>
Note that <command>aptitude</command> uses a different method for registering
packages that are on hold than <command>apt-get</command> and
<command>dselect</command>.  You can identify packages on hold for
<command>aptitude</command> with
</para>
<screen>
# aptitude search "~ahold" 
</screen>
<para>
If you want to check which packages you had on hold for
<command>apt-get</command>, you should use
</para>
<screen>
# dpkg --get-selections | grep 'hold$'
</screen>
<para>
If you changed and recompiled a package locally, and didn't rename it or put an
epoch in the version, you must put it on hold to prevent it from being
upgraded.
</para>
<para>
The <quote>hold</quote> package state for <command>apt-get</command> can be changed using:
</para>
<screen>
# echo <replaceable>package_name</replaceable> hold | dpkg --set-selections
</screen>
<para>
Replace <literal>hold</literal> with <literal>install</literal> to unset the
<quote>hold</quote> state.
</para>
<para>
If there is anything you need to fix, it is best to make sure your
<filename>sources.list</filename> still refers to &oldreleasename; as explained in <xref
linkend="old-sources"/>.
</para>
</section>

<section id="proposed-updates">
  <title>The proposed-updates section</title>
  <para>
    If you have listed the <literal>proposed-updates</literal> section
    in your <filename>/etc/apt/sources.list</filename> file, you
    should remove it from that file before attempting to upgrade your
    system.  This is a precaution to reduce the likelihood of
    conflicts.
  </para>
</section>

<!-- FIXME: REVIEW for Squeeze this was written for Lenny - drop? (jfs) -->
<section id="userbackports">
<title>Unofficial sources and backports</title>
<para>
If you have any non-Debian packages on your system, you should be aware that
these may be removed during the upgrade because of conflicting dependencies.
If these packages were installed by adding an extra package archive in your
<filename>/etc/apt/sources.list</filename>, you should check if that archive
also offers packages compiled for &releasename; and change the source line accordingly
at the same time as your source lines for Debian packages.
</para>
<para>
Some users may have unofficial backported <quote>newer</quote> versions of packages that
<emphasis>are</emphasis> in Debian installed on their &oldreleasename; system.  Such
packages are most likely to cause problems during an upgrade as they may result
in file conflicts<footnote><para> Debian's package management system normally
does not allow a package to remove or replace a file owned by another package
unless it has been defined to replace that package.  </para> </footnote>.
<xref linkend="trouble"/> has some information on how to deal with file
conflicts if they should occur.
</para>

</section>

</section>

<section id="upgrade-process">
<title>Preparing sources for APT</title>
<para>
Before starting the upgrade you must set up <systemitem
role="package">apt</systemitem>'s configuration file for package lists,
<filename>/etc/apt/sources.list</filename>.
</para>
<para>
<systemitem role="package">apt</systemitem> will consider all packages that can
be found via any <quote><literal>deb</literal></quote> line, and install the package with the
highest version number, giving priority to the first line in the
file (thus where you have multiple mirror locations, you'd typically first name a local
hard disk, then <acronym>CD-ROM</acronym>s, and then HTTP/FTP mirrors).
</para>

<para>
A release can often be referred to both by its codename (e.g.
<literal>&oldreleasename;</literal>, <literal>&releasename;</literal>) and by
its status name (i.e. <literal>oldstable</literal>, <literal>stable</literal>,
<literal>testing</literal>, <literal>unstable</literal>).  Referring to
a release by its codename has the advantage that you will never be surprised by
a new release and for this reason is the approach taken here.  It does of
course mean that you will have to watch out for release announcements yourself.
If you use the status name instead, you will just see loads of updates for
packages available as soon as a release has happened.
</para>

<section id="network">
<title>Adding APT Internet sources</title>
<para>
The default configuration is set up for installation from the main Debian Internet
servers, but you may wish to modify <filename>/etc/apt/sources.list</filename>
to use other mirrors, preferably a mirror that is closest to you in network terms.
</para>
<para>
Debian HTTP or FTP mirror addresses can be found at <ulink
url="&url-debian-mirrors;"></ulink> (look at the <quote>list of Debian
mirrors</quote> section).  HTTP mirrors are generally speedier than FTP mirrors.
</para>
<para>
For example, suppose your closest Debian mirror is
<literal>&url-debian-mirror-eg;</literal>.  When inspecting that
mirror with a web browser or FTP program, you will notice that the main
directories are organized like this:
</para>
<programlisting>
&url-debian-mirror-eg;/debian/dists/&releasename;/main/binary-&architecture;/...
&url-debian-mirror-eg;/debian/dists/&releasename;/contrib/binary-&architecture;/...
</programlisting>
<para>
To use this mirror with <systemitem role="package">apt</systemitem>, you add this line to your
<filename>sources.list</filename> file:
</para>
<programlisting>deb &url-debian-mirror-eg;/debian &releasename; main contrib</programlisting>
<para>
Note that the `<literal>dists</literal>' is added implicitly, and the arguments
after the release name are used to expand the path into multiple directories.
</para>
<para>
After adding your new sources, disable the previously existing
<quote><literal>deb</literal></quote> lines in <filename>sources.list</filename> by placing a
hash sign (<literal>#</literal>) in front of them.
</para>
</section>

<section id="localmirror">
<title>Adding APT sources for a local mirror</title>
<para>
Instead of using HTTP or FTP package mirrors, you may wish to modify
<filename>/etc/apt/sources.list</filename> to use a mirror on a local disk
(possibly mounted over <acronym>NFS</acronym>).
</para>
<para>
For example, your package mirror may be under
<filename>/var/ftp/debian/</filename>, and have main directories like this:
</para>
<programlisting>
/var/ftp/debian/dists/&releasename;/main/binary-&architecture;/...
/var/ftp/debian/dists/&releasename;/contrib/binary-&architecture;/...
</programlisting>
<para>
To use this with <systemitem role="package">apt</systemitem>, add this line to your
<filename>sources.list</filename> file:
</para>
<programlisting>deb file:/var/ftp/debian &releasename; main contrib</programlisting>
<para>
Note that the `<literal>dists</literal>' is added implicitly, and the arguments
after the release name are used to expand the path into multiple directories.
</para>
<para>
After adding your new sources, disable the previously existing
<quote><literal>deb</literal></quote> lines in <filename>sources.list</filename> by placing a
hash sign (<literal>#</literal>) in front of them.
</para>
</section>

<section id="cdroms">
<title>Adding APT sources from optical media</title>
<para>
If you want to use <emphasis>only</emphasis> CDs (or DVDs or Blu-ray Discs),
comment out the existing
<quote><literal>deb</literal></quote> lines in <filename>/etc/apt/sources.list</filename> by
placing a hash sign (<literal>#</literal>) in front of them.
</para>
<para>
Make sure there is a line in <filename>/etc/fstab</filename> that enables
mounting your CD-ROM drive at the <filename>/cdrom</filename> mount point (the
exact <filename>/cdrom</filename> mount point is required for
<command>apt-cdrom</command>).  For example, if <filename>/dev/scd0</filename>
is your CD-ROM drive, <filename>/etc/fstab</filename> should contain a line
like:
</para>
<programlisting>
/dev/scd0 /cdrom auto noauto,ro 0 0
</programlisting>
<para>
Note that there must be <emphasis>no spaces</emphasis> between the words
<literal>defaults,noauto,ro</literal> in the fourth field.
</para>
<para>
To verify it works, insert a CD and try running
</para>
<screen>
# mount /cdrom    # this will mount the CD to the mount point
# ls -alF /cdrom  # this should show the CD's root directory
# umount /cdrom   # this will unmount the CD
</screen>
<para>
Next, run:
</para>
<screen>
# apt-cdrom add
</screen>
<para>
for each Debian Binary CD-ROM you have, to add the data about each CD to APT's
database.
</para>
</section>

</section>

<section id="upgradingpackages">
<title>Upgrading packages</title>
<para>
The recommended way to upgrade from previous &debian; releases is to
use the package management tool <command>apt-get</command>.  In previous
releases, <command>aptitude</command> was recommended for this purpose, but
recent versions of <command>apt-get</command> provide equivalent
functionality and also have shown to more consistently give the desired
upgrade results.
</para>
<para>
Don't forget to mount all needed partitions (notably the root and
<filename>/usr</filename> partitions) read-write, with a command like:
</para>
<screen>
# mount -o remount,rw /<replaceable>mountpoint</replaceable>
</screen>
<para>
Next you should double-check that the APT source entries (in
<filename>/etc/apt/sources.list</filename>) refer either to
<quote><literal>&releasename;</literal></quote> or to <quote><literal>stable</literal></quote>.  There should not be
any sources entries pointing to &oldreleasename;.
<note>
  <para>
    Source lines for a CD-ROM might sometimes refer to
    <quote><literal>unstable</literal></quote>; although this may be confusing, you
    should <emphasis>not</emphasis> change it.
  </para>
</note>
</para>

<section id="record-session">
<title>Recording the session</title>
<para>
It is strongly recommended that you use the <command>/usr/bin/script</command>
program to record a transcript of the upgrade session.  Then if a problem
occurs, you will have a log of what happened, and if needed, can provide exact
information in a bug report.  To start the recording, type:
</para>
<screen>
# script -t 2&gt;~/upgrade-&releasename;<replaceable>step</replaceable>.time -a ~/upgrade-&releasename;<replaceable>step</replaceable>.script
</screen>
<para>
or similar. If you have to rerun the typescript (e.g. if you have to reboot the
system) use different <replaceable>step</replaceable> values to indicate which
step of the upgrade you are logging. Do not put the typescript file in a
temporary directory such as <filename>/tmp</filename> or
<filename>/var/tmp</filename> (files in those directories may be deleted during
the upgrade or during any restart).
</para>
<para>
The typescript will also allow you to review information that has scrolled
off-screen.  If you are at the system's console, just switch to VT2 (using
<keycombo action='simul'><keycap>Alt</keycap><keycap>F2</keycap></keycombo>)
and, after logging in, use
<literal>less -R ~root/upgrade-&releasename;.script</literal> to view
the file.
</para>
<para>
After you have completed the upgrade, you can stop <command>script</command> by
typing <literal>exit</literal> at the prompt.
</para>

<programlisting condition="fixme">
TODO: (jfs) Could mention the script I provided in #400725 which is useful if
you have not dumped the timing file
</programlisting>

<para>
If you have used the <emphasis>-t</emphasis> switch for
<command>script</command> you can use the <command>scriptreplay</command>
program to replay the whole session:
</para>
<screen>
# scriptreplay ~/upgrade-&releasename;.time ~/upgrade-&releasename;.script
</screen>
</section>

<section id="updating-lists">
<title>Updating the package list</title>
<para>
First the list of available packages for the new release needs to be fetched.
This is done by executing:
</para>
<screen>
# apt-get update
</screen>
</section>

<section id="sufficient-space">
<title>Make sure you have sufficient space for the upgrade</title>
<para>
You have to make sure before upgrading your system that you will have sufficient
hard disk space when you start the full system upgrade described in <xref
linkend="upgrading-full"/>.  First, any package needed for installation that
is fetched from the network is stored in
<filename>/var/cache/apt/archives</filename> (and the
<filename>partial/</filename> subdirectory, during download), so you must make
sure you have enough space on the file system partition that holds
<filename>/var/</filename> to temporarily download the packages that will be
installed in your system.  After the download, you will probably need more
space in other file system partitions in order to both install upgraded
packages (which might contain bigger binaries or more data) and new packages
that will be pulled in for the upgrade.  If your system does not have
sufficient space you might end up with an incomplete upgrade that is
difficult to recover from.
</para>
<para>
<command>apt-get</command> can show you detailed information about the disk
space needed for the installation.  Before executing the upgrade, you can see
this estimate by running:
</para>
<screen>
# apt-get -o APT::Get::Trivial-Only=true dist-upgrade
[ ... ]
XXX upgraded, XXX newly installed, XXX to remove and XXX not upgraded.
Need to get xx.xMB of archives. 
After this operation, AAAMB of additional disk space will be used.
</screen>
<note>
<para>
Running this command at the beginning of the upgrade process
may give an error, for the reasons described in the next sections.  In that
case you will need to wait until you've done the minimal system upgrade as in
<xref linkend="minimal-upgrade"/> before running this command to estimate the
disk space.
</para>
</note>

<para>
If you do not have enough space for the upgrade, <command>apt-get</command>
will warn you with a message like this:
</para>
<screen>
E: You don't have enough free space in /var/cache/apt/archives/.
</screen>

<para>In this situation, make sure you free up space
beforehand.  You can:
</para>
<itemizedlist>
<listitem>
<para>
Remove packages that have been previously downloaded for installation (at
<filename>/var/cache/apt/archives</filename>).  Cleaning up the package cache by
running <command>apt-get clean</command> will remove all previously downloaded
package files.
</para>
</listitem>
<listitem>
<para>
Remove forgotten packages.  If you have
used <command>aptitude</command> or <command>apt-get</command> to manually
install packages in &oldreleasename; it will have kept track of those packages
you manually installed, and will be able to mark as redundant those packages
pulled in by dependencies alone which are no longer needed due to a package
being removed. They will not mark for removal packages that you manually
installed. To remove automatically installed packages that are no longer used,
run:
</para>
<screen>
# apt-get autoremove
</screen>
<para>
You can also use <command>deborphan</command>, <command>debfoster</command>, or
<command>cruft</command> to find redundant packages.
Do not blindly remove the packages these tools present,
especially if you are using aggressive non-default options that are prone to
false positives.  It is highly recommended that you manually review the
packages suggested for removal (i.e.  their contents, sizes, and descriptions)
before you remove them.
</para>
</listitem>
<listitem>
<para>
Remove packages that take up too much space and are not currently
needed (you can always reinstall them after the upgrade).  If you have
<systemitem role="package">popularity-contest</systemitem> installed, you can use
<command>popcon-largest-unused</command> to list the packages you do not use
that occupy the most space.  You can find the packages that just
take up the most disk space with <command>dpigs</command> (available in the
<systemitem role="package">debian-goodies</systemitem> package) or with
<command>wajig</command> (running <literal>wajig size</literal>).
They can also be found with
<systemitem role="package">aptitude</systemitem>.  Start
<command>aptitude</command> in <quote>visual mode</quote>,
select <menuchoice><guimenu>Views</guimenu><guimenuitem>New Flat Package
List</guimenuitem></menuchoice>, press <keycap>l</keycap> and enter
<literal>~i</literal>, then press <keycap>S</keycap> and enter
<literal>~installsize</literal>.  This will give you a handy list to work
with. 
</para>
</listitem>
<listitem>
<para>
  Remove translations and localization files from the system if they
  are not needed.  You can install the <systemitem
  role="package">localepurge</systemitem> package and configure it so
  that only a few selected locales are kept in the system. This will
  reduce the disk space consumed at
  <filename>/usr/share/locale</filename>.
</para>
</listitem>
<listitem>
<para>
   Temporarily move to another system, or permanently remove, system logs
   residing under <filename>/var/log/</filename>.
</para>
</listitem>

<listitem>
  <para>
    Use a temporary <filename>/var/cache/apt/archives</filename>: You
    can use a temporary cache directory from another filesystem
    (<acronym>USB</acronym> storage device, temporary hard disk,
    filesystem already in use, ...)
  </para>
  <note>
    <para>
      Do not use an <acronym>NFS</acronym> mount as the network
      connection could be interrupted during the upgrade.
    </para>
  </note>
    <para>
  For example, if you have a <acronym>USB</acronym> drive mounted on <filename>/media/usbkey</filename>:
  <orderedlist>
    <listitem>
      <para>
	remove the packages that have been previously downloaded for
	installation:

	<screen># apt-get clean</screen>
      </para>
    </listitem>
    <listitem>
      <para>
	copy the directory
	<filename>/var/cache/apt/archives</filename> to the
	<acronym>USB</acronym> drive:

	<screen># cp -ax /var/cache/apt/archives /media/usbkey/</screen>
      </para>
    </listitem>
    <listitem>
      <para>
	mount the temporary cache directory on the current one:

	<screen># mount --bind /media/usbkey/archives /var/cache/apt/archives</screen>
      </para>
    </listitem>
    <listitem>
      <para>
	after the upgrade, restore the original
	<filename>/var/cache/apt/archives</filename> directory:

	<screen># umount /media/usbkey/archives</screen>
      </para>
    </listitem>
    <listitem>
      <para>
	remove the remaining <filename>/media/usbkey/archives</filename>.
      </para>
    </listitem>
  </orderedlist>
  You can create the temporary cache directory on whatever filesystem
  is mounted on your system.
  </para>
  </listitem>

<listitem>
  <para>
    Do a minimal upgrade of the system (see <xref linkend="minimal-upgrade"/>)
    or partial upgrades of the system followed by a full upgrade.
    This will make it possible to upgrade the system partially, and
    allow you to clean the package cache before the full upgrade.
  </para>
</listitem>

</itemizedlist>


<para>
Note that in order to safely remove packages, it is advisable to switch your
<filename>sources.list</filename> back to &oldreleasename; as described in <xref
linkend="old-sources"/>.
</para>
</section>

<section arch="i386" id="kernel-flavour-686">
  <title>Kernel flavor selection</title>
  <para>
    Debian's <literal>686</literal> kernel configuration has been replaced by
    the <literal>686-pae</literal> configuration, which uses PAE
    (<quote>Physical Address Extension</quote>).  If your computer is currently
    running the <literal>686</literal> configuration but does not have
    PAE, you will need to switch to the <literal>486</literal> configuration
    instead.  You can check whether your computer has PAE by running:
    <screen>
$ grep -q '^flags.*\bpae\b' /proc/cpuinfo &amp;&amp; echo yes || echo no</screen>
    If it does not (i.e. the above command outputs <literal>no</literal>), you
    should install <systemitem role="package">linux-image-486</systemitem> and
    then remove <systemitem role="package">linux-image-686</systemitem> and/or
    <systemitem role="package">linux-image-2.6-686</systemitem> if they are
    currently installed.
  </para>

</section>

<section id="minimal-upgrade">
<title>Minimal system upgrade</title>
<para>
In some cases, doing the full upgrade (as described below) directly might
remove large numbers of packages that you will want to keep.  We therefore
recommend a two-part upgrade process: first a minimal upgrade to overcome these
conflicts, then a full upgrade as described in <xref
linkend="upgrading-full"/>. 
</para>
<para>
To do this, first run:
</para>
<screen>
# apt-get upgrade
</screen>
<para>
This has the effect of upgrading those packages which can be upgraded without
requiring any other packages to be removed or installed.
</para>

<para>
The minimal system upgrade can also be useful when the system is tight on space
and a full upgrade cannot be run due to space constraints.
</para>

</section>

<section id="upgrading-full">
<title>Upgrading the system</title>
<para>
Once you have taken the previous steps, you are now ready to continue
with the main part of the upgrade.  Execute:
</para>
<screen>
# apt-get dist-upgrade
</screen>
  <note>
    <para>
      The upgrade process for some previous releases recommended the
      use of <command>aptitude</command> for the upgrade. This
      tool is not recommended for upgrades from &oldreleasename; to
      &releasename;.
    </para>
  </note>
<para>
This will perform a complete upgrade of the system, installing the newest
available versions of all packages, and resolving all possible dependency changes
between packages in different releases.  If necessary, it will install some new
packages (usually new library versions, or renamed packages), and remove any
conflicting obsoleted packages.
</para>
<para>
When upgrading from a set of CD-ROMs (or DVDs), you will be asked to insert specific CDs
at several points during the upgrade.  You might have to insert the same CD
multiple times; this is due to inter-related packages that have been spread out
over the CDs.
</para>
<para>
New versions of currently installed packages that cannot be upgraded without
changing the install status of another package will be left at their current
version (displayed as <quote>held back</quote>).  This can be resolved by either using
<command>aptitude</command> to choose these packages for installation or by
trying <literal>apt-get -f install
<replaceable>package</replaceable></literal>.
</para>
</section>

</section>

<section id="trouble">
<title>Possible issues during upgrade</title>

<para>
The following sections describe known issues that might appear
during an upgrade to &releasename;.
</para>

<section id="immediate-configure">
<title>Dist-upgrade fails with "Could not perform immediate configuration"</title>
<para>
In some cases the <command>apt-get dist-upgrade</command> step can fail after
downloading packages with:
<screen>
E: Could not perform immediate configuration on '<replaceable>package</replaceable>'.  Please see man 5 apt.conf under APT::Immediate-Configure for details.
</screen>
</para>
<para>
If that happens, running <command>apt-get dist-upgrade -o
APT::Immediate-Configure=0</command> instead should allow the upgrade
to proceed.
</para>
</section>

<section arch="amd64" id="ia32libs">
<title>Transitioning from ia32-libs to multiarch</title>
<para>
Debian &release; now features multiarch, which allows one to install packages
from different architectures on the same system. The
<systemitem role="package">ia32-libs</systemitem> is now a transitional
package to make use of this new functionality. If you have
<systemitem role="package">ia32-libs</systemitem> installed, you need to
enable multiarch before upgrading this package. Otherwise APT will output
the following message:
<screen>
The following packages have unmet dependencies:
 ia32-libs : Depends: ia32-libs-i386 but it is not installable
E: Broken packages
</screen>
</para>

<para>
In order to allow installation of i386 packages on an amd64 system,
execute the following commands:
<screen>
# dpkg --add-architecture i386
# apt-get update
</screen>
</para>
</section>

<section id="expected-removals">
<title>Expected removals</title>
<para>
The upgrade process to &releasename; might ask for the removal of
packages on the system. The precise list of packages will vary depending on the
set of packages that you have installed.  These release notes give general
advice on these removals, but if in doubt, it is recommended that you examine
the package removals proposed by each method before proceeding.
</para>

<!-- FIXME: This needs to be reviewed based on real upgrade logs (jfs) -->
<!-- Alternative, another source of information is the UDD
'not-in-testing' page: http://udd.debian.org/bapase.cgi?t=testing -->
<para condition="fixme">
Some common packages that are expected to be removed include:
<systemitem role="package">autofs</systemitem> (replaced by
<systemitem role="package">autofs5</systemitem>),
<systemitem role="package">dhcp3</systemitem> (replaced by
<systemitem role="package">isc-dhcp</systemitem>),
<systemitem role="package">madwifi-source</systemitem>,
<systemitem role="package">python-setuptools</systemitem> and
<systemitem role="package">python2.4</systemitem> (replaced by
<systemitem role="package">python2.6</systemitem>).

For more information about packages obsoleted in &releasename;, see <xref
linkend="obsolete"/>.
</para>

</section>

<section id="conflicts-loops">
<title>Conflicts or Pre-Depends loops</title>

<para>
Sometimes it's necessary to enable the <literal>APT::Force-LoopBreak</literal>
option in APT to be able to temporarily remove an essential package due to a
Conflicts/Pre-Depends loop.  <command>apt-get</command> will alert you of this
and abort the upgrade.  You can work around this by specifying the option <literal>-o
APT::Force-LoopBreak=1</literal> on the <command>apt-get</command> command
line.
</para>
<para>
It is possible that a system's dependency structure can be so corrupt as to
require manual intervention.  Usually this means using
<command>apt-get</command> or
</para>
<screen>
# dpkg --remove <replaceable>package_name</replaceable>
</screen>
<para>
to eliminate some of the offending packages, or
</para>
<screen>
# apt-get -f install
# dpkg --configure --pending
</screen>
<para>
In extreme cases you might have to force re-installation with a command like
</para>
<screen>
# dpkg --install <replaceable>/path/to/package_name.deb</replaceable>
</screen>

</section>

<section id="file-conflicts">
<title>File conflicts</title>

<para>
File conflicts should not occur if you upgrade from a <quote>pure</quote> &oldreleasename; system, but
can occur if you have unofficial backports installed.  A file conflict will
result in an error like:
</para>
<screen>
Unpacking <replaceable>&lt;package-foo&gt;</replaceable> (from <replaceable>&lt;package-foo-file&gt;</replaceable>) ...
dpkg: error processing <replaceable>&lt;package-foo&gt;</replaceable> (--install):
 trying to overwrite `<replaceable>&lt;some-file-name&gt;</replaceable>',
 which is also in package <replaceable>&lt;package-bar&gt;</replaceable>
dpkg-deb: subprocess paste killed by signal (Broken pipe)
 Errors were encountered while processing:
 <replaceable>&lt;package-foo&gt;</replaceable>
</screen>
<para>
You can try to solve a file conflict by forcibly removing the package mentioned
on the <emphasis>last</emphasis> line of the error message:
</para>
<screen>
# dpkg -r --force-depends <replaceable>package_name</replaceable>
</screen>
<para>
After fixing things up, you should be able to resume the upgrade by repeating
the previously described <command>apt-get</command> commands.
</para>

</section>

<section id="configuration-changes">
<title>Configuration changes</title>

<para>
During the upgrade, you will be asked questions regarding the configuration
or re-configuration of several packages.  When you are asked if any file in
the <filename>/etc/init.d</filename> directory, or the
<filename>/etc/manpath.config</filename> file should be replaced by the
package maintainer's version, it's usually necessary to answer `yes' to
ensure system consistency.  You can always revert to the old versions, since
they will be saved with a <literal>.dpkg-old</literal> extension.
</para>
<para>
If you're not sure what to do, write down the name of the package or file and
sort things out at a later time.  You can search in the typescript file to
review the information that was on the screen during the upgrade.
</para>
</section>

<section id="console-change">
<title>Change of session to console</title>
<para>
If you are running the upgrade using the system's local console you
might find that at some points during the upgrade the console is shifted over
to a different view and you lose visibility of the upgrade
process.  For example, this may happen in desktop systems when
the display manager is restarted.
</para>
<para>
To recover the console where the upgrade was running you will have to use
<keycombo action='simul'><keycap>Ctrl</keycap><keycap>Alt</keycap><keycap>F1</keycap></keycombo>
(if in the graphical startup screen) or
<keycombo action='simul'><keycap>Alt</keycap><keycap>F1</keycap></keycombo>
(if in the local text-mode console) to switch back to the virtual terminal 1.
Replace F1 with the function key with the
same number as the virtual terminal the upgrade was running in. You can also
use <keycombo action='simul'><keycap>Alt</keycap><keycap>Left Arrow</keycap></keycombo> or
<keycombo action='simul'><keycap>Alt</keycap><keycap>Right
Arrow</keycap></keycombo> to switch between the different text-mode terminals.
</para>
</section>

<section id="package-specific-issues">
<title>Special care for specific packages</title>
<para>
In most cases, packages should upgrade smoothly between &oldreleasename;
and &releasename;.  There are a small number of cases where some intervention
may be required, either before or during the upgrade; these are detailed
below on a per-package basis.
</para>
<section id="issues-sudo">
<title>Sudo</title>
<para>
If you have modified <filename>/etc/sudoers</filename> then you should be aware
of changes made to how <systemitem role="package">sudo</systemitem>
configuration is handled.  The default <filename>/etc/sudoers</filename> now
includes the following two directives:
</para>
<programlisting>Defaults        secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</programlisting>
<programlisting>#includedir /etc/sudoers.d</programlisting>
<para>
Neither of these entries are added to your <filename>/etc/sudoers</filename>
automatically during the upgrade.  (Although you will still be able to run
<command>sudo</command> commands by specifying their fully-qualified path.)  So
you might wish to consider migrating your changes to the new
<filename>/etc/sudoers.d</filename> directory and using the default
<filename>/etc/sudoers</filename> file.  For example:
</para>
<screen>
# mv /etc/sudoers /etc/sudoers.d/mychanges
# mv /etc/sudoers.dpkg-new /etc/sudoers
</screen>
<para>
You may also need to edit your <filename>/etc/sudoers.d/mychanges</filename> to
remove unwanted <literal>Defaults</literal> and <literal>#includedir</literal>
entries.  You should use <command>visudo</command> for this:
</para>
<screen>
# visudo -f /etc/sudoers.d/mychanges
</screen>
</section>
<section id="issues-screen">
<title>Screen</title>
<para>
The GNU Screen versions in squeeze and wheezy don't use the same
communication protocol between the <command>screen</command> client
and the <command>SCREEN</command> server. Wheezy's <systemitem
role="package">screen</systemitem> package has been patched so that
the most important functionality is present even if the versions of
<command>screen</command> client and server don't match.
</para>
<para>
The most prominent functionality which does not work properly when
connecting to a Screen session started with squeeze's version of
<systemitem role="package">screen</systemitem> with wheezy's version
of <systemitem role="package">screen</systemitem> as client is
terminal resizing (<literal>WINCH</literal> signal). The workaround is
to detach and reattach again to get the size of the terminals inside
the screen session adjusted properly.
</para>
<para>
Some ncurses-based applications, e.g. <command>aptitude</command> in
visual mode, may leave traces of previous contents on the screen.
Pressing
<keycombo action='simul'><keycap>Ctrl</keycap><keycap>L</keycap></keycombo>
solves the issue.
</para>
<para>
Another (harmless) symptom of such an inter-version connection is
<command>screen</command> issuing messages like "Message 40 of 12376
bytes too small".
</para>
<para>
All these issues vanish as soon as the Screen sessions started with
squeeze's version of <systemitem role="package">screen</systemitem>
are exited.
</para>
<para>
See also <filename>/usr/share/doc/screen/NEWS.Debian.gz</filename> of
wheezy's <systemitem role="package">screen</systemitem> package.
</para>
</section>

<section>
  <title>Suhosin PHP module</title>
  <para>
    The <systemitem role="package">php5-suhosin</systemitem> package has been
    removed.  If your PHP configuration included the suhosin module, it will
    fail to load after the PHP upgrade.  Run <command>dpkg --purge
      php5-suhosin</command> to remove the leftover configuration in
    <filename>/etc/php5/conf.d/suhosin.ini</filename>.
  </para>
</section>

</section>
<!-- End of 'trouble' section -->
</section>

<!-- TODO: need to be reviewed with information from http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=571255 -->
<section id="newkernel" arch="linux">
<title>Upgrading your kernel and related packages</title>
<para>
This section explains how to upgrade your kernel and identifies potential
issues related to this upgrade.  You can either install one of the <systemitem
role="package">linux-image-*</systemitem> packages provided by Debian, or
compile a customized kernel from source.
</para>
<para>
Note that a lot of information in this section is based on the assumption that
you will be using one of the modular Debian kernels, together with <systemitem
role="package">initramfs-tools</systemitem> and <systemitem
role="package">udev</systemitem>.  If you choose to use a custom kernel that
does not require an initrd or if you use a different initrd generator, some of
the information may not be relevant for you.
</para>
<section id="kernel-metapackage">
<title>Installing the kernel metapackage</title>
<para>
When you dist-upgrade from &oldreleasename; to &releasename;, it is strongly
recommended that you install a linux-image-* metapackage, if you haven't done
so before.  This package may be installed automatically by the dist-upgrade
process.  You can verify this by running:
</para>
<screen>
# dpkg -l "linux-image*" | grep ^ii
</screen>
<para>
If you do not see any output, then you will need to install a new linux-image
package by hand.  To see a list of available linux-image metapackages, run:
</para>
<screen>
# apt-cache search linux-image- | grep -v transition
</screen>

<para>
If you are unsure about which package to select, run <literal>uname
-r</literal> and look for a package with a similar name.  For example, if you
see '<literal>2.6.32-5-amd64</literal>', it is recommended that you install
<systemitem role="package">linux-image-amd64</systemitem>.
<phrase arch="i386">See also <xref linkend="kernel-flavour-686"/>.</phrase>
You may also use <command>apt-cache</command> to see a long
description of each package in order to help choose the best one
available.  For example:
</para>
<screen>
# apt-cache show linux-image-amd64
</screen>
<para>
You should then use <literal>apt-get install</literal> to install it.  Once
this new kernel is installed you should reboot at the next available
opportunity to get the benefits provided by the new kernel version.
</para>
<para>
For the more adventurous there is an easy way to compile your own custom
kernel on &debian;.  Install the kernel sources, provided in the <systemitem
role="package">linux-source</systemitem> package.  You can make use of the
<literal>deb-pkg</literal> target available in the sources' makefile for
building a binary package.  More information can be found in the <ulink
url="http://kernel-handbook.alioth.debian.org/">Debian Linux Kernel
Handbook</ulink>, which can also be found as the <systemitem
role="package">debian-kernel-handbook</systemitem> package.
</para>
<para>
If possible, it is to your advantage to upgrade the kernel package separately
from the main <literal>dist-upgrade</literal> to reduce the chances of a
temporarily non-bootable system.
Note that this should only be done after the
minimal upgrade process described in <xref linkend="minimal-upgrade"/>.
</para>
</section>

<section id="boot-timing" arch="linux">
<title>Boot timing issues (waiting for root device)</title>
<para>
If an initrd created with <systemitem
role="package">initramfs-tools</systemitem> is used to boot the system, in some
cases the creation of device files by <systemitem
role="package">udev</systemitem> can happen too late for the boot scripts to
act on.
</para>
<para>
The usual symptoms are that the boot will fail because the root file system
cannot be mounted and you are dropped into a debug shell:
<screen>
Gave up waiting for root device.  Common problems:
 - Boot args (cat /proc/cmdline)
   - Check rootdelay= (did the system wait long enough?)
   - Check root= (did the system wait for the right device?)
 - Missing modules (cat /proc/modules; ls /dev)
ALERT!  <replaceable>/dev/something</replaceable> does not exist.  Dropping to a shell!
(initramfs) 
</screen>
But if you check afterwards, all devices that are needed are present in
<filename>/dev</filename>. This has been observed in cases where the root file
system is on a <acronym>USB</acronym> disk or on <acronym>RAID</acronym>, especially if <acronym>LILO</acronym><indexterm><primary>LILO</primary></indexterm> is used.
</para>
<para>
A workaround for this issue is to use the boot parameter
<literal>rootdelay=<replaceable>9</replaceable></literal>.  The value for the
timeout (in seconds) may need to be adjusted.
</para>
</section>

</section>

<!--
No tasks left in this section, so comment the whole thing out.
-->
<section id="nownownow" condition="fixme">
<title>Things to do before rebooting</title>
<para>
When <literal>apt-get dist-upgrade</literal> has finished, the <quote>formal</quote> upgrade
is complete, but there are some other things that should be taken care of
<emphasis>before</emphasis> the next reboot.
</para>

<!-- FIXME: REVIEW for Squeeze this was written for Lenny - drop? (jfs) -->
<section id="mdadm" condition="fixme">
<title>Upgrading mdadm</title>
<programlisting condition="fixme">TODO: Remove for lenny?</programlisting>
<para>
mdadm now needs a configuration file to assemble MD arrays (<acronym>RAID</acronym>) from the
initial ramdisk and during the system initialisation sequence.  Please make
sure to read and act upon the instructions in
<filename>/usr/share/doc/mdadm/README.upgrading-2.5.3.gz</filename> after the
package has been upgraded <emphasis role="strong">and before you
reboot</emphasis>.  The latest version of this file is available at <ulink
url="http://svn.debian.org/wsvn/pkg-mdadm/mdadm/trunk/debian/README.upgrading-2.5.3?op=file"></ulink>;
please consult it in case of problems.
</para>
</section>

</section>

<section id="boot-hangs" condition="fixme">
  <title>System boot hangs on <literal>Waiting for root file
  system</literal></title>
  <subtitle>Procedure to recover from <filename>/dev/hda</filename>
  that became <filename>/dev/sda</filename></subtitle>

  <para>
    Some users have reported that an upgrade could cause the kernel
    not to find the system root partition after a system reboot.
  </para>

  <para>
    In such case, the system boot will hang on the following message:
    <screen>Waiting for root file system ...</screen>
    and after a few seconds a bare busybox prompt will appear.
  </para>

  <para>
    This problem can occur when the upgrade of the kernel introduces
    the use of the new generation of <acronym>IDE</acronym>
    drivers. The <acronym>IDE</acronym> disk naming convention for the
    old drivers was <literal>hda</literal>, <literal>hdb</literal>,
    <literal>hdc</literal>, <literal>hdd</literal>. The new drivers
    will name the same disks respectively <literal>sda</literal>,
    <literal>sdb</literal>, <literal>sdc</literal>,
    <literal>sdd</literal>.
  </para>
  <para>
    The problem appears when the upgrade does
    not generate a new <filename>/boot/grub/menu.lst</filename> file
    to take the new naming convention into account. During the boot,
    Grub will pass a system root partition to the kernel that the
    kernel doesn't find. It can also appear when mounting filesystems 
    if the <filename>/etc/fstab</filename> has not been updated accordingly.
    Although the upgrade process to &releasename; should cover both situations
    automatically.
  </para>

  <para>
    If you have encountered this problem after upgrading, jump to
    <xref linkend="how-to-recover"/>. To avoid the problem before
    upgrading, read ahead.
  </para>

  <section id="avoid-problems-before-upgrading" arch="linux">
    <title>How to avoid the problem before upgrading</title>

    <para>
      One can avoid this problem entirely by using an identifier for
      the root filesystem that does not change from one boot to the
      next. There are two possible methods for doing this - labeling
      the filesystem, or using the filesystem's universally unique
      identifier (<acronym>UUID</acronym>). These methods are
      supported in Debian since the etch release.
    </para>

    <para>
      The two approaches have advantages and disadvantages. The
      labeling approach is more readable, but there may be problems
      if another filesystem on your machine has the same label. The
      <acronym>UUID</acronym> approach is uglier, but having two clashing <acronym>UUID</acronym>s is highly
      unlikely.
    </para>

    <para>
      For the examples below we assume the root filesystem is on
      <filename>/dev/hda6</filename>. We also assume your system has a
      working udev installation and ext2 or ext3 filesystems.
    </para>

    <para>
      To implement the labeling approach:
      <orderedlist>
	<listitem>
	  <para>
	    Label the filesystem (the name must be &lt; 16 characters)
	    by running the command:
	    <command>e2label /dev/hda6 rootfilesys</command>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Edit <filename>/boot/grub/menu.lst</filename> and change the line:
	    <programlisting># kopt=root=/dev/hda6 ro</programlisting>
	    to
	    <programlisting># kopt=root=LABEL=rootfilesys ro</programlisting>
	    <note>
	      <para>
		Do not remove the <literal>#</literal> at the start of
		the line, it needs to be there.
	      </para>
	    </note>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Update the <literal>kernel</literal> lines in
	    <filename>menu.lst</filename> by running the command
	    <command>update-grub</command>.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Edit <filename>/etc/fstab</filename> and change the line
	    that mounts the <filename>/</filename> partition, e.g.:

	    <programlisting>/dev/hda6     /     ext3  defaults,errors=remount-ro 0 1</programlisting>

	    to

	    <programlisting>LABEL=rootfilesys     /     ext3  defaults,errors=remount-ro 0 1</programlisting>

	    The change that matters here is the first column, you
	    don't need to modify the other columns of this line.
	  </para>
	</listitem>
      </orderedlist>
    </para>

    <para>
      To implement the <acronym>UUID</acronym> approach:
      <orderedlist>
	<listitem>
	  <para>
	    Find out the universally unique identifier of your filesystem by issuing:
	    <command>ls -l /dev/disk/by-uuid | grep hda6</command>. You can also use <command>blkid /dev/hda6</command>.

	  </para>
        
	  <para>
            If you list the contents in <filename>/dev/disk/by-uuid</filename>,
            you should get a line similar to this one:
	    <screen>lrwxrwxrwx 1 root root 24 2008-09-25 08:16 d0dfcc8a-417a-41e3-ad2e-9736317f2d8a -> ../../hda6</screen>
          </para>
          <!-- TODO: Put the output of vol_id instead, since this is *before* the upgrade -->
          <para>
          If you use <command>blkid</command>, you should get an output similar to this one:
          <screen>/dev/hda6: UUID="d0dfcc8a-417a-41e3-ad2e-9736317f2d8a" TYPE="ext3"</screen>
          </para>

          <para>
	    The <acronym>UUID</acronym> is the name of the symbolic
	    link pointing to <filename>/dev/hda6</filename> i.e.:
	    <literal>d0dfcc8a-417a-41e3-ad2e-9736317f2d8a</literal>.
	    <note>
	      <para>
		Your filesystem <acronym>UUID</acronym>
		will be a different string.
	      </para>
	    </note>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Edit <filename>/boot/grub/menu.lst</filename> and change the line:
	    <programlisting># kopt=root=/dev/hda6 ro</programlisting>
	    to use UUID instead:
	    <programlisting># kopt=root=UUID=d0dfcc8a-417a-41e3-ad2e-9736317f2d8 ro</programlisting>
	    <note>
	      <para>
		Do not remove the <literal>#</literal> at the start of
		the line, it needs to be there.
	      </para>
	    </note>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Update the <literal>kernel</literal> lines in
	    <filename>menu.lst</filename> by running the command
	    <command>update-grub</command>.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Edit <filename>/etc/fstab</filename> and change the line that mounts the <filename>/</filename> partition, e.g.:

	    <programlisting>/dev/hda6     /     ext3  defaults,errors=remount-ro 0 1</programlisting>

	    to

	    <programlisting>UUID=d0dfcc8a-417a-41e3-ad2e-9736317f2d8  /  ext3  defaults,errors=remount-ro 0 1</programlisting>

	    The change that matters here is the first column, you
	    don't need to modify the other columns of this line.
	  </para>
	</listitem>
      </orderedlist>
    </para>
  </section>

<!-- FIXME: This section might not be relevant anymore for Squeeze
  but could be turned into a generic section on how to recover from
  issues -->
  <section id="how-to-recover" arch="linux">
    <title>How to recover from the problem after the upgrade</title>

    <section id="solution1">
      <title>Solution 1</title>
      <para>
	This is applicable when Grub shows you the menu interface for
	selecting the entry you want to boot from. If such a menu does
	not appear, try pressing the <keycap>Esc</keycap> key before the
	kernel boots in order to make it appear.  If you can't get
	into this menu, try <xref linkend="solution2"/> or <xref
	linkend="solution3"/>.
      </para>

<!-- FIXME: If kept for Squeeze adjust the kernel version to that of Lenny -->
      <orderedlist>
	<listitem>
	  <para>
	    In the Grub menu, highlight the entry you want to boot
	    from. Press the <keycap>e</keycap> key to edit the options
	    related to this entry. You will see something like:

	    <screen>root (hd0,0)
kernel /vmlinuz-2.6.32-5-686 root=/dev/hda6 ro
initrd /initrd.img-2.6.32-5-686</screen>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Highlight the line

	    <screen>kernel /vmlinuz-2.6.32-5-686 root=/dev/hda6 ro</screen>

	    press the <keycap>e</keycap> key and replace
	    <literal>hd<replaceable>X</replaceable></literal> with
	    <literal>sd<replaceable>X</replaceable></literal>
	    (<varname>X</varname> being the letter
	    <literal>a</literal>, <literal>b</literal>,
	    <literal>c</literal> or <literal>d</literal> depending of
	    your system). In my example the line becomes:

	    <screen>kernel /vmlinuz-2.6.32-5-686 root=/dev/sda6 ro</screen>

	    Then press <keycap>Enter</keycap> to save the
	    modification. If other lines show
	    <literal>hd<replaceable>X</replaceable></literal>, change
	    these line too. Don't modify the entry similar to
	    <literal>root (hd0,0)</literal>.  Once all modifications
	    are done, press the <keycap>b</keycap> key. And your system
	    should now boot as usual.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Now that your system has booted, you need to fix this
	    issue permanently.  Jump to <xref
	    linkend="avoid-problems-before-upgrading"/> and apply one
	    of the two proposed procedures.
	  </para>
	</listitem>
      </orderedlist>
    </section>

    <section id="solution2">
      <title>Solution 2</title>

      <para>
	Boot from &debian; installation media
	(<acronym>CD</acronym>/<acronym>DVD</acronym>) and when
	prompted, pick <literal>rescue</literal> to launch rescue
	mode. Select your language, location, and keyboard mapping; then let it
	configure the network (no matter whether it succeeds or not). After a
	while, you should be asked to select the partition you want
	to use as root file system. The proposed choices will look
	something like:

	<screen>/dev/sda1
/dev/sda2
/dev/sda5
/dev/sda6</screen>
      </para>

      <para>
	If you know which partition is your root file system, choose
	the appropriate one. If you don't, just try with the first. If it
	complains about an invalid root file system partition, try the
	next one, and so on. Trying one after the other shouldn't harm
	your partitions and if you have only one operating system installed on
	your disks, you should easily find the right root file system
	partition. If you have many operating systems installed on your disks,
	it would be better to know exactly which is the right
	partition.
      </para>

      <para>
	Once you have chosen a partition, you will be offered a range
	of options. Pick the option of executing a shell in the
	selected partition. If it complains that it cannot do that
	then try with another partition.
      </para>

      <para>
	Now you should have shell access as user <literal>root</literal> on your root
	file system mounted on <filename>/target</filename>. You need access
	to the contents of the <filename>/boot</filename>, <filename>/sbin</filename>
	and <filename>/usr</filename> directories on your hard disk,
	which should now be available under
	<filename>/target/boot</filename>,
	<filename>/target/sbin</filename> and
	<filename>/target/usr</filename>. If these
	directories need to be mounted from other partitions, do so
	(see <filename>/etc/fstab</filename> if you have no idea of
	which partition to mount).
      </para>

      <para>
	Jump to <xref linkend="avoid-problems-before-upgrading"/> and
	apply one of the two proposed procedures to fix the problem
	permanently. Then type <literal>exit</literal> to leave the
	rescue shell and select <literal>reboot</literal> for
	rebooting the system as usual (don't forget to remove the
	bootable media).
      </para>
    </section>

    <section id="solution3">
      <title>Solution 3</title>

      <orderedlist>
	<listitem>
	  <para>
	    Boot from your favorite LiveCD distribution, such as Debian Live,
	    Knoppix, or Ubuntu Live.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Mount the partition where your <filename>/boot</filename>
	    directory is. If you don't know which one it is, use the
	    output of the command <command>dmesg</command> to find
	    whether your disk is known as <literal>hda</literal>,
	    <literal>hdb</literal>, <literal>hdc</literal>,
	    <literal>hdd</literal> or <literal>sda</literal>,
	    <literal>sdb</literal>, <literal>sdc</literal>,
	    <literal>sdd</literal>. Once you know which disk to work
	    on, for example <literal>sdb</literal>, issue the
	    following command to see the partition table of the disk
	    and to find the right partition:
            <command>fdisk -l /dev/sdb</command>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Assuming that you have mounted the right partition under
	    <filename>/mnt</filename> and that this partition contains
	    the <filename>/boot</filename> directory and its content,
	    edit the <filename>/mnt/boot/grub/menu.lst</filename>
	    file.
	  </para>
	  <para>
	    Find the section similar to:
	    <programlisting>## ## End Default Options ##

title           Debian GNU/Linux, kernel 2.6.32-5-686
root            (hd0,0)
kernel          /vmlinuz-2.6.32-5-686 root=/dev/hda6 ro
initrd          /initrd.img-2.6.32-5-686

title           Debian GNU/Linux, kernel 2.6.32-5-686 (single-user mode)
root            (hd0,0)
kernel          /vmlinuz-2.6.32-5-686 root=/dev/hda6 ro single
initrd          /initrd.img-2.6.32-5-686

### END DEBIAN AUTOMAGIC KERNELS LIST</programlisting>

	    and replace every <literal>hda</literal>,
	    <literal>hdb</literal>, <literal>hdc</literal>,
	    <literal>hdd</literal> with
	    <literal>sda</literal>, <literal>sdb</literal>,
	    <literal>sdc</literal>, <literal>sdd</literal>, as appropriate.  Don't
	    modify the line similar to:

	    <programlisting>root            (hd0,0)</programlisting>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Reboot the system, remove the LiveCD and your system
	    should boot correctly.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    When it has booted, apply one of the two proposed
	    procedures under <xref
	    linkend="avoid-problems-before-upgrading"/> to fix the
	    problem permanently.
	  </para>
	</listitem>
      </orderedlist>
    </section>
  </section>
</section>

<section id="for-next">
<title>Preparing for the next release</title>
<para>
After the upgrade there are several things you can do to prepare for the next
release.
</para>
<itemizedlist>
<listitem>
<para>
Remove newly redundant or obsolete packages as described in
<xref linkend="sufficient-space"/> and <xref linkend="obsolete"/>.
You should review which configuration files they use and consider purging
the packages to remove their configuration files.
</para>
</listitem>
</itemizedlist>

</section>

<section id="deprecated" condition="fixme">
<title>Deprecated components</title>
<para>
With the next release of &debian; &nextrelease; (codenamed
&nextreleasename;) some features will be deprecated. Users
will need to migrate to other alternatives to prevent
trouble when updating to &nextrelease;.
</para>

<para>
This includes the following features:
</para>

<itemizedlist>
	<listitem>
		<para>
		</para>
	</listitem>
</itemizedlist>

</section>

<section id="obsolete">
<title>Obsolete packages</title>
<para>
Introducing several thousand new packages, &releasename; also retires and omits more
than four thousand old packages that were in &oldreleasename;.  It provides no upgrade path
for these obsolete packages.  While nothing prevents you from continuing to use
an obsolete package where desired, the Debian project will usually discontinue
security support for it a year after &releasename;'s release<footnote><para> Or for as
long as there is not another release in that time frame.  Typically only two
stable releases are supported at any given time.  </para> </footnote>, and will
not normally provide other support in the meantime.  Replacing them with
available alternatives, if any, is recommended.
</para>
<para>
There are many reasons why packages might have been removed from the
distribution: they are no longer maintained upstream; there is no longer a
Debian Developer interested in maintaining the packages; the functionality they
provide has been superseded by different software (or a new version); or they
are no longer considered suitable for &releasename; due to bugs in them.  In the latter
case, packages might still be present in the <quote>unstable</quote> distribution.
</para>
<para>
Detecting which packages in an updated system are <quote>obsolete</quote> is easy since the
package management front-ends will mark them as such.  If you are using
<command>aptitude</command>, you will see a listing of these packages in the
<quote>Obsolete and Locally Created Packages</quote> entry.
</para>
<para>
The <ulink url="&url-bts;">Debian Bug Tracking System</ulink>
often provides additional information on why the package was removed.  You
should review both the archived bug reports for the package itself and the
archived bug reports for the <ulink
url="&url-bts;cgi-bin/pkgreport.cgi?pkg=ftp.debian.org&amp;archive=yes">ftp.debian.org
pseudo-package</ulink>.
</para>
<!-- FIXME: Review for Squeeze - more obsolete packages probably need to be listed here -->
<!-- TODO: 
Use the following reources for more information:

 - http://alioth.debian.org/~spaillard/udd-release-notes-src-with-RM

 - http://www.klabs.be/~fpiat/linux/comp-dist2/squeeze/
(alternatively)
 - Use the change-release information and sort by popcon 
-->
<para>
  The list of obsolete packages includes:
  <itemizedlist>
    <listitem>
      <para>
	<systemitem role="package">mysql-5.1</systemitem>, successor is
	<systemitem role="package">mysql-5.5</systemitem>.
      </para>
    </listitem>
    <listitem>
      <para>
	<systemitem role="package">postgresql-8.4</systemitem>, successor is
	<systemitem role="package">postgresql-9.1</systemitem>.
	Wheezy provides only an updated
	<systemitem role="package">postgresql-plperl-8.4</systemitem> package
	that is linked against the new version of libperl in order to enable
	upgrading to the new Perl version in wheezy without making existing
	postgresql-8.4 installations unusable. Once the operating system
	upgrade is finished, you should plan to also upgrade your PostgreSQL
	8.4 database clusters to the new PostgreSQL version 9.1 using the
	<command>pg_upgradecluster</command> tool.
      </para>
    </listitem>
    <listitem>
      <para>
	<systemitem role="package">python2.5</systemitem>, successor is
	<systemitem role="package">python2.7</systemitem>.
      </para>
    </listitem>
    <listitem>
      <para>
	<systemitem role="package">portmap</systemitem>, successor is
	<systemitem role="package">rpcbind</systemitem>.
      </para>
    </listitem>
    <listitem>
      <para>
	<systemitem role="package">sun-java6</systemitem>, successor is
	<systemitem role="package">openjdk-7</systemitem>.
      </para>
    </listitem>
    <listitem>
      <para>
	<systemitem role="package">gdm</systemitem>, successor is
	<systemitem role="package">gdm3</systemitem>. Users of lightweight
	desktop environments such as Xfce or LXDE may wish to consider
	<systemitem role="package">lightdm</systemitem> as a lighter
	weight alternative.
      </para>
    </listitem>
    <listitem>
      <para>
	<systemitem role="package">mpich</systemitem>, successors are
	<systemitem role="package">openmpi</systemitem> and <systemitem
	  role="package">mpich2</systemitem>.
      </para>
    </listitem>
    <listitem>
      <para>
	The <systemitem role="package">compiz</systemitem> OpenGL window and
        compositing manager, see bugreports
        <ulink url="http://bugs.debian.org/677864">#677864</ulink> (and
        <ulink url="http://bugs.debian.org/698815">#698815</ulink>).
      </para>
    </listitem>
    <listitem>
      <para>
      Some of Xorg's video drivers are no longer available in 
      &releasename; and are obsolete. This includes 
      <systemitem role="package">xserver-xorg-video-nv</systemitem> and
      <systemitem role="package">xserver-xorg-video-radeonhd</systemitem>.
      They may be removed during the upgrade. Users should install
      <systemitem role="package">xserver-xorg-video-all</systemitem>
      instead.
      </para>
    </listitem>
    <listitem>
      <para>
      All Horde 3 packages, providing web collaborative software, have been
      removed and are obsolete. This includes
      <systemitem role="package">ansel1</systemitem>,
      <systemitem role="package">chora2</systemitem>,
      <systemitem role="package">dimp1</systemitem>,
      <systemitem role="package">gollem</systemitem>,
      <systemitem role="package">horde-sam</systemitem>,
      <systemitem role="package">horde3</systemitem>,
      <systemitem role="package">imp4</systemitem>,
      <systemitem role="package">ingo1</systemitem>,
      <systemitem role="package">kronolith2</systemitem>,
      <systemitem role="package">mnemo2</systemitem>,
      <systemitem role="package">nag2</systemitem>,
      <systemitem role="package">sork-forwards-h3</systemitem>,
      <systemitem role="package">sork-passwd-h3</systemitem>,
      <systemitem role="package">sork-vacation-h3</systemitem> and
      <systemitem role="package">turba2</systemitem>.
      As the Horde 4 packages have not reached sufficient quality before the
      &releasename; release, they are also not available. They may be available
      in testing as
      <systemitem role="package">php-horde-*</systemitem> packages.
      </para>
    </listitem>
    <listitem>
      <para>
      Most Kolab packages, providing groupware server, have been removed. This
      includes
      <systemitem role="package">kolab-cyrus-imapd</systemitem>,
      <systemitem role="package">kolab-webadmin</systemitem>,
      <systemitem role="package">kolabd</systemitem>,
      <systemitem role="package">libkolab-perl</systemitem>,
      <systemitem role="package">php-kolab-filter</systemitem> and
      <systemitem role="package">php-kolab-freebusy</systemitem>.
      As of 2012, Kolab was in a major rewrite and may get shipped with a
      later Debian release as the
      <systemitem role="package">kolab</systemitem> package.  NB: The SOGo
      server (formerly named Scalable OpenGroupware.org) is shipped with
      &releasename; as <systemitem role="package">sogo</systemitem>.
      </para>
    </listitem>
    <listitem>
      <para>
      All OpenERP 5 packages have been
      removed and are obsolete. This includes
      <systemitem role="package">openerp-client</systemitem>,
      <systemitem role="package">openerp-server</systemitem>,
      <systemitem role="package">openerp-web</systemitem>.
      </para>
    </listitem>
    <listitem>
      <para>
      The <systemitem role="package">pootle</systemitem> 2.0.5
      package has been removed.
      </para>
    </listitem>
  </itemizedlist>
</para>

<section id="dummy">
<title>Dummy packages</title>
<para>
Some packages from &oldreleasename; have been split into several packages in &releasename;, often
to improve system maintainability.  To ease the upgrade path in such cases,
&releasename; often provides <quote>dummy</quote> packages: empty packages that have the same name as
the old package in &oldreleasename; with dependencies that cause the new packages to be
installed.  These <quote>dummy</quote> packages are considered redundant after the
upgrade and can be safely removed.
</para>
<para>
Most (but not all) dummy packages' descriptions indicate their purpose.
Package descriptions for dummy packages are not uniform, however, so you might
also find <command>deborphan</command> with the
<literal>--guess-<replaceable>*</replaceable></literal> options (e.g.
<literal>--guess-dummy</literal>) useful to detect them in your system.  Note
that some dummy packages are not intended to be removed after an upgrade but
are, instead, used to keep track of the current available version of a program
over time.
</para>
</section>

</section>

</chapter>
