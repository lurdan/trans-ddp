<!DOCTYPE debiandoc PUBLIC "-//DebianDoc//DTD DebianDoc//EN" [

  <!ENTITY % dynamicdata SYSTEM "../en/../dynamic.ent"> %dynamicdata;
  <!ENTITY % shareddata SYSTEM "../en/../release-notes.ent"> %shareddata;
  <!ENTITY docid "$Id: release-notes.zh_TW.sgml,v 1.13 2007-04-13 07:26:01 jfs Exp $">
]>
<debiandoc>
 <book>
  <titlepag>
   <title>
     &debian; &release; ("&releasename;"), &arch-title; 的發行情報
   </title>
   <author>
     <name>Josip Rodin, Bob Hilliard, Adam Di Carlo, Anne Bezemer, Rob 
     Bradford (現職), Frans Pop (現職), Andreas Barth (現職), Javier 
     Fern&aacute;ndez-Sanguino Pe&ntilde;a (現職), Steve Langasek 
     (現職)</name><email></email>
   </author>
   <author>
     <name></name><email>debian-doc@lists.debian.org</email>
   </author>
   <version>
     &docid;

   </version>
  </titlepag>
  <toc detail="sect1">
 
 <chapt id="about">
  <heading>
    引言
  </heading>
  <p>
    這些發行情報的主要目的是用來讓使用者知道在這個 &debian; 
    發行版本中的主要變化，提供一些如何方能平順得由舊有的發行版升級至最近發行版的資訊，並在文末提供給使用者一些在升級或使用 
    &releasename; 發行版本時可能會遭遇到的已知問題。
  </p>
  <p>
    請注意到，要列出所有的已知問題是不可能的任務。因此，這些都是在經過篩選之後，被認為是普遍存在且重大的問題。
  </p>
  <p>
    這份文件的最新版本可於 <url id="&url-release-notes;"> 
    取得。如果您正在閱讀的已經是一個月以前<footnote><p>這會寫在 PDF 
    版的頁首或是 HTML 
    版的頁底。</p></footnote>的舊版本的話，您可能就要考慮下載新的版本了。
  </p>
  <p>
    請注意到，在此只會提供及記述從上一個 Debian 
    發行版本進行升級的資訊。（也就是說，由 &oldreleasename; 
    進行升級）。如果您必須從更為早期的發行版進行升級的話，我們建議您能參閱舊有的發行情報，並先升級至 
    &oldreleasename;。
  </p>
  <sect id="bug_reports">
   <heading>
     回報這份文件的錯誤
   </heading>
   <p>
     我們已盡其所能得去測試所有在本文中所提及的各式各樣升級步驟，同時我們也試著去假想使用者可能會遭遇到的所有問題。
   </p>
   <p>
     儘管如此，如果您認為您找到了在本文中的任何錯誤，（不正確或遺漏的資訊），請在 
     <url id="&url-bts;" name="錯誤回報系統"> 針對 
     <package>release-notes</package> 套件發送錯誤回報。
   </p>
  </sect>
  <sect id="upgrade_reports">
   <heading>
     提交升級報告
   </heading>
   <p>
     我們十分歡迎使用者回報任何有關由 &oldreleasename; 升級至 &releasename; 
     的任何資訊。如果您願意分享這些資訊，請在 <url id="&url-bts;" name="bug 
     tracking system"> 將您的成果向 <package>upgrade-reports</package> 
     套件發送錯誤回報。我們希望您在傳送時，能將所包含的附件（利用 
     <prgn>gzip</prgn> ）將其壓縮。
   </p>
   <p>
     在傳送您的升級報告時，請包含以下資訊：
    <list>
     <item>
      <p>
        您的套件資料庫在升級前後的狀況：記錄 <prgn>dpkg</prgn> 
        的狀況的資料庫可於 <file>/var/lib/dpkg/status</file> 取得；而 
        <prgn>aptitude</prgn> 的套件狀態資訊可於 
        <file>/var/lib/aptitude/pkgstates</file> 
        取得。您應該在升級之前先根據 <ref id="data-backup"> 
        裡的說明進行備份，但您也可以在 <file>/var/backups</file> 
        裡找到這些資訊的備份資料。
      </p>
     </item>
     <item>
      <p>
        根據 <ref id="record_session"> 裡所說明的，使用 <prgn>script</prgn> 
        所記錄下來的歷程資訊。
      </p>
     </item>
     <item>
      <p>
        可由 <file>/var/log/aptitude</file> 取得您的 <prgn>aptitude</prgn> 
        日誌。
      </p>
     </item>
    </list>
   </p>
   <p>
     請注意到：在錯誤回報裡引用這些資訊之前，您應該花點時間去重新檢視這些資訊，並移除任何 
     敏感 及/或 私密 資料。因為這些資訊將會發佈在公共的資料庫上。
   </p>
  </sect>
  <sect id="sources">
   <heading>
     這份文件的來源資訊
   </heading>
   <p>
     這份文件是利用 <package>debiandocsgml</package> 
     產生的。本發行情報的原始檔案可由 <em>Debian 文庫專案</em> 的 CVS 
     檔案庫中取得。您可以經由網路在 <url id="&url-cvs-release-notes;" 
     name="網頁介面"> 個別地取得這些資料，並檢視它們的差異。請您到 <url 
     id="&url-ddp-cvs-info;" name="Debian 文庫專案的 CVS 頁面"> 取得如何存取 
     CVS 的一些更詳盡資訊。
   </p>
  </sect>
 </chapt>
 <chapt id="whats-new">
  <heading>
    在 &debian; &release; 中有什麼新增功能
  </heading>
  <p>
    在這個發行版中新增了對 AMD64 平台的官方支援，也就是支援了由 Intel 
    (EM64T) 及 AMD (AMD64) 所提供 64 位元的處理器。在上一個發行版 &debian; 
    3.1 ('sarge') 中則僅對此提供了非官方版本。<![ %amd64 [ 
    要從這個非官方版本進行升級可以參考這份發行情報，但 Debian 
    並不提供官方的支援。 ]]>
  </p>
  <p>
    對於 Motorola 680x0 ('m68k') 平台的官方支援已經停止，因為它無法達到 
    Debian Release Managers 
    所設定的標準。而最根本的潛在原因是一些基本工具元件的效能及極為有限的原廠支援。然而，即使它無法列入官方穩定發行版，m68k 
    平台移植還是會繼續存在且可取得以進行安裝。
  </p>
  <p>
    以下是 &debian; &releasename; 官方所支援的硬體平台：
  </p>
  <p>
   <list>
    <item>
     <p>
       Intel x86 ('i386')
     </p>
    </item>
    <item>
     <p>
       Alpha ('alpha')
     </p>
    </item>
    <item>
     <p>
       SPARC ('sparc')
     </p>
    </item>
    <item>
     <p>
       PowerPC ('powerpc')
     </p>
    </item>
    <item>
     <p>
       ARM ('arm')
     </p>
    </item>
    <item>
     <p>
       MIPS ('mips' (big endian) 及 'mipsel' (little endian))
     </p>
    </item>
    <item>
     <p>
       Intel Itanium ('ia64')
     </p>
    </item>
    <item>
     <p>
       HP PA-RISC ('hppa')
     </p>
    </item>
    <item>
     <p>
       S/390 ('s390')
     </p>
    </item>
    <item>
     <p>
       AMD64 ('amd64')
     </p>
    </item>
   </list>
  </p>
  <p>
    您可以在 <url id="&url-ports;" name="Debian 硬體架構網頁"> 
    中取得更多關於各個平台移植的情況，以及針對移植至您的硬體平台的相關資訊。
  </p>
   <![ %secondrelease [

  <p>
    雖然這僅僅是 &debian; 在 &arch-title; 
    平台上的第二次正式發行，但我們覺得系統本身已經證明了它已達到了可公開發行的水準。然而，因為它從來沒有像其他平台上的發行版那麼的知名，那麼的能被使用者大量測試，所以您還是可能會遭遇到一些問題。請利用我們的 
    <url id="&url-bts;" name="錯誤追蹤系統"> 
    來回報您所發現的任何問題；在報告中請不要忘了提及您是在 &architecture; 
    平台上發現這個錯誤的。
  </p>
   ]]><![ %arm [

  <sect id="new-arch">
   <heading>
     在 &arch-title; 中有什麼新增功能？
   </heading>
   <p>
     對於 RiscPC (RPC) 的支援並不完善且會在 etch 之後移除。即使 RiscPC 的 
     kernel 仍會出現在 etch 裡，但安裝程式已不再支援這個系統。
   </p>
   <p>
     已新增對 Intel IXP4xx 平台的支援。安裝程式包含了對於 Linksys NSLU2 
     的支援，它是一個輕巧且精簡的裝置，可用來存取 USB 的外接儲存媒體。可於 
     <url id="http://www.cyrius.com/debian/nslu2/"> 上取得有關 Deian 搭配 
     NSLU2 的更詳盡資訊。
   </p>
   <p>
     同時也新增了對 Intel 的 I/O Processor (IOP) 
     平台的支援。確切得說，&debian; &release; 支援了以 IOP 32x 
     為基礎的裝置。在安裝程式中支援了兩種以 IOP 晶片為基礎的 Network 
     Attached Storage (NAS) 裝置：IO-Data 的 GLAN Tank 及 Thecus 
     N2100。請參閱 <url id="http://www.cyrius.com/debian/iop/">。
   </p>
  </sect>
   ]]><![ %mips-mipsel [

  <sect id="new-arch">
   <heading>
     在 &arch-title; 中有什麼新增功能？
   </heading>
    <![ %mipsel [

   <p>
     在 etch 裡對於 DECstation 
     的支援並不完善且未經完整測試，且會在這個發行版之後完全移除。其中包含了 
     Debian 之前所支援的 DECstation 的變種，r3k-kn02 及 r4k-kn04。
   </p>
   <p>
     在 MIPS 為基礎的 Cobalt 機器（Qube 
     2700、RaQ1、Qube2、RaQ2）上，已可不透過串列主控台就能進行安裝。在預設上，在 
     Cobalt 是以 SSH 來進行安裝的。請參閱 <url 
     id="http://www.cyrius.com/debian/cobalt/"> 以取得更多詳盡資訊。
   </p>
    ]]><![ %mips [

   <p>
     已新增了對 SGI 的 IP32 平台的支援。IP32 平台包含了使用 R5000、R5200 或 
     RM7000 處理器的 SGI O2 機器。可以 frame buffer 
     或過串列主控台來進行安裝。
   </p>
    ]]>

   <p>
     已新增了對於 Broadcom 的 SB1A 評估板，使用 BCM1480 四核晶片的 BCM91480B 
     ("BigSur") 在 Kernel 及安裝程式上的支援，且同時支援了這個板子的 little 
     及 big endian 模式。
   </p>
   <p>
     已新增了對於 Qemu 機器的支援。Qemu/MIPS 機器模擬成一個使用 MIPS 4Kc CPU 
     的標準 ISA PC 規格的機器。
   </p>
  </sect>
   ]]><![ %powerpc [

  <sect id="new-arch">
   <heading>
     在 &arch-title; 中有什麼新增功能？
   </heading>
   <p>
     在這個釋出版中也新增了對於  64 位元的 PowerPC 平台（IBM pSeries 及 
     Apple G5 powermacs）的支援。對於 Apple Apus 平台的支援已經中止，對於 
     Apple Nubus 子平台也不再支援。
   </p>
  </sect>
   ]]>

  <sect id="newdistro">
   <heading>
     在這次的發行版本中有什麼新變化？
   </heading>
   <p>
     比起之前的 &oldreleasename;，新的 Debian 
     發行版再度收集了更多的軟體；在這次的發行版本裡包含了超過 &packages-new; 
     個新套件，總數則超過了 &packages-total; 
     個套件。大部份的軟體都被更新了：超過 &packages-updated; 
     個套件（大約佔了 &oldreleasename; 的套件數量的 
     &packages-update-percent;%）。當然囉，因為種種的原因，也有不少的軟體（超過  
     &packages-removed; 個，大約佔了 &oldreleasename; 的套件數量的 
     &packages-removed-percent;%）在這次的發行版本裡被移除掉了。您會發覺到這些套件的版本已不再更新，並且在套件的管理介面裡它們會被標記為 
     '廢棄(obsolete)' 套件。
   </p>
   <p>
     在這個發行版本裡，&debian; 已由 XFree86 
     轉換為支援了更多的硬體及更佳的自動偵測的 X.Org 7.1 版了。它可以使用 
     Compiz 這個第一個能夠在被支援的裝置上充份利用硬體 OpenGL 加速的 X 
     Window System 複合式視窗管理程式。
   </p>
   <p>
     &debian; 
     再次搭載了眾多的桌面應用軟體及桌面環境。其中，像是包含了桌面環境 GNOME 
     2.14 <footnote><p>採用了一些來自 GNOME 2.16 
     的模組。</p></footnote>、KDE 3.5.5a 及 Xfce 
     4.4。還有一些能提昇生產力的軟體，包含辨公室套件 OpenOffice.org 2.0.4a 
     及 KOffice 1.6 和 GNUcash 2.0.5、GNUmeric 1.6.3 及 Abiword 2.4.6。
   </p>
   <p>
     其它的桌面應用程式也被更新了，包含了更新為 Evolution 2.6.3 及 Gaim 
     2.0。Mozilla 
     家族也被更新了，同時其主要程式已更名：<prgn>iceweasel</prgn>（2.0.0.2 
     版）是無商標的 <prgn>Firefox</prgn> 
     網頁瀏覽器，<prgn>icedove</prgn>（1.5 版）則為無商標的 
     <prgn>Thunderbird</prgn> 郵件用戶程式。
   </p>
   <p>
     除此之外，在此發行版中也包含了以下的軟體更新：
   </p>
   <p>
    <list>
     <item>
      <p>
        GNU C 函式庫，2.3.6 版
      </p>
     </item>
     <item>
      <p>
        將 GNU Compiler Collection 4.1 做為預設的編譯器
      </p>
     </item>
     <item>
      <p>
        直譯語言：Python 2.4、PHP 5.2
      </p>
     </item>
     <item>
      <p>
        伺服器軟體：
      </p>
      <p>
       <list>
        <item>
         <p>
           電子郵件伺服器：Exim 
           4.63（將是新安裝系統預設的電子郵件伺服器）、Postfix 2.3、Courier 
           0.53、Cyrus 2.2
         </p>
        </item>
        <item>
         <p>
           Web 伺服器：Apache 2.2、fnord 1.10
         </p>
        </item>
        <item>
         <p>
           資料庫伺服器：MySQL 5.0.32、PostgreSQL 8.1
         </p>
        </item>
        <item>
         <p>
           OpenSSH 伺服器，4.3 版
         </p>
        </item>
        <item>
         <p>
           名稱伺服器：Bind 9.3、maradns 1.2
         </p>
        </item>
        <item>
         <p>
           目錄伺服器：OpenLDAP 2.3
         </p>
        </item>
       </list>
      </p>
     </item>
    </list>
   </p>
   <p>
     官方的 &debian; 發行版包含了 19 至 23 
     張（視系統架構而定）的程式光碟及數量相當的原始程式碼光碟，同時 DVD 
     發行版也已經推出。
   </p>
   <sect1 id="pkgmgmt">
    <heading>
      套件管理
    </heading>
    <p>
      <prgn>aptitude</prgn> 是在主控台 (Console) 
      上的套件管理程式的第一選擇。<prgn>aptitude</prgn> 支援了大部份的 
      <prgn>apt-get</prgn> 
      在命令列上的操作指令，且在處理相依問題上，已証實它的表現優於 
      <prgn>apt-get</prgn>。如果您還在使用 
      <prgn>dselect</prgn>，您應該將套件管理時的官方前端介面轉換為使用 
      <package>aptitude</package>。
    </p>
    <p>
      在 &releasename; 裡，已在 <prgn>aptitude</prgn> 
      裡實作了更為強大的衝突解決機制，它會在套件間因相依性的改變而產生衝突之時試圖尋找最佳的解決方案。
    </p>
    <p>
      <em>Secure APT</em> 已於 &releasename; 
      中現身。藉由它就能夠輕易得支援強力的驗証碼及數位簽章以用來檢驗下載到的套件，讓 
      &debian; 系統的安全能得到更進一步的保障。這個發行版本中還包含了 
      <prgn>apt-key</prgn> 工具以便能將新的金鑰加入 apt 
      的金鑰庫中。它預設上只收錄了由 
      <package>debian-archive-keyring</package> 套件所提供的，當前的 Debian 
      檔案庫的簽名金鑰。
    </p>
    <p>
      在預設的設定上，當套件是下載自無法認証的來源時，<prgn>apt</prgn> 
      現在會發出警告。未來的版本將可能會在下載套件前就先強制進行檢驗。非官方的 
      apt 檔案庫的管理者歡迎您建立您的密鑰並在 Release 
      檔上簽名，並能尋求安全的方式來發佈他們的公鑰。
    </p>
    <p>
      請閱讀 <manref section="8" name="apt"> 以取得更詳盡的資訊：<em>加強 
      Debian 安全手冊</em> 的 <url 
      id="http://www.debian.org/doc/manuals/securing-debian-howto/ch7#s-deb-pack-sign" 
      name="Debian 的套件簽名"> 一節，以及 <url 
      id="http://wiki.debian.org/SecureApt" name="Debian Wiki">。
    </p>
    <p>
      <prgn>apt</prgn> 另一個新增的功能是可以只下載自從您上次更新後的 
      <file>Packages</file> 差異檔。<ref id="apt-pdiff"> 
      裡有著此功能之更詳盡資訊。
    </p>
   </sect1>
   <sect1 id="volatile">
    <heading>
      debian-volatile 現已是官方服務
    </heading>
    <p>
      之前在 &oldreleasename; 發行之時所介紹的 <em>debian-volatile</em> 
      非官方服務，現已成為官方服務。
    </p>
    <p>
      這表示它現在已改用 <tt>.debian.org</tt> 位址<footnote><p>舊的 
      <tt>volatile.debian.net</tt> 
      到時將還會持續運作。</p></footnote>。若您現正使用著該服務，請確認您的 
      <file>/etc/apt/sources.list</file> 是否已正確對應。
    </p>
    <p>
      <em>debian-volatile</em> 服務可以讓使用者輕易得進行 stable 
      的套件更新，因為某些套件，像是病毒掃瞄引擎所使用的特徵碼列表，或是垃圾郵件過濾器所使用的樣本資訊，往往很快得就過時了。請到這個檔案庫的 
      <url id="&url-debian-volatile;" name="網頁"> 
      來取得更多的詳細資訊及鏡像站之列表。
    </p>
   </sect1>
  </sect>
  <sect id="system-changes">
   <heading>
     系統改善
   </heading>
   <p>
     全新安裝的 &releasename; 
     將會受益於在本發行版中的諸多改變，但這些改變可能無法自動套用至由 
     &oldreleasename; 
     升級上來的系統。這一小節會針對這些相關改變進行簡易介紹。
   </p>
   <p>
    <taglist>
     <tag>
       基本的開發套件的優先等級降低了
     </tag>
     <item>
      <p>
        有些在以往其優先等級為 <em>標準</em> 
        的開發用套件，現今的優先等級已降為 
        <em>非強制性</em>；也就是說，已不會在預設上就會安裝這些套件了。其中包含了標準的 
        C/C++ 編譯器 <package>gcc</package> 
        以及其它的軟體（<package>dpkg-dev</package>、<package>flex</package> 
        及 <package>make</package>） 和開發時期的標頭檔 (development 
        headers)（<package>libc6-dev</package>、<package>linux-kernel-headers</package>）。
      </p>
      <p>
        如果您希望在您的系統上安裝這些套件，最簡易的安裝方式就是安裝 
        <package>build-essential</package>，這樣就會把它們一道安裝進來了。
      </p>
     </item>
     <tag>
       SELinux 優先權已提昇為『標準』，但預設上不會啟用
     </tag>
     <item>
      <p>
        為了支援 SELinux 所需的套件的優先權已提昇為 
        <em>標準</em>。也就是說，在安裝新系統期間預設就會把它們安裝進來。而在現行系統中您可以藉由以下指令來安裝 
        SELinux：
       <example>
# aptitude install selinux-basics
       </example>
      </p>
      <p>
        請注意到，在預設上並<em>不會</em>啟動對於 SELinux 
        的支援。有關設定及啟用 SELinux 的資訊可於 <url 
        id="&url-wiki-selinux;" name="Debian Wiki"> 上找到。
      </p>
     </item>
     <tag>
       新預設的服務程式
     </tag>
     <item>
      <p>
        &releasename; 預設的 inet 超級服務管理程式已由 
        <package>netkit-inetd</package> 替換為 
        <package>openbsd-inetd</package>。如果沒有設定任何服務，在預設上它將不會啟動。這個新預設的服務程式將會在升級的過程中被自動安裝進來。
      </p>
     </item>
     <tag>
       預設的 <prgn>vi</prgn> 替代品已變更
     </tag>
     <item>
      <p>
        在安裝 <prgn>vi</prgn> 的替代品時，現今預設是安裝 <prgn>vim</prgn> 
        的精簡版（<package>vim-tiny</package>），而不再是 
        <package>nvi</package> 了。
      </p>
     </item>
     <tag>
       <tt>ext2</tt>/<tt>ext3</tt> 預設功能的變化
     </tag>
     <item>
      <p>
        在建立新的 ext2 及 ext3 檔案系統時，預設上會啟用 <em>dir_index</em> 
        及 <em>resize_inode</em> 
        這兩項功能。第一個功能是用來加速擁有很多檔案的目錄之存取速度；第二個功能可以讓您在線上（也就是說，當它被掛載時）直接更改檔案系統的大小。
      </p>
      <p>
        從 &oldreleasename; 升級上來的使用者可以考慮手動使用 
        <prgn>tune2fs</prgn> 來設定 <em>dir_index</em> 
        參數<footnote><p>除非是那些在 &oldreleasename; 
        之前安裝的系統，在大多數系統的檔案系統上，應該已設定了 
        <em>filetype</em> 參數。</p></footnote>。而 <em>resize_inode</em> 
        參數則無法直接套用至現有的檔案系統上。可以利用 <tt>dumpe2fs -h</tt> 
        來檢視在某個檔案系統上已設定了哪些參數。
      </p>
     </item>
     <tag>
       &releasename; 的預設編碼已是 UTF-8
     </tag>
     <item>
      <p>
        新安裝的 &releasename; 其預設編碼將會是 
        UTF-8。有不少的應用程式也會將使用 UFT-8 做為預設值。
      </p>
      <p>
        升級至 &releasename; 且希望轉換至 UTF-8 
        的使用者將必須重新設定其環境變數及區域化資料。系統全域的設定可以利用 
        <tt>dpkg-reconfigure locales</tt> 改變：先替您的語系及國家選擇一個 
        UTF-8 的區域設定，並將其設定為預設值。請注意到，轉換至 UTF-8 
        也代表了您很可能也必須將現有的檔案由您原本的舊有編碼轉換至 UTF-8。
      </p>
      <p>
        在 <package>utf8-migration-tool</package> 
        套件裡包含了一些有助於轉換的工具。但是這個套件目前只能由 unstable 
        裡取得，因為它還不到可以進入 &releasename; 
        的時候。強烈建議您在使用這個工具之前，先備份您的資料及設定。
      </p>
      <p>
        請注意到，有些應用程式可能尚無法在 UTF-8 
        環境下正確執行。大多是因為在顯示時出現問題。
      </p>
     </item>
    </taglist>
   </p>
   <p>
     在 <url id="http://wiki.debian.org/Sarge2EtchUpgrade" name="Debian 
     Wiki"> 上有著 &oldreleasename; 和 &releasename; 
     之間的差異之更詳盡資訊。
   </p>
  </sect>
  <sect id="kernel-changes">
   <heading>
     和 Kernel 相關的重要改變
   </heading>
   <p>
     在各個平台上，&debian; &release; 搭載的是 kernel &kernelversion; 
     版。這個釋出版應該能 <![ %defaulted-2.4 [ 
     <footnote><p>有些套件可能無法再和 2.4 版的 kernel 搭配使用了。請參閱 
     <ref id="incompatible-2.4">。</p></footnote> ]]> 和 2.4 版的 kernel 
     大致上相容，但 Debian 已不再提供或支援 2.4 版的 kernel 套件了。
   </p>
   <p>
     在 kernel 本身及在 Debian 所提供的 krenel 
     套件裡都已有重大改變。其中某些改變可能會讓升級程序更形複雜，且可能會在升級至 
     &releasename; 
     後、重新啟動系統之時帶來麻煩。這一小節會針對其中最重大的改變進行簡易的介紹；潛在的問題及如何進行排除之資訊則包含在之後的章節裡。
   </p>
    <![ %defaulted-2.4 [

   <p>
     如果您正在使用 2.4 的 kernel，您應該仔細參閱 <ref 
     id="upgrade-to-2.6">。
   </p>
    ]]>

   <sect1 id="kernel-packaging">
    <heading>
      Kernel 套件裡的改變
    </heading>
    <p>
     <taglist>
      <tag>
        Kernel 套件已更名
      </tag>
      <item>
       <p>
         為了避免名稱上的混淆，所有的 Linux Kernel 套件已由 
         <package>kernel-*</package> 更名為 
         <package>linux-*</package>。這將會有利於日後能夠在 Debian 
         裡輕易得加入其它的非 Linux 的 Kernel。
       </p>
      </item>
       <![ %i386 [

      <tag>
        "386" 類別已被 "486" 所取代
      </tag>
      <item>
       <p>
         隨著 &oldreleasename; 已不再支援 80386 子平台，386 類別的 Kernel 
         現已被廢棄且已被新的 486 類別所取代。
       </p>
      </item>
       ]]><![ %amd64 [

      <tag>
        &arch-title; 上的單一通用 kernel
      </tag>
      <item>
       <p>
         在 &oldreleasename; 
         裡，會針對在此平台上的各種不同處理器分成了各種不同的 kernel 
         類別。因為 kernel 現已改進成會自動地針對系統上的處理器進行 kernel 
         的最佳化，所以已沒有必要再將 kernel 分成各種不同的類別了。
       </p>
      </item>
       ]]><![ %i386-amd64-ia64 [

      <tag>
        標準的 Kernel 將支援 SMP
      </tag>
      <item>
       <p>
         多處理器的系統已不再需要使用 <tt>*-smp</tt> 類別的 Linux Kernel 
         了。在 &arch-title; 裡，沒有加上 <tt>-smp</tt> 字尾的 
         <tt>linux-image</tt> 套件將會同時支援了單處理器和多處理器。<![ 
         %i386 [（唯一的例外是 486 類別，因為它只支援單一處理器。）]]>
       </p>
      </item>
       ]]><![ %mips [

      <tag>
        r5k-ip22 類別的 Kernel 已被廢棄
      </tag>
      <item>
       <p>
         使用 R5000 處理器的 IP22 機器的 Kernel 影像檔現已廢棄。因為 
         r4k-ip22 影像檔現已支援使用 R4x000 或 R5000 處理器的 IP22 機器。
       </p>
      </item>
       ]]>

     </taglist>
    </p>
    <p>
      如果可以，將會替已廢棄套件提供相依於新套件的替代 (dummy) 轉換套件。
    </p>
   </sect1>
   <sect1 id="kernel-initrd">
    <heading>
      用來產生 initrds 的新工具程式
    </heading>
     <![ %no-initrd [

    <p>
      在 &arch-title; 上的 Debian kernel 影像套件並不需要用到 initrd 
      才能讓系統開機。也就是說，這一章節的資訊可能和您無關，但還是提供給您參考。
    </p>
     ]]>

    <p>
      <![ %uses-initrd [ 在 &arch-title; 上的 Debian kernel 影像套件必須利用 
      initrd 才能讓系統開機。]]>由於在 krenel 裡的改變，在 &oldreleasename; 
      裡用來產生 initrds 的 <package>initrd-tools</package> 
      已無用武之地且已被廢棄了。有兩個新的套件被開發出來以取代該套件：<package>initramfs-tools</package> 
      及 
      <package>yaird</package>。這兩個新工具程式其背後的設計理念大異其趣；在 
      <url id="http://wiki.debian.org/InitrdReplacementOptions" name="Debian 
      Wiki"> 上可取得一些概觀及介紹。兩者都會利用 <em>initramfs</em> 
      這個壓縮過的 <prgn>cpio</prgn> 檔案庫來產生 
      initrd。預設且建議採用的工具程式是 
      <package>initramfs-tools</package>。
    </p>
     <![ %uses-initrd [

    <p>
      升級至 &releasename; 版的 Kernel 將會預設安裝 
      <package>initramfs-tools</package>。<![ %defaulted-2.4 [ 
      如果這是您是由 2.4 版升級至 2.6 版的 Debian Kernel，您必須使用 
      <package>initramfs-tools</package>。如果您正在使用著 2.2 或 2.4 版的 
      Kernel，使用 <package>yaird</package> 將會導致 linux-image-2.6 
      安裝失敗。]]>
    </p>
    <p>
      因為從 &oldreleasename; 進行升級時還會用得到 
      <package>initrd-tools</package> 套件，所以它仍會包含在 &releasename; 
      裡。但它會在下個釋出版中被廢棄掉。
    </p>
     ]]>

   </sect1>
   <sect1 id="kernel-udev">
    <heading>
      動態 <file>/dev</file> 管理及硬體偵測
    </heading>
    <p>
      &releasename; 版的 kernel 已不再對 <tt>devfs</tt> 提供支援了。
    </p>
    <p>
      取代 <tt>devfs</tt> 的是 <package>udev</package>，一個 devfs 
      在使用者層級的實作。
    </p>
    <p>
      <package>udev</package> 會掛載在 <file>/dev/</file> 
      目錄上，並能針對那些被 Kernel 所支援的裝置進行即時的目錄配置。它也會在 
      Kernel 模組掛載或卸載的同時，根據 Kernel 
      所產生的事件自動得新增及移除裝置。比起 <tt>devfs</tt> 
      來，<prgn>udev</prgn> 的功能更為多樣，且能替其它像是 
      <package>hal</package> (hardware abstraction layer) 
      套件所需的服務提供支援。
    </p>
    <p>
      為了和 kernel 緊密配合，<package>udev</package> 
      也會進行硬體的偵測及替找到的裝置載入驅動模組。也因此它和 
      <package>hotplug</package> 是衝突的。在 &oldreleasename; 
      裡，<package>discover</package> 也是用來在開機期間加載驅動模組，但它在 
      &releasename; 裡的新版本已不再提供這個功能了。<![ %not-s390 
      [<package>discover</package> 仍在 X.Org 
      上被用來偵測在系統上有哪些圖形控制器。]]>
    </p>
     <![ %uses-initrd [

    <p>
      如果您安裝了 Debian 的 kernel 影像檔，那麼在預設上就會把 
      <package>udev</package> 安裝進來，因為 
      <package>initramfs-tools</package> 和它有著相依關係。
    </p>
    <p>
      您也可以藉由自行編譯一個不使用模組的 kernel，或是使用其它的 initrd 
      產生程式，像是 <package>yaird</package>，來避免安裝 
      <package>udev</package>。但儘管如此，還是建議將 
      <package>initramfs-tools</package> 做為 initrd 產生程式。
    </p>
     ]]>

   </sect1>
  </sect>
 </chapt>
 <chapt id="installing">
  <heading>
    系統安裝
  </heading>
  <p>
    Debian Installer 是 Debian 
    的官方安裝系統。它提供了多種不同的安裝方式。您可以依據您硬體架構的不同而有種種不同的安裝方式可供選擇。
  </p>
  <p>
    可以在 <url id="&url-installer;" name="Debian 站台"> 上同時取得 
    &releasename; 的安裝影像檔以及安裝指引。
  </p>
  <p>
    安裝指引也同時會包含在 Debian 官方的 CD/DVD 集裡的第一張 CD/DVD 的：
   <example>
/doc/install/manual/<var>language</var>/index.html
        </example>
  </p>
  <p>
    您還可以到 <url id="&url-installer;index#errata" name="戡誤表"> 上查看 
    debian-installer 的一些已知問題之列表。
  </p>
   <![ %alpha [

  <p>
    安裝程式目前只能用於安裝支援 SRM 主控台的 alpha 
    系統。在啟動安裝程式之前，請務必記得將您的系統切換至 SRM 
    模式。如果您的機器只支援 AlphaBIOS/ARC 主控台的話，建議安裝 
    &releasename; 的作法是先安裝（最精簡的）的 woody 系統，然後升級到 
    &oldreleasename;，最後再升級到 
    &releasename;。如果您想要知道各種主控台的更多相關訊息，請閱讀在 <url 
    id="http://www.debian.org/ports/alpha" name="Debian alpha 平台移植網頁"> 
    上的參考資訊。
  </p>
   ]]><![ %sparc [

  <sect id="sparc_fb">
   <heading>
     在 &arch-title; 裡的 framebuffer 相關問題
   </heading>
   <p>
     由於在某些系統上會有顯示上的問題，所以在 &arch-title; 
     裡，大多的顯示卡預設上是不使用 framebuffer 的。這會使得一些對 
     framebuffer 
     支援良好的系統上的顯示效果變差。如果您在安裝程式裡遇到了顯示上的問題，您可以試著加上 
     <tt>framebuffer=true</tt> 
     這個參數來啟動安裝程式。如果您的硬體在預設上並不使用 framebuffer 
     但卻能正常運作，請知會我們。
   </p>
  </sect>
  <sect id="sparc_illegal_instruction">
   <heading>
     在 &arch-title; 上有關開機之相關問題
   </heading>
   <p>
     已有不少使用者回報說安裝光碟使用了 '<tt>boot cdrom</tt>' 
     後卻無法正常開機，並顯示【<tt>Illegal Instruction</tt>】錯誤。
   </p>
   <p>
     這個問題明確得說，就是因為這台機器之前是由 Solaris 
     重新啟動的，所以無法才會正常執行。解決方案是完全先將機器的電源關閉，然後直接用安裝光碟開機。
   </p>
   <p>
     有眾多不同的系統的使用者回報過這個問題（截止目前為止，包含了 Enterprise 
     450、Blade 2000、Fire V240、Enterprise 250 及 Blade 
     100），所以被視為常見的問題。如果在您的機器上也發現了類似的問題，請知會我們。
   </p>
  </sect>
   ]]>

  <sect id="inst-new">
   <heading>
     安裝系統有何改變？
   </heading>
   <p>
     自從 Debian Installer 在 &oldreleasename; 
     發行了首次的官方版本後，針對硬體支援及一些有趣的新功能方面又經歷了大量的開發工作。
   </p>
   <p>
     在本發行情報裡，我們只會列出在安裝程式裡的一些重大改變。如果您想知道在 
     &oldreleasename; 之後它的一些詳盡的改變列表，請檢閱在 Debian Installer 
     的 <url id="&url-installer-news" name="新聞歷程"> 上有關 &releasename; 
     beta 及 RC 版發行公告。
   </p>
   <sect1 id="inst-changes">
    <heading>
      主要改變
    </heading>
    <p>
     <taglist>
      <tag>
        在安裝過程中不需重新開機
      </tag>
      <item>
       <p>
         在之前，安裝程式乃分成兩個步驟：設定 base system 
         及讓它能夠開機、接下來是重開機然後執行 <prgn>base-config</prgn> 
         來進行像是使用者設定、設定套件的管理系統及使用 tasksel 
         來安裝其它額外的套件。
       </p>
       <p>
         但從 &releasename; 開始，第二個步驟已整合至 Debian Installer 
         裡。這麼做有許多的優點，包含了像是增強了安全性、在安裝完成並重新開機之後，新系統的時區就是正確的、如果您安裝了桌面環境，將會直接啟動圖形使用介面。
       </p>
      </item>
      <tag>
        新系統將預設為使用 UTF-8 編碼
      </tag>
      <item>
       <p>
         安裝程式將會把系統設定為使用 UTF-8 
         編碼，而不是使用專用於各語系的舊特定編碼（像是 ISO-8859-1、EUC-JP 
         或 KOI-8）。
       </p>
      </item>
      <tag>
        更有彈性的分割程式
      </tag>
      <item>
       <p>
         現已可以利用分割引導程式，在檔案系統上使用 LVM Volume。
       </p>
       <p>
         安裝程式現也可以設定加密檔案系統。若使用手動分割磁碟，您可以選擇使用 
         <tt>dm-crypt</tt> 或是 
         <tt>loop-aes</tt>、使用密語或隨機的密鑰，同時您還可以調整其它各式各樣的選項。使用分割引導程式，安裝程式將會建立一個加密 
         LVM 分割區，它包含了其它的檔案系統（除了 <file>/boot</file> 
         之外）的 Logical Volumes。
       </p>
      </item>
       <![ %g-i [

      <tag>
        圖形安裝介面
      </tag>
      <item>
        <![ %i386-amd64 [

       <p>
         如果您比較喜歡使用圖形介面，請試著以 <tt>installgui</tt> 
         來啟動安裝程式。
       </p>
        ]]><![ %powerpc [

       <p>
         在 &arch-title; 
         上，只額外提供了一個僅供測試用的圖形介面安裝影像檔。它已知能在大多數裝有 
         ATI 顯示卡的 CHRP 系統上正常運作，但在 &arch-title; 
         上未經完整測試之前，尚不能將它列為一般的安裝 CD 之一。
       </p>
       <p>
         如果您很想試用圖形介面的安裝程式，請替而使用 "gtk-miniiso" 影像檔。
       </p>
        ]]>

       <p>
         除了在外表上，圖形介面的安裝程式和一般安裝程式的功能幾乎沒有任何差別。但只有一個地方不同：使用圖形介面的安裝程式無法將加密分割區設定為使用隨機金鑰。
       </p>
       <p>
         圖形使用者介面的主要優勢是它比文字介面 (newt) 
         支援了更多語系。您可以在安裝程式指引的附錄中找到圖形安裝程式之相關資訊及圖形安裝程式和文字安裝程式之間的眾多差異。
       </p>
       <p>
         注意：並不是所有的系統平台都有圖形介面可用。
       </p>
      </item>
       ]]>

      <tag>
        救援模式
      </tag>
      <item>
       <p>
         您可以利用安裝程式來修復您系統上一些像是無法開機的問題。剛開始的步驟會和一般的安裝步驟極為類似，但安裝程式不會啟動磁碟分割程式，取而代之的它會提供一個列有救援選項的選單。
       </p>
       <p>
         請以 <tt>rescue</tt> 啟動安裝程式，或是在開機時加上 
         <tt>rescue/enable=true</tt> 參數，就能啟動救援模式。
       </p>
      </item>
      <tag>
        使用 sudo 來取代 root 帳號
      </tag>
      <item>
       <p>
         在 expert 安裝模式中，您可以選擇不要設定 root 
         帳號（讓它因而被鎖上）。取而代之的是設定 
         <prgn>sudo</prgn>，讓第一個使用者可以利用它來進行系統管理。
       </p>
      </item>
      <tag>
        驗証下載到的套件的檢查碼
      </tag>
      <item>
       <p>
         現在，經由安裝程式所下載到的套件會再利用 <prgn>apt</prgn> 
         來驗証它的檢查碼。這麼一來，若想攻擊經由網路安裝的系統將會更形不易。
       </p>
      </item>
      <tag>
        簡化的郵件設定
      </tag>
      <item>
       <p>
         如果安裝的是 "標準系統" 
         的話，安裝程式會將系統的郵件伺服器的設定簡化為只能在本機裡傳遞郵件。即使是位於相同網路上的系統也無法存取這個郵件伺服器。如果您想把您的系統設定為能夠處理非本機的郵件（不管是寄出或接收郵件），您必須在安裝完成後重新設定郵件系統。
       </p>
      </item>
      <tag>
        選擇桌面
      </tag>
      <item>
       <p>
         如果使用者需要的話，安裝系統將會安裝 GNOME 桌面做為預設的桌面環境。
       </p>
       <p>
         儘管如此，如果使用者希望安裝其它的桌面環境的話，利用開機參數就可以輕鬆辨到：KDE 
         為 <tt>tasks="standard, kde-desktop"</tt>；而 Xfce 則是 
         <tt>tasks="standard, xfce-desktop"</tt>。請注意到，如果是利用完整的 
         CD 
         影像來進行安裝但卻沒有搭配網路鏡像站做為額外的套件來源時，這將不會成功。必須使用 
         DVD 影像或其它的安裝方法才行。
       </p>
       <p>
         同時，也個別提供了預設上就會安裝 KDE 或 Xfce 桌面環境的 CD 影像檔。
       </p>
      </item>
       <![ %not-s390 [

      <tag>
        新語系
      </tag>
      <item>
       <p>
         感謝翻譯者們的辛勤努力，若使用文字介面模式安裝時，Debian 支援了 47 
         種語系。這比之前的 &oldreleasename; 再多出 6 
         種語系。新增的語系包括了白俄羅斯語、世界語、愛沙尼亞語、庫爾德語、馬其頓語、塔加啦語、越南語和窩羅夫語。而因為缺乏翻譯的更新，在這個發行版中有兩個語系被廢棄了：波斯語及威爾斯語。
       </p>
        <![ %g-i [

       <p>
         如果使用的是圖形介面，將會再支援額外 11 
         種語系。只能在該安裝程式中選取這些語系是因為它們的字元集無法在非圖形介面上顯示。這些新增語系包含了：孟加拉語、宗卡語、古吉拉特語、印地語、喬治亞語、高棉語、馬拉雅蘭語、尼泊爾語、旁遮普語、坦米爾語及泰語。
       </p>
        ]]>

       <p>
         如果不想使用任何區域資訊的使用者現在可以在安裝程式的語系中選擇 
         <em>C</em> 做為偏好的區域資訊。更多的語系的相關資訊可以由 <url 
         id="&url-d-i-i18n;" name="d-i 語系列表"> 上取得。
       </p>
      </item>
      <tag>
        區域語系及時區選擇上的簡化
      </tag>
      <item>
       <p>
         語系、國家和時區的設定現已經過簡化以減少使用者必須輸入的資料次數。安裝程式現在會根據所選取的語系自動判斷系統的國家及時區，或是在無法判斷時提供精簡的選擇列表。但使用者在必要時還是可以使用模糊的組合。
       </p>
      </item>
      <tag>
        全域系統在區域化上的改良
      </tag>
      <item>
       <p>
         以前由 <package>localization-config</package> 
         工具所負責的大部份的國際化及區域化之主題現在已包含於 Debian 
         安裝工具之中或是包含於該套件裡。也就是說，在標準及桌面環境裡，選擇某一個語系會自動得安裝該語系所需的像是辭典、文件、字型... 
         等等套件。有些像是紙張大小的設定以及某些語系的部份進階 X Windows 
         鍵盤設置已不再被自動設定了。
       </p>
       <p>
         請注意到，只有在安裝過程中就能取得各語系特定的套件之時，這些套件才會被自動安裝進來。
       </p>
      </item>
       ]]>

     </taglist>
    </p>
   </sect1>
   <sect1 id="inst-auto">
    <heading>
      自動安裝
    </heading>
    <p>
      在之前的章節中所提到的眾多改變，其中也包含了在安裝程式裡利用事先準備好的設定檔來進行自動安裝。這意謂著，如果您手上有著用來和 
      &oldreleasename; 
      安裝程式搭配使用的事先準備好的設定檔，若未經修改將難以和新的安裝程式搭配使用。
    </p>
    <p>
      好消息是，在 <url id="&url-install-manual;" name="安裝指引"> 
      上有獨立的附錄，上有如何使用事先準備好的設定檔之大量資訊。
    </p>
    <p>
      &releasename; 
      版的安裝程式也包含了一些允許更為多樣且更容易進行自動安裝之新奇功能。它也新支援了一些進階的磁碟分割方式，像是使用 
      RAID、LVM 及加密的 LVM。請參關相關文件以取得更詳盡的資訊。
    </p>
   </sect1>
  </sect>
  <sect id="popcon">
   <heading>
     熱門套件競賽
   </heading>
   <p>
     安裝系統將會再次安裝  <package>popularity-contest</package> 套件。在 
     &oldreleasename; 
     裡，預設上並不會安裝這個套件，但會在更舊的系統上被安裝。
   </p>
   <p>
     <package>popularity-contest</package> 能夠向 Debian 
     專案提供在發行版中哪些套件正在被使用著的這個極有價值資訊。這個資訊主要是用來決定該將哪些套件放入安裝光碟的優先順序。而且 
     Debian 
     的開發者也常常根據它的報告來決定是否該放棄某個已經沒有維護者的套件。
   </p>
   <p>
     由 <package>popularity-contest</package> 
     所提交的報告是匿名進行的。我們將會非常感激於如果您能參與這個官方的調查工作，這將有助於促使 
     Debian 進步。
   </p>
  </sect>
 </chapt>
 <chapt id="upgrading">
  <heading>
    從先前的發行版進行升級
  </heading>
  <sect id="backup">
   <heading>
     系統升級之準備
   </heading>
   <p>
     在進行升級之前，我們建議您能同時參閱 <ref id="information"> 
     所提供的資訊。在那個章節裡包含了一些和升級程序無直接相關，但在開始之前您仍然得要知道的可能潛在問題。
   </p>
   <sect1 id="data-backup">
    <heading>
      備份資料及設定資訊
    </heading>
    <p>
      在升級您的系統之前，我們強烈建議您能進行一次完整的備份，或至少您也應該把那些絕對不能出任何差錯的資料和設定資訊給備份起來。升級時所使用的工具和升級過程應該不會出什麼差錯，但在升級過程中若發生了什麼硬體錯誤可能會導致系統嚴重受損。
    </p>
    <p>
      您可能會想進行備份的內容主要包括了 <file>/etc</file> 目錄和 
      <file>/var/lib/dpkg</file> 目錄中的內容，以及 <tt>dpkg 
      --get-selections "*"</tt>（請別忘了雙引號）所輸出的資訊。
    </p>
    <p>
      這個升級的程序它本身並不會修改在 <file>/home</file> 
      目錄裡的任何資料，但是已知有某些應用程式（例如：部份的 Mozilla 
      家族程式及 GNOME、KDE 
      桌面環境）在使用者第一次以新的版本啟動時，會以新的預設值覆蓋使用者原有的設定。為了以防萬一，您也許想要針對在使用者的主目錄裡的隱藏檔案及目錄（"dotfiles"，以 
      . 
      開頭的檔案或目錄）進行備份。這個備份可以用來回復或重新建立舊有的設定。您也許有必要讓使用者知道有這個問題存在。
    </p>
    <p>
      任何套件安裝的動作都需要有系統管理者的權限才能進行，所以您必須以 root 
      登入，或使用 <prgn>su</prgn> 或 <prgn>sudo</prgn> 來取得所需的權限。
    </p>
    <p>
      升級有其必要條件，您應該在實地進行升級之前先行確認一次。
    </p>
   </sect1>
   <sect1>
    <heading>
      事先知會使用者
    </heading>
    <p>
      您應該在進行任何升級之前先把您的計畫告知所有使用者，雖然一些像是利用 
      <prgn>ssh</prgn> 
      連線來從遠端存取系統的使用者在升級過程中可能不會發現什麼異狀，且他們的工作也應該不會因而中斷。如果您希望能採取額外的預防措施的話，請在升級前備份或卸載使用者的分割區 
      (<file>/home</file>)。除非您計劃同時進行 Kernel 
      的升級，否則您在升級前後通常並不需要重新開機。
    </p>
    <p>
      如果您希望能採取額外的預防措施的話，請在升級前備份或卸載使用者的分割區。
    </p>
    <p>
      在升級至 &releasename; 的同時，您大概也必須進行 Kernel 
      的升級。因此重新開機通常是無可避免的。一般而言，這將會在升級完畢後進行。
    </p>
   </sect1>
   <sect1 id="recovery">
    <heading>
      回復準備
    </heading>
    <p>
      由於 &oldreleasename; 和 &releasename; 間的 kernel 
      在像是驅動程式、硬體偵測、命名方式及裝置檔的順序上之變動太大了，在升級完成之後、重新啟動系統之時，您必須冒著可能會遭遇問題的風險。一些已知的可能問題記述於發行情報中的這個及下個章節。
    </p>
    <p>
      也因此，當您的系統可能會再也無法開機，或者是無法啟用網路（對於遠端管理系統而言）之時，確保您有辨法進行回復就變得很重要了。
    </p>
    <p>
      如果您是藉由 <prgn>ssh</prgn> 
      連線來從遠端進行更新的話，在此非常建議您能採取必要的預防措施，讓您能有辨法經由遠端序列終端來存取伺服器。這是因為偶爾在升級 
      Kernel 並重新開機之後，有些裝置的名稱被改變了（如同  <ref 
      id="device-reorder"> 
      裡的說明），導致您得經由本機主控台才能修正系統的設定。同樣的，如果系統在升級途中意外得重新開機了，您將可能得由本機主控台才能進行修復。
    </p>
    <p>
      第一個最顯而易見的方法是試著用您舊的 Kernel 
      開機，儘管如此，由於在本文件其它地方所陳述的種種原因，這個方法無法保証一定有效。
    </p>
    <p>
      如果這個方法失敗了，您必須另尋其它方式來啟動您的系統，讓您可以進行存取並修復它。方法之一是利用特定的救援影像檔或 
      Linux 的 live CD。利用它們開機之後，您應該可以掛載您的 root 檔案系統並 
      <tt>chroot</tt> 進去以檢查並修復問題。
    </p>
    <p>
      另一個我們建議的作法是使用 &releasename; Debian 安裝程式的 <em>rescue 
      mode</em>。使用安裝程式的好處是您可以在它所提供的許多安裝方式中選擇一個最符合您的狀況的方式。請參閱在 
      <url id="&url-install-manual;" name="安裝指引"> 的第 8 節 
      "回復毀損的系統" 及 <url 
      id="http://wiki.debian.org/DebianInstaller/FAQ" name="Debian 
      安裝程式的常見問題解答"> 以取得更詳盡的資訊。
    </p>
     <![ %uses-initrd [

    <sect2 id="recovery-initrd">
     <heading>
       在開機過程中使用 initrd 的除錯介面 (debug shell)
     </heading>
     <p>
       <package>initramfs-tools</package> 會在它所產生的 initrds 
       中放入一個除錯介面<footnote><p>這個功能可以在開機參數上加上 
       <tt>panic=0</tt> 
       參數來關閉它。</p></footnote>。比如說，當您無法掛載您的 root 
       檔案系統時，您會進入這個提供了一些基本功能的除錯介面，以用來追蹤問題並試著修復它。
     </p>
     <p>
       基本的檢查包括了：在 <file>/dev</file> 
       中是否有出現正確的裝置檔；已載入了哪些模組（<tt>cat 
       /proc/modules</tt>）；在 <prgn>dmesg</prgn> 
       的輸出裡是否有驅動無法載入的資訊。在 <prgn>dmesg</prgn> 
       的輸出裡也會顯示了哪個裝置檔已被指定為使用哪個磁碟；您應該把它和 
       <tt>echo $ROOT</tt> 的輸出進行比較以確保 root 
       檔案系統是掛載在正確的裝置上。
     </p>
     <p>
       如果您已採取行動解決問題，鍵入 <tt>exit</tt> 
       將會跳出除錯介面並會由開機失敗的地方繼續進行開機。當然了，您也必須由根本修復問題並重新產生 
       initrd，讓下次開機時不會又因而失敗。
     </p>
    </sect2>
     ]]>

   </sect1>
   <sect1 id="upgrade_preparations">
    <heading>
      準備一個安全無虞的環境以進行升級
    </heading>
    <p>
      您應該在本機透過文字模式的虛擬主控台（或直接連線的序列終端機）、或由遠端透過 
      <prgn>ssh</prgn> 連線來進行發行版間的升級。
    </p>
    <p>
      在以遠端進行更新時，為了能得到更多的安全保障，在此建議您在 
      <prgn>screen</prgn> 
      程式所提供的虛擬主控台裡進行升級程序。它能夠讓您一再地重複連線，以確保如果遠端連線中斷時，也不會干擾到升級程序的進行。
    </p>
    <p>
      <strong>極重要！</strong>您<em>不應該</em>透過 
      <prgn>telnet</prgn>、<prgn>rlogin</prgn>、<prgn>rsh</prgn>，或是由您要進行升級的機器上的 
      <prgn>xdm</prgn>、<prgn>gdm</prgn> 或 <prgn>kdm</prgn> 等等所管理的 X 
      行程來進行升級。這是因為這些服務在升級的過程中都可能會被中斷，因而將會留下了一個只完成部分升級而<em>無法存取</em>的系統。
    </p>
   </sect1>
   <sect1 id="glibc-kernel">
    <heading>
      已不再支援 2.2 系列的 Kernel
    </heading>
    <p>
      如果您所運行的 Kernel 版本比 2.4.1 還舊，在升級 
      <package>glibc</package> 之前，您必須至少升級至 2.4 系列的 
      Kernel。這個動作必須在開始進行升級之前完成。在此建議您能直接升級至 
      &oldreleasename; 所提供的 2.6.8 版的 Kernel，而不是升級至 2.4 版的 
      Kernel。
    </p>
   </sect1>
  </sect>
  <sect id="system-status">
   <heading>
     檢查系統的狀況
   </heading>
   <p>
     在這個章節中所說明的升級過程是專門為『純粹』的 &oldreleasename; 
     所寫的，也就是在系統中沒有安裝任何其它協力套件。更明確的說，已知在轉換至 
     X.org 時 (<ref id="xorg">)，那些將程式安裝在 
     <file>/usr/X11R6/bin/</file> 
     下的協力套件將會在升級過程中發生問題。為了確保升級程序能平順進行，您也許會希望在升級之前先從系統裡移除那些協力套件。
   </p>
   <p>
     而在這個過程中也假設您的系統已更新至 &oldreleasename; 
     的最新釋出版本。如果您尚未完成或是您根本無從確定，請遵循在 <ref 
     id="old-upgrade"> 裡的相關說明。
   </p>
   <sect1>
    <heading>
      重新檢視在套件管理程式的懸而未決之動作
    </heading>
    <p>
      在某些情況下，使用 <prgn>apt-get</prgn> 而不是 <prgn>aptitude</prgn> 
      來安裝套件可能會讓 <prgn>aptitude</prgn> 認為某個套件是 "無用的" 
      且會計劃要將其移除。一般來說，您應該在進行升級程序前確保系統已完全更新且 
      "乾淨"。
    </p>
    <p>
      因此，您必須重新檢視是否有什麼懸而未決的動作尚存在套件管理程式 
      <prgn>aptitude</prgn> 
      裡。如果在套件管理程式裡有什麼套件尚待移除或更新，將會對升級程序造成不利的影響。請注意到，在進行修正時，您的 
      <file>sources.list</file> 必須還是指向 
      <em>&oldreleasename</em>，而不是 <em>stable</em> 或 
      <em>&releasename;</em>；請參閱 <ref id="old-sources">。
    </p>
    <p>
      若要進行，您必須執行 <prgn>aptitude</prgn> 的使用者介面並按下 'g' 
      ("Go")。如果它顯示了任何的動作，您必須重新檢視並進行修正或執行所推薦的動作。如果沒有任何動作將要進行，您會立即得到一個訊息寫著 
      "沒有套件尚待安裝、移除或更新"。
    </p>
   </sect1>
   <sect1>
    <heading>
      關閉 APT 的釘鎖 (Pinning) 功能
    </heading>
    <p>
      如果您將 APT 設定為可以安裝除了 stable 
      發行版之外的套件，（像是：testing），您可能必須修改您的 APT 的釘鎖 
      (Pinning) 設定（儲存於 <file>/etc/apt/preferences</file> 
      中）來讓將要進行升級的套件能夠升級至新的 stable 發行版。您可以在 
      <manref name="apt_preferences" section="5"> 取得 APT 
      的釘鎖功能的更多詳盡資訊。
    </p>
   </sect1>
   <sect1 id="package_status">
    <heading>
      檢查套件的狀態
    </heading>
    <p>
      不論您是用什麼方式進行系統的更新，我們都建議您先檢查所有套件的狀態，並確認所有的套件都能夠順利升級。以下的指令會顯示所有狀態為半安裝 
      (Half-Installed) 或設定失敗 (Failed-Config) 或有其他任何錯誤的套件。
     <example>
# dpkg --audit
          </example>
    </p>
    <p>
      除此之外，檢查系統中所有套件狀態的方法還包括使用使用 
      <prgn>dselect</prgn>、<prgn>aptitude</prgn>、或是利用以下的指令：
     <example>
# dpkg -l | pager 
          </example>
      或是
     <example>
# dpkg --get-selections "*" &gt; ~/curr-pkgs.txt
          </example>
    </p>
    <p>
      最佳的做法是在進行系統升級前將所有的套件解除保留 (hold) 
      狀態。如果在升級過程中有任何的關鍵套件的狀態被設定為保留，那麼升級的作業就會失敗。
    </p>
    <p>
      請注意到，<prgn>aptitude</prgn> 使用了和 <prgn>apt-get</prgn> 及 
      <prgn>dselect</prgn> 
      迥然不同的方式來登錄哪些是保留套件。您可以使用以下方式來確認哪些套件是被保留住的：
     <example>
# aptitude search "~ahold" | grep "^.h"
          </example>
    </p>
    <p>
      如果您想要檢查那些套件是被 <prgn>apt-get</prgn> 所保留住的，請使用：
     <example>
# dpkg --get-selections | grep hold
          </example>
    </p>
    <p>
      如果您自行在系統中變更並重新編譯了某個套件，但卻沒有將其更名或在版本號碼中使用 
      epoch（自行定義版本號碼），那您就必須把它設定為保留狀態，以防止它被升級到新的版本。
    </p>
    <p>
      若想更改那些在 <prgn>aptitude</prgn> 裡被保留住的套件的狀態，請使用：
     <example>
# aptitude hold <var>package_name</var>
          </example>
      將 <tt>hold</tt> 以 <tt>unhold</tt> 取代，以消除保留狀態。
    </p>
    <p>
      如果還有什麼地方尚待修正，最好再次確認您的 <file>sources.list</file> 
      仍然是指向 &oldreleasename;，如同 <ref id="old-sources"> 裡的說明。
    </p>
   </sect1>
   <sect1 id="backports">
    <heading>
      非官方的來源及 backports
    </heading>
    <p>
      如果在您的系統裡安裝了不是由 Debian 
      所提供的套件，您必須要知道，在升級的過程中它們可能會因為相依性的關係而被移除掉。如果這些套件是先在 
      <file>/etc/apt/sources.list</file> 
      新增了額外的套件檔案庫然後再加以安裝的，您應該檢查一下那個檔案庫是否也提供了特別為 
      &releasename; 而編譯的套件，在替 Debian 
      變更套件來源時也同時適當得修改這些套件的來源項目。
    </p>
    <p>
      也許有些使用者會在他們的 &oldreleasename; 上安裝了在 Debian 
      <em>已有</em>套件的非官方但 "較新" 的 backported 
      版本。這些套件很可能在升級的時候產生檔案衝突的問題，<footnote><p>因為 
      Debian 
      的套件管理程式不允許某一個套件移除或取代了屬於另一個套件的檔案，除非那一個套件本來就是用來取代這個套件的。</p></footnote>。在 
      <ref id="trouble"> 那一節有一些當發生了檔案衝突時該如何解決的資訊。
    </p>
   </sect1>
  </sect>
  <sect id="handle-conflict">
   <heading>
     手動將套件解除標註
   </heading>
   <p>
     為了避免 <prgn>aptitude</prgn> 
     將某些因為相依性而安裝進來的套件移除掉，您必須手動將這些套件解除標註為<em>自動</em>套件。在安裝桌面時，這包含了 
     OpenOffice 和 Vim：
    <example>
# aptitude unmarkauto openoffice.org vim  
</example>
   </p>
   <p>
     以及 2.6 Kernel 影像檔，如果您是使用 Kernel 虛擬套件來安裝的話：
    <example>
# aptitude unmarkauto $(dpkg-query -W 'kernel-image-2.6.*' | cut -f1)
</example>
   </p>
   <p>
     請注意到：您可以藉由以下指令來重新檢視有哪些套件是被標註成<em>自動</em>的：
    <example>
# aptitude search 'i~M &lt;package name&gt;'
</example>
   </p>
  </sect>
  <sect id="upgrade-process">
   <heading>
     APT 來源之準備工作
   </heading>
   <p>
     在開始進行升級之前，您必須先在 <package>apt</package> 的設定檔 
     <file>/etc/apt/sources.list</file> 中設定套件列表。
   </p>
   <p>
     <package>apt</package> 會把所有可以在 "<tt>deb</tt>" 
     行中找到的套件全數列入考慮，並安裝其中版本號碼最高的套件，且會依序由列出的來源中取得套件。（也因此，當您是由許多不同位置來取得套件時，您可以讓系統依先由本機硬碟，接下來是由光碟片，然後是遠端 
     HTTP/FTP 的順序來取得套件）
   </p>
   <p>
     發行版通常可以使用它的代碼（如，&oldreleasename;、&releasename;）或是它的狀態名稱（如，oldstable、stable、testing、unstable）來表示。使用發行版的代碼有個好處是您將不用為了新的發行版的到來而感到不安，這也是為什麼會在此提出這個技巧的原因。理所當然的，這也表示了您必須自行去注意發行版是何時發佈的。如果您是替而使用狀態名稱的，在新的發行版發佈的同時，您將會立即發覺大量套件已有新的版本可供更新。
   </p>
   <sect1 id="network">
    <heading>
      加入網際網路上的 APT 套件來源
    </heading>
    <p>
      雖然系統的預設設定是使用 Debian 
      在網際網路上的主要伺服器來進行安裝，但您還是可能會希望修改 
      <file>/etc/apt/sources.list</file> 
      來改為使用在網路上離您最近的其它鏡像站。
    </p>
    <p>
      您也可以在 <url id="&url-debian-mirrors;"> 取得 Debian 的 HTTP 或 FTP 
      鏡像站的位址（請參考【Full list of mirrors】小節）。HTTP 
      鏡像站的傳輸速度通常會比 FTP 鏡像站來得快。
    </p>
    <p>
      舉例來說，假設離您最近的 Debian 鏡像站是 
      <tt>&url-debian-mirror-eg;/</tt>。當您透過網頁瀏覽器或 FTP 
      程式來檢視這個網站時，您會發現其中的主要目錄架構會像是這個樣子：
     <example>
&url-debian-mirror-eg;/dists/&releasename;/main/binary-&architecture;/...
&url-debian-mirror-eg;/dists/&releasename;/contrib/binary-&architecture;/...
           </example>
    </p>
    <p>
      為了要讓 <prgn>apt</prgn> 能夠使用這個鏡像站，請把以下的這一行加入您的 
      <file>sources.list</file> 檔案之中：
     <example>
deb &url-debian-mirror-eg; &releasename; main contrib
           </example>
    </p>
    <p>
      請注意，`<tt>dists</tt>' 
      將會被自動加到路徑中，而在發佈代號之後的參數則會被用來展開成多個不同目錄的路徑。
    </p>
    <p>
      在加入了新的來源之後，請在 <file>sources.list</file> 中原本的 
      "<tt>deb</tt>" 項目前加上井字符號 (<tt>#</tt>) 以關閉這些套件來源。
    </p>
   </sect1>
   <sect1 id="localmirror">
    <heading>
      增加 APT 的本機鏡像套件來源
    </heading>
    <p>
      您可能也會想修改 <file>/etc/apt/sources.list</file> 
      中的設定，以使用本機（像是透過 NFS 掛載的）磁碟上的鏡像資料來取代透過 
      HTTP 或 FTP 存取遠端的套件鏡像站。
    </p>
    <p>
      舉例來說，如果您的套件鏡像是放在 <file>/var/ftp/debian/</file> 
      之下，而主要的目錄看起來是像這樣的話：
     <example>
/var/ftp/debian/dists/&releasename;/main/binary-&architecture;/...
/var/ftp/debian/dists/&releasename;/contrib/binary-&architecture;/...
           </example>
    </p>
    <p>
      如果要和 <prgn>apt</prgn> 搭配使用，請把下行加入 
      <file>sources.list</file> 檔案之中：
     <example>
deb file:/var/ftp/debian &releasename; main contrib
           </example>
    </p>
    <p>
      請注意，`<tt>dists</tt>' 
      將會被自動加到路徑中，而在發佈代號之後的參數則會被用來展開成多個不同目錄的路徑。
    </p>
    <p>
      在加入了新的來源之後，請在 <file>sources.list</file> 中原本的 
      "<tt>deb</tt>" 項目前加上井字符號 (<tt>#</tt>) 以關閉這些套件來源。
    </p>
   </sect1>
   <sect1 id="cdroms">
    <heading>
      增加 APT 的 CD-ROM 或 DVD 的套件來源
    </heading>
    <p>
      如果光碟是<em>唯一</em>您想使用的媒體，請在 
      <file>/etc/apt/sources.list</file> 中原有的 "<tt>deb</tt>" 
      設定行前加入井字符號 (<tt>#</tt>) 以關閉這些套件來源。
    </p>
    <p>
      請確定在 <file>/etc/fstab</file> 中有著能讓您的光碟機掛載在 
      <file>/cdrom</file> 這個掛載點下的項目（<prgn>apt-cdrom</prgn> 
      限定掛載點必須是 
      <file>/cdrom</file>）。舉例來說，如果您的光碟機的裝置是 
      <file>/dev/hdc</file>，那麼 <file>/etc/fstab</file> 
      中就應該要有像這樣的一行：
     <example>
/dev/hdc /cdrom auto defaults,noauto,ro 0 0
          </example>
    </p>
    <p>
      請注意在第四欄的 <tt>defaults,noauto,ro</tt> 
      的字中間一定<em>不能參雜空白字元</em>。
    </p>
    <p>
      要確認您的設定是否正確，請放入一張光碟片，並試著執行
     <example>
# mount /cdrom    # 這樣將會將這張 CD 掛載在該掛載點上
# ls -alF /cdrom  # 這樣將會列出 CD 的根目錄
# umount /cdrom   # 這樣將會卸載這張 CD
          </example>
    </p>
    <p>
      接下來對每一張 Debian 的程式光碟執行
     <example>
# apt-cdrom add
          </example>
      來把每一張光碟的資料加到 APT 的資料庫中。
    </p>
   </sect1>
  </sect>
  <sect id="upgradingpackages">
   <heading>
     進行套件的升級
   </heading>
   <p>
     若要從舊有的 &debian; 發行套件進行升級時，建議的方法是使用套件管理工具 
     <prgn>aptitude</prgn>。這個程式在套件安裝上會比起直接執行 
     <prgn>apt-get</prgn> 來得安全。
   </p>
   <p>
     不要忘了用類似以下的指令把所有會用到的分割區（特別是 <file>/usr</file> 
     和 root 分割區）重新以可讀寫的模式掛載：
    <example>
# mount -o remount,rw /<var>mountpoint</var>
          </example>
   </p>
   <p>
     接下來，您必須再次確認在 <file>/etc/apt/sources.list</file> 中的 APT 
     來源項目是指向 "<tt>&releasename;</tt>" 或是 
     <tt>'stable'</tt>，且應該沒有任何來源項目是指向 
     &oldreleasename;。請注意，CD-ROM 的來源項目通常會指向 
     "<tt>unstable</tt>"，雖然您可能會覺得這有點奇怪，但您<em>不</em>應該去加以更動。
   </p>
   <sect1 id="record_session">
    <heading>
      記錄歷程
    </heading>
    <p>
      我們強烈建議您使用 <prgn>/usr/bin/script</prgn> 
      這個程式來記錄升級的完整過程。因為一旦發生了任何問題，您手上就會有發生了什麼問題的確實記錄，而在必要之時，在錯誤報告中也能據此提供確實的資訊。若要開始進行記錄，請使用
     <example>
# script -t 2>~/upgrade-&releasename;.time -a ~/upgrade-&releasename;.script
          </example>
      或類似的指令。請不要把記錄檔放在像是 <file>/tmp</file> 或 
      <file>/var/tmp</file> 
      之類的暫存目錄下（這些目錄中的檔案可能會在升級的過程中或在重新開機時被清除掉）。
    </p>
    <p>
      而這些記錄檔也可以讓您重新檢視那些已被捲出螢幕之外的訊息。請切換至第二個虛擬終端機 
      VT2（使用 <tt>Alt-F2</tt>），在登入之後，使用 <tt>less -R 
      ~root/upgrade-&releasename;.script</tt> 來瀏覽這個檔案。
    </p>
    <p>
      在您完成升級作業後，您可以藉由在命令列上鍵入 <tt>exit</tt> 來關閉 
      <prgn>script</prgn>。
    </p>
    <p>
      如果您在 <prgn>script</prgn> 上使用了 <em>-t</em> 參數，您可以利用 
      <prgn>scriptreplay</prgn> 程式來重新播放整個過程：
     <example>
# scriptreplay ~/upgrade-&releasename;.time ~/upgrade-&releasename;.script
          </example>
    </p>
   </sect1>
   <sect1 id="updating_lists">
    <heading>
      更新套件的列表
    </heading>
    <p>
      首先，必須先取得在新釋出版上的可取用的套件列表。這可以利用以下指令進行：
    </p>
    <p>
     <example>
# aptitude update
	  </example>
    </p>
    <p>
      首次執行時，新的來源若有更新將會顯示一些關於可取得來源之警告訊息。這些警告訊息是無關緊要的，且如果您再次執行該指令，這些訊息將不會再出現。
    </p>
   </sect1>
   <sect1>
    <heading>
      確認您有足夠的空間可以用來進行升級
    </heading>
    <p>
      在進行系統升級之前，您必須確認在您開始進行 <ref id="upgrading_other"> 
      上寫的全系統升級之時，您的系統有著足夠的硬碟空間。首先，所有由網路所取得的安裝所需的套件都會儲放在 
      <file>/var/cache/apt/archives</file> 裡（以及子目錄 
      <file>partial/</file>，在進行下載時），所以您必須確認在包含了 
      <file>/var/</file> 
      的檔案系統分割區裡必須擁有足夠的硬碟空間以容納那些將會安裝到您的系統上而暫時下載的套件。在下載完成之後，在其它的檔案系統分割區裡您應該會需要更多的空間以用來安裝升級套件（它們很可能會包含需要更大空間的檔案及資料）以及在升級過程中會一併安裝的新套件。如果您的系統並沒有足夠的空間，您可能在最後得到的是一個未能完全升級卻又難以還原的系統。
    </p>
    <p>
      <prgn>aptitude</prgn> 及 <prgn>apt</prgn> 
      都會替您顯示在安裝時所需的硬碟空間之詳盡資訊。在進行升級之前，您可以得到這些估算值。請執行：
    </p>
    <p>
     <example>
# aptitude -y -s -f --with-recommends dist-upgrade
[ ... ]
更新了 XXX、新安裝了 XXX、要移除 XXX 而 XXX 將不會被升級。
必須下載 xx.xMB/yyyMB 的檔案。在解壓縮之後將會用掉 AAAMB。
將會進行 下載/安裝/移除 套件。
       </example>
    </p>
    <p>
      如果您沒有足夠的空間可供升級，請在事先就清出磁碟空間。您可以：
    </p>
    <p>
     <list>
      <item>
       <p>
         移除那些之前為了用來安裝而下載至 
         <file>/var/cache/apt/archive</file> 的套件。執行 <prgn>apt-get 
         clean</prgn> 或 <prgn>aptitude clean</prgn> 
         將會清除之前所下載的所有套件檔。
       </p>
      </item>
      <item>
       <p>
         移除那些您再也用不著的舊套件。如果您安裝了 
         <prgn>popularity-contest</prgn>，您可以使用 
         <prgn>popcon-largest-unused</prgn> 
         來列出那些在系統裡佔有空間但您並用不著的套件。您也可以利用 
         <prgn>deborphan</prgn> 或 <prgn>debfoster</prgn> 
         來找出孤兒套件。（請參閱：<ref id="obsolete">）。而或者，您也可以以 
         "虛擬模式" 啟動 
         <prgn>aptitude</prgn>，並在【已廢棄及由本機建立的套件】裡尋找廢棄套件。
       </p>
      </item>
      <item>
       <p>
         移除佔用了太多空間但目前尚用不著的套件。（您可以在升級後再把它們重新安裝回來）。您可以利用 
         <prgn>dpigs</prgn>（包含於 <package>debian-goodies</package> 
         之中）或 <prgn>wajig</prgn>（執行 <tt>wajig 
         size</tt>）來列出佔用最多磁碟空間的套件。
       </p>
      </item>
      <item>
       <p>
         把存放在 <file>/var/log/</file> 
         裡的系統記錄檔暫時移至其它的系統，或是乾脆刪除它們。
       </p>
      </item>
     </list>
    </p>
    <p>
      請注意到，為了能夠安全得移除套件，最好將您的 <file>sources.list</file> 
      換回 &oldreleasename;，如同 <ref id="old-sources"> 裡的說明。
    </p>
   </sect1>
   <sect1 id="minimal_upgrade">
    <heading>
      系統最低限度升級
    </heading>
    <p>
      由於在 &oldreleasename; 和 &releasename; 
      間有不少必需套件是相互衝突的，直接執行 <tt>aptitude dist-upgrade</tt> 
      常常會把一堆您希望保留的套件移除掉。因而我們在此建議進行二段式升級，首先是最低限度昇級以克服衝突問題，然後再是完整的 
      <tt>dist-upgrade</tt>。
    </p>
    <p>
      首先，執行：
     <example>
# aptitude upgrade
          </example>
    </p>
    <p>
      這樣會將那些在升級過程中不需要移除或安裝到其它套件的套件進行升級。
    </p>
    <p>
      利用以下指令來進行最低限度升級：
     <example>
# aptitude install initrd-tools
          </example>
    </p>
    <p>
      這個步驟將會自動得更新 <package>libc6</package> 及 
      <package>locales</package>，且會將支援 SELinux 
      所需的檔案安裝進來。此時，有些正在運行中的服務會被重新啟動，包括 
      <prgn>xdm</prgn>、<prgn>gdm</prgn> 及 
      <prgn>kdm</prgn>，影響所及將導致本機的 X11 連線將會因而被中斷。
    </p>
    <p>
      下個步驟會根據您所安裝的套件組合之不同而有所不同。本發行情報在關於該採取什麼樣的方式上是給予最常見的建議。但為確保萬一，建議您在實地進行之前先試過種種不同手法所建議的套件移除方案。
    </p>
    <p>
      一些可能會被移除掉的常見套件包括了 
      <package>base-config</package>、<package>hotplug</package>、<package>xlibs</package>、<package>netkit-inetd</package>、<package>python2.3</package>、<package>xfree86-common</package> 
      及 <package>xserver-common</package>。您可以在 <ref id="obsolete"> 
      找到更完整的 &releasename; 的廢棄套件的列表。
    </p>
    <sect2 id="minimal_upgrade_desktop">
     <heading>
       升級桌面系統
     </heading>
     <p>
       升級途徑已被適度修改，讓它能和安裝了 <tt>desktop</tt> 主題的 sarge 
       系統搭配運作。在安裝了 <tt>desktop</tt> 主題或是安裝了 <tt>gnome</tt> 
       或 <tt>kde</tt> 套件的系統上，它可能是提供了最佳解決方案的辨法了。
     </p>
     <p>
       如果您並未安裝 <package>libfam0c102</package> 及 
       <package>xlibmesa-glu</package> 
       套件，這可能並<em>不是</em>應該採用的正確方案。
      <example>
# dpkg -l libfam0c102 | grep ^ii
# dpkg -l xlibmesa-glu | grep ^ii
          </example>
     </p>
     <p>
       如果您安裝了完整的桌面環境，請執行：
      <example>
# aptitude install libfam0 xlibmesa-glu
	  </example>
     </p>
    </sect2>
    <sect2 id="minimal_upgrade_x_server">
     <heading>
       升級安裝了部份 X 套件的系統
     </heading>
     <p>
       對於安裝了部份的 X 
       套件卻沒有安裝完整的<tt>桌面</tt>主題的系統，升級方式也有所不同。這個方式一般適用於安裝了 
       <package>xfree86-common</package>，其中包含了一些安裝了 
       <package>tasksel</package> 
       裡的伺服器主題的伺服器系統，因為這些主題裡可能會包含了圖形的管理工具。這對於那些有執行 
       X，但並沒有安裝完整的<tt>桌面</tt>主題的系統可能是最佳的方法。
      <example>
# dpkg -l xfree86-common | grep ^ii
        </example>
     </p>
     <p>
       首先，請確認您是否安裝了 <package>libfam0c102</package> 及 
       <package>xlibmesa-glu</package> 套件。
      <example>
# dpkg -l libfam0c102 | grep ^ii
# dpkg -l xlibmesa-glu | grep ^ii
          </example>
     </p>
     <p>
       如果您並未安裝 <package>libfam0c102</package>，請去掉下面的指令中的 
       <package>libfam0</package>。如果您並未安裝 
       <package>xlibmesa-glu</package>，請將其從下面的指令中去掉。<footnote><p>這個指令會確認您是否應當安裝 
       libfam0 及 xlibmesa-glu，並會自動替您選擇：<example># aptitude 
       install x11-common \ $(dpkg-query --showformat '${Package} 
       ${Status}\n' -W libfam0c102 xlibmesa-glu \ | grep 'ok installed$' | 
       sed -e's/ .*//; s/c102//') </example> </p></footnote>
      <example>
# aptitude install x11-common <var>libfam0</var> <var>xlibmesa-glu</var>
          </example>
     </p>
     <p>
       請注意到，安裝 <package>libfam0</package> 
       的同時也將會把『檔案變化監看程式』(<package>fam</package>) 以及『RPC 
       連接埠對應程式』(<package>portmap</package>) 
       安裝進來，若您的系統上尚未安裝的話。這兩個套件都會在系統中啟用新的網路服務程式，雖然他們都能夠設定為使用（內部的）loopback 
       網路裝置。
     </p>
    </sect2>
    <sect2 id="minimal_upgrade_server">
     <heading>
       升級沒有安裝任何 X 的系統
     </heading>
     <p>
       在沒有 X 的系統上，就沒有必要執行任何額外的 aptitude 
       安裝指令了。您可以直接進行下一個步驟。
     </p>
    </sect2>
   </sect1>
   <sect1 id="upgrading_kernel">
    <heading>
      升級 Kernel
    </heading>
    <p>
      在 &releasename; 所搭載的 <package>udev</package> 版本並不支援比 
      2.6.15 版更早期的 Kernel（也包含了 &oldreleasename; 的 2.6.8 版的 
      Kernel）。在此同時，在 &oldreleasename; 所搭載的 
      <package>udev</package> 版本也無法正常地和最新的 Kernel 
      搭配使用。此外，安裝 &releasename; 版的 <package>udev</package> 
      將會強迫移除 Linux 2.4 kernel 所需的 <package>hotplug</package>。
    </p>
    <p>
      也因此在進行升級後，可能再也無法利用之前的 kernel 
      套件來開機了。同樣的，在進行升級時，當 <package>udev</package> 
      已升級、但卻未安裝最新版的 kernel 
      期間有個空窗期，如果系統安裝到一半，卻在這個節骨眼系統重新開機了，它可能再也無法開機，因為無法偵測並載入正確的驅動模組。（請參閱 
      <ref id="upgrade_preparations"> 
      裡，一些當您是用遠端進行升級的一些建議及可行的預防方案。）
    </p>
    <p>
      除非您的系統安裝了<tt>桌面</tt>主題，或有其它的套件會導致必須移除大量套件，在此還是建議您能在此時個別得進行 
      kernel 的升級。
    </p>
    <p>
      要進行 kernel 的升級，請執行：
     <example>
# aptitude install linux-image-2.6-<var>flavor</var>
          </example>
      請參閱 <ref id="kernel-metapackage"> 來幫助您決定您該安裝的 kernel 
      套件的類別。
    </p>
    <p>
      對於桌面而言，糟糕的是很難去確保在安裝了新的 <package>udev</package> 
      後，是否會立刻安裝新的 kernel 套件，所以無法確認在您的系統上僅安裝了 
      kernel、但卻沒有完整的 hotplug 支援的空窗期到底是多長。請參閱 <ref 
      id="newkernel"> 以取得如何將您的系統設定為不需依賴 hotplug 
      就能開機之資訊。
    </p>
   </sect1>
   <sect1 id="upgrading_other">
    <heading>
      升級系統的其它部份
    </heading>
    <p>
      那麼，現在已經準備好可以進行升級作業的重頭戲了。請執行：
    </p>
    <p>
     <example>
# aptitude dist-upgrade
	  </example>
    </p>
    <p>
      這將會在您的系統上進行完整的更新，也就是安裝所有套件目前所提供的最新版本，並解決套件在不同發行版之間可能會有的相依性問題。如果有必要的話，它也會安裝一些新的套件（通常是新版的函式庫或是被更名的套件），並移除任何和新版套件發生衝突的過時套件。
    </p>
    <p>
      如果您是從光碟組來進行升級的話，系統將會在升級進行時不時要求您放入某張特定的光碟片。您可能會需要反覆放入同一張光碟數次；這是由於相關的套件被分散在多張光碟之中所造成的。
    </p>
    <p>
      如果升級某些已安裝的套件至新版本時會改變其他套件的安裝狀態的話，這些套件就會被保留在原來的狀態（並顯示為 
      "留置, held back"）。可以使用 <prgn>aptitude</prgn> 
      選擇這些套件並進行安裝，或是試著鍵入 <tt>aptitude -f install 
      <var>package</var></tt>，就能夠解決這個問題。
    </p>
   </sect1>
   <sect1 id="get_signatures">
    <heading>
      取得套件簽名
    </heading>
    <p>
      在完成升級後，您現在已可以藉由新版的 <prgn>apt</prgn> 
      來更新您的套件資訊，其中包含了新的套件簽名檢驗機制：
    </p>
    <p>
     <example>
# aptitude update
	  </example>
    </p>
    <p>
      在升級中將會取得並啟用 Debian 
      的套件檔案庫的簽名金鑰。如果您新增了其它（非官方）的套件來源，<prgn>apt</prgn> 
      將會秀出因為無法確認套件的來源是合法的且未被擅改過之相關錯誤資訊。請參閱 
      <ref id="pkgmgmt"> 以取得更詳盡資訊。
    </p>
    <p>
      您將會發現，自從您使用新版的 <prgn>apt</prgn> 
      後，它將只會下載套件的差異檔 
      (<tt>pdiff</tt>)，而不是所有的套件索引列表。請參閱 <ref 
      id="apt-pdiff"> 以取得這個功能的更詳盡資訊。
    </p>
   </sect1>
   <sect1 id="trouble">
    <heading>
      在升級過程中可能會發生的問題
    </heading>
    <p>
      如果在使用 <prgn>aptitude</prgn>、<prgn>apt-get</prgn> 或 
      <prgn>dpkg</prgn> 的過程中失敗了並顯示以下錯誤
     <example>
E: Dynamic MMap ran out of room
</example>
      那麼，就表示預設的快取空間不夠了。您可以從 
      <file>/etc/apt/sources.list</file> 
      中將您不需要的項目加上註解或是乾脆將它移去，或是增加快取空間，來解決這個問題。可以經由設定 
      <file>/etc/apt/apt.conf</file> 裡的 <tt>APT::Cache-Limit</tt> 
      來增加快取空間。假設您還沒有在這個檔案裡替這個變數設定任何的數值，那麼以下的命令應該可以替升級的動作設定足夠的快取空間：
     <example>
# echo 'APT::Cache-Limit "12500000";' >> /etc/apt/apt.conf
</example>
      在此則假設了您尚未在該檔案中設定這個變數。
    </p>
    <p>
      有時候您會需要啟用 <tt>APT::Force-LoopBreak</tt> 選項讓 APT 
      暫時移除某個重要的套件，以解決循環的 相互衝突(Conflicts) / 
      相互依存(Pre-Depends) 關係。<prgn>aptitude</prgn> 
      會對此提出警告，並終止升級的進行。您可以在 <prgn>aptitude</prgn> 
      的指令行中加入 <tt>-o APT::Force-LoopBreak=1</tt> 來解決這個問題。
    </p>
    <p>
      系統中的相依關係也可能混亂到需要手動介入才得以解決。通常這代表您需要使用 
      <prgn>aptitude</prgn> 或
     <example>
# dpkg --remove <var>package_name</var>
          </example>
      來清除一些會造成問題的套件，或
     <example>
# aptitude --fix-broken install
# dpkg --configure --pending
          </example>
    </p>
    <p>
      在極端的情況下，您可能需要利用類似以下的指令來強制進行重新安裝的動作：
     <example>
# dpkg --install <var>/path/to/package_name.deb</var>
          </example>
    </p>
    <p>
      如果您是由一個 "純粹" 的 &oldreleasename; 
      進行升級的話，應該不會有檔案衝突的情況發生；但如果您安裝了非官方的 
      backports 套件時就不一定了。如果發生檔案衝突時，會產生類似以下的錯誤：
     <example>
正在解開 <var>&lt;package-foo&gt;</var>（由 <var>&lt;package-foo-file&gt;</var>）...
dpkg: 在處理時出錯 <var>lt;package-foo&gt;</var> (--install):
 試圖覆寫 `<var>&lt;some-file-name&gt;</var>'，
 而同時存在於套件 <var>&lt;package-bar&gt;</var> 中
dpkg-deb: 子程序 paste 因錯誤訊息（損毀的 pipe）而被中斷
 在處理時發生了錯誤：
 <var>&lt;package-foo&gt;</var>
          </example>
    </p>
    <p>
      您可以強制移除出現在錯誤訊息裡最<em>後</em>一行的那個套件，以解決檔案衝突的問題：
     <example>
# dpkg -r --force-depends <var>package_name</var>
          </example>
    </p>
    <p>
      在問題都修正了之後，您就應該可以重新輸入先前所描述的 <tt>aptitude</tt> 
      指令並繼續升級的工作了。
    </p>
    <p>
      在升級的過程中，系統可能會詢問您一些問題，以便能對套件進行設定或重新設定。當您被問到是否要把在 
      <file>/etc/init.d</file> 或 <file>/etc/terminfo</file> 
      目錄中的檔案或是 <file>/etc/manpath.config</file> 
      這個檔案置換成套件維護者所提供的版本時，您通常必須回答 `yes' 
      以維護系統的一致性。您可以在稍後再復原為舊的設定檔，因為它們都會以在檔名後附加 
      <tt>.dpkg-old</tt> 的方式給保留下來。
    </p>
    <p>
      如果您不太確定要怎麼做的話，把套件或檔案的名稱寫下來，等稍後再想辨法理出頭緒來。您可以在記錄檔中搜尋，以便能重新檢視在系統升級時出現在螢幕上的資訊。
    </p>
   </sect1>
  </sect>
  <sect id="newkernel">
   <heading>
     替您的 Kernel 及相關套件進行升級
   </heading>
   <p>
     這一節中解釋了如何升級您的 kernel 及和升級有關的潛在問題。您可以安裝由 
     Debian 提供的某個 <package>linux-image-*</package> 
     套件，或是由原始碼自行編譯一個自訂的 kernel。
   </p>
    <![ %uses-initrd [

   <p>
     請注意到，在這一節中的許多資訊是假設了您使用著某個模組化、和 
     <package>initramfs-tools</package> 及 <package>udev</package> 
     搭配使用的 Kernel。如果您是使用不需 initrd 的自訂 kernel 
     或是您使用的是另一種 initrd 產生程式，這些資訊中有些是和您無關的。
   </p>
    ]]><![ %no-initrd [

   <p>
     請注意到，在這一節中包含了不少如何使用 
     <package>initramfs-tools</package> 和 <package>udev</package> 
     的相關資訊。然而，因為在 &architecture; 上的 Debian kernel 並不使用 
     initrd 
     來啟動系統，這些資訊中有些是和您無關的。因為您還是可能因為其它原因而安裝了 
     <package>udev</package>，所以在此還是納入了這些資訊。
   </p>
    ]]>

   <p>
     請注意到，如果 <package>udev</package> <em>並沒有</em> 
     安裝在您的系統上，那麼還是可以使用 <package>hotplug</package> 
     來進行硬體偵測。
   </p>
    <![ %defaulted-2.4 [

   <p>
     如果您正在使用 2.4 版的 kernel，您也應該仔細得閱讀 <ref 
     id="upgrade-to-2.6">。
   </p>
    ]]>

   <sect1 id="kernel-metapackage">
    <heading>
      安裝 Kernel 的虛擬套件
    </heading>
    <p>
      當您由 &oldreleasename; 完整升級至 &releasename; 
      後，強烈建議您安裝某個 linux-image-2.6-* 
      虛擬套件。這個套件可能會在完整升級的過程中被自動安裝。若想確認，請執行：
     <example>
# dpkg -l "linux-image*" | grep ^ii
          </example>
    </p>
    <p>
      如果您沒有看到任何輸出文字，那麼您將得手動安裝一個新的 linux-image 
      虛擬套件。若想得到可用的 linux-image-2.6 虛擬套件列表，請執行：
     <example>
# apt-cache search linux-image-2.6- | grep -v transition
          </example>
    </p>
    <p>
      如果您無法確定該選擇哪一個套件，請執行 <tt>uname -r</tt> 
      並查看是否有名稱類似的套件。比如說，如果您看到了 
      '2.4.27-3-686'，在此建議您安裝<package>linux-image-2.6-686</package>。<![ 
      %i386 [ （請注意到，386 類別已不再存在，如果您還是用著 386 類別的 
      kernel，您應該替而使用 486 類別。） ]]>您也可以利用 
      <prgn>apt-cache</prgn> 
      來查看每個套件的詳細說明來讓您能在其中選出最合適的套件。比如說：
     <example>
# apt-cache show linux-image-2.6-686
          </example>
    </p>
    <p>
      接下來，您應該使用 <tt>aptitude install</tt> 來進行安裝。當新的 Kernel 
      安裝完畢後，您應當找個適當時機重新開機，以便能享用新的 Kernel 
      版本所帶來的種種好處。
    </p>
    <p>
      對於那些比較富有冒險心的人，我們也提供了一個在 &debian; 上自行編譯 
      Kernel 的簡易方法。請安裝 <package>kernel-package</package> 
      工具並詳細閱讀在 <file>/usr/share/doc/kernel-package</file> 
      裡的說明文件。
    </p>
   </sect1>
   <sect1 id="upgrade-from-2.6">
    <heading>
      由某個 2.6 版的 Kernel 進行升級
    </heading>
    <p>
      如果您所運行的是 &oldreleasename; 所搭載的 2.6 系列的 
      kernel，在您進行系統套件的完整升級時，就會自動進行這項升級。（如同 
      <ref id="upgradingpackages"> 裡所說明的）。
    </p>
    <p>
      如果可以的話，您最好是將 kernel 套件的升級和主要的 
      <tt>dist-upgrade</tt> 
      分開進行，以降低讓系統變成一時之間無法開機的機會。請注意到，這必須在完成了 
      <ref id="minimal_upgrade"> 所說明的最低限度升級之後才能進行。
    </p>
    <p>
      如果您是使用著自訂的 Kernel，且您希望使用 &releasename; 所搭載的 
      Kernel，您也可以按照這些步驟進行。如果您的 Kernel 並不被 
      <package>udev</package> 
      所支援，在此建議您能先進行最低限度的升級後再進行 kernel 
      的升級。如果您的版本已被 <package>udev</package> 
      所支援，您可以放心得等到全系統升級後再進行。
    </p>
   </sect1>
    <![ %defaulted-2.4 [

   <sect1 id="upgrade-from-2.4">
    <heading>
      由某個 2.4 版的 Kernel 進行升級
    </heading>
    <p>
      如果您安裝了某個 2.4 系列的 kernel，且您的系統是藉助於 
      <package>hotplug</package> 
      來進行硬體偵測的話，在進行升級之前您必須先升級至 &oldreleasename; 
      所提供的 2.6 系列的 kernel。在進行升級之前請確認那個 2.6 系列的 kernel 
      可以正確啟動您的系統且您所有的硬體都能正確的被偵測到。因為在您進行完整的系統升級時，<package>hotplug</package> 
      套件將會由系統中移除（取而代之的是 
      <package>udev</package>）。如果您未在事先就進行 Kernel 
      的升級，您的系統可能會因而無法正常開機。一旦您已升級為 
      &oldreleasename; 所提供的 2.6 系列的 kernel，您可以再進行 kernel 
      的升級，就如同 <ref id="upgrade-from-2.6"> 裡的說明。
    </p>
    <p>
      如果您的系統並不依賴 
      <package>hotplug</package>，<footnote><p>您可以藉由適當得設定 
      <file>/etc/modules</file> 來讓您的系統能靜態得載入您的系統所需的 
      kernel 模組。</p></footnote>您可以將 kernel 
      的升級延遲到您進行了完整的系統升級後，如同<ref 
      id="upgrading_other">裡的說明。一旦您的系統升級完成，您可以如下進行：（請修改 
      kernel 套件名稱，將其中的 <em>&lt;flavor&gt;</em> 
      替換為最適合您系統的類別）：
     <example>
# aptitude install linux-image-2.6-&lt;flavor&gt;
        </example>
    </p>
   </sect1>
    ]]>

   <sect1 id="device-reorder">
    <heading>
      重新排序裝置列表
    </heading>
    <p>
      比起先前的釋出版本，&releasename; 
      在判斷硬體設備方面提供了一個更為穩健的機制。然而，這將可能會改變在您的系統上所找到的硬體的順序，進而會影響到所使用的裝置名稱。比如說，如果您有著兩片使用著不同的驅動程式的網路卡，那麼 
      eth0 和 eth1 
      的順序很可能會互換。請注意到，新的機制也代表了如果您像是置換了正在運作中的 
      &releasename; 系統上的網路卡，新的網路卡將會拿到一個新的介面名稱。
    </p>
    <p>
      對於網路裝置而言，您可以利用  <package>udev</package> 
      的規則；更明確得說，經由 
      <file>/etc/udev/rules.d/z25_persistent-net.rules</file> 
      裡的定義來避開這個順序更動的問題。<footnote><p>這個規則是由 
      <file>/etc/udev/rules.d/z45_persistent-net-generator.rules</file> 這個 
      Script 
      自動產生的，它會替網路介面建立永久不變的名稱。刪除這個符號連結將會讓 
      <package>udev</package> 
      不再再替網路介面建立永久不變的名稱。</p></footnote>。除此之外，您也可以利用 
      <prgn>ifrename</prgn> 
      工具程式來在開機時替實體裝置指定特定的名稱。請參閱 <manref section="8" 
      name="ifrename"> 及 <manref section="5" name="iftab"> 
      以取得更詳盡的資訊。這兩個方案（<package>udev</package> 及 
      <prgn>ifrename</prgn>）只能選擇其一，無法同時採用。
    </p>
    <p>
      對於儲存裝置而言，您可以藉由使用 <package>initramfs-tools</package> 
      並將其設定為依照目前相同的載入順序來載入儲存裝置的驅動模組以避開這個問題。為此，您可以查看 
      <prgn>lsmod</prgn> 
      的輸出來確認您的系統載入儲存裝置的驅動模組的順序。<prgn>lsmod</prgn> 
      會以相反的順序列出載入的模組。也就是說，在列表中的第一個模組是最後載入的。請注意到，這只在那些 
      Kernel 會以一定的順序來載入的裝置（像是 PCI 裝置）上能生效。
    </p>
    <p>
      但是，在開機後移除或重新載入模組將會影響這份列表的順序。同時，您的 
      Kernel 也許會以靜態連結至某些模組，所以這些名稱將不會出現在 
      <prgn>lsmod</prgn> 的輸出裡。您也可以經由查看 
      <file>/var/log/kern.log</file> 或 <prgn>dmesg</prgn> 
      的輸出來辨認出這些驅動的名稱及載入順序。
    </p>
    <p>
      將這些模組名稱以它們在開機時應有的載入順序新增到 
      <file>/etc/initramfs-tools/modules</file> 裡。有些模組名稱在 
      &oldreleasename; 及 &releasename; 裡是有所不同的。比如說，sym53c8xx_2 
      已變成了 sym53c8xx。
    </p>
    <p>
      然後，您將必須執行 <tt>update-initramfs -u -k all</tt> 來重新產生您的 
      initramfs 影像。
    </p>
    <p>
      若您使用的是 &releasename; 版的 kernel 及 
      <package>udev</package>，您也許要重新設定您的系統以便能以和驅動載入順序無關的別名來進行存取。這些別名會分門別類得放在 
      <file>/dev/disk/</file> 裡。
    </p>
   </sect1>
    <![ %ia64 [

   <sect1>
    <heading>
      重新排序串列裝置
    </heading>
    <p>
      如果您手上的是 HP 的機器且您正在使用 MP 
      串列主控台連接埠（在三頭的連接線上，其連接器有標註『console』者），Kernel 
      的升級將會中斷您的主控台！
    </p>
    <p>
      在重新啟動之時，系統會在顯示 "Loading initrd...." 
      資訊後就此不動了。請注意到，若系統還是使用著過於老舊的韌體將也會出現類似的情況。因為這些問題都是肇因於 
      kernel 不相容。（請參閱<ref id="upgrade-to-2.6">）。
    </p>
    <p>
      請在升級之前閱讀以下資訊。
    </p>
    <p>
     <list>
      <item>
       <p>
         因為主控台裝置將會由 <file>ttyS0</file> 變成 
         <file>ttyS1</file>，<file>ttyS2</file> 或 <file>ttyS3</file>，所以
        <list>
         <item>
          <p>
            請編輯 <file>/etc/inittab</file> 並替 <file>/dev/ttyS1</file> 
            (rx4640, rx5670, rx7620, rx8620, 
            Superdome)，<file>/dev/ttyS2</file> (rx1600) 或 
            <file>/dev/ttyS3</file> (rx2600) 新增一個項目。
          </p>
         </item>
         <item>
          <p>
            編輯 <file>/etc/securetty</file> 以新增 
            <file>ttyS1</file>，<file>ttyS2</file> 或 <file>ttyS3</file>。
          </p>
         </item>
         <item>
          <p>
            保留在 <file>/etc/inittab</file> 中原有的 <file>ttyS0</file> 及 
            <file>/etc/securetty</file> 這樣您才可以繼續以舊的 Kernel 開機。
          </p>
         </item>
        </list>
       </p>
      </item>
      <item>
       <p>
         編輯 <file>/etc/elilo.conf</file> 並移除所有的 "console=" 參數。
       </p>
      </item>
      <item>
       <p>
         執行 <prgn>elilo</prgn> 來以新的設定安裝開機程式。
       </p>
      </item>
      <item>
       <p>
         重新開機並使用 EFI 
         開機選項管理選單來選擇主控台輸出、輸入及標準錯誤的正確裝置。然後進行冷啟動讓這些設定生效。
       </p>
       <p>
         針對 MP 的主控台，請小心得在目錄中選定 
         "Acpi(HWP0002,700)/Pci(...)/Uart" 裝置。
       </p>
      </item>
     </list>
    </p>
    <p>
      有關於這些改變及疑難排解技巧的更多詳盡資訊可於 <url 
      id="http://lists.debian.org/debian-ia64/2005/01/msg00008.html"> 取得。
    </p>
   </sect1>
    ]]><![ %uses-initrd [

   <sect1 id="boot-timing">
    <heading>
      開機時機問題
    </heading>
    <p>
      如果使用由 <package>initramfs-tools</package> 產生的 initrd 
      來開機的話，在某些狀況下 <package>udev</package> 
      建立裝置檔的時機比開機 scripts 的動作還慢。
    </p>
    <p>
      一般而言，無法正常開機的原因多是因為無法掛載 root 
      檔案系統，然後您會進入一個除錯介面，但當您在稍後再進行檢查時，卻發現所有必要的裝置都已出現於 
      <file>/dev</file> 內。這種情況會發生在 root 檔案系統是放在 USB 裝置或 
      RAID 上時。
    </p>
    <p>
      要避開這個問題的方法是使用 <tt>rootdelay=<var>9</var></tt> 
      開機參數。其中的秒數可能得再加以調整才行。
    </p>
   </sect1>
    ]]>

  </sect>
  <sect id="nownownow">
   <heading>
     在重新開機前應該完成的工作
   </heading>
   <p>
     當 <tt>aptitude dist-upgrade</tt> 
     執行完畢後，系統升級「形式上」已經完成了，但仍然有一些工作是在您下次重新啟動系統<em>之前</em>應該要加以注意的。
   </p>
   <sect1 id="convert-devfs">
    <heading>
      從 devfs 進行轉換
    </heading>
    <p>
      Debian 的 kernel 已不再提供對 <tt>devfs</tt> 的支援，所以 
      <tt>devfs</tt> 的使用者在以 &releasename; 的 Kernel 
      開機之前將必須手動進行系統的轉換。
    </p>
    <p>
      如果您在 <file>/proc/mounts</file> 裡有看到 'devfs' 
      這個字串，那麼您十之八九還在使用著 <tt>devfs</tt>。所有還在使用著 
      <tt>devfs</tt> 版的名稱的設定檔必須要修正為指向 
      <package>udev</package> 版的名稱。一些可能會使用著 <tt>devfs</tt> 
      版的裝置名稱包含了 
      <file>/etc/fstab</file>、<file>/etc/lilo.conf</file>、<file>/boot/grub/menu.lst</file> 
      及 <file>/etc/inittab</file>。 
    </p>
    <p>
      可以在錯誤回報 <url id="http://bugs.debian.org/341152" name="#341152"> 
      裡取得一些可能的問題的更詳盡資訊。
    </p>
   </sect1>
    <![ %sparc [

   <sect1 id="missingdrivers">
    <heading>
      在 initrd 裡可能找不到驅動程式
    </heading>
    <p>
      &releasename; 所搭載的 kernel 尚未對於原生的 sparc sbus 提供完整的 
      sysfs 支援。<package>initramfs-tools</package> 
      會據此把磁碟控制器的驅動程式放入 initrd 中。如果有什麼驅動程式未能放入 
      initrd 中，您的系統可能會無法開機。
    </p>
    <p>
      如果您的系統是藉由 <tt>esp</tt> 或 <tt>qlogicpti</tt> 
      模組來存取您的硬碟，在您重新啟動您的系統之前，您必須把該模組放入 
      <file>/etc/initramfs-tools/modules</file> 並重新產生 initrd。而 initrd 
      可以利用以下指令重新產生：
     <example>
# update-initramfs -u -k all
          </example>
    </p>
   </sect1>
    ]]><![ %hppa [

   <sect1 id="missingdrivers">
    <heading>
      在 initrd 裡可能找不到驅動程式
    </heading>
    <p>
      &releasename; 所搭載的 kernel 尚未對於原生的 HP sbus 提供完整的 sysfs 
      支援。<package>initramfs-tools</package> 
      會據此把磁碟控制器的驅動程式放入 initrd 中。如果有什麼驅動程式未能放入 
      initrd 中，您的系統可能會無法開機。
    </p>
    <p>
      如果您的系統是藉由 <tt>lasi700</tt> 或 <tt>zalon7xx</tt> 
      模組來存取您的硬碟，在您重新啟動您的系統之前，您必須把該模組放入 
      <file>/etc/initramfs-tools/modules</file> 並重新產生 initrd。而 initrd 
      可以利用以下指令重新產生：
     <example>
# update-initramfs -u -k all
          </example>
    </p>
   </sect1>
    ]]><![ %i386-amd64 [

   <sect1 id="rerunlilo">
    <heading>
      重新執行 lilo
    </heading>
    <p>
      如果您還是使用 <package>lilo</package> 做為您的開機程式（它是 
      &oldreleasename 
      裡某些安裝程式的預設開機程式），在此強烈建議您在升級完畢後重新執行 
      <prgn>lilo</prgn>：
     <example>
# /sbin/lilo
          </example>
    </p>
    <p>
      請注意到，即使您並沒有升級您的系統的 kernel，這個動作還是必要的，因為 
      <prgn>lilo</prgn> 的第二階段可能會因為套件的升級而改變了。
    </p>
    <p>
      同時，再次查看您的 <file>/etc/kernel-img.conf</file> 
      內容並確認其中有著 <em>do_bootloader = Yes</em>。那麼，在 Kernel 
      升級後就會必定會自動執行開機程式了。
    </p>
    <p>
      如果您在執行 <prgn>lilo</prgn> 時遇到了任何問難，請再次檢查在 
      <file>/</file> 裡指向 <file>vmlinuz</file> 及 <file>initrd</file> 
      的符號連結，以及您的 <file>/etc/lilo.conf</file> 
      的內容是否有什麼不對勁的地方。
    </p>
    <p>
      如果您在重新開機之前忘了執行 
      <prgn>lilo</prgn>，或者是在您有機會手動執行之前系統就意外得重新開機了，您的系統很可能會因而無法開機。在開機時，您將看不到 
      lilo 提示字元，取而代之的是 <em>LI</em><footnote><p>有關 
      <prgn>lilo</prgn> 的開機錯誤訊息之更詳盡資訊請參考 <url 
      id="http://tldp.org/HOWTO/Bootdisk-HOWTO/a1483.html" name="Linux 
      開機磁碟指南">。</p></footnote>。關於如何進行回復請參閱 <ref 
      id="recovery"> 以取得更多詳盡資訊。
    </p>
   </sect1>
    ]]><![ %s390 [

   <sect1 id="s390-config">
    <heading>
      S/390 的硬體設定
    </heading>
    <p>
      並不是所有的 S/390 硬體都能夠自動被設定。有個新的工具 
      <package>sysconfig-hardware</package> 可以用來幫助 &releasename; 
      所搭載的 kernel 
      正確得設定裝置。很可惜的是，有關這個工具及它的設定檔的說明文件目前都還是無處可尋。<package>sysconfig-hardware</package> 
      的設定檔可以在 <file>/etc/sysconfig/</file> 裡找到。
    </p>
    <p>
      尤其若您的系統還是執行著 2.4 的 
      kernel，要將設定檔配置正確可能是件艱苦的挑戰。如果您需要任何幫助，請別客氣直接和 
      <url id="http://lists.debian.org/debian-s390" name="Debian S/390 
      mailing list"> 連繫。
    </p>
    <p>
      首先，安裝該工具程式並利用該工具程式所提供的一些應該包含在 initrd 裡的 
      scripts 產生 initramfs initrd：
     <example>
# aptitude install sysconfig-hardware
# update-initramfs -u -k all
	  </example>
    </p>
    <sect2 id="s390-dasd">
     <heading>
       磁碟的設定
     </heading>
     <p>
       這可以藉由修改 <file>/etc/zipl.conf</file> 完成。sysconfig 
       工具程式可以利用指向 root 
       裝置的路徑來啟用它，也就是說，這個路徑必須在 kernel 
       開機參數裡指定。對於一般的直接存取儲存裝置 (dasd) 
       而言，這個裝置會固定如下：
      <example>
&lt;bus&gt;-&lt;device&gt;
	  </example>
       必須在 <tt>root</tt> 參數裡附加上分割區的路徑。所以，如果您的 dasda 
       是 <tt>0.0.0122</tt> 而不是 
       <file>root=/dev/dasda1</file>，您必須將以下字串包含於 
       <tt>/etc/zipl.conf</tt> 裡的 <tt>parameters</tt> 那一行裡：
      <example>
root=/dev/disks/by-path/ccw-0.0.0122-part1
	  </example>
       而或者，您可以使用 <tt>enable</tt> 
       參數來指定要啟用的裝置；在此例中的分割區為：
      <example>
root=/dev/dasda1 enable=ccw-0.0.0122
	  </example>
       在什麼裝置上該使用什麼樣的路徑都有所不同。比如說，在 zFCP 
       fiberchannel 
       主機連接器的磁碟裡，這個路徑就包含了匯流排、裝置、驅動、wwpn 及 
       lun。RAID1 的參數可能會看起來像（在單一裝置上）：
      <example>
root=/dev/md0 enable=ccw-0.0.2900-zfcp-0x21000020371c93a5:0
enable=ccw-0.0.2900-zfcp-0x21000020371d8f94:0
	  </example>
     </p>
     <p>
       其它的直接存取儲存裝置（沒有包含 root 檔案系統的直接存取儲存裝置 
       (dasd)）可以藉由 <file>/etc/sysconfig/hardware/</file> 
       裡的設定檔啟用。以一般的直接存取儲存裝置而言，您只需建立一個其名稱包含了裝置路徑的檔案：
      <example>
# cd /etc/sysconfig/hardware
# touch config-ccw-0.0.0122
	  </example>
       對於 zFCP fiberchannel 
       主機連接器上的裝置而言，這些各別的裝置會被列在該檔案裡。以上文中的範例為例，建立一個 
       <file>config-ccw-0.0.2900</file> 
       檔案並包含了（第二個裝置為了易於閱讀而截短了）：
      <example>
ZFCP_DEVICES=(0x21000020371c93a5:0x0000000000000000 0x2100...:0x...)
	  </example>
     </p>
    </sect2>
    <sect2 id="s390-other">
     <heading>
       網路裝置的設定
     </heading>
     <p>
       網路裝置可以經由 <file>/etc/sysconfig/hardware/</file> 
       裡的設定檔啟動。對於使用讀取頻道 <tt>0.0.0a00</tt> 及寫入頻道 
       <tt>0.0.0a01</tt> 的 ctc 網路裝置您可以建立一個 
       <file>config-ccw-0.0.0a00</file> 檔案其內容如下：
      <example>
CCWGROUP_CHANS=(0.0.0a00 0.0.0a01)
CTC_PROTOCOL=0
	  </example>
       對於啟用了 layer2 模式的 qeth 網路裝置而言，這可以是檔案 
       <file>config-ccw-0.0.0600</file>：
      <example>
CCWGROUP_CHANS=(0.0.0600 0.0.0601 0.0.0602)
QETH_OPTIONS=(layer2)
	  </example>
     </p>
     <p>
       ctc 所支援的選項有：<tt>CTC_PROTOCOL</tt> 及 <tt>CTC_BUFFER</tt>；而 
       qeth 則是：<tt>QETH_PORTNAME</tt>、<tt>QETH_PORTNO</tt> 及 
       <tt>QETH_OPTIONS</tt>。
     </p>
     <p>
       在 S/390 上的網路裝置並沒有固定的 MAC 位址，所以無法利用 
       <package>udev</package> 
       來指派固定的裝置名稱。取而替之的，您可以在設定檔裡新增一個 
       <tt>INTERFACE_NAME</tt> 選項來重新命名某個介面。
     </p>
    </sect2>
   </sect1>
    ]]>

   <sect1 id="mdadm">
    <heading>
      更新 mdadm
    </heading>
    <p>
      mdadm 現在需要設定檔來在 initial ramdisk 及系統初始化過程中建構 MD 
      陣列。在該套件被更新後、<strong>在您重新啟動之前</strong>，請務必閱讀並依照 
      <file>/usr/share/doc/mdadm/README.upgrading-2.5.3.gz</file> 
      的內容進行。這個檔案的最新版可以在 <url 
      id="http://svn.debian.org/wsvn/pkg-mdadm/mdadm/trunk/debian/README.upgrading-2.5.3&nbsp;op=file"> 
      取得，若遭遇任何問題請不妨參閱。
    </p>
   </sect1>
  </sect>
  <sect id="for_next">
   <heading>
     替下一個釋出版本進行準備
   </heading>
   <p>
     在更新完畢之後，您可以進行某些工作來替下一個釋出版本進行準備：
   </p>
   <p>
    <list>
     <item>
      <p>
        如果是使用 <prgn>grub</prgn>，請編輯 
        <file>/etc/kernel-img.conf</file> 並調整 <prgn>update-grub</prgn> 
        程式的位置，將 <file>/sbin/update-grub</file> 變更為 
        <file>/usr/sbin/update-grub</file>。
      </p>
     </item>
     <item>
      <p>
        如果是因為舊的 kernel image 
        虛擬套件之相依性關係才將新的安裝進來的話，它會被標示為被自動安裝進來的，而這必須加以修正：
       <example>
# aptitude unmarkauto $(dpkg-query -W 'linux-image-2.6-*' | cut -f1)
</example>
      </p>
     </item>
     <item>
      <p>
        可藉由以下指令來移除 &oldreleasename; 的 kernel 虛擬套件：
       <example>
# aptitude purge kernel-image-2.6-&lt;flavor&gt;
</example>
      </p>
     </item>
     <item>
      <p>
        將任何在 <file>/etc/network/options</file> 裡的 kernel 設定值移至 
        <file>/etc/sysctl.conf</file>。
      </p>
     </item>
     <item>
      <p>
        將在 <ref id="obsolete"> 
        裡所說明的已廢棄及已不再使用的套件移除掉。您應該重新檢視它們使用了哪些設定檔並考慮完全將套件清除 
        (purge) 掉以移去它們的設定檔。
      </p>
     </item>
    </list>
   </p>
  </sect>
  <sect id="obsolete">
   <heading>
     被廢棄的套件
   </heading>
   <p>
     雖然在 &releasename; 
     裡採用了數千個新的套件，但它同時也撤除並捨棄了超過兩千個曾經包含在 
     &oldreleasename; 
     裡的舊套件。它將不會再提供這些已遭廢棄的套件任何的升級途徑，雖然我們並不會禁止您企圖繼續使用這些已遭廢棄的套件，但依慣例，在 
     &releasename; 發佈的一年之後 Debian 
     專案將不會再針對它們繼續提供安全上的支援<footnote><p>或是直到在這段期間內有新的發行版推出為止。基本上，我們只會同時維護兩個 
     stable 
     的發行版。</p></footnote>，而除此之外，我們在這段期間內一般並不會再提供其它方面的支援。如果可以的話，我們建議您能採用其它的替代方案來取代這些套件。
   </p>
   <p>
     而這些套件為什麼會從發行版中移去的原因不一而足：有的是因為它的原始程式已經沒有人在繼續維護了；有的是因為已經沒有 
     Debian 
     的開發者有意願想要繼續維護這些套件了；有的是因為它們所提供的功能已經被其它的軟體（或是新的版本）所取代了；有的是因為它們本身所包含的一些 
     Bug 使得我們認為它們已無法和 &releasename; 
     相容。如果是最後一個情況，這些套件很可能是被放在 "unstable" 
     這個分類裡。
   </p>
   <p>
     因為套件管理的前端介面會將這些套件標示為 
     "廢棄(obsolete)"，因而我們可以很輕易得就可以判斷在一個已經過升級後的系統裡，哪些套件已遭廢棄了。如果您所使用的是 
     <prgn>aptitude</prgn>，您可以在【廢棄及本機所建立的套件, Obsolete and 
     Locally Created Packages】這個項目裡看到這些套件的列表。在 
     <prgn>dselect</prgn> 
     裡也提供了類似的功能但它所顯示的列表可能會有點不太一樣。同時，如果您之前是手動使用 
     <prgn>aptitude</prgn> 來安裝 &oldreleasename; 
     的套件，它會持續得追蹤這些您手動安裝的套件，並且如果有某個套件被移除了，而使得這些因相依關係而被安裝的套件已經不再有任何作用時，它可以找出這些套件並將其標示為 
     "廢棄"。而像是 <prgn>deborphan</prgn> 並不會將您手動安裝的套件標示為 
     "廢棄"；但 <prgn>aptitude</prgn> 
     則是完全相反，即使這些套件是因為相依性才被自動安裝進來的。
   </p>
   <p>
     還有一些其它的套件可以讓您用來尋找這些廢棄了的套件，像是 
     <prgn>deborphan</prgn>、<prgn>debfoster</prgn> 或 
     <prgn>cruft</prgn>。其中推薦使用 
     <prgn>deborphan</prgn>，因為它在預設的模式下只會報告已遭廢棄了的函式庫：位於 
     "libs" 或 "oldlibs" 
     區的套件就表示它們已不再被其它的套件所使用了。但請不要輕率得依據這些工具所回報的列表就把這些套件給移掉了，尤其是您在執行時使用的不是預設的，而是較為寬鬆的選項時，它們很可能會因而做出不正確的判定。因此在此強烈建議您，在進行移除的動作之前，您必須親自再重新檢視一次這些將要被移除的套件，包括它們的內容、大小，及它們的詳細說明。
   </p>
   <p>
     在 <url id="&url-bts;" name="Debian 錯誤追蹤系統"> 
     裡常常會提供了為什麼某個套件會被移掉的相關資訊。您可以使用該套件本身的錯誤回報資料庫，或是在 
     <url 
     id="&url-bts;cgi-bin/pkgreport.cgi&nbsp;pkg=ftp.debian.org&#38;archive=yes" 
     name="ftp.debian.org pseudo-package"> 
     裡的錯誤回報資料庫來重新檢視這些資訊。
   </p>
   <sect1 id="dummy">
    <heading>
      替代 (Dummy) 套件
    </heading>
    <p>
      有時為了讓系統能更易於管理，有些原來是包含於 &oldreleasename; 的套件在 
      &releasename; 
      裡已被分開成數個套件。在此況狀下，為了能讓升級的過程更加順遂，&releasename; 
      通常會採取提供 替代 (Dummy) 套件的方式：使用一個和原本是包含於 
      &oldreleasename; 
      的套件相同名稱的套件，但它的內容卻是空的，但利用相依上的關聯性來使得新的套件能被安裝。這些替代套件在升級之後就會被視同廢棄套件了，您可以放心得移除它們。
    </p>
    <p>
      大多數（但不是所有）的替代套件會在套件的說明中會介紹它們的用途，雖然它們的說明的格式並不統一，所以您可能會發現 
      <prgn>deborphan</prgn> 在搭配 <tt>--guess</tt> 
      選項時可以輕易得把它們從您的系統中找出來。請注意，有些替代套件並不希望您在升級後就將其刪除，因為日後您可以替而使用它來追蹤是否有任何新版本出現。
    </p>
   </sect1>
  </sect>
 </chapt>
 <chapt id="information">
  <heading>
    在 &releasename; 您必須知道的一些問題
  </heading>
  <sect id="problems">
   <heading>
     潛在的問題
   </heading>
   <p>
     有時，更動會產生一些我們無法有效避免的副作用，或者是會導致我們在其它地方遇到錯誤。我們在此記述了一些我們所知道的問題。請同時參閱勘誤表、相關套件之說明文件、錯誤回報及其它在 
     <ref id="morereading"> 中所提及的資訊。
   </p>
   <sect1 id="udev">
    <heading>
      udev 相關裝置的問題
    </heading>
    <p>
      雖然 <package>udev</package> 
      已經過了廣泛的測試，但您還是可能在某些裝置上遇到一些必須加以修正的小問題。最常見的問題是某個裝置的權限及/或所有權上的變更。在某些狀況下，有些裝置在預設上是不會被建立的。（如：<file>/dev/video</file> 
      和 <file>/dev/radio</file>）。
    </p>
    <p>
      <package>udev</package> 提供了設定機制以便您能處理這些問題。請查看 
      <manref name="udev" section="8"> 和 <file>/etc/udev</file> 
      以取得更詳盡的資訊。
    </p>
   </sect1>
    <![ %defaulted-2.4 [

   <sect1 id="incompatible-2.4">
    <heading>
      有些應用程式可能再也無法和 2.4 版的 kernel 搭配使用
    </heading>
    <p>
      有些在 &releasename; 裡的應用程式已無法和 2.4 版的 kernel 
      搭配使用。比如說，因為它們需要 <tt>epoll()</tt> 的支援，而這是 2.4 
      版的 kernel 
      所無法提供的。這類應用程式可能無法正常運作甚至完全無法動作，直到系統以 
      2.6 版的 kernel 重新開機。
    </p>
    <p>
      像是 HTTP Proxy <package>squid</package> 就是例子之一。
    </p>
   </sect1>
    ]]>

   <sect1 id="window-scaling">
    <heading>
      有些網路站台無法用 TCP 連線。
    </heading>
    <p>
      從 2.6.17 開始，Linux 大膽得採用了 RFC 1323 所說明的 TCP window 
      scaling。有些伺服器對此適應不良，並會替自已宣告錯誤的 window 
      大小。請參閱錯誤回報 <url id="http://bugs.debian.org/381262" 
      name="#381262">、<url id="http://bugs.debian.org/395066" 
      name="#395066">、<url id="http://bugs.debian.org/401435" 
      name="#401435"> 以取得更詳盡資訊。
    </p>
    <p>
      有兩個方法可以用來避開這些問題：將 TCP windows 
      最多能允許的大小調低為原始值（上策），或是乾脆徹底將 TCP window 
      scaling 關閉（下策）。請參閱在 <url 
      id="http://www.debian.org/devel/debian-installer/errata" 
      name="debian-installer errata page"> 上的示範指令。
    </p>
   </sect1>
    <![ %i386 [

   <sect1 id="poweroff">
    <heading>
      自動關機無法正常運作
    </heading>
    <p>
      在一些較為老舊的系統上，<tt>shutdown -h</tt> 
      將再也無法將系統關機了。（只能做到停止運作）。這是因為在此必須使用 apm 
      才行。請在像是 <package>grub</package> 或 <package>lilo</package> 
      的設定檔案裡，在 Kernel 的命令列上新增 <tt>acpi=off apm=power_off</tt> 
      應該就能解決這個問題。請參閱 <url id="http://bugs.debian.org/390547" 
      name="#390547"> 以取得更多詳盡資訊。
    </p>
   </sect1>
    ]]>

   <sect1 id="apt-pdiff">
    <heading>
      APT 套件索引檔更新變慢
    </heading>
    <p>
      在預設上，&releasename; 版的 <prgn>apt</prgn> 使用了名為 
      <tt>pdiff</tt> 的新方法來更新 APT 套件索引檔。在您執行 <tt>aptitude 
      update</tt> 
      時，它所下載的是差異檔，而不是完整的套件索引檔。這項新功能將會使用較小的頻寬，且在大多數的系統上速度會較快。但糟糕的是，對於那些擁有較大頻寬（或是速度較快的鏡像站）且不常進行更新的系統而言反而會造成更新變慢的不良影響。因為比起直接下載完整的套件索引檔，它會花費系統更多的時間在套用差異檔上。可以將  
      <tt>Acquire::Pdiffs "false";</tt> 加入 <file>/etc/apt/apt.conf</file> 
      設定檔裡以關閉這個功能。
    </p>
    <p>
      這項改變也會影響到使用 Debian 的 <em>unstable</em> 及 <em>testing</em> 
      分支的使用者，因為這些檔案庫本身也隨之改變了。使用 &releasename; 
      的使用者大多會在更新安全檔案庫的套件狀態時注意到這個功能。
    </p>
   </sect1>
    <![ %i386 [

   <sect1 id="hp-acpi">
    <heading>
      在 &releasename; 的 Kernel 裡，有些 HP 筆記型電腦機種的 ACPI 
      支援被關閉了
    </heading>
    <p>
      &releasename; 所搭載的 Linux 2.6.18 Kernel 和有些 HP 
      筆記型電腦機種裡，用來防止風扇因旋轉而導致的熱壓的 ACPI BIOS 
      不相容；而同時，在系統待機後，風扇可能會不再運轉。因此，當 Kernel 
      偵測到這些 ACPI BIOS 版本的話，會從內部將 ACPI 
      的支援關閉。已知受此影響的包括了 HP nx6125、nx6120、nx6325、nc6120 及 
      nc6000 機種。
    </p>
    <p>
      在這些系統上有需要用到 ACPI 支援的使用者可以安裝 Linux 2.6.19 
      或更新版的 kernel。請參閱 Debian bug <url 
      id="http://bugs.debian.org/404143" name="#404143"> 及 <url 
      id="http://bugs.debian.org/400488" name="#400488">，以及 Linux Kernel 
      的 bugs <url id="http://bugzilla.kernel.org/show_bug.cgi&nbsp;id=5534" 
      name="#5534"> 及 <url 
      id="http://bugzilla.kernel.org/show_bug.cgi&nbsp;id=7122" name="#7122"> 
      以取得更多詳盡資訊。
    </p>
   </sect1>
    ]]>

   <sect1 id="asynchronous-network-start">
    <heading>
      網路若無法同步初始化，可能會導致無法預料的後果
    </heading>
    <p>
      在使用 <package>udev</package> 
      來載入網路介面的驅動程式的系統上，可能因為 <package>udev</package> 
      本身無法同步，導致在開機時，網路的驅動程式無法在執行 
      <prgn>/etc/init.d/networking</prgn> 之前載入。雖然在 
      <file>/etc/network/interfaces</file> 中（除了 <tt>auto</tt> 之外）加入 
      <tt>allow-hotplug</tt> 
      將可確保網路介面在載入時會將其啟用，但卻無法保証這可以在開機流程開始啟動網路服務前就順利完成，這可能會讓這些網路服務因為沒有該網路介面而無法正常運作。
    </p>
   </sect1>
    <![ %not-s390 [

   <sect1 id="wpa">
    <heading>
      使用 WPA 加密無線網路時的麻煩
    </heading>
    <p>
      在 &oldreleasename; 裡，<package>wpasupplicant</package> 
      套件被設定成為由 <file>/etc/default/wpasupplicant</file> 
      及使用者自訂的 <file>/etc/wpasupplicant.conf</file> 控管的系統服務。
    </p>
    <p>
      在 &releasename; 裡，<file>/etc/init.d/wpasupplicant</file> 
      已被廢棄，就如同 <package>wireless-tools</package> 
      之類的其它套件一樣，Debain 套件現已將其和 
      <file>/etc/network/interfaces</file> 
      整合在一起，也就是說，<package>wpasupplicant</package> 
      已不直接提供系統服務了。
    </p>
    <p>
      關於如何設定 wpasupplicant 的資訊請參閱 
      <file>/usr/share/doc/wpasupplicant/README.modes.gz</file>，裡面有 
      <file>/etc/network/interfaces</file> 的範例檔可供參考。而一些如何使用 
      Debian 的 <package>wpasupplicant</package> 套件的更新資訊可以在 <url 
      id="http://wiki.debian.org/WPA" name="Debian Wiki"> 上取得。
    </p>
   </sect1>
    ]]>

   <sect1 id="partitionenc">
    <heading>
      檔名內含非 ASCII 字元的問題
    </heading>
    <p>
      在掛載 vfat、ntfs 或 iso9660 檔案系統時，若其中的檔案包含了非 ASCII 
      字元的檔案名稱時，在試著使用這些檔案時可能會出錯，除非將它們用 utf8 
      選項來進行掛載。以下錯誤訊息可能正指明了這件事：『無效的或不完整的多字節或寬字元』。可行的方案是在包含了非 
      ASCII 字元的檔名的 vfat、ntfs 及 iso9660 檔案系統上使用參數 
      <tt>defaults,utf8</tt> 進行掛載。
    </p>
    <p>
      請注意到，在使用 <tt>utf8</tt> 選項時，Linux kernel 並不在 vfat 
      上支援對大小寫不分的檔案名稱的控管。
    </p>
   </sect1>
    <![ %amd64 [

   <sect1 id="nvidia-iommu">
    <heading>
      在 Nvidia 晶片上因硬體 IOMMU 而導致資料錯亂
    </heading>
    <p>
      在使用 Nvidia 晶片且擁有多於 3GB 的記憶體的 &arch-title; 
      的系統上已知會發生問題，當使用硬體 IOMMU 
      時可能會不時導致少數資料出現錯亂。Linux kernel 
      開發團隊及硬體製造商仍在調查這個問題，且目前尚未釋出任何官方的修正程式。為了確保資料的正確性，在可行的解決方案提出之前，建議這些系統的使用者在開機時手動在 
      kernel 開機選項裡加入 <tt>iommu=soft</tt> 以關閉硬體 IOMMU。
    </p>
    <p>
      可以在 Debian 的錯誤回報 <url id="http://bugs.debian.org/404148" 
      name="#404148"> 及 Linux Kernel 的錯誤回報 <url 
      id="http://bugzilla.kernel.org/show_bug.cgi&nbsp;id=7768" name="#7768"> 
      裡取得這個問題的更詳盡資訊。
    </p>
   </sect1>
    ]]>

  </sect>
   <![ %defaulted-2.4 [

  <sect id="upgrade-to-2.6">
   <heading>
     將 Kernel 升級至 2.6
   </heading>
   <p>
     和 2.4 系列的 Kernel 相較，2.6 
     系列包含了很多重大的改變。像是模組的名稱已經有所不同， 
     有不少的驅動程式被局部甚至是完全改寫。所以要把一些舊有版本的 Kernel 
     升級至 2.6 
     並不會是件容易事。這段章節的目的就是要讓您知道一些您可能會遇到的問題。
   </p>
   <p>
     如果您是自行由原始程式碼來編譯 Kernel 的，請在使用 2.6 Kernel 
     來重新開機前確認您已安裝了 
     <package>module-init-tools</package>。這個套件在 2.6 的 Kernel 
     裡是用來取代 <package>modutils</package> 的。如果您安裝了任何的 
     <package>linux-image</package> 
     套件，這個套件會因相依上的因素而被自動地安裝上去。
   </p>
   <p>
     如果您使用了 <em>LVM</em>，請在重新開機前確認您已安裝了 
     <package>lvm2</package>，因為 2.6 的 Kernel 並不直接支援 
     LVM1，而是使用相容的 <package>lvm2</package>（dm-mod 模組）來存取 LVM1 
     的 volumes。您還是可以保留已安裝了的 
     <package>lvm10</package>；而進行初始化的 Script 
     將會進行偵測並依所使用的 Kernel 的不同而自動載入適當的版本。
   </p>
   <p>
     如果您在 <file>/etc/modules</file> 
     檔案（在系統開機時所要載入的模組列表）有自行加入的項目的話，請您要記得有些模組的名稱已經有所改變，如果真的如此，您必須修改這個檔案並使用新的模組名稱。
   </p>
    <![ %i386 [

   <p>
     在一些 SATA 磁碟控制器裡，將指派給磁碟及其分割區的裝置由 
     <file>/dev/hdX</file> 改變為 
     <file>/dev/sdX</file>。如果真的如此，您必須適當得修改您的 
     <file>/etc/fstab</file> 
     及開機程式的設定。在這些變更被正確得修改之前，您的系統可能會無法正常開機。<footnote><p>它將能夠啟動 
     Kernel 但是會在試著掛載 root 檔案系統時失敗，然後跳出並留下 <em>waiting 
     for root filesystem</em> 以及 <em>unable to mount /dev/hdX ..not 
     found</em> 錯誤訊息。您可以利用 Kernel 
     開機資訊確認指派給裝置的新名稱或是重新檢視<file>/dev/disk/</file>，然後使用 
     <prgn>initramfs</prgn> 的 Shell 來修正這個問題。</p></footnote>。
   </p>
    ]]><![ %ia64 [

   <p>
     在 HP 的 Itanium 系統上所運行的老舊韌體和 &releasename; 所搭載的 kernel 
     並不相容。也就是說，您必須在升級您的 kernel 
     之前先將您的系統更新至最新的韌體。因為如果您正在使用著 2.6 的 
     kernel，您將會在升級系統的同時自動將最新版的 kernel 安裝進來（請參閱 
     <ref 
     id="upgrading_other">）。若沒有事先這麼做的話，可能會導致系統無法開機。
   </p>
    ]]>

   <p>
     如果您安裝好了您的 2.6 
     Kernel，請在重新開機之前，確認您已準備好緊急回復方案。首先，請確認在您的開機程式的設定檔裡包含著您新的 
     Kernel 以及舊的、可正常作業的 2.4 Kernel 
     的項目。您應該也要確認在您的手邊有著 "救援 (rescue)" 
     磁碟片或光碟，以防止在開機程式的一些錯誤設定導致您連舊的 Kernel 
     都無法開機。
   </p>
    <![ %not-s390 [

   <sect1 id="2.6-keyboard">
    <heading>
      鍵盤的設定
    </heading>
    <p>
      在 2.6 Kernel 
      裡最具衝擊性的改變就是發生在輸入層的根本改變。這個改變將會使得所有的鍵盤都會看起來像是 
      "一般" 的 PC 
      鍵盤。也就是說，如果您正在使用的鍵盤和一般的有所不同的話，（例： 
      USB-MAC 或 Sun 鍵盤），在使用新的 2.6 的 Kernel 
      重新開機後，您的鍵盤很可能會無法正常運作。
    </p>
    <p>
      如果您可以從另一個系統來使用 SSH 連進去那台主機，您可以執行 
      <tt>dpkg-reconfigure console-data</tt>，並選擇【Select keymap from 
      full list】設定，然後選擇【pc】鍵盤來解決這個問題。
    </p>
    <p>
      如果您在 Consle 所使用的鍵盤受到了影響，那麼您大概也需要替 X Window 
      System 重新設定鍵盤。您可以執行 <tt>dpkg-reconfigure xerver-xorg</tt> 
      或是直接編輯 <file>/etc/X11/xorg.conf</file> 
      來達到這個目的。請不要忘了要閱讀在 <ref id="nownownow"> 
      裡所提到的文件。
    </p>
     <![ %i386 [

    <p>
      這個問題似乎不會影響到 &arch-title; 架構的機器，因為所有的 PS/2 
      及絕大多數的 USB 鍵盤應該早已設定為 "一般的" PC 鍵盤了。
    </p>
     ]]><![ %not-i386 [

    <p>
      請注意，如果您正在使用的是 USB 鍵盤，它可能會被設定為 "一般的" PC 
      鍵盤或是設定為 USB-MAC 
      鍵盤。如果是前者的話，您將不會受到這個問題的影響。
    </p>
     ]]>

   </sect1>
   <sect1 id="2.6-mouse">
    <heading>
      滑鼠的設定
    </heading>
    <p>
      再一次地，因為輸入層的改變，如果您在升級至 2.6 的 kernel 
      後滑鼠無法正常運作的話，您也許得要重新設定 X Window System 及 
      <package>gpm</package> 
      才行。這大多是因為負責讀取滑鼠資料的裝置已經改變了，您也許還得載入其它額外的模組。
    </p>
     <![ %sparc [

    <p>
      如果您目前已將 X 設為使用 
      <file>/dev/sunmouse</file>，您也許得將其修正為 
      <file>/dev/psaux</file>。
    </p>
     ]]>

   </sect1>
   <sect1 id="2.6-sound">
    <heading>
      設定聲音
    </heading>
    <p>
      在 2.6 系列的 Kernel 裡，比起使用舊式的 OSS 音效驅動程式，使用 ALSA 
      的音效驅動程式將會是個更佳選擇。在預設上是以模組的方式提供 ALSA 
      音效驅動程式。為了讓音效正確運作，必須為您的音效硬體載入適切的 ALSA 
      模組。如果您額外安裝了 <package>alsa-base</package> 
      套件、<package>hotplug</package> 套件或是 <package>discover</package> 
      套件，那麼適切的 ALSA 模組會被自動載入。<package>alsa-base</package> 
      套件同時也會將 OSS 模組"列入黑名單" 以防止它們被 <prgn>hotplug</prgn> 
      及 <prgn>discover</prgn> 載入。如果您在 <file>/etc/modules</file> 
      中有加入 OSS 模組，您應該將它們移除。
    </p>
   </sect1>
    ]]>

  </sect>
   ]]>

  <sect id="xorg">
   <heading>
     將 XFree86 轉換至 X.Org
   </heading>
   <p>
     轉換至 X.Org 將會連帶得產生一些架構上的改變。如果所有安裝的套件都來自 
     Debian 且都存在於 
     &releasename;，那麼升級將不會發生什麼問題。然而，實地經驗則指出還是有些改變您應該要知道，因為它們可能會在升級的過程中發生潛在的問題。
   </p>
   <p>
     最重大的改變是已不再使用 
     <file>/usr/X11R6/bin</file>，只剩下一個符號連結指向 
     <file>/usr/bin</file>。這表示這個目錄必須在新套件安裝後清空。這個新套件將會和大多數使用 
     <file>/usr/X11R6/bin</file> 
     的套件發生衝突。在某些狀況之下，也許需要手動介入。請牢記切勿在 X 
     session 裡進行發行版本間的升級。
   </p>
   <p>
     萬一在安裝 X.Org 時升級作業中斷了，您應該檢查是否還有什麼檔案還遺留在 
     <file>/usr/X11R6/bin</file> 裡。您可以使用 <tt>dpkg -S</tt> 
     來找到是哪些 Debian 套件安裝了那些檔案（如果有的話），然後用 <tt>dpkg 
     --remove</tt> 
     來移除這些套件。請記下您移除了哪些套件，那麼您可以在稍後再安裝其它的替代套件。在繼續進行升級之前，在  
     <file>/usr/X11R6/bin</file> 裡的所有檔案必須被清除掉。
   </p>
   <p>
     請參閱 <url id="http://wiki.debian.org/Xorg69To7"> 
     以取得更多詳盡資訊及其它的問題。
   </p>
  </sect>
  <sect id="xorg-8bit">
   <heading>
     在很多應用程式上並不支援以 8-bit 顯示
   </heading>
   <p>
     在更新至 Xorg 及最新的函式庫後，只能以 8-bit 色深來顯示的 X 
     終端機將會無法運作。這是因為 Cairo 2D 向量圖形函式庫 
     (<package>libcairo2</package>) 並不支援 8-bit 的虛擬色彩。GNOME 及 Xfce 
     桌面以及很多使用 Gtk2+ 工具包編譯的桌面應用程式，像是 
     <package>abiword</package>，都會用到這個函式庫。
   </p>
   <p>
     會影響到的系統已知包括了一些 Sun 主機及 Tektronix、NCD、IBM 及 SGI 的 X 
     終端機，以及一些遠端的 X 
     視窗系統。如果可以的話，您應該將這些終端機設定為使用 16-bit 色彩。
   </p>
   <p>
     可以在 Freedesktop 的錯誤回報 <url 
     id="https://bugs.freedesktop.org/show_bug.cgi&nbsp;id=4945" name="bug 
     #4945"> 裡取得更詳盡資訊。
   </p>
  </sect>
  <sect id="exim">
   <heading>
     將 exim 升級至 exim4
   </heading>
   <p>
     被 &releasename; 釋出版本所廢棄的套件之一是 Mail Transfer Agent (MTA) 
     <package>exim</package>，它已完全被新的 <package>exim4</package> 
     套件所取代。
   </p>
   <p>
     <prgn>exim</prgn>（3.xx 版）已有多年沒有上游者在繼續維護了，而同時 
     Debian 也中止了對這個版本的支援。如果您還在用著 <prgn>exim</prgn> 
     3.xx，請手動將您的 <package>exim</package> 升級為 
     <package>exim4</package>。因為 <package>exim4</package> 已包含在 
     &oldreleasename; 之中，您可以自行選擇是在昇級至 &releasename; 
     之前或之後在您的 &oldreleasename; 系統上進行這項升級。請牢記，您舊版的 
     <package>exim</package> 套件將不會進行升級，且安全維護也將在 
     &oldreleasename; 的支援中止之後停止。
   </p>
   <p>
     請注意到，隨著您的 <package>debconf</package> 設定的不同，在安裝 
     <package>exim4</package> 
     的期間可能根本不會被問到任何設定問題。如果您未被問到任何問題，系統預設上會設定成「僅限本機傳送」。可以利用 
     <tt>dpkg-reconfigure exim4-config</tt> 來再次進行設定。
   </p>
   <p>
     在 Debian 裡的 <package>exim4</package> 
     套件已有眾多的文件。該套件的首頁為在 Debian Wiki 上的 <url 
     id="http://wiki.debian.org/PkgExim4">，而 README 檔案可以在 <url 
     id="http://pkg-exim4.alioth.debian.org/README/README.Debian.html"> 
     及套件中找到。
   </p>
   <p>
     在 README 檔案中有個關於 Packaging 
     的章節，說明了和我們所提供的套件之間的一些差異，它還有一個章節是從 
     <prgn>Exim</prgn> 3 升級的一些說明，這個將對於您在實地轉換時有所幫助。
   </p>
  </sect>
  <sect id="apache2">
   <heading>
     升級 apache2
   </heading>
   <p>
     Apache 已被升級為新版的 
     2.2。雖然對於一般使用者而這並不是很重要，但還是有些潛在的問題必須知道。
   </p>
   <p>
     在 <url id="http://httpd.apache.org/docs/2.2/upgrading.html"> 
     上包含了上游的改變，請參閱這個網頁，並請特別牢記：
    <list>
     <item>
      <p>
        所有的模組必須重新編譯
      </p>
     </item>
     <item>
      <p>
        認証模組已被重新排列並重新命名了
      </p>
     </item>
     <item>
      <p>
        有些設定項目被更名了
      </p>
     </item>
    </list>
   </p>
   <p>
     而僅適於 Debian 的改變包括了 SSL 字串已不再被定義了，因為 ssl 
     現已被預設的套件所支援
   </p>
   <p>
     如果您使用著實驗性質的 ITK MPM（來自 <package>apache2-mpm-itk</package> 
     套件），可能在預設上並沒有正確的啟動 cgi 
     模組。若想正確的啟用，您必須手動將 <tt>mod_cgid</tt> 關閉並啟用 
     <tt>mod_cgi</tt>：
    <example>
# cd /etc/apache2/mods-enabled
# rm cgid.conf cgid.load
# ln -s ../mods-available/cgi.load .
# /etc/init.d/apache2 force-reload
        </example>
   </p>
  </sect>
  <sect id="zope">
   <heading>
     升級 Zope 及 Plone
   </heading>
   <p>
     Zope 
     及相關產品已被更新。很多產品也同時在這個釋出版裡被廢棄了（可能是因為它們已不再使用，或是因為它們和新的 
     Zope、CMF 或 Plone 不相容）。
   </p>
   <p>
     糟糕的是，即使 Plone 包含了一個轉移工具，在替某個複雜的 
     <prgn>zope</prgn> 或 <prgn>plone</prgn> 
     伺服器進行升級並沒有什麼簡易或保險的方式。經驗上顯示了自動轉移往往不會那麼輕易就能成功。
   </p>
   <p>
     因為這個緣故，建議使用者在測試轉移工具時，將系統設定為可繼續使用 
     Zope/Plone 的 &oldreleasename; 及新的 &releasename; 版的安裝程式。
   </p>
   <p>
     最簡單保險的實現方式就是將您的 &oldreleasename; 
     複製到另一個硬碟或分割區裡，然後在這兩個備份裡挑一個進行更新。您也可以使用 
     <prgn>chroot</prgn> 在 &releasename; 版裡同時運行 &oldreleasename;。
   </p>
   <p>
     不可能在 &releasename; 系統上同時將舊版和新版的 Zope/Plone 
     安裝在一起，部份原因是因為舊版的套件相依於 
     <package>python2.3</package>，而它不能和 <package>python2.4</package> 
     同時安裝在一起。
   </p>
  </sect>
  <sect id="tar">
   <heading>
     GNU tar 在檔案辨別時使用的萬用字元擴充
   </heading>
   <p>
     上一版的 GNU <prgn>tar</prgn> 在解開或列出檔案時，會假設是使用 shell 
     風格來進行辨別。比如說：
    <example>
tar xf foo.tar '*.c'
        </example>
     這樣將會解開所有檔名以 '.c' 
     結尾的檔案。但其實並沒有明文記載可使用這種作法，且這和傳統的 
     <prgn>tar</prgn> 在實作上是不相容的。因此，從 1.15.91 版開始，GNU 
     <prgn>tar</prgn> 
     在預設上不再支援檔案辨別。比如說，以上的指令現在將會被解讀為要求解開檔名為 
     '*.c' 的檔案。
   </p>
   <p>
     請參閱 <file>/usr/share/doc/tar/NEWS.gz</file> 以取得更詳盡之資訊。
   </p>
  </sect>
  <sect id="nis">
   <heading>
     NIS 及 Network Manager
   </heading>
   <p>
     在 &releasename; 所搭載的 <package>nis</package> 所包含的 
     <prgn>ypbind</prgn> 版本裡加入了對 Network Manager 
     的支援。這個支援將會讓 <prgn>ypbind</prgn> 在得到 Network Manager 
     回報說電腦已由網路離線時，關閉 NIS 用戶端的功能。因為 Network Manager 
     會在不使用時回報電腦已離線，使用 NIS 用戶端系統的 NIS 
     使用者應當確認在這些系統上是否已關閉對 Network Manager 的支援。
   </p>
   <p>
     方法是移除 <package>network-manager</package> 套件，或修改 
     <file>/etc/default/nis</file> 將 <tt>-no-dbus</tt> 加入 
     <tt>YPBINDARGS</tt> 中。
   </p>
   <p>
     新安裝的 Debian 預設上會使用 
     <tt>-no-dbus</tt>，但這並不是之前的釋出版的預設值。
   </p>
  </sect>
  <sect id="php-globals">
   <heading>
     關閉不安全的 php 設定
   </heading>
   <p>
     多年以來，在 PHP 裡啟用 <tt>register_globals</tt> 
     設定是眾所皆知的既不安全且極為冒險的，而這個選項也被多次在預設上被關閉。這個設定終於因為太危險而在 
     Debian 系統裡被關閉了。同樣的問題也發生在 <tt>safe_mode</tt> 及 
     <tt>open_basedir</tt> 上，因為它們已有段時間沒有在繼續維護了。
   </p>
   <p>
     從這個釋出版本開始，Debian 安全團隊將不再替一些已知是不安全的 php 
     設定提供安全上的支援。最重要的是，將不再關注於因為開啟了 
     <tt>register_globals</tt> 而導致的問題。
   </p>
   <p>
     如果您所運行的老舊應用程式需要使用 
     <tt>register_globals</tt>，請在各別的頁面中，像是在 Apache 
     的設定檔裡將其啟用。可以在 PHP 
     文件目錄(<file>/usr/share/doc/php4</file>、<file>/usr/share/doc/php5</file>) 
     裡的 <file>README.Debian.security</file> 裡找到更多的詳盡資訊。
   </p>
  </sect>
  <sect id="mozilla-security">
   <heading>
     Mozilla 家族的安全狀態
   </heading>
   <p>
     Mozilla 程式 <package>firefox</package> 及 
     <package>thunderbird</package>（在 Debian 裡已各別去除商標為 
     <package>iceweasel</package> 及 
     <package>icedove</package>）對於很多使用者而言是很重要的工具。但很不幸的，它的上游的安全策略就是鼓勵使用者升級到新的版本。這和 
     Debian 
     儘量不要在安全更新裡提供太多功能上的變化的政策是相互扺觸的。我們無法在此預言，但在 
     &releasename; 存在的期間，Debian 安全團隊有可能會走到再也無法繼續維護 
     Mozilla 程式，只好宣布中止對 Mozilla 程式的安全支援這一步。您應該在佈署 
     Mozilla 
     前先慎重考慮這個問題，如果沒有安全支援對您會造成困擾的話，請考慮使用 
     Debian 的其它程式替代。
   </p>
  </sect>
  <sect id="kde-desktop-changes">
   <heading>
     KDE 桌面
   </heading>
   <p>
     在 &releasename; 中所提供的 KDE 媒體管理程式因版本變更，已由使用 
     <file>device:/</file> 變為使用 <file>media:/</file>。有些還在使用著 
     <file>device:/</file> 
     連結的使用者設定檔必須加以修正。請注意到，<file>~/.kde/share/apps/konqsidebartng/virtual_folders/services</file> 
     包含了這項設定且可以安全得刪除，讓它不會在設定新的使用者時被再次建立。
   </p>
   <p>
     &oldreleasename; 所搭載的 KDE 桌面環境和 &releasename; 
     上的版本已有著許多不同，您可以在 <url 
     id="http://www.kde.org/announcements/announce-3.5.php" name="KDE 3.5 
     Release Notes"> 上找到更多的詳盡資訊。
   </p>
  </sect>
  <sect id="gnome-desktop-changes">
   <heading>
     GNOME 桌面的變更和支援
   </heading>
   <p>
     如果您使用著 &oldreleasename; 所搭載的 GNOME 桌面環境，您將無法在 
     Debian 
     裡一些建議使用的預設設定的改變上得到助益。在一些極端的例子裡，GNOME 
     桌面環境可能無法正確得使用您舊有的設定，且可能無法適當得運作。
   </p>
   <p>
     如果您對於您的 GNOME 桌面的設定不是很在乎的話，您可以把使用者主目錄裡的 
     <file>.gconf</file> 目錄更名，（像是 
     <file>.gconf.old</file>），讓它在啟用新的連線時重新以 &releasename; 
     的預設設定重新產生。
   </p>
   <p>
     在 &releasename; 釋出版裡， Debian 已不再包含大多數和 GNOME 已廢棄的第 
     1 版的套件。雖然有些套件被保留了下來，但也只為了要支援一些尚未升級到 
     GNOE 2 的 Debian 套件。而 GTK1.2 套件則還是被完整維護著。
   </p>
   <p>
     &oldreleasename; 所搭載的 GNOME 桌面環境和 &releasename; 
     上的版本已有著許多不同，您可以在 <url 
     id="http://www.gnome.org/start/2.14/notes/en/" name="GNOME 2.14 Release 
     Notes"> 上找到更多的詳盡資訊。
   </p>
  </sect>
  <sect id="default-editor">
   <heading>
     預設的編輯器
   </heading>
   <p>
     如果您是將 <prgn>vim</prgn> 
     做為您的預設的編輯器，在升級的過程中可能被變更為 <prgn>nano</prgn>。
   </p>
   <p>
     而如果管理者希望指定所有使用者的預設編輯器，必須更新偏好系統如下：
    <example>
# update-alternatives --config editor
          </example>
   </p>
   <p>
     那些想要指定預設編輯器的使用者可以利用指定 <em>EDITOR</em> 
     環境變數，方法是在他們的 profiles 中加入以下幾行：
    <example>
EDITOR=vi
export EDITOR
alias editor=$EDITOR
          </example>
   </p>
  </sect>
 </chapt>
 <chapt id="moreinfo">
  <heading>
    更多關於 &debian; 的資訊
  </heading>
  <sect id="morereading">
   <heading>
     閱讀更多資訊
   </heading>
   <p>
     除了發行情報和安裝指引之外，Debian 文件計畫 (DDP) 也提供了許多 &debian; 
     更進一步的說明文件。Debian 文件計畫的目標是替 Debian 
     的使用者和開發者創作出高品質的文件，其中包括了 Debian 參考手冊、Debian 
     新維護者指引、以及 Debian 
     常見問答集，以及其他更多的文件。如果您想瞭解關於這些資源的完整訊息，請參考 
     <url id="&url-ddp;" name="DDP 網站">。
   </p>
   <p>
     個別套件的說明文件則會被安裝到 
     <file>/usr/share/doc/<var>package</var></file> 
     目錄之中，其中可能會包含了版權資訊，專屬於 Debian 
     的一些訊息，以及任何原作者所提供的說明文件。
   </p>
  </sect>
  <sect id="gethelp">
   <heading>
     取得協助
   </heading>
   <p>
     Debian 
     的使用者可以從許多的管道取得協助、建議、和支援，但您應該只有在用盡了各種手段卻依然找不到問題的解答時才考慮尋求協助。這一節簡單的介紹了對 
     Debian 的新使用者可能會很有幫助的求助管道。
   </p>
   <sect1 id="lists">
    <heading>
      郵件論壇
    </heading>
    <p>
      Debian 的使用者最感興趣的郵件論壇應該是 debian-user 
      論壇（英文）以及其他的 debian-user-<var>language</var> 
      論壇（其他語言）了。您可以在 <url id="&url-debian-list-archives;"> 
      取得這些論壇的相關細節，以及訂閱的方法。請您在論壇中發言前先檢查過去的論壇存檔中是否已經提供了問題的解答，並請遵守郵件論壇上的基本禮節。
    </p>
   </sect1>
   <sect1 id="irc">
    <heading>
      IRC(Internet Relay Chat) 網路聊天室
    </heading>
    <p>
      OFTC IRC 
      網路主要的目的就是向同儕導向的專案社群提供互動式的服務。在那裡 Debian 
      有一個 IRC 頻道是專門用來支援並幫助 Debian 
      的使用者的。您只要把您慣用的 IRC 客戶端程式指向 &opn-irc-server; 
      並加入 #debian 就可以連上這個頻道了。
    </p>
    <p>
      請遵循該頻道的規定，並尊重線上其他的使用者。您可以在 <url 
      id="&url-irc-host;" name="website"> 上取得更多 OFTC 的相關資訊。
    </p>
   </sect1>
  </sect>
  <sect id="bugs">
   <heading>
     回報錯誤
   </heading>
   <p>
     我們盡心盡力地讓 Debian GNU/Linux 
     成為一個高品質的作業系統，但這並不表示我們所提供的套件都是完全沒有任何問題的。為了和 
     Debian 
     一貫的開放發展原則相互呼應，也為了能對我們的使用者提供更好的服務，我們在我們自己的錯誤追蹤系統 
     (BTS) 中提供了對所有報告過的錯誤的所有資訊。您可以在 <url 
     id="&url-bts;" name="bugs.debian.org"> 瀏覽錯誤追蹤系統的網站。
   </p>
   <p>
     如果您在我們的系統發行或其中的套件中發現了任何問題，請向我們回報，這樣我們才能在日後的發行版中將它修復。您需要擁有一個正確的電子郵件信箱才能夠回報問題，會有這個限制是因為這樣我們才能藉此追蹤錯誤報告的進展，而當開發人員需要更多資訊的時候也才能和原問題報告者取得連繫。
   </p>
   <p>
     您可以藉由 <package>reportbug</package> 
     程式或是自行使用電子郵件來進行回報錯誤，您可以閱讀參考卡片（如果您有安裝 
     <package>doc-debian</package> 的話，可以在 
     <file>/usr/share/doc/debian</file> 裡找到）或到 <url id="&url-bts;" 
     name="錯誤追蹤系統"> 
     的線上網頁取得更多如何使用錯誤追蹤系統及其它的相關資訊。
   </p>
  </sect>
  <sect id="contributing">
   <heading>
     如何對 Debian 做出貢獻
   </heading>
   <p>
     並不是只有箇中高手才能對 Debian 做出貢獻。當您在各個使用者 <url 
     id="&url-debian-list-archives;" name="郵件論壇"> 
     中協助其他使用者解決問題時，您就是在對整個社群做出貢獻。參與開發者 <url 
     id="&url-debian-list-archives;" name="郵件論壇"> 
     以協助找出（以及解決）和系統發行相關的問題對我們也有極大的幫助。為了維護 
     Debian 系統發行一貫的高品質，請 <url id="&url-bts;" 
     name="回報問題">，並協助開發人員找出問題的起因以修正錯誤。如果您有文字方面的天份，您也可以選擇藉由 
     <url id="&url-ddp;" name="文件"> 的撰寫或把現有的文件 <url 
     id="&url-debian-i18n;" name="翻譯"> 
     成您所使用的語言來做出更直接的貢獻。
   </p>
   <p>
     如果您能投注更多的時間的話，您可以負責維護 Debian 
     中一部分的自由軟體。如果您能夠接續或維護其他使用者希望 Debian 
     所能提供的軟體的話就更好了，您可以在 <url id="&url-wnpp;" 
     name="亟需人手以及受到期待的套件資料庫 (WNPP)"> 
     中取得相關的資訊。如果您的興趣是集中在特別的領域之中，那您可能會想要參加像是某個特定硬體平台的系統移植、<url 
     id="&url-debian-jr;" name="小小 Debian">，以及 <url 
     id="&url-debian-med;" name="Debian Med"> 之類在 Debian 中的子計畫。
   </p>
   <p>
     不論如何，只要您以任何的方式參加了自由軟體社群的活動，不管是身為使用者、程式員、作者、還是譯者，您就已經對自由軟體的群體努力做出貢獻了。貢獻本身就是一件非常有益而有趣的事情，除了能讓您不斷地遇見新的伙伴之外，也能讓您的心中充滿了溫暖的感覺。
   </p>
  </sect>
 </chapt>
 <appendix id="old-stuff">
  <heading>
    管理您的 &oldreleasename; 系統
  </heading>
  <p>
    這個附錄包含了在您升級至 &releasename; 
    之前，如何讓您能夠順利地安裝或更新 &oldreleasename; 
    套件的相關說明。這只有在某些特殊狀況之下才會有這個需求。
  </p>
  <sect id="old-upgrade">
   <heading>
     更新您的 &oldreleasename; 系統
   </heading>
   <p>
     基本上，這和您所進行過的 &oldreleasename; 
     的升級並沒有什麼不同。唯一的不同是您必須先確認您的套件列表是否還是包含了 
     &oldreleasename; 的套件，請參考在 <ref id="old-sources"> 裡的說明。
   </p>
   <p>
     如果您是使用 Debian 鏡像站來更新您的系統的話，它會自動得被更新至 
     &oldreleasename; 的最新釋出版。
   </p>
  </sect>
  <sect id="old-sources">
   <heading>
     檢查您的來源列表
   </heading>
   <p>
     如果在您的 <file>/etc/apt/sources.list</file> 中有任何的項目是參照至 
     'stable' 的話，您可能在實際上已經在 "使用" &releasename; 
     了。如果您已執行了 <tt>apt-get update</tt> 
     的話，您還是可以輕易得回到原始的狀態，只要您遵照以下的指示即可。
   </p>
   <p>
     如果您已經安裝了來自 &releasename; 的套件，那麼再安裝來自 
     &oldreleasename; 
     的套件就已經沒有太多意義了。在此狀況之下，您應該要自行決定是否要繼續進行。進行套件的降級並不是不可能的事，但是在此並沒有針對這個加以說明。
   </p>
   <p>
     使用您慣用的編輯器，以 root 的身份開啟 
     <file>/etc/apt/sources.list</file> 這個檔案，然後檢查所有以 <tt>deb 
     http:</tt> 或 <tt>deb ftp:</tt> 開頭的項目，看看是否有參照至 
     "<tt>stable</tt>"。如果有的話，將其中的 <tt>stable</tt> 改為 
     <tt>&oldreleasename;</tt>。
   </p>
   <p>
     如果您有任何項目是以 <tt>deb file:</tt> 
     開頭的，您必須自行檢查這些項目所提供的是 &oldreleasename; 還是 
     &releasename; 的檔案庫。
   </p>
   <p>
     <strong>極重要！</strong> 不要修改任何以 <tt>deb cdrom:</tt> 
     開頭的項目。否則，這些項目將會因而無法使用，使得您只能再執行一次 
     <prgn>apt-cdrom</prgn>。如果您發現某個 'cdrom' 的來源項目是指向 
     "<tt>unstable</tt>" 
     時請不要覺得太訝異。雖然有點奇怪，但這卻是很正常的。
   </p>
   <p>
     如果您進行了任何改變，將檔案儲存並執行
    <example>
# apt-get update
          </example>
     來更新套件的列表。
   </p>
  </sect>
 </appendix>
</book>
</debiandoc>
