<!DOCTYPE debiandoc PUBLIC "-//DebianDoc//DTD DebianDoc//EN" [
  <!entity % dynamicdata  SYSTEM "../dynamic.ent"       > %dynamicdata;
  <!entity % shareddata   SYSTEM "../release-notes.ent" > %shareddata;
  <!entity docid "$Id: release-notes.ja.sgml,v 1.1 2003-01-04 00:37:57 joy Exp $">
]>

<!-- original version: 1.151 -->

<debiandoc>
  <book>
  <titlepag>
    <title>&debian; &release; (`&releasename') リリースノート ( &arch-title; 用)</title>
      <author>
        <name>Josip Rodin, Bob Hilliard, Adam Di Carlo, Anne Bezemer, Rob
        Bradford</name><email></email>
      </author>
      <author>
        <name></name><email>debian-doc@lists.debian.org</email>
      </author>
      <version>&docid;</version>
    </titlepag>
    <toc detail="sect1">
      <chapt id="whats-new"><heading>&debian; &release; の新機能</heading>

<p>[この文書の最新版は、常に <url id="&url-release-notes;">
から取得できます。もし入手した版が一ヶ月以上古いものでしたら、
最新版をダウンロードする方がよいでしょう。]</p>

<p>前の版の &debian; 2.2 ('potato') では、
6 つのコンピュータアーキテクチャがサポートされていました。
このリリースでは、この 6 つにさらに 4 つが追加されました
(以下のリストで [*] がついているものです)。
ここに、このリリースにおけるアーキテクチャの完全なリストを示します。

        <p>
          <list>
            <item><p>Intel x86 ('i386')</p></item>
            <item><p>Motorola 680x0 ('m68k')</p></item>
            <item><p>Alpha ('alpha')</p></item>
            <item><p>SPARC ('sparc')</p></item>
            <item><p>PowerPC ('powerpc')</p></item>
            <item><p>ARM ('arm')</p></item>
            <item><p>MIPS ('mips' (ビッグエンディアン) と 'mipsel' (リトルエンディアン)) [*]</p></item>
            <item><p>Intel Itanium ('ia64') [*]</p></item>
            <item><p>HP PA-RISC ('hppa') [*]</p></item>
            <item><p>S/390 ('s390') [*]</p></item>
          </list>
          </p>

<![ %not-i386 [ 
          
<!-- i386 doesn't have a port page - or do they now? -->

<p>移植の状況の詳細や、お使いの移植版に特有の情報については、
<url id="&url-ports;" name="Debian port web pages">
で読むことができます。</p>
 
]]>

<![ %hppa %s390 %mips %mipsel %ia64 [ 

<p>これは &arch-title; アーキテクチャ用 &debian; の最初の公式リリースです。
すでにリリースとするに充分安定していると私たちは考えています。
しかし、他のアーキテクチャ版のいくつかほどはまだ広く使われていない
(つまりユーザによるテストも多くない) ことから、
いくつかのバグにでくわす可能性もあります。
何か問題が起きたら、<url id="&url-bts;" name="バグ追跡システム">
を使って報告してください。その際、そのバグが &arch-title;
プラットフォーム上のものであることを必ず書き添えてください。</p>

]]>

<p>&arch-title; アーキテクチャ用 &debian; &release; での
デフォルトのカーネルのバージョンは &kernelversion; です。</p>

<![ %default-kernel-2.2 [ 

<p>2.2 系カーネルは精力的に更新・開発が続けられており、
カーネル内部にも、またカーネルの機能を用いたプログラムにも、
価値のある変更がいくつか行われています。
新ドライバの追加や既存のドライバへのバグフィックスも、
非常にたくさん行われています。</p>
          
<p>このリリースには 2.4 カーネルも含まれており、
ユーザはこちらをインストールすることもできます。
カーネル開発者たちは 2.4 系を安定版だと考えていますが、
&debian; リリースチームは、
これをデフォルトのカーネルとするには、
まだ熟成度が充分でないと判断しました。</p>

]]>
        
        <sect id="newinst"><heading>インストールシステムの新機能</heading>

<p>新しいツールである <package>debootstrap</package> は、
ベースシステムのインストールの際に &debian; パッケージを
ダウンロード・展開します。これは従来の、
ベースシステムを含む tarball
を用いたインストールシステムに比べて改善されている点です。
このシステムを用いると、
ベースシステムのインストールが、
より動的に更新できます。</p>

<p>task システムが改造されました。以前のリリースでの task は
メタパッケージでした
(つまり他のパッケージを依存関係を利用して集めた単なるパッケージでした)。
新しいシステムでは、既存のパッケージシステムの内部で特殊なヘッダを用い、
各パッケージが所属する task を指定するようになりました。</p>


<!-- this isn't true, is it? We don't have any way for people to pick
part of a task except to pick some packages, right? -->

<p>これによって task の選択がより細かくできるようになり、
ある task 全体ではなく、
一部のパッケージを選んでインストールすることもできるようになりました。</p>
         
          
<!-- TODO: 
- Ask on debian-boot how many translated boot-floppies are
available.  
- get the number of packages with po files translated
(international/l10n only has the number of po files).  
- get the number of packages with debconf files translated (idem) -->

<p>インストール時の設定と、インストール後の再設定とが、
ほぼすべて Debconf を用いてなされるようになりました。
Debconf には、非対話的な方法、dialog (curses ベース)、
新しい GNOME のフロントエンドなどのいろいろな派生版があります。
Debconf のエンジンも改良され、これまでになく柔軟になりました。
要するに、Debconf が世界を回しているのです :)</p>
        
<p>Debian インストールシステムのすべてについては、
Debian インストールガイドを読んでください。
最初の CD に含まれていますし、
<url id="&url-install-manual;"> にもあります。</p>

<![ %i386 [ 

<p>様々な「フレーバー」を持ったカーネルイメージが使えます。
各フレーバーは、それぞれ異なったハードウェア構成をサポートします。
&arch-title; で使える
&debian; &release; のフレーバーは以下の通りです。</p>

          <p>
            <taglist>
              <tag>`vanilla'</tag>
<item><p>Debian の標準カーネルパッケージに入っているものです。
Linux でサポートされているほとんどすべてのドライバが、
モジュールとして組み込まれています。
これにはネットワークデバイス、SCSI デバイス、
サウンドカード、Video4Linux デバイスなどが含まれます。
`vanilla' フレーバーは、 1 枚の rescue ディスク、1 枚の root ディスク、
4 枚の driver ディスクからなります。</p></item>

              <tag>`ide'</tag> 
<item><p>`vanilla' とほとんど同じですが、
Andre Hedrick による IDE パッチが含まれており、
UDMA66 のデバイスをサポートします。
</p></item>

              <tag>`compact'</tag>
<item><p>`vanilla' と似ていますが、あまり用いられない多くのドライバ
(サウンドや v4l など) が削除されています。さらに、
よく使われている PCI イーサネットデバイス、すなわち NE2000, 3COM 3c905,
Tulip, Via-Rhine, Intel EtherExpress Pro100 を組込みでサポートしています。
これらの組込みドライバを用いると、
Debian インストーラのネットワークインストール機能をフルに活用でき、
他のドライバやベースシステムをネットワークからインストールできます。
したがって root ディスクと rescue ディスクをつくるだけですみます。
最後に、`compact' は普及している RAID コントローラである
DAC960 と Compaq の SMART2 とをサポートしています。
`compact' フレーバーは、 1 枚の rescue ディスク、1 枚の root ディスク、
2 枚の driver ディスクからなります。</p></item>

              <tag>`idepci'</tag> 
<item><p>`idepci' カーネルは IDE と PCI のデバイス
(と ISA のデバイスをほんの少々) のみをサポートします。
このカーネルは、
他のフレーバーの
SCSI ドライバが起動時にシステムをハングさせてしまうような場合
(リソースの衝突や、ドライバ・カードの正しくない動作などが原因)
に用いてください。`idepci' フレーバーには ide-floppy
ドライバが組み込まれているので、
LS120 や ZIP デバイスからインストールできます。</p></item>

              <tag>`bf2.4`</tag>
<item><p>これは実験段階のフレーバーで、kernel-image-2.4 パッケージの
特殊なバージョンを用いています。他の (より安定した) フレーバーには
含まれていない、新しいハードウェアのサポートがいくつか組み込まれています。
より多くの USB ハードウェア、最新の IDE コントローラ・ネットワークカード、
Ext3 ファイルシステムや Reiser ファイルシステムなどをサポートしています。
メインの kernel-image-2.4.x-yz パッケージと比べると、
いくつか重要ではないドライバが削除されており、
必要となるフロッピーの枚数が
できるだけ少なくなるようにしてあります。</p></item>

            </taglist>
          </p>

<p>これらのフレーバーにおけるカーネルの設定ファイルは、
それぞれのディレクトリに `kernel-config' という名前で置いてあります。

]]></sect>

        <sect id="newdistro"><heading>ディストリビューションの新機能</heading> 

<![ %default-kernel-2.2 %not-i386 [

<p>インストール時に用いられるカーネルは &kernelversion; ですが、
最新の安定版カーネルである 2.4 系カーネルも含まれており、
利用可能になっています。

]]>

<p>Debian のパッケージ管理ツールである apt と dpkg が、
このリリースではかなり改善されました。apt は今では
"pinning" 機能を備えるようになり、
特定のパッケージを別のディストリビューションから
選択してダウンロードできるようになりました。
例えば、大部分のパッケージを安定版 (stable)
のディストリビューションのものに保ったまま、
テスト版 (testing) や不安定版 (unstable)
のパッケージを使うことが可能となりました。
APT は必要に応じて適切な依存パッケージを、
先のディストリビューションから自動的にダウンロードします。
<url id="&url-apt-pin-howto;" name='APT "pinning" howto'> もご覧ください。</p>
           
<p>ソースパッケージのコンパイルを補助するために、
ビルド時依存関係 (build dependencies) が追加されました。
apt-get のメソッド "build-dep" を使えば、
必要となるパッケージをすべてコンパイルの前に取得できます。</p>
           
<p>古く、悪名高く、しかしまだ良く使われている
<package>dselect</package> を置き換えるため、
多くの apt フロントエンドが
woody のリリース準備期間に開発され続けています。
興味を持ったユーザは <package>aptitude</package>
パッケージを調べてみてください。</p>
       
<p>この &debian; のリリースには、大きな進歩を遂げた
XFree86 4.1 release が含まれています。
より多くのハードウェアをサポートし、
自動検知サポートが改良され、Xinerama や
3D アクセラレーションといった先進的な技術により良く対応しています。
XFree86 4.1 ではサポートされていない古いハードウェアのために、
XFree86 3.3.6 も選択可能になっています。</p>
          
<p>Debian 3.0 はこれまでのリリースに比べてずっと安全です。
ベースシステムが提供するサービスのうち、
攻撃の対象となるような不必要なものは削られています。
Debian 3.0 には、
ファイアウォール管理、サーバの強化、侵入検知など、
セキュリティ向けのアプリケーションがたくさん含まれています。
パッケージシステムも改善され、
デジタル署名を自動的にチェックするような設定が可能となりました。
その様に設定されれば、
デジタル署名が合わない Debian パッケージのインストールは拒否されます。
これによってトロイの木馬をインストールしてしまう危険性は減少し、
インターネット越しのシステムのアップグレードが簡単かつ安全になりました。
最近では、Debian はセキュリティに関心がある管理者向けの文書を
たくさん提供するようになりました。
例えば Debian Documentation Project の
<url id="&url-securing-debian;" name="'Securing Debian Manual'">
などがそうです
(<package/harden-doc/ パッケージとしても取得できます)。</p>

<p>またフリーソフトウェア翻訳チームの努力のおかげで、
Debian 3.0 は従来のリリースに比べてずっと
<url id="&url-debian-i18n;" name="国際化">されています。
より多くの言語に対応したデフォルト設定が Debian に含まれるようになり、
そのプログラムの多くが国際化対応しています。
boot-floppies インストールもそのひとつで、
たくさんの言語に翻訳されています。
フランス語・ドイツ語・イタリア語・日本語・ポルトガル語・
スペイン語・カタロニア語・デンマーク語などが強力にサポートされており、
他にも 15 以上の翻訳チームが積極的に活動しています。
          
<p>初めて &debian; は、
完全な機能を持った複数のグラフィカル web ブラウザ、
すなわち Mozilla, Galeon, Konqueror を提供するようになりました。
新たな GNOME 1.4 release に加えて KDE 2.2 が初めて取り込まれ、
Debian のデスクトップ設備は急速に改善されてきています。</p>

<p>公式 &debian; ディストリビューションは、現在は
7 枚のバイナリ CD と、ほぼ同数のソース CD のかたちで提供されています。
今では DVD 版のディストリビューションも利用可能となっています。</p></sect>

      </chapt>

      <chapt id="installing"><heading>新たにインストールする</heading>

<p>Debian を新たにインストールしようとしている人は、
インストールマニュアルを読みましょう。
公式 CD の次の場所にあります。

        <example>        
          /dists/&releasename;/main/disks-&architecture;/current/doc/install.txt
          (または .html)
        
        </example></p>

        <p>あるいは Internet からなら: <url id="&url-install-manual;"></p>

<p>Debian のインストールシステムは <package/boot-floppies/ と呼ばれており
(フロッピー以外もサポートしているのですが)、ずっと効率化・更新されてきており、
ユーザにとって便利なものになっています。</p>
      
      </chapt>


<![ %not-mips [
<![ %not-mipsel [
<![ %not-ia64 [
<![ %not-hppa [
<![ %not-s390 [

      <chapt id="upgrading"><heading>以前のリリースからアップグレードする</heading>

<!-- For doc-writers' convenience:
Debian Supported
release: architectures:

1.3.1 or less i386
2.0           i386,m68k
2.1	      i386,m68k,alpha,sparc
2.2	      i386,m68k,alpha,sparc,powerpc,arm
3.0	        + hppa s390 mips mipsel ia64
-->

        <sect id="information"><heading>システムの変更の詳細</heading>

       	<sect1 id="syntax"><heading>重要なプログラム作法の変更</heading>
<p>Debian は、できるだけ上流のパッケージを改変しないようにしています。
したがってオリジナルのパッケージでなされた変更は、
&debian; にも存在することになります。</p>
          
<p>&debian; 2.2 'Potato' リリースでは、
<prgn>tar</prgn> は <prgn>bzip</prgn> 圧縮に
<example>-I</example> スイッチを用いていました。
しかし現在では <example>-j</example> スイッチが使われています。
必要に応じて、全てのスクリプトを変更してください。</p>
       	</sect1>
        </sect>

        <sect id="backup"><heading>アップグレードの準備</heading>

<p>システムをアップグレードする前に、完全なバックアップを取っておくよう
強くおすすめします。少なくとも、
失いたくないデータや設定情報だけでもバックアップしておきましょう。
アップグレードのツールや処理は極めて信頼性の高いものですが、
アップグレードの最中にハードウェア障害が起こると、
システムに大きなダメージを与えることがありえます。

<p>特にバックアップしておくべきものとしては、
<file>/etc</file> と <file>/var/lib/dpkg</file> の中身、
<tt>dpkg --get-selections \*</tt> の出力などが挙げられます。</p>

<p>アップグレードの前には、その予定を全てのユーザに知らせると良いでしょう。
しかしシステムに ssh などでアクセスしてきているユーザは、
アップグレードの最中にもそうとは気付かず、
作業を続行してしまうかもしれません。
万一の用心をしたければ、アップグレードの前に
ユーザのパーティション (<file>/home</file>) をバックアップして、
アンマウントしてしまいましょう。通常は再起動は必要ないでしょう。</p>

<p>ディストリビューションのアップグレードは、
ローカルのテキストモードの仮想コンソール
(あるいは直接接続されたシリアル端末) から行うか、
リモートなら <prgn/ssh/ リンク経由で行いましょう。</p>

<p><em/重要/: <prgn/telnet/, <prgn/rlogin/, <prgn/rsh/
を用いてアップグレードをしては <em/いけません/。
アップグレードマシンの <prgn/xdm/ が管理している
X セッションからのアップグレードも行うべきではありません。
これらのサービスはアップグレードの最中に切断されてしまう可能性が高く、
するとアップグレード途中のシステムへの
<em/接続が不可能になってしまう/
からです。</p>


        <sect1><heading>パッケージの状態をチェックする</heading>

<p>アップグレードにどんな方法を取るにせよ、
まず全てのパッケージの状態をチェックし、
アップグレード可能な状態になっているかどうか調べましょう。
以降のコマンドを用いると、不完全インストール (Half-Installed) 状態や
設定に失敗 (Failed-Config) 状態など、
エラー状態にあるパッケージが表示されます。

          <example>
        
            # dpkg --audit
          
          </example></p>
 
<p>システムの全てのパッケージの状態は <prgn/dselect/ でも調査できます。
また

          <example>
         
            # dpkg -l | pager 

          </example></p>

<p>や

          <example>
         
            # dpkg --get-selections &gt; ~/curr-pkgs.txt

          </example></p>

<p>のようなコマンドでも可能です。</p>

<p>パッケージの hold は、アップグレードの前に外しておく方が良いでしょう。
アップグレードに必要不可欠なパッケージが hold されていると、
アップグレードは失敗します。
hold されているパッケージは次のコマンドでわかります。
 
          <example>
         
            # dpkg --audit
       
          </example></p>

<p>パッケージをローカルで変更して再コンパイルしており、
パッケージ名を変更したり、パッケージのバージョンに epoch 
フィールドを追加したりしていない場合には、
それらのパッケージを hold しないとアップグレードされてしまいます。
パッケージの `hold' 状態は、<prgn/dselect/ で変更できます
(「選択」メニューから hold には `H' キー、解除には `G' キーを用います)。
また
 
          <example>
        
            dpkg --get-selections &gt; ~/curr-sels.txt
       
          </example></p>

<p>の出力を編集して "hold" を "install" に (あるいはその逆に)
変更し、root 権限で

          <example>
         
           dpkg --set-selections &lt; ~/curr-sels.txt
       
          </example></p>

<p>を行うことでも変更できます。</p></sect1>

        <sect1><heading>SSH ユーザ向けの注意</heading>

<p>release 2.2 より前の <package/ssh/ や
release 2.2 での <package/ssh-nonfree/ に入っていた商用 SSH は、
このリリースから DFSG フリーの <package/ssh/ パッケージ (OpenSSH)
に置き換えられました。商用 SSH のツール類はもう存在しません。
<package/ssh/ パッケージでは、
OpenSSH 互換の設定を再生成するかどうかの質問を
Debconf で行うようになっています。</p>
          
        <sect1><heading>注意が必要なディレクトリ</heading>

<p>アップグレードの前には、必ず <file>/etc/rcS.d</file>
ディレクトリが存在しなければなりません。これがないと
<package/libc6/ パッケージのインストールに失敗します。</p>

<p><file>/usr/share/doc</file> ディレクトリ
(が既に存在している場合) はシンボリックリンク
(例えば <file>/usr/doc</file> への) であってはなりません。
こうなっているといくつかのパッケージで問題が起こります。
しかし <file>/usr/doc</file> が <file>/usr/share/doc</file>
へのシンボリックリンクになっているのは構いません。
このようなシンボリックリンクを使っていると、
<file>/usr/doc</file> ディレクトリが削除できない、
というメッセージを大量に見ることになります。
これらは問題なく、単に無視して全く問題ありません。</p></sect1></sect>


        <sect id="upgrade-process"><heading>APT の取得先 (ソース) の準備</heading>

<p>推奨されるアップグレード方法は、<prgn/dselect/ と共に <prgn/apt/ を
用いる方法で、ここでそのやり方を説明します。組み込まれた依存関係解析によって、
アップグレードとインストールがスムーズに行えます。</p>

<p><prgn/dselect/ で <prgn/apt/ 以外のアクセスメソッドを用いて
メジャーアップグレードを行ってはなりません。
<prgn/apt/ はインストール中にパッケージの順序を依存関係にしたがって
並び替えるのですが、この機能が <prgn/apt/ 以外のアクセスメソッドにはないため、
安全性が低いからです。
また、<prgn/apt/ 以外を用いたアップグレードはあまりテストされていませんし、
Debian ではサポートしていません。</p>

<p>パッケージインストール作業は、すべてスーパーユーザ権限で行ってください。
root としてログインするか、<prgn/su/ または <prgn/sudo/ を用いて、
必要なアクセス権限を得てください。</p>

<p>アップグレードをはじめる前に、<package/apt/ の設定ファイル
<file>/etc/apt/sources.list</file> を編集して、
パッケージの取得先を決める必要があります。</p>
          
<p><package/apt/ は、"<tt/deb/" 行にある全てのパッケージを見比べ、
最も大きなバージョン番号のパッケージをインストールします。
同じパッケージが取得可能な場合は、先に現れた行を優先します
(つまり、複数のミラーを指定している場合は、
最初にローカルのハードディスクを、次に CD-ROM を、
最後に HTTP/FTP ミラーを指定するといいでしょう)。</p>

<![ %i386 %m68k %sparc %alpha [
        <sect1><heading>Slink 以前のリリースからアップグレードする</heading> 
       
<p>アップグレードしようとしている現在のシステムが
&debian; release 2.1 以前の場合は、
特別に用意された <package/apt/ と <package/dpkg/ が必要になります。
これらは Debian ミラーの
<url id="http://http.us.debian.org/debian/dists/potato/main/upgrade-&architecture;/">
ディレクトリにあります。

<!-- alternatively they're at:
<url id="http://panic.et.tudelft.nl/~costar/potato/">)
-->

<p>これらのファイルをダウンロードしてきたら、
以下の手続きにしたがってインストールします
(正確にこの順序を守ってください)。
  
           <example>
           
             dpkg -i dpkg_version_&architecture;.deb
             dpkg -i apt_version_&architecture;.deb

           </example></p>

<p>これらは特別にコンパイルされたスタティックなバイナリで、
すべての Debian システムでインストール・実行が可能です。</p>


<![ %sparc [
<!--O
           <p>Before upgrading the &arch-title; architecture, you need to
           run a Linux kernel version 2.2.x, as described in <ref
           id="information">.</p>
-->
<p>
<ref id="information"> にあるように、
&arch-title; アーキテクチャからアップグレードする前に、
Linux カーネルバージョン 2.2.x にしておく必要があります。
]]>

        <sect1><heading>Slink から CD-ROM でアップグレードする</heading>
         
<p>&debian; release 2.1 ('slink') から
CD-ROM を使ってアップグレードする場合は、
スタティックにコンパイルされた <package/apt/ と <package/dpkg/
をインストールする必要があります。これらは Debian ミラーの
<url id="http://http.us.debian.org/debian/dists/potato/main/upgrade-&architecture;/">
ディレクトリにあります。
 
<p>これらのファイルをダウンロードしてきたら、
以下の手続きにしたがってインストールします
(正確にこの順序を守ってください)。

           <example>
           
             dpkg -i dpkg_version_&architecture;.deb
             dpkg -i apt_version_&architecture;.deb
                      
           </example> </p>


<p>ネットワーク (FTP, HTTP) やローカルのパッケージミラー
(ディスクパーティションや NFS マウントしたミラー) を使って、
&debian; version 2.1 以降からアップグレードしたい場合は、
現在の Debian リリースに含まれている <package/apt/ と
<package/dpkg/ パッケージが使えます。
まだ <package/apt/ がインストールされていない場合は、
もちろんここでインストールをしてください。</p>


<p>この時点で、
<manref name="apt-get" section="8"> と
<manref name="sources.list" section="5">
の各マニュアルページを読んでおくことをおすすめします。</p>
           
<p>スタティック版の <package/apt/ や <package/dpkg/
をインストールした場合には、
<package/man-db/ パッケージがアップグレードされるまでは、
<tt>man -l /usr/share/man/man8/apt-get.8.gz</tt>
のようなコマンドを使わないと、
これらの man ページへはアクセスできません。</p>


</sect1>

]]>

         <sect1 id="network"><heading>APT の Internet ソースの追加</heading>

<p>デフォルトの設定では、メインの Debian インターネットサーバを
使ってインストールするようになっています。ですがここでは、
<file>/etc/apt/sources.list</file> を編集して、
他のミラーを (できればネットワーク的に最も近いミラーを)
使うようにする方が良いでしょう。</p>

<p>ミラーの場所がわからない場合は、
<url id="&url-debian-mirrors;"> に
Debian HTTP / FTP ミラーのアドレスが書かれています。
<!--nakano 現在はもう "Full list of..." セクションは存在しない-->
一般には HTTP ミラーのほうが ftp ミラーよりも高速です。</p>

<p>例えば、一番近くにある Debian ミラーが
<tt>&url-debian-mirror-eg;/</tt> だったとしましょう。
このミラーを web ブラウザや FTP プログラムで見てみると、
main などのディレクトリが以下のように構成されていることがわかります。

           <example>
           
             &url-debian-mirror-eg;/dists/&releasename;/main/binary-&architecture;/...
             &url-debian-mirror-eg;/dists/&releasename;/contrib/binary-&architecture;/...
       
           </example></p>

<p>このミラーを <prgn/apt/ で使うには、次の行を
<file/sources.list/ ファイルに追加します。

           <example>
           
             deb &url-debian-mirror-eg; &releasename; main contrib
 
           </example></p>

<p>`<tt/dists/' は書かなくても暗黙のうちに追加されます。
そしてリリース名の後の引き数がそれぞれ用いられ、
複数のディレクトリの各々のパス名に展開されます。</p>

<p>これらの新たなソースを追加したら、それまでの
<file/sources.list/ にあった "<tt/deb/" 行の先頭に
シャープ記号 (<tt/#/) を置き、それらを無効にしてください。</p>

<p>インストールに必要なパッケージのうち、
ネットワークから取得されたものは、
<file>/var/cache/apt/archives</file> ディレクトリ
(およびダウンロード中のものは <file>partial/</file> サブディレクトリ)
に置かれます。したがって、インストールを行う前には、
充分な領域があるかどうか確認しなければなりません。
割に大きめのインストールを行う場合には、
ダウンロードデータとして少なくとも 300MB 程度を考慮しておきましょう。</p>

<!-- At least, that's what one report said - JAB -->

<![ %not-sparc [ 

<p>注意: スタティックな <package/apt/ と <package/dpkg/
を使う場合は、ホスト名の解決ができません
(このためネットワーク経由のアップグレードでは
通常の <package/apt/ の利用をおすすめしています)。
これを解決するには、"<tt/deb/" 行で、
ミラーの IP アドレスを使うようにしてください
(<tt/nslookup some-server</tt> としましょう)。</p>
           
]]></sect1>

         <sect1 id="localmirror"><heading>APT のローカルミラーソースの追加</heading>

<p>HTTP や FTP のパッケージミラーを使うのではなく、
ローカルディスク (多分 NFS マウントされたもの) にあるミラーを使うよう、
<file>/etc/apt/sources.list</file>
を変更したいこともあるかもしれません。</p>

<p>例えばパッケージのミラーが
<file>/var/ftp/debian/</file> にあり、
main などのディレクトリが次のように配置されているとします。

           <example>
           
             /var/ftp/debian/dists/&releasename;/main/binary-&architecture;/...
             /var/ftp/debian/dists/&releasename;/contrib/binary-&architecture;/...
           
           </example></p>

<p>これを <prgn/apt/ から使うには、次の行を
<file/sources.list/ ファイルに追加します。

           <example>
             deb file:/var/ftp/debian &releasename; main contrib
           </example></p>

<p>`<tt/dists/' は書かなくても暗黙のうちに追加されます。
そしてリリース名の後の引き数がそれぞれ用いられ、
複数のディレクトリの各々のパス名に展開されます。</p>

<p>これらの新たなソースを追加したら、それまでの
<file/sources.list/ にあった "<tt/deb/" 行の先頭に
シャープ記号 (<tt/#/) を置き、それらを無効にしてください。</p>

        <sect1 id="cdroms"><heading>APT の CD-ROM ソースの追加</heading>

<p>上記のように、最新版の <package/apt/ と <package/dpkg/
パッケージをインストールする必要がある場合は、
上述の説明に従ってください。</p>

<p>CD <em/だけ/でインストールをしたい場合は、
<file/sources.list/ にあった "<tt/deb/" 行の先頭に
シャープ記号 (<tt/#/) を置き、それらを無効にしてください。</p>

<!--nakano For の前に要スペース-->
<p>CD-ROM ドライブをマウントポイント <file>/cdrom</file>
にマウントすることを許可している行が
<file>/etc/fstab</file> にあるかどうかを確認してください
(<prgn/apt-cdrom/ を使う場合は、マウントポイントを
<file>/cdrom</file> 以外にはできません)。
例えば <file>/dev/hdc</file> が CD-ROM ドライブなら、
<file>/etc/fstab</file> には次のような行が必要です。

          <example>
             
             /dev/hdc /cdrom auto defaults,noauto,ro 0 0
             
          </example></p>

<p>第 4 フィールドの <tt>defaults,noauto,ro</tt> の間には
スペースがあってはいけません。</p>

<p>これが正しく機能しているか調べるには、
CD を挿入して以下を実行してみてください。

          <example>
 
            mount /cdrom (CD をマウントポイントにマウントします)
            ls -alF /cdrom (その CD のルートディレクトリを表示します)
            umount /cdrom (CD をアンマウントします)
     
          </example></p>

<p>問題がなければ

          <example>
            apt-cdrom add
          </example></p>

<p>を、Debian Binary CD-ROM それぞれに対して実行してください。
各 CD に関するデータが APT のデータベースに追加されます。</p></sect1></sect>

<!--O
        <sect id="dselectupgrade"><heading>Upgrading using dselect</heading>
-->
        <sect id="dselectupgrade"><heading>dselect を用いたアップグレード</heading>
          
<!--O
          <p>The recommended method for upgrading to &debian; &release; is
          using the package management tool <prgn>dselect</prgn>. This tool
          makes safer decisions about packages than <prgn>apt-get</prgn>.</p>
-->
<p>
&debian; &release; へのアップグレード方法のお勧めは、
パッケージ管理ツール <prgn>dselect</prgn> を用いる方法です。
このツールはパッケージに関する判断を
<prgn>apt-get</prgn> よりも安全に行います。</p>
          
<!--O
          <p>If <prgn>dselect</prgn> is not installed please install the
          version supplied with your release of &debian;.</p>
-->
<p><prgn>dselect</prgn> がインストールされていない場合は、
現在の (アップグレード前のマシンの)
&debian; リリースのバージョンの
<prgn>dselect</prgn> をインストールしてください。</p>

<!--O
          <p>The access method for the archive (using APT) has already been
          configured, you can change this configuration however using the
          "[A]ccess" method on the menu. If you are happy with your access
          configuration proceed to the next stage by selecting "[U]pdate"
          from the menu. This will update the package database.</p>
-->
<p>アーカイブへのアクセスメソッドは、
すでに APT を用いるように設定されているはずですが、
メニューから "アクセス ([A]ccess)" を選べばこの設定は変更できます。
アクセス設定が OK なら、メニューから"更新 ([U]pdate)" を選んで
次の段階に進みましょう。これによってパッケージのデータベースが更新されます。
</p>

<!--O
          <p>If no problems occured with the update stage, choose "[S]elect"
          from the menu, <prgn>dselect</prgn> will examine the available
          packages and intelligently decide which packages need upgrading
          and which new packages need to be installed to compliment the
          upgrades. It will also suggest packages that should be removed.
          Hitting return at the package selection screen will either give
          you a conflict/dependency resolution screen (at which you may have
          to change selections and press return again) or return you to the
          main menu. Help on the package selection stage is available by
          pressing "?".</p>
-->
<p>この更新の段階で問題が起きなければ、
メニューから "選択 ([S]elect)" を選んでください。
<prgn>dselect</prgn> は現在利用可能なパッケージを調べ、
更新が必要なパッケージはどれか、
それらの更新のために新たにインストールが必要となるパッケージはどれか、
をインテリジェントに決定します。
さらに、削除すべきパッケージも提案してくれます。
パッケージ選択画面でリターンを押すと、
「衝突/依存性の解決」の画面となるか
(この場合はここで選択をやり直して、再度リターンを押す必要があります)、
あるいはメインメニューに戻ります。
パッケージの選択段階に置けるヘルプは、"?" を押せば表示されます。</p>

<!--O
          <p>Now that the package selections have been decided it is
          necessary to install any new packages, to do this choose
          "[I]nstall" from the main menu. This will download and install the
          packages using APT from your prefered medium. Go and have a nice
          cup of Earl Grey, this is going to take some time.</p>
-->
<p>これでパッケージ選択が決まったので、
新しいパッケージをインストールしましょう。
メインメニューから "導入 [I]nstall" を選んでください。
すると、以前に選択したメディアから、
パッケージが APT によってダウンロードされ、インストールされます。
選んだら、とっておきのアール・グレイを一杯飲むことにしましょう。
この作業はかなり時間がかかります。</p>

<!--O
          <p>The final two stages are "[C]onfig" and "[R]emove" which will
          finish the upgrade process by configuring the new packages and
          removing any redudant packages</p>
-->
<p>最後の二段階は、"設定 [C]onfig" と "削除 [R]emove" です。
これらは新しいパッケージを設定し、また不要なパッケージを削除して、
アップグレード処理の締めくくりをします。

<!--O
        <sect id="aptupgrade"><heading>Upgrading using apt-get directly (not recommended)</heading>
-->
        <sect id="aptupgrade"><heading>apt-get を直接用いたアップグレード (非推奨)</heading>

<p>まず、必要なパーティションが read-write モードで
マウントされていることを忘れずに確認しましょう
(特にルートと <file>/usr</file> 各パーティション)。
次のようなコマンドラインが使えます。

          <example>
            mount -o remount,rw /<var>mountpoint</var>
          </example></p>

<p>上述の <package/apt/ の <file/sources.list/ の設定は、
既にすんでいるとします。次のコマンドを root 権限で実行します。

          <example>
            apt-get update
          </example></p>

<p>するとパッケージの概要が書かれたファイルを
それぞれのソースから取得してローカルのものと同期し、
新パッケージや更新パッケージの情報を最新のものにします。</p>

<p>ここで強くお勧めしたいのですが、
<prgn>/usr/bin/script</prgn> プログラムを使って、
このアップグレード作業の記録を取るようにしましょう。
こうすれば何らかの問題が生じたときに、
何が起こったかを記録しておくことができ、
バグ報告の必要が生じた場合に、その正確な情報を提供できます。
記録を開始するには次のように入力します。

          <example>
            script -a ~/upgrade-to-woody.typescript
          </example></p>

<p>typescript ファイルは <file>/tmp</file> や <file>/var/tmp</file>
のような一時ディレクトリには置かないでください
(これらのディレクトリのファイルは
アップグレードや再起動の際に削除されることがありますから)。</p>
          
<p>アップグレードのメインの作業をはじめる前に、
まず apt, dpkg, debconf を更新するのが重要です。
apt はこれまでのリリースに比べてかなり改善されています。
debconf は最近のパッケージで非常によく用いられている
基本ツールです。

          <example>
            apt-get install dpkg apt debconf
          </example></p>

<p>これによって <package/dpkg/, <package/apt/, <package/debconf/
の最新版がインストールされます。
これらが残りのアップグレードに必要となります。
またこの際には、必要なシステムライブラリも最新のものに更新されます。

<p>debconf が質問の種類について尋ねてきた場合は、
'critical' を選ばないようにしてください。
これだと重要な質問がなされないかもしれません。</p>

<!-- i.e. libc6 and libstdc++ that dpkg and apt depend on - JAB -->


<p>実際のアップグレードの前に、次のコマンドによって
リハーサルを行ってみると良いでしょう。

          <example>
            apt-get --fix-broken --show-upgraded --simulate dist-upgrade | pager
          </example></p>

<p>多少時間がかかりますが、これによってびっくりすることが
少なくなるかもしれません。このコマンドは、
システムに問題があるかどうか (ある場合はその解決法) や、
あるいはアップグレードの最中に実際に何が起こるかを示してくれます
(大抵の場合は後者でしょうが)。
"REMOVED" されることになるパッケージに特に注意してください。
これらに必須パッケージが含まれていてはなりません。</p>

<p><prgn/apt-get/ がうまく動くであろうことが確認できたら、
次を実行します。

          <example>
            apt-get --fix-broken --show-upgraded dist-upgrade
          </example></p>

<p>これによってシステムの完全なアップグレードを行います。
すなわち全てのパッケージの最新版を入手し、
パッケージのリリースが変わったことによって生じる
依存関係の変更すべてを解決します。
必要に応じて、新しいパッケージ (通常は更新版のライブラリや、
名前の変わったパッケージ) をインストールしたり、
衝突している古いパッケージを削除したりもします。

<p>CD-ROM のセットからアップグレードする場合には、
アップグレード作業の最中に CD を交換するよう、
数回指定されることになります。
同じ CD を複数回入れなければならないかもしれません。
これはパッケージ間の相互依存関係のせいで、
これらのパッケージは別々の CD に入っていることもあるからです。</p>
   
<p>現在インストールされているパッケージの更新版が、
他のパッケージのインストール状態を変更しなければならないような場合には、
そのパッケージは現在の状態のままにされます ("held back" と表示されます)。
したがって壊れたパッケージや依存関係を、
<prgn/dpkg/ や <prgn/dselect/ を使って削除したり
再インストールしたりする必要が生じるかもしれません。
あるいは、<tt>apt-get -f dist-upgrade</tt> の後に
<tt>apt-get dselect-upgrade</tt> を使ってもいいかもしれません
(<manref name="apt-get" section="8">
のマニュアルページを見てください)。</p>
  
<p><tt/--fix-broken/ (または単に <tt/-f/) オプションを与えると、
<package/apt/ はシステムに存在する壊れた依存関係を修復しようとします。
<package/apt/ は、壊れたパッケージ依存関係がシステムに存在するのを
許しません。</p>
 
        <sect1 id="trouble"><heading>アップグレード中・アップグレード後の注意点</heading>

<p>場合によっては衝突や依存関係のループのために、
APT の APT::Force-LoopBreak オプションを有効にして、
必須パッケージを一時的に削除しなければならないかもしれません。
その場合 <prgn/apt-get/ はこのことを警告してアップグレードを中断します。
<prgn/apt-get/ のコマンドラインに
<tt>-o APT::Force-LoopBreak=1</tt> を指定すれば、
この状態を回避できます。</p>

<p>システムの依存関係の構造が非常に混乱していて、
手動での介入が必要となることもあります。
通常これは <prgn/dselect/ を用いるか、あるいは

          <example>
          
            dpkg --remove <var>packagename</var>
          
          </example></p>

<p>として、目ざわりなパッケージを消す作業になります。
または次の作業でも良いかもしれません。
 
          <example>

            apt-get --fix-broken --show-upgraded install
            dpkg --configure --pending

          </example></p>

<p>極端な場合には、コマンドラインから

          <example>

            dpkg --install /path/to/packagename.deb

          </example>

のように入力して、再インストールしなければならないかもしれません。</p>

<p>問題が修正できたら、先に示したように
<tt/dist-upgrade/ コマンドを繰り返し入力すれば、
アップグレードを再開できます。</p>

<p>アップグレードの最中に、
いくつかのパッケージの設定・再設定に関する質問が表示されます。
<file>/etc/init.d</file> と <file>/etc/terminfo</file>
ディレクトリに置かれるファイルと
<file>/etc/manpath.config</file> に関しては、
パッケージメンテナのバージョンに置き換えるようにしてください。
システムの整合性を保つためには `yes' と答えることが必要になります。
古いバージョンも <tt/.dpkg-old/ という拡張子で
保存されていますので、戻すのはいつでもできます。</p>

<p>どうすればよいか分からなくなったら、
そのパッケージやファイルの名前を書き留めておいて、
その問題解決は後回しにしましょう。
typescript ファイルを検索すれば、
アップグレードの最中に画面に表示された情報を見直すこともできます。</p></sect1>

        <sect1 id="nownownow"><heading>リブート前にすべきこと</heading>

<p><tt/apt-get dist-upgrade/ が終了したら、
「公式」にはアップグレードは終了したことになります。
しかし次にリブートする<em/前に/、
面倒を見てやらなければならないことがいくつかあります。</p>

<p>最も重要なのは、
<package/locales/ パッケージと
<package/util-linux/ パッケージのインストールです。
これは次のようにして行えます。

          <example>
            apt-get install locales util-linux
          </example></p>

<p>Debian version 2.0 以前からアップグレードした場合は、
これによって <package/getty/ パッケージが削除されます。
<prgn/getty/ は現在は <package/util-linux/ パッケージに入っています。</p>

<![ %powerpc [ 

<p>&arch-title; では、woody にアップグレードすると
キーコードが ADB から linux に変わります。
この警告は <package/console-data/ がアップグレードされるときに
間違いなく表示されているはずです。
ADB キーマップのカーネルを使いつづけたい場合は、
再起動した時に linux キーコードが有効になるよう、
ブートパラメータを変更しなければなりません。
詳細は <url id="&url-ports;keycodes"> に書かれています。</p>

]]> 

<p>他にもいくつかインストールの必要なパッケージがあるかもしれません。
<prgn/apt-get/ は他から依存されていないパッケージ
(例えば Recommends: や Suggests: フィールドのパッケージ全部)
を自動的には選択しないので、これらに気付かないことがあります。
これらを探すのは <prgn/dselect/
(やその他のビジュアルなフロントエンド) を使えば簡単です。
<prgn/dselect/ なら、「アクセス([A]ccess)」画面で `apt' メソッドを
(まだそうなってなければ) 選び、
「更新 ([U]pdate)」を使って
データベースを新しいパッケージの情報に更新してください。
その後「選択 ([S]elect)」スクリーンで `o', `o', `v', Shift-d
の順に入力し、

          <example>
          
            --- Obsolete and local packages present on system ---
          
          </example>
というヘッダを探してください。</p>

<!-- Some potato examples would be better; maybe I can provide some at
a later time - JAB -->

<p>このセクションには、そのようなパッケージがすべて表示されます。
例えば古い <package/gimp/ パッケージは <package/gimp1.2/
に置き換えられています。新しいパッケージは
<prgn/dselect/ でインストールすることもできます
(すると「依存関係の衝突の解決 (dependency conflict resolution)」
<!--nakano 日本語の訳語は要チェック-->
の画面で古いパッケージを削除するよう表示されます)。
あるいは

          <example>
 
            apt-get install gimp1.2

          </example>
とすれば古いバージョンも同時に削除されます
(確認を求められるだけです)。</p>

<p>他の例としては、これは <prgn/dselect/ にも表示されないのですが、
telnet と talk のクライアントとサーバ、
NFS サーバなどがあります。
これらは以前の <package/netstd/ パッケージから分離されたものです。
これらをインストールするには次のコマンドラインを使います。

          <example>
            apt-get install telnet telnetd talk talkd nfs-server
          </example></p>

<p>同様に <package/manpages-dev/ は <package/manpage/
から分離されました。</p>

<p>以前のリリースで分割されたパッケージに関して
もっと情報が必要な場合は、そのリリースのリリースノート文書を参照してください。
このリリースで分割されたパッケージについては、
<ref id="renames"> と <ref id="splits"> に戻って、
そこを見てください。</p>

<![ %not-sparc [
<![ %not-alpha [

<p>Debian version 2.0 以前からアップグレードする場合で、
かつ X Window System がインストールされている場合は、
次のコマンドを入力してください。

         <example>

           apt-get remove xbase
           apt-get install xfonts-base xfonts-75dpi xfonts-100dpi xfonts-scalable

         </example>

<p>また <prgn/xdm/ をブート時に起動 ("X autostart")
したくない場合は、次も実行してください。

         <example>
         
           apt-get remove xdm

         </example></p>

<p>X Window System 関連のパッケージの
アップグレードに関する詳しい情報は、
<file>/usr/share/doc/xfree86-common/README.Debian-upgrade</file>
を読んでください。これは以前の Debian リリース全てのユーザに
当てはまります。要するに、読め、ということです。</p>

<p>カーネルモジュールの設定システムは
&debian; release 2.0 以降に変更されました。
Debian 2.0 以前からアップグレードする場合は、
リブートの前にシステムを変換しなければなりません。
通常は <tt/update-modules force/ とするだけで大丈夫です。
でも <manref name="update-modules" section="8">
マニュアルページも読んでおく方がいいでしょう。</p>
]]>
]]>

<![ %i386 [ 

<p>&debian; version 1.x (つまり 2.0 より前) から
アップグレードした場合は、
古いシステムでは `libc5' ライブラリが使われていたのに対し、
アップグレードされたシステムでは `libc6' 版になっています。
新しいライブラリでは <file/utmp/ ファイルと
<file/wtmp/ ファイルのフォーマットが変わっています。
これは <prgn/last/ コマンドで確認できます。
これを解決するには、再起動が必要となります。
しかしその前に、古いファイルをコピーして、
新しく空のファイルを作ってください。次のコマンドを使います。

         <example>
           
           cd /var/log
           mv wtmp wtmp.libc5
           touch wtmp
           cd /var/run
           cp /dev/null utmp
         
         </example></p>

<p>この後でシステムを再起動してください
(注意: Debian release 2.0 以降では必要ありません!)。
一度再起動したら、<prgn/last/ コマンドは
再び正しいデータを表示するようになります。</p>
]]>

<p>Linux カーネルは、以上の手続きによっては更新<em/されません/。
そのようにしたい場合は、<package/kernel-image-*/ パッケージの
どれかひとつをインストールするか、
カスタマイズしたカーネルをソースからコンパイルするかします。
         
<p>&debian; には &kernelversion; が含まれています。
これは 2.2 系の、やや古くて安定したカーネルシリーズです。
2.4 系のカーネルはハードウェアのサポートも性能も改善されているので、
こちらを使いたい人もいるかもしれません。
3 番目の CD-ROM で起動すると、これを自動的に行ってくれます。
あるいはビルド済みのものをインストールしても構いません。

         <example>
           apt-get install kernel-image-2.4.18-{386,586tsc,686}
         </example></p>
         
<p>もうちょっと冒険したい人には、
自分のカスタムカーネルをコンパイルする方法も &debian; は提供しています。
<package/kernel-package/ ツールをインストールして、
<file>/usr/share/doc/kernel-package</file> の文書を読んでみてください。</p>
         
<p>では新しい &debian; &release; システムをお楽しみください! :-)</p></sect1>

      </chapt>

]]>
]]>
]]>
]]>
]]>

      <chapt id="errata">

        <heading>既知の問題</heading>

       <sect id="virusscanners">

<!--O
         <heading>Note for users of virus scanners</heading> 
         <p>Users of virus scanners such as <prgn/amavis/,
         <prgn/scannerdaemon/ and <prgn/clamav/ should keep their packages
         up-to-date otherwise there is the possibility that a buggy package
         could allow virused to pass into or out of the system, with
         horrific consequences. It should also be mentioned that the virus
         database in woody is now static and obsolete. Pinning the antivirus
         packages from testing or unstable may be a possible solution.</p>
-->
<heading>ウイルススキャナのユーザへの注意</heading> 
<p><prgn/amavis/、<prgn/scannerdaemon/ および <prgn/clamav/ のような
ウイルススキャナのユーザは、それらのパッケージを最新にしておくべきです。
さもなければ、バグの多いパッケージが、システムの内外へウイルスが通過するのを
恐ろしい結果と共に許可してしまうかもしれません。また、woody のウイルスデータ
ベースは静的であり、現在は用いられていないということを言っておかなければなりません。
Pin 機能で、テスト版 (testing) や不安定版 (unstable) のアンチウイルス
パッケージを使用することが、考えられる解決策かもしれません。</p>

       </sect>

       <sect id="tz-ee">
        <heading>エストニアの timezone</heading>

<p>
2002 年 3 月 1 日から有効な第 84 規則 (2002 年 2 月 21 日、
エストニア政府) によると、この年 (2002 年の春) から、
エストニアには夏時間が導入されます。夏時間
(エストニア語で「sommer time」) は 3 月の最後の日曜日の
01:00 GMT (現地時間の 03:00) に始まり、10 月の最後の日曜日の
01:00 GMT (現地時間の 04:00) に終わります。
<file>/usr/share/zoneinfo/Europe/Helsinki</file>
ファイルに入っているヘルシンキ用のルールが、
このルールと全く同じです。</p>

      </chapt>

      <chapt id="moreinfo">

        <heading>&debian; に関する更なる情報</heading>

        <sect id="morereading"> <heading>もっと読みたい</heading>
<p>このリリースノートやインストールガイドを越えた、
&debian; に関するより進んだ文書は、
Debian Documentation Project (DDP)
から公開されています。
DDP は Debian のユーザや開発者向けに、
品質の高い文書を作成することを目的としています。
Debian ガイド、Debian メンテナ入門、
Debian FAQ などなど、たくさんの文書があります。
リソースの詳細すべては DDP の web サイト
<url id="&url-ddp;"> から得られます。</p>
 
<p>それぞれのパッケージの文書は
<file>/usr/share/doc/<var>package</var></file> にインストールされています。
ここには、
著作権情報、Debian 固有の詳細、上流の文書すべて、
などが置かれています。</p>
 
      </sect> 
      
      <sect id="gethelp"> 
        <heading>助けを求めるには</heading> 
      
<p>Debian ユーザ向けのヘルプ・アドバイス・サポートなどは、
いろいろな場所から得られます。しかしこれらを頼りにするのは、
その問題について徹底的に文書を調査してからにしましょう。
このセクションでは新しく Debian ユーザになった人向けに、
これらを簡単に紹介します。</p>
        
      <sect1 id="lists">
        <heading>メーリングリスト</heading>
<p>Debian ユーザが最も興味を引かれるであろうメーリングリストは
debian-user (英語) リストおよび
debian-user-<var/language/ (各国語) リストでしょう。
これらのリストの詳細や講読のしかたについては、
<url id="&url-debian-list-archives;"> を見てください。
利用にあたっては、
あなたの疑問に対する答えが以前の投稿で既に答えられていないかどうか、
アーカイブをチェックしてください。
また標準的なメーリングリストのエチケットに従うようにしてください。</p>

<p>
[訳注: Debian JP Project が運営するメーリングリストは
<url id="http://lists.debian.or.jp"> を見てください。]</p>
      </sect1>

      <sect1 id="irc">
        <heading>インターネットリレーチャット (IRC)</heading> 
        
<p>Debian はサポート用の IRC チャンネルを
Debian ユーザの協力によって運営しています。
このチャンネルは Open Projects IRC ネットワークにあります。
このネットワークは、
オープンソースコミュニティで資源共有や協力をすすめるため、
情報交換に使われているものです。
このチャンネルにアクセスするには、
お好みの IRC クライアントを &opn-irc-server; に接続し、
#debian に join してください。</p>
        
<p>チャンネルのガイドラインに従い、
他のユーザを大切にしてください。
Open Projects に関する詳細は
<url id="&url-opn;" name="web サイト">
を訪ねてみてください。</p>

      </sect1>
      </sect> 

      <sect id="bugs">
        <heading>バグを報告する</heading>
        
<p>私たちは Debian GNU/Linux を高品質な
OS にするよう努めていますが、だからといって
私たちの提供するパッケージにバグが絶無というわけにはいきません。
ユーザに対するサービスとして、
私たちは報告されたバグに関する全ての情報を
<url id="&url-bts;" name="bugs.debian.org"> にある
バグ追跡システム (Bug Tracking System: BTS) で提供しています。
これは Debian のオープンな開発体勢と深く関っているのです。</p>


<p>もしディストリビューションや、
その一部であるパッケージされたソフトウェアにバグを見つけたら、
次のリリースで修正できるよう、その問題点の報告をお願いします。
バグを報告するには正しい電子メールアドレスが必要です。
これをお願いしているのは、バグを追跡したり、
開発者がより詳しい情報を必要とした場合に、
報告者に連絡できるようにするためです。</p>

<p>バグ報告には <package/reportbug/ や <package/bug/
といったプログラムを使うこともできますし
(それぞれ同名のパッケージがあります)、
マニュアルで電子メールを使っても構いません。
バグ追跡システムに関する詳細やその使い方については、
リファレンスカード
(正しくインストールされたシステムなら
必ず<file>/usr/share/doc/debian</file> にあります)
をお読みいただくか、
または <url id="&url-bts;" name="バグ追跡システム">
の web サイトからオンラインで入手することもできます。</p>
      
      </sect>

      <sect id="contributing">
        <heading>Debian に貢献する</heading>
        
<p>Debian への貢献は専門家でなくてもできます。
問題を抱えたユーザを、いろいろな
<url id="&url-debian-list-archives;" name="サポートメーリングリスト">
の場所で助けてあげることも、立派なコミュニティへの貢献です。
<url id="&url-debian-list-archives;" name="開発メーリングリスト">
に参加して、
ディストリビューション開発に関する問題を見つけたり解決したりする
(もちろん後者のほうが大切) ことも、
もちろん非常に助けになります。
Debian を高品質なディストリビューションに保つため、
<url id="&url-bts;" name="バグを報告して">
その原因の特定や解決に際して開発者を助けてください。
執筆が得意なら、
<url id="&url-ddp;" name="文書"> 作成や
既存文書のご自分の言語への
<url id="&url-debian-i18n;" name="翻訳">
に積極的に参加し、そこで貢献するのも良いでしょう。</p>

<p>もっと時間が自由になるなら、Debian
に属するフリーソフトウェア集の一部を管理してみるのはどうでしょうか。
みんなが Debian に入れてほしいと思っているソフトウェアを
引き受けて管理するのは、特に価値の高い貢献です。
これに関する詳細は、
<url id="&url-wnpp;" name="作業が望まれるパッケージ">
をご覧になってください。
Debian にはいくつかサブプロジェクトが存在しており、
特定のアーキテクチャへの移植、
<url id="&url-debian-jr;" name="Debian Jr.">、
<url id="&url-debian-med;" name="Debian Med">
などが進められています。これらのうち、
あなたが興味を持っているグループに参加するのも良いでしょう。
</p>

<p>いずれにしても、
あなたが何らかの形でフリーソフトウェアコミュニティに関っているのなら、
それがユーザとしてであれ、プログラマ、ライター、
翻訳者のいずれとしてであれ、
既にあなたはフリーソフトウェア運動を助けてくださっているのです。
貢献することは報いのあることですし、楽しいことです。
新しい人々に出会う機会も増えます。
きっと暖かな、楽しい気持ちになれるはずです。</p></sect>

    </chapt>
    <chapt id="appendix">
      <heading>Appendix</heading>
      <sect id="renames"><heading>名前が変わったパッケージ</heading>

<p>以下に示すパッケージは、それぞれ名前が変更されています。
すべてではありませんが、ほとんどの場合は Conflict:, Replaces:,
Provides: といった各フィールド (やダミーパッケージ) が提供されていて、
新しいパッケージが自動的にインストールされたり、
古いパッケージを安全に置き換えたり削除したりするようになっています。
これには他のパッケージにマージされたパッケージも含まれています。
結果は名前変更の場合と同じですから。

        <example>

          gimp -&gt gimp1.2 (GIMP1.2 リリースのみ)
          dict-web1913 -&gt dictgcide
          amcl -&gt gnome-mud
          rstart -&gt xutils
          rstartd -&gt xutils
          xbooks -&gt xspecs
          xfonts-cjk -&gt xfonts-base
          xcontrib -&gt xbase-clients
          xlib6g-static -&gt xlibs-dev
          listar -&gt ecartis
          cln -&gt libcln2
          cln-dev -&gt libcln-dev
          pgp-i, pgp-us -&gt pgp
          cvs-doc -&gt cvs
          acm -&gt acm4
          user-ja -&gt language-env
          expect5.31, expect5.24 -&gt expect
          sgml-tools -&gt linuxdoc-tools
          sgmltools-2 -&gt sgmltools-lite
          bonnie -&gt bonnie++
          c2ps -&gt a2ps
          camlp4 -&gt ocaml
          corel-util -&gt nwutil
          crossfire-sounds -&gt crossfire-client-sounds
          cslatex, csplain, cstexfonts -&gt tetex
          cspsfonts -&gt tetex-extra
          custom-mule -&gt mule2-support
          docbook2x, cygnus-stylesheets -&gt docbook-utils
          db -&gt db2
          dgs -&gt xfree86
          docbook-stylesheets -&gt docbook-dsssl
          genius, drgeo -&gt drgenius
          egcs1.0 -&gt egcs1.1
          emacs19 -&gt emacs20
          f77reorder -&gt g77
          flim1.13 -&gt flim
          gdict -&gt gnome-utils
          libgmp2, gmp, gmp1 -&gt libgmp3
          gnome-users-guide-en -&gt gnome-user-docs
          gnomehack -&gt nethack
          gpasm -&gt gputils
          gsl-ref-pdf -&gt gsl-ref-ps
          gstep-core -&gt gnustep-core
          gstep-extensions -&gt gnustep-extensions
          gstep-guile -&gt gnustep-guile
          gzilla -&gt dillo
          hanterm -&gt hanterm-xf
          imap -&gt uw-imap
          iplogger -&gt ippl
          jgroff -&gt groff
          lib-sax-java, lib-xp-java, lib-xt-java -&gt xalan2, libxt-java
          libansicolor-perl -&gt perl
          libape -&gt libcommonc++
          libgc4 -&gt libgc6
          libgcj -&gt libgcj2
          libid3 -&gt id3lib
          libmalaga1 -&gt malaga
          libmpeg-mp3info-perl -&gt libmp3-info-perl
          libpth -&gt pth
          libv1.22 -&gt libv1.25
          listar -&gt ecartis
          lvm -&gt lvm10
          mdutils -&gt raidtools2
          mutt-ja -&gt mutt
          myodbc2.50.26 -&gt libmyodbc
          oldncurses, ncurses3.4, ncurses4.2 -&gt ncurses (5.2)
          nfs-server -&gt nfs-user-server
          palm-doctoolkit -&gt pyrite-publisher
          pbm2ppa -&gt pnm2ppa
          pcre, pcre2 -&gt pcre3
          puzzle -&gt tree-puzzle
          rt -&gt root-tail
          selfhtml -&gt chaos, t-gnus
          sgmlspm -&gt libsgmls-perl
          synaptics -&gt tpconfig
          tknamazu -&gt namazu2
          typist -&gt gtypist
          umich-ldap -&gt openldap
          wanderlust2 -&gt wl-beta
          wdsetup -&gt nictools-nopci
          wnn6-dev -&gt wnn6-sdk
          wxftp -&gt axyftp
          xacc -&gt gnucash
          xjscal -&gt libjsw
          zope-siteaccess -&gt zope

        </example></p>

<p>このリストを完全なものにすべくあらゆる努力を行っていますが、しかし
まだ完璧ではないかもしれません。</p></sect>

      <sect id="splits"><heading>分割されたパッケージ</heading>
          
<p>release 2.2 (`potato') と 3.0 (`woody') との間に、
たくさんのパッケージが 2 つまたはそれ以上に分割されました。
分割された理由は、大抵の場合、
もとのパッケージが様々な機能を提供していて、
その全てを使っているユーザがほとんどいないためです。
分割されたことを伝える警告をインストール中に表示するパッケージも
ありますが、パッケージの説明書きに書かれていることもありますし、
単に無視しているものもあります。</p>

<p>自分がよく使っていたパッケージで、
一部または全部の機能が使えなくなっていた場合は、
以下のリストをチェックして、
もとの機能を使うには追加パッケージのインストールが必要ではないか
確認してください。
それでも駄目だったら、そのパッケージの changelog を調べてください。
<file>/usr/share/doc/<var>package</var>/changelog.Debian.gz</file>
にあります。</p>

<p>以下に、分割されたパッケージのリストを示します
(このリストは完全ではないかもしれません)。

        <example>
         
          isdnutils -&gt ipppd, isdnlog, isdnutils-doc, isdnutils-xtools,
          isdnvboxserver, isdnvboxclient
       
          xpdf -&gt xpdf-reader, xpdf-utils, xpdf-chinese-simplified,
          xpdf-chinese-traditional, xpdf-cyrillic, xpdf-japanese,
          xpdf-korean,xpdf-thai
            
          cupsys -&gt cupsys (CUPS daemon), cupsys-client (CUPS client),
          cupsys-pstoraster (postscript rasterizer)
            
          groff -&gt groff-base, groff, groff-x11
            
          xspectemu -&gt spectemu-common, spectemu-svga, spectemu-x11
            
          ecpg -&gt  libecpg3 (library), postgresql-dev (development files)
            
          postgresql-pl -&gt libpgperl, libpgtcl
            
          netbase -&gt netbase, portmap, ifupdown, ipautofw, ipchains,
          ipfwadm, ipmasqadm, iputils, net-tools, netkit-base
            
          uqwk -&gt uqwk, uqwk-spool
            
          tetex-bin -&gt tetex-bin, texi2html
            
          xproxy -&gt lbxproxy, proxymngr, xfwp
            
          xlib6g -&gt xlibs, libxaw6
          
          xlib6g-dev -&gt libxaw6-dev, xlibs-dev  
            
          xbase-clients, xlib6g-dev, xcontrib -&gt xutils

          xconq -&gt xconq, xconq-common
            
          python-imaging-doc -&gt; python-imaging-doc,
          python-imaging-doc-html, python-imaging-doc-pdf
            
          gnumeric -&gt gnumeric, gnumeric-doc, gnumeric-python
            
          latex2rtf -&gt latex2rtf, latex2rtf-doc
            
          glade -&gt glade, glade-gnome, glade-gnome-db, glade-common,
          glade-doc
            
          apmd -&gt apmd, xapm, libapm1, libapm-dev, powermgmt-base

          uudeview -&gt uudeview, xdeview, libuu-dev
            
          sysklogd -&gt sysklogd, klogd 
           
          xtide -&gt xtide, xtide-data
            
          snack -&gt libsnack2, libsnack2-dev, libsnack2-doc
            
          gnapster -&gt gnapster, gnapster-gtk
            
          proftpd -&gt proftpd, proftpd-common, proftpd-doc, proftpd-ldap,
          proftpd-mysql, proftpd-pgsql
           
          alsaplayer -&gt alsaplayer-common, alsaplayer-gtk, alsaplayer-nas,
          alsaplayer-text, libalsaplayer-dev, libalsaplayer0 
        
        </example> </p>
      </sect>
      <sect id="removed"><heading>削除されたパッケージ</heading>
        <sect1 id="nomaintainer">
          <heading>メンテナ不在で削除されたパッケージ</heading>

<!--O
          <p>These are packages which have been removed because no Debian
          maintainer was interested in maintaining them. The number
          associated with the bug is included as this provides further
          information on the reason why the package was removed. To use this
          number visit the <url id="&url-bts;" name="Bug Tracking System">
          and do a query based on the bugnumber.</p>
-->
<p>これらのパッケージは、Debian メンテナが、
それらの維持に興味を持たなかったので、削除されたパッケージです。
バグ番号はパッケージが削除された理由についてのさらに詳しい情報を提供します。
この番号を使うためには、<url id="&url-bts;" name="バグ追跡システム">
を訪れ、バグ番号に基づいた質問をしてください。</p>

<!--O
          <p>The alternatives field lists any packages that might replace
          the removed package.</p>
-->
<p>Alternatives 行には、削除されたパッケージを置き換えるかもしれない
すべてのパッケージを記載しています。</p>
          
          <p><example>
            
            asclock-gtk
            Alternatives: asclock, gnome-applets
            Bug: #91943

            bridge, bridgex
            Bug: #80926

            bwnfsd
            Bug: #107083

            dialdcost
            Bug: #90361

            dotfile-doc
            Bug: #116545

            dstool
            Bug: #68308

            dstool-doc
            Bug: #68309

            gmasqdialer
            Bug: #127196

            gnats2w
            Bug: #123544

            ical
            Bug: #92286

            ircd-dalnet
            Alternatives: ircd, dancer-ircd
            Bug: #93627

            ivtools, ivtools-bin, ivtools-dev, ivtools-interviews, ivtools-unidraw 

            jaztool
            Bug: #91797

            libggidemos
            Bug: #111965

            libliteclue
            Bug: #95503

            libtclobjc
            Bug: #108187

            mico-2.3.0
            Bug: #91274

            pact
            Bug: #72432

            ppd-gs
            Bug: #68081

            sliplogin
            Bug: #68104

            x48
            Bug: #110944
          </example></p>
        </sect1>
        <sect1 id="no-upstream">
        <heading>上流に不足しているパッケージ</heading>

<!--O
          <p>These are packages which have been removed because they lack an
          upstream maintainer. The number associated with the bug is
          included as this provides further information on the reason why
          the package was removed. To use this number visit the <url
          id="&url-bts;" name="Bug Tracking System"> and do a query based on
          the bugnumber.</p>
-->
<p>これらは、上流のメンテナが不足しているので、削除されたパッケージです。
バグ番号はパッケージが削除された理由についてのさらに詳しい情報を提供します。
この番号を使うためには、<url id="&url-bts;" name="バグ追跡システム">
を訪れ、バグ番号に基づいた質問をしてください。</p>

<p>Alternatives 行には、削除されたパッケージを置き換えるかもしれない
すべてのパッケージを記載しています。</p>

          <p><example>
            abacus
            Alternatives: gnumeric
            Bug: #89715

            arena
            Alternatives: mozilla, konqueror
            Bug: #83867

            bezerk
            Alternatives: irssi-gtk
            Bug: #86611

            blackjack
            Bug: #110369 110313

            cdwrite
            Alternatives: cdrecord
            Bug: #80353

            dejasearch
            Bug: #114643

            dsc
            Bug: #92576

            dtm
            Bug: #82741

            empire-ptkei
            Bug: #86230

            express
            Bug: #80396

            fakebo
            Bug: #82481

            gnome-napster
            Alternatives: gnapster, gnapster-gtk, lopster
            Bug: #87380

            icl-faq
            Bug: #105385

            libhtml-ep-perl
            Bug: #89376

            libtcl-ldap
            Bug: #113574

            macgate
            Bug: #85261

            maplay3
            Alternatives: madplay, mpg321, xmms
            Bug: #132374

            pyrite
            Bug: #102307

            scwm
            Bug: #115814

            zicq
            Alternatives: vicq, gabber, gaim
            Bug: #117936

          </example></p>
        </sect1>          
        <sect1 id="removed-other">
        <heading>その他の理由で削除されたパッケージ</heading>

<!--O
          <p>The reason for the removal of the package is listed below the
          name of the package. The number associated with the bug is
          included as this provides further information on the reason why
          the package was removed. To use this number visit the <url
          id="&url-bts;" name="Bug Tracking System"> and do a query based on
          the bugnumber.</p>
-->
<p>パッケージが削除された理由は、パッケージ名の下に記してあります。
バグ番号はパッケージが削除された理由についてのさらに詳しい情報を提供します。
この番号を使うためには、<url id="&url-bts;" name="バグ追跡システム">
を訪れ、バグ番号に基づいた質問をしてください。</p>

<p>Alternatives 行には、削除されたパッケージを置き換えるかもしれない
すべてのパッケージを記載しています。</p>

          <p><example>
            ae
            Replaced by the more user-friendly editor nano
            Alternatives: nano
            Bug: #110678

            barracuda
            Moved to non-US but never appeared there

            darxite 
            Remotely exploitable buffer overflow. Not easy to fix, would
            require full audit
            Bug: #87406

            dhcpcd
            Buggy, insecure, better alternatives are available
            Alternatives: dhcp-client, udhcpc
            Bug: #81627

            dosemu
            Moved to contrib

            dtlk
            Obsolete, now comes with kernel
            Bug: #97532

            empire-pei
            Out of sync with empire server
            Bug: #82466

            guavac
            Old, obsolete, jikes is better
            Alternatives: jikes
            Bug: #68246

            ldp-ligs, ldp-lkmpg, ldp-sag-it
            License problems
            Bug: #80782

            libdnd
            Old and unused
            Bug: #83565

            nextaw
            No longer works with XFree86 4
            Alternatives: libxaw7
            Bug: #105532

            omirr
            Obsolete; only works with kernel 2.0.11
            Bug: #79833

            povray-manual
            Large, non-free, downloadable from web, non-compliant HTML, non-compliant
            policy
            Bug: #82587

            sharc 
           
            Obsolete, it was providing relay-filtering for sendmail before
            sendmail had this feature.
            Alternatives: sendmail
            Bug: #92655
          </example></p>
        </sect1>
      </sect>
    </chapt>
  </book>
</debiandoc>

<!-- Keep this comment at the end of the file
Local Variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-namecase-general:t
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:nil
sgml-declaration:nil
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

