<!DOCTYPE debiandoc PUBLIC "-//DebianDoc//DTD DebianDoc//EN" [

  <!ENTITY % dynamicdata SYSTEM "../en/../dynamic.ent"> %dynamicdata;
  <!ENTITY % shareddata SYSTEM "../en/../release-notes.ent"> %shareddata;
  <!ENTITY docid "$Id: release-notes.ja.sgml,v 1.27 2007-04-26 21:00:23 jseidel Exp $">
]>
<debiandoc>
 <book>
  <titlepag>
   <title>
     &debian; &release; ("&releasename;") リリースノート (&arch-title; 用)
   </title>
   <author>
     <name>Josip Rodin, Bob Hilliard, Adam Di Carlo, Anne Bezemer, Rob 
     Bradford, Frans Pop (現在のメンテナ), Andreas Barth (現在のメンテナ), Javier 
     Fern&aacute;ndez-Sanguino Pe&ntilde;a (現在のメンテナ), Steve Langasek 
     (現在のメンテナ)</name><email></email>
   </author>
   <author>
     <name></name><email>debian-doc@lists.debian.org</email>
   </author>
   <version>
     &docid;

   </version>
  </titlepag>
  <toc detail="sect1">
 
 <chapt id="about">
  <heading>
    はじめに
  </heading>
  <p>
    本リリースノートの主要な目的は、&debian; 
    ディストリビューションのこのリリースにおける主要な変更点、以前のリリースから今回のリリースに安全にアップグレードする方法、そして今回のリリースにアップグレードする際や 
    &releasename; リリースを使用する際にユーザが遭遇する可能性がある既知の問題点について、情報をユーザに提供することです。
  </p>
  <p>
    既知の問題点をすべてリストアップすることは不可能なので、問題点の予想される広がり具合と影響の大きさの両方に基づいて取捨選択していることに注意してください。
  </p>
  <p>
    この文書の最新版は常に <url id="&url-release-notes;"> から入手可能です。お読みのバージョンが 1 
    ヵ月以上前のものでしたら<footnote><p>PDF 版の場合は最初のページに、HTML 
    版の場合はフッターに、いつのバージョンかが記載されています。</p></footnote>、最新版を取得したほうがよいでしょう。
  </p>
  <p>
    この文書では、Debian の 1 つ前のリリースからのアップグレード (この場合、&oldreleasename; からのアップグレード) 
    のみがサポート・記述されていることに注意してください。さらに古いリリースからのアップグレードが必要な場合は、過去のリリースノートを読み、まず 
    &oldreleasename; へとアップグレードすることをお勧めします。
  </p>
  <sect id="bug_reports">
   <heading>
     この文書に関するバグを報告する
   </heading>
   <p>
     筆者たちは、この文書で説明されているすべての異なるアップグレード手順を試し、また、発生する可能性がありユーザが直面するかもしれないすべての問題も予想しようとしました。
   </p>
   <p>
     そうはいっても、この文書にバグ (不正確な情報や抜け落ちている情報) 
     を見つけたと思う場合は、<package>release-notes</package> パッケージに対するバグ報告を<url 
     id="&url-bts;" name="バグ追跡システム">に提出してください。
   </p>
  </sect>
  <sect id="upgrade_reports">
   <heading>
     アップグレードについての報告をする
   </heading>
   <p>
     &oldreleasename; から &releasename; 
     へのアップグレードに関連するユーザからの情報はどんなものでも歓迎します。情報を共有するのを厭わない場合は、<package>upgrade-reports</package> 
     パッケージに対するバグ報告にアップグレードの結果を含めて<url id="&url-bts;" 
     name="バグ追跡システム">に提出してください。報告に添付ファイルを含める場合は、(<prgn>gzip</prgn> を使用して) 
     圧縮するようお願いします。
   </p>
   <p>
     アップグレードについての報告を提出する際には、以下の情報を含めてください。
    <list>
     <item>
      <p>
        アップグレード前後のパッケージデータベースの状態。<file>/var/lib/dpkg/status</file> にある 
        <prgn>dpkg</prgn> 
        の状態データベースと、<file>/var/lib/aptitude/pkgstates</file> にある 
        <prgn>aptitude</prgn> のパッケージ状態情報です。<ref id="data-backup"> 
        で説明するように、アップグレードを実行する前にバックアップをとっておくべきです。しかし、これらの情報のバックアップは 
        <file>/var/backups</file> にもとられます。
      </p>
     </item>
     <item>
      <p>
        <prgn>script</prgn> を使用してとったセッションのログ。<ref id="record_session"> 
        で説明します。
      </p>
     </item>
     <item>
      <p>
        <prgn>aptitude</prgn> のログ。<file>/var/log/aptitude</file> にあります。
      </p>
     </item>
    </list>
   </p>
   <p>
     注意: 
     バグ報告に情報を含める前に少し時間をかけてログに機密情報が含まれていないか検査し、機密情報を見つけた場合はそれをログから削除してください。というのも、バグ報告に含まれる情報は公開データベースで公表されるからです。
   </p>
  </sect>
  <sect id="sources">
   <heading>
     この文書のソース
   </heading>
   <p>
     この文書は <package>debiandoc-sgml</package> を使用して生成されています。リリースノートのソースは 
     <em>Debian ドキュメンテーションプロジェクト (Debian Documentation Project)</em> の CVS 
     リポジトリにあります。ウェブから<url id="&url-cvs-release-notes;" 
     name="ウェブインタフェース">を使って個々のファイルにアクセスでき、変更を参照できます。CVS 
     へのアクセス方法に関してさらに詳しく知りたい場合は、<url id="&url-ddp-cvs-info;" name="『Debian 
     ドキュメンテーションプロジェクトの CVS』のページ">を参照してください。
   </p>
  </sect>
 </chapt>
 <chapt id="whats-new">
  <heading>
    &debian; &release; の最新情報
  </heading>
  <p>
    このリリースでは、Intel (EM64T) および AMD (AMD64) 双方の 64 ビットプロセッサをサポートした、AMD64 
    アーキテクチャのサポートが公式に追加されています。前のリリース &debian; 3.1 ('sarge') 
    では、この移植の非公式版が利用可能でした。<![ %amd64 
    [この非公式版からのアップグレードは、本リリースノートを参照すれば可能なはずですが、Debian による公式のサポートはなされていません。]]>
  </p>
  <p>
    Debian リリースマネージャが課した条件を満たせなかったので、Motorola 680x0 ('m68k') 
    アーキテクチャは公式にはサポートされなくなりました。最も大きな理由は、パフォーマンスの問題と必須ツールチェインコンポーネントの開発元でのサポートが限られたものだったことです。しかし、公式な安定版リリースの一部ではないとはいえ、m68k 
    移植版はまだ動作し、引き続きインストールが可能だと予想されます。
  </p>
  <p>
    &debian; &releasename; で公式にサポートされているアーキテクチャは以下のとおりです。
  </p>
  <p>
   <list>
    <item>
     <p>
       Intel x86 ('i386')
     </p>
    </item>
    <item>
     <p>
       Alpha ('alpha')
     </p>
    </item>
    <item>
     <p>
       SPARC ('sparc')
     </p>
    </item>
    <item>
     <p>
       PowerPC ('powerpc')
     </p>
    </item>
    <item>
     <p>
       ARM ('arm')
     </p>
    </item>
    <item>
     <p>
       MIPS ('mips' (ビッグエンディアン) と 'mipsel' (リトルエンディアン))
     </p>
    </item>
    <item>
     <p>
       Intel Itanium ('ia64')
     </p>
    </item>
    <item>
     <p>
       HP PA-RISC ('hppa')
     </p>
    </item>
    <item>
     <p>
       S/390 ('s390')
     </p>
    </item>
    <item>
     <p>
       AMD64 ('amd64')
     </p>
    </item>
   </list>
  </p>
  <p>
    移植状況の詳細や、お使いの移植版に特有の情報については、<url id="&url-ports;" name="Debian 
    の移植版に関するページ">で読むことができます。
  </p>
   <![ %secondrelease [

  <p>
    これは、&debian; ではまだ 2 回目の、&arch-title; 
    アーキテクチャ用の公式リリースです。リリースするのに十分なほど既に安定している、と私たちは考えていますが、他のアーキテクチャ用のリリースほど広くはまだ使われていない 
    (したがってユーザによるテストもそんなにされていない) ことから、いくつかのバグに出喰わす可能性もあります。どんな問題が起きた場合でも、<url 
    id="&url-bts;" name="バグ追跡システム">を使って報告してください。その際、そのバグが &architecture; 
    プラットフォーム上で生じたものであることを必ず書き添えてください。
  </p>
   ]]><![ %arm [

  <sect id="new-arch">
   <heading>
     &arch-title; に関する最新情報
   </heading>
   <p>
     RiscPC (RPC) のサポートは不完全であり、etch の次のリリースでのサポートはありません。RiscPC のカーネルは etch 
     では提供されていますが、インストーラはこのシステムをサポートしません。
   </p>
   <p>
     Intel IXP4xx プラットフォームのサポートが追加されました。インストーラには Linksys NSLU2 
     のサポートも含まれています。 Linksys NSLU2 は小さく、USB に接続したストレージの使用が可能な安価なデバイスです。NSLU2 
     で Debian を使用するためのさらに詳しい情報は <url 
     id="http://www.cyrius.com/debian/nslu2/"> で見つかるでしょう。
   </p>
   <p>
     Intel I/O Processor (IOP) プラットフォームのサポートも追加されました。具体的には、&debian; 
     &release; は IOP 32x ベースのデバイスをサポートします。インストーラは IOP チップをベースにした IO-Data の 
     GLAN Tank と Thecus N2100 の 2 つの Network Attached Storage (NAS) 
     デバイスに対応しています。<url id="http://www.cyrius.com/debian/iop/"> を参照してください。
   </p>
  </sect>
   ]]><![ %mips-mipsel [

  <sect id="new-arch">
   <heading>
     &arch-title; に関する最新情報
   </heading>
    <![ %mipsel [

   <p>
     etch では DECstation 
     のサポートは不完全で、テストされていません。次のリリースからは完全にサポートされなくなります。これには、以前に Debian 
     で別々にサポートされていた DECstation の r3k-kn02 と r4k-kn04 が含まれています。
   </p>
   <p>
     MIPS ベースの Cobalt マシン (Qube 2700, RaQ1, Qube2, RaQ2) 
     でのインストールがシリアルコンソールなしでも可能になりました。標準で、Cobalt へのインストールは SSH 
     経由で行えます。さらに詳しい情報は、<url id="http://www.cyrius.com/debian/cobalt/"> 
     を参照してください。
   </p>
    ]]><![ %mips [

   <p>
     SGI IP32 プラットフォームのサポートが追加されました。IP32 プラットフォームは R5000、R5200 または RM7000 
     プロセッサを載せた SGI O2 マシンから構成されています。インストールはフレームバッファまたはシリアルコンソール経由で行えます。
   </p>
    ]]>

   <p>
     BCM1480 quad-core チップをベースとした Broadcom の SB1A 評価ボード BCM91480B ("BigSur") 
     が、カーネルおよびインストーラの両方でサポートされるようになりました。このボードはリトルおよびビッグエンディアンの両方のモードでサポートされています。
   </p>
   <p>
     Qemu マシンのサポートが追加されています。Qemu/MIPS マシンは MIPS 4Kc CPU の載った古い ISA PC 
     形式をエミュレートします。
   </p>
  </sect>
   ]]><![ %powerpc [

  <sect id="new-arch">
   <heading>
     &arch-title; に関する最新情報
   </heading>
   <p>
     このリリースでは 64bit PowerPC アーキテクチャ (IBM pSeries、Apple G5 Power Mac) 
     のサポートが追加されています。Apple Apus サブアーキテクチャのサポートは廃止されました。Apple Nubus 
     サブアーキテクチャもサポートされません。
   </p>
  </sect>
   ]]>

  <sect id="newdistro">
   <heading>
     ディストリビューションの最新情報
   </heading>
   <p>
     Debian のこの新しいリリースには、一つ前のリリースである &oldreleasename; 
     に付属していたよりさらに多くのソフトウェアが付属しています。このディストリビューションには、&packages-new; 
     以上の新しいパッケージが含まれており、全体のパッケージ数は &packages-total; 
     以上になりました。ディストリビューション中のほとんどのソフトウェア、すなわち約 &packages-updated; 
     ものソフトウェアパッケージ (これは &oldreleasename; のパッケージ全体の 
     &packages-update-percent;% にあたります) が更新されました。また、かなりの数のパッケージ 
     (&oldreleasename; のパッケージの &packages-removed-percent;% にあたる 
     &packages-removed; 以上) 
     が、様々な理由でディストリビューションから取り除かれました。これらのパッケージについては更新されておらず、パッケージ管理用のフロントエンドでは 
     'obsolete' というマークがつけられます。
   </p>
   <p>
     このリリースで &debian; は、XFree86 から X.Org の 7.1 
     リリースに移行しました。より広い範囲のハードウェアがサポートされ、自動認識もよりよいものになっています。この移行によって X Window 
     System 用で初めてのコンポジティングウィンドウマネージャの一つである Compiz 
     が使えるようになり、サポートされているデバイスではハードウェア OpenGL アクセラレーションを十分に活用できます。
   </p>
   <p>
     今回も &debian; にはいくつかのデスクトップアプリケーションやデスクトップ環境が含まれています。特に、GNOME 
     2.14<footnote><p>一部のモジュールは GNOME 2.16 のものです。</p></footnote>、KDE 
     3.5.5a、Xfce 4.4 などがあります。業務用のアプリケーションもアップグレードされました。オフィススイートの 
     OpenOffice.org 2.0.4a や KOffice 1.6、それに GNUcash 2.0.5、GNUmeric 
     1.6.3、Abiword 2.4.6 などです。
   </p>
   <p>
     他のデスクトップアプリケーションも更新されました。Evolution 2.6.3 や Gaim 2.0 などです。Mozilla 
     スイートも更新され、主要なプログラムの名前が変わりました。<prgn>iceweasel</prgn> (バージョン 2.0.0.2) は 
     <prgn>Firefox</prgn> ウェブブラウザの改名版で、<prgn>icedove</prgn> (バージョン 1.5) は 
     <prgn>Thunderbird</prgn> メールクライアントの改名版です。
   </p>
   <p>
     またこのリリースには、特に挙げるなら、以下のソフトウェアの更新も含まれています。
   </p>
   <p>
    <list>
     <item>
      <p>
        GNU C ライブラリのバージョン 2.3.6
      </p>
     </item>
     <item>
      <p>
        GNU Compiler Collection 4.1 (デフォルトのコンパイラ)
      </p>
     </item>
     <item>
      <p>
        インタープリタ言語: Python 2.4、PHP 5.5
      </p>
     </item>
     <item>
      <p>
        サーバソフトウェア:
      </p>
      <p>
       <list>
        <item>
         <p>
           メールサーバ: Exim 4.63 (新規インストール時のデフォルトのメールサーバ)、Postfix 2.3、Courier 
           0.53、Cyrus 2.2
         </p>
        </item>
        <item>
         <p>
           ウェブサーバ: Apache 2.2、fnord 1.10
         </p>
        </item>
        <item>
         <p>
           データベースサーバ: MySQL 5.0.32、PostgreSQL 8.1
         </p>
        </item>
        <item>
         <p>
           OpenSSH サーバのバージョン 4.3
         </p>
        </item>
        <item>
         <p>
           ネームサーバ: Bind 9.3、maradns 1.2
         </p>
        </item>
        <item>
         <p>
           ディレクトリサーバ: OpenLDAP 2.3
         </p>
        </item>
       </list>
      </p>
     </item>
    </list>
   </p>
   <p>
     公式の &debian; ディストリビューションは、現在は 19 〜 23 枚のバイナリ CD と、ほぼ同数のソース CD 
     の形で提供されています。DVD 版のディストリビューションも利用可能です。
   </p>
   <sect1 id="pkgmgmt">
    <heading>
      パッケージ管理
    </heading>
    <p>
      <prgn>aptitude</prgn> 
      は、コンソール上でのパッケージ管理に適したプログラムです。<prgn>apt-get</prgn> 
      のコマンドライン操作の大半をサポートしており、<prgn>apt-get</prgn> 
      よりも依存関係の解決の面で優れているとわかっています。まだ <prgn>dselect</prgn> 
      を使用している場合は、公式のパッケージ管理用フロントエンドとして <package>aptitude</package> 
      に移行すべきでしょう。
    </p>
    <p>
      &releasename; では、衝突を解決するための先進的な仕組みが <prgn>aptitude</prgn> 
      で実装されました。この仕組みは、衝突が検出された原因がパッケージ間の依存関係の変化にある場合に、競合に対する最善の解決方法を見つけようとします。
    </p>
    <p>
      <em>Secure APT</em> が &releasename; 
      で使えるようになりました。この機能は、強力な暗号化とデジタル署名を簡単にサポートし、ダウンロードしたパッケージを検証できるようにすることで、&debian; 
      システムにさらなるセキュリティを追加します。今回のリリースには、apt のキーリングに新しい鍵を追加するための 
      <prgn>apt-key</prgn> 
      ツールも含まれています。<package>debian-archive-keyring</package> パッケージで提供されている 
      apt のキーリングには、デフォルトでは現在の Debian アーカイブを署名するための鍵しか含まれていないからです。
    </p>
    <p>
      デフォルトの設定では、<prgn>apt</prgn> 
      は、検証されていないソースからパッケージをダウンロードする場合に警告を発します。将来のリリースでは、すべてのパッケージについて、ダウンロード前に検証しなければならないようになるでしょう。非公式な 
      apt リポジトリの管理者には、暗号鍵を生成してその鍵で Release 
      ファイルに署名し、さらにその公開鍵を配布する安全な手段を提供することをお勧めします。
    </p>
    <p>
      さらに詳しい情報は、<manref section="8" name="apt">・<em>Debian 安全化マニュアル 
      (Securing Debian Manual)</em> の <url 
      id="http://www.debian.org/doc/manuals/securing-debian-howto/ch7#s-deb-pack-sign" 
      name="Package signing in Debian"> の章・<url 
      id="http://wiki.debian.org/SecureApt" name="Wiki 文書">を参照してください。
    </p>
    <p>
      <prgn>apt</prgn> に追加されたもう 1 つの機能は、最後に update を実行してから 
      <file>Packages</file> ファイルに加えられた変更のみをダウンロードできる機能です。この機能に関するさらに詳しい情報は 
      <ref id="apt-pdiff"> にあります。
    </p>
   </sect1>
   <sect1 id="volatile">
    <heading>
      debian-volatile が公式サービスに
    </heading>
    <p>
      &oldreleasename; のリリースとともに非公式のサービスとして導入された <em>debian-volatile</em> 
      サービスが、&debian; の公式のサービスとなりました。
    </p>
    <p>
      つまり、<tt>.debian.org</tt> のアドレスがサービスに使用されるようになりました<footnote><p>これまでの 
      <tt>volatile.debian.net</tt> 
      というアドレスも当分は引き続き有効です。</p></footnote>。このサービスを既に利用している場合は、忘れずに 
      <file>/etc/apt/sources.list</file> を更新してサービスのアドレスを変更してください。
    </p>
    <p>
      <em>debian-volatile</em> を利用すると、すぐに古くなってしまう情報を含む安定版 (stable) 
      パッケージをユーザが容易に更新できます。そのような情報としては、例えばウイルススキャナのシグネチャリストや、スパムフィルタのパターンセットがあります。さらに詳しい情報やミラーのリストについては、アーカイブの<url 
      id="&url-debian-volatile;" name="ウェブページ">を参照してください。
    </p>
   </sect1>
  </sect>
  <sect id="system-changes">
   <heading>
     システムの改良
   </heading>
   <p>
     このディストリビューションには &releasename; 
     を新しくインストールする場合に利点となるいくつかの変更が含まれています。しかしそれは &oldreleasename; 
     からのアップグレードには自動的に適用されないでしょう。このセクションではもっとも重要な変更の概要について述べます。
   </p>
   <p>
    <taglist>
     <tag>
       基本的な開発用パッケージの優先度が低く
     </tag>
     <item>
      <p>
        優先度が<em>標準 (standard)</em> だったパッケージのいくつかは、現在、優先度が<em>任意 
        (optional)</em> 
        になりました。これは、もはや標準ではインストールされないことを意味します。(<package>dpkg-dev</package>、<package>flex</package>、<package>make</package>) 
        などのソフトウェアや 
        (<package>libc6-dev</package>、<package>linux-kernel-headers</package>) 
        などの開発用ヘッダに加えて、標準の C/C++ コンパイラ、<package>gcc</package> も含みます。
      </p>
      <p>
        これらの開発用パッケージをシステムにインストールしたい場合は、<package>build-essential</package> 
        パッケージをインストールするのが一番簡単な方法です。これによって上記のパッケージの多くが引きずられてインストールされます。
      </p>
     </item>
     <tag>
       SELinux は優先度が標準 (standard) に (ただしデフォルトでは無効)
     </tag>
     <item>
      <p>
        SELinux のサポートに必要なパッケージの優先度が<em>標準 (standard)</em> 
        に昇格しました。つまり、新規インストールの場合はこれらのパッケージがデフォルトでインストールされます。既存のシステムの場合は次のコマンドを実行すると 
        SELinux をインストールできます。
       <example>
# aptitude install selinux-basics
       </example>
      </p>
      <p>
        SELinux のサポートはデフォルトでは有効になって<em>いない</em>ことに注意してください。SELinux 
        をセットアップして有効にするのに必要な情報は、<url id="&url-wiki-selinux;" name="Debian 
        Wiki"> にあります。
      </p>
     </item>
     <tag>
       デフォルトの inet スーパーデーモンが変更
     </tag>
     <item>
      <p>
        &releasename; では、<package>netkit-inetd</package> に代わって 
        <package>openbsd-inetd</package> がデフォルトの inet 
        スーパーデーモンになりました。サービスが何も設定されていなければ、デーモンは起動しないでしょう。これは標準で正しい動作です。新しいデフォルトの 
        inet デーモンはアップグレード時に自動的にインストールされます。
      </p>
     </item>
     <tag>
       デフォルトの <prgn>vi</prgn> クローンが変更
     </tag>
     <item>
      <p>
        デフォルトでインストールされる <prgn>vi</prgn> クローンが、<package>nvi</package> から 
        <prgn>vim</prgn> のコンパクトバージョン (<package>vim-tiny</package>) に変わりました。
      </p>
     </item>
     <tag>
       <tt>ext2</tt>/<tt>ext3</tt> ファイルシステムでの標準機能の変更点
     </tag>
     <item>
      <p>
        標準で、新しい ext2 と ext3 ファイルシステムは <em>dir_index</em> と 
        <em>resize_inode</em> 機能つきで作成されます。<em>dir_index</em> 
        機能は大量のファイルがあるディレクトリでの処理をスピードアップします。<em>resize_inode</em> 
        機能はファイルシステムを使用中に (つまり、マウントされた状態で) サイズの変更を可能にします。
      </p>
      <p>
        &oldreleasename; からアップグレードするユーザは、<prgn>tune2fs</prgn> を使って手動で 
        <em>dir_index</em> フラグを追加できます<footnote><p><em>filetype</em> 
        フラグは、おそらく &oldreleasename; 
        より前にインストールしたシステムを除き、ほとんどのファイルシステムですでに設定されているはずです。</p></footnote>。<em>resize_inode</em> 
        フラグはすでに作成済みのファイルシステムには追加できません。<tt>dumpe2fs -h</tt> 
        コマンドで、ファイルシステムにどのフラグが設定されているか調べることができます。
      </p>
     </item>
     <tag>
       &releasename; ではデフォルトエンコーディングが UTF-8 に
     </tag>
     <item>
      <p>
        新しくインストールした場合の &debian; のデフォルトエンコーディングは UTF-8 です。多くのアプリケーションはデフォルトで 
        UTF-8 を使用するよう設定されています。
      </p>
      <p>
        &releasename; にアップグレードするユーザで、UTF-8 
        に変更したい方は、環境とロケール定義の再設定が必要です。システム全体のデフォルトエンコーディングは 
        <tt>dpkg-reconfigure locales</tt> コマンドで変更できます。はじめにあなたの言語と国で UTF-8 
        ロケールを選択してください。そしてそれをデフォルトにセットしてください。UTF-8 に変更するということは、既存のファイルを以前の 
        (古い) エンコーディングから UTF-8 に変換する必要があることに注意してください。
      </p>
      <p>
        <package>utf8-migration-tool</package> パッケージは UTF-8 
        への移行を助けるツールです。しかし、このパッケージは &releasename; に含めるのに間に合わなかったので不安定版 
        (unstable) 
        でしか利用できません。このツールを利用する場合は、事前にデータと設定のバックアップを取っておくことを強くお勧めします。
      </p>
      <p>
        一部のアプリケーションではまだ UTF-8 環境では正しく動かない可能性があることに注意してください。ほとんどが表示に関する問題です。
      </p>
     </item>
    </taglist>
   </p>
   <p>
     <url id="http://wiki.debian.org/Sarge2EtchUpgrade" name="Debian Wiki"> 
     には &oldreleasename; と &releasename; の違いについて、さらに情報があります。
   </p>
  </sect>
  <sect id="kernel-changes">
   <heading>
     カーネル関連の主要な変更点
   </heading>
   <p>
     &debian; &release; で提供されているカーネルのバージョンは、すべてのアーキテクチャにおいて &kernelversion; 
     です。このリリースはまだ 2.4 系カーネルとある程度は互換性があります<![ %defaulted-2.4 
     [<footnote><p>いくつかのパッケージは 2.4 系ではもはや正しく動かない可能性があります。<ref 
     id="incompatible-2.4">を参照してください。</p></footnote>]]>。しかし、Debian はもはや 2.4 
     系カーネルパッケージを提供することはありません。
   </p>
   <p>
     カーネルそのものとカーネルのパッケージングに大きな変更がありました。変更のうちいくつかはアップグレード手続きを複雑にします。そして 
     &releasename; 
     にアップグレードした後、システムを再起動したとき問題が発生する可能性があります。このセクションでは、最も重要な変更の概要を述べます。起こる可能性のある問題とその対処法については、後の章で述べます。
   </p>
    <![ %defaulted-2.4 [

   <p>
     2.4 系のカーネルを現在使用中の場合は、<ref id="upgrade-to-2.6"> を熟読してください。
   </p>
    ]]>

   <sect1 id="kernel-packaging">
    <heading>
      カーネルパッケージングにおける変更
    </heading>
    <p>
     <taglist>
      <tag>
        カーネルパッケージの名前が変更
      </tag>
      <item>
       <p>
         名前空間を整理するため、Linux カーネルパッケージはすべて <tt>kernel-*</tt> から 
         <tt>linux-*</tt> に名前が変わりました。この変更によって、将来、Debian に Linux 
         以外のカーネルを含めやすくなるでしょう。
       </p>
      </item>
       <![ %i386 [

      <tag>
        "386" フレーバーで "486" フレーバーを置き換え
      </tag>
      <item>
       <p>
         &oldreleasename; で 80386 プロセッサがサポートされなくなったため、386 フレーバーは切り捨てられ、新しい 
         486 フレーバーに置き換えられました。
       </p>
      </item>
       ]]><![ %amd64 [

      <tag>
        &arch-title; 用のカーネルが単一の汎用カーネルに
      </tag>
      <item>
       <p>
         &oldreleasename; 
         では、このアーキテクチャにおいて異なるプロセッサファミリーごとにそれぞれのカーネルフレーバーがありました。システムのプロセッサに合わせて、カーネルを自動的に最適化するというカーネル内の変更により、カーネルのフレーバーを分ける必要がまったくなくなりました。
       </p>
      </item>
       ]]><![ %i386-amd64-ia64 [

      <tag>
        標準のカーネルで SMP が利用可能に
      </tag>
      <item>
       <p>
         マルチプロセッサシステムには、Linux カーネルの <tt>*-smp</tt> 
         フレーバーはもう必要ありません。&arch-title; では、<tt>-smp</tt> という接尾辞のない 
         <tt>linux-image</tt> パッケージはユニプロセッサとマルチプロセッサの両方のシステムをサポートしています<![ 
         %i386 [ (ただ一つの例外は 486 フレーバーです。このフレーバーはシングルプロセッサのみサポートします)]]>。
       </p>
      </item>
       ]]><![ %mips [

      <tag>
        r5k-ip22 カーネルフレーバーの廃止
      </tag>
      <item>
       <p>
         現在、r4k-ip22 イメージが R4x000 または R5000 CPU の IP22 
         マシンどちらでもサポートするので、R5000 CPU が載った IP22 マシン用のカーネルイメージは廃止されました。
       </p>
      </item>
       ]]>

     </taglist>
    </p>
    <p>
      廃止されたパッケージのために、可能な場合は、新しいパッケージに依存する移行用のダミーパッケージが用意されています。
    </p>
   </sect1>
   <sect1 id="kernel-initrd">
    <heading>
      新しい initrd 生成ユーティリティ
    </heading>
     <![ %no-initrd [

    <p>
      &arch-title; の Debian カーネルイメージパッケージはシステムを起動するためにinitrd 
      を必要としません。ですので、このセクションの情報はあなたにとって必要ではないかもしれませんが、参考のために残してあります。
    </p>
     ]]>

    <p>
      <![ %uses-initrd [ &arch-title; の Debian カーネルイメージパッケージはシステムを起動するために 
      initrd を必要とします。 ]]> カーネル内での変更により、&oldreleasename; での initrd 
      を生成するためのユーティリティであった 
      <package>initrd-tools</package>はもはや使用されないので廃止されました。その代わりとして 2 
      つの新しいユーティリティが開発されました。<package>initramfs-tools</package> と 
      <package>yaird</package> です。この 2 
      つの新しいユーティリティの背後にあるコンセプトはかなり異なっています。<url 
      id="http://wiki.debian.org/InitrdReplacementOptions" name="Debian 
      Wiki"> にはその概要があります。両方のユーティリティとも 圧縮された <prgn>cpio</prgn> アーカイブである 
      <em>initramfs</em> ファイルシステムを使用して initrd 
      を生成します。デフォルトになっているお勧めのユーティリティは、<package>initramfs-tools</package> です。
    </p>
     <![ %uses-initrd [

    <p>
      &releasename; のカーネルにアップグレードすると、デフォルトでは 
      <package>initramfs-tools</package> がインストールされます。<![ %defaulted-2.4 [ 
      2.4 系カーネルから 2.6 系カーネルにアップグレードする場合は、<package>initramfs-tools</package> 
      を使用しなければなりません。2.2 系や 2.4 系のカーネルの上で <package>yaird</package> 
      を使用すると、linux-image-2.6 のインストールは失敗に終わります。]]>
    </p>
    <p>
      &oldreleasename; からのアップグレードに必要なため、<package>initrd-tools</package> 
      パッケージは &releasename; にまだ含まれています。次のリリースでは廃止されるでしょう。
    </p>
     ]]>

   </sect1>
   <sect1 id="kernel-udev">
    <heading>
      動的な <file>/dev</file> 管理とハードウェア検出
    </heading>
    <p>
      &releasename; カーネルは <tt>devfs</tt> のサポートを提供しません。
    </p>
    <p>
      <tt>devfs</tt> が、ユーザ空間での devfs の実装である <package>udev</package> 
      に置き換えられました。
    </p>
    <p>
      <package>udev</package> は、<file>/dev</file> 
      ディレクトリにマウントされ、カーネルでサポートされているデバイスをそのディレクトリと結びつけます。そしてカーネルモジュールがロード・アンロードされるとき、カーネルにより生成されたイベントに基づき適切にデバイスファイルを動的に作成・削除します。<prgn>udev</prgn> 
      は <tt>devfs</tt> よりさらに万能で、<package>hal</package> (ハードウェア抽象化レイヤ) 
      のような他のパッケージで使用されるサービスを提供します。
    </p>
    <p>
      <package>udev</package> 
      はカーネルと連動し、ハードウェアを検出したり、検出したデバイスのモジュールをロードする働きをします。そのため、これは 
      <package>hotplug</package> と衝突します。また、&oldreleasename; 
      においては、システムの起動中にモジュールをロードするのに <package>discover</package> 
      が使用されていました。しかし、&releasename; での <package>discover</package> 
      の新しいバージョンはもうその機能を提供しません。<![ %not-s390 [<package>discover</package> 
      はシステムのグラフィックコントローラの検出のために X.Org によってまだ使用されています。]]>
    </p>
     <![ %uses-initrd [

    <p>
      Debian カーネルイメージをインストールすると、デフォルトで <package>udev</package> 
      もインストールされます。<package>initramfs-tools</package> が 
      <package>udev</package> に依存しているためです。
    </p>
    <p>
      モジュール化されていないカスタムカーネルをコンパイルしたり、<package>yaird</package> のような別の initrd 
      生成ユーティリティを使用すれば、<package>udev</package> 
      をインストールしなくて済みます。しかし、<package>initramfs-tools</package> がお勧めの initrd 
      生成ユーティリティです。
    </p>
     ]]>

   </sect1>
  </sect>
 </chapt>
 <chapt id="installing">
  <heading>
    インストールシステム
  </heading>
  <p>
    Debian Installer は公式の Debian 
    インストールシステムです。このインストーラは、様々なインストール方法を提供しています。お使いのシステムにインストールするのにどの方法が利用できるかは、使っているアーキテクチャに依存します。
  </p>
  <p>
    &releasename; 用のインストーラのイメージは、インストールガイドとともに <url id="&url-installer;" 
    name="Debian のウェブサイト">にあります。
  </p>
  <p>
    インストールガイドは、Debian 公式 CD/DVD セットの 1 枚目の CD/DVD 内の、次の場所にも含まれています。
   <example>
/doc/install/manual/<var>言語</var>/index.html
        </example>
  </p>
  <p>
    これまでに知られている問題点を列挙した debian-installer の<url 
    id="&url-installer;index#errata" name="正誤表">も確認しておくとよいでしょう。
  </p>
   <![ %alpha [

  <p>
    このインストーラでは、SRM コンソールをサポートした alpha システムにしかインストールできません。インストールを始める前に、システムを 
    SRM に切り替えるのを忘れないでください。マシンが AlphaBIOS/ARC 
    コンソールしかサポートしていない場合、&releasename; をインストールするお勧めの方法は、まず (最小限の) woody 
    システムをインストールし、次に &oldreleasename; に、そして最後に &releasename; へとアップグレードすることです。
  </p>
   ]]><![ %sparc [

  <sect id="sparc_fb">
   <heading>
     &arch-title; のフレームバッファに関する問題
   </heading>
   <p>
     一部のシステムで表示に問題があるため、&arch-title; 
     においては、大部分のグラフィックカードでフレームバッファのサポートがデフォルトで無効になっています。そのため、フレームバッファをきちんとサポートしているシステムにおいては、表示が醜くなる可能性があります。インストーラの表示に問題が見られる場合は、<tt>framebuffer=true</tt> 
     をパラメータとして与えて、インストーラを起動してみてください。フレームバッファがデフォルトでは使われないにもかかわらず、お使いのハードウェアで動作する場合は、どうぞ私たちに教えてください。
   </p>
  </sect>
  <sect id="sparc_illegal_instruction">
   <heading>
     &arch-title; の起動に関する問題
   </heading>
   <p>
     何人かのユーザから、'<tt>boot cdrom</tt>' という PROM コマンドでは、'<tt>Illegal 
     Instruction</tt>' エラーを表示して、インストール CD の起動に失敗するという報告が上がっています。
   </p>
   <p>
     この問題のはっきりしている点は、直前に Solaris 
     から再起動したマシンだから動作しないということです。対処方法としては、マシンの電源を完全に切り、インストール CD から直接起動してください。
   </p>
   <p>
     この問題は、様々なシステム (執筆時点では、Enterprise 450, Blade 2000, Fire V240, Enterprise 
     250, Blade 100) 
     のユーザから報告されています。ですから、この問題は一般的なものなのでしょう。あなたのハードウェアで同様の問題が観察されたら、教えていただけるとありがたいです。
   </p>
  </sect>
   ]]>

  <sect id="inst-new">
   <heading>
     インストールシステムの最新情報
   </heading>
   <p>
     Debian Installer は、&oldreleasename; 
     での初めての公式リリース以降も活発に開発されています。その結果、ハードウェアサポートが改良され、ワクワクするような新機能がいくつか追加されました。
   </p>
   <p>
     このリリースノートでは、インストーラにおける変更点のうち主要なもののみをリストアップします。&oldreleasename; 
     以降になされた詳細な変更一覧の概要に興味がある場合は、Debian Installer の<url 
     id="&url-installer-news;" name="ニュースの履歴">で閲覧可能な、&releasename; 
     用ベータ版やリリース候補版 (RC) のリリースアナウンスを参照してください。
   </p>
   <sect1 id="inst-changes">
    <heading>
      主要な変更点
    </heading>
    <p>
     <taglist>
      <tag>
        インストール中の再起動が不要に
      </tag>
      <item>
       <p>
         インストールは以前は 2 
         つの部分に分かれていました。ベースシステムをセットアップしてそれを起動可能にするステージと、その後で再起動してから、ユーザのセットアップ・パッケージ管理システムのセットアップ・(tasksel 
         を使用した) 追加パッケージのインストールなどの面倒を見る <prgn>base-config</prgn> を実行するステージです。
       </p>
       <p>
         &releasename; では、第 2 ステージが Debian Installer 
         本体に統合されました。この統合には多数の利点があります。例えば、セキュリティが強化されます。また、インストールの最後の再起動後には新システムが正しいタイムゾーンを既にもった状態となり、デスクトップ環境をインストールしている場合はすぐにグラフィカルユーザインタフェースが起動されます。
       </p>
      </item>
      <tag>
        新システムでは UTF-8 エンコーディングがデフォルトに
      </tag>
      <item>
       <p>
         インストーラは、古くから使われてきた言語固有のエンコーディング (ISO-8859-1、EUC-JP、KOI-8 など) 
         ではなく、UTF-8 エンコーディングを使用するシステムをセットアップします。
       </p>
      </item>
      <tag>
        より柔軟なパーティション分割
      </tag>
      <item>
       <p>
         ガイドつきのパーティション分割を利用して LVM ボリュームにファイルシステムをセットアップ可能になりました。
       </p>
       <p>
         インストーラは暗号化ファイルシステムもセットアップできます。パーティションの手動分割を使用する場合、<tt>dm-crypt</tt> 
         と <tt>loop-aes</tt> 
         のどちらを使用するか、パスフレーズとランダムなキーのどちらを使用するかを選択したり、様々な他のオプションを調整できます。ガイドつきのパーティション分割を利用する場合、インストーラは、他の 
         (<file>/boot</file> 以外の) あらゆるファイルシステムを論理ボリュームとして含む暗号化 LVM 
         パーティションを作成します。
       </p>
      </item>
       <![ %g-i [

      <tag>
        グラフィカルユーザインタフェース
      </tag>
      <item>
        <![ %i386-amd64 [

       <p>
         グラフィカルユーザインタフェースの方が好きな場合は、<tt>installgui</tt> 
         をつけてインストーラを起動してみてください。
       </p>
        ]]><![ %powerpc [

       <p>
         &arch-title; 
         では、通常のインストールイメージとは別に、グラフィカルユーザインタフェースを使用するイメージが試験的に利用可能です。このイメージは、ATI 
         のグラフィックカードのついた CHRP システムの大半では動作することがわかっていますが、&arch-title; 
         においては、通常のインストール CD に含められるほど十分にはテストされていません。
       </p>
       <p>
         グラフィカルインストーラを使用してみたい場合は、"gtk-miniiso" イメージを探してください。
       </p>
        ]]>

       <p>
         グラフィカルインストーラは、表現方法が異なるだけで、機能的には通常のインストーラとほぼ同等です。唯一の例外は、グラフィカルフロントエンドが、ランダムなキーを用いた暗号化パーティションのセットアップをサポートしていないということです。
       </p>
       <p>
         グラフィカルユーザインターフェースの主な利点は、通常のユーザインターフェース (newt) 
         よりも多くの言語をサポートしていることです。グラフィカルインストーラについての詳細と、グラフィカルインストーラと通常のインストーラの重要な相違点は、インストールガイドの付録で記述しています。
       </p>
       <p>
         注意: グラフィカルユーザインタフェースはすべてのアーキテクチャで利用可能ではありません。
       </p>
      </item>
       ]]>

      <tag>
        レスキューモード
      </tag>
      <item>
       <p>
         起動できないなどの問題がシステムに生じた場合、その解決にインストーラを利用できます。最初のステップは通常のインストールと同様ですが、インストーラはパーティション作成プログラムを起動しません。代わりにレスキューオプションのメニューを表示します。
       </p>
       <p>
         インストーラに <tt>rescue</tt> を与えて起動するかブートパラメータ 
         <tt>rescue/enable=true</tt> を追加して、レスキューモードをアクティブにしてください。
       </p>
      </item>
      <tag>
        root アカウントの代わりに sudo を使用
      </tag>
      <item>
       <p>
         エキスパートモードでのインストール中に、root アカウントをセットアップしないよう選択できます (root 
         アカウントはロックされます)。root アカウントをセットアップしない場合は代わりに <prgn>sudo</prgn> 
         をセットアップし、最初のユーザがシステム管理のためにこのコマンドを使用できるようにします。
       </p>
      </item>
      <tag>
        ダウンロードしたパッケージの暗号署名による検証
      </tag>
      <item>
       <p>
         インストーラがダウンロードしたパッケージは、暗号署名を通じて、<prgn>apt</prgn> 
         を用いて検証されるようになりました。これによって、ネットワーク経由でインストール中のシステムのセキュリティを侵害するのがさらに難しくなりました。
       </p>
      </item>
      <tag>
        メールの設定が簡単に
      </tag>
      <item>
       <p>
         「標準システム」のインストール時に、インストーラは、ローカルにメールを配送するだけのメールサーバの基本設定を、システムにセットアップします。このメールサーバは、同一ネットワークに接続している他のシステムとのメールのやりとりはできません。システムに対してローカルでないメールのやりとりを 
         (送信であれ受信であれ) 取り扱えるようにシステムを設定したい場合は、インストール後にメールシステムを再設定しなくてはなりません。
       </p>
      </item>
      <tag>
        デスクトップの選択
      </tag>
      <item>
       <p>
         ユーザがデスクトップを選択すると、インストールシステムは、デフォルトのデスクトップとして GNOME 
         デスクトップをインストールします。
       </p>
       <p>
         しかし、それ以外のデスクトップ環境をインストールしたいユーザには、ブートパラメータに以下を指定して簡単にインストールできます。KDE 
         の場合には <tt>tasks="standard, kde-desktop"</tt>、Xfce の場合には 
         <tt>tasks="standard, xfce-desktop"</tt> 
         としてください。ネットワークミラーを追加パッケージ取得元として使わずに、フル CD 
         イメージからインストールしている場合はうまく動作しません。DVD イメージやその他のインストール方法であればきちんと動作します。
       </p>
       <p>
         KDE デスクトップや Xfce デスクトップをデフォルトでインストールする、独立した CD イメージも用意しています。
       </p>
      </item>
       <![ %not-s390 [

      <tag>
        新しい言語
      </tag>
      <item>
       <p>
         翻訳者の多大な努力により、Debian は、テキストユーザインターフェースを使用した場合は 47 
         の言語でインストールできるようになりました。&oldreleasename; より 6 
         言語増えたことになります。このリリースで追加された言語は、ベラルーシ語、エスペラント語、エストニア語、クルド語、マケドニア語、タガログ語、ベトナム語、ウォロフ語です。ペルシャ語とウェールズ語の翻訳は更新されなかったため、このリリースではサポートされなくなりました。
       </p>
        <![ %g-i [

       <p>
         グラフィカルユーザインターフェースを使用する場合、さらに 11 
         の言語がサポートされています。これらの言語は、非グラフィカル環境では文字を表示できないため、グラフィカルインストーラだけで選択できます。新規にサポートされた言語は、ベンガル語、ゾンカ語、グジャラート語、ヒンディー語、グルジア語、クメール語、マラヤーラム語、ネパール語、パンジャブ語、タミール語、タイ語です。
       </p>
        ]]>

       <p>
         ロケールを選びたくないユーザは、インストーラの言語選択で <em>C</em> を選択できるようになりました。<url 
         id="&url-d-i-i18n;" name="d-i 言語一覧">で詳細情報をご覧いただけます。
       </p>
      </item>
      <tag>
        地域化やタイムゾーンの設定が簡単に
      </tag>
      <item>
       <p>
         言語・国・タイムゾーンの設定が簡単になり、ユーザが要求される情報の量が減りました。インストーラは、どの言語が選択されたかによってシステムの国とタイムゾーンの情報を推測するようになり、推測できない場合は限られた選択肢だけを表示するようになりました。ユーザは、必要であれば国や言語の一般的でない組み合わせを選択することもできます。
       </p>
      </item>
      <tag>
        改良されたシステム全体の地域化
      </tag>
      <item>
       <p>
         以前 <package>localization-config</package> 
         ツールが担当していた多くの国際化・地域化タスクは、現在 Debian 
         インストーラか、個々のパッケージ自身に含まれています。つまり言語を選択すると、標準システムとデスクトップ環境で、自動的にその言語に必要なパッケージ 
         (辞書、ドキュメント、フォント……) をインストールするということです。自動で扱われなくなった設定は、用紙サイズの設定と、言語による 
         X ウィンドウシステムの高度なキーボード設定です。
       </p>
       <p>
         言語特有のパッケージは、インストール中で利用可能な場合にのみ、自動的にインストールされることに注意してください。
       </p>
      </item>
       ]]>

     </taglist>
    </p>
   </sect1>
   <sect1 id="inst-auto">
    <heading>
      自動インストール
    </heading>
    <p>
      前のセクションで述べたとおりインストーラに多数の変更が加えられたので、インストーラによる、事前設定ファイルを使用した自動インストールのサポートにも変更がありました。つまり、&oldreleasename; 
      のインストーラで動いた既存の事前設定ファイルがあっても、修正を加えずにそれが新しいインストーラで動くことは期待できません。
    </p>
    <p>
      幸いなことに、事前設定の使用方法に関する豊富な文書を含んだ付録が<url id="&url-install-manual;" 
      name="インストールガイド">につけられました。
    </p>
    <p>
      &releasename; 
      のインストーラには、インストールをさらに、そしてより簡単に自動化できるようにする、ワクワクするような新機能がいくつか追加されました。このインストーラは 
      RAID や LVM、暗号化 LVM を使用した高度なパーティション分割もサポートしています。詳しくは付属文書を参照してください。
    </p>
   </sect1>
  </sect>
  <sect id="popcon">
   <heading>
     人気コンテスト
   </heading>
   <p>
     インストールシステムが昔のように <package>popularity-contest</package> 
     パッケージをインストールするよう提案します。このパッケージは &oldreleasename; 
     にはデフォルトではインストールされませんでしたが、それより前のリリースではインストールされていました。
   </p>
   <p>
     <package>popularity-contest</package> 
     は、ディストリビューション内のどのパッケージが実際に使われているかについての有益な情報を、Debian 
     プロジェクトに提供してくれます。この情報は、主にインストール CD-ROM 
     に収録されるパッケージの優先順位を決めるために使われますが、Debian 
     開発者がもはやメンテナのいないパッケージを引き受けるかどうかを決める際にもよく参照されます。
   </p>
   <p>
     <package>popularity-contest</package> からの情報は匿名で処理されます。この公式の調査に参加して 
     Debian の改良を手伝っていただけるとありがたいです。
   </p>
  </sect>
 </chapt>
 <chapt id="upgrading">
  <heading>
    以前のリリースからアップグレードする
  </heading>
  <sect id="backup">
   <heading>
     アップグレードの準備
   </heading>
   <p>
     アップグレードの前には、<ref id="information"> 
     に書かれている情報も読むことをお勧めします。この章に書かれている問題点は、アップグレードの過程と直接は関係がないかもしれませんが、それでもアップグレードを開始する前に知っておくべき重要事項である可能性があります。
   </p>
   <sect1 id="data-backup">
    <heading>
      あらゆるデータや設定情報をバックアップする
    </heading>
    <p>
      システムをアップグレードする前に、完全なバックアップを取っておくよう強くお勧めします。少なくとも、失いたくないデータや設定情報だけでもバックアップしておきましょう。アップグレードのツールや処理はきわめて信頼性の高いものですが、アップグレードの最中にハードウェア障害が起こると、システムに大きなダメージを与えることがありえます。
    </p>
    <p>
      バックアップしたくなるであろう主な対象としては、<file>/etc</file> や <file>/var/lib/dpkg</file> 
      の中身、<tt>dpkg --get-selections "*"</tt> (引用符を忘れてはいけません) の出力などでしょう。
    </p>
    <p>
      アップグレードの過程自体は、<file>/home</file> ディレクトリ以下は一切変更しません。とはいえ、(Mozilla 
      スイートの一部や GNOME や KDE のデスクトップ環境などのように) 
      ユーザが初めて新しいバージョンのアプリケーションを起動するときに、既存のユーザ設定を新たなデフォルト値で上書きしてしまうものがあるのも事実です。万一に備えて、ユーザのホームディレクトリにある隠しファイルと隠しディレクトリ 
      (いわゆる「ドットファイル」) 
      をバックアップしておくのがよいでしょう。古い状態に戻したり、再度設定する場合に役立つはずです。ユーザにもこのことについて知らせておいてください。
    </p>
    <p>
      あらゆるパッケージのインストール処理はスーパーユーザ特権で実行されなければならないため、必要なアクセス権限を得るために root 
      としてログインするか<prgn>su</prgn> や<prgn>sudo</prgn> を使ってください。
    </p>
    <p>
      アップグレードにあたって事前に整えなければならない条件がいくつかあります。実際にアップグレードを実行する前にそれらを確認してください。
    </p>
   </sect1>
   <sect1>
    <heading>
      事前にユーザに通知する
    </heading>
    <p>
      アップグレードの前には、その予定をすべてのユーザに知らせるとよいでしょう。しかしシステムに <prgn>ssh</prgn> 
      接続などでアクセスしてきているユーザは、アップグレードの最中にそうと気付くことはほとんどないはずですし、作業を続行できるはずです。
    </p>
    <p>
      万一の用心をしたければ、アップグレードの前にユーザのパーティション (<file>/home</file>) 
      をバックアップして、アンマウントしてしまいましょう。
    </p>
    <p>
      &releasename; 
      にアップグレードするときはおそらくカーネルをアップグレードしなければならないので、通常は再起動が必要です。通常、再起動はアップグレードが完了した後に行います。
    </p>
   </sect1>
   <sect1 id="recovery">
    <heading>
      復旧の準備
    </heading>
    <p>
      ドライバやハードウェア検出、デバイスファイルの命名法や順序に関して &oldreleasename; と &releasename; 
      との間ではカーネルに多くの変更が加えられたため、アップグレードのシステム再起動で問題に直面するリスクが高くなっています。既知の潜在的な問題点の多くは、このリリースノートの本章と次章で述べられています。
    </p>
    <p>
      上述の理由により、システムが再起動に失敗したり、リモート管理されているシステムならネットワーク接続の確立に失敗した場合に備え、復旧できる手立てを整えておくことが大切です。
    </p>
    <p>
      <prgn>ssh</prgn> 
      接続経由でリモートアップグレードを行うのなら、リモートのシリアル端末からサーバにアクセスできるよう必要な用心をしておくことを強く勧めます。カーネルをアップグレードして再起動した後、(<ref 
      id="device-reorder"> で述べられているように) 
      いくつかのデバイスの名前が変更され、ローカルコンソール経由でシステム設定を修正しなければならないことがあります。また、アップグレード途中でシステムが予期せぬ再起動を行った場合にも、ローカルコンソールを使って復旧する必要に迫られることもあります。
    </p>
    <p>
      最初に試すべきもっとも明白なことは、古いカーネルでの再起動です。しかしながら、本文書の別の場所で述べられているいくつかの理由により、これがうまくいくという保証はありません。
    </p>
    <p>
      古いカーネルでの再起動に失敗するなら、アクセスして修復できるようシステムを起動するための代替手段が必要となるでしょう。1 
      つのオプションとしては、特別な復旧イメージや Linux ライブ CD 
      を使うことがあります。これらを使って起動した後は、ルートファイルシステムをマウントしてから、問題点を調査解決するために 
      <tt>chroot</tt> を実行できるはずです。
    </p>
    <p>
      お勧めしたい別のオプションとしては、&releasename; 用 Debian 
      インストーラの<em>レスキューモード</em>を使うことがあります。同インストーラを使う利点は、多くのインストール手段の中からあなたの状況に最適なものを選べることです。より詳しい情報は、<url 
      id="&url-install-manual;" name="インストールガイド">の第 8 章にある "壊れたシステムの復旧" 
      セクションや、<url id="http://wiki.debian.org/DebianInstaller/FAQ" 
      name="Debian Installer FAQ"> を参照してください。
    </p>
     <![ %uses-initrd [

    <sect2 id="recovery-initrd">
     <heading>
       initrd を使った起動中のデバッグシェル
     </heading>
     <p>
       <package>initramfs-tools</package> パッケージには、それが生成する initrd 
       の中にデバッグシェル<footnote><p>この機能は、ブートパラメータに <tt>panic=0</tt> 
       を付加することで無効にできます。</p></footnote>が含まれています。例えば、initrd 
       がルートファイルシステムをマウントできなければ、デバッグシェル内に移るでしょう。同シェルは、問題点を追跡してそれを修正する手助けとなる基本的なコマンドを備えています。
     </p>
     <p>
       チェックすべき基本的事項としては、次のようなものがあります。<file>/dev</file> 
       内に適切なデバイスファイルが存在するか、ロードされているモジュール (<tt>cat 
       /proc/modules</tt>)、<prgn>dmesg</prgn> 
       の出力に示されたドライバのロード失敗など。<prgn>dmesg</prgn> 
       の出力はまた、どのデバイスファイルがどのディスクに割り当てられているのかも示してくれます。ルートファイルシステムが予期した通りのデバイス上にあるかを確認するために、<tt>echo 
       $ROOT</tt> の出力もチェックすべきでしょう。
     </p>
     <p>
       問題点をしっかり解決できたなら、<tt>exit</tt> 
       とタイプすることでデバッグシェルを終了させ、起動プロセスを失敗した時点から継続できます。もちろん次回の起動時に再び失敗することが無いよう、根本的な問題を修正して 
       initrd を再生成する必要があるでしょう。
     </p>
    </sect2>
     ]]>

   </sect1>
   <sect1 id="upgrade_preparations">
    <heading>
      アップグレード用の安全な環境の準備
    </heading>
    <p>
      ディストリビューションのアップグレードは、ローカルのテキストモード仮想コンソール (あるいは直接接続されたシリアル端末) 
      から行うか、リモートなら <prgn>ssh</prgn> 接続経由で行いましょう。
    </p>
    <p>
      リモートでのアップグレード時にさらなるセーフティマージンを得るために、<prgn>screen</prgn> 
      プログラムが提供する仮想コンソール内でアップグレードプロセスを実行することを提案します。同プログラムは安全な再接続を可能にし、リモート接続プロセスが切断された場合でもアップグレードプロセスが中断しないようにしてくれます。
    </p>
    <p>
      <strong>重要!</strong> 
      <prgn>telnet</prgn>、<prgn>rlogin</prgn>、<prgn>rsh</prgn> 
      を用いてアップグレードをしては<em>いけません</em>。アップグレードマシンの 
      <prgn>xdm</prgn>、<prgn>gdm</prgn>、<prgn>kdm</prgn> などが管理している X 
      セッションからのアップグレードも行うべきではありません。これらのサービスはアップグレードの最中に切断されてしまう可能性が高く、そうなるとアップグレード途中のシステムへの<em>接続が不可能になってしまう</em>からです。
    </p>
   </sect1>
   <sect1 id="glibc-kernel">
    <heading>
      2.2 系カーネルはサポートされなくなりました
    </heading>
    <p>
      2.4.1 より前のカーネルを使用している場合、<package>glibc</package> をアップグレードする前に (最低でも) 
      2.4 系にアップグレードする必要があります。これは、アップグレードを開始する前に済ませておくべきです。お勧めは、2.4 
      系のカーネルにアップグレードするのではなく、&oldreleasename; で提供されているカーネル 2.6.8 
      に直接アップグレードすることです。
    </p>
   </sect1>
  </sect>
  <sect id="system-status">
   <heading>
     システムの状態をチェックする
   </heading>
   <p>
     この章で述べられているアップグレード手順は、サードパーティ製のパッケージが無い "純粋" な &oldreleasename; 
     システムからのアップグレード用です。特に、<file>/usr/X11R6/bin/</file> 
     内にプログラムをインストールするサードパーティ製パッケージには、X.org への移行 (<ref id="xorg">) 
     によってアップグレード時に問題が発生することが知られています。アップグレードプロセスにおいて最大限の信頼性を確保するために、アップグレード開始前にシステムからサードパーティ製パッケージを削除しておいた方が良いでしょう。
   </p>
   <p>
     またこの手順は、システムが &oldreleasename; 
     の最新リリースにアップデート済みであるものと想定しています。そうではなかったり、アップグレード済みかどうか不明なら、<ref 
     id="old-upgrade">内の指示に従ってください。
   </p>
   <sect1>
    <heading>
      パッケージマネージャ内の中断中のアクションを確認
    </heading>
    <p>
      パッケージをインストールするのに <prgn>aptitude</prgn> の代わりに <prgn>apt-get</prgn> 
      を使用すると、時として、<prgn>aptitude</prgn> がそのパッケージを "未使用" 
      だとみなし、削除対象とすることがあります。一般的にはアップグレードを行う前に、システムが完全に最新の状態で "クリーン" 
      な状態となっているかを確認するべきです。
    </p>
    <p>
      このため、パッケージマネージャ <prgn>aptitude</prgn> 
      内で中断しているアクションがあるかどうかを確認すべきでしょう。パッケージマネージャによってあるパッケージが削除あるいは更新の対象となっているなら、アップグレード手順に好ましくない影響を与えるかもしれません。この修正は、<file>sources.list</file> 
      に <em>stable</em> や <em>&releasename;</em> 
      ではなく、<em>&oldreleasename</em> が指定されている段階でのみ可能なことに注意してください。<ref 
      id="old-sources"> も参照してください。
    </p>
    <p>
      確認するためには、<prgn>aptitude</prgn> のユーザインターフェイスを起動して 'g' ("Go") 
      を押してください。何らかのアクションが表示されたなら、その内容を確認して修正するかあるいは提案されたアクションを実行すべきです。いかなるアクションも提案されない場合は、"インストール・削除・更新されるパッケージがありません" 
      というメッセージが表示されるでしょう。
    </p>
   </sect1>
   <sect1>
    <heading>
      APT の pin 機能を無効にする
    </heading>
    <p>
      特定のパッケージを安定版以外 (テスト版など) のディストリビューションからインストールするように APT 
      を設定しているなら、当該パッケージが新しい安定版リリース内のバージョンにアップグレードできるように、(<file>/etc/apt/preferences</file> 
      内に保存されている) APT の pin 設定を変更する必要があるかもしれません。APT の pin 
      機能に関するより詳しい情報は、<manref section="5" name="apt_preferences"> にあります。
    </p>
   </sect1>
   <sect1 id="package_status">
    <heading>
      パッケージの状態をチェックする
    </heading>
    <p>
      アップグレードに使う手段に関係なく、まず全パッケージの状態を調べ、全パッケージがアップグレード可能な状態にあることを確認することをお勧めします。次のコマンドは、インストールが中断していたり設定に失敗したパッケージや、何らかのエラー状態にあるパッケージを表示します:
     <example>
# dpkg --audit
          </example>
    </p>
    <p>
      <prgn>dselect</prgn> や 
      <prgn>aptitude</prgn>、あるいは次のようなコマンドを使ってシステムの全パッケージの状態を検査することもできます:
     <example>
# dpkg -l | pager 
          </example>
      または
     <example>
# dpkg --get-selections "*" &gt; ~/curr-pkgs.txt
          </example>
    </p>
    <p>
      アップグレード前に、あらゆる hold 状態を解除しておいたほうがよいでしょう。アップグレードに不可欠なパッケージが hold 
      状態にあるなら、アップグレードに失敗するでしょう。
    </p>
    <p>
      hold 状態にあるパッケージを記録するのに、<prgn>aptitude</prgn> は <prgn>apt-get</prgn> や 
      <prgn>dselect</prgn> とは異なる手法を用いることに注意してください。<prgn>aptitude</prgn> 
      では、以下のように実行して hold 状態にあるパッケージを検出できます:
     <example>
# aptitude search "~ahold" | grep "^.h"
          </example>
    </p>
    <p>
      <prgn>apt-get</prgn> でどのパッケージが hold 状態にあるのかを調べたければ、以下のように実行してください:
     <example>
# dpkg --get-selections | grep hold
          </example>
    </p>
    <p>
      パッケージをローカルで変更したり再コンパイルしており、パッケージの名前を変えたりバージョン番号に epoch 
      フィールドを追加していないなら、アップグレードしないよう hold 状態にしておかなければなりません。
    </p>
    <p>
      <prgn>aptitude</prgn> でパッケージを "hold" 状態に変更するには、以下のように実行してください。
     <example>
# aptitude hold <var>パッケージ名</var>
          </example>
      "hold" 状態を解除するには <tt>hold</tt> の代わりに <tt>unhold</tt> を使用してください。
    </p>
    <p>
      修正が必要なことがあるなら、<ref id="old-sources">で説明するように <file>sources.list</file> 
      が &oldreleasename; を指定したままにしておくべきです。
    </p>
   </sect1>
   <sect1 id="backports">
    <heading>
      非公式なソースとバックポート
    </heading>
    <p>
      自分のシステムに非 Debian 
      パッケージがあるなら、依存関係の衝突のためアップグレード中に削除されるかもしれないことに注意すべきです。当該パッケージが 
      <file>/etc/apt/sources.list</file> 
      に特別なパッケージアーカイブを追加することでインストールされたのなら、そのアーカイブが &releasename; 
      用にコンパイルされたパッケージも提供しているかをチェックし、Debian パッケージ用のソース行と一緒にそのソース行も適切に修正すべきです。
    </p>
    <p>
      自分の &oldreleasename; システムに、Debian に<em>存在する</em>パッケージの 非公式にバックポートされた 
      "新" 
      バージョンをインストールしているユーザもいるでしょう。そのようなパッケージはファイルの衝突を引き起こすことにより、アップグレード中に問題を引き起こす場合がほとんどでしょう<footnote><p>Debian 
      のパッケージ管理システムは、対象パッケージを置き換えるように指定されていない限り、通常はあるパッケージが別のパッケージが所有しているファイルを削除したり置き換えることを許可しません。</p></footnote>。ファイル衝突が発生したときの対処方法については、<ref 
      id="trouble">にいくつかの情報があります。
    </p>
   </sect1>
  </sect>
  <sect id="handle-conflict">
   <heading>
     パッケージのマークを手作業で外す
   </heading>
   <p>
     依存関係に引きずられてインストールされたいくつかのパッケージが <prgn>aptitude</prgn> 
     によって削除されるのを防ぐために、それらが <em>auto</em> 
     パッケージであるとの指定を手作業で外す必要があるでしょう。この中には、デスクトップインストール時の OpenOffice や Vim 
     が含まれます。
    <example>
# aptitude unmarkauto openoffice.org vim  
</example>
   </p>
   <p>
     さらにカーネルメタパッケージを使ってインストールした場合、2.6 系のカーネルイメージも対象となります。
    <example>
# aptitude unmarkauto $(dpkg-query -W 'kernel-image-2.6.*' | cut -f1)
</example>
   </p>
   <p>
     注意: 以下のように実行することで、aptitude 内でどのパッケージが <em>auto</em> と指定されているのかを確認できます:
    <example>
# aptitude search 'i~M &lt;パッケージ名&gt;'
</example>
   </p>
  </sect>
  <sect id="upgrade-process">
   <heading>
     APT の取得先 (ソース) の準備
   </heading>
   <p>
     アップグレードを始める前に、<package>apt</package> の設定ファイル 
     <file>/etc/apt/sources.list</file> を編集して、パッケージの取得先を決める必要があります。
   </p>
   <p>
     <package>apt</package> は、"<tt>deb</tt>" 
     行にあるすべてのパッケージを見比べ、最も大きなバージョン番号のパッケージをインストールします。同じパッケージが取得可能な場合は、先に現れた行を優先します 
     (つまり、複数のミラーを指定している場合は、最初にローカルのハードディスクを、次に CD-ROM を、最後に HTTP/FTP 
     ミラーを指定するといいでしょう)。
   </p>
   <p>
     リリースを指定するのに、コードネーム (&oldreleasename; や &releasename;) と状態名 
     (oldstable、stable、testing、unstable) 
     のどちらもよく使用されます。コードネームによる指定は、新しいリリースが出たときに驚かずに済むという利点があるため、ここではコードネームを使用しています。当然ですが、コードネームを使用している場合は自分でリリースアナウンスに注意を払わなければいけません。代わりに状態名を使用している場合は、リリースの直後にパッケージの更新が大量に利用可能になったことに気づくでしょう。
   </p>
   <sect1 id="network">
    <heading>
      APT のインターネットソースの追加
    </heading>
    <p>
      デフォルトの設定では、メインの Debian 
      インターネットサーバを使ってインストールするようになっています。ですがここでは、<file>/etc/apt/sources.list</file> 
      を編集して、他のミラー (できればネットワーク的に最も近いミラー) を使うようにするほうがよいでしょう。
    </p>
    <p>
      Debian の HTTP/FTP ミラーのアドレスは、<url id="&url-debian-mirrors;"> 
      を参照してください。一般には HTTP ミラーのほうが FTP ミラーよりも高速です。
    </p>
    <p>
      例えば、一番近くにある Debian ミラーが <tt>&url-debian-mirror-eg;/</tt> 
      だったとしましょう。このミラーをウェブブラウザや FTP プログラムで見てみると、main 
      などのディレクトリが以下のように構成されていることがわかります。
     <example>
&url-debian-mirror-eg;/dists/&releasename;/main/binary-&architecture;/...
&url-debian-mirror-eg;/dists/&releasename;/contrib/binary-&architecture;/...
           </example>
    </p>
    <p>
      このミラーを <prgn>apt</prgn> で使うには、次の行を <file>sources.list</file> 
      ファイルに追加します。
     <example>
deb &url-debian-mirror-eg; &releasename; main contrib
           </example>
    </p>
    <p>
      `<tt>dists</tt>' 
      は書かなくても暗黙のうちに追加されます。そしてリリース名の後の引数がそれぞれ用いられ、複数のディレクトリの各々のパス名に展開されます。
    </p>
    <p>
      新しいソースを追加した後、<file>sources.list</file> 内の既存の "<tt>deb</tt>" 
      行の先頭にシャープ記号 (<tt>#</tt>) を追加して、それらを無効にしてください。
    </p>
   </sect1>
   <sect1 id="localmirror">
    <heading>
      APT のローカルミラーソースの追加
    </heading>
    <p>
      HTTP や FTP のパッケージミラーを使うのではなく、ローカルディスク (多分 NFS マウントされたもの) 
      にあるミラーを使うよう、<file>/etc/apt/sources.list</file> を変更したいこともあるかもしれません。
    </p>
    <p>
      例えばパッケージのミラーが <file>/var/ftp/debian/</file> にあり、main 
      などのディレクトリが次のように配置されているとします。
     <example>
/var/ftp/debian/dists/&releasename;/main/binary-&architecture;/...
/var/ftp/debian/dists/&releasename;/contrib/binary-&architecture;/...
           </example>
    </p>
    <p>
      これを <prgn>apt</prgn> から使うには、次の行を <file>sources.list</file> ファイルに追加します。
     <example>
deb file:/var/ftp/debian &releasename; main contrib
           </example>
    </p>
    <p>
      `<tt>dists</tt>' 
      は書かなくても暗黙のうちに追加されます。そしてリリース名の後の引数がそれぞれ用いられ、複数のディレクトリの各々のパス名に展開されます。
    </p>
    <p>
      新しいソースを追加した後、<file>sources.list</file> 内の既存の "<tt>deb</tt>" 
      行の先頭にシャープ記号 (<tt>#</tt>) を追加して、それらを無効にしてください。
    </p>
   </sect1>
   <sect1 id="cdroms">
    <heading>
      APT の CD-ROM/DVD ソースの追加
    </heading>
    <p>
      CD <em>だけ</em>でインストールをしたい場合は、<file>/etc/apt/sources.list</file> 中の 
      "<tt>deb</tt>" 行の先頭にシャープ記号 (<tt>#</tt>) を置き、それらを無効にしてください。
    </p>
    <p>
      CD-ROM ドライブをマウントポイント <file>/cdrom</file> にマウントすることを許可している行が 
      <file>/etc/fstab</file> にあるかどうかを確認してください (<prgn>apt-cdrom</prgn> 
      を使う場合は、マウントポイントを <file>/cdrom</file> 以外にはできません)。例えば 
      <file>/dev/hdc</file> が CD-ROM ドライブなら、<file>/etc/fstab</file> 
      には次のような行が必要です。
     <example>
/dev/hdc /cdrom auto defaults,noauto,ro 0 0
          </example>
    </p>
    <p>
      第 4 フィールドの <tt>defaults,noauto,ro</tt> の間にはスペースがあってはいけません。
    </p>
    <p>
      これが正しく機能しているか調べるには、CD を挿入して以下を実行してみてください。
     <example>
# mount /cdrom    # マウントポイントに CD をマウントします
# ls -alF /cdrom  # CD のルートディレクトリを表示します
# umount /cdrom   # CD をアンマウントします
          </example>
    </p>
    <p>
      問題がなければ
     <example>
# apt-cdrom add
          </example>
      を、Debian Binary CD-ROM それぞれに対して実行してください。各 CD に関するデータが APT 
      のデータベースに追加されます。
    </p>
   </sect1>
  </sect>
  <sect id="upgradingpackages">
   <heading>
     パッケージのアップグレード
   </heading>
   <p>
     以前の &debian; からのアップグレード方法のお勧めは、パッケージ管理ツール <prgn>aptitude</prgn> 
     を用いる方法です。このプログラムはパッケージに関する判断を <prgn>apt-get</prgn> よりも安全に行います。
   </p>
   <p>
     まず、必要なパーティションが read-write モードでマウントされていることを忘れずに確認しましょう (特にルートパーティションと 
     <file>/usr</file> パーティション)。以下のようなコマンドラインが使えます。
    <example>
# mount -o remount,rw /<var>マウントポイント</var>
          </example>
   </p>
   <p>
     次に、(<file>/etc/apt/sources.list</file> 内の) APT ソースのエントリが 
     "<tt>&releasename;</tt>" と "<tt>stable</tt>" 
     のいずれか一方を指定していることを念入りにチェックしてください。&oldreleasename; 
     を指し示すソースエントリが含まれないようにすべきです。注意: CD-ROM のソース行は "<tt>unstable</tt>" 
     を指定していることがよくあります。これは混乱の元かもしれませんが、変更すべきでは<em>ありません</em>。
   </p>
   <sect1 id="record_session">
    <heading>
      セッションの記録
    </heading>
    <p>
      ここで強くお勧めしたいのですが、<prgn>/usr/bin/script</prgn> 
      プログラムを使って、このアップグレード作業の記録を取るようにしましょう。こうすれば何らかの問題が生じたときに、何が起こったかを記録しておくことができ、バグ報告の必要が生じた場合に、その正確な情報を提供できます。記録を開始するには次のように入力します。
     <example>
# script -t 2>~/upgrade-&releasename;.time -a ~/upgrade-&releasename;.script
          </example>
      typescript ファイルは <file>/tmp</file> や <file>/var/tmp</file> 
      のような一時ディレクトリには置かないでください 
      (これらのディレクトリのファイルはアップグレードや再起動の際に削除されることがありますから)。
    </p>
    <p>
      typescript 
      はまた、スクロールしてスクリーンから消えた情報を見ることができるようにもしてくれるでしょう。(<tt>Alt-F2</tt> を使って) 2 
      番の仮想コンソールに切り替えて、ログインしてから <tt>less -R 
      ~root/upgrade-&releasename;.script</tt> と実行すれば当該ファイルを見ることができます。
    </p>
    <p>
      アップグレード完了後に <prgn>script</prgn> を停止するには、プロンプトから <tt>exit</tt> 
      と入力してください。
    </p>
    <p>
      <prgn>script</prgn> に <em>-t</em> スイッチをつけておいた場合は、以下のようなコマンドを使用して 
      <prgn>scriptreplay</prgn> プログラムでセッション全体をリプレイできます。
     <example>
# scriptreplay ~/upgrade-&releasename;.time ~/upgrade-&releasename;.script
          </example>
    </p>
   </sect1>
   <sect1 id="updating_lists">
    <heading>
      パッケージリストの更新
    </heading>
    <p>
      まず、新しいリリースで利用可能なパッケージの一覧を取得する必要があります。そのためには以下のコマンドを実行してください。
    </p>
    <p>
     <example>
# aptitude update
	  </example>
    </p>
    <p>
      このコマンドを初めて実行して新しいソースを更新する際、ソースの取得性に関する警告がいくつか表示されます。これらの警告は無害なもので、コマンドを再び実行したときには表示されません。
    </p>
   </sect1>
   <sect1>
    <heading>
      アップグレードするのに十分な領域があることを確認する
    </heading>
    <p>
      システムアップグレードの前には、<ref id="upgrading_other"> 
      で説明するシステム全体のアップグレードを開始するときに十分なハードディスク領域があるかどうかを確認しなければいけません。まず、ネットワーク経由で取得してインストールする必要があるどのようなパッケージも、<file>/var/cache/apt/archives</file> 
      (およびダウンロード中には <file>partial/</file> サブディレクトリ) 
      に保存されます。したがって、システムにインストールされるパッケージをダウンロードして一時的に保存できるよう、<file>/var/</file> 
      を保持しているファイルシステムパーティションに十分な空き領域があることを確認しなければなりません。ダウンロード後にはおそらく、アップグレードされるパッケージ 
      (これらには、より大きなバイナリやより多くのデータが含まれている可能性があります) 
      と、アップグレードに伴って依存関係に引きずられて新たに導入されるパッケージの両方のインストールのために、他のファイルシステムパーティションにさらに領域が必要になるでしょう。システムに十分な空き領域がない場合、アップグレードが不完全な状態で終わり、復旧が困難になる可能性があります。
    </p>
    <p>
      <prgn>aptitude</prgn> と <prgn>apt</prgn> 
      のどちらを使っても、インストールに必要なディスク領域の詳細な情報が表示されます。アップグレードを実行する前に、次のように実行して必要な領域の推定値を見ることができます。
    </p>
    <p>
     <example>
# aptitude -y -s -f --with-recommends dist-upgrade
[ ... ]
更新: XXX 個、新規インストール: XXX 個、削除: XXX 個、保留: XXX 個。
yyyMB 中 xx.xMB のアーカイブを取得する必要があります。展開後に追加で AAAMB
のディスク容量が消費されます。
パッケージのインストールまたは削除。
       </example>
    </p>
    <p>
      アップグレードをするのに十分な領域がない場合、事前に領域を解放するのを忘れないようにしてください。以下のことを実行するとよいでしょう。
    </p>
    <p>
     <list>
      <item>
       <p>
         インストールのために以前 (<file>/var/cache/apt/archive</file> に) 
         ダウンロードしたパッケージを削除する。<prgn>apt-get clean</prgn> または <prgn>aptitude 
         clean</prgn> を実行してパッケージキャッシュを一掃すると、以前ダウンロードしたパッケージファイルをすべて削除できます。
       </p>
      </item>
      <item>
       <p>
         もう使用しない古いパッケージを削除する。<prgn>popularity-contest</prgn> 
         をインストールしていれば、<prgn>popcon-largest-unused</prgn> 
         を使って、システムで使用していないパッケージのうち最も大きな領域を占めているものをリストアップできます。<prgn>deborphan</prgn> 
         や <prgn>debfoster</prgn> を使って時代遅れのパッケージを見つけることも可能です (<ref 
         id="obsolete"> を参照してください)。それらのツールを使う代わりに <prgn>aptitude</prgn> 
         を「ビジュアルモード」で起動すれば、古いパッケージは、「廃止された、またはローカルで作成されたパッケージ」の下に見つかります。
       </p>
      </item>
      <item>
       <p>
         あまりにも大きな領域を占めており現在は必要ないパッケージを削除する 
         (アップグレード後にいつでも再インストール可能なのですから)。<prgn>dpigs</prgn> 
         (<package>debian-goodies</package> パッケージに含まれています) や 
         <prgn>wajig</prgn> (<tt>wajig size</tt> を実行してください) 
         を用いると、ディスク領域の大部分を占めているパッケージをリストアップできます。
       </p>
      </item>
      <item>
       <p>
         <file>/var/log/</file> の下にあるシステムログを一時的に他のシステムに移動するか、永久に削除する。
       </p>
      </item>
     </list>
    </p>
    <p>
      パッケージを安全に削除するための注意として、<ref 
      id="old-sources">で説明するように、<file>sources.list</file> が &oldreleasename; 
      を指し示すよう設定を戻しておくことが望ましいです。
    </p>
   </sect1>
   <sect1 id="minimal_upgrade">
    <heading>
      システムの最小アップグレード
    </heading>
    <p>
      &oldreleasename; で必要なパッケージの一部と &releasename; で必要なパッケージの一部が衝突するため、直接 
      <tt>aptitude dist-upgrade</tt> 
      を実行すると、多くの場合、一時的に固定しておきたいパッケージが多数削除される結果となります。そのため、まずはこれらの競合状態を打開するための最小アップグレードを行い、その上で完全な 
      <tt>dist-upgrade</tt> を行う、という 2 段階のアップグレード過程を踏むことをお勧めします。
    </p>
    <p>
      まず、次のコマンドを実行してください。
     <example>
# aptitude upgrade
          </example>
    </p>
    <p>
      このコマンドには、アップグレードしても他のパッケージをインストール・削除する必要がないパッケージだけをアップグレードする、という効果があります。
    </p>
    <p>
      最小アップグレードが完了したら、以下のコマンドを実行してください。
     <example>
# aptitude install initrd-tools
          </example>
    </p>
    <p>
      このステップによって、<package>libc6</package> と <package>locales</package> 
      が自動的にアップグレードされ、SELinux サポート用のライブラリ群 (<package>libselinux1</package>) 
      が引きずられてインストールされます。この時点で、<prgn>xdm</prgn> や 
      <prgn>gdm</prgn>、<prgn>kdm</prgn> 
      などといった実行中のいくつかのサービスが再起動されます。その結果、ローカルの X11 セッションは切断されます。
    </p>
    <p>
      次のステップは、どのようなパッケージ群がシステムにインストールされているかによって変化します。このリリースノートでは、どのような方法をとるべきかに関する一般的なアドバイスをします。しかし、確信がもてない場合は、それぞれの方法でアップグレードを先に進める前に、どのパッケージを削除するよう提案されているのかきちんと調べることをお勧めします。
    </p>
    <p>
      どの場合でも削除されるだろうと予想されるパッケージには、<package>base-config</package>、<package>hotplug</package>、<package>xlibs</package>、<package>netkit-inetd</package>、<package>python2.3</package>、<package>xfree86-common</package>、<package>xserver-common</package> 
      があります。&releasename; で時代遅れとなるパッケージのさらに完全な一覧については、<ref 
      id="obsolete">を参照してください。
    </p>
    <sect2 id="minimal_upgrade_desktop">
     <heading>
       デスクトップシステムのアップグレード
     </heading>
     <p>
       このアップグレード手順は、sarge 
       の「デスクトップ」タスクがインストールされているシステムで正しく機能することが確認されています。「デスクトップ」タスクがインストールされているか 
       <tt>gnome</tt> パッケージまたは <tt>kde</tt> 
       パッケージがインストールされているシステムでは、この手順に沿ってアップグレードすれば、おそらく最もよい結果になるでしょう。
     </p>
     <p>
       次のようにして <package>libfam0c102</package> パッケージや 
       <package>xlibmesa-glu</package> 
       パッケージがシステムにインストールされているかを調べたときにまだインストールされていないという結果になった場合は、おそらく、この方法は適用する方法としてふさわしく<em>ありません</em>。
      <example>
# dpkg -l libfam0c102 | grep ^ii
# dpkg -l xlibmesa-glu | grep ^ii
          </example>
     </p>
     <p>
       完全なデスクトップシステムがインストールされている場合、以下のコマンドを実行してください。
      <example>
# aptitude install libfam0 xlibmesa-glu
	  </example>
     </p>
    </sect2>
    <sect2 id="minimal_upgrade_x_server">
     <heading>
       X のパッケージがいくつかインストールされているシステムのアップグレード
     </heading>
     <p>
       X 
       のパッケージがいくつかインストールされていても完全な「デスクトップ」タスクがインストールされているわけではないシステムには、異なる方法を使う必要があります。この方法は、一般に、<package>xfree86-common</package> 
       パッケージがインストールされているシステムに当てはまります。そのようなシステムとしては、<package>tasksel</package> 
       のサーバタスクがインストールされている一部のサーバシステムなどがあります。というのも、これらのタスクのうち一部には、グラフィカルな管理ツールを含むものがあるからです。X 
       は実行できても完全な「デスクトップ」タスクはインストールされていないようなシステムを使用するのがおそらく正しい方法でしょう。
      <example>
# dpkg -l xfree86-common | grep ^ii
        </example>
     </p>
     <p>
       まず、<package>libfam0c102</package> パッケージと 
       <package>xlibmesa-glu</package> 
       パッケージがインストールされているか、次のようなコマンドで確かめてください。
      <example>
# dpkg -l libfam0c102 | grep ^ii
# dpkg -l xlibmesa-glu | grep ^ii
          </example>
     </p>
     <p>
       <package>libfam0c102</package> パッケージがシステムにインストールされていない場合は、以下のコマンドラインに 
       <package>libfam0</package> 
       を含めないでください。また、<package>xlibmesa-glu</package> 
       パッケージがインストールされていない場合は、以下のコマンドラインに <package>xlibmesa-glu</package> 
       を含めないでください<footnote><p>次のようなコマンドを用いれば、<package>libfam0</package> と 
       <package>xlibmesa-glu</package> 
       をインストールする必要があるか判断した上で、必要に応じてそれらをインストール対象として自動的に選択します。<example># 
       aptitude install x11-common \ $(dpkg-query --showformat '${Package} 
       ${Status}\n' -W libfam0c102 xlibmesa-glu \ | grep 'ok installed$' | 
       sed -e's/ .*//; s/c102//') </example></p></footnote>。
      <example>
# aptitude install x11-common <var>libfam0</var> <var>xlibmesa-glu</var>
          </example>
     </p>
     <p>
       注意しなければならないのは、<package>libfam0</package> をインストールすると、File Alteration 
       Monitor (<package>fam</package>) や RPC ポートマッパー 
       (<package>portmap</package>) 
       がまだシステムで利用可能になっていない場合はそれらもインストールされる、ということです。どちらのパッケージも、(内部である) 
       ループバックネットワークデバイスにバインドするように設定できはしますが、システムで新たなネットワークサービスを有効にすることになります。
     </p>
    </sect2>
    <sect2 id="minimal_upgrade_server">
     <heading>
       X のサポートがインストールされていないシステムでのアップグレード
     </heading>
     <p>
       X のないシステムでは <tt>aptitude install</tt> 
       コマンドを追加実行する必要はないはずなので、次のステップへとそのまま進めます。
     </p>
    </sect2>
   </sect1>
   <sect1 id="upgrading_kernel">
    <heading>
      カーネルのアップグレード
    </heading>
    <p>
      &releasename; に含まれているバージョンの <prgn>udev</prgn> は、バージョン 2.6.15 より前のカーネル 
      (これには &oldreleasename; のカーネル 2.6.8 も含まれます) 
      をサポートしておらず、逆に、&oldreleasename; に含まれるバージョンの <prgn>udev</prgn> 
      は最新のカーネルでは正しく動作しません。さらに、&releasename; に含まれているバージョンの 
      <package>udev</package> をインストールすると、2.4 系 Linux カーネルで使用されていた 
      <package>hotplug</package> が強制的に削除されます。
    </p>
    <p>
      その結果、このアップグレードを行うと、以前のカーネルパッケージはおそらく正しく起動しなくなります。また同様に、アップグレードの最中には、<package>udev</package> 
      がアップグレードされている一方で最新のカーネルがまだインストールされていない状況が存在します。もし、アップグレードがまだ完了していないこのような状況でシステムを再起動することになったら、ドライバの検出やロードを正しく行えないためにシステムは起動できないでしょう 
      (リモートからアップグレードしている場合は、発生する可能性があるこのような事態に対する心構えについては、<ref 
      id="upgrade_preparations">の忠告を参照してください)。
    </p>
    <p>
      したがって、「デスクトップ」タスク、あるいはそれ以外でも受け入れ難い数のパッケージ削除を伴うパッケージがシステムにインストールされているのでなければ、この段階でカーネルだけをアップグレードすることをお勧めします。
    </p>
    <p>
      このカーネルアップグレードを実行するには、次のコマンドを実行してください。
     <example>
# aptitude install linux-image-2.6-<var>フレーバー</var>
          </example>
      カーネルパッケージのどのフレーバーをインストールすべきか判断するための手助けが欲しい場合は、<ref 
      id="kernel-metapackage">を参照してください。
    </p>
    <p>
      デスクトップの場合、残念ながら、新しいカーネルパッケージのインストールが新しい <package>udev</package> 
      のインストールの直後に確実に行われるようにするのは不可能です。したがって、hotplug 
      を完全にサポートしているカーネルがシステムにインストールされていない状況が、どのくらい長くかはわかりませんが存在します。システムの起動が 
      hotplug に依存しないような設定に関する情報については、<ref id="newkernel">を参照してください。
    </p>
   </sect1>
   <sect1 id="upgrading_other">
    <heading>
      残りのシステムのアップグレード
    </heading>
    <p>
      さて、アップグレードの主要部分を続行する準備が整いました。以下のコマンドを実行してください:
    </p>
    <p>
     <example>
# aptitude dist-upgrade
	  </example>
    </p>
    <p>
      これによってシステムの完全なアップグレードを行います。すなわち、すべてのパッケージの最新版を入手し、リリース間でのパッケージの依存関係の変化すべてを解決します。必要に応じて、新しいパッケージ 
      (通常は更新版のライブラリや、名前の変わったパッケージ) をインストールしたり、衝突している古いパッケージを削除したりもします。
    </p>
    <p>
      CD-ROM のセットからアップグレードする場合には、アップグレード作業の最中に CD を交換するよう、数回指定されることになります。同じ 
      CD を複数回入れなければならないかもしれません。これは、相互に依存しているパッケージが別々の CD に分散してこともあるからです。
    </p>
    <p>
      現在インストールされているパッケージの更新版が、他のパッケージのインストール状態を変更しなければならないような場合には、そのパッケージは現在のバージョンのままになります 
      (「固定されている」と表示されます)。この状態は、<prgn>aptitude</prgn> 
      でこれらのパッケージをインストール対象として選択するか、<tt>aptitude -f install 
      <var>パッケージ</var></tt> を試すかのどちらかで解決できます。
    </p>
   </sect1>
   <sect1 id="get_signatures">
    <heading>
      パッケージの署名の取得
    </heading>
    <p>
      アップグレードを終えたら、新しいバージョンの <prgn>apt</prgn> 
      を使用してシステムのパッケージ情報を更新できます。新しいバージョンの <prgn>apt</prgn> 
      には、パッケージの署名を確認するための仕組みが新たに含まれています。
    </p>
    <p>
     <example>
# aptitude update
	  </example>
    </p>
    <p>
      アップグレードによって、Debian 
      パッケージアーカイブの署名用の鍵を取得して有効にする作業は終わっているでしょう。パッケージソースとして他の (非公式の) 
      ものを追加すると、<prgn>apt</prgn> 
      は、そのパッケージソースからダウンロードされるパッケージが正規のものかどうかや改竄されていないかどうかを確認できないことについて、警告を表示します。さらに詳しく知りたい場合は、<ref 
      id="pkgmgmt">を参照してください。
    </p>
    <p>
      新しいバージョンの <prgn>apt</prgn> を使用し始めたユーザは、<prgn>apt</prgn> 
      が、パッケージインデックス一覧全体をダウンロードするのではなくパッケージ差分ファイル (<tt>pdiff</tt>) 
      をダウンロードするようになったことに気付くでしょう。この機能についてさらに詳しく知りたい場合は、<ref 
      id="apt-pdiff">を参照してください。
    </p>
   </sect1>
   <sect1 id="trouble">
    <heading>
      アップグレード中の注意点
    </heading>
    <p>
      <prgn>aptitude</prgn> や <prgn>apt-get</prgn>、<prgn>dpkg</prgn> 
      を使用した操作が次のようなエラーで失敗に終わるかもしれません。
     <example>
E: Dynamic MMap ran out of room
</example>
      この場合、デフォルトのキャッシュ容量では不十分だということになります。これを解決するには、<file>/etc/apt/sources.list</file> 
      から不要な行を削除もしくはコメントアウトするか、キャッシュサイズを増やします。キャッシュサイズを増やすには、<file>/etc/apt/apt.conf</file> 
      に <tt>APT::Cache-Limit</tt> 
      を設定します。以下のコマンドを実行すれば、アップグレードするには十分な値が設定されます:
     <example>
# echo 'APT::Cache-Limit "12500000";' >> /etc/apt/apt.conf
</example>
      ここでは、<file>/etc/apt/apt.conf</file> ファイル内にまだこの値を設定していない場合を想定しています。
    </p>
    <p>
      場合によっては衝突や事前依存のループのために、APT の <tt>APT::Force-LoopBreak</tt> 
      オプションを有効にして、必須パッケージを一時的に削除しなければならないかもしれません。その場合 <prgn>aptitude</prgn> 
      はこのことを警告してアップグレードを中断します。<prgn>aptitude</prgn> のコマンドラインに <tt>-o 
      APT::Force-LoopBreak=1</tt> を指定すれば、この状態を回避できます。
    </p>
    <p>
      システムの依存関係の構造が非常に混乱していて、手動での介入が必要となることもあります。通常これは <prgn>aptitude</prgn> 
      を用いるか、あるいは
     <example>
# dpkg --remove <var>パッケージ名</var>
          </example>
      として、目ざわりなパッケージを消す作業になります。または次の作業でもよいかもしれません。
     <example>
# aptitude --fix-broken install
# dpkg --configure --pending
          </example>
    </p>
    <p>
      極端な場合には、コマンドラインから次のように入力して、再インストールしなければならないかもしれません。
     <example>
# dpkg --install <var>/path/to/パッケージ名.deb</var>
          </example>
    </p>
    <p>
      「純粋な」&oldreleasename; 
      システムからのアップグレードでは、ファイルの衝突は起こらないはずですが、非公式なバックポートパッケージをインストールしているなら起こるかもしれません。ファイルの競合が起こると、次のようなエラーになります:
     <example>
(<var>&lt;package-foo-file&gt;</var> から) <var>&lt;package-foo&gt;</var> を展開しています...
dpkg: <var>&lt;package-foo&gt;</var> の処理中にエラーが発生しました (--install):
 `<var>&lt;some-file-name&gt;</var>' を上書きしようとしています。これはパッケージ <var>&lt;package-bar&gt;</var>
 にも含まれています
dpkg-deb: サブプロセス paste がシグナル (Broken pipe) によって強制終了しました
 以下のパッケージの処理中にエラーが発生しました:
 <var>&lt;package-foo&gt;</var>
          </example>
    </p>
    <p>
      ファイルの衝突を解消するには、エラーメッセージの<em>最後の</em>行に表示されたパッケージを強制的に削除します:
     <example>
# dpkg -r --force-depends <var>パッケージ名</var>
          </example>
    </p>
    <p>
      問題が修正できたら、先に示したように <tt>aptitude</tt> コマンドを繰り返し入力すれば、アップグレードを再開できます。
    </p>
    <p>
      アップグレードの最中に、いくつかのパッケージの設定・再設定に関する質問が表示されます。<file>/etc/init.d</file> と 
      <file>/etc/terminfo</file> ディレクトリに置かれるファイルと 
      <file>/etc/manpath.config</file> 
      に関しては、パッケージメンテナのバージョンに置き換えるようにしてください。システムの整合性を保つためには `yes' 
      と答えることが必要になります。古いバージョンも <tt>.dpkg-old</tt> 
      という拡張子で保存されていますので、戻すのはいつでもできます。
    </p>
    <p>
      どうすればよいかわからなくなったら、そのパッケージやファイルの名前を書き留めておいて、その問題解決は後回しにしましょう。typescript 
      ファイルを検索すれば、アップグレードの最中に画面に表示された情報を見直すこともできます。
    </p>
   </sect1>
  </sect>
  <sect id="newkernel">
   <heading>
     カーネルと関連パッケージのアップグレード
   </heading>
   <p>
     このセクションでは、カーネルのアップグレード方法を説明し、このアップグレードに際して生じる可能性がある問題点を確認します。Debian 
     で提供されている <package>linux-image-*</package> 
     パッケージのどれか一つをインストールしても、カスタマイズしたカーネルをソースからコンパイルしてもかまいません。
   </p>
    <![ %uses-initrd [

   <p>
     このセクションに書かれている多くの情報は、ユーザが Debian のモジュール化されたカーネルのうち一つを 
     <package>initramfs-tools</package> や <package>udev</package> 
     とともに使用しているのを前提にしている、ということに注意してください。initrd 
     を必要としないカスタムカーネルを使用するのを選択している場合や、initrd 
     生成ユーティリティとして異なるものを使用している場合は、このセクションの情報の一部は適切ではないかもしれません。
   </p>
    ]]><![ %no-initrd [

   <p>
     このセクションには、<package>initramfs-tools</package> や <package>udev</package> 
     の使い方に関する情報が多く含まれている、ということに注意してください。&architecture; 用の Debian 
     のカーネルではシステムの起動に initrd 
     を使用していないので、これらの情報のうち一部は適切ではないかもしれません。それにも関わらずこのセクションの情報を含めているのは、別の理由で 
     <package>udev</package> がシステムにインストールされているかもしれないからです。
   </p>
    ]]>

   <p>
     また、<package>udev</package> がシステムにインストールされて<em>いない</em>場合には、ハードウェアの検出に 
     <package>hotplug</package> を使い続けられることにも注意してください。
   </p>
    <![ %defaulted-2.4 [

   <p>
     2.4 系のカーネルを現在使用中の場合は、<ref id="upgrade-to-2.6">も熟読してください。
   </p>
    ]]>

   <sect1 id="kernel-metapackage">
    <heading>
      カーネルメタパッケージのインストール
    </heading>
    <p>
      &oldreleasename; から &releasename; への dist-upgrade を実行する際には、新しい 
      linux-image-2.6-* メタパッケージをインストールすることを強くお勧めします。このパッケージは、dist-upgrade 
      の過程で自動的にインストールされるかもしれません。次のように実行すると、このパッケージがインストールされたか確認できます。
     <example>
# dpkg -l "linux-image*" | grep ^ii
          </example>
    </p>
    <p>
      何も出力されない場合は、新しい linux-image パッケージを手作業でインストールする必要があります。利用可能な 
      linux-image-2.6 メタパッケージの一覧を見るには次のように実行してください。
     <example>
# apt-cache search linux-image-2.6- | grep -v transition
          </example>
    </p>
    <p>
      どのパッケージを選択すればよいのかわからない場合は、<tt>uname -r</tt> 
      を実行し、似た名前をもつパッケージを探してください。例えば、コマンドの結果が '2.4.27-3-686' の場合は 
      <package>linux-image-2.6-686</package> をインストールすることをお勧めします<![ %i386 [ 
      (注意すべきなのは、386 フレーバーはもう存在しないということです。386 カーネルフレーバーを現在使用中の場合は、代わりに 486 
      フレーバーをインストールしてください)]]>。利用可能なパッケージのうち最良のものを選ぶ手助けとして、次のように 
      <prgn>apt-cache</prgn> を用いて各パッケージのパッケージ説明・詳細版を見てもよいでしょう。
     <example>
# apt-cache show linux-image-2.6-686
          </example>
    </p>
    <p>
      インストールするカーネルイメージが決まったら、<tt>aptitude install</tt> 
      でインストールします。新しいカーネルがインストールされたら、再起動できる機会に再起動し、新しいバージョンのカーネルを有効にしてください。
    </p>
    <p>
      もうちょっと冒険したい人には、自分のカスタムカーネルをコンパイルする方法も &debian; 
      は提供しています。<package>kernel-package</package> 
      をインストールして、<file>/usr/share/doc/kernel-package</file> の文書を読んでみてください。
    </p>
   </sect1>
   <sect1 id="upgrade-from-2.6">
    <heading>
      2.6 系カーネルからのアップグレード
    </heading>
    <p>
      現在 &oldreleasename; で 2.6 
      系カーネルを使用している場合、システムパッケージを完全にアップグレードした後で、このアップグレードを実行します (<ref 
      id="upgradingpackages">を参照してください)。
    </p>
    <p>
      可能なら、カーネルパッケージのアップグレードをメインの <tt>dist-upgrade</tt> 
      と分けることで、一時的に起動しないシステムにしてしまうことを極力避けられます。この手順の説明については<ref 
      id="upgrading_kernel">をご覧ください。カーネルパッケージのアップグレードは、<ref 
      id="minimal_upgrade">で説明した最小アップグレードの手順の後以外では行うべきでないことに注意してください。
    </p>
    <p>
      自分のカスタムカーネルを使用していて、&releasename; 
      で提供されているカーネルを使いたい場合も、この手順で行えます。カーネルのバージョンが <package>udev</package> 
      でサポートされていない場合、最小アップグレードの後でアップグレードするのをお勧めします。<package>udev</package> 
      でサポートされている場合は、安全にシステム全体のアップグレードを待っていれば OK です。
    </p>
   </sect1>
    <![ %defaulted-2.4 [

   <sect1 id="upgrade-from-2.4">
    <heading>
      2.4 系カーネルからのアップグレード
    </heading>
    <p>
      2.4系カーネルをインストールしていて、システムのハードウェア検出に <package>hotplug</package> 
      を使用している場合、システム全体のアップグレードの前に、&oldreleasename; の 2.6 
      系カーネルにまず最初にアップグレードすべきです。システムアップグレードを実施する前に、2.6 
      系カーネルでシステムが起動していることと、すべてのハードウェアが適切に認識されているかを確認してください。システム全体をアップグレードする際、<package>hotplug</package> 
      パッケージはシステムから削除され (<package>udev</package> がインストールされ) 
      ます。この前にカーネルをアップグレードしていないと、この時点からシステムは適切に起動しません。一旦 &oldreleasename; での 
      2.6 系カーネルにアップグレードしたら、<ref id="upgrade-from-2.6"> 
      に書かれているようにカーネルをアップグレードできます。
    </p>
    <p>
      システムが <package>hotplug</package> 
      でハードウェア検出をしない場合<footnote><p>これを行うには、<file>/etc/modules</file> 
      に適切な設定をしておくことで、システムに必要なカーネルモジュールを静的にロードできます。</p></footnote>、<ref 
      id="upgrading_other"> 
      にあるように、完全にシステムをアップグレードした後で、カーネルのアップグレードをしてもかまいません。システムをアップグレードしたら、以下のようにカーネルをアップグレードできます。(お使いのシステムに合わせて、カーネルパッケージ名の 
      <em>&lt;フレーバー&gt;</em> を置き換えてください)
     <example>
# aptitude install linux-image-2.6-&lt;フレーバー&gt;
        </example>
    </p>
   </sect1>
    ]]>

   <sect1 id="device-reorder">
    <heading>
      デバイスの整列順序の変更
    </heading>
    <p>
      &releasename; 
      は、以前のリリースよりも強固なハードウェア検出機構を特徴としています。しかし、それによってシステム上のデバイス検出順が変わり、それがデバイス名の割り当て順に影響するかもしれません。例えば、2 
      つの異なるドライバと結び付いた 2 つのネットワークアダプタがある場合、eth0 と eth1 
      が参照するデバイスは入れ替わるかもしれません。この新しい機構によって、例えば実行中の &releasename; 
      システムでイーサネットアダプタを交換するなどした場合、新しいアダプタにも新しいインタフェース名が割り当てられるようになる、ということに注意してください。
    </p>
    <p>
      <package>udev</package> 
      のルールを使用すると、ネットワークデバイスが並び替えられないようできます。もっと正確に言うと、<file>/etc/udev/rules.d/z25_persistent-net.rules</file> 
      で定義できます<footnote><p>このルールは、ネットワークインターフェースに固有名をつけるため、<file>/etc/udev/rules.d/z45_persistent-net-generator.rules</file> 
      スクリプトで自動生成しています。このシンボリックリンクを削除して、<package>udev</package> による NIC 
      の固有名を無効にできます。</p></footnote>。その他には、起動時に物理デバイスに特定の名前を割り当てる、<prgn>ifrename</prgn> 
      ユーティリティを使用できます。詳細は <manref section="8" name="ifrename"> と <manref 
      section="5" name="iftab"> をご覧ください。この 2 つ (<package>udev</package> と 
      <prgn>ifrename</prgn>) は同時に使用できません。
    </p>
    <p>
      ストレージデバイスについては、<package>initramfs-tools</package> 
      を用いて、現在と同じ順序でストレージデバイスドライバモジュールをロードするように設定することで、この順序の変更を防げます。このためには、<prgn>lsmod</prgn> 
      の出力に目を通し、システム上のストレージモジュールがロードされた順序を特定してください。<prgn>lsmod</prgn> 
      は、ロードされた順序とは逆の順序でモジュールをリストアップします。つまり、リストの最初のモジュールは最後にロードされていたものです。以上は、カーネルが安定した順番で読み込むデバイス 
      (PCI デバイスなど) にしか、効果がないことに注意してください。
    </p>
    <p>
      しかし、最初に起動した後にモジュールを削除したりロードしなおしたりすると、この順序にも影響が出ます。また、カーネルには静的にリンクされたドライバが含まれている可能性があり、そのようなドライバの名前は 
      <prgn>lsmod</prgn> の出力に現れません。<file>/var/log/kern.log</file> や 
      <prgn>dmesg</prgn> の出力に目を通すと、これらのドライバの名前やロード順を解読できるかもしれません。
    </p>
    <p>
      これらのモジュール名を、起動時にロードされるべき順序で <file>/etc/initramfs-tools/modules</file> 
      に追加してください。モジュール名の一部は &oldreleasename; と &releasename; 
      では異なるかもしれません。例えば、sym53c8xx_2 は sym53c8xx になりました。
    </p>
    <p>
      その上で <tt>update-initramfs -u -k all</tt> を実行し、initramfs 
      イメージを再生成する必要があります。
    </p>
    <p>
      一旦 &releasename; のカーネルと <package>udev</package> 
      を使用し始めたら、ドライバのロード順に依存しないエイリアスでディスクにアクセスするよう、システムの設定を変更してもよいでしょう。これらのエイリアスは 
      <file>/dev/disk/</file> 階層にあります。
    </p>
   </sect1>
    <![ %ia64 [

   <sect1>
    <heading>
      シリアルデバイスの順序の変更
    </heading>
    <p>
      HP のマシンで MP のシリアルコンソールポート (三頭ケーブルに "console" というラベルのついたコネクタ) 
      を使用している場合、このカーネルのアップグレードでコンソールが動かなくなります!
    </p>
    <p>
      再起動する際に、システムは "Loading initrd...." 
      というメッセージを表示しますが、そこで停まってしまうでしょう。この問題はカーネルの不適合に関連している (<ref 
      id="upgrade-to-2.6"> 
      を参照)にもかかわらず、かなり古いファームウェアのシステムでは同様の症状が見られるのに注意してください。
    </p>
    <p>
      アップグレード前に以下の情報をお読みください。
    </p>
    <p>
     <list>
      <item>
       <p>
         コンソールデバイスが <file>ttyS0</file> から 
         <file>ttyS1</file>、<file>ttyS2</file>、<file>ttyS3</file> 
         のいずれかに変更されます。したがって、
        <list>
         <item>
          <p>
            <file>/etc/inittab</file> を編集し、<file>/dev/ttyS1</file> 
            (rx4640、rx5670、rx7620、rx8620、Superdome)、<file>/dev/ttyS2</file> 
            (rx1600)、<file>/dev/ttyS3</file> (rx2600) のいずれかの getty 
            エントリを追加してください。
          </p>
         </item>
         <item>
          <p>
            <file>/etc/securetty</file> 
            を編集し、<file>ttyS1</file>、<file>ttyS2</file>、<file>ttyS3</file> 
            のいずれかを追加してください。
          </p>
         </item>
         <item>
          <p>
            これからも古いカーネルを起動できるよう、<file>/etc/inittab</file> と 
            <file>/etc/securetty</file> の既存の <file>ttyS0</file> 
            エントリはそのまま残しておいてください。
          </p>
         </item>
        </list>
       </p>
      </item>
      <item>
       <p>
         <file>/etc/elilo.conf</file> を編集して "console=" 引数をすべて削除してください。
       </p>
      </item>
      <item>
       <p>
         <prgn>elilo</prgn> を実行し、新しい設定のブートローダをインストールしてください。
       </p>
      </item>
      <item>
       <p>
         再起動し、EFI 起動オプションメンテナンスメニューを用いてコンソール出力・入力・標準エラー出力にデバイスを 1 
         つだけ選択してください。その上で、コールドリセットを行って変更を有効にしてください。
       </p>
       <p>
         MP コンソールについては、"Acpi(HWP0002,700)/Pci(...)/Uart" 
         をパスに含むデバイスを選択するよう注意してください。
       </p>
      </item>
     </list>
    </p>
    <p>
      これらの変更に関する詳細情報や問題解決のヒントは <url 
      id="http://lists.debian.org/debian-ia64/2005/01/msg00008.html"> 
      でご覧になれます。
    </p>
   </sect1>
    ]]><![ %uses-initrd [

   <sect1 id="boot-timing">
    <heading>
      起動タイミングの問題
    </heading>
    <p>
      <package>initramfs-tools</package> で生成した initrd 
      を使用してシステムを起動する場合、時として、<package>udev</package> 
      によるデバイスファイルの作成が、起動スクリプトの動作に間に合わないことがあります。
    </p>
    <p>
      通常の症状としては、ルートファイルシステムがマウントできず起動に失敗し、デバッグシェルに落ちます。しかしその後チェックしても、必要なデバイスはすべて 
      <file>/dev</file> により提供されているのです。このケースは、ルートファイルシステムが USB ディスクや RAID 
      にある場合に観察されています。
    </p>
    <p>
      この問題に対処するには、ブートパラメータに <tt>rootdelay=<var>9</var></tt> 
      を指定してください。タイムアウトの値 (秒) は、調整に必要な時間を指定してください。
    </p>
   </sect1>
    ]]>

  </sect>
  <sect id="nownownow">
   <heading>
     再起動の前にすべきこと
   </heading>
   <p>
     <tt>aptitude dist-upgrade</tt> 
     が終了したら、「公式」にはアップグレードは終了したことになります。しかし次に再起動する<em>前に</em>、面倒を見てやらなければならないことがいくつかあります。
   </p>
   <sect1 id="convert-devfs">
    <heading>
      devfs からのコンバート
    </heading>
    <p>
      Debian のカーネルは、もう <tt>devfs</tt> をサポートしません。そのため <tt>devfs</tt> 
      のユーザは、&releasename; のカーネルで起動する前に手作業でシステムを切り替える必要があります。
    </p>
    <p>
      <file>/proc/mounts</file> に 'devfs' という文字列がある場合、大抵 <tt>devfs</tt> 
      を使用しています。<tt>devfs</tt> スタイルの名前を参照している設定ファイルは、すべて 
      <package>udev</package> スタイルの名前を使うように調整する必要があります。<tt>devfs</tt> 
      スタイルのデバイス名を参照する可能性があるファイルには、<file>/etc/fstab</file>、<file>/etc/lilo.conf</file>、<file>/boot/grub/menu.lst</file>、<file>/etc/inittab</file> 
      などがあります。
    </p>
    <p>
      生じる可能性がある問題に関するさらに詳しい情報が、バグ報告 <url id="http://bugs.debian.org/341152" 
      name="#341152"> で入手可能です。
    </p>
   </sect1>
    <![ %sparc [

   <sect1 id="missingdrivers">
    <heading>
      initrd にドライバがない可能性
    </heading>
    <p>
      &releasename; のカーネルは、ネイティブな sparc sbus の sysfs 
      をまだ完全にサポートしていません。<package>initramfs-tools</package> は、initrd 
      にディスクコントローラのドライバが含まれるのをあてにしています。initrd にドライバが含まれない場合、システムは起動に失敗するでしょう。
    </p>
    <p>
      システムがハードディスクへのアクセスに <tt>esp</tt> か <tt>qlogicpti</tt> 
      モジュールを使用している場合、<file>/etc/initramfs-tools/modules</file> 
      にそのモジュールが必要で、また、システムの再起動前に initrd を再生成する必要があります。initrd を以下のように再生成できます。
     <example>
# update-initramfs -u -k all
          </example>
    </p>
   </sect1>
    ]]><![ %hppa [

   <sect1 id="missingdrivers">
    <heading>
      initrd にドライバがない可能性
    </heading>
    <p>
      &releasename; のカーネルは、ネイティブな HP bus の sysfs 
      をまだ完全にサポートしていません。<package>initramfs-tools</package> は、initrd 
      にディスクコントローラのドライバが含まれるのをあてにしています。initrd にドライバが含まれない場合、システムは起動に失敗するでしょう。
    </p>
    <p>
      システムがハードディスクへのアクセスに <tt>lasi700</tt> か <tt>zalon7xx</tt> 
      モジュールを使用している場合、<file>/etc/initramfs-tools/modules</file> 
      にそのモジュールが必要で、また、システムの再起動前に initrd を再生成する必要があります。initrd を以下のように再生成できます。
     <example>
# update-initramfs -u -k all
          </example>
    </p>
   </sect1>
    ]]><![ %i386-amd64 [

   <sect1 id="rerunlilo">
    <heading>
      lilo の再実行
    </heading>
    <p>
      (&oldreleasename; をインストールしたときに場合によってはデフォルトのブートローダとなる) 
      <package>lilo</package> をブートローダとして使用している場合は、アップグレード後に以下のように 
      <prgn>lilo</prgn> をもう一度実行しておくことを強くお勧めします。
     <example>
# /sbin/lilo
          </example>
    </p>
    <p>
      注意しなくてはならないのは、システムのカーネルをアップグレードしていない場合でもこの操作が必要になるということです。それは、パッケージのアップグレードによって 
      <prgn>lilo</prgn> の第 2 ステージが変更されているからです。
    </p>
    <p>
      また、<file>/etc/kernel-img.conf</file> の内容を調べ、<em>do_bootloader = 
      Yes</em> 
      と書かれていることを確認してください。この設定のとおり、カーネルをアップグレードした後には必ずブートローダが再実行されます。
    </p>
    <p>
      <prgn>lilo</prgn> を再び実行しているときに何らかの問題が発生した場合は、<file>vmlinuz</file> と 
      <file>initrd</file> へのシンボリックリンクが <file>/</file> 内に存在するか、また 
      <file>/etc/lilo.conf</file> の内容に食い違いがないか、確認してください。
    </p>
    <p>
      再起動する前に <prgn>lilo</prgn> 
      を再実行し忘れたり、手動で再実行する前にシステムが偶発的に再起動してしまった場合、システムは起動できなくなるでしょう。その場合、システム起動時に 
      lilo プロンプト全体は表示されず、最初の <em>LI</em> 
      だけが表示されます<footnote><p><prgn>lilo</prgn> の起動エラーコードに関するさらに詳しい情報は、<url 
      id="http://tldp.org/HOWTO/Bootdisk-HOWTO/a1483.html" name="The Linux 
      Bootdisk HOWTO"> (<url 
      id="http://www.linux.or.jp/JF/JFdocs/Bootdisk-HOWTO-12.html" 
      name="日本語訳">) 
      を参照してください。</p></footnote>。この状態からシステムを復旧させる方法に関する情報については、<ref 
      id="recovery"> を参照してください。
    </p>
   </sect1>
    ]]><![ %s390 [

   <sect1 id="s390-config">
    <heading>
      S/390 ハードウェアの設定
    </heading>
    <p>
      自動的にすべての S/390 ハードウェアを設定できるわけではありません。&releasename; 
      のカーネルでは、正しくデバイスを設定するのに、新しく <package>sysconfig-hardware</package> 
      ユーティリティを使用します。残念ながらこのユーティリティや設定ファイルのドキュメントはまだありません。<package>sysconfig-hardware</package> 
      の設定ファイルは <file>/etc/sysconfig/</file> にあります。
    </p>
    <p>
      特に現在 2.4 カーネルを使用している場合、設定を改めるのは挑戦になるかもしれません。何か助けが必要なら、<url 
      id="http://lists.debian.org/debian-s390" name="Debian S/390 mailing 
      list"> に遠慮なくご相談ください。
    </p>
    <p>
      まず、ユーティリティをインストールし、initrd に必要なスクリプトを含むように、以下の手順で initramfs initrd 
      を再生成してください。
     <example>
# aptitude install sysconfig-hardware
# update-initramfs -u -k all
	  </example>
    </p>
    <sect2 id="s390-dasd">
     <heading>
       ディスクの設定
     </heading>
     <p>
       <file>/etc/zipl.conf</file> を修正して完了です。sysconfig 
       ユーティリティは、ルートデバイスを有効にするのにデバイスパスを使用できます。これは、カーネルのブートパラメータに、このパスを渡す必要があるということでもあります。通常の 
       DASD では、以下のようなパスになります。
      <example>
&lt;バス&gt;-&lt;デバイス&gt;
	  </example>
       <tt>root</tt> パラメータ用に、パーティションはパスに追加される必要があります。dasda が 
       <tt>0.0.0122</tt> の場合、<tt>/etc/zipl.conf</tt> の <tt>parameters</tt> に 
       <file>root=/dev/dasda1</file> の代わりに以下を記述してください。
      <example>
root=/dev/disks/by-path/ccw-0.0.0122-part1
	  </example>
       もしくは、有効にするデバイスに <tt>enable</tt> パラメータを使用することもできます。この場合は以下のようにしてください。
      <example>
root=/dev/dasda1 enable=ccw-0.0.0122
	  </example>
       使用するパスは、異なるデバイスに合わせ変更できます。例えば、zFCP 
       ファイバーチャネルホストアダプタ上のディスクに対して、パスはバス、デバイス、ドライバ、wwpn、lun からなります。RAID1 
       用のパラメータは、以下のように (1 行で) してください。
      <example>
root=/dev/md0 enable=ccw-0.0.2900-zfcp-0x21000020371c93a5:0
enable=ccw-0.0.2900-zfcp-0x21000020371d8f94:0
	  </example>
     </p>
     <p>
       他の DASD デバイス (DASD はルートファイルシステムを用意する必要はありません) 
       は、<file>/etc/sysconfig/hardware/</file> にある設定ファイルで有効にできます。通常の DASD 
       では、以下のようにデバイスパス名のファイルを touch するだけです。
      <example>
# cd /etc/sysconfig/hardware
# touch config-ccw-0.0.0122
	  </example>
       zFCP 
       ファイバーチャネルホストアダプタ上のディスクでは、このファイル内に特定のファイルを一覧にします。上記と同じサンプルを使用し、以下を含む 
       (2 番目のデバイスは読みやすさのため編集しています) <file>config-ccw-0.0.2900</file> 
       ファイルを作成してください。
      <example>
ZFCP_DEVICES=(0x21000020371c93a5:0x0000000000000000 0x2100...:0x...)
	  </example>
     </p>
    </sect2>
    <sect2 id="s390-other">
     <heading>
       ネットワークデバイスの設定
     </heading>
     <p>
       ネットワークデバイスは、<file>/etc/sysconfig/hardware/</file> 
       ファイルにより有効になります。読み込みチャネル <tt>0.0.0a00</tt> で書き込みチャネル <tt>0.0.0a01</tt> 
       の ctc ネットワークデバイスで、S/390 プロトコルを使用するものでは、以下の内容を含むファイル 
       <file>config-ccw-0.0.0a00</file> を作成してください。
      <example>
CCWGROUP_CHANS=(0.0.0a00 0.0.0a01)
CTC_PROTOCOL=0
	  </example>
       レイヤ 2 モードが有効な qeth ネットワークデバイスでは、以下のようなファイル 
       <file>config-ccw-0.0.0600</file> となります。
      <example>
CCWGROUP_CHANS=(0.0.0600 0.0.0601 0.0.0602)
QETH_OPTIONS=(layer2)
	  </example>
     </p>
     <p>
       ctc に対するオプションでは <tt>CTC_PROTOCOL</tt> や <tt>CTC_BUFFER</tt> が、qeth 
       に対するオプションでは <tt>QETH_PORTNAME</tt> や <tt>QETH_PORTNO</tt>, 
       <tt>QETH_OPTIONS</tt> をサポートしています。
     </p>
     <p>
       S/390 のネットワークデバイスに安定した MAC アドレスがない場合、<package>udev</package> 
       を使用しての、デバイス名の永続化は不可能です。その代わり、インターフェースの名前を変更するのに、設定ファイルに 
       <tt>INTERFACE_NAME</tt> オプションを追加できます。
     </p>
    </sect2>
   </sect1>
    ]]>

   <sect1 id="mdadm">
    <heading>
      mdadm のアップグレード
    </heading>
    <p>
      mdadm は、MD アレイ (RAID) を initial ramdisk 
      から再構築したりシステム初期化シーケンス中に再構築するのに設定ファイルを必要とするようになりました。パッケージのアップグレードを終えた後、<strong>再起動する前に</strong>必ず 
      <file>/usr/share/doc/mdadm/README.upgrading-2.5.3.gz</file> 
      に書かれている説明を読み、それに従ってください。このファイルの最新版は <url 
      id="http://svn.debian.org/wsvn/pkg-mdadm/mdadm/trunk/debian/README.upgrading-2.5.3?op=file"> 
      から入手可能です。問題が生じた場合は参考にしてください。
    </p>
   </sect1>
  </sect>
  <sect id="for_next">
   <heading>
     次期リリースへの準備
   </heading>
   <p>
     アップグレードの後で、次期リリースに向けてできるいくつかの準備があります。
   </p>
   <p>
    <list>
     <item>
      <p>
        <prgn>grub</prgn> を使用している場合、<file>/etc/kernel-img.conf</file> 
        を編集し、<prgn>update-grub</prgn> プログラムの位置が 
        <file>/sbin/update-grub</file> から <file>/usr/sbin/update-grub</file> 
        に変更されたため、位置を調整してください。
      </p>
     </item>
     <item>
      <p>
        新しいカーネルイメージのメタパッケージが、古いものの依存関係で引きずられてインストールされた場合、自動的にインストールされたというマークがついています。これは以下のようにして修正してください。
       <example>
# aptitude unmarkauto $(dpkg-query -W 'linux-image-2.6-*' | cut -f1)
</example>
      </p>
     </item>
     <item>
      <p>
        以下を実行して、&oldreleasename; のカーネルメタパッケージを削除してください。
       <example>
# aptitude purge kernel-image-2.6-&lt;フレーバー&gt;
</example>
      </p>
     </item>
     <item>
      <p>
        <file>/etc/network/options</file> 
        にあるカーネルの設定値を、<file>/etc/sysctl.conf</file> に移動してください。
      </p>
     </item>
     <item>
      <p>
        <ref id="obsolete"> で説明しているように、時代遅れ (obsolete) 
        のパッケージや、使用していないパッケージを削除してください。そういったファイルが使用する設定ファイルを確認し、設定ファイルを削除するのにパッケージを完全削除 
        (purge) するかどうかを検討してください。
      </p>
     </item>
    </list>
   </p>
  </sect>
  <sect id="obsolete">
   <heading>
     時代遅れ (Obsolete) なパッケージ
   </heading>
   <p>
     数千個の新規パッケージが導入された一方で、&releasename; では &oldreleasename; にはあった 2,000 
     個以上の古いパッケージが破棄されたり削除されてもいます。これら時代遅れのパッケージをアップグレードする手段は提供されていません。時代遅れのパッケージを使い続けても構いませんが、Debian 
     プロジェクトは通常 &releasename; がリリースされてから 1 
     年後に<footnote><p>あるいはその期間中に別のリリースが出ない限り。ある時点では、通常 2 
     個のみの安定版リリースがサポートされています。</p></footnote>そのようなパッケージへのセキュリティサポートを打ち切り、その後は他のサポートも提供しないのが常です。もし存在するのなら、利用可能な代替品に置き換えることをお勧めします。
   </p>
   <p>
     あるパッケージが本ディストリビューションから削除された理由は、数多くあります――上流ではもはや保守されていないため、そのパッケージを保守することに興味を抱く 
     Debian 開発者がもはやいないため、提供していた機能が別のソフトウェア (あるいは新バージョン) に取って代わられたため、バグのために 
     &releasename; にはもはや適さないとみなされたため、などです。最後の場合では、当該パッケージが "不安定版" 
     ディストリビューション内には存在していることがあります。
   </p>
   <p>
     更新されたシステム内のどのパッケージが "時代遅れ" 
     なのかを検出するのは、パッケージ管理用フロントエンドが当該パッケージにその旨のマークをつけてくれるので簡単です。<prgn>aptitude</prgn> 
     を使っているのなら、当該パッケージが「廃止された、またはローカルで作成されたパッケージ」欄に列記されているのに気づくでしょう。<prgn>dselect</prgn> 
     も同じようなセクションを提供しますが、表示される一覧はわずかに異なっています。さらに、&oldreleasename; 
     で手作業でパッケージをインストールするのに <prgn>aptitude</prgn> 
     を使っていたのなら、手作業でインストールされたパッケージの記録が取られており、依存元パッケージが削除されればもはや不要となる依存関係のみによって引きずられてインストールされたパッケージに時代遅れのマークをつけることができるでしょう。また 
     <prgn>aptitude</prgn> は、<prgn>deborphan</prgn> 
     とは異なり、手作業でインストールしたパッケージには時代遅れのマークをつけません 
     (依存関係によって自動でインストールされたものにはマークをつけます)。
   </p>
   <p>
     時代遅れのパッケージを見つけるのに使える追加ツールとしては、以下のものがあります―― <prgn>deborphan</prgn> や 
     <prgn>debfoster</prgn>、<prgn>cruft</prgn>。<prgn>deborphan</prgn> 
     を強くお勧めしますが、同プログラムは (デフォルトモードでは) 時代遅れのライブラリ―― "libs" や "oldlibs" 
     セクション内にあり、他のパッケージに使われていないパッケージ――しか報告しません。これらのプログラムが表示したパッケージをやみくもに削除しないでください。特に、誤報しやすい非デフォルトのオプションを積極的に使っている場合はなおさらです。実際に削除する前に、削除を提案されたパッケージを手作業で調査 
     (その中身やサイズ、説明文など) することを強くお勧めします。
   </p>
   <p>
     <url id="&url-bts;" name="Debian 
     バグ追跡システム">は、パッケージが削除された理由についての情報を提供してくれることがよくあります。あるパッケージ自体についてのアーカイブ化されたバグ報告と、<url 
     id="&url-bts;cgi-bin/pkgreport.cgi?pkg=ftp.debian.org&#38;archive=yes" 
     name="ftp.debian.org pseudo-package"> のアーカイブ化されたバグ報告の両方を調査すべきです。
   </p>
   <sect1 id="dummy">
    <heading>
      ダミーパッケージ
    </heading>
    <p>
      &oldreleasename; のいくつかのパッケージは &releasename; 
      では複数のパッケージに分割されていますが、これは大半がシステムの保守性を改善するためです。この場合におけるアップグレードを容易にするために、&releasename; 
      はしばしば "ダミーの" パッケージ―― &oldreleasename; 
      での古いパッケージと同じ名前で、新規パッケージを導入するための依存関係を備えた空のパッケージ――を提供しています。これらの "ダミー" 
      パッケージはアップグレード後は Obsolete 扱いとされ、安全に削除することができます。
    </p>
    <p>
      大半の (すべてではない) 
      ダミーパッケージの説明文には、その目的が記されています。しかしながらダミーパッケージの説明文は統一されていないため、自分のシステム内のダミーパッケージを検出するために 
      <prgn>deborphan</prgn> を <tt>--guess</tt> 
      オプションつきで使うこともできます。いくつかのダミーパッケージは、アップグレード後に削除されることを意図しておらず、代わりに時間とともに変化するプログラムの利用可能な最新バージョンの記録用として使われることに注意してください。
    </p>
   </sect1>
  </sect>
 </chapt>
 <chapt id="information">
  <heading>
    &releasename; で知っておくべき問題点
  </heading>
  <sect id="problems">
   <heading>
     生じうる問題
   </heading>
   <p>
     変化には当然のように副作用がつきもので、どこか他の場所でバグを出してしまうこともあります。ここには現時点で私たちが知っている問題点を記載しています。正誤表・関連パッケージの付属文書・バグ報告や、<ref 
     id="morereading">で触れられているその他の情報も読んでください。
   </p>
   <sect1 id="udev">
    <heading>
      udev に関連したデバイスでの問題
    </heading>
    <p>
      <package>udev</package> 
      は広範囲にわたってテストされていますが、いくつかのデバイスでは若干の修正が必要になるという問題があるかもしれません。大抵の問題は、デバイスファイルの権限や所有者が変更されるというものです。(<file>/dev/video</file> 
      や <file>/dev/radio</file> など) デフォルトではデバイスファイルが作成されない場合もあります。
    </p>
    <p>
      <package>udev</package> は、これらの問題に対処する設定の仕組みを提供しています。詳しくは、<manref 
      section="8" name="udev"> や <file>/etc/udev</file> を見てください。
    </p>
   </sect1>
    <![ %defaulted-2.4 [

   <sect1 id="incompatible-2.4">
    <heading>
      2.4 系カーネルでは動作しないアプリケーションもあります
    </heading>
    <p>
      &releasename; のアプリケーションの中には、2.4 系カーネルで動作しないものもあります。例えば、2.4 
      系カーネルでは利用できない <tt>epoll()</tt> のサポートを必要とするものなどです。それらのアプリケーションは、2.6 
      系カーネルでシステムを再起動しないかぎり、起動すらしないか、正常に動かなかったりします。
    </p>
    <p>
      HTTP プロキシの <package>squid</package> がその一例です。
    </p>
   </sect1>
    ]]>

   <sect1 id="window-scaling">
    <heading>
      ネットワーク上の特定の場所に TCP が届かなくなりました
    </heading>
    <p>
      2.6.17 以降の Linux は、RFC 1323 で指定された TCP 
      ウィンドウのスケーリングを積極的に使用しています。サーバによってはこれに対しておかしな挙動を示し、ウィンドウサイズを誤って認識することがあります。さらに詳しく知りたい場合は、バグ報告 
      <url id="http://bugs.debian.org/381262" name="#381262"> や <url 
      id="http://bugs.debian.org/395066" name="#395066">、<url 
      id="http://bugs.debian.org/401435" name="#401435"> を参照してください。
    </p>
    <p>
      これらの問題を回避する方法は、通常 2 つあります。許可される TCP ウィンドウサイズの最大値を小さな値に戻す (好ましい) 
      方法と、TCP ウィンドウスケーリングオプションを完全に無効にする (非推奨の) 方法です。<url 
      id="http://www.debian.org/devel/debian-installer/errata" 
      name="debian-installer の正誤表ページ">にあるコマンドの例を参照してください。
    </p>
   </sect1>
    <![ %i386 [

   <sect1 id="poweroff">
    <heading>
      自動電源オフが機能しなくなりました
    </heading>
    <p>
      一部の古いシステムでは、もはや <tt>shutdown -h</tt> で電源がオフにならないかもしれません 
      (しかしシステムの停止だけはします)。これは、電源オフに apm 
      を使用する必要があるためです。<package>grub</package> や <package>lilo</package> 
      の設定ファイルでの指定などを通じて、カーネルのコマンドラインに <tt>acpi=off apm=power_off</tt> 
      を追加すれば、この問題は解決するかもしれません。さらに詳しくはバグ <url 
      id="http://bugs.debian.org/390547" name="#390547"> を参照してください。
    </p>
   </sect1>
    ]]>

   <sect1 id="apt-pdiff">
    <heading>
      APT のパッケージインデックスファイルの更新が遅くなります
    </heading>
    <p>
      デフォルトでは、&releasename; バージョンの <prgn>apt</prgn> は、(<tt/aptitude update/ 
      を実行するときに) APT パッケージインデックスのファイルをアップデートするのに、(パッケージインデックスのファイル全体ではなく) 
      差分ファイルをダウンロードする <tt/pdiff/ 
      という新しい方式を使います。この新しい機能は使用するバンド幅を抑え、多くのシステムで速くなります。残念ながら、高速なネットワーク接続 
      (もしくはミラーまでが非常に近距離) 
      で、頻繁にはアップデートしないシステムでは、アップデート時に遅くなってしまうという正反対の影響もあります。パッケージインデックス全体をダウンロードするよりも、差分ファイルをマージする方が時間がかかってしまうためです。<file>/etc/apt/apt.conf</file> 
      設定ファイルに <tt>Acquire::Pdiffs "false";</tt> を追加すれば、この機能を無効にできます。
    </p>
    <p>
      この変更は、主に &debian; の <em>unstable</em> や <em>testing</em> 
      ブランチを使っているユーザに影響します。これらのアーカイブは、変更が生じやすいためです。&releasename; 
      のユーザは、主にセキュリティアーカイブのパッケージ状況をアップデートするときに、この機能に気づくでしょう。
    </p>
   </sect1>
    <![ %i386 [

   <sect1 id="hp-acpi">
    <heading>
      &releasename; のカーネルでは一部の HP ラップトップモデルの ACPI サポートが無効になっています
    </heading>
    <p>
      HP ラップトップの一部のモデルでは、ACPI BIOS が、&releasename; 付属の Linux 2.6.18 
      カーネルと非互換になりました。この変更によりファンの回転数が上がらなくなり、不必要な熱応力が生じるでしょう。また、システムのサスペンド後にファンが働かなくなる可能性があります。そのため、ACPI 
      BIOS の特定のバージョンを検出すると、カーネルは内部的に ACPI 
      サポートを無効にします。この変更が関係することがわかっているモデルには、HP 
      nx6125、nx6120、nx6325、nc6120、nc6000 などがあります。
    </p>
    <p>
      これらのシステムで ACPI サポートが必要なユーザは、2.6.19 以降の Linux 
      カーネルをインストールするとよいでしょう。さらに詳しい情報は、Debian のバグ <url 
      id="http://bugs.debian.org/404143" name="#404143"> や <url 
      id="http://bugs.debian.org/400488" name="#400488">、そして Linux カーネルのバグ 
      <url id="http://bugzilla.kernel.org/show_bug.cgi?id=5534" 
      name="#5534"> や <url 
      id="http://bugzilla.kernel.org/show_bug.cgi?id=7122" name="#7122"> 
      を参照してください。
    </p>
   </sect1>
    ]]>

   <sect1 id="asynchronous-network-start">
    <heading>
      ネットワークの初期化を同期させないと予測不能な挙動の原因となります
    </heading>
    <p>
      ネットワークインターフェイスのドライバをロードするのに <package>udev</package> 
      を使うシステムでは、<package>udev</package> の非同期な性質ゆえ、システム起動時に 
      <prgn>/etc/init.d/networking</prgn> 
      が実行されるまでにネットワークドライバがロードされないことがあります。<file>/etc/network/interfaces</file> 
      に (<tt>auto</tt> に加えて) <tt>allow-hotplug</tt> 
      を含めると、ネットワークインターフェイスが利用可能になるとすぐに有効になるよう設定できますが、これが、ブートシーケンスがネットワークサービスを開始する前に完了するという保証はありません。ネットワークインターフェイスがない場合に、正しく動かないサービスもあります。
    </p>
   </sect1>
    <![ %not-s390 [

   <sect1 id="wpa">
    <heading>
      WPA による安全なワイヤレスネットワークを使う場合の問題
    </heading>
    <p>
      &oldreleasename; では、<package>wpasupplicant</package> 
      パッケージはシステムのサービスとして、<file>/etc/default/wpasupplicant</file> および 
      ユーザが提供する <file>/etc/wpasupplicant.conf</file> により設定されていました。
    </p>
    <p>
      &releasename; では、<file>/etc/init.d/wpasupplicant</file> はなくなり、Debian 
      パッケージでは <package>wireless-tools</package> など他のパッケージと同様に 
      <file>/etc/network/interfaces</file> 
      に統一されました。これはつまり、<package>wpasupplicant</package> 
      は直接システムサービスを提供しないということを意味しています。
    </p>
    <p>
      wpasupplicant の設定についての情報は、<file>/etc/network/interfaces</file> 
      ファイルの例が書いてある <file>/usr/share/doc/wpasupplicant/README.modes.gz</file> 
      を参照してください。Debian で <package>wpasupplicant</package> 
      パッケージを使用する際の最新情報は、<url
      id="http://wiki.debian.org/WPA" name="Debian Wiki"> にあります。
    </p>
   </sect1>
    ]]>

   <sect1 id="partitionenc">
    <heading>
      非 ASCII 文字を含むファイル名での問題
    </heading>
    <p>
      ファイル名に非 ASCII 文字を含むファイルがある vfat、ntfs、iso9660 ファイルシステムを、utf8 
      オプションをつけずにマウントした場合、ファイル名を使おうとすると失敗します。次のようなエラーが表示されます: 'Invalid or 
      incomplete multibyte or wide character'。可能な解決方法は、ファイル名に非 ASCII 
      文字を含むファイルがある vfat、ntfs、iso9660 
      ファイルシステムをマウントする際には、<tt>defaults,utf8</tt> をマウントオプションとしてつけることです。
    </p>
    <p>
      <tt>utf8</tt> オプションをつけると、vfat で大文字小文字を区別せずにファイル名を扱うという機能を、Linux 
      カーネルがサポートしていないことに注意してください。
    </p>
   </sect1>
    <![ %amd64 [

   <sect1 id="nvidia-iommu">
    <heading>
      Nvidia チップセットでのハードウェア IOMMU によるデータ破壊
    </heading>
    <p>
      Nvidia のチップセットを使っていて、かつ 3GB を越す RAM を積んでいる &arch-title; システムでは、ハードウェア 
      IOMMU が使われるとデータ破壊が時々起こるという問題が確認されています。この問題はまだ Linux 
      カーネルの開発者とハードウェアメーカーが調査中で、上流でも公式の修正版はリリースされていません。データの完全性を保護するために、これらのシステムのユーザには、適切な解決方法が見つかるまでは、<tt>iommu=soft</tt> 
      をカーネルの起動オプションに手動で追加して、起動時からハードウェア IOMMU の使用を無効にするよう忠告します。
    </p>
    <p>
      この問題についてのさらなる情報は、Debian のバグ報告 <url id="http://bugs.debian.org/404148" 
      name="#404148"> と Linux カーネルのバグ報告 <url 
      id="http://bugzilla.kernel.org/show_bug.cgi?id=7768" name="#7768"> 
      にあります。
    </p>
   </sect1>
    ]]>

  </sect>
   <![ %defaulted-2.4 [

  <sect id="upgrade-to-2.6">
   <heading>
     2.6 系カーネルへのアップグレード
   </heading>
   <p>
     2.6 系カーネルは、2.4 
     系カーネルから大きな変更が加えられています。モジュールの名称が変更され、多くのドライバが部分的あるいはほとんど完全に書き換えられました。したがって、以前のバージョンから 
     2.6 
     系カーネルへのアップグレードは、それほど簡単に済ませられるものではありません。このセクションは、直面するかもしれない問題のいくつかを知っておいてもらおうというのが狙いです。
   </p>
   <p>
     ソースから自分でカーネルをコンパイルしている人は、2.6 
     系カーネルで再起動する前に、<package>module-init-tools</package> 
     がインストールされているのを確認してください。このパッケージは、<package>modutils</package> を 2.6 
     系カーネル用のものに置き換えます。Debian の <package>linux-image</package> 
     パッケージのどれかを使っている場合は、依存関係により自動的にこのパッケージが入っているはずです。
   </p>
   <p>
     <em>LVM</em> を使っている場合は、2.6 系カーネルで再起動する前に <package>lvm2</package> 
     パッケージもインストールしてください。2.6 系カーネルは LVM1 を直接はサポートしていません。LVM1 
     のボリュームにアクセスするには、<package>lvm2</package> の互換レイヤ (dm-mod モジュール) 
     が使われます。初期化スクリプトがどのバージョンのカーネルが使われているかを検出し、適切なバージョンを実行するので、<package>lvm10</package> 
     はインストールしたままでも構いません。
   </p>
   <p>
     <file>/etc/modules</file> ファイル (システム起動時にロードされるモジュールの一覧) 
     内に記述をしているなら、いくつかのモジュール名が変わっているかもしれないことに注意してください。変わっている場合は、ファイル内の記述を新しいモジュール名で更新しなければならないでしょう。
   </p>
    <![ %i386 [

   <p>
     いくつかの SATA ディスクコントローラでは、ドライブやそのパーティションに割り当てられたデバイスが 
     <file>/dev/hdX</file> から <file>/dev/sdX</file> 
     に変わっているかもしれません。変わっている場合は、<file>/etc/fstab</file> 
     とブートローダの設定を適切に修正しなければならないでしょう。これらの修正が正しく行われないと、システムは適切に起動しない可能性があります<footnote><p>設定が不適切でもカーネルは起動しますが、ルートファイルシステムをマウントしようとして失敗し、<em>unable 
     to mount /dev/hdX ..not found</em> というメッセージに続けて <em>waiting for root 
     filesystem</em> というエラーを出して停止します。カーネルの起動メッセージを眺めるか 
     <file>/dev/disk/</file> の内容を調べると、新たに割り当てられたデバイスの名前が特定できるので、そうしたら 
     <prgn>initramfs</prgn> シェルを使用してこの問題を修正できます。</p></footnote>。
   </p>
    ]]><![ %ia64 [

   <p>
     古いファームウェアが走っている HP Itanium システムは、&releasename; にある 2.6 
     系カーネルと互換性がありません。これはつまり、カーネルを更新する前に、システムのファームウェアを最新のものに更新すべきだということです。ファームウェアの更新は、システムをアップグレードする前に済ませておくことをお勧めします。すでに 
     2.6 系カーネルで動かしているなら、システムの残りの部分をアップグレードする際に、自動的に最新のカーネルを取得します (<ref 
     id="upgrading_other"> を参照してください)。これが失敗すると、その結果として、システムは起動しません。
   </p>
    ]]>

   <p>
     2.6 
     系カーネルをインストールした後、再起動を行う前に、復旧手段を用意するようにしてください。まず、ブートローダの設定に新しいカーネルと稼働中の古い 
     2.4 
     系カーネルの両方の記述があることを確認してください。ブートローダの設定が間違っていたために古いカーネルで起動できなくなる場合に備え、"レスキュー用の" 
     フロッピーか CD-ROM が手元にあることも確認しておくべきでしょう。
   </p>
    <![ %not-s390 [

   <sect1 id="2.6-keyboard">
    <heading>
      キーボードの設定
    </heading>
    <p>
      2.6 系カーネルでの最も劇的な変化は、入力レイヤの基本部分の変更です。この変更により、すべてのキーボードは「普通の」PC 
      キーボードのように扱えます。これは、現在異なるタイプのキーボード (例えば USB-MAC や Sun キーボード) 
      を選択している場合、新しい 2.6 系カーネルで再起動後にキーボードがまったく動かない状態になってしまう可能性が非常に高いということです。
    </p>
    <p>
      別のシステムからそのマシンへ SSH を使ってログインできるのなら、<tt>dpkg-reconfigure 
      console-data</tt> と実行して「完全なリストからキーマップを選択」オプションを選び、そこから "pc" 
      キーボードを選択することでこの問題を解決できます。
    </p>
    <p>
      コンソールで使っているキーボードが影響を受けたということは、X Window System 
      のキーボードも再度設定する必要があるでしょう。<tt>dpkg-reconfigure xserver-xorg</tt> 
      を実行するか、<file>/etc/X11/xorg.conf</file> を直接編集することになります。<ref 
      id="nownownow">で参照されている文書も読んでおいてください。
    </p>
     <![ %i386 [

    <p>
      この問題は、すべての PS/2 および大半の USB キーボードがすでに「普通の」PC キーボードとして設定されている 
      &arch-title; アーキテクチャでは影響がないでしょう。
    </p>
     ]]><![ %not-i386 [

    <p>
      USB キーボードを使っているのなら、「普通の」PC キーボードか USB-MAC 
      キーボードとして設定されているでしょう。前者の場合、この問題による影響はありません。
    </p>
     ]]>

   </sect1>
   <sect1 id="2.6-mouse">
    <heading>
      マウスの設定
    </heading>
    <p>
      これも入力レイヤの変更によるものですが、2.6 系カーネルへアップグレードした後でマウスが使えなくなったなら、X Window System 
      と <package>gpm</package> 
      を再設定する必要があるでしょう。よくある原因は、マウスからのデータを受け取るデバイスが変わったせいです。別のモジュールをロードする必要もあるかもしれません。
    </p>
     <![ %sparc [

    <p>
      現在、X で <file>/dev/sunmouse</file> を設定しているなら、おそらく 
      <file>/dev/psaux</file> へ変更する必要があります。
    </p>
     ]]>

   </sect1>
   <sect1 id="2.6-sound">
    <heading>
      サウンドの設定
    </heading>
    <p>
      2.6 系カーネル用としては、OSS サウンドドライバよりも ALSA サウンドドライバをお勧めします。ALSA 
      サウンドドライバは、デフォルトではモジュールとして提供されます。サウンドを鳴らすには、あなたのサウンドハードウェアに合ったモジュールがロードされる必要があります。一般に該当モジュールがあり、<package>alsa-base</package> 
      に加えて <package>hotplug</package> パッケージか <package>discover</package> 
      パッケージのいずれかがインストールされていれば、自動的にロードされます。<package>alsa-base</package> 
      パッケージはまた、OSS モジュールが <prgn>hotplug</prgn> や <prgn>discover</prgn> 
      によってロードされないようそれらを "ブラックリスト化" します。<file>/etc/modules</file> 内に OSS 
      モジュールの記述があるなら、それらを削除すべきです。
    </p>
   </sect1>
    ]]>

  </sect>
   ]]>

  <sect id="xorg">
   <heading>
     XFree86 から X.Org への移行
   </heading>
   <p>
     X.Org への移行は多少の構造的変化を伴います。インストール済みのパッケージがすべて Debian 製のパッケージで 
     &releasename; 
     にも含まれている場合、アップグレードは問題なく行われるはずです。しかし、知っておくべき変更点がいくつかあることが経験的に明らかになっています。というのも、これらによってアップグレードの過程で問題が生じる可能性があるからです。
   </p>
   <p>
     最も重要な変更点は、<file>/usr/X11R6/bin</file> が削除され、<file>/usr/bin</file> 
     へのシンボリックリンクとして残されるだけになるということです。つまり、新しいパッケージがインストールされる時点で 
     <file>/usr/X11R6/bin</file> 
     が空になっていなければいけません。新しいパッケージは、<file>/usr/X11R6/bin</file> 
     を使用していたほとんどのパッケージと衝突するようになっていますが、場合によっては手作業での介入が必要になります。絶対に、X 
     セッション内からはディストリビューションのアップグレードを実行しないようにしてください。
   </p>
   <p>
     X.Org のインストール中にアップグレードが中断した場合、<file>/usr/X11R6/bin</file> 
     にまだ残っているファイルがあるか調べなければなりません。そうしたら (そこにファイルがあれば) どの Debian 
     パッケージがそのファイルをインストールしたかを <tt>dpkg -S</tt> で調べ、該当するパッケージを <tt>dpkg 
     --remove</tt> 
     で削除できます。後で代わりのパッケージをインストールできるよう、削除したパッケージを書き留めておいてください。アップグレードを続ける前に 
     <file>/usr/X11R6/bin</file> にあるファイルはすべて削除する必要があります。
   </p>
   <p>
     さらに詳しい情報やその他の問題点については <url id="http://wiki.debian.org/Xorg69To7"> 
     を読んでください。
   </p>
  </sect>
  <sect id="xorg-8bit">
   <heading>
     多くのアプリケーションが 8 ビットでの表示をサポートしていません
   </heading>
   <p>
     Xorg および最新のライブラリにアップグレードした後、8 ビットのカラー深度しか表示できない X 
     ターミナルは動かなくなります。これは、Cairo 2D ベクトルグラフィックライブラリ 
     (<package>libcairo2</package>) が 8 
     ビット疑似カラーをサポートしていないからです。このライブラリは、GNOME や Xfce 
     デスクトップをはじめ、<package>abiword</package> のような Gtk2+ 
     ツールキットを用いてコンパイルされた多くのデスクトップアプリケーションで使われています。
   </p>
   <p>
     いくつかの Sun のマシンと、Tektronix・NCD・IBM・SGI の X ターミナルの他、X 
     ウィンドウをリモートに転送するいくつかのシステムが、この影響を受けることが分かっています。可能なら、これらのターミナルで 16 
     ビットカラーを使うよう設定すべきです。
   </p>
   <p>
     さらなる情報は、Freedesktop のバグ報告 <url 
     id="https://bugs.freedesktop.org/show_bug.cgi?id=4945" name="bug 
     #4945"> にあります。
   </p>
  </sect>
  <sect id="exim">
   <heading>
     exim から exim4 へのアップグレード
   </heading>
   <p>
     &releasename; リリースで時代遅れとして扱われるようになったパッケージの 1 つに、メール転送エージェント (MTA) の 
     <package>exim</package> があります。このパッケージは、完全に新しいパッケージである 
     <package>exim4</package> によって置き換えられました。
   </p>
   <p>
     それだけでなく、<package>exim</package> (バージョン 3.xx) 
     はもう何年もの間、上流でメンテナンスされていないので、Debian ではこのバージョンのサポートを打ち切りました。まだ 
     <package>exim</package> 3.xx を使用している場合は、インストールしている 
     <package>exim</package> を <package>exim4</package> 
     に手作業でアップグレードしてください。<package>exim4</package> は既に &oldreleasename; 
     に含まれているので、&releasename; へのアップグレードの前に &oldreleasename; 
     システム上でこのアップグレード作業を行うか、&releasename; 
     へのアップグレードの後で都合のよいときに行うかは選択可能です。ただ、古い <package>exim</package> 
     パッケージが自動的にアップグレードすることはなく、&oldreleasename; 
     のサポートが打ち切られた後はそのパッケージへのセキュリティサポートは行われないということだけは覚えておいてください。
   </p>
   <p>
     <package>debconf</package> の設定によっては、<package>exim4</package> 
     のインストール中に、設定に関する質問を全くされない可能性があることに注意してください。質問をされない場合、システムはデフォルトの「ローカル配信のみ」のセットアップになります。<tt>dpkg-reconfigure 
     exim4-config</tt> コマンドを使用すると設定しなおすことが可能です。
   </p>
   <p>
     Debian の <package>exim4</package> パッケージ群は大規模に文書化されています。パッケージのホームページは 
     Debian Wiki の <url id="http://wiki.debian.org/PkgExim4"> で、README 
     ファイルはパッケージ内部だけでなく <url 
     id="http://pkg-exim4.alioth.debian.org/README/README.Debian.html"> 
     にもあります。
   </p>
   <p>
     README ファイルにはパッケージ化 (Packaging) に関する章があります。この章では、Debian 
     で提供されている複数の異なるパッケージの差異について説明しています。また README ファイルには <prgn>Exim</prgn> 3 
     からのアップグレード (Updating from Exim 3) に関する章があります。この章は、実際に移行を行う際に役に立つでしょう。
   </p>
  </sect>
  <sect id="apache2">
   <heading>
     apache2 のアップグレード
   </heading>
   <p>
     Apache は新しいバージョン 2.2 
     にアップグレードしました。普通のユーザはこのアップグレードによる影響を受けませんが、知っておくべき、生じる可能性がある問題点がいくつかあります。
   </p>
   <p>
     <url id="http://httpd.apache.org/docs/2.2/upgrading.html"> 
     に、上流での変更が記載されています (訳注: 本リリースノート執筆時点では、リンク先の日本語のページに記載されている情報は 1.3 から 
     2.0 で入った変更なので、2.0 から 2.2 
     で入った変更については英語のページを参照してください)。このページを読み、特に以下の内容を記憶に留めておいてください。
    <list>
     <item>
      <p>
        すべてのモジュールを再コンパイルする必要があります
      </p>
     </item>
     <item>
      <p>
        認証モジュールについて、名前の変更や再分類が行われました
      </p>
     </item>
     <item>
      <p>
        設定オプションの一部は名前が変わりました
      </p>
     </item>
    </list>
   </p>
   <p>
     Debian 特有の変更としては、デフォルトパッケージが ssl をサポートするようになったため、SSL 
     という文字列にもう意味がなくなった、などが挙げられます。
   </p>
   <p>
     (<package>apache2-mpm-itk</package> パッケージで利用可能な) 実験的な ITK MPM 
     を使用している場合、cgi モジュールはデフォルトでは適切に有効になりません。適切に有効にするには、次のように手作業で 
     <tt>mod_cgid</tt> を無効にして <tt>mod_cgi</tt> を有効にする必要があります。
    <example>
# cd /etc/apache2/mods-enabled
# rm cgid.conf cgid.load
# ln -s ../mods-available/cgi.load .
# /etc/init.d/apache2 force-reload
        </example>
   </p>
  </sect>
  <sect id="zope">
   <heading>
     Zope と Plone のアップグレード
   </heading>
   <p>
     Zope 関連のすべてのソフトウェアが更新されています。(時代遅れになった、もしくは、新しい Zope、CMF、Plone 
     とは適合しなくなった) 多くのソフトウェアが、このディストリビューションからは削除されています。
   </p>
   <p>
     残念ながら、複雑な <prgn>zope</prgn> や <prgn>plone</prgn> 
     のサーバをアップグレードする、簡単で確実な方法はありません。Plone 
     には移行ツールがありますが、経験として、自動移行は簡単に失敗してしまいます。
   </p>
   <p>
     このため、&releasename; バージョンへの移行テストと並行して、&oldreleasename; でインストールした 
     Zope/Plone を実行しつづけられるようにシステムを設定するようお勧めします。
   </p>
   <p>
     これを達成する簡単で安全な方法は、&oldreleasename; システムを別のハードディスクやパーティションにコピーして、2 つのうちの 
     1 つだけをアップグレードすることです。<prgn>chroot</prgn> を使えば、&releasename; バージョンと並行して 
     &oldreleasename; バージョンを実行できます。
   </p>
   <p>
     &releasename; システムで Zope/Plone 
     の新旧両バージョンを同時にインストールするのは不可能です。一つには、古いパッケージは <package>python2.3</package> 
     に依存していて、<package>python2.4</package> と同時にはインストールできないからです。
   </p>
  </sect>
  <sect id="tar">
   <heading>
     GNU tar のワイルドカード展開 (glob)
   </heading>
   <p>
     以前のバージョンの GNU <prgn>tar</prgn> 
     は、アーカイブからファイルを展開したり、ファイルのリストを作ったりするときに、シェル形式の glob をしていたようです。例として、
    <example>
tar xf foo.tar '*.c'
        </example>
     は、'.c' で終わるファイルをすべて展開していました。この挙動は文書化されておらず、従来の <prgn>tar</prgn> 
     の実装とは互換性がありません。そこで、バージョン 1.15.91 からの GNU <prgn>tar</prgn> はデフォルトでは glob 
     しなくなりました。例えば、上のコマンドは、アーカイブから '*.c' という名前のファイルを展開せよ、と解釈されます。
   </p>
   <p>
     さらなる情報は、<file>/usr/share/doc/tar/NEWS.gz</file> を見てください。
   </p>
  </sect>
  <sect id="nis">
   <heading>
     NIS と Network Manager
   </heading>
   <p>
     &releasename; の <package>nis</package> に入っている <prgn>ypbind</prgn> 
     のバージョンでは、Network Manager のサポートが含まれています。このサポートは、コンピュータがネットワークから切断されたと 
     Network Manager が報告するときに、<prgn>ypbind</prgn> が NIS 
     クライアントの機能を無効にする原因となります。Network Manager 
     は、通常、コンピュータが使われていない場合に切断されたと報告するので、NIS クライアントシステムを使っている NIS 
     ユーザは、これらのシステムに載っている Network Manager のサポートが無効になっているのを確認すべきです。
   </p>
   <p>
     これは、<package>network-manager</package> 
     パッケージをアンインストールするか、<file>/etc/default/nis</file> を編集して、<tt>-no-dbus</tt> 
     に <tt>YPBINDARGS</tt> を追加すれば済みます。
   </p>
   <p>
     新規にインストールした Debian ではデフォルトで <tt>-no-dbus</tt> 
     が使われますが、これまでのリリースではデフォルトではありませんでした。
   </p>
  </sect>
  <sect id="php-globals">
   <heading>
     安全でない php の設定の非推奨化
   </heading>
   <p>
     長年、PHP で <tt>register_globals</tt> 
     の設定をオンにすることは安全でなく危険であるとわかっており、このオプションはこれまでかなりの期間、デフォルトではオフになっていました。この設定が、あまりにも危険であるとして、ついに 
     Debian システムでは非推奨となりました。同様のことが <tt>safe_mode</tt> と 
     <tt>open_basedir</tt> の欠陥にも当てはまります。これらの欠陥はやはり、かなりの期間メンテナンスされていません。
   </p>
   <p>
     本リリース以降、Debian セキュリティチームは、安全でないとわかっている PHP 
     の多数の設定についてはセキュリティサポートを提供しません。最も重大なのは、<tt>register_globals</tt> 
     がオンになっているために生じる問題への対処は、もはやなされないということです。
   </p>
   <p>
     <tt>register_globals</tt> を必要とする旧式のアプリケーションを実行する場合は、例えば Apache 
     の設定ファイルを用いて、該当する各パスのみに対してこの設定を有効にしてください。さらに詳しい情報は、PHP の付属文書のディレクトリ 
     (<file>/usr/share/doc/php4</file> や <file>/usr/share/doc/php5</file>) 
     に含まれている <file>README.Debian.security</file> ファイルで入手可能です。
   </p>
  </sect>
  <sect id="mozilla-security">
   <heading>
     Mozilla 製品のセキュリティの状態
   </heading>
   <p>
     Mozilla のプログラムである <package>firefox</package> と 
     <package>thunderbird</package> (Debian ではそれぞれ 
     <package>iceweasel</package> と <package>icedove</package> に名前が変更されています) 
     は多数のユーザにとって重要なツールです。しかし残念なことに、上流のセキュリティポリシーは上流の新しいバージョンに更新するようユーザに強いることで、これは、セキュリティアップデートには大きな機能変更を含めないという 
     Debian のポリシーと矛盾します。いつになるかは今のところわかりませんが、&releasename; のサポート期間の間に、Mozilla 
     製品のサポートがもはや Debian セキュリティチームにとって実現不可能になり、Debian セキュリティチームが Mozilla 
     製品のセキュリティサポートの終了を発表するときが来るかもしれません。Mozilla 
     製品をインストールするときはこのことを考慮に入れ、セキュリティサポートの終了が問題になると考えられる場合は Debian 
     で提供されている代替プログラムの使用を検討してください。
   </p>
  </sect>
  <sect id="kde-desktop-changes">
   <heading>
     KDE デスクトップ
   </heading>
   <p>
     &releasename; に含まれているバージョンの KDE では、メディアの取り扱い方法が、<file>device:/</file> 
     を用いたアドレスから <file>media:/</file> を用いたアドレスへと変化しました。一部のユーザ設定ファイルには 
     <file>device:/</file> 
     を用いたリンクが含まれている可能性があるので、それらは新しいアドレスに合うよう修正すべきです。特に、<file>~/.kde/share/apps/konqsidebartng/virtual_folders/services</file> 
     には <file>device:/</file> 
     を用いた参照があります。このファイルは、新規ユーザをセットアップしたときには作成されないので、安全に削除できます。
   </p>
   <p>
     KDE デスクトップ環境は、&oldreleasename; に含まれていたバージョンから &releasename; 
     に含まれているバージョンまでに多くの変更が加えられました。さらに詳しい情報は <url 
     id="http://www.kde.org/announcements/announce-3.5.php" name="KDE 3.5 
     のリリースノート">にあります。
   </p>
  </sect>
  <sect id="gnome-desktop-changes">
   <heading>
     GNOME デスクトップに関する変更とサポート
   </heading>
   <p>
     &oldreleasename; で GNOME デスクトップを使用していた場合、&releasename; になって Debian 
     でのデフォルトの設定に導入された変更のうち一部は役立たないでしょう。極端な場合、GNOME 
     デスクトップは過去の設定内容を適切に扱えず、正しい振舞いをしない可能性があります。
   </p>
   <p>
     GNOME デスクトップの設定を大幅に変更していないのであれば、ユーザのホームディレクトリ内の <file>.gconf</file> 
     ディレクトリを別の名前 (<file>.gconf.old</file> など) 
     に変更するとよいでしょう。そうすれば、新しいセッションを開始したときに <file>.gconf</file> 
     ディレクトリは作成しなおされ、&releasename; のデフォルトの設定を含むようになります。
   </p>
   <p>
     &releasename; のリリースから、Debian には、もはやサポートされていない GNOME バージョン 1 
     リリースのパッケージの大半が含まれなくなりました。とはいえ、GNOME 2 を使うよう更新されていないいくつかの Debian 
     パッケージをサポートするため、一部のパッケージは残されています。GTK1.2 のパッケージはまだ完全に保守され続けています。
   </p>
   <p>
     GNOME デスクトップ環境は、&oldreleasename; に含まれていたバージョンから &releasename; 
     に含まれているバージョンまでに多くの変更が加えられました。さらに詳しい情報は <url 
     id="http://www.gnome.org/start/2.14/notes/en/" name="GNOME 2.14 
     のリリースノート">にあります。
   </p>
  </sect>
  <sect id="default-editor">
   <heading>
     デフォルトのエディタ
   </heading>
   <p>
     <prgn>vim</prgn> をデフォルトのエディタとして使用していた場合、アップグレードの過程でデフォルトのエディタが 
     <prgn>nano</prgn> に変更される可能性があります。
   </p>
   <p>
     管理者は、すべてのユーザ向けのデフォルトのエディタを変更したい場合、以下のようにして alternatives システムを更新してください。
    <example>
# update-alternatives --config editor
          </example>
   </p>
   <p>
     ユーザは、デフォルトのエディタを変更したい場合、自分のプロファイルに以下のような行を加えて環境変数 <em>EDITOR</em> 
     を設定してください。
    <example>
EDITOR=vi
export EDITOR
alias editor=$EDITOR
          </example>
   </p>
  </sect>
 </chapt>
 <chapt id="moreinfo">
  <heading>
    &debian; に関するさらなる情報
  </heading>
  <sect id="morereading">
   <heading>
     もっと読みたい
   </heading>
   <p>
     このリリースノートやインストールガイドを越えた、&debian; に関するより進んだ文書は、Debian Documentation 
     Project (DDP) から公開されています。DDP は Debian 
     のユーザや開発者向けに、品質の高い文書を作成することを目的としています。Debian リファレンス、Debian メンテナ入門、Debian 
     FAQ などなど、たくさんの文書があります。現在利用可能なリソースの詳細すべては <url id="&url-ddp;" name="DDP 
     のウェブサイト">から得られます。
   </p>
   <p>
     それぞれのパッケージの文書は 
     <file>/usr/share/doc/<var>パッケージ</var></file>にインストールされています。ここには、著作権情報、Debian 
     固有の詳細、開発元の文書すべて、などが置かれています。
   </p>
  </sect>
  <sect id="gethelp">
   <heading>
     助けを求めるには
   </heading>
   <p>
     Debian 
     ユーザ向けのヘルプ・アドバイス・サポートなどは、いろいろな場所から得られます。しかしこれらを頼りにするのは、その問題について徹底的に文書を調査してからにしましょう。このセクションでは新しく 
     Debian ユーザになった人向けに、これらを簡単に紹介します。
   </p>
   <sect1 id="lists">
    <heading>
      メーリングリスト
    </heading>
    <p>
      Debian ユーザが最も興味を引かれるであろうメーリングリストは debian-user (英語) リストおよび 
      debian-user-<var>言語</var> (各国語) リストでしょう。これらのリストの詳細や講読のしかたについては、<url 
      id="&url-debian-list-archives;"> 
      を見てください。利用にあたっては、あなたの疑問に対する答えが以前の投稿ですでに答えられていないかどうか、アーカイブをチェックしてください。また標準的なメーリングリストのエチケットに従うようにしてください。
    </p>
   </sect1>
   <sect1 id="irc">
    <heading>
      インターネットリレーチャット (IRC)
    </heading>
    <p>
      Debian には、Debian ユーザのサポートや援助のために専用の IRC チャンネルが OFTC IRC 
      ネットワークにあります。このチャンネルにアクセスするには、お好みの IRC クライアントを &debian-irc-server; 
      に接続し、#debian に join してください。
    </p>
    <p>
      チャンネルのガイドラインに従い、他のユーザをきちんと尊重してください。ガイドラインは <url 
      id="http://wiki.debian.org/DebianIRC" name="Debian Wiki"> で閲覧できます。
    </p>
    <p>
      OFTC についてさらに詳しく知りたい場合は、<url id="&url-irc-host;" 
      name="ウェブサイト">を訪ねてみてください。
    </p>
   </sect1>
  </sect>
  <sect id="bugs">
   <heading>
     バグを報告する
   </heading>
   <p>
     私たちは Debian GNU/Linux を高品質な OS 
     にするよう努めていますが、だからといって私たちの提供するパッケージにバグが皆無というわけではありません。Debian 
     の「オープンな開発体制」という考え方に合致し、また、ユーザに対するサービスとして、私たちは報告されたバグに関するすべての情報を <url 
     id="&url-bts;" name="bugs.debian.org"> にあるバグ追跡システム (Bug Tracking 
     System: BTS) で提供しています。
   </p>
   <p>
     もしディストリビューションや、その一部であるパッケージされたソフトウェアにバグを見つけたら、将来のリリースで修正できるよう、その問題点の報告をお願いします。バグを報告するには正しい電子メールアドレスが必要です。これをお願いしているのは、バグを追跡できるようにするため、そして追加情報が必要になった場合に開発者が報告者に連絡できるようにするためです。
   </p>
   <p>
     バグ報告は、<package>reportbug</package> 
     プログラムを使って送信することもできますし、電子メールを使って手で送ることもできます。バグ追跡システムに関する詳細やその使い方については、リファレンスカード 
     (<package>doc-debian</package> パッケージをインストールしていれば 
     <file>/usr/share/doc/debian</file> にあります) をお読み頂くか、または<url 
     id="&url-bts;" name="バグ追跡システム">のウェブサイトからオンラインで入手することもできます。
   </p>
  </sect>
  <sect id="contributing">
   <heading>
     Debian に貢献する
   </heading>
   <p>
     Debian への貢献は専門家でなくてもできます。問題を抱えたユーザを、いろいろな<url 
     id="&url-debian-list-archives;" 
     name="サポートメーリングリスト">で助けてあげることも、立派なコミュニティへの貢献です。<url 
     id="&url-debian-list-archives;" 
     name="開発メーリングリスト">に参加して、ディストリビューション開発に関する問題を見つける (そして解決する) 
     ことも、もちろん非常に助けになります。Debian を高品質なディストリビューションに保つため、<url id="&url-bts;" 
     name="バグを報告して">その原因の特定や解決に際して開発者を助けてください。執筆が得意なら、<url id="&url-ddp;" 
     name="文書">作成や既存文書のご自分の言語への<url id="&url-debian-i18n;" 
     name="翻訳">に積極的に参加し、そこで貢献するのもよいでしょう。
   </p>
   <p>
     もっと時間が自由になるなら、Debian に属するフリーソフトウェア集の一部を管理してみるのはどうでしょうか。皆が Debian 
     に入れてほしいと思っているソフトウェアを引き受けて管理するのは、特に価値の高い貢献です。これに関する詳細は、<url 
     id="&url-wnpp;" name="作業が望まれるパッケージ">をご覧になってください。Debian 
     にはいくつかサブプロジェクトが存在しており、特定のアーキテクチャへの移植、<url id="&url-debian-jr;" 
     name="Debian Jr.">、<url id="&url-debian-med;" name="Debian Med"> 
     などが進められています。これらのうち、あなたが興味を持っているグループに参加するのもよいでしょう。
   </p>
   <p>
     いずれにしても、あなたが何らかの形でフリーソフトウェアコミュニティに関わっているのなら、それがユーザとしてであれ、プログラマ、ライター、翻訳者のいずれとしてであれ、すでにあなたはフリーソフトウェア運動を助けてくださっているのです。貢献することは報いのあることですし、楽しいことです。新しい人々に出会う機会も増えます。きっと暖かな、楽しい気持ちになれるはずです。
   </p>
  </sect>
 </chapt>
 <appendix id="old-stuff">
  <heading>
    &oldreleasename; システムの管理
  </heading>
  <p>
    この付録には、&releasename; へアップグレードする前に &oldreleasename; 
    パッケージを確実にインストールしたりアップグレードする方法についての情報が述べられています。特定の状況でのみ必要となるでしょう。
  </p>
  <sect id="old-upgrade">
   <heading>
     &oldreleasename; システムのアップグレード
   </heading>
   <p>
     基本的には、これまで行ってきた &oldreleasename; のあらゆるアップグレードと違いはありません。唯一異なるのは、<ref 
     id="old-sources">で説明するようにパッケージリスト内に &oldreleasename; 
     パッケージがまだ含まれているのを確認する必要があることです。
   </p>
   <p>
     Debian ミラーを使用してシステムをアップグレードする場合、システムは自動的に最新の &oldreleasename; 
     ポイントリリースへとアップグレードされます。
   </p>
  </sect>
  <sect id="old-sources">
   <heading>
     ソースリストのチェック
   </heading>
   <p>
     <file>/etc/apt/sources.list</file> 内で 'stable' を指定している行があるなら、効率よく 
     &releasename; を "使う" 用意ができています。すでに <tt>apt-get update</tt> 
     を実行済みでも、以下の手順に従えば問題なく元に戻すことができます。
   </p>
   <p>
     &releasename; からパッケージのインストールもしてしまっているなら、おそらくこれ以上 &oldreleasename; 
     からパッケージをインストールしても無意味でしょう。この場合、続けるかどうかを自分で決断しなければなりません。パッケージをダウングレードすることはできますが、その方法はここでは扱いません。
   </p>
   <p>
     (root になってから) お気に入りのエディタで <file>/etc/apt/sources.list</file> 
     を開き、<tt>deb http:</tt> や <tt>deb ftp:</tt> で始まるすべて行の中に 
     "<tt>stable</tt>" が指定されているかどうかを調べてください。もしあるなら、<tt>stable</tt> を 
     <tt>&oldreleasename;</tt> に変更してください。
   </p>
   <p>
     <tt>deb file:</tt> で始まっている行があるなら、その行が指定している場所が &oldreleasename; か 
     &releasename; のどちらのアーカイブなのかを独力で調べなければならないでしょう。
   </p>
   <p>
     <strong>重要!</strong>: <tt>deb cdrom:</tt> 
     で始まっている行は、絶対に変更しないでください。変更するとその行は無効になって、もう一度 <prgn>apt-cdrom</prgn> 
     を実行しなければならなくなるでしょう。'cdrom' ソースが "<tt>unstable</tt>" 
     を指定していても心配しないでください。混乱するかもしれませんが、これで正常なのです。
   </p>
   <p>
     変更が済んだら、ファイルを保存してから
    <example>
# apt-get update
          </example>
     と実行して、パッケージリストを更新してください。
   </p>
  </sect>
 </appendix>
</book>
</debiandoc>
