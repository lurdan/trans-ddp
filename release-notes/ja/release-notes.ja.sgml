<!DOCTYPE debiandoc PUBLIC "-//DebianDoc//DTD DebianDoc//EN" [
  <!entity % dynamicdata  SYSTEM "../dynamic.ent"       > %dynamicdata;
  <!entity % shareddata   SYSTEM "../release-notes.ent" > %shareddata;
  <!entity docid "$Id: release-notes.ja.sgml,v 1.6 2005-06-01 17:47:13 fjp Exp $">
]>

<!-- original version: 1.53 -->

<!-- Be careful with automatic reformatting. Please note that the indentation
     in examples is used in the output (plus additional space) as well. -->

<debiandoc>
  <book>
  <titlepag>
    <title>&debian; &release; (`&releasename') リリースノート (&arch-title; 用)</title>
      <author>
        <name>Josip Rodin, Bob Hilliard, Adam Di Carlo, Anne Bezemer, Rob
        Bradford (現在のメンテナ), Frans Pop (現在のメンテナ)</name><email></email>
      </author>
      <author>
        <name></name><email>debian-doc@lists.debian.org</email>
      </author>
      <version>&docid;</version>
    </titlepag>
    <toc detail="sect1">
      <chapt id="about"><heading>リリースノートの最新情報</heading>

<p>[この文書の最新版は、常に <url id="&url-release-notes;">
から取得できます。もし入手した版が一ヵ月以上古いものでしたら、
最新版をダウンロードした方がよいでしょう。]</p>

<p>以前の版のリリースノートには、
一つ前のリリースよりもさらに古いリリースからの
アップグレード情報が含まれていました。しかし、
そのような内容は時としてドキュメンテーションを複雑にしてしまうので、
この版では &debian; 3.0 ('woody')
からのアップグレードのみを扱うことにしました。
'woody' よりも古いリリースからアップグレードする場合は、
以前の版のリリースノートを読んでください。</p>

      </chapt>
      <chapt id="whats-new"><heading>&debian; &release; の最新情報</heading>

<p>サポートされているアーキテクチャの一覧は、
前回のリリースである &debian; 3.0 ('woody')
から変わっていません。
このリリースでサポートされているアーキテクチャは以下の通りです。</p>

        <p>
          <list>
            <item><p>Intel x86 ('i386')</p></item>
            <item><p>Motorola 680x0 ('m68k')</p></item>
            <item><p>Alpha ('alpha')</p></item>
            <item><p>SPARC ('sparc')</p></item>
            <item><p>PowerPC ('powerpc')</p></item>
            <item><p>ARM ('arm')</p></item>
            <item><p>MIPS ('mips' (ビッグエンディアン) と 'mipsel' (リトルエンディアン))</p></item>
            <item><p>Intel Itanium ('ia64')</p></item>
            <item><p>HP PA-RISC ('hppa')</p></item>
            <item><p>S/390 ('s390')</p></item>
          </list>
        </p>

<p>移植状況の詳細や、お使いの移植版に特有の情報については、
<url id="&url-ports;" name="Debian の移植版に関するページ">
で読むことができます。</p>

<![ %secondrelease [ 

<p>これは &arch-title; アーキテクチャ用 &debian;
のまだ 2 回目の公式リリースです。
すでにリリースするには充分安定していると私たちは考えています。
しかし、他のアーキテクチャ版のいくつかほどはまだ広く使われていない
(つまりユーザによるテストも多くない) ことから、
いくつかのバグにでくわす可能性もあります。
何か問題が起きたら、<url id="&url-bts;" name="バグ追跡システム">
を使って報告してください。その際、そのバグが &arch-title;
プラットフォーム上のものであることを必ず書き添えてください。</p>

]]>

<![ %not-m68k [
<p>&arch-title; アーキテクチャ用 &debian; &release;
でのデフォルトのカーネルのバージョンは &kernelversion; です。</p>

<![ %available-2.6 [

<p>&arch-title; アーキテクチャでは、
2.6 系カーネルも利用可能で、カーネルのバージョンは
&kernelversion-2.6; になります。
Debian のカーネル 2.6.8 には、カーネル 2.6.8.1
リリースおよびその他のパッチが含まれています。</p>

]]>
]]> <!-- %m68k -->
<![ %m68k [
           <p>&arch-title; 用の &debian; &release; は、カーネルバージョン 2.2.25
           および 2.4.27 付で配布されます。いくつかのサブアーキテクチャでは
           2.6.8 カーネルも利用可能ですが、実験的と考えるべきです。</p>
]]>

        <sect id="newdistro"><heading>ディストリビューションの最新情報</heading> 

<p>Debian のこの新しいリリースには、一つ前のリリースである &oldreleasename;
に付属していたよりさらに多くのソフトウェアが付属しています。
このディストリビューションには、9000
以上の新しいパッケージが含まれているのです。
ディストリビューション中のほとんどのソフトウェア、
すなわち約 6500 ものソフトウェアパッケージ (これは &oldreleasename;
のパッケージ数の 73% にあたります) が更新されました。
また、かなりの数のパッケージが、
様々な理由でディストリビューションから取り除かれました。
これらのパッケージについての更新はなく、
パッケージ管理用のフロントエンドでは 'obsolete'
というマークがつくでしょう。</p>

<p>この &debian; のリリースには、大きな進歩を遂げた
XFree86 4.3 release が含まれています。
より多くのハードウェアをサポートし、
自動検知サポートが改良され、Xinerama や
3D アクセラレーションといった先進的な技術によりよく対応しています。</p>

<p>&debian; は、この新しいリリースにおいて GNOME 2.8 や KDE 3.3 を含んでおり、
以前より一層デスクトップ指向になりました。また OpenOffice.org 1.1 を、
完全なオフィススイートとして初めて取り入れています。
その他、生産性を向上させるツールとしては、Evolution
グループウェアソフトウェアや GAIM
インスタントメッセージングクライアントなどが、
このリリースに収録されています。</p>

            <p>&releasename; 版の <prgn/aptitude/ は、コンソール上でのパッケージ
            管理に適したプログラムです。<prgn/apt-get/ よりも依存関係の解決に優
            れていることは明らかです。<prgn/aptitude/ は <prgn/apt-get/ のコマン
            ドライン操作の大半に対応しています。まだ <prgn/dselect/ を使っている
            のなら、パッケージ管理用フロントエンドとして <package/aptitude/ を試
            してみるべきでしょう。</p>

<p>公式の &debian; ディストリビューションは、
現在は 13〜15 枚のバイナリ CD と、
ほぼ同数のソース CD のかたちで提供されています。
今では DVD 版のディストリビューションも利用可能となっています。</p>

        <sect1 id="volatile"><heading>新サービス: debian-volatile</heading>

<p>すぐに古くなってしまう情報を含む安定版 (stable)
パッケージをユーザが容易に更新できるようにするため、
<em/debian-volatile/ という新しいサービスができています。
そのような情報としては、
例えばウイルススキャナのシグネチャリストや、
スパムフィルタのパターンセットがあります。
管理者は、"security.debian.org"
のアーカイブを使うのと同じくらい容易に "volatile.debian.net"
のアーカイブを利用できます。
そうすると、最前線にあるパッケージに基づいてシステム全体 (または一部分)
を保守するという面倒や危険を伴わずに、
最新情報を含んだパッケージの利用という恩恵を亨受できるのです。
さらに詳しい情報やミラーのリストについては、
アーカイブの<url id="&url-debian-volatile"
name="ウェブページ">を参照してください。</p>

<p>debian-volatile は、Debian の公式サービスでは<em/ありません/。
各自の判断で利用してください。</p>

        </sect1>

        <sect1 id="non-us"><heading>non-US の廃止</heading> 

<p>&releasename; リリースでは、以前は non-us
アーカイブにあった暗号ツールのパッケージが、
通常のアーカイブに移動されました。
<file>/etc/apt/sources.list</file> に non-us を参照する行がある場合には、
それらの行を削除してください。</p>

        </sect1>

        </sect>

        <sect id="newinst"><heading>インストールシステムの最新情報</heading>

<p>&debian; の古いインストールシステムは、
<prgn>debian-installer</prgn>
と呼ばれる完全に新しいインストールシステムで置き換えられました。
新しいインストールシステムはモジュール単位に設計されており、
拡張性に配慮して開発されています。
このシステムは約 40 もの言語に完全に翻訳されています。
その他の翻訳も進行中で、&releasename;
のポイントリリースで追加されるかもしれません。</p>
           
<p>インストールシステムの新しい機能としては、ハードウェア検出機能の改善、USB
フラッシュデバイスからの起動をサポート、
基本システム設定中のパッケージインストールに
<prgn>aptitude</prgn> を利用、<prgn>XFS</prgn>
ファイルシステムや <prgn>RAID</prgn>、<prgn>LVM</prgn>
(ボリューム管理ツール) のサポートなどが挙げられます。</p>

<p>Debian の新しいインストールシステムの全詳細については、
一枚目の CD に含まれているか、または<url id="&url-install-manual;"
name="リリースページ">から入手できる Debian
インストールガイドを読むようおすすめします。
インストールガイドは 8 つの言語に完全に翻訳されており、
その他の言語についても翻訳作業がなされています。
その他の翻訳は、
完成したときにウェブサイトから入手できるようになるでしょう。</p>

<![ %i386 [ 

<p>&arch-title; アーキテクチャでは、視覚障害者のために、"speakup"
という特別なインストール用フロッピーディスクイメージ一式が用意されています。
これらのイメージは、
点字ディスプレイをサポートした特別なカーネルを使っています。
サポートされているモデルの完全なリストは、brltty
の文書に書かれています。詳細な情報は、<url id="&url-installer;index#speakup"
name="debian-installer のリリースページ">を見てください。</p>

]]>

<!-- FJP: Maybe a short description of available installation methods could be
          added here: floppy, CD (netinst/business-card/full set), netboot,
          hd-media, USB-stick. -->

        </sect>

      </chapt>

      <chapt id="installing"><heading>新たにインストールする</heading>
 
<p><prgn>boot-floppies</prgn> と呼ばれる &debian;
の古いインストールシステムは、
<prgn>debian-installer</prgn>
と呼ばれる、新しくコンポーネント化されたより強力な
インストールシステムに置き換えられました。</p>

<p>このインストーラは、様々なインストール方法を提供しています。
お使いのシステムにインストールするのにどの方法が利用できるかは、
使っているアーキテクチャに依存します。</p>

<p>Debian を新たにインストールしようとしている人は、
インストールガイドを読みましょう。
公式 CD の次の場所にあります。

        <example>
/doc/install/manual/<var>language</var>/index.html
        </example>

インターネットからなら<url id="&url-install-manual;"
name="&releasename; リリース情報">を見てください。
debian-installer の <url id="&url-installer;index#errata"
name="正誤表"> も見ておくとよいでしょう。</p>

<![ %not-m68k [
<![ %d-i-avail-2.6 [
<p>このインストールシステムは、デフォルトとして 2.4 系カーネルを使っています。
&arch-title; では、2.6 系のカーネルを使ったインストールも可能です。
詳細な利用方法は、インストールガイドを参照してください。</p>
]]>
<![ %d-i-default-2.6 [
<p>このインストールシステムは、&arch-title;
のデフォルトとして 2.6 系カーネルを使っています。</p>
]]>
]]> <!-- %not-m68k -->
<![ %m68k [
           <p>サブアーキテクチャにも依りますが、2.2.25 カーネルか 2.4.27 カーネル
           のいずれか、あるいは両方を使ってインストールできます。mac 用としては
           2.2.25 カーネルが推奨され、他のサブアーキテクチャ用には 2.4.27 カーネ
           ルが推奨されます。</p>

           <p>現在のところ、<package/debian-installer/ でディスクのパーティション
           設定やフォーマットを行なうためのコンポーネントである <prgn/partman/ は、
           atari パーティションに対応していません。このことは、当該手順を手作業で
           行なわなければならないことを意味しています。より詳しい情報は、インストー
           ルガイドを参照してください。</p>
]]>

<![ %alpha [
<p>この新しいインストーラでは、SRM コンソールをサポートした alpha
システムにしかインストールできません。
インストールを始める前に、システムを SRM に切替えるのを忘れないでください。
マシンが AlphaBIOS/ARC コンソールしかサポートしていない場合も、
(最小限の) &oldreleasename; をインストールしてからアップグレードすることで、
&releasename; をインストールできます。
コンソールの違いに関する詳しい情報は、<url id="http://www.debian.org/ports/alpha"
name="Debian alpha 移植版のウェブページ">のリファレンスを読んでください。
</p>
]]>

<![ %sparc [ 
      <sect id="sparc_kbd"><heading>&arch-title; のキーボードに関する問題</heading>

<p>インストール時のキーボード選択に関して、いくつかの問題があります。</p>

<p>最初の問題は、例えば SunBlade
システムにおいて使われている Sun の USB キーボードに関してです。
デフォルトの 2.4 系カーネルを使ってインストールすると、
インストーラは、これらを標準の Sun キーボードと「誤認識」します。
回避方法はインストールガイドに記されています (上のリンク先の、
『Debian Installer の使用法』の章を参照してください)。</p>

<p>第二の問題はカーネル関連です。
2.6 系のカーネルは異なる入力層を利用し、
すべてのキーボードを「通常の」 PC キーボードのように見せます。
つまり、2.4 系カーネルでインストーラを起動し、
Sun キーボードや USB キーボード用にそのカーネルを設定してから、
後になって (専門的な方法で) 2.6 系のカーネルを新システム用に選択すると、
きっと再起動後にキーボードが動作しなくなって終わってしまうでしょう。</p>

      </sect>

      <sect id="sparc_fb"><heading>&arch-title; のフレームバッファに関する問題</heading>

<p>一部のシステムで表示に問題があるため、&arch-title;
においては、フレームバッファのサポートはデフォルトで無効となっています。
そのため、ATI のグラフィックカードをもったシステムなど、
フレームバッファをきちんとサポートしているシステムにおいては
表示が醜くなる可能性があります。
インストーラの表示に問題が見られる場合は、
"debian-installer/framebuffer=true"
をパラメータとして与えて、インストーラを起動してみてください。</p>

      </sect>
]]>

       <sect id="popcon"><heading>人気コンテスト</heading>

         <p>技術的な理由により、&releasename; の新規インストールでは <package/popcon/ 
         パッケージはもはやデフォルトでインストールされません。将来のリリースにおいては
         修正されるでしょう。</p>

         <p><package/popcon/ は、ディストリビューション内のどのパッケージが実際
         に使われているかについての有益な情報を、Debian プロジェクトに提供してく
         れます。この情報は、主にインストール CD-ROM に収録されるパッケージの優
         先順位を決めるために使われますが、Debian 開発者がもはやメンテナのいない
         パッケージを引き受けるかどうかを決める際にもよく参照されます。</p>

         <p><package/popcon/ からの情報は、匿名で処理されます。同パッケージを
         インストールして公式調査に参加して頂けると感謝します。というのもそれ
         により、Debian の改良を手伝って頂けることになるからです。</p>

      </sect>
      </chapt>


      <chapt id="upgrading"><heading>以前のリリースからアップグレードする</heading>

<!-- For doc-writers' convenience:
Debian Supported
release: architectures:

1.3.1 or less i386
2.0           i386,m68k
2.1	      i386,m68k,alpha,sparc
2.2	      i386,m68k,alpha,sparc,powerpc,arm
3.0	        + hppa s390 mips mipsel ia64
-->

        <sect id="backup"><heading>アップグレードの準備</heading>

<p>システムをアップグレードする前に、完全なバックアップを取っておくよう
強くおすすめします。少なくとも、
失いたくないデータや設定情報だけでもバックアップしておきましょう。
アップグレードのツールや処理は極めて信頼性の高いものですが、
アップグレードの最中にハードウェア障害が起こると、
システムに大きなダメージを与えることがありえます。</p>

           <p>バックアップしたくなるであろう主な対象としては、<file>/etc</file> や
           <file>/var/lib/dpkg</file> の中身、<tt>dpkg --get-selections "*"</tt>
           (引用符を忘れてはいけません) の出力などでしょう。</p>

<p>アップグレードの過程では、<file>/home</file>
ディレクトリ以下は一切変更されません。とは言え、
(Mozilla やいくつかの KDE アプリケーションなどのように)
ユーザが初めて新しいバージョンのアプリケーションを起動するときに、
既存のユーザ設定を新たなデフォルト値で上書きしてしまうものがあるのも事実です。
万一に備えて、ユーザのホームディレクトリにある隠しファイルと隠しディレクトリ
(いわゆる「ドットファイル」) をバックアップしておくのがよいでしょう。
古い状態に戻したり、再度設定する場合に役立つはずです。
ユーザにもこのことについて知らせておいてください。</p>

<p>アップグレードの前には、その予定を全てのユーザに知らせると良いでしょう。
しかしシステムに SSH などでアクセスしてきているユーザは、
アップグレードの最中にもそうとは気付かず、
作業を続行してしまうかもしれません。
万一の用心をしたければ、アップグレードの前に
ユーザのパーティション (<file>/home</file>) をバックアップして、
アンマウントしてしまいましょう。
同時にカーネルもアップグレードする場合を除いて、
通常は再起動は必要ないでしょう。</p>

<p>ディストリビューションのアップグレードは、
ローカルのテキストモードの仮想コンソール
(あるいは直接接続されたシリアル端末) から行うか、
リモートなら <prgn/ssh/ 接続経由で行いましょう。</p>

<p><strong/重要!/ <prgn/telnet/、<prgn/rlogin/、<prgn/rsh/
を用いてアップグレードをしては <em/いけません/。
アップグレードマシンの <prgn/xdm/、<prgn/gdm/、<prgn/kdm/ などが管理している
X セッションからのアップグレードも行うべきではありません。
これらのサービスはアップグレードの最中に切断されてしまう可能性が高く、
するとアップグレード途中のシステムへの
<em/接続が不可能になってしまう/
からです。</p>

      <p>あらゆるパッケージのインストール処理はスーパーユーザ特権で実行
      されなければならないため、必要なアクセス権を得るために root として
      ログインするか <prgn/su/ や <prgn/sudo/ を使ってください。</p>

        </sect>

        <sect id="system-status">
         <heading>システムの状態をチェックする</heading>

         <p>この章で述べられているアップグレード手順は、"純粋な" &oldreleasename;
         システムからのアップグレード用です。システムが &oldreleasename; の最新
         リリースにアップデート済であるものと想定しています。そうではなかったり、
         アップグレード済かどうか不明なら、<ref id="old-upgrade"> 内の指示に従っ
         てください。</p>

<![ %has-woody-aptitude [
         <p>また、<prgn/aptitude/ の &oldreleasename; 版がインストール済である
         とも想定しています。次ののように実行してインストール済かをどうかを調
         べることができます:

        <example>
$ dpkg -l aptitude
        </example>

         出力行が "i" で始まって<em/いなければ/、<ref id="old-aptitude"> の指示
         に従ってアップグレードを始める前に、インストールしておかなければなりま
         せん。</p>
]]>

<![ %mips [
        <sect1><heading>SGI IP22: arcboot の設定</heading>

<p><em>SGI IP22</em> をお使いのユーザは、まず <package>arcboot</package>
を使って起動できるように準備し、カーネルが直接起動しないようにしてください。
<package>arcboot</package> は &oldreleasename; でも使えるので、
通常の手順でインストールできます。</p>

<p><package>arcboot</package> をインストールする前に、<ref id="old-sources">
で説明したように &oldreleasename; を参照している行がまだ <file>sources.list</file>
に残っていることを確かめてください。</p>

        </sect1>
]]>


    <sect1><heading>APT の pin 機能を無効にする</heading>

      <p>特定のパッケージを安定版以外 (テスト版など) のディストリビューションから
      インストールするように APT を設定しているなら、当該パッケージが新しい安定
      版リリース内のバージョンにアップグレードできるように、
      (<file>/etc/apt/preferences</file> 内に保存されている) APT の pin 設定を
      変更する必要があるかもしれません。APT の pin 機能に関するより詳しい情報
      は、<manref name="apt_preferences" section="5"> にあります。</p>

    </sect1>

         <sect1><heading>パッケージの状態をチェックする</heading>

           <p>アップグレードに使う手段に関係なく、まず全パッケージの状態を調べ、
           全パッケージがアップグレード可能な状態にあることを確認するよう推奨し
           ます。次のコマンドは、インストールが中断していたり設定に失敗したパッ
           ケージや、なんらかのエラー状態にあるパッケージを表示します:

          <example>
# dpkg --audit
          </example></p>

           <p><prgn/dselect/ や <prgn/aptitude/、あるいは次のようなコマンドを
           使ってシステムの全パッケージの状態を検査することもできます:

          <example>
# dpkg -l | pager 
          </example>

           または

          <example>
# dpkg --get-selections &gt; ~/curr-pkgs.txt
          </example></p>

           <p>アップグレード前に、あらゆる hold 状態を解除しておいた方がよいで
           しょう。アップグレードに不可欠なパッケージが hold 状態にあるなら、
           アップグレードに失敗するでしょう。次のコマンドで hold 状態にある
           パッケージを検出できます:

          <example>
<!-- FJP: dpkg \-\-audit does not show held packages, at least not for Woody.
# dpkg \-\-audit
-->
# dpkg --get-selections | grep hold
          </example></p>

           <p>パッケージをローカルに変更したり再コンパイルしており、しかも名前を
           変えていなかったりバージョンに単位を付加していないなら、アップグレー
           ドしないよう hold 状態にしておかなければなりません。

<![ %has-woody-aptitude [
           パッケージの 'hold' 状態は、<prgn/aptitude/: を使って次のように実行
           することで変更できます:

          <example>
# aptitude hold | unhold &lt;package name&gt;
          </example>
]]>
<![ %no-woody-aptitude [
           パッケージの 'hold' 状態を変更するには、<prgn/dselect/ を使う (新規
           hold や hold の解除には、Select メニュー内でそれぞれ 'H' や 'G' キーを
           使います) か、あるいは次のように実行して "hold" を "install" (または逆)
           に変更するためのファイルを作成し、それを編集してください:

          <example>
# dpkg --get-selections &gt; ~/curr-sels.txt
          </example>

           それから、次のように実行してください:

          <example>
# dpkg --set-selections &lt; ~/curr-sels.txt
          </example>
]]>
          </p>

           <p>修正が必要な事があるなら、<ref id="old-sources"> で説明されている
           ように <file/sources.list/ が &oldreleasename; を指定したままにして
           おくべきです。</p>

        </sect1>

         <sect1 id="backports"><heading>非公式なソースとバックポート</heading>

           <p>自分のシステムに非 Debian パッケージがあるなら、依存関係の衝突の
           ためアップグレード中に削除されるかもしれないことに注意すべきです。
           当該パッケージが <file>/etc/apt/sources.list</file> に特別なパッケージ
           アーカイブを追加することでインストールされたのなら、そのアーカイブが
           &releasename; 用にコンパイルされたパッケージも提供しているかをチェックし、
           Debian パッケージ用のソース行と一緒にそのソース行も適切に修正すべきです。</p>

           <p>自分の &oldreleasename; システムに、Debian に<em/存在する/パッケージの
           非公式にバックポートされた "新" バージョンをインストールしているユーザも
           いるでしょう。そのようなパッケージはファイルの衝突を引き起こすことにより、
           アップグレード中に問題を引き起こす場合がほとんどでしょう
           <footnote>Debian のパッケージ管理システムは、対象パッケージを置き換えるよ
           うに指定されていない限り、通常はあるパッケージが別のパッケージが所有して
           いるファイルを削除したり置き換えることを許可しません</footnote>。
           ファイル衝突が発生したときの対処方法については、<ref id="trouble">
           にいくつかの情報があります。

        </sect1>
        </sect>

<![ %glibcneedsnewkernel [
<![ %not-mips-mipsel [

        <sect id="new-kernel">
         <heading>カーネル対応のチェック</heading>

<![ %sparc [
            <p>64 ビット SPARC CPU (sun4u) を搭載している全マシンは、カーネル
            対応で特別な設定をしなくてもアップグレードできるはずです。</p>

            <p>sun4c CPU は、&releasename; では<em>もはや対応していません</em>。
            sun4d CPU への対応は、きわめて数が少ないためやや不明確な状態です。
            MMU 付の sun4d CPU を動作させることはできます。</p>

            <p>sun4m CPU にはまだ対応していますが、システムのアップグレード前に
            まず新しいバージョンのカーネルをインストールする必要があります。これ
            は新しいバージョンの glibc が、いくつかのマシンでは利用できないアセン
            ブラ命令を使っているためです。そのため、欠けている命令をエミュレート
            するカーネルにまずアップグレードする必要があります。</p>

            <p>技術的には、<em>ごくわずかの</em> sun4m チップだけが影響を受け
            ますが、どのシステムが影響を受けるのかを glibc が確実に検出できな
            いため、あらゆる 32 ビット SPARC システムでは修正済カーネルがイン
            ストールされていなければアップグレードが拒否されるでしょう。</p>

            <p>血生臭い詳細に興味を持った方のために述べれば、Cypress/ROSS で
            製造されたいくつかの sun4m チップは、<tt>umul</tt> 命令を実装して
            いません (RT601/CY7C601 や、その他わずかに型名の異なるチップ)。こ
            れらは初期の SPARCserver 6xxMP モデルで使用されていました。以降の
            モデルは、TI で製造されたチップを使用していました。現在、これらも
            影響を受けるのかどうかについては不明です。</p>
<!-- Add link to http://www.ultralinux.org/faq.html#q_2_1 ? -->
]]>

<![ %hppa [
           <p>64 ビット HPPA マシンでは、システムのアップグレード前にまず新しい
           カーネルにアップグレードする必要があるでしょう。これは新しいバージョン
           の glibc が、いくつかのマシンでは利用できないアセンブラ命令を使ってい
           るためです。そのため、欠けている命令をエミュレートするカーネルにまずアッ
           プグレードする必要があります。</p>
]]>

<![ %i386 [
           <p>正真正銘の "80386" は &releasename; では<em/もはや対応していません/。
           これは "80486" CPU やそれ以上の物と互換性のある CPU には影響しま
           せん。</p>
]]>

<![ %upgradekernel [
           <sect1 id="kernel-upgrade"><heading>カーネルのアップグレード</heading>

           <p>ここまでのセクションでシステムのアップグレード<em/前/ にカーネ
           ルをアップグレードするよう指示されているなら、(その場合に限り) 今
           ここで実行すべきです。</p>

<p>
&releasename; から最新カーネルをインストールするのに必要な、
全ツールのバックポートが利用できます。
新しいカーネルのインストール方法に関する詳細な手順は、
<ref id="kernel-upgrade-howto"> にあります。</p>

        </sect1>
]]>
        </sect>
]]> <!-- not-mips-mipsel -->
]]> <!-- glibcneedsnewkernel -->

        <sect id="upgrade-process"><heading>APT の取得先 (ソース) の準備</heading>

<p>アップグレードを始める前に、<package/apt/ の設定ファイル
<file>/etc/apt/sources.list</file> を編集して、
パッケージの取得先を決める必要があります。</p>

<p><package/apt/ は、"<tt/deb/" 行にある全てのパッケージを見比べ、
最も大きなバージョン番号のパッケージをインストールします。
同じパッケージが取得可能な場合は、先に現れた行を優先します
(つまり、複数のミラーを指定している場合は、
最初にローカルのハードディスクを、次に CD-ROM を、
最後に HTTP/FTP ミラーを指定するといいでしょう)。</p>

           <p>あるリリースは、そのコードネーム (&oldreleasename; や &releasename;)
           や状態名 (旧安定版、安定版、テスト版、不安定版) の両方でよく指定されます。
           コードネームによって指定することは、決して新規リリースに驚かないという
           利点があるため、ここではコードネームを使っています。もちろんこれは、自分
           でリリースアナウンスを注視する必要があることを意味してはいません。代わり
           に状態名を使っているなら、リリースされた直後に利用可能なパッケージの
           更新が急に増えたことに気づくでしょう。</p>

         <sect1 id="network"><heading>APT の Internet ソースの追加</heading>

<p>デフォルトの設定では、メインの Debian インターネットサーバを
使ってインストールするようになっています。ですがここでは、
<file>/etc/apt/sources.list</file> を編集して、
他のミラー (できればネットワーク的に最も近いミラー)
を使うようにする方が良いでしょう。</p>

<!-- FJP: Why is 'default configuration' relevant here? We are talking about
          upgrading existing installations; we really have no idea what
          apt-sources users will have set up here (maybe just a Woody CD-set).
          Note: D-I sets the default configuration to a mirror based on
          the selected country and not the 'main' servers. -->

<p>Debian の HTTP / FTP ミラーのアドレスは、<url id="&url-debian-mirrors;">
を参照してください。
一般には HTTP ミラーの方が FTP ミラーよりも高速です。</p>

<p>例えば、一番近くにある Debian ミラーが
<tt>&url-debian-mirror-eg;/</tt> だったとしましょう。
このミラーをウェブブラウザや FTP プログラムで見てみると、
main などのディレクトリが以下のように構成されていることがわかります。

           <example>
&url-debian-mirror-eg;/dists/&releasename;/main/binary-&architecture;/...
&url-debian-mirror-eg;/dists/&releasename;/contrib/binary-&architecture;/...
           </example></p>

<p>このミラーを <prgn/apt/ で使うには、次の行を
<file/sources.list/ ファイルに追加します。

           <example>
deb &url-debian-mirror-eg; &releasename; main contrib
           </example></p>

<p>`<tt>dists</tt>' は書かなくても暗黙のうちに追加されます。
そしてリリース名の後の引き数がそれぞれ用いられ、
複数のディレクトリの各々のパス名に展開されます。</p>

<p>これらの新たなソースを追加したら、それまでの
<file/sources.list/ 中の "<tt/deb/" 行の先頭に
シャープ記号 (<tt/#/) を置き、それらを無効にしてください。</p>

<p>インストールに必要なパッケージのうち、
ネットワークから取得されたものは、
<file>/var/cache/apt/archives</file> ディレクトリ
(およびダウンロード中のものは <file>partial/</file> サブディレクトリ)
に置かれます。したがって、インストールを行う前には、
充分な領域があるかどうか確認しなければなりません。
割に大きめのインストールを行う場合には、
ダウンロードデータとして少なくとも 300MB 程度を考慮しておきましょう。</p>

         </sect1>

         <sect1 id="localmirror"><heading>APT のローカルミラーソースの追加</heading>

<p>HTTP や FTP のパッケージミラーを使うのではなく、
ローカルディスク (多分 NFS マウントされたもの) にあるミラーを使うよう、
<file>/etc/apt/sources.list</file>
を変更したいこともあるかもしれません。</p>

<p>例えばパッケージのミラーが
<file>/var/ftp/debian/</file> にあり、
main などのディレクトリが次のように配置されているとします。

           <example>
/var/ftp/debian/dists/&releasename;/main/binary-&architecture;/...
/var/ftp/debian/dists/&releasename;/contrib/binary-&architecture;/...
           </example></p>

<p>これを <prgn/apt/ から使うには、次の行を
<file/sources.list/ ファイルに追加します。

           <example>
deb file:/var/ftp/debian &releasename; main contrib
           </example></p>

<p>`<tt/dists/' は書かなくても暗黙のうちに追加されます。
そしてリリース名の後の引き数がそれぞれ用いられ、
複数のディレクトリの各々のパス名に展開されます。</p>

<p>これらの新たなソースを追加したら、それまでの
<file/sources.list/ 中の "<tt/deb/" 行の先頭に
シャープ記号 (<tt/#/) を置き、それらを無効にしてください。</p>

        <sect1 id="cdroms"><heading>APT の CD-ROM/DVD ソースの追加</heading>

<p>CD <em/だけ/でインストールをしたい場合は、
<file>/etc/apt/sources.list</file> 中の "<tt/deb/" 行の先頭に
シャープ記号 (<tt/#/) を置き、それらを無効にしてください。</p>

<!-- Default cdrom mount point is /cdrom, not /media/cdrom and fixed!, see #282344
     (but the -d option of apt-cdrom allows scanning from somewhere else) -->
<p>CD-ROM ドライブをマウントポイント <file>/cdrom</file>
にマウントすることを許可している行が
<file>/etc/fstab</file> にあるかどうかを確認してください
(<prgn/apt-cdrom/ を使う場合は、マウントポイントを
<file>/cdrom</file> 以外にはできません)。
例えば <file>/dev/hdc</file> が CD-ROM ドライブなら、
<file>/etc/fstab</file> には次のような行が必要です。

          <example>
/dev/hdc /cdrom auto defaults,noauto,ro 0 0
          </example></p>

<p>第 4 フィールドの <tt>defaults,noauto,ro</tt> の間には
スペースがあってはいけません。</p>

<p>これが正しく機能しているか調べるには、
CD を挿入して以下を実行してみてください。

          <example>

# mount /cdrom    # マウントポイントに CD をマウントします
# ls -alF /cdrom  # CD のルートディレクトリを表示します
# umount /cdrom   # CD をアンマウントします
          </example></p>

          <p>問題がなければ

          <example>
# apt-cdrom add
          </example>

を、Debian Binary CD-ROM それぞれに対して実行してください。
各 CD に関するデータが APT のデータベースに追加されます。</p>

        </sect1>
        </sect>

	<sect id="upgradingpackages"><heading>パッケージのアップグレード</heading>

<p>&debian; リリース間のアップグレード方法のおすすめは、
パッケージ管理ツール <prgn>aptitude</prgn> を用いる方法です。
このツールはパッケージに関する判断を
<prgn>apt-get</prgn> よりも安全に行います。</p>

<p>まず、必要なパーティションが read-write モードで
マウントされていることを忘れずに確認しましょう
 (特にルートと <file>/usr</file> の各パーティション)。
以下のようなコマンドラインが使えます。

          <example>
# mount -o remount,rw /<var>mountpoint</var>
          </example></p>

      <p>次に、(<file>/etc/apt/sources.list</file> 内の) APT ソース記述が
      "<tt/&releasename;/" か "<tt>stable</tt>" のいずれかを指定している
      ことを念入りにチェックすべきです。
      注意: CD-ROM のソース行は "<tt/unstable/"; を指定していることがよく
      あります。これは混乱の元ですが、変更しては<em/いけません/。</p>

<p>ここで強くお勧めしたいのですが、
<prgn>/usr/bin/script</prgn> プログラムを使って、
このアップグレード作業の記録を取るようにしましょう。
こうすれば何らかの問題が生じたときに、
何が起こったかを記録しておくことができ、
バグ報告の必要が生じた場合に、その正確な情報を提供できます。
記録を開始するには次のように入力します。

          <example>
# script -a ~/upgrade-to-sarge.typescript
          </example>

typescript ファイルは <file>/tmp</file> や <file>/var/tmp</file>
のような一時ディレクトリには置かないでください
(これらのディレクトリのファイルは
アップグレードや再起動の際に削除されることがありますから)。</p>

           <p>typescript はまた、スクロールしてスクリーンから消えた情報を見ること
           ができるようにもしてくれるでしょう。(<tt/alt-F2/ を使って) 2 番
           の仮想コンソールに切り換えて、ログインしてから
           <tt>less ~root/upgrade-to-&releasename;.typescript</tt> と実行すれば
           当該ファイルを見ることができます。</p>

           <p>アップグレード完了後に <prgn/typescript/ を停止するには、プロンプトから
           <tt/exit/ と入力してください。

         <sect1 id="updating_lists"><heading>パッケージリストの更新</heading>

           <p>まず、新規リリース用として入手可能なパッケージの一覧を取得する必要が
           あります。次のように実行してください<footnote>&oldreleasename; 版の
           <prgn/aptitude/ では新しいソースを <file/sources.list/ に追加すると失敗
           するかもしれないので、ここでは <prgn/apt-get/ を使います</footnote>:</p>
	  
	  <p><example>
# aptitude update
	  </example></p>

        </sect1>

<![ %mips-mipsel [
        <sect1 id="upgrading_kernel_mipsen"><heading>カーネルのアップグレード</heading>

<p>&arch-title; マシンでは、システムのアップグレード前に、
まず新しいカーネルにアップグレードする必要があるでしょう。
これは新しいバージョンの libc に、
カーネルとのプロセス間通信において一貫性のない定義がされているためです。
そのため、正しい定義を提供した最新カーネルにまずアップデートする必要があります。</p>

<p>新しいカーネルのインストール方法に関する詳細な手順は、
<ref id="kernel-upgrade-howto"> にあります。</p>

        </sect1>
]]>

<!-- FJP: This next section can probably be dropped for etch -->
<![ %has-woody-aptitude [
        <sect1 id="upgrading_aptitude"><heading>aptitude のアップグレード</heading>
]]>
<![ %no-woody-aptitude [
        <sect1 id="upgrading_aptitude"><heading>aptitude のインストール</heading>
]]>

           <p>アップグレード中の複雑な依存関係の解決には、<prgn/apt-get/ や
           &oldreleasename; の <prgn/aptitude/ よりも、&releasename; 版の
           <prgn/aptitude/ の方が優れていることがアップグレードのテスト中に
           判明しました。

<![ %has-woody-aptitude [
           したがって、次のように実行してまずアップグレードすべきです:

          <example>
# aptitude install aptitude
          </example></p>
]]>
<![ %no-woody-aptitude [
           したがって、次のように実行してまずインストールすべきです:

          <example>
# apt-get install aptitude
          </example></p>
]]>

           <p>発生した変更点の一覧が表示され、承認を求めてくるでしょう。
           承認する前に提示された変更点、特にアップグレードによって削除
           されるであろうパッケージに注意を払ってください。</p>

<p>非常に多くのパッケージが削除対象としてリストアップされてしまう場合があります。
この場合、<package/aptitude/ とともに事前にアップグレードするパッケージを選択しておくと、
リストアップされるパッケージを減らせるかもしれません。
わかりやすい例を挙げてみましょう - すでに KDE がインストールされたシステムの
アップグレードテスト中に、大量の KDE パッケージや perl が削除対象になることがありました。
ここでは <tt>install aptitude</tt> ではなく <tt>install aptitude perl</tt>
とすると、うまくいくことがわかりました。</p>

        </sect1>

         <sect1 id="upgrading_doc-base"><heading>doc-base のアップグレード</heading>

           <p><em><package/doc-base/ をインストール</em> しているなら、残りのシ
           ステムに先立ってアップグレードしなければなりません。この理由は、同時
           に <package/perl/ がアップグレードされると失敗する可能性があるからです。同パッ
           ケージがインストールされているかどうかを知るには、次のように実行して
           ください:</p>

	  <p><example>
# dpkg -l doc-base
	  </example></p>

<p>を実行すれば確認できます。</p>

<p>"i" で始まる行が出力されればインストールされているので、
以降の作業を行う前にアップグレードしなければなりません。</p>

	  <p><example>
# aptitude install doc-base
	  </example></p>

        </sect1>

         <sect1 id="upgrading_other"><heading>残りのシステムのアップグレード</heading>

<p>さて、アップグレードの主要部分を続行する準備が整いました。
以下のコマンドを実行してください:</p>

	  <p><example>
# aptitude -f --with-recommends dist-upgrade
	  </example></p>

<p>これによってシステムの完全なアップグレードを行います。
すなわち全てのパッケージの最新版を入手し、
パッケージのリリースが変わったことによって生じる
依存関係の変更すべてを解決します。
必要に応じて、新しいパッケージ (通常は更新版のライブラリや、
名前の変わったパッケージ) をインストールしたり、
衝突している古いパッケージを削除したりもします。</p>

<p>CD-ROM のセットからアップグレードする場合には、
アップグレード作業の最中に CD を交換するよう、
数回指定されることになります。
同じ CD を複数回入れなければならないかもしれません。
これはパッケージ間の相互依存関係のせいで、
これらのパッケージは別々の CD に入っていることもあるからです。</p>

<p>現在インストールされているパッケージの更新版が、
他のパッケージのインストール状態を変更しなければならないような場合には、
そのパッケージは現在のバージョンのままになります ("held back" と表示されます)。
この状態は、<prgn>aptitude</prgn>
でこれらのパッケージをインストール対象として選択するか、<tt>aptitude -f install
<var>package</var></tt> を試すかのどちらかで解決できます。</p>

<p><tt/--fix-broken/ (または単に <tt/-f/) オプションを与えると、
<package/apt/ はシステムに存在する壊れた依存関係を修復しようとします。
<package/apt/ は、壊れたパッケージ依存関係がシステムに存在するのを
許しません。</p>

        </sect1>

        <sect1 id="trouble"><heading>アップグレード中の注意点</heading>

<p><prgn/aptitude/、<prgn/apt-get/、<prgn/dpkg/
の操作中に次のようなエラーが出た場合、
<example>
E: Dynamic MMap ran out of room
</example>
デフォルトのキャッシュ容量では不十分だということです。これを解決するには、
<file>/etc/apt/sources.list</file> から不要な行を削除もしくはコメントアウトするか、
キャッシュサイズを増やします。キャッシュサイズを増やすには、
<file>/etc/apt/apt.conf</file> に <tt/APT::Cache-Limit/ を設定します。
以下のコマンドを実行すれば、アップグレードするには十分な値が設定されます:
<example>
# echo 'APT::Cache-Limit "12500000";' >> /etc/apt/apt.conf
</example>
ここでは、<file>/etc/apt/sources.list</file>
ファイル内にまだこの値を設定していない場合を想定しています。</p>

<p>場合によっては衝突や依存関係のループのために、
APT の APT::Force-LoopBreak オプションを有効にして、
必須パッケージを一時的に削除しなければならないかもしれません。
その場合 <prgn/aptitude/ はこのことを警告してアップグレードを中断します。
<prgn/aptitude/ のコマンドラインに
<tt>-o APT::Force-LoopBreak=1</tt> を指定すれば、
この状態を回避できます。</p>
<!-- JFS: Shouldn't this mention also Apt's configuration file? -->

<p>システムの依存関係の構造が非常に混乱していて、
手動での介入が必要となることもあります。
通常これは <prgn/aptitude/ を用いるか、あるいは

          <example>
# dpkg --remove <var>packagename</var>
          </example>

として、目ざわりなパッケージを消す作業になります。
または次の作業でも良いかもしれません。

          <example>
# aptitude --fix-broken install
# dpkg --configure --pending
          </example></p>

<p>極端な場合には、コマンドラインから

          <example>
# dpkg --install /path/to/packagename.deb
          </example>

のように入力して、再インストールしなければならないかもしれません。</p>

<p>「純粋な」&oldreleasename; システムからのアップグレードでは、
ファイルの競合は起こらないはずですが、
非公式なバックポートパッケージをインストールしているなら起こるかもしれません。
ファイルの競合が起こると、次のようなエラーになります:

          <example>
Unpacking replacement <var>&lt;package-foo&gt;</var> ...
dpkg: error processing <var>&lt;package-name-for-foo&gt;</var> (--unpack):
 trying to overwrite `<var>&lt;some-file-name&gt;</var>',
 which is also in package `<var>&lt;package-bar&gt;</var>
          </example></p>

<p>ファイルの競合を解消するには、
エラーメッセージの<em/最後の/行に表示されたパッケージを強制的に削除します:

          <example>
# dpkg -r --force-depends <var>packagename</var>
          </example></p>

<p>問題が修正できたら、先に示したように
<tt/aptitude/ コマンドを繰り返し入力すれば、
アップグレードを再開できます。</p>

<p>アップグレードの最中に、
いくつかのパッケージの設定・再設定に関する質問が表示されます。
<file>/etc/init.d</file> と <file>/etc/terminfo</file>
ディレクトリに置かれるファイルと
<file>/etc/manpath.config</file> に関しては、
パッケージメンテナのバージョンに置き換えるようにしてください。
システムの整合性を保つためには `yes' と答えることが必要になります。
古いバージョンも <tt/.dpkg-old/ という拡張子で
保存されていますので、戻すのはいつでもできます。</p>

<p>どうすればよいか分からなくなったら、
そのパッケージやファイルの名前を書き留めておいて、
その問題解決は後回しにしましょう。
typescript ファイルを検索すれば、
アップグレードの最中に画面に表示された情報を見直すこともできます。</p>

        </sect1>
        </sect>

        <sect id="nownownow"><heading>リブート前にすべきこと</heading>

<p><tt>aptitude dist-upgrade</tt> が終了したら、
「公式」にはアップグレードは終了したことになります。
しかし次にリブートする<em/前に/、
面倒を見てやらなければならないことがいくつかあります。</p>

<p>X Window System 関連のパッケージの
アップグレードに関する詳しい情報は、
<file>/usr/share/doc/xfree86-common/README.Debian-upgrade.gz</file>
を読んでください。これは以前の Debian リリース全てのユーザに
当てはまります。要するに、読め、ということです。</p>

        <sect1 id="newkernel"><heading>カーネルのアップグレード</heading>

<p>Linux カーネルは、以上の手続きによっては更新<em/されません/。
そのようにしたい場合は、<package/kernel-image-*/ パッケージの
どれかひとつをインストールするか、
カスタマイズしたカーネルをソースからコンパイルするかします。</p>
<!-- JFS: This is not strictly true, if the user was using a non-versioned
  kernel (kernel-image-2.4-686) he _will_ upgrade the kernel if using
  aptitude (post-sarge) -->

<![ %available-2.6 [

<p>&debian; には、&kernelversion; が含まれています。
これは 2.4 系の、やや古くて安定した Linux カーネルシリーズです。
2.6 系のカーネルはハードウェアのサポートも性能も改善されているので、
こちらを使いたい人もいるかもしれません。</p>

<p>しかし、&oldreleasename; から &releasename; へのアップグレード中に、
2.6 系カーネルにアップグレードするのは<strong/おすすめしません/。
2.6 系へのアップグレードに関するいくつかの問題が、<ref id="upgrade-to-2.6">
に記載されています。</p>

]]>

<p>カーネルをアップグレードするには、
まずはじめにお使いのサブアーキテクチャに最適なカーネルを選択する必要があります。
インストールできるカーネルの一覧は、以下のコマンドで得られます。

         <example>
# apt-cache search ^kernel-image
         </example></p>

<p>インストールするカーネルイメージが決まったら、<tt/aptitude install/
でインストールします。新しいカーネルがインストールされたら、
それを有効にするためにリブートしてください。</p>

<p>&oldreleasename; (と、それ以前のリリース) のインストールシステムでは、
お使いのシステムにカーネルがパッケージとしてはインストール<em/されない/ので、
注意してください。これは &releasename; では変更され、
カーネルの変更を追いかけるために仮想パッケージをインストールできるようになりました。
これらのパッケージは kernel-image-<tt/VERSION/-<tt/ARCH/ という名前になっていて、
<tt/VERSION/ の部分は対応するカーネルのバージョン番号 (2.4 や 2.6) に、
<tt/ARCH/ の部分はサポートされるアーキテクチャのいずれかに対応しています。
カーネルに対するセキュリティサポートもパッケージ管理に統合したいなら、
アップグレードした後で、お使いのハードウェアに最適なカーネルパッケージをインストールしてください。</p>

<p>もうちょっと冒険したい人には、
自分のカスタムカーネルをコンパイルする方法も &debian; は提供しています。
<package>kernel-package</package> をインストールして、
<file>/usr/share/doc/kernel-package</file> の文書を読んでみてください。</p>

         </sect1>
         </sect>

         <sect id="obsolete"><heading>時代遅れ (Obsolete) なパッケージ</heading>

<!-- JFS: Providing a full listing might be useful, especially if we can
point to the Bug that was opened when the bug was removed. This list should
be moved to an appendix, instead of adding it inline as we did in the
potato to woody RN -->

         <p>数千個の新規パッケージが導入された一方で、&releasename; では
         &oldreleasename; にはあった 2000 個以上の古いパッケージが破棄され
         たり削除されてもいます。これら時代遅れのパッケージをアップグレード
         する手段は提供されていません。時代遅れのパッケージを使い続けても
         かまいませんが、Debian プロジェクトは通常 &releasename; がリリース
         されてから 1 年後に<footnote>あるいはその期間中に別のリリースが出
         ない限り。ある時点では、通常 2 個のみの安定版リリースがサポートさ
         れています。</footnote>そのようなパッケージへのセキュリティサポー
         トを打ち切り、その後は他のサポートも提供されないのが常です。もし存
         在するのなら、利用可能な代替品に置き換えることを推奨します。</p>

         <p>あるパッケージが本ディストリビューションから削除された理由は、数
         多くあります - 上流ではもはや保守されていないため、そのパッケージを
         保守することに興味を抱く Debian 開発者がもはやいないため、提供してい
         た機能が別のソフトウェア (あるいは新バージョン) に取って代わられたた
         め、バグのために &releasename; にはもはや適さないとみなされたため、
         などです。最後の場合では、当該パッケージが "不安定版" ディストリビュー
         ション内には存在していることがあります。</p>

         <p>更新されたシステム内のどのパッケージが "時代遅れ" なのかを
         検出するのは、パッケージ管理用フロントエンドが当該パッケージに
         その旨のマークを付けてくれるので簡単です。<prgn>aptitude</prgn> を
         使っているのなら、当該パッケージが "Obsolete and Locally Created
          Packages" 欄に列記されているのに気づくでしょう。
         <prgn>dselect</prgn> も同じようなセクションを提供しますが、表示
         される一覧はわずかに異なっています。さらに、&oldreleasename; で
         手作業でパッケージをインストールするのに <prgn>aptitude</prgn> を
         使っていたのなら、手作業でインストールされたパッケージの記録が取ら
         れており、依存元パッケージが削除されればもはや不要となる依存関係の
         みによって導入されたパッケージに時代遅れのマークを付けることができ
         るでしょう。また <prgn>aptitude</prgn> は、<prgn>deborphan</prgn> と
         は異なり、手作業でインストールしたパッケージには時代遅れのマークを
         付けません (依存関係によって自動でインストールされたものにはマークを
         付けます)。</p>

         <p>時代遅れのパッケージを見つけるのに使える追加ツールとしては、以下
         のものがあります - <prgn>deborphan</prgn> や <prgn>debfoster</prgn>、
         <prgn>cruft</prgn>。<prgn>deborphan</prgn> を強く推奨しますが、同プロ
         グラムは (デフォルトモードでは) 時代遅れのライブラリ - "libs" や
         "oldlibs" セクション内にあり、他のパッケージに使われていないパッケー
         ジ - しか報告しません。これらのプログラムが表示したパッケージをやみく
         もに削除しないでください。特に、誤報しやすい非デフォルトのオプションを
         積極的に使っている場合はなおさらです。実際に削除する前に、削除を提案さ
         れたパッケージを手作業で調査 (その中身やサイズ、説明文など) することを
         強く推奨します。</p>

<!-- JFS: Should we recommend purging old packages? This might be
dangerous since the maintainer scripts might try to remove stuff that
didn't belong to them... -->

         <p><url id="&url-bts;" name="Debian バグ追跡システム"> は、パッケージ
         が削除された理由についての情報を提供してくれることがよくあります。
         あるパッケージ自体についてのアーカイブ化されたバグ報告と、<url
         id="&url-bts;/cgi-bin/pkgreport.cgi?pkg=ftp.debian.org&#38;archive=yes"
         name="ftp.debian.org pseudo-package"> のアーカイブ化されたバグ報告の
         両方を調査すべきです。</p>

         <sect1 id="dummy"><heading>ダミーパッケージ</heading>

<!-- JFS: If the appendix is kept this section should point there and the packages described here should be moved to that section -->

         <p>&oldreleasename; のいくつかのパッケージは &releasename; では複数の
         パッケージに分割されていますが、これは大半がシステムの保守性を改善す
         るためです。この場合におけるアップグレードを容易にするために、
         &releasename; はしばしば "ダミーの" パッケージ - &oldreleasename; での
         古いパッケージと同じ名前で、新規パッケージを導入するための依存関係を
         備えた空のパッケージ -を提供しています。これらの "ダミー" パッケージ
         はアップグレード後は時代遅れとみなされ、安全に削除することができます。</p>


         <p>大半の (すべてではない) ダミーパッケージの説明文には、その目的が
         記されています。しかしながらダミーパッケージの説明文は統一されていな
         いため、自分のシステム内のダミーパッケージを検出するために
         <prgn>deborphan</prgn> を <tt>--guess</tt> オプション付で使うことも
         できます。いくつかのダミーパッケージは、アップグレード後に削除される
         ことを意図しておらず、代わりに時間とともに変化するプログラムの利用可
         能な最新バージョンの記録用として使われることに注意してください。</p>
 
         </sect1>
         </sect>
      </chapt>

<!-- FJP: Add more info here on dealing with obsolete packages?
          Also how to purge packages that were deleted but still have conffiles
          (use "limit" command in aptitude and search for ~c) -->

        <chapt id="information">
        <heading>&releasename; で知っておくべき問題点</heading>

<!-- Controversial, disabled for now, please translate though
         <sect id="german-quotes"><heading>ドイツ語の引用符に関する問題</heading>

           <p>ドイツ語スタイルの言語用ロケール (de_DE@euro など) は、残念なことに
           開引用符を表現するのに美的とはいえない方法を使っています。他の Linux 
           ディストリビューションとの互換性を保つために、私たちはこの方法を維
           持してきましたが、将来においては修正されることを期待しています。私た
           ちは、正確な引用符を備えたドイツ語に完全に対応している UTF-8 ロケー
           ル (de_DE@euro.UTF-8 など) へ切り換えることを提案します。そして Unicode
           エンコーディングを使えば、他の言語でもより優れた対応が得られます。</p>

           <p>システム全体のロケール選択を変更するには、次のように実行して
           ください:
           <example>dpkg-reconfigure locales</example></p>
-->
<!--   Will be added if relevant information is written here
         <sect id="syntax"><heading>重要なプログラムの構文変更</heading>

           <p>Debian は上流パッケージの変更は避けようと努めているため、上流パッ
           ケージでのあらゆる変更は本バージョンの &debian; にも表れるでしょう。
           このことは、&debian; のリリース間でプログラムの動作に違いがありえる
           ことを意味しています。</p>

           <p><em>現時点では、いかなる変更も報告されていません。</em></p>
-->

<sect id="pythonchanges"><heading>Python パッケージへの変更点</heading>

<p>&releasename; の python2.X パッケージには、
標準モジュールである 'profile' と 'pstats' が含まれていません。
これは当該モジュールに適用されているライセンスが、DFSG に合致しないためです (詳細はバグ報告 
#293932 を参照してください)。これら 2 つのモジュールは、Debian アーカイブ
の non-free セクション内の python-profiler および python2.X-profiler パッ
ケージにあります。</p>
</sect>

<![ %available-2.6 [
        <sect id="upgrade-to-2.6">
        <heading>2.6 系カーネルへのアップグレード</heading>

<p>2.6 系カーネルは、2.4 系カーネルから大きな変更が加えられています。
モジュールの名称が変更され、
多くのドライバが部分的あるいはほとんど完全に書き換えられました。
したがって、以前のバージョンから 2.6 系カーネルへのアップグレードは、
それほど簡単に済ませられるものではありません。このセクションは、
直面するかもしれない問題のいくつかを知っておいてもらおうというのが狙いです。

<p>それゆえ、&oldreleasename; から &releasename; へのアップグレードの一部として
2.6 系カーネルへのアップグレードを行うのはおすすめしません。
まずは、システムが &releasename; の 2.4 系 (もしくはそれ以前のバージョンの)
カーネルで正しく動作するのを確認すべきです。その後、別の課題として、
2.6 系カーネルへのアップグレードを実施してください。</p>

<p>ソースから自分でカーネルをコンパイルしている人は、2.6 系カーネルで再起動する前に、
<package/module-init-tools/ がインストールされているのを確認してください。
このパッケージは、<package/modutils/ を 2.6 系カーネル用のものに置き換えます。
Debian の <package/kernel-image/ パッケージのどれかを使っている場合は、
依存関係により自動的にこのパッケージが入っているはずです。</p>

<p><em/LVM/ を使っている場合は、2.6 系カーネルで再起動する前に
<package/lvm2/ パッケージもインストールしてください。
2.6 系カーネルは LVM1 を直接はサポートしていません。
LVM1 のボリュームにアクセスするには、<package/lvm2/ の互換レイヤ
(dm-mod モジュール) が使われます。
初期化スクリプトがどのバージョンのカーネルが使われているかを検出し、
適切なバージョンを実行するので、<package/lvm10/
はインストールしたままでも構いません。</p>

           <p><file>/etc/modules</file> ファイル (システム起動時にロードされる
           モジュールの一覧) 内に記述をしているなら、いくつかのモジュール名が
           変わっているかもしれないことに注意してください。変わっている場合は、
           ファイル内の記述を新しいモジュール名で更新しなければならないでしょう。</p>

<![ %i386 [
           <p>いくつかの SATA ディスクコントローラでは、ドライブやそのパーティ
           ションに割り当てられたデバイスが <file>/dev/hdX</file> から
           <file>/dev/sdX</file> に変わっているかもしれません。変わっている場
           合は、<file>/etc/fstab</file> とブートローダ設定を適切に修正しなけ
           ればならないでしょう。これらの修正が正確に行なわれないと、システム
           は正しく起動しないでしょう。</p>
]]>

           <p>2.6 系カーネルをインストールした後、再起動を行なう前に、復旧手段を
           用意するようにしてください。まず、ブートローダの設定に新しいカーネル
           と稼働中の古い 2.4 系カーネルの両方の記述があることを確認してください。
           ブートローダの設定が間違っていたために古いカーネルで起動できなくなる
           場合に備え、"レスキュー用の" フロッピーか CD-ROM が手元にあることも
           確認しておくべきでしょう。</p>

<![ %not-s390 [
        <sect1 id="2.6-keyboard">
        <heading>キーボードの設定</heading>

<p>2.6 系カーネルでの最も劇的な変化は、入力レイヤの基本部分の変更です。
この変更により、すべてのキーボードは「ふつうの」PC キーボードのように扱えます。
これは、現在異なるタイプのキーボード (例えば USB-MAC や Sun キーボード)
を選択している場合、新しい 2.6 系カーネルで再起動後にキーボードがまったく
動かない状態になってしまう可能性が非常に高いということです。</p>

           <p>別のシステムからそのマシンへ SSH を使ってログインできるのなら、
           <tt>dpkg-reconfigure console-data</tt> と実行して "Select keymap from full list"
           オプションを選び、そこから "pc" キーボードを選択することでこの問
           題を解決できます。</p>

<p>コンソールで使っているキーボードが影響を受けたということは、
X Window System のキーボードも再度設定する必要があるでしょう。
<tt>dpkg-reconfigure xserver-xfree86</tt> を実行するか、
<file>/etc/X11/XF86Config-4</file> を直接編集することになります。
<ref id="nownownow"> で参照されている文書も読んでおいてください。</p>

<![ %i386 [
           <p>この問題は、すべての PS/2 および大半の USB キーボードがすでに
           "normal" PC キーボードとして設定されている &arch-title; アーキテ
           クチャでは影響がないでしょう。</p>
]]>
<![ %not-i386 [
           <p>USB キーボードを使っているのなら、"normal" PC キーボードか USB-MAC
           キーボードとして設定されているでしょう。前者の場合、この問題による
           影響はありません。</p>
]]>
      </sect1>

        <sect1 id="2.6-mouse">
        <heading>マウスの設定</heading>

           <p>これも入力レイヤの変更によるものですが、2.6 系カーネルへアップグレー
           ドした後でマウスが使えなくなったなら、X Window System と
           <package/gpm/ を再設定する必要があるでしょう。よくある原因は、マウス
           からのデータを受け取るデバイスが変わったせいです。別のモジュールを
           ロードする必要もあるかもしれません。</p>

<![ %sparc [
<p>現在、X で <file>/dev/sunmouse</file> を設定しているなら、
おそらく <file>/dev/psaux</file> へ変更する必要があります。</p>
]]>

        <sect1 id="2.6-sound">
         <heading>サウンドの設定</heading>

           <p>2.6 系カーネルでは、OSS サウンドドライバよりも ALSA サウンドドライ
           バが推奨されます。<package/alsa-base/ をインストールすれば、使用して
           いるサウンドカード用の ALSA モジュールが自動的にロードされるはずです。
           また、OSS モジュールがロードされるのを防ぐために <package/discover/
           や <package/hotplug/ で同モジュールが自動的にブラックリストに載せられる
           でしょう。<file>/etc/modules</file> 内に OSS モジュールの記述があるのな
           ら、これを削除すべきです。</p>

        </sect1>
]]> <!-- %not-s390 -->

        <sect1 id="2.6-udev">
        <heading>2.6 系への変更で udev が起動</heading>

<p><package/udev/ は、devfs のユーザ空間での実装です。これは
<file>/dev</file> ディレクトリにマウントされ、
カーネルモジュールがロード・アンロードされる時にデバイスファイルを
ディレクトリに動的に作成・削除します。また、新しいデバイスの検出は、
<package/hotplug/ とともに動作するようになっています。<package/udev/
は 2.6 系カーネルでしか動作しません。</p>

<p><package/udev/ は、例えば <package/gnome/ などの依存関係により
自動的にインストールされるので、2.6 系カーネルへの変更は <package/udev/
を動作させる絶好のチャンスです。</p>

<p><package/udev/ は広範囲に渡ってテストされていますが、
いくつかのデバイスでは若干の修正が必要になるという問題があるかもしれません。
たいていの問題は、デバイスファイルの権限や所有者が変更されるというものです。
(<file>/dev/video</file> や <file>/dev/radio</file> など)
デフォルトではデバイスファイルが作成されない場合もあります。

<p><package/udev/ は、これらの問題に対処する設定の仕組みを提供しています。
詳しくは、<manref name="udev" section="8"> や <file>/etc/udev</file>
を見てください。</p>

        </sect1>
        </sect>
]]> <!-- %available-2.6 -->

<![ %i386 [
        <sect id="x-mouse">
         <heading>X Window System のロード失敗</heading>

           <p>マシンの起動後 X のロードに失敗し、
           <file>/var/log/XFree86.0.log</file> 内に "missing core pointer" と
           いうエラー表示があるなら、マウスドライバが <prgn/hotplug/ によって
           充分な速さでロードされなかったことが原因と考えられます (バグ
<!-- ここでの fast enough は「適切な時期に」かな？時期というよりはタイミングかも。 -->
           <url id="http://bugs.debian.org/255744" name="#255744">)。解決法と
           しては、使っているマウス用のドライバモジュール (psmouseなど) を
           <file>/etc/modules</file> に追加することがあります。</p>

        </sect>

        <sect id="x-transmeta">
        <heading>Transmeta Crusoe システムと X Window System</heading>

<p>&releasename; で配布されている X サーバは、多くの Transmeta(TM) Crusoe(TM)
プロセッサでは正しく実行できない、最適化されたコードを含んでいます。この結果、
X のクライアントアプリケーションが一定の間隔 (x86 の「morphed」コードが、
バグのある Crusoe CPU 内の VLIW 命令をキャッシュした場合)
で以下のようなエラーメッセージとともに接続に失敗します:

<example>
X Error of failed request:  BadLength
   (poly request too large or internal Xlib length error)
Major opcode of failed request:  18 (X_ChangeProperty)
Serial number of failed request:  15
Current serial number in output stream:  18
</example></p>

<p>実際の問題として、数時間起動させていると、
アプリケーションが突然終了するようになってしまいます。
ディスプレイマネージャが起動しているなら、
同様に終了と再起動を繰り返すようになります。
この状態は、バグのある VLIW Transmeta
コードがキャッシュから消えるまで続きます。</p>

<p>バグがプロプライエタリな Transmeta Code Morphing Software
(CMS) 内に存在し、ラップトップの BIOS は起動時にベンダのシグネチャとして CMS
をチェックするので、このバグを直すには Transmeta
とラップトップのベンダが協力する以外にありません。
この問題に関するより詳しい情報は、
<url id="http://www.cs.auc.dk/~fleury/bug_cms/"> や Debian のバグ報告
<url id="http://bugs.debian.org/216933" name="#216933"> にあります。</p>

<p>このバグを回避するには、<package/xserver-xfree86-dbg/
パッケージのように最適化せずにコンパイルした X サーバをインストールすることです。</p>

        </sect>
]]>
      </chapt>
 
      <chapt id="moreinfo">

        <heading>&debian; に関する更なる情報</heading>

        <sect id="morereading"> <heading>もっと読みたい</heading>
<p>このリリースノートやインストールガイドを越えた、
&debian; に関するより進んだ文書は、
Debian Documentation Project (DDP)
から公開されています。
DDP は Debian のユーザや開発者向けに、
品質の高い文書を作成することを目的としています。
Debian ガイド、Debian メンテナ入門、
Debian FAQ などなど、たくさんの文書があります。
リソースの詳細すべては <url id="&url-ddp;"
name="DDP のウェブサイト">
から得られます。</p>

<p>それぞれのパッケージの文書は
<file>/usr/share/doc/<var>package</var></file> にインストールされています。
ここには、
著作権情報、Debian 固有の詳細、開発元の文書すべて、
などが置かれています。</p>

      </sect> 

      <sect id="gethelp"> 
        <heading>助けを求めるには</heading> 

<p>Debian ユーザ向けのヘルプ・アドバイス・サポートなどは、
いろいろな場所から得られます。しかしこれらを頼りにするのは、
その問題について徹底的に文書を調査してからにしましょう。
このセクションでは新しく Debian ユーザになった人向けに、
これらを簡単に紹介します。</p>

      <sect1 id="lists">
        <heading>メーリングリスト</heading>
<p>Debian ユーザが最も興味を引かれるであろうメーリングリストは
debian-user (英語) リストおよび
debian-user-<var/language/ (各国語) リストでしょう。
これらのリストの詳細や講読のしかたについては、
<url id="&url-debian-list-archives;"> を見てください。
利用にあたっては、
あなたの疑問に対する答えが以前の投稿で既に答えられていないかどうか、
アーカイブをチェックしてください。
また標準的なメーリングリストのエチケットに従うようにしてください。</p>
      </sect1>

      <sect1 id="irc">
        <heading>インターネットリレーチャット (IRC)</heading> 

<p>Debian はサポート用の IRC チャンネルを
Debian ユーザの協力によって運営しています。
このチャンネルは Freenode IRC ネットワークにあります。
このネットワークは、
オープンソースコミュニティで資源共有や協力をすすめるため、
情報交換に使われているものです。
このチャンネルにアクセスするには、
お好みの IRC クライアントを &debian-irc-server; に接続し、
#debian に join してください。</p>

<p>チャンネルのガイドラインに従い、
他のユーザを大切にしてください。
Freenode に関する詳細は
<url id="&url-irc-host;" name="ウェブサイト">
を訪ねてみてください。</p>

      </sect1>
      </sect> 

      <sect id="bugs">
        <heading>バグを報告する</heading>

<p>私たちは Debian GNU/Linux を高品質な
OS にするよう努めていますが、だからといって
私たちの提供するパッケージにバグが絶無というわけにはいきません。
Debian の「オープンな開発体制」という考え方に合致し、また、
ユーザに対するサービスとして、
私たちは報告されたバグに関する全ての情報を
<url id="&url-bts;" name="bugs.debian.org"> にある
バグ追跡システム (Bug Tracking System: BTS) で提供しています。</p>

<p>もしディストリビューションや、
その一部であるパッケージされたソフトウェアにバグを見つけたら、
次のリリースで修正できるよう、その問題点の報告をお願いします。
バグを報告するには正しい電子メールアドレスが必要です。
これをお願いしているのは、バグを追跡したり、
開発者がより詳しい情報を必要とした場合に、
報告者に連絡できるようにするためです。</p>

<p>バグ報告には <package>reportbug</package>
というプログラムを使うこともできますし、
電子メールを使っても構いません。
バグ追跡システムに関する詳細やその使い方については、
リファレンスカード
(<package>doc-debian</package> パッケージをインストールしていれば
<file>/usr/share/doc/debian</file> にあります)
をお読みいただくか、
または <url id="&url-bts;" name="バグ追跡システム">
のウェブサイトからオンラインで入手することもできます。</p>

      </sect>

      <sect id="contributing">
        <heading>Debian に貢献する</heading>

<p>Debian への貢献は専門家でなくてもできます。
問題を抱えたユーザを、いろいろな
<url id="&url-debian-list-archives;" name="サポートメーリングリスト">
の場所で助けてあげることも、立派なコミュニティへの貢献です。
<url id="&url-debian-list-archives;" name="開発メーリングリスト">
に参加して、
ディストリビューション開発に関する問題を見つけたり解決したりする
(もちろん後者のほうが大切) ことも、
もちろん非常に助けになります。
Debian を高品質なディストリビューションに保つため、
<url id="&url-bts;" name="バグを報告して">
その原因の特定や解決に際して開発者を助けてください。
執筆が得意なら、
<url id="&url-ddp;" name="文書"> 作成や
既存文書のご自分の言語への
<url id="&url-debian-i18n;" name="翻訳">
に積極的に参加し、そこで貢献するのも良いでしょう。</p>

<p>もっと時間が自由になるなら、Debian
に属するフリーソフトウェア集の一部を管理してみるのはどうでしょうか。
みんなが Debian に入れてほしいと思っているソフトウェアを
引き受けて管理するのは、特に価値の高い貢献です。
これに関する詳細は、
<url id="&url-wnpp;" name="作業が望まれるパッケージ">
をご覧になってください。
Debian にはいくつかサブプロジェクトが存在しており、
特定のアーキテクチャへの移植、
<url id="&url-debian-jr;" name="Debian Jr.">、
<url id="&url-debian-med;" name="Debian Med">
などが進められています。これらのうち、
あなたが興味を持っているグループに参加するのも良いでしょう。</p>

<p>いずれにしても、
あなたが何らかの形でフリーソフトウェアコミュニティに関っているのなら、
それがユーザとしてであれ、プログラマ、ライター、
翻訳者のいずれとしてであれ、
既にあなたはフリーソフトウェア運動を助けてくださっているのです。
貢献することは報いのあることですし、楽しいことです。
新しい人々に出会う機会も増えます。
きっと暖かな、楽しい気持ちになれるはずです。</p></sect>

    </chapt>


<![ %upgradekernel [

     <appendix id="kernel-upgrade-howto"><heading>カーネルのアップグレード</heading>

<![ %not-mips-mipsel [
<![ %sparc [
           <p><strong>この付録の情報は、システムを安全にアップグレードするため
           には、システムのアップグレード<em/前/ にカーネルをアップグレードする
           必要がある場合のみを対象としています。あなたのシステムでこれが要求
           されているのかどうかを知るには、<ref id="new-kernel"> を読んでくださ
           い</strong>。</p>
]]>

<p>以下の手順は、新しいカーネルをインストールするために利用可能な
全バックポートツールの使い方を、順序を追って説明するものです。</p>

<p>&oldreleasename; からインストールする必要があるパッケージのため、
<ref id="old-sources"> で説明したように &oldreleasename;
を参照している行がまだ <file>sources.list</file>
に残っていることを確かめてください。</p>

]]> <!-- %not-mips-mipsel -->

<![ %mips-mipsel [
          <p>以下の手順は、新しいカーネルのインストール方法を、順序を追って説明するものです。</p>
]]>

          <p><taglist>
                <tag>必要なパッケージのダウンロードとインストール</tag>

<![ %mips-mipsel [
                <item>
<p><em>apt を使う場合</em>: もしまだ変更していないなら、
<ref id="upgrade-process"> で述べたように <file>sources.list</file>
ファイルが &releasename; を指すようにして、パッケージリストの更新と
使っているマシン用の kernel-image のインストールを済ませてください。
利用可能なカーネルイメージの一覧は以下を見るか、次のコマンドで表示できます:

         <example>
$ apt-cache search ^kernel-image
         </example></p>

<p>インストール中に、モジュールに不整合があると文句を言われ、
インストールを続けるかどうか質問されるかもしれません。
これらの不整合は、新しいカーネルで再起動すれば解決されるので、
<tt>はい</tt>と答えてください。</p>

<p><em>dpkg を使う場合</em>: 選択した Debian ミラーから、
最新のカーネルパッケージを取得してください。
利用可能なパッケージは以下の通りです:

                <list>
<![ %mips [
                <item><p><url id="http://ftp.debian.org/debian/pool/main/k/kernel-patch-2.4.27-mips/kernel-image-2.4.27-r4k-ip22_2.4.27-8.040815-1_mips.deb">
                Indy や Indigo2 のような、R4XX0 プロセッサと SGI IP22 サブアーキテクチャ用。</p></item>
                <item><p><url id="http://ftp.debian.org/debian/pool/main/k/kernel-patch-2.4.27-mips/kernel-image-2.4.27-r5k-ip22_2.4.27-8.040815-1_mips.deb">
                Indy や Indigo2 のような、R5000 プロセッサと SGI IP22 サブアーキテクチャ用。</p></item>
                <item><p><url id="http://ftp.debian.org/debian/pool/main/k/kernel-patch-2.4.27-mips/kernel-image-2.4.27-sb1-swarm-bn_2.4.27-8.040815-1_mips.deb">
                Broadcom BCM91250A (通称 SWARM) パス 2.2 用。</p></item>
]]>
<![ %mipsel [
                <item><p><url id="http://ftp.debian.org/debian/pool/main/k/kernel-patch-2.4.27-mips/kernel-image-2.4.27-r3k-kn02_2.4.27-8.040815-1_mipsel.deb">
                DECstation 5000/1xx シリーズ (xx=20,25,33) や DECstation 5000/240 のような、KN02 (互換の) メインボードを積んだ R3000 ベースの DECstations 用。</p></item>
                <item><p><url id="http://ftp.debian.org/debian/pool/main/k/kernel-patch-2.4.27-mips/kernel-image-2.4.27-r4k-kn04_2.4.27-8.040815-1_mipsel.deb">
                DECstation 5000/150、Personal DECstation 5000/50、DECstation 5000/260 のような、KN04 (互換の) メインボードを積んだ R4X00 ベースの DECstations 用。</p></item>
                <item><p><url id="http://ftp.debian.org/debian/pool/main/k/kernel-patch-2.4.27-mips/kernel-image-2.4.27-r5k-cobalt_2.4.27-8.040815-1_mipsel.deb">
                (Qube、RaQ、Qube2、RaQ2 のような、) MIPS ベースの Cobalt マシン用。</p></item>
                <item><p><url id="http://ftp.debian.org/debian/pool/main/k/kernel-patch-2.4.27-mips/kernel-image-2.4.27-r5k-lasat_2.4.27-8.040815-1_mipsel.deb">
                R5000 プロセッサを積んだ Lasat Masquerade Pro 用。</p></item>
                <item><p><url id="http://ftp.debian.org/debian/pool/main/k/kernel-patch-2.4.27-mips/kernel-image-2.4.27-sb1-swarm-bn_2.4.27-8.040815-1_mipsel.deb">
                Broadcom BCM91250A (通称 SWARM) パス 2.2 用。</p></item>
                <item><p><url id="http://ftp.debian.org/debian/pool/main/k/kernel-patch-2.4.27-mips/kernel-image-2.4.27-xxs1500_2.4.27-8.040815-1_mipsel.deb">
                Au1500 ベースの XXS1500 ボード用。</p></item>
]]>
                </list></p>

<p>そして、<tt>dpkg -i</tt> でパッケージをインストールします。
(<package>modutils</package> の) モジュールに不整合があると文句を言われ、
インストールを続けるかどうか質問されるかもしれません。
これらの不整合は、新しいカーネルで再起動すれば解決されるので、
<tt>はい</tt>と答えてください。</p>

                </item>
]]> <!-- %mips-mipsel -->

<![ %not-mips-mipsel [
               <item>
                <p><em>apt を使う場合</em>: <prgn>apt</prgn> やそのフロン
                トエンドの 1 つを使ってパッケージをインストールするには、以下の
                行をあなたの <file>/etc/apt/sources.list</file> に追加してくだ
                さい:

<example>
deb &url-kernel-upgrade;
# ソースも必要なら入手できます。
# deb-src &url-kernel-upgrade;
</example></p>

<![ %sparc [
               <p>次に以下のパッケージをインストールしてください:
               <package>modutils</package>、
               <package>initrd-tools</package>。
]]>
<![ %hppa [
               <p>次に以下のパッケージをインストールしてください:
               <package>module-init-tools</package>、
               <package>modutils</package>,
               <package>palo</package>、
               <package>initrd-tools</package>:
<example>
# apt-get install module-init-tools palo initrd-tools modutils
</example>
]]>

(後ほど、ここで追加したものは安全に削除できます)</p>

<p><ref id="upgrade-process"> で述べたように、
<file>sources.list</file> が &releasename; を指すように変更した後、
パッケージのリストを更新して、<package>&upgrade-kernel-image-name;</package>
パッケージをインストールしてください。</p>

               <p><em>dpkg を使う場合</em>: <prgn>dpkg</prgn> でパッケージを直接
               インストールするには、まず必要なファイルをダウンロードする必要が
               あります。</p>
               <p><list>
                 <item><url id="&upgrade-kernel-image;"></item>
                 <item><url id="&upgrade-kernel-modutils;"></item>
<![ %hppa [      <item><url id="&hppa-modutils;"></item> ]]>
                 <item><url id="&all-initrd-tools;"></item>
                 <item><url id="&upgrade-kernel-cramfsprogs;"></item>
               </list></p>

               <p>カーネルパッケージは <package>&upgrade-kernel-modutils-name;</package><![ %hppa [
               (これは古い <package>modutils</package> と衝突します)]]> に依存
               しており、<package>initrd-tools</package> は <package>cramfsprogs</package>
               に依存しています。(<package>stat</package>、
               <package>cpio</package>、<package>ash</package> など) その他すべての依存関係は、
               通常の方法で &oldreleasename; 内のパッケージにより解決できます。</p>

<![ %hppa [
<p><em/LVM/ を使っている場合は、2.6 系カーネルで再起動する前に
<package/lvm2/ パッケージもインストールしてください。
2.6 系カーネルは LVM1 を直接はサポートしていません。
LVM1 のボリュームにアクセスするには、<package/lvm2/ の互換レイヤ
(dm-mod モジュール) が使われます。
初期化スクリプトがどのバージョンのカーネルが使われているかを検出し、
適切なバージョンを実行するので、<package/lvm10/
はインストールしたままでも構いません。</p>
]]>
               </item>
]]> <!-- %not-mips-mipsel -->

                <tag>まだ古いカーネルを削除してはいけません</tag>
                <item><p>新しいカーネルで起動し、アップグレードに必要なすべての
                ハードウェア (ネットワークアダプタなど) が動作するかどうか
                確認してください。</p></item>

<![ %not-mips-mipsel [
                <tag>システムを起動可能にする</tag>
                <item>
                <p>ブートローダの設定である <file>&bootloader-conf;</file> を調整
                する必要があるでしょう。&oldreleasename; の Debian カーネルとは
                異なり、現在のカーネルは initrd を使うことに注意してください。</p>
                </item>
]]>

                <tag>新しいカーネルでの再起動</tag>
                <tag>システムのチェック</tag>
                <item><p>特に入力デバイス、表示デバイス、&releasename; パッケージへのアク
                セスに必要なデバイス (ネットワークアダプタ、CD ドライブなど) を
                チェックしてください。いくかのモジュールは名前が変わっていたり、
                古いカーネルではカーネルに組み込まれていたドライバがモジュールと
                してコンパイルされていることがあります...</p></item>

          </taglist></p>

     </appendix>
]]>

     <appendix id="old-stuff">
     <heading>&oldreleasename; システムの管理</heading>

        <p>この付録には、&releasename; へアップグレードする前に &oldreleasename;
        パッケージを確実にインストールしたりアップグレードする方法についての情報
        が述べられています。特定の状況でのみ必要となるでしょう。</p>

        <sect id="old-upgrade">
        <heading>&oldreleasename; システムのアップグレード</heading>

           <p>基本的には、これまで行なってきた &oldreleasename; のあらゆるアッ
           プグレードと違いはありません。唯一異なるのは、<ref id="old-sources">
           で説明したようにパッケージリスト内に &oldreleasename; パッケージが
           まだ含まれているのを確認する必要があることです。</p>

       </sect>

<![ %has-woody-aptitude [
       <sect id="old-aptitude">
       <heading>&oldreleasename; 版 aptitude のインストール</heading>

           <p>まず、<ref id="old-sources"> 内の指示に従って &oldreleasename; 版
           の <package/aptitude/ がインストールされ、&releasename; 版はインストー
           ルされないようにする必要があります。</p>

           <p>その後で、次のように実行して <package/aptitude/ をインストール
           してください:

           <example>
 # apt-get install aptitude
           </example></p>

       </sect>
]]>

       <sect id="old-sources">
       <heading>ソースリストのチェック</heading>

           <p><file>/etc/apt/sources.list</file> 内で 'stable' を指定している
           行があるなら、効率よく &releasename; を "使う" 用意ができています。
           すでに <tt>apt-get update</tt> を実行済でも、以下の手順に従えば問題
           なく元に戻すことができます。</p>

           <p>&releasename; からパッケージのインストールもしてしまっているなら、
           おそらくこれ以上 &oldreleasename; からパッケージをインストールしても
           無意味でしょう。この場合、続けるかどうかを自分で決断しなければなりま
           せん。パッケージをダウングレードすることはできますが、その方法はここ
           では扱いません。</p>

           <p>(root になってから) お気に入りのエディタで
           <file>/etc/apt/sources.list</file> を開き、<tt>deb http:</tt> や
           <tt>deb ftp:</tt> で始まるすべて行の中に "<tt/stable/" が指定されて
           いるかどうかを調べてください。もしあるなら、<tt/stable/ を
           <tt/&oldreleasename;/ に変更してください。</p>

           <p><tt>deb file:</tt> で始まっている行があるなら、その行が指定している
           場所が &oldreleasename; か &releasename; のどちらのアーカイブなのかを
           独力で調べなければならないでしょう。</p>

           <p><strong/重要!/: <tt>deb cdrom:</tt> で始まっている行は、絶対に変更
           しないでください。変更するとその行は無効になって、もう一度 <prgn/apt-cdrom/ を
           実行しなければならなくなるでしょう。'cdrom' ソースが "<tt/unstable/" を
           指定していても心配しないでください。混乱するかもしれませんが、これで
           正常なのです。</p>

           <p>変更が済んだら、ファイルを保存してから次のように実行して、
           パッケージリストを更新してください:

           <example>
# apt-get update
           </example></p>

       </sect>

    </appendix>

  </book>
</debiandoc>

<!-- Keep this comment at the end of the file
Local Variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-namecase-general:t
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:nil
sgml-declaration:nil
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
fill-column: 75
End:
-->

