<!DOCTYPE debiandoc PUBLIC "-//DebianDoc//DTD DebianDoc//EN" [

  <!ENTITY % dynamicdata SYSTEM "../en/../dynamic.ent"> %dynamicdata;
  <!ENTITY % shareddata SYSTEM "../en/../release-notes.ent"> %shareddata;
  <!ENTITY docid "$Id: release-notes.ja.sgml,v 1.21 2006-11-28 07:13:23 jseidel Exp $">
]>
<debiandoc>
 <book>
  <titlepag>
   <title>
     &debian; &release; (`&releasename') リリースノート (&arch-title; 用)
   </title>
   <author>
     <name>Josip Rodin, Bob Hilliard, Adam Di Carlo, Anne Bezemer, Rob 
     Bradford (現在のメンテナ), Frans Pop (現在のメンテナ), Andreas Barth 
     (現在のメンテナ)</name><email></email>
   </author>
   <author>
     <name></name><email>debian-doc@lists.debian.org</email>
   </author>
   <version>
     &docid;

   </version>
  </titlepag>
  <toc detail="sect1">
 
 <chapt id="about">
  <heading>
    リリースノートの最新情報
  </heading>
  <p>
    [この文書の最新版は、常に <url id="&url-release-notes;"> 
    から取得できます。もし入手した版が一ヵ月以上古いものでしたら、最新版をダウンロードしたほうがよいでしょう。]
  </p>
  <p>
    Debian の 1 つ前のリリースからのアップグレード (この場合、&oldreleasename; からのアップグレード) 
    にのみ対応かつ文書化されていることに注意してください。より古いリリースからのアップグレードが必要なら、過去のリリースノートを参照してください。
  </p>
 </chapt>
 <chapt id="whats-new">
  <heading>
    &debian; &release; の最新情報
  </heading>
  <p>
    このリリースでは、Intel (EM64T) および AMD (AMD64) 双方の 64 ビットプロセッサをサポートした、AMD64 
    アーキテクチャのサポートが公式に追加されています。前のリリース &debian; 3.1 ('sarge') 
    では、この移植の非公式版が利用可能でした。この非公式版からのアップグレードは、本リリースノートを参照すれば可能なはずですが、サポートはされていません。
  </p>
  <p>
    Debian リリースマネージャが課した条件を満たせなかったので、Motorola 680x0 ('m68k') 
    アーキテクチャは公式にはサポートされなくなりました。最も大きな理由は、パフォーマンスの問題と必須ツールチェインコンポーネントの開発元でのサポートが限られたものだったことです。しかし、公式な安定版リリースの一部ではないとはいえ、m68k 
    移植版はまだ動作し、引き続きインストールが可能だと思われます。
  </p>
  <p>
    &debian; &releasename; で公式にサポートされているアーキテクチャは以下のとおりです。
  </p>
  <p>
   <list>
    <item>
     <p>
       Intel x86 ('i386')
     </p>
    </item>
    <item>
     <p>
       Alpha ('alpha')
     </p>
    </item>
    <item>
     <p>
       SPARC ('sparc')
     </p>
    </item>
    <item>
     <p>
       PowerPC ('powerpc')
     </p>
    </item>
    <item>
     <p>
       ARM ('arm')
     </p>
    </item>
    <item>
     <p>
       MIPS ('mips' (ビッグエンディアン) と 'mipsel' (リトルエンディアン))
     </p>
    </item>
    <item>
     <p>
       Intel Itanium ('ia64')
     </p>
    </item>
    <item>
     <p>
       HP PA-RISC ('hppa')
     </p>
    </item>
    <item>
     <p>
       S/390 ('s390')
     </p>
    </item>
    <item>
     <p>
       AMD64 ('amd64')
     </p>
    </item>
   </list>
  </p>
  <p>
    移植状況の詳細や、お使いの移植版に特有の情報については、<url id="&url-ports;" name="Debian 
    の移植版に関するページ">で読むことができます。
  </p>
   <![ %secondrelease [

  <p>
    これは &arch-title; アーキテクチャ用 &debian; のまだ 2 
    回目の公式リリースです。すでにリリースするには十分安定している、と私たちは考えていますが、他のアーキテクチャ版のいくつかほどはまだ広く使われていない 
    (つまりユーザによるテストも多くない) ことから、いくつかのバグにでくわす可能性もあります。何か問題が起きたら、<url 
    id="&url-bts;" name="バグ追跡システム">を使って報告してください。その際、そのバグが &arch-title; 
    プラットフォーム上のものであることを必ず書き添えてください。
  </p>
   ]]>

  <p>
    &arch-title; アーキテクチャ用 &debian; &release; でのデフォルトのカーネルのバージョンは 
    &kernelversion; です。
  </p>
  <sect id="newdistro">
   <heading>
     ディストリビューションの最新情報
   </heading>
   <p>
     TODO: Update numbers
   </p>
   <p>
     Debian のこの新しいリリースには、一つ前のリリースである &oldreleasename; 
     に付属していたよりさらに多くのソフトウェアが付属しています。このディストリビューションには、9000 
     以上の新しいパッケージが含まれているのです。ディストリビューション中のほとんどのソフトウェア、すなわち約 6500 ものソフトウェアパッケージ 
     (これは &oldreleasename; のパッケージ全体の 73% にあたります) 
     が更新されました。また、かなりの数のパッケージが、様々な理由でディストリビューションから取り除かれました。これらのパッケージについては更新されておらず、パッケージ管理用のフロントエンドでは 
     'obsolete' というマークが付けられます。
   </p>
   <p>
     このリリースで &debian; は、XFree86 から XOrg の 7.1 
     リリースに移行しました。より広い範囲のハードウェアがサポートされ、自動認識もよりよいものになっています。この移行によって X Window 
     System 用で初めての複合ウィンドウマネージャの一つである Compiz が使えるようになり、サポートされているデバイスではハードウェア 
     OpenGL アクセラレーションを充分に活用できます。
   </p>
   <p>
     今回も &debian; は最新のデスクトップアプリケーションとともにリリースされます。特に挙げると、GNOME 2.14、KDE 
     3.5、OpenOffice.org 2.0 などが含まれています。
   </p>
   <p>
     <prgn>aptitude</prgn> は、コンソール上でのパッケージ管理に適したプログラムです。<prgn>apt-get</prgn> 
     よりも依存関係の解決に優れていることは明らかです。<prgn>aptitude</prgn> は <prgn>apt-get</prgn> 
     のコマンドライン操作の大半に対応しています。まだ <prgn>dselect</prgn> 
     を使っているのなら、公式のパッケージ管理用フロントエンドとして <package>aptitude</package> に移行すべきでしょう。
   </p>
   <p>
     公式の &debian; ディストリビューションは、現在は 13〜15 枚のバイナリ CD と、ほぼ同数のソース CD 
     の形で提供されています。DVD 版のディストリビューションも利用可能です。
   </p>
   <sect1 id="volatile">
    <heading>
      debian-volatile が公式サービスに
    </heading>
    <p>
      &oldreleasename; のリリースとともに非公式のサービスとして導入された <em>debian-volatile</em> 
      サービスが、&debian; の公式のサービスとなりました。
    </p>
    <p>
      つまり、これまでの <tt>.debian.net</tt> ではなく <tt>.debian.org</tt> 
      がサービスのアドレスに使われるようになりました。このサービスを既に利用している場合は、忘れずに 
      <file>/etc/apt/sources.list</file> を更新してサービスのアドレスを変更してください。
    </p>
    <p>
      <em>debian-volatile</em> を利用すると、すぐに古くなってしまう情報を含む安定版 (stable) 
      パッケージをユーザが容易に更新できます。そのような情報としては、例えばウイルススキャナのシグネチャリストや、スパムフィルタのパターンセットがあります。さらに詳しい情報やミラーのリストについては、アーカイブの<url 
      id="&url-debian-volatile" name="ウェブページ">を参照してください。
    </p>
   </sect1>
  </sect>
  <sect id="newinst">
   <heading>
     インストールシステムの最新情報
   </heading>
  </sect>
 </chapt>
 <chapt id="installing">
  <heading>
    新たにインストールする
  </heading>
  <p>
    Debian Installer は公式の Debian 
    インストールシステムです。このインストーラは、様々なインストール方法を提供しています。お使いのシステムにインストールするのにどの方法が利用できるかは、使っているアーキテクチャに依存します。
  </p>
  <p>
    &releasename; 用のインストーラのイメージやインストールガイドは、<url id="&url-installer;" 
    name="Debian のウェブサイト">にあります。
  </p>
  <p>
    インストールガイドは、Debian 公式 CD/DVD セットの 1 枚目の CD/DVD 内の、次の場所にも含まれています。
   <example>
/doc/install/manual/<var>言語</var>/index.html
        </example>
  </p>
  <p>
    debian-installer の<url id="&url-installer;index#errata" 
    name="正誤表">も見ておくとよいでしょう。
  </p>
   <![ %alpha [

  <p>
    このインストーラでは、SRM コンソールをサポートした alpha システムにしかインストールできません。インストールを始める前に、システムを 
    SRM に切り替えるのを忘れないでください。マシンが AlphaBIOS/ARC コンソールしかサポートしていない場合も、(最小限の) 
    &oldreleasename; をインストールしてからアップグレードすることで、 &releasename; 
    をインストールできます。コンソールの違いに関する詳しい情報は、<url 
    id="http://www.debian.org/ports/alpha" name="Debian alpha 
    移植版のウェブページ">のリファレンスを読んでください。
  </p>
   ]]><![ %sparc [

  <sect id="sparc_fb">
   <heading>
     &arch-title; のフレームバッファに関する問題
   </heading>
   <p>
     一部のシステムで表示に問題があるため、&arch-title; 
     においては、大部分のグラフィックカードでフレームバッファのサポートがデフォルトで無効になっています。そのため、フレームバッファをきちんとサポートしているシステムにおいては、表示が醜くなる可能性があります。インストーラの表示に問題が見られる場合は、<tt>framebuffer=true</tt> 
     をパラメータとして与えて、インストーラを起動してみてください。フレームバッファがデフォルトでは使われないにもかかわらずあなたのハードウェアで有効になってしまっている場合は、どうぞ私たちに教えてください。
   </p>
  </sect>
   ]]>

  <sect id="popcon">
   <heading>
     人気コンテスト
   </heading>
   <p>
     前回のリリースとは違って、インストールシステムが昔のように <package>popularity-contest</package> 
     パッケージのインストールを勧めるようになります。
   </p>
   <p>
     <package>popularity-contest</package> 
     は、ディストリビューション内のどのパッケージが実際に使われているかについての有益な情報を、Debian 
     プロジェクトに提供してくれます。この情報は、主にインストール CD-ROM 
     に収録されるパッケージの優先順位を決めるために使われますが、Debian 
     開発者がもはやメンテナのいないパッケージを引き受けるかどうかを決める際にもよく参照されます。
   </p>
   <p>
     <package>popularity-contest</package> 
     からの情報は、匿名で処理されます。公式調査に参加して頂けると感謝します。というのもそれにより、Debian 
     の改良を手伝って頂けることになるからです。
   </p>
  </sect>
 </chapt>
 <chapt id="upgrading">
  <heading>
    以前のリリースからアップグレードする
  </heading>
  <sect id="backup">
   <heading>
     アップグレードの準備
   </heading>
   <p>
     システムをアップグレードする前に、完全なバックアップを取っておくよう強くお勧めします。少なくとも、失いたくないデータや設定情報だけでもバックアップしておきましょう。アップグレードのツールや処理はきわめて信頼性の高いものですが、アップグレードの最中にハードウェア障害が起こると、システムに大きなダメージを与えることがありえます。
   </p>
   <p>
     バックアップしたくなるであろう主な対象としては、<file>/etc</file> や <file>/var/lib/dpkg</file> 
     の中身、<tt>dpkg --get-selections "*"</tt> (引用符を忘れてはいけません) の出力などでしょう。
   </p>
   <p>
     アップグレードの過程では、<file>/home</file> ディレクトリ以下は一切変更されません。とはいえ、(Mozilla 
     スイートの一部や GNOME や KDE のデスクトップ環境などのように) 
     ユーザが初めて新しいバージョンのアプリケーションを起動するときに、既存のユーザ設定を新たなデフォルト値で上書きしてしまうものがあるのも事実です。万一に備えて、ユーザのホームディレクトリにある隠しファイルと隠しディレクトリ 
     (いわゆる「ドットファイル」) 
     をバックアップしておくのがよいでしょう。古い状態に戻したり、再度設定する場合に役立つはずです。ユーザにもこのことについて知らせておいてください。
   </p>
   <p>
     アップグレードの前には、その予定をすべてのユーザに知らせるとよいでしょう。しかしシステムに <prgn>ssh</prgn> 
     接続などでアクセスしてきているユーザは、アップグレードの最中にそうと気付くことはほとんどないはずですし、作業を続行できるはずです。万一の用心をしたければ、アップグレードの前にユーザのパーティション 
     (<file>/home</file>) 
     をバックアップして、アンマウントしてしまいましょう。同時にカーネルもアップグレードする場合を除いて、通常は再起動は必要ないでしょう。
   </p>
   <p>
     ディストリビューションのアップグレードは、ローカルのテキストモードの仮想コンソール (あるいは直接接続されたシリアル端末) 
     から行うか、リモートなら <prgn>ssh</prgn> 接続経由で行いましょう。
   </p>
   <p>
     <strong>重要!</strong> 
     <prgn>telnet</prgn>、<prgn>rlogin</prgn>、<prgn>rsh</prgn> 
     を用いてアップグレードをしては<em>いけません</em>。アップグレードマシンの 
     <prgn>xdm</prgn>、<prgn>gdm</prgn>、<prgn>kdm</prgn> などが管理している X 
     セッションからのアップグレードも行うべきではありません。これらのサービスはアップグレードの最中に切断されてしまう可能性が高く、するとアップグレード途中のシステムへの<em>接続が不可能になってしまう</em>からです。
   </p>
   <p>
     あらゆるパッケージのインストール処理はスーパーユーザ特権で実行されなければならないため、必要なアクセス権を得るために root 
     としてログインするか <prgn>su</prgn> や <prgn>sudo</prgn> を使ってください。
   </p>
   <p>
     アップグレードにあたって事前に整えなければならない条件がいくつかあります。実際にアップグレードを実行する前にそれらを確認してください。
   </p>
   <sect1>
    <heading>
      アップグレードするのに十分な領域があることを確認する
    </heading>
    <p>
      システムアップグレードの前には、<ref id="upgrading_other"> 
      で説明するシステム全体のアップグレードを開始するときに十分なハードディスク領域があるかどうかを確認しなければいけません。まず、システムにインストールされるパッケージをダウンロードして一時的に保存するのに、<file>/var/</file> 
      を保持しているファイルシステムパーティションに十分なハードディスクが必要になります。ダウンロード後にはおそらく、アップグレードされるパッケージ 
      (これらには、より大きなバイナリやより多くのデータが含まれている可能性があります。) 
      と、アップグレードに伴って依存関係に引きずられて新たに導入されるパッケージの両方のインストールのために、他のファイルシステムパーティションにさらに領域が必要になるでしょう。システムに十分な空き領域がない場合、アップグレードが不完全な状態で終わり、復旧が困難になる可能性があります。
    </p>
    <p>
      <prgn>aptitude</prgn> と <prgn>apt</prgn> 
      のどちらを使っても、インストールに必要なディスク領域の詳細な情報が表示されます。次のように実行すると、実際にアップグレードを実行する前に、必要なディスク領域の推定値を見ることができます。
    </p>
    <p>
     <example>
# aptitude -y -s -f --with-recommends dist-upgrade
[ ... ]
更新: XXX 個、新規インストール: XXX 個、削除: XXX 個、保留: XXX 個。
yyyMB 中 xx.xMB のアーカイブを取得する必要があります。展開後に追加で AAAMB のディスク容量が消費されます。
パッケージのインストールまたは削除。
</example>
    </p>
    <p>
      アップグレードをするのに十分な領域がない場合、事前に領域を解放するのを忘れないようにしてください。以下のことを実行するとよいでしょう。
    </p>
    <p>
     <list>
      <item>
       <p>
         <prgn>apt-get clean</prgn> を実行してパッケージキャッシュを掃除し、インストールするために以前 
         (<file>/var/cache/apt/archive</file> に) ダウンロードしたパッケージを削除する。
       </p>
      </item>
      <item>
       <p>
         もう使用しない古いパッケージを削除する。<prgn>popularity-contest</prgn> 
         をインストールしていれば、<prgn>popcon-largest-unused</prgn> 
         を使って、システムで使用していなく最も大きな領域を占めているパッケージをリストアップできます。<prgn>deborphan</prgn> 
         や <prgn>debfoster</prgn> を使って時代遅れのパッケージを見つけることも可能です (<ref 
         id="obsolete"> を参照してください)。
       </p>
      </item>
      <item>
       <p>
         あまりにも大きな領域を占めており、すぐに必要になるわけではないパッケージを削除する 
         (アップグレード後にいつでも再インストール可能なのですから)。<prgn>dpigs</prgn> 
         (<prgn>debian-goodies</prgn> パッケージに含まれています。) や <prgn>wajig</prgn> 
         (<prgn>wajig size</prgn> を実行してください。) 
         を用いると、ディスク領域の大部分を占めているパッケージをリストアップできます。
       </p>
      </item>
      <item>
       <p>
         <file>/var/log/</file> の下にあるシステムログを一時的に他のシステムに移動するか、永久に削除する。
       </p>
      </item>
     </list>
    </p>
   </sect1>
   <sect1 id="glibc-kernel">
    <heading>
      2.2 系カーネルはサポートされなくなりました
    </heading>
    <p>
      2.4.1 より前のカーネルを使用している場合、<package>glibc</package> 
      をアップグレードする前、つまりできればアップグレードを開始する前に、(最低でも) 2.4 
      系にアップグレードする必要があります。推奨されているのは 2.6 系のカーネルにアップグレードすることです。
    </p>
   </sect1>
   <sect1 id="kernelorder">
    <heading>
      カーネルとユーザランドのどちらを最初にアップグレードするか?
    </heading>
    <p>
      [FIXME: Needs decision/documentation whether to upgrade userland or 
      kernel first.]
    </p>
   </sect1>
  </sect>
  <sect id="system-status">
   <heading>
     システムの状態をチェックする
   </heading>
   <p>
     この章で述べられているアップグレード手順は、サードパーティ製のパッケージを使っていない、「純粋な」&oldreleasename; 
     システムからのアップグレード用です。サードパーティ製のパッケージは先に削除しておくとよいかもしれません。
   </p>
   <p>
     またこの手順は、システムが &oldreleasename; 
     の最新リリースにアップデート済であるものと想定しています。そうではなかったり、アップグレード済みかどうか不明なら、<ref 
     id="old-upgrade">内の指示に従ってください。
   </p>
   <sect1>
    <heading>
      APT の pin 機能を無効にする
    </heading>
    <p>
      特定のパッケージを安定版以外 (テスト版など) のディストリビューションからインストールするように APT 
      を設定しているなら、当該パッケージが新しい安定版リリース内のバージョンにアップグレードできるように、(<file>/etc/apt/preferences</file> 
      内に保存されている) APT の pin 設定を変更する必要があるかもしれません。APT の pin 
      機能に関するより詳しい情報は、<manref section="5" name="apt_preferences"> にあります。
    </p>
   </sect1>
   <sect1>
    <heading>
      パッケージの状態をチェックする
    </heading>
    <p>
      アップグレードに使う手段に関係なく、まず全パッケージの状態を調べ、全パッケージがアップグレード可能な状態にあることを確認するよう推奨します。次のコマンドは、インストールが中断していたり設定に失敗したパッケージや、何らかのエラー状態にあるパッケージを表示します:
     <example>
# dpkg --audit
          </example>
    </p>
    <p>
      <prgn>dselect</prgn> や 
      <prgn>aptitude</prgn>、あるいは次のようなコマンドを使ってシステムの全パッケージの状態を検査することもできます:
     <example>
# dpkg -l | pager 
          </example>
      または
     <example>
# dpkg --get-selections &gt; ~/curr-pkgs.txt
          </example>
    </p>
    <p>
      アップグレード前に、あらゆる hold 状態を解除しておいたほうがよいでしょう。アップグレードに不可欠なパッケージが hold 
      状態にあるなら、アップグレードに失敗するでしょう。
    </p>
    <p>
      hold 状態にあるパッケージを記録するのに、<prgn>aptitude</prgn> は <prgn>apt-get</prgn> や 
      <prgn>dselect</prgn> とは異なる手法を用いることに注意してください。<prgn>aptitude</prgn> 
      では、以下のように実行して hold 状態にあるパッケージを検出できます:
     <example>
# aptitude search "~ahold" | grep "^.h"
          </example>
    </p>
    <p>
      <prgn>apt-get</prgn> でどのパッケージが hold 状態にあるのかを調べたければ、以下のように実行してください:
     <example>
# dpkg --get-selections | grep hold
          </example>
    </p>
    <p>
      パッケージをローカルで変更したり再コンパイルしており、パッケージの名前を変えたりバージョン番号に epoch 
      フィールドを追加していないなら、アップグレードしないよう hold 状態にしておかなければなりません。
    </p>
    <p>
      パッケージの "hold" 状態を <prgn>aptitude</prgn> で変更するには、以下のように実行してください ("hold" 
      状態を解除するには <tt>hold</tt> を <tt>unhold</tt> で置き換えます):
     <example>
# aptitude hold <var>package_name</var>
          </example>
    </p>
    <p>
      修正が必要なことがあるなら、<ref id="old-sources">で説明されているように 
      <file>sources.list</file> が &oldreleasename; を指定したままにしておくべきです。
    </p>
   </sect1>
   <sect1 id="backports">
    <heading>
      非公式なソースとバックポート
    </heading>
    <p>
      自分のシステムに非 Debian 
      パッケージがあるなら、依存関係の衝突のためアップグレード中に削除されるかもしれないことに注意すべきです。当該パッケージが 
      <file>/etc/apt/sources.list</file> 
      に特別なパッケージアーカイブを追加することでインストールされたのなら、そのアーカイブが &releasename; 
      用にコンパイルされたパッケージも提供しているかをチェックし、Debian パッケージ用のソース行と一緒にそのソース行も適切に修正すべきです。
    </p>
    <p>
      自分の &oldreleasename; システムに、Debian に<em>存在する</em>パッケージの 非公式にバックポートされた 
      "新" 
      バージョンをインストールしているユーザもいるでしょう。そのようなパッケージはファイルの衝突を引き起こすことにより、アップグレード中に問題を引き起こす場合がほとんどでしょう<footnote><p>Debian 
      のパッケージ管理システムは、対象パッケージを置き換えるように指定されていない限り、通常はあるパッケージが別のパッケージが所有しているファイルを削除したり置き換えることを許可しません</p></footnote>。ファイル衝突が発生したときの対処方法については、<ref 
      id="trouble">にいくつかの情報があります。
    </p>
   </sect1>
  </sect>
  <sect id="upgrade-process">
   <heading>
     APT の取得先 (ソース) の準備
   </heading>
   <p>
     アップグレードを始める前に、<package>apt</package> の設定ファイル 
     <file>/etc/apt/sources.list</file> を編集して、パッケージの取得先を決める必要があります。
   </p>
   <p>
     <package>apt</package> は、"<tt>deb</tt>" 
     行にあるすべてのパッケージを見比べ、最も大きなバージョン番号のパッケージをインストールします。同じパッケージが取得可能な場合は、先に現れた行を優先します 
     (つまり、複数のミラーを指定している場合は、最初にローカルのハードディスクを、次に CD-ROM を、最後に HTTP/FTP 
     ミラーを指定するといいでしょう)。
   </p>
   <p>
     一つのリリースを指定するのに、コードネーム (&oldreleasename; や &releasename;) と状態名 
     (旧安定版、安定版、テスト版、不安定版) 
     の両方ともがよく使われています。コードネームによる指定は、新しいリリースが出た時にびっくりせずに済むという利点があるため、ここではコードネームを使っています。もちろんこれは、自分でリリースアナウンスを注視する必要があることを意味してはいません。代わりに状態名を使っているなら、リリースされた直後に利用可能なパッケージの更新が急に増えたことに気づくでしょう。
   </p>
   <sect1 id="network">
    <heading>
      APT の Internet ソースの追加
    </heading>
    <p>
      デフォルトの設定では、メインの Debian 
      インターネットサーバを使ってインストールするようになっています。ですがここでは、<file>/etc/apt/sources.list</file> 
      を編集して、他のミラー (できればネットワーク的に最も近いミラー) を使うようにするほうがよいでしょう。
    </p>
    <p>
      Debian の HTTP/FTP ミラーのアドレスは、<url id="&url-debian-mirrors;"> 
      を参照してください。一般には HTTP ミラーのほうが FTP ミラーよりも高速です。
    </p>
    <p>
      例えば、一番近くにある Debian ミラーが <tt>&url-debian-mirror-eg;/</tt> 
      だったとしましょう。このミラーをウェブブラウザや FTP プログラムで見てみると、main 
      などのディレクトリが以下のように構成されていることがわかります。
     <example>
&url-debian-mirror-eg;/dists/&releasename;/main/binary-&architecture;/...
&url-debian-mirror-eg;/dists/&releasename;/contrib/binary-&architecture;/...
           </example>
    </p>
    <p>
      このミラーを <prgn>apt</prgn> で使うには、次の行を <file>sources.list</file> 
      ファイルに追加します。
     <example>
deb &url-debian-mirror-eg; &releasename; main contrib
           </example>
    </p>
    <p>
      `<tt>dists</tt>' 
      は書かなくても暗黙のうちに追加されます。そしてリリース名の後の引数がそれぞれ用いられ、複数のディレクトリの各々のパス名に展開されます。
    </p>
    <p>
      これらの新たなソースを追加したら、それまでの <file>sources.list</file> 中の "<tt>deb</tt>" 
      行の先頭にシャープ記号 (<tt>#</tt>) を置き、それらを無効にしてください。
    </p>
    <p>
      インストールに必要なパッケージのうち、ネットワークから取得されたものは、<file>/var/cache/apt/archives</file> 
      ディレクトリ (およびダウンロード中のものは <file>partial/</file> サブディレクトリ) 
      に置かれます。したがって、インストールを行う前には、十分な領域があるかどうか確認しなければなりません。割に大きめのインストールを行う場合には、ダウンロードデータとして少なくとも 
      300MB 程度を考慮しておきましょう。
    </p>
   </sect1>
   <sect1 id="localmirror">
    <heading>
      APT のローカルミラーソースの追加
    </heading>
    <p>
      HTTP や FTP のパッケージミラーを使うのではなく、ローカルディスク (多分 NFS マウントされたもの) 
      にあるミラーを使うよう、<file>/etc/apt/sources.list</file> を変更したいこともあるかもしれません。
    </p>
    <p>
      例えばパッケージのミラーが <file>/var/ftp/debian/</file> にあり、main 
      などのディレクトリが次のように配置されているとします。
     <example>
/var/ftp/debian/dists/&releasename;/main/binary-&architecture;/...
/var/ftp/debian/dists/&releasename;/contrib/binary-&architecture;/...
           </example>
    </p>
    <p>
      これを <prgn>apt</prgn> から使うには、次の行を <file>sources.list</file> ファイルに追加します。
     <example>
deb file:/var/ftp/debian &releasename; main contrib
           </example>
    </p>
    <p>
      `<tt>dists</tt>' 
      は書かなくても暗黙のうちに追加されます。そしてリリース名の後の引数がそれぞれ用いられ、複数のディレクトリの各々のパス名に展開されます。
    </p>
    <p>
      これらの新たなソースを追加したら、それまでの <file>sources.list</file> 中の "<tt>deb</tt>" 
      行の先頭にシャープ記号 (<tt>#</tt>) を置き、それらを無効にしてください。
    </p>
   </sect1>
   <sect1 id="cdroms">
    <heading>
      APT の CD-ROM/DVD ソースの追加
    </heading>
    <p>
      CD <em>だけ</em>でインストールをしたい場合は、<file>/etc/apt/sources.list</file> 中の 
      "<tt>deb</tt>" 行の先頭にシャープ記号 (<tt>#</tt>) を置き、それらを無効にしてください。
    </p>
    <p>
      CD-ROM ドライブをマウントポイント <file>/cdrom</file> にマウントすることを許可している行が 
      <file>/etc/fstab</file> にあるかどうかを確認してください (<prgn>apt-cdrom</prgn> 
      を使う場合は、マウントポイントを <file>/cdrom</file> 以外にはできません)。例えば 
      <file>/dev/hdc</file> が CD-ROM ドライブなら、<file>/etc/fstab</file> 
      には次のような行が必要です。
     <example>
/dev/hdc /cdrom auto defaults,noauto,ro 0 0
          </example>
    </p>
    <p>
      第 4 フィールドの <tt>defaults,noauto,ro</tt> の間にはスペースがあってはいけません。
    </p>
    <p>
      これが正しく機能しているか調べるには、CD を挿入して以下を実行してみてください。
     <example>
# mount /cdrom    # マウントポイントに CD をマウントします
# ls -alF /cdrom  # CD のルートディレクトリを表示します
# umount /cdrom   # CD をアンマウントします
          </example>
    </p>
    <p>
      問題がなければ
     <example>
# apt-cdrom add
          </example>
      を、Debian Binary CD-ROM それぞれに対して実行してください。各 CD に関するデータが APT 
      のデータベースに追加されます。
    </p>
   </sect1>
  </sect>
  <sect id="upgradingpackages">
   <heading>
     パッケージのアップグレード
   </heading>
   <p>
     以前の &debian; からのアップグレード方法のお勧めは、パッケージ管理ツール <prgn>aptitude</prgn> 
     を用いる方法です。このプログラムはパッケージに関する判断を <prgn>apt-get</prgn> よりも安全に行います。
   </p>
   <p>
     まず、必要なパーティションが read-write モードでマウントされていることを忘れずに確認しましょう (特にルートと 
     <file>/usr</file> の各パーティション)。以下のようなコマンドラインが使えます。
    <example>
# mount -o remount,rw /<var>mountpoint</var>
          </example>
   </p>
   <p>
     次に、(<file>/etc/apt/sources.list</file> 内の) APT ソース記述が 
     "<tt>&releasename;</tt>" か "<tt>stable</tt>" 
     のいずれかを指定していることを念入りにチェックすべきです。注意: CD-ROM のソース行は "<tt>unstable</tt>"; 
     を指定していることがよくあります。これは混乱の元ですが、変更しては<em>いけません</em>。
   </p>
   <p>
     ここで強くお勧めしたいのですが、<prgn>/usr/bin/script</prgn> 
     プログラムを使って、このアップグレード作業の記録を取るようにしましょう。こうすれば何らかの問題が生じたときに、何が起こったかを記録しておくことができ、バグ報告の必要が生じた場合に、その正確な情報を提供できます。記録を開始するには次のように入力します。
    <example>
# script -a ~/upgrade-to-&releasename;.typescript
          </example>
     typescript ファイルは <file>/tmp</file> や <file>/var/tmp</file> 
     のような一時ディレクトリには置かないでください (これらのディレクトリのファイルはアップグレードや再起動の際に削除されることがありますから)。
   </p>
   <p>
     typescript 
     はまた、スクロールしてスクリーンから消えた情報を見ることができるようにもしてくれるでしょう。(<tt>Alt-F2</tt> を使って) 2 
     番の仮想コンソールに切り替えて、ログインしてから <tt>less 
     ~root/upgrade-to-&releasename;.typescript</tt> と実行すれば当該ファイルを見ることができます。
   </p>
   <p>
     アップグレード完了後に <prgn>script</prgn> を停止するには、プロンプトから <tt>exit</tt> 
     と入力してください。
   </p>
   <sect1 id="updating_lists">
    <heading>
      パッケージリストの更新
    </heading>
    <p>
      まず、新規リリース用として入手可能なパッケージの一覧を取得する必要があります。次のように実行してください<footnote><p>&oldreleasename; 
      版の <prgn>aptitude</prgn> では新しいソースを <file>sources.list</file> 
      に追加すると失敗するかもしれないので、ここでは <prgn>apt-get</prgn> を使います</p></footnote>:
    </p>
    <p>
     <example>
# apt-get update
	  </example>
    </p>
   </sect1>
   <sect1 id="upgrading_aptitude">
    <heading>
      aptitude のアップグレード
    </heading>
    <p>
      アップグレード中の複雑な依存関係の解決には、<prgn>apt-get</prgn> や &oldreleasename; の 
      <prgn>aptitude</prgn> よりも、&releasename; 版の <prgn>aptitude</prgn> 
      のほうが優れていることがアップグレードのテスト中に判明しました。したがって、次のように実行してまずアップグレードすべきです:
     <example>
# aptitude install aptitude
          </example>
    </p>
    <p>
      発生した変更点の一覧が表示され、承認を求めてくるでしょう。承認する前に提示された変更点、特にアップグレードによって削除されるであろうパッケージに注意を払ってください。
    </p>
    <p>
      非常に多くのパッケージが削除対象としてリストアップされてしまう場合があります。この場合、<package>aptitude</package> 
      とともに事前にアップグレードするパッケージを選択しておくと、リストアップされるパッケージを減らせるかもしれません。わかりやすい例を挙げてみましょう 
      - すでに KDE がインストールされたシステムのアップグレードテスト中に、大量の KDE パッケージや perl 
      が削除対象になることがありました。ここでは <tt>install aptitude</tt> ではなく <tt>install 
      aptitude perl</tt> とすると、うまくいくことがわかりました。
    </p>
   </sect1>
   <sect1 id="upgrading_doc-base">
    <heading>
      doc-base のアップグレード
    </heading>
    <p>
      <em><package>doc-base</package> 
      をインストール</em>しているなら、残りのシステムに先立ってアップグレードしなければなりません。この理由は、同時に 
      <package>perl</package> 
      がアップグレードされると失敗する可能性があるからです。同パッケージがインストールされているかどうかを知るには、次のように実行してください:
    </p>
    <p>
     <example>
# dpkg -l doc-base
          </example>
    </p>
    <p>
      "i" で始まる行が出力されればインストールされているので、以降の作業を行う前にアップグレードしなければなりません。
    </p>
    <p>
     <example>
# aptitude install doc-base
          </example>
    </p>
   </sect1>
   <sect1 id="upgrading_other">
    <heading>
      残りのシステムのアップグレード
    </heading>
    <p>
      さて、アップグレードの主要部分を続行する準備が整いました。以下のコマンドを実行してください:
    </p>
    <p>
     <example>
# aptitude -f --with-recommends dist-upgrade
	  </example>
    </p>
    <p>
      これによってシステムの完全なアップグレードを行います。すなわちすべてのパッケージの最新版を入手し、パッケージのリリースが変わったことによって生じる依存関係の変更すべてを解決します。必要に応じて、新しいパッケージ 
      (通常は更新版のライブラリや、名前の変わったパッケージ) をインストールしたり、衝突している古いパッケージ 
      (<package>console-tools-libs</package> など) を削除したりもします。
    </p>
    <p>
      CD-ROM のセットからアップグレードする場合には、アップグレード作業の最中に CD を交換するよう、数回指定されることになります。同じ 
      CD を複数回入れなければならないかもしれません。これはパッケージ間の相互依存関係のせいで、これらのパッケージが別々の CD 
      に入っていることもあるからです。
    </p>
    <p>
      現在インストールされているパッケージの更新版が、他のパッケージのインストール状態を変更しなければならないような場合には、そのパッケージは現在のバージョンのままになります 
      ("held back" と表示されます)。この状態は、<prgn>aptitude</prgn> 
      でこれらのパッケージをインストール対象として選択するか、<tt>aptitude -f install 
      <var>package</var></tt> を試すかのどちらかで解決できます。
    </p>
    <p>
      <tt>--fix-broken</tt> (または単に <tt>-f</tt>) 
      オプションを与えると、<package>apt</package> 
      はシステムに存在する壊れた依存関係を修復しようとします。<package>apt</package> 
      は、壊れたパッケージ依存関係がシステムに存在するのを許しません。
    </p>
   </sect1>
   <sect1 id="trouble">
    <heading>
      アップグレード中の注意点
    </heading>
    <p>
      <ref id="information">で明示的に述べられている問題もありますので、そちらも参照してください。
    </p>
    <p>
      <prgn>aptitude</prgn>、<prgn>apt-get</prgn>、<prgn>dpkg</prgn> 
      の操作中に次のようなエラーが出た場合、
     <example>
E: Dynamic MMap ran out of room
</example>
      デフォルトのキャッシュ容量では不十分だということです。これを解決するには、<file>/etc/apt/sources.list</file> 
      から不要な行を削除もしくはコメントアウトするか、キャッシュサイズを増やします。キャッシュサイズを増やすには、<file>/etc/apt/apt.conf</file> 
      に <tt>APT::Cache-Limit</tt> 
      を設定します。以下のコマンドを実行すれば、アップグレードするには十分な値が設定されます:
     <example>
# echo 'APT::Cache-Limit "12500000";' >> /etc/apt/apt.conf
</example>
      ここでは、<file>/etc/apt/apt.conf</file> ファイル内にまだこの値を設定していない場合を想定しています。
    </p>
    <p>
      場合によっては衝突や依存関係のループのために、APT の APT::Force-LoopBreak 
      オプションを有効にして、必須パッケージを一時的に削除しなければならないかもしれません。その場合 <prgn>aptitude</prgn> 
      はこのことを警告してアップグレードを中断します。<prgn>aptitude</prgn> のコマンドラインに <tt>-o 
      APT::Force-LoopBreak=1</tt> を指定すれば、この状態を回避できます。
    </p>
    <p>
      システムの依存関係の構造が非常に混乱していて、手動での介入が必要となることもあります。通常これは <prgn>aptitude</prgn> 
      を用いるか、あるいは
     <example>
# dpkg --remove <var>package_name</var>
          </example>
      として、目ざわりなパッケージを消す作業になります。または次の作業でもよいかもしれません。
     <example>
# aptitude --fix-broken install
# dpkg --configure --pending
          </example>
    </p>
    <p>
      極端な場合には、コマンドラインから次のように入力して、再インストールしなければならないかもしれません。
     <example>
# dpkg --install <var>/path/to/package_name.deb</var>
          </example>
    </p>
    <p>
      「純粋な」&oldreleasename; 
      システムからのアップグレードでは、ファイルの競合は起こらないはずですが、非公式なバックポートパッケージをインストールしているなら起こるかもしれません。ファイルの競合が起こると、次のようなエラーになります:
     <example>
Unpacking replacement <var>&lt;package-foo&gt;</var> ...
dpkg: error processing <var>&lt;package-name-for-foo&gt;</var> (--unpack):
 trying to overwrite `<var>&lt;some-file-name&gt;</var>',
 which is also in package `<var>&lt;package-bar&gt;</var>
          </example>
    </p>
    <p>
      ファイルの競合を解消するには、エラーメッセージの<em>最後の</em>行に表示されたパッケージを強制的に削除します:
     <example>
# dpkg -r --force-depends <var>package_name</var>
          </example>
    </p>
    <p>
      問題が修正できたら、先に示したように <tt>aptitude</tt> コマンドを繰り返し入力すれば、アップグレードを再開できます。
    </p>
    <p>
      アップグレードの最中に、いくつかのパッケージの設定・再設定に関する質問が表示されます。<file>/etc/init.d</file> と 
      <file>/etc/terminfo</file> ディレクトリに置かれるファイルと 
      <file>/etc/manpath.config</file> 
      に関しては、パッケージメンテナのバージョンに置き換えるようにしてください。システムの整合性を保つためには `yes' 
      と答えることが必要になります。古いバージョンも <tt>.dpkg-old</tt> 
      という拡張子で保存されていますので、戻すのはいつでもできます。
    </p>
    <p>
      どうすればよいかわからなくなったら、そのパッケージやファイルの名前を書き留めておいて、その問題解決は後回しにしましょう。typescript 
      ファイルを検索すれば、アップグレードの最中に画面に表示された情報を見直すこともできます。
    </p>
   </sect1>
  </sect>
  <sect id="newkernel">
   <heading>
     カーネルと関連パッケージのアップグレード
   </heading>
   <p>
     Linux 
     カーネルは、他のパッケージとは別にアップグレードすべきです。そのようにしたい場合は、<package>linux-image-*</package> 
     パッケージのどれか一つをインストールするか、カスタマイズしたカーネルをソースからコンパイルします。カーネルのアップグレードに伴って生じる可能性がある問題に関しては、本セクションの情報を参照してください。
   </p>
   <p>
     名前空間を整理するため、Linux カーネルパッケージは (kernel-* から) linux-* に名前が変わりました。
   </p>
   <p>
     Linux カーネル安定版の 1 つ前の系列である 2.4 系は etch ではもうサポートされていないので、2.4 
     系のカーネルを使用中の場合は 2.6 系のカーネルにアップグレードすべきです。2.2 
     系のカーネルを使用中の場合は、その他のパッケージをアップグレードする前に、(最低でも) 2.4 系の、できれば 2.6 
     系のカーネルにアップグレードしなければなりません。2.6 系へのアップグレードに伴う問題がいくつか、(FIXME - the link is 
     partly broken) に記載されています。
   </p>
   <sect1>
    <heading>
      initrd-tools の廃止
    </heading>
    <p>
      <prgn>initrd-tools</prgn> はもうサポートされなくなり、<prgn>initramfs-tools</prgn> と 
      <prgn>yaird</prgn> がそれにとって代わりました。etch のカーネルにアップグレードすると、デフォルトでは 
      <prgn>initramfs-tools</prgn> がインストールされます。初めて 2.4 系カーネルから 2.6 
      系カーネルにアップグレードする場合は、<prgn>initramfs-tools</prgn> を使用しなければなりません。2.2 系や 
      2.4 系のカーネルの上で <prgn>yaird</prgn> を実行すると、linux-image-2.6 
      のインストールは失敗に終わります。
    </p>
   </sect1>
   <sect1>
    <heading>
      devfs の廃止
    </heading>
    <p>
      etch では、<prgn>devfs</prgn> のサポートはもう提供していません。ユーザは、動的な <file>/dev</file> 
      の管理に udev を使用するよう切り換えることが推奨されています。Debian のカーネルには <prgn>devfs</prgn> 
      のサポートがもう含まれていないので、<prgn>devfs</prgn> ユーザは、etch 
      のカーネルにアップグレードする前に手作業でシステムを切り換える必要があります。
    </p>
    <p>
      <file>/proc/mounts</file> に 'devfs' という文字列が見つかる場合、おそらく devfs 
      が使用されています。devfs スタイルの名前を参照している設定ファイルはすべて、udev 
      スタイルの名前を使用するよう調整する必要があります。devfs 
      スタイルのデバイス名を参照している可能性が最も高いファイルには、<file>/etc/fstab</file> や 
      <file>/etc/lilo.conf</file>、<file>/boot/grub/menu.lst</file> などがあります。
    </p>
    <p>
      生じる可能性がある問題については、さらに詳しい情報がバグ報告 <url id="http://bugs.debian.org/341152" 
      name="#351152"> にあります。
    </p>
   </sect1>
    <![ %i386-amd64-ia64 [

   <sect1>
    <heading>
      標準のカーネルに SMP の能力が含まれます
    </heading>
    <p>
      マルチプロセッサシステムには、Linux カーネルの *-smp フレーバーはもう必要ありません。etch 以降の 
      amd64、i386、ia64 では、-smp という接尾辞のない linux-image 
      パッケージにマルチプロセッサシステム向けのサポートが追加されました。
    </p>
   </sect1>
    ]]><![ %i386 [

   <sect1>
    <heading>
      386 カーネルフレーバーの廃止
    </heading>
    <p>
      etch では、i386 の 80386 サブアーキテクチャのサポートがなくなりました。386 
      カーネルフレーバーはもうサポートされず、新しい 486 フレーバーによって置き換えられました。
    </p>
   </sect1>
    ]]>

   <sect1>
    <heading>
      デバイスの整列順序の変更
    </heading>
    <p>
      etch 
      は、以前のリリースよりも強固なハードウェア検出機構を特徴とします。しかし、それによってシステム上のデバイス検出順が変わり、それがデバイス名の割り当て順に影響するかもしれません。例えば、2 
      つの異なるドライバと結び付いた 2 つのネットワークアダプタがある場合、eth0 と eth1 
      が参照するデバイスは入れ替わるかもしれません。この新しい機構によって、例えば実行中の &releasename; 
      システムでイーサネットアダプタを交換するなどした場合、新しいアダプタにも新しいインタフェース名が割り当てられるようになる、ということに注意してください。
    </p>
    <p>
      ネットワークデバイスについては、<prgn>ifrename</prgn> 
      ユーティリティを用いて起動時に物理デバイスを特定の名前に結び付けることで、この順序の変更を防げます。さらに詳しくは、<manref 
      section="8" name="ifrename"> と <manref section="5" name="iftab"> 
      を参照してください。
    </p>
    <p>
      ストレージデバイスについては、<prgn>initramfs-tools</prgn> 
      を用いて、<prgn>initramfs-tools</prgn> 
      が現在と同じ順序でストレージデバイスドライバモジュールをロードするように設定することで、この順序の変更を防げます。そうするには、lsmod 
      の出力に目を通し、システム上のストレージモジュールがロードされた順序を特定してください。lsmod 
      は、ロードされた順序とは逆の順序でモジュールをリストアップします。つまり、リストの最初のモジュールは最後にロードされていたものです。
    </p>
    <p>
      しかし、最初に起動した後にモジュールを削除したりロードしなおしたりすると、この順序にも影響が出ます。また、カーネルには静的にリンクされたドライバが含まれているかもしれず、そのようなドライバの名前は 
      <prgn>lsmod</prgn> の出力に現れません。<file>/var/log/kern.log</file> や 
      <prgn>dmesg</prgn> の出力に目を通すと、これらのドライバの名前やロード順を解読できるかもしれません。
    </p>
    <p>
      これらのモジュール名を、起動時にロードされるべき順序で <file>/etc/initramfs-tools/modules</file> 
      に追加してください。モジュール名の一部は sarge と etch では異なるかもしれません。例えば、sym53c8xx_2 は 
      sym53c8xx になりました。
    </p>
    <p>
      その上で <prgn>update-initramfs -k all</prgn> を実行し、initramfs 
      イメージを再生成する必要があります。
    </p>
    <p>
      一旦 etch のカーネルと udev 
      を使用し始めたら、ドライバのロード順に依存しないエイリアスでディスクにアクセスするよう、システムの設定を変更してもよいでしょう。これらのエイリアスは 
      <file>/dev/disk/</file> 階層にあります。
    </p>
   </sect1>
    <![ %ia64 [

   <sect1>
    <heading>
      シリアルデバイスの順序の変更
    </heading>
    <p>
      HP のマシンで MP のシリアルコンソールポート (三頭ケーブルに "console" というラベルのついたコネクタ) 
      を使用している場合、このカーネルのアップグレードでコンソールが壊れます!
    </p>
    <p>
      アップグレード前に以下の情報を読んでください。
    </p>
    <p>
     <list>
      <item>
       <p>
         コンソールデバイスが <file>ttyS0</file> から 
         <file>ttyS1</file>、<file>ttyS2</file>、<file>ttyS3</file> 
         のいずれかに変更されます。したがって、
        <list>
         <item>
          <p>
            <file>/etc/inittab</file> を編集し、<file>/dev/ttyS1</file> 
            (rx4640、rx5670、rx7620、rx8620、Superdome)、<file>/dev/ttyS2</file> 
            (rx1600)、<file>/dev/ttyS3</file> (rx2600) のいずれかの getty 
            エントリを追加してください。
          </p>
         </item>
         <item>
          <p>
            <file>/etc/securetty</file> 
            を編集し、<file>ttyS1</file>、<file>ttyS2</file>、<file>ttyS3</file> 
            のいずれかを追加してください。
          </p>
         </item>
         <item>
          <p>
            これからも古いカーネルを起動できるよう、<file>/etc/inittab</file> と 
            <file>/etc/securetty</file> の既存の <file>ttyS0</file> 
            エントリはそのまま残しておいてください。
          </p>
         </item>
        </list>
       </p>
      </item>
      <item>
       <p>
         <file>/etc/elilo.conf</file> を編集して "console=" 引数を全て削除してください。
       </p>
      </item>
      <item>
       <p>
         elilo を実行し、新しい設定のブートローダをインストールしてください。
       </p>
      </item>
      <item>
       <p>
         再起動し、EFI 起動オプションメンテナンスメニューを用いてコンソール出力・入力・標準エラー出力にデバイスを 1 
         つだけ選択してください。その上で、コールドリセットを行って変更を有効にしてください。
       </p>
       <p>
         MP コンソールについては、"Acpi(HWP0002,700)/Pci(...)/Uart" 
         をパスに含むデバイスを選択するよう注意してください。
       </p>
      </item>
     </list>
    </p>
    <p>
      これらの変更に関する詳細情報や問題解決のヒントは <url 
      id="http://lists.debian.org/debian-ia64/2005/01/msg00008.html"> 
      で閲覧可能です。
    </p>
   </sect1>
    ]]>

   <sect1>
    <heading>
      カーネルのアップグレード
    </heading>
    <p>
      &oldreleasename; から &releasename; への dist-upgrade を実行する際には、新しい 
      linux-image-2.6-* メタパッケージをインストールすることを強くお勧めします。このパッケージは、dist-upgrade 
      の過程で自動的にインストールされるかもしれません。次のように実行すると、このパッケージがインストールされたか確認できます。
     <example>
# dpkg -l | grep '^ii  linux-image'
          </example>
    </p>
    <p>
      何も出力されない場合は、新しい linux-image パッケージを手作業でインストールする必要があります。利用可能な 
      linux-image-2.6 メタパッケージの一覧を見るには次のように実行してください。
     <example>
# apt-cache search linux-image-2.6- | grep -v transition
          </example>
    </p>
    <p>
      どのパッケージを選択すればよいのか心配ならば、<prgn>uname -r</prgn> 
      を実行し、似た名前をもつパッケージを探してください。例えば、コマンドの結果が '2.4.27-3-686' の場合は 
      linux-image-2.6-686 
      をインストールすることをお勧めします。利用可能なパッケージのうち最良のものを選ぶ手助けとして、次のように apt-cache 
      を用いて各パッケージのパッケージ説明・詳細版を見てもよいでしょう。
     <example>
# apt-cache show linux-image-2.6-686
          </example>
    </p>
    <p>
      インストールするカーネルイメージが決まったら、<tt>aptitude install</tt> 
      でインストールします。新しいカーネルがインストールされたら、それを有効にするために再起動してください。
    </p>
    <p>
      もうちょっと冒険したい人には、自分のカスタムカーネルをコンパイルする方法も &debian; 
      は提供しています。<package>kernel-package</package> 
      をインストールして、<file>/usr/share/doc/kernel-package</file> の文書を読んでみてください。
    </p>
   </sect1>
  </sect>
  <sect id="nownownow">
   <heading>
     再起動の前にすべきこと
   </heading>
   <p>
     <tt>aptitude dist-upgrade</tt> 
     が終了したら、「公式」にはアップグレードは終了したことになります。しかし次に再起動する<em>前に</em>、面倒を見てやらなければならないことがいくつかあります。
   </p>
   <p>
     X Window System 
     関連のパッケージのアップグレードに関する詳しい情報は、<file>/usr/share/doc/xfree86-common/README.Debian-upgrade.gz</file> 
     を読んでください。これは以前の Debian リリースすべてのユーザに当てはまります。要するに、読め、ということです。
   </p>
   <sect1 id="mdadm">
    <heading>
      mdadm のアップグレード
    </heading>
    <p>
      mdadm は、MD アレイ (RAID) を initial ramdisk 
      から再構築したりシステム初期化シーケンス中に再構築するのに設定ファイルを必要とするようになりました。パッケージのアップグレードを終えた後、<strong>再起動する前に</strong>必ず 
      <file>/usr/share/doc/mdadm/README.upgrading-2.5.3.gz</file> 
      に書かれている説明を読み、それに従ってください。このファイルの最新版は <url 
      id="http://svn.debian.org/wsvn/pkg-mdadm/mdadm/trunk/debian/README.upgrading-2.5.3?op=file"> 
      から入手可能です。問題が生じた場合は参考にしてください。
    </p>
   </sect1>
  </sect>
  <sect id="obsolete">
   <heading>
     時代遅れ (Obsolete) なパッケージ
   </heading>
   <p>
     数千個の新規パッケージが導入された一方で、&releasename; では &oldreleasename; にはあった 2000 
     個以上の古いパッケージが破棄されたり削除されてもいます。これら時代遅れのパッケージをアップグレードする手段は提供されていません。時代遅れのパッケージを使い続けても構いませんが、Debian 
     プロジェクトは通常 &releasename; がリリースされてから 1 
     年後に<footnote><p>あるいはその期間中に別のリリースが出ない限り。ある時点では、通常 2 
     個のみの安定版リリースがサポートされています。</p></footnote>そのようなパッケージへのセキュリティサポートを打ち切り、その後は他のサポートも提供されないのが常です。もし存在するのなら、利用可能な代替品に置き換えることを推奨します。
   </p>
   <p>
     あるパッケージが本ディストリビューションから削除された理由は、数多くあります - 
     上流ではもはや保守されていないため、そのパッケージを保守することに興味を抱く Debian 
     開発者がもはやいないため、提供していた機能が別のソフトウェア (あるいは新バージョン) に取って代わられたため、バグのために 
     &releasename; にはもはや適さないとみなされたため、などです。最後の場合では、当該パッケージが "不安定版" 
     ディストリビューション内には存在していることがあります。
   </p>
   <p>
     更新されたシステム内のどのパッケージが "時代遅れ" 
     なのかを検出するのは、パッケージ管理用フロントエンドが当該パッケージにその旨のマークを付けてくれるので簡単です。<prgn>aptitude</prgn> 
     を使っているのなら、当該パッケージが "Obsolete and Locally Created Packages" 
     欄に列記されているのに気づくでしょう。<prgn>dselect</prgn> 
     も同じようなセクションを提供しますが、表示される一覧はわずかに異なっています。さらに、&oldreleasename; 
     で手作業でパッケージをインストールするのに <prgn>aptitude</prgn> 
     を使っていたのなら、手作業でインストールされたパッケージの記録が取られており、依存元パッケージが削除されればもはや不要となる依存関係のみによって導入されたパッケージに時代遅れのマークを付けることができるでしょう。また 
     <prgn>aptitude</prgn> は、<prgn>deborphan</prgn> 
     とは異なり、手作業でインストールしたパッケージには時代遅れのマークを付けません 
     (依存関係によって自動でインストールされたものにはマークを付けます)。
   </p>
   <p>
     時代遅れのパッケージを見つけるのに使える追加ツールとしては、以下のものがあります - <prgn>deborphan</prgn> や 
     <prgn>debfoster</prgn>、<prgn>cruft</prgn>。<prgn>deborphan</prgn> 
     を強く推奨しますが、同プログラムは (デフォルトモードでは) 時代遅れのライブラリ - "libs" や "oldlibs" 
     セクション内にあり、他のパッケージに使われていないパッケージ - 
     しか報告しません。これらのプログラムが表示したパッケージをやみくもに削除しないでください。特に、誤報しやすい非デフォルトのオプションを積極的に使っている場合はなおさらです。実際に削除する前に、削除を提案されたパッケージを手作業で調査 
     (その中身やサイズ、説明文など) することを強く推奨します。
   </p>
   <p>
     <url id="&url-bts;" name="Debian 
     バグ追跡システム">は、パッケージが削除された理由についての情報を提供してくれることがよくあります。あるパッケージ自体についてのアーカイブ化されたバグ報告と、<url 
     id="&url-bts;cgi-bin/pkgreport.cgi?pkg=ftp.debian.org&#38;archive=yes" 
     name="ftp.debian.org pseudo-package"> のアーカイブ化されたバグ報告の両方を調査すべきです。
   </p>
   <sect1 id="dummy">
    <heading>
      ダミーパッケージ
    </heading>
    <p>
      &oldreleasename; のいくつかのパッケージは &releasename; 
      では複数のパッケージに分割されていますが、これは大半がシステムの保守性を改善するためです。この場合におけるアップグレードを容易にするために、&releasename; 
      はしばしば "ダミーの" パッケージ - &oldreleasename; 
      での古いパッケージと同じ名前で、新規パッケージを導入するための依存関係を備えた空のパッケージ - を提供しています。これらの "ダミー" 
      パッケージはアップグレード後は Obsolete 扱いとされ、安全に削除することができます。
    </p>
    <p>
      大半の (すべてではない) 
      ダミーパッケージの説明文には、その目的が記されています。しかしながらダミーパッケージの説明文は統一されていないため、自分のシステム内のダミーパッケージを検出するために 
      <prgn>deborphan</prgn> を <tt>--guess</tt> 
      オプション付で使うこともできます。いくつかのダミーパッケージは、アップグレード後に削除されることを意図しておらず、代わりに時間とともに変化するプログラムの利用可能な最新バージョンの記録用として使われることに注意してください。
    </p>
   </sect1>
  </sect>
 </chapt>
 <chapt id="information">
  <heading>
    &releasename; で知っておくべき問題点
  </heading>
  <sect id="problems">
   <heading>
     生じうる問題
   </heading>
   <p>
     変化には当然のように副作用がつきもので、どこか他の場所でバグを出してしまうこともあります。ここには現時点で私たちが知っている問題点を記載しています。正誤表・関連パッケージの付属文書・バグ報告や、<ref 
     id="morereading">で触れられているその他の情報も読んでください。
   </p>
   <sect1 id="window-scaling">
    <heading>
      ネットワーク上のあるサイトに TCP が届かなくなりました
    </heading>
    <p>
      2.6.17 以降の Linux は、RFC 1323 で指定された TCP 
      ウィンドウのスケーリングを積極的に使用しています。サーバによってはこれに対しておかしな挙動を示し、ウィンドウサイズを誤って認識することがあります。さらに詳しくはバグ 
      <url id="http://bugs.debian.org/381262" name="#381262"> と <url 
      id="http://bugs.debian.org/395066" name="#395066"> を参照してください。
    </p>
   </sect1>
   <sect1 id="poweroff">
    <heading>
      自動電源オフが機能しなくなりました
    </heading>
    <p>
      一部の古いシステムでは、もはや <prgn>shutdown -h</prgn> で電源がオフになりません 
      (しかしシステムの停止だけはします)。これは、電源オフに apm を使用する必要があるためです。例えば grub や lilo 
      の設定ファイル内でカーネルのコマンドラインに <tt>acpi=off apm=power_off</tt> 
      を追加すれば、この問題は解決するでしょう。さらに詳しくはバグ <url id="http://bugs.debian.org/390547" 
      name="#390547"> を参照してください。
    </p>
   </sect1>
   <sect1 id="apt-pdiff">
    <heading>
      Apt が更新時に小さなファイルをダウンロードするようになりました
    </heading>
    <p>
      Packages ファイルの差分のみをダウンロードするようなサポートが <prgn>apt</prgn> 
      に加えられました。この機能は、ネットワーク接続が大変な人々には便利ですが、非常に近くにミラーがある人々はこの機能を無効にしたいと思うかもしれません。無効にするには、<file>/etc/apt/apt.conf</file> 
      に <tt>Acquire::Pdiffs "false";</tt> を追加してください。
    </p>
   </sect1>
  </sect>
   <![ %defaulted-2.4 [

  <sect id="upgrade-to-2.6">
   <heading>
     2.6 系カーネルへのアップグレード
   </heading>
   <p>
     2.6 系カーネルは、2.4 
     系カーネルから大きな変更が加えられています。モジュールの名称が変更され、多くのドライバが部分的あるいはほとんど完全に書き換えられました。したがって、以前のバージョンから 
     2.6 
     系カーネルへのアップグレードは、それほど簡単に済ませられるものではありません。このセクションは、直面するかもしれない問題のいくつかを知っておいてもらおうというのが狙いです。
   </p>
   <p>
     それゆえ、&oldreleasename; から &releasename; へのアップグレードの一部として 2.6 
     系カーネルへのアップグレードを行うのはお勧めしません。まずは、システムが &releasename; の 2.4 系 
     (もしくはそれ以前のバージョンの) カーネルで正しく動作するのを確認すべきです。その後、別の課題として、2.6 
     系カーネルへのアップグレードを実施してください。
   </p>
   <p>
     ソースから自分でカーネルをコンパイルしている人は、2.6 
     系カーネルで再起動する前に、<package>module-init-tools</package> 
     がインストールされているのを確認してください。このパッケージは、<package>modutils</package> を 2.6 
     系カーネル用のものに置き換えます。Debian の <package>linux-image</package> 
     パッケージのどれかを使っている場合は、依存関係により自動的にこのパッケージが入っているはずです。
   </p>
   <p>
     <em>LVM</em> を使っている場合は、2.6 系カーネルで再起動する前に <package>lvm2</package> 
     パッケージもインストールしてください。2.6 系カーネルは LVM1 を直接はサポートしていません。LVM1 
     のボリュームにアクセスするには、<package>lvm2</package> の互換レイヤ (dm-mod モジュール) 
     が使われます。初期化スクリプトがどのバージョンのカーネルが使われているかを検出し、適切なバージョンを実行するので、<package>lvm10</package> 
     はインストールしたままでも構いません。
   </p>
   <p>
     <file>/etc/modules</file> ファイル (システム起動時にロードされるモジュールの一覧) 
     内に記述をしているなら、いくつかのモジュール名が変わっているかもしれないことに注意してください。変わっている場合は、ファイル内の記述を新しいモジュール名で更新しなければならないでしょう。
   </p>
    <![ %i386-amd64 [

   <p>
     いくつかの SATA ディスクコントローラでは、ドライブやそのパーティションに割り当てられたデバイスが 
     <file>/dev/hdX</file> から <file>/dev/sdX</file> 
     に変わっているかもしれません。変わっている場合は、<file>/etc/fstab</file> 
     とブートローダ設定を適切に修正しなければならないでしょう。これらの修正が正確に行なわれないと、システムは正しく起動しないでしょう。
   </p>
    ]]>

   <p>
     2.6 
     系カーネルをインストールした後、再起動を行う前に、復旧手段を用意するようにしてください。まず、ブートローダの設定に新しいカーネルと稼働中の古い 
     2.4 
     系カーネルの両方の記述があることを確認してください。ブートローダの設定が間違っていたために古いカーネルで起動できなくなる場合に備え、"レスキュー用の" 
     フロッピーか CD-ROM が手元にあることも確認しておくべきでしょう。
   </p>
    <![ %not-s390 [<![ %not-amd64 [

   <sect1 id="2.6-keyboard">
    <heading>
      キーボードの設定
    </heading>
    <p>
      2.6 系カーネルでの最も劇的な変化は、入力レイヤの基本部分の変更です。この変更により、すべてのキーボードは「ふつうの」PC 
      キーボードのように扱えます。これは、現在異なるタイプのキーボード (例えば USB-MAC や Sun キーボード) 
      を選択している場合、新しい 2.6 系カーネルで再起動後にキーボードがまったく動かない状態になってしまう可能性が非常に高いということです。
    </p>
    <p>
      別のシステムからそのマシンへ SSH を使ってログインできるのなら、<tt>dpkg-reconfigure 
      console-data</tt> と実行して "Select keymap from full list" オプションを選び、そこから 
      "pc" キーボードを選択することでこの問題を解決できます。
    </p>
    <p>
      コンソールで使っているキーボードが影響を受けたということは、X Window System 
      のキーボードも再度設定する必要があるでしょう。<tt>dpkg-reconfigure xserver-xfree86</tt> 
      を実行するか、<file>/etc/X11/XF86Config-4</file> を直接編集することになります。<ref 
      id="nownownow">で参照されている文書も読んでおいてください。
    </p>
     <![ %i386 [

    <p>
      この問題は、すべての PS/2 および大半の USB キーボードがすでに "normal" PC キーボードとして設定されている 
      &arch-title; アーキテクチャでは影響がないでしょう。
    </p>
     ]]><![ %not-i386 [

    <p>
      USB キーボードを使っているのなら、"normal" PC キーボードか USB-MAC 
      キーボードとして設定されているでしょう。前者の場合、この問題による影響はありません。
    </p>
     ]]>

   </sect1>
    ]]>

   <sect1 id="2.6-mouse">
    <heading>
      マウスの設定
    </heading>
    <p>
      これも入力レイヤの変更によるものですが、2.6 系カーネルへアップグレードした後でマウスが使えなくなったなら、X Window System 
      と <package>gpm</package> 
      を再設定する必要があるでしょう。よくある原因は、マウスからのデータを受け取るデバイスが変わったせいです。別のモジュールをロードする必要もあるかもしれません。
    </p>
     <![ %sparc [

    <p>
      現在、X で <file>/dev/sunmouse</file> を設定しているなら、おそらく 
      <file>/dev/psaux</file> へ変更する必要があります。
    </p>
     ]]>

   </sect1>
   <sect1 id="2.6-sound">
    <heading>
      サウンドの設定
    </heading>
    <p>
      2.6 カーネル用としては、OSS サウンドドライバよりも ALSA サウンドドライバが推奨されます。ALSA 
      サウンドドライバは、デフォルトではモジュールとして提供されます。サウンドを鳴らすには、あなたのサウンドハードウェアに合ったモジュールがロードされる必要があります。一般に該当モジュールがあり、<package>alsa-base</package> 
      に加えて <package>hotplug</package> パッケージか <package>discover</package> 
      パッケージのいずれかがインストールされていれば、自動的にロードされます。<package>alsa-base</package> 
      パッケージはまた、OSS モジュールが <prgn>hotplug</prgn> や <prgn>discover</prgn> 
      によってロードされないようそれらを "ブラックリスト化" します。<file>/etc/modules</file> 内に OSS 
      モジュールの記述があるなら、それらを削除すべきです。
    </p>
   </sect1>
    ]]>

   <sect1 id="2.6-udev">
    <heading>
      2.6 系への変更で udev が起動
    </heading>
    <p>
      <package>udev</package> は、devfs のユーザ空間での実装です。これは <file>/dev</file> 
      ディレクトリにマウントされ、カーネルモジュールがロード・アンロードされるときにデバイスファイルをディレクトリに動的に作成・削除します。また、新しいデバイスの検出は、<package>hotplug</package> 
      とともに動作するようになっています。<package>udev</package> は 2.6 系カーネルでしか動作しません。
    </p>
    <p>
      2.6 系カーネルでは、initrd の生成にデフォルトで <package>initramfs-tools</package> 
      が使われます。このパッケージの依存関係により <package>udev</package> 
      が自動的にインストールされます。そのため、2.6 系カーネルへのアップグレードにより、通常は <package>udev</package> 
      が動くようになります。
    </p>
    <p>
      <package>udev</package> 
      は広範囲にわたってテストされていますが、いくつかのデバイスでは若干の修正が必要になるという問題があるかもしれません。たいていの問題は、デバイスファイルの権限や所有者が変更されるというものです。(<file>/dev/video</file> 
      や <file>/dev/radio</file> など) デフォルトではデバイスファイルが作成されない場合もあります。
    </p>
    <p>
      <package>udev</package> は、これらの問題に対処する設定の仕組みを提供しています。詳しくは、<manref 
      section="8" name="udev"> や <file>/etc/udev</file> を見てください。
    </p>
   </sect1>
  </sect>
   ]]>

  <sect id="xorg">
   <heading>
     XFree86 から X.Org への移行
   </heading>
   <p>
     X.Org への移行には構造的変化が含まれています。インストール済みのパッケージがすべて Debian 製のパッケージで Etch 
     にも含まれている場合、アップグレードは自動的に行われるはずです。しかし、知っておくべき典型的な問題点があることが経験的に明らかになっています。
   </p>
   <p>
     最も重大な問題点は、<file>/usr/X11R6/bin</file> が消え、<file>/usr/bin</file> 
     へのシンボリックリンクとして残されているにすぎないということです。つまり、このディレクトリはアップグレードの時点で空になっていなければいけません。新しいパッケージは、<file>/usr/X11R6/bin</file> 
     を使用していたほとんどのパッケージと衝突するようになっていますが、場合によっては対話的な手作業が必要になります。絶対に、X 
     セッション内ではアップグレードを実行しないようにしてください。
   </p>
   <p>
     X.Org のインストール中にアップグレードが中断した場合、どのファイルが <file>/usr/X11R6/bin</file> 
     にまだ残っているか調べなければなりません。そうしたら (そこにファイルがあれば) どの Debian 
     パッケージがそのファイルをインストールしたかを <prgn>dpkg -S</prgn> で調べ、該当するパッケージを <prgn>dpkg 
     --remove</prgn> 
     で削除できます。後で代わりのパッケージをインストールできるよう、削除したパッケージを書き留めておいてください。インストールを続ける前に 
     <file>/usr/X11R6/bin</file> にあるファイルはすべて削除する必要があります。
   </p>
   <p>
     さらに詳しい情報やその他の問題点については <url id="http://wiki.debian.org/Xorg69To7"> 
     を読んでください。
   </p>
  </sect>
  <sect id="exim">
   <heading>
     exim 3 から exim4 へのアップグレード
   </heading>
   <p>
     etch リリースで時代遅れとして扱われるようになったパッケージの 1 つに、メール転送エージェント (MTA) の exim 
     があります。このパッケージは、完全に新しいパッケージである exim4 によって置き換えられました。
   </p>
   <p>
     それだけでなく、exim 3 はもう何年もの間、上流でメンテナンスされていないので、Debian では exim 3 
     のサポートを打ち切りました。インストールしている exim 3 を exim4 に手作業でアップグレードしてください。exim4 は既に 
     sarge に含まれているので、etch へのアップグレードの前に sarge システム上でこのアップグレード作業を行うか、etch 
     へのアップグレードの後で都合のよいときに行うかは選択可能です。ただ、exim 3 パッケージが自動的にアップグレードすることはなく、sarge 
     のサポートが打ち切られた後、exim 3 のセキュリティサポートは行われないということだけは覚えておいてください。
   </p>
   <p>
     Debian の exim4 パッケージ群は大規模に文書化されています。パッケージのホームページは Debian Wiki の <url 
     id="http://wiki.debian.org/PkgExim4"> で、README ファイルはパッケージ内部だけでなく <url 
     id="http://pkg-exim4.alioth.debian.org/README/etch/README.Debian.html"> 
     にもあります。
   </p>
   <p>
     README ファイルにはパッケージ化 (Packaging) に関する章があります。この章では、Debian 
     で提供されている複数の異なるパッケージの差異について説明しています。また README ファイルには Exim 3 からのアップグレード 
     (Updating from Exim 3) に関する章があります。この章は、実際に移行を行う際に役に立つでしょう。
   </p>
  </sect>
  <sect id="apache2">
   <heading>
     apache2 のアップグレード
   </heading>
   <p>
     Apache は新しいバージョン 2.2 
     にアップグレードしました。普通のユーザはこのアップグレードによる影響を受けませんが、知っておくべき問題点がいくつかあります。
   </p>
   <p>
     <url id="http://httpd.apache.org/docs/2.2/upgrading.html"> 
     に、上流での変更が記載されています (訳注: 本リリースノート執筆時点では、リンク先の日本語のページに記載されている情報は 1.3 から 
     2.0 で入った変更なので、2.0 から 2.2 
     で入った変更については英語のページを参照してください)。このページを読み、特に以下の内容を記憶に留めておいてください。
    <list>
     <item>
      <p>
        全てのモジュールを再コンパイルする必要があります
      </p>
     </item>
     <item>
      <p>
        認証モジュールについて、名前の変更や再分類が行われました
      </p>
     </item>
     <item>
      <p>
        設定オプションの一部は名前が変わりました
      </p>
     </item>
    </list>
   </p>
   <p>
     Debian 特有の変更としては、デフォルトパッケージが ssl をサポートするようになったため、SSL 
     という文字列がもう定義されていない、などが挙げられます。
   </p>
  </sect>
  <sect id="php-globals">
   <heading>
     安全でない php の設定の廃止
   </heading>
   <p>
     長年、PHP で register_globals 
     の設定をオンにすることは安全でなく危険であるとわかっており、これまでかなりの期間、デフォルトではオフになっていました。この設定が、あまりにも危険であるとして、ついに 
     Debian システムでは廃止されました。同様のことが safe_mode と open_basedir 
     の欠陥にも当てはまります。これらの欠陥はやはり、かなりの期間メンテナンスされていません。
   </p>
   <p>
     本リリース以降、Debian セキュリティチームは、安全でないとわかっている PHP 
     の多数の設定についてはセキュリティサポートを提供しません。最も重大なのは、register_globals 
     の設定がオンになっていることを悪用する問題は対処されないということです。
   </p>
   <p>
     register_globals を必要とする旧式のアプリケーションを実行する場合は、例えば Apache 
     の設定ファイルを用いて、該当する各パスのみに対してこの設定を有効にしてください。さらに詳しい情報は、PHP の付属文書のディレクトリ 
     (<file>/usr/share/doc/php4</file> や <file>/usr/share/doc/php5</file>) 
     に含まれている <file>README.Debian.security</file> ファイルで入手可能です。
   </p>
  </sect>
  <sect id="mozilla-security">
   <heading>
     Mozilla 製品のセキュリティの状態
   </heading>
   <p>
     Mozilla のプログラムは多数のユーザにとって重要なツールです。しかし残念なことに、Mozilla 
     のセキュリティポリシーは上流の新しいバージョンに更新するようユーザに強いることで、これは、セキュリティアップデートには大きな機能変更を含めないという私たちのポリシーと衝突します。いつになるかは今のところわかりませんが、&releasename; 
     のサポート期間の間に、Mozilla 製品のサポートがもはや Debian 
     セキュリティチームにとって実現不可能になるときが来るかもしれません。そのとき Debian セキュリティチームは、Mozilla 
     製品のセキュリティサポートの終了を発表するつもりです。Mozilla 
     製品をインストールするときはこのことを考慮に入れ、セキュリティサポートの終了が問題となる場合は Debian 
     で提供する代替プログラムの使用を検討してください。
   </p>
  </sect>
 </chapt>
 <chapt id="moreinfo">
  <heading>
    &debian; に関するさらなる情報
  </heading>
  <sect id="morereading">
   <heading>
     もっと読みたい
   </heading>
   <p>
     このリリースノートやインストールガイドを越えた、&debian; に関するより進んだ文書は、Debian Documentation 
     Project (DDP) から公開されています。DDP は Debian 
     のユーザや開発者向けに、品質の高い文書を作成することを目的としています。Debian リファレンス、Debian メンテナ入門、Debian 
     FAQ などなど、たくさんの文書があります。現在利用可能なリソースの詳細すべては <url id="&url-ddp;" name="DDP 
     のウェブサイト">から得られます。
   </p>
   <p>
     それぞれのパッケージの文書は <file>/usr/share/doc/<var>package</var></file> 
     にインストールされています。ここには、著作権情報、Debian 固有の詳細、開発元の文書すべて、などが置かれています。
   </p>
  </sect>
  <sect id="gethelp">
   <heading>
     助けを求めるには
   </heading>
   <p>
     Debian 
     ユーザ向けのヘルプ・アドバイス・サポートなどは、いろいろな場所から得られます。しかしこれらを頼りにするのは、その問題について徹底的に文書を調査してからにしましょう。このセクションでは新しく 
     Debian ユーザになった人向けに、これらを簡単に紹介します。
   </p>
   <sect1 id="lists">
    <heading>
      メーリングリスト
    </heading>
    <p>
      Debian ユーザが最も興味を引かれるであろうメーリングリストは debian-user (英語) リストおよび 
      debian-user-<var>language</var> (各国語) 
      リストでしょう。これらのリストの詳細や講読のしかたについては、<url id="&url-debian-list-archives;"> 
      を見てください。利用にあたっては、あなたの疑問に対する答えが以前の投稿ですでに答えられていないかどうか、アーカイブをチェックしてください。また標準的なメーリングリストのエチケットに従うようにしてください。
    </p>
   </sect1>
   <sect1 id="irc">
    <heading>
      インターネットリレーチャット (IRC)
    </heading>
    <p>
      Debian はサポート用の IRC チャンネルを Debian ユーザの協力によって運営しています。このチャンネルは OFTC IRC 
      ネットワークにあります。このネットワークは、オープンソースコミュニティで資源共有や協力を進めるため、情報交換に使われているものです。このチャンネルにアクセスするには、お好みの 
      IRC クライアントを &debian-irc-server; に接続し、#debian に join してください。
    </p>
    <p>
      チャンネルのガイドラインに従い、他のユーザを大切にしてください。OFTC に関する詳細は<url id="&url-irc-host;" 
      name="ウェブサイト">を訪ねてみてください。
    </p>
   </sect1>
  </sect>
  <sect id="bugs">
   <heading>
     バグを報告する
   </heading>
   <p>
     私たちは Debian GNU/Linux を高品質な OS 
     にするよう努めていますが、だからといって私たちの提供するパッケージにバグが皆無というわけにはいきません。Debian 
     の「オープンな開発体制」という考え方に合致し、また、ユーザに対するサービスとして、私たちは報告されたバグに関するすべての情報を <url 
     id="&url-bts;" name="bugs.debian.org"> にあるバグ追跡システム (Bug Tracking 
     System: BTS) で提供しています。
   </p>
   <p>
     もしディストリビューションや、その一部であるパッケージされたソフトウェアにバグを見つけたら、次のリリースで修正できるよう、その問題点の報告をお願いします。バグを報告するには正しい電子メールアドレスが必要です。これをお願いしているのは、バグを追跡したり、開発者がより詳しい情報を必要とした場合に、報告者に連絡できるようにするためです。
   </p>
   <p>
     バグ報告には <package>reportbug</package> 
     というプログラムを使うこともできますし、電子メールを使っても構いません。バグ追跡システムに関する詳細やその使い方については、リファレンスカード 
     (<package>doc-debian</package> パッケージをインストールしていれば 
     <file>/usr/share/doc/debian</file> にあります) をお読み頂くか、または<url 
     id="&url-bts;" name="バグ追跡システム">のウェブサイトからオンラインで入手することもできます。
   </p>
  </sect>
  <sect id="contributing">
   <heading>
     Debian に貢献する
   </heading>
   <p>
     Debian への貢献は専門家でなくてもできます。問題を抱えたユーザを、いろいろな<url 
     id="&url-debian-list-archives;" 
     name="サポートメーリングリスト">の場所で助けてあげることも、立派なコミュニティへの貢献です。<url 
     id="&url-debian-list-archives;" 
     name="開発メーリングリスト">に参加して、ディストリビューション開発に関する問題を見つけたり解決したりする (もちろん後者のほうが大切) 
     ことも、もちろん非常に助けになります。Debian を高品質なディストリビューションに保つため、<url id="&url-bts;" 
     name="バグを報告して">その原因の特定や解決に際して開発者を助けてください。執筆が得意なら、<url id="&url-ddp;" 
     name="文書">作成や既存文書のご自分の言語への<url id="&url-debian-i18n;" 
     name="翻訳">に積極的に参加し、そこで貢献するのもよいでしょう。
   </p>
   <p>
     もっと時間が自由になるなら、Debian に属するフリーソフトウェア集の一部を管理してみるのはどうでしょうか。皆が Debian 
     に入れてほしいと思っているソフトウェアを引き受けて管理するのは、特に価値の高い貢献です。これに関する詳細は、<url 
     id="&url-wnpp;" name="作業が望まれるパッケージ">をご覧になってください。Debian 
     にはいくつかサブプロジェクトが存在しており、特定のアーキテクチャへの移植、<url id="&url-debian-jr;" 
     name="Debian Jr.">、<url id="&url-debian-med;" name="Debian Med"> 
     などが進められています。これらのうち、あなたが興味を持っているグループに参加するのもよいでしょう。
   </p>
   <p>
     いずれにしても、あなたが何らかの形でフリーソフトウェアコミュニティに関わっているのなら、それがユーザとしてであれ、プログラマ、ライター、翻訳者のいずれとしてであれ、すでにあなたはフリーソフトウェア運動を助けてくださっているのです。貢献することは報いのあることですし、楽しいことです。新しい人々に出会う機会も増えます。きっと暖かな、楽しい気持ちになれるはずです。
   </p>
  </sect>
 </chapt>
 <appendix id="old-stuff">
  <heading>
    &oldreleasename; システムの管理
  </heading>
  <p>
    この付録には、&releasename; へアップグレードする前に &oldreleasename; 
    パッケージを確実にインストールしたりアップグレードする方法についての情報が述べられています。特定の状況でのみ必要となるでしょう。
  </p>
  <sect id="old-upgrade">
   <heading>
     &oldreleasename; システムのアップグレード
   </heading>
   <p>
     基本的には、これまで行なってきた &oldreleasename; のあらゆるアップグレードと違いはありません。唯一異なるのは、<ref 
     id="old-sources">で説明したようにパッケージリスト内に &oldreleasename; 
     パッケージがまだ含まれているのを確認する必要があることです。
   </p>
  </sect>
  <sect id="old-sources">
   <heading>
     ソースリストのチェック
   </heading>
   <p>
     <file>/etc/apt/sources.list</file> 内で 'stable' を指定している行があるなら、効率よく 
     &releasename; を "使う" 用意ができています。すでに <tt>apt-get update</tt> 
     を実行済みでも、以下の手順に従えば問題なく元に戻すことができます。
   </p>
   <p>
     &releasename; からパッケージのインストールもしてしまっているなら、おそらくこれ以上 &oldreleasename; 
     からパッケージをインストールしても無意味でしょう。この場合、続けるかどうかを自分で決断しなければなりません。パッケージをダウングレードすることはできますが、その方法はここでは扱いません。
   </p>
   <p>
     (root になってから) お気に入りのエディタで <file>/etc/apt/sources.list</file> 
     を開き、<tt>deb http:</tt> や <tt>deb ftp:</tt> で始まるすべて行の中に 
     "<tt>stable</tt>" が指定されているかどうかを調べてください。もしあるなら、<tt>stable</tt> を 
     <tt>&oldreleasename;</tt> に変更してください。
   </p>
   <p>
     <tt>deb file:</tt> で始まっている行があるなら、その行が指定している場所が &oldreleasename; か 
     &releasename; のどちらのアーカイブなのかを独力で調べなければならないでしょう。
   </p>
   <p>
     <strong>重要!</strong>: <tt>deb cdrom:</tt> 
     で始まっている行は、絶対に変更しないでください。変更するとその行は無効になって、もう一度 <prgn>apt-cdrom</prgn> 
     を実行しなければならなくなるでしょう。'cdrom' ソースが "<tt>unstable</tt>" 
     を指定していても心配しないでください。混乱するかもしれませんが、これで正常なのです。
   </p>
   <p>
     変更が済んだら、ファイルを保存してから
    <example>
# apt-get update
          </example>
     と実行して、パッケージリストを更新してください。
   </p>
  </sect>
 </appendix>
</book>
</debiandoc>
