<!DOCTYPE debiandoc PUBLIC "-//DebianDoc//DTD DebianDoc//EN" [
  <!entity % dynamicdata  SYSTEM "../dynamic.ent"       > %dynamicdata;
  <!entity % shareddata   SYSTEM "../release-notes.ent" > %shareddata;
  <!entity docid "$Id: release-notes.ko.sgml,v 1.5 2005-06-08 20:50:59 jseidel Exp $">
]>

<!-- Be careful with automatic reformatting. Please note that the indentation
     in examples is used in the output (plus additional space) as well. -->

<debiandoc>
  <book>
  <titlepag>
    <title>&debian; &release; (`&releasename'), &arch-title; 릴리즈 노트</title>
      <author>
        <name>Josip Rodin, Bob Hilliard, Adam Di Carlo, Anne Bezemer, Rob
        Bradford (현재), Frans Pop(현재)</name><email></email>
      </author>
      <author>
        <name></name><email>debian-doc@lists.debian.org</email>
      </author>
      <version>&docid;</version>
    </titlepag>
    <toc detail="sect1">
      <chapt id="about"><heading>릴리즈 노트에 새로 추가된 내용</heading>
       
        <p>[이 문서의 가장 최신 내용은 항상 <url id="&url-release-notes;">
	에서 구할 수 있다. 여러분이 보고 있는 문서가 한달이상 된거라면 
	가장 최신문서로 받아서 보는게 좋다.]</p>

        <p>지난번 릴리즈보다 오래된 상태에서 업그레이드하는 정보를 포함한
	지난번 릴리즈 노트를 참고하라. 그러한 내용은 문서를 자주 복잡하게
	만들어서 단지 &debian; 3.0 ('woody')에서 업그레이드만 이야기 하기로
	결정했다. 오래된 릴리즈에서 업그레이드가 필요하다면 지난번 릴리즈
	노트를 읽어보라.</p>

      </chapt>
      <chapt id="whats-new"><heading> &debian; &release;에 무엇이 새로운가?</heading>

        <p>지원하는 아키텍처 목록은 지난번 릴리즈 &debian; 3.0 ('woody')
	뒤로 바뀌지 않았다. 이번 릴리즈에 지원하는 아키텍처 목록입니다.
        </p>
        
        <p>
          <list>
            <item><p>Intel x86 ('i386')</p></item>
            <item><p>Motorola 680x0 ('m68k')</p></item>
            <item><p>Alpha ('alpha')</p></item>
            <item><p>SPARC ('sparc')</p></item>
            <item><p>PowerPC ('powerpc')</p></item>
            <item><p>ARM ('arm')</p></item>
            <item><p>MIPS ('mips' (Big endian)과 'mipsel' (Little endian))</p></item>
            <item><p>Intel Itanium ('ia64')</p></item>
            <item><p>HP PA-RISC ('hppa')</p></item>
            <item><p>S/390 ('s390')</p></item>
          </list>
        </p>

          <p>포트 상황과 포트와 관련한 특정 내용을 읽어보면 여러분이 
	  쓰고 있는 아키텍처에 대한 정보를 <url id="&url-ports;"
	  name="Debian port web pages">에서 얻을 수 있다.
          </p>

<![ %secondrelease [

          <p>&arch-title; architecture에 대한 두번째 공식 릴리즈이다. 
	  이 자체로 릴리즈 되기에 충분하다 생각한다. 그런데 사용자들이 아키
	  텍처에 대한 시험을 하는 것과 같은 충분한 외부검토를 거치지 않았기
	  때문에 몇몇 버그가 나타날 수 있다. 이런 문제는 바로 바로 
	  <url id="&url-bts;" name="bug tracking system">를 이용해서
	  보고해달라. 분명히 할 점은 그 버그가 그 &architecture; 플랫폼에
	  문제를 일으켰다고 해야한다.</p>

]]>
<![ %not-m68k [
          <p>&debian; &release; for the &arch-title; 아키텍처용 
	  &debian; &release;는 &kernelversion; 커널버전과 함께 
	  들어간다.</p>
<![ %available-2.6 [
          
          <p>&arch-title; 아키텍처 위에서 2.6 커널이 있다. 이름은 
	   &kernelversion-2.6;으로 되어있다. 데비안의 2.6.8 커널 패키지는
	  2.6.8.1 커널 릴리즈와 선택된 다른 패치를 포함하고 있다.
          </p>
]]>
]]> <!-- %m68k -->
<![ %m68k [
          <p>&arch-title;용 &debian; &release; 아키텍처는 커널 버전이
	  2.2.25와 2.4.27이다. 2.6.8 커널도 있지만 이 커널은 experimental
	  에 들어가 있다.
          </p>
]]>
        <sect id="newdistro"><heading>새 안정판에 들어간 새 내용은?</heading>

           <p>이 새로운 데비안 릴리즈는 이전 &oldreleasename;보다 더 많은 
	   소프트웨어를 가지고 있다; 9000개가 넘는 새 패키지를 포함하고 
	   있고 대부분 소프트웨어가 업데이트가 되었다: 대부분 6500 개의 
	   패키지가(지난번 릴리즈의 73%)있고 많은 수의 패키지가 여러가지
	   이유로 없어졌다. 이 패키지들은 업데이트가 안될 것이다. 이
	   패키지들은 패키지 관리 시스템 프론트 엔드에서 'obsolete'으로
	   나타날 것이다. 
           </p>

           <p>이번 &debian; 데비안 릴리즈에는 많이 발전한 XFree86
           4.3 릴리즈가 들어있는데 더 많은 종류의 하드워어를 지원하고 더 나은
           자동검색 지원과 Xinerama와 3차원 가속기능과 같은 더 나은 기능을
           지원하고 있다.</p>

           <p>&debian;은 어떤 새로운 릴리즈보다 더욱더 데스크탑 환경에 맞게
           맞춰져 있는데 여기에는 GNOME 2.8과 KDE 3.3이 들어있다. 
	   OpenOffice.org 1.1의 오피스군이 포함되어 있다. 여기에는 
	   Evolution 그룹웨어와 게임(GAIM) 메신저 클라이언트도 들어가 있다.</p>

           <p>새루운 패키지 관리 도구로 콘솔에서 쓸 수 있는 도구로 <prgn/aptitude/
	   쓸 수 있다. <prgn/apt-get/보다 더 나은 의존성 문제를 해결해 주고 
	   있다. <prgn/aptitude/는 대부분의 <prgn/apt-get/ 명령행 기능을 지원
	   하고 있다. 아직도 <prgn/dselect/를 쓰고 있다면 패키지 관리도구로
       	   과감히 <package/aptitude/ 써라. 
           </p>

           <p>공식 &debian; 배포본은 열세개의 바이너리 CD와 비슷한 양의 소스
           CD로 구성되어 있고 DVD 버전도 얻을 수 있다.</p>

        <sect1 id="volatile"><heading>새로운 서비스 debian-volatile</heading>

           <p>새로운 서비스인 <em/debian-volatile/은 사용자들이 쉽게 오래된
	   정보를 포함한 안정판 패키지를 업데이트를 빠르고 쉽게 도와준다. 
	   예제는 바이러스 검출기 서명 리스트나 스팸 필터 패턴 모음이 있다. 
	   관리자는 "volatile.debian.net" 아카이브를 써서 수게 "security.debian.org"
	   아카이브에 접근하고 쉽게 최신의 정보를 헷갈리지 않고 전체 시스템이나
	   시스템 일부를 안전하게 관리할 수 있다. 자세한 정보는 
	   <url id="&url-debian-volatile" name="web page">를 참조하라. 
           </p>

           <p>debian-volatile은 공식 데비안 서비스가 <em/아니다/. 알아서 사용하라.
           </p>

        </sect1>

        <sect1 id="non-us"><heading>non-US 오래된 것들</heading>

           <p>&releasename; 릴리즈에 non-US에 있던 패키지들이 메인 아카이브
	   로 들어왔다. 만일 "non-us"가 있다면 이를 <file>/etc/apt/sources.list</file>
	   서 없애라.
           </p>

        </sect1>

        </sect>
 
        <sect id="newinst"><heading>설치 시스템에 바뀐점은?</heading>

          <p>예전 &debian; 설치 시스템은 완전히 새로운 설치 시스템인
	  <prgn>debian-installer</prgn>로 대체됐다. 새로운 설치 시스템은
	  디자인에서 모듈화 되어 있어서 확장이 가능하게 만들어졌다.
          </p>
          
          <p>설치 시스템에 새로 들어간 몇몇 특징들은 처음 부트 상태에서
	  패키지를 설치하기 위해 <prgn>aptitude</prgn>를 선택하면서 USB
	  플래쉬 장치로 시작할 수 있게 해주는 지원을 담고 있고 <prgn>XFS</prgn>
	  파일 시스템과 <prgn>LVM</prgn> (volume 관리도구)에 대한 지원을
	  담고 있다.</p>

          <p>새로운 데비안 설치 시스템의 자세한 내용을 알려면 사용자들이 
	  데비안 설치 지침서를 첫번째 CD나 <url id="&url-install-manual;">
	  에서 참조해서 보면 된다.<p>

<![ %i386 [ 

          <p>&arch-title; 아키텍처에는 특별한 설치 플로피 디스크 이미지인
	  "스피크업speakup"이 있는데 이는 맹인을 위한 것이다. 이 이미지는
	  점자 표시를 지원하는 특별 커널로 돼있다. 지원하는 모델은 문서로
	  잘 나와있다. 이 이미지에 대한 내용은 <url id="&url-installer;index#speakup"
	  name="debian-installer release page">에서 자세히 알 수 있다.
          </p>


        </sect>

      </chapt>

      <chapt id="installing"><heading>새로운 설치</heading>

        <p>예전 &debian; 설치 시스템인 <prgn>boot-floppies</prgn>는 새로운
	구성성분중심이고 더욱 강력한 <prgn>debian-installer</prgn>로 
	대체되었다.</p>

        <p>인스톨러는 다양한 설치 방법을 준다. 어떤 설치방법인지는 여러분이
	쓰는 아키텍처에 달렸다.
        </p>

        <p>데비안을 새로 설치하려 한다면, 설치지침을 읽어야하는데 이것도 
	공식 CD안에 들어있다:

        <example>
/doc/install/manual/<var>language</var>/index.html
        </example>

        그리고 인터넷: <url id="&url-install-manual;">에서도 볼 수 있다.
	데비안-인스톨러에 대한 <url id="&url-installer;index#errata" name="errata">
	를 찾아볼 수도 있다. 
	</p>

<![ %not-m68k [
<![ %d-i-avail-2.6 [
          <p>기본으로 2.4 커널이 들어있고 옵션으로 2.6기본 커널을 &arch-title;
	  에 대하 쓸 수 있다. 자세한 내용은  설치 지침을 참고하기 바란다. 
          </p>
]]>
<![ %d-i-default-2.6 [
          <p>설치 시스템은 2.6 시리즈 커널을 기본으로 &arch-title;에서
	  쓰고 있다. 
          </p>
]]>
]]> <!-- %not-m68k -->
<![ %m68k [
          <p>하부 아키텍처에 따라서 설치는 2.2.25 커널이나 2.4.27 커널 아니면
	  둘 모두를 써서 할 수 있다. 맥용으로, 2.2.25를 권하며 다른 아키텍처
	  는 2.4.27을 많이 쓴다. 
          </p>

          <p><prgn/partman/와 파티션을 하는 <package/debian-installer/에 쓰는
 	  구성 성분과 디스크 포맷에는 atari 파티션에 대한 지원은 하지 않는다.
          이는 직접 수동으로 해줘야한다는 뜻이고 자세한 사항은 설치 지침을
	  읽어보기 바란다.
          </p>
]]>

<![ %alpha [
        <p>새로운 인스톨러는 알파시스템에 설치가 가능하고 SRM 콘솔를 지원한다.
	설치전에 시스템을 미리 SRM 콘솔로 전환하라. 사용하는 머신이 오직
	AlphaBIOS/ARC만을 지원한다면 최소 &oldreleasename; 설치를 통해
	&releasename; 설치하고 업그레이드를 할 수 있다. 자세한 정보는 
	<url id="http://www.debian.org/ports/alpha" name="Debian alpha port web pages">
	를 참조하라. 
        </p>
]]>


<![ %sparc [ 
      <sect id="sparc_kbd"><heading>&arch-title;에서 작동하는 키보드 문제</heading>

        <p>설치를 하면서 발생하는 키보드 관련 문제들이 있다.</p>

        <p>선블레이드 시스템과 같이 선에서 쓰고 있는 USB 키보드 문제이다. 기본 2.4
	커널을 사용하려한다면, 보통 선 키보드로 인스톨러가 부정확하게 알아차릴
	것이다. 이 문제는 설치 문서에 나와있으니 위 링크에서 
	"데비안 인스톨러 사용하기(Using the Debian Installer)" 부분을 참조하면
	된다.</p>

        <p>두번째 문제는 커널과 관련된 문제인데 2.6 커널은 모든 키보드를 "보통"
	PC 키보드로 만들어버리는 다른 입력 층을 사용한다. 이 이야기는 2.4 커널로
	부팅을 하고 이를 선용 키보드나 USB 키보드로 설정하고 나중에 전문가 모드에서
	2.6 커널을 새로운 시스템에 선택하면 나중에 키보드를 재부팅 뒤에는
	사용할 수 없을 것이다.</p>

      </sect>

      <sect id="sparc_fb"><heading>&arch-title;에서 프레임 버퍼 문제</heading>

        <p>몇몇 시스템에서 발생하는 디스플레이 문제 때문에, 프레임 버퍼 지원이 
	&arch-title;에서 기본으로 안돼있다. 이는 결국 화면을 ATI 그래픽 
	카드를 쓸 경우 화면이 이상하게 나오게 된다. 인스톨러에서 디스플레이가
	문제가 있다면 부팅할 때 옵션으로 "debian-installer/framebuffer=true"
	라고 들어가라.</p>

      </sect>
]]>
      <sect id="popcon"><heading>인기 콘테스트</heading>

        <p>기술적인 이유로 <package/popcon/ 패키지는 더이상
	기본으로 new &releasename; 설치에서는 하지 않는다. 다음번 
	릴리즈에는 수정되서 들어갈 것이다. 
        </p>

        <p><package/popcon/은 데비안 프로젝트에 다양한 정보를 준다.
	어떤 패키지를 지금 쓰고 있는지와 같은 정보를 주기 때문에
	유용할 수 있다. 이 정보는 어떤 패키지를 CD-ROM에 넣을지
	결정할 수 있지만 이 정보는 가끔 더이상 관리 안하는 
	패키지를 입양할지 말지 결정하는데 쓰기도 한다.
        </p>

        <p><package/popcon/는 익명으로 진행된다. 이 패키지를 설치하고
	참여하는 사람들에게 감사드린다;이는 데비안을 발전시키는데
	도움을 줄 것이다. 
        </p>

      </sect>

      </chapt>


      <chapt id="upgrading"><heading>이전 릴리즈에서 업그레이드</heading>

<!-- For doc-writers' convenience:
Debian Supported
release: architectures:

1.3.1 or less i386
2.0           i386,m68k
2.1	      i386,m68k,alpha,sparc
2.2	      i386,m68k,alpha,sparc,powerpc,arm
3.0	        + hppa s390 mips mipsel ia64
-->

        <sect id="backup"><heading>업그레이에 필요한 준비</heading>

          <p>업그레이드를 하기 전헤 모든 내용을 백업하두고 잃어버릴 수 있는
	  최소의 데이터나 설정을 백업해둔다. 업그레이드 도구나 프로세스는
	  매우 믿을만 하지만, 업그레이드 도중 하드웨어가 문제를 발생시켜
	  시스템에 심각한 문제를 낳을 수 있다.</p>

          <p>여러분인 백업할 주요 파일들은 <file>/etc</file>, 
	  <file>/var/lib/dpkg</file>
	  이고 <tt>dpkg --get-selections \*</tt>의 결과내용이다.</p>

          <p>업그레이드 과정 자체는 <file>/home</file> 내용을 바꾸지
	  않는다. 그런데 KDE나 모질라와 같은 어플리케이션들은 기존
	  사용자 설정을 새로운 디폴트 값으로 바꿔버리는데 이는 사용자가
	  그 어플리케이션을 새롭게 시작하면 적용된다. 우선 미리 
	  숨김 파일과 디렉토리(".으로 시작하는 파일들")을 사용자
	  홈 디렉토리에서 백업을 철처히 하라. 사용자들에게 이 내용을
  	  알려주는 일이 중요하다. 
          </p>

          <p>여러분이 계확하는 내용의 업그레이드를 모든 사용자에게 알려주고 
	  SSH 사용자들은 거의 그 변화를 알지 못하겠지만 계속 작업하길 바라기
	  때문에 내용을 알려주면 된다. 다른 주의 사항과 사용자 파티션(
	  <file>/home</file>)백업 마운트 해제가 빌요하다면 하라. 재부팅은
	  필요없을 것이다.</p>

          <p>텍스트모드 가상 콘솔에서 로컬에서 작업해야하며(직접 연결된
	  시리얼 터미널에서), 또는  <prgn/ssh/를 통해서 원격에서 작업
	  할 수 있다.</p>

          <p><em/중요/: <prgn/telnet/, <prgn/rlogin/, <prgn/rsh/,
	  <prgn/xdm/, <prgn/gdm/, <prgn/kdm/과 같은 것을 통해서 업그레이드 
	  해선 <em/안된다/. 이 이유는 업그레이동안 서비스가 끊기고 시스템이 
	  완전히 업그레이드 안된 상세에서 <em/접근할수 없는/ 상황을 
	  만들 수 있다.</p>
	  
          <p>업그레이드하는 가장 좋은 방법은 <prgn/aptitude/를 쓰는 것이다. 내장
	  의존성 분석을 통해 부드럽게 업그레이드하고 쉽게 설치해준다.</p>
	  
	  <p>어떤 패키지를 설치해도 항상 루트로 작업을 해야하는데 <prgn/su/
	  나 <prgn/sudo/를 써서 필요한 접근 권한을 얻으면 된다.</p>
          
        </sect>

        <sect id="system-status">
        <heading>시스템 상태 확인</heading>

        <p>업그레이드 과정은 "순수하게" &oldreleasename;에서 업그레이드
	하는 부분만 다룬다. 여러분 시스템이 &oldreleasename;의 가장 최신
	상태에 있다고 가정한다. 확실하지 않으면 <ref id="old-upgrade">를
	따라하라. 
        </p>
<![ %has-woody-aptitude [
        <p>여기서는 <prgn/aptitude/가 &oldreleasename;의 버전으로 
	설치되었다고 가정한다. 이를 확인하려면 

        <example>
$ dpkg -l aptitude
        </example>

        만일 결과가 "i"로 시작하지 <em/않으면/, <ref id="old-aptitude">
	것처럼 업그레이드를 시작하라.
        </p>
]]>

<![ %mips [
        <sect1><heading>SGI IP22: arcboot 셋업</heading>

          <p><em>SGI IP22</em>으로 <package>arcboot</package>를 써서
	  부팅하는 시스템으로 설치를 준비한다면 커널로 직접 부팅하지
	  마라. <package>arcboot</package>는 &oldreleasename; 
	  서만 가능해서 보통의 방법으로 설치할 수 있다. 
          </p>

          <p><package>arcboot</package>을 설치하려든다면, 
	  <file>sources.list</file>에 여전히 &oldreleasename;를 참조
	  하고 있는지 확인; <ref id="old-sources"> 참조. 
          </p>

        </sect1>
]]>

	<sect1><heading>APT 핀 기능 죽이기</heading>

	  <p>테스팅 이상의 배포본에서 어떤 패키지를 설치하기 위해 APT를 설정
	  했다면 <file>/etc/apt/preferences</file>에 들어있는 APT 핀 설정을
	  바꿔서 패키지 업그레이드가 새로운 안정 버전으로 되게 해주면 된다. 
	  APT 핀기능에 대한 나용은 <manref name="apt_preferences" section="5">
	  에서 찾을 수 있다.</p>
<!-- FJP: Couldn't the advise to hold such packages prevent the upgrade of e.g.
          libc6 if the package depends on the old version! -->

	</sect1>
	
        <sect1><heading>패키지 상태 확인하기</heading>

          <p>업그레이드에 필요한 방법을 뭘 쓰던, 우선 모든 패키지를 검토하는
	  게 가장 먼저이고 모든 패키지가 업그레이드 상태인지 확인해야한다.
	  다음 명령은 반정도만 설치됐는지 설정 실패인지 아니면 다른 에러를
	  가진 패키지인지 확인해준다. 

          <example>
# dpkg --audit
          </example></p>
 
          <p>여러분 시스템에 있는 모든 패키지 상태를 <prgn/dselect/, 
	  <prgn/aptitude/,나 다음과 같은 방법으로 확인할 수 있다

          <example>
# dpkg -l | pager 
          </example>

          나

          <example>
# dpkg --get-selections &gt; ~/curr-pkgs.txt
          </example></p>

          <p>업그레이드 하면서 모든 홀드 상태는 다 없애길 바란다. 
	  업그레이드에 필요한 패키지가 홀드상태라면, 업그레이드는 
	  실패할 것이다. 홀드 상태인지 아닌지는 다음으로 확인가능
 
          <example>
# dpkg --get-selections | grep hold
          </example></p>

          <p>패키지를 로컬에서 변형했거나 다시 컴파일한 경우는, 이름을 바꾸지
	  않고 그 상태로 두고 싶다면 업그레이드 하지 않도록 홀드상태로 두라.
	  `hold' 패키지 상태는 <prgn/aptitude/를 통해서 다음처럼 하면 된다
	  
      	  <example>
aptitude hold | unhold &lt;package&gt;
      	  </example>
]]>
<![ %no-woody-aptitude [
          `hold' 패키지 상태는 <prgn/dselect/를 통해서 바꿀 수 있다. 선택
	  메뉴에서 `H'와 `G' 키를 통해 홀드와 언홀드를 각각 쓸 수 있다.
	  또는 다음과 같이 할 수 있다

          <example>
# dpkg --get-selections &gt; ~/curr-sels.txt
          </example>

          또는

          <example>
# dpkg --set-selections &lt; ~/curr-sels.txt
          </example>
]]>
    	    </p>
          <p>고쳐야할 것이 있다면 <ref id="old-sources">에서
	  말한 것처럼 <file/sources.list/에서 &oldreleasename;
	  를 여전히 참고하게 하라.
          </p>
        </sect1>

	<sect1 id="backports"><heading>비공식 소스와 백포트</heading>

          <p>여러분 시스템에 데비안 패키지가 아닌 패키지가 있다면 업그레
	  이드 도중에 의존성 충돌로 삭제될 수 있다. 이 패키지들은
	  <file>/etc/apt/sources.list</file>에 추가 패키지로 등록해서
	  설치했다면 &releasename;에 맞게 다시 패키지가 나왔는지 확인
	  하고 데비안 패키지용 소스 라인을 동시에 바꿔서 관리한다. 
          </p>

          <p>몇몇 사용자들은 백포트된 비공식인 "좀더 새로운" 이미 
	  &oldreleasename; 시스템에 설치된 데비안에 <em/있는/ 패키지를 
	  쓸 수 있다. 이 패키지들은 업그레이드 도중 문제를 발생시키기
	  일쑤있다. 특히 파일 충돌 <footnote>데비안 패키지 관리 시스템
	  은 정상적으로 패키지를 제거하거나 다른 패키지가 소유한 
	  파일을 대체하지 않는다; 특별히 대체하라고 하지 않으면 그렇게
	  하지 않는다.</footnote>. <ref id="trouble">섹션에 이런 파일
	  충돌 문제를 다루는 방법이 나와있다. 
          </p>

        </sect1>
       </sect>
<![ %glibcneedsnewkernel [
<![ %not-mips-mipsel [

        <sect id="new-kernel">
        <heading>커널 지원 확인</heading>

<![ %sparc [
           <p>64bit SPARC CPU (sun4u)는 커널 지원에 대한 특별한 문제 없이
	   업그레이드 가능하다. 
           </p>

           <p>sun4c CPU들은 &releasename;에서 <em>더이상 지원하지 
	   않는다</em>. sun4d CPU에 대한 지원은 이 아키텍처가 드물기
	   때문에 미지수이며 sun4d CPU는 MMU 작업으로 가능할 수 있다. 
           </p>

           <p>sun4m CPU는 여전히 지원되지만 업그레이드 하기전에 커널을 
	   새걸 써야한다. 새로운 glibc가 특정 머신에 없는 어셈블러 
	   인스트럭션을 쓰기 때문에 빠진 인스트럭션을 에뮬레이트 하는
	   업데이트된 커널을 쓸 필요가 있다. 
           </p>

           <p>기술적으로 단지 <em>몇몇</em> sum4m 칩이 영향을 받지만
	   glicb가 믿을만하게 시스템이 영향을 받은지 안받는지 알 수 
	   없기 때문에 고정 커널이 설치되기 전에 어떤 32bit SPARC 시스템
	   에 업그레이드가 안된다. 
           </p>

           <p>자세한 사항에 관심이 많은경우, Cypress/ROSS가 만든 몇몇 
	   sum4m 칩이 <tt>umul</tt>의 인스트럭션(다른이름의 동일 칩
	   RT601/CY7C601)을 구현하지 못한다. 이들은 초기 SPARCserver 
	   6xxMP에 썼다. 나중 모델들은 TI가 만든 칩을 사용했다. 현재는
	   이들이 어떻게 영향받는지 모른다. 
           </p>
<!-- Add link to http://www.ultralinux.org/faq.html#q_2_1 ? -->
]]>

<![ %hppa [
          <p>64bit HPPA 머신에는 시스템을 업그레이드하기 전에 우선 더
	  새로운 커널로 업그레이드 할 필요가 있다. 이는 새로운 glibc
	  가 특정머신에서 쓸 수 없는 어셈블러 인스트럭션을 쓰기 
	  때문이이서 없는 인스트럭션을 에뮬레이트하는 더나은 커널을
	  쓰는게 났다. 
          </p>
]]>

<![ %i386 [
          <p>진짜 "80386" CPU는 &releasename;이
	  <em/더이상 지원하지 않는다/. 이는 "80486"과 그 이상의 CPU에 
	  호환되는 것들에 영향을 준다는 뜻은 아니다. 
          </p>
]]>
<![ %upgradekernel [
        <sect1 id="kernel-upgrade"><heading>커널 업그레이드</heading>

          <p>만일 이전 섹션에서 시스템을 업그레이드 하기 <em/전/에
	  커널을 업그레이드하라고 됐다면 그렇게 지금 해야한다.
          </p>

          <p>&releasename;에서 현재 커널을 설치할 필요가 있는 모든 툴이
	  백포트에 제공된다. 커널 설치에 대한 자세한 사항은 
	  <ref id="kernel-upgrade-howto">를 참조하라. 
          </p>

        </sect1>
]]>
        </sect>
]]> <!-- not-mips-mipsel -->
]]> <!-- glibcneedsnewkernel -->


        <sect id="upgrade-process"><heading>APT 소스 준비하기</heading>


          <p>업그레이드를 시작하기 전에 <package/apt/ 설정 파일을 
	  <file>/etc/apt/sources.list</file>에 맞게 해줘라. </p>
          
          <p><package/apt/는 "<tt>deb</tt>" 줄 내용을 따라서 패키지를 
	  검색하고 높은 버전을 먼저 설치하면서 처음줄에 있는 내용에
	  우선순위를 준다(이런 식으로, 여러 미러가 있을 때, 로컬 하드
	  디스크, CD-ROM, HTTP/FTP 미러순으로 하게된다).</p>

          <p>릴리즈 이름이 코드이름(예를들어, &oldreleasename;, &releasename;)
	  와 상태 이름(oldstable, stable, testing, unstable)을 모두 참조
	  할 수 있다. 코드이름으로 참조하면 새로운 릴리즈가 나왔을 때
	  절대 놀랄 일이 없다. 또한 여러분이 릴리즈 공고를 계속해서 
	  살펴볼 수 있다는 뜻이기도 하다. 대신 상태 이름을 쓴다면, 
	  릴리즈가 됐을 때 가능한 패키지 업데이트 양을
	  볼 수 있을 것이다. 
          </p>


         <sect1 id="network"><heading>APT 인터넷 소스 추가하기</heading>

           <p>기본 설정은 주 데비안 인터넷 서버에서 받아서 설치하게 돼있고
	   <file>/etc/apt/sources.list</file>를 바꿔서 다른 미러를 쓸 수
	   있고 여러분 위치에서 가까운 미러를 쓰면 된다.</p>

<!-- FJP: Why is 'default configuration' relevant here? We are talking about
          upgrading existing installations; we really have no idea what
          apt-sources users will have set up here (maybe just a Woody CD-set).
          Note: D-I sets the default configuration to a mirror based on
          the selected country and not the 'main' servers. -->

           <p>데비안 HTTP나 FTP 미러 주소는 <url id="&url-debian-mirrors;">에서
	   볼 수 있다("모든 미러 목록"을 보라). HTTP 미러는 FTP보다 일반적으로
	   빠르다.</p>
<!-- FJP: 'Otherwise' does not refer back to anything here, so I deleted it
          (unless the intention was to refer to local intr_a_net HTTP
          servers in the previous para). -->

           <p>예를들어, 여러분의 가장 가까운 데비안 미러가 
	   <tt>&url-debian-mirror-eg;/</tt>라고 가정하자. 웹 서버나 FTP 프로그
	   램을 써서 이 미러를 찾아보면 주 디렉토리가 다음과 같이 돼 있을
	   것이다:

           <example>
&url-debian-mirror-eg;/dists/stable/main/binary-&architecture;/...
&url-debian-mirror-eg;/dists/stable/contrib/binary-&architecture;/...
           </example></p>

           <p><prgn/apt/로 이 미러를 쓰려면, 다음 내용을 <file/sources.list/
	   에 더하라:

           <example>
deb &url-debian-mirror-eg; &releasename; main contrib
           </example></p>

           <p>`<tt>dists</tt>'는 이미 있는 것이고 릴리즈 이름 뒤에 오는
	   내용들은 다중 디렉토리로 경로를 확장하는데 쓴다.</p>

           <p>새로운 소스를 더한 뒤에, <file/sources.list/에 있는 이미 있는
	   "<tt/deb/"로 시작하는 라인에 <tt/#/를 맨 앞에 넣어서 사용하지
	   못하도록 한다.</p>

           <p>설치할 모든 패키지는 네트워크로 받아서 
	   <file>/var/cache/apt/archives</file>에 둔다. 다운로드
	   중에는 <file>partial/</file>이라는 내부 디렉토리에 둔다. 
	   그렇게 해서 설치에 필요한 공간이 우선 충분한지 확인해야한다. 
	   확장된 데비안 설치에는 적어도 300MB 다운로드 자료 공간이 든다. 
           </p>
           
         </sect1>

         <sect1 id="localmirror"><heading>로컬 미러에서 APT 소스 추가하기</heading>

           <p>HTTP나 FTP 패키지 미러를 쓰는 대신 <file>/etc/apt/sources.list</file>
	   을 수정해서 NFS로 마운트된 로컬 디스크를 미러로 쓸 수 있다.</p>

           <p>예를 들어, 여러분 패키지 미러를 <file>/var/ftp/debian/</file>
	   에 둘 수 있고 다음과 같이 주 디렉토리로 할 수 있다:

           <example>
/var/ftp/debian/dists/stable/main/binary-&architecture;/...
/var/ftp/debian/dists/stable/contrib/binary-&architecture;/...
           </example></p>

           <p><prgn/apt/로 이를 쓰기 위해선, 다음 내용을 <file/sources.list/
	   에 다음을 더하라:

           <example>
deb file:/var/ftp/debian stable main contrib
           </example></p>

           <p>`<tt>dists</tt>'는 당연히 들어가는 것이고 릴리즈 이름 뒤에
	   들어가는 내용은 다중 디렉토리로 가는 경로를 확장하는데 쓴다. 
           </p>

          <p>새로운 소스를 더하려한다면, 이미 나와있던 "<tt/deb/"을 
	  <file/sources.list/에서 <tt/#/을 맨 앞에 더해서 못쓰게
	  만들면 된다.</p></sect1>

        <sect1 id="cdroms"><heading>CD-ROM에서 APT 소스추가하기</heading>

<!-- FJP: Are these instructions also valid for adding DVD's? -->

          <p><em/단지/ CD를 사용하고자 한다면, <file>/etc/apt/sources.list</file>
	  에 "<tt/deb/"앞에 <tt/#/ 처리를 해서 못쓰게 만든다.</p>

          <p><file>/etc/fstab</file>안에 CD-ROM이 <file>/cdrom</file>로
	  마운트 되는지 확인하라. <file>/cdrom</file> 마운트 지점은
	  <prgn/apt-cdrom/에게 필요하다. 예를 들면, <file>/dev/hdc</file>
	  가 CD-ROM이라면 <file>/etc/fstab</file>에 다음 내용을 담고 있어야
	  한다:

          <example>
/dev/hdc /cdrom auto defaults,noauto,ro 0 0
          </example></p>

          <p>네번째 부분에 <tt>defaults,noauto,ro</tt>에 사이에 <em/어떤 공간도 
	  없다/.</p>

          <p>확인하려면, CD를 넣고 시도해보라

          <example>
# mount /cdrom   # CD를 마운트 지점으로 마운트 하고
# ls -alF /cdrom # CD의 루트디렉토리를 보여주고
# umount /cdrom  # CD를 언마운트한다.
          </example></p>

          <p>다시 실행한다:

          <example>
# apt-cdrom add
          </example>

	  각각의 데비안 바이너리 CD-ROM을 가지고 있으면 각 CD를 APT 
	  database에 집어넣도록 한다.</p>
        </sect1>
        </sect>

	<sect id="upgradingpackages"><heading>패키지 업그레이드</heading>
	  
	  <p>&debian; 릴리즈 사이에 업그레이드하는 추천하는 방법은 패키지
	  관리도구인 <prgn>aptitude</prgn>를 쓰는 일이다. 이 도구는 
	  <prgn>apt-get</prgn>을 바로쓰면서 가질 수 있는 위험성을 줄이는
	  도구이다.</p>
	  
	  <p>루트로 작업을 해서 모든 필요한 파티션 마운트작업을 잊지 말고
	  다음 명령으로 파티션을 읽기-쓰기 가능하게 만들어라:

          <example>
# mount -o remount,rw /<var>mountpoint</var>
          </example></p>

	  <p><file>/etc/apt/sources.list</file>에 APT 소스 항에 
	  <tt>'stable'</tt> 배포본을 더하고 코드 이름으로 참조하게 
	  하지마라(예를 들어 <tt>&oldreleasename;</tt>)</p>.
	  
	  <p><prgn>/usr/bin/script</prgn> 프로그램을 써서 upgrade 세션 
	  내용을 저장하고 만주게 발생하면 버그 리포트에 정확한 정보를 
	  이 저장 내용을 바탕으로 주라. 기록을 시작하려면, 다음 내용을 
	  쳐넣어라:

          <example>
# script -a ~/upgrade-to-&releasename;.typescript
          </example>

	  typescript파일을 <file>/tmp</file>나 <file>/var/tmp</file>에 
	  두지 마라 이 곳은 업그레이드를 하거나 재부팅을 하면 지워질
	  수 있기 때문이다. </p>
 
          <p>typescript는 스크롤을 넘어간 화면을 모두 보여주는 기능을
	  가지고 있다. <tt/alt-F2/를 이용해서 VT2로 넘어간 뒤에 다시
	  로그인을 해서 <tt>less ~root/upgrade-to-&releasename;.typescript</tt>
	  을 해서 파일 내용을 살펴보라.
          </p>

          <p>모든 업그레이드가 끝나면 <prgn/typescript/를 <tt/exit/를 입력
	  해서 <prgn/typescript/를 끝내라.
          </p>

        <sect1 id="updating_lists"><heading>패키지 리스트 업데이트하기</heading>

          <p>새로운 릴리즈에 필요한 패키지 리스트를 가져와야한다.
	  이는 <footnote>우리는 <prgn/apt-get/을 사용해야하는데 
	  그 이유가 &oldreleasename; 버전의 <prgn/aptitude/가
	  <file/sources.list/에 새 소스를 더한뒤에 새 목록 
	  가져오기가 실패할 수 있기 때문이다.</footnote>
	  로 할 수 있다:
          </p>

          <p><example>
# apt-get update
          </example></p>

        </sect1>

<![ %mips-mipsel [
        <sect1 id="upgrading_kernel_mipsen"><heading>커널 업그레이드</heading>

          <p>&arch-title; 머신에서 시스템을 업그레이드 하기 전에
  	  커널을 업그레이드 해야한다. 이는 새로운 libc와 커널
	  사이에 프로세스 사이 통신의 일치하지 않는 정의 때문에 필요
	  하다. 그래서 새로운 커널을 써야 이 정의를 올바르게
	  고칠 수 있다.
          </p>

          <p>새로운 커널 설치에 대한 자세한 내용은 
	  <ref id="kernel-upgrade-howto">에서 찾을 수 있다.
          </p>

        </sect1>
]]>

<![ %has-woody-aptitude [
        <sect1 id="upgrading_aptitude"><heading>aptitude 업그레이드</heading>
]]>
<![ %no-woody-aptitude [
        <sect1 id="upgrading_aptitude"><heading>aptitude 설치하기</heading>
]]>

          <p>업그레이드 테스트는 &releasename; 버전의 <prgn/aptitude/가 
	  업그레이드를 하는 도중에 문제를 <prgn/apt-get/나 
	  &oldreleasename;의 <prgn/aptitude/를 쓰는 것보다 해결 능력이
	  좋다.

<![ %has-woody-aptitude [
          우선 다음을 사용해서 업그레이드 해야한다:
          <example>
# aptitude install aptitude
          </example></p>
]]>
<![ %no-woody-aptitude [
	  처음에 다음을 이용해서 설치해야한다:
          <example>
# apt-get install aptitude
          </example></p>
]]>

          <p>변화목록과 이를 확인할 부분을 보게 될 것이다. 제안된 변화
	  를 유심히 살펴보고 없어지는 패키지를 더 잘보라. 
          </p>

          <p>몇몇 경우에 많은 패키지가 없어질 목록에 있다면, 이 목록을 
	  <package/aptitude/를 따라서 선택된 다른 패키지를 "pre-upgrading"
	  을 통해 목록을 줄일 수 있다. 예제는 이를 확실히 보여준다.
	  KDE가 깔린 시스템을 써서 업그레이드 테스트 하는 도중, 이 과정이
	  수많은 KDE 패키지와 perl을 지우는 경우가 있었다. 해결책은 
	  <tt>install aptitude perl</tt>을 <tt>install aptitude</tt>대신
	  써서 하는 것이다.  
          </p>

        </sect1>

        <sect1 id="upgrading_doc-base"><heading>Upgrading doc-base</heading>

          <p><em><package/doc-base/를 설치했다면</em>, 반드시 다른 부분보다
	  먼저 업그레이드 해야한다. 이유는 동시에 <package/perl/이
	  업그레이드 되면 업그레이드가 안된다. 다음 명령을 통해서 설치
	  되었는지 확인가능하다:
          </p>
          
          <p><example>
# dpkg -l doc-base
          </example></p>

          <p>결과 내용에 "i"라고 설치 정보가 나오면 설치된 것이고 계속 작업
	  하기 위해서 업그레이드가 반드시 필요하다.</p>

          <p><example>
# aptitude install doc-base
          </example></p>

        </sect1>

        <sect1 id="upgrading_other"><heading>시스템 나머지 업그레이드</heading>

          <p>업그레이드의 주요 부분을 작업하려면 다음을 실행하라:</p>

	  <p><example>
# aptitude -f --with-recommends dist-upgrade
	  </example></p>

	  <p>이는 시스템의 완전한 업그레이드를 해줄것인데 이 뜻은 모든 패키지의 가장
	  최신 버전을 쓰게 해준다는 뜻이고 다른 릴리즈 사이의 패키지 사이에 
	  발생할 수 있는 가능한 의존성 문제를 모두 해결해준다. 필요하다면,
	  몇몇 새로운 패키지(대개는 새로운 라이브러리나 다른 이름으로 바뀐
	  패키지)를 설치할 것이고 충돌문제를 일으키는 오래된 패키지를 모두
	  지워줄 것이다(예를 들어 <package>console-tools-libs</package>).</p>

          <p>CD-ROM에서 업그레이드를 할 경우, 업그레이드 도중 특정 CD를 몇몇
	  특정시점에 넣어야할 것이다. 동일한 CD를 여러번 넣을 때도 있다; 
	  이는 CD에 퍼져있는 서로 연관되 패키지 의존성 때문이다.
          </p>
   
	  <p>다른 패키지의 설치 상태를 바꾸는 일이 없으면 업그레이드가 안되는
	  새로운 버전 패키지는 현재 상태로 "홀드"되어 있을 것입니다. 
	  이는 <prgn>aptitude</prgn>를 통해서 이 패키지를 선택하거나 
	  <tt>aptitude -f install &lt;package&gt;</tt>를 통해 할 수
	  있다.</p>
            
          <p><tt/--fix-broken/ (또는 <tt/-f/) 옵션은 <package/apt/가 깨진 의존성
	  을 수정하려고 할 때 쓴다. <package/apt/는 기본적으로 깨진 
	  패키지는 시스템에 그냥 두지 않게 되어있다.</p>

        </sect1>

        <sect1 id="trouble"><heading>업그레이드 도중 가능한 일들</heading>

          <p><prgn/aptitude/, <prgn/apt-get/, <prgn/dpkg/가 작동하는
	  도중에 다음 에러를 주면서 업그레이드 실패할 수 있다.
<example>
E: Dynamic MMap ran out of room
</example>
          기본 캐시 공간은 부족하다. 이를 해결할 방법은 
	  <file>/etc/apt/sources.list</file>에서 필요없는 부분을
	  주석처리 하거나 없애고 캐시 크기를 늘리면 해결할 
	  수 있다. 캐시 크기는 <file>/etc/apt/apt.conf</file>
	  에 있는 <tt/APT::Cache-Limit/을 수정하면 늘릴 수 있다.
	  다음 명령은 업그레이드에 충분하게 만들어줄 것이다:
<example>
# echo 'APT::Cache-Limit "12500000";' >> /etc/apt/apt.conf
</example>
	  여기선 그 파일 안에 변수 모음이 없다고 가정한다. </p>

          <p>때로 APT::Force-LoopBreak 옵션을 써서 임시적으로 필수 패키지를
	  Conflicts/Pre-Depends 순환 때문에 지우게 해줄 수 있다. <prgn/aptitude/
	  는 이를 경고해주고 업그레이드를 말릴 것이다. 
	  <tt>-o APT::Force-LoopBreak=1</tt>을 <prgn/aptitude/ 명령행에
	  정해서 쓸 수 있다.</p>
<!-- JFS: Shouldn't this mention also Apt's configuration file? -->

          <p>시스템 의존성 구조는 수동으로 할 필요가 있을 때가 있다. 
	  이런 경우는 <prgn/aptitude/를 쓰거나 

          <example>
# dpkg --remove <var>packagename</var>
          </example>

          를 하면서 다른 패키지에 안좋은 영향을 주는 패키지를 지우거나 
 
          <example>
# aptitude --fix-broken install
# dpkg --configure --pending
          </example></p>

          <p>극단의 경우 강제 옵션으로 설치를 해야한다. 

          <example>
# dpkg --install /path/to/packagename.deb
          </example></p>

          <p>"순수한" &oldreleasename; 시스템에서는 파일 충돌이 일어
	  나서는 안된다. 하지만 비공식 백포트를 쓰고 있다면 일어날 수
	  있다. 파일 충돌은 다음과 같이 일어날 수 있다:

          <example>
Unpacking replacement <var>&lt;package-foo&gt;</var> ...
dpkg: error processing <var>&lt;package-name-for-foo&gt;</var> (--unpack):
 trying to overwrite `<var>&lt;some-file-name&gt;</var>',
 which is also in package <var>&lt;package-bar&gt;</var>
          </example></p>

          <p>이런 경우 에러 메시지가 있는 <em/마지막/ 라인에 패키지를
	  강제로 지워서 해결할 수 있다:

          <example>
# dpkg -r --force-depends <var>packagename</var>
          </example></p>

          <p>모든 문제를 해결하고 나서, 다시 업그레이드를 
	  <tt/aptitude/ 명령을 통해서 할 수 있어야한다.
          </p>

          <p>업그레이드 도중, 몇몇 패키지에 대한 설정 문제와 만날 것이다.
	  <file>/etc/init.d</file>나 <file>/etc/terminfo</file> 디렉토리나
	  <file>/etc/manpath.config</file>에 대한 파일 설정 문제와
	  만난다면, 파일은 패키지 관리자 버전으로 바뀌고 시스템 일관성
	  에 맞추기 위해서 `yes'라고 답을 하는게 필요하다. 오래된 버전으로
	  <tt/.dpkg-old/을 통해서 갈 수 있다. </p>

          <p>무엇을 해야할지 모른다면, 패키지나 파일 이름을 적어두고
	  나중에 정리하라. typescript 파일을 살펴보고 업그레이드 도중
	  일어나는 일에 대한 정보를 알 수 있다.</p>

        </sect1>
        </sect>

        <sect id="nownownow"><heading>재부팅 하기 전에 해야할 일</heading>

          <p><tt>aptitude dist-upgrade</tt>가 끝나면, "정상" 업그레이드가
	  끝나지만 재부팅을 하기 <em/전에/ 확인 해야할 부분이 있다.
          </p>
          
  	<p>우선
	  <file>/usr/share/doc/xfree86-common/README.Debian-upgrade</file>
	  파일을 엑스 윈도우 시스템 패키지에 대한 더 자세한 정보니 꼭 읽기
	  바라고 이는 모든 지난 데비안 릴리즈 사용자에게 해당하는 것이니 
	  꼭 읽기 바란다.
	  </p>

        <sect1 id="newkernel"><heading>커널 업그레이드</heading>
          
	  <p>리눅스 커널은 이 과정에서 업그레이드 되지 <em/않는다/. 이를
	  하고자 한다면, <package/kernel-image-*/ 패키지중 하나를 선택해서
	  깔고 소스에서 자신에 맞게 만들어 써야한다. 
	  </p> 
	  
<![ %available-2.6 [

	 <p>&debian;은 &kernelversion; 커널과 함께 나오지만 더 나은 성능과 더 
	 나은 하드웨어 지원을 위해서 2.6을 쓸 수 있다.
	 </p>

         <p>그런데, 2.6으로 업그레이드 하지 <strong/하지 않기를/ 충고한다.
	 여기서 커널을 &oldreleasename;에서 &releasename;로 업그레이드
	 하는 하나의 부분으로 하지 않는게 좋다고 다시 말한다. 커널 2.6으로
	 올리는 내용은 <ref id="upgrade-to-2.6">에 잘 나와있다. 
         </p>
]]>
         
         <p>커널을 업그레이드 하기 위해서. 여러분의 하위아키텍처에 맞는 것을
	 선택하고 모른 커널 목록은 다음 명령으로 찾을 수 있다:
<!-- FJP: s/subarchitecture/subarchitecture and processor/ ??? -->

         <example>
# apt-cache search ^kernel-image
         </example></p>
         
         <p>설치를 하기 위해서 <tt/aptitude install/을 해야한다. 
	 새로운 커널을 설치하게 되면 재부팅을 해야 동작하게 된다.
         </p>

         <p>&oldreleasename; 설치시스템은 여러분 시스템에 커널을 
	 설치하지 <em/않을/ 것이다. 이는 &releasename;에서 변했고 여러
	 분은 버추얼 패키지를 설치해서 커널 변화를 계속 따라갈
	 수 있다. 이 패키지들은 kernel-image-<tt/VERSION/-<tt/ARCH/
	 으로 이름을 짓는데 <tt/VERSION/은 커널버전을 뜻하는 2.4나 
	 2.6을 뜻하고 <tt/ARCH/는 지원 아키텍처를 뜻한다. 
	 패키지 관리에 들어가 있는 커널에 대한 보안 지원을 원한다면 
	 커널 패키지를 설치하는데 업그레이드 뒤에 여러분 하드웨어에
	 딱맞는 것을 쓰면 된다. 
         </p>

         <p>더 많은 모험을 좋아한다면, &debian;에서 여러분에 맞는 커널을 
	 컴파일 하는 손쉬운 방법이 있다. <package>kernel-package</package> 
	 도구를 설치하고 <file>/usr/share/doc/kernel-package</file>에 
	 있는 문서를 읽으면 된다. 
         </p>
         
         </sect1>
         </sect>

         <sect id="obsolete"><heading>오래된 패키지들</heading>

<!-- JFS: Providing a full listing might be useful, especially if we can
point to the Bug that was opened when the bug was removed. This list should
be moved to an appendix, instead of adding it inline as we did in the
potato to woody RN -->

         <p>수천개의 새로운 패키지가 &releasename;에 들어왔고 또 2천개
	 패키지가 예전 &oldreleasename;에 있던 오래된 것은 빠져나갔다. 
	 더이상 업그레이드가 없어서 퇴출당했고 필요하면 이 오래된 패키지
	 를 써도 상관은 없는데 데비안 프로젝트는 대개 보안 지원을 
	 &releasename;가 나온 뒤로 1년 동안 연속으로 하지 않을 것이다
	 <footnote>보통 이 시간동안 새로운 릴리즈는 나오지 않는다. 
	 전통적으로 두가지 안정 릴리즈가 같은 시간에 지원을 받는다. 
         </footnote>, 그리고 그동안 다른 지원은 보통 하지 않을 것이다.
	 이 패키지들을 다른 대체할 수 있는 것으로 쓰기를 권하는 바이다. 
         </p>

         <p>왜 패키지가 배포본에서 없어질 수 밖에 없는지 많은 이유가
	 있다: 더이상 상위 소스 개발이 되지 않는다; 더이상 그 패키지
	 를 관리하는 데비안 관리자가 없다; 그 패키지들이 제공하는
	 기능이 다른(보통 새버전) 패키지가 대체했다; 또는 버그 때문에
	 &releasename;에 적합하지 않는 경우가 있다. 보통 마지막 경우는
	 "불안정" 배포본에 여전히 있게 된다. 
         </p>

         <p>업데이트 시스템에서 "오래된" 패키지를 알아내는 방법은
	 아주 쉬운데 패키지 관리 프론트-엔드들이 이를 쉽게 
	 알려준다. <prgn>aptitude</prgn>를 쓴다면, 이들 패키지를
	 "Obsolete and Locally Created Packages" 항목에서 보여줄
	 것이다. <prgn>dselect</prgn>는 비슷한 선택을 보여주긴
	 하지만 그 목록은 다르다. <prgn>aptitude</prgn>를 써서 
	 패키지를 &oldreleasename; 있던걸 수동으로 설치했다면,
	 이 패키지를 추적해줄 것이고 오래된 패키지라고 의존성에서 따로
	 떨어져서 있게 되는데 패키지를 지우려면 더이상 필요하지 않다고
	 알려줄 것이다. 또, <prgn>deborphan</prgn>과 달리, 
	 <prgn>aptitude</prgn>는 수동으로 설치한 오래된 패키지를 표시
	 하지 않을 것인데 이는 자동으로 의존성 때문에 걸린 놈들과는
	 반대로 작동한다. 
         </p>

         <p>오래된 패키지를 찾는 다른 방법은 <prgn>deborphan</prgn>, 
	 <prgn>debfoster</prgn>, <prgn>cruft</prgn>가 있다. 
	 <prgn>deborphan</prgn>을 가장 추천한다. 
	 그런데 기본으로 오래된 라이브러리를 보여줄것인데: 
	 "libs"나 "oldlibs" 섹션에 있는 패키지들은 다른 패키지들이
	 쓰지 않는 것들이다. 무조건 눈가리고 여기에 나온 패키지를 지우지
	 마라 잘못된 정보를 줄 수 있는 경우가 종종 있기 때문이다.
	 패키지를 하나하나 찾아보고 지우는 것이 가장 좋다(
	 내용과 크기, 설명). 
         </p>

<!-- JFS: Should we recommend purging old packages? This might be
dangerous since the maintainer scripts might try to remove stuff that
didn't belong to them... -->

         <p><url id="&url-bts;" name="Debian Bug Tracking System">은 
	 가끔 왜 패키지들이 없어졌는지 이유를 알려준다. 모아진 버그 보고를
	 그 패키지 자체에 대해서 살펴보고 그 내용은 
	 <url id="&url-bts;/cgi-bin/pkgreport.cgi?pkg=ftp.debian.org&#38;archive=yes"
	 name="ftp.debian.org pseudo-package">를 살펴보기 바란다. 
         </p>
         <sect1 id="dummy"><heading>Dummy packages</heading>

<!-- JFS: If the appendix is kept this section should point there and the packages described here should be moved to that section -->

         <p>&oldreleasename;에서 온 몇몇 패키지들은 &releasename;에서 나뉘어서
	 시스템 관리가 편하게 만들었다. 이런 경우 업그레이드 경로를 쉽게
	 다루기 위해 &releasename;는 "dummy" 패키지를 준다: 새로운 
	 패키지를 설치하게 만드는 의존성을 가진 &oldreleasename;에 있는
	 오래된 패키지와 동일한 이를을 가진 비어있는 패키지들. 이 "dummy"
	 패키지들은 업그레이드 뒤에 오래된 패키지가 되고 쉽게 없앨 수 
 	 있게 된다.</p>

         <p>다 그런건 아니지만 대부분dummy 패키지들의 설명을 보면 
	 그것들의 목적을 알 수 있다. dummy 패키지에 있는 패키지 설명은
	 균일하진 않고 <prgn>deborphan</prgn>에서 <tt>--guess</tt> 옵션으
	 로 여러분의 시스템에서 검색할 수 있다. 몇몇 dummy 패키지들은 
	 업그레이드 뒤에 없어지지 않게 되었는데 대신 프로그램의 가능한
	 현재 버전을 따라가게 만들었다.
         </p>

         </sect1>
         </sect>
      </chapt>

        <chapt id="information"><heading>자세한 시스템 변화</heading>

<!-- Controversial, disabled for now, please translate though
        <sect id="german-quotes"><heading>Problems with German Quotes</heading>
        
          <p>The locales for German style languages (e.g. de_DE@euro)
          unfortunately use an aesthetically unpleasing way of representing
          open quotation marks.  We have retained it this way in order to
          preserve compatibility with other Linux distributions, and we hope
          that in the future it will be fixed. We suggest that you switch to a
          UTF-8 locale (e.g. de_DE@euro.UTF-8), which fully supports German with
          the correct quotation marks, and, using Unicode encoding, has better
          support for other languages as well.</p>

          <p>To change the system wide locale choice, use:
          <example>dpkg-reconfigure locales</example></p>
        </sect>
-->  
<!--   Will be added if relevant information is written here
        <sect id="syntax"><heading>Important program syntax changes</heading>

       	  <p>Debian attempts to avoid changing upstream packages, therefore
          any changes in the upstream package will be present in the version in
          &debian;. This can mean that program behaviour may change between
          releases of &debian;. </p>

          <p><em>No changes yet reported.</em></p>
        
        </sect>
-->
<sect id="pythonchanges"><heading>파이썬 패키지에 대한 변화</heading>

   <p>&releasename; 있는 파이썬 2.X 패키지의 어떤 것도 'profile'과 'pstats' 표준
   모듈을 포함하지 않는다. 왜냐하면 이들은 DFSG와 호환이 안되는 라이센스를
   가지고 있기 때문이다(버그 #293932를 참조하면 자세한 내용을 알 수 있다).
   이 두 모듈은 python-profiler와 python2.X-profiler 패키지로 찾을 수 
   있고 데비안 아카이브의 non-free에 들어있다. 
   </p>
</sect>

<![ %available-2.6 [
        <sect id="upgrade-to-2.6">
        <heading>2.6 커널로 업그레이드</heading>

          <p>2.6커널 시리즈는 2.4 시리즈에서 많은 부분 변화가 있었다. 
	  모듈이 새로운 이름으로 나타났고 많은 드라이버가 부분 혹은
	  완전히 새로 작성됐다. 2.6 커널로 업그레이드 하는 일은 
	  쉬운 일은 아니다. 여기서는 여러분이 만나게 될 문제를 다룬다.
          </p>

          <p>&oldreleasename;에서 &releasename;로 올리는 일부분으로
	  2.6 커널로 올리는건 강력하게 권하지 않는다.
	  대신 여러분 시스템이 제대로 오래된 커널이나 &releasename;
	  에 있는 2.4 커널로 시스템을 돌리고 있다면 다른 프로젝트로
	  커널 2.6으로 업그레이드 해도 된다. 
          </p>

          <p>소스에서 커널 컴파일을 한다면, 2.6 커널로 재부팅 전에 
	  <package/module-init-tools/를 꼭 설치하라. 이 패키지는 
	  2.6 커널용 <package/modutils/를 대체한다. 데비안에서 주는
	  <package/kernel-image/ 패키지중 하나를
	  설치한다면, 이 패키지는 자동으로 의존성 때문에 설치된다. 
          </p>

          <p><em/LVM/을 쓴다면, 2.6 커널로 재부팅 하기 전에 <package/lvm2/
	  을 설치해야하는데 2.6 커널은 LVM1을 지원하지 않는다. 
	  LVM1 볼륨에 접근하려면, <package/lvm2/의 호환층(dm-mod 모듈)
	  을 쓰라. <package/lvm10/는 설치한 대로 둘 수 있고; 
	  init 스크립트는 어떤 커널을 쓰는지 검색하고 적절한 버전을
	  실행할 것이다. 
          </p>

          <p><file>/etc/modules</file> 파일에 있는 항목들(시스템 부팅
	  할 때 올라오는 모듈 목록)이 있다면 몇몇 모듈 이름이 바뀌었을
	  지 모른다. 이 일이 일어나면 이 파일을 새로운 모듈이름으로 
	  업데이트하라. 
          </p>

<![ %i386 [
          <p>몇몇 SATA 디스크 컨트롤러에서 드라이브에 할당된 디바이스와
	  파티션은 <file>/dev/hdX</file>에서 <file>/dev/sdX</file>로 
	  변할 수 있다. 이런 일이 있으면, 부트로더 설정와 <file>/etc/fstab</file>
	  를 맞게 고치면 된다. 변화가 제대로 적용안되면, 시스템은 제대로
	  부팅 안된다.  
          </p>
]]>

          <p>2.6 커널을 설치했지만, 재부팅 하기 전에 recovery 모드가 있는지
	  꼭 확인하라. 부트로더 설정이 새로운 커널과 예전 커널 2.4가 작동
	  하는지 확인하고 "rescue" 플로피와 cdrom을 가지고 있는지 확인해서
	  혹시 예전 커널로 부팅이 안되는 문제를 대비하도록 하라. 
          </p>

<![ %not-s390 [
        <sect1 id="2.6-keyboard">
        <heading>2.6커널에서 발생하는 키보드 문제들</heading>

          <p>&releasename;로 업그레이드 한 뒤에, 2.6 커널 이미지를 
	  설치할 수 있다.  2.6 커널 입력층 변화가 가장 크다.
          입력층에 대한 변화 때문에 모든 키보드가 "보통" 키보드로 보이게
	  만든다. 이는 선택된 키보드의 다른 형태를 쓴다면(예를 들어 USB-MAC
	  나 선 키보드), 가능성이 크고 결국 새 커널을 쓰면 키보드가 작동을
	  안할 것이다. 
          </p>
          
          <p>SSH를 통해 다른 시스템에서 들어가련 한다면, 이 문제를 
	  'dpkg-reconfigure console-data'를 통해서 해결하는데 
	  "Select keymap from full list"에서 "pc" 키보드를 선택하는 일이
	  중요하다.</p>

	 <p>콘솔 키보드가 영향을 받으면, 엑스 윈도우를 위해 키보드를
	 재설정하라. 이는 <tt>dpkg-reconfigure xserver-xfree86</tt>
  	 를 통해서 하든지 <file>/etc/X11/XF86Config-4</file> 파일을
	 직접 수정해도 된다. <ref id="nownownow">에 있는 내용
	 참조하라.  
         </p>

<![ %i386 [
          <p>이 문제는 &arch-title; 아키텍처에서 모든 PS/2와 USB 키보드에 영향을 
	  안주고 그냥 "보통" 키보드로 설정할 수 있다.
          </p>
]]>
<![ %not-i386 [
          <p>USB 키보드를 쓴다면 "보통" 키보드나 USB-MAC 키보드로 설정하라. 전자는
	  이 문제로 영향을 안 받을 것이다. 
          </p>
]]>
        </sect1>
        <sect1 id="2.6-mouse">
        <heading>마우스 설정</heading>

          <p>입력 층에 있는 변화 때문에, 마우스가 2.6 커널로 업그레이드 
	  뒤에 작동을 안하면 엑스윈도우 설정을 바꾸고 <package/gpm/도
	  바꾸라. 대부분 문제는 마우스에서 오는 데이터를 얻는 디바이스
	  가 변해서 그렇다. 다른 모듈로 올릴 필요가 있다. 
          </p>

<![ %sparc [
          <p><file>/dev/sunmouse</file>로 엑스 설정을 했다면,
	  <file>/dev/psaux</file>로 이 파일을 바꾸라.  
          </p>
]]>

        </sect1>

        <sect1 id="2.6-sound">
        <heading>사운드 설정</heading>

          <p>2.6 커널 시리즈에서는 ALSA 사운드 드라이버가 OSS 사운드 드라
	  이버에 비해 선호되었다. <package/alsa-base/를 설치하면 ALSA
	  모듈이 여러분의 사운드 카드에 맞게 자동으로 올라오고; 자동으로
	  <package/discover/와 <package/hotplug/ 자동으로 로딩이 되지 않게
	  OSS 모듈을 떨군다. 만일 OSS 모듈을 <file>/etc/modules</file>
	  에 갖고 있다면, 없애라. 
          </p>

        </sect1>
]]> <!-- %not-s390 -->

        <sect1 id="2.6-udev">
        <heading>2.6으로 전환은 udev를 활성화 시킬 수 있다</heading>

        <p><package/udev/는 유저공간 devfs를 구현한 것이다. 이는 <file>/dev</file>
	에 마운트되고 커널에서 지원하는 디바이스와 함께 그 디렉토리를
	채우게 될 것이다. 이 패키지는 자동적으로 커널 모듈이 올라가고
	내려가면서 장치를 더하고 뺄 수 있다. 그리고 <package/hotplug/
	가 새로운 장치를 검색하게 됩니다. <package/udev/는 오직 커널
	2.6하고만 동작한다. 
        </p>

        <p><package/udev/가 자동으로 <package/gnome/와 의존성에 걸려서
	설치된다면, 커널 2.6으로 올리면 자동으로 <package/udev/이 활성화
	될 것이다. 
        </p>

        <p><package/udev/는 어려가지로 테스트 되었고 아직 해결안된 장치
	에 생기는 작은 문제를 겪을 수 있다. 대부분 문제는 장치 허가권이나
	소유권 문제입니다. 몇몇 경우 장치가 기본으로 만들어지지 않는다
	(예를 들어 <file>/dev/video</file>과 <file>/dev/radio</file>).
        </p>

        <p><package/udev/는 설정 메카니즘을 주는데 이러한 문제를 해결하게
	도와준다. <manref name="udev" section="8">와 <file>/etc/udev</file>
	를 보면 자세한 내용이 있다. 
        </p>

        </sect1>
        </sect>
]]> <!-- %available-2.6 -->

<![ %i386 [
        <sect id="x-mouse">
        <heading>엑스 윈도우가 안뜰 때</heading>

          <p>부팅을 한뒤에 X가 뜨지 않고 "missing core pointer"와 
	  같은 메시지를 <file>/var/log/XFree86.0.log</file>에서
	  보게 된다면, 문제가 마우스 드라이버가 <prgn/hotplug/에서
	  충분히 빨리 올라오지 못하는 경우이다(
	  <url id="http://bugs.debian.org/255744" name="#255744"> 버그)
	  해결 방법은 여러분 마우스에 대한 드라이버 모듈을
	  <file>/etc/modules</file>에 더하라(예를 들어 psmouse).
          </p>

        </sect>

        <sect id="x-transmeta">
        <heading>트랜스메타 크루소 시스템 위의 엑스 윈도우 시스템</heading>

          <p>엑스 서버가 &releasename;에 보통 있게 되는데 여기에는 많은 
	  트랜스메타(TM) 크루소(TM) 프로세서에서 잘 작동하지 않는 코드를
	  포함하고 있을 수 있다. "morphed"된 캐시 코드가 x86에서 CPU에 
	  있는 크루소 VLIW이 버그 상태이 있을 때 X 클라이언트 어플리케이션
	  이 다음 메시지를 뿌리면서 실행이 안될 것이다:

<example>
X Error of failed request:  BadLength
   (poly request too large or internal Xlib length error)
Major opcode of failed request:  18 (X_ChangeProperty)
Serial number of failed request:  15
Current serial number in output stream:  18
</example></p>

          <p>이 문제는 작동을 몇시간 하다보면 어플리케이션이 빠르게 죽어
	  버리는 상태이고; 디스플레이 관리자가 작동한다면 자꾸 죽게 되고 
	  자동적으로 다시 실행하려고 할 것이다. 이 상태는 버그가 있는 
	  VLIW 트랜스메타 코드가 캐시에서 나올 때까지 계속된다. 
          </p>

          <p>버그가 독점 트랜스메타 코드 모핑 소프트웨어(CMS)에 있고 랩탑
	  BIOS가 부팅할 때 벤더 사인용 CMS를 확인하기 때문에 트랜스메타와
	  랩탑 판매자 사이에 협상으로 해결될 수 있다. 이 문제에 대한
	  내용은 <url id="http://www.cs.auc.dk/~fleury/bug_cms/">와 
	  버그보고인 <url id="http://bugs.debian.org/216933" name="#216933">
	  를 보면 좀더 알 수 있다. 
          </p>

          <p>이 버그에 대한 해결은 최적화 없이 컴파일된 X 서버로
	  만들언진 <package/xserver-xfree86-dbg/를 쓰면 된다. 
          </p>

        </sect>
]]>
        </chapt>

      <chapt id="moreinfo">

        <heading>&debian;에 대한 더 많은 정보</heading>

        <sect id="morereading"> &debian;에 대한 <heading>더 읽을 거리</heading>
	문서는 데비안 문서 프로젝트(DDP)에 있는데 여기서는 데비안
	사용자와 개발자를 위해 수준높은 문서를 만드는게 목적이다. 문서는
	데비안 지침, 데비안 새로운 관리자 안내서, 데비안 FAQ가 있고 더
	많은 문서가 있다. 더 많은 목록은 DDP 웹 사이트 <url id="&url-ddp;">
	를 참조하라. 
        </p>
 
        <p>각 패키지에 대한 문서는 <file>/usr/share/doc/<var>package</var></file>
	에 있으며 여기에는 저작권 정보와 데비안에 특정된 내용과 상위
	문서가 들어있다.
        </p>
 
      </sect> 
      
      <sect id="gethelp"> 
        <heading>도움 구하기</heading> 
      
        <p>도움을 주는 내용과 충고와 지원은 많지만 몬서를 잘보면 모든
	해답이 있다는 것을 알 것이다. 여기서는 데비안을 새로 쓰고자 하는
	사람들에게 간략한 소개를 하려고 한다. 
        </p>
        
      <sect1 id="lists">
        <heading>메일링 리스트</heading>
        <p>데비안 사용자들이 관심을 가질만한 리스트는 debian-user 
	리스트와 다른 debian-user-<var/language/ 리스트가 있다. 
	전자는 영어이고 후자는 각국 언어이다. 이 리스트에 대한 
	정보와 자세한 사항과 구독은 <url id="&url-debian-list-archives;">
	를 참조하다. 여러분이 질문할 문제가 이미 나와있는지 우선 찾아보고
	나서 질문을 올리는 예의는 지키면 좋겠다.
        </p>
      </sect1>

      <sect1 id="irc">
        <heading>인터넷 릴레이 채팅</heading> 
        
        <p>데비안은 IRC 채널을 이용해서 사용자들에게 도움을 주고 있다. 
	이 서버는 오픈 프로젝트 IRC 네트워크에 있는데 오픈소스 공동체
	사이에 정보를 나누기 위해 만들어졌다. 여기에 접속하려면 여러
	분이 좋아하는 irc 클라이언트로 &opn-irc-server;로 접속해서
	join #debian으로 들어가라.
        </p>
        
        <p>채널 지침을 잘 따르고 상대방을 존중하면 된다. 자세한 내용은
	<url id="&url-opn;" name="website">를 참조하라. 
        </p>

      </sect1>
      </sect> 

      <sect id="bugs">
        <heading>버그 보고하기</heading>
        
        <p>우리는 데비안 GNU/리눅스를 최상의 품질의 OS로 만들고 있으나
	모든 패키지가 버그가 없는 것은 아니다. 사용자들에게 이런
	서비스를 주고자 버그에 대한 모든 정보를 우리의 버그추적시스템
	(BTS)에서 보여주는데 <url id="&url-bts;" name="bugs.debian.org">
	서 확인가능하며 이는 데비안의 "열린 개발"정책과 일치한다. 
        </p>
<!-- FJP: I propose to replace the last sentence by:
        Consistent with Debian's 'open development' philosophy and as a 
        service to our users, we provide all the information on reported bugs
        at our own Bug Tracking System (BTS). The BTS is browseable at
        <url id="&url-bts;" name="bugs.debian.org">.
-->

        <p>패키지에 속해있거나 배포본에 있는 버그를 발견했다면 이를 보고해서
	다음 릴리즈에 문제가 없게 만들면 된다. 버그보고에는 이메일
	주소가 필요하고 버그를 추적하고 개발자가 보고자와 이야기를 잘 해서
	더 많은 정보를 얻게 하면 된다. 
        </p>

        <p><package>reportbug</package>을 써서 버그 보고를 하거나 
	하나하나 전자우편으로 보낼 수 있다. 자세한 사항은 버그 추적 시스템
	을 읽고 참조 카드(<file>/usr/share/doc/debian</file>)를 읽거나
	<url id="&url-bts;" name="Bug Tracking System">보고 할 수 있다. 
        </p>
<!-- FJP: The 'bug' program and package are obsolete. -->
<!-- JFS: The reference cards are only available if you have doc-debian installed, which might not always be the case -->

      </sect>

      <sect id="contributing">
        <heading>데비안에 도움주기</heading>
        
        <p>데비안에 도움을 주는데 전문가가 될 필요는 없다. 여러가지 상황에서
	문제를 가진 다른 사용자를 도와주면서
	(<url id="&url-debian-list-archives;" name="lists">
	공동체에 도움을 줄 수 있다. 개발과 관련된 
	<url id="&url-debian-list-archives;" name="lists">에 문제를 확인하고
	해결책을 주는 일은 매우 좋은 일이다. 데비안을 높은 수준으로 유지 하기
	위해서 <url id="&url-bts;" name="버그 보고">를 통해서 개발자들이
	추적을 하고 수정하게 된다. 데비안 프로젝트에 좀더 많은 도움을
	적즉적으로 주려뎐 <url id="&url-ddp;" name="문서">를 쓰거나
	기존에 있는 문서를 자신의 언어로 id="&url-debian-i18n;" name="번역">
	하는 일이다. 
        </p>

        <p>좀더 시간을 내서 하겠다면, 데비안 안에서 자유소프트웨어 모음을
	관리할 수 있다. 데비안 안에서 패키지 요청을 하는 패키지를 관리하거나
	입양을 하는 일이 도움이 될 것인데 이는 <url id="&url-wnpp;" name="Work Needing
	and Prospective Packages database">에서 자세하게 알아 볼 수 있을
	것이다. 데비안 포팅을 포함한 데비안 안에서 재밌게 할 수 있는 
	부분이 있다면, <url id="&url-debian-jr;" name="Debian
	Jr.">와 <url id="&url-debian-med;" name="Debian Med">도 있으니 참고 바란다. 
        </p>

        <p>어떤 경우라도, 사용자이건, 프로그래머건, 문서 작성을 하건 번역을
	하건 자유 소프트웨어 공동체에서 일하고 있다면 이미 자유 소프트웨어
	에 도움을 주고 있는 것이다. 공동체에 도움을 주는 일은 다시 보답을
	받는 일이면서 즐겁고 새로운 사람들을 만나면서 따뜻한 마음을 갖게
	되는 일이다. 
        </p></sect>

    </chapt>


<![ %upgradekernel [

    <appendix id="kernel-upgrade-howto"><heading>커널 업그레이드</heading>

<![ %not-mips-mipsel [
<![ %sparc [
          <p><strong>부록에 들어간 정보는 시스템을 정상적으로 업그레
	  이드 한 뒤에 시스템 업그레이드 하기 <em/전에/ 커널을
	  업그레이드 할 필요가 있는 경우에 한한다. 여러분 시스템에
	  에 한한다. 필요한 사항은 <ref id="new-kernel">을 읽어보면 된다.</strong>
          </p>
]]>
          <p>다음 내용은 새로운 커널을 설치하기 위한 가능한 백포트 
	  도구를 쓰는 방법을 하나하나 알려준다. 
          </p>

          <p>패키지가 &oldreleasename;에서 설치할 필요가 있을 때, 
	  <file>sources.list</file>에서 항목을 확인해야한다. 
	  <ref id="old-sources">ㅇ에 있는 &oldreleasename;도 
	  참조하라. 
          </p>
]]> <!-- %not-mips-mipsel -->

<![ %mips-mipsel [
          <p>다음 지시내용은 새로운 커널을 설치하는 방법을 알려준다.
          </p>
]]>

          <p><taglist>
               <tag>필요한 패키지를 다운로드하고 설치하라</tag>

<![ %mips-mipsel [
                <item>
                <p><em>apt를 쓰려면</em>: 아직 하지 않았다면, 
	        <file>sources.list</file>을 고쳐서 &releasename;
		를 수정하고 패키지 리스트를 업데이트 하면서 커널-이미지
	     	를 여러분 머신에 맞게 설치한다. 다음 명령으로 가용한 커널
		이미지를 찾을 수 있다

         <example>
$ apt-cache search ^kernel-image
         </example></p>

                <p>설치를 하는도중에 패키지는 모듈이 맞지 않는 문제를
		불평할 수 있다. 그리고 설치를 계속할지 말지 물어보게
		된다. <tt>YES</tt>라고 답을 하면 재부팅을 하면 그 문제
		는 자동해결된다.
                </p>

                <p><em>dpkg</em>:를 쓰게 되면 현재 커널 패키지를 데비안 
		가져올 수 있다. 가능한 패키지들은:

                <list>
<![ %mips [
                <item><p><url id="&mips-kernel-patch;/&mips-kernel-image-r4k;" name="&mips-kernel-image-r4k;">
                는 R4XX0 processors과 Indy나 Indigo2와 같은 SGI IP22 하위 구조용이다.</p></item>
                <item><p><url id="&mips-kernel-patch;/&mips-kernel-image-r5k;" name="&mips-kernel-image-r5k;">
                는 R5000 프로세서와 Indy, Indigo2와 같은 SGI IP22 하위구조용이다.</p></item>
                <item><p><url id="&mips-kernel-patch;/&mips-kernel-image-swarm;" name="&mips-kernel-image-swarm;">
                는 Broadcom BCM91250A (aka SWARM) pass 2.2용이다.</p></item>
]]>
<![ %mipsel [
                <item><p><url id="&mips-kernel-patch;/&mipsel-kernel-image-r3k;" name="&mipsel-kernel-image-r3k;">
		R3000 기반 KN02나 그 호환 보드를 가진 DECstations, 예를 들어 DECstation 5000/1xx 시리즈인데 xx=20,25,33이고 DECstation 5000/240용이다.</p></item>
                <item><p><url id="&mips-kernel-patch;/&mipsel-kernel-image-r4k;" name="&mipsel-kernel-image-r4k;">
                R4X00 기반 KN02나 그 호환 보드를 가진 DECstations, 예를 들어 DECstation 5000/150, Personal DECstation 5000/50와 DECstation 5000/260용이다.</p></item>
                <item><p><url id="&mips-kernel-patch;/&mipsel-kernel-image-r5k-cobalt;" name="&mipsel-kernel-image-r5k-cobalt;">
                MIPS 기반 Cobalt 머신들(예를 들어 Qube, RaQ, Qube2와 RaQ2).</p></item>
                <item><p><url id="&mips-kernel-patch;/&mipsel-kernel-image-r5k-lasat;" name="&mipsel-kernel-image-r5k-lasat;">
                Lasat Masquerade Pro위에서 돌아가는 R5000 프로세서용이다.</p></item>
                <item><p><url id="&mips-kernel-patch;/&mipsel-kernel-image-swarm;" name="&mipsel-kernel-image-swarm;">
                Broadcom BCM91250A (aka SWARM) pass 2.2.</p></item>
                <item><p><url id="&mips-kernel-patch;/&mipsel-kernel-image-xxs1500;" name="&mipsel-kernel-image-xxs1500;">
                Au1500 기반 XXS1500 보드.</p></item>
]]>
                </list></p>

                <p><tt>dpkg -i</tt>를 써서 패키지를 설치한다. 
		모듈이 안맞다고 <package>modutils</package>에서 불평할
		수 있다. 그러면서 설치를 계속할지 물어본다. <tt>YES</tt>
		답하면 새 커널로 재부팅 뒤에 정상작동 할 것이다. 
                </p>

                </item>
]]> <!-- %mips-mipsel -->

<![ %not-mips-mipsel [
               <item>
               <p><em>apt를 쓰면</em>: <prgn>apt</prgn>나 다른 프론트
	       엔드를 써서 패키지를 설치하려면 다음 내용을 
	       <file>/etc/apt/sources.list</file> 넣어라:

<example>
deb &url-kernel-upgrade;
# sources are also available if you need them
# deb-src &url-kernel-upgrade;
</example></p>

<![ %sparc [
               <p><package>modutils</package>과
	       <package>initrd-tools</package> 패키지를
	       설치하라. 
]]>
<![ %hppa [
               <p><package>module-init-tools</package>,
	       <package>modutils</package>,
	       <package>palo</package>,
	       <package>initrd-tools</package>을 설치하라:
<example>
# apt-get install module-init-tools palo initrd-tools modutils
</example>
]]>
               (이 뒤에 안전하게 추가항목을 없애도 된다.)
	       </p>

               <p><file>sources.list</file>을 수정해서 <ref id="upgrade-process">
	       에 있는 것처럼 &releasename;로 가리키게 했다면, 패키지 리스
	       트를 업데이트하고 
	       <package>&upgrade-kernel-image-name;</package>를 설치하라. 
               </p>

               <p><em>dpkg를 쓰면</em>: <prgn>dpkg</prgn>로 패키지를 
	       직접 설치하려하면, 다음 파일을 우선 설치하라. 
               </p>
               <p><list>
                 <item><url id="&upgrade-kernel-image;"></item>
                 <item><url id="&upgrade-kernel-modutils;"></item>
<![ %hppa [      <item><url id="&hppa-modutils;"></item> ]]>
                 <item><url id="&all-initrd-tools;"></item>
                 <item><url id="&upgrade-kernel-cramfsprogs;"></item>
               </list></p>

               <p>커널 패키지는 
	       <package>&upgrade-kernel-modutils-name;</package>에 
	       존하는데 
               <![ %hppa [오래된 <package>modutils</package>와 충돌한다
               )]]>;
               <package>initrd-tools</package>는 
	       <package>cramfsprogs</package>에 의존한다.
               모든 다른 패키지들(<package>stat</package>,
               <package>cpio</package>, <package>ash</package>)는 
	       &oldreleasename;에서 하듯이 하면 된다. 
               </p>
<![ %hppa [
               <p><em/LVM/을 쓴다면, <package/lvm2/를 미리 설치해야 커널 2.6이
	       거기에 맞게 작동한다. 커널 2.6은 LVM1을 지원하지 않기 때문인데,
	       LVM1에 접근 하려면, <package/lvm2/의 호환층인 dm-mod을 써야한다. 
	       <package/lvm10/는 그냥 설치 상태로 둬도 된다: 
	       init 스크립트가 어떤 커널을 쓰는지 확인해서 자동으로 적절한
	       버전을 실행한다. 
               </p>
]]>
               </item>
]]> <!-- %not-mips-mipsel -->

               <tag>Don't delete your old kernel yet</tag>
               <item><p>You should first verify that the new one boots and all hardware
               needed for the upgrade works (e.g. network adaptors).</p></item>

<![ %not-mips-mipsel [
               <tag>시스템이 부팅가능하게 만들기</tag>
               <item>
               <p><file>&bootloader-conf;</file>을 수정해야한다. 현재 커널은
	       initrd를 쓰고 있지만 예전 &oldreleasename; 데비안 커널은
	       쓰지 않았다. 
               </p>
               </item>
]]>

               <tag>새로운 커널로 리부트</tag>
               <tag>시스템 확인</tag>
               <item><p>입력 장치, 디스플레이 장치, &releasename; 패키지
	       에 접속이 필요한 장치들(네트워크 어댑터, CD 드라이브 등)
	       을 확인하라. 몇몇 드라이버 모듈이 다른 이름으로 바뀌었을 수
	       있고 몇몇 드라이브는 예전 커널에서 컴파일 된 것이 다른 모듈로
	       될 수도 있다....
               </p></item>

          </taglist></p>

    </appendix>
]]>

    <appendix id="old-stuff">
    <heading>&oldreleasename; 시스템 관리하기</heading>

       <p>이 부록은 패키지를 설치하거나 &oldreleasename; 패키지에서 업그레
       이드 하는 방법을 담고 있는데 항상 &releasename;로 업그레이드
       하기 전에 확인하라. 특정의 경우에 해당한다는 것을 알아둬라. 
       </p>

       <sect id="old-upgrade">
       <heading>&oldreleasename; 시스템 업그레이드하기</heading>

          <p>기본적으로 &oldreleasename;에서 업그레이드 했던 것과 
	  크게 다르지 않다. 단지 차이라면 여러분 패키지 목록에 
	  <ref id="old-sources">에서 설명한 &oldreleasename; 패키지들이
	  있다는 점이다. 
          </p>

       </sect>

<![ %has-woody-aptitude [
       <sect id="old-aptitude">
       <heading>aptitude의 &oldreleasename; 버전 설치</heading>

          <p>우선 &oldreleasename;의 <package/aptitude/를 설치할 것이고
	  &releasename;의 <package/aptitude/ 아리라는 것을 확인하라. 이 
	  내용은 <ref id="old-sources"> 설명하였다. 
          </p>

          <p>이 뒤로, 다음을 실행하라. 

          <example>
# apt-get install aptitude
          </example>

          그리하여 <package/aptitude/ 설치하라.</p>

       </sect>
]]>

       <sect id="old-sources">
       <heading>소스 리스트 확인</heading>

          <p>만일 <file>/etc/apt/sources.list</file>에서 'stable'을 
	  쓰고 있다면 이미 &releasename;를 "사용하고" 있는 중이다. 
	  이미 <tt>apt-get update</tt> 했다면, 다음 사항을 문제 없이
	  따른다. 
          </p>

          <p>이미 &releasename; 패키지를 쓰고 있다면, 더이상 &oldreleasename;
	  에서 패키지를 쓸 수 없다. 이런 경우 여러분 스스로 계속 해 나갈 것인지
	  말 것인지 결정해야한다. 패키지를 다운 그레이드 할 수도 있지만 여기선
	  다루지 않는다. 
          </p>

          <p><file>/etc/apt/sources.list</file>을 아무 편집기나 써서 root로 
	  열어서 <tt>deb http:</tt>나 <tt>deb ftp:</tt> 부분이 "<tt/stable/"
	  을 참조하는지 확인하라. 그런 부분이 있으면, <tt/stable/을 
	  <tt/&oldreleasename;/로 바꾸라. 
          </p>

          <p><tt>deb file:</tt>로 시작하는 부분이 있으면 직접 확인해서
	  위치가 &oldreleasename;인지 &releasename;인지 어떤 부분을
	  리스트가 참조하는지 확인하라. 
          </p>

          <p><strong/중요!/ <tt>deb cdrom:</tt>으로 시작하는 부분은 바꾸지 
	  마라. 이 부분을 바꾸면 <prgn/apt-cdrom/ 실행해서 다시 복구 해야
	  한다. 'cdrom'부분이 "<tt/unstable/"를 참조하는 것에 놀라지 마라.
	  혼란이 올지 모르지만 정상이다. 
          </p>

          <p>변화를 줬다면 파일을 저장하고 다음을 실행하라.

          <example>
# apt-get update
          </example>

          이러면 패키지 리스트를 새롭게 할 수 있다.</p>

       </sect>

    </appendix>
  </book>
</debiandoc>

<!-- Keep this comment at the end of the file
Local Variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-namecase-general:t
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:nil
sgml-declaration:nil
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
fill-column: 75
End:
-->

