<!--Maintainer: Hero_xbd!(heroxbd at 163 dot com)-->
<!--Original Version 1.53-->

<!DOCTYPE debiandoc PUBLIC "-//DebianDoc//DTD DebianDoc//EN" [
  <!entity % dynamicdata  SYSTEM "../dynamic.ent"       > %dynamicdata;
  <!entity % shareddata   SYSTEM "../release-notes.ent" > %shareddata;
  <!entity docid "$Id: release-notes.zh_CN.sgml,v 1.7 2005-06-02 21:54:16 jseidel Exp $">
]>

<!-- Be careful with automatic reformatting. Please note that the indentation
     in examples is used in the output (plus additional space) as well. -->

<debiandoc>
  <book>
  <titlepag>
    <title>&debian; &release; ('&releasename'), &arch-title;发布说明</title>
      <author>
        <name>Josip Rodin, Bob Hilliard, Adam Di Carlo, Anne Bezemer, Rob
        Bradford (current), Frans Pop (current)</name><email></email>
      </author>
      <author>
        <name></name><email>debian-doc@lists.debian.org</email>
      </author>
      <version>&docid;</version>
    </titlepag>
    <toc detail="sect1">
      <chapt id="about"><heading>关于新的《发布说明》</heading>       
        <p>[如果您的版本已经有一个多月了，您可在<url id="&url-release-notes;">下载最新版。]</p>

        <p>请注意旧的《发布说明》讨论从&oldreleasename之前的发行版升级。可是这些信息往往使本说明复杂化，所以在新的《发布说明》中我们只讨论从&debian 3.0('woody')升级。如果您需要从更老的Debian发行版升级，请阅读旧的《发布说明》。</p>

      </chapt>
      <chapt id="whats-new"><heading>&debian; &release;的新特性</heading>

        <p>&debian 3.1 ('sarge')与&debian; 3.0 ('woody')支持的系统架构保持一致。以下是本Debian发行版支持的系统架构的完整列表:</p>   
        <p>
          <list>
            <item><p>Intel x86 ('i386')</p></item>
            <item><p>Motorola 680x0 ('m68k')</p></item>
            <item><p>Alpha ('alpha')</p></item>
            <item><p>SPARC ('sparc')</p></item>
            <item><p>PowerPC ('powerpc')</p></item>
            <item><p>ARM ('arm')</p></item>
            <item><p>MIPS ('mips' (Big endian) and 'mipsel' (Little endian))</p></item>
            <item><p>Intel Itanium ('ia64')</p></item>
            <item><p>HP PA-RISC ('hppa')</p></item>
            <item><p>S/390 ('s390')</p></item>
          </list>
        </p>

          <p>您可以在<url id="&url-ports;" name="Debian系统移植页">阅读更多的系统移植信息。</p>

<![ %secondrelease [
           <p>这仅是 &debian;在&arch-title;系统架构上的第二次正式发行。我们觉得系统本身已经证明了它有公开发行的水准。然而，因为它从来没有像其他系统架构上的发行版那样知名(而且因之能被用户测试)，所以您可能会遭遇到一些问题。请利用我们的<url id="&url-bts;" name="Bug跟踪系统">来报告您所发现的任何问题；在报告中请不要忘了提及您是在&architecture;系统架构上发现这个错误的。</p>	  
]]>

<![ %not-m68k [
          <p>&arch-title;上的&debian; &release; 使用&kernelversion;内核。</p>
<![ %available-2.6 [
          
          <p>在&arch-title;上也可以使用&kernelversion-2.6;内核。注意Debian的2.6.8内核软件包含有2.6.8.1内核和一些补丁。]]>

]]> <!-- %m68k -->
<![ %m68k [
          <p>&arch-title上的&debian; &release;使用2.2.25和2.4.27版内核。对于某些子系统2.6.8内核也可用，但仍处于实验阶段。</p>
]]>	  	  
        
       <sect id="newdistro"><heading>新的发行版</heading>
           
           <p>新版Debian比旧的&oldreleasename;拥有更多的软件；新版包含9000多个新软件包。大多数－－将近6500个软件包(占&oldreleasename;的73%)－－的软件被升级。另外，许多软件包由于某些原因被从发行版中移除，不会进行任何更新，它们在包管理程序中被注以'obsolete'。</p>

           <p>本版的Debian GNU/Linux包括非常出色的XFree86 4.3，它提供对更广泛的硬件支持、更好的自动检测功能、更高级的技术如Xinerama和3D加速支持。</p>
           
           <p>本版的&debian;比以前更加桌面化了，它现在提供GNOME 2.8和KDE 3.3。而且首次提供OpenOffice.org完整办公套件以及Evolution group software与GAIM即时消息客户端。</p>
	   
	   <p>&releasename;的<prgn/aptitude/是更优秀的字符界面包管理系统。它在包依赖问题解决上比<prgn/apt-get/更强大。<prgn/aptitude/支持大多数<prgn/apt-get/的命令行操作。如果您仍在使用<prgn/dselect/，就应试试<prgn/aptitude/来管理软件包。</p>
           
           <p>官方&debian;发行版包括13张binary CD(含有编译后的软件包――译者)和十几张source CD(含有未编译的原代码――译者)，现在也可以使用单张DVD。</p>

	<sect1 id="volatile"><heading>debian-volatile新服务</heading> 
           
           <p><em>debian-volatile</em>允许用户轻松升级经常更新的软件包。例如病毒扫描软件签名列表或spam滤镜样式集。管理员可以像"security.debian.org"一样方便地使用"volatile.debian.net"，接受最新信息，避免维护基于未更新软件系统的忧虑和风险。请查看<url id="&url-debian-volatile" name="volatile.debian.net">来获得更多信息及镜像列表。</p>
	   
	   <p>注意debian-volatile<em/不是/官方Debian服务。请自己辨别决定是否使用它。</p>

        </sect1>
	
	<sect1 id="non-us"><heading>non-US被废弃</heading>
	
	   <p>从前在non-US部分的软件包在&releasename;中已被移进普通包列表。如果<file>/etc/apt/sources.list</file>中有指向"non-us"的行，您应移除它们。</p>
	</sect1>
	   
       </sect>

        <sect id="newinst"><heading>新的安装系统</heading>

          <p>旧的&debian;安装系统已被全新的debian-installer取代。新的安装系统采用模块化设计，在扩展性理念下开发。它已经被完整翻译为近40种语言；
          其它语言的翻译工作仍在继续，并将会被添加到&releasename;中。</p>
          
          <p>安装系统的新功能包括更有效的硬件检测、可从U盘启动、最初可选用<prgn>aptitude</prgn>来安装软件包、<prgn>XFS</prgn>分区格式支持、<prgn>RAID</prgn>和<prgn>LVM</prgn>(一种卷管理工具)支持等等。</p>
          
          <p>建议用户阅读在第一张安装CD或<url id="&url-install-manual;" name="发布页">上的《安装手册》来深入了解新安装系统。《安装手册》已经被完整翻译为8种语言并且正在被翻译成更多种语言。其它语言版本将在完成后被放在网站上。</p>

<![ %i386 [
	  
	  <p>在&arch-title;系统上，有一组特殊供盲人使用的安装软盘，"speakup"。它们含有一个支持braille(布莱叶文，一种盲文－－译者)显示的内核。可以在brltty(一种支持盲文显示的daemon程序――译者)文档中找到所有支持的设备型号。请查阅<url id="&url-installer;index#speakup"
          name="debian-installer发布页">来获得"speakup"的深入信息。</p>
	  
]]>

<!-- FJP: Maybe a short description of available installation methods could be
          added here: floppy, CD (netinst/business-card/full ), netboot,
          hd-media, USB-stick. -->
        </sect>

      </chapt>

      <chapt id="installing"><heading>全新安装</heading>

        <p>原有的<prgn>boot-floppies</prgn>安装系统已被全新更强大的模块化<prgn>debian-installer</prgn>取代。</p>
	
	<p>新的安装程序提供多种安装方式。具体可用的安装方式取决于您的系统架构。</p>
        <p>如果要全新安装Debian，请阅读官方CD上的
        <example>
/doc/install/manual/<var>language</var>/index.html
        </example>
        或Internet上的<url id="&url-install-manual;"name="&releasename; 安装手册">以及debian-installer的<url id="&url-installer;index#errata" name="errata">。</p>

<![ %not-m68k [	
<![ %d-i-avail-2.6 [
	
          <p>缺省的情况下安装系统使用2.4系列内核。对于&arch-title;也可以使用基于2.6的内核。要了解更多信息，请参考《安装手册》。</p>
]]>          
<![ %d-i-default-2.6 [
          <p>安装系统在&arch-title;上缺省使用2.6系列的内核。</p>
]]>          	

]]> <!-- %not-m68k -->
<![ %m68k [
          <p>取决于子系统结构，安装时可以使用2.2.25内核或2.4.27内核或两者。对于Mac2.2.25内核更受偏爱，对于其它系统则是2.4.27内核。</p>

          <p>目前<prgn/partman/不支持atari分区，<prgn/partman/是<package/debian-installer/中用来分区的工具。这意味着这一步仅能手动进行。请查阅Installation Guide来获取深入信息。</p>
]]>
	
<![ %alpha [
        <p>安装程序只能在那些支持SRM终端的alpha系统上使用。请在开始安
        装前将系统转换为SRM。如果您的机器只支持 AlphaBIOS/ARC终端，您
        仍然可以通过安装(最小化)的 &oldreleasename; 随后将其升级来安装
        &releasename;。要了解关于不同终端的更多的信息，请阅读<url
        id="http://www.debian.org/ports/alpha" name="Debian alpha 移植页面">.
        </p>
]]>

<![ %sparc [ 
      <sect id="sparc_kbd"><heading>&arch-title;上的键盘问题</heading>

        <p>在安装过程中会有一些键盘问题。</p>

        <p>第一个问题是被Sun用在诸如SunBlade上的USB键盘。当采用默认的2.4内核安装时，这些键盘会被安装程序错误地识别为普通Sun键盘。一些解决方法可在《安装手册》中找到。</p>

        <p>第二个问题与内核有关。2.6系列的内核采用一个不同的输入层，它使所有键盘看起来都像“普通”PC键盘。这意味着如果您以2.4内核启动安装程序而且配置它为Sun或USB键盘，然后（在export模式）为新系统选择2.6内核，很可能在重启之后造成键盘不工作。</p>

      </sect>

      <sect id="sparc_fb"><heading>&arch-title;上的帧缓冲器问题</heading>

        <p>由于一些系统的显示问题，在&arch-title;上帧缓冲器默认被禁用。这会导致支持帧缓冲器系统显示得非常难看，就像ATI图形卡一样（ATI现在也很出色吧？－－译者）。如果您在安装系统中见到显示问题，可以"debian-installer/帧缓冲器=true"参数启动安装程序。</p>

      </sect>
]]>

<sect id="popcon"><heading>包受欢迎度排名</heading>

        <p>由于技术方面的原因，&releasename;中不再缺省安装<package/popularity-contest/。未来版本将会纠正这个问题。</p>

        <p><package/popularity-contest/向Debian项目提供在发行版中被使用的软件包信息。这些信息主要用于决定软件包在安装CD-ROM上的顺序，也时常被开发人员用于决定是否继续使用缺少维护者的软件包。</p>

        <p>从<package/popularity-contest/得到的信息是匿名的。感谢您安装<package/popularity-contest/并允许它参与官方调查;您就在帮助我们优化Debian。</p>

      </sect>
      </chapt>


      <chapt id="upgrading"><heading>从旧发行版升级

<!-- For doc-writers' convenience:
Debian Supported
release: architectures:

1.3.1 or less i386
2.0           i386,m68k
2.1	      i386,m68k,alpha,sparc
2.2	      i386,m68k,alpha,sparc,powerpc,arm
3.0	        + hppa s390 mips mipsel ia64
--></heading>

        <sect id="backup"><heading>准备升级</heading>

          <p>在升级之前，强烈建议您完整备份系统或至少备份重要数据和配置文件。升级工具和进程非常可靠，但是在安装过程中的硬件错误会导致系统严重损坏。</p>

          <p>您需要备份的主要部份是/etc和/var/lib/dpkg中的内容以及dpkg --get-selections "*"（此处双引号不可忽略）的输出信息。</p>
	  
	  <p>升级过程并会修改<file>/home</file>目录中的文件。不过，一些应用程序（比如Mozilla，某些KDE程序）会在第一次执行时用新的默认设置覆盖用户配置文件。作为预防措施，您可以把home目录中以句点开头的隐藏文件备份起来，以便恢复原来的设置。同时，通知其它用户这一问题。</p>

          <p>虽然通过SSH访问您系统的用户不会在升级过程中注意到太多，他们也可能想继续工作，但是，在升级之前通知所有用户是明智的。如果要采取进一步预防措施，可以在升级之前备份或反挂载用户分区(/home)。重新启动并不是必须的，除非您要把内核一并升级。</p>

          <p>全面的升级应在文本模式的虚拟控制台(或直连的串行终端)运行，或者远程地通过SSH运行。</p>

          <p><strong/重要提示!/不要使用telnet、rlogin、rsh或在要升级的计算机上由xdm、gdm、kdm管理的X会话进行升级。因为它们很可能在升级时被终止，那将造成一个因未完全升级而无法访问的系统。</p>
	  
          <p>任何软件包安装操作都必须在超级用户权限下运行，所以要以root身份登录或用su/sudo来取得必需的访问权限。</p>
	</sect>
	
	<sect id="system-status">
	<heading>检查系统状态</heading>

        <p>在本章描述的升级过程是专门针对“纯”的&oldreleasename;系统。在此假定您的系统已经是最新版的&oldreleasename;。如果不是这样或您不清楚，请按<ref id="old-upgrade">操作。</p>

<![ %has-woody-aptitude [
        <p>同时我们假定您装有&oldreleasename;的<prgn/aptitude/。您可以用
        
        <example>
$ dpkg -l aptitude
        </example>
        来检查。
        如果输出行<em/不/以"i"开头，您应在升级之前遵照<ref id="old-aptitude">来安装它。</p>
]]>
	<![ %mips [
        <sect1><heading>SGI IP22:安装arcboot</heading>

          <p>如果拥有<em>SGI IP22</em>，现在您应当准备用<package>arcboot</package>启动，而不是直接用内核。<package>arcboot</package>可在&oldreleasename;中找到，按一般方法就可以安装。</p>

          <p>在安装<package>arcboot</package>之前，您应确认 <file>sources.list</file>仍然指向&oldreleasename;，正像在         <ref id="old-sources">中解释的那样。</p>

        </sect1>
]]>

	<sect1><heading>禁用APT pinning(APT的一种用于安装特定版本软件包的功能――译者)</heading>

	  <p>如果您配置了APT来安装非stable的特定软件包(例如从testing)，您应当改变APT pinning设置(在<file>/etc/apt/preferences</file>)。可在<manref name="apt_preferences" section="5">中找到APT pinning的详细信息。</p>
	
	</sect1>
	
	<sect1><heading>检查软件包状态</heading>

          <p>不管用什么方法升级，建议您先检查所有软件包的状态，确认所有软件包都处在可升级状态。以下命令会显示任何错误状态，特别是安装不全或配置失败的软件包。

          <example>
# dpkg --audit
          </example></p>
 
          <p>您也可以使用<prgn/dselect/、<prgn/aptitude/或用命令
          <example>
# dpkg -l | pager 
          </example>

          或

          <example>
# dpkg --get-selections &gt; ~/curr-pkgs.txt
          </example>
来检查您系统所有软件包的状态。</p>

          <p>在升级前移除任何hold(APT对软件的一种标记，它告诉APT不要自动替换这一软件包――译者)很必要。如果任何升级用的基本软件包处于hold状态，升级就会失败。您可以用
 
          <example>
# dpkg --get-selections | grep hold
          </example>
检查处于hold状态的软件包。</p>

          <p>如果您在本机修改并编译了一个软件包，且没有重命名或在版本号中加入epoch(软件包中自定义的版本号――译者)，您必须把它置为hold状态来防止它被更新。
	  
<![ %has-woody-aptitude [	  
	  'hold'软件包状态可以用<prgn/aptitude/修改：
	  
      	  <example>
# aptitude hold | unhold &lt;package name&gt;
      	  </example>
]]>
	  
<![ %no-woody-aptitude [
          `hold'包状态可通用使用<prgn/dselect/改变(在Select菜单中用`H'和`G' 来标记'hold'和取消标记)，或编辑由
	  
          <example>
# dpkg --get-selections &gt; ~/curr-sels.txt
          </example>

	  生成的文件，把"hold"改成"install"(反之亦然)，然后执行

          <example>
# dpkg --set-selections &lt; ~/curr-sels.txt
          </example>
]]>
    	  </p>
	  
	  <p>如果需要修复，最好保证<file/sources.list/仍然指向 &oldreleasename;，正像在<ref id="old-sources">中解释的那样。</p>
	  
        </sect1>
	
	<sect1 id="backports"><heading>非官方源与backports（backports为Debian提供 不需要非Stable链接库就可在Stable版运行的新软件包，有效地弥补了Debian Stable版软件较旧的缺点－－译者）</heading>

          <p>如果您在系统上使用非Debian软件包，请注意这些包可能在升级过程中由于包冲突而被删除。如果这些包是通过在<file>/etc/apt/sources.list</file>中加入非官方源安装的，您应检查这一非官方源是否提供为&releasename;编译的软件包，然后根据实际情况修改相应的行。</p>

          <p>一些用户在&oldreleasename;中使用非官方backport的较“新”软件包。这些包非常容易在升级中出错，因为它们很可能导致包冲突。<footnote>Debian的包管理系统一般不允许一个软件包中的文件替换另一包的文件；除非新的包被定义为那样做。</footnote><ref id="trouble">提供如何处理包冲突的办法。</p>

        </sect1>
	</sect>      

<![ %glibcneedsnewkernel [
<![ %not-mips-mipsel [

        <sect id="new-kernel">
        <heading>检查内核支持</heading>

<![ %sparc [
           <p>除去对内核支持的特殊考虑，所有64位的SPARC（sun4u）的计算机都是可升级的。</p>

           <p>sun4c处理器不再被&releasename;支持。对sun4d处理器的支持情况还不甚明了。很可很带有MMU的cun4d处理器可以正常工作。</p>

           <p>sun4m处理器仍被支持，不过应当在升级之前先安装一个新一些的内核。这很必要，因为新版本的glibc使用一些机器不能识别的汇编指令，因此您应当更新内核来模拟机器内不存在的指令。</p>

           <p>技术上讲只有<em>一部分</em> sun4m芯片受影响，但是由于glibc不能可靠地检测出系统是否被影响，它会拒绝更新，除非安装一个新内核。</p>

           <p>一些确切消息：一些由Cypress/ROSS生产的sun4m芯片，不解释<tt>umul</tt>指令（RT601/CY7C601是同一芯片，仅名称不同）。它们被早期的SPARCserver 6xxMP型号使用。近期的型号使用TI生产的芯片。现在我们不知道这些芯片是否受影响。</p>
<!-- Add link to http://www.ultralinux.org/faq.html#q_2_1 ? -->
]]><!--sparc-->

<![ %hppa [
          <p>在64位HPPA机器上您应当在升级之前先安装一个新一些的内核。这很必要，因为新版本的glibc使用一些机器不能识别的汇编指令，因此您应当更新内核来模拟机器内不存在的指令。</p>
]]>
<![ %i386 [
          <p>&releasename;不再支持80386处理器，但这不影响它对80486以上处理器的支持。</p>
]]>

<![ %upgradekernel [
        <sect1 id="kernel-upgrade"><heading>升级内核</heading>

          <p>当且仅当前面章节提醒您需要在升级系统<em/之前/更新内核，您才应当这么做。</p>

          <p>Backports那里提供所有从&releasename;安装最新内核的工具。关于更新内核的详细说明可在<ref id="kernel-upgrade-howto">找到。</p>
          
        </sect1>
]]>
        </sect>
]]><!-- not-mips-mipsel -->
]]><!--glibcneedsnewkernel -->

        <sect id="upgrade-process"><heading>准备APT源</heading>

          <p>在升级之前，您必须在<file>/etc/apt/sources.list</file>中配置<package>apt</package>来生成软件包列表。</p>
          
          <p><package>apt</package>会以行先后顺序为优先级分析可通过"<tt>deb</tt>"行找到的所有软件包，然后安装具有最高版本号软件包。(这样，在具有许多镜像地址时，一般地，应先写入本地硬盘，然后CD-ROM，再然后HTTP/FTP镜像)</p>
	  
	   <p>一个发行版经常既可以由代号（如&oldreleasename;、&releasename;）也可由状态名（如oldstable、stable、testing、unstable）表示。用代号可使您不会对一个新发行版感到陌生，因此在本说明中我们使用代号。这当然意味着您自己必须关注新版的发行。如果使用状态名，您只会在新版发行时发现可升级的包。</p>

         <sect1 id="network"><heading>添加Internet APT源</heading>

           <p>默认设置是从主Debian Internet服务器安装，但是您也可以修改<file>/etc/apt/sources.list</file> 来使用其它镜像，特别是网络上与您最近的镜像。</p>

<!-- FJP: Why is 'default configuration' relevant here? We are talking about
          upgrading existing installations; we really have no idea what
          apt-sources users will have set up here (maybe just a Woody CD-set).
          Note: D-I sets the default configuration to a mirror based on
          the selected country and not the 'main' servers. -->

           <p>Debian HTTP或FTP镜像地址可在<url id="&url-debian-mirrors;"> 找到(查看"Full list of mirrors"部分)。HTTP服务器总体上比FTP服务器快。</p>

           <p>例如，假设最近的镜像是<tt>&url-debian-mirror-eg;/</tt>当用浏览器或FTP工具访问它时，您会注意到主要目录是这样组织的：
           <example>
&url-debian-mirror-eg;/dists/&releasename;/main/binary-&architecture;/...
&url-debian-mirror-eg;/dists/&releasename;/contrib/binary-&architecture;/...
           </example></p>

           <p>为了让<prgn/apt/使用这一镜像，在<file/sources.list/中加入这一行：

           <example>
deb &url-debian-mirror-eg; &releasename; main contrib
           </example></p>

           <p>注意'<tt>dists</tt>'被自动隐含地添加了，且在发行版名称之后的参数被用来把安装路径扩展到不同目录中。</p>

           <p>添加了新APT源之后，用井号(<tt>#</tt>)添在行前以把 <file>sources.list</file>中已有的"<tt>deb</tt>"行禁用。</p>

           <p>所有从网上下载的软件包都被储存在<file>/var/cache/apt/archives</file>(以及在下载进程中的<file>partial/</file>)，所以在开始安装之前您必须确保有足够的空间。对于一个适当扩展的Debian安装，至少要有300MB的下载数据。</p>
           
         </sect1>

         <sect1 id="localmirror"><heading>添加本地APT源</heading>

           <p>您可以修改<file>/etc/apt/sources.list</file>来使用本地驱动器(可能是挂载的NFS分区)上的镜像。</p>

           <p>例如，您的镜像在<file>/var/ftp/debian/</file>，它有这样的主目录：

           <example>
/var/ftp/debian/dists/stable/main/binary-&architecture;/...
/var/ftp/debian/dists/stable/contrib/binary-&architecture;/...
           </example></p>

           <p>要让<prgn>apt</prgn>使用它，在<file>sources.list</file>中加入这一行：

           <example>
deb file:/var/ftp/debian &releasename; main contrib
           </example></p>

           <p>注意`<tt>dists</tt>' 被自动隐含地添加了，且在发行版名称之后的参数被用来把安装路径扩展到不同目录中。</p>

           <p>添加了新APT源之后，用井号 (<tt>#</tt>)添在行前以把 <file>sources.list</file>中已有的"<tt>deb</tt>"行禁用。</p></sect1>

        <sect1 id="cdroms"><heading>添加CD-ROM或DVD APT源</heading>

          <p>如果只想使用CD-ROM，那就把<file/sources.list/中已有的<tt/deb/" 行用"<tt/#/"注释掉。</p>
	  
<!-- Default cdrom mount point is /cdrom, not /media/cdrom and fixed!, see #282344
     (but the -d option of apt-cdrom allows scanning from somewhere else) -->
     
          <p>确保<file>/etc/fstab</file>中有允许在<file>/cdrom</file>挂载CD-ROM的一行(<prgn>apt-cdrom</prgn>需要使用<file>/cdrom</file>挂载点)。例如，如果<file>/dev/hdc</file>是您的CD-ROM驱动器，<file>/etc/fstab</file>应包含这样一行：

          <example>
/dev/hdc /cdrom auto defaults,noauto,ro 0 0
          </example></p>

          <p>注意在第四部分的”<tt>defaults,noauto,ro</tt>”中，词之间不能有任何空格。</p>

          <p>要确认它有效，插入一张CD：

          <example>
# mount /cdrom   # 挂载CD-ROM
# ls -alF /cdrom # 显示CD根目录
# umount /cdrom  # 卸载CD-ROM
          </example></p>

          <p>下一步，对于您拥有的每一张Debian Binary CD-ROM运行

          <example>
# apt-cdrom add
          </example>

          来向APT的数据库添加每一CD的信息。</p>
        </sect1>
        </sect>

	<sect id="upgradingpackages"><heading>升级软件包</heading>
	  
	  <p>建议使用<prgn>aptitude</prgn>来全面升级系统。这一工具会做出比直接执行<prgn>apt-get</prgn>更安全的升级决定。</p>
	  
	  <p>不要忘记以读写模式挂载所有分区(一般是root和<file>/usr</file>分区)：

          <example>
# mount -o remount,rw /<var>mountpoint</var>
          </example></p>

	  <p>下一步确保APT源(<file>/etc/apt/sources.list</file>)指向"<tt/&releasename;/"或"<tt/stable/"。注意：CD-ROM经常被表示为"<tt/unstable/";虽然这令人迷惑，但<em/不要/修改它。</p>
	  
	  <p>强烈建议您使用<prgn>/usr/bin/script</prgn>程序来记录一个升级过程的信息副本。这样如果出现问题，您就有一个日志来验看发生了什么，而且如果需要的话，这可以提供bug报告的确切信息。输入：
          <example>
# script -a ~/upgrade-to-&releasename;.typescript
          </example>
	  或类似的命令来开始记录。不要把记录文件放在临时目录中，如<file>/tmp</file>或<file>/var/tmp</file>(在这些目录中的文件会在升级或重启动过程中被删除)。</p>

	  <p>typescript允许您浏览已经滚过屏幕的提示信息。只要转到VT2（Virtual Terminal 2－－译者）（使用<tt/alt-F2/），登录以后，用<tt>less ~/upgrade-to-&releasename;.typescript</tt>查看。</p>
	  
	  <p>升级完成之后，您可以输入<tt/exit/命令来结束<prgn/script/。</p>
	  
	<sect1 id="updating_lists"><heading>更新包列表</heading>

          <p>首先需要取得新发行版的软件包列表：<footnote>我们使用<prgn/apt-get/因为&oldreleasename;中的<prgn/aptitude/可能在新源加入<file/sources.list/时出错。</footnote></p>  
 
	  <p><example>
# apt-get update
	  </example></p>
	
	</sect1>

<![ %mips-mipsel [
        <sect1 id="upgrading_kernel_mipsen"><heading>升级内核</heading>
	
	  <p>在&arch-title;机器上有必要在升级系统之前先升级内核。新libc库与内核有不一致的指令定义，所以需要新内核来提供正确的指令定义。</p>
	  
	  <p>关于怎样安装新内核可参阅<ref id="kernel-upgrade-howto">。</p>
	  
	</sect1>
]]>

<!-- FJP: This next section can probably be dropped for etch -->
<![ %has-woody-aptitude [
        <sect1 id="upgrading_aptitude"><heading>升级aptitude</heading>
]]>
<![ %no-woody-aptitude [
        <sect1 id="upgrading_aptitude"><heading>安装aptitude</heading>
]]>

	  <p>升级测试表明&releasename;的<prgn/aptitude/在解决复杂依赖关系时比<prgn/apt-get/或&oldreleasename;的<prgn/aptitude/更出色。

<![ %has-woody-aptitude [
	  所以首先应升级它：
	  <example>
# aptitude install aptitude
          </example></p>
]]><!--has-woody-aptitude-->
<![ %no-woody-aptitude [
	  所以它应先升级：
	  <example>
# apt-get install aptitude
          </example></p>
]]>
	  	
	  <p>您会看到一些关于将要进行的修改的提示信息，并被问到是否确认。在确认之前，您应仔细查看要进行的更改，特别是在升级过程中即将被删除的包。</p>
	  
	  <p>某些时候，如果很多软件包被列出来准备删除，您可用<package/aptitude/事先升级某些软件来缓解这种情况。举一个例子：当对装有KDE的系统进行检查时，我们会注意到这一过程会删除很多KDE和perl包。这时可以先把perl连同<package/aptitude/一起升级来解决。</p>
	 
	</sect1>
	
	<sect1 id="upgrading_doc-base"><heading>升级doc-base</heading>

          <p><em>如果装有<package/doc-base/</em>，它也必须在系统升级之前被更新。原因是它会在<package/perl/升级时出错。您可以用</p>
	       
          <p><example>
# dpkg -l doc-base
          </example></p>

          <p>检查它是否已安装。如果输出行以'i'开头表明它已安装，此时必须在进一步工作之前升级它：</p>

          <p><example>
# aptitude install doc-base
          </example></p>
	  
       </sect1>

        <sect1 id="upgrading_other"><heading>升级系统的其它部分</heading>	  
	  
          <p>您现在已经一切就绪来进行升级的主要部分，运行</p>
	  <p><example>
# aptitude -f --with-recommends dist-upgrade
	  </example></p>

	  <p>将进行完整的系统升级，也就是说，安装所有最新版本的软件包并解决所有可能的包依赖关系变化问题。如果必要，它会安装一些新软件包(通常是新的链接库，或改名的软件包)，移除任何有冲突的旧包(如<package>console-tools-libs</package>)。</p>

          <p>当从一组CD-ROM升级时，您会被要求在特定时期插入特定CD。可能必须多次插入同一CD，这取决于分布于CD中的软件包内部关系。</p>
   
	  <p>只有改变其它包状态才能被更新的软件包会被保留为当前版本(显示为'held back'状态)。这可以通过使用<prgn>aptitude</prgn>来选择这些包来安装或输入<tt>aptitude -f install
	  <var>package</var></tt>来解决。</p>
            
          <p><tt>--fix-broken</tt> (或只是<tt>-f</tt>)设置项使
          <package>apt</package>尝试修复系统中的依赖性错误。<package>apt</package>不允许系统中存在未满足的包依赖关系。</p>
	
	</sect1>

        <sect1 id="trouble"><heading>升级过程中可能出现的问题</heading>

          <p>如果在使用<prgn/aptitude/、<prgn/apt-get/或<prgn/dpkg/时出现如下错误
<example>
E: Dynamic MMap ran out of room
</example>
          那是因为默认的缓冲区太小。解决办法有二：移除<file>/etc/apt/sources.list</file>中的多余行，增大缓冲区。缓冲区大小可通过<file>/etc/apt/apt.conf</file>中的<tt/APT::Cache-Limit/设定。假设现有<file>/etc/apt/apt.conf</file>中未设定这一变量，可以这样做：
<example>
# echo 'APT::Cache-Limit "12500000";' >> /etc/apt/apt.conf
</example></p>
	  
	  <p>启用APT::Force-LoopBreak设置来临时移除在Conflicts/Pre-Depends(A Conflicts B表示A、B不能同时被安装，A Pre-Depends B表示安装A之前必须安装B――译者)循环中的一个基本软件包有时很必要。<prgn>aptitude</prgn>将警告您这种情况并终止升级。您可以通过在<prgn>aptitude</prgn>命令行中加入<tt>-o APT::Force-LoopBreak=1</tt>设置来实现。</p>
<!-- JFS: Shouldn't this mention also Apt's configuration file? -->

          <p>很有可能的是，系统依赖性结构会非常混乱而需要手动干预。通常这要使用<prgn>aptitude</prgn>或

          <example>
# dpkg --remove <var>packagename</var>
          </example>

          来去除这些不友好的软件包，或者
 
          <example>
# aptitude --fix-broken install
# dpkg --configure --pending
          </example></p>

          <p>在极端情况下您可能要用

          <example>
# dpkg --install <var>/path/to/packagename.deb</var>
          </example>强行重新安装。</p>
	  
	  <p>如果从"纯"&oldreleasename;升级，包冲突问题不会出现，但若使用非官方  backport包则会出现该问题。包冲突会造成如下错误：

          <example>
Unpacking replacement <var>&lt;package-foo&gt;</var> ...
dpkg: error processing <var>&lt;package-name-for-foo&gt;</var> (--unpack):
 trying to overwrite `<var>&lt;some-file-name&gt;</var>',
 which is also in package <var>&lt;package-bar&gt;</var>
          </example></p>

          <p>您可以强行删除出错信息<em/最后/一行的软件包：

          <example>
# dpkg -r --force-depends <var>packagename</var>
	  </example></p>

          <p>修好之后，您应可以通过上面提到的<tt>aptitude</tt>命令方法恢复升级过程。</p>

          <p>在升级过程中，您会被问一些问题来配置或重新配置部分软件包。如果您被问到任何在<file>/etc/init.d</file>或<file>/etc/terminfo</file>目录中的文件，或<file>/etc/manpath.config</file>文件是否应被包维护者的文件替代时，通常回答'yes'很必要。您可以在任意时候转回旧的文件，因为它们会被标以 <tt>.dpkg-old</tt>扩展名储存。</p>

          <p>如果您不知道应该做什么，记下软件包或者文件的名字，再在升级后解决这些问题。您可以搜索日志文件来复查升级过程中显示的屏幕信息。</p>
	</sect1>
	</sect>

        <sect id="nownownow"><heading>重启前的任务</heading>

          <p>当<tt>aptitude dist-upgrade</tt>完成时，“前期”升级就已经结束了，但是在重启之前还有许多其它事情要做。</p>
          
	  <p>阅读<file>/usr/share/doc/xfree86-common/README.Debian-upgrade.gz</file>来获取X视窗系统的详细系统升级信息。它与所有的先前Debian发行版用户相关。简短地讲，您需要阅读它!</p>

        <sect1 id="newkernel"><heading>升级内核</heading>
          
	  <p>注意在这些步骤中Linux内核没有被更新。您应该自己去做，通过安装<package>kernel-image-*</package> 软件包或者通过从原代码编译自定的内核。</p> 
<!-- JFS: This is not strictly true, if the user was using a non-versioned
  kernel (kernel-image-2.4-686) he _will_ upgrade the kernel if using
  aptitude (post-sarge) -->

<![ %available-2.6 [

	 <p>&debian;带有稳定的旧Linux 2.4系列中的&kernelversion;内核。为了实现更好的硬件支持或更高的性能，您可以使用2.6系列的内核。</p>
         
	 <p>但是，<strong/不要/把升级到2.6内核看作从&oldreleasename;升级的一部分。关于升级到2.6内核的问题可在<ref id="upgrade-to-2.6">中找到。</p>
	 
]]>
         
         <p>为升级内核，您必须尽量选择适合您计算机的内核。可以用
	 
         <example>
# apt-cache search ^kernel-image
         </example>来获取您可以使用的内核列表。</p>
         
         <p>然后您应该使用<tt>aptitude install</tt>来安装它。一旦新内核被安装，您应该重启来使用它，享受它的新功能。</p>
	 
         <p>请注意&oldreleasename;(及以前的发行版)不以软件包的形式安装内核。在&releasename;中有所改变，您可以安装虚拟软件包来跟踪内核变化。这些软件包被命名为kernel-image-<tt>VERSION</tt>-<tt>ARCH</tt>，<tt>VERSION</tt>与内核版本（2.4或2.6）对应，<tt>ARCH</tt>与可用的系统架构对应。如果您想给包管理的内核使用安全支持（Debian针对系统安全提供的即时升级－－译者），请安装最适合您系统的内核软件包。</p>

         <p>如果要更刺激，有一种简单的方法来编译您自己定制的内核。安装<package>kernel-package</package>工具然后阅读<file>/usr/share/doc/kernel-package</file>中的文档。</p>
         
	 </sect1>
	 </sect>
	 
	 <sect id="obsolete"><heading>废弃的软件包</heading>

<!-- JFS: Providing a full listing might be useful, especially if we can
point to the Bug that was opened when the bug was removed. This list should
be moved to an appendix, instead of adding it inline as we did in the
potato to woody RN -->

         <p>&releasename;不但新引入了几千个新软件包，也废弃了200多个在&oldreleasename;中的旧软件包。它不为这些废弃软件包提供升级补丁。不过这不影响您在必要时继续使用废弃的软件包，Debian项目通常在&releasename;发布一年后停止对它们的安全支持<footnote>或者在&releasename;后新发行版发布时停止， 一般只能有两个stable发行版同时被支持。</footnote>，而且这期间不会提供其它支持。如果可以的话，就应把它们换为的替代软件。</p>

         <p>软件包被移去有很多原因：不再被上游开发者维护或没有Debian开发者（即DD－－译者）愿意维护；功能被其它软件或新版本更好地取代；错误太严重。在最后一个原因中，软件包很可能还属于unstable。</p>

         <p>包管理软件会标注出来哪些软件包被废弃，查看这方面信息十分容易。如果用<prgn>aptitude</prgn>，您会在"Obsolete and Locally Created Packages"部分见到这些软件包的列表。<prgn>dselect</prgn>提供一个类似的列表，不过可能有些差异。另外，如果您使用<prgn>aptitude</prgn>手动安装了&oldreleasename;中的软件包，它会记录您手动安装的包并且在包被删除时把由于依赖关系而被安装的包标记为废弃。而且，不像<prgn>deborphan</prgn>，<prgn>aptitude</prgn>不会把您手动安装的包标记为废弃，这不同于由于依赖关系而被自动安装的包。</p>

         <p>有许多寻找废弃软件包的附加工具，比如<prgn>deborphan</prgn>、 <prgn>debfoster</prgn>和<prgn>cruft</prgn>。 推荐使用<prgn>deborphan</prgn>，虽然它只报告"libs"和"oldlibs"中的废弃链接库。不要随意删除这些工具显示的软件包，特别是当您使用冒犯性的非默认设置时，它们很容易造成假象。推荐在删除之前仔细查看包的信息（内容，大小和描述）。</p>

<!-- JFS: Should we recommend purging old packages? This might be
dangerous since the maintainer scripts might try to remove stuff that
didn't belong to them... -->

         <p><url id="&url-bts;" name="Debian错误跟踪系统">经常提供包被移除的原因。您应阅读软件本身的bug报告和<url id="&url-bts;cgi-bin/pkgreport.cgi?pkg=ftp.debian.org&#38;archive=yes" name="ftp.debian.org pseudo-package">的bug报告。</p>

         <sect1 id="dummy"><heading>Dummy包</heading>

<!-- JFS: If the appendix is kept this section should point there and the packages described here should be moved to that section -->

         <p>一些&oldreleasename;中的软件包在&releasename;中被分成几部分，以提高系统的易维护性。为了简化升级，&releasename;经常提供通过依赖关系安装其它新包的"dummy"包－－与&oldreleasename;包有相同名称的空包。"dummy"包在升级后就没用了，可以安全地删除。
	 
         <p>大多数（不是所有）的dummy包的描述部分说明它们的目的。但是，包描述信息不是唯一的，所以您可能会发现<prgn>deborphan</prgn>加上<tt>--guess</tt>选项对寻找这些包有用。注意有些dummy包在升级后不会被删除，它们被用来记录一个程序的可用版本。</p>

      </chapt>

<!-- FJP: Add more info here on dealing with obsolete packages?
          Also how to purge packages that were deleted but still have conffiles
          (use "limit" command in aptitude and search for ~c) -->

        <chapt id="information">
        <heading>在&releasename;中应注意的问题</heading>
	
<!-- Controversial, disabled for now, please translate though
        <sect id="german-quotes"><heading>Problems with German Quotes</heading>
        
          <p>The locales for German style languages (e.g. de_DE@euro)
          unfortunately use an aesthetically unpleasing way of representing
          open quotation marks.  We have retained it this way in order to
          preserve compatibility with other Linux distributions, and we hope
          that in the future it will be fixed. We suggest that you switch to a
          UTF-8 locale (e.g. de_DE@euro.UTF-8), which fully supports German with
          the correct quotation marks, and, using Unicode encoding, has better
          support for other languages as well.</p>

          <p>To change the system wide locale choice, use:
          <example>dpkg-reconfigure locales</example></p>
        </sect>
-->  
<!--   Will be added if relevant information is written here
        <sect id="syntax"><heading>Important program syntax changes</heading>

       	  <p>Debian attempts to avoid changing upstream packages, therefore
          any changes in the upstream package will be present in the version in
          &debian;. This can mean that program behaviour may change between
          releases of &debian;. </p>

          <p><em>No changes yet reported.</em></p>
        
        </sect>
-->
<sect id="pythonchanges"><heading>Python软件包的变化</heading>

   	  <p>任何&releasename;的python2.X软件包都不包含'profile'和'pstats'模块，因为它们注册在一个不与DFSG相容的许可协议下(详情查看bug#293932)。这两个模块可在Debian archive的non-free部分中以python-profiler和python 2.X-profiler软件包的形式找到。</p>
</sect>

<![ %available-2.6 [
        <sect id="upgrade-to-2.6">
        <heading>升级到2.6内核</heading>

          <p>2.6系列内核与2.4系列相比有重大改变。模块被改名，许多驱动程序被部分或全部改写。因此升级到2.6内核不那么容易。这一部分旨在让您了解一些需要注意的地方。</p>

          <p>强烈建议您不要把升级到2.6内核当作从&oldreleasename;升级到&releasename;的一部分。您应该确保系统在原有内核或&releasename;的2.4内核上正常工作，然后升级到2.6内核。要把升级内核当成一项独立任务！</p>

          <p>如果您编译新内核，应确保在重启之前安装了<package/module-init-tools/。这一软件包在2.6内核下取代<package/modutils/。如果您安装<package/kernel-image/之一，这一软件包会由于依赖关系被自动安装。</p>

          <p>如果您用<em/LVM/，就应当在重启前安装<package/lvm2/，因为2.6内核不直接支持LVM1。<package/lvm2/(dm-mod模块)被用来访问LVM1卷。您可以安装<package/lvm10/－－一个在启动时检查哪种内核被使用，然后执行相应模块的脚本。</p>

          <p>注意一些模块名称有所改变，请检查修改<file>/etc/modules</file>(在启动时自动执行的模块列表)，把旧名改为新名。</p>

<![ %i386 [
          <p>对于一些SATA磁盘控制器，驱动器的关联文件可能从<file>/dev/hdX</file>变为<file>/dev/sdX</file>。如果出现这种情况，就得修改          <file>/etc/fstab</file>与启动程序的配置。只有在正确地修改之后，系统才能正常启动。</p>
]]>

          <p>注意在安装完2.6内核重启之前，要确保有一种恢复措施。首先，确保启动程序可以新内核和旧内核（2.4内核）启动。还需要确保手头有紧急修复软盘或光盘，以防万一启动程序的错误配置导致无法从旧内核启动。</p>

<![ %not-s390 [
        <sect1 id="2.6-keyboard">
	<heading>键盘配置</heading>

          <p>2.6内核最扰人的改变是输入层的低级变化。这一变化使所有的键盘都变得像“正常”的PC键盘。这意味着如果您目前有一个不同种类的键盘(例如一个USB-MAC或Sun键盘)，它极有可能在重启后无法工作。</p>
          
          <p>如果可以从其它系统通过SSH访问，您可以运行<tt>'dpkg-reconfigure console-data'</tt>来解决问题，只要选择"Select keymap from full list"然后选择"pc"键盘。</p>
	  
	  <p>如果终端键盘也被影响了，您也许还得为X Windows System重新配置键盘。可以执行<tt>dpkg-reconfigure xserver-xfree86</tt>或直接修改<file>/etc/X11/XF86Config-4</file>。
	  不要忘记阅读相关文档<ref id="nownownow">。</P>

<![ %i386 [
          <p>这个问题不会影响&arch-title;，因为所有PS/2和大部分USB键盘将被配置为“正常”PC键盘。</p>
]]>
<![ %not-i386 [
          <p>注意如果您在使用USB键盘，它可能配置为“正常”PC键盘或USB-MAC键盘。在前一种情况下，您不会被这一问题所影响。</p>
]]>
        </sect1>
	
	<sect1 id="2.6-mouse">
        <heading>鼠标配置</heading>

          <p>还是由于输入层的变化，如果您的鼠标在2.6内核下不工作，您可能得重新配置X Window System和<package/gpm/。最可能的原因是接收鼠标数据的设备变了。您可能还需要载入一些模块。</p>

<![ %sparc [
          <p>如果您配置X使用<file>/dev/sunmouse</file>，可能需要改为<file>/dev/psaux</file>。</p>
]]>

        </sect1>

        <sect1 id="2.6-sound">
        <heading>声音配置</heading>

          <p>对于2.6内核，ALSA声音驱动程序比OSS声音驱动程序更受偏爱。如果安装了<package/alsa-base/声卡的ALSA模块会被自动载入；这也会自动把OSS驱动加入<package/discover/和<package/hotplug/的黑名单来阻止它们被读取。 如果在<file>/etc/modules</file>中有OSS驱动，应移除。</p>

        </sect1>
]]> <!-- %not-s390 -->

        <sect1 id="2.6-udev">
        <heading>升级到2.6内核可能会启用udev</heading>

        <p><package/udev/是devfs在用户层的实现。它挂载在<file>/dev</file>目录并把它与内核支持的硬件相关联。它与<package/hotplug/一起来检测新设备，动态地针对模块的装载和卸载进行目录配置。<package/udev/仅能在2.6内核下运行。

        <p>由于<package/udev/会因为依赖关系，如<package/gnome/，而被自动安装。升级至2.6内核时可能会启用<package/udev/。</p>

        <p>虽然<package/udev/已经过了广泛的测试，但您还是可能在某些设备上遇到一些必须修正小问题。最常见的问题是某个设备的权限变更。某些状况下，有些设备是不会被默认建立的。（如：<file>/dev/video</file> 和<file>/dev/radio</file>）。

        <p><package/udev/提供处理这些问题的配置方案。请查看 <manref name="udev" section="8">和<file>/etc/udev</file> 来取得详细信息。</p>

        </sect1>
        </sect>
]]> <!-- %available-2.6 -->

<![ %i386 [

        <sect id="x-mouse">
        <heading>无法载入X Windows System</heading>

          <p>如果重启后无法载入X Window System，并且您在 <file>/var/log/XFree86.0.log</file>中看到了"missing core pointer"这个错误，很可能是因为<prgn/hotplug/未能及时载入鼠标的驱动程序。(bug <url id="http://bugs.debian.org/255744" name="#255744">)。解决方案是将您的鼠标驱动模块（例如：psmouse）加到<file>/etc/modules</file>中。</p>

        </sect>

        <sect id="x-transmeta">
        <heading>Transmeta Crusoe系统上的X Window System</heading>

          <p>&releasename;上的X server包含了一些经过优化的代码，但很多Transmeta(TM)的Crusoe(TM)处理器却无法正确执行它们。这将导致某段时间内（当暂存的x86的指令转换至Crusoe的VLIW指令中，处理器处于一个不稳定的状态），与它连结的X用户端应用程程序会出错并显示如下信息：

<example>
X Error of failed request:  BadLength(poly request too large or internal Xlib length error).
Major opcode of failed request:  18 (X_ChangeProperty)
Serial number of failed request:  15
Current serial number in output stream:  18
</example></p>

          <p>实际运行中，这意味着程序运行几小时后，会接二连三出错；如果有显示管理程序运行，也会反复地重新启动。这种状态会持续到老出错误的VLIW Transmeta的代码被从缓冲器中移去。</p>

          <p>由于这个问题出在Transmeta Code Morphing Software(CMS)中，而且笔记型电脑的BIOS只有在开机时才会由供应商的判别码来检查CMS，所以需要Transmeta和笔记本电脑生产商合作才能解决这个问题。有关这个问题的更多信息可以由<url id="http://www.cs.auc.dk/~fleury/bug_cms/">及Debian bug报告<url id="http://bugs.debian.org/216933" name="#216933">取得。</p>

          <p>解决办法是安装编译时没有加进优化的X server，比如<package/xserver-xfree86-dbg/。</p>

        </sect>
]]><!--i386-->

      </chapt>

      <chapt id="moreinfo">

        <heading>有关&debian;的更多信息</heading>

        <sect id="morereading"> <heading>进一步阅读</heading>
        <p>除了本《发布说明》和《安装手册》，更深入的Debian GNU/Linux Documentation(Linux世界中的重要组成部分，以文档形式存在，一般包含书籍、HOWTO、FAQ和样例配置文件等非常有用的说明性资料，通常由开发者和用户撰写――译者)可在Debian Documentation Project(DDP)中找到，它的宗旨是为Debian用户和开发者创建高质量的Documentation。Documentation如《Debian Guide》《Debian新维护人员手册》和《Debian FAQ》等等都可阅读。访问<url id="&url-ddp;" name="DDP站点">来详细查看所有可用资源。</p>
 
        <p>为特殊软件包准备的Documentation被安装在
        <file>/usr/share/doc/<var>package</var></file>，这可能包含copyright信息，Debian专门信息，和一些上游Documentation。</p>
 
      </sect> 
      
      <sect id="gethelp"> 
        <heading>获得帮助</heading> 
      
        <p>Debian用户可获得各种形式帮助、建议和支持，但是这些只在您细致研究了所有与问题相关的Documentation的情况下才被考虑。这一部分提供对Debian用户有益的简短指导。</p>
        
      <sect1 id="lists">
        <heading>邮件列表</heading>
        <p>Debian用户最喜欢的邮件列表是debian-user列表(英语)和其它debian-user-<var>language</var>列表(别的语言)。查看<url id="&url-debian-list-archives;">以获取这些列表的信息和加入邮件列表的方法。请在发邮件之前检查您问题已有的解答并且要遵循标准邮件列表格式。</p>
      </sect1>

      <sect1 id="irc"><heading>IRC</heading>
        
        <p>Debian在Freenode网络中特为Debian用户开通了一个IRC频道，它专门提供开源社区的共享资源。用您最喜欢的IRC客户端访问&debian-irc-server;然后加入#debian频道就可以了。</p>
        
        <p>请遵守频道指南，尊敬其它用户。访问<url id="&url-irc-host;" name="freenode.net">来获取更多信息。</p>

      </sect1>
      </sect>

      <sect id="bugs">
        <heading>报告bug</heading>
        
        <p>我们努力把Debian打造成高性能操作系统，但是那不意味着我们提供的软件包完全没有bug。作为为用户提供的服务和Debian开放性开发的实践，我们在<url id="&url-bts;" name="bugs.debian.org">的Bug跟踪系统(BTS)中提供所有已报告bug的信息。</p>
<!-- FJP: I propose to replace the last sentence by:
        Consistent with Debian's 'open development' philosophy and as a 
        service to our users, we provide all the information on reported bugs
        at our own Bug Tracking System (BTS). The BTS is browseable at
        <url id="&url-bts;" name="bugs.debian.org">.
-->

        <p>如果您在发行版或它里面的打包软件中发现了一个bug，请报告这个bug以便它可以在下一发行版中得到修复。报告bug需要一个合法的Email地址，以使我们可以追踪bug，也使开发人员在需要更多信息的情况下与报告者取得联系。</p>

        <p>您可以使用<package>reportbug</package>或手动地使用Email提交一个bug报告。您可以在装有<package>doc-debian</package>的Debian系统中的<file>/usr/share/doc/debian</file>或在网上<url id="&url-bts;" name="Bug跟踪系统">阅读说明来获取更多BTS的信息以及学习如何使用它。</p>
<!-- FJP: The 'bug' program and package are obsolete. -->
<!-- JFS: The reference cards are only available if you have doc-debian installed, which might not always be the case -->

      </sect>

      <sect id="contributing">
        <heading>为Debian做贡献</heading>
        
        <p>来为Debian做贡献，您不必是一名专家。在<url id="&url-debian-list-archives;" name="用户邮件列表">中帮助用户解决问题就是在为Debian社区做贡献。在<url id="&url-debian-list-archives;" name="开发邮件列表">中检查(并且解决)与发行版开发相关的问题对Debian也极其有帮助。可以<url id="&url-bts;" name="报告bug">并且帮助开发人员追踪和修复bug来保持Debian的高性能。如果您语言能力强，您可能会愿意通过写<url id="&url-ddp;" name="documentation">或用您自己的语言<url id="&url-debian-i18n;" name="翻译">已有的Documentation来做更活跃的贡献。</p>

        <p>如果您有更多时间，您可以在Debian中维护自由软件，<url id="&url-wnpp;" name="Work Needing
        and Prospective Packages数据库"> 会详细介绍这一信息。如果您在某一特殊领域感兴趣，那么您可能在Debian的一些子项目如系统平台移植、<url id="&url-debian-jr;" name="Debian
        Jr.">和<url id="&url-debian-med;" name="Debian Med">中获得乐趣。</p>

        <p>在任何情况下，如果您在以任何形式在自由软件社区内工作，不论是以用户、程序员还是写作者、翻译者身份，您已经在帮助自由软件。贡献是光荣而又有趣的，而且让您结识新朋友，这会给您一种来自内心深处的温暖!</p>
      </sect>

    </chapt>


<![ %upgradekernel [

    <appendix id="kernel-upgrade-howto"><heading>升级内核</heading>
    
<![ %not-mips-mipsel [
<![ %sparc [

          <p><strong>这个附录是特别给那些为了确保系统升级能够顺利进行，不得不在系统升级<em/之前/先升级内核的人们写的。请参考<ref id="new-kernel">来检查您的系统是否需要这样</strong>。</p>
]]>
          <p>以下将逐步说明如何使用backports工具来安装新内核。</p>

          <p>由于软件包可能需要&oldreleasename;的，您应先检查<file>sources.list</file>仍指向&oldreleasename;，正如<ref id="old-sources">中解释的那样。</p>
]]> <!-- %not-mips-mipsel -->
	  
<![ %mips-mipsel [
          <p>以下将逐步说明如何安装新内核。</p>
]]>

          <p><taglist>
               <tag>下载并安装必须的软件包</tag>

<![ %mips-mipsel [
                <item>
		<p><em>使用apt</em>;如果还没有的话，修改<file>sources.list</file>使之指向&releasename;，正如<ref id="upgrade-process">中解释的那样。更新软件包列表然后为您的机器安装内核包。您可以通过
         
         <example>
$ apt-cache search ^kernel-image
         </example>获得可用内核列表。</p>

                <p>在安装时apt可能警告模块不匹配并询问是否继续安装。请在回答<tt>yes</tt>因为这些不匹配会在您使用新内核重启后得到解决。</p>

                <p><em>使用dpkg</em>:从Debian镜像站取得最新的内核软件包。可用的有：

                <list>
<![ %mips [
                <item><p><url id="&mips-kernel-patch;/&mips-kernel-image-r4k;" name="&mips-kernel-image-r4k;">用于R4XX0处理器及SGI IP22子系统如Indy和Indigo2。</p></item>
                <item><p><url id="&mips-kernel-patch;/&mips-kernel-image-r5k;" name="&mips-kernel-image-r5k;">用于R5000处理器及SGI IP22子系统如Indy和Indigo2。</p></item>
                <item><p><url id="&mips-kernel-patch;/&mips-kernel-image-swarm;" name="&mips-kernel-image-swarm;">用于Broadcom BCM91250A(即SWARM)pass 2.2。</p></item>
]]>
<![ %mipsel [
                <item><p><url id="&mips-kernel-patch;/&mipsel-kernel-image-r3k;" name="&mipsel-kernel-image-r3k;">用于配有KN02（或兼容）主机版、基于R3000的DEC工作站，如DECstation 5000/1xx(xx=20,25,33)及DECstation 5000/240。</p></item>
                <item><p><url id="&mips-kernel-patch;/&mipsel-kernel-image-r4k;" name="&mipsel-kernel-image-r4k;">用于配有KN04（或兼容）主机版、基于R4X00的DEC 工作站，如DECstation 5000/150、Personal DECstation 5000/50及DECstation 5000/260。</p></item>
                <item><p><url id="&mips-kernel-patch;/&mipsel-kernel-image-r5k-cobalt;" name="&mipsel-kernel-image-r5k-cobalt;">用于基于MIPS的Cobalt机器（如Qube、RaQ、Qube2 或 RaQ2）。</p></item>
                <item><p><url id="&mips-kernel-patch;/&mipsel-kernel-image-r5k-lasat;" name="&mipsel-kernel-image-r5k-lasat;">用于在Lasat Masquerade Pro上的R5000处理器。</p></item>
                <item><p><url id="&mips-kernel-patch;/&mipsel-kernel-image-swarm;" name="&mipsel-kernel-image-swarm;">用于Broadcom BCM91250A(即SWARM)pass 2.2。</p></item>
                <item><p><url id="&mips-kernel-patch;/&mipsel-kernel-image-xxs1500;" name="&mipsel-kernel-image-xxs1500;">用于基于Au1500的XXS1500主板。</p></item>
]]>
                </list></p>

                <p>然后，使用<tt>dpkg -i</tt>来安装这些软件包。在安装时它可能警告模块不匹配（来自 <package>modutils</package>）并询问是否继续安装。请在回答<tt>yes</tt>因为这些不匹配会在您使用新内核重启后得到解决。</p>

                </item>
]]> <!-- %mips-mipsel -->

<![ %not-mips-mipsel [
               <item>
               <p><em>使用apt</em>：若要使用<prgn>apt</prgn>或是一种前端来安装软件包，请将下行加入<file>/etc/apt/sources.list</file>中：

<example>
deb &url-kernel-upgrade;
# sources are also available if you need them
# deb-src &url-kernel-upgrade;
</example></p>

<![ %sparc [
               <p>下一步，安装<package>modutils</package>及<package>initrd-tools</package>软件包。
]]>
<![ %hppa [
               <p>下一步，安装<package>module-init-tools</package>、<package>modutils</package>、<package>polo</package>及<package>initrd-tools</package>软件包。
<example>
# apt-get install module-init-tools palo initrd-tools modutils
</example>
]]>

	       （之后您就可以安全在恢复主要升级过程了。）
	       
	       <p>之后修改<file>sources.list</file>使之指向&releasename;，正如<ref id="upgrade-process">中解释的那样。更新软件包列表然后安装<package>&upgrade-kernel-image-name;</package>包。</p>

               <p><em>使用dpkg</em>：若要直接使用<prgn>dpkg</prgn>来安装软件包，您必须先去下载必要的文件。
               <p><list>
                 <item><url id="&upgrade-kernel-image;"></item>
                 <item><url id="&upgrade-kernel-modutils;"></item>
<![ %hppa [      <item><url id="&hppa-modutils;"></item> ]]>
                 <item><url id="&all-initrd-tools;"></item>
                 <item><url id="&upgrade-kernel-cramfsprogs;"></item>
               </list></p>

               <p>内核软件包依赖<package>&upgrade-kernel-modutils-name;</package><![ %hppa [
               (与原有的 <package>modutils</package>冲突)]]>；<package>initrd-tools</package>依赖<package>cramfsprogs</package>。
	       &oldreleasename;中的软件包会满足其它任何依赖关系（<package>stat</package>、             <package>cpio</package>和<package>ash</package>）。</p>
<![ %hppa [
               <p>如果您用<em/LVM/，就应当在重启前安装<package/lvm2/，因为2.6内核不直接支持LVM1。<package/lvm2/(dm-mod模块)被用来访问LVM1卷。您可以安装<package/lvm10/ installed;，一个在启动时检查哪种内核被使用，然后执行相应模块的脚本。</p>
]]>
               </item>
]]> <!-- %not-mips-mipsel -->

               <tag>请别急于删除旧内核</tag>
               <item><p>您应该先去确认新内核能够正常开机，且所有在升级过程中必须用到的硬件（如网路装置）能够正常工作。</p></item>

<![ %not-mips-mipsel [
               <tag>让您的系统能够开机</tag>
               <item>
               <p>您应修改您的开机设置文件<file>&bootloader-conf;</file>。请注意，新内核会用使用initrd，而这在&oldreleasename;中的Debian内核不需要。</p>
               </item>
]]>

               <tag>使用新内核重启</tag>
               <tag>检查您的系统</tag>
               <item><p>请小心确认，尤其是输入装置、显示设置、还有会用来存取 &releasename;软件包的设备（如网路装置、光驱等等）。有些驱动模块的名称可能已经有所改变，有些设备在以前是被编译进内核的，而现在则是被编译成模块... ...</p></item>

          </taglist></p>

    </appendix>
]]><!--upgrade-kernel-->

   <appendix id="old-stuff">
    <heading>管理&oldreleasename;系统</heading>

       <p>本附录包含在升级到&releasename;之前如何安装或升级&oldreleasename;软件包。这仅在某些特殊情况下有用。</p>

       <sect id="old-upgrade">
       <heading>升级&oldreleasename;系统</heading>

          <p>基本上这与从前进行的&oldreleasename;升级没什么区别。仅有的区别在于首先您应确保软件包列表仍指向&oldreleasename;，正如<ref id="old-sources">中解释的。</p>

       </sect>

<![ %has-woody-aptitude [
       <sect id="old-aptitude">
       <heading>安装&oldreleasename;的aptitude</heading>

          <p>首先必须确保安装&oldreleasename;的<package/aptitude/而不是&releasename;的，按照<ref id="old-sources">做。</p>

          <p>然后，执行
	  
          <example>
# apt-get install aptitude
          </example>

          来安装<package/aptitude/。</p>

       </sect>
]]><!--has-woody-aptitude-->

       <sect id="old-sources">
       <heading>检查源列表</heading>

          <p>如果<file>/etc/apt/sources.list</file>中的任何行指向'stable'，您正在“使用”&releasename;。如果您已经执行<tt>apt-get update</tt>，也可以遵循以下操作很轻松地回到&oldreleasename。</p>
           
          <p>如果您已经从&releasename;安装了软件包，安装&oldreleasename;的软件包就不太容易了。万一这样，您就要自己决定是否继续。可以进行软件包降级，但这非本说明所及。</p>
          
          <p>以root身份，打开<file>/etc/apt/sources.list</file>检查所有以<tt>deb http:</tt>或<tt>deb ftp:</tt>开头的行是否指向"<tt/stable/"。如果有，把<tt/stable/改为<tt/&oldreleasename;/。</p>
          
          <p>如果有以<tt>deb file:</tt>开头的行，那您将得自己检查它指向的地址是包含&oldreleasename;还是&releasename;软件。</p>

          <p><strong/重要提示！/不要修改以<tt>deb cdrom:</tt>开头的行。否则会出错，以致不得不重新运行apt-cdrom 。不要因为'cdrom'行指向"<tt/unstable/"而感到惊讶。虽然令人困惑，但这是正常的。</p>
          
          <p>如果您做了修改，保存文件然后执行

          <example>
# apt-get update
          </example>

          来更新软件包列表。</p>

       </sect>

    </appendix>
  </book>
</debiandoc>

<!-- Keep this comment at the end of the file
Local Variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-namecase-general:t
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:nil
sgml-declaration:nil
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
fill-column: 75
End:
-->
