<chapt id="gtktcl">Getting to Know the Command Line
<p>
A command line is a text-based interface for interacting with your
computer. You type a command, then press the Enter key to run it. If
you have used DOS , then you have used a command line.
<p>
The command line is also known as the terminal, xterm, console,
command shell, or shell. Some of these terms make technical
distinctions, but, for most purposes, you can consider them
identical.
<p>
This chapter explains the basics of using the Linux command line. It
covers:
<p>
<list>
<item> Why Use the Command Line: An explanation of why you should learn
    to use the command line.
<item> Starting the Command Line: The different ways that you can open a
    command line.
<item> Entering a Command: How a command is structured and how you run
    one.
<item> Navigating the Command Line: How you can move through directories
    and list files from the command line.
<item> Using Command Line Shortcuts: Features of the Linux command line
    that save you time, effort, and typing.
<!-- XXX FIXME XXX chsh command : no entry :( -->
<item> Setting the Command Shell: How to change the default command line
    to suit your needs.
<item> Finding Help for Commands: The on-line help systems for commands.
</list>
<p>
The rest of the manual also contains command line solutions to
different computing tasks.


<sect id="wutcl">Why Use the Command Line?
<p>
Most Windows and Mac OS users work with a graphical desktop and
ignore the command line. Increasingly, many Linux users are doing the
same. However, you should learn how to use the command line for
several reasons:
<p>
<list>
<item> Many useful tools can only be used from the command line.
<item> The command line gives you more flexibility and power, especially
    when you are working with multiple files.
<item> If you ever need to recover, you will do so from the command
    line. Maintenance work in single-user mode also requires
    familiarity with a command line.
</list>
<p>
These reasons are important enough that many Linux users still prefer
to work from the command line instead of the desktop.
<p>
If you have used DOS, you will find the Linux command line much
easier and much more powerful. Not only does it have many shortcuts
to save you time, but you can even choose the command line interface
- the shell - that best suits your needs. This manual assumes that
you are using bash (Bourne Again Shell), the default for Progeny
Debian and most other Linux distributions.


<sect id="sacl">Starting a Command Line
<p>
If your computer is not set up to use a graphical desktop, it starts
with the command line already running.
<p>
To start a command line while running a graphical desktop, do one of
the following:
<p>
<list>
<item> Select the command line from the panel.
</list>
<p>
<url id="img/Shell-1.png">
<p>
<list>
<item> From the menu, select Programs &gt; System &gt; Eterm, gnome Terminal
    or Regular xt erm. A command line window opens.
</list>
<p>

<url id="img/Shell-2.png">
<p>
<p>
<list>
<item> Press Alt-F2 or select Run from the menu. A single line command
    window opens.
</list>
<p>
<url id="img/Shell-3.png">
<p>
<list>
<item> Right-click on the work space. Then select New &gt; Terminal from
    the pop-up menu.
<item> Press Ctrl-Alt-F1 using the left-hand keys. A full screen command
    line opens.
   
    To return to the desktop, press Alt-F7.
 
</list>

<sect id="ecommands">Entering Commands
<p>
To new users, a command can look overwhelming. However, once you
realize that all commands follows the same basic structure, you can
start using them efficiently.
<p>
This section covers:
<p>
<list>
<item> Understanding the parts of a command.
<item> Understanding command structures.
<item> Entering multiple file names.
<item> Entering wild cards.
<item> Entering multiple commands.
<item> Combining commands.
<item> Running commands in the background.
<item> Stopping commands from running.
</list>

<sect1 id="utpoac">Understanding the Parts of a Command
<p>
A command is sometimes a single word. However, a command may include:
<p>
<list>
<item> Options: variations on how the command is carried out. Options
    begin with one hyphen (-) if they were developed for unix or by
    unaffiliated programmers, or by two hyphens (--) if they were
    developed by the gnu Foundation. Because gnu commands are often
    complete words, they are often more user-friendly.
<item> Arguments: Fixed values that affect exactly what the command
    does, or how it does it.
<item> Directories or files: What the command affects. Some commands,
    such as cp (copy) need a source file (the file being worked with)
    and a target file (the one affected).
<item> Strings: A set of characters enclosed by double or single
    quotation marks. Often, a string contains a regular expression or
    wild card.
</list>
<p>
What a command does can vary greatly, depending on what options,
arguments, and files are used. For example, If you simply type date ,
then the current date and time display. However, if you type date
0707132101, then your computer's date is changed to 1:21 pm on July
7, 2001.
<p>

<url id="img/Shell-4.png">
<p>
Commands, options, and arguments are often abbreviated descriptions
of what they do. For example, cp copies a file, while su switches the
user account you are using. Similarly, in some commands, the -V
option is short for Version, and lists the version number of the
command. Knowing the full description is a useful way to memorize
commands.


<sect1 id="ucs">Understanding Command Structures
<p>
The parts of a command are always entered in the same order:
<p>
command options argument files
<p>
A typical command is chgrp -Rv root /home/jtang/ToDo.
<p>
In this example:
<p>
<list>
<item> chgrp is the basic command. It is short for "change group." It
    transfers the ownership of the file at the end of the command
    from one group of users to another.
<item> -Rv are two options:
<item> -R (recursive) makes the command affect all files and sub-folders
    below the directory at the end of the command.
<item> -v (verbose) makes the command list the files and folders as it
    changes them.
</list>
<p>

<url id="img/Shell-4.png">
<p>
You only need one hyphen for both commands. However, you can enter -R
-v if you prefer.
<p>
<list>
<item> root is an argument. In this case, it means that the ownership of
    the directory will be transferred to the root user.
<item> /home/jtang/ToDo is the directory whose ownership is being
    changed. Originally, it belonged to the user jtang, since it is
    in the home directory for that user. After the command is run,
    the ToDo directory will belong to the root user.
</list>


<sect1 id="uco">Understanding Common Options
<p>
Many options differ with each command. However, a few basic options
are used reasonably consistently. Some may have slight variations,
such as using upper or lower case letters. If you have any doubt
about an option, check the help before using it.
<p>
                                                                     
<example>
                       Common Command Options                        
+-------------------------------------------------------------------+
|     Option      |                  What It Does                   |
|-----------------+-------------------------------------------------|
|  * -d           |Displays debugging information                   |
|  * --debug      |                                                 |
|-----------------+-------------------------------------------------|
|  * -f           |Runs the command no matter what the consequences,|
|  * --force      |such as over-writing existing files.             |
|-----------------+-------------------------------------------------|
|--help           |Displays info help for the command               |
|-----------------+-------------------------------------------------|
|                 |  * Waits for confirmation before doing each part|
|                 |    of the command ( i, interactive ).           |
|  * -i,          |                                                 |
|    --interactive|    or                                           |
|  * --ignore-case|                                                 |
|                 |  * Ignores the distinction between lower case   |
|                 |    and capital letters ( insensitive ).         |
|-----------------+-------------------------------------------------|
|  * -R, -r       |Includes files and sub-directories of the        |
|  * --recursive  |directory name in the command.                   |
|-----------------+-------------------------------------------------|
|  * -V, -v       |Displays what a command is doing so you can see  |
|  * --verbose    |its progress. In some cases, -V or -v gives the  |
|                 |version number of the command.                   |
+-------------------------------------------------------------------+
</example>


<sect1 id="emfnfac">Entering Multiple File Names for a Command
<p>
The simplest way to have a command affect multiple files is to enter
the file names with a space between them. Because this method
specifies which files are affected by the command, it reduces the
chances of accidently applying the command to the wrong file.
<p>
For example, if a user called mary wanted to copy files called 
tasklist and notes to her backup directory, she would type:
<p>
cp /home/mary/tasklist notes /home/mary/backup/.


<sect1 id="ecws">Entering Commands with Strings
<p>
Some commands use a string as an argument. A string is a combination
of letters, numbers, characters and/or spaces inside single or double
quotation marks.
<p>
Within a string, you can type in multiple words, or disable
metacharacters (also known as wild cards). A string that uses
metacharacters is referred to as a regular expression. See Using
Metacharacters or Wild Cards..
<p>
If you use double straight quotation marks, all metacharacters are
disabled except environment variables, such as $ home.
<p>
Single straight quotation marks disable all special characters. In
most cases, use single quotation marks.
<p>
Do not use true quotation marks (" "). True quotation marks may be a
problem if you copy and paste from a word processor.
<p>
For example, if you wanted to search user jsmith 's home directory
for a file that contained the phrase "business expenses," you would
use the grep command with the phrase as an argument: grep 'business
expenses' /home/jsmith/.


<sect1 id="umowc">Using Metacharacters or Wild Cards
<p>
Metacharacters are characters that designate a range of choices. They
are also called special characters or wild cards.
<p>
You may know the basic metacharacters from other operating systems:
<p>
<list>
<item> An asterisk (*) includes any number of characters.
<item> A question (?) mark includes any single character.
</list>
<p>

<url id="img/Shell-5.png">
<p>
Metacharacters can be extremely powerful, especially when used in
combination. Be especially careful about using them when you are
deleting and moving files. You may affect more files than you
realize.
<p>

<url id="img/Shell-4.png">
<p>
If you want to search for a character that is usually used as a
metacharacter, place a backward slash ( ) in front of it. For
example, ? searches for a question mark, instead of any character.
<p>
                                                                     
<example>
                    Metacharacters or Wild Cards                     
+-------------------------------------------------------------------+
|  Metacharacter   |                   Stands for                   |
|------------------+------------------------------------------------|
|.                 |Any character except a new line marker.         |
|------------------+------------------------------------------------|
|?                 |Any one character, or none.                     |
|------------------+------------------------------------------------|
|[ ]               |Any one of the enclosed characters.             |
|------------------+------------------------------------------------|
|*                 |Any number of characters, or none.              |
|------------------+------------------------------------------------|
|^ string          |The string at the start of the line.            |
|------------------+------------------------------------------------|
|string $          |The string at the end of the line.              |
|------------------+------------------------------------------------|
|string +          |Match one or more of the characters in the      |
|                  |string                                          |
|------------------+------------------------------------------------|
|string            |Match a range of instances                      |
|------------------+------------------------------------------------|
|( string | string |One of the strings.                             |
|)                 |                                                |
+-------------------------------------------------------------------+
</example>
<p>
Metacharacters are especially powerful when used together. For
example:
<p>
<list>
<item> ^contacts$ matches text in which contacts is the only word on a
    line.
<item> [Cc]ontacts matches Contacts or contacts .
<item> ^...$ searches for any line of three characters.
<item> compan (y|ies) searches for company or companies .
<item> [A-Za-z] searches for any upper or lowercase letter. Similarly, 
    [0-9A-Za-z] searches for any number or any letter.
</list>


<sect1 id="emc">Entering Multiple Commands
<p>
Separate multiple commands by a semi-colon.
<p>
For example, if you type cd /backup;ls s* , you move to the /backup
directory (using cd), and list all files in the directory that start
with s .


<sect1 id="ccommands">Combining Commands
<p>
You can combine commands by typing them with the pipe character (|)
between them. This technique is known as piping.
<p>
For example, if you type ls|less , you display the files of the
current directory ( ls ) using the less command, which allows you to
scroll back and forth in the list. This combination would be useful
if you had a long list of files.
<p>

<url id="img/Shell-5.png">
<p>
Use piping carefully. Sometimes, it has unwanted or unexpected
results.


<sect1 id="rpitb">Running Programs in the Background
<p>
If you are using the X Window System, the command prompt is generally
in its own window. As a result, you can easily do another task while
a command is running. However, if you are using only the command
line, you can run a command in the background, so that you can use
the shell for another task while the command is running.
<p>
To run a command in the background, type command &amp; .


<sect1 id="scfr">Stopping Commands from Running
<p>
Press Ctrl-C.
<p>
The command that is running stops. Then a new command prompt displays
below the previous one.


<sect id="ntcl">Navigating the Command Line
<p>
Linux systems store files in directories. The directories are
arranged in a tree-like structure. At the top of the tree is the root
directory (/). Even directories on another partition are
sub-directories of the root directory. See Searching for Files and
Text..
<p>
Using a few basic commands, you can
<p>
<list>
<item> Change directories.
<item> Read the contents of directories.
<item> Identify the type of entries in a directory.
<item> Find your current directory.
<item> Clear the screen.
</list>


<sect1 id="cdirectories">Changing directories
<p>
Type cd directory .
<p>
Unless the directory you are changing to is a sub-directory of the
current one, usually you should type the full path name to the
directory.
<p>
To change to the directory immediately above the present one, type 
cd.. (two periods).


<sect1 id="rtcod">Reading the Contents of Directories
<p>
Type ls options directory .
<p>
By carefully selecting your options, you can use the ls (list command
to help you locate files. For example, the -S option lists files in
order of size, while the -t option lists files by when they were
modified.
<p>
Another trick is to set an alias, so that typing list results in ls
-- color , which prints files in different colors, depending on what
kind they are. See <ref id="caa">.
<p>
                                                                     
<example>
                        The ls Command (List)                        
+-------------------------------------------------------------------+
|     Option      |           Action           |      Comments      |
|-----------------+----------------------------+--------------------|
|-a               |Includes hidden files in the|Most hidden files   |
|                 |list.                       |start with a period.|
|-----------------+----------------------------+--------------------|
|  * --color      |Displays types of files in  |                    |
|  * --colour     |color.                      |                    |
|-----------------+----------------------------+--------------------|
|                 |                            |Common symbols are: |
|                 |                            |                    |
|  * -F           |Displays types of files     |  * /: Directories. |
|  * --classify   |using symbols.              |  * *: Executable   |
|                 |                            |    files.          |
|                 |                            |  * @: Symbolic     |
|                 |                            |    links.          |
|-----------------+----------------------------+--------------------|
|--full-time      |Prints complete file        |                    |
|                 |attributes.                 |                    |
|-----------------+----------------------------+--------------------|
|  * -l           |Displays file attributes.   |                    |
|  * format=long  |                            |                    |
|-----------------+----------------------------+--------------------|
|  * -L           |Lists the files referenced  |See Working With    |
|  * --dereference|by symbolic links instead of|Symbolic Links..    |
|                 |the links themselves.       |                    |
|-----------------+----------------------------+--------------------|
|  * -R           |Includes sub-directories.   |                    |
|  * --recursive  |                            |                    |
|-----------------+----------------------------+--------------------|
|  * -S           |Sorts files by size.        |Largest files are   |
|  * sort=size    |                            |displayed first.    |
|-----------------+----------------------------+--------------------|
|  * -t           |Displays files in the order |The most recently   |
|  * --sort=time  |in which they were modified.|modified files are  |
|                 |                            |displayed first.    |
|-----------------+----------------------------+--------------------|
|  * -X           |                            |Not all files may   |
|  * --sort=      |Sorts by file extensions.   |have extensions.    |
|    extension    |                            |                    |
|-----------------+----------------------------+--------------------|
|  * -x           |Lists files in multiple     |                    |
|  * --format=    |columns.                    |                    |
|    across       |                            |                    |
+-------------------------------------------------------------------+
</example>


<sect1 id="itodl">Identifying Types of Directory Listings
<p>
Type: file options file .
<p>
To see the types of all the listings in a directory, type the
directory name followed by the asterisk wild card. For example: file
/root/* .
<p>

<url id="img/Shell-4.png">
<p>
The file command does not read compressed files or symbolic links
unless the -z option is chosen.
<p>

<url id="img/Shell-4.png">
<p>
Another way to identify directory listing is to use the ls command
with the --color option. See <ref id="rtcod">.
<p>
                                                                     
<example>
              The file Command (Identifies File Types)               
+-------------------------------------------------------------------+
|Option|                   Action                    |   Comment    |
|------+---------------------------------------------+--------------|
|-L    |Lists the files referenced by symbolic links,|Traces the    |
|      |rather than the links themselves.            |original file.|
|------+---------------------------------------------+--------------|
|-z    |Reads compressed files.                      |              |
+-------------------------------------------------------------------+
</example>


<sect1 id="fycl">Finding Your Current Location
<p>
Type pwd .
<p>
The current or working direction displays on the screen.


<sect1 id="ctscreen">Clearing the Screen
<p>
Type clear .
<p>
Only the screen display is affected. The command history is still
usable.


<sect id="ucls">Using Command Line Shortcuts
<p>
Linux has several shortcuts for entering commands:
<p>
<list>
<item> Tab completion.
<item> History.
<item> Command pasting.
<item> Aliases.
<item> Abbreviating file paths.
<item> Redirecting inputs and outputs.
<item> Environment variables.
</list>


<sect1 id="utc">Using Tab Completion
<p>
By pressing the Tab key, you can have the shell complete the command
you are typing. You can also use Tab completion as a guide to
commands if you are unsure of which command you want.
<p>
If only one command completes what you have typed, then the full
command is entered automatically. However, you still need to add any
options, arguments and files, and press the Enter key.
<p>
If more than one command completes what you typed, then a list of
possible completions displays. You can use the list as a guide to
commands. Or you can type another letter, press the Tab key, and
display another list of completions.
<p>
For example, if you type chg then press the Tab key, the command 
chgrp is entered at the prompt. No other command completes chg .
<p>
On the other hand, if you type cha , you get the following list:
<p>
chage chat chattr
<p>
This time, these three command complete what you have typed.


<sect1 id="uch">Using Command History
<p>
The .bash_history file in your home directory lists all the commands
that you have entered from the command line.
<p>
You can use this file to re-enter commands that you have already
used. This ability is useful if you are doing repetitive work, or if
you have made a mistake and want to correct it without re-typing.
<p>
To move through the command history, use the up arrow key to repeat
the previous command in the history. Use the down arrow key to repeat
the next command.
<p>
If you are at the last command, then using the arrow key deletes what
you have entered at the command prompt.
<p>
If you change user accounts, you cannot use the command history of
the original account.


<sect1 id="utp">Using Text Pasting
<p>
You can use the mouse to copy and paste text that still displays on
the screen.
<p>
To paste a command:
<p>
<list>
<item> 1 Press the left mouse button, and drag the cursor over the text
    that you want to paste. The text is highlighted.
<item> 2 Release the mouse button.
<item> 3 Place the cursor at the spot where you want to paste the text.
    Then click the middle mouse button. The text is pasted. If you
    selected an entire line with a command, then the command runs
    automatically.
</list>


<sect1 id="uca">Using Command Aliases
<p>
An alias is a shorter name for a command. Aliases are especially
useful if you want a shortcut for a command with a set of commonly
used options.
<p>
You can:
<p>
<list>
<item> Create an alias.
<item> Delete an alias.
<item> View existing aliases.
</list>


<sect2 id="caa">Creating an Alias
<p>
Type alias alias = command option .
<p>
If the original command includes options and arguments, enter it as a
string in single quotation marks
<p>
For example, if you regularly printed three copies of everything to a
printer called progeny, you could create an alias by typing alias p3=
'lpr -3 -P progeny' .
<p>
Once the alias is created, you can use the alias instead of the
original command. For example, to send the file contactlist.txt to
the printer, you would type p3 contact.txt .


<sect2 id="daa">Deleting an Alias
<p>
Type unalias alias .


<sect2 id="valiases">Viewing Aliases
<p>
Type alias . A list of aliases displays.


<sect1 id="afpn">Abbreviating File Path Names
<p>
One of the biggest drawbacks to the command line is that typing file
names can be cumbersome. You can reduce the amount of typing by
using:
<p>
<list>
<item> Shortcut symbols.
<item> Relative paths.
</list>


<sect2 id="ussymbols">Using Special Symbols
<p>
You can use the following special symbols to reduce the amount of
typing you need to do in file names.
<p>
                                                                     
<example>
                Special Symbols for the Command Line                 
+-------------------------------------------------------------------+
|Symbol|                     What it stands for                     |
|------+------------------------------------------------------------|
|.     |The directory that you are now in (the working directory).  |
|------+------------------------------------------------------------|
|..    |The directory above the one you are in now (the parent      |
|      |directory).                                                 |
|------+------------------------------------------------------------|
|      |Your home directory.                                        |
|------+------------------------------------------------------------|
|user  |The home directory for the user account listed.             |
|------+------------------------------------------------------------|
|/     |The root directory                                          |
+-------------------------------------------------------------------+
</example>


<sect2 id="urpn">Using Relative Path Names
<p>
A file's complete path name starts with the root directory. For
example, the path for the file ToDo in the January folder of the home
directory for jgill would be /home/jgill/January/ToDo .
<p>
A complete path is generally known as the absolute path.
<p>
Instead of typing the absolute path, you can save time by typing the
relative path. A relative path:
<p>
<list>
<item> Is traced from the current directory, instead of the root
    directory.
<item> Must be to a sub-directory of the current directory.
<item> Does not start with a forward slash.
</list>
<p>
For example, if you were in the /jgill/January directory, the
relative path to ToDo would be January/ToDo . In the home directory,
the relative path would be jgill/January/ToDo .


<sect1 id="riaofc">Redirecting Input and Output for Commands
<p>
In most cases, you enter a command from the keyboard, and the results
and any error messages display on the screen.
<p>
In other words, the keyboard is the standard input, and the screen is
the standard output and standard error.
<p>
By changing these standards, you can often save time and effort.
<p>
Uses for redirection include:
<p>
<list>
<item> Writing the results or errors to a file to keep a permanent
    record.
<item> Writing the results or errors to the printer, to have a hardcopy
    record.
<item> Using a file for input, instead of typing the input.
<item> Combining two commands so that they work together.
</list>
<p>
As you learn the command line, you may find other uses for
redirection.
<p>
To redirect a command's input, output, or error, you use a small set
of characters known as redirection operators.
<p>
                                                                     
<example>
                        Redirection Operators                        
+-------------------------------------------------------------------+
|Characters|                      What it does                      |
|----------+--------------------------------------------------------|
|          |Redirects the output to a file or a piece of hardware,  |
|&gt;         |such as the printer. If the file already exists, the    |
|          |older file is automatically overwritten.                |
|----------+--------------------------------------------------------|
|          |Redirects the output, but if the output is a file that  |
|          |already exists, adds the output to the end of the       |
|&gt;&gt;        |existing file.                                          |
|          |                                                        |
|          |Usually, this character is safer to use than &gt;, since it|
|          |does not overwrite existing files.                      |
|----------+--------------------------------------------------------|
|2&gt;        |Redirects the error output to a file or a piece of      |
|          |hardware, such as the printer.                          |
|----------+--------------------------------------------------------|
|&lt;         |Redirects the input of the command from a file or       |
|          |device.                                                 |
+-------------------------------------------------------------------+
</example>
<p>
The format for using redirection is:
<p>
command operator target
<p>
For example, if you wanted to save a copy of a search for the keyword
"expenses" in a file, you could type grep 'expenses' January2001&gt;
expenses.txt .
<p>
In this example:
<p>
<list>
<item> grep is the search command.
<item> expenses is the argument string you are searching for.
<item> January2001 is the file to search.
<item> expenses.txt is the file that the results are printed to. If the
    file does not exist, it is created.
</list>


<sect1 id="uev">Using Environment Variables
<p>
Environment variables define different aspects of the way that you
interact with the system. Some, like $home (the variable for your
home directory) are set for you. However, you can also create your
own variables to use in scripts or for saving time when you use the
command line.
<p>
Variables that you create are stored in the .bash_profile file in
your home directory.


<sect2 id="aav">Adding a Variable
<p>
Type: export variable=value .
<p>
For example, if you wanted to create the variable $ income to refer
to the directory /home/jsmith/Expenses, you would type export $
income /home/jsmith/Expenses .


<sect2 id="uav">Using a Variable
<p>
To use a variable, type its name with a dollar sign in front of it
where you would ordinarily type the value. For example, if you create
the variable $ income to refer to the directory /home/jsmith/
Expenses, you can view the file /Expenses/january, by typing less $ 
income /January .


<sect id="fhfc">Finding Help for Commands
<p>
This manual lists only a few basic commands. A thorough guide to
commands would require well over 1000 pages.
<p>
To find more information about Linux commands, you can use either the
man or texinfo help systems. For quick help, you can use whatis .

<sect1 id="ump">Using man Pages
<p>
Man ("manual") pages are the traditional help files of unix and
Linux. Man pages exist for both commands and configuration files.
<p>
Man pages are summaries rather than how-tos. In addition, many are no
longer being updated. For this reason, man pages are often hard to
use.
<p>
To open a man page, type man command or man file .


<sect2 id="smp">Searching man Pages
<p>
You can search man pages for all entries on a particular topic by
typing: apropos keyword . The one drawback to this command is that
common topics can list an overwhelming number of entries.


<sect1 id="uid">Using Info Documents
<p>
Info documents are gnu help. Usually, info files are more current and
more thorough than man pages. Most people find them easier to use.
<p>
To open an info document, type command --help .


<sect1 id="uwhatis">Using whatis
<p>
The whatis command gives a short summary of the topic entered.
<p>
Type: whatis keyword .
<p>
</chapt>
