<!-- Science: Andreas Franzen -->

<p>
Latest update to this chapter: 9th January 2000
<sect>
<heading>What this chapter covers</heading>
<p>
This chapter shows possible ways to use Debian GNU/Linux for scientific
research. This means especially how to process measurement data to convert
them into papers.
<p>
To illustrate these concepts, the package <prgn>diploma</prgn> in the
section <prgn>doc</prgn> of the Debian distribution contains some real
world examples.
</sect>

<sect>
<heading>Plotting</heading>
<p>
One important aspect in the scientific use of computers is the graphic
representation of data. The most common form is a two-dimensional plot.
There are many different ways to create such plots with a Debian system.
These include command line tools, programming libraries, scripting language
interpreters, and programs with GUIs.
<p>
Which of these different approaches is the best one
depends both on the problem to
solve and on the overall concept. In case the concept is to structure the
whole work in a <prgn>make</prgn> project, it is important to integrate
the conversion of data into diagrams cleanly into the makefile. This means
that interactive manipulations are not possible. On the other hand, it can
be easier and faster to create a special plot with a GUI driven program.
<p>
The classic way to plot data is the command line tool <prgn>graph</prgn>.
This is included in the package <prgn>plotutils</prgn>. It is possible to
convert data into publication quality plots just by invoking
<prgn>graph</prgn> with some command line options to set the axis labels,
etc. Interesting is the possiblility to include a huge number of special
characters and to output the plot in the file format of the program
<prgn>xfig</prgn>. Such plots can be rearranged and changed with the GUI
driven vector graphics program <prgn>xfig</prgn>. The documentation can
be accessed by <prgn>info plotutils</prgn>.
<p>
Another possibility to use the <prgn>plotutils</prgn> package to create
diagrams is to use graphs metafile format directly. This makes it possible
to write and edit plots in a simple graphic description language.
<p>
Also, the <prgn>plotutils</prgn> package comes with a C library which
makes it possible to create graphical output from C programs.
<p>
Another very popular way to convert data into plots is the program
<prgn>gnuplot</prgn>. This program can be used with an interactive
interface and also as a scripting language interpreter. The later way makes
it possible to include invocations of <prgn>gnuplot</prgn> in
<prgn>make</prgn> projects.
<p>
Sometimes, it may be necessary to use the graphic description language
Ghostscript directly. For example, if you want to include a grayscale image
into a diagram, the rotation angle of this image has to be adjusted some
degrees without quality loss, and you have to adjust the raster frequency of
the print to get an optimum compromise between reproducability and
resolution. In such a case, Ghostscript is a solution. The section on the
combination of diagrams and the <prgn>diploma</prgn> package give more
information on this topic.
<p>
The Debian distribution provides also some GUI driven plotting programs.
The most useful of these is <prgn>grace</prgn>. The X Window binary is
<prgn>xmgrace</prgn>. It is found in the menu at programs-apps-math-grace.
It is also possible to use the package <prgn>grace</prgn> for batch
processing. Grace project files use a human readable description language.
The documentation on grace is in <prgn>/usr/lib/grace/doc</prgn> and
examples are in <prgn>/usr/lib/grace/examples</prgn>.
</sect>

<sect>
<heading>Combining diagrams</heading>
<p>
Sometimes, it is necessary to combine plots produced by plotting programs
like <prgn>graph</prgn> with additional images. One possible way is to
set the output format of <prgn>graph</prgn> to fig which
creates a <prgn>.fig</prgn> file. This can be edited manually with the
graphics program <prgn>xfig</prgn>. This method has the drawback that
every time a change is done to the original plot the additional
modifications must be repeated. This is especially annoying when you try to
summarize the structure of your work in a makefile. The <prgn>make</prgn>
command cannot do the additional modifications you did with
<prgn>xfig</prgn>, when the original plot is updated.</p>
<p>
One possibility is to do the creation of the original plot and of the
additional figure separately. The manually created figure is saved as an
<prgn>.eps</prgn> file which is considered as source code in the makefile.
The combination of the manually created figure and the original plot is then
done by commands within the makefile. Whenever the original plot changes the
same manually created figure is added automatically to the now plot.</p>
<p>
When you want to combine figures from different sources into one figure to
include into e.g. a LaTeX document, the easiest way is to use the
<prgn>.eps</prgn> format. <prgn>.eps</prgn> files are textfiles which have
the important possibility to be combined easily into new <prgn>.eps</prgn>
files.</p>
<p>
The programming language for the processing of <prgn>.eps</prgn> files
included in the Debian GNU/Linux system is Ghostscript. The Ghostscript
interpreter is in the package <prgn>gs</prgn> in the <prgn>text</prgn>
section. The binary is also named <prgn>gs</prgn>.</p>
<p>
For a quick start with Ghostscript, you can open a console window in X
Window and just type <prgn>gs</prgn> at the shell prompt. Then an
additional window with the graphics display will pop up and you will get
the <prgn>GS></prgn> prompt at the console. Ghostscript is an interpreted
stack oriented programming language. To get an impression of this we will
try to compute (3+5)*7 with Ghostscript. The program is simple.
<example>
3 5 add 7 mul =
</example>
In detail this means
<example>
3     %Put 3 onto the stack.
5     %Put 5 onto the stack.
add   %Take the last two elements from the stack and put
      %the sum onto the stack.
7     %Put 7 onto the stack.
mul   %Take the last two elements from the stack and put
      %the product onto the stack.
=     %Take the last element from the stack and print it
      %at the console.
</example>
After every command you can type <prgn>pstack</prgn> to see the current
content of the stack. Then we will try to write a line on the graphics
display.
<example>
newpath         %Start a new path.
100 200 moveto  %Move the graphics cursor to x=100, y=200.
150 210 lineto  %Add a line to the position x=150, y=210.
stroke          %Draw the current path.
</example>
You can leave the Ghostscript interpreter by typing <prgn>quit</prgn>.
<p>
These examples should have given you an idea of the concept of the
Ghostscript languge. All <prgn>.eps</prgn> files and <prgn>.ps</prgn>
files are text files which contain Ghostscript programs. Often these
programs are nearly unreadable because in a very big header many short
abbreviations are defined which are used throughout the following program.
Fortunately, you do not need to lock into the program which describes a
figure to include it into another <prgn>.eps</prgn> file. The general
difference between <prgn>.ps</prgn> files and <prgn>.eps</prgn> files is
that <prgn>.ps</prgn> files usually describe whole documents of many
pages while <prgn>.eps</prgn> files always contain only one figure.
<p>
Files in the <prgn>.eps</prgn> format may or may not contain a
<prgn>showpage</prgn> command at the end of the file. Without this command
sending the file to a printer won't give you a hardcopy. When it is possible
to see the figure with <prgn>gv</prgn> with the right papersize set and
printing does not work, just adding a <prgn>showpage</prgn> command
to the end of the file often helps.
<p>
The following example shows an <prgn>.eps</prgn> file which contains the
line of the previous example.
<example>
%!PS-Adobe-3.0 EPSF-3.0
newpath
100 200 moveto
150 210 lineto
stroke
showpage
quit
</example>
When you save this as <prgn>test.eps</prgn> and start <prgn>gv
test.eps</prgn>, you can see a small window with the line from the left
lower to the right upper corner. The program <prgn>gv</prgn> is included
in the package <prgn>gv</prgn> in the section <prgn>text</prgn> of Debian
GNU/Linux. The first line of the example indicates the file format. The
second line gives the bounding box. This is a rectangle which contains the
drawing. When you position the mouse cursor onto the line, you can see the
coordinates of the mouse cursor. The origin is the lower left corner of the
printing area, e.g. the paper sheet of a printer. x counts positive to the
right and y positive upwards. On paper the units are points. One point
equals 25.4/72mm. When your <prgn>lpr</prgn> command is set up to print
<prgn>.ps</prgn> files you can just sent the example file with <prgn>lpr
test.eps</prgn> to the printer and you will get a line on the paper at the
according coordinates. The command <prgn>showpage</prgn> tells the printer
to actually print the page. This is common but not necessary at the end of
<prgn>.eps</prgn> files. If an <prgn>.eps</prgn> file is included in
another file, <prgn>showpage</prgn> commands must be disabled. Otherwise,
the printer would print the page and start a new one at each occurence of
these included <prgn>showpage</prgn> commands.
<p>
Now, we will combine two <prgn>.eps</prgn> files into a new
<prgn>.eps</prgn> file. We plot the following data points
<example>
0 0
1 1
2 4
3 9
</example>
and put the Debian logo from http://www.debian.org in the left top corner of
the plot. The Debian logo is downloaded as <prgn>logo-50.jpg</prgn>. The
plot is in <prgn>plot.eps</prgn>. This is created by the following command.
<example>
echo '0 0 1 1 2 4 3 9' | graph -T ps > plot.eps
</example>
The <prgn>graph</prgn> command is contained in the <prgn>plotutils</prgn>
package in section <prgn>math</prgn> of the Debian distribution.</p>
<p>
The following script inserts the logo into the plot and saves the combined
figure in <prgn>figure.eps</prgn>.
<example>
#!/bin/bash
convert logo-50.jpg logo-50.eps     #Convert the .jpg file
                                    #into an .eps file.
cat head.asc plot.eps separation.asc logo-50.eps tail.asc > figure.eps
</example>
The command <prgn>convert</prgn> is contained in the package
<prgn>imagemagick</prgn> in section <prgn>graphics</prgn>. The file
<prgn>head.asc</prgn> contains
<example>
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 107 195 492 580
save gsave /showpage {} def
</example>
The first line says it is an <prgn>.eps</prgn> file. The second line is
the bounding box. Because the logo is inserted into the plot this is
the same as the boundig box of <prgn>plot.eps</prgn>. The third line
saves the virtual memory and the graphics state, thus, any modifications
done inside the .eps files can be restored. Finally, the
<prgn>showpage</prgn> command is redefined into nothing. The file
<prgn>separation.asc</prgn> contains
<example>
grestore restore
save gsave /showpage {} def
185 400 translate
2 2 scale
</example>
The graphics state and virtual memory are restored and saved again. The
logo is scaled by factor 2 in both x and y direction and then translated 185
points to the right and 400 points upwards to fit into the plot. It is also
possible to rotate with the rotation angle and the command rotate. The order
of the commands is essential. 2 2 scale 10 10 translate means that the
origin of the original image is at 20, 20 afterwards. The content of the
file <prgn>tail.asc</prgn> is
<example>
grestore restore
showpage
quit
</example>
This closes the <prgn>.eps</prgn> file.</p>
<p>
Examples of the handling of <prgn>.eps</prgn> files are in the package
<prgn>diploma</prgn> in section <prgn>doc</prgn>.</p>
</sect>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:nil
sgml-doctype: ("user.sgml")
sgml-parent-document: ("user.sgml" "debiandoc" "book" ("chapt") )
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
sgml-set-face:1
End:
-->
