<!-- CVS revision of original english document "1.21" -->
<chapt id="pkg_basics">Grundlagen des Debian-Paketverwaltungssystems

<sect id="package">Was ist ein Debian-Paket?

<p>Pakete beinhalten im Allgemeinen alle notwendigen Dateien, um eine Sammlung
in Beziehung stehender Kommandos und Fähigkeiten zu implementieren.
Es gibt zwei Arten von Debian-Paketen:
<list>
  <item><em>Binärpakete</em>, welche ausführbare Dateien, Konfigurationsdateien,
  man/info-Seiten, Copyright-Informationen und andere Dokumentation beinhalten.
  Diese Pakete sind in einem speziellen Debian-Archivformat verteilt
  (siehe <ref id="deb-format">). Sie zeichnen sich für gewöhnlich durch eine
  ».deb«-Dateierweiterung aus. Binärpakete können mittels des Debian-Werkzeugs
  <prgn>dpkg</prgn> entpackt werden. Mehr Details finden Sie in der Handbuchseite.
  
  <item><em>Quellpakete</em>, welche aus einer <tt>.dsc</tt>-Datei bestehen,
  die das Quellpaket beschreibt (inklusive der Namen der folgenden Dateien),
  einer <tt>.orig.tar.gz</tt>-Datei, welche die originalen, unveränderten 
  Quellen in einem gzip-komprimierten tar-Format enthält und üblicherweise
  einer <tt>.diff.gz</tt>-Datei, die Debian-spezifische Änderungen an den Originalquellen
  enthält. Das Dienstprogramm <prgn>dpkg-source</prgn> packt und entpackt
  Debian-Quellpakete. Mehr Details sind in der Handbuchseite zu finden.
</list>

<p>Für die Installation von Software benutzt das System die von den Paketbetreuern sorgfältig
angegebenen Abhängigkeiten. Diese Abhängigkeiten sind in der 
<file>control</file>-Datei, die zu jedem Paket gehört, dokumentiert. 
Zum Beispiel beinhaltet das Paket des GNU C-Compilers (<package/gcc/)
Abhängigkeiten (»depends«) zu dem Paket <package/binutils/, welches den Linker und
den Assembler enthält. Wenn ein Benutzer versucht <package/gcc/ zu installieren ohne
zuerst <package/binutils/ installiert zu haben, gibt das Paketverwaltungssystem (<prgn>dpkg</prgn>)
die Fehlernachricht aus, dass es das Paket <package/binutils/ benötige und stoppt die Installation
von <package/gcc/. (Dennoch kann dieser Prüfmechanismus vom Benutzer abgestellt werden,
siehe <manref name="dpkg" section="8">.)  Siehe <ref id="depends"> weiter
unten.

<p>Debian-Paketierungsprogramme können benutzt werden, um:
<list>
  <item>Pakete oder Paketteile zu manipulieren und zu verwalten,
  <item>dem Benutzer zu helfen Pakete aufzuteilen, die auf Medien mit
        limitierter Größe übermittelt werden sollen, z.B. Disketten,
  <item>den Entwicklern beim Erzeugen von Paketen zu helfen und
  <item>Benutzern die Installation von Paketen zu ermöglichen, die sich
        z.B. auf einem FTP-Server befinden.
</list>

<sect id="deb-format">Was ist das Format eines binären Debian-Pakets?

<p>Ein Debian-Paket oder eine Debian-Archivdatei beinhaltet ausführbare Dateien,
Bibliotheken und Dokumentationen, die zu einem Programm oder einer Menge
verwandter Programme gehören.
Normalerweise hat eine Debian-Archivdatei die Dateiendung
<tt>.deb</tt>.

<p>Die Interna des binären Debian-Paketformats sind in
der <manref name="deb" section="5"> Handbuchseite beschrieben. 
Dieses interne Format kann sich (zwischen zwei &debian;-Hauptreleases)
ändern, benutzen Sie daher bitte immer <manref name="dpkg-deb"
section="1">, um <tt>.deb</tt>-Dateien zu bearbeiten.

<sect id="pkgname">Warum sind Debian-Paketdateinamen so lang? 

<p>Die Debian-Binärpaketdateien gehorchen alle der folgenden Konvention:
&lt;foo&gt;_&lt;VersionsNummer&gt;-&lt;DebianRevisionsNummer&gt;.deb

<p>Bitte beachten Sie, dass <tt>foo</tt> für den Paketnamen steht.
Sie können den Paketnamen der Debian-Archivdatei (.deb-Datei) auf eine der
folgenden Arten herausfinden:
<list>
  <item>Untersuchen Sie die <file>Packages</file>-Datei, in dem Ordner auf einer
	Debian-FTP-Archiv-Seite.  Diese Datei enthält für jedes Paket eine
	»Beschreibungszeile«. Der erste Abschnitt jeder Zeile enthält den
	formalen Paketnamen.
  <item>Benutzen Sie den folgenden Befehl <tt>dpkg --info foo_<var>VVV</var>-<var>RRR</var>.deb</tt>
	(wobei <var>VVV</var> und <var>RRR</var> durch die Versions- bzw. Revisions-Nummer des
	Paketes ersetzt werden muss).
	Dies gibt unter anderem den formalen Paketnamen beim Auspacken des
	Archives aus.
</list>

<p>Die <var>VVV</var>-Komponente ist die Versionsnummer, die vom
Original-Entwickler festgelegt worden ist. Hierfür sind keine Standards
festgelegt. Die Versionsnummer kann verschiedene Formate, wie »19990513«
und »1.3.8pre1«, gleichermaßen enthalten.

<p>Die <var>RRR</var>-Komponente ist die Debian-Revisionsnummer, die von einem
Debian-Entwickler (oder einem individuellen Benutzer, der sich entschieden hat
das Paket selber zu bauen) festgelegt wurde.
Diese Nummer entspricht dem Stand des Debian-Paketes. Eine neue Revisionsnummer
zeigt manchmal Änderungen im Debian-Makefile (<file>debian/rules</file>), der
Debian-Kontroll-Datei (<tt>debian/control</tt>), den Installations- oder
Entfernungs-Skripten (<file>debian/p*</file>) oder in den Konfigurationsdateien die
mit diesem Paket benutzt werden.

<!--
<p>The <tt>Arch</tt> component identifies the processor for which
the package was built.  This is commonly <tt>i386</tt>, which refers to
chips compatible to Intel's 386 or later versions.  For other
possibilities see <ref id="dirtree" name="Debian's FTP directory structure">.
-->

<sect id="controlfile">Was ist eine Debian-Kontroll-Datei?

<p>Besonderheiten, die Debian-Kontroll-Dateien betreffend, können Sie 
im Debian-Richtlinien-Handbuch, Abschnitt 5, <ref id="debiandocs"> sehen.

<p>Folgend ist ein Auszug vom Debian-Paket »hello« zu sehen:
<example>
Package: hello
Priority: optional
Section: devel
Installed-Size: 45
Maintainer: Adam Heath &lt;doogie@debian.org&gt;
Architecture: i386
Version: 1.3-16
Depends: libc6 (>= 2.1)
Description: The classic greeting, and a good example
 The GNU hello program produces a familiar, friendly greeting.  It
<!-- XXX below 'non-programmers' were better, but this is a verbatim copy -->
 allows nonprogrammers to use a classic computer science tool which
 would otherwise be unavailable to them.
 .
 Seriously, though: this is an example of how to do a Debian package.
 It is the Debian version of the GNU Project's `hello world' program
 (which is itself an example for the GNU Project).
</example>

<p>Das »Package«-Feld zeigt den Paketnamen an. Dieser Name wird für die
Nutzung des Paketes mit den Paketverwaltungswerkzeugen benutzt. Es kann
vorkommen, dass das »Package«-Feld mit dem ersten Teil des
Debian-Paketarchivdateinamen übereinstimmt, dies muss aber nicht so sein.

<p>Das »Version«-Feld gibt beides an, an erster Stelle die
Original-Entwickler-Versionsnummer und im zweiten Teil die Revisionsnummer des
Debian-Paketes. Dieses Vorgehen wird unter <ref id="pkgname"> beschrieben. <!--
XXX missing name -->

<p>Das »Architecture«-Feld gibt den Prozessor-Typ an, für den das Binärpaket
kompiliert worden ist.

<p>Das »Depends«-Feld enthält eine Liste von Paketen, die benötigt werden um
dieses Paket erfolgreich installieren zu können.

<p>Die »Installed-Size« (installierte Größe) gibt den geschätzten
Festplattenverbrauch nach der Installation des Paketes an.
Dieser Wert wird von den Oberflächen benutzt um zu prüfen, ob noch genug
Festplattenplatz für die Installation vorhanden ist.

<p>Die »Section«-Zeile gibt an, in welchem Bereich des Debian-FTP-Archives das
Paket zu finden ist. Dies ist der Name des Unterverzeichnisses (mit einem der
Hauptverzeichnisse, siehe <ref id="dirtree">) in dem das Paket zu gespeichert
ist.

<p>Die »Priority«-Zeile zeigt, wie wichtig dieses Paket für die Installation ist.
Hiermit kann halb intelligente Software wie
"<tt>dselect</tt>" oder "<tt>console-apt</tt>" den Paketen Gruppen (z.B.
der Gruppe der optionalen Software) zuordnen, siehe <ref id="priority">.

<p>Das »Maintainer«-Feld enthält die E-Mail-Adresse der Person, die momentan für
die Paketbetreuung zuständig ist.

<p>Das »Description«-Feld gibt ein Einweisung über die Funktionen des Paketes.

<p>Für mehr Informationen über alle möglichen Felder, die ein Paket haben kann,
sehen Sie sich bitte das Debian-Richtlinien-Handbuch, Abschnitt 5., <ref
id="debiandocs"> "Kontroll-Dateien und ihre Felder" an.

<sect id="conffile">Was ist ein Debian »Conffile«?

<p>«Conffiles« sind Listen von Konfigurationsdateien (meistens unter
<file>/etc</file> zu finden). Diese Dateien werden vom Paketverwaltungswerkzeug bei
einer Paketaktualisierung nicht überschrieben.
Dies stellt sicher, dass eigene Einstellungen, die in diesen Dateien gemacht
wurden, behalten werden. Dies ist notwendig um die Funktion des "Vor-Ort"-Austausches
von Paketen auf laufenden Systemen zu ermöglichen.

<p>Um herauszufinden, welche Dateien bei einem Update erhalten bleiben, benutzen
Sie: 
  <example>dpkg --status package</example>
und schauen unter "Conffiles:" nach.

<sect id="maintscripts">Was sind die Debian »preinst«-, »postinst«-, »prerm«-
und »postrm«-Skripte?

<p>Diese Dateien sind ausführbare Skripte die automatisch vor bzw. nach einer
Paketinstallation laufen. Genau wie die <tt>control</tt>-Datei sind diese
Dateien Teil der Debian-Archivdatei.

<p>Die individuellen Dateien sind:
<taglist>
<tag/preinst/
  <item>Diese Skript wird ausgeführt bevor das Paket aus der
	Debian-Archivdatei (.deb-Datei) entpackt wird.
	Viele »preinst«-Skripte stoppen Dienste, die während bzw. nach der
	Installation aktualisiert werden. Nach der erfolgreichen Installation
	folgt die Ausführung des »postinst«-Skriptes.

<tag/postinst/
  <item>Diese Skript stellt normalerweise die benötigte Konfiguration des
	<tt>foo</tt>-Paketes fertig, nachdem <tt>foo</tt> aus seiner
	Debian-Archivdatei (".deb"-Datei) entpackt worden ist.
	Oft fragen "postinst"-Skripte den Benutzer nach Eingaben und/oder
	warnen ihn, dass, wenn er die Standardwerte akzeptiert, er daran denken
	muss, das Paket neu zu konfigurieren, wenn es die Situation erfordert.
	Viele "postinst"-Skripte führen nach dem Installieren/Updaten, die für
	das Starten bzw. Neustarten der Dienste benötigten Kommandos aus.

<tag/prerm/
  <item>This script typically stops any daemons which are associated with
  a package.  It is executed before the removal of files associated with
  the package.

<tag/postrm/
  <item>This script typically modifies links or other files associated with
  <tt>foo</tt>, and/or removes files created by the package. (Also see
  <ref id="virtual">.)
</taglist>

<p>Currently all of the control files can be found in directory
<tt>/var/lib/dpkg/info</tt>. The files relevant to package <tt>foo</tt>
begin with the name "foo" and have file extensions of "preinst", "postinst",
etc., as appropriate.  The file <tt>foo.list</tt> in that directory
lists all of the files that were installed with the package <tt>foo</tt>.
(Note that the location of these files is a dpkg internal; you should not
rely on it.)

<sect id="priority">What is an <em/Essential/ <em/Required/, <em/Important/, <em/Standard/,
  <em/Optional/, or <em/Extra/ package?

<p>Each Debian package is assigned a <em>priority</em> by the distribution
maintainers, as an aid to the package management system.  The priorities are:

<list>
  <item><strong>Required</strong>: packages that are necessary for the proper
    functioning of the system.
    <p>This includes all tools that are necessary to repair system defects.
    You must not remove these packages or your system may become totally broken
    and you may probably not even be able to use dpkg to put things back.
    Systems with only the Required packages are probably unusable, but they do
    have enough functionality to allow the sysadmin to boot and install more
    software.
  <item><strong>Important</strong> packages should be found on any Unix-like
    system.
    <p>Other packages which the system will not run well or be usable without
    will be here. This does <em>NOT</em> include Emacs or X11 or TeX or any
    other large applications. These packages only constitute the bare
    infrastructure.
<!-- JFS: Review for etch, since some development packages might be removed
     in the near future #301138 -->
  <item><strong>Standard</strong> packages are standard on any Linux system,
    including a reasonably small but not too limited character-mode system.
    <p>This is what will install by default if users do not select anything
    else. It does not include many large applications, but it does include
    some development software like the GNU C and C++ compilers (<tt>gcc</tt>, 
    <tt>g++</tt>), GNU make, as well as the Python interpreter and some server 
    software like OpenSSH, the BSD printer daemon (<tt>lpr</tt>) 
    and the RPC portmapper (<tt>portmap</tt>).
  <item><strong>Optional</strong> packages include all those that you might
    reasonably want to install if you did not know what it was, or do not
    have specialized requirements.
    <p>This includes X11, a full TeX distribution, and lots of applications.
  <item><strong>Extra</strong>: packages that either conflict with others
    with higher priorities, are only likely to be useful if you already know
    what they are, or have specialized requirements that make them
    unsuitable for "Optional".
</list>

<p>If you do a default Debian installation all the packages of
priority <strong>Standard</strong> or higher will be installed in your
system. If you select pre-defined tasks you will get lower
priority packages too.

<p>Additionally, some packages are marked as <strong>Essential</strong>
since they are absolutely necessary for the proper functioning of the system.
The package management tools will refuse to remove these.

<sect id="virtual">What is a Virtual Package?

<p>A virtual package is a generic name that applies to any one of a group
of packages, all of which provide similar basic functionality. For example,
both the <tt>tin</tt> and <tt>trn</tt> programs are news readers, and
should therefore satisfy any dependency of a program that required a news
reader on a system, in order to work or to be useful.
They are therefore both said to provide the "virtual package" called
<tt>news-reader</tt>.

<p>Similarly, <tt>smail</tt> and <tt>sendmail</tt> both provide the
functionality of a mail transport agent.  They are therefore said to
provide the virtual package, "mail transport agent".
If either one is installed, then any program depending on the
installation of a <tt>mail-transport-agent</tt> will be satisfied by
the existence of this virtual package.

<p>Debian provides a mechanism so that, if more than one package which
provide the same virtual package is installed on a system, then system
administrators can set one as the preferred package. The relevant command
is <tt>update-alternatives</tt>, and is described further in
<ref id="diverse">.

<sect id="depends">What is meant by saying that a package <em/Depends/,
  <em/Recommends/, <em/Suggests/, <em/Conflicts/, <em/Replaces/ or
  <em/Provides/ another package?

<p>The Debian package system has a range of package "dependencies"
which are designed to indicate (in a single flag) the level at which
Program A can operate independently of the existence of Program B on
a given system:
<list>
  <item>Package A <em>depends</em> on Package B if B absolutely must
    be installed in order to run A.  In some cases, A depends not only
    on B, but on a version of B.  In this case, the version dependency is
    usually a lower limit, in the sense that A depends on any version
    of B more recent than some specified version.
  <item>Package A <em>recommends</em> Package B, if the package maintainer
    judges that most users would not want A without also having the
    functionality provided by B.
  <item>Package A <em>suggests</em> Package B if B contains files that
    are related to (and usually enhance) the functionality of A.
  <item>Package A <em>conflicts</em> with Package B when A will not
    operate if B is installed on the system.  Most often, conflicts are
    cases where A contains files which are an improvement over those in B.
    "Conflicts" are often combined with "replaces".
  <item>Package A <em>replaces</em> Package B when files installed
    by B are removed and (in some cases) over-written by files in A.
  <item>Package A <em>provides</em> Package B when all of the files and
    functionality of B are incorporated into A.  This mechanism provides
    a way for users with constrained disk space to get only that part of
    package A which they really need.
</list>

<p>More detailed information on the use of each these terms can be found
in the Policy manual.

<sect id="pre-depends">What is meant by Pre-Depends?

<p>"Pre-Depends" is a special dependency. In the case of most packages,
<tt>dpkg</tt> will unpack its archive file (i.e., its <tt>.deb</tt> file)
independently of whether or not the files on which it depends exist on the
system.  Simplistically, unpacking means that <tt>dpkg</tt> will extract
the files from the archive file that were meant to be installed on your
file system, and put them in place.  If those packages <em>depend</em> on
the existence of some other packages on your system, <tt>dpkg</tt> will
refuse to complete the installation (by executing its "configure" action)
until the other packages are installed.

<p>However, for some packages, <tt>dpkg</tt> will refuse even to unpack
them until certain dependencies are resolved.  Such packages are said
to "Pre-depend" on the presence of some other packages.
The Debian project provided this mechanism to support the safe upgrading
of systems from <tt>a.out</tt> format to <tt>ELF</tt> format, where
the <em>order</em> in which packages were unpacked was critical. There are
other large upgrade situations where this method is useful, e.g. the
packages with the required priority and their LibC dependency.

<p>As before, more detailed information about this can be found in the
Policy manual.

<sect id="pkgstatus">What is meant by <em/unknown/, <em/install/, <em/remove/
  <em/purge/ and <em/hold/ in the package status?

<p>These "want" flags tell what the user wanted to do with a package (as
indicated either by the user's actions in the "Select" section of
<tt>dselect</tt>, or by the user's direct invocations of <tt>dpkg</tt>).

<p>Their meanings are:
<list>
  <item>unknown  - the user has never indicated whether he wants the package
  <item>install  - the user wants the package installed or upgraded
  <item>remove   - the user wants the package removed, but does not want to
    remove any existing configuration files.
  <item>purge    - the user wants the package to be removed completely,
    including its configuration files.
  <item>hold     - the user wants this package not to be processed, i.e., he
    wants to keep the current version with the current status whatever that is.
</list>

<sect id="puttingonhold">How do I put a package on hold?

<p>There are three ways of holding back packages, with dpkg, aptitude
or with dselect.

<p>With dpkg, you just have to export the list of package selections, with:
  <example>dpkg --get-selections \* > selections.txt</example>
Then edit the resulting file <file/selections.txt/, change the line
containing the package you wish to hold, e.g. <package/libc6/, from this:
  <example>libc6                                           install</example>
to this:
  <example>libc6                                           hold</example>
Save the file, and reload it into dpkg database with:
  <example>dpkg --set-selections < selections.txt</example>

<p>With aptitude, you can hold a package using
  <example>aptitude hold package_name</example>
   and remove the hold with
  <example>aptitude unhold package_name</example>

<p>With dselect, you just have to enter the [S]elect screen, find the
package you wish to hold in its present state, and press the `=' key (or
`H'). The changes will go live immediately after you exit the [S]elect
screen.

<sect id="sourcepkgs">How do I install a source package?

<p>Debian source packages can't actually be "installed", they are just
unpacked in whatever directory you want to build the binary packages they
produce.

<p>Source packages are distributed on most of the same mirrors where you can
obtain the binary packages. If you set up your APT's
<manref name="sources.list" section="5"> to include the appropriate
"deb-src" lines, you'll be able to easily download any source packages
by running

  <example>apt-get source foo</example>

<p>To help you in actually building the source package, Debian source
package provide the so-called build-dependencies mechanism. This means that
the source package maintainer keeps a list of other packages that are
required to build their package. To see how this is useful, run

  <example>apt-get build-dep foo</example>

before building the source.

<sect id="sourcebuild">How do I build binary packages from a source package?

<p>You will need all of foo_*.dsc, foo_*.tar.gz and foo_*.diff.gz to compile
the source (note: there is no .diff.gz for some packages that are native
to Debian).

<p>Once you have them (<ref id="sourcepkgs">), if you have the
<package/dpkg-dev/ package installed,
the following command:
  <example>dpkg-source -x foo_version-revision.dsc</example>
will extract the package into a directory called <tt>foo-version</tt>.

<p>If you want just to compile the package, you may cd into
<tt>foo-version</tt> directory and issue the command
  <example>dpkg-buildpackage -rfakeroot -b</example>
to build the package (note that this also requires the
<package/fakeroot/ package), and then
  <example>dpkg -i ../foo_version-revision_arch.deb</example>
to install the newly-built package(s).

<sect id="creatingdebs">How do I create Debian packages myself?

<p>For more detailed description on this, read the New Maintainers' Guide,
available in the <package/maint-guide/ package, or at
<url id="http://www.debian.org/doc/devel-manuals#maint-guide">.
