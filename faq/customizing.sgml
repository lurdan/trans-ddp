<chapt id="customizing">Customizing your installation of &debian;

<sect id="papersize">How can I ensure that all programs use the same
  paper size?

<P>The file <tt>/etc/papersize</tt> contains the name of the system-wide
default paper size (i.e. letter or A4). It can be overwritten using
the <tt>PAPERSIZE</tt> environment variable. For details see the
manual page <tt>papersize(5)</tt>.

<sect id="hardwareaccess">How can I provide access to hardware peripherals,
  without compromising security?

<P>Many device files in the <tt>/dev</tt> directory belong to some
predefined groups. For example, <tt>/dev/fd0</tt> belongs to the
<tt>floppy</tt> group, and <tt>/dev/dsp</tt> belongs to the
<tt>audio</tt> group.

<P>If you want a certain user to have access to one of these devices, just
add the user to the group the device belongs to (i.e. do
<example>adduser user group</example>). This way you won't have to chmod
the device file.

<sect id="consolefont">How do I load a console font on startup the Debian way?

<p>The <package/kbd/ and <package/console-tools/ packages support this,
edit <tt>/etc/kbd/config</tt> or <tt>/etc/console-tools/config</tt> files.

<sect id="appdefaults">How can I configure an X11 program's application
  defaults?

<p>Debian's X11 installation expects you to leave the files in
<tt>/usr/X11R6/lib/X11/app-defaults/</tt> unchanged. If you want to
customise X applications globally, put your customizations in
<tt>/etc/X11/Xresources</tt>. This file is marked as a configuration
file, so its contents will be preserved during upgrades.

<sect id="booting">Every distribution seems to have a different boot-up
  method.  Tell me about Debian's.

<P>Like all Unices, Debian boots up by executing the program <tt>init</tt>.
The configuration file for <tt>init</tt> (which is <tt>/etc/inittab</tt>)
specifies that the first script to be executed should
be <tt>/etc/init.d/rcS</tt>.  This script checks and mounts file systems,
loads modules, starts the network services
(by calling the script <tt>/etc/init.d/network</tt>),
sets the clock, performs other initialization, and then runs all of the
scripts (except those with a '.' in the filename) in <tt>/etc/rc.boot/</tt>.
The latter script sets the default keyboard, recovers lost editor files,
and configures the serial ports.

<p>After completing the boot process, <tt>init</tt> executes all start
scripts in a directory specified by the default runlevel (this runlevel
is given by the entry for <tt>id</tt> in <tt>/etc/inittab</tt>).
Like most
<!-- all? SGK -->
System V compatible Unices, Linux has 7 runlevels:
<list>
  <item>0 (halt the system),
  <item>1 (single-user mode),
  <item>2 through 5 (various multi-user modes), and
  <item>6 (reboot the system).
</list>
Debian systems come with id=2, which indicates that the default
runlevel will be '2' when the multi-user
state is entered, and the scripts in <tt>/etc/rc2.d/</tt> will be run.

<P>In fact, the scripts in any of the directories, <tt>/etc/rcN.d/</tt>
are just symbolic links back to scripts in <tt>/etc/init.d/</tt>.  However,
the <em>names</em> of the files in each of the <tt>/etc/rcN.d/</tt> directories
are selected to indicate the <em>way</em> the scripts in <tt>/etc/init.d/</tt>
will be run.  Specifically, before entering any
runlevel, all the scripts beginning with 'K' are run; these scripts kill
services.  Then all the scripts beginning with 'S' are run; these scripts
start services.  The two-digit number following the 'K' or 'S' indicates
the order in which the script is run.  Lower numbered scripts are executed
first.

<P>This approach works because the scripts in <tt>/etc/init.d/</tt> all
take an argument which can be either 'start', 'stop', or 'reload',
and will then do the task indicated by the argument.
For example, with the argument 'reload' the command
<tt>/etc/init.d/sendmail reload</tt> sends the sendmail daemon a
signal to reread its configuration file.
These scripts can be used even after a system
has been booted to control various processes.

<sect id="custombootscripts">It looks as if Debian does not use
  <tt>rc.local</tt> to customize the boot process; what facilities
  are provided?

<P>Suppose a system needs to execute script <tt>foo</tt> on start-up,
or on entry to a particular (System V) runlevel.  Then the system
administrator should:
<list>
  <item>Enter the script <tt>foo</tt> into the directory <tt>/etc/init.d/</tt>.
  <item>Run the Debian command <tt>update-rc.d</tt> with appropriate
  arguments, to set up links between the (command-line-specified) directories
  rc?.d and <tt>/etc/init.d/foo</tt>.  Here, '?' is a number from 0 through 6
  and corresponds to each of the System V runlevels.
  <item>Reboot the system.
</list>

<p>The command <tt>update-rc.d</tt> will set up links between files in
the directories rc?.d and the script in <tt>/etc/init.d/</tt>.
Each link will begin with a 'S' or a 'K', followed by a number, followed
by the name of the script.  Scripts beginning with 'S' in
<tt>/etc/rcN.d/</tt> are executed when runlevel <tt>N</tt> is entered.
Scripts beginning with a 'K' are executed when leaving runlevel <tt>N</tt>.

<p>One might, for example, cause the script <tt>foo</tt> to execute at
boot-up, by putting it in <tt>/etc/init.d/</tt> and installing the links with
<tt>update-rc.d foo defaults 19</tt>.  The argument 'defaults' refers
to the default runlevels, which are 2 through 5.  The argument '19' ensures
that <tt>foo</tt> is called before any scripts containing numbers 20
or larger.

<sect id="interconffiles">How does the package management system deal with
  packages that contain configuration files for other packages?

<P>Some users wish to create, for example, a new server by installing a
group of Debian packages and a locally generated package consisting of
configuration files.  This is not generally a good idea, because <tt>dpkg</tt>
will not know about those configuration files if they are in a different
package, and may write conflicting configurations when one of the
initial "group" of packages is upgraded.

<P>Instead, create a local package that modifies the configuration files
of the "group" of Debian packages of interest.  Then <tt>dpkg</tt> and the
rest of the package management system will see that the files have been
modified by the local "sysadmin" and will not try to overwrite them when
those packages are upgraded.

<!-- check against dpkg-divert description -->
<sect id="divert">How do I override a file installed by a package, so that
  a different version can be used instead?

<P>Suppose a sysadmin or local user wishes to use a program "login-local"
rather than the program "login" provided by the Debian <tt>login</tt> package.
Do <strong/not/:
<list>
  <item>Overwrite <tt>/bin/login</tt> with <tt>login-local</tt>.
</list>
The package management system will not know about this change, and will simply
overwrite your custom <tt>/bin/login</tt> whenever <tt>login</tt> (or any
package that provides <tt>/bin/login</tt>) is installed or updated.

<!-- XXX dpkg-divert: is this correct ? -->
Rather, do
<list>
  <item>Execute <tt>dpkg-divert --divert /bin/login.debian /bin/login</tt>
  in order to cause all future installations of the Debian <tt>login</tt>
  packages to write the file <tt>/bin/login</tt> to <tt>/bin/login.debian</tt>
  instead.
  <item>Then execute <tt>cp login-local /bin/login</tt> to move your own
  locally-built program into place.
</list>

Some details are given in the manual page <manref name="dpkg-divert"
section="8">. Additional details are given in the
<url name="Debian programmer's manual"
id="ftp://ftp.debian.org/debian/doc/package-developer/programmer.ps.gz">.

<sect id="localpackages">How can I have my locally-built package included in
  the list of available packages that the package management system knows
  about?

<P>You can do this in either of two ways:
<list>
  <item>Use <tt>dselect</tt>, and reselect the access method. You will be
  asked for a directory where your local packages reside.
  <item>Execute the command
  <tt>dpkg-scanpackages BIN_DIR OVERRIDE_FILE [PATHPREFIX] > Packages.new</tt>
  where:
  <list>
    <item>BIN-DIR is a directory where Debian archive files (which usually
    have an extension of ".deb") are stored.
    <item>OVERRIDE_FILE is a file that is edited by the distribution
    maintainers and is usually stored on a Debian FTP archive at
    <tt>indices/override.main.gz</tt> for the Debian packages in
    the "main" distribution. You can ignore this for local packages.
    <item>PATHPREFIX is an optional string that can be prepended to the
    Packages.new file being produced.
  </list>
  <item>Once you have built the file <tt>Packages.new</tt>, tell the package
  management system about it by using the command
  <tt>dpkg --update-avail Packages.new</tt>.
</list>

<sect id="diverse">Some users like mawk, others like gawk; some like vim,
  others like elvis; some like trn, others like tin; how does Debian
  support diversity?

<P>There are several cases where two packages provide two different versions
of a program, both of which provide the same core functionality.  Users
might prefer one over another out of habit, or because the user
interface of one package is somehow more pleasing than the interface of
another.  Other users on the same system might make a different choice.

<P>Debian uses a "virtual" package system to allow system administrators
to choose (or let users choose) their favorite tools when there are two
or more that provide the same basic functionality, yet satisfy package
dependency requirements without specifying a particular package.

<P>For example, there might exist two different versions of newsreaders on
a system.  The news server package might 'recommend' that there exist
<em>some</em> news reader on the system, but the choice of <tt>tin</tt>
or <tt>trn</tt> is left up to the individual user.  This is satisfied by
having both the <package/tin/ and <package/trn/ packages provide the
virtual package <package/news-reader/.  <em>Which</em> program is
invoked is determined by a link pointing from a file with the virtual
package name <tt>/etc/alternatives/news-reader</tt> to the selected file,
e.g., <tt>/usr/bin/trn</tt>.

<P>A single link is insufficient to support full use of an alternate
program; normally, manual pages, and possibly other supporting files
must be selected as well.  The Perl script <tt>update-alternatives</tt>
provides a way of ensuring that all the files associated with a specified
package are selected as a system default.

<!-- XXX update-alternatives details missing
Explain how to invoke the update-alternatives command.

Reminder:  this is the usage line for installing update-alternatives:
update-alternatives \-\-install link name path priority
link = link pointing to /etc/alternatives/name
name = name in /etc/alternatives/
path = the name referred to
priority = an integer; options with higher numbers are chosen.
-->
