<chapt id="customizing">Customizing your Installation of &debian;

<sect id="papersize">How can I ensure that all programs use the same
  paper size?

<p>Install the <package/libpaperg/ package, and it will ask you for a
system-wide default paper size. This setting will be kept in the file
<tt>/etc/papersize</tt>.

<p>Users can override the paper size setting using the <tt>PAPERSIZE</tt>
environment variable. For details, see the manual page
<manref name="papersize" section="5">.

<sect id="hardwareaccess">How can I provide access to hardware peripherals,
  without compromising security?

<p>Many device files in the <tt>/dev</tt> directory belong to some
predefined groups. For example, <tt>/dev/fd0</tt> belongs to the
<tt>floppy</tt> group, and <tt>/dev/dsp</tt> belongs to the
<tt>audio</tt> group.

<p>If you want a certain user to have access to one of these devices, just
add the user to the group the device belongs to, i.e. do:
  <example>adduser user group</example>
This way you won't have to change the file permissions on the device.

<sect id="consolefont">How do I load a console font on startup the Debian way?

<p>The <package/kbd/ and <package/console-tools/ packages support this,
edit <tt>/etc/kbd/config</tt> or <tt>/etc/console-tools/config</tt> files.

<sect id="appdefaults">How can I configure an X11 program's application
  defaults?

<p>Debian's X programs will install their application resource data in the
<tt>/etc/X11/app-defaults/</tt> directory. If you want to customize X
applications globally, put your customizations in those files. They are
marked as configuration files, so their contents will be preserved during
upgrades.

<sect id="booting">Every distribution seems to have a different boot-up
  method.  Tell me about Debian's.

<p>Like all Unices, Debian boots up by executing the program <tt>init</tt>.
The configuration file for <tt>init</tt> (which is <tt>/etc/inittab</tt>)
specifies that the first script to be executed should
be <tt>/etc/init.d/rcS</tt>.  This script checks and mounts file systems,
loads modules, starts the network services, sets the clock, performs other
initialization, and then runs all of the scripts (except those with a `.'
in the filename) in <tt>/etc/rc.boot/</tt>. Any scripts in the latter
directory are usually reserved for system administrator use, and using them
in packages is deprecated.

<p>After completing the boot process, <tt>init</tt> executes all start
scripts in a directory specified by the default runlevel (this runlevel
is given by the entry for <tt>id</tt> in <tt>/etc/inittab</tt>).
Like most <!-- all? SGK --> System V compatible Unices, Linux has 7 runlevels:
<list>
  <item>0 (halt the system),
  <item>1 (single-user mode),
  <item>2 through 5 (various multi-user modes), and
  <item>6 (reboot the system).
</list>
Debian systems come with id=2, which indicates that the default
runlevel will be '2' when the multi-user state is entered, and the
scripts in <tt>/etc/rc2.d/</tt> will be run.

<p>In fact, the scripts in any of the directories, <tt>/etc/rcN.d/</tt>
are just symbolic links back to scripts in <tt>/etc/init.d/</tt>.  However,
the <em>names</em> of the files in each of the <tt>/etc/rcN.d/</tt>
directories are selected to indicate the <em>way</em> the scripts in
<tt>/etc/init.d/</tt> will be run.  Specifically, before entering any
runlevel, all the scripts beginning with 'K' are run; these scripts kill
services.  Then all the scripts beginning with 'S' are run; these scripts
start services.  The two-digit number following the 'K' or 'S' indicates
the order in which the script is run.  Lower numbered scripts are executed
first.

<p>This approach works because the scripts in <tt>/etc/init.d/</tt> all
take an argument which can be either `start', `stop', `reload', `restart'
or `force-reload' and will then do the task indicated by the argument.
These scripts can be used even after a system has been booted, to control
various processes.

<p>For example, with the argument `reload' the command
  <example>/etc/init.d/sendmail reload</example>
sends the sendmail daemon a signal to reread its configuration file.

<sect id="custombootscripts">It looks as if Debian does not use
  <tt>rc.local</tt> to customize the boot process; what facilities
  are provided?

<p>Suppose a system needs to execute script <tt>foo</tt> on start-up,
or on entry to a particular (System V) runlevel.  Then the system
administrator should:
<list>
  <item>Enter the script <tt>foo</tt> into the directory <tt>/etc/init.d/</tt>.
  <item>Run the Debian command <tt>update-rc.d</tt> with appropriate
  arguments, to set up links between the (command-line-specified) directories
  rc?.d and <tt>/etc/init.d/foo</tt>.  Here, '?' is a number from 0 through 6
  and corresponds to each of the System V runlevels.
  <item>Reboot the system.
</list>

<p>The command <tt>update-rc.d</tt> will set up links between files in
the directories rc?.d and the script in <tt>/etc/init.d/</tt>.
Each link will begin with a 'S' or a 'K', followed by a number, followed
by the name of the script.  Scripts beginning with 'S' in
<tt>/etc/rcN.d/</tt> are executed when runlevel <tt>N</tt> is entered.
Scripts beginning with a 'K' are executed when leaving runlevel <tt>N</tt>.

<p>One might, for example, cause the script <tt>foo</tt> to execute at
boot-up, by putting it in <tt>/etc/init.d/</tt> and installing the links with
<tt>update-rc.d foo defaults 19</tt>.  The argument 'defaults' refers
to the default runlevels, which are 2 through 5.  The argument '19' ensures
that <tt>foo</tt> is called before any scripts containing numbers 20
or larger.

<sect id="interconffiles">How does the package management system deal with
  packages that contain configuration files for other packages?

<p>Some users wish to create, for example, a new server by installing a
group of Debian packages and a locally generated package consisting of
configuration files.  This is not generally a good idea, because <prgn/dpkg/
will not know about those configuration files if they are in a different
package, and may write conflicting configurations when one of the
initial "group" of packages is upgraded.

<p>Instead, create a local package that modifies the configuration files
of the "group" of Debian packages of interest.  Then <prgn/dpkg/ and the
rest of the package management system will see that the files have been
modified by the local "sysadmin" and will not try to overwrite them when
those packages are upgraded.

<!-- check against dpkg-divert description -->
<sect id="divert">How do I override a file installed by a package, so that
  a different version can be used instead?

<p>Suppose a sysadmin or local user wishes to use a program "login-local"
rather than the program "login" provided by the Debian <package/login/
package.

<p>Do <strong/not/:
<list>
  <item>Overwrite <tt>/bin/login</tt> with <tt>login-local</tt>.
</list>
The package management system will not know about this change, and will simply
overwrite your custom <tt>/bin/login</tt> whenever <tt>login</tt> (or any
package that provides <tt>/bin/login</tt>) is installed or updated.

<!-- XXX dpkg-divert: is this correct ? -->
<p>Rather, do
<list>
  <item>Execute:
    <example>dpkg-divert --divert /bin/login.debian /bin/login</example>
  in order to cause all future installations of the Debian <package/login/
  package to write the file <tt>/bin/login</tt> to <tt>/bin/login.debian</tt>
  instead.
  <item>Then execute:
    <example>cp login-local /bin/login</example>
  to move your own locally-built program into place.
</list>

<p>Details are given in the manual page <manref name="dpkg-divert" section="8">.

<sect id="localpackages">How can I have my locally-built package included in
  the list of available packages that the package management system knows
  about?

<p>Execute the command:

<example>
dpkg-scanpackages BIN_DIR OVERRIDE_FILE [PATHPREFIX] > my_Packages
</example>

<p>where:
  <list>
    <item>BIN-DIR is a directory where Debian archive files (which usually
    have an extension of ".deb") are stored.
    <item>OVERRIDE_FILE is a file that is edited by the distribution
    maintainers and is usually stored on a Debian FTP archive at
    <tt>indices/override.main.gz</tt> for the Debian packages in
    the "main" distribution. You can ignore this for local packages.
    <item>PATHPREFIX is an <em>optional</em> string that can be prepended
    to the <tt>my_Packages</tt> file being produced.
  </list>

<p>Once you have built the file <tt>my_Packages</tt>, tell the package
management system about it by using the command:

<example>
dpkg --merge-avail my_Packages
</example>

<p>If you are using APT, you can add the local repository to your
<manref name="sources.list" section="5"> file, too.

<sect id="diverse">Some users like mawk, others like gawk; some like vim,
  others like elvis; some like trn, others like tin; how does Debian
  support diversity?

<p>There are several cases where two packages provide two different versions
of a program, both of which provide the same core functionality.  Users
might prefer one over another out of habit, or because the user
interface of one package is somehow more pleasing than the interface of
another.  Other users on the same system might make a different choice.

<p>Debian uses a "virtual" package system to allow system administrators
to choose (or let users choose) their favorite tools when there are two
or more that provide the same basic functionality, yet satisfy package
dependency requirements without specifying a particular package.

<p>For example, there might exist two different versions of newsreaders on
a system.  The news server package might 'recommend' that there exist
<em>some</em> news reader on the system, but the choice of <tt>tin</tt>
or <tt>trn</tt> is left up to the individual user.  This is satisfied by
having both the <package/tin/ and <package/trn/ packages provide the
virtual package <package/news-reader/.  <em>Which</em> program is
invoked is determined by a link pointing from a file with the virtual
package name <tt>/etc/alternatives/news-reader</tt> to the selected file,
e.g., <tt>/usr/bin/trn</tt>.

<p>A single link is insufficient to support full use of an alternate
program; normally, manual pages, and possibly other supporting files
must be selected as well.  The Perl script <tt>update-alternatives</tt>
provides a way of ensuring that all the files associated with a specified
package are selected as a system default.

<p>For example, to check what executables provide `x-window-manager', run:
  <example>update-alternatives --display x-window-manager</example>
If you want to change it, run:
  <example>update-alternatives --config x-window-manager</example>
And follow the instructions on the screen (basically, press the number
next to the entry you'd like better).

<p>If a package doesn't register itself as a window manager for some reason
(file a bug if it's in error), or if you use a window manager from /usr/local
directory, the selections on screen won't contain your preferred entry.
You can update the link through command line options, like this:
  <example>update-alternatives --install /usr/bin/x-window-manager \
  x-window-manager /usr/local/bin/wmaker-cvs 50</example>

<p>The first argument to `--install' option is the symlink that points to
/etc/alternatives/NAME, where NAME is the second argument. The third argument
is the program to which /etc/alternatives/NAME should point to, and the
fourth argument is the priority (larger value means the alternative will more
probably get picked automatically).

<p>To remove an alternative you added, simply run:
  <example>update-alternatives --remove x-window-manager /usr/local/bin/wmaker-cvs</example>
