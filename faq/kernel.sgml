<!-- retain these comments for translator revision tracking -->
<!-- Original version: $Revision: 1.15 $ -->
<chapt id="kernel">Debian and the kernel

<sect id="non-debian-kernel">Can I install and compile a kernel without
  some Debian-specific tweaking?

<p>Yes.

<p>There's only one common catch: the Debian C libraries are built with the
most recent <em>stable</em> releases of the <strong>kernel</strong> headers.
If you happen to need to compile a program with kernel headers newer than
the ones from the stable branch, then you should either upgrade the package
containing the headers (<package/libc6-dev/), or use the new headers from an
unpacked tree of the newer kernel. That is, if the kernel sources are in
<file>/usr/src/linux</file>, then you should add 
<tt>-I/usr/src/linux/include/</tt> to your command line when compiling.

<sect id="customkernel">What tools does Debian provide to build custom
  kernels?

<p>Users who wish to (or must) build a custom kernel are encouraged to
download the package <package/kernel-package/.  This package contains
the script to build the kernel package, and provides the capability to
create a Debian <package>kernel-image-<var>version</var></package>
package just by running the command
  <example>make-kpkg kernel_image</example>
in the top-level kernel source directory.
Help is available by executing the command
  <example>make-kpkg --help</example>
and through the manual page <manref name="make-kpkg" section="1">.

<p>Users must separately download the source code for the most recent
kernel (or the kernel of their choice) from their favorite Linux archive
site, unless a <package>kernel-source-<var>version</var></package> package
is available (where <var>version</var>
stands for the kernel version).

<p>Detailed instructions for using the <package/kernel-package/ package
are given in the file <file>/usr/share/doc/kernel-package/README.gz</file>. Briefly,
one should:

<list>
  <item>Unpack the kernel sources, and <tt>cd</tt> to the newly created
    directory.
  <item>Modify the kernel configuration using one of these commands:
    <list>
      <item><tt>make config</tt>  (for a text-based interface).
      <item><tt>make menuconfig</tt>  (for an ncurses-based menu driven interface).
        Note that to use this option, the <package/libncurses5-dev/ package
        must be installed.
      <item><tt>make xconfig</tt>  (for an X11 interface).
        Using this option requires that relevant X and Tcl/Tk packages be
        installed.
    </list>
    Any of the above steps generates a new <tt>.config</tt> in the top-level
    kernel source directory.
    <!-- FIXME: make-kpkg and dpkg require both root permission!!? -->
  <item>Execute the command: <tt>make-kpkg -rev Custom.<var>N</var> kernel_image</tt>,
    where <var>N</var> is a revision number assigned by the user.
    The new Debian archive thus formed would have revision Custom.<var>N</var>, e.g.,
    <tt>kernel-image-2.2.14_Custom.1_i386.deb</tt>
    for the Linux kernel 2.2.14 on i386.
  <item>Install the package created.
    <list>
    <!-- FIXME: or linux-image! -->
    <item>Run <tt>dpkg --install ../kernel-image-<var>VVV</var>_Custom.<var>N</var>_i386.deb</tt>
      to install the kernel itself.  The installation script will:
      <list>
	<!-- FIXME: really? -->  
        <item>run the boot loader (grub, LILO or some other) if needed,
	<!-- FIXME: for 2.6.16 there is no -Custom.N suffix! -->
        <item>install the custom kernel in /boot/vmlinuz_<var>VVV</var>-Custom.<var>N</var>, and
          set up appropriate symbolic links to the most recent kernel version.
	<!-- FIXME: really? -->  
        <item>prompt the user to make a boot floppy.  This boot floppy will
          contain the raw kernel only.  See <ref id="custombootdisk">.
      </list>
    <item>To employ secondary boot loaders such as <prgn/loadlin/, copy this
      image to other locations (e.g. to an <tt>MS-DOS</tt> partition).
  </list>
</list>

<!-- TODO: check out a new source of details, this README isn't too useful,
I'm told (joy)
FIXME: completely out of date! -->
<sect id="custombootdisk">How can I make a custom boot floppy?

<p>This task is greatly aided by the Debian package <package/boot-floppies/,
normally found in the <tt>admin</tt> section of the Debian FTP archive.
Shell scripts in this package produce boot floppies in the <tt>SYSLINUX</tt>
format.  These are <tt>MS-DOS</tt> formatted floppies whose master boot
records have been altered so that they boot Linux directly (or whatever
other operating system has been defined in the <file>syslinux.cfg</file> file on the
floppy). Other scripts in this package produce emergency root disks and
can even reproduce the base disks.

<p>You will find more information about this in the
<file>/usr/share/doc/boot-floppies/README</file> file after installing the
<package/boot-floppies/ package.

<sect id="modules">What special provisions does Debian provide to deal with
  modules?

<p>Debian's <package/modconf/ package provides a shell script
(<file>/usr/sbin/modconf</file>) which can be used to customize the
configuration of modules.  This script presents a menu-based interface,
prompting the user for particulars on the loadable device drivers
in his system.  The responses are used to customize the file
<file>/etc/modules.conf</file> (which lists aliases, and other arguments that
must be used in conjunction with various modules) through files in
<file>/etc/modutils/</file>, and <file>/etc/modules</file> (which lists the
modules that must be loaded at boot time).

<p>Like the (new) <file>Configure.help</file> files that are now available to support
the construction of custom kernels, the <package>modconf</package> package comes with a
series of help files (in <file>/usr/lib/modules_help/</file>) which provide
detailed information on appropriate arguments for each of the modules.

<sect id="removeoldkernel">Can I safely de-install an old kernel package,
  and if so, how?

<p>Yes.  The <prgn>kernel-image-<var>NNN</var>.prerm</prgn> script checks to see whether
the kernel you are currently running is the same as the kernel you are trying
to de-install.  Therefore you can remove unwanted kernel image packages using
this command:

<example>dpkg --purge --force-remove-essential kernel-image-<var>NNN</var></example>

(replace <var>NNN</var> with your kernel version and revision number, of course)
