<chapt id="kernel">Debian and the kernel

<sect id="custker">What tools does Debian provide to build custom kernels?

<p>Users who wish to (or must) build a custom kernel are encouraged to
download the package <package/kernel-package/ (it is stored in section
<tt>misc</tt> at the Debian FTP archives).  This package contains
the script to build the kernel package, and provides the capability to
create a Debian kernel-image package just by running the command
<tt>make-kpkg kernel_image</tt> in the top-level kernel source directory.
Help is available by executing the command <tt>make-kpkg --help</tt>,
and through the manual page <manref name="make-kpkg" section="8">.

<p>Users must separately download the source code for the most recent
kernel (or the kernel of their choice) from their favorite Linux archive
site.

<p>Detailed instructions for using the <package/kernel-package/ package
are given in the file <tt>/usr/doc/kernel-package/README</tt>. Briefly,
one should:

<list>
  <item>Unpack the kernel sources, and <tt>cd</tt> to the newly created
    directory.
  <item>Modify the kernel configuration using one of these commands:
    <list>
      <item><tt>make config</tt>  (for a tty one-line-at-a-time-interface).
      <item><tt>make menuconfig</tt>  (for an ncurses-based menu driven interface).
        Note that to use this option, the <tt>libncurses5-dev</tt> package
        must be installed.
      <item><tt>make xconfig</tt>  (for an X11 interface).
        Using this option requires that relevant X and Tcl/Tk packages be
        installed.
    </list>
    Any of the above steps generates a new <tt>.config</tt> in the top-level
    kernel source directory.
  <item>Execute the command: <tt>make-kpkg -rev Custom.N kernel_image</tt>,
    where N is a revision number assigned by the user.
    The new Debian archive thus formed would have revision Custom.1, e.g.,
    <tt>kernel-image-2.2.14_Custom.1_i386.deb</tt>
    for the Linux kernel 2.2.14.
  <item>Install the package created.
    <list>
    <item><tt>Run dpkg --install /usr/src/kernel-image-VVV_Custom.N.deb</tt>
      to install the kernel itself.  The installation script will:
      <list>
        <item>run the boot loader, LILO (if it is installed),
        <item>install the custom kernel in /boot/vmlinuz_VVV-Custom.N, and
          set up appropriate symbolic links to the most recent kernel version.
        <item>prompt the user to make a boot floppy.  This boot floppy will
          contain the raw kernel only.  See <ref id="cusboot">.
      </list>
    <item>To employ a secondary boot loaders (e.g., <tt>loadlin</tt>), copy
      this image to other locations (e.g., an <tt>MS-DOS</tt> partition).
  </list>
</list>

<sect id="cusboot">How can I make a custom boot floppy?

<p>This task is greatly aided by the Debian package <package/boot-floppies/,
normally found in the <tt>admin</tt> section of the Debian FTP archive.
Shell scripts in this package produce boot floppies in the <tt>SYSLINUX</tt>
format.  These are <tt>MS-DOS</tt> formatted floppies whose master boot
records have been altered so that they boot Linux directly (or whatever
other operating system has been defined in the syslinux.cfg file on the
floppy). Other scripts in this package produce emergency root disks and
can even reproduce the base disks.

<p>You will find more information about this in the
<tt>/usr/doc/boot-floppies/README</tt> file after installing the
<package/boot-floppies/ package.

<sect>What special provisions does Debian provide to deal with modules?

<p>Debian's <tt>modconf</tt> package provides a shell script
(<tt>/usr/sbin/modconf</tt>) which can be used to customize the
configuration of modules.  This script presents a menu-based interface,
prompting the user for particulars on the loadable device drivers
in his system.  The responses are used to customize the file
<tt>/etc/modules.conf</tt> (which lists aliases, and other arguments that
must be used in conjunction with various modules) through files in
<tt>/etc/modutils/</tt>, and <tt>/etc/modules</tt> (which lists the
modules that must be loaded at boot time).

<p>Like the (new) Configure.help files that are now available to support
the construction of custom kernels, the modconf package comes with a
series of help files (in <tt>/usr/lib/modules_help/</tt>) which provide
detailed information on appropriate arguments for each of the modules.

<sect id="removeoldkernel">Can I safely de-install an old kernel, and
  if so, how?

<p>Yes.  The <tt>kernel-image-NNN.prerm</tt> script checks to see whether
the kernel you are currently running is the same as the kernel you are trying
to de-install.  Therefore you can remove unwanted kernel image packages using
this command:

<example>dpkg --purge --force-remove-essential kernel-image-NNN</example>

(replace "NNN" with your kernel version and revision number, of course)
