<chapt id="pkgtools">The Debian Package Management Tools

<sect id="pkgprogs">What program(s) does Debian provide for managing
  its packages?

<sect1 id="dpkg">dpkg

<p>This is the main package management program. <tt>dpkg</tt> can be
invoked with many options.  Some common uses are:
<list>
  <item>Find out all the options:  <tt>dpkg --help</tt>.
  <item>Print out the control file (and other information) for a specified
    package: <tt>dpkg --info foo_VVV-RRR.deb</tt>
  <item>Install a package (including unpacking and configuring) onto the
    file system of the hard disk: <tt>dpkg --install foo_VVV-RRR.deb</tt>.
  <item>Unpack (but do not configure) a Debian archive into the file system
    of the hard disk: <tt>dpkg --unpack foo_VVV-RRR.deb</tt>.  Note that this
    operation does <em>not</em> necessarily leave the package in a usable
    state; some files may need further customization to run properly.
    This command removes any already-installed version of the program and
    runs the preinst (see <ref id="maintscripts">) script associated with
    the package.
  <item>Configure a package that already has been unpacked:
    <tt>dpkg --configure foo</tt>.  Among other things, this action runs the
    postinst (see <ref id="maintscripts">) script associated with the package.
    It also updates the files listed in the <tt>conffiles</tt> for this
    package. Notice that the 'configure' operation takes as its argument a
    package name (e.g., foo), <em/not/ the name of a Debian archive file
    (e.g., foo_VVV-RRR.deb).
  <item>Extract a single file named "blurf" (or a group of files
    named "blurf*" from a Debian archive:
    <tt>dpkg --fsys-tarfile foo_VVV-RRR.deb | tar -xf - blurf*</tt>
  <item>Remove a package (but not its configuration files):
    <tt>dpkg --remove foo</tt>.
  <item>Remove a package (including its configuration files):
    <tt>dpkg --purge foo</tt>.
  <item>List the installation status of packages containing the string
    (or regular expression) "foo*": <tt>dpkg --list 'foo*'</tt>.
</list>

<sect1 id="dselect">dselect

<p>This program is a menu-driven interface to the Debian package management
system.  It is particularly useful for first-time installations and
large-scale upgrades.

<p><tt>dselect</tt> can:
<list>
  <item>guide the user as he/she chooses among packages to install or remove,
    ensuring that no packages are installed that conflict with one another,
    and that all packages required to make each package work properly are
    installed;
  <item>warn the user about inconsistencies or incompatibilities in their
    selections;
  <item>determine the order in which the packages must be installed;
  <item>automatically perform the installation or removal; and
  <item>guide the user through whatever configuration process are required
    for each package.
</list>

<p><tt>dselect</tt> begins by presenting the user with a menu of 7 items,
each of which is a specific action. The user can select one of the actions
by using the arrow keys to move the highlighter bar, then pressing the
<em>&lt;enter&gt;</em> key to select the highlighted action.

<p>What the user sees next depends on the action he selected.  If he selects
any option but <tt>Access</tt> or <tt>Select</tt>, then <tt>dselect</tt>
will simply proceed to execute the specified action: e.g., if the user
selected the action <tt>Remove</tt>, then dselect would proceed to remove
all of the files selected for removal when the user last chose the
<tt>Select</tt> action.

<p>Both the <tt>Access</tt> menu item and the <tt>Select</tt> menu item
lead to additional menus.  In both cases, the menus are presented as
split screens; the top screen gives a scrollable list of choices, while
the bottom screen gives a brief explanation ("info") for
each choice.

<p>Extensive on-line help is available, use the '?' key to get to a help
screen at any time.

<p>The order in which the actions are presented in the first <tt>dselect</tt>
menu represents the order in which a user would normally choose
<tt>dselect</tt> to install packages.  However, a user can pick any of the
main menu choices as often as needed (including not at all, depending on
what one wants to do).

<list>
  <item>Begin by choosing an "Access Method".  This is the
    method by which the user plans on accessing Debian packages; e.g., some
    users have Debian packages available on CD-ROM, while others plan to
    fetch them using anonymous FTP. The selected "Access Method" is stored
    after <tt>dselect</tt> exits, so if it does not change, then this option
    need not be invoked again.

  <item>Then "Update" the list of available packages.  To do this,
    <tt>dselect</tt> reads the file "Packages.gz" which should be included
    in the top level of the directory where the Debian packages to be
    installed are stored.  (But if it is not there, <tt>dselect</tt> will
    offer to make it for you.)

  <item><tt>Select</tt> specific packages for installation on his system.
    After choosing this menu item, the user is first presented with a full
    screen of help (unless the `--expert' commandline option was used).
    Once the user exits the Help screen, he sees the split-screen menu for
    choosing packages to install (or remove).
    The top screen is a relatively narrow window into the list of Debian's
    &all-pkgs; packages; the bottom screen is a window into "info" about
    the package or group of packages which are highlighted in the top.

    <p>First-time users are often confused by these aspects of the
    <tt>Select</tt> screen:
    <list>
      <item>"Deselecting" a packages:
        One can specify which packages should be removed (previously
        called "deselecting" an item) by highlighting a package name or
        the label for a group of packages (e.g., "All") and then pressing
        either:
         <list>
           <item>the '-' key.  This removes most of the files associated
             with the package, but preserves the files listed as
             configuration files (see <ref id="conffile">) and other
             configuration information.
           <item>the '_' key.  This removes <em>every</em> file that is
             part of the package.
         </list>
        Note that if you "deselect" "All Packages" your system will be
        reduced to the initial installed base packages.  This is probably
        what you wanted.
      <item>Putting a package "on hold" (by pressing '='):
        This effectively tells <tt>dselect</tt> not to upgrade a package
        even if the version currently installed on your system is not as
        recent as the version that is available in the Debian repository you
        are using (this was specified when you set the <tt>Access
        Method</tt>).  (The version that is available in the repository is
        given in the file <tt>Packages.gz</tt> that is read when the
        "Update" menu choice is activated.)
      <item>Putting a package on "unhold" (by pressing ':'):
        This is the default, and means that the packages will be upgraded
        if a newer version is available.
      <item>The order in which the packages are presented:
        The default order is to present packages by Priority; within each
        priority, packages are presented in order of the directory (a.k.a.
        section) of the archive in which they are stored.  Given this sort
        order, some packages in section A (say) may be presented first,
        followed by some packages in section B, followed by more packages
        (of lower priority) in section A.  Users can select a different
        presentation order by using the 'o' key to cycle between various
        options for sorting the packages.
      <item>Meanings of the labels at the top of the screen:
        The labels at the top can be expanded by using the 'v' (verbose)
        key.  This action pushes much of the text that formerly fit onto the
        display off to the right.  To see it, press the right arrow; to
        scroll back to the left, press the left arrow.
      <item>What to do with a package conflict/dependency screen:
        If a user selects (for installation or removal) a package, e.g.,
        <tt>foo.deb</tt> that depends on or recommends another package,
        e.g., <tt>blurf.deb</tt>, then <tt>dselect</tt> will place the user
        in a sub-screen of the main selection screen.
        <p>The user can choose among the related packages, accepting the
        suggested actions (to install or not), or rejecting them.  To do the
        latter, press SHIFT-D; to return to the former, press SHIFT-U.  In
        any case, the user can save his selections and return to the main
        selection screen by pressing SHIFT-Q.
    </list>

  <item>Users returning to the main menu can then select the "Install"
    menu item to unpack and configure the selected packages.
    Alternatively, users wishing to remove files can choose the "Remove"
    menu item.  At any point, users can choose "Quit" to exit dselect;
    users' selections are preserved by <tt>dselect</tt>.
</list>

<sect1 id="dpkg-deb">dpkg-deb

<p>This program manipulates Debian archive(<tt>.deb</tt>) files.
Some common uses are:
<list>
  <item>Find out all the options:  <tt>dpkg-deb --help</tt>.
  <item>Determine what files are contained in a Debian
    archive file:  <tt>dpkg-deb --contents foo_VVV-RRR.deb</tt>)
  <item>Extract the files contained in a named Debian archive into a
    user specified directory:  <tt>dpkg-deb --extract foo_VVV-RRR.deb tmp</tt>
    extracts each of the files in <tt>foo_VVV-RRR.deb</tt> into the
    directory <tt>tmp/</tt>.  This is convenient for examining the contents
    of a package in a localized directory, without installing the package
    into the root file system.
</list>

<p>More information is given in the manual page <manref name="dpkg-deb"
section="1">.

<sect1 id="dpkg-split">dpkg-split

<p>This program splits large package into smaller files (e.g., for writing
onto a set of floppy disks), and can also be used to merge a set of split
files back into a single file. It can only be used on a Debian system (i.e.
a system containing the <package/dpkg/ package), since it calls the program
<tt>dpkg-deb</tt> to parse the debian package file into its component records.

<p>For example, to split a big .deb file into N parts,
<list>
  <item>Execute the command <tt>dpkg-split --split foo.deb</tt>.
    This will produce N files each of approximately 460 KBytes long in the
    current directory.
  <item>Copy those N files to floppy disks.
  <item>Copy the contents of the floppy disks onto the hard disk of your
    choice on the other machine.
  <item>Join those part-files together using <tt>dpkg-split --join "foo*"</tt>.
</list>

<sect id="updaterunning">Debian claims to be able to update a running program;
  how is this accomplished?

<p>&debian; provides a program called the <tt>start-stop-daemon</tt> which
is used by installation scripts to start daemons at boot time or to stop
daemons when the kernel runlevel is changed (e.g., from multi-user to
single-user or to halt). The <tt>start-stop-daemon</tt> command is also used
when a new package containing a daemon is installed, to stop running daemons,
and restart them as necessary, e.g., when a package is being installed with
an updated configuration script.

<sect id="whatpackages">How can I tell what packages are already installed
  on a Debian system?

<p>To learn the status of all the packages installed on a Debian system,
execute the command <tt>dpkg --list</tt>.  This prints out a one-line
summary for each package, giving a 2-letter status symbol, the package
name, the version which is <em>installed</em>, and a very brief description.

<p>To learn the status of packages whose names match the string any pattern
beginning with "foo" by executing the command
<tt>dpkg --list 'foo*'</tt>

<p>To get a more verbose report for a particular package, execute the
command:  <tt>dpkg --status foo</tt>.

<sect id="filesearch">How can I find out what package produced a particular
  file?

<p>To identify the package that produced the file named <tt>foo</tt> execute
either:

<list>
  <item><tt>dpkg --search filename</tt>
    <p>This searches for <tt>filename</tt> in installed packages.
    (This is (currently) equivalent to searching all of the files having the
    file extension of <tt>.list</tt> in the directory
    <tt>/var/lib/dpkg/info/</tt>, and adjusting the output to print the names
    of all the packages containing it, and diversions.)

  <item><tt>zgrep foo Contents-ARCH.gz</tt>
    <p>This searches for files which contain the substring <tt>foo</tt>
    in their full path names.  The files <tt>Contents-ARCH.gz</tt> (where ARCH
    represents the wanted architecture) reside in the major package directories
    (main, non-free, contrib) at a Debian FTP site.  A <tt>Contents</tt> file
    refers only to the packages in the subdirectory tree where it resides.
    Therefore, a user might have to search more than one <tt>Contents</tt>
    files to find the package containing the file <tt>foo</tt>.

    <p>This method has the advantage over <tt>dpkg --search</tt> in that it
    will find files in packages that are not currently installed on your
    system.
</list>
