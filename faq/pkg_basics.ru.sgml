<chapt id="pkg_basics">Основы системы управления пакетами Debian

<sect id="package">Что такое пакет Debian?

<p>Пакеты обычно содержат все файлы, необходимые для реализации набора команд
или возможностей. Существкет два типа пакетов Debian:
<list>
  <item><em>Бинарные пакеты</em>, которые содержат бинарные файлы, файлы
  настроек, страницы man/info, информацию об авторских правах и прочую 
  документацию. Эти пакеты распространяются в специальном Debian-формате
  (см. <ref id="deb-format">); обычно их можно узнать по расширению '.deb'
  имени файла. Бинарные пакеты могут быть распакованы утилитой Debian
  <tt>dpkg</tt>; подробности изложены в соответствующей странице руководства.
  
  <item><em>Пакеты исходных текстов</em>, которые состоят из файла 
  <tt>.dsc</tt>, описывающего пакет исходных текстов (включая имена
  следующих файлов), файл <tt>.orig.tar.gz</tt>, который содержит оригинальный
  неизмененный исходный код в формате tar, сжатом компрессором gzip и, обычно,
  файл <tt>.diff.gz</tt>, который содержит Debian-специфичные изменения в
  оригинальном исходном коде. Утилита <tt>dpkg-source</tt> запаковывает и
  распаковывает архивы исходных текстов Debian; подробности изложены в 
  соответствующей странице руководства.
</list>

<p>При инсталляции ПО пакетная система использует "зависимости", которые
внимательно определяются ведущими пакетов. Эти зависимости указываются в файле
<tt>control</tt> каждого пакета. Например, пакет, содержащий компилятор GNU C 
(<package/gcc/) "зависит" от пакета <package/binutils/, который включает
линкер и ассемблер. Если пользователь попытается установить <package/gcc/ без
предварительно установленного <package/binutils/, то систему управления 
пакетами (dpkg) выдаст сообщение об ошибке, что нужен <package/binutils/ и
прервет установку <package/gcc/. (Однако искушенный пользователь может обойти
это, см. <manref name="dpkg" section="8">.)  Подробнее этот вопрос обсуждается
ниже в <ref id="depends"> .

<p>Утилиты системы управления пакетами Debian используются для:
<list>
  <item>манипулирования и управления пакетами или частями пакетов,
  <item>разбивки пакетов на части, чтобы пользователь мог переносить
    пакеты на малоемкостных носителях, таких как дискеты,
  <item>конструирования разработчиками архивов пакетов, и
  <item>установки пакетов, размещенных на удаленных FTP-сайтах.
</list>

<sect id="deb-format">Какой формат имеет бинарный архив Debian?

<p>"Пакет" Debian, или архивынй файл Debian, содержит выполняемые файлы, 
библиотеки и документацию, связанные с особым набором программ. Обычно,
файл архива Debian имеет имя, оканчивающееся на <tt>.deb</tt>.

<p>Внутреннее устройство формата этого бинарного пакета Debian описано в
странице руководства <manref name="deb" section="5">. Внутренний формат может
иземняться (от выпуска к выпуску &debian;), поэтому, пожалуйста, всегда
пользуйтесь <manref name="dpkg-deb" section="8"> для работы с <tt>.deb</tt>
файлами.

<sect id="pkgname">Почему имена файлов пакетов Debian такие длинные? 

<p>Имена файлов бинарных пакетов Debian подчиняются следующему соглашению
&lt;foo&gt;_&lt;НомерВерсии&gt;-&lt;НомерВыпускаDebian&gt;.deb

<p>Обратите внимание, что <tt>foo</tt> - является именем пакета. К сведению,
каждый может узнать имя пакета, связанное с определенным файлом архива Debian
(файлом .deb) одним их этих способов:
<list>
  <item>посмотреть файл "Packages" в каталоге, где он хранится на сайте
  Debian FTP архива. Этот файл содержит записи, описывающие каждый пакет;
  первое поле каждой записи - это формальное имя пакета.
  <item>использовать команду <tt>dpkg --info foo_VVV-RRR.deb</tt> (где VVV и
  RRR - это соответственно версия и выпуск искомого пакета). Команда отобразит,
  помимо других вещей, имя пакета, соответствующее распаковываемому файлу
  архива.
</list>

<p>The <tt>VVV</tt> component is the version number specified by the
upstream developer.  There are no standards in place here, so the version
number may have formats as different as "19990513" and "1.3.8pre1".

<p>The <tt>RRR</tt> component is the Debian revision number, and is
specified by the Debian developer (or an individual user if he chooses
to build the package himself).  This number corresponds to the revision
level of the Debian package, thus, a new revision level usually signifies
changes in the Debian Makefile (<tt>debian/rules</tt>), the Debian control
file (<tt>debian/control</tt>), the installation or removal scripts
(<tt>debian/p*</tt>), or in the configuration files used with the package.

<!--
<p>The <tt>Arch</tt> component identifies the processor for which
the package was built.  This is commonly <tt>i386</tt>, которые refers to
chips compatible to Intel's 386 or later versions.  For other
possibilities see <ref id="dirtree" name="Debian's FTP directory structure">.
-->

<sect id="controlfile">What is a Debian control file?

<p>Specifics regarding the contents of a Debian control file are provided
in the Debian Packaging manual, chapter 4, see <ref id="debiandocs">.

<p>Briefly, a sample control file is shown below for the Debian package hello:
<example>
Package: hello
Priority: optional
Section: devel
Installed-Size: 45
Maintainer: Adam Heath &lt;doogie@debian.org&gt;
Architecture: i386
Version: 1.3-16
Depends: libc6 (>= 2.1)
Description: The classic greeting, and a good example
 The GNU hello program produces a familiar, friendly greeting.  It
<!-- XXX below 'non-programmers' were better, but this is a verbatim copy -->
 allows nonprogrammers to use a classic computer science tool which
 would otherwise be unavailable to them.
 .
 Seriously, though: this is an example of how to do a Debian package.
 It is the Debian version of the GNU Project's `hello world' program
 (which is itself an example for the GNU Project).
</example>

<p>The Package field gives the package name.  This is the name by which the
package can be manipulated by the package tools, and usually similar
to but not necessarily the same as the first component string in the
Debian archive file name.

<p>The Version field gives both the upstream developer's version number
and (in the last component) the revision level of the Debian package of
this program as explained in <ref id="pkgname">. <!-- XXX missing name -->

<p>The Architecture field specifies the chip for which this particular
binary was compiled.

<p>The Depends field gives a list of пакеты that have to be
installed in order to install this package successfully.

<p>The Installed-Size indicates how much disk space the installed package
will consume. This is intended to be used by installation front-ends in
order to show whether there is enough disk space available to install the
program .

<p>The Section line gives the "section" where this Debian package is stored
at the Debian FTP sites.  This is the name of a subdirectory (within one
of the main directories, see <ref id="dirtree">) where the package is stored.

<p>The Priority indicates how important is this package for installation, so
that semi-intelligent software like dselect or console-apt can sort the
package into a category of e.g. пакеты optionally installed. See
<ref id="priority">.

<p>The Maintainer field gives the e-mail address of the person who is
currently responsible for maintaining this package.

<p>The Description field gives a brief summary of the package's features.

<p>For more information about all possible fields a package can have, please
see the Debian Packaging Manual, section 4., "Control files and their fields".

<sect id="conffile">What is a Debian conffile?

<p>Conffiles is a list of configuration files (usually placed in <tt>/etc</tt>)
that the package management system will not overwrite when the package is
upgraded. This ensures that local values for the contents of these files
will be preserved, and is a critical feature enabling the in-place upgrade
of пакеты on a running system.

<p>To determine exactly which files are preserved during an upgrade, run:
  <example>dpkg --status package</example>
And look under "Conffiles:".

<sect id="maintscripts">What is a Debian preinst, postinst, prerm, and postrm
  script?

<p>These files are executable scripts which are automatically run before
or after a package is installed. Along with a file named <tt>control</tt>,
all of these files are part of the "control" section of a Debian archive file.

<p>The individual files are:
<taglist>
<tag/preinst/
  <item>This script executes before that package will be unpacked from its
  Debian archive (".deb") file. Many 'preinst' scripts stop services for
  пакеты which are being upgraded until their installation or upgrade is
  completed (following the successful execution of the 'postinst' script).

<tag/postinst/
  <item>This script typically completes any required configuration of the
  package <tt>foo</tt> once <tt>foo</tt> has been unpacked from its Debian
  archive (".deb") file. Often, 'postinst' scripts ask пользователь for input,
  and/or warn пользователь that if he accepts default values, he should remember
  to go back and re-configure that package as the situation warrants.
  Many 'postinst' scripts then execute any commands necessary to start or
  restart a service once a new package has been installed or upgraded.

<tag/prerm/
  <item>This script typically stops any daemons which are associated with
  a package.  It is executed before the removal of files associated with
  the package.

<tag/postrm/
  <item>This script typically modifies links or other files associated with
  <tt>foo</tt>, and/or removes files created by the package. (Also see
  <ref id="virtual">.)
</taglist>

<p>Currently all of the control files can be found in directory
<tt>/var/lib/dpkg/info</tt>. The files relevant to package <tt>foo</tt>
begin with the name "foo" and have file extensions of "preinst", "postinst",
etc., as appropriate.  The file <tt>foo.list</tt> in that directory
lists all of the files that were installed with the package <tt>foo</tt>.
(Обратите внимание, that the location of these files is a dpkg internal; you should not
rely on it.)

<sect id="priority">What is a Required/Important/Standard/Optional/Extra
package?

<p>Each Debian package is assigned a <em>priority</em> by the distribution
maintainers, as an aid to the package management system.  The priorities are:

<list>
  <item><strong>Required</strong>: пакеты that are necessary for the proper
    functioning of the system.
    <p>This includes all tools that are necessary to repair system defects.
    You must not remove these пакеты or your system may become totally broken
    and you may probably not even be able to use dpkg to put things back.
    Systems with only the Required пакеты are probably unusable, but they do
    have enough functionality to allow the sysadmin to boot and install more
    software.
  <item><strong>Important</strong> пакеты should be found on any Unix-like
    system.
    <p>Other пакеты which the system will not run well or be usable without
    will be here. This does <em>NOT</em> include Emacs or X11 or TeX or any
    other large applications. These пакеты only constitute the bare
    infrastructure.
  <item><strong>Standard</strong> пакеты are standard on any Linux system,
    including a reasonably small but not too limited character-mode system.
    <p>This is what will install by default if users do not select anything
    else. It does not include many large applications, but it does include
    Emacs (this is more of a piece of infrastructure than an application)
    and a reasonable subset of TeX and LaTeX (if this turns out to be
    possible without X).
  <item><strong>Optional</strong> пакеты include all those that you might
    reasonably want to install if you did not know what it was, or do not
    have specialized requirements.
    <p>This includes X11, a full TeX distribution, and lots of applications.
  <item><strong>Extra</strong>: пакеты that either conflict with others
    with higher priorities, are only likely to be useful if you already know
    what they are, or have specialized requirements that make them
    unsuitable for "Optional".
</list>

<sect id="virtual">What is a Virtual Package?

<p>A virtual package is a generic name that applies to any one of a group
of пакеты, all of which provide similar basic functionality. For example,
both the <tt>tin</tt> and <tt>trn</tt> programs are news readers, and
should therefore satisfy any dependency of a program that required a news
reader on a system, in order to work or to be useful.
They are therefore both said to provide the "virtual package" called
<tt>news-reader</tt>.

<p>Similarly, <tt>smail</tt> and <tt>sendmail</tt> both provide the
functionality of a mail transport agent.  They are therefore said to
provide the virtual package, "mail transport agent".
If either one is installed, then any program depending on the
installation of a <tt>mail-transport-agent</tt> will be satisfied by
the existence of this virtual package.

<p>Debian provides a mechanism so that, if more than one package which
provide the same virtual package is installed on a system, then system
administrators can set one as the preferred package. The relevant command
is <tt>update-alternatives</tt>, and is described further in
<ref id="diverse">.

<sect id="depends">What is meant by saying that a package
  Depends/Recommends/Suggests/Conflicts/Replaces/Provides another package?

<p>The Debian package system has a range of package "dependencies"
which are designed to indicate (in a single flag) the level at which
Program A can operate independently of the existence of Program B on
a given system:
<list>
  <item>Package A <em>depends</em> on Package B if B absolutely must
    be installed in order to run A.  In some cases, A depends not only
    on B, but on a version of B.  In this case, the version dependency is
    usually a lower limit, in the sense that A depends on any version
    of B more recent than some specified version.
  <item>Package A <em>recommends</em> Package B, if the package maintainer
    judges that most users would not want A without also having the
    functionality provided by B.
  <item>Package A <em>suggests</em> Package B if B contains files that
    are related to (and usually enhance) the functionality of A.
  <item>Package A <em>conflicts</em> with Package B when A will not
    operate if B is installed on the system.  Most often, conflicts are
    cases where A contains files which are an improvement over those in B.
    "Conflicts" are often combined with "replaces".
  <item>Package A <em>replaces</em> Package B when files installed
    by B are removed and (in some cases) over-written by files in A.
  <item>Package A <em>provides</em> Package B when all of the files and
    functionality of B are incorporated into A.  This mechanism provides
    a way for users with constrained disk space to get only that part of
    package A which they really need.
</list>

<p>More detailed information on the use of each these terms can be found
in the Packaging manual and the Policy manual.

<sect id="pre-depends">Что означает Pre-Depends?

<p>"Pre-Depends" - особая зависимость. Для большинства пакетов,
<tt>dpkg</tt> will unpack its archive file (i.e., its <tt>.deb</tt> file)
independently of whether or not the files on which it depends exist on the
system.  Simplistically, unpacking means that <tt>dpkg</tt> will extract
the files from the archive file that were meant to be installed on your
filesystem, and put them in place.  If those пакеты <em>depend</em> on
the existence of some other пакеты on your system, <tt>dpkg</tt> will
refuse to complete the installation (by executing its "configure" action)
until the other пакеты are installed.

<p>However, for some пакеты, <tt>dpkg</tt> will refuse even to unpack
them until certain dependencies are resolved.  Such пакеты are said
to "Pre-depend" on the presence of some other пакеты.
The Debian project provided this mechanism to support the safe upgrading
of systems from <tt>a.out</tt> format to <tt>ELF</tt> format, where
the <em>order</em> in which пакеты were unpacked was critical. There are
other large upgrade situations where this method is useful, e.g. the
пакеты with the required priority and their LibC dependency.

<p>Как и раньше, подробная информация об этом находится в Packaging manual.

<sect id="pkgstatus">Что означают статусы пакетов 
 unknown/install/remove/purge/hold ?

<p>Эти флаги "говорят", что пользователь намерен делать с пакетом (как было
указано действиями пользователя в разделе "Select" программы
<tt>dselect</tt>, или прямыми указаниями пользователя в команде <tt>dpkg</tt>).

<p>Значения флагов такие:
<list>
  <item>unknown  - пользователь никогда не указывал, что ему нужен этот пакет
  <item>install  - пользователь хочет установить или обновить пакет
  <item>remove   - пользователь хочет удалить пакет, но не хочет удалять файлы
    настроек пакета.
  <item>purge    - пользователь хочет полностью удалить пакет, в том числе и
    файлы настроек пакета.
  <item>hold     - пользователь не хочет как-либо трогать этот пакет, т.е. он
    хочет сохранить текущую версию с ее текущим статусом в текущем состоянии.
</list>

<sect id="puttingonhold">Как установить для пакета статус hold?

<p>Можно устанавливать статус hold для пакета либо с помощью dpkg, либо с 
помощью dselect.

<p>Для варианта с dpkg, вам нужно экспортировать список веделенных пакетов:
  <example>dpkg --get-selections > selections.txt</example>
Затем отредактировать полученный файл <file/selections.txt/, указать в строке,
содержащей имя нужного вам пакета, флаг hold, напр., для <package/libc6/:
  <example>libc6                                           install</example>
изменить вот так:
  <example>libc6                                           hold</example>
Сохранить изменения в файле и перезагрузить его базу данных dpkg:
  <example>dpkg --set-selections < selections.txt</example>

<p>Для варианта с dselect, вам нужно войти в меню [S]elect, найти нужный пакет
и нажать клавишу `=' (или `H'). Изменения будут задействованы как только вы 
выйдете из меню [S]elect.

<sect id="sourcepkgs">Как устанавливать пакеты исходных текстов?

<p>Пакеты исходных текстов Debian в действительности не "устанавливаются", они
только распаковываются в каталог, в котором вы можете построить из них уже 
бинарные пакеты. Пакеты исходных текстов располагаются в каталоге
<tt>source</tt>, и вы можете скачать их вручную, или использовать для этого
  <example>apt-get source foo</example>
(см. в странице руководства <manref name="apt-get" section="8"> как настроить
APT для выполнения этой задачи).

<sect id="sourcebuild">Как строить бинарные пакеты из пакета исходных текстов?

<p>Вам нужно скомпилировать все файлы foo_*.dsc, foo_*.tar.gz и foo_*.diff.gz 
(заметьте, для нативных пакетов Debian нет .diff.gz).

<p>Как только вы их получите, то, если установлен пакет <package/dpkg-dev/,
команда:
  <example>dpkg-source -x foo_version-revision.dsc</example>
распакует пакет в каталог <tt>foo-version</tt>.

<p>Если вы хотите скомпилировать пакет, то перейдите в каталог
<tt>foo-version</tt> и введите команду
  <example>debian/rules build</example>
чтобы построить программу, затем
  <example>debian/rules binary</example>
от имени суперпльзователя, чтобы построить пакет, и наконец
  <example>dpkg -i ../foo_version-revision_arch.deb</example>
чтобы установить построенный пакет.

<sect id="creatingdebs">Как образом можно самому создавать пакеты Debian?

<p>Этот вопрсо подробно освещается в документе New Maintainers' Guide, 
доступном в пакете <package/maint-guide/ , или по адресу
<url id="ftp://ftp.debian.org/debian/doc/package-developer/maint-guide.html.tar.gz">.
