<chapt id="ftparchives">The Debian FTP archives

<sect id="dirtree">What are all those directories at the Debian FTP archives?

<p>The software that has been packaged for &debian; is available in one
of several directory trees on each Debian mirror site.

<p>The <tt>dists</tt> directory is short for "distributions", and it is
the canonical way to access the currently available Debian releases
(and pre-releases).

<p>The <tt>pool</tt> directory contains the actual packages, see
<ref id="pools">.

<p>There are the following supplementary directories:
<taglist>
  <tag><em>/tools/</em>:
    <item>DOS utilities for creating boot disks, partitioning
    your disk drive, compressing/decompressing files, and booting Linux.
  <tag><em>/doc/</em>:
    <item>The basic Debian documentation, such as the FAQ, the bug reporting
          system instructions, etc.
  <tag><em>/indices/</em>:
    <item>The Maintainers file and the override files.
  <tag><em>/project/</em>:
    <item>mostly developer-only materials, such as:
    <taglist>
      <tag><em>project/experimental/</em>:
        <item>This directory contains packages and tools which are still
        being developed, and are still in the alpha testing stage.  Users
        shouldn't be using packages from here, because they can be dangerous
        and harmful even for most experienced people.
      <tag><em>project/orphaned/</em>:
        <item>Packages that have been orphaned by their old maintainers, and
        withdrawn from the distribution.
    </taglist>
</taglist>

<sect id="dists">How many Debian distributions are there in the
  <tt>dists</tt> directory?

<p>Normally there are three distributions, the "stable" distribution, the
"testing" distribution, and the "unstable" distribution. Sometimes there is
also a "frozen" distribution (see <ref id="frozen">).

<sect id="codenames">What are all those names like slink, potato, etc.?

<p>They are just "codenames". When a Debian distribution is in the
development stage, it has no version number but a codename. The purpose
of these codenames is to make easier the mirroring of the Debian
distributions (if a real directory like <tt>unstable</tt> suddenly changed
its name to <tt>stable</tt>, a lot of stuff would have to be needlessly
downloaded again).

<!-- XXX update for new distros -->
<p>Currently, <tt>stable</tt> is a symbolic link to <tt>woody</tt>
(i.e. &debian; &release;) and <tt>testing</tt> is a symbolic link to
<tt>woody+1</tt>.
This means that <tt>woody</tt> is the current stable
distribution and <tt>woody+1</tt> is the current testing distribution.
Note: the woody+1 name was not decided at the time of writing this, please
check the nearest up to date mirror for exact data.

<p><tt>unstable</tt> is a permanent symbolic link to <tt>sid</tt>, as
<tt>sid</tt> is always the unstable distribution (see <ref id="sid">).

<sect1 id="oldcodenames">Which other codenames have been used in the past?

<p>Other codenames that have been already used are: <tt>buzz</tt> for
release 1.1, <tt>rex</tt> for release 1.2, <tt>bo</tt> for releases 1.3.x,
<tt>hamm</tt> for release 2.0, and <tt>slink</tt> for release 2.1.

<sect1 id="sourceforcodenames">Where do these codenames come from?

<p>So far they have been characters taken from the movie "Toy Story" by Pixar.
<list>
  <item><em>buzz</em> (Buzz Lightyear) was the spaceman,
  <item><em>rex</em> was the tyrannosaurus,
  <item><em>bo</em> (Bo Peep) was the girl who took care of the sheep,
  <item><em>hamm</em> was the piggy bank,
  <item><em>slink</em> (Slinky Dog) was the toy dog,
  <item><em>potato</em> was, of course, Mr. Potato,
  <item><em>woody</em> was the cowboy.
</list>
<!--
  more info in http://www.pixar.com/feature/toystory/toystory.html 
  or better yet http://us.imdb.com/M/title-exact?Toy%20Story%20(1995)
  or actually:
    http://us.imdb.com/Title?0114709 for TS1
    http://us.imdb.com/Title?0120363 for TS2
  we shouldn't put the links in, Pixar needs no additional propaganda
-->
<!--
  characters not used from Toy Story (yet):
    - Sarge and The Green Plastic Army Men
    - Andy (the kid)
    - Etch (Etch-a-Sketch) (the blackboard)
    - Snake
    - Robot
    - Scud (Sid's dog)
  and additional characters from Toy Story 2, also not yet used:
    - Jessie (the Yodelling Cowgirl)
    - Zurg (the Emperor)
    - Wheezy (the penguin)
    - Hannah (owner of Jessie)
    - Stinky Pete the Prospector (the old fat guy)
    - Mrs. Davis (Andy's Mom)
    - Barbie
-->

<sect id="frozen">What about "frozen"?

<p>When the "testing" distribution is mature enough, the release manager
starts `freezing' it. The normal propagation delays are increased to ensure
that as little as possible new bugs from "unstable" enter "testing".

After a while, the "testing" distribution becomes truely `frozen'. This
means that all new packages that are to propagate to the "testing" are held
back, unless they include release-critical bug fixes. The "testing"
distribution can also remain in such a deep freeze during the so-called
`test cycles', when the release is imminent.

<p>We keep a record of bugs in the "testing" distribution that can hold off a
package from being released, or bugs that can hold back the whole release.
Once that bug count lowers to maximum acceptable values, the frozen "testing"
distribution is declared "stable" and released with a version number.

<p>With each new release, the previous "stable" distribution becomes
obsolete and moves to the archive. For more information please see
<url name="Debian archive" id="http://www.debian.org/distrib/archive">.

<sect id="sid">What about "sid"?

<p><em>sid</em> or <em>unstable</em> is the place where most of the packages
are initially uploaded. It will never be released directly, because packages
which are to be released will first have to be included in <em>testing</em>,
in order to be released in <em>stable</em> later on. sid contains packages
for both released and unreleased architectures.

<p>The name "sid" also comes from the "Toy Story" animated motion picture:
Sid was the boy next door who destroyed toys :-)

<sect1 id="sid-history">Historical notes about "sid"

<p>When the present-day sid did not exist, the FTP site organization had one
major flaw: there was an assumption that when an architecture is created in
the current unstable, it will be released when that distribution becomes the
new stable. For many architectures that isn't the case, with the result that
those directories had to be moved at release time. This was impractical
because the move would chew up lots of bandwidth.

<p>The archive administrators worked around this problem for several years
by placing binaries for unreleased architectures in a special directory
called "sid". For those architectures not yet released, the first time they
were released there was a link from the current stable to sid, and from
then on they were created inside the unstable tree as normal. This layout
was somewhat confusing to users.

<p>With the advent of package pools (see <ref id="pools">), binary packages
began to be stored in a canonical location in the pool, regardless of the
distribution, so releasing a distribution no longer causes large bandwidth
consumption on the mirrors (there is, however, a lot of gradual bandwidth
consumption throughout the development process).

<sect id="stable">What does the stable directory contain?

<p><list>
  <item>stable/main/:
  This directory contains the packages which formally constitute the most
  recent release of the &debian; system.

  <p>These packages all comply with the <url name="Debian Free Software
  Guidelines" id="http://www.debian.org/social_contract#guidelines">,
  and are all freely usable and distributable.

  <item>stable/non-free/:  This directory contains packages distribution of
  which is restricted in a way that requires that distributors take careful
  account of the specified copyright requirements.

  <p>For example, some packages have licenses which prohibit commercial
  distribution.  Others can be redistributed but are in fact shareware
  and not freeware.  The licenses of each of these packages must be
  studied, and possibly negotiated, before the packages are included in
  any redistribution (e.g., in a CD-ROM).

  <item>stable/contrib/: This directory contains packages which are
  DFSG-free and <em>freely distributable</em> themselves, but somehow depend
  on a package that is <em/not/ freely distributable and thus available only
  in the non-free section.
</list>

<sect id="testing">What does the testing directory contain?

<p>Packages are installed into the `testing' directory after they have
undergone some degree of testing in unstable. They must be in sync on all
architectures where they have been built and mustn't have dependencies that
make them uninstallable; they also have to have fewer release-critical bugs
than the versions currently in testing. This way, we hope that `testing' is
always close to being a release candidate.

<sect id="unstable">What does the unstable directory contain?

<p>The `unstable' directory contains a snapshot of the current development
system. Users are welcome to use and test these packages, but are warned
about their state of readiness. The advantage of using the unstable
distribution is that you are always up-to-date with the latest in GNU/Linux
software industry, but if it breaks: you get to keep both parts :-)

<p>There are also main, contrib and non-free subdirectories in `unstable',
separated on the same criteria as in `stable'.

<sect id="archsections">What are all those directories inside
  <tt>dists/stable/main</tt>?

<p>Within each of the major directory trees (<tt>dists/stable/main</tt>,
<tt>dists/stable/contrib</tt>, <tt>dists/stable/non-free</tt>, and
<tt>dists/unstable/main/</tt>, etc.), the binary packages reside in
subdirectories whose names indicate the chip architecture for which they
were compiled:

<list>
  <item>binary-all/, for packages which are architecture-independent.
    These include, for example, Perl scripts, or pure documentation.

  <item>binary-i386/, for packages which execute on 80x86 PC machines.

  <item>binary-m68k/, for packages which execute on machines based on one
    of the Motorola 680x0 processors.  Currently this is done mainly for
    Atari and Amiga computers, and also for some VME based industry standard
    boards.
<!-- Still true?
    There is no port of Linux to the old m68k based Macintoshes,
    because Apple did not supply the needed hardware information.
-->

  <item>binary-sparc/, for packages which execute on Sun SPARCStations.

  <item>binary-alpha/, for packages which execute on DEC Alpha machines.

  <item>binary-powerpc/, for packages which execute on PowerPC machines.

  <item>binary-arm/, for packages which execute on ARM machines.
</list>

<p>Please note that the actual binary packages for <em/testing/ and
<em/unstable/ no longer reside in these directories, but in the top
level <tt/pool/ directory. The index files (Packages and Packages.gz)
have been kept, though, for backwards compatibility.

<p>See <ref id="arches"> for more information.

<sect id="source">Where is the source code?

<p>Source code is included for everything in the Debian system. Moreover,
the license terms of most programs in the system <em>require</em> that
source code be distributed along with the programs, or that an offer to
provide the source code accompany the programs.

<p>Normally the source code is distributed in the "source" directories,
which are parallel to all the architecture-specific binary directories, or
more recently in the <tt>pool</tt> directory (see <ref id="pools">). To
retrieve the source code without having to be familiar with the structure of
the FTP archive, try a command like <tt>apt-get source mypackagename</tt>.

<p>Some packages are only distributed as source code due to the restrictions
in their licenses. Notably, one such package is <tt>pine</tt>, see
<ref id="pine"> for more information.

<p>Source code may or may not be available for packages in the "contrib"
and "non-free" directories, which are not formally part of the Debian system.

<sect id="pools">What's in the <tt>pool</tt> directory?

<p>Historically, packages were kept in the subdirectory of <tt>dists</tt>
corresponding to which distribution contained them. This turned out to cause
various problems, such as large bandwidth consumption on mirrors when major
changes were made.

<p>Packages are now kept in a large `pool', structured according to the name
of the source package. To make this manageable, the pool is subdivided by
section (`main', `contrib' and `non-free') and by the first letter of the
source package name. These directories contain several files: the binary
packages for each architecture, and the source packages from which the binary
packages were generated.

<p>You can find out where each package is placed by executing a command like
<tt>apt-cache showsrc mypackagename</tt> and looking at the `Directory:'
line. For example, the <tt>apache</tt> packages are stored in
<tt>pool/main/a/apache/</tt>. Since there are so many <tt>lib*</tt>
packages, these are treated specially: for instance, libpaper packages are
stored in <tt>pool/main/libp/libpaper/</tt>.

<p>The <tt>dists</tt> directories are still used for the index files used by
programs like <tt>apt</tt>. Also, at the time of writing, older
distributions have not been converted to use pools so you'll see paths
containing distributions such as potato or woody in the Filename header
field.

<p>Normally, you won't have to worry about any of this, as <tt>apt</tt> and
probably <tt>dpkg-ftp</tt> (see <ref id="howtocurrent">) will handle it
seamlessly. If you want more information, see the
<url id="http://people.debian.org/~joeyh/poolfaq"
 name="Debian Package Pools FAQ">.

<sect id="incoming">What is "incoming"?

<p>After a developer uploads a package, it stays for a short while in the
"incoming" directory before it is checked that it's genuine and allowed into
the archive.

<p>Usually nobody should install things from this place. However, in some
rare cases of emergency, the incoming directory is available at
<url id="http://incoming.debian.org/">. You can manually fetch packages,
check the GPG signature and MD5sums in the .changes and .dsc files,
and then install them.
