<chapt id="ftparchives">The Debian FTP archives

<sect id="dirtree">What are all those directories at the Debian FTP archives?

<p>The software that has been packaged for &debian; is available in one
of several directory trees on each Debian mirror site.

<p>The directory <tt>dists</tt> contains the "distributions", and it is
the canonical way to access the currently available Debian releases
(and pre-releases).

<sect id="dists">How many Debian distributions are there in the
  <tt>dists</tt> directory?

<p>Normally there are two distributions, the "stable" distribution and
the "unstable" distribution. Sometimes there is also a "frozen" distribution
(see <ref id="frozen">).

<sect id="codenames">What are all those names like slink, potato, etc.?

<p>They are just "codenames". When a Debian distribution is in the
development stage, it has no version number but a codename. The purpose
of these codenames is to make easier the mirroring of the Debian
distributions (if a real directory like <tt>unstable</tt> suddenly changed
its name to <tt>stable</tt>, a lot of stuff would have to be needlessly
downloaded again).

<p>Currently, <tt>stable</tt> is a symlink to <tt>slink</tt> (i.e. &debian;
2.1) and <tt>unstable</tt> is a symlink to <tt>potato</tt>, which means
that <tt>slink</tt> is the current stable distribution and <tt>potato</tt>
is the current unstable distribution.

<sect id="frozen">What about "frozen"?

<p>When the unstable distribution is mature enough, it becomes frozen,
meaning no new code is accepted anymore, just bugfixes, if necessary.
Also, a new unstable tree is created in the <tt>dists</tt> directory,
having a new codename. After a month or two of testing, the frozen
distribution becomes stable, it is released, and the previous stable
distribution becomes obsolete (and moves to the archive).

<sect id="oldcodenames">Which other codenames have been used in the past?

<p>Other codenames that have been already used are: <tt>buzz</tt> for
release 1.1, <tt>rex</tt> for release 1.2, <tt>bo</tt> for releases 1.3.x,
and <tt>hamm</tt> for release 2.0.

<sect id="sourceforcodenames">Where do these codenames come from?

<p>So far they have been characters taken from the movie "Toy Story" by Pixar.

<sect id="sid">What about "sid"?

<p>It is a special distribution for architectures which haven't yet been
released for the first time.

<p>When sid did not exist, the FTP site organization had one major flaw:
there was an assumption that when an architecture is created in the current
unstable, it will be released when that distribution becomes the new
stable. For many architectures that isn't the case, with the result that
those directories had to be moved at release time, chewing up lots of
bandwidth.

<p>For those architectures not yet released, the first time they are
released there will be a link from the current stable to sid, and from
then on they will be created inside the unstable tree as normal.  sid will
never be released nor even accessed directly - only through symlinks
in the current stable, frozen, or unstable trees.  It is a mix of
released and unreleased architectures.

<p>The name "sid" also comes from the "Toy Story" animated motion picture:
Sid was the boy next door who destroyed toys :-)

<sect id="stable">What does the stable directory contain?

<p><list>
  <item>stable/main/:
  This directory contains the packages which formally constitute the most
  recent release of the &debian; system.

  <p>These packages all comply with the <url name="Debian Free Software
  Guidelines" id="http://www.debian.org/social_contract.html#guidelines">,
  and are all freely usable and distributable.

  <item>stable/non-free/:  This directory contains packages distribution of
  which is restricted in a way that requires that distributors take careful
  account of the specified copyright requirements.

  <p>For example, some packages have licenses which prohibit commercial
  distribution.  Others can be redistributed but are in fact shareware
  and not freeware.  The licenses of each of these packages must be
  studied, and possibly negotiated, before the packages are included in
  any redistribution (e.g., in a CD-ROM).

  <item>stable/contrib/: This directory contains packages which are
  DFSG-free and <em>freely distributable</em> themselves, but somehow depend
  on a package that is <em/not/ freely distributable and thus available only
  in the non-free section.
</list>

<sect id="unstable">What does the unstable directory contain?

<p>The `unstable' directory contains a snapshot of the current development
system. Users are welcome to use and test these packages, but are warned
about their state of readiness. The advantage of using the unstable
distribution is that you are always up-to-date with the latest in GNU/Linux
software industry, but if it breaks: you get to keep both parts :-)

<p>There are also main, contrib and non-free subdirectories in `unstable',
separated on the same criteria as in `stable'.

<sect id="archsections">What are all those directories inside
  <tt>dists/stable/main</tt>?

<p>Within each of the major directory trees (<tt>dists/stable/main</tt>,
<tt>dists/stable/contrib</tt>, <tt>dists/stable/non-free</tt>, and
<tt>dists/unstable/main/</tt>, etc. but not <tt>project/experimental/</tt>,
which is too small to subdivide), the binary packages reside in
sub-directories whose names indicate the chip architecture for which they
were compiled:

<list>
  <item>binary-all/, for packages which are architecture-independent.
  These include, for example, Perl scripts, or pure documentation.

  <item>binary-i386/, for packages which execute on 80x86 PC machines.

  <item>binary-m68k/, for packages which execute on machines based on one
  of the Motorola 680x0 processors.  Currently this is done mainly for
  Atari and Amiga computers, and also for some VME based industry standard
  boards.
<!--
  There is no port of Linux to the old m68k based Macintoshes,
  because Apple did not supply the needed hardware information.
still true?
-->

  <item>binary-sparc/, for packages which execute on Sun Sparcstations.

  <item>binary-alpha/, for packages which execute on DEC Alpha machines.

  <item>binary-powerpc/, for packages which execute on PowerPC machines.

  <item>binary-arm/, for packages which execute on ARM machines.

  <item>binary-hurd-i386/, for GNU/Hurd packages which execute on
  80x86 machines. (see <ref id="hurd">)
</list>

<sect id="source">Where is the source code?

<p>Source code is included for everything in the Debian system. Moreover,
the license terms of most programs in the system <em>require</em> that
source code be distributed along with the programs, or that an offer to
provide the source code accompany the programs.

<p>Normally the source code is distributed in the "source" directories,
which are parallel to all the architecture-specific binary directories.

<p>Source code may or may not be available for packages in the "contrib"
and "non-free" directories, which are not formally part of the Debian system.

<sect id="otherdirs">Ok, what about the other directories, not inside
  <tt>dists</tt>?

<p>There are the following supplementary directories:
<list>
  <item>"tools/":  DOS utilities for creating boot disks, partitioning
    your disk drive, compressing/decompressing files, and booting Linux.
  <item>"doc/":  Documentation, instructions on how to submit
    bug reports.
  <item>"project/":  mostly developer-only materials, such as:
    <list>
      <item>"project/experimental/": This directory contains packages
        and tools which are still being developed, and are still in the
        alpha testing stage.  Users shouldn't be using packages from here,
        because they can be dangerous and harmful even for most experienced
        people.
      <item>"private/project/Incoming/":  Packages that have been uploaded
        by developers, and which are awaiting placement in the directory
        hierarchy by the FTP distribution maintainer.
      <item>"indices/":  Various lists, including the <tt>Packages-Master</tt>
        files.
  </list>
</list>
