<!--
  english version: 1.6
  russian version: $Id: pkg_basics.sgml,v 1.2 2006-01-31 17:19:23 jseidel Exp $
  -->

<chapt id="pkg_basics">Основы системы управления пакетами Debian

<sect id="package">Что такое пакет Debian?

<p>Пакеты обычно содержат все файлы необходимые для реализации
определенного набора функций. Есть два типа пакетов Debian: 
<list>
  <item><em>Двоичные (Binary) пакеты</em>, которые содержат выполняемые
  и конфигурационные файлы, страницы man/info, информацию об авторских
  правах и другую документацию. Эти пакеты распространяются в архивах
  специального формата Debian (см. <ref id="deb-format">); их обычно
  можно отличить по расширению '.deb'. Двоичные пакеты могут быть
  распакованы при помощи утилиты <tt>dpkg</tt>; подробности даны в 
  странице руководства.
  
  <item><em>Исходные (Source) пакеты</em>, которые состоят из
  <tt>.dsc</tt> файла описывающего исходный пакет (включая имена файлов
  описанных ниже), <tt>.orig.tar.gz</tt> файла, содержащего оригинальный
  исходный текст программы в архивном формате tar.gz и, обычно, 
  <tt>.diff.gz</tt> файл содержащий специфические для Debian изменения к
  оригинальным исходным текстам. Утилита <tt>dpkg-source</tt>
  запаковывает и распаковывает исходные архивы Debian; детали описаны на
  страницах руководства.
</list>

<p>При установке программного обеспечения система управления пакетами
использует "зависимости" (dependencies), которые тщательно определены
сопровождающим пакет. Эти зависимости указаны в файле <tt>control</tt>,
связанном с каждым пакетом. Например пакет содержащий GNU компилятор C
(<package/gcc/) "зависит" от пакета <package/binutils/, в котором
содержатся компоновщик и ассемблер. Если пользователь попытается установить
<package/gcc/ до того как установит <package/binutils/, то система
управления пакетами (dpkg) выдаст сообщение об ошибке, содержащее
указание на  необходимость установить <package/binutils/, и прервет
установку пакета. (Обычно, эта возможность может быть отключена
настойчивым пользователем, см. <manref name="dpkg" section="8">.) 
Более подробно смотри ниже в <ref id="depends">.

<p>Инструменты управления пакетами Debian могут использоваться для:
<list>
  <item>манипуляций и управления пакетами и частями пакетов,
  <item>помощи пользователю в разбиении пакетов, которые должны быть 
    перенесены на носителях ограниченной емкости, таких как дискеты,
  <item>помощи разработчику в сборке пакетов, 
  <item>помощи пользователю в установке пакетов, размещенных на
    удаленном FTP сервере.
</list>

<sect id="deb-format">Какой формат у двоичных пакетов Debian?

<p>"Пакет" Debian, или архив Debian, содержит выполнимые файлы,
библиотеки и документацию связанные с определенным набором программ или
с множеством взаимосвязанных программ. Как правило, файл архива Debian
имеет расширение <tt>.deb</tt>.

<p>Внутренний формат двоичных пакетов Debian описан в странице
руководства <manref name="deb" section="5">. Этот внутренний формат
может быть изменен (в различных выпусках &debian;), поэтому всегда
используйте <manref name="dpkg-deb" section="1"> для различных манипуляций
с файлами <tt>.deb</tt>.

<sect id="pkgname">Почему у пакетов Debian такие длинные имена? 

<p>Имена двоичных пакетов Debian удовлетворяют следующему соглашению:
&lt;foo&gt;_&lt;VersionNumber&gt;-&lt;DebianRevisionNumber&gt;.deb

<p>Заметим, что <tt>foo</tt> полагается именем пакета. Для проверки
имени пакета связанного с конкретным .deb файлом можно воспользоваться
следующими методами:
<list>
  <item>просмотреть файл "Packages" в каталоге FTP сервера, где хранился
  архив Debian. Этот файл содержит блоки описаний для каждого пакета;
  первое поле в каждом блоке -- имя пакета. 
  <item>использовать команду <tt>dpkg --info foo_VVV-RRR.deb</tt> (где
  VVV и RRR -- версия и ревизия проверяемого пакета). При этом, среди
  прочей информации, выводится имя пакета соответствующее архивному
  файлу.
</list>

<p>Компонент <tt>VVV</tt> -- номер версии определяемый разрабочиком
программы. На формат версии нет каких либо ограничений, он может быть
различным, напр., "19990513" или "1.3.8pre1".

<p>Компонент <tt>RRR</tt> номер ревизии Debian, определяется
разработчиком Debian (или конкретным пользователем, если тот хочет
построить пакет сам). Этот номер соответствует количеству пересмотров, 
которому подвергся пакет, так, при каждом пересмотре, обычно, вносятся
изменения в Debian Makefile (<tt>debian/rules</tt>), управляющий файл 
Debian (<tt>debian/control</tt>), сценарии инсталяции и удаления
(<tt>debian/p*</tt>), или в файлы конфигурации используемые с пакетом.

<!--
<p>Компонент <tt>Arch</tt> указывает семейство процессоров, для которых был 
скомпилирован пакет. Наиболее часто, это семейство <tt>i386</tt>, которое
включает в себя процессоры 386 и дальнейшие модели фирмы Intel. Какие еще
семейства процессоров поддерживаются описано в разделе о <ref id="dirtree" 
name="структуре каталогов FTP-архива Debian">.
-->

<sect id="controlfile">Что это за управляющий (control) файл Debian?

<p>Спецификации содержимого управляющего файла Debian приводятся в
"Руководстве по пакетам Debian" (Debian Packaging manual), глава 4, см.
<ref id="debiandocs">.

<p>Короткий пример файла control для пакета Debian hello приведен ниже:
<example>
Package: hello
Priority: optional
Section: devel
Installed-Size: 45
Maintainer: Adam Heath &lt;doogie@debian.org&gt;
Architecture: i386
Version: 1.3-16
Depends: libc6 (>= 2.1)
Description: The classic greeting, and a good example
 The GNU hello program produces a familiar, friendly greeting.  It
<!-- XXX below 'non-programmers' were better, but this is a verbatim copy -->
 allows nonprogrammers to use a classic computer science tool which
 would otherwise be unavailable to them.
 .
 Seriously, though: this is an example of how to do a Debian package.
 It is the Debian version of the GNU Project's `hello world' program
 (which is itself an example for the GNU Project).
</example>

<p>Поле Package определяет имя пакета.  Это имя по которому инструменты
упраления пакетами будут его опознавать. Обычно такое же, но не
обязательно, как первая часть имени файла архива Debian.

<p>Поле Version определяет версию разработчика и (в последнем
компоненте) номер ревизии пакета данной программы как раскрыто в
<ref id="pkgname">. <!-- XXX missing name -->

<p>Поле Architecture определяет тип процессора для которого был
скомпилирован данный пакет.

<p>Поле Depends содержит список пакетов, которые должны быть установлены
для успешной установки данного пакета.

<p>Installed-Size показывает сколько дискового пространства займет
установленный пакет. Этот параметр может использоваться программами
установки для определения остающегося дискового пространства.

<p>Строка Section определяет "раздел", в котором хранится пакет Debian
на FTP сервере. Это имя подкаталога (в одном из основных каталогов, см.
<ref id="dirtree">) в котором хранится пакет.

<p>Поле Priority показывает насколько важным является пакет для
установки; некоторые программы, напр., dselect или console-apt могут
сортировать пакеты по категориям. См. <ref id="priority">.

<p>В поле Maintainer указан e-mail адрес человека, ответственного за
поддержку данного пакета. 

<p>В поле Description дается краткое описание возможностей,
предоставляемых пакетом.

<p>Для более подробной информации о полях, которые может иметь пакет,
смотрите главу 4 Руководства по пакетам Debian, "Управляющие файлы и их
поля."

<sect id="conffile">Что такое Debian conffile?

<p>Conffile содержит список файлов конфигурации (обычно помещаемых в
<tt>/etc</tt>), которые система управления пакетами не будет
перезаписывать при обновлении пакета. Это гарантирует, что содержимое
файлов конфигурации будет сохранено и позволяет обновлять пакеты не
прерывая работу системы.

<p>Чтобы точно определить, какие файлы сохраняются при обновлении,
запустите:
  <example>dpkg --status package</example>
и смотрите в строке "Conffiles:".

<sect id="maintscripts">Что это за сценарии preinst, postinst, prerm и postrm?

<p>Это выполняемые сценарии, которые автоматически запускаются перед или
после установки пакета. Вместе с файлом <tt>control</tt>, эти файлы
являются частью "управляющего" раздела архивного файла Debian.

<p>Более подробно:
<taglist>
<tag/preinst/
  <item>Данный сценарий выполняется перед тем, как пакет будет
  распакован из .deb файла. Многие сценарии 'preinst' останавливают
  сервисы, которые будут обновлены пакетом, до завершения установки или
  обновления.

<tag/postinst/
  <item>Этот сценарий, обычно, завершает требуемую настройку пакета
  после того, как он был извлечен из .deb файла. Часто, сценарий
  'postinst' запрашивает у пользователя различные параметры и/или
  предупреждает пользователя, что если он примет значения по-умолчанию,
  то позже прийдется переконфигурировать пакет. Многие сценарии
  также 'postinst' выполняют команды, необходимые для запуска или
  перезапуска сервиса после установки или обновления пакета.

<tag/prerm/
  <item>Этот сценарий, обычно, останавливает выполнение всех демонов,
  связанных с пакетом. Он выполняется перед удалением файлов, связанных с
  пакетом.

<tag/postrm/
  <item>Этот сценарий, обычно изменяет ссылки или другие файлы, связанные
  с пакетом, и/или удаляет файлы созданные пакетом. (См. также
  <ref id="virtual">).
</taglist>

<p>В настоящее время все управляющие файлы можно найти в каталоге
<tt>/var/lib/dpkg/info</tt>. Файлы, относящиеся к пакету <tt>foo</tt>
имеют имя "foo" и расширения "preinst", "postinst" и т.д.
Файл <tt>foo.list</tt> в этом каталоге содержит список всех файлов
установленных пакетом <tt>foo</tt>. (Заметим, что местонахождение файлов
определяется dpkg; вам не следует полагаться на указанный каталог).

<sect id="priority">Что такое
Требуемый/Важный/Стандартный/Необязательный/Дополнительный
(Required/Important/Standard/Optional/Extra) пакет?

<p>Для каждого пакета Debian создателями дистрибутива определен 
<em>приоритет (priority)</em>, в качестве помощи для управления
пакетами. Приоритеты следующие:

<list>
  <item><strong>Требуемый (Required)</strong>: пакет, который необходим
    для правильного функционирования системы.
    <p>Сюда включены все инструменты, необходимые для устранения
    неполадок в системе. Вам не следует удалять эти пакеты, иначе ваша
    система может перестать работать, и вы, что не исключено, даже не сможете
    использовать dpkg для того, чтобы вернуть все на свои места.
    Функциональность системы, в которой установлены только Требуемые 
    пакеты, не слишком высока, но достаточна для того, чтобы позволить
    системному администратору загрузить ее и установить больше
    програмного обеспечения.
  <item><strong>Важные (Important)</strong> пакеты содержат программы,
  которые должны иметься в любой Unix-подобной системе.
    <p>Без этих программ не смогут работать или не будут обладать полной
    функциональностью другие пакеты. Сюда <em>НЕ</em> относятся Emacs,
    X11, Tex или любое другое большое приложение. Это пакеты образующие
    базовую структуру.
  <item><strong>Стандартные (Standard)</strong> пакеты являются 
  стандартными для любой Linux системы, включая сравнительно небольшие,
  но не слишком ограниченные, системы работающие только в текстовом
  режиме.
    <p>Это то, что будет установлено по умолчанию, если пользователь не
    выберет чего-либо еще. Сюда не относятся многие большие приложения,
    но входят такие, как Emacs и ограниченное подмножество TeX и LaTeX.
  <item><strong>Необязательные (Optional)</strong> пакеты содержат все
  то, что вы, как правило, можете захотеть установить, если не вполне
  осознаете свои потребности.
    <p>Сюда входят X11, полный дистрибутив TeX, и множество других приложений.
  <item><strong>Дополнительные (Extra)</strong>: пакеты, которые либо
  конфликтуют с другими пакетами, имеющими более высокий приоритет, и
  применимые только тогда, когда вы знаете, что это такое, либо
  имеющие специализированные требования, которые делают их неподходящими
  для раздела "Optional".
</list>

<sect id="virtual">Что такое виртуальный пакет?

<p>Виртуальный пакет - это общее имя, применимое к любому из группы
пакетов, все из которых обеспечивают выполнение какой либо функции.
Например, программы <tt>tin</tt> и <tt>trn</tt>, обе являются
программами для чтения новостей и должны удовлетворять зависимость
программы, которая требует наличия в системе программы чтения новостей,
для своей работы. Поэтому обе предоставляют "виртуальный пакет",
называемый <tt>news-reader</tt>.

<p>Аналогично, <tt>smail</tt> и <tt>sendmail</tt> обеспечивают функции
почтового транспортного агента. Поэтому они предоставляют виртуальный
пакет "mail transport agent". Если один из них установлен, то любая
программа, зависящая от пакета <tt>mail-transport-agent</tt>, будет
удовлетворена существованием данного виртуального пакета.

<p>Кроме того, если в системе установлено более одного пакета,
предоставляющего определенный виртуальный пакет, то Debian обеспечивает
системного администратора механизмом, позволяющим определить один из
этих пакетов предпочтительным. Для этого имеется команда
<tt>update-alternatives</tt>, описанная далее в <ref id="diverse">.

<sect id="depends">Что подразумевают говоря, что пакет
Зависит/Рекомендует/Предполагает/Конфликтует/Заменяет/Предоставляет
  (Depends/Recommends/Suggests/Conflicts/Replaces/Provides) другой пакет?

<p>В системе пакетов Debian введено понятие "зависимости" между пакетами,
которое показывает насколько правильная работа Программы А зависит от
существования Программы В на данной системе:
<list>
  <item>Пакет A <em>зависит (depends)</em> от пакета B, если B абсолютно
  необходим для работы A. В некоторых случаях, A не просто зависит от B,
  но дополнительно требует определенную версию B. В этом случае, обычно,
  накладывается требование, чтобы версия B была не ниже заданной.
  <item>Пакет A <em>рекомендует (recommends) установку</em> Пакета B, если
  сопровождающий пакета считает, что большинство пользователей не
  захотят пользоваться A не имея функциональности, предоставляемой
  пакетом B.
  <item>Пакет A <em>поддерживает (suggests)</em> Пакет B, если B
  содержит файлы относящиеся (и обычно расширяющие их) к функциям
  выполняемым пакетом A.
  <item>Пакет A <em>конфликтует (conflicts)</em> с Пакетом B, когда A не
  может работать, если установлен пакет B. Наиболее часто, конфликты
  возникают в случаях, когда A содержит файлы, заменяющие аналогичные, но
  содержащиеся в B. "Конфликты" часто сочетаются с "заменой".
  <item>Пакет A <em>заменяет (replaces)</em> пакет B, когда файлы
  установленные пакетом B удаляются и (в некоторых случаях) замещаются
  файлами пакета A.
  <item>Пакет A <em>предоставляет (provides)</em> Пакет B, когда все
  файлы и функциональность B обеспечиваются A. 
</list>

<p>Более подробная информация об использовании этих терминов может быть
найдена в Руководстве по пакетам (Packaging manual) и в Руководстве по 
политике (Policy manual).

<sect id="pre-depends">Что означает слово Pre-Depends (Пред-Зависимости)?

<p>"Pre-Depends" это специальная форма зависимости. Большинство пакетов
будут извлечены <tt>dpkg</tt> из архивных файлов независимо от того,
существуют ли файлы от которых они зависят или нет. Проще говоря,
<tt>dpkg</tt> извлекает файлы пакета из архива и помещает их на
положенные места. Если пакет <em>зависит</em> от существования других
пакетов, то <tt>dpkg</tt> откажется завершать установку (выполняя
конфигурацию) до установки необходимых пакетов.

<p>Однако, для некоторых пакетов, <tt>dpkg</tt> откажется даже
распаковывать файлы до разрешения зависимостей. Такие пакеты указывают,
что они "Pre-depend" от наличия других пакетов. Проект Debian
обеспечивает механизм для безопасного обновления системы с формата
<tt>a.out</tt> на формат <tt>ELF</tt>, где критичен <em>порядок</em>, в котором
пакеты будут распакованы. Существуют и другие ситуации,
когда может применяться этот метод.

<p>Более подробная информация может быть найдена в Руководстве по пакетам.

<sect id="pkgstatus">Что означают слова
неизвестно/установить/удалить/очистить/удерживать
(unknown/install/remove/purge/hold) в статусе пакета?

<p>Эти флаги определяют, что пользователь хочет сделать с пакетом (что
определяется либо действиями пользователя при работе в разделе "Выбор" 
("Select") программы <tt>dselect</tt>, либо непосредственными обращениями 
пользователя к <tt>dpkg</tt>).

<p>Их значения:
<list>
  <item>неизвестно (unknown)  - пользователь никогда не проявлял
  интереса к пакету.
  <item>установить (install)  - пользователь хочет, чтобы пакет был 
  установлен или обновлен.
  <item>удалить (remove)   - пользователь хочет, чтобы пакет был удален, 
  но не хочет удалять какие-либо из его файлов конфигурации.
  <item>очистить (purge)    - пользователь хочет, чтобы пакет был удален
  полностью, включая его файлы конфигурации.
  <item>захватить (hold)     - пользователь хочет, чтобы над пакетом не
  совершалось никаких действий, т.е., он хочет сохранить текущую версию
  пакета в том состоянии в котором она находится, какими бы они ни были.
</list>

<sect id="puttingonhold">Как я могу перевести пакет в удерживаемое (hold)
состояние?

<p>Есть два пути, которыми можно перевести пакет в удерживаемое состояние -- 
при помощи dpkg или dselect.

<p>С dpkg, вы просто экспортируете список выбранных пакетов:
  <example>dpkg --get-selections > selections.txt</example>
Затем редактируете полученный файл <file/selections.txt/, заменяете
строку, содержащую выбранный вами для удерживания пакет, напр. <package/libc6/,
с:
  <example>libc6                                           install</example>
на:
  <example>libc6                                           hold</example>
Сохраняете файл и загружаете его в базу данных dpkg:
  <example>dpkg --set-selections < selections.txt</example>

<p>C dselect, вы просто переходите в меню Выбор (Select), находите нужный
пакет и нажимаете клавишу '=' (или 'H'). Изменения вступят в силу сразу же
после вашего выхода из режима Выбор.

<sect id="sourcepkgs">Как я могу установить пакет исходных текстов?

<p>Пакеты исходных текстов Debian не могут быть "установлены", они просто
распаковываются в том каталоге, в котором вы хотите собрать двоичный
пакет. Исходные пакеты располагаются в каталоге <tt>source</tt>, и вы
можете либо загрузить их вручную, либо воспользовавться командой:
  <example>apt-get source foo</example>
(см. страницу руководства <manref name="apt-get" section="8">).

<sect id="sourcebuild">Как я могу построить двоичный пакет из исходного?

<p>Вам необходимы foo_*.dsc, foo_*.tar.gz и foo_*.diff.gz файлы для
компиляции исходного текста (для родных пакетов Debian файла .diff.gz
может не быть).

<p>Если у вас есть эти файлы и установлен пакет <package/dpkg-dev/,
то следующая команда:
  <example>dpkg-source -x foo_version-revision.dsc</example>
извлечет пакет в каталог <tt>foo-version</tt>.

<p>Если вы хотите скомпилировать пакет, то перейдите в каталог
<tt>foo-version</tt> и выполните команду
  <example>debian/rules build</example>
для компиляции программы, затем
  <example>debian/rules binary</example>
как пользователь root, для сборки пакета, и затем
  <example>dpkg -i ../foo_version-revision_arch.deb</example>
для установки пакета.

<sect id="creatingdebs">Как мне самому создать пакет Debian?

<p>Детальное описание этого процесса содержится в "Руководстве
начинающего разработчика Debian", доступном в пакете
<package/maint-guide-ru/, или
<url id="ftp://ftp.debian.org/debian/doc/package-developer/maint-guide.html.tar.gz">.
