
From rms@santafe.edu Thu Jun 25 17:25:13 1998
Date: Fri, 12 Jun 1998 20:00:22 -0600
From: Richard Stallman <rms@santafe.edu>
Reply-To: rms@gnu.org
To: hp@pobox.com
Subject: Re: GNU/Linux Cookbook

Please forgive me for taking so long to get back to you.
Reading text carefully to critique it is a lot of work.

Judging from your table of contents, the tutorial and the GNU/Linux
Cookbook cover mostly different topics.  You're trying to write about
how to run and use the system; the GNU/Linux Cookbook is mainly about
how to use applications on it.  So your project can't help do the
GNU/Linux Cookbook, but it is useful as what it is.

(I'm assuming that I can tell which topics you want to cover by the
set of section headers, and that the sections which you have not yet
written are present only as headers.)

I've read the first 20 pages carefully, so I now have many comments
about the substance and the writing of the text.  Here I've listed
first the issues of substance, then on the second page the issues of
writing.

Issues of substance:

     It's a bit like a tower. At the base is Linux. On top of that are all
     the basic tools, mostly from GNU. Next is all the software that you
     run on the computer: much of this is also from GNU. At the top of the
     tower is Debian - carefully organizing and fitting everything together
     so it all works together nicely. 

Debian, or any GNU/Linux system, is the whole tower, not the top of
the tower, because the operating system is the combination of all of
these levels.

     An operating system's primary purpose is to support programs that
     actually do the work you're interested in. For instance, you may be
     using an editor so you can create a document. This editor could not do
     its work without help from the operating system

You are describing the editor as separate from the operating system,
but I think that's a mistake--the editor is PART of the operating
system.  For example, Emacs is an essential part of the GNU/Linux
system.

Is it possible that in this passage you really mean "kernel" when you
say "operating system"?

In 2.1.2 I see

     Kernel vs. system software - Debian is not just an OS. 

Here the phrase "just an OS" suggests a similar confusion between
operating system and kernel, because an OS is a very large thing,
essentially a software universe, while the words "just a" implies
something is small or a part.

     of work you put into getting your job done. Unix supplies many tools
     that can help you, but only if you know what these tools do.

Since this manual is for GNU/Linux, talking about Unix here is a distraction
and could even be confusing.

Unix is a proprietary operating system, and GNU's Not Unix anyway; so
Unix is relevant to the manual's topic only as a historical note.
The best place for that is at the end.

     At any
     given time, the system will be running 50 or 60 programs to support a
     single user.

I think that is a high estimate.  Right now there are just 37
processes on my machine, and that includes the demons which are there
even when no one is logged in.

     You may be wondering: why would people spend hours of their own time
     to write software, carefully package it, and then give it all away?
     The answers are as varied as the people who contribute.

You've mentioned several reasons, but one reason not listed is the
reason why I write free software: to give computer users the freedom
to cooperate and share.

This particular reason has a special relationship to the GNU/Linux
system: it is the reason why the GNU project was founded, and thus the
reason why GNU/Linux systems exist.  So I think it ought to be
mentioned.

     More and more people are looking for ways to avoid the
     inflated price of commercial software.

Commercial software is not the opposite of free software; there is
commercial free software (such as GNU Ada) and there is plenty of
non-commercial non-free software.

I think what you mean to say is "proprietary software".  Please see
http://www.gnu.org/philosophy/categories.html for definitions.

     The common wisdom about Debian and other Unix-like systems is that
     they're hard to use. So you may be a little worried. Don't be. 

I agree that the reader should not worry too much, but this is not
going to work to set his mind at rest.  If someone told you, "Don't
worry about the tiger in the next room," you would probably worry
more, not less.

If you show why nothing very bad can happen, then the reader will
worry less.  Perhaps, "It's true that you need to remember command
names, which makes it somewhat more work to learn the system.
However, once you have learned to use a command, it is easy enough to
use it; and the commands you haven't learned won't do anything."

     by using them. Use GNU/Linux for everything you can. Experiment. Don't
     be afraid --- it's *possible* to mess things up, but you can always
     reinstall. Keep backups and have fun! 

I don't think that readers will feel very reassured by this.  It might
be more effective to say that, unless you do things as root, you CAN'T
do anything that would require reinstalling the system.

    3.1. Booting the system 
    ------------------------

This section belongs in an appendix, because a beginner does not need
to know any of it.  Assuming that the system has been properly
installed, a beginner doesn't need to know how booting works.
It's enough to know that if you switch on the machine, it will boot.

In general, places near the beginning of a manual should be reserved
for information that is very important, and answers to burning
questions.  The less urgently the reader needs to know the
information, the later on it should come.

     As we mentioned earlier (section 2.1, `What is Debian? '), the design
     of Debian GNU/Linux comes from the Unix operating system. Unlike
     common desktop OS's such as DOS, Windows, and MacOS, Unix was
     originally designed for large servers and multiuser systems. 

I think it would be better to focus less on Unix.

In any case, this section is background material, so it should
go at the end of the manual.

    Unless
     you turn off all of Debian's network services and keep your machine in
     a locked room, you should have a password. 

It breaks my heart to read what you say about passwords.
If you read the book Hackers, you'll understand why.

     When you're done working, you should log out of the system, so no one
     can come along after you're gone and use your account. To exit the
     shell, you just enter the `exit' command. You can also type `logout'.

It is a terrible shame to tell people that they should go in constant
suspicion of everyone else.  If you work in an atmosphere so hostile
that other people will sabotage you if you don't do this, you should
get out of there!

     root to do. If you're using your own personal computer, *you* are the
     system administrator, of course. If you aren't, just ignore all
     references to root in this manual --- the sysadmin will do all that
     for you. 

Here you are telling people that it is unthinkable for ordinary users
to know the root password.  Shame, shame!  To be sure, a beginner who
needs to read this book is not yet ready to do things as root.  But
that doesn't mean he should forever accept being a second-class
citizen.

     you can rapidly delete the entire command line. `C-Y' puts back the
     last thing you killed - `y' stands for "yank," as in "yank it back." 

     Go ahead and play around with all this to get a feel for it. There's
     not much you can break, so jump right in and experiment. 

Before you invite people to experiment, you should tell them about using
C-c to cancel a command.  Then they can feel safer as they experiment.

    3.5. Logging in as root 
    ------------------------

Since a beginning user who needs to read this book is not ready to
handle being root, maybe you should not talk about it at this early
stage in the manual.  Maybe it should not at in this manual at all; it
could be in a separate system administration manual.  If the idea is
to encourage users to experiment, because they can't hurt anything,
talking about being root is going to interfere.

    3.7. Special instructions if you're using X 
    --------------------------------------------

I suggest moving this to chapter 10.  At the beginning, the user does
not really need to distinguish between using X and using the console.
Either way, you log in by typing your user name and password, then you
get a shell and you type shell commands.  In chapter 3, there is no
need to say anything except "After you log in with X, a window will
appear; move the mouse to that window, so you can begin entering
commands."

     To shut down, you'll have to be `root'. As root, just type the command
     `shutdown -h now'. This will go through the entire shutdown procedure,
     including the `sync' command which clears the disk cache as described
     above. When you see `System halted', it's safe to turn off the
     computer.

The easiest way to shut down the computer is to type C-M-DEL,
then switch off the power when the system is starting to reboot.

    23.2. GNU/Linux History 
    ------------------------

	 The primary author of Linux is Linus Torvalds. Since his original
	 versions, it has been improved by countless numbers of people around
	 the world.

The history of GNU/Linux starts in 1984 with the commencement of the
GNU project.  Linus got involved near the end, when most of the system
was already in place; that is why, once Linux was finished, it was
immediately possible to make a complete runnable GNU system.

So it's misleading to start the history with Linus.

     These days you can buy anything from
     Word Perfect (a popular word processor) to Maple, a complex symbolic
     manipulation package, for GNU/Linux. 

Please don't speak about non-free software as if it were a good thing.
Especially please don't mention any specific non-free software packages.
Mentioning them is giving free advertising to people who are trying to
take away the public's freedom.  They don't deserve any help from us.

In general, the less said about non-free software in a manual, the
better.

Issues of writing:


Emacs is a proper name, so please capitalize it.

    2.5. How to Avoid Reading This Book 

I chuckled when I read that section title, and imagined various ways
to avoid reading this book.  Throw it away?  Avert my eyes?  Usually I
have to make a specific effort to read a book, not to avoid reading
it.

More seriously, I think you meant to say "The wrong way to read this
book," or something equivalent.  But you wrote words that don't say
that.  The sentence structure didn't fit your intention.

Well, we all make mistakes.  If you notice such a mistake, you'll fix
it.  But here you didn't notice it.  So my real point is that you need
to practice being alert for problems like this.

     print it. If there was a different dvi previewer available, I could

This should be "If there were".  But I suggest that you try to rewrite
this using simpler grammatical constructions.  That would make it
easier to read.

     Removing the disk and pressing a key will cause the boot process to
     continue. 

It is clearer to stick to present tense except where that sounds bad.
Here it works fine: "Removing the disk and pressing a key causes the
boot process to continue."  Or "To continue the boot process, remove
the disk and press any key."

     When you start Debian, you'll see a `login:' *prompt* [1].

This is grammatically correct, using a string of sample text as an
adjective, but it that construct tends to be confusing; better to
rewrite it.

    You
     won't be able to see the password as you type it

It is better to be more concrete and say what the computer does.  This
is an important general principle: don't say what the reader can or
can't see, say what is or is not on the screen.

    You have to

Those three words can be deleted without losing anything,
so it is best to delete them.

		press
	 `Enter' after the username and the password.

This is ambiguous--can you spot the two meanings I see?

     [1]  (A prompt is just a signal from the computer that you should
          enter some information, in this case your user name.) 

"Signal" is very abstract.  Could you be concrete?  "Some information"
is too loose; almost always, a prompt is a request for some specific
kind of information, such as "a shell command" or "the answer to a
certain question."  I don't know of any case where a prompt requests
that you "enter some information" regardless of what information.

     Try typing the command `whoami' now. To enter a command, you type it
     at the shell prompt --- you should see a cursor there

Where is "there"?  Also, say what is on the screen, not what the
reader should see.

     `whoami' simply reports back

The word "simply" does not contribute--delete it.

"Reports back" is loose--it sounds like what a spy or a soldier on a
patrol would do.  Always make descriptions of behavior as concrete as
possible without adding much length.

     When you're done working, you should log out of the system, so no one
     can come along after you're gone and use your account. To exit the
     shell, you just enter the `exit' command. You can also type `logout'.

The words "you" and "just" contribute nothing; if you delete them,
this will say the same thing.  So it is better to delete them.

     Whatever you type at the shell prompt

You know that it is necessary to define the nonstandard words we use
when you first use.  The same is true of nonstandard usages, such as
"type at".  Non-hackers won't understand what it means to type
something "at" the shell prompt.

     before pressing `Enter' is
     called the *command line*

This is somewhat misleading.  The word "the" seems to imply that a
user has only one command line, and that this is the way to specify
it.  You need to reword this.

In any case, "command line" is not the usual term for this.

We usually call this key RET or RETURN, not ENTER.

     You can go back to previous commands

"Go back" is vague, and makes it seem that the user is "moving"
somewhere.  Can you find something more specific.

    Try this: log on, if you haven't yet;

There is no need to mention, when describing commands,
that the user must log in first before using them.
You've already described logging in.

     You should get the `whoami' command back.

"Get...back" is a vague and broad term, so it does not help
the reader to understand you.  Please find something more specific.

     easiest way is with the left and right arrow keys - try typing
     `whooami' instead of `whoami', then use the left arrow key to move
     back to the extra `o'.

Which `o' is the extra one?  You have carefully chosen an example
which is ambiguous and thus cannot enable the reader to understand clearly.
It would be better to use an example in which no letter appears twice.

			    You can erase the `o' with the `Backspace' or
     `Delete' keys. 

The user can't understand this reliably, because he can't tell WHICH o
is being deleted by either of these commands.

     now, though). Try typing `Control' and `a' at the same time (often
     written `C-A').

We normally write the character in lower case: C-a.

     from the middle of the command line. Using `C-A' followed by `C-K',
     you can rapidly delete the entire command line.

The word "rapidly" does not contribute; better to delete it.

     `C-Y' puts back the
     last thing you killed - `y' stands for "yank," as in "yank it back." 

"Put back" is a broad term, so it doesn't help the user understand.
Please pick another verb that conveys more specific meaning--perhaps
"reinsert".

     Go ahead and play around with all this to get a feel for it. There's
     not much you can break, so jump right in and experiment. 

"All this" sounds sloppy, and has very little meaning.
Can you find something more tight?

"Jump right in" also sounds sloppy.  "Not much you can break" is
too vague to succeed in reassuring people.

     Since Debian is a multiuser system, it's designed to keep any one user
     from messing things up. Important system files are locked down and

I can guess what you mean to say here, because I already know about this
aspect of the system, but the reader would never figure it out from the
words "locked down".

     When you're root, you're dangerous.

I know what you mean, but this doesn't say it clearly.
You need to choose words to prevent misunderstanding.
Perhaps "you can make changes that damage the system."

     You may want to use the `su' command to make things easy. `su' stands
     for Super User. 

"To make things easy" is so vague that it says nothing.  Even "as a
shortcut" conveys a more specific meaning (and is shorter as well).

Meanwhile, this paragraph doesn't answer the most important question
about `su': what it does.  That's the most important thing to should
say about any command once you introduce it.

     2.   `whoami' 

          Just to see who you logged in as, in case you forgot. :) 

When you tell the user to try a command to verify the current status,
you should always explicitly say what answer is the normal, proper answer.
In this case, whoami should say that you are logged in under your usual
login name.

     4.   `whoami' 

          Now you should be root. 

"Be root" is loose language, which is fine when hackers talk to each
other because we know enough to be confident of its precise meaning,
but in this manual you need to be precise.

     5.   `exit' 

          Stop being root. 

You need to explain how exit relates to the result.  The user has
never seen the exit command and has no idea what it does.

     When you're doing system administration tasks, you should do as much
     as possible as yourself. Then `su', do the part that requires root
     privileges, and `exit'. 

Add "... to turn off privileges so you can no longer harm anything."

     the consoles quickly. To try it, log in to your Linux system, hold

Please say GNU/Linux rather than just Linux when talking about the
whole system.

     Debian comes with six VC's enabled by default, on function keys
     `F1-F6'[1]. 

It is confusing to omit the Alt- and say just F1.  Be consistent
and say Alt-F1 all the time.

     [1]  Technically, there are more VC's enabled, but only 6 of them have
          login prompts. But this is a nitpick.

You could say this in a shorter and clearer way without a footnote.
Also, the beginner who reads this book won't understand that "have
login prompts" means they permit you to log in.

          should probably avoid the "Unreadable" option, because it is. 

This is the sort of thing that there is no need to document,
because users will figure it out for themselves if they try it,
and otherwise they don't need to know.

     precautions. GNU/Linux, in order to improve performance, has a *disk
     cache*.

Here it is correct to say just Linux, not GNU/Linux, because the disk
cache is part of the kernel.

    this makes everything move much more quickly.

That's both vague and an exaggeration--the disk cache speeds certain
operations but not all.

     We've already discussed the *command line*, that is, whatever you type
     at the shell prompt before you press enter. But we haven't mentioned
     the different parts of the command line. 

This is an indirect way of saying that you are now going to explain
the different parts of the command line.  The reader might guess that
you're about to do that, but it's better to say so directly.
"Now we will explain the structure and parts of a command."

     behavior of a command. An option modifies how the program runs, but
     not what the program runs on. 

I'd usually say that the program runs on my computer.
I'm not surprised that an option won't change that ;-).

I know what you're trying to say--that an option doesn't change what
data the program operates on.  That is true usually, though there are
exceptions.  For example, the -f option in tar -x specifies the data
to operate on.

    Arguments provide information
     to the command. 

That is true, but so broad that it won't tell the reader anything
unless you qualify it somewhat.

        * `man', the command name, indicates that we want to look at the
          manual pages.

1. It is best to think of a command as a verb, not a noun,
and talk about it as an imperative rather than a declarative.

2. Please don't talk about "we" including the user.  That tends to be
patronizing, as when a doctor asks "How are we today?"  It's better
to address the user always as "you".

     Breaking down the `man -k Postscript' command line: 

Each new facility should be introduced first in its most basic role.
For instance, `man' should be introduced first with its usual function,
which is to look at one man page.  Once you've explained that, then go on
to explain the secondary function that `-k' specifies.

     *Files* are simply locations where the computer stores information,

The word "location" doesn't fit well with what files do.  I know it is
hard to describe files, but a word that gives a wrong impression does
not help.

    Let's look at some files on a
     Debian system: 

When I read this, the first meaning I imagined was that you were about
to tell the user to use `more' to look at some files.  So you should
reword this to be clearer--perhaps "To illustrate the structure of
directories and files, here are some of the directories and files that
normally exist on a Debian system."

It is not a good idea to say "Let's" because that lumps you and the
reader together as "we", and that tends to obscure the distinction
between what you are telling the user and what the user is telling the
computer.  It is important to make that distinction clear.

        * Each file or directory is designated by a *path*, 

Please don't use the term "path" to mean a file name.  We use the term
"path" only for lists of directories to be searched.

        * Directories are arranged according to a tree metaphor.

It is better to say "arranged in a tree structure".  This focuses on
the arrangement of the directories (a structure) rather than on a way
of speaking (a metaphor).

In general, it is better to keep the manual's focus on the way the
system works, not on the way the manual is written.

          can use the system without knowing what the hardware is (this is
          important if you're using a system located in another building,
          managed by your company's system administrator). 

It makes no difference where the computer is or who runs it.  That's a
distraction, and raising it will tend to confuse the reader who
assumes it was mentioned because it is relevant.  It is better to say
"a file system on a disk connected to another computer."  It is short,
it is clear, and it doesn't have any red herrings.

        * Every directory except `/' has a name, which can contain any
          letters or symbols *except* `/'. [1] 

This statement is a bit strange, like "every boy except Arthur has a
name."  I think that every directory has a name.  The name of `/' is
`/'.

    You want to avoid any characters

It isn't respectful to tell the user what he wants.  It is better to
say "It is better", because that presents your recommendations as your
recommendations.

     Don't worry if all this isn't completely clear yet. There are many
     examples to come. 

I think you should intersperse more examples with this section's
description.

    You'll do this from the shell
     prompt. 

It is better to say "Here we explain how to do this with a shell
command."

          `pwd' stands for Present Working Directory. 

I think it stands for "print working directory".
People always speak of the "current" working directory,
not the "present" working directory, and using "present"
seems strained.

          `ls' stands for "list," as in "list files." When you type `ls',
          you should see a list of all the files in your present working
          directory.

"You should see" is tends to be vague and unhelpful; it is always a
good idea to replace that with a statement of what the computer does,
because then you will automatically tend to be more precise.  For
example, "this displays a list of the files in your current working
directory."

          `ls' will not show anything on the screen --- it will appear to
          do nothing at all. 

That is a very mysterious way of saying that it produces no output.

          Typing `cd' by itself takes you to your home directory -

"By itself" is very vague.  I know what you mean because I know
how to use the cd command, but a reader will not be sure that you
mean "with no arguments".

"Takes you to" is also vague.  I think you mean "selects as the
current working directory".

     5.   `mkdir practice' 

          In your home directory, let's make a directory called `practice'.
          We'll use this directory to try out some other commands. You
          might type `ls' to verify that your new directory exists. 

Here you are using a relative file name for the first time (I think),
so you need to explain relative file names here.

     8.   `cp /etc/profile .' 

          OK, things just got more complicated!

You've noticed that you are introducing too many new things in one
example.  But instead of telling the user "bear with this
complication", it's much better to use several examples and introduce
one new idea per example.

          `more' is used to view the contents of text files, such as
          `/etc/profile'.

The other items in this list all start with imperative verbs.
For parallel structure, this one should also.

    You might try typing `more /etc/profile' as well, to
          verify that your copy looks just like the original. 

Please make this an explicit numbered example, like the rest.

          As you might guess, `mv' stands for "move." We've moved the file

"As you might guess" contributes nothing; it should be deleted.

    Perhaps type `ls ' and/or `ls mysubdirectory' to
          verify the move. 

Make this a separate numbered example on a par with the rest.

          `mv' is also used to rename files

Why "also"?  Does this imply that item #10 is something other than
renaming?  That is a distinction I don't understand.

