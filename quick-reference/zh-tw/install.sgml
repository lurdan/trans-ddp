<!-- CVS revision of this document "$Revision: 1.12 $"  -->
<!-- CVS revision of original english document "1.96"  -->

<chapt id="install"> Debian 系統安裝提示

<p>
安裝 Debian 的官方文件位於 <url id="&stable-info;"> 和 <url id="&stable-install;"> 。
<p>
文件的開發中版本位於 <url id="&testing-info;" > 和 <url id="&testing-install;"> （處於寫作中，有時可能無法存取）。
<p>
雖然此章節是以 Potato 安裝程式開始寫起，但大部分的內容皆已更新到 Woody 安裝程式且兩者是非常類似的。由於 Sarge 將會使用一套完全新型的安裝程式，所以請將該文件當作 Sarge 安裝程式的另一個參考。
也請注意部份重要的套件已經更換檔名和安裝的優先等級。例如說，Sarge 已經將預設的 MTA <package>exim</package> 替換成 <package>exim4</package>以及 <package>coreutils</package> 也被其他軟體取代。您需要做些安裝上調整。

<sect>一般Linux安裝提示
<p>
如果您在尋找精簡的 &debian; 安裝光碟，請別忘記檢查 <url id="&debian-netinst;">。 
<p>
使用 <tt>testing</tt> 或 <tt>unstable</tt> 版本會增加遇到嚴重軟體錯誤的風險。在機器上安裝一個穩定版本的 &debian; ，然後使用多重開機方案可有效控制風險。或者使用更安全的 <prgn>chroot</prgn> 技巧，參閱 <ref id="chroot"> 。後者可實現同時在不同的主控台 (console) 執行多種版本的 &debian; 。
<p>

<sect1>硬體相容性
<p>
Linux 相容絕大多數 PC 硬體，而且幾乎可以安裝在任何系統架構上。對我而言它的安裝過程和 Windwos 95/98/Me 一樣簡單。可相容的硬體清單也在不斷增加。
<p>
如果你有一部筆記型電腦，可以去 <url id="&linonlap;" name="Linux on Laptops"> 查找對應品牌和型號的安裝指導。
<p>
我建議的桌上型硬體通常「比較保守」：
<list compact>
<item>用於工作目的時最好選 SCSI 而不選 IDE ， IDE/ATAPI HD 適於個人使用。
<item>IDE/ATAPI CD-ROM ( 或 CD-RW)。
<item>最好選 PCI 而不選 ISA, 特別是網路卡 (NIC)。
<item>選用便宜的 NIC 。 Tulip for PCI、NE2000 for ISA 都不錯。 
<item>初學 Linux 安裝時避免使用 PCMCIA (筆記型電腦)。
<item>別使用 USB 鍵盤、滑鼠, ... 除非你想證明自己的實力。
</list>
<p>
如果你的機器特別慢，最好把硬碟插到另一個速度快些的機器上安裝。
</sect1>

<sect1>確定 PC 硬體和晶片組
<p>
在安裝過程中，可能會要你確定電腦的硬體或晶片組等。有時了解這些資訊並非易事，這裡有個方法：
<enumlist compact>
  <item>打開機殼親自看看。
  <item>記下顯示卡晶片、網路卡晶片、串列介面和 IDE 埠週圍的晶片上印的數字。
  <item>記下印在 PCI 和 ISA 插卡背面的名稱。
</enumlist>
</sect1>

<sect1>在 &debian; 下確定 PC 硬體
<p>
在 Linux 系統中使用下列命令，可獲得機器當前使用的硬體及設定的相關資訊。
<example>
$ pager /proc/pci
$ pager /proc/interrupts
$ pager /proc/ioports
$ pager /proc/bus/usb/devices
</example>
在安裝過程中按 Alt-F2 進入控制台，可執行這些命令獲得幫助。
<p>
完成第一次安裝之後，接著安裝額外的套件，例如 <package>pciutils</package>，<package>usbutils</package>和<package>lshw</package>，您就能取得更多系統的資訊。
<example>
$ lspci -v |pager
$ lsusb -v |pager
# lshw  |pager
</example>
<p>
典型的中斷用途：
<list compact>
<item>IRQ0: timer output (8254)
<item>IRQ1: keyboard controller
<item>IRQ2: cascade to IRQ8&ndash;IRQ15 on PC-AT
<item>IRQ3: secondary serial port (io-port=0x2F8) (<file>/dev/ttyS1</file>)
<item>IRQ4: primary serial port (io-port=0x3F8) (<file>/dev/ttyS0</file>)
<item>IRQ5: free [sound card (SB16: io-port=0x220, DMA-low=1, DMA-high=5)] 
 <!--(was the HD interrupt on the XT) Linux is for 386 or later -->
<item>IRQ6: floppy disk controller (io-port=0x3F0) (<file>/dev/fd0</file>, <file>/dev/fd1</file>)
<item>IRQ7: parport (io-port=0x378) (<file>/dev/lp0</file>)
<item>IRQ8: rtc
<item>IRQ9: software interrupt (int 0x0A), redirect to IRQ2
<item>IRQ10: free [network interface card (NE2000: io-port=0x300)]
<item>IRQ11: free [(SB16-SCSI: io-port=0x340, SB16-IDE: io-port=0x1E8,0x3EE)]
<item>IRQ12: PS/2 Mouse
<item>IRQ13: free (was 80287 math coprocessor)
<item>IRQ14: primary IDE controller (<file>/dev/hda</file>, <file>/dev/hdb</file>)
<item>IRQ15: secondary IDE controller (<file>/dev/hdc</file>, <file>/dev/hdd</file>)
</list>
對於舊型的非 PnP ISA 介面卡可以從 BIOS 設定 IRQ5，IRQ10 和 IRQ11 為非 PnP 裝置。
<p>
對於 USB 設備，它們在 <file>/proc/bus/usb/devices</file> 中以 <tt>Cls=<var>nn</var></tt> 的形式列出：
<list compact>
<item>Cls=00 : Unused
<item>Cls=01 : Audio (speaker etc.)
<item>Cls=02 : Communication (MODEM, NIC, ...)
<item>Cls=03 : HID (Human Interface Device: KB, mouse, joystick)
<item>Cls=07 : Printer
<item>Cls=08 : Mass storage (FDD, CD/DVD drive, HDD, Flash, ...)
<item>Cls=09 : Hub (USB hub)
<item>Cls=255 : Vendor specific
</list>
如果設備類別 (device class) 不是 255 ，則 Linux 可支援該設備。
</sect1>

<sect1>在其它 OS 下確定 PC 硬體
<p>
還可從其它作業系統中獲取硬體資訊：
<p>
安裝其它商業版 Linux。當前它們在硬體偵測方面做得比 Debian 好。(不過一但 Sarge 中加入了 <prgn>debian-installer</prgn> ，情況就會改變。)
<p>
安裝 Windows 。用滑鼠右鍵點“我的電腦”在選單中選屬性/設備管理，可獲得硬體設定資訊。記下所有的資源資訊如 IRQ 、 I/O 埠地址和 DMA 。有些舊的 ISA 卡可能要在 DOS 下設定。
</sect1>

<sect1>Lilo 迷思
<p>
"安裝 Lilo 受限於 1024 磁柱(cylinders)。"大錯特錯！
<p>
Debian Potato 之後使用的新版<prgn>lilo</prgn>支援lba32。只要主機板的BIOS版本支援lba32，<prgn>lilo</prgn>就可以衝破 1024 磁柱的限制。
<p>
如果你使用的是舊版<file>lilo.conf</file>，請確定在你的<file>lilo.conf</file>檔案開頭的某處加了一行命令指示系統讀取“lba32”。參閱<file>&f-lilo;</file>。
</sect1>

<sect1 id="instgrub">GRUB
<p>
GNU HURD 計畫提供的新的系統開機工具 <package>grub</package> 可使用於&debian; Woody系統。
<example>
# apt-get update
# apt-get install grub-doc
# mc &f-grub-doc;
... read contents
# apt-get install grub
# pager &f-grub;
... read it :)
</example>
要編輯 GRUB 選單，可編輯<file>&f-grub-menu;</file>檔案。參閱<ref id="bootgrub">獲取有關啟動參數設定資訊，它和<package>lilo</package>的設定方法不太一樣。
</sect1>

<sect1 id="bootfloppy">選擇開機軟碟
<p>
Potato 時期，在進行普通桌上型電腦安裝時我喜歡用 IDEPCI 磁碟套件。到了 Woody ，我愛用 bf2.4 啟動磁碟套件。兩者都使用同一版本的 <package>boot-floppies</package> 來建立開機軟碟。
<p>
如果你有一張 PCMCIA 網路卡，你就得使用標準啟動磁碟套件（使用的軟碟數最多，但可用的驅動模組最全）並在PCMCIA設定中設定NIC；別在標準網路設定對話框中設定網路卡。
<p>
對於特殊系統，需要建立一張自制救援磁碟，可以用別的機器上編譯好的核心壓縮映射站台替換&debian;救援磁碟中名為“linux”的核心映射站台。詳情參閱救援磁碟中的<file>readme.txt</file>檔案。救援磁碟使用 MS-DOS 檔案系統，所以你可以在任何系統下編輯它。這將為那些使用特殊網路卡的人造福。
<p>
到了 Sarge ，可用 <prgn>debian-installer</prgn> 或 <package>pgi</package> 來建立開機軟碟。
</sect1>

<sect1>安裝系統
<p>
這方面的官方文件見於 <url id="&stable-install;"> 或 <url id="&testing-install;">（處於寫作中，有時可能無法存取）
<p>
如果你是用<prgn>boot-floppies</prgn>安裝 testing 發行版本，你需要在安裝過程中按 Alt-F2 打開一個控制台，編輯 <file>/etc/apt/sources.list</file> 檔案，將套件下載入口從<tt>stable</tt>改為<tt>testing</tt>。
<p>
在安裝<file>/dev/hda</file>的<prgn>mbr</prgn>時，我喜歡將<prgn>lilo</prgn>裝在諸如<file>/dev/hda3</file>的位置，這樣做可以減小開機資訊被覆蓋的風險。
<p>
下面是我在安裝過程中所做的選擇。
<list compact>
<item>MD5 passwords "yes"
<item>shadow passwords "yes"
<item>Install "advanced" (dselect **) and select
  <list compact>
    <item>取消emacs (如果它被選中了)、nvi、tex、telnet、talk(d)；
    <item>選上mc、vim、nano-tiny或elvis-tiny任選一個。
    <p>參閱 <ref id="dselect"> 。即使你是個 Emacs 迷也不要在安裝階段使用它， nano 可滿足你的需要。也不要安裝其它龐大的套件如 TeX（Potato曾在此階段設定它為預設安裝）。參閱<ref id="bin-editor">了解此時安裝nano-tiny或elvis-tiny的原因。
  </list>
<item>在每個套件安裝對話框中，回答所有的設定提問均=“y”（替換當前值）
<item><package>exim</package>：選第2項，因為我使用ISP的SMTP伺服器發送郵件。
</list>
<p>
有關dselect的更多資訊，參閱<ref id="dselect">。
</sect1>

<sect1 id="ipmap">網路所需的主機名和IP地址
<p>
LAN設定的例子（C subnet: 192.168.1.0/24）：
<example>
Internet
   |
   +--- 外部ISP提供POP服務(使用fetchmail存取)
   | 
  Access point ISP提供DHCP服務和SMTP中繼服務
   |                     :
  Cable modem         (Dialup)
   |                     :
LAN網關外部埠: eth0 (IP由ISP的DHCP提供)
 使用老式筆記型電腦(IBM Thinkpad, 486 DX2 50MHz, 20MB RAM)
 執行Linux 2.4核心，提供ext3檔案系統支援
 執行"ipmasq"套件(加入更好的修正，NAT 和 firewall )
 執行"dhcp-client"套件設定eth0 (覆蓋DNS的設定)
 執行"dhcp"套件設定eth1
 執行"exim"作為smarthost (mode 2)
 執行"fetchmail"設一個較長的時間值(fallback)
 執行"bind" 作為暫存名稱伺服(cache nameserver)器，在從LAN連入 Internet 時
            作為認證網域名稱伺服器(authoritative nameserver)，在從LAN中連入網中某個域時
 執行 "ssh" 使用埠 22 和 8080 (從任何地點連接)
 執行 "squid" 作為代理伺服器來快取 Debian 檔案庫(APT需要連接它)
LAN通訊閘內部埠: eth1 (IP = 192.168.1.1, 固定)
                         |
         +--- LAN Switch (100base T) ---+
         |                              |
LAN中一些固定IP客戶端            LAN中一些DHCP客戶端
(IP = 192.168.1.2-127, 固定)     (IP = 192.168.1.128-200, 動態)
</example>
參閱<ref id="gateway">了解更多網路設定方面的資訊。參閱 <ref id="net-router"> 了解更多區域網路通訊閘設定方面的資訊。
</sect1>

<sect1>使用者帳號
<p>
為了讓機器存取起來有一致的感覺，我的系統中開頭幾個帳號通常是不變的。
<p>
我首先建立的使用者帳號名稱是“admin”（uid=100）。我透過該帳號轉發所有的 root email。該帳號加入到<tt>adm</tt>使用者組（參閱<ref id="wheel">），這個使用者組為成員提供大量root特權的命令，透過<prgn>su</prgn>或<prgn>sudo</prgn>命令就能使用PAM。詳情參閱<ref id="newuser">。
</sect1>

<sect1>建立檔案系統
<p>
<sect2>硬碟分區
<p>
我更喜歡將不同的目錄樹分別裝在不同的分區下，這樣可以將系統崩潰造成的損失減到最小。例如：
<example>
/          == (/ + /boot + /bin + /sbin)
           == 50MB+
/tmp       == 100MB+
/var       == 100MB+
/home      == 100MB+
/usr       == 700MB+ with X
/usr/local == 100MB
</example>
<p>
<file>/usr</file>目錄的大小主要取決於 X Window 應用程式和文件的數目。如果只執行控制台終端<file>/usr/</file>可以小到300MB，但如果你裝了大量Gnome應用程序2GB-3GB也很正常。當<file>/usr/</file>增加得太大，將<file>/usr/share/</file>移到別的分區是最有效的解救方法。對新的Linux2.4核心包，<file>/</file>目錄的大小可能要超過200MB。

<p>
例如，當前我的 Internet 通訊閘(gateway)伺服器的硬碟使用情況如下（由<tt>df -h</tt>命令輸出）：
<example>
Filesystem            Size  Used Avail Use&percnt; Mounted on
/dev/hda3             300M  106M  179M  38&percnt; /
/dev/hda7             100M   12M   82M  13&percnt; /home
/dev/hda8             596M   53M  513M  10&percnt; /var
/dev/hda6             100M  834k   94M   1&percnt; /var/lib/cvs
/dev/hda9             596M  222M  343M  40&percnt; /usr
/dev/hda10            596M  130M  436M  23&percnt; /var/cache/apt/archives
/dev/hda11            1.5G  204M  1.2G  14&percnt; /var/spool/squid
</example>
（有塊大空間留給<file>/var/spool/squid</file>作為下載套件時代理伺服器的緩衝區）
<p>
下面的<tt>fdisk -l</tt>輸出提供了一個分區分配方案：
<example>
# fdisk -l /dev/hda # comment

/dev/hda1             1        41    309928+   6  FAT16 # DOS
/dev/hda2            42        84    325080   83  Linux # (not used)
/dev/hda3   *        85       126    317520   83  Linux # Main
/dev/hda4           127       629   3802680    5  Extended
/dev/hda5           127       143    128488+  82  Linux swap
/dev/hda6           144       157    105808+  83  Linux
/dev/hda7           158       171    105808+  83  Linux
/dev/hda8           172       253    619888+  83  Linux
/dev/hda9           254       335    619888+  83  Linux
/dev/hda10          336       417    619888+  83  Linux
/dev/hda11          418       629   1602688+  83  Linux
</example>
裡面有一個未使用的分區。留作安裝第二個Linux或為增長的目錄樹提供擴充餘地。

<sect2>掛載檔案系統
<p>
下面的<file>/etc/fstab</file>文件可完成上述分區的掛載工作：
<example>

# /etc/fstab: static filesystem information.
#
# filesystem   mount point     type    options                dump pass
/dev/hda3       /               ext2    defaults,errors=remount-ro 0 1
/dev/hda5       none            swap    sw                      0 0
proc            /proc           proc    defaults                0 0
/dev/fd0        /floppy         auto    defaults,user,noauto    0 0
/dev/cdrom      /cdrom          iso9660 defaults,ro,user,noauto 0 0
#
# keep partitions separate
/dev/hda7       /home           ext2    defaults                0 2
/dev/hda8       /var            ext2    defaults                0 2
/dev/hda6       /var/lib/cvs    ext2    defaults                0 2
# noatime will speed up file access for read access
/dev/hda9       /usr            ext2    defaults,noatime        0 2
/dev/hda10      /var/cache/apt/archives ext2    defaults        0 2

# very big partition for proxy cache
/dev/hda11      /var/spool/squid ext2   rw                      0 2

# backup bootable DOS
/dev/hda1       /mnt/dos        vfat    rw,noauto               0 0
# backup bootable Linux system (not done)
/dev/hda2       /mnt/linux      ext2    rw,noauto               0 0
#
# nfs mounts
mickey:/        /mnt/mickey     nfs     ro,noauto,intr          0 0
goofy:/         /mnt/goofy      nfs     ro,noauto,intr          0 0
# minnie:/ /mnt/minnie smbfs ro,soft,intr,credentials={filename} 0 2
</example>

對於NFS，我使用<tt>noauto、intr</tt>以及預設的<tt>hard</tt>項。如果有死連接，掛載進程可能會死掉，可以使用 Ctrl-C 恢復。
<p>
對於使用Samba連接的Windows機器(smbfs)，<tt>rw,auto,soft,intr</tt>是個好方案，參閱<ref id="samba">。
<p>
對於軟驅，使用<tt>noauto,rw,sync,user,exec</tt>可以防止因退盤前未執行卸載命令而造成文件損壞，但它會降低寫盤速度。

<sect2>自動掛載
<p>
自動掛載的要點：
<list compact>
<item>加載<tt>vfat</tt>模組，從而<file>/etc/auto.misc</file>可使用<tt>-fstype=auto</tt>參數：
<example>
# modprobe vfat # prior to the floppy access attempt
 ... or to automate this settings,
# echo "vfat" &gt;&gt; /etc/modules
 ... 重啟系統。
</example>
<item>設定<file>/etc/auto.misc</file>如下：
<example>
floppy -fstype=auto,sync,nodev,nosuid,gid=100,umask=000 :/dev/fd0
 ... 此處gid=100表示“users”。
</example>
<item>在 <file>/home/<var>user</var></file>中建立連結檔案<file>cdrom</file>和<file>floppy</file>，分別指向<file>/var/autofs/misc/cdrom</file>和<file>/var/autofs/misc/floppy</file>。
<item>將<var>user</var>加入“users”使用者組。
</list>

<sect2>掛載NFS
<p>
外部Linux NFS伺服器（goofy）處於防火牆（gateway）之後。在我的LAN內部，安全策略非常寬鬆，因為只有我自己一個使用者。為了存取NFS，NFS伺服器端要按如下方式加上<file>/etc/exports</file>：
<example>
# /etc/exports: the access control list for filesystems which may be
#               exported to NFS clients.  See exports(5).
/       (rw,no_root_squash)
</example>
除安裝和啟動NFS伺服器及客戶端的套件之外，這一步對啟動NFS伺服器也是必要的。
<p>
我通常建立一個單獨的2GB分區，有時想玩玩別的Linux系統，就可以裝在這兒。兩個系統可共享swap和<file>/tmp</file>分區。多分區方案很難滿足這種需求。如果只想裝一個執行簡單控制台模式的系統，分區留500MB就綽綽有餘了。
</sect1>

<sect1>DRAM記憶體指導
<p>
下列是有關DRAM的簡單指導。
<example>
  4MB:  Linux核心執行的最低設定。
 16MB:  控制台系統執行的最低設定。
 32MB:  簡單X系統執行的最低設定。
 64MB:  GNOME/KDE系統執行最低設定。
128MB:  流暢執行GNOME/KDE。
256MB(或更多): 如果您預算充足，何不增加呢？DRAM 很便宜了。  
</example>
使用啟動選項<tt>mem=4m</tt>（或lilo <tt>append="mem=4m"</tt>）可以看看只用4MB記憶體時系統如何執行。如果機器的BIOS比較舊且記憶體數大於64MB啟動時就得加lilo啟動參數。
</sect1>

<sect1>Swap空間
<p>
我按下面的指導原則來劃分 swap 空間：
<list compact>
<item>每個 swap 分割區均&lt;128MB（使用舊版2.0核心），&lt;2GB（使用最新核心）
<item>總容量 =（機器記憶體大小的1到2倍）或（128MB到2GB之間）
<item>將它們分散於不同的硬碟，在<file>/etc/fstab</file>中可使用<tt>sw,pri=1</tt>選項掛載它們。這樣可確保核心以RAID方式使用swap分區，最大限度地發揮swap的性能。
<item>如果可能，使用硬碟中間的磁區。
</list>
<p>
盡管你不一定真的需要，但為系統設定多一些 swap 空間（128MB）總要好點，至少執行有記憶體漏洞的壞程序，系統會先慢下來而不是馬上死當。
</sect1>
</sect>

<sect id="bashconf">Bash 設定
<p>
我按自己的喜好修改shell啟動 script：
<example>
/etc/bash.bashrc        換成你的喜好
/etc/profile            保持發布版設定 ( \w -&gt; \W)
/etc/skel/.bashrc       換成你的喜好
/etc/skel/.profile      換成你的喜好
/etc/skel/.bash_profile 換成你的喜好
~/.bashrc               換成你的喜好，會改變所有使用者的設定
~/.profile              換成你的喜好，會改變所有使用者的設定
~/.bash_profile         換成你的喜好，會改變所有使用者的設定
</example>
<url id="&examples;" name="可以參考我提供的 script 範例">。我喜歡系統看起來清清楚楚，所以將<prgn>umask</prgn>設為002或022。
<p>
<prgn>PATH</prgn>依次由以下設定文件設定：
<example>
/etc/login.defs  - 在shell之前設定PATH
/etc/profile     (會呼叫/etc/bash.bashrc)
~/.bash_profile  (會呼叫~/.bashrc)
</example>
</sect>

<sect id="gpm">滑鼠設定
<p>
<sect1>PS/2滑鼠
<p>
對於ATX主機板上使用PS/2介面的滑鼠，信號通路如下：
<example>
mouse -&gt; /dev/psaux -&gt; gpm -&gt; /dev/gpmdata = /dev/mouse -&gt; X
</example>
這裡，建立指向<file>/dev/gpmdata</file>的符號鏈接(symlink)<file>/dev/mouse</file>，有助於簡化設定操作。（例如，如果你決定不再使用 <prgn>gpm</prgn>服務，只需在移除<prgn>gpm</prgn> 服務，將符號鏈接<file>/dev/mouse</file>指向<file>/dev/psaux</file>。）
<p>
信號通路使得對鍵盤和滑鼠插拔操作，只要重啟<prgn>gpm</prgn>就可以生效，不必重啟X！
<p>
處於<prgn>gpm</prgn>輸出與X輸入之間的信號通路協定有兩種執行方式，“ms3”（使用Microsoft 3-button serial mouse協定）和“raw”（對於已連接的滑鼠使用相同的協定），此處選擇的協定將決定X設定中使用的協定。
<p>
下面我將示範一下如何設定Logitech 3-button（傳統Unix風格的滑鼠）PS/2滑鼠：
<p>
如果新版X4不支援你的顯卡則需要使用舊版X3（如某些ATI 64位卡），請設定<tt>/etc/X11/XF86Config</tt>而不是<tt>/etc/X11/XF86Config-4</tt>，下面的示例中使用的是X4：

<sect2 id="gpmms3">使用ms3協定方式
<p>
<example>
/etc/gpm.conf            | /etc/X11/XF86Config-4
=========================+======================================
device=/dev/psaux        | Section "InputDevice"
responsiveness=          |  Identifier "Configured Mouse"
repeat_type=ms3          |  Driver     "mouse"
type=autops2             |  Option     "CorePointer"
append=""                |  Option     "Device"   "/dev/mouse"
sample_rate=             |  Option     "Protocol" "IntelliMouse"
                         | EndSection
</example>
如果使用這種方式，設定滑鼠類型只需編輯<file>gpm.conf</file>，X的設定將保持不變。參閱<url id="&examples;" name="我的 script 範例">。

<sect2 id="gpmraw">使用raw協定方式
<p>
<example>
/etc/gpm.conf            | /etc/X11/XF86Config-4
=========================+======================================
device=/dev/psaux        | Section "InputDevice"
responsiveness=          |  Identifier "Configured Mouse"
repeat_type=raw          |  Driver     "mouse"
type=autops2             |  Option     "CorePointer"
append=""                |  Option     "Device"   "/dev/mouse"
sample_rate=             |  Option     "Protocol" "MouseManPlusPS/2"
                         | EndSection
</example>
如果使用這種方式，設定滑鼠類型可編輯<file>gpm.conf</file>，同時也會改變X的設定。

<sect2>如何設定不同的滑鼠
<p>
<prgn>gpm</prgn>的設備類型<tt>autops2</tt>可以自動偵測出市面上大多數 PS/2 滑鼠。不幸的是它也不是萬能的，而且Woody之前的發布版中並不包括它，這時可在<file>gpm.conf</file>中試試<tt>ps2</tt>或者<tt>imps2</tt>。想看看<prgn>gpm</prgn>支援哪些類型的滑鼠可輸入：<tt>gpm -t help</tt>。參閱<manref name="gpm" section="8">。
<p>
如果使用的是 2 鍵 PS/2 滑鼠，可選上 X 協定的<tt>Emulate3Buttons</tt>項。協定中 2 鍵滑鼠和3鍵滑鼠的區別在於每次按下中間鍵時，是自動偵測還是自動模擬信號傳給<prgn>gpm</prgn>。
<p>
對於在X協定<ref id="gpmraw">或不使用<prgn>gpm</prgn>，可使用下面的設定：
<list compact>
<item><tt>IntelliMouse</tt>: 串列埠滑鼠(<prgn>gpm</prgn>轉換器使用"ms3")
<item><tt>PS/2</tt>: PS/2滑鼠(通常首先試試這項) 
<item><tt>IMPS/2</tt>: 任何PS/2滑鼠(2鍵、3鍵或滾軸滑鼠) 
<item><tt>MouseManPlusPS/2</tt>: Logitech PS/2滑鼠 
<item><tt>...</tt>
</list>
更多資訊可瀏覽<url id="&mousexf86;" name="Mouse Support in XFree86">。
<p>
典型的 Microsoft 滾軸滑鼠，有報導說這樣設定最好：
<example>
/etc/gpm.conf            | /etc/X11/XF86Config-4
=========================+======================================
device=/dev/psaux        | Section "InputDevice"
responsiveness=          |  Identifier "Configured Mouse"
repeat_type=raw          |  Driver     "mouse"
type=autops2             |  Option     "CorePointer"
append=""                |  Option     "Device"   "/dev/mouse"
sample_rate=             |  Option     "Protocol" "IMPS/2"
                         |  Option     "Buttons" "5"
                         |  Option  "ZAxisMapping" "4 5"
                         | EndSection
</example>
<p>
對於某些最新的 Toshiba 超薄筆記型電腦，在 System-V init 腳本中設定<prgn>gpm</prgn>先於PCMCIA啟動可防止系統鎖死。聽起來古怪不過是真的。

<sect1>USB 滑鼠
<p>
請確定你設定了所有必需的 Kernel 選項，並在編譯核心時編入核心或模組：
<list compact>
<item>在 "Input core support" 選單下：
<list compact>
<item>"Input core support" (CONFIG_INPUT, <file>input.o</file>),
<item>"Mouse support" (CONFIG_INPUT_MOUSEDEV, <file>mousedev.o</file>),
</list>
<item>在 "USB support" 選單下：
<list compact>
<item>"Support for USB" (CONFIG_USB, <file>usbcore.o</file>),
<item>"Preliminary USB device filesystem" (CONFIG_USB_DEVICEFS),
<item>"UHCI" or "OHCI" (CONFIG_USB_UHCI || CONFIG_USB_UHCI_ALT ||
       CONFIG_USB_OHCI, <file>usb-uhci.o</file> || <file>uhci.o</file> ||
       <file>usb-ohci.o</file>),
<item>"USB Human Interface Device (full HID) support" (CONFIG_USB_HID,
      <file>hid.o</file>), and
<item>"HID input layer support" (CONFIG_USB_HIDINPUT)
</list>
</list>
這邊的小寫字串為模組名稱。
<p>
如果你沒使用devfs，則需按下面的方法建立一個設備節點<file>/dev/input/mice</file>：
<example>
# cd /dev
# mkdir input
# mknod input/mice c 13 63
</example>
<p>
對於典型的滾軸<strong>USB</strong>滑鼠，設定如下：
<example>
/etc/gpm.conf            | /etc/X11/XF86Config-4
=========================+======================================
device=/dev/input/mice   | Section "InputDevice"
responsiveness=          |  Identifier "Generic Mouse"
repeat_type=raw          |  Driver     "mouse"
type=autops2             |  Option     "SendCoreEvents" "true"
append=""                |  Option     "Device"   "/dev/input/mice"
sample_rate=             |  Option     "Protocol" "IMPS/2"
                         |  Option     "Buttons" "5"
                         |  Option  "ZAxisMapping" "4 5"
                         | EndSection
</example>
<p>
更多資訊可瀏覽<url id="&linuxusb;" name="the Linux USB Project">。

<sect1>觸控版（Touchpad）
<p>
盡管觸控版在筆記型電腦上預設是模擬 2 鍵 PS/2 滑鼠行為，仍可從<package>tpconfig</package>套件獲得對這類設備的完全操控。例如在<file>/etc/default/tpconfig</file>中設定<tt>OPTIONS="--tapmode=0"</tt>可取消討厭的“click by tap”行為。按如下方法設定<file>/etc/gpm.conf</file>可以控制台下使用觸控版和 USB 外接滑鼠。
<example>
device=/dev/psaux
responsiveness=
repeat_type=ms3
type=autops2
append="-M -m /dev/input/mice -t autops2"
sample_rate=
</example>

</sect>

<sect id="nfs">NFS設定
<p>
安裝NFS要設定<file>/etc/exports</file>。
<example>
# apt-get install nfs-kernel-server
# echo "/ *.domainname-for-lan-hosts(rw,no_root_squash,nohide)" \
        &gt;&gt; /etc/exports
</example>
<url id="&examples;" name="詳情見我的 script 範例">.
</sect>

<sect id="samba">Samba設定
<p>
參考資料：
<list compact>
<item><url id="&sambahome;">
<item><package>samba-doc</package> package
</list>
<p>
以“share”方式安裝 Samba 比較容易，因為安裝過程會建立WfW-type共享驅動器。但最好使用“user”模式來設定它。
<p>
可以用<prgn>debconf</prgn>或<prgn>vi</prgn>來設定Samba：

<example>
# dpkg-reconfigure --priority=<var>low</var> samba # in Woody
# vi /etc/samba/smb.conf
</example>
<url id="&examples;" name="詳情參閱我的 script 範例">.
<p>
可透過<prgn>smbpasswd</prgn>向 <file>smbpasswd</file> 檔案新增一個新使用者：
<example>
$ su -c "smbpasswd -a username"
</example>
確保使用的加密密碼有恰當的相容性。
<p>
按下表中相應的值設定<tt>os level</tt>（數字越大，伺服器的優先級越高）：
<example>
0:      Samba with a loose attitude (will never become a master browser)
1:      WfW 3.1, Win95, Win98, Win/Me?
16:     Win NT WS 3.51
17:     Win NT WS 4.0
32:     Win NT SVR 3.51
33:     Win NT SVR 4.0
255:    Samba with mighty power
</example>
確認使用者是目錄所屬組的成員，並且對目錄賦予了執行權限。
</sect>

<sect id="printer">印表機設定
<p>
傳統列印方法是<prgn>lpr</prgn>/<prgn>lpd</prgn>。新的 CUPS 系統（Common UNIX Pinting System）提供了另一方法PDQ，詳情參閱<url id="&printing-howto;" name="Linux Printing HOWTO">。

<sect1 id="lprlpd"><prgn>lpr</prgn>/<prgn>lpd</prgn>
<p>
For the <prgn>lpr</prgn>/<prgn>lpd</prgn>的列印緩衝池（type spoolers）（<package>lpr</package>、<package>lprng</package>和<package>gnulpr</package>），如果它們連接的是PostScript或text-only印表機（最基本的印表機）可按如下方式設定<file>/etc/printcap</file>：
<example>
<var>lp</var>|<var>alias</var>:\
        :sd=/var/spool/lpd/<var>lp</var>:\
        :mx#0:\
        :sh:\
        :lp=/dev/lp0:
</example>
上述各行的意思是：
<list compact>
<item>Head line: <var>lp</var> &ndash; spool名稱, <var>alias</var> =
 alias
<item>mx#0 &ndash; 不限最大文件尺寸
<item>sh &ndash; 不列印頁眉 
<item>lp=/dev/lp0 &ndash; 本地機印機，或port@host遠程印表機 
</list>
如果連接的是台PostScript印表機，上述設定就夠用了。如果是Windows機器透過Samba列印，上述設定也適用於任何Windows支援的印表機（不支援雙向通信）。你必須在Windows環境中對印表機做相應的設定。
<p>
如果你沒有PostScript印表機，就得用<prgn>gs</prgn>安裝過濾系統。有很多自動設定工具可用於設定<file>/etc/printcap</file>，可選擇下列任何一組：
<list compact>
<item><package>gnulpr</package>、(<package>lpr-ppd</package>)和<package>printtool</package>&mdash; 我就是用這種
<item><package>lpr</package>和<package>apsfilter</package>
<item><package>lpr</package>和<package>magicfilter</package>
<item><package>lprng</package>和<package>lprngtool</package>
<item><package>lprng</package>和<package>apsfilter</package>
<item><package>lprng</package>和<package>magicfilter</package>
<!-- I can think of more combinations but I add them if someone  
  actually report me they got it working with them.  -->
</list>
<p>
想執行GUI設定工具如<prgn>printtool</prgn>，需要 root 權限，參閱<ref id="ss-xsu">。<prgn>printtool</prgn>可建立列印緩衝池，它使用<prgn>gs</prgn>模擬PostScript印表機，所以要使用PostScript列印驅動來存取它們。在Windows端，“Apple LaserWriter”是標準件。
</sect1>

<sect1 id="cups">CUPS&trade;
<p>
安裝 Common UNIX Printing System (or CUPS&trade;) 所有的套件，請開啟 <prgn>aptitude</prgn> 並選擇：
"Tasks" -&gt; 
"Servers" -&gt; 
"Print Server".  (Sarge)
為了最好的結果，您必須設定 <prgn>aptitude</prgn> 如下：
"F10" -&gt;
"Options" -&gt; 
"Dependency handling" -&gt; 
"[X] Install Recommended packages automatically".
<p>
KDE 和 Gnome 桌面系統提供了簡易的印表機設定。如果有安裝 <package>swat</package>，您也能使用瀏覽器來設定：
</p>
<p>
<example>
$ <var>mybrowser</var> http://localhost:631
</example>
</p>
<p>
舉個例子，將你的印表機連接到可存取印表機清單中：
<list>
<item>在主頁面上點擊“Printers”，然後點“Add Printer”，
<item>輸入使用者名和密碼，進入“root”，
<item>按提示新增印表機，
<item>返回“Printers”頁面，點選“Configure Printer”，
<item>設定列印紙尺寸、解析度和其它參數。
</list>
更多資訊可瀏覽<url id="http://localhost:631/documentation.html">和<url id="&cups-help;">。
<p>
</sect1>
</sect>

<sect id="anacron">桌上型電腦使用CRON
<p>
Vixie<package>cron</package>預設會自動安裝，它可用來排定工作。
如果你的電腦不是24/7開機的話，並無多大的用處。
對桌上型來說，你或許會安裝<package>anacron</package>來取代<package>cron</package>以解決這樣的問題。
<package>fcron</package>也是另一套值得推薦的軟體
<p>
參閱<ref id="cronjob">的說明來設定 CRON 工作。
</sect>

<sect id="post-inst">其它主機安裝提示

<sect1>初始化安裝完成後再裝些什麼
<p>
到現在，你已經擁有一個小巧但功能頗強的&debian;。接下來，可以安裝那些較大的套件了。
<list>
<item>執行<prgn>tasksel</prgn>。參閱<ref id="tasksel">。
<p>
可按需求選擇：
<list compact>
<item>End-user &ndash; X window system
<item>Development &ndash; C and C++
<item>Development &ndash; Python
<item>Development &ndash; Tcl/Tk
<item>Miscellaneous &ndash; TeX/LaTeX environment
<item>For others &ndash;我把t<prgn>tasksel</prgn>作為安裝指導，查看&lt;Task Info&gt;了解有關任務的安裝清單 然後用<prgn>dselect</prgn>來選擇安裝。 
</list>

<item>執行<prgn>dselect</prgn>。
<p>
在此，你最想做的事就是選擇鐘愛的編輯器和其它需要的程序。你可以同時安裝Emacs的多個變種。參閱<ref id="dselect">和<ref id="pop-editor">。
<p>
你也可以將某些預設的套件替換成特定版本。
<list compact>
<item>... <!-- Add list in generic way. -->
</list>
<item>...
</list>

我通常會編輯<file>/etc/inittab</file>簡化關機步驟。
<example>
...
# What to do when CTRL-ALT-DEL is pressed.
ca:12345:ctrlaltdel:/sbin/shutdown -t1 -a -h now
...
</example>
</sect1>

<sect1>模組
<p>
在初始安裝期間可進行設備驅動模組設定。以後還可使用<prgn>modconf</prgn>進行設定，它是基於選單介面的工具，可用來設定那些在初始安裝時未曾設定的模組或完成新核心安裝後的設定工作。
<p>
所有預加載（preloading）模組的名稱要加入到<file>/etc/modules</file>清單。也可以使用<prgn>lsmod</prgn>和<prgn>depmod</prgn>進行手工操控。
<p>
對於2.4版核心別忘了在<file>/etc/modules</file>中加上幾行來處理IP偽裝（ftp等）。參閱<ref id="kernel-modules">，特別是<ref id="kernel-net">。

</sect1>

<sect1>CD-RW基本步驟
<p>
使用 IDE CD-RW 和 kernel 2.4 的話，請編輯下列文件：
<example>
/etc/lilo.conf  (新增append="hdc=ide-scsi ignore=hdc", 
                 執行 lilo 啟動)
/dev/cdrom      (建立鏈接 # cd /dev; ln -sf scd0 cdrom )
/etc/modules    (add "ide-scsi"和"sg"。如果需要可再加上"sr"。)
</example>
詳情參閱<ref id="cdrw">。
</sect1>

<sect1 id="apm">大記憶體和關機自動斷電
<p>
編輯<file>/etc/lilo.conf</file>，設定啟動提示參數如下，實現識別大記憶體（適用於2.2版核心）和關機自動斷電（適用於APM）：
<example>
append="mem=128M apm=on apm=power-off noapic"
</example>
執行<prgn>lilo</prgn>完成上述設定。對稱多處理器核心（SMP-kernel）需要<tt>apm=power-off</tt>和<tt>noapic</tt>才能避免我那堆糟糕的 SMP 硬體出問題。系統啟動時，在啟動提示符後直接輸入這些參數效果也一樣。參閱<ref id="bootprompt">。
<p>
在 Debian 的2.4版核心中 APM 是作為模組編譯的，對於這種情況，可在系統啟動後執行<tt># insmod apm power_off=1</tt>或設定<file>/etc/modules</file>：
<example>
# echo "apm power_off=1" &gt;&gt;/etc/modules
</example>
<p>
還可以這樣：編譯新版核心時加入 ACPI 支援可達到同樣的效果，而且這種方式更適合SMP（只有較新的主機板才支援ACPI）。對於較新的主機板2.4版核心可以直接檢測到大記憶體。
<example>
CONFIG_PM=y
CONFIG_ACPI=y
...
CONFIG_ACPI_BUSMGR=m
CONFIG_ACPI_SYS=m
</example>
在<file>/etc/modules</file>中按如下順序新增參數：
<example>
ospm_busmgr
ospm_system
</example>
或者重新編譯核心，在設定時將上述核心選項均設為“y”。總之，有了ACPI支援就不再需要任何啟動提示參數。
</sect1>

<sect1 id="killecn">無法存取某此站台的怪問題
<p>
新的Linux核心預設開啟ECN，對於某些使用劣質路由器的站台，會出現無法存取的問題。檢查ECN狀態可使用：
<example>
# cat /proc/sys/net/ipv4/tcp_ecn
 ... 或
# sysctl net.ipv4.tcp_ecn
</example>
將它關閉：
<example>
# echo "0" > /proc/sys/net/ipv4/tcp_ecn
 ... 或
# sysctl -w net.ipv4.tcp_ecn=0
</example>
每次啟動時禁止TCP ECN，可編輯<file>/etc/sysctl.conf</file>，加上：
<example>
net.ipv4.tcp_ecn = 0
</example>
</sect1>

<sect1>PPP 撥號設定
<p>
安裝<package>pppconfig</package>套件，設定 PPP 撥號存取。
<example>
# apt-get install pppconfig
# pppconfig
 ... 依照提示設定 PPP 撥號
# adduser <var>user_name</var> dip
 ... 允許<var>user_name</var>進行 PPP 撥號存取
</example>
使用者（<var>user_name</var>）進行 PPP 撥號存取：
<example>
$ pon <var>ISP_name</var>  # 開始 PPP 存取，接通你的ISP
 ... enjoy the Internet
$ poff <var>ISP_name</var> # 停止 PPP 存取, <var>ISP_name</var>可選
</example>
詳情參閱 <ref id="low-ppp">。
</sect1>

<sect1><file>/etc/</file>中的其它設定文件
<p>
Debian 標準安裝不包含 <file>/etc/cron.deny</file> 文件，想新增可拷貝 <file>/etc/at.deny</file>。
</sect1>

</sect>

</chapt>

