<!-- CVS revision of this document "$Revision: 1.4 $"  -->
<!-- CVS revision of original english document "1.38" -->

<chapt id="tutorial">&debian; 教學

<p>
本章為初涉 Linux 世界的新手指出了一個基本的方向。如果你接觸 Linux 已有一段時間，可以當成是一次實戰測驗。

<sect>資訊來源
<p>
到 <url id="&debiandoc;" name="Debian Documentation Project (DDP)"> 看看，那兒有最權威的 Debian 參考資料。其中的許多文件通常都安裝在 <file>/usr/share/doc/</file>。也可以到 <file>/usr/share/doc-base/</file> 看看，那裡提供了系統之中文件的指引。在 <file>~/.bash_profile</file> 中加入 <tt>export CDPATH=.:/usr/share/doc:/usr/src/local</tt>，這樣可以更容易地讀取這些文件目錄。
<p>
在 <url id="&linuxdoc;" name="Linux Documentation Project (LDP)"> 中有最權威的 Linux 通用參考資料。 LDP 的資料通常安裝在 <file>/usr/share/doc/HOWTO/</file> 目錄下。
<p>
如果要瀏覽本地或遠端 FTP 站台的文件的話，在 Midnight Commander 中按下 F9 試試 (參閱 <ref id="mc">)。
</sect>

<sect>Linux 控制台 (console)

<sect1 id="login">登入
<p>
在一般 Linux 系統中，會有六個獨立的偽終端 (pseudo-terminals)。同時按下 Left-Alt 鍵和 F1&ndash;F6 鍵可在這些偽終端間切換。每個偽終端均需分別登入。多使用者環境是 Unix 重要的特性，你一定會用上癮的。
<p>
使用一般使用者帳號工作是使用 Unix 的好習慣。不得不承認，我過去常僅僅為圖個方便而濫用超級使用者帳號 (root)。
<p>
現在，我通常使用一般的帳號，再利用 <tt>sudo</tt> 、 <tt>super</tt> 或 <tt>su -c</tt> 來獲得有限的 root 權限。
</sect1>

<sect1 id="newuser">增加使用者帳號
<p>
系統安裝完畢後，我通常會新增一個一般使用者帳號。如果使用者名稱為 "penguin"，則
<example>
# adduser penguin
</example>
就可以建立帳號。
<p>
我使用 <tt>vigr</tt> 命令來編輯 <file>/etc/group</file> ：
<example>
adm:x:4:admin
src:x:40:admin, debian, ...
...
</example>
在系統預設安裝狀態下， <tt>adm</tt> 群組成員可以讀取在 <file>/var/log/</file> 下的許多記錄檔，並且可以使用 <prgn>xconsole</prgn> 。 <file>/home</file> 是由 <tt>staff</tt> 群組所擁有，所以其成員適合於進行使用者帳號維護的工作，而 <tt>src</tt> 群組擁有 <file>/usr/src/</file> ，所以其成員可以編譯核心等等。有關使用者及群組的規範描述可參閱最新的 <url id="&f-users-and-groups;" name="users-and-groups"> 文件。
<p>
我個人使用 <tt>adm</tt> 群組來管理那些具有管理員職責和排它性的 <prgn>su</prgn> 特權的使用者 (參閱 <ref id="wheel">)，而將 CVS 用戶歸屬 <tt>src</tt> 群組 (參閱 <ref id="cvs">)。
<p>
用 <prgn>adduser</prgn> ， <prgn>addgroup</prgn> ， <prgn>vipw</prgn> ， <tt>vipw -s</tt> ， <prgn>vigr</prgn> ，以及 <tt>vigr -s</tt> 檢查一下使用者及群組是否配置得當。
</sect1>

<sect1>如何關機
<p>
Linux 和任何現代的 OS 一樣，檔案會暫存於記憶體中，所以在安全切斷電源之前需要完成適當的關機程序。這裡是多使用者模式下使用的指令：
<example>
# shutdown -h now
</example>
這是單一使用者模式下使用的命令：
<example>
# poweroff -i -f
</example>
等待螢幕上顯示 "System halted" 文字之後切斷電源。如果 BIOS 和 Linux 開啟了 APM ，系統會自動切斷電源。詳情參閱 <ref id="apm">。
</sect1>

<sect1>命令列編輯
<p>
預設的 shell 是 <prgn>bash</prgn> ，它能記住使用過的命令 (history-editing)。只需按上下鍵就會出現之前的命令，然後就可以用游標 (cursor) 來輸入。其它需要牢記的重要按鍵有：
<example>
Ctrl-U:                    清除一行中游標之前的文字
Ctrl-D:                    結束輸入
Left-click-and-drag mouse: 選取並拷貝至剪貼簿 (gpm)
Click middle mouse button: 將剪貼簿內容貼至游標處 (gpm)
Ctrl-V TAB:                輸入 TAB，而不是命令列擴展
</example>
<p>
在一般的 Linux console 中，只有左邊的 Ctrl 和 Alt 鍵有作用。
</sect1>

<sect1>執行命令
<p>
典型的命令執行方法是使用如下的 shell 命令列：
<example>
$ LC_ALL=fr ls -la
</example>
在此，程式 <prgn>ls</prgn> 是在前景執行，並以 <tt>-la</tt> 為參數以詳細列出目錄中所有的內容，並將其執行時的環境變數 <tt>LC_ALL</tt> 設為 <tt>fr</tt> 以設定為法國區域 (locale)。如果命令列是以 <tt>&amp;</tt> 為結尾的話，則此命令會在背景執行。使用者在單一 shell 中允許以背景執行的工作來執行多個程式。
<p>
可用下列的按鍵來管理命令的執行。
<example>
Ctrl-C:                  中止程式
Ctrl-Z:                  暫停程式
Ctrl-S:                  停止畫面輸出
Ctrl-Q:                  恢復畫面輸出
Ctrl-Alt-Del:            重開/關閉系統 (參閱 /etc/inittab)
</example>
有關如何管理程式運行，可參閱 <manref name="bash" section="1"> 中的 <tt>jobs</tt> 、 <tt>fg</tt> 、 <tt>bg</tt> 和 <tt>stop</tt> 。
</sect1>

<sect1>需要牢記的基本指令
<p>
下列是最基本的 Unix 指令：
<example>
ls, ls -al, ls -d, pwd, cd, cd ~user, cd -, 
cat /etc/passwd, less, bg, fg, kill, killall, 
uname -a, type <var>commandname</var>, sync, netstat,
ping, traceroute, top, vi, ps aux, tar, zcat, 
grep, ifconfig, ...
</example>
<p>
在命令提示符號後輸入 <tt>man</tt> 或 <tt>info</tt> 再加相關指令名稱，就可查看該指令的意思。許多 Linux 指令都可使用下列的方式來獲得簡要的說明資訊：
<example>
$ commandname --help
$ commandname -h
</example>
如果系統中的指令有說明文件的話，則 <tt>whatis <em>commandname</em></tt> 則會顯示一行摘要資訊。
</sect1>

<sect1>X Window 系統
<p>
從 console 啟動 X Window 系統：
<!-- Osamu: formal name here per request in "man 7 X" manpage -->
<example>
# exec startx
</example>
在根視窗上按右鍵可以帶出選單。
</sect1>

<sect1>重要的鍵盤指令
<p>
在 Linux 控制台中要記住的一些重要按鍵 ("plus" 、 "minus" 指數字盤上的按鍵)：
<example>
Alt-F1 至 F6:         切換至其他的偽終端 (pseudo-terminals)
Ctrl-Alt-F1 thru F6:  切換至其他的偽終端
                      (由 X window, DOSEMU 等環境中)
Alt-F7:               切換回 X window
Ctrl-Alt-minus:       在 X window 中改變螢幕解析度
Ctrl-Alt-plus:        在 X window 中以相反的方向來改變螢幕解析度
Ctrl-Alt-Backspace:   結束 X11 server 程式
Alt-X, Alt-C, Alt-V:  使用 Windows/Mac 剪下，複製，貼上鍵
        在如 Netscape Composer 等程式中，這些結合 Alt- 的按鍵取代了結合 Ctrl- 的按鍵。
</example>
</sect1>
</sect>

<sect id="mc">Midnight Commander (MC)
<p>
Midnight Commander (MC) 是 GNU 在 Linux 控制台和其他終端環境的一把 "瑞士刀"。

<sect1>安裝 MC
<p>
<example>
# apt-get install mc
</example>
然後修改 <file>~/.bashrc</file> (或是由 <file>.bashrc</file> 呼叫的 <file>/etc/bash.bashrc</file>)，使用 <tt>-P</tt> 選項，就像在說明頁面 <manref name="mc" section="1"> 中的敘述，這會使得 MC 在退出時就更改其工作目錄。
<p>
如果是在像 <prgn>kon</prgn> 和 <prgn>Kterm</prgn> for Japanese 等使用某些圖形特性的終端的話，則在命令列中加上 <tt>-a</tt> 可以預防 MC 出現一些問題。
</sect1>

<sect1>啟動 MC
<p>
<example>
$ mc
</example>
在 MC 中可使用選單來完成所有的檔案操作，只需要使用者小小的嚐試一下就行了。
</sect1>

<sect1>檔案管理
<p>
預設狀態是兩個目錄面板列出檔案列表。另一種好用的模式是將右邊視窗設定為 "information" ，以查看檔案存取權限等資訊。下面是一些基本的按鍵。如果 <prgn>gpm</prgn> daemon 在運作的話，你還可以使用滑鼠。 (在 MC 中進行剪下和貼上操作時別忘了按下 shift 鍵。)
<list compact>
<item>F1: 說明選單
<item>F3: 內建的檔案檢視器
<item>F4: 內建的編輯器
<item>F9: 啟動下拉選單
<item>F10: 離開 Midnight Commander
<item>Tab: 在兩個視窗間移動
<item>Insert: 標記檔案以方便多檔案的操作，如複製
<item>Del: 刪除檔案 (小心&mdash;以 MC 設定為安全刪除模式。)
<item>方向鍵：就是方向鍵
</list>
</sect1>

<sect1>命令列的技巧
<p>
<list>
<item>任何 <prgn>cd</prgn> 命令會改變所選畫面的目錄。
<item>Ctrl-Enter 或 Alt-Enter 會將檔案名稱複製到命令列上。配合 <prgn>cp</prgn> 或 <prgn>mv</prgn> 命令使用來做命令列的編輯。
<item>Alt-Tab 會顯示出 shell 的檔名擴展以供選擇。
<item>可指定 MC 兩個目錄視窗的起始目錄；例如 <tt>mc /etc /root</tt> 。
<item>Esc + <var>數字鍵</var> == F<var>n</var> (也就是說，
      Esc + `1' = F1 等等。
      Esc + `0' = F10)
<item>Esc 鍵       == Alt 鍵 (= Meta ， M-) ；也就是說，輸入 Esc + `c' 就等於 Alt-c
</list>
</sect1>

<sect1 id="mcedit">編輯器
<p>
內建編輯器的剪下－貼上方式很有意思。按 F3 標記起始點，再次按 F3 標記終止點，而中間的選取部分會高亮度顯示。然後你可以移動游標到某處按下 F6 ，被選取部分就會移到該處。如果你按下的是 F5 ，選中部分就會複製到該處。 F2 會儲存檔案， F10 是退出，所有方向鍵的作用則和它們的名字一樣直觀。
<p>
可用編輯器直接打開某個檔案：
<example>
$ mc -e filename_to_edit
$ mcedit filename_to_edit
</example>
<p>
雖然它不是多視窗編輯器，但你可利用多個 Linux 控制台來達成相同的效果。要在視窗間進行複製動作，可使用 Alt-F<var>n</var> 來切換虛擬控制台，然後使用 "File-&gt;Insert file" 或 "File-&gt;Copy to file" 將一個檔案中的內容複製到另一個檔案。
<!-- Osamu: you could try "&rarr;" instead of "-&gt;" to get a right arrow
above. It's valid SGML, but I don't know if all browsers support it. 
Jens: "&rarr;" doesn't split a line in "->" (after "-")

For this version 1, let us keep it as is for consistency.  
I will think about it for version 2,  Thanks. 

Anyway, PS/PDF compile is real problem (Jens: LaTeX supports \rightarrow!)
-->
<p>
可指定任何外部編輯器來取代內建的編輯器。
<p>
許多程式使用環境變數 <tt>EDITOR</tt> 或 <tt>VISUAL</tt> 來決定使用哪個編輯器。如果你用不慣 vim，可在 <file>~/.bashrc</file> 中加上幾行來指定使用 <tt>mcedit</tt> ：
<example>
...
export EDITOR=mcedit
export VISUAL=mcedit
...
</example>
<p>
我推薦設定為 <tt>vim</tt> 。習慣 vi(m) 是件好事，因為在 Linux/Unix 世界裡你總找得到它們。
</sect1>

<sect1>檢視器
<p>
非常聰明的檢視器。它是在文件中搜索單詞的利器。我總是用它在 <file>/usr/share/doc</file> 目錄下找檔案，用它來瀏覽大量的 Linux 資料是最快的方法。檢視器可以像這樣直接啟動：
<example>
$ mc -v filename_to_view
</example>
(注意，有些違反規範的套件仍將它們的文件放在 <file>/usr/doc</file> 目錄下。)
</sect1>

<sect1>自動啟動特性
<p>
在檔案上按 Enter，會啟動相關的程式來處理該檔案。這是 MC 的一個極方便的特性。
<example>
executable:        執行命令
man, html file:    將檔案內容導向 (Pipe) 至檢視軟體
tar, gz, rpm file: 像子目錄般的瀏覽其內容
</example>
為了使這些文件特性生效，不要將可閱讀的檔案設成可執行檔。可使用 MC 的檔案選單或使用 <prgn>chmod</prgn> 來改變檔案屬性。
</sect1>

<sect1>FTP 虛擬檔案系統
<p>
MC 可通過 FTP 來存取網路上的檔案。按 F9 轉到選單列，輸入 `p' 啟動 FTP 虛擬檔案系統。以 <tt>username:passwd@hostname.domainname</tt> 格式輸入 URL ，遠端的目錄就會像本地端目錄一樣顯示出來。
</sect1>

</sect>

<sect id="file-system">GNU/Linux 檔案系統基礎
<p>
在 GNU/Linux 系統中每個檔案和目錄都與由一個使用者所擁有 (擁有者) 並屬於一個群組。所有的檔案資訊都保存在一個稱為 <strong>inode</strong> 的資料結構中。

<sect1 id="file-perm">檔案和目錄的存取權限
<p>
檔案和目錄的存取權限對下面三種使用者分別定義：
<list compact>
<item>檔案擁有者 <strong>user</strong> (u) ，
<item>檔案所屬群組的使用者 <strong>group</strong> (g) 和
<item>所有使用者 <strong>other</strong> (o) 。
</list>
<p>
對檔案來說，每個權限分別對應到一些可做的動作：
<list compact>
<item>讀取<strong>read</strong> (r)：查看檔案的內容
<item>寫入<strong>write</strong> (w)：對檔案作修改
<item>執行<strong>execute</strong> (x)：把檔案當作指令來執行
</list>
<p>
對目錄來說，每個權限分別對應到一些可做的動作：
<list compact>
<item>讀取<strong>read</strong> (r)：列出目錄的內容
<item>寫入<strong>write</strong> (w)：在目錄中加入或刪除檔案
<item>執行<strong>execute</strong> (x)：存取目錄中的檔案
</list>
在這裡， 目錄的<strong>執行</strong>權限不只代表允許讀取目錄內的檔案，也代表允許看到它們的屬性，像是檔案大小和更動時間等。
<p>
使用 <prgn>ls</prgn> 來顯示檔案和目錄的權限資訊 (和更多其他的資訊). 請參閱 <manref name="ls" section="1"> 。當使用 <prgn>ls</prgn> 的 <tt>-l</tt> 選項，則會依下列順序來顯示相關資訊：
<list compact>
<item><strong>檔案型態</strong> (第一字元)
 <list compact>
 <item>-: 一般檔案
 <item>d: 目錄
 <item>l: 符號連結
 <item>c: 字元狀置節點
 <item>b: 區塊狀置節點
 </list>
<item>檔案的存取<strong>權限</strong> (之後九個字元，依序是擁有者，群組，其他，各三個字元)
<item>檔案的<strong>硬連結個數</strong>
<item>檔案<strong>擁有者</strong>名稱
<item>檔案所屬<strong>群組</strong>名稱
<item>檔案<strong>大小</strong> (以 bytes 為單位)
<item>檔案的<strong>目期和時間</strong> (mtime)
<item>檔案的<strong>名稱</strong>。
</list>
<p>
在 root 帳號下可使用 <prgn>chown</prgn> 改變檔案的擁有者，參閱 <manref name="chown" section="1">。要改變檔案的所屬群組，可以用檔案擁有者或 root 的身份來執行 <prgn>chgrp</prgn>，參閱 <manref name="chgrp" section="1"> 。要改變目錄的存取權限，可以用檔案擁有者或 root 的身份來執行 <prgn>chmod</prgn> ，參閱 <manref name="chmod" section="1"> 。
<p>
例如，要建立一個目錄樹，其擁有者為 <var>foo</var> ，所屬群組為 <var>bar</var> 的話，用 root 帳號執行下列的指令：
<example>
# cd /some/location/
# chown -R <var>foo</var>:<var>bar</var> .
# chmod -R ug+rwX,o=rX .
</example>
<p>
有 3 個更特殊的權限位元：
<list compact>
<item><strong>set user ID</strong> (s 或 S 取代擁有者的 x)，
<item><strong>set group ID</strong> (s 或 S 取代群組的 x) 和
<item><strong>sticky bit</strong> (t 或 T 取代其他使用者的 x) 。
</list>
在這裡，如果設定這些特殊權限設定後蓋住了原本顯示的執行權限的話，則 <prgn>ls -l</prgn> 的輸出就會用大寫來表示。
<p>
在可執行檔上設定 <strong>set user ID</strong> 的話，會以這個檔案擁有者的身份 (如 <strong>root</strong>) 來執行這個可執行檔。同樣地，在可執行檔上設定 <strong>set group ID</strong> 的話，會以這個檔案的群組身份 (如 <strong>root</strong>) 來執行這個可執行檔。因為這些設定會導致安全性上的問題，要打開它們的話要格外小心。
<p>
在目錄上設定 <strong>set group ID</strong> 的話，會使用類似 BSD 的檔案建立規則，也就是在此目錄中建立的檔案都會屬於此目錄的<strong>群組</strong>。
<p>
在目錄上設定e <strong>sticky bit</strong> 可以防止非檔案擁有者來刪除此目錄中的檔案。在一些大家可以寫入的目錄，如 <file>/tmp</file> 或是在允許群組寫入的目錄下，為了要保持檔案內容的安全，不只要關上檔案的<strong>寫入</strong>權限，還要在目錄上設定 <strong>sticky bit</strong> 。不然的話，任何擁有目錄寫入權限的人都可以刪除檔案，並且建立一個新的同名檔案。
<p>
這裡有些關於檔案權限的有趣例子。
<example>
$ ls -l /etc/passwd /etc/shadow /dev/ppp /usr/sbin/pppd
crw-rw----    1 root     dip      108,   0 Jan 18 13:32 /dev/ppp
-rw-r--r--    1 root     root         1051 Jan 26 08:29 /etc/passwd
-rw-r-----    1 root     shadow        746 Jan 26 08:29 /etc/shadow
-rwsr-xr--    1 root     dip        234504 Nov 24 03:58 /usr/sbin/pppd
$ ls -ld /tmp /var/tmp /usr/local /var/mail /usr/src
drwxrwxrwt    4 root     root         4096 Feb  9 16:35 /tmp
drwxrwsr-x   10 root     staff        4096 Jan 18 13:31 /usr/local
drwxrwsr-x    3 root     src          4096 Jan 19 08:36 /usr/src
drwxrwsr-x    2 root     mail         4096 Feb  2 22:19 /var/mail
drwxrwxrwt    3 root     root         4096 Jan 25 02:48 /var/tmp
</example>
</sect1>

<sect1 id="timestamp">時間戳記
<p>
在 GNU/Linux 檔案中，有三個時間戳記：
<list compact>
<item><strong>mtime</strong>：修改時間 (<tt>ls -l</tt>) ，
<item><strong>ctime</strong>：狀態改變時間 (<tt>ls -lc</tt>) 和
<item><strong>atime</strong>：最後存取時間 (<tt>ls -lu</tt>) 。
</list>
注意， <strong>ctime</strong> 並不是檔案建立時間。
<list compact>
<item>覆寫檔案會改變檔案的 <strong>mtime</strong> ， <strong>ctime</strong> 和 <strong>atime</strong> 全部的時間戳記。
<item>改變檔案權限或擁有者的話，會改變檔案的 <strong>ctime</strong> 和 <strong>atime</strong> 時間戳記。
<item>讀取檔案會改變檔案的 <strong>atime</strong> 時間戳記。
</list>
要注意的是，在 GNU/Linux 系統中，即使只是簡單的讀取檔案，通常也會為了要更新 <strong>inode</strong> 中的 <strong>atime</strong> 而導致寫入的動作。如果以 <tt>noatime</tt> 選項來掛上檔案系統的話，就可以略過這個動作而使讀取的動作加快。請參閱 <manref name="mount" section="8"> 。
</sect1>

<sect1 id="links">連結
<p>
有兩種方法可以把一個叫 <var>foo</var> 的檔案關連到另一個檔名 <var>bar</var> 。
<list compact>
<item><strong>硬式連結 (hard link)</strong> 是現存檔案的一個別名 (<tt>ln <var>foo</var> <var>bar</var></tt>) ，
<item><strong>符號連結 (symbolic link)</strong> ，或是 "symlink" ，是一個特殊的檔案，它指向另一個檔案的名稱 (<tt>ln -s <var>foo</var> <var>bar</var></tt>) 。
</list>
下面的例子顯示了在使用 <prgn>rm</prgn> 指令後，連結數的改變和一些微妙的差異。
<example>
$ echo "Original Content" &gt; <var>foo</var>
$ ls -l <var>foo</var>
-rw-r--r--    1 osamu    osamu           4 Feb  9 22:26 <var>foo</var>
$ ln <var>foo</var> <var>bar</var>     # 硬式連結
$ ln -s <var>foo</var> <var>baz</var>  # 符號連結
$ ls -l <var>foo</var> <var>bar</var> <var>baz</var>
-rw-r--r--    2 osamu    osamu           4 Feb  9 22:26 <var>bar</var>
lrwxrwxrwx    1 osamu    osamu           3 Feb  9 22:28 <var>baz</var> -&gt; <var>foo</var>
-rw-r--r--    2 osamu    osamu           4 Feb  9 22:26 <var>foo</var>
$ rm <var>foo</var>
$ echo "New Content" &gt; <var>foo</var>
$ cat <var>bar</var>
Original Content
$ cat <var>baz</var>
New Content
</example>
就像上面的例子所顯示的，符號連結的一般檔案存取權限為 "rwxrwxrwx" ，而實際的存取權限均由它們所指向的檔案來決定。
<p>
<file>.</file> 目錄是連結到其所出現的目錄，所以任何新目錄的連結數都是由 2 起跳的。而 <file>..</file> 目錄是連結到其所上層目錄，所以目錄的連結數會隨著子目錄數目而增加。
</sect1>
</sect>


<sect>後續的學習
<p>
還有許多 Unix 好的入門級參考書，在計算機的各個領域，想買到優秀的指導書， O'Reilly 不會讓你失望。 LDP 的文件 <url id="&tips-howto;" name="Tips-HOWTO"> 是另一個資源。更多資源請參閱 <ref id="support"> 。

</sect>

</chapt>

