<!-- CVS revision of this document "$Revision: 1.8 $"  -->
<!-- CVS revision of original english document "1.28"  -->
<chapt id="kernel">Le noyau Linux et Debian
<p>
Debian a une manière de recompiler le noyau Linux et les modules associés qui
lui est propre.
<sect id="kernel-compile">Recompilation du noyau

<sect1 id="kernel-debian">Méthode Debian standard
<p>
Utilisez le nouveau <package>kernel-package</package> dans unstable (7/2001).
<prgn>tar</prgn> a aussi connu des changements entre Potato et Woody, il faut
maintenant utiliser l'option <tt>-j</tt> au lieu de <tt>-I</tt> pour
<file>.bz2</file>.  Soyez attentifs aux rapports de bogues relatifs à
<prgn>gcc</prgn>, <prgn>binutils</prgn> et <prgn>modutils</prgn>.
<p>
Sous Debian, compiler un noyau "maison" à partir des sources nécessite de
prendre certaines précautions.  Utilisez la nouvelle option
<tt>--append_to_version</tt> avec <prgn>make-kpkg</prgn> pour compiler de
multiples kernel-images.
<example>
# apt-get install debhelper modutils kernel-source-2.4.12 kernel-package
# vi /etc/kernel-pkg.conf     # entrez votre nom et adresse électronique
$ cd /usr/src                 # dossier où va se faire la compilation
... télécharger depuis kernel.org ou installer le paquet 
... kernel-*-source.deb.
$ tar -xvjf kernel-source-2.4.12.tar.bz2
$ cd kernel-source-2.4.12     # si c'est votre source du noyau
$ rm -rf */pcmcia   
        # [FACULTATIF] si on veut utiliser des modules de pcmcia-cs
$ cp /boot/config-2.4.12-386 .config 
        # récupérez la configuration actuelle comme defaut
$ make menuconfig             # personnalisez votre kernel
$ make-kpkg clean             # obligatoire  (voir : man make-kpkg)
$ fakeroot make-kpkg --append_to_version -486 --initrd \
        --revision=rev.01 kernel_image
$ cd ../modules/pcmcia
$ fakeroot ./debian/rules
$ cd ../..
# dpkg -i kernel-image*.deb pcmcia-cs*.deb # installation
</example>
En réalité, <tt>make-kpkg kernel_image</tt> lance <tt>make oldconfig</tt> et
<tt>make dep</tt>.  N'utilisez pas  <tt>--initrd</tt> si initrd n'est pas
utilisé.
<p>
Vous pouvez éviter de faire <tt>rm -fr */pcmcia</tt> en sélectionnant "General
setup &mdash;&gt;" jusqu'à "PCMCIA/CardBus support  &mdash;&gt;" dans <tt>make
menuconfig</tt> et en mettant la configuration à "&lt; &gt; PCMCIA/CardBus
support". 
</sect1>

<sect1 id="kernel-classic">Méthode classique
<p>
Récupérez les sources officielles depuis :
<example>
linux:     http://www.kernel.org/
pcmcia-cs: http://pcmcia-cs.sourceforge.net/  
</example>
ou utilisez les sources équivalentes dans debian et faites ce qui suit :
<example>
# cd /usr/src
# tar xfvz linux-nimportequoi.tar.gz
# rm -rf linux
# ln -s linux-nimportequoi linux
# tar xfvz pcmcia-cs-nimportequoi.tar.gz
# ln -s pcmcia-cs-nimportequoi pcmcia
# cd linux
# rm -rf */pcmcia   
        # [FACULTATIF] si on veut utiliser les modules de pcmcia-cs
# make menuconfig
... configurez ...
# make dep
# make bzImage
... editions des fichiers de configuration pour lilo / grub ...
... déplacez /usr/src/linux/arch/i386/boot/bzImage vers boot ...
... /sbin/lilo ou ce qui se fait pour grub
# make modules; make modules_install
# cd ../pcmcia
# make config
# make all
# make install
... ajoutez les noms des module dont vous avez besoin dans /etc/modules
# shutdown -r now
... redémarrez avec le nouveau noyau ...
</example>
L'utilisation des paquets <prgn>gcc</prgn>, <prgn>binutils</prgn> et
<prgn>modutils</prgn> de Debian unstable peut faciliter les choses.
</sect1>
</sect>

<sect id="kernel-modules">Le noyau 2.4 modulaire
<p>
Les nouveaux noyaux 2.4 fournis avec Debian sont très modulaires. 
Vous devez vous assurer que les modules effectuant 
les fonctions du noyau que vous recherchez sont là.

<sect1 id="kernel-pcmcia">PCMCIA
<p>
<file>/etc/modules</file> doit contenir les lignes suivantes pour que PCMCIA
fonctionne :
<example>
# driver ISA PnP 
isa-pnp
# driver PCMCIA bas niveau
yenta_socket
</example>
Le reste est pris en charge par des scripts pcmcia (du paquet
<package>pcmcia-cs</package>), <prgn>depmod</prgn> et <prgn>kmod</prgn>. J'ai
besoin de <prgn>isa-pnp</prgn>, sûrement parce que mon portable possède une
vieille interface isa-pcmcia. Des portables récents avec une interface
cardbus-pcmcia peuvent ne pas en avoir besoin.
<p>
Miquel van Smoorenburg <email>miquels@cistron.nl</email> nous dit :
<p>
J'ai tout simplement supprimé tout ce qui a rapport à pcmcia sur mon portable
au travail, y compris cardmgr, et j'ai installé un noyau 2.4 avec le support
cardbus, et le nouveau paquet "hotplug" de Woody.
<p>
Si vous avez une carte 32 bits, vous n'avez pas besoin du paquet pcmcia; le
noyau 2.4 comprend cardservices. Et le pilote tulip standard devrait marcher
avec votre carte dlink.

&mdash;Mike
</sect1>

<sect1 id="kernel-scsi">SCSI
<p>
[NON TESTE] <file>/etc/modules</file> doit contenir les lignes suivantes pour
que  SCSI fonctionne :
<example>
# core SCSI
scsi_mod
# driver générique SCSI
sg
# disque SCSI
sd_mod
# Tous les autres modules nécessaires pour le matériel
...
</example>
<prgn>Depmod</prgn> peut peut-être se charger lui-même de certains de ces
modules.
</sect1>

<sect1 id="kernel-net">Fonctions réseau
<p>
<file>/etc/modules</file> doit contenir les lignes suivantes pour obtenir des
fonctionnalités réseau supplémentaires :
<example>
# net/ipv-4
ip_gre
ipip

# net/ipv-4/netfilter
# iptable (dans l'ordre)
ip_tables
ip_conntrack
ip_conntrack_ftp
iptable_nat
iptable_filter
iptable_mangle
#
ip_nat_ftp
ip_queue
#
ipt_LOG
ipt_MARK
ipt_MASQUERADE
ipt_MIRROR
ipt_REDIRECT
ipt_REJECT
ipt_TCPMSS
ipt_TOS
ipt_limit
ipt_mac
ipt_mark
ipt_multiport
ipt_owner
ipt_state
ipt_tcpmss
ipt_tos
ipt_unclean
#
#ipchains
#ipfwadm
</example>
Ces lignes ne sont pas optimisées. <prgn>depmod</prgn> pourrait se charger de
certains des modules.
</sect1>

<sect1 id="ext3">EXT3 FS ( &gt; 2.4.17)
<p>
Les étapes suivantes sont nécessaires pour activer le système de fichiers
journalisé Ext3, en utilisant une image du noyau Debian précompilée ( &gt;
2.4.17) :
<example>
# cd /sbin
# ln fsck.ext3 fsck.ext3,ext2 # pas propre mais nécessaire
# cd /etc; mv fstab fstab.old
# sed 's/ext2/ext3,ext2/g' &lt;fstab.old &gt;fstab
# cd /etc/mkinitrd
# echo jbd &gt;&gt;modules
# echo ext3 &gt;&gt;modules
# echo ext2 &gt;&gt;modules
# cd /
# apt-get update; apt-get install kernel-image-2.4.17-686-smp
... installe le noyau le plus récent et configure le boot 
    (lilo est exécuté)
# tune2fs -j -i 0 /dev/hda1
# tune2fs -j -i 0 /dev/hda2
... Pour tous les systèmes de fichier Ext2 convertis en Ext3
</example>
Maintenant vous pouvez redémarrer : le système fonctionne en Ext3.  Une entrée
"type" <tt>ext3,ext2</tt> dans <file>fstab</file> assure un passage sûr à Ext2
si le noyau ne supporte pas Ext3.
<p>
Si un noyau 2.4 est déjà installé et que vous ne souhaitez pas redémarrer,
faites la même chose jusqu'aux commandes <prgn>apt-get</prgn> et :
<example>
# mkinitrd -o /boot/initrd.img-2.4.17-686-smp /lib/modules/2.4.17-686-smp
# lilo
# tune2fs -j -i 0 /dev/hda1
# tune2fs -j -i 0 /dev/hda2
... pour tous les FS Ext2 convertis en Ext3
# insmod jbd
# insmod ext3 # modprobe ext3 prend peut-être tout en charge
# insmod ext2
# mount -o remount /dev/hda1
# mount -o remount /dev/hda2
... pour tous les nouveaux FS Ext3
</example>
La journalisation du système de fichier est maintenant activée.
<p>
Si <file>/etc/mkinitrd/modules</file> n'a pas été configuré quand
<prgn>mkinitrd</prgn> a été exécuté et que vous souhaitez ajouter des modules
au démarrage du système :
<example>
... à l'invite de initrd pour accéder au shell (5 sec.), appuyer sur RETURN
# insmod jbd
# insmod ext3 # modprobe ext3 prend peut-être tout en charge
# insmod ext2
# ^D
... continue le démarrage
</example>
Sur l'écran de démarrage (<prgn>dmesg</prgn>), "cramfs: wrong magic" apparaît
mais cette erreur est connue pour être sans conséquence. (Cela sera résolu
dans une prochaine version.)
<p>
Sur certains systèmes, le noyau se bloque lorsque Ext3 est activé (avec 2.4.17).
</sect1>

</sect>
</chapt>
