<!-- CVS revision of this document "$Revision: 1.19 $"  -->
<!-- CVS revision of original english document "1.41"  -->

<chapt id="kernel">Le noyau Linux et Debian
<p>
Debian a une manière de recompiler le noyau Linux et les modules associés qui
lui est propre. Voir aussi <ref id="kernel-details">.

<sect id="kernel-compile">Recompilation du noyau
<p>
L'utilisation de <prgn>gcc</prgn>, <prgn>binutils</prgn> et
<prgn>modutils</prgn> de Debian <tt>unstable</tt> peut aider lors de la
compilation du dernier noyau Linux.

<sect1 id="kernel-debian">Méthode Debian standard
<p>
Utilisez le nouveau paquet <package>kernel-package</package> de Woody. De
plus, soyez attentifs aux rapports de bogues relatifs à <prgn>gcc</prgn>,
<prgn>binutils</prgn> et <prgn>modutils</prgn>.
<p>
Sous Debian, compiler un noyau personnalisé à partir des sources nécessite de
prendre certaines précautions.  Utilisez la nouvelle option
<tt>--append_to_version</tt> avec <prgn>make-kpkg</prgn> pour compiler
plusieurs images du noyau.
<example>
# apt-get install debhelper modutils kernel-package libncurses5-dev
# apt-get install kernel-source-<var>2.4.18</var>   # utilisez la dernière version
# vi /etc/kernel-pkg.conf     # entrez votre nom et adresse électronique
$ cd /usr/src                 # dossier où va se faire la compilation
$ tar --bzip2 -xvf kernel-source-<var>2.4.18</var>.tar.bz2
$ cd kernel-source-<var>2.4.18</var>     # si c'est votre source du noyau
$ rm -rf */pcmcia   
        # [FACULTATIF] si on veut utiliser des modules de pcmcia-cs
$ cp /boot/config-<var>2.4.18-386</var> .config 
        # récupérez la configuration actuelle comme defaut
$ make menuconfig             # personnalisez votre noyau
$ make-kpkg clean             # obligatoire  (voir : man make-kpkg)
$ fakeroot make-kpkg --append_to_version -<var>486</var> --initrd \
        --revision=<var>rev.01</var> kernel_image \
	modules_image # modules_image pour pcmcia-cs* etc.
$ cd ..
# dpkg -i kernel-image*.deb pcmcia-cs*.deb # installation
</example>
En réalité, <tt>make-kpkg kernel_image</tt> lance <tt>make oldconfig</tt> et
<tt>make dep</tt>.  N'utilisez pas  <tt>--initrd</tt> si initrd n'est pas
utilisé. Le script de démarrage <file>initrd</file> actuel de &debian; a
besoin de la rustine pour le noyau <prgn>cramfs</prgn>, si vous utilisez les
sources du noyau d'une archive non Debian&nbsp; voir <url id="&bug-initrd;">.
<p>
Vous pouvez éviter de faire <tt>rm -fr */pcmcia</tt> en sélectionnant
«&nbsp;General setup &mdash;&gt;&nbsp;» dans «&nbsp;PCMCIA/CardBus support
&mdash;&gt;&nbsp;» dans <tt>make menuconfig</tt> et en mettant la
configuration à «&nbsp;&lt; &gt; PCMCIA/CardBus support&nbsp;» (càd décocher
la case). 
<p>
Sur une machine SMP, configurez CONCURRENCY_LEVEL selon <manref
name="kernel-pkg.conf" section="5">.
</sect1>

<sect1 id="kernel-classic">Méthode classique
<p>
Récupérez les sources officielles depuis&nbsp;:
<list>
<item>linux&nbsp;:     <url id="&linuxsrc;">
<item>pcmcia-cs&nbsp;: <url id="&pcmciasrc;">
</list>
ou utilisez les sources équivalentes dans Debian et faites ce qui suit&nbsp;:
<example>
# cd /usr/src
# tar xfvz linux-<var>whatever</var>.tar.gz
# rm -rf linux
# ln -s linux-<var>whatever</var> linux
# tar xfvz pcmcia-cs-<var>whatever</var>.tar.gz
# ln -s pcmcia-cs-<var>whatever</var> pcmcia
# cd linux
# rm -rf */pcmcia
        # [FACULTATIF] si on veut utiliser les modules de pcmcia-cs
# make menuconfig
... configurez ...
# make dep
# make bzImage
... editions des fichiers de configuration pour lilo / grub ...
... déplacez /usr/src/linux/arch/i386/boot/bzImage vers boot ...
... /sbin/lilo ou ce qui se fait pour grub
# make modules; make modules_install
# cd ../pcmcia
# make config
# make all
# make install
... ajoutez les noms des modules dont vous avez besoin dans /etc/modules
# shutdown -r now
... redémarrez avec le nouveau noyau ...
</example>
</sect1>

</sect>

<sect id="kernel-modules">Le noyau 2.4 modulaire
<p>
Les nouveaux noyaux 2.4 Debian fournis dans kernel-image-2.4.<var>NN</var>
sont très modulaires.  Vous devez vous assurer que les modules effectuant les
fonctions du noyau que vous recherchez sont là.

<sect1 id="kernel-pcmcia">PCMCIA
<p>
<file>/etc/modules</file> doit contenir les lignes suivantes pour que PCMCIA
fonctionne&nbsp;:
<example>
# driver ISA PnP 
isa-pnp
# driver PCMCIA bas niveau
# yenta_socket # je n'en ai apparemment pas besoin
</example>
Le reste est pris en charge par des scripts PCMCIA (du paquet
<package>pcmcia-cs</package>), <prgn>depmod</prgn> et <prgn>kmod</prgn>. J'ai
besoin de <prgn>isa-pnp</prgn>, sûrement parce que mon portable possède une
vieille interface ISA-PCMCIA. Des portables récents avec une interface
Cardbus/PCMCIA peuvent ne pas en avoir besoin.
<p>
Miquel van Smoorenburg <email>miquels@cistron.nl</email> nous dit&nbsp;:
<p>
«&nbsp;J'ai tout simplement supprimé tout ce qui a rapport à pcmcia sur mon
portable au travail, y compris cardmgr, et j'ai installé un noyau 2.4 avec le
support cardbus, et le nouveau paquet <package>hotplug</package> de Woody.
<p>
Si vous avez une carte 32 bits, vous n'avez pas besoin du paquet pcmcia&nbsp;;
le noyau 2.4 comprend cardservices. Et le pilote tulip standard devrait
marcher avec votre carte dlink.
<p>
&mdash;Mike&nbsp;»
</sect1>

<sect1 id="kernel-scsi">SCSI
<p>  <!-- Osamu: maybe test this section? I do not have SCSI :(  
                                     But this is almost sure :) -->
[NON TESTE] <file>/etc/modules</file> doit contenir les lignes suivantes pour
que  SCSI fonctionne&nbsp;:
<example>
# core SCSI
scsi_mod
# driver générique SCSI
sg
# disque SCSI
sd_mod
# Tous les autres modules nécessaires pour le matériel
...
</example>
<prgn>depmod</prgn> peut peut-être se charger lui-même de certains de ces modules.
</sect1>

<sect1 id="kernel-net">Fonctions réseau
<p>
<file>/etc/modules</file> doit contenir les lignes suivantes pour obtenir des
fonctionnalités réseau supplémentaires&nbsp;:
<example>
# net/ipv-4
ip_gre
ipip

# net/ipv-4/netfilter
# iptable (dans l'ordre)
ip_tables
ip_conntrack
ip_conntrack_ftp
iptable_nat
iptable_filter
iptable_mangle
#
ip_nat_ftp
ip_queue
#
ipt_LOG
ipt_MARK
ipt_MASQUERADE
ipt_MIRROR
ipt_REDIRECT
ipt_REJECT
ipt_TCPMSS
ipt_TOS
ipt_limit
ipt_mac
ipt_mark
ipt_multiport
ipt_owner
ipt_state
ipt_tcpmss
ipt_tos
ipt_unclean
#
#ipchains
#ipfwadm
</example>
Ces lignes ne sont pas optimisées. <prgn>depmod</prgn> pourrait se charger de
certains des modules.
</sect1>

<sect1 id="ext3">Système de fichiers EXT3 ( &gt; 2.4.17)
<p>
Les étapes suivantes sont nécessaires pour activer le système de fichiers
journalisé Ext3, en utilisant une image du noyau Debian précompilée ( &gt;
2.4.17)&nbsp;:
<example>
# cd /etc; mv fstab fstab.old
# sed 's/ext2/ext3,ext2/g' &lt;fstab.old &gt;fstab
# vi /etc/fstab
... mettre le type du système de fichier racine à "auto" au lieu de "ext3,ext2"
# cd /etc/mkinitrd
# echo jbd &gt;&gt;modules
# echo ext3 &gt;&gt;modules
# echo ext2 &gt;&gt;modules
# cd /
# apt-get update; apt-get install kernel-image-<var>2.4.17-686-smp</var>
... installe le noyau le plus récent et configure le démarrage du système
    (lilo est exécuté)
# tune2fs -j -i 0 <var>/dev/hda1</var>
# tune2fs -j -i 0 <var>/dev/hda2</var>
... Pour tous les systèmes de fichier EXT2 convertis en EXT3
# shutdown -r now
</example>
La journalisation EXT3 du système de fichier est maintenant activée. Une
entrée «&nbsp;type&nbsp;» <tt>ext3,ext2</tt> dans <file>fstab</file> assure un
passage sûr à EXT2 si le noyau ne supporte pas EXT3 pour les partitions autres
que la partition racine.
<p>
Si un noyau 2.4 est déjà installé et que vous ne souhaitez pas le réinstaller,
faites la même chose jusqu'aux commandes <prgn>apt-get</prgn> et&nbsp;:
<example>
# mkinitrd -o /boot/initrd.img-<var>2.4.17-686-smp</var>
# /lib/modules/<var>2.4.17-686-smp</var>
# lilo
# tune2fs -j -i 0 <var>/dev/hda1</var>
# tune2fs -j -i 0 <var>/dev/hda2</var>
... pour tous les FS EXT2 convertis en EXT3
# shutdown -r now
</example>
La journalisation EXT3 du système de fichier est maintenant activée.
<p>
Si <file>/etc/mkinitrd/modules</file> n'a pas été configuré quand
<prgn>mkinitrd</prgn> a été exécuté et que vous souhaitez ajouter des modules
au démarrage du système&nbsp;:
<example>
... à l'invite de initrd pour accéder au shell (5 sec.), appuyer sur RETURN
# insmod jbd
# insmod ext3 # modprobe ext3 prend peut-être tout en charge
# insmod ext2
# ^D
... continue le démarrage
</example>
Sur l'écran de démarrage (<prgn>dmesg</prgn>), «&nbsp;cramfs: wrong
magic&nbsp;» apparaît mais cette erreur est connue pour être sans conséquence.
Ce problème a été résolu dans Sarge (10/2002). Voir <url
id="&bug-ext3;"> et le <url id="&howtoext3;" name="EXT3 File System
mini-HOWTO"> ou <file>&f-howtoext3;</file> pour plus d'information.
<p>
Sur certains systèmes, le noyau se bloque lorsque EXT3 est activé mais je n'ai
eu aucun problème (avec 2.4.17).
</sect1>

<sect1 id="ss-rtl8139">Support Realtek RTL-8139 dans le noyau 2.4
<p>
Pour une raison inconnue, le module RTL-8139 ne s'appelle plus rtl8139, mais
8139too. Éditez simplement votre fichier /etc/modules pour changer l'entrée
correspondante lorsque vous mettez à jour un noyau 2.2 en 2.4.
</sect1>

</sect>
</chapt>
