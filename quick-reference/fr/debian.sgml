<!-- CVS revision of this document "$Revision: 1.8 $"  -->
<!-- CVS revision of original english document "1.29"  -->
<chapt id="package">Gestion des paquets Debian
<p>
Assurez-vous d'utiliser un proxy HTTP local en utilisant "squid" pour les
paquets téléchargés par APT. Cela permet d'améliorer considérablement les
performances de la mise à jour réseau, spécialement avec plusieurs machines
Debian sur le LAN. Ce document traite des systèmes Woody mais la plupart des
informations s'appliquent aussi à un système Potato (à part <manref
name="apt_preferences" section="5"> et ce qui a rapport à
<file>/etc/preferences)</file>).

<sect id="pkg-intro">Introduction

<sect1>Outils principaux
<p>
<example>
dselect - outil de gestion des paquets à l'aide de menus (haut niveau)
apt-get - installation de paquets (centré sur les archives de paquets, 
          APT)
dpkg    - installation de paquets (centré sur les fichiers de paquets)
aptitudes & deity - remplacements futurs de dselect (IHM APT)
</example>
Ces outils ne sont pas de même niveau. <prgn>dselect</prgn> tourne au-dessus
d'APT (en ligne de commande : <prgn>apt-get</prgn>) et <prgn>dpkg</prgn>.
Assurez-vous de mettre à jour le fichier d'état de <prgn>dselect</prgn>
(commande [U]pdate) avant la sélection si un paquet à été installé avec
<prgn>apt-get</prgn>.
</sect1>

<sect1>Outils pratiques
<p>
<example>
apt-cache         - recherche une archive de paquet dans le cache local
dpkg-reconfigure  - reconfigure un paquet déjà installé
dpkg-source       - gère les fichiers de paquets de sources
dpkg-buildpackage - automatise la création d'un fichier de paquet
...
</example>
</sect1>
</sect>

<sect id="survival">Commandes de survie Debian
<p>
Avec ces connaissances, on peut vivre une vie d'éternelle mise à jour :-)
<p>
Référez-vous à <ref id="install"> et <ref id="woody">.

<sect1 id="tasksel">Installation de <em>tâches</em> avec "<prgn>tasksel</prgn>"
<p>
"<prgn>tasksel</prgn>" est l'<em>Installateur de Tâches Debian</em>, qui est
offert comme option "<tt>simple</tt>" pendant l'installation du système.
<p>
Si on souhaite installer une fonction courante qui requiert plusieurs paquets,
c'est le meilleur moyen. Assurez-vous d'exécuter les commandes dans l'ordre
suivant :
<example>
# dselect update
# tasksel
</example>
</sect1>

<sect1 id="apt-install">Système d'installation avec APT
<p>
Vous pouvez installer des paquets provenant de différentes archives en
utilisant un <prgn>apt-get</prgn> récent (&gt;woody). Ceci permet de
sélectionner des paquets de "unstable" et des paquets de "stable" tout en
fonctionnant avec "testing".
<example>
# apt-cache policy libc6 libc6-dev locales # vérifie l'état des paquets
# apt-get install libc6=2.2.4-1 libc6-dev=2.2.4-1 locales=2.2.4-1
# apt-get install libc6/unstable libc6-dev/unstable locales/unstable
# apt-get install -t unstable libc6 libc6-dev locales
# apt-get -u install interesting-new-package remove-package-
# apt-get remove useless-old-package
# apt-get remove --purge really-useless-old-package
</example>
<p>
Pour faire une mise à niveau inférieur vers "stable", éditez
<file>/etc/apt/preferences</file> comme suit :
<example>
Package: *
Pin: release a=stable
Pin-Priority: 1001
</example>
et lancez <tt>apt-get upgrade</tt>, ce qui force la mise à niveau inférieur
grâce à Pin-priority &gt; 1000.
</sect1>

<sect1 id="apt-upgrade">Système de mise à jour avec APT
<p>
Système de mise à jour avec APT :
<example>
# apt-get update
... puis lancez l'une des commandes suivantes :
# apt-get -u upgrade          # récupère tous les paquets recommandés
# apt-get -u dist-upgrade     
    # récupère tous les paquets recommandés et vérifie les dépendances
# apt-get -u dselect-upgrade  # suit la sélection avec dselect
</example>
Utilisez l'option <tt>-s</tt> pour simuler la mise à jour sans l'effectuer.
<p>
<prgn>dselect</prgn> offre une interface à base de menus au-dessus d'APT.
<prgn>deity</prgn> et <prgn>aptitude</prgn> offriront des solutions de
rechange pour <prgn>dselect</prgn>.
</sect1>

<sect1 id="bug-check">Rechercher les bugs de Debian
<P>
Habituellement, la plupart des problèmes ont déjà été trouvés. Consultez ce
qui suit en premier :
<example>
$ lynx http://bugs.debian.org/
$ lynx http://bugs.debian.org/&lt;packagename&gt;
</example>
Utilisez le moteur de recherche Google (www.google.com) en incluant
"site:debian.org" comme mot-clé.
<p>
En cas de doute, lisez la documentation. Positionnez <tt>CDPATH</tt> comme
suit :
<example>
export CDPATH=.:/usr/local:/usr/share/doc
</example>
et tapez
<example>
$ cd &lt;packagename&gt;
$ mc &lt;packagename&gt;
</example>
</sect1>

<sect1 id="apt-trouble">Résolution de problèmes de mise à jour avec APT
<p>
Des problèmes de dépendances peuvent arriver lors de la mise à jour vers
unstable/testing. La plupart du temps, c'est parce qu'un paquet qui doit être
mis à jour possède une dépendance qui n'est pas trouvée. Ces problèmes sont
résolus en utilisant : 
<example>
# apt-get dist-upgrade
</example>
Si cela ne marche pas, répétez les opérations suivantes jusqu'à ce que le
problème se résolve tout seul :
<example>
# apt-get upgrade -f         # continue "upgrade" malgré les erreurs
... ou
# apt-get dist-upgrade -f    # continue "dist-upgrade" malgré les erreurs
</example>
<p>
De mauvais scripts de mise à jour peuvent causer des problèmes récurrents. Il
est recommandé de résoudre se genre de situations en consultant les scripts
<file>/var/lib/dpkg/info/packagename.<em>{post-,pre-}{install,removal}</em></file>
du paquet en question et de lancer :
<example>
# dpkg --configure -a        # configure les paquets partiellement installés
</example>
<p>
Si un script se plaint d'un fichier de configuration manquant, regardez dans
<file>/etc</file> pour le fichier de configuration correspondant. Si un
fichier de configuration avec une extension <tt>.new</tt> existe, renommez-le
(<prgn>mv</prgn>) en un fichier sans suffixe.
<p>
Des problèmes de dépendances peuvent survenir en installant des paquets de
unstable/testing. Il existe des moyens de passer outre les dépendances.
<example>
# apt-get install -f package # passe outre les dépendances non résolues
</example>
<p>
Une autre méthode pour résoudre ces problèmes est d'utiliser le paquet
<package>equivs</package>.  Voir <ref id="equivs">.
</sect1>

<sect1 id="rescue-dpkg">Sauvetage avec <prgn>dpkg</prgn>
<p>
La récupération d'un <prgn>dselect</prgn> qui ne fonctionne plus en utilisant
<prgn>dpkg</prgn> sans APT est possible sur un système complètement cassé.
<example>
# cd /var/cache/apt/archive
# dpkg -i libc6* libdb2* perl*
# dpkg -i apt* dpkg* debconf*
# dpkg -i *  (jusqu'à ce qu'il n'y ait plus d'erreurs)
</example>
Si un paquet manque, récupérez-le avec :
<example>
# mc            # utilisez "FTP link" vers un serveur FTP Debian
</example>
Les paquets sur le serveur HTTP/FTP peuvent ne pas être localisés sous le
répertoire habituel <file>/dist</file> mais sous le nouveau répertoire
<file>/pool</file>.
<p>
Installez ensuite avec :
<example>
# dpkg -i /var/cache/apt/archives/packagefile.deb
</example>
Pour une dépendance non résolue, résolvez-la ou utilisez :
<example>
# dpkg --ignore-depends=package1,... -i packagefile.deb
# dpkg --force-depends -i packagefile.deb
# dpkg --force-depends --purge package
</example>
</sect1>

<sect1 id="un-bootable">Installer un paquet sur un système qui ne démarre plus
<p>
Démarrez Linux en utilisant une disquette/CD de sauvetage Debian ou une autre
partition sur un système Linux multi-boot.
Montez le système qui ne démarre plus sur <file>/target</file> et utilisez le
mode d'installation chroot de <prgn>dpkg</prgn>.
<example>
# dpkg --root /target -i packagefile.deb
</example>
Configurez ensuite et résolvez les problèmes.
<p>
Au fait, si c'est seulement un <prgn>lilo</prgn> cassé qui empêche le
démarrage, vous pouvez démarrer le disque de sauvetage standard Debian. A
l'invite de démarrage, en considérant que la partition racine de Linux est sur
<file>/dev/hda12</file> et que vous souhaitez le niveau de fonctionnement 3,
entrez :
<example>
boot: rescue root=/dev/hda12 3
</example>
Vous avez maintenant démarré un système presque complètement fonctionnel avec
le noyau de la disquette. (Il peut y avoir de petits problèmes dus au manque
d'options du noyau ou de modules.)
</sect1>
</sect>

<sect id="debian-package">Commandes "nirvana" de Debian

<sect1 id="info-file">Information sur un fichier
<p>
L'information sur un fichier peut être trouvée avec :
<example>
$ dpkg {-S|--search} nom 
        # trouve le paquet à partir du nom de fichier installé
$ zgrep -e nom /local/copy/of/debian/potato/Contents-i386.gz
        # trouve le fichier "nom" dans l'archive Debian
</example>
Sinon, utilisez une commande d'un paquet spécialisé :
<example>
# apt-get install dlocate  # crée un conflit avec slocate (version sécurisée
de locate)
$ dlocate filename         # alteernative rapide à dpkg -L et dpkg -S
...
# apt-get install auto-apt # outil d'installation de paquets à la demande
# auto-apt update          # crée le fichier db pour auto-apt
$ auto-apt search pattern  # recherche exhaustive dans l'archive de paquets
...
</example>
</sect1>

<sect1 id="info-package">Informations sur un paquet
<p>
Cherche et affiche les informations sur un paquet. Assurez-vous qu'apt pointe
vers la bonne archive en éditant <file>/etc/apt/sources.list</file>. Si vous
voulez voir les différences entre un paquet de testing/unstable et un paquet
installé, utilisez <tt>apt-cache policy</tt>.
<example>
# apt-get   check      # met à jour le cache et vérifie les dépendances
$ apt-cache search  texte  # cherche un paquet à partir de "texte"
$ apt-cache policy  paquet # information sur la priorité d'un paquet
$ apt-cache show -a paquet # affiche la description d'un paquet dans 
                           # toutes les distributions
$ apt-cache showpkg paquet # informations de debug sur un paquet
# dpkg  --audit|-C         # cherche les paquets partiellement installés
$ dpkg {-s|--status} paquet... # état et description d'un paquet installé
$ dpkg -l paquet ...       # état du paquet installé (1 ligne)
$ dpkg -L paquet ... 
        # liste les noms de fichiers installés par le paquet
</example>
<p>
Vous pouvez aussi trouver des informations sur les paquets (j'utilise
<tt>mc</tt>) dans :
<example>
/var/lib/apt/lists/*
/var/lib/dpkg/{available|status}
</example>
</sect1>

<sect1 id="reconfigure">Reconfigurer les paquets installés
<p>
Pour n'importe quel paquet, utilisez les commandes suivantes pour reconfigurer
un paquet installé :
<example>
# dpkg-reconfigure --priority=medium paquet [...]
# dpkg-reconfigure --all  # reconfigure tous les paquets
</example>
Faites cela pour <prgn>debconf</prgn> si vous avez besoin de changer le mode
de <prgn>debconfi</prgn> de façon permanente.
<p>
Certains logiciels sont livrés avec des scripts de configuration :
<example>
apt-setup     - crée /etc/sources.list
install-mbr   - installe un gestionnaire de Master Boot Record
tzconfig      - configure le fuseau horaire local
gpmconfig     - configure le gestionnaire de souris gpm
smbconfig     - configure samba
eximconfig    - configure exim (MTA)
texconfig     - configure teTeX
apacheconfig  - configure apache (httpd)
cvsconfig     - configure CVS
sndconfig     - configure le système sonore
...
update-alternatives - configure la commande par défaut; par exemple, vim pour vi
update-rc.d         - gestion des scripts de démarrage System-V
update-menus        - système de menus Debian
...
</example>
</sect1>

<sect1 id="remove">Enlever et purger des paquets
<p>
Enlever un paquet en gardant la configuration :
<example>
# apt-get remove paquet ...
# dpkg  --remove paquet ...
</example>
Enlever un paquet et sa configuration :
<example>
# apt-get remove --purge paquet ...
# dpkg    --purge        paquet ...
</example>
</sect1>

<sect1 id="hold">Garder de vieux paquets
<p>
Par exemple, pour garder <package>libc6</package> et
<package>libc6-dev</package> pour <prgn>dselect</prgn> et <tt>apt-get -u
upgrade paquet</tt>, on peut utiliser les commandes suivante :
<example>
# echo -e "libc6 hold\nlibc6-dev hold" | dpkg --set-selections
</example>
<tt>apt-get -u upgrade paquet</tt> ne sera pas gêné par cela. Pour garder un
paquet en forçant une mise à niveau inférieur automatique avec <tt>apt-get -u
upgrade paquet</tt> ou <tt>apt-get -u dist-upgrade</tt>, ajoutez ce qui suit
dans <file>/etc/apt/preferences</file> :
<example>
Package: libc6*
Pin: release a=stable
Pin-Priority: 2000
</example>
<p>
La commande suivante liste les paquets à garder :
<example>
dpkg --get-selections|grep -e "hold$"
</example>
</sect1>

<sect1 id="dselect"><prgn>Dselect</prgn> &ndash; configuration générale
<p>
Ajoutez une ligne avec "expert" dans <file>/etc/dpkg/dselect.cfg</file> pour
réduire les informations affichées.
<p>
Quand <prgn>dselect</prgn> est lancé, il sélectionne automatiquement tous les
paquets "Required", "Important" et "Standard". Certains paquets, comme
<package>teTEX</package> et <package>emacs</package>, sont gros et peuvent
être nécessaires lors de la configuration initiale d'un système, alors faites
attention.
<p>
<prgn>dselect</prgn> a une interface utilisateur déroutante. 4 commandes
importantes (en majuscules !) :
<example>
Touche	    Action
Q           Quitter. Confirme la sélection courante et quitte 
            (passe outre les dépendances).
R           Rétablir. Je ne voulais pas faire ça.
D           (Damn it!) Je me fiche de ce que dselect pense. 
            Fais comme ça.
U           Positionne tout dans l'état sUggéré.
</example>
Avec <tt>D</tt> et <tt>Q</tt>, vous pouvez sélectionner des paquets en conflit à vos risques et
périls. Faites attention en utilisant ces commandes. Pour des machines plus
lentes, lancez <prgn>dselect</prgn> sur une machine rapide pour trouver un paquet et
utilisez <tt>apt-get install</tt> pour l'installer. <tt>apt-get
dselect-upgrade</tt> utilise
au mieux la sélection de <prgn>dselect</prgn>.
</sect1>

<sect1 id="cache">Réduire la taille des fichiers de paquets dans le cache.
<p>
Les installations de paquets avec apt laissent des fichiers de paquets dans le
cache <file>/var/cache/apt/archives</file> ; ce cache doit être nettoyé.
<example>
# apt-get autoclean # efface les fichiers de paquets inutiles
# apt-get clean     # efface tous les fichiers de paquets du cache
</example>
</sect1>

<sect1 id="record">Enregistrer/Copier la configuration du système
<p>
Pour faire une copie locale de l'état de la sélection des paquets :
<example>
$ dpkg --get-selections "*" &gt;selections   # ou utiliser \*
</example>
<tt>"*"</tt> inclut aussi les noms des paquets à purger dans
<tt>selections</tt>.
<p>
Vous pouvez transférer un fichier vers un autre ordinateur, et l'installer
avec :
<example>
# apt-get update
# dpkg --set-selections &lt;selections
# apt-get -u dselect-upgrade
</example>
</sect1>

<sect1 id="port">Porter un paquet vers le système "stable"
<p>
Pour des mises à jour partielles du système "stable", recréer un paquet pour
l'environnement utilisé à partir des sources est recommandé. Cela évite de
nombreuses mises à jour de paquets à cause des dépendances. D'abord, ajouter
l'entrée suivante dans <file>/etc/apt/sources.list</file> :
<example>
deb-src http://http.us.debian.org/debian testing main contrib non-free
deb-src http://non-us.debian.org/debian-non-US testing/non-US main 
contrib non-free
deb-src http://http.us.debian.org/debian unstable main contrib non-free
deb-src http://non-us.debian.org/debian-non-US unstable/non-US main 
contrib non-free
</example>
Ensuite, récupérez les sources et construisez un paquet :
<example>
$ apt-get source package/unstable
$ dpkg-source -x package.dsc
$ cd package-version
  ...cherche parmi les paquets requis (Build-depends dans le fichier .dsc) et les installe. Il faut le paquet fakeroot.

$ dpkg-buildpackage -rfakeroot 

  ...ou (si pas de signature)
$ dpkg-buildpackage -rfakeroot -us -uc # utilisez "debsign" ensuite si nécessaire

  ...ou (si pas de signature)
# ./debian/rules binary
# ./debian/rules clean
# cd ..
# dpkg-source -b package-version

  ...ensuite pour installer
# dpkg -i packagefile.deb
</example>
Normalement, il n'y a besoin d'installer que peu de paquets avec un suffixe
"-dev" pour satisfaire les dépendances. <prgn>debsign</prgn> est dans le
paquet <package>devscripts</package>. <prgn>auto-apt</prgn> peut aider à
résoudre les dépendances.
<p>
Dans Woody, ces problèmes de dépendances peuvent être simplifiés.
Par exemple, pour compiler le paquet source de <package>pine</package> :
<example>
# apt-get build-dep pine
# apt-get source -b pine
</example>
</sect1>

<sect1 id="alien">Convert or install an alien binary package
<p>
<package>alien</package> enables to convert binary packages provided in 
Redhat rpm, Stampede slp, Slackware tgz, and Solaris pkg file formats
into &debian; deb package. If you want to use a package from another
linux distribution than the one you have installed on your
system, you can use alien to convert it to your preferred
package format and install it. It also supports LSB packages.
</sect1>						 

</sect>

<sect id="pecuriarities">Autres particularités de Debian

<sect1 id="dpkg-divert">dpkg-divert command
<p>
<prgn>dpkg-divert</prgn> forces <prgn>dpkg</prgn> not to install
a  file  into  its location, but to a <em>diverted</em> location.
<p>
System administrators or maintenance scripts can use this to override 
some package's configuration file, or whenever some files (which 
aren't marked as <tt>conffiles</tt>) need to be preserved by 
<prgn>dpkg</prgn>, when installing a newer version of a package 
which contains those files.
<example>
# dpkg-divert [--add]  filename # add "divert"
# dpkg-divert --remove filename # remove "divert"
</example>

<sect1 id="equivs">Paquet <package>equivs</package>
<p>
Si vous compilez un programme depuis les sources, il est mieux d'en faire un
paquet Debian (<tt>*.deb</tt>). <tt>equivs</tt> est le dernier recourt.
<example>
Package: equivs
Priority: extra
Section: admin
Description: Passer outre les dépendances de paquets. C'est un paquet 
 qui peut être utilisé pour créer des paquets Debian qui ne 
 contiennent que des informations sur les dépendances.
</example>
</sect1>

<sect1 id="alternatives">Commandes alternatives
<p>
Pour utiliser <prgn>vim</prgn> à la place de <prgn>vi</prgn>, utilisez
<prgn>update-alternatives</prgn> :
<example>
# update-alternatives --display vi
...
# update-alternatives --config vi
  Selection    Command
-----------------------------------------------
      1        /usr/bin/elvis-tiny
      2        /usr/bin/vim
*+    3        /usr/bin/nvi

Enter to keep the default[*], or type selection number: 2
</example>
Les alternatives du système sont maintenues dans
<file>/etc/alternatives</file> en tant que liens symboliques.
<p>
Pour avoir votre gestionnaire de fenêtres favori, utilisez
<prgn>x-window-manager</prgn> à la place.
<p>
<file>/bin/sh</file> est un lien direct de <file>/bin/bash</file> ou
<file>/bin/ash</file>. Il est plus sûr
d'utiliser <file>/bin/bash</file> pour garder la compatibilité avec de vieux
scripts bash mais <file>/bin/ash</file> permet d'être plus discipliné et
d'être compatible POSIX.
</sect1>

<sect1 id="sys-v">Niveaux de fonctionnement et <prgn>init</prgn> System-V
<p>
Le niveau de fonctionnement par défaut peut être configuré dans
<file>/etc/inittab</file>.
<p>
Contrairement à d'autres distributions, Debian laisse la gestion des niveaux
de fonctionnement complètement à l'administrateur. La gestion de
<prgn>init</prgn> de type System-V est sensée être effectuée par les scripts
<prgn>update-rc.d</prgn>.
<p>
Démarrer <file>/etc/init.d/<var>name</var></file> dans les niveaux 1, 2, 3 et
le stopper dans les niveaux 4, 5 avec une priorité de 20 (normal) peut se
faire avec :
<example>
# update-rc.d name start 20 1 2 3 . stop 20 4 5 .
</example>
Enlever le lien symbolique alors que le script dans <prgn>init.d</prgn> existe
toujours peut se faire avec :
<example>
# update-rc.d -f name remove
</example>
Pour éditer le niveau de fonctionnement, je triche. J'édite manuellement en
utilisant la commande <prgn>mv</prgn> à l'invite shell de <prgn>mc</prgn> et
je copie les liens avec <tt>Alt-Enter</tt>. Je désactive un daemon en insérant
<tt>exit 0</tt> au début du script <prgn>init.d</prgn>. Après tout, ce sont
des fichiers de configuration.
</sect1>

<sect1 id="disables">Disabled daemon services
<p>
Debian distribution cares system security seriously and expects the
system administrator to be really a competent one.  Thus, sometimes
ease of use becomes secondary concern and many daemon services come with
the highest security level with the least or no service available as
their default install state.
<p>
Check <tt>ps aux</tt> or contents of <file>/etc/init.d/*</file> and
<file>/etc/inetd.conf</file>, if you have doubt (exim, dhcp, ...).  
Also check <file>/etc/hosts.deny</file> as <ref id="loginctrl">.
<p>
X11 doesn't allow TCP/IP (remote) connections as default in the recent
versions of &debian;.  See <ref id="xtcp">.
</sect1>

</sect>

</chapt>
