<!-- CVS revision of this document "$Revision: 1.39 $"  -->
<!-- CVS revision of original english document "1.123"  -->

<!--Line width ruler (ruler uses 78 characters) 34567890123456789012345-->

<chapt id="package">Gestion des paquets Debian

<p>
<prgn>aptitude</prgn> est désormais le frontal en mode texte pour APT à
utiliser de préférence. Il se rappelle des paquets que vous avez installés
volontairement et quels paquets ont été ajoutés par dépendance&nbsp;; ces
derniers sont automatiquement désinstallés par <prgn>aptitude</prgn>
lorsqu'ils ne sont plus nécessaires à un paquet installé volontairement. Il
possède des fonctions avancées de filtrage des paquets mais elles peuvent être
difficiles à configurer.
<p>
<prgn>synaptic</prgn> est désormais le frontal graphique GTK pour APT à
utiliser de préférence. Ses fonctions de filtrage des paquets sont plus
faciles à utiliser que celles d'<prgn>aptitude</prgn>. Il possède aussi un
support expérimental pour les <url id="&debtags;" name="Debian Package Tags">
(balises de paquets Debian).
<p>
Pour réduire la charge réseau des dépôts &debian; et accélérer vos
téléchargements, vous devriez récupérer vos paquets depuis les miroirs
&debian;.
<p>
Si vous devez installer le même paquet sur plusieurs machines de votre réseau
local, vous pouvez configurer un proxy HTTP local en utilisant
<prgn>squid</prgn> pour les paquets téléchargés par APT. Si nécessaire,
positionnez la variable d'environnement <tt>http_proxy</tt> ou la variable
<tt>http</tt> dans <file>/etc/apt/apt.conf</file>.
<p>
Bien que la fonction de <em>pinning</em> d'APT décrite dans <manref name="apt_preferences"
section="5"> soit puissante, ses effets peuvent être difficiles à comprendre
et à gérer. Vous devriez la considérer comme une Fonction Avancée.
<p>
<![%f-ref;[
L'utilisation de la méthode décrite dans <ref id="chroot"> est utile pour
]]>
<![%q-ref;[
L'utilisation de chroot est utile pour
]]>
simultanément assurer à la fois la stabilité du système et l'accès aux
dernières versions des programmes.
<p>
Ce chapitre est basé sur un système d'après Woody. Certaines fonctions peuvent
nécessiter un système Sarge, ou plus récent.

<sect id="pkg-intro">Introduction
<p>
Si lire toute la documentation pour les développeurs est trop pour vous, lisez
d'abord ce chapitre et commencez à goûter à la puissance de Debian avec
<tt>testing</tt>/<tt>unstable</tt> :-)

<sect1>Outils de gestion des paquets principaux
<p>
<example>
dpkg      &ndash; installation de paquets &debian;
apt-get   &ndash; frontal pour APT en ligne de commande
aptitude  &ndash; frontal avancé pour APT en mode texte et ligne de commande
synaptic  &ndash; frontal pour APT en mode graphique GTK
dselect   &ndash; gestion des paquets à l'aide de menus
tasksel   &ndash; installation de tâches
</example>
Ces outils ne sont pas tous des alternatives. Par exemple <prgn>dselect</prgn>
utilise à la fois APT et <prgn>dpkg</prgn>.
<p>
APT utilise <file>/var/lib/apt/lists/*</file> pour suivre les paquets
disponibles tandis que <prgn>dpkg</prgn> utilise
<file>/var/lib/dpkg/available</file>. Si vous avez installé des paquets
directement en utilisant <prgn>aptitude</prgn> ou un autre frontal pour APT et
que vous voulez utiliser <prgn>dselect</prgn> pour installer des paquets,
assurez-vous de mettre à jour le fichier <file>/var/lib/dpkg/available</file>
en sélectionnant <tt>[M]ise à jour</tt> dans le menu de <prgn>dselect</prgn>
(ou en exécutant <tt>dselect update</tt>).
<p>
<prgn>apt-get</prgn> récupère
automatiquement les paquets dont un paquet demandé dépend. Il n'installe pas
les paquets recommandés ou suggérés par le paquet demandé.
<p>
<prgn>aptitude</prgn> au contraire peut être configuré pour installé les
paquets recommandés ou suggérés.
<p>
<prgn>dselect</prgn> présente à l'utilisateur une liste de paquets qu'un
paquet sélectionné recommande ou suggère et permet de les sélectionner ou pas.
<![%f-ref;[
Voir <ref id="depends">.
]]>
</sect1>

<sect1>Outils pratiques
<p>
<example>
dpkg-reconfigure  - reconfigure un paquet déjà installé
                    (s'il utilise debconf)
dpkg-source       - gère les paquets sources
dpkg-buildpackage - automatise la création d'un paquet
apt-cache         - recherche un paquet dans le cache local
</example>
</sect1>
</sect>

<sect id="apt-install">Bases de la gestion de paquets &debian;
<p>

<sect1 id="setup-apt">Configurer APT
<p>
Configurer <file>sources.list</file> comme décrit dans <ref
id="testing-transition">.
<footnote>
Si vous suivez <tt>testing</tt> ou <tt>unstable</tt> vous pouvez enlever les
références à <tt>stable</tt> de <file>sources.list</file> et
<file>/etc/apt/preferences</file> parce que <tt>testing</tt> démarre à partir
d'une copie de <tt>stable</tt>.
</footnote>

<![%f-ref;[
Référez-vous aussi à
<ref id="install">, <ref id="woody"> and <ref id="bin-editor">.
]]>

<sect1 id="tasksel">Installation de tâches
<p>
Vous pouvez installer des ensembles de paquets habituellement nécessaires pour
certaines utilisations d'un système &debian;. Ces ensembles de paquets sont
appelés «&nbsp;tâches&nbsp;».
<p>
Le moyen le plus simple d'installer des tâches lors de l'installation initiale
est d'utiliser <prgn>tasksel</prgn>. Notez que vous devez exécuter
<example>dselect update</example> avant de l'utiliser.
<p>
<prgn>aptitude</prgn> permet aussi d'installer des tâches et c'est l'outil
recommandé pour cela. Il permet de désélectionner des paquets dans les tâches
avant de procéder à l'installation.
</sect1>

<sect1 id="aptitude"><prgn>aptitude</prgn>
<p>
<prgn>aptitude</prgn> est un programme d'installation de paquets par sélection
dans des menus, similaire à <prgn>dselect</prgn> mais développé de zéro
au-dessus d'APT. Il peut être utilisé comme alternative à <prgn>apt-get</prgn>
pour la plupart des commandes. Voir <manref name="aptitude" section="1"> et
<file>&f-aptitude-readme;</file>.
<p>
<prgn>aptitude</prgn> en plein écran accepte des commandes à une touche,
généralement en minuscule.
<example>
Touche   Action
F10      Menu
?        Aide (listing complet)
u        Mise à jour des informations de l'archive de paquets
+        Marque un paquet pour mise-à-jour ou installation
-        Marque un paquet pour suppression (garde la configuration)
_        Marque un paquet pour purge (supprime la configuration)
=        Place un paquet en maintien
U        Marque tous les paquets qui peuvent être mis à jour
g        Téléchargement et installation des paquets sélectionnés
q        Sortie de l'écran courant et sauvegarde des changements
x        Sortie de l'écran courant sans sauvegarde
Enter    Visualisation d'information sur un paquet
C        Visualisation des changements d'un paquet
|        Change la limite des paquets affichés
/        Recherche la première occurence
\        Répète la dernière recherche
</example>
Comme <prgn>apt-get</prgn>, <prgn>aptitude</prgn> installe les dépendances
d'un paquet demandé. <prgn>aptitude</prgn> offre aussi une option pour
récupérer les paquets qui sont recommandés ou suggérés par un paquet à
installer. Vous pouvez changer ce comportement en choisissant <tt>F10 ->
Options -> Dependency handling</tt> dans le menu.
<p>
Autres avantages d'<prgn>aptitude</prgn>&nbsp;:
<list compact>
<item><prgn>aptitude</prgn> offre accès à toutes les versions d'un paquet.
<item><prgn>aptitude</prgn> enregistre toutes ses actions dans
<file>&f-aptitude-log;</file>.
<item><prgn>aptitude</prgn> rend facile le suivi des logiciels obsolètes en
les listant dans «&nbsp;<em>Obsolete and Locally Created Packages</em>&nbsp;».
<item><prgn>aptitude</prgn> inclut un système de recherche puissant pour
trouver des paquets particuliers ou limité l'affichage des paquets. Les
utilisateurs familiers avec <prgn>mutt</prgn> seront rapidement à l'aise,
puisque mutt a inspiré la syntaxe des expressions. Voir «&nbsp;<em>SEARCHING,
LIMITING, AND EXPRESSIONS</em>&nbsp;» dans <file>&f-aptitude-readme;</file>.
<item><prgn>aptitude</prgn> en plein écran intègre <prgn>su</prgn> et peut
être utilisé par un utilisateur normal jusqu'à ce qu'il y ait réellement
besoin des privilèges de l'administrateur.
</list>
</sect1>

<sect1 id="dselect"><prgn>dselect</prgn>
<p>
Dans les versions stables jusqu'à Potato inclus, <prgn>dselect</prgn> était
l'outil de gestion des paquets principal. Pour Sarge, il est recommandé
d'utiliser <prgn>aptitude</prgn> à la place.
<p>
Quand <prgn>dselect</prgn> est lancé, il sélectionne automatiquement tous les
paquets «&nbsp;Required&nbsp;», «&nbsp;Important&nbsp;» et
«&nbsp;Standard&nbsp;».
<p>
<prgn>dselect</prgn> a une interface utilisateur déroutante. La plupart des
utilisateurs s'y font cependant. Il a quatre commandes (en
majuscules&nbsp;!)&nbsp;:
<example>
Touche      Action
Q           Quitter. Confirme la sélection courante et quitte 
            (passe outre les dépendances).
R           Rétablir. Je ne voulais pas faire ça.
D           (Damn it!) Je me fiche de ce que dselect pense. Fais comme ça !
U           Positionne tout dans l'état sUggéré.
</example>
Avec <tt>D</tt> et <tt>Q</tt>, vous pouvez sélectionner des paquets en conflit
à vos risques et périls. Faites attention en utilisant ces commandes.
<p>
Ajoutez une ligne «&nbsp;expert&nbsp;» dans <file>/etc/dpkg/dselect.cfg</file>
pour réduire la quantité d'informations affichée.
<p>
Si votre machine exécute <prgn>dselect</prgn> lentement, vous pouvez lancer
<prgn>dselect</prgn> sur une machine plus rapide pour trouver les paquets et
utiliser <tt>apt-get install</tt> sur la machine lente pour les installer.
</sect1>

<sect1 id="apt-track">Suivre une distribution avec APT
<p>
Pour suivre la distribution <tt>testing</tt> au fur et à mesure de ses
changements, votre fichier <file>/etc/apt/preferences</file> doit ressembler à
cela&nbsp;:
<example>
Package: *
Pin: release a=testing
Pin-Priority: 800

Package: *
Pin: release a=stable
Pin-Priority: 600
</example>
Attention&nbsp;: suivre la version <tt>testing</tt> de &debian; a l'effet de
bord de recevoir très lentement les correctifs de sécurité. Ces paquets sont
envoyés dans <tt>unstable</tt> et migrent vers <tt>testing</tt> seulement
après un certain délai.
<p>
Voir <manref name="apt_preferences" section="5"> pour des exemples plus
compliqués qui vous permettront, par exemple, de suivre <tt>testing</tt> tout
en installant certains paquets de <tt>unstable</tt>.
<p>
Des exemples de <file>/etc/apt/preferences</file> qui bloquent certains
paquets importants dans leur version la plus stable en suivant la version
moins stable d'autres paquets non essentiels sont disponibles dans le
<url id="&examples;" name="sous-répertoire d'exemples"> dans les fichiers
<file>preferences.testing</file> et <file>preferences.unstable</file>.
<p>
Si vous mélangez les versions de &debian;, <tt>testing</tt> dans
<tt>stable</tt> ou <tt>unstable</tt> dans <tt>stable</tt>, vous pourriez
récupérer sans le vouloir des paquets importants, comme
<package>libc6</package>, de <tt>testing</tt> ou <tt>unstable</tt> et il n'y a
aucune garantie qu'ils ne soient pas bogués. Vous êtes prévenus.
<p>
Aussi, le fichier <file>preferences.stable</file> force tous les paquets à
faire une mise à niveau inférieur vers <tt>stable</tt>.
<p>
La mise à niveau inférieur depuis une version plus récente d'un
<strong>paquet</strong> n'est pas supportée officiellement dans &debian;.
Cependant, vous pouvez avoir à mettre à niveau inférieur un paquet spécifique
pour réinstaller une version d'un paquet qui marche lorsque la nouvelle
version ne fonctionne pas. Vous pouvez trouver ces paquets précédents
localement dans <file>/var/cache/apt/archives/</file> ou à distance sur <url
id="&snapshothome;">.
Voir aussi <ref id="rescue-dpkg">.
<p>
La mise à niveau inférieur depuis une version plus récente d'une
<strong>distribution</strong> n'est pas non plus supportée officiellement et
risque de poser des problèmes. Cependant, cela peut valoir le coup d'essayer
en dernier recours si vous êtes désespérés.
</sect1>

<sect1 id="apt-commands">Commandes <prgn>aptitude</prgn>, <prgn>apt-get</prgn>
et <prgn>apt-cache</prgn>
<p>
Pour fonctionner avec <tt>testing</tt> comme décrit dans l'exemple précédent,
le système peut être géré avec les commandes suivantes&nbsp;:
<list>
<item><tt>aptitude upgrade</tt> (ou
      <tt>apt-get upgrade</tt> ou
      <tt>aptitude dist-upgrade</tt> ou
      <tt>apt-get dist-upgrade</tt>)
 <p>Cela suit la distribution <tt>testing</tt> et met à jour tous les paquets
 du système en installant leurs dépendances de <tt>testing</tt>.
<footnote>
La différence entre <tt>upgrade</tt> et <tt>dist-upgrade</tt> n'apparaît que
lorsque de nouvelles versions de paquets ont des dépendances différentes des
anciennes versions. Voir <manref name="apt-get" section="8"> pour plus de
détails.
<p>
<tt>aptitude upgrade</tt> et <tt>aptitude dist-upgrade</tt> lancent
<prgn>aptitude</prgn> en ligne de commande. Vous pouvez changer pour le mode
plein écran en appuyant sur <tt>e</tt>.
</footnote>
<item><tt>apt-get dselect-upgrade</tt>
 <p>Cela suit la distribution <tt>testing</tt> et met à jour tous les paquets
 du système avec la sélection de <prgn>dselect</prgn>.
<item><tt>aptitude -R -G install <var>package</var></tt> (ou
      <tt>apt-get -u install <var>package</var></tt>)
 <p>Cela installe <var>package</var> et ses dépendances de <tt>testing</tt>.
<item><tt>aptitude -r -G install <var>package</var></tt>
 <p>Cela installe <var>package</var>, ses dépendances et ses recommandations
de <tt>testing</tt>.
<item><tt>aptitude -r -g install <var>package</var></tt>
 <p>Cela installe <var>package</var>, ses dépendances et ses recommandations
ou suggestions de <tt>testing</tt>.
<item><tt>aptitude install <var>package</var>/unstable</tt>
 <p>Cela installe <var>package</var> de <tt>unstable</tt> en prenant les
 dépendances dans <tt>testing</tt>.
<item><tt>aptitude install -t unstable <var>package</var></tt>
 <p>Cela installe <var>package</var> de <tt>unstable</tt> en prenant les
 dépendances aussi dans <tt>unstable</tt> en mettant <tt>Pin-Priority</tt> de
 <tt>unstable</tt> à 990.
<item><tt>apt-cache policy <var>foo bar ...</var></tt>
 <p>Cela affiche l'état des paquets <var>foo bar ...</var>.
<item><tt>aptitude show <var>foo bar ...</var> | less</tt> (ou
      <tt>apt-cache show <var>foo bar ...</var> | less</tt>)
 <p>Cela affiche l'information sur les paquets <var>foo bar ...</var>.
<item><tt>aptitude install <var>foo=2.2.4-1</var></tt>
 <p>Cela installe la version <var>2.2.4-1</var> du paquet <var>foo</var>.
<item><tt>aptitude install <var>foo bar-</var></tt>
 <p>Cela installe la paquet <var>foo</var> et supprime le paquet
 <var>bar</var>.
<item><tt>aptitude remove <var>bar</var></tt>
 <p>Cela supprime le paquet <var>bar</var> mais garde ses fichiers de
 configuration.
<item><tt>aptitude purge <var>bar</var></tt>
 <p>Cela supprime le paquet <var>bar</var> et tous ses fichiers de
 configuration.
</list>
Dans les exemples précédents, l'utilisation de l'option <tt>-u</tt> permet
qu'<prgn>apt-get</prgn> affiche la liste des paquets qui seront mis à jour et
demande à l'utilisateur de confirmer avant de continuer. Ce qui suit permet de
configurer l'option <tt>-u</tt> par défaut&nbsp;:
<example>
$ cat &gt;&gt; /etc/apt/apt.conf &lt;&lt; .
// Always show packages to be upgraded (-u)
APT::Get::Show-Upgraded "true";
.
</example>
<p>
Utilisez l'option <tt>--no-act</tt> pour simuler des actions sans les
effectuer.

<sect id="survival">Commandes de survie Debian
<p>
Avec ces connaissances, on peut vivre une vie d'éternelle mise à jour :-)

<sect1 id="bug-check">Rechercher les bogues de Debian et demander de l'aide
<P>
Si vous avez des problèmes avec un paquet, consultez ces sites en premier
avant de demander de l'aide ou de remplir un rapport de bogue.
(<prgn>lynx</prgn>, <prgn>links</prgn> et <prgn>w3m</prgn> fonctionnent
bien)&nbsp;:
<example>
$ lynx &bugs;
$ lynx &bugs;<var>package-name</var>  # si vous connaissez
                                      # le nom du paquet
$ lynx &bugs;<var>bugnumber</var>     # si vous connaissez
                                      #le numéro du bogue
</example>
Utilisez le moteur de recherche Google (www.google.com) en incluant
«&nbsp;site:debian.org&nbsp;» comme mot-clé.
<p>
En cas de doute, lisez la documentation. Positionnez <tt>CDPATH</tt> comme
suit&nbsp;:
<example>
export CDPATH=.:/usr/local:/usr/share/doc
</example>
et tapez
<example>
$ cd <var>packagename</var>
$ pager README.Debian # s'il existe
$ mc
</example>
<![%f-ref;[
Plus de ressources sont listées dans <ref id="support">.
]]>
</sect1>

<sect1 id="apt-trouble">Résolution de problèmes de mise à jour avec APT
<p>
Des problèmes de dépendances peuvent arriver lors de la mise à jour avec
<tt>unstable</tt>/<tt>testing</tt>, comme décrit dans <ref
id="upgrade-system">. La plupart du temps, c'est parce qu'un
paquet qui doit être mis à jour possède une dépendance qui n'est pas trouvée.
Ces problèmes sont résolus en utilisant
<example>
# aptitude dist-upgrade
</example>
Si cela ne marche pas, répétez les opérations suivantes jusqu'à ce que le
problème se résolve tout seul&nbsp;:
<example>
# aptitude -f upgrade         # continue « upgrade » malgré les erreurs
... ou
# aptitude -f dist-upgrade    # continue « dist-upgrade » malgré les erreurs
</example>
<p>
De mauvais scripts de mise à jour peuvent causer des problèmes récurrents. Il
est recommandé de résoudre ce genre de situations en consultant les scripts
<file>/var/lib/dpkg/info/<var>packagename</var>.{post,pre}{inst,rm}</file> du
paquet en question et de lancer&nbsp;:
<example>
# dpkg --configure -a    # configure les paquets partiellement installés
</example>
<p>
Si un script se plaint d'un fichier de configuration manquant, cherchez dans
<file>/etc</file> le fichier de configuration correspondant. Si un fichier de
configuration avec une extension <tt>.dpkg-new</tt> (ou quelquechose similaire)
existe, renommez-le (<prgn>mv</prgn>) en un fichier sans suffixe.
<p>
Des problèmes de dépendances peuvent survenir en installant des paquets de
<tt>unstable</tt>/<tt>testing</tt>. Il existe des moyens de passer outre les
dépendances.
<example>
# aptitude -f install <var>package</var> # passe outre les dépendances non résolues
</example>
<p>
Une autre méthode pour résoudre ces problèmes est d'utiliser le paquet
<package>equivs</package>.  Voir <ref id="equivs">.
Voir <file>&f-equivs;</file><![%f-ref;[ et <ref id="equivs">]]>.
</sect1>

<sect1 id="rescue-dpkg">Sauvetage avec <prgn>dpkg</prgn>
<p>
Si vous n'arrivez plus à utiliser APT vous pouvez télécharger les paquets sur
un miroir &debian; et les installer en utilisant <prgn>dpkg</prgn>. Si vous
n'avez pas accès au réseau, vous pouvez chercher des copies des paquets dans
<file>/var/cache/apt/archives/</file>.
<example>
# dpkg -i fetchmail_6.2.5-4_i386.deb
</example>
Si l'installation d'un paquet de cette façon échoue à cause d'une dépendance
non résolue, et que vous avez vraiment besoin d'installer le paquet, vous
pouvez ignorer les dépendances en utilisant <tt>--ignore-depends</tt>,
<tt>--force-depends</tt> et d'autres options avec <prgn>dpkg</prgn>.
Voir See <manref name="dpkg" section="8"> pour plus de détails.
</sect1>

<sect1 id="recover-status">Récupérer les données de sélection des paquets
<p>
Si <file>/var/lib/dpkg/status</file> est corrompu, le système &debian; perd
les données de sélection des paquets et en est grandement affecté.

Cherchez le vieux fichier <file>/var/lib/dpkg/status</file> dans
<file>/var/lib/dpkg/status-old</file> ou
<file>/var/backups/dpkg.status.*</file>.
<p>
Garder <file>/var/backups/</file> dans une partition séparée peut être une
bonne idée puisque ce répertoire contient beaucoup de données système
importantes.
<p>
Si le vieux fichier <file>/var/lib/dpkg/status</file> n'est pas disponible,
vous pouvez quand même récupérer les données depuis des répertoires de
<file>/usr/share/doc/</file>.
<example>
# ls /usr/share/doc | \
  grep -v [A-Z] | \
  grep -v '^texmf$' | \
  grep -v '^debian$' | \
  awk '{print $1 " install"}' | \
  dpkg --set-selections
# dselect --expert # réinstallez le système, utilisez dselect si besoin
</example>

<sect1 id="rescue-var">Sauver un système après avoir perdu <file>/var</file>
<p>
Comme le répertoire <file>/var</file> contient des données mises à jour
régulièrement, comme le mail, il est plus susceptible de corruption que, par
exemple <file>/usr/</file>. Le placer dans une partition indépendante limite
les risques. Si le pire arrive, vous pouvez avoir à reconstruire le répertoire
<file>/var</file> pour sauver le système &debian;.
<p>
Obtenez la structure du répertoire <file>/var</file> à partir d'un système
&debian; qui fonctionne, basé sur la même ou une plus ancienne version de
&debian;, par exemple <file>/var</file>, et placez la à la racine du système
cassé. Ensuite
<example>
# cd /
# mv var var-old      # s'il reste des données utiles
# tar xvzf var.tar.gz # utilisez la structure de Woody
# aptitude            # ou dselect
</example>
Cela doit fournir un système qui fonctionne. Vous pouvez récupérer les
sélections de paquets en utilisant la technique décrite à <ref
id="recover-status">.
([FIXME]: Cette procédure nécessite plus de tests.)
</sect1>

<sect1 id="un-bootable">Installer un paquet sur un système qui ne démarre plus
<p>
Démarrez Linux en utilisant une disquette/CD de sauvetage Debian ou une autre
partition sur un système Linux multi-boot.
<![%f-ref;[
Voir <ref id="booting">. 
]]>
Montez le système qui ne démarre plus sur <file>/target</file> et utilisez le
mode d'installation chroot de <prgn>dpkg</prgn>.
<example>
# dpkg --root /target -i <var>packagefile.deb</var>
</example>
Configurez ensuite et résolvez les problèmes.
<p>
Au fait, si c'est seulement un <prgn>lilo</prgn> cassé qui empêche le
démarrage, vous pouvez démarrer avec le disque de sauvetage standard Debian. A
l'invite de démarrage, en considérant que la partition racine de Linux est sur
<file>/dev/hda12</file> et que vous souhaitez le niveau de fonctionnement 3,
entrez&nbsp;:
<example>
boot: rescue root=/dev/<var>hda12</var> 3
</example>
Vous avez maintenant démarré un système presque complètement fonctionnel avec
le noyau de la disquette. (Il peut y avoir de petits problèmes dus au manque
d'options du noyau ou de modules.)
</sect1>

<sect1>Que faire si <prgn>dpkg</prgn> est cassé
<p>
Cela pose de sérieux problèmes pour l'installation des fichiers <tt>.deb</tt>.
Les commandes suivantes vous guident pour récupérer cette situation. (Sur la
première ligne, vous pouvez remplacer «&nbsp;links&nbsp;» par votre navigateur
favori.)
<example>
$ links http://<var>http.us.debian.org</var>/debian/pool/main/d/dpkg/
  ... téléchargez le bon dpkg_<var>version</var>_<var>arch</var>.deb
$ su
password: *****
$ ar x dpkg_<var>version</var>_<var>arch</var>.deb
# mv data.tar.gz /data.tar.gz
# cd /
# tar xzfv data.tar.gz
</example>
Pour une machine <tt>i386</tt>, <tt>http://packages.debian.org/dpkg</tt> peut
aussi être utilisé comme URL.
</sect1>

</sect>

<sect id="debian-package">Commandes «&nbsp;nirvana&nbsp;» de Debian
<p>
A la <strong>lumière</strong> de ces commandes, on sera sauvé de l'éternelle lutte karmique
contre l'enfer de la mise à jour afin d'atteindre le <strong>nirvana</strong> Debian. :-)

<sect1 id="info-file">Informations sur un fichier
<p>
De l'information sur un fichier peut être trouvée avec&nbsp;:
<example>
$ dpkg {-S|--search} pattern # cherche « pattern »
                             # parmi les paquets installés
$ wget http://ftp.us.debian.org/debian/dists/<var>sarge</var>/<var>Contents-i386.gz</var>
$ zgrep -e pattern <var>Contents-i386.gz</var>
             # cherche « pattern » parmi les fichiers de l'archive Debian
</example>
Sinon, utilisez les commandes spécialisées pour les paquets&nbsp;:
<example>
# aptitude install dlocate
         # crée un conflit avec slocate (version sécurisée de locate)
$ dlocate <var>filename</var>
         # solution de rechange rapide pour dpkg -L et dpkg -S
...
# aptitude install auto-apt # outil d'installation de paquets à la demande
# auto-apt update          # crée le fichier db pour auto-apt
$ auto-apt search <var>pattern</var>
         # recherche exhaustive dans l'archive de paquets, installés ou non
</example>
</sect1>

<sect1 id="info-package">Informations sur un paquet
<p>
Cherche et affiche les informations sur un paquet. Assurez-vous qu'apt pointe
vers la bonne archive en éditant <file>/etc/apt/sources.list</file>. Si vous
voulez voir les différences entre un paquet de
<tt>testing</tt>/<tt>unstable</tt> et un paquet installé, utilisez
<tt>apt-cache policy</tt>&mdash;plutôt sympa.
<example>
# apt-get   check          # met à jour le cache et vérifie les dépendances
$ apt-cache search  <var>texte</var>  # cherche un paquet à partir de "texte"
$ apt-cache policy  <var>paquet</var> # information sur la priorité d'un paquet
$ apt-cache show -a <var>paquet</var> # affiche la description d'un paquet
                             dans toutes les distributions
$ apt-cache showpkg <var>paquet</var> # informations de debogage sur un paquet
# dpkg  --audit|-C         # cherche les paquets partiellement installés
$ dpkg {-s|--status} <var>paquet</var> ... # état et description d'un paquet installé
$ dpkg -l <var>paquet</var> ...       # état du paquet installé (1 ligne)
$ dpkg -L <var>paquet</var> ...       # liste les noms des fichiers installés
                             par le paquet
</example>
<!-- Erase this when manual page gets fixed.  FIXME -->
<tt>apt-cache showsrc</tt> n'est pas documenté à la sortie de Woody, mais
fonctionne :)
<p>
Vous pouvez aussi trouver des informations sur les paquets (j'utilise
<tt>mc</tt> pour naviguer) dans&nbsp;:
<example>
/var/lib/apt/lists/*
/var/lib/dpkg/available
</example>
La comparaison des fichiers suivants fournit des informations sur ce qu'il
s'est exactement passé lors des dernières installations.
<example>
/var/lib/dpkg/status
/var/backups/dpkg.status*
</example>

</sect1>

<sect1 id="apt-get-auto">Installation automatique avec APT
<p>
Pour une installation non interactive, ajoutez la ligne suivante dans
<file>/etc/apt/apt.conf</file>&nbsp;:
<example>
Dpkg::Options {"--force-confold";}
</example>
C'est l'équivalent de lancer <tt>aptitude -y install
<var>packagename</var></tt> ou <tt>apt-get -q -y install
<var>packagename</var></tt>.
Parce que cela répond automatiquement «&nbsp;oui&nbsp;» à toutes les
questions, cela peut causer des problèmes, aussi faites attention en utilisant
cette astuce.
Voir <manref name="apt.conf" section="5"> et
<manref name="dpkg" section="1">.
<p>
Vous pouvez configurer les paquets par la suite en suivant <ref
id="reconfigure">.

<sect1 id="reconfigure">Reconfigurer les paquets installés
<p>
Utilisez les commandes suivantes pour reconfigurer un paquet installé.
<example>
# dpkg-reconfigure --priority=<var>medium</var> <var>package</var> [...]
# dpkg-reconfigure --all   # reconfigure tous les paquets
# dpkg-reconfigure locales # génère de nouvelles locales
# dpkg-reconfigure --p=<var>low</var> xserver-xfree86 # reconfigure le serveur X
</example>
Faites cela pour <prgn>debconf</prgn> si vous avez besoin de changer le mode
de dialogue de <prgn>debconf</prgn> de façon permanente.
<p>
Certains logiciels sont livrés avec des scripts de configuration.
<footnote>
Certains scripts de configuration disparaissent dans les dernières versions de
Sarge et les fonctions de configuration des paquets sont déplacées dans le
système <prgn>debconf</prgn>.
</footnote>
<example>
apt-setup     - crée /etc/apt/sources.list
install-mbr   - installe un gestionnaire de Master Boot Record
tzconfig      - configure le fuseau horaire local
gpmconfig     - configure le gestionnaire de souris gpm
sambaconfig   - configure samba dans potato (woody utilise debconf)
eximconfig    - configure Exim (MTA)
texconfig     - configure teTeX
apacheconfig  - configure Apache (httpd)
cvsconfig     - configure CVS
sndconfig     - configure le système sonore
...
update-alternatives - configure la commande par défaut ;
                      par exemple, vim pour vi
update-rc.d         - gestion des scripts de démarrage System-V
update-menus        - système de menus Debian
...
</example>
</sect1>

<sect1 id="remove">Enlever et purger des paquets
<p>
Enlever un paquet en gardant la configuration&nbsp;:
<example>
# aptitude remove <var>package</var> ...
# dpkg  --remove <var>package</var> ...
</example>
Enlever un paquet et sa configuration&nbsp;:
<example>
# aptitude purge <var>package</var> ...
# dpkg    --purge        <var>package</var> ...
</example>
</sect1>

<sect1 id="hold">Garder de vieux paquets
<p>
Par exemple, pour garder <package>libc6</package> et
<package>libc6-dev</package> lors de l'utilisation de <prgn>dselect</prgn> et
<tt>aptitude install <var>paquet</var></tt>, on peut utiliser les commandes
suivantes&nbsp;:
<example>
# echo -e "libc6 hold\nlibc6-dev hold" | dpkg --set-selections
</example>
<tt>aptitude install <var>paquet</var></tt> ne sera pas gêné par cela. Pour
garder un paquet en forçant une mise à niveau inférieur automatique avec
<tt>aptitude upgrade <var>paquet</var></tt> ou <tt>aptitude dist-upgrade</tt>,
ajoutez ce qui suit dans <file>/etc/apt/preferences</file>&nbsp;:
<example>
Package: libc6
Pin: release a=stable
Pin-Priority: 2000
</example>
Ici, l'entrée «&nbsp;<tt>Package:</tt>&nbsp;» ne peut pas utiliser d'entrées comme
«&nbsp;<tt>libc6*</tt>&nbsp;». Si vous voulez garder tous les paquets binaires
liés au paquet source <package>glibc</package> synchronisés, il faut les
lister explicitement.
<p>
La commande suivante liste les paquets à garder&nbsp;:
<example>
dpkg --get-selections "*"|grep -e "hold$"
</example>
</sect1>

<sect1 id="mixedsys">Système mixte <tt>stable</tt>/<tt>testing</tt>/<tt>unstable</tt>
<p>
<prgn>apt-show-versions</prgn> peut lister les versions des paquets
disponibles dans chaque distribution.
<example>
$ apt-show-versions | fgrep /testing | wc
... nombre de paquets de testing
$ apt-show-versions -u
... liste de paquets qu'il est possible de mettre à jour
$ aptitude install `apt-show-versions -u -b | fgrep /unstable`
... met à jour tous les paquets de unstable à leur dernière version
</example>
</sect1>

<sect1 id="cache">Supprimer les paquets du cache
<p>
Les installations de paquets avec APT laissent des fichiers de paquets dans le
cache <file>/var/cache/apt/archives</file>&nbsp;; ce cache doit être nettoyé.
<example>
# aptitude autoclean # efface les fichiers de paquets inutiles
# aptitude clean     # efface tous les fichiers de paquets du cache
</example>
</sect1>


<sect1 id="record">Enregistrer/copier la configuration du système
<p>
Pour faire une copie locale de l'état de la sélection des paquets&nbsp;:
<example>
$ dpkg --get-selections "*" &gt;<var>myselections</var>   # ou utiliser \*
</example>
<tt>"*"</tt> inclut aussi les noms des paquets à purger dans
<tt><var>myselections</var></tt>.
<p>
Vous pouvez transférer ce fichier vers un autre ordinateur, et l'installer
avec&nbsp;:
<example>
# dselect update
# dpkg --set-selections &lt;<var>myselections</var>
# apt-get -u dselect-upgrade    # ou dselect install
</example>
</sect1>

<sect1 id="port">Porter un paquet vers le système <tt>stable</tt>
<p>
Pour des mises à jour partielles du système <tt>stable</tt>, recréer un paquet
pour l'environnement utilisé à partir des sources est recommandé. Cela évite
de nombreuses mises à jour de paquets à cause des dépendances. D'abord,
ajouter l'entrée suivante dans <file>/etc/apt/sources.list</file>&nbsp;:
<example>
deb-src &http-us;debian testing \
 main contrib non-free
deb-src &http-us;debian unstable \
 main contrib non-free
</example>
Chaque entrée de <tt>deb-src</tt> est ici scindée en deux lignes à cause de
contraintes d'impression, mais les entrées réelles dans
<file>sources.list</file> doivent tenir en une seule ligne.
<p>
Ensuite, récupérez les sources et construisez un paquet&nbsp;:
<example>
$ apt-get update  # met à jour la liste des paquets source
$ apt-get source <var>package</var>
$ dpkg-source -x <var>package.dsc</var>
$ cd <var>package-version</var>
  ... cherche parmi les paquets requis (Build-Depends dans le fichier .dsc)
      et les installe. Il faut le paquet « fakeroot » aussi.

$ dpkg-buildpackage -rfakeroot 

  ...ou (si pas de signature)
$ dpkg-buildpackage -rfakeroot -us -uc # utilisez « debsign »
                                         ensuite si nécessaire

  ...ensuite pour installer
$ su -c "dpkg -i <var>packagefile.deb</var>"
</example>
Normalement, il n'y a besoin d'installer que peu de paquets avec un suffixe
«&nbsp;-dev&nbsp;» pour satisfaire les dépendances. <prgn>debsign</prgn> est
dans le paquet <package>devscripts</package>. <prgn>auto-apt</prgn> peut aider
à résoudre les dépendances. L'utilisation de <prgn>fakeroot</prgn> évite une
utilisation non nécessaire du compte root.
<p>
Dans Woody, ces problèmes de dépendances peuvent être simplifiés.
Par exemple, pour compiler le paquet source de <package>pine</package>&nbsp;:
<example>
# apt-get build-dep pine
# apt-get source -b pine
</example>
</sect1>

<sect1 id="local">Archive locale de paquets
<p>
Afin de créer une archive locale de paquets qui soit compatible avec les
systèmes APT et dselect, un fichier <file>Packages</file> doit être créé et les
fichiers de paquets ont besoin d'être archivés dans un arbre de répertoires
particulier.
<p>
Un dépôt local similaire à une archive officielle Debian peut être créé
avec&nbsp;:
<example>
# aptitude install dpkg-dev
# cd <var>/usr/local</var>
# install -d <var>pool</var> # les paquets physiques sont placés ici
# install -d dists/<var>unstable</var>/<var>main</var>/binary-<var>i386</var>
# ls -1 <var>pool</var> | sed 's/_.*$/ <var>priority</var> <var>section</var>/' | uniq &gt; <var>override</var>
# editor <var>override</var> # ajustez <var>priority</var> et <var>section</var>
# dpkg-scanpackages <var>pool</var> <var>override</var> <var>/usr/local</var>/ \
   &gt; dists/<var>unstable</var>/<var>main</var>/binary-<var>i386</var>/Packages
# cat &gt; dists/<var>unstable</var>/<var>main</var>/Release &lt;&lt; EOF
Archive: <var>unstable</var>
Version: <var>3.0</var>
Component: <var>main</var>
Origin: <var>Local</var>
Label: <var>Local</var>
Architecture: <var>i386</var>
EOF
# echo "deb file:<var>/usr/local</var> <var>unstable</var> <var>main</var>" \
   &gt;&gt; /etc/apt/sources.list
</example>
<p>
Autrement, un dépôt local peut être créé de façon rapide et sale&nbsp;:
<example>
# aptitude install dpkg-dev
# mkdir <var>/usr/local/debian</var>
# mv <var>/some/where/package.deb</var> <var>/usr/local/debian</var>
# dpkg-scanpackages <var>/usr/local/debian</var> /dev/null | \
  gzip - &gt; <var>/usr/local/debian</var>/Packages.gz
#  echo "deb file:<var>/usr/local/debian</var> ./" &gt;&gt; /etc/apt/sources.list
</example>
<p>
Ces archives peuvent être accédées à distance en fournissant ces répertoires
aux méthodes HTTP ou FTP des entrées du fichier
<file>/etc/apt/sources.list</file>.

<sect1 id="alien">Convertir ou installer un paquet non Debian
<p>
<package>alien</package> permet de convertir des paquets binaires fournis aux
formats <tt>rpm</tt> de Red Hat, <tt>slp</tt> de Stampede, <tt>tgz</tt> de
Slackware, et <tt>pkg</tt> de Solaris en paquet <tt>deb</tt> de &debian;. Si
vous voulez utiliser un paquet d'une autre distribution Linux, vous pouvez
utiliser <prgn>alien</prgn> pour le convertir vers votre format de paquet
préféré et l'installer. <package>alien</package> supporte aussi les paquets
LSB.
</sect1>                                                 

<sect1 id="auto-apt">Installation automatique
<p>
<prgn>auto-apt</prgn> est une commande d'installation de paquets à la demande.
<example>
$ sudo auto-apt update
 ... met à jour la base de données
$ auto-apt -x -y run
Entering auto-apt mode: /bin/bash
Exit the command to leave auto-apt mode.
$ less /usr/share/doc/med-bio/copyright # accède un fichier non existant
 ... installe le paquet qui fournit ce fichier
 ... installe aussi les dépendances
</example>
</sect1>

<sect1 id="debsums">Vérifier les fichiers de paquets installés
<p>
<prgn>debsums</prgn> permet la vérification des fichiers de paquets installés
grâce à des sommes de contrôle MD5. Certains paquets n'ont pas de somme de
contrôle MD5. Une solution temporaire pour les administrateurs système&nbsp;:
<example>
# cat >>/etc/apt/apt.conf.d/90debsums
DPkg::Post-Install-Pkgs {"xargs /usr/bin/debsums -sg";};
^D
</example>
par Joerg Wendland <email>joergland@debian.org</email> (non testé).

<![%f-ref;[
<sect1 id="spy">Améliorer le fichier <file>sources.list</file>
<p>
En bref, mes efforts pour optimiser <file>sources.list</file> n'ont pas
réellement apporté de gain de performance pour moi qui vit aux Etats-Unis.
J'ai choisi manuellement un site proche avec <prgn>apt-setup</prgn>.
<p>
<prgn>apt-spy</prgn> crée un fichier <file>sources.list</file> automatiquement
en testant chaque site sur son temps de latence et sa bande passante.
<prgn>netselect-apt</prgn> crée un fichier <file>sources.list</file> plus
complet, mais utilise une méthode moins bonne pour choisir le meilleur miroir
(comparaison des temps de ping).
<example>
# aptitude install apt-spy
# cd /etc/apt ; mv sources.list sources.list.org
# apt-spy -d testing -l sources.apt
</example>
</sect1>

]]>


</sect>

<sect id="pecuriarities">Autres particularités de Debian

<sect1 id="dpkg-divert">La commande <prgn>dpkg-divert</prgn>
<p>
<!-- copied from manual page -->
<prgn>dpkg-divert</prgn> force <prgn>dpkg</prgn> à ne pas installer un fichier
à sa place par défaut, mais à une place <strong>détournée</strong>. Les
<strong>détournements</strong> peuvent être utilisés dans les scripts de
paquets &debian; pour déplacer un fichier qui crée un conflit.  Les
administrateurs système peuvent utiliser ceci pour recouvrir les fichiers de
configuration d'un paquet, ou lorsque des fichiers (non marqués comme des
fichiers de configuration) ont besoin d'être préservés par <prgn>dpkg</prgn>,
lors de l'installation d'une version plus récente d'un paquet qui contient ces
fichiers<![%f-ref;[ (voir <ref id="conffile">)]]>.
<example>
# dpkg-divert [--add]  <var>filename</var> # ajoute un détournement
# dpkg-divert --remove <var>filename</var> # supprime un détournement
</example>
Ne pas utiliser <prgn>dpkg-divert</prgn> si cela n'est pas absolument
nécessaire.
</sect1>

<sect1 id="equivs">Le paquet <package>equivs</package>
<p>
Si vous compilez un programme depuis les sources, il est mieux d'en faire un
paquet Debian (<tt>*.deb</tt>). <tt>equivs</tt> est le dernier recourt.
<example>
Package: equivs
Priority: extra
Section: admin
Description: Passer outre les dépendances de paquets.
 C'est un paquet qui peut être utilisé pour créer des paquets Debian qui ne
 contiennent que des informations sur les dépendances.
</example>
</sect1>

<sect1 id="alternatives">Commandes de rechange
<p>
Pour utiliser <prgn>vim</prgn> à la place de <prgn>vi</prgn>, utilisez
<prgn>update-alternatives</prgn>&nbsp;:
<example>
# update-alternatives --display vi
...
# update-alternatives --config vi
  Selection    Command
-----------------------------------------------
      1        /usr/bin/elvis-tiny
      2        /usr/bin/vim
*+    3        /usr/bin/nvi

Enter to keep the default[*], or type selection number: 2
</example>
Les commandes de rechange du système sont maintenues dans
<file>/etc/alternatives</file> en tant que liens symboliques.
<p>
Pour avoir votre environnement de fenêtres X favori, appliquez
<prgn>update-alternatives</prgn> à <file>/usr/bin/x-session-manager</file> et
<file>/usr/bin/x-window-manager</file>.
<![%f-ref;[
Pour plus de détails, voir <ref id="custom-x">.
]]>
<p>
<file>/bin/sh</file> est un lien direct de <file>/bin/bash</file> ou
<file>/bin/ash</file>. Il est plus sûr d'utiliser <file>/bin/bash</file> pour
garder la compatibilité avec de vieux scripts bash mais <file>/bin/ash</file>
permet d'être plus discipliné et d'être compatible POSIX. La mise à jour vers
un noyau Linux 2.4 a tendance à positionner ce lien vers
<file>/bin/ash</file>.
</sect1>

<sect1 id="sys-v">Utilisation des niveaux de fonctionnement
<p>
Lorsqu'ils sont installés, la plupart des paquets &debian; configurent leurs
services pour être lancés dans les niveaux de fonctionnement 2 à 5. Ainsi, il
n'y a pas de différence entre les niveaux 2, 3, 4 et 5 sur un système
&debian; qui n'a pas été personnalisé&nbsp;; &debian; laisse à
l'administrateur local le soin
<![%f-ref;[
de configurer les niveaux de fonctionnement comme décrit dans <ref
id="custombootscripts">.
]]>
<![%q-ref;[
de configurer les niveaux de fonctionnement.
]]>
Cela diffère de la façon dont les niveaux de fonctionnement sont gérés dans
d'autres distributions GNU/Linux populaires. Un changement que vous pouvez
vouloire faire est de désactiver <prgn>xdm</prgn> ou <prgn>gdm</prgn> dans le
niveau de fonctionnement 2 pour que X ne soit pas démarré à la fin de la
séquence de démarrage&nbsp;; vous pouvez alors le démarrer en passant au
niveau 3.
<p>
<![%f-ref;[
Pour plus d'information sur les niveaux de fonctionnement, voir <ref
id="runlevels">.
]]>

<sect1 id="disables">Services désactivés
<p>
Les développeurs &debian; prennent très au sérieux la sécurité du système.
Beaucoup de services sont installés avec le minimum de fonctions activées.
<p>
Exécutez <tt>ps aux</tt> ou consultez le contenu de <file>/etc/init.d/*</file>
et <file>/etc/inetd.conf</file>, si vous avez des doutes (à propos d'Exim,
DHCP, ...). De plus, consultez <file>/etc/hosts.deny</file><![%f-ref;[ de la même façon
qu'à la section <ref id="loginctrl">]]>.
La commande <prgn>pidof</prgn> est aussi utile (voir <manref name="pidof"
section="8">).
<p>
X11 ne permet pas les connexions TCP/IP (distantes) par défaut dans les
versions récentes de  &debian;.
<![%f-ref;[
Voir <ref id="xtcp">.
]]>
La redirection X est aussi désactivée dans SSH.
<![%f-ref;[
Voir <ref id="xssh">.
]]>
</sect1>
</sect>

</chapt>
