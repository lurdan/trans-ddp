<!-- CVS revision of this document "$Revision: 1.33 $"  -->
<!-- CVS revision of original english document "1.88"  -->

<!--Line width ruler (ruler uses 78 characters) 34567890123456789012345-->

<chapt id="package">Gestion des paquets Debian

<p>
Pour réduire la charge réseau des dépôts &debian;, configurez un proxy HTTP
local en utilisant <prgn>squid</prgn> pour les paquets téléchargés par APT et,
si nécessaire, positionnez la variable d'environnement <tt>http_proxy</tt> ou
la variable <tt>http</tt> dans <file>/etc/apt/apt.conf</file>.  Cela permet
d'améliorer considérablement les performances de la mise à jour réseau,
surtout avec plusieurs machines Debian sur un LAN.
<p>
Bien que la fonction de <em>pinning</em> de <manref name="apt_preferences"
section="5"> soit puissante, cela ne résoud pas tous les problèmes de
dépendances, car les définitions de dépendances ont tendance à chercher de
nouvelles version d'autres programmes fondamentaux.
<p>
<![%f-ref;[
L'utilisation de la méthode décrite dans <ref id="chroot"> est utile pour
]]>
<![%q-ref;[
L'utilisation de chroot est utile pour
]]>
simultanément assurer à la fois la stabilité du système et l'accès aux
dernières versions des programmes.
<p>
Ce chapitre est basé sur un système Woody, mais la plupart des informations
s'appliquent aussi à un système Potato (sauf <manref name="apt_preferences"
section="5"> et les sujets relatifs à <file>/etc/apt/preferences</file>).

<sect id="pkg-intro">Introduction
<p>
Si lire toute la documentation pour les développeurs est trop pour vous, lisez
d'abord ce chapitre et commencez à goûter à la puissance de Debian avec
<tt>testing</tt>/<tt>unstable</tt> :-)

<sect1>Outils principaux
<p>
<example>
dselect   &ndash; outil de gestion des paquets à l'aide de menus (haut niveau)
dpkg      &ndash; installation de paquets (focalisé sur les fichiers de
                  paquets)
apt-get   &ndash; installation de paquets (focalisé sur les archives de
                  paquets, interface en ligne de commande pour APT)
tasksel   &ndash; installation de tâches (ensemble de paquets)
aptitude  &ndash; installation de paquets (paquets et tâches, interface
                  ncurses pour APT)
deity     &ndash; autre interface ncurses pour APT
synaptic, gsynaptic &ndash; autres interfaces graphiques pour APT
</example>
Ces outils ne sont pas de même niveau. <prgn>dselect</prgn> tourne au-dessus
d'APT (en ligne de commande&nbsp;: <prgn>apt-get</prgn>) et <prgn>dpkg</prgn>.
<p>
APT utilise <file>/var/lib/apt/lists/*</file> pour suivre les paquets
disponibles tandis que <prgn>dpkg</prgn> utilise
<file>/var/lib/dpkg/available</file>. Si vous avez installé des paquets
directement en utilisant <prgn>apt-get</prgn> ou un programme similaire tel que
<prgn>aptitude</prgn>, assurez-vous de mettre à jour le fichier
<file>/var/lib/dpkg/available</file> par le menu <tt>[U]pdate</tt> de
<prgn>dselect</prgn> ou avec la commande shell <tt>dselect update</tt> avant
d'exécuter <tt>dselect select</tt>, <tt>tasksel</tt> ou <tt>dpkg -l</tt>.
<p>
Quant aux dépendances de paquets, <prgn>apt-get</prgn> récupère
automatiquement les paquets marqués <strong>depends</strong> mais ne s'occupe
pas des paquets marqués <strong>recommends</strong> et
<strong>suggests</strong>, alors que <prgn>dselect</prgn> offre un contrôle
avancé par menus sur le choix de ces paquets, et offre le choix des paquets en
fonction des priorités <strong>depends</strong>, <strong>recommends</strong>
et <strong>suggests</strong>. <prgn>aptitude</prgn> offre une option pour
récupérer automatiquement les paquets marqués <strong>depends</strong>,
<strong>recommends</strong> et <strong>suggests</strong>.
<![%f-ref;[
Voir <ref id="depends">.
]]>
</sect1>

<sect1>Outils pratiques
<p>
<example>
apt-cache         - recherche un paquet dans le cache local
dpkg-reconfigure  - reconfigure un paquet déjà installé (s'il utilise debconf)
dpkg-source       - gère les paquets sources
dpkg-buildpackage - automatise la création d'un paquet
...
</example>
</sect1>
</sect>

<sect id="apt-install">Bases de la gestion de paquets &debian;
<p>
Vous pouvez installer des ensemble de paquets appelés <em>tâches</em> ou
installer des paquets individuels ou mettre à jour votre système en utilisant
des outils de gestion de paquets comme ci-dessous.
<![%f-ref;[
Référez-vous aussi à
<ref id="install">, <ref id="woody"> and <ref id="bin-editor">.
]]>

<sect1 id="tasksel">Installation de <em>tâches</em> avec <prgn>tasksel</prgn>
ou <prgn>aptitude</prgn>
<p>
<prgn>tasksel</prgn> est l'<strong>Installateur de Tâches Debian</strong>, qui
est offert comme option <tt>simple</tt> pendant l'installation du système.
<p>
Si on souhaite installer une fonction courante qui requiert plusieurs paquets,
c'est le meilleur moyen. Assurez-vous d'exécuter les commandes dans l'ordre
suivant&nbsp;:
<example>
# dselect update
# tasksel
</example>
<p>
<prgn>aptitude</prgn> offre aussi accès aux <em>tâches</em>. Cela vous permet
de sélectionner des <em>tâches</em> mais aussi de désélectionner des paquets
de la <em>tâche</em> par le menu.
</sect1>

<sect1 id="setup-apt">Configurer le système APT
<p>
Si vous essayez d'utiliser un environnement mixte comme décrit ici, il se peut
que vous rencontriez des conflits de dépendances. Ce n'est pas une bonne idée
de mélanger les versions. Ce qui suit est pour ceux qui veulent expérimenter
en connaissant les risques.
<p>
Pour une mise à jour sélective en fonctionnant avec la distribution
<tt>testing</tt>, le système APT (&gt;Woody) doit être configuré comme dans
<ref id="woody-transition"> pour utiliser les possibilités de <manref
name="apt_preferences" section="5">.
<p>
D'abord, ajoutez les sources pour <tt>stable</tt>, <tt>testing</tt> et
<tt>unstable</tt> à votre fichier <file>/etc/apt/sources.list</file>. Ensuite,
éditez <file>/etc/apt/preferences</file> pour configurer la bonne
<tt>Pin-Priority</tt>.
<footnote>
La description est gardée ici pour maintenir la cohérence avec d'autres
parties. Si vous utilisez vraiment <tt>testing</tt> ou <tt>unstable</tt>, vous
devriez en fait supprimer les références à <tt>stable</tt> dans
<file>/etc/apt/sources.list</file> et <file>/etc/apt/preferences</file>, parce
que <tt>testing</tt> démarre comme copie de <tt>stable</tt>.
</footnote>
<example>
Package: *
Pin: release a=stable
Pin-Priority: 500

Package: *
Pin: release a=testing
Pin-Priority: 600

Package: *
Pin: release a=unstable
Pin-Priority: 50
</example>

<sect1 id="dselect"><prgn>dselect</prgn>
<p>
Quand <prgn>dselect</prgn> est lancé, il sélectionne automatiquement tous les
paquets «&nbsp;Required&nbsp;», «&nbsp;Important&nbsp;» et
«&nbsp;Standard&nbsp;». Sur le système Potato, certains programmes, comme
teTeX et Emacs, appartenaient à cette liste et il valait mieux ne pas les
sélectionner lors de l'installation initiale en les désélectionnant
manuellement (en tapant «&nbsp;_&nbsp;»). Dans Woody, ils ont été déplacés
dans la catégorie «&nbsp;Optional&nbsp;».
<p>
<prgn>dselect</prgn> a une interface utilisateur déroutante. Quatre commandes
importantes (en majuscules&nbsp;!)&nbsp;:
<example>
Touche      Action
Q           Quitter. Confirme la sélection courante et quitte 
            (passe outre les dépendances).
R           Rétablir. Je ne voulais pas faire ça.
D           (Damn it!) Je me fiche de ce que dselect pense. Fais comme ça&nbsp;!
U           Positionne tout dans l'état sUggéré.
</example>
Avec <tt>D</tt> et <tt>Q</tt>, vous pouvez sélectionner des paquets en conflit
à vos risques et périls. Faites attention en utilisant ces commandes.
Aujourd'hui, <prgn>dselect</prgn> est un outil de sélection par menus mûr qui
offre un contrôle précis sur les choix de paquets <strong>suggests</strong> et
<strong>recommends</strong>.
<p>
Ajoutez une ligne «&nbsp;expert&nbsp;» dans <file>/etc/dpkg/dselect.cfg</file>
pour réduire la quantité d'informations affichée. Pour une machine plus lente,
vous pouvez lancer <prgn>dselect</prgn> sur une machine plus rapide pour
trouver les paquets et utiliser <tt>apt-get install</tt> pour les installer.
<p>
<prgn>dselect</prgn> n'offre pas accès aux paquets qui ne sont pas préférés
par la <tt>Pin-Priority</tt>.
</sect1>

<sect1 id="aptitude"><prgn>aptitude</prgn>
<p>
<prgn>aptitude</prgn> est un nouvel installateur de paquets par menus,
similaire à <prgn>dselect</prgn>. Il peut aussi être utilisé comme alternative
à <prgn>dselect</prgn> en ligne de commande. Voir <manref name="aptitude"
section="1">.
<p>
<prgn>aptitude</prgn> accepte des commandes à une touche, généralement en
minuscule.
<example>
Touche   Action
F10      Menu
?        Aide
u        Mise à jour des informations de l'archive de paquets
g        Téléchargement et installation des paquets sélectionnés
q        Sortie de l'écran courant et sauvegarde des changements
x        Sortie de l'écran courant sans sauvegarde
Enter    Visualisation d'information sur un paquet
</example>
<prgn>aptitude</prgn> offre une option pour récupérer tous les paquets
automatiquement en se basant sur les priorités <strong>depends</strong>,
<strong>recommends</strong> et <strong>suggests</strong>. Vous pouvez changer
ce comportement en choisissant <tt>F10 -> Options -> Dependency handling</tt>
dans le menu.
<p>
<prgn>aptitude</prgn> offre accès à toutes les versions des paquets.
</sect1>

<sect1 id="apt-commands">Commandes <prgn>apt-cache</prgn> et
<prgn>apt-get</prgn>
<p>
Pour fonctionner avec <tt>testing</tt> comme décrit dans l'exemple précédent,
le système peut être géré avec les commandes suivantes&nbsp;:
<list>
<item><tt>apt-get -u upgrade</tt>
 <p>Cela suit la distribution <tt>testing</tt> et met à jour tous les paquets
 du système en installant leurs dépendances de <tt>testing</tt>.
<item><tt>apt-get -u dist-upgrade</tt>
 <p>Cela suit la distribution <tt>testing</tt> et met à jour tous les paquets
 du système en résolvant leurs dépendances de <tt>testing</tt>.
<item><tt>apt-get -u dselect-upgrade</tt>
 <p>Cela suit la distribution <tt>testing</tt> et met à jour tous les paquets
 du système avec la sélection de <prgn>dselect</prgn>.
<item><tt>apt-get -u install <var>package</var></tt>
 <p>Cela installe <var>package</var> et ses dépendances de <tt>testing</tt>.
<item><tt>apt-get -u install <var>package</var>/unstable</tt>
 <p>Cela installe <var>package</var> de <tt>unstable</tt> en prenant les
 dépendances dans <tt>testing</tt>.
<item><tt>apt-get -u install -t unstable <var>package</var></tt>
 <p>Cela installe <var>package</var> de <tt>unstable</tt> en prenant les
 dépendances aussi dans <tt>unstable</tt> en mettant <tt>Pin-Priority</tt> de
 <tt>unstable</tt> à 990.
<item><tt>apt-cache policy <var>foo bar ...</var></tt>
 <p>Cela affiche l'état des paquets <var>foo bar ...</var>.
<item><tt>apt-cache show <var>foo bar ...</var> | less</tt>
 <p>Cela affiche l'information sur les paquets <var>foo bar ...</var>.
<item><tt>apt-get install <var>foo=2.2.4-1</var></tt>
 <p>Cela installe la version <var>2.2.4-1</var> du paquet <var>foo</var>.
<item><tt>apt-get -u install <var>foo bar-</var></tt>
 <p>Cela installe la paquet <var>foo</var> et supprime le paquet
 <var>bar</var>.
<item><tt>apt-get remove <var>bar</var></tt>
 <p>Cela supprime le paquet <var>bar</var> mais garde ses fichiers de
 configuration.
<item><tt>apt-get remove --purge <var>bar</var></tt>
 <p>Cela supprime le paquet <var>bar</var> et tous ses fichiers de
 configuration.
</list>
Dans les exemples précédents, l'utilisation de l'option <tt>-u</tt> permet
qu'<prgn>apt-get</prgn> affiche la liste des paquets qui seront mis à jour et
demande à l'utilisateur de confirmer avant de continuer. Ce qui suit permet de
configurer l'option <tt>-u</tt> par défaut&nbsp;:
<example>
$ cat &gt;&gt; /etc/apt/apt.conf &lt;&lt; .
// Always show packages to be upgraded (-u)
APT::Get::Show-Upgraded "true";
.
</example>
<p>
Utilisez l'option <tt>-s</tt> pour simuler la mise à jour sans l'effectuer.

<sect1 id="apt-tracking">Suivre une version de la distribution &debian;
<p>
Selon vos préférences sur la version de &debian; à suivre, vous pouvez changer
le fichier <file>/etc/apt/preferences</file> d'exemple dans <ref
id="setup-apt"> pour refléter vos besoins&nbsp;:
<example>
suivre stable&nbsp;:            changer Pin-Priority de testing à 50
suivre testing&nbsp;:           garder la configuration présentée
suivre testing(unstable)&nbsp;: changer Pin-Priority de unstable à 500
suivre unstable(testing)&nbsp;: changer Pin-Priority de unstable à 800
</example>
Une idée pour le choix de Pin-Priority est de descendre la table ci-dessus au
fur et à mesure que le temps après une sortie de la distribution stable avance
vers le moment de geler la sortie suivante.
<p>
Attention&nbsp;: suivre la version <tt>testing</tt> de &debian; a l'effet de
bord de recevoir très lentement les correctifs de sécurité.
<p>
Si vous mélangez les versions de &debian;, <tt>testing</tt> dans
<tt>stable</tt> ou <tt>unstable</tt> dans <tt>stable</tt>, vous pourriez
récupérer sans le vouloir des paquets importants de <tt>testing</tt> ou
<tt>unstable</tt> qui peuvent être bogués. Vous êtes prévenus.
<p>
Des exemples de <file>/etc/apt/preferences</file> qui bloquent certains
paquets importants dans leur version la plus stable en suivant la version
moins stable d'autres paquets non essentiels sont disponibles dans le
<url id="&examples;" name="sous-répertoire d'exemples"> dans les fichiers
<file>preferences.testing</file> et <file>preferences.unstable</file>.
Aussi, le fichier <file>preferences.stable</file> force tous les paquets à
faire une mise à niveau inférieur vers <tt>stable</tt>.

<sect1 id="apt-stable">Mettre à niveau inférieur tous les paquets vers
<tt>stable</tt>
<p>
Pour faire une mise à niveau inférieur vers <tt>stable</tt>, éditez
<file>/etc/apt/preferences</file> comme suit&nbsp;:
<example>
Package: *
Pin: release a=stable
Pin-Priority: 1001
</example>
et lancez <tt>apt-get upgrade</tt>, ce qui force la mise à niveau inférieur
grâce à Pin-priority &gt; 1000. Attention, cela peut entraîner de petites
erreurs au niveau des dépendances.

<sect1 id="apt-preferences">Vue générale de <file>/etc/apt/preferences</file>
<p>
Dans le fichier <file>/etc/apt/preferences</file> d'exemple présenté dans <ref
id="setup-apt">, la première ligne «&nbsp;Package: *&nbsp;» signifie que cette
section s'applique à tous les paquets. Vous pouvez utiliser un nom de paquet
spécifique à la place de «&nbsp;*&nbsp;» pour spécifier la
<tt>Pin-Priority</tt> de ce paquet.
<p>
La deuxième ligne «&nbsp;Pin: release a=stable&nbsp;» signifie que
<prgn>apt-get</prgn> récupère le fichier <file>Packages.gz</file> de l'archive
contenant le fichier <file>Release</file> contenant la ligne «&nbsp;Archive:
stable&nbsp;».
<p>
La dernière ligne «&nbsp;Pin-Priority: 500&nbsp;» spécifie une
<tt>Pin-Priority</tt> de 500.
<p>
S'il existe plusieurs paquets de même nom, normalement celui ayant la plus
grande <tt>Pin-Priority</tt> est intallé.
<p>
Les significations de <tt>Pin-Priority</tt> sont&nbsp;:
<list>
<item>1001 et plus&nbsp;: priorités de mise à niveau inférieur
 <p>La mise à niveau inférieur des paquets est permise.
<item>100 à 1000&nbsp;: priorités standard
 <p>La mise à niveau inférieur des paquets n'est pas permise. Quelques valeurs
 importantes&nbsp;:
 <list>
 <item>990&nbsp;: priorité donnée par les options <tt>--target-release</tt>
 ou <tt>-t</tt> de <manref name="apt-get" section="8">.
 <item>500&nbsp;: priorité de tous les paquets par défaut.
 <item>100&nbsp;: priorité de tous les paquets installés.
 </list>
<item>0 à 99&nbsp;: priorités non automatiques (elles sont seulement
 utilisées si le paquet n'est pas installé et qu'il n'existe pas d'autre
 version disponible)
<item>moins que 0&nbsp;: la version n'est jamais sélectionnée
</list>
Le même effet que <tt>--target-release</tt> peut être obtenu en configurant
<file>/etc/apt/apt.conf</file>&nbsp;:
<example>
# echo 'APT::Default-Release "testing";' &gt;&gt; /etc/apt/apt.conf
</example>
L'option de ligne de commande <tt>--target-release</tt> et l'option dans
<file>/etc/apt/apt.conf</file> ont priorité sur l'option dans
<file>/etc/apt/preferences</file>. Faites attention avec ces interférences
quand vous jouez avec <file>/etc/apt/preferences</file>.

<sect id="survival">Commandes de survie Debian
<p>
Avec ces connaissances, on peut vivre une vie d'<strong>éternelle</strong>
«&nbsp;mise à jour&nbsp;» :-)

<sect1 id="bug-check">Rechercher les bogues de Debian et demander de l'aide
<P>
Si vous avez des problèmes avec un paquet, consultez ces sites en premier
avant de demander de l'aide ou de remplir un rapport de bogue.
(<prgn>lynx</prgn>, <prgn>links</prgn> et <prgn>w3m</prgn> fonctionnent
bien)&nbsp;:
<example>
$ lynx &bugs;
$ lynx &bugs;<var>package-name</var>  # si vous connaissez le nom du paquet
$ lynx &bugs;<var>bugnumber</var>     # si vous connaissez le numéro du bogue
</example>
Utilisez le moteur de recherche Google (www.google.com) en incluant
«&nbsp;site:debian.org&nbsp;» comme mot-clé.
<p>
En cas de doute, lisez la documentation. Positionnez <tt>CDPATH</tt> comme
suit&nbsp;:
<example>
export CDPATH=.:/usr/local:/usr/share/doc
</example>
et tapez
<example>
$ cd <var>packagename</var>
$ pager README.Debian # s'il existe
$ mc
</example>
<![%f-ref;[
Plus de ressources sont listées dans <ref id="support">.
]]>
</sect1>

<sect1 id="apt-trouble">Résolution de problèmes de mise à jour avec APT
<p>
Des problèmes de dépendances peuvent arriver lors de la mise à jour avec
<tt>unstable</tt>/<tt>testing</tt>, comme décrit dans <ref
id="upgrade-system">. La plupart du temps, c'est parce qu'un
paquet qui doit être mis à jour possède une dépendance qui n'est pas trouvée.
Ces problèmes sont résolus en utilisant
<example>
# apt-get dist-upgrade
</example>
Si cela ne marche pas, répétez les opérations suivantes jusqu'à ce que le
problème se résolve tout seul&nbsp;:
<example>
# apt-get upgrade -f         # continue «&nbsp;upgrade&nbsp;» malgré les erreurs
... ou
# apt-get dist-upgrade -f    # continue «&nbsp;dist-upgrade&nbsp;» malgré les erreurs
</example>
<p>
De mauvais scripts de mise à jour peuvent causer des problèmes récurrents. Il
est recommandé de résoudre ce genre de situations en consultant les scripts
<file>/var/lib/dpkg/info/<var>packagename</var>.{post,pre}{inst,rm}</file> du
paquet en question et de lancer&nbsp;:
<example>
# dpkg --configure -a    # configure les paquets partiellement installés
</example>
<p>
Si un script se plaint d'un fichier de configuration manquant, cherchez dans
<file>/etc</file> le fichier de configuration correspondant. Si un fichier de
configuration avec une extension <tt>.new</tt> (ou quelquechose similaire)
existe, renommez-le (<prgn>mv</prgn>) en un fichier sans suffixe.
<p>
Des problèmes de dépendances peuvent survenir en installant des paquets de
<tt>unstable</tt>/<tt>testing</tt>. Il existe des moyens de passer outre les
dépendances.
<example>
# apt-get install -f <var>package</var> # passe outre les dépendances non résolues
</example>
<p>
Une autre méthode pour résoudre ces problèmes est d'utiliser le paquet
<package>equivs</package>.  Voir <ref id="equivs">.
Voir <file>&f-equivs;</file><![%f-ref;[ et <ref id="equivs">]]>.
</sect1>

<sect1 id="rescue-dpkg">Sauvetage avec <prgn>dpkg</prgn>
<p>
La récupération d'un <prgn>dselect</prgn> (APT) qui ne fonctionne plus en
utilisant <prgn>dpkg</prgn> sans APT est possible sur un système complètement
cassé&nbsp;:
<example>
# cd /var/cache/apt/archives
# dpkg -i libc6* libdb2* perl*
# dpkg -i apt* dpkg* debconf*
# dpkg -i *  # jusqu'à ce qu'il n'y ait plus d'erreurs
</example>
Si un paquet manque, récupérez-le avec&nbsp;:
<example>
# mc            # utilisez «&nbsp;FTP link&nbsp;» vers un serveur FTP Debian
</example>
Les paquets sur le serveur HTTP/FTP peuvent ne pas être localisés sous le
répertoire habituel <file>/dist</file> mais sous le nouveau répertoire
<file>/pool</file>.
<![%f-ref;[
(Voir <ref id="pools">.)
]]>
<p>
Installez ensuite avec&nbsp;:
<example>
# dpkg -i /var/cache/apt/archives/<var>packagefile.deb</var>
</example>
Pour une dépendance non résolue, résolvez-la ou utilisez&nbsp;:
<example>
# dpkg --ignore-depends=<var>package1</var>,... -i <var>packagefile.deb</var>
# dpkg --force-depends -i <var>packagefile.deb</var>
# dpkg --force-depends --purge <var>package</var>
# dpkg --force-confmiss -i <var>packagefile.deb</var> # Installe fichier de configuration manquant
</example>
</sect1>

<sect1 id="recover-status">Récupérer les données de sélection des paquets
<p>
Si <file>/var/lib/dpkg/status</file> est corrompu, le système &debian; perd
les données de sélection des paquets et en est grandement affecté.

Cherchez le vieux fichier <file>/var/lib/dpkg/status</file> dans
<file>/var/lib/dpkg/status-old</file> ou
<file>/var/backups/dpkg.status.*</file>.
<p>
Garder <file>/var/backups/</file> dans une partition séparée peut être une
bonne idée puisque ce répertoire contient beaucoup de données système
importantes.
<p>
Si le vieux fichier <file>/var/lib/dpkg/status</file> n'est pas disponible,
vous pouvez quand même récupérer les données depuis des répertoires de
<file>/usr/share/doc/</file>.
<example>
# ls /usr/share/doc | \
  grep -v [A-Z] | \
  grep -v '^texmf$' | \
  grep -v '^debian$' | \
  awk '{print $1 " install"}' | \
  dpkg --set-selections
# dselect --expert # réinstallez le système, utilisez dselect si besoin
</example>

<sect1 id="rescue-var">Sauver un système après avoir perdu <file>/var</file>
<p>
Comme le répertoire <file>/var</file> contient des données mises à jour
régulièrement, comme le mail, il peut se corrompre. Le placer dans une
partition indépendante limite les risques. Si le pire arrive, vous pouvez
avoir à reconstruire le répertoire <file>/var</file> pour sauver le système
&debian;.
<p>
Obtenez la structure du répertoire <file>/var</file> à partir d'un système
&debian; qui fonctionne, basé sur la même ou une plus ancienne version de
&debian;, par exemple <file>/var</file>, et placez la à la racine du système
cassé. Ensuite
<example>
# cd /
# mv var var-old      # s'il reste des données utiles
# tar xvzf var.tar.gz # utilisez la structure de Woody
# aptitude            # ou dselect
</example>
Cela doit fournir un système qui fonctionne. Vous pouvez récupérer les
sélections de paquets en utilisant la technique décrite à <ref
id="recover-status">.
([FIXME]: Cette procédure nécessite plus de tests.)
</sect1>

<sect1 id="un-bootable">Installer un paquet sur un système qui ne démarre plus
<p>
Démarrez Linux en utilisant une disquette/CD de sauvetage Debian ou une autre
partition sur un système Linux multi-boot.
<![%f-ref;[
Voir <ref id="booting">. 
]]>
Montez le système qui ne démarre plus sur <file>/target</file> et utilisez le
mode d'installation chroot de <prgn>dpkg</prgn>.
<example>
# dpkg --root /target -i <var>packagefile.deb</var>
</example>
Configurez ensuite et résolvez les problèmes.
<p>
Au fait, si c'est seulement un <prgn>lilo</prgn> cassé qui empêche le
démarrage, vous pouvez démarrer avec le disque de sauvetage standard Debian. A
l'invite de démarrage, en considérant que la partition racine de Linux est sur
<file>/dev/hda12</file> et que vous souhaitez le niveau de fonctionnement 3,
entrez&nbsp;:
<example>
boot: rescue root=/dev/<var>hda12</var> 3
</example>
Vous avez maintenant démarré un système presque complètement fonctionnel avec
le noyau de la disquette. (Il peut y avoir de petits problèmes dus au manque
d'options du noyau ou de modules.)
</sect1>

<sect1>Que faire si <prgn>dpkg</prgn> est cassé
<p>
Cela pose de sérieux problèmes pour l'installation des fichiers <tt>.deb</tt>.
Les commandes suivantes vous guident pour récupérer cette situation. (Sur la
première ligne, vous pouvez remplacer «&nbsp;links&nbsp;» par votre navigateur
favori.)
<example>
$ links http://<var>http.us.debian.org</var>/debian/pool/main/d/dpkg/
  ... téléchargez le bon dpkg_<var>version</var>_<var>arch</var>.deb
$ su
password: *****
$ ar x dpkg_<var>version</var>_<var>arch</var>.deb
# mv data.tar.gz /data.tar.gz
# cd /
# tar xzfv data.tar.gz
</example>
Pour une machine <tt>i386</tt>, <tt>http://packages.debian.org/dpkg</tt> peut
aussi être utilisé comme URL.
</sect1>

</sect>

<sect id="debian-package">Commandes «&nbsp;nirvana&nbsp;» de Debian
<p>
A la <strong>lumière</strong> de ces commandes, on sera sauvé de l'éternelle lutte karmique
contre l'enfer de la mise à jour afin d'atteindre le <strong>nirvana</strong> Debian. :-)

<sect1 id="info-file">Informations sur un fichier
<p>
De l'information sur un fichier peut être trouvée avec&nbsp;:
<example>
$ dpkg {-S|--search} pattern # cherche «&nbsp;pattern&nbsp;» dans les paquets installés
$ zgrep -e pattern <var>/local/copy/of/debian/woody/Contents-i386.gz</var>
             # cherche «&nbsp;pattern&nbsp;» dans les fichiers de l'archive Debian
</example>
Sinon, utilisez les commandes spécialisées pour les paquets&nbsp;:
<example>
# apt-get install dlocate
                 # crée un conflit avec slocate (version sécurisée de locate)
$ dlocate <var>filename</var>         # solution de rechange rapide pour dpkg -L et dpkg -S
...
# apt-get install auto-apt # outil d'installation de paquets à la demande
# auto-apt update          # crée le fichier db pour auto-apt
$ auto-apt search <var>pattern</var>
                # recherche exhaustive dans l'archive de paquets, installés ou non
</example>
</sect1>

<sect1 id="info-package">Informations sur un paquet
<p>
Cherche et affiche les informations sur un paquet. Assurez-vous qu'apt pointe
vers la bonne archive en éditant <file>/etc/apt/sources.list</file>. Si vous
voulez voir les différences entre un paquet de
<tt>testing</tt>/<tt>unstable</tt> et un paquet installé, utilisez
<tt>apt-cache policy</tt>&mdash;plutôt sympa.
<example>
# apt-get   check         # met à jour le cache et vérifie les dépendances
$ apt-cache search  <var>texte</var>  # cherche un paquet à partir de "texte"
$ apt-cache policy  <var>paquet</var> # information sur la priorité d'un paquet
$ apt-cache show -a <var>paquet</var> # affiche la description d'un paquet
                                        dans toutes les distributions
$ apt-cache showpkg <var>paquet</var> # informations de debogage sur un paquet
# dpkg  --audit|-C         # cherche les paquets partiellement installés
$ dpkg {-s|--status} <var>paquet</var> ... # état et description d'un paquet installé
$ dpkg -l <var>paquet</var> ...       # état du paquet installé (1 ligne)
$ dpkg -L <var>paquet</var> ...       #liste les noms de fichiers installés par le paquet
</example>
<!-- Erase this when manual page gets fixed.  FIXME -->
<tt>apt-cache showsrc</tt> n'est pas documenté à la sortie de Woody, mais
fonctionne :)
<p>
Vous pouvez aussi trouver des informations sur les paquets (j'utilise
<tt>mc</tt> pour naviguer) dans&nbsp;:
<example>
/var/lib/apt/lists/*
/var/lib/dpkg/available
</example>
La comparaison des fichiers suivants fournit des informations sur ce qu'il
s'est exactement passé lors des dernières installations.
<example>
/var/lib/dpkg/status
/var/backups/dpkg.status*
</example>

</sect1>

<sect1 id="apt-get-auto">Installation automatique avec APT
<p>
Pour une installation non interactive, ajoutez la ligne suivante dans
<file>/etc/apt/apt.conf</file>&nbsp;:
<example>
Dpkg::Options {"--force-confold";}
</example>
C'est l'équivalent de lancer <tt>apt-get -q -y <var>packagename</var></tt>.
Parce que cela répond automatiquement «&nbsp;oui&nbsp;» à toutes les
questions, cela peut causer des problèmes, aussi faites attention en utilisant
cette astuce.
Voir <manref name="apt.conf" section="5"> et
<manref name="dpkg" section="1">.
<p>
Vous pouvez configurer les paquets par la suite en suivant <ref
id="reconfigure">.

<sect1 id="reconfigure">Reconfigurer les paquets installés
<p>
Utilisez les commandes suivantes pour reconfigurer un paquet installé.
<example>
# dpkg-reconfigure --priority=<var>medium</var> <var>package</var> [...]
# dpkg-reconfigure --all   # reconfigure tous les paquets
# dpkg-reconfigure locales # génère de nouvelles locales
# dpkg-reconfigure --p=<var>low</var> xserver-xfree86 # reconfigure le serveur X
</example>
Faites cela pour <prgn>debconf</prgn> si vous avez besoin de changer le mode
de dialogue de <prgn>debconf</prgn> de façon permanente.
<p>
Certains logiciels sont livrés avec des scripts de configuration.
<example>
apt-setup     - crée /etc/apt/sources.list
install-mbr   - installe un gestionnaire de Master Boot Record
tzconfig      - configure le fuseau horaire local
gpmconfig     - configure le gestionnaire de souris gpm
sambaconfig   - configure samba dans potato (woody utilise debconf)
eximconfig    - configure Exim (MTA)
texconfig     - configure teTeX
apacheconfig  - configure Apache (httpd)
cvsconfig     - configure CVS
sndconfig     - configure le système sonore
...
update-alternatives - configure la commande par défaut&nbsp;; par exemple, vim pour vi
update-rc.d         - gestion des scripts de démarrage System-V
update-menus        - système de menus Debian
...
</example>
</sect1>

<sect1 id="remove">Enlever et purger des paquets
<p>
Enlever un paquet en gardant la configuration&nbsp;:
<example>
# apt-get remove <var>package</var> ...
# dpkg  --remove <var>package</var> ...
</example>
Enlever un paquet et sa configuration&nbsp;:
<example>
# apt-get remove --purge <var>package</var> ...
# dpkg    --purge        <var>package</var> ...
</example>
</sect1>

<sect1 id="hold">Garder de vieux paquets
<p>
Par exemple, pour garder <package>libc6</package> et
<package>libc6-dev</package> lors de l'utilisation de <prgn>dselect</prgn> et
<tt>apt-get -u upgrade <var>paquet</var></tt>, on peut utiliser les commandes
suivantes&nbsp;:
<example>
# echo -e "libc6 hold\nlibc6-dev hold" | dpkg --set-selections
</example>
<tt>apt-get -u upgrade <var>paquet</var></tt> ne sera pas gêné par cela. Pour
garder un paquet en forçant une mise à niveau inférieur automatique avec
<tt>apt-get -u upgrade <var>paquet</var></tt> ou <tt>apt-get -u
dist-upgrade</tt>, ajoutez ce qui suit dans
<file>/etc/apt/preferences</file>&nbsp;:
<example>
Package: libc6
Pin: release a=stable
Pin-Priority: 2000
</example>
Ici, l'entrée «&nbsp;<tt>Package:</tt>&nbsp;» ne peut pas utiliser d'entrées comme
«&nbsp;<tt>libc6*</tt>&nbsp;». Si vous voulez garder tous les paquets binaires
liés au paquet source <package>glibc</package> synchronisés, il faut les
lister explicitement.
<p>
La commande suivante liste les paquets à garder&nbsp;:
<example>
dpkg --get-selections "*"|grep -e "hold$"
</example>
</sect1>

<sect1 id="mixedsys">Système mixte <tt>stable</tt>/<tt>testing</tt>/<tt>unstable</tt>
<p>
<prgn>apt-show-versions</prgn> peut lister les versions des paquets
disponibles dans chaque distribution.
<example>
$ apt-show-versions | fgrep /testing | wc
... nombre de paquets de testing
$ apt-show-versions -u
... liste de paquets qu'il est possible de mettre à jour
$ apt-get install `apt-show-versions -u -b | fgrep /unstable`
... met à jour tous les paquets de unstable à leur dernière version
</example>
</sect1>

<sect1 id="cache">Supprimer les paquets du cache
<p>
Les installations de paquets avec APT laissent des fichiers de paquets dans le
cache <file>/var/cache/apt/archives</file>&nbsp;; ce cache doit être nettoyé.
<example>
# apt-get autoclean # efface les fichiers de paquets inutiles
# apt-get clean     # efface tous les fichiers de paquets du cache
</example>
</sect1>


<sect1 id="record">Enregistrer/copier la configuration du système
<p>
Pour faire une copie locale de l'état de la sélection des paquets&nbsp;:
<example>
$ dpkg --get-selections "*" &gt;<var>myselections</var>   # ou utiliser \*
</example>
<tt>"*"</tt> inclut aussi les noms des paquets à purger dans
<tt><var>myselections</var></tt>.
<p>
Vous pouvez transférer ce fichier vers un autre ordinateur, et l'installer
avec&nbsp;:
<example>
# dselect update
# dpkg --set-selections &lt;<var>myselections</var>
# apt-get -u dselect-upgrade    # ou dselect install
</example>
</sect1>

<sect1 id="port">Porter un paquet vers le système <tt>stable</tt>
<p>
Pour des mises à jour partielles du système <tt>stable</tt>, recréer un paquet
pour l'environnement utilisé à partir des sources est recommandé. Cela évite
de nombreuses mises à jour de paquets à cause des dépendances. D'abord,
ajouter l'entrée suivante dans <file>/etc/apt/sources.list</file>&nbsp;:
<example>
deb-src &http-us;debian testing \
 main contrib non-free
deb-src &http-non-us;debian-non-US testing/non-US \
 main contrib non-free
deb-src &http-us;debian unstable \
 main contrib non-free
deb-src &http-non-us;debian-non-US unstable/non-US \
 main contrib non-free
</example>
Chaque entrée de <tt>deb-src</tt> est ici scindée en deux lignes à cause de
contraintes d'impression, mais les entrées réelles dans
<file>sources.list</file> doivent tenir en une seule ligne.
<p>
Ensuite, récupérez les sources et construisez un paquet&nbsp;:
<example>
$ apt-get update  # met à jour la liste des paquets source
$ apt-get source <var>package</var>
$ dpkg-source -x <var>package.dsc</var>
$ cd <var>package-version</var>
  ... cherche parmi les paquets requis (Build-depends dans le fichier .dsc) et
      les installe. Il faut le paquet «&nbsp;fakeroot&nbsp;» aussi.

$ dpkg-buildpackage -rfakeroot 

  ...ou (si pas de signature)
$ dpkg-buildpackage -rfakeroot -us -uc # utilisez «&nbsp;debsign&nbsp;» ensuite si nécessaire

  ...ensuite pour installer
$ su -c "dpkg -i <var>packagefile.deb</var>"
</example>
Normalement, il n'y a besoin d'installer que peu de paquets avec un suffixe
«&nbsp;-dev&nbsp;» pour satisfaire les dépendances. <prgn>debsign</prgn> est
dans le paquet <package>devscripts</package>. <prgn>auto-apt</prgn> peut aider
à résoudre les dépendances. L'utilisation de <prgn>fakeroot</prgn> évite une
utilisation non nécessaire du compte root.
<p>
Dans Woody, ces problèmes de dépendances peuvent être simplifiés.
Par exemple, pour compiler le paquet source de <package>pine</package>&nbsp;:
<example>
# apt-get build-dep pine
# apt-get source -b pine
</example>
</sect1>

<sect1 id="local">Archive locale de paquets
<p>
Afin de créer une archive locale de paquets qui soit compatible avec les
systèmes APT et dselect, un fichier <file>Packages</file> doit être créé et les
fichiers de paquets ont besoin d'être archivés dans un arbre de répertoires
particulier.
<p>
Un dépôt local similaire à une archive officielle Debian peut être créé
avec&nbsp;:
<example>
# apt-get install dpkg-dev
# cd <var>/usr/local</var>
# install -d <var>pool</var> # les paquets physiques sont placés ici
# install -d dists/<var>unstable</var>/<var>main</var>/binary-<var>i386</var>
# ls -1 <var>pool</var> | sed 's/_.*$/ <var>priority</var> <var>section</var>/' | uniq &gt; <var>override</var>
# editor <var>override</var> # ajustez <var>priority</var> et <var>section</var>
# dpkg-scanpackages <var>pool</var> <var>override</var> <var>/usr/local</var>/ \
   &gt; dists/<var>unstable</var>/<var>main</var>/binary-<var>i386</var>/Packages
# cat &gt; dists/<var>unstable</var>/<var>main</var>/Release &lt;&lt; EOF
Archive: <var>unstable</var>
Version: <var>3.0</var>
Component: <var>main</var>
Origin: <var>Local</var>
Label: <var>Local</var>
Architecture: <var>i386</var>
EOF
# echo "deb file:<var>/usr/local</var> <var>unstable</var> <var>main</var>" \
   &gt;&gt; /etc/apt/sources.list
</example>
<p>
Autrement, un dépôt local peut être créé de façon rapide et sale&nbsp;:
<example>
# apt-get install dpkg-dev
# mkdir <var>/usr/local/debian</var>
# mv <var>/some/where/package.deb</var> <var>/usr/local/debian</var>
# dpkg-scanpackages <var>/usr/local/debian</var> /dev/null | \
  gzip - &gt; <var>/usr/local/debian</var>/Packages.gz
#  echo "deb file:<var>/usr/local/debian</var> ./" &gt;&gt; /etc/apt/sources.list
</example>
<p>
Ces archives peuvent être accédées à distance en fournissant ces répertoires
aux méthodes HTTP ou FTP des entrées du fichier
<file>/etc/apt/sources.list</file>.

<sect1 id="alien">Convertir ou installer un paquet non Debian
<p>
<package>alien</package> permet de convertir des paquets binaires fournis aux
formats <tt>rpm</tt> de Redhat, <tt>slp</tt> de Stampede, <tt>tgz</tt> de
Slackware, et <tt>pkg</tt> de Solaris en paquet <tt>deb</tt> de &debian;. Si
vous voulez utiliser un paquet d'une autre distribution Linux, vous pouvez
utiliser <prgn>alien</prgn> pour le convertir vers votre format de paquet
préféré et l'installer. <package>alien</package> supporte aussi les paquets
LSB.
</sect1>                                                 

<sect1 id="debsums">Vérifier les fichiers de paquets installés
<p>
<prgn>debsums</prgn> permet la vérification des fichiers de paquets installés
grâce à des sommes de contrôle MD5. Certains paquets n'ont pas de somme de
contrôle MD5. Une solution temporaire pour les administrateurs système&nbsp;:
<example>
# cat >>/etc/apt/apt.conf.d/90debsums
DPkg::Post-Install-Pkgs {"xargs /usr/bin/debsums -sg";};
^D
</example>
par Joerg Wendland <email>joergland@debian.org</email> (non testé).

<![%f-ref;[
<sect1 id="spy">Améliorer le fichier <file>sources.list</file>
<p>
En bref, mes efforts pour optimiser <file>sources.list</file> n'ont pas
réellement apporté de gain de performance pour moi qui vit aux Etats-Unis.
J'ai choisi manuellement un site proche avec <prgn>apt-setup</prgn>.
<p>
<prgn>apt-spy</prgn> crée un fichier <file>sources.list</file> automatiquement
en testant chaque site sur son temps de latence et sa bande passante.
<prgn>netselect-apt</prgn> crée un fichier <file>sources.list</file> plus
complet, mais utilise une méthode moins bonne pour choisir le meilleur mirroir
(comparaison des temps de ping).
<example>
# apt-get install apt-spy
# cd /etc/apt ; mv sources.list sources.list.org
# apt-spy -d testing -l sources.apt
</example>
</sect1>

]]>


</sect>

<sect id="pecuriarities">Autres particularités de Debian

<sect1 id="dpkg-divert">La commande <prgn>dpkg-divert</prgn>
<p>
<!-- copied from manual page -->
<prgn>dpkg-divert</prgn> force <prgn>dpkg</prgn> à ne pas installer un fichier
à sa place par défaut, mais à une place <strong>détournée</strong>. Les
<strong>détournements</strong> peuvent être utilisés dans les scripts de
paquets &debian; pour déplacer un fichier qui crée un conflit.  Les
administrateurs système peuvent utiliser ceci pour recouvrir les fichiers de
configuration d'un paquet, ou lorsque des fichiers (non marqués
<strong>conffiles</strong>) ont besoin d'être préservés par <prgn>dpkg</prgn>,
lors de l'installation d'une version plus récente d'un paquet qui contient ces
fichiers<![%f-ref;[ (voir <ref id="conffile">)]]>.
<example>
# dpkg-divert [--add]  <var>filename</var> # ajoute un détournement
# dpkg-divert --remove <var>filename</var> # supprime un détournement
</example>
Ne pas utiliser <prgn>dpkg-divert</prgn> si cela n'est pas absolument
nécessaire.
</sect1>

<sect1 id="equivs">Le paquet <package>equivs</package>
<p>
Si vous compilez un programme depuis les sources, il est mieux d'en faire un
paquet Debian (<tt>*.deb</tt>). <tt>equivs</tt> est le dernier recourt.
<example>
Package: equivs
Priority: extra
Section: admin
Description: Passer outre les dépendances de paquets.
 C'est un paquet qui peut être utilisé pour créer des paquets Debian qui ne
 contiennent que des informations sur les dépendances.
</example>
</sect1>

<sect1 id="alternatives">Commandes de rechange
<p>
Pour utiliser <prgn>vim</prgn> à la place de <prgn>vi</prgn>, utilisez
<prgn>update-alternatives</prgn>&nbsp;:
<example>
# update-alternatives --display vi
...
# update-alternatives --config vi
  Selection    Command
-----------------------------------------------
      1        /usr/bin/elvis-tiny
      2        /usr/bin/vim
*+    3        /usr/bin/nvi

Enter to keep the default[*], or type selection number: 2
</example>
Les commandes de rechange du système sont maintenues dans
<file>/etc/alternatives</file> en tant que liens symboliques.
<p>
Pour avoir votre environnement de fenêtres X favori, appliquez
<prgn>update-alternatives</prgn> à <file>/usr/bin/x-session-manager</file> et
<file>/usr/bin/x-window-manager</file>.
<![%f-ref;[
Pour plus de détails, voir <ref id="custom-x">.
]]>
<p>
<file>/bin/sh</file> est un lien direct de <file>/bin/bash</file> ou
<file>/bin/ash</file>. Il est plus sûr d'utiliser <file>/bin/bash</file> pour
garder la compatibilité avec de vieux scripts bash mais <file>/bin/ash</file>
permet d'être plus discipliné et d'être compatible POSIX. La mise à jour vers
un noyau Linux 2.4 a tendance à positionner ce lien vers
<file>/bin/ash</file>.
</sect1>

<sect1 id="sys-v"><prgn>init</prgn> System-V et niveaux de fonctionnement
<p>
Le niveau de fonctionnement par défaut peut être configuré dans
<file>/etc/inittab</file>.
<p>
Contrairement à d'autres distributions, Debian laisse la gestion des niveaux
de fonctionnement complètement à l'administrateur. La gestion de
<prgn>init</prgn> de type System-V est sensée être effectuée par les scripts
<prgn>update-rc.d</prgn>.
<p>
Démarrer <file>/etc/init.d/<var>name</var></file> dans les niveaux 1, 2, 3 et
le stopper dans les niveaux 4, 5 avec une priorité de 20 (normal) peut se
faire avec&nbsp;:
<example>
# update-rc.d <var>name</var> start 20 1 2 3 . stop 20 4 5 .
</example>
Enlever le lien symbolique alors que le script dans <prgn>init.d</prgn> existe
toujours peut se faire avec&nbsp;:
<example>
# update-rc.d -f <var>name</var> remove
</example>
Pour éditer le niveau de fonctionnement, je triche. J'édite manuellement en
utilisant la commande <prgn>mv</prgn> à l'invite shell de <prgn>mc</prgn> et
je copie les liens avec Alt-Entrée. Par exemple&nbsp;:
<example>
# mv S99xdm K99xdm # désactive xdm (X display manager)
</example>
Je désactive même un daemon en insérant <tt>exit 0</tt> au début du script
<prgn>init.d</prgn>. Après tout, ce sont des fichiers de configuration.
</sect1>

<sect1 id="disables">Services désactivés
<p>
La distribution Debian prend très au sérieux la sécurité du système et
s'attend à ce que l'administrateur soit compétent. Ainsi, la facilité
d'utilisation est quelquefois mise en second plan et certains services fournis
par des daemons sont livrés avec le niveau de sécurité le plus élevé, avec le
moins de services (voire aucun) disponibles dans leur état d'installation par
défaut.
<p>
Exécutez <tt>ps aux</tt> ou consultez le contenu de <file>/etc/init.d/*</file>
et <file>/etc/inetd.conf</file>, si vous avez des doutes (à propos d'Exim,
DHCP, ...). De plus, consultez <file>/etc/hosts.deny</file><![%f-ref;[ de la même façon
qu'à la section <ref id="loginctrl">]]>.
La commande <prgn>pidof</prgn> est aussi utile (voir <manref name="pidof"
section="8">).
<p>
X11 ne permet pas les connexions TCP/IP (distantes) par défaut dans les
versions récentes de  &debian;.
<![%f-ref;[
Voir <ref id="xtcp">.
]]>
La redirection X est aussi désactivée dans SSH.
<![%f-ref;[
Voir <ref id="xssh">.
]]>
</sect1>
</sect>

</chapt>
