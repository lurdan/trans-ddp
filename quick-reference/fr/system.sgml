<!-- CVS revision of this document "$Revision: 1.10 $"  -->
<!-- CVS revision of original english document "1.23"  -->
<chapt id="system">Notions fondamentales sur Debian

<!-- 

Mereged from 4 SGML files in FAQ Feburuary 2002
  ftparchives.sgml, 
  pkg_basics.sgml, 
  pkgtools.sgml, 
  uptodate.sgml

Then retitled under "Debian fundamentals" with 
 chapt moved to sect
 sect moved to sect1
 sect1 moved to sect2

Commented out reference to arches, should rewrite it to reference to 
release manual/install manual soon.
 
Pieces imported from other parts of FAQ.
 Small section from customizing.sgml regarding init/runlevel is added.
 Small section from customizing.sgml regarding diverse is added.
 Small section from software.sgml regarding nonenglish is added.

Mereged from another SGML files in FAQ Feburuary 2002
  kernel.sgml

Then retitled under "Debian fundamentals" with 
 chapt moved to sect
 sect moved to sect1

Titles of sect/sect1 are changed to suits "Debian reference"

All minor edits I did left tracing information as comments.

Several sections were actually deleted since two consecutive -'s
made it impossible to comment out.

Also rewrote section to suite more for ptato and woody.
Unless slink is used, howmany people care dpkg-ftp :)

-->

<p>
Ce chapitre donne des informations sur les notions fondamentales de Debian
pour des non-développeurs. Pour des informations officielles, voir :
<list>
<item>Charte Debian
<item>Manuel du paquetage Debian (potato)
<item>Référence du développeur Debian
<item>Guide des nouveaux responsables Debian
</list>
listés dans la section <ref id="references">.

<p>
Si l'on recherche des explications basées sur des solutions et sans les
détails, se référer directement à <ref id="package"> ou aux chapitres
appropriés.
<p>
Ce chapitre consiste en une réorganisation de documents pris dans la FAQ
Debian, afin qu'un administrateur système Debian puisse débuter.

<!-- 
"FTP archives" is now changed as simple "archives" since it can be reached 
throgh HTTP and other method
-->

<sect id="ftparchives">Les archives Debian

<sect1 id="dirtree">Structure de répertoires

<p>Les logiciels paquetés pour &debian; sont disponibles dans un des nombreux
arbres de répertoires sur chaque <url id="&mirror-site;" name="site mirroir
Debian"> accessible par FTP ou HTTP.

<p>Les répertoires suivants sont sur chaque mirroir Debian sous le répertoire
<tt>debian</tt> : 
<taglist>
  <tag><em>/dists/</em>:
    <item>Ce répertoire contient les "distributions", et est utilisé pour
accéder aux paquets actuellement disponibles dans les versions et pre-versions
de Debian. Certains vieux paquets et fichiers <tt>Packages.gz</tt> sont
toujours là.
  <tag><em>/pool/</em>:
    <item>Nouvelle place de tous les paquets des versions et pre-versions de
Debian.
  <tag><em>/tools/</em>:
    <item>Utilitaires DOS pour créer des disquettes de démarrage, partitionner
un disque dur, compresser/décompresser des fichiers, et démarrer Linux.
  <tag><em>/doc/</em>:
    <item>La documentation de base de Debian, telle que la FAQ, les instructions
pour faire un rapport de bogues, etc.
  <tag><em>/indices/</em>:
    <item>Le fichier <file>Maintainers</file> et les fichiers <file>override</file>.
  <tag><em>/project/</em>:
    <item>Principalement des ressources pour les développeurs, comme :
    <taglist>
      <tag><em>project/experimental/</em>:
        <item>Ce répertoire contient des paquets et des outils qui sont en
développement, et sont encore en état de test alpha. Les utilisateurs ne
devraient pas utiliser des paquets de ce répertoire parce qu'ils peuvent être
dangereux même pour des utilisateurs expérimentés.
      <tag><em>project/orphaned/</em>:
        <item>Paquets qui ont été abandonnés par leur ancien responsable et ont
été retirés de la distribution.
    </taglist>
</taglist>

<sect1 id="dists">Distributions Debian

<p>Normalement il y a trois distributions Debian dans le répertoire
<tt>dists</tt>. Leurs noms sont la distribution "stable", la distribution
"testing" et la distribution "unstable". Quelquefois il y a aussi la
distribution "frozen" (voir <ref id="frozen">). Chaque distribution est définie
par un lien symbolique vers le répertoire réel, utilisant un nom de code et
situé dans le répertoire <tt>dists</tt>.

<sect1 id="stable">La distribution <tt>stable</tt>

<p>La distribution "stable" est dans le répertoire <tt>stable</tt> :
<list>
  <item>stable/main/ :
  Ce répertoire contient les paquets constituant la version la plus récente du
système &debian;.

  <p>Ces paquets sont aussi conformes aux <url name="Principes du logiciel
libre selon Debian" id="&social-contract;#guidelines">, et sont tous
utilisables et redistribuables librement.

  <item>stable/non-free/ :
  Ce répertoire contient des paquets dont la distribution est restreinte et
nécessite que les distributeurs prennent soigneusement en compte les exigences
spécifiées par la licence.

  <p>Par exemple, certains paquets ont une licence qui interdit la
distribution commerciale. D'autres peuvent être redistribués mais sont en fait
des partagiciels et non des logiciels libres. Les licences de chacun de ces
paquets doivent être étudiées, et dans certains cas négociées, avant que les
paquets soient inclus dans une redistribution (par exemple, sur un CD-ROM).

  <item>stable/contrib/ :
  Ce répertoire contient des paquets qui sont conformes aux principes du
logiciel libre selon Debian  et <em>distribuables librement</em>, mais
dépendent d'un paquet qui <em>n'est pas</em> distribuable librement et n'est
ainsi disponible que dans la section non-free.
</list>
<p>L'état courant de la distribution <tt>stable</tt> est accessible sur
la page web <url id="&stable-problems;" name="Les problèmes de 'stable'">.

<sect1 id="testing">La distribution <tt>testing</tt>

<p>Les paquets sont enregistrés dans le répertoire <tt>testing</tt> après
avoir subi une certaine quantité de tests dans <tt>unstable</tt>. Les nouveaux
paquets sont situés dans le répertoire <tt>pool</tt> <ref id="pools">. Les
sous-répertoires <tt>main</tt>, <tt>contrib</tt> et <tt>non-free</tt> sont
aussi présents dans <tt>testing</tt>, séparés par les mêmes critères que pour
<tt>stable</tt>.

<p>Les paquets doivent être synchronisés pour toutes les architectures où ils
sont compilés et ne doivent pas avoir de dépendances qui les rendent
ininstallables ; ils doivent aussi avoir moins de bogues critiques pour une
sortie de version que ceux de <tt>unstable</tt>. De cette façon, on espère que
<tt>testing</tt> est toujours prête à être candidate à une sortie. Plus de
détails sur le méchanisme sont disponibles à <url id="&testing-notes;">.

<p>L'état courant de la distribution <tt>testing</tt> est accessible
sur les sites suivants (en Anglais) :
<list compact>
<item><url id="&update-excuses;" 
         name="update excuses">
<item><url id="&testing-problems;" 
         name="testing problems">
<item><url id="&release-critical;" 
         name="release-critical bugs">
<item><url id="&qa-base-bugs;" 
         name="base system bugs">
<item><url id="&qa-standard-bugs;" 
         name="bugs in standard and task packages">
<item><url id="&qa-bugs;" 
         name="other bugs and bug squashing party notes">
</list>

<sect1 id="unstable">La distribution <tt>unstable</tt>

<p>Les paquets sont enregistrés dans le répertoire <tt>unstable</tt> après
avoir été téléchargés dans l'archive Debian et y restent jusqu'à ce qu'ils
soient déplacés dans <tt>testing</tt> après quelque temps. Les nouveaux
paquets sont situés dans le répertoire <tt>pool</tt> <ref id="pools">. Les
sous-répertoires <tt>main</tt>, <tt>contrib</tt> et <tt>non-free</tt> sont
aussi présents dans <tt>unstable</tt>, et ont les mêmes fonctions que dans
<tt>stable</tt>.

<p>La distribution <tt>unstable</tt> contient une image du système en
développement le plus récent. Les utilisateurs sont encouragés à utiliser et
tester ces paquets, mais sont prévenus de leur état. L'avantage à utiliser
<tt>unstable</tt> est que vous êtes toujours à jour avec la dernière version du
projet &debian;&mdash;mais si ça casse, vous en découvrez les désavantages :-)

<p>L'état courant de la distribution <tt>unstable</tt> est accessible à la
page web : <url id="&unstable-problems;" name="Problèmes de unstable">.

<!-- Above was enough
<sect1 id="sid">The "sid" distribution

<p><em>sid</em> or <em>unstable</em> is the place where most of the packages
are initially uploaded. It will never be released directly, because packages
which are to be released will first have to be included in <em>testing</em>,
in order to be released in <em>stable</em> later on. sid contains packages
for both released and unreleased architectures.

<p>The name "sid" also comes from the "Toy Story" animated motion picture:
Sid was the boy next door who destroyed toys :-)
-->

<sect1 id="frozen">La distribution <tt>frozen</tt>

<p>Lorsque la distribution <tt>testing</tt> est mûre, elle est gelée (NdT :
frozen en Anglais), c'est-à-dire que l'on n'accepte plus de nouveau code,
seulement des corrections de bogues, si nécessaire. De plus, un nouvel arbre
testing est créé dans le répertoire <tt>dists</tt>, avec un nouveau nom de
code. La distribution frozen subit quelques mois de test, avec par
intermittence des mises à jour et des gelées complètes, ce qu'on appelle des
`cycles de test'.

<p>On garde une trace des bogues de la distribution frozen qui peuvent retarder
la sortie d'un paquet ou qui peuvent retarder la sortie de la distribution
complète. Lorsque le nombre de bogues descend en dessous des valeurs maximum
acceptables, la distribution frozen devient stable, est sortie, et la
distribution stable précédente devient obsolète (et est déplacée dans les
archives).

<sect1 id="codenames">Les noms de code de la distribution Debian

<p>Les noms des répertoires physiques dans le répertoire <tt>dists</tt>, comme
<tt>potato</tt> et <tt>woody</tt>, sont juste des noms de code. Lorsqu'une
distribution Debian est en développement, elle n'a pas de numéro de version
mais un nom de code. Le but de ces noms de code est de faciliter le travail
des mirroirs de la distribution Debian (si un répertoire réel comme
<tt>unstable</tt> changeait soudainement son nom en <tt>stable</tt>, beaucoup
de données seraient à télécharger de nouveau).

<!-- XXX update for new distros -->
<p>Actuellement, <tt>stable</tt> est un lien symbolique vers <tt>potato</tt>
(càd &debian; &release;) et <tt>testing</tt> est un lien symbolique vers
<tt>woody</tt>. Cela signifie que <tt>potato</tt> est l'actuelle distribution
stable et <tt>woody</tt> l'actuelle distribution testing.

<p><tt>unstable</tt> est un lien symbolique permanent vers <tt>sid</tt>, car
<tt>sid</tt> est toujours la distribution unstable.

<sect1 id="oldcodenames">Noms de code utilisés dans le passé

<p>Les autres noms de code qui ont déjà été utilisés sont : <tt>buzz</tt> pour
la version 1.1, <tt>rex</tt> pour la version 1.2, <tt>bo</tt> pour les
versions 1.3.x, <tt>hamm</tt> pour la version 2.0, et <tt>slink</tt> pour la
version 2.1.

<p>Tandis que les distributions les plus récentes sont gardées sous le
répertoire <tt>debian</tt> de chaque mirroir Debian, les archives des
anciennes distributions Debian comme <tt>slink</tt> sont gardées dans le
répertoire <tt>debian-archive</tt> sur chaque mirroir Debian.

<sect1 id="sourceforcodenames">Source d'inspiration pour les noms de code

<p>Jusqu'ici, les noms de code viennent des caractères du film <em>Toy Story</em> par
Pixar.
<list compact>
  <item><em>buzz</em> (Buzz Lightyear) est le cosmonaute,
  <item><em>rex</em> est le tyranosaure,
  <item><em>bo</em> (Bo Peep) est la fille qui s'occupe du mouton,
  <item><em>hamm</em> est la tirelire en forme de cochon,
  <item><em>slink</em> (Slinky Dog) est le chien,
  <item><em>potato</em> est, bien sûr, Mr. Potato
  <item><em>woody</em> est le cowboy,
  <item><em>sid</em> est le garçon d'à côté qui détruit les jouets.
</list>
<!--
  more info in http://www.pixar.com/feature/toystory/toystory.html 
  or better yet http://us.imdb.com/M/title-exact?Toy%20Story%20(1995)
  or actually:
    http://us.imdb.com/Title?0114709 for TS1
    http://us.imdb.com/Title?0120363 for TS2
  we shouldn't put the links in, Pixar needs no additional propaganda
-->
<!--
  characters not used from Toy Story (yet):
    - Sarge and The Green Plastic Army Men
    - Andy (the kid)
    - Etch (Etch-a-Sketch) (the blackboard)
    - Snake
    - Robot
    - Scud (Sid's dog)
  and additional characters from Toy Story 2, also not yet used:
    - Jessie (the Yodelling Cowgirl)
    - Zurg (the Emperor)
    - Wheezy (the penguin)
    - Hannah (owner of Jessie)
    - Stinky Pete the Prospector (the old fat guy)
    - Mrs. Davis (Andy's Mom)
    - Barbie
-->

<sect1 id="pools">Le répertoire <tt>pool</tt>

<p>Historiquement, les paquets étaient gardés dans le sous-répertoire
<tt>dists</tt> correspondant à la distribution qui les contenait. Il apparut
que cela posait certains problèmes, tels que la grande consommation de bande
passante sur les mirroirs lorsque des changements majeurs étaient effectués.

<p>Les paquets sont maintenant gardés dans un large `bassin' (NdT : pool en
Anglais), structuré selon le nom du paquet source. Pour rendre cela gérable,
le bassin est subdivisé par section (<tt>main</tt>, <tt>contrib</tt> et
<tt>non-free</tt>) et par la première lettre du nom du paquet source. Ces
répertoires contiennent plusieurs fichiers : les paquets binaires pour chaque
architecture, et les paquets source à partir desquels les paquets binaires ont
été générés.

<p>Vous pouvez trouver où se trouve chaque paquet en lançant une commande
comme <tt>apt-cache showsrc <var>mypackagename</var></tt> et en lisant la
ligne `Directory:'. Par exemple, les paquets <package>apache</package> sont
dans <file>pool/main/a/apache/</file>. Il y a tellement de paquets
<tt>lib*</tt> qu'ils sont traités différemment : par exemple, les paquets
<package>libpaper</package> sont dans <file>pool/main/libp/libpaper/</file>.

<p>Les répertoires <tt>dists</tt> sont toujours utilisés pour les fichiers
d'index utilisés par des logiciels comme <tt>apt</tt>. De plus, les anciennes
distributions n'ont pas été converties pour utiliser les bassins donc vous
verrez des chemins contenant des distributions comme potato ou woody dans le
champ d'en-tête Filename.

<p>Normalement, vous n'avez pas à vous occuper de cela, puisque le nouvel
<tt>apt</tt> et probalement l'ancien <tt>dpkg-ftp</tt> (voir <ref
id="howtocurrent">) vont gérer cela de façon transparente. Si vous souhaitez
plus d'information, consultez <url id="&pool-faq;" name="Debian Package Pools
FAQ"> (en Anglais).

<!-- bumped up from sect2 to sect1 -->
<sect1 id="sid-history">Notes historiques sur <tt>sid</tt>

<p>Lorsque la <tt>sid</tt> d'aujourd'hui n'existait pas, l'organisation de
l'archive Debian avait un défaut majeur : on supposait que lorsqu'une
architecture était créée dans la distribution <tt>unstable</tt> courante, elle
sortirait lorsque cette distribution deviendrait la nouvelle <tt>stable</tt>.
Ce n'était pas le cas pour beaucoup d'architectures, ce qui entrainait que ces
répertoires devaient être déplacés lors d'une sortie. Cela n'était pas pratique
parce que cela consommerait beaucoup de bande passante.

<p>Les administrateurs de l'archive contournèrent le problème pendant
plusieurs années en plaçant les binaires des architectures non sorties dans un
répertoire spécial nommé <tt>sid</tt>.  Lors de la sortie de ces
architectures, un lien était créé entre la <tt>stable</tt> courante et
<tt>sid</tt>, et à partir de là elles étaient créées dans l'arbre
<tt>unstable</tt> de façon normale. Cette disposition était quelque peu
troublante pour les utilisateurs.

<p>Avec l'arrivée des bassins de paquets (voir <ref id="pools">) pendant le
développement de la distribution <tt>woody</tt>, les paquets binaires ont
commencé à être stockés à un emplacement standard dans le bassin, quelle que
soit la distribution, de façon à ce que sortir une distribution ne cause plus
de grande consommation de bande passante sur les mirroirs (il y a, cependant,
beaucoup de consommation de bande passante, mais graduellement, pendant le
développement).

<sect1 id="incoming">Paquets téléchargés dans <file>incoming</file>
<p>
Les paquets téléchargés sont d'abord placés dans <url id="&incoming;"> avant
que l'on ne vérifie s'ils viennent bien d'un développeur Debian. Une fois la
vérification effectuée, ils sont déplacés de <tt>incoming</tt> vers
<tt>unstable</tt>.
<p>
En cas d'urgence, vous pouvez vouloir installer des paquets de
<tt>incoming</tt> avant qu'ils n'atteignent <tt>unstable</tt>. Vous pouvez les
récupérer manuellement, vérifier la signature GPG et les MD5sums donnés dans
les fichiers <file>.changes</file> et <file>.dsc</file>, et ensuite les
installer.
</sect1>

<sect1 id="archsections">Sections architectures
<!--
What are all those directories inside <tt>dists/stable/main</tt>?
Simplified this !!!
-->

<p>Dans chacun des arbres de répertoires majeurs
(<file>dists/stable/main</file>, <file>dists/stable/non-free</file>,
<file>dists/unstable/main/</file>, etc.), les paquets binaires résident dans
des sous-répertoires dont le nom indique l'architecture pour laquelle ils ont
été compilés.

<list>
  <item><file>binary-all/</file>, pour les paquets indépendants de l'architecture
    Cela inclut, par exemple, des scripts Perl, ou de la documentation pure.
  <item><file>binary-<var>platform</var>/</file>, pour les paquets qui s'exécutent sur une plateforme
particulière.
  <!-- Yes I simplified this -->
</list>

<p>Veuillez noter que les paquets binaires pour <tt>testing</tt> et
<tt>unstable</tt> ne résident plus dans ces répertoires, mais dans le
répertoire de haut niveau <tt>pool</tt>. Les fichiers d'index
(<file>Packages</file> et <file>Packages.gz</file>) ont été gardés, cependant,
pour une compatibilité arrière.

<p>Pour les architectures binaires supportées, consultez les Notes de version
de chaque distribution. Elles sont disponibles aux adresses suivantes : 
<url id="&stable-release;" name="liens vers les notes de version de stable"> et
<url id="&testing-release;" name="liens vers les notes de version de testing">.

<!-- Removed, above release note shall be enough.
<p>See <ref id="arches"> for more information.
-->

<sect1 id="source">Le code source

<p>Le code source est inclut pour tout le système Debian. De plus, les termes
de la licence de la plupart des logiciels du système <em>requièrent</em> que
le code source soit distribué avec le programme, ou qu'une offre permettant
d'obtenir le code source accompagne le programme.

<p>Normalement, le code source est distribué dans les répertoires
<tt>source</tt>, qui sont parallèles aux répertoires contenant les binaires
spécifiques à une architecture, ou plus récemment dans le répertoire
<tt>pool</tt> (voir <ref id="pools">). Pour récupérer le code source sans
avoir à être familier avec la structure de l'archive Debian, essayez une
commande comme <tt>apt-get source
<var>mypackagename</var></tt>.

<p>Certains paquets, notamment <package>pine</package>, sont seulement
disponibles sous forme de paquet source, à cause de limitations de leur
licence. (Récemment, le paquet <package>pine-tracker</package> a été fourni
pour faciliter l'installation de Pine.) Les procédures décrites dans <ref
id="port"> et <ref
id="packaging"> permettent de construire un paquet manuellement.

<p>Le code source peut être ou ne pas être disponible pour les paquets dans
les répertoires <tt>contrib</tt> et <tt>non-free</tt>, qui ne font pas
formellement partie du système Debian.

<sect id="pkg_basics">Système de gestion des paquets Debian

<sect1 id="package-basics">Vue générale des paquets Debian

<p>Les paquets contiennent généralement tous les fichiers nécessaires pour
implémenter un ensemble de commandes ou caractéristiques. Il existe deux types
de paquets Debian :
<list>
  <item>Les <em>paquets binaires</em>, qui contiennent des exécutables, des
fichiers de configuration, des pages de man/info, la licence, et d'autres
documentations. Ces paquets sont distribués dans un format d'archive
spécifique à Debian (voir <ref id="deb-format">) ; on les reconnaît
habituellement à leur extension <tt>.deb</tt>. Les paquets binaires peuvent
être dépaquetés en utilisant l'utilitaire Debian <tt>dpkg</tt> ; les détails
sont fournis dans sa page de manuel.
  
  <item>Les <em>paquets sources</em>, qui consistent en un fichier
<tt>.dsc</tt> décrivant le paquet source (y compris le nom des fichiers
suivants), un fichier <tt>.orig.tar.gz</tt> qui contient le source original
non-modifié compressé par tar et gzip, et habituellement un fichier
<tt>.diff.gz</tt> qui contient les modifications du source original
spécifiques à Debian. L'utilitaire <tt>dpkg-source</tt> empaquète et dépaquète
les archives source Debian ; les détails sont fournis dans sa page de manuel.
</list>

<p>L'installation de logiciels par le système de paquets utilise des
"dépendances" qui sont soigneusement conçues par les responsables du paquet.
Ces dépendances sont documentées dans le fichier <tt>control</tt> associé à
chaque paquet. Par exemple, le paquet contenant le compilateur GNU C
(<package>gcc</package>) "dépend" du paquet <package>binutils</package> qui
inclut l'éditeur de liens et l'assembleur. Si un utilisateur tente d'installer
<package>gcc</package> sans avoir d'abord installé
<package>binutils</package>, le système de gestion de paquets (dpkg) renverra
un message d'erreur disant qu'il a besoin de <package>binutils</package>, et
cessera l'installation de <package>gcc</package>. (Cependant, un utilisateur
insistant pourra passer outre, voir <manref name="dpkg" section="8">.) Pour
plus de détails, voir <ref id="depends"> ci-dessous.

<p>Les outils de paquetage de Debian peuvent être utilisés pour :
<list>
  <item>manipuler et gérer des paquets ou des parties de paquets,
  <item>aider l'utilisateur à découper des paquets qui doivent être transmis à
travers un média de taille limitée comme une disquette,
  <item>aider les développeurs à construire des archives de paquets, et
  <item>aider les utilisateurs à installer des paquets qui se trouvent sur un
site d'archive Debian.
</list>

<sect1 id="deb-format">Format des paquets Debian

<p>Un "paquet" Debian, ou un fichier d'archive Debian, contient les fichiers
exécutables, les bibliothèques, et la documentation associés à un programme
particulier ou un ensemble de programmes liés. Normalement, une archive Debian
possède un nom de fichier se terminant par <tt>.deb</tt>.

<p>Les données internes de ce format de paquets binaires Debian sont décrites
dans la page de manuel <manref name="deb" section="5">. Parce que ce format
interne est sujet à des changements (entre les sorties majeures de &debian;),
utilisez toujours <manref name="dpkg-deb" section="8"> pour manipuler des
fichiers <tt>.deb</tt>.

<!-- Below added by Osamu XXX Not sure but should be right -->

<p>Au moins jusqu'à la distribution <tt>woody</tt>, tous les fichiers
d'archive Debian étaient manipulés par les commandes Unix standard
<prgn>ar</prgn> et <prgn>tar</prgn>, même lorsque les commandes dpkg n'étaient
pas disponibles.

<sect1 id="pkgname">Conventions de nommage pour les fichiers de paquets Debian
<!--
Why are Debian package file names so long? 
-->
<p>Les noms de fichiers des paquets Debian se conforment à la convention
suivante :
<example>&lt;foo&gt;_&lt;VersionNumber&gt;-&lt;DebianRevisionNumber&gt;.deb</example>
où <var>foo</var> représente le nom du paquet. Pour vérification, on peut
déterminer le nom du paquet associé à un fichier d'archive Debian particulier
(fichier <tt>.deb</tt>) de l'une des façons suivantes :
<list>
  <item>inspecter le fichier <file>Packages</file> dans le répertoire où il
était stocké sur un site d'archive Debian. Ce fichier contient une description
de chaque paquet ; le premier champ de chaque paragraphe est le nom de paquet
formel.
  
  <item>utiliser la commande <tt>dpkg --info foo_VVV-RRR.deb</tt> (où
<var>VVV</var> et <var>RRR</var> sont les numéros de version et de révision du
paquet en question, respectivement). Cela affiche, entre autres, le nom du
paquet correspondant au fichier d'archive dépaqueté.
</list>

<p>La composante <tt>VVV</tt> est le numéro de version spécifié par le
développeur original. Il n'y a aucune norme spécifiant la numérotation des
versions, donc elle peut avoir des formats aussi différents que "19990513" et
"1.3.8pre1".

<p>La composante <tt>RRR</tt> est le numéro de révision Debian spécifié
par le développeur Debian (ou un utilisateur s'il choisit de construire le
paquet lui-même). Ce numéro correspond au niveau de révision du paquet Debian
; ainsi, un nouveau niveau de révision correspond habituellement à un
changement dans le Makefile Debian (<tt>debian/rules</tt>), le fichier de
contrôle Debian (<tt>debian/control</tt>), les scripts d'installation ou de
suppression (<tt>debian/p*</tt>), ou les fichiers de configuration utilisés
avec le paquet.


<!-- This get too detailed
<sect1 id="controlfile">The Debian control file
-->

<sect1 id="conffile">Préservation de la configuration locale
<!--
What is a Debian conffile
-->
<p>La préservation des fichiers configurables par l'utilisateur est activée
par le mécanisme "conffiles" de Debian. Les fichiers de configuration de
l'utilisateur (habituellement placés dans <file>/etc</file>) sont spécifiés
dans le fichier <tt>conffiles</tt> du système de paquets Debian. Le système de
gestion des paquets garantie que ces fichiers ne seront pas recouverts lors de
la mise à jour d'un paquet.
<!-- 
<p>Conffiles is a list of configuration files (usually placed in <tt>/etc</tt>)
that the package management system will not overwrite when the package is
upgraded. This ensures that local values for the contents of these files
will be preserved, and is a critical feature enabling the in-place upgrade
of packages on a running system.
-->
<p>Pour déterminer exactement quels sont les fichiers préservés lors d'une
mise à jour, lancez la commande :
  <example>dpkg --status package</example>
Et regardez la ligne "Conffiles:".

<p>
Les détails du contenu d'un fichier Debian <tt>conffiles</tt> sont fournis
dans la Charte Debian, section 11.7 (voir <ref id="references">).

<sect1 id="maintscripts">Scripts de maintenance Debian
<!--
What is a Debian preinst, postinst, prerm, and postrm
  script?
-->
<p><!--These files--> 
Les scripts de maintenance Debian sont des scripts exécutables qui sont
automatiquement exécutés avant ou après l'installation d'un paquet. Avec un
fichier nommé <tt>control</tt>, tous ces fichiers font partie de la section
"control" d'un fichier d'archive Debian.

<p>Les fichiers individuels sont :
<taglist>
<tag/preinst/
  <item>Ce script est exécuté avant que son paquet soit dépaqueté de son
archive Debian (<tt/.deb/). Beaucoup de scripts "preinst" arrêtent les
services fournis par les paquets mis à jour jusqu'à ce que leur installation
ou mise à jour soit complète (après l'exécution avec succès du script
"postinst").

<tag/postinst/
  <item>Ce script complète la configuration requise par un paquet après son
dépaquetage à partir de son archive Debian (<tt/.deb/). Souvent, les scripts
"postinst" demandent à l'utilisateur d'entrer des informations et/ou
l'avertissent que s'il accepte les valeurs par défaut, il devrait se rappeler
de revenir en arrière et reconfigurer le paquet lorsque la situation le
requiert. Beaucoup de scripts "postinst" exécutent ensuite les commandes
nécessaires au redémarrage d'un service une fois que le nouveau paquet a été
installé ou mis à jour.

<tag/prerm/
  <item>Ce script arrête les daemons qui sont associés à un paquet. Il est
exécuté avant la suppression de fichiers associés au paquet.

<tag/postrm/
  <item>Ce script modifie les liens ou les autres fichiers associés à un
paquet, et/ou supprime les fichiers créés. (Voir aussi <ref id="virtual">.)
</taglist>

<p>Actuellement, tous les fichiers de contrôle peuvent être trouvés dans le
répertoire <file>/var/lib/dpkg/info</file>. Les fichiers associés au paquet
<tt>foo</tt> commencent avec le nom "foo" et ont des extensions "preinst",
"postinst", etc., tel qu'approprié. Le fichier <tt>foo.list</tt> dans ce
répertoire liste tous les fichiers qui ont été installés avec le paquet
<tt>foo</tt>. (Notez que l'emplacement de ces fichiers est interne à dpkg, et
peut changer.)

<sect1 id="priority">Priorité des paquets
<!--
What is a Required/Important/Standard/Optional/Extra
package?
-->
<p>Chaque paquet Debian se voit assigner une <em>priorité</em> par les
responsables de la distribution, comme aide au système de gestion des paquets.
Les priorités sont :

<list>
  <item>Les paquets <strong>Required</strong> (requis) sont nécessaires au bon
  fonctionnement du système.
    <p>Ceci inclut tous les outils nécessaires pour réparer les défauts du
    système. Vous ne devez pas supprimer ces paquets, sinon le système peut
    devenir complètement cassé et vous ne pourrez probablement plus utiliser
    dpkg pour remettre les choses en place. Un système avec seulement les
    paquets requis ne sera probablement pas utilisable, mais il sera
    suffisament fonctionnel pour que l'administrateur le démarre et installe
    plus de logiciels.
  <item>Les paquets <strong>Important</strong> devraient se trouver sur
  n'importe quel système de type Unix.
    <p>D'autres paquets sans lesquel le système ne fonctionnera pas bien ou ne
    sera pas utilisable se trouveront ici. Cela n'inclut <em>PAS</em> Emacs ou
    X11 ou TeX ou n'importe quelle autre grosse application. Ces paquets
    constituent seulement une infrastructure de base.
  <item>Les paquets <strong>Standard</strong> sont standard sur n'importe
  quelle système Linux, et comprennent un système en mode texte
  raisonnablement petit mais pas trop limité.
    <p>C'est ce qui sera installé par défaut si les utilisateurs ne
    sélectionnent rien d'autre. Cela n'inclut pas beaucoup de grosses
    applications, mais cela inclut Emacs (qui est plus une partie
    d'infrastructure qu'une application) et un sous-ensemble raisonnable de
    TeX et LaTeX (si cela est possible sans X).
  <item>Les paquets <strong>Optional</strong> (optionnel) incluent tous ceux
  que vous pourriez raisonnablement vouloir installer même s'ils ne vous sont
  pas familiers, et si vous n'avez pas de besoins spécifiques.
    <p>Cela inclut X11, une distribution complète de TeX, et beaucoup
    d'applications.
  <item>Les paquets <strong>Extra</strong> (en plus) sont des paquets qui
  soit entrent en conflit avec des paquets ayant une priorité plus haute, soit
  ne seront utiles que si vous les connaissez, soit ont besoin de prérequis
  spécifiques qui les rendent peu convenables pour "Optional".
</list>

<sect1 id="virtual">Paquets virtuels

<p>Un paquet virtuel est un nom générique qui s'applique à n'importe quel
paquet d'un groupe de paquets, qui tous fournissent une fonctionalité de base
similaire. Par exemple, les logiciels <tt>tin</tt> et <tt>trn</tt> sont des
lecteurs de groupes de discussion, et doivent donc satisfaire la dépendance
d'un programme ayant besoin d'une tel lecteur sur le système pour fonctionner
ou être utile. On dit qu'ils fournissent tous les deux le "paquet virtuel"
appelé <tt>news-reader</tt>.

<p>De façon similaire, <tt>exim</tt> et <tt>sendmail</tt> fournissent tous les
deux la fonctionalité d'un agent de transport de courrier électronique. On dit
donc qu'ils fournissent le paquet virtuel "mail transport agent". Si l'un des
deux est installé, un programme dépendant de l'installation d'un
<tt>mail-transport-agent</tt> sera satisfait par la présence de ce paquet
virtuel.

<p>Debian fournit un mécanisme pour que, si plus d'un paquet qui fournit le
même paquet virtuel est installé sur un système, l'administrateur puisse
configurer l'un des deux comme paquet préféré. La commande utilisée est
<tt>update-alternatives</tt>, et est décrite dans <ref id="alternatives">.

<sect1 id="depends">Dépendances des paquets
<!--
What is meant by saying that a package
  Depends/Recommends/Suggests/Conflicts/Replaces/Provides another package?
-->
<p>Le système de paquets Debian possède une série de "dépendances" de paquets
qui sont conçues pour indiquer (avec un simple drapeau) le niveau auquel
Programme A peut fonctionner indépendamment de la présence de Programme B sur
le système :
<list>
  <item>Paquet A <em>depends</em> (dépend) de Paquet B si B doit absolument être
  installé pour exécuter A. Dans certains cas, A dépend non seulement de B,
  mais d'une certaine version de B. Dans ce cas, la dépendance sur la version
  est habituellement une limite basse, dans le sens où A dépend de n'importe
  quelle version de B plus récente que la version spécifiée.
  <item>Paquet A <em>recommends</em> (recommande) Paquet B si le responsable du paquet juge
  que la plupart des utilisateurs ne voudront pas de A sans avoir la
  fonctionnalité fournie par B.
  <item>Paquet A <em>suggests</em> (suggère) Paquet B si B contient des fichiers qui sont
  liés à (et habituellement améliorent) la fonctionnalité de A.
  <item>Paquet A <em>conflicts</em> (est en conflit) avec Paquet B lorsque A
  ne fonctionnera pas si B est installé sur le système. Souvent, les conflits
  sont dans des cas où A contient des fichiers qui fournissent une
  amélioration par rapport à ceux de B. "conflicts" est souvent associé avec
  "replace".
  <item>Paquet A <em>replaces</em> (remplace) Paquet B lorsque les fichiers installés par
  B sont supprimés et (dans certains cas) recouverts par des fichiers de A.
  <item>Paquet A <em>provides</em> (fournit) Paquet B lorsque tous les fichiers et
  fonctionnalités de B sont incorporés dans A. Ce mécanisme fournit un moyen
  aux utilisateurs ayant des limitations en espace disque de ne sélectionner
  que la partie de A dont ils ont réellement besoin.
</list>

<p>Plus de détails sur l'utilisation de ces termes est fournie dans le Manuel
de paquetage et dans la Charte Debian.

<p>Notez que <prgn>dselect</prgn> permet un contrôle plus précis sur les
paquets spécifiés <em>recommends</em> et <em>suggests</em> que
<file>apt-get</file>, qui récupère simplement tous les paquets spécifiés par
<em>depends</em> et laisse les paquets spécifiés par <em>recommends</em> et <em>suggests</em>. Les
deux programmes utilisent APT comme dorsal dans leurs versions modernes.

<sect1 id="pre-depends">Signification de Pre-depends

<p>"Pre-depends" est une dépendance spéciale. Dans le cas d'un paquet
ordinaire, <prgn>dpkg</prgn> dépaquètera le fichier archive (càd. le fichier
<tt>.deb</tt>) indépendamment de la présence ou non des fichiers dont il
dépend sur le système. En simplifiant, dépaqueter signifie que <tt>dpkg</tt>
extrait les fichiers de l'archive qui sont censés être installés sur votre
système et les met à leur place. Si ces paquets <em>dépendent</em> de la
présence d'autres paquets sur votre système, <prgn>dpkg</prgn> refusera de
compléter l'installation (en exécutant son action "configure") tant que les
autres paquets ne seront pas installés.

<p>Cependant, pour certains paquets, <prgn>dpkg</prgn> refusera même de
les dépaqueter tant que certaines dépendances ne seront pas satisfaites. On
dit que ces paquets "Pre-dépendent" de la présence d'autres paquets. Le projet
Debian fournissait ce mécanisme pour supporter la mise à jour sûre des
systèmes du format <tt>a.out</tt> au format <tt>ELF</tt>, pendant laquelle
l'ordre dans lequel les paquets étaient dépaquetés était critique. Il y a
d'autres situations de mise à jour pour lesquelles cette méthode est utile, par
exemple pour les paquets avec la priorité "required" et leur dépendance à la
libc.

<p>Une fois de plus, de plus amples informations peuvent être trouvées dans le
Manuel de paquetage.

<sect1 id="pkgstatus">Etat d'un paquet
<!--
What is meant by unknown/install/remove/purge/hold in
  the package status?
-->
<p>L'état d'un paquet peut être "unknown" (inconnu), "install" (installe),
"remove" (supprime), "purge" (purge), ou "hold" (garde).
Ces drapeaux "want" (volonté) indiquent ce que l'utilisateur souhaite faire
avec un paquet (comme indiqué soit par les actions de l'utilisateur dans la
section "Select" de <prgn>dselect</prgn>, soit par les invocations directes de
<prgn>dpkg</prgn> par l'utilisateur).

<p>Leur signification est :
<list>
  <item>unknown  - (inconnu) l'utilisateur n'a jamais indiqué s'il souhaite le paquet.
  <item>install  - (installe) l'utilisateur veut que le paquet soit installé
  ou mis à jour.
  <item>remove   - (supprime) l'utilisateur veut que le paquet soit supprimé,
  mais ne veut pas supprimer les fichiers de configuration existants.
  <item>purge    - l'utilisateur veut que le paquet soit supprimé
  complètement, y compris ses fichiers de configuration.
  <item>hold     - (garde) l'utilisateur veut que le paquet ne soit pas
  traité, càd. qu'il veut garder la version actuelle dans l'état actuel.
</list>

<sect1 id="puttingonhold">Garder des paquets lors d'une mise à jour
<!--
How do I put a package on hold?
Made major rewite to accomodate new /etc/apt/preferences in progress
-->
<p>Il y a deux mécanismes pour garder des paquets lors de la mise à jour, à
l'aide de <prgn>dpkg</prgn>, ou, dans Woody, à l'aide d'APT.

<p>Avec <prgn>dpkg</prgn>, exportez d'abord la liste des sélections de paquets
:
  <example>dpkg --get-selections &gt; selections.txt</example>
Ensuite, éditez le fichier résultant <file/selections.txt/, en changeant la
ligne contenant le paquet que vous souhaitez garder, e.g. <package/libc6/, de
:
  <example>libc6                       install</example>
en :
  <example>libc6                       hold</example>
Sauvegardez le fichier, et rechargez-le dans la base de données de
<prgn>dpkg</prgn> avec la commande :
  <example>dpkg --set-selections &lt; selections.txt</example>
Ou, si vous connaissez le nom du paquet à garder, exécutez simplement :
  <example>echo libc6 hold | dpkg --set-selections</example>
Ce procédé garde les paquets pendant la procédure d'installation de chaque
paquet.

<p>Le même résultat peut être obtenu avec <prgn>dselect</prgn>. Entrez
simplement dans l'écran [S]elect, trouvez le paquet que vous souhaitez garder
en l'état et appuyez sur la touche `=' (ou `H'). Les changements prendront
effet immédiatement après que vous êtes sortis de l'écran [S]elect.

<p>Le système APT dans la distribution Woody possède un nouveau mécanisme de
remplacement pour garder les paquets pendant la procédure de récupération des
archives en utilisant <tt>Pin-Priority</tt>. Voir la page de manuel <manref
name="apt_preferences" section="5">.

<!--- XXX apt-howto, apt_preferences, pointer withing this.  -->

<sect1 id="sourcepkgs">Paquets sources

<p>
<!--
Debian source packages can't actually be "installed", they are just
unpacked in whatever directory you want to build the binary packages they
produce.
-->
Le paquets sources sont distribués dans un répertoire appelé <tt>source</tt>,
et vous pouvez soit les télécharger manuellement, soit utiliser
  <example>apt-get source foo</example>
pour les récupérer (voir la page de manuel <manref name="apt-get" section="8">
pour configurer APT pour faire cela).

<!-- XXX 
Pointer to building package   
mention deb-src thing here 
-->

<sect1 id="sourcebuild">Construire des paquets binaires à partir d'un paquet
source

<p>Pour un paquet <tt>foo</tt>, vous aurez besoin de tous les fichiers
<file>foo_*.dsc</file>, <file>foo_*.tar.gz</file> et
<file>foo_*.diff.gz</file> pour compiler les sources (note : il n'y a pas de
fichier <tt>.diff.gz</tt> pour les paquets Debian natifs).

<p>Une fois que vous les avez, si vous avez le paquet <package/dpkg-dev/
installé, la commande
  <example>dpkg-source -x foo_version-revision.dsc</example>
va extraire le paquet dans un répertoire appelé <tt>foo-version</tt>.

<p>Si vous souhaitez juste compiler le paquet, vous pouvez entrer dans le
répertoire <tt>foo-version</tt> et lancer la commande
  <example>debian/rules build</example>
pour compiler le programme, puis
  <example>debian/rules binary</example>
en tant que root, pour construire le paquet, et enfin
  <example>dpkg -i ../foo_version-revision_arch.deb</example>
pour installer le paquet nouvellement construit.

<!-- XXX woody has simpler commands and build-depends -->

<sect1 id="creatingdebs">Créer de nouveaux paquets Debian

<p>Pour une description plus détaillée, lisez le Guide des nouveaux
responsables Debian, disponible dans le paquet <package/maint-guide/, ou à
l'adresse <url id="&maint-guide;" name="&urlname;">.
<!--
<url id="ftp://ftp.debian.org/debian/doc/package-developer/maint-guide.html.tar.gz">.
-->
<!--
<sect id="pkgtools">Package Management Tools
Once many were moved up here but now moved down
-->

<!-- 
Rerely use command for woody, exclude but mention its manual page above.
<sect2 id="dpkg-deb">dpkg-deb
Removed below
-->

<!--
move up contents as a part of APT
<sect2 id="apt-get">apt-get
-->

<!--
Rerely use command for woody, exclude but mention its manual page above.
<sect2 id="dpkg-split">dpkg-split
removed
-->

<!--
Moved down
<sect1 id="updaterunning">Upgrade running system
Debian claims to be able to update a running program;
  how is this accomplished?
-->

<!--
<sect1 id="whatpackages">How can I tell what packages are already installed
  on a Debian system?
removed dpkg list and status things here
-->

<!-- these information are in debian.sgml and above
<sect1 id="filesearch">How can I find out what package produced a particular
  file?
removed dpkg list and status things here
-->

<sect id="uptodate">Mettre à jour un système Debian

<p>L'un des buts de Debian est de fournir un chemin de mise à jour consistant
et un processus de mise à jour sûr, et nous faisons de notre mieux pour que la
mise à jour lors de la sortie d'une nouvelle version depuis une précédente
soit la plus douce possible. Les paquets vont alerter l'utilisateur lorsqu'il
y a des avertissements importants pendant le processus de mise à jour, et vont
souvent fournir une solution à un problème possible.

<p>Vous devriez aussi lire les Notes de version, le document qui décrit les
détails des mises à jour spécifiques, livré sur tous les CDs Debian, et
disponible sur le WWW aux adresses <url id="&stable-release;"> et <url
id="&testing-release;">.

<p>
Un guide pratique pour les mises à jour est fourni dans la <ref id="package">.
Cette section décrit les détails fondamentaux.

<!-- XXX make this into generic link -->

<!-- Obsolete, removed
<sect1 id="libc5to6upgrade">How can I upgrade my Debian 1.3.1 (or earlier)
  distribution, based on libc5, to 2.0 (or later), based on libc6?
...
This paragraph is obsolete.
-->

<sect1 id="howtocurrent">Méthodes de mise à jour d'un système Debian

<p>On pourrait simplement exécuter une session FTP anonyme ou un appel à
<prgn>wget</prgn> vers une archive Debian, parcourir les répertoires jusqu'à ce
qu'on trouve le fichier désiré, le récupérer, et enfin l'installer en
utilisant <prgn>dpkg</prgn>. Notez que <prgn>dpkg</prgn> installera les
fichiers de la mise à jour à leur place, même sur un système en marche. Parfois,
un paquet révisé aura besoin de l'installation d'une version révisée d'un
autre paquet, auquel cas l'installation échouera si l'autre paquet n'est pas
installé.

<p>Beaucoup de gens trouvent cette approche trop gourmande en temps, car
Debian évolue très rapidement&mdash;typiquement, une douzaine ou plus de
nouveaux paquets sont téléchargés chaque semaine. Ce nombre est encore plus
grand avant la sortie d'une version majeure. Pour gérer cette avalanche,
beaucoup de gens préfèrent utiliser une méthode automatique. Plusieurs outils
de gestion des paquets sont disponibles dans ce but.

<sect1 id="pkgtools">Vue générale des outils de gestion de paquets

<!-- reorganize this and following section in a compact section -->
<!--
<sect1 id="pkgprogs">What programs does Debian provide for managing its
  packages?
  Insert overview and
  bump sect2 to sect1
-->
<p>Le système de gestion de paquets Debian a deux objectifs : la manipulation
des fichiers de paquets eux-mêmes et la récupération de fichiers de paquets
depuis une archive Debian. <prgn>dpkg</prgn> réalise la première fonction, APT
et <prgn>dselect</prgn> la seconde.

<sect1 id="dpkg"><prgn>dpkg</prgn>

<p>C'est le programme principal pour manipuler les fichiers de paquets ;
consultez <manref name="dpkg" section="8"> pour une description complète.

<p><prgn>dpkg</prgn> vient avec plusieurs programmes primitifs
supplémentaires.

<list>
<item>dpkg-deb : Manipule les fichiers <tt>.deb</tt>.
 <manref name="dpkg-deb" section="1">
<item>dpkg-ftp : Une ancienne commande de récupération de fichiers de paquets.
 <manref name="dpkg-ftp" section="1">
<item>dpkg-mountable : Une ancienne commande de récupération de fichiers de
paquets.
 <manref name="dpkg-mountable" section="1">
<item>dpkg-split : Scinde un gros paquet en fichiers plus petits.
 <manref name="dpkg-split" section="1">
</list>

<prgn>dpkg-ftp</prgn> et <prgn>dpkg-mountable</prgn> ont été rendus obsolètes
par l'introduction du système APT.

<!-- Insert APT and apt-get here: -->
<sect1 id="apt">APT

<p>APT est une interface avancée pour le système de gestion des paquets
Debian. <prgn>apt-get</prgn>, <prgn>apt-cache</prgn> et <prgn>apt-cdrom</prgn>
sont les outils en ligne de commande pour gérer les paquets. Ils fonctionnent
aussi en tant que dorsal pour d'autres outils, comme <prgn/dselect/ et
<prgn/aptitude/.

<p>Pour plus d'information, installez le paquet <package/apt/ et lisez
<manref name="apt-get" section="8">,
<manref name="apt-cache" section="8">,
<manref name="apt-cdrom" section="8">,
<manref name="apt.conf" section="5">,
<manref name="sources.list" section="5">, 
<manref name="apt_preferences" section="5"> (woody), et
<file>/usr/share/doc/apt/guide.html/index.html</file>.

<p>Une autre source d'information est le
<url id="&apt-howto;" name="APT HOWTO">.
Il peut être installé par le paquet <package/apt-howto/ à l'emplacement
<file>/usr/share/doc/apt-howto/en/apt-howto-en.html/index.html</file>.

<p><tt>apt-get upgrade</tt> et <tt>apt-get dist-upgrade</tt> ont tendance à
récupérer tous les paquets marqués "Depends:". Pour éviter cela, utilisez
<prgn>dselect</prgn>.

<!-- removed boring APT info -->

<!-- bump from sect2 to sect1 -->
<sect1 id="dselect-basics"><prgn>dselect</prgn>

<p>Ce programme est une interface utilisateur avec un menu pour le système de
gestion de paquets Debian. Il est particulièrement utile pour les premières
installations et les grosses mises à jour.

<p>Pour plus d'information, installez le paquet <package/install-doc/ et lisez
<file>/usr/share/doc/install-doc/dselect-beginner.en.html</file> ou
<url id="&dselect-beginner;" name="Documentation dselect pour débutants">.

<!-- removed boring dselect info -->

<!-- move this up and make this sect1
<sect2 id="apt">APT
-->
<!-- remove this and mention above in dpkg
<sect2 id="dpkg-ftp">dpkg-ftp
-->
<!-- remove this
<sect2 id="mirror">mirror
-->

<!-- remove this section and mention above in dpkg
<sect2 id="dpkg-mountable">dpkg-mountable
-->

<!--
<sect1 id="upgradesingle">Must I go into single user mode in order to
  upgrade a package?

<p>No.  Packages can be upgraded in place, even in running systems.
Debian has a <tt>start-stop-daemon</tt> program that is invoked to stop,
then restart running process if necessary during a package upgrade.
-->

<sect1 id="updaterunning">Mise à jour d'un système en marche

<p>Le noyau (système de fichier) des systèmes  &debian; supporte le
recouvrement de fichiers même lorsqu'ils sont en utilisation.

<p>Nous fournissons aussi un programme appelé <prgn/start-stop-daemon/ qui est
utilisé pour démarrer les daemon lors du démarrage du système ou pour les
arrêter lorsque le niveau de fonctionnement du noyau est changé (par exemple
de multi-utilisateur vers mono-utilisateur ou vers arrêt). Le même programme
est utilisé par les scripts d'installation lorsqu'un nouveau paquet contenant
un daemon est installé, pour arrêter les daemons en exécution, et les
redémarrer lorsque cela est nécessaire.

<p>Notez que le système Debian ne requiert pas l'utilisation du mode
mono-utilisateur pour mettre à jour un système en marche.

<sect1 id="savedebs">Fichiers d'archive <tt>.deb</tt> téléchargés et
sauvegardés

<p>Si vous avez téléchargé les fichiers sur votre disque (ce qui n'est pas
forcément nécessaire, voir ci-dessus pour la description de
<prgn>dpkg-ftp</prgn>), vous pouvez les supprimer de votre système lorsques
les paquets ont été installés.

<p>Si APT est utilisé, ces fichiers sont mis en cache dans le répertoire
<file>/var/cache/apt/archives/</file>.
Vous pouvez les effacer après l'installation (<tt>apt-get clean</tt>) ou les
copier sur une autre machine dans le répertoire
<file>/var/cache/apt/archives/</file> pour économiser du temps de
téléchargement pendant les installations suivantes. 

<!-- insert apt-get clean... thing and dselect configuration here XXXX -->

<sect1 id="keepingalog">Garder une trace des mises à jour

<p><prgn/dpkg/ garde un enregistrement des paquets qui ont été dépaquetés,
configurés, supprimés, et/ou purgés, mais il ne garde pas (pour le moment) de
journal de l'activité du terminal qui a eu lieu lorsqu'un paquet a été
manipulé.

<p>Le moyen le plus simple de contourner cela est de lancer vos sessions
<prgn>dpkg</prgn>, <prgn>dselect</prgn>, <prgn>apt-get</prgn>, etc. avec le
programme <manref name="script" section="1">.

<sect id="boot">Le processus de démarrage de Debian

<sect1 id="init">Le programme <tt>init</tt>

<p>Comme tous les Unices, Debian démarre en exécutant le programme
<tt>init</tt>. Le fichier de configuration de <tt>init</tt> (qui est
<tt>/etc/inittab</tt>) spécifie que le premier script à exécuter doit être
<tt>/etc/init.d/rcS</tt>. Ce script lance tous les scripts de
<tt>/etc/rcS.d/</tt> en incluant le source ou en forkant un sous-processus,
selon leur extension, pour exécuter des initialisations, comme la vérification
et le montage des systèmes de fichiers, le chargement des modules, le
démarrage des services réseau, le réglage de l'horloge, et l'exécution
d'autres initialisations. Ensuite, par compatibilité, il lance aussi les fichiers
(sauf ceux ayant un `.' dans leur nom) de <tt>/etc/rc.boot/</tt>. Les scripts
de ce dernier répertoire sont habituellement réservés à l'administrateur
système, et leur utilisation dans des paquets est obsolète.

<sect1 id="runlevels">Niveaux de fonctionnement

<p>Après le processus de démarrage, <tt>init</tt> exécute les scripts de
démarrage situés dans le répertoire correspondant au niveau de fonctionnement
par défaut (ce niveau de fonctionnement est donné par l'entrée <tt>id</tt>
dans <tt>/etc/inittab</tt>). Comme la plupart des Unices compatibles System V,
Linux a 7 niveaux de fonctionnement :
<list compact>
  <item>0 (arrête le système),
  <item>1 (mode mono-utilisateur),
  <item>2 through 5 (différents modes multi-utilisateur), et
  <item>6 (redémarre le système).
</list>
Les systèmes Debian sont livrés avec <tt>id=2</tt>, ce qui indique que le
niveau de fonctionnement par défaut sera 2 lorsqu'on entrera dans l'état
multi-utilisateur, et les scripts de <tt>/etc/rc2.d/</tt> seront exécutés.

<p>En fait, les scripts des répertoires <file>/etc/rcN.d/</file> sont des
liens symboliques vers les scripts de <file>/etc/init.d</file>. Cependant, les
<em>noms</em> des fichiers dans chacun des répertoires
<file>/etc/rcN.d/</file> sont sélectionnés pour indiquer la <em>façon</em>
dont les scripts de <file>/etc/init.d/</file> seront exécutés. Spécifiquement,
avant d'entrer dans un niveau de fonctionnement, tous les scripts commençant
par `K' sont lancés ; ils permettent d'arrêter des services.
Ensuite, tous les scripts commençant par `S' sont lancés ; ces scripts
permettent de démarrer des services. Le nombre à deux chiffres suivant le `K'
ou le `S' indique l'ordre dans lequel le script est lancé. Les scripts
possédant les nombres les plus petits sont exécutés en premier.

<p>Cette approche fonctionne parce que les scripts dans <tt>/etc/init.d/</tt>
prennent tous un argument qui peut être "start", "stop", "reload", "restart"
ou "force-reload" et exécuteront la tâche indiquée par cet argument. Ces
scripts peuvent être utilisés même après que le système a été démarré, pour
contrôler divers processus.

<p>Par exemple, avec l'argument "reload", la commande
  <example>/etc/init.d/sendmail reload</example>
envoie au daemon sendmail un signal pour qu'il relise son fichier de
configuration.

<sect1 id="custombootscripts">Personnaliser le processus de démarrage
<p>
Debian n'utilise pas de répertoire <tt>rc.local</tt> comme BSD pour
personnaliser le processus de démarrage ; quelles fonctionnalités sont fournies
?

<p>Supposons qu'un système ait besoin d'exécuter le script <tt>foo</tt> au
démarrage, ou à l'entrée dans un niveau de fonctionnement (System V)
particulier. Alors, l'administrateur du système doit :
<enumlist>
  <item>Placer le script <tt>foo</tt> dans le répertoire
  <file>/etc/init.d/</file>.
  <item>Exécuter la commande Debian <prgn>update-rc.d</prgn>  avec les
  arguments appropriés, pour effectuer les liens entre les répertoires
  (spécifiés sur la ligne de commande) <tt>rc<var>?</var>.d</tt> et
  <file>/etc/init.d/foo</file>. Ici, <var>?</var> est un nombre entre 0 et 6
  qui correspond à l'un des niveaux de fonctionnement System V.
  <item>Redémarrer le système.
</enumlist>

<p>La commande <tt>update-rc.d</tt> effectue les liens entre les fichiers des
répertoires <tt>rc<var>?</var>.d</tt> et le script de
<file>/etc/init.d/</file>. Chaque lien commencera par un `S' ou un `K', suivi
par un nombre, suivi par le nom du script. Les scripts commençant par `S' dans
<file>/etc/rcN.d/</file> sont exécutés lorsqu'on entre dans le niveau de fonctionnement
<tt>N</tt>. Les scripts commençant par `K' sont exécutés lorsqu'on quitte le
niveau de fonctionnement <tt>N</tt>.

<p>On peut par exemple faire exécuter le script <tt>foo</tt> au démarrage, en
le plaçant dans <file>/etc/init.d/</file> et en installant les liens par la
commande <tt>update-rc.d foo defaults 19</tt>. L'argument <tt>defaults</tt>
correspond aux niveaux de fonctionnement par défaut, qui sont 2 à 5.
L'argument <tt>19</tt> assure que <tt>foo</tt> sera appelé avant les scripts
contenant les nombres supérieurs à 20.

<sect id="diverse">Support de la diversité
<p>
Debian offre plusieurs facilités pour exaucer les voeux des administrateurs du
système sans casser ce dernier.
<list>
<item><prgn>dpkg-divert</prgn>, voir <ref id="dpkg-divert">.
<item><prgn>equivs</prgn>, voir <ref id="equivs">.
<item><prgn>update-alternative</prgn>, voir <ref id="alternatives">.
<item><prgn>make-kpkg</prgn> peut s'accomoder de beaucoup de chargeurs . Voir
<manref name="make-kpkg" section="1">.
</list>
Les fichiers situés sous <file>/usr/local/</file> appartiennent à
l'administrateur du système et &debian; n'y touchera pas. La plupart (ou tous)
les fichiers sous <file>/etc</file> sont des <tt>conffiles</tt> (fichiers de
configuration) et &debian; n'écrira pas dessus lors d'une mise à jour sauf si
l'administrateur le spécifie explicitement.

<sect id="nonenglish">Locales non anglaises

<p>
Le support des conventions qui diffèrent selon la langue et/ou la culture est
fourni par la technologie <tt>locale</tt>. Voir <manref name="locale"
section="7">.
<p>
Une locale est un ensemble de règles de langue et de culture. Elles couvrent
des aspects tels que la langue des messages du système, différents jeux de
caractères, les conventions d'orthographe, etc. Un programme doit être capable
de déterminer sa locale et agir en conséquence pour être portable selon
différentes cultures.
<p>
Les variables d'environnement suivantes sont évaluées dans cet ordre pour
fournir les valeurs de locale aux programmes :
<enumlist>
<item>LANGUAGE : cette variable d'environnement consiste en une liste de
locales séparées par deux points verticaux, dans l'ordre de priorité. Utilisé
seulement si la locale POSIX est positionnée à une valeur autre que "C" [dans
Woody ; la version de Potato a toujours priorité sur la locale POSIX]. (GNU
extension)
<item>LC_ALL : Si cette variable est non nulle, sa valeur est utilisée pour
toutes les catégories de locales. (POSIX.1) Habituellement "" (null).
<item>LC_* : Si cette variable est non nulle, sa valeur est utilisée pour la
catégorie correspondante. (POSIX.1) Habituellement "C".
Les variables LC_* sont :
<list compact>
<item>LC_CTYPE : Classification des caractères et conversion de casse.
<item>LC_COLLATE : Ordre de collation.
<item>LC_NUMERIC : Formats des nombres non monétaires.
<item>LC_MONETARY : Formats monétaires.
<item>LC_MESSAGES : Formats des messages d'information et de diagnostic et
des réponses intéractives.
<item>LC_PAPER : Taille du papier.
<item>LC_NAME : Formats des noms.
<item>LC_ADDRESS : Formats des adresses et information sur les lieux.
<item>LC_TELEPHONE : Formats des numéros de téléphone.
<item>LC_MEASUREMENT : Unités de mesure (Metric ou Other).
<item>LC_IDENTIFICATION : Donnée générale sur l'information de la locale.
</list>
<item>LANG : Si cette variable est non nulle, et que LC_ALL n'est pas définie,
sa valeur est utilisée pour toutes les catégories de locales LC_* sans valeur
définie. (POSIX.1) Habituellement, "C".
</enumlist>
Notez que certaines applications (par exemple Netscape 4) ignorent les valeurs
LC_*.
<p>
Pour plus d'information, voir le document sur l'internationalisation, <url
id="&intro-i18n;" name="Introduction à i18n">. Il est destiné aux développeurs
mais est aussi utile pour les administrateurs système.
<list>
  <item>&debian; est distribuée avec le support pour près de deux douzaines de
  claviers, et avec des utilitaires (dans le paquet <tt>kbd</tt> ) pour
  installer, visualiser et modifier les tables de caractères.
    <p>L'installation demande à l'utilisateur de spécifier le clavier qu'il va
    utiliser.
  <item>La grande majorité des paquets de logiciels Debian supporte l'entrée
  de caractères non US-ASCII utilisés dans les autres langues latines (par
  exemple ISO-8859-1 ou ISO-8859-2), et de nombreux programmes supportent les
  langues multi-octets comme le Japonais ou le Chinois.
  <item>Actuellement, le support pour les langues Allemand, Espagnol,
  Finlandais, Français, Hongrois, Italien, Japonais, Koréen et Polonais dans
  les pages de manuel est fourni par les paquets
  <tt>manpages-<var>LANG</var></tt> (où <var>LANG</var> est le code ISO à deux
  lettres du pays). Pour accéder à une page de manuel NLS, l'utilisateur doit
  configurer la variable du shell LC_MESSAGES de la façon appropriée.
    <p>Par exemple, dans le cas des pages de manuel en Italien, LC_MESSAGES
    doit être positionnée à <tt>it</tt>. Le programme <prgn/man/ cherchera
    alors les pages de manuel en Italien sous <file>/usr/share/man/it/</file>.
  <item>Notez que Debian n'est <strong>pas</strong> livrée avec toutes les
  locales disponibles précompilées. Consultez le fichier
  <file>/usr/lib/locale</file> pour voir quelles locales (à part le défaut,
  "C") sont compilées pour votre système. Si celle dont vous avez besoin n'est
  pas présente, vous avez deux possibilités :
  <enumlist compact>
  <item>Editer <file>/etc/locale.gen</file> pour ajouter la locale souhaitée,
  et lancer <prgn>locale-gen</prgn> en tant que root pour la compiler. Voir
  <manref name="locale-gen" section="8"> et les pages de manuel listées dans
  la section "Voir aussi".
  <item>Lancer <tt>dpkg-reconfigure locales</tt> pour reconfigurer le paquet
  <package>locales</package>.
  </enumlist>
</list>

<sect id="kernel-details">Debian et le noyau

<sect1 id="non-debian-kernel">Compiler un noyau avec des sources non Debian

<p><!--Yes.  But you have-->
Il faut comprendre la politique Debian sur les en-têtes.

<p>Les bibliothèques C de Debian sont compilées avec les en-têtes du
<strong>noyau</strong> <em>stable</em> le plus récent.

<p>Par exemple, la version Debian-1.2 utilisait la version 5.4.13 des
en-têtes. Cette pratique contraste avec les paquets source du noyau Linux
distribués dans toutes les archives FTP Linux, qui utilisent des versions
encore plus récentes des en-têtes. Les en-têtes du noyau distribuées avec le
source du noyau sont situées dans <file>/usr/include/linux/include/</file>.

<p>Si vous avez besoin de compiler un programme avec des en-têtes du noyau
plus récentes que celles fournies par <package/libc6-dev/, alors vous devez
ajouter <tt>-I/usr/src/linux/include/</tt> à la ligne de commande lorsque vous
compilez. Cela est arrivé, par exemple, avec l'empaquetage du daemon
automounter (<package/amd/). Lorsque de nouveaux noyaux ont changé les
commandes internes ayant trait à NFS, <prgn>amd</prgn> a dû en prendre
connaissance. Cela a requis d'inclure les dernières en-têtes du noyau.

<sect1 id="customkernel">Outils pour compiler un noyau personnalisé

<p>Les utilisateurs qui souhaitent (ou doivent) compiler un noyau personnalisé
sont encouragés à télécharger le paquet <package/kernel-package/. Ce paquet
contient le script pour construire le paquet du noyau, et fournit la
possibilité de créer un paquet kernel-image Debian en exécutant la commande
  <example>make-kpkg kernel_image</example>
dans le répertoire le plus haut des sources du noyau.
De l'aide est disponible en exécutant la commande
  <example>make-kpkg --help</example>
et dans la page de manuel <manref name="make-kpkg" section="8">.

<p>Les utilisateurs doivent télécharger séparément le code source du dernier noyau (ou
le noyau de leur choix) depuis leur archive FTP Linux favorite, à moins qu'un
paquet kernel-source-version soit disponible (où "version" indique ma version
du noyau). Voir <ref id="kernel-compile">.

<p>Des instructions détaillées pour utiliser le paquet
<package/kernel-package/ sont fournies dans le fichier
<tt>/usr/doc/kernel-package/README</tt>.

<!-- TODO: check out a new source of details, this README isn't too useful,
  I'm told (joy) -->

<sect1 id="alt-boot">Chargeurs 
<p>
Pour utiliser un autre chargeur, comme <package/grub/ ou <package/loadlin/,
copier l'image du noyau Linux compilée <file>bzimage</file> vers un autre
emplacement (par exemple, vers <file>/boot/grub</file> ou une partition
MS-DOS).
</sect1>

<sect1 id="custombootdisk">Disquettes de démarrage personnalisées

<p>La création d'une disquette de démarrage personnalisée est aidée par le
paquet Debian <package/boot-floppies/, qui se trouve normalement dans la
section <tt>admin</tt> de l'archive FTP Debian. Les scripts shell de ce paquet
produisent des disquettes de démarrage au format <prgn>syslinux</prgn>. Ce
sont des disquettes formatées au format MS-DOS dont le "Master Boot Record" a
été modifié pour qu'elles démarrent Linux directement (ou n'importe quel
système d'exploitation défini dans la fichier <tt>syslinux.cfg</tt> sur la
disquette). D'autres scripts dans ce paquet produisent des disquettes racines
d'urgence et peuvent même reproduire les disquettes de base.

<p>Vous trouverez plus d'information à ce propos dans le fichier
<file>/usr/doc/boot-floppies/README</file> après avoir installé le paquet
<package/boot-floppies/.

<sect1 id="modules">Dispositions spéciales pour manipuler les modules

<p>Le paquet Debian <package/modconf/ fournit un script shell
(<file>/usr/sbin/modconf</file>) qui peut être utilisé pour personnaliser la
configuration des modules. Ce script présente une interface à base de menus,
demandant à l'utilisateur les pilotes de périphériques présents sous forme de
modules chargeables qu'ils souhaite utiliser sur son système. Les réponses
sont utilisées pour personnaliser le fichier de configuration
<file>/etc/modules.conf</file> (qui liste les alias, et autres arguments qui
doivent être utilisés par les différents modules) grâce aux fichiers
<file>/etc/modutils/</file>, et <file>/etc/modules</file> (qui liste les
modules qui doivent être chargés lors du démarrage).

<p>Comme les (nouveaux) fichiers Configure.help qui sont maintenant
disponibles pour supporter la compilation de noyaux personnalisés, le paquet
<package/modconf/ est livré avec une série de fichiers d'aide (dans
<file>/usr/lib/modules_help/</file>) qui fournissent des informations
détaillées sur les arguments possibles pour chacun des modules.

<!-- XXXX need section for initrd -->

<sect1 id="removeoldkernel">Désinstaller le paquet d'un vieux noyau

<p>Le script <tt>kernel-image-NNN.prerm</tt> vérifie que le noyau que vous
exécutez actuellement n'est pas le noyau à désinstaller. Ainsi, vous
pouvez supprimer de façon sûre les noyaux dont vous ne voulez plus avec cette
commande :

<example>dpkg --purge --force-remove-essential kernel-image-NNN</example>

(Remplacez <var>NNN</var> par la version et la révision de votre noyau, bien
sûr.)
</sect>
