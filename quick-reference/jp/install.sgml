<!-- CVS revision of this document "$Revision: 1.1 $"  -->
<!-- CVS revision of original english document "1.79"  -->

<chapt id="install">Debian システムインストールのヒント

<p>
Debian のインストール用の公式文書は
<url id="&stable-info;"> 及び
<url id="&stable-install;"> にあります。
<p>
開発版は
<url id="&testing-info;" > 及び
<url id="&testing-install;"> にあります。(作業中であり、時々なくなります。)
<p> 
本章は当初 Potato のインストーラの時代に書かれましたが、内容のほとんどは
Woody のインストーラ用に更新されており、さらに2つのインストーラの内容は非常に
似通っています。Sarge は完全に新たなインストーラを用いるため、Sarge の
インストーラのためには、本文書は基準点として使用してください。
<sect>一般的な Linux system のインストールヒント
<p>
&debian; インストーラのコンパクトな CD イメージを探している場合は
<url id="&debian-netinst;"> を忘れずにチェックしてください。 
<p>
&debian; の <tt>testing</tt> 又は <tt>unstable</tt> flavor を使うことは
深刻なバグに直面するリスクを増大させます。このリスクは &debian; の
より安定な flavor とのマルチブートを行ったり、<ref id="chroot"> に記述
されているより安定な flavor 内で <prgn>chroot</prgn>することにより
供給される素晴らしい手段を用いることにより管理できます。後者の方法は
&debian; の異なった flavor を複数の端末で同時に起動することを可能とします。
<p>

<sect1>ハードウェア互換性の基礎
<p>
Linux はほとんどの PC ハードウェアとの互換性を有しており、ほとんどのシステム
にインストールできます。私にとって Linux のインストールは Windows 95/98/Me
をインストールするのと同じ位簡単です。ハードウェア互換性リストは常に
増大し続けているようです。
<p>
ラップトップ PC を持っている場合は、
そのブランドとモデル名によるインストールヒントを
<url id="&linonlap;" name="Linux on Laptops"> で
調査できます。
<p>
デスクトップ PC ハードウェアのお薦めは "とにかく保守的" ということです:
<list compact>
<item> 仕事では IDE よりも SCSI、私用では IDE/ATAPI HD。
<item> IDE/ATAPI CD-ROM (又は CD-RW)。
<item> ISA よりも PCI。ネットワークカード (NIC) は特に。
<item> 安い NIC を使用する。PCI では Tulip、ISA では NE2000 が良いでしょう。
<item> 初めての Linux インストールは PCMCIA (ノートPC) を避ける。
<item> 人柱になりたくなければ USB キーボードやマウスを避ける。
</list>
<p>
低速なマシンを持っている場合、ハードディスクを取り外して他の高速なマシンに
取り付けてインストールするのは良いアイデアです。
</sect1>

<sect1>PC のハードウェアとチップセットを決定する
<p>
インストール中、PC のハードウェアやチップセットを聞かれることがあります。
時々それらの情報は見付かりづらいかもしれません。次にハードウェアやチップセット
の情報を見付ける方法を挙げます:
<enumlist compact>
  <item>PC のケースを開けて中を見る。
  <item>ビデオカードやネットワークカードの大きなチップ、
  シリアルポートの近くにあるチップ、IDE ポートの近くにあるチップに
  付いているプロダクトID を記録する。
  <item> PCI 又は ISA カードの後ろにプリントされているカードの名前を記録する。
</enumlist>
</sect1>

<sect1>&debian; から PC のハードウェアを決定する
<p>
Linux system 上で次のコマンドを実行すると実際のハードウェアとその設定の
ヒントが得られます。
<example>
$ lspci -v |pager
$ pager /proc/pci
$ pager /proc/interrupts
$ pager /proc/ioports
$ pager /proc/bus/usb/devices
</example>
これらのコマンドはインストールの進行中に端末から Alt-F2 を押すことにより
実行可能になります。
<p>
典型的な PC は次のように IRQ を使用します:
<list compact>
<item>IRQ0: timer output (8254)
<item>IRQ1: keyboard controller
<item>IRQ2: cascade to IRQ8-IRQ15 on PC-AT
<item>IRQ3: secondary serial port (io-port=0x2F8) (<file>/dev/ttyS1</file>)
<item>IRQ4: primary serial port (io-port=0x3F8) (<file>/dev/ttyS0</file>)
<item>IRQ5: free (was the HD interrupt on the XT)
<item>IRQ6: floppy disk controller (io-port=0x3F0) (<file>/dev/fd0</file>, <file>/dev/fd1</file>)
<item>IRQ7: parport (io-port=0x378) (<file>/dev/lp0</file>)
<item>IRQ8: rtc
<item>IRQ9: software interrupt (int 0x0A), redirect to IRQ2
<item>IRQ10: free
<item>IRQ11: free
<item>IRQ12: PS/2 Mouse
<item>IRQ13: free (was 80287 math coprocessor)
<item>IRQ14: primary IDE controller (<file>/dev/hda</file>, <file>/dev/hdb</file>)
<item>IRQ15: secondary IDE controller (<file>/dev/hdc</file>, <file>/dev/hdd</file>)
</list>
<p>
USB デバイスに対しては、デバイスクラスが次のようにリストされます:
<file>/proc/bus/usb/devices</file> as <tt>Cls=<var>nn</var></tt>:
<list compact>
<item>Cls=00 : Unused
<item>Cls=01 : Audio (speaker etc.)
<item>Cls=02 : Communication (MODEM, NIC, ...)
<item>Cls=03 : HID (Human Interface Device: KB, mouse, joystick)
<item>Cls=07 : Printer
<item>Cls=08 : Mass storage (FDD, CD/DVD drive, HDD, Flash, ...)
<item>Cls=09 : Hub (USB hub)
<item>Cls=255 : Vendor specific
</list>
デバイスクラスが 255 ではない場合は、Linux はそのデバイスをサポートしています。
</sect1>

<sect1>他の OS から PC のハードウェアを決定する
<p>
ハードウェア情報は他の OS からも取得可能です:
<p>
他の商用 Linux ディストリビューションをインストールしてください。これらの
ディストリビューションのハードウェア検知機能は現在の Debian の検知機能に比べ
優れています。(この状況は Sarge に <prgn>debian-installer</prgn> が導入されても変わらないでしょう。)
<p>
Windows をイントールします。ハードウェアの設定は "My Computer" を右クリックしてデバイスマネージャ/プロパティを開くことにより取得できます。
IRQ、 I/O ポートアドレス、そして DMA のような全てのリソースが
記録されています。ある古い ISA カードは DOS 上で設定する必要があります。
</sect1>

<sect1> Lilo の俗説
<p>
"Lilo is limited to 1024 cylinders." は間違っている!
<p>
Debian potato 以降で使用されている <prgn>lilo</prgn> は lba32 をサポート
しています。マザーボードの BIOS が lba32 をサポートしているくらい新しいなら、
<prgn>lilo</prgn> は古い 1024 シリンダーの制限を越えてロードできます。
<p>
古い <file>lilo.conf</file> を保持している場合、<file>lilo.conf</file> の
先頭の近くのどこかに "lba32" を読み込む一行を確実に追加してください。
<file>&f-lilo;</file> を見てください。
</sect1>

<sect1 id="instgrub">GRUB
<p>
GNU Hard プロジェクト由来の新しいブートローダである <package>grub</package>
は &debian; の Woody system に次のようにインストールできます:
<example>
# apt-get update
# apt-get install grub-doc
# mc &f-grub-doc;
... 内容を読む。
# apt-get install grub
# pager &f-grub;
... これを読む。
</example>
GRUB メニュを編集するには、<file>&f-grub-menu;</file> を編集してください。
<package>lilo</package> とはブートパラメータの設定方法がかなり違うので、
ブート中にブートパラメータを設定する方法について <ref id="bootgrub"> を
見てください。
</sect1>

<sect1 id="bootfloppy">ブートフロッピーの選択
<p>
Potato では、通常のデスクトップへのインストールには IDEPCI disk set が
いいでしょう。
Woody では、 bf2.4 boot disk set がいいです。これらはブートフロッピーを
作成するため、共に <package>boot-floppies</package> 版を使用しています。
<p>
PCMCIA ネットワークカードを持っている場合、標準の boot disk set を使用して
(大量のフロッピーを必要としますが全てのドライバモジュールが含まれています)
PCMCIA setup で NIC の設定を行う必要があります。標準のネットワークセットアップ
ダイアログで NIC カードの設定を行おうとしないでください。
<p>
特殊なシステムでは、カスタムレスキューディスクを作成する必要があります。
これは違うマシンでコンパイルした圧縮カーネルイメージにより &debian; 
レスキューディスク上の "linux" と言う名前のカーネルイメージを上書きして
置き換えることにより行えます。詳細はレスキューディスク内の 
<file>readme.txt</file> にあります。
レスキューフロッピーは MS-DOS ファイルシステムを使用しているので、
読み込みと編集にあらゆるシステムを使用できます。この特徴により特別な
ネットワークカードなどを使用したい人にとって使い易くなっています。
<p>
Sarge では、ブートフロッピーの作成に <prgn>debian-installer</prgn> 又は 
<package>pgi</package> が使われると期待されています。
</sect1>

<sect1>インストール
<p>
<url id="&stable-install;"> 又は
<url id="&testing-install;"> (作業中で時々なくなります)
にある公式な指示に従ってください。
<p>
<tt>testing</tt> ディストリビューションで<prgn>boot-floppies</prgn> を用いた
システムをインストールしている場合、APT ソースを調整するため、インストール中に 
Alt-F2 を押して端末を開き、<file>/etc/apt/sources.list</file> エントリを
編集し、"stable" を "testing" に変更する必要があるかもしれません。
<p>
私は <prgn>lilo</prgn> を <file>/dev/hda3</file> のような場所にインストールし、
<prgn>mbr</prgn> の場合は <file>/dev/hda</file> にインストールします。
このようにするとブート情報を上書きする危険性を最小限に抑えることができます。
<p>
ここにインストール中私が選ぶ選択肢を挙げます:
<list compact>
<item>MD5 passwords "yes"
<item>shadow passwords "yes"
<item>Install "advanced" (dselect **) and select
  <list compact>
    <item>emacs (選択されていれば), nvi, tex, telnet, talk(d) を除外する。
    <item>mc, vim 及び nano-tiny 又は elvis-tiny のうちどちらかを入れる。
    <p>
     <ref id="dselect"> を見てください。あなたが Emacs 愛好者の場合でも、
     インストール中は emacs をインストールするのを避けて nano に満足
     してください。現段階では TeX (Potato が昔インストールしようとしていました)
     などの巨大なパッケージのインストールを避けてください。nano-tiny 又は
     elvis-tiny をここでインストールする理由については <ref id="bin-editor">
     を御覧ください。
  </list>
<item>パッケージのインストールダイアログの間、全ての設定に関する質問に対して
 "y" (現在の設定と置き換える) を選ぶ。
<item><package>exim</package>: メールを ISP の SMTP サーバ経由で送るため "2" を
  選択する。
</list>
<p>
dselect に関するより詳しい情報は、<ref id="dselect"> をご覧ください。
</sect1>

<sect1 id="ipmap">LAN を使用するためのホスト及び IP
<p>
Example of LAN configuration (C subnet: 192.168.1.0/24):
<example>
Internet
   |
   +--- 外部 ISP が POP service を供給 (fetchmail 経由の取得)
   | 
  ISP アクセスポイントがDHCP service とSMTP relay service を供給
   |                     :
  ケーブルモデム (ダイアルアップ)
   |                     :
LAN ゲートウェイマシン 外部ポート: eth0 (ISP の DHCPにより付与)
 古いノートPCを使用 (IBM Thinkpad, 486 DX2 50MHz, 20MB RAM)
 ext3 ファイルシステムを用いた Linux 2.4 カーネルを使用
 "ipmasq" パッケージを使用 (stronger patch, NAT 及び firewallを使用)
 "dhcp-client" パッケージを使用し、eth0 に対して設定 (DNS 設定を上書きする)
 "dhcp" パッケージを使用し、eth1 に対して設定
 "exim" を smarthost として使用 (mode 2)
 長時間の間隔で "fetchmail" を使用 (fallback)
 LAN からインターネットへの接続のためのキャッシュサーバ及び LAN から
 LAN ドメインへのアクセスのための信頼できるネームサーバとして
 "bind" を使用。
 port 22 及び 8080 にて "ssh" を使用 (どこからでも接続するため)
 (APT からの) Debian archive のため、キャッシュサーバとして "squid" 
 を使用。
 LAN ゲートウェイマシン内部ポート: eth1 (IP = 192.168.1.1 固定)                        |
         +--- LAN スイッチ (100base T) ---+
         |                              |
LAN 上のいくつかの固定IP クライアント LAN 上のいくつかの DHCP クライアント
(IP = 192.168.1.2-127 固定)    (IP = 192.168.1.128-200 動的取得)
</example>
ネットワークの設定の詳細は <ref id="gateway"> を御覧下さい。
LAN ゲートウェイサーバの詳細な設定については <ref id="net-router"> を
ご覧ください。
</sect1>

<sect1>ユーザアカウント
<p>
複数のマシンを通じて同じ感覚を保つために、最初のいくつかのアカウントはいつも
システムを通じて同一にしています。
<p>
いつも最初のユーザアカウントを "admin" (uid=1000) のような名前で作成
しています。全ての root へのメールをそこに forward します。このアカウントは
<tt>adm</tt> group (<ref id="wheel"> 参照) のメンバに与えられ、
root 権限を PAM を通じた <prgn>su</prgn> 又は <prgn>sudo</prgn> コマンド
を通じて与えることが可能です。詳細は <ref id="newuser"> 御覧下さい。
</sect1>

<sect1>ファイルシステムを作成
<p>
<sect2>ハードディスクのパーティション
<p>
システムクラッシュの際の被害を最小限に抑えるため、異なったディレクトリツリー
に対して異なったパーティションを使用する方が好みです。例えば、
<example>
/          == (/ + /boot + /bin + /sbin)
           == 50MB+
/tmp       == 100MB+
/var       == 100MB+
/home      == 100MB+
/usr       == 700MB+ with X
/usr/local == 100MB
</example>
<p>
<file>/usr/</file> ディレクトリのサイズは X Window アプリケーションや
ドキュメントの量に極めて依存しています。コンソールのみを使用する場合、
<file>/usr/</file> は 300MB にすることができます。一方多数の Gnome 
アプリケーションをインストールした場合、2GB&ndash;3GB のサイズを割り当てるのは
異常ではありません。

<file>/usr/</file> が非常に大きくなってしまった時、<file>/usr/share/</file>
を他のパーティションに移すことは最も効率的な対策です。新しい大規模な
パッケージ化された Linux 2.4 カーネルでは、<file>/</file> は
200MB 以上必要となるかもしれません。

<p>
例えば、私の Internet ゲートウェイサーバの現在の状況は次の用になっています:
(<tt>df -h</tt>コマンドの出力)
<example>
Filesystem            Size  Used Avail Use&percnt; Mounted on
/dev/hda3             300M  106M  179M  38&percnt; /
/dev/hda7             100M   12M   82M  13&percnt; /home
/dev/hda8             596M   53M  513M  10&percnt; /var
/dev/hda6             100M  834k   94M   1&percnt; /var/lib/cvs
/dev/hda9             596M  222M  343M  40&percnt; /usr
/dev/hda10            596M  130M  436M  23&percnt; /var/cache/apt/archives
/dev/hda11            1.5G  204M  1.2G  14&percnt; /var/spool/squid
</example>
(<file>/var/spool/squid/</file> に割り当てられている大容量の領域は
パッケージのダウンロードの際の proxy キャッシュのためです。)
<p>
次は パーティション構造の考えを示すための <tt>fdisk -l</tt> の出力です。
<example>
# fdisk -l /dev/hda # comment

/dev/hda1             1        41    309928+   6  FAT16 # DOS
/dev/hda2            42        84    325080   83  Linux # (not used)
/dev/hda3   *        85       126    317520   83  Linux # Main
/dev/hda4           127       629   3802680    5  Extended
/dev/hda5           127       143    128488+  82  Linux swap
/dev/hda6           144       157    105808+  83  Linux
/dev/hda7           158       171    105808+  83  Linux
/dev/hda8           172       253    619888+  83  Linux
/dev/hda9           254       335    619888+  83  Linux
/dev/hda10          336       417    619888+  83  Linux
/dev/hda11          418       629   1602688+  83  Linux
</example>
いくつかの未使用のパーティションが存在しています。これらは2個目の Linux
ディストリビューションのインストールや大きくなったディレクトリツリーのための
拡張スペースのためのものです。
<sect2>ファイルシステムのマウント
<p>
上記のファイルシステムを適切にマウントするために、次に示すように 
<file>/etc/fstab</file> を設定しています。
<example>

# /etc/fstab: static filesystem information.
#
# filesystem    mount point     type    options                dump pass
/dev/hda3       /               ext2    defaults,errors=remount-ro 0 1
/dev/hda5       none            swap    sw                      0 0
proc            /proc           proc    defaults                0 0
/dev/fd0        /floppy         auto    defaults,user,noauto    0 0
/dev/cdrom      /cdrom          iso9660 defaults,ro,user,noauto 0 0
#
# パーティションを分割しつづけます
/dev/hda7       /home           ext2    defaults                0 2
/dev/hda8       /var            ext2    defaults                0 2
/dev/hda6       /var/lib/cvs    ext2    defaults                0 2
# noatime オプション はファイルの読み込みのアクセスを高速化する
/dev/hda9       /usr            ext2    defaults,noatime        0 2
/dev/hda10      /var/cache/apt/archives ext2    defaults        0 2

# proxy キャッシュのための非常に大きなパーティション
/dev/hda11      /var/spool/squid ext2   rw                      0 2

# ブート可能な DOS のバックアップ
/dev/hda1       /mnt/dos        vfat    rw,noauto               0 0
# ブート可能な Linux システムのバックアップ (未実施)
/dev/hda2       /mnt/linux      ext2    rw,noauto               0 0
#
# nfs マウント
mickey:/        /mnt/mickey     nfs     ro,noauto,intr          0 0
goofy:/         /mnt/goofy      nfs     ro,noauto,intr          0 0
# minnie:/ /mnt/minnie smbfs ro,soft,intr,credentials={filename} 0 2
</example>

NFS の場合、 <tt>noauto,intr</tt> オプションをデフォルトの<tt>hard</tt> 
オプションと組み合わせて使用します。このようにすると、Ctrl-C を用いた
dead-connection によるプロセスのハングから回復することが可能です。
<p>
Samba (smbfs) により接続した Windows マシンに対しては、
<tt>rw,auto,soft,intr</tt>オプションを使用するのは良い考えです。
<ref id="samba"> をご覧ください。
<p>
フロッピードライブに対しては、<tt>noauto,rw,sync,user,exec</tt> を
通常のオプションの代わりに用いて unmount する前に誤って ディスクを eject 
してしまった後のファイル破壊を防ぐことができます。

<sect2>Autofs マウント
<p>
auto mount する際のキーは、
<list compact>
<item>
<tt>vfat</tt> モジュールをロードすると、<file>/etc/auto.misc</file> に 
<tt>-fstype=auto</tt> を含ませることを可能とします。
<example>
# modprobe vfat # フロッピーへのアクセスを行う前に実行
 ... 又は本設定を自動化させるには
# cat >>/etc/modules
vfat
^D
 ... そしてシステムをリブートする。
</example>
<item> <file>/etc/auto.misc</file>を次のように設定する:
<example>
floppy -fstype=auto,sync,nodev,nosuid,gid=100,umask=000 :/dev/fd0
 ... ここで gid=100 は "users" です。
</example>
<item><file>cdrom</file> 及び <file>floppy</file> へのリンクを <file>/home/<var>user</var></file> に、それぞれ
 <file>/var/autofs/misc/cdrom</file> および
 <file>/var/autofs/misc/floppy</file> を指すように設定する。
<item> <var>user</var> を  "users" グループに追加する。
</list>

<sect2>NFS マウント
<p>
ファイアーウォール (ゲートウェイ) の後ろに (まぬけにも) 
外部の Linux NFS サーバが存在します。私しかユーザが居ないので、
非常に緩やかなセキュリティポリシーを LAN 内では適用しています。
NFS アクセスを可能とするには、NFS サーバ側で
<file>/etc/exports</file> に対して次のように追加する必要があります:

<example>
# /etc/exports: the access control list for filesystems which may be
#               exported to NFS clients.  See exports(5).
/       (rw,no_root_squash)
</example>
これは NFS サーバパッケージ及びクライアントパッケージのインストール及び
有効化に加えて NFS サーバを有効にするために必要です。
<p>
単純化のため、通常実験又は2個目の不精な Linux インストールのための 2GB の
単独のパーティションを作成します。これらのインストールのために swap の
や <file>/tmp</file> の共有を任意で行います。複数パーティションとすると、
これらの手段が使用できなくなるほど複雑になってしまいます。単独の端末システム
のみを必要とする場合、500MB もあれば十分です。
</sect1>

<sect1>DRAM メモリ量のガイドライン
<p>
Following are rough guidelines for DRAM.
次に DRAM 搭載量の大まかなガイドラインを示します。
<example>
  4MB:  Linux kernel が動く最小量
 16MB:  適切なコンソールのみのシステムに最低限必要な量
 32MB:  シンプルな X Window system に最低限必要な量
 64MB:  GNOME/KDE を用いた X Window system を動かすのに最低限必要な量
128MB:  GNOME/KDE を用いた X Window system が快適な量
256MB(以上): なぜ買えないの? DRAM は安いよ。
</example>
<tt>mem=4m</tt> ブートオプションを用いる (又は lilo で <tt>append="mem=4m"</tt>
とする) とシステムにメモリが 4MB しか無い場合の振舞がどのようなものかを
示します。BIOSが古く、64MB 以上のメモリを搭載しているシステムには
特別な lilo ブートパラメータが必要です。
</sect1>

<sect1>スワップ
<p>
スワップに対しては次のようなガイドラインを使用します:
<list compact>
<item>各スワップパーティション &lt; 128MB (古い 2.0 kernel の場合), 
 &lt; 2GB (最近のカーネルの場合)
<item>合計 = (搭載した RAM の量の1から2倍) 又は (128MB から 2GB) 
<item>各スワップパーティションを異なったディスクに分散し、それらすべてを
<file>/etc/fstab</file> に <tt>sw,pri=1</tt> オプションを追加してマウント
する。これはカーネルがスワップパーティションのストライピング RAID を行う
ことを保証し 、最大のスワップパフォーマンスをもたらします。
<item>可能ならばハードディスクの中央部分を使用できれば、より良い。
</list>
<p>
スワップを必要としない場合でも、メモリリークを起こすプログラムによりクラッシュ
する前にシステムが低速化するのでいくらかのスワップ (128MB) を用意するのが
望ましい。
</sect1>
</sect>

<sect id="bashconf">Bash 設定
<p>
システム全体に渡って自分の好みに合うようにシェルの起動スクリプトを変更します。
<example>
/etc/bash.bashrc        Replace with private one
/etc/profile            Keep distribution copy ( \w -&gt; \W)
/etc/skel/.bashrc       Replace with private copy
/etc/skel/.profile      Replace with private copy
/etc/skel/.bash_profile Replace with private copy
~/.bashrc               Replace with private copy for all accounts
~/.profile              Replace with private copy for all accounts
~/.bash_profile         Replace with private copy for all accounts
</example>
<url id="examples/" name="See details in my example scripts">. 
私は透過的なシステムが好きなので、<prgn>umask</prgn> を 002 又は 022 
にセットします。
<p>
<prgn>PATH</prgn> は次に挙げる順で設定ファイルによりセットされます。
<example>
/etc/login.defs  - シェルが PATH をセットする前
/etc/profile     (may /etc/bash.bashrc を呼んでいるかもしれません)
~/.bash_profile  (~/.bashrc を呼んでいるかもしれません)
</example>
</sect>

<sect id="gpm">マウスの設定
<p>
<sect1>PS/2 mice
<p>
ATX マザーボードの PS/2 コネクタにつなげるマウスの場合、信号の流れは
次のようになります:
<example>
mouse -&gt; /dev/psaux -&gt; gpm -&gt; /dev/gpmdata = /dev/mouse -&gt; X
</example>
ここで、<file>/dev/psaux</file>というシンボリックリンクが作成され、
<file>/dev/gpmdata</file> を指すことによりいくつかの設定ユーティリティ
がマウスを使い易くし、再設定を容易にすることができます。
(例えば、結局 <prgn>gpm</prgn> デーモンを使わないことにした場合、
<prgn>gpm</prgn> デーモンを削除した後に <file>/dev/mouse</file> という
シンボリックリンクは単に <file>/dev/psaux</file> を指すことになります。)
<p>
この信号の流れにより、再接続時に <prgn>gpm</prgn> を再起動することにより
キーボードやマウスが外され、再び接続することができるようになります。
X は動いたままです!
<p>
<prgn>gpm</prgn> の出力と X への入力の間の信号プロトコルは "ms3" (Microsoft
3ボタンシリアルマウスプロトコル) 又は "raw" (同じプロトコルを接続された
マウスとして使用する) のどちらでも実装できます。そしてこのプロトコルの選択
が X の設定で使用されるプロトコルの選択を規定します。
<p>
Logistech 3ボタン (伝統的な Unix スタイルのマウス) PS/2 マウスを
例として使用して次にマウスの設定の例を挙げます。
<p>
新しい X Version 4 でサポートされていないビデオカード 
(いくつかの ATI 64ビットカード) を使っていて古い X Version 3 を使う必要
があるなら、X Version 3 パッケージをインストールして次に示すように
<tt>/etc/X11/XF86Config-4</tt> の代わりに <tt>/etc/X11/XF86Config</tt>
を設定してください。

<sect2 id="gpmms3">The ms3 プロトコルを用いる方法
<p>
<example>
/etc/gpm.conf            | /etc/X11/X86Config-4
=========================+======================================
device=/dev/psaux        | Section "InputDevice"
responsiveness=          |  Identifier "Configured Mouse"
repeat_type=ms3          |  Driver     "mouse"
type=autops2             |  Option     "CorePointer"
append=""                |  Option     "Device"   "/dev/mouse"
sample_rate=             |  Option     "Protocol" "IntelliMouse"
                         | EndSection
</example>
本手法を用いると、マウス形式の調整は <file>gpm.conf</file>の
編集のみ行えばよく、X の設定はそのままでかまいません。
<url id="examples/" name="my example scripts"> をご覧ください。
<sect2 id="gpmraw">The raw プロトコルを用いる方法
<p>
<example>
/etc/gpm.conf            | /etc/X11/X86Config-4
=========================+======================================
device=/dev/psaux        | Section "InputDevice"
responsiveness=          |  Identifier "Configured Mouse"
repeat_type=raw          |  Driver     "mouse"
type=autops2             |  Option     "CorePointer"
append=""                |  Option     "Device"   "/dev/mouse"
sample_rate=             |  Option     "Protocol" "MouseManPlusPS/2"
                         | EndSection
</example>
本手法を用いると、マウス形式の調整は <file>gpm.conf</file> を編集する
のに加え、Xの設定も調整する必要があります。
<sect2>異なるマウスを調整する方法
<p>
<prgn>gpm</prgn> における <tt>autops2</tt> デバイスタイプは
市場に出回っているほとんどの PS/2 マウスを自動検知するはずです。不幸にも
これはいつも動くとは限らず、Woody 以前には使えませんでした。そのような
場合には <tt>autops2</tt> の代わりとして <file>/etc/gpm.conf</file> に
<tt>ps2</tt> 又は <tt>imps2</tt> を使用してください。
<prgn>gpm</prgn> が認識できる特別なタイプのマウスを調べるには、
<tt>gpm -t help</tt> を実行してください。<manref name="gpm" section="8">
をご覧ください。
<p>
2ボタン PS/2 マウスを使用している場合、X プロトコルが <tt>Emulate3Buttons</tt>
を有効化するように設定してください。中央のボタンを一度押すと2ボタンマウスと
3ボタンマウスの間のプロトコルの違いが自動検知され、<prgn>gpm</prgn> 用に
自動調整されます。
<p>
X プロトコルで <ref id="gpmraw"> を用いる、又は <prgn>gpm</prgn> を
用いない場合、次のマウス形式を使用してください:
<list compact>
<item><tt>IntelliMouse</tt>: serial port mouse (<prgn>gpm</prgn> repeater with "ms3")
<item><tt>PS/2</tt>: PS/2 port mouse (常に最初に試されます)
<item><tt>IMPS/2</tt>: PS/2 portmice (2ボタン、3ボタン、そしてスクロールマウスではこれがよりふさわしい)
<item><tt>MouseManPlusPS/2</tt>: Logitech PS/2 port mouse
<item><tt>...</tt>
</list>
詳細は <url id="&mousexf86;" name="Mouse Support in XFree86"> を
ご覧ください。
<p>
典型的な Microsoft スクロールマウスの場合、次の設定によりもっとうまく動くと
報告されています:
<example>
/etc/gpm.conf            | /etc/X11/X86Config-4
=========================+======================================
device=/dev/psaux        | Section "InputDevice"
responsiveness=          |  Identifier "Configured Mouse"
repeat_type=raw          |  Driver     "mouse"
type=autops2             |  Option     "CorePointer"
append=""                |  Option     "Device"   "/dev/mouse"
sample_rate=             |  Option     "Protocol" "IMPS/2"
                         |  Option     "Buttons" "5"
                         |  Option  "ZAxisMapping" "4 5"
                         | EndSection
</example>
<p>
最近の薄型の東芝ノートPC では、<prgn>gpm</prgn>を PCMCIA よりも先に
起動するとシステムのデッドロックを防ぐことができるようです。不気味ですが
本当です。
<sect1>USB マウス
<p>
必要な全ての kernel 機能をカーネルコンパイル時の設定やモジュールを
通して有効にしたかどうかを確認してください。
<list compact>
<item>Under "Input core support":
<list compact>
<item>"Input core support" (CONFIG_INPUT, <file>input.o</file>),
<item>"Mouse support" (CONFIG_INPUT_MOUSEDEV, <file>mousedev.o</file>),
</list>
<item>Under "USB support":
<list compact>
<item>"Support for USB" (CONFIG_USB, <file>usbcore.o</file>),
<item>"Preliminary USB device filesystem" (CONFIG_USB_DEVICEFS),
<item>"UHCI" 又は "OHCI" (CONFIG_USB_UHCI || CONFIG_USB_UHCI_ALT ||
       CONFIG_USB_OHCI, <file>usb-uhci.o</file> || <file>uhci.o</file> ||
       <file>usb-ohci.o</file>),
<item>"USB Human Interface Device (full HID) support" (CONFIG_USB_HID,
      <file>hid.o</file>) 及び
<item>"HID input layer support" (CONFIG_USB_HIDINPUT)
</list>
</list>
ここで、小文字の名前はモジュール名です。
<p>
devfs を使用していない場合、 <file>/dev/input/mice</file> デバイスノードを
major デバイス番号 13 、 minor デバイス番号 63 を用いて次のように
作成してください:
<example>
# cd /dev
# mkdir input
# mknod input/mice c 13 63
</example>
<p>
典型的なスクロール <strong>USB</strong> マウスの場合、
次のような 2 種類の設定を組み合わせる必要があります:
<example>
/etc/gpm.conf            | /etc/X11/X86Config-4
=========================+======================================
device=/dev/input/mice   | Section "InputDevice"
responsiveness=          |  Identifier "Generic Mouse"
repeat_type=raw          |  Driver     "mouse"
type=autops2             |  Option     "SendCoreEvents" "true"
append=""                |  Option     "Device"   "/dev/input/mice"
sample_rate=             |  Option     "Protocol" "IMPS/2"
                         |  Option     "Buttons" "5"
                         |  Option  "ZAxisMapping" "4 5"
                         | EndSection
</example>
<p>
詳細は <url id="&linuxusb;" name="the Linux USB Project"> を御覧下さい。
<sect1>タッチパッド
<p>
ノート PC にあるタッチパッドは 2ボタン PS/2 マウスをデフォルトの動作
としてエミュレートしますが、<package>tpconfig</package> パッケージ
によりタッチパッドのフル機能を有効化できます。例えば、
<file>/etc/default/tpconfig</file> にて <tt>OPTIONS="--tapmode=0"</tt>
と設定すると、くどい "click by tap" 機能を無効にできます。
コンソール上でタッチパッドと USB マウスを同時に使用するには 
<file>/etc/gpm.conf</file> を次のように設定してください:
<example>
device=/dev/psaux
responsiveness=
repeat_type=ms3
type=autops2
append="-M -m /dev/input/mice -t autops2"
sample_rate=
</example>

</sect>

<sect id="nfs">NFS 設定
<p>
<file>/etc/exports</file> を調整することにより NFS の設定を行えます。
<example>
# apt-get install nfs-kernel-server
# echo "/ *.LAN上のホストノドメイン名(rw,no_root_squash,nohide)" \
        &gt;&gt; /etc/exports
</example>
<url id="examples/" name="See my example scripts for details">.
</sect>

<sect id="samba">Samba の設定
<p>
リファレンス:
<list compact>
<item><url id="&sambahome;">
<item><package>samba-doc</package> パッケージ
</list>
<p>
WfW-type の共有ドライブを作成するので、 Samba を "share" モードに
設定するのはより容易です。しかし、私は "user" モードで設定する方が好きです。
<p>
Samba は <prgn>debconf</prgn> 又は <prgn>vi</prgn> を通じて設定可能です:
<example>
# dpkg-reconfigure --priority=<var>low</var> samba # Woody にて
# vi /etc/samba/smb.conf
</example>
<url id="examples/" name="See my example scripts for details">.
<p>
<file>smbpasswd</file> への新規ユーザの追加は、 <prgn>smbpasswd</prgn>を
次のように用いることにより可能です:
<example>
$ su -c "smbpasswd -a username"
</example>
最適な互換性を保つため、暗号化パスワードを確実に使用してください。
<p>
次に示すシステム等価係数 (大きくなるほど、サーバとしての優先度が高い)
に従い、<tt>os level</tt> を設定してください。
<example>
0:      緩い考えの Samba (マスタブラウザには決してならない)
1:      WfW 3.1, Win95, Win98, Win/Me?
16:     Win NT WS 3.51
17:     Win NT WS 4.0
32:     Win NT SVR 3.51
33:     Win NT SVR 4.0
255:    パワフルな Samba 
</example>
ユーザは共有アクセスを与えるディレクトリを所有するグループに属しており、
ディレクトリパスにはアクセスするための実行権があることを確認してください。
</sect>

<sect id="printer">プリンタの設定
<p>
プリンタを設定するための伝統的な方法は <prgn>lpr</prgn> 又は <prgn>lpd</prgn>
です。今は新しい CUPS&trade; システム (Common UNIX Printing System) が
存在します。PDQ はもう一つのアプローチです。詳細は
<url id="&printing-howto;" name="Linux Printing Howto"> を御覧下さい。

<sect1 id="lprlpd"><prgn>lpr</prgn>又は<prgn>lpd</prgn>
<p>
ポストスクリプトプリンタ又はテキストのみのプリンタを接続しているならば、
<prgn>lpr</prgn> 又は <prgn>lpd</prgn> タイプのスプールのために
<file>/etc/printcap</file> を次のように設定してください:
<example>
<var>lp</var>|<var>alias</var>:\
        :sd=/var/spool/lpd/<var>lp</var>:\
        :mx#0:\
        :sh:\
        :lp=/dev/lp0:
</example>
上記の行はそれぞれ次のような意味があります:
<list compact>
<item>先頭の行: <var>lp</var> &ndash; スプール名, <var>alias</var> = エイリアス<item>mx#0 &ndash; ファイルサイズの上限は制限されていない
<item>sh &ndash; バーストページのヘッダの印刷を止める。
<item>lp=/dev/lp0 &ndash; ローカルのプリンタデバイス又はリモートプリンタの
ポート@ホスト名を示す
</list>
本設定はポストスクリプトプリンタを接続している場合、良い設定です。又、
Samba を通じて Windows マシンに接続したプリンタから印刷する場合の
Windows をサポートした (双方向通信がサポートされない) プリンタ
にとっても良い設定です。Windows マシン上で対応するプリンタの設定を選択
する必要があります。
<p>
ポストスクリプトプリンタを所有していない場合、<prgn>gs</prgn> により
フィルタシステムの設定を行う必要があります。
<file>/etc/printcap</file> の設定のために供給される数多くの自動設定
ツールが存在します。
これらを自由に組み合わせることが可能です。
<list compact>
<item><package>gnulpr</package>, (<package>lpr-ppd</package>) と
  <package>printtool</package>&mdash;私はこの組合せを使っています。
<item><package>lpr</package> と <package>apsfilter</package>
<item><package>lpr</package> と <package>magicfilter</package>
<item><package>lprng</package> と <package>lprngtool</package>
<item><package>lprng</package> と <package>apsfilter</package>
<item><package>lprng</package> と <package>magicfilter</package>
<!-- I can think of more combinations but I add them if someone  
  actually report me they got it working with them.  -->
</list>
<p>
<prgn>printtool</prgn> のような GUI 設定ツールを起動するために root 権限
を取得するには <ref id="ss-xsu"> を見てください。<prgn>printtool</prgn>
により作成されたプリンタスプールは <prgn>gs</prgn> を使用し、ポストスクリプト
プリンタのように振る舞います。それゆえ、これらのプリンタにアクセスした時、
ポストスクリプトプリンタのドライバを使用します。Windows 側では、この
プリンタを用いるには "Apple LaserWriter" が標準的なドライバです。
</sect1>

<sect1 id="cups">CUPS&trade;
<p>
the Common UNIX Printing System (又は CUPS&trade;) のインストール:
<example>
# apt-get install cupsys foomatic-bin foomatic-db
# apt-get install cupsys-bsd cupsys-driver-gimpprint
</example>
<!-- CUPS dependencies: Recommends are not installed automatically -->
<p>
そして web ブラウザを用いてシステムの設定を行います:
</p>
<p>
<example>
$ <var>好みのブラウザ</var> で http://localhost:631 を開く。
</example>
</p>
<p>
例えば、アクセス可能なプリンタのリストにプリンタを追加するには:
<list>
<item>メインページの "Printers"  をクリックし、"Add Printer" を押し、
<item>ユーザ名として "root" を入力し、パスワードとしてroot のパスワードを
<item>入力する。
<item>プロンプトに従い、プリンタの追加を進める。
<item>"Printers" ページに戻り、"Configure Printer" を押し、
<item>用紙サイズ、解像度などのパラメータの設定を進める。
</list>
詳細は
<url id="http://localhost:631/documentation.html"> 及び
<url id="&cups-help;"> をご覧ください。
<p>
2.4 kernel の場合は、<ref id="parport"> もご覧ください。
</sect1>
</sect>

<sect>Other host installation hints

<sect1 id="post-inst">Install a few more packages after initial install
<p>
いったんここまで行ったら、小さいけれどちゃんと機能する &debian; システムを
持っていることになります。もっと大きいパッケージをインストールしても良い
時間です。
<list>
<item><prgn>tasksel</prgn> を起動しましょう。 <ref id="tasksel"> を
ご覧ください。
<p>
必要ならばこれらのタスクを選択できます。
<list compact>
<item>End-user &ndash; X Window System
<item>Development &ndash; C and C++
<item>Development &ndash; Python
<item>Development &ndash; Tcl/Tk
<item>Miscellaneous &ndash; TeX/LaTeX environment
<item>他の用途には、&lt;Task Info&gt; にリストされている要素を調べる、
それぞれ <prgn>dselect</prgn> を通してインストールすることにより、
<prgn>tasksel</prgn> をガイドとして使うのが好みです。
</list>

<item> <prgn>dselect</prgn> を起動する
<p>
まずあなたが最初に行いたいかもしれないのは好みのエディタや他のプログラムを選ぶ
ことでしょう。多数の Emacs の変種を同時にインストールできます。
<ref id="dselect"> や <ref id="pop-editor"> をご覧ください。
<p>
又は、デフォルトのパッケージのうちいくつかをフル機能を持った物に置き換えたい
かもしれません。
<list compact>
<item>lynx-ssh (instead of lynx)
<item>... <!-- Add list in generic way. -->
</list>
<item>...
</list>
私はより簡単にシャットダウンを行うため、通常 <file>/etc/inittab</file> を
次のように編集します:
<example>
...
# CTRL-ALT-DEL が押された時に実行
ca:12345:ctrlaltdel:/sbin/shutdown -t1 -a -h now
...
</example>
</sect1>

<sect1>モジュール
<p>
デバイスドライバ用のモジュールは最初のインストール中に設定されます。
<prgn>modconf</prgn> はメニュ指向なモジュール設定を後に供給します。
このプログラムは最小のインストール中にいくつかのモジュールを除外されたり、
最初のインストール後に新しいカーネルをインストールした場合に非常に有用です。
<p>
全てのプリロードされたモジュール名は <file>/etc/modules</file> 
にあるリストに追加される必要があります。モジュールの制御を手動で行うために
<prgn>lsmod</prgn> や <prgn>depmod</prgn> も使用します。
<p>
又、2.4 系 kernel の場合に IP masquerading (FTP など) を制御するには、
<file>/etc/modules</file> に新しい行を確実に追加してください。
<ref id="kernel-modules"> 、特に <ref id="kernel-net"> を見てください。
</sect1>

<sect1>CD-RW の基本的な設定
<p>
次に示すファイルを編集してください。
<example>
/etc/lilo.conf  (append="hdc=ide-scsi ignore=hdc" を追加し、 
                 設定を有効にするために lilo を実行する)
/dev/cdrom      (シンボリックリンク # cd /dev; ln -sf scd0 cdrom)
/etc/modules    ("ide-scsi" および "sg" を追加する。"sr" が必要なら
                その後に追加する。) 
</example>
詳細は <ref id="cdrw"> をご覧ください。
</sect1>

<sect1 id="apm">大容量メモリおよび自動電源 OFF
<p>
大規模メモリ (2.2 kernel 用)と自動電源 OFF (APM 用) のためのブートプロンプト
パラメータを設定するため、 <file>/etc/lilo.conf</file> を次のように編集
してください:
<example>
append="mem=128M apm=on apm=power-off noapic"
</example>
これらの設定をインストールするには <prgn>lilo</prgn> を実行してください。
SMP カーネルには <tt>apm=power-off</tt> の設定が必要であり、buggy な
SMP ハードウェアの問題を回避するには <tt>noapic</tt> と設定する必要
があります。同じことはブートプロンプトでオプションを入力することによっても
可能です。<ref id="bootprompt"> をご覧ください。
<p>
APM がモジュールとしてコンパイルされている場合、Debian のデフォルトの
version 2.4 カーネルでは、<tt>insmod apm power-off=1</tt> とブート後に
実行するか、<file>/etc/modules</file> に次のように設定してください:
<example>
# echo "apm power_off=1" &gt;&gt;/etc/modules
</example>
<p>
又は、ACPI のサポートを組み込んでコンパイルすることにより、より新しい kernel
を用いて同じ目標を達成出来ますし、より SMP フレンドリーのもなるようです
(これには新しいマザーボードが必要です)。 新しいマザーボード上で 2.4 kernel
を次の設定で動かすと大容量メモリを正確に認識できます。
<example>
CONFIG_PM=y
CONFIG_ACPI=y
...
CONFIG_ACPI_BUSMGR=m
CONFIG_ACPI_SYS=m
</example>
そして、次の2行をこの順番で <file>/etc/modules</file> に追加してください:
<example>
ospm_busmgr
ospm_system
</example>
又は上記に示したオプションを "y" にセットして kernel を再構築してください。
どの場合でも、ACPI を用いた場合にはブートプロンプトパラメタは必要ありません。
</sect1>

<sect1 id="killecn">いくつかのウェブサイトにアクセスした時の奇妙な挙動
<p>
最近の Linux kernel は通常 ECN を有効化でき、これが腐ったルータ上にある
いくつかのウェブサイトにアクセスした際に問題を引き起こします。ECN の
状況を確認するには:
<example>
# cat /proc/sys/net/ipv4/tcp_ecn
 ... 又は
# sysctl net.ipv4.tcp_ecn
を実行してください。
</example>
ECN を無効化するには、次のコマンドを実行してください。
<example>
# echo "0" > /proc/sys/net/ipv4/tcp_ecn
 ... 又は
# sysctl -w net.ipv4.tcp_ecn=0
</example>
ブート時に TCP ECN を無効化するには、<file>/etc/sysctl.conf</file> を
次のように編集してください:
<example>
net.ipv4.tcp_ecn = 0
</example>
</sect1>

<sect1>ダイアルアップ PPP 接続の設定
<p>
<package>pppconfig</package> パッケージをインストールすることにより
ダイアルアップ PPP 接続の設定ができます。
<example>
# apt-get install pppconfig
# pppconfig
 ... ダイアルアップ PPP のための指示に従う
# adduser <var>user_name</var> dip
 ... <var>user_name</var> のダイアルアップ PPP へのアクセスを許可
</example>
ユーザ (<var>user_name</var>) によりダイアルアップ PPP を次のように
起動できます:
<example>
$ pon <var>ISP_name</var>  # プロバイダへの PPP 接続を開始。
 ... Internet を愉しむ
$ poff <var>ISP_name</var> # PPP 接続を切断。 <var>ISP_name</var> は任意。
</example>
詳細は <file>&f-ppp-readme;</file> をご覧ください。
<p>
又は、<package>wvdial</package> をインストールしてダイアルアップ PPP 
接続の設定に使用できるかもしれません。非 root ユーザがダイアルアップを時々
失敗するという良く知られたバグ <url id="&bugs;82095"> を持つことに注意
してください。

<p>
All dialers use the <prgn>pppd</prgn> daemon, which starts the
programs found in <file>/etc/ppp/ip-up.d/</file> or
<file>/etc/ppp/ip-down.d/</file> after connecting or disconnecting.
That's used to fetch and send mails.
全てのダイアラは <prgn>pppd</prgn> デーモンを用い、本デーモンは
接続後は <file>/etc/pppd/ip-up.d/</file> 、切断後は 
<file>/etc/ppp/ip-down.d/</file> 下のプログラムを起動します。
これらはメールの取り込み並びに送信のために用いられます。

</sect1>

<sect1><file>/etc/</file> 下のファイルを微調整するための他の設定ファイル
<p>
標準的な Debian のインストールでは欠けている <file>/etc/cron.deny</file>
ファイルを追加したいかもしれません。(<file>/etc/at.deny</file> をコピー
可能です。)
</sect1>

</sect>

</chapt>
