<!-- CVS revision of this document "$Revision: 1.2 $"  -->
<!-- CVS revision of original english document "1.155"  -->

<chapt id="tune">&debian; システムのチューニング 
<p>
本章はシステムコンフィギュレーションの基本をコマンドラインインターフェース
のみで説明します。本章を読む前に<ref id="install">を読んで下さい。
<p>
セキュリティに関して関心があるなら、
<package>&p-securing-debian-howto;</package> パッケージにある
<url id="&securing-debian-howto;" name="Securing Debian Manual">
を読んでください。

<sect id="init-hints">システムの初期化
<p>
&debian; は Systen V 形式の init script システムを採用しています。
イントロダクションとして <ref id="init"> をご覧ください。

<sect1 id="init-defaults">init スクリプトのカスタマイズ
<p>
init スクリプトの挙動を制御する最も易しい方法は <file>/etc/default/</file>
ディレクトリにある init スクリプトのような名前のファイルにある環境変数の
指定を変更することです。
<footnote>
<file>/etc/default/</file> にあるディレクトリは環境変数の割り当て
<strong>のみ</strong> を含みます。
各ファイルはこれらの割り当てが init スクリプト自身にある標準の
変数の設定を上書きするような方法で、対応する init スクリプトにより
読み込まれます。
このディレクトリ名の選択は &debian; <url id="&etc-defaults;" name="独特">
のものです。
大まかに言うと、Red Hat や他のディストリビューションで見られる
<file>/etc/sysconfig</file> と同じものです。
</footnote>
例えば、<file>/etc/default/hotplug</file> は <file>/etc/init.d/hotplug</file>
の挙動を制御するために使えます。
<file>/etc/default/rcS</file> ファイルは <prgn>motd</prgn>、
<prgn>sulogin</prgn> などのブート時の標準をカスタマイズするために使えます。
<p>
これらの変数を変更することにより望みの挙動を実現できない場合は、
init スクリプト自身を修正できます。これらは全て設定ファイルです。

<sect1 id="syslogd">システムのログ記録をカスタマイズする
<p>
システムのログモードは <file>/etc/syslog.conf</file> を使って設定可能です。
システムのログファイルに色づけするためのプログラムについては
<package>colorize</package> パッケージをチェックしてください。
又、<manref name="syslogd" section="8"> や 
<manref name="syslog.conf" section="5"> もご覧ください。
</sect1>

<sect1 id="hdtune">ハードウェアの最適化
<p>
&debian; でシステム管理者に管理が任されているハードウェアの最適化設定はあまり
ありません。
<list>
<item><package>hdparm</package>
 <list compact>
<item>ハードディスクアクセスの最適化ツール。非常に効果的。
<item>危険です。まず <manref name="hdparm" section="8"> を読む必要があります。
<item><tt>hdparm -tT <var>/dev/hda</var></tt> によりディスクのアクセス速度
をテストします。
<item><tt>hdparm -q -c3 -d1 -u1 -m16 <var>/dev/hda</var></tt> により
最近の IDE システムではディスク速度を高速化できます。(危険かもしれません。)
 </list>

<item><package>setcd</package>
 <list compact>
<item>コンパクトディスクドライブのアクセスの最適化ツール。
<item><tt>setcd -x <var>2</var></tt> により速度を <var>2</var> 
倍速に落とします。
<item><manref name="setcd" section="1"> をご覧ください。
 </list>

<item><package>setserial</package>
 <list compact>
<item>シリアルポートの管理ツール集。
 </list>

<item><package>scsitools</package>
 <list compact>
<item>SCSI ハードウェアの管理ツール集。
 </list>

<item><package>memtest86</package>
 <list compact>
<item>メモリデバイスの管理ツール集。
 </list>

<item><package>hwtools</package>
 <list compact>
<item>低レベルハードウェア管理ツール集。
  <list compact>
   <item><prgn>irqtune</prgn>: 優先度が高く高速なサービスを要求するデバイス 
   (例: シリアルポートやモデム) にデバイスの IRQ 優先度を変更する。
   シリアルポート/モデムの3倍の高速化が可能。
   <item><prgn>scanport</prgn>: 装着した ISA デバイスを探すために
   0x100 から 0x3ff までの I/O 空間を検索する。
   <item><prgn>inb</prgn>: I/O ポートを読み込み、8進数又はバイナリ形式で 
   値をダンプする小さなクイックハック。
  </list>

 </list>

<item><package>schedutils</package>
 <list compact>
<item>Linux スケジューラユーティリティ。
<item><prgn>taskset</prgn>、 <prgn>irqset</prgn>、 <prgn>lsrt</prgn> と
 <prgn>rt</prgn> が含まれます。
<item>(これには含まれていない) <prgn>nice</prgn> や <prgn>renice</prgn> 
 と組み合わせて、プロセスのスケジューリングパラメータの完全な制御が
 行えます。
 </list>
</list>
<p>
<tt>noatime</tt> オプション付でファイルシステムをマウントすることも
ファイルへの読み込みアクセスが高速化するには非常に効率的です。
<manref name="fstab" section="5"> と <manref name="mount" section="8">
をご覧ください。
<p>
proc ファイルシステムを通じて Linux kernel 自身により直接チューンできる
ハードウェアもあります。<ref id="proc-sys"> をご覧ください。
<p>
Debian には特定のハードウェアに特化した設定ユーティリティが数多く存在します。
これらの多くはノート PC に特定したニーズに対応しています。ここに Debian で
得られるいくつかの興味深いパッケージを挙げます。
<list compact>
<item><package>tpconfig</package> - タッチパッドデバイスの設定プログラム
<item><package>apmd</package> - Advanced Power Management (APM) 用ユーティリティ
<item><package>acpi</package> - ACPI デバイスの情報を表示
<item><package>acpid</package> - ACPI を使うためのユーティリティ
<item><package>lphdisk</package> - Phoenix NoteBIOS 用のハイパネーション
パーティションの準備を行う
<item><package>sleepd</package> - 使わない間ノート PC をスリープさせる
<item><package>noflushd</package> - アイドルになっているハードディスクの回転を止める
<item><package>big-cursor</package> - X 用の大きいマウスカーソル
<item><package>acme</package> - ノート PC にある "マルチメディアボタン" を有効にする
<item><package>tpctl</package> - IBM ThinkPad ハードウェア設定ツール
<item><package>mwavem</package> - Mwave/ACP モデムのサポート
<item><package>toshset</package> - 東芝ノート PC のインターフェースの多くにアクセスする
<item><package>toshutils</package> - 東芝ノート PC 用ユーティリティ
<item><package>sjog</package> - Sony VAIO ノートの "ジョグダイアル" を使うためのプログラム
<item><package>spicctrl</package> - LCD のバックライトの輝度設定用の Sony
VAIO コントローラプログラム
</list>
ここで、ACPI は APM より新しい電源管理システムのフレームワークです。
<p>
これらのパッケージのいくつかは特別な kernel モジュールを要求します。
これらは多くの場合、既に最新の kernel ソースに含まれています。
問題が発生した場合、kernel に最新のパッチを適用する必要があるかもしれません。

<sect>アクセス制限

<sect1 id="loginctrl">PAM を用いたログイン制限
<p>
PAM (Pluggable Authentication Modules) により、ユーザのログイン方法を制御
できます。
<example>
/etc/pam.d/*             # PAM 制御ファイル
/etc/pam.d/login         # login 用の PAM 制御ファイル
/etc/security/*          # PAM モジュールパラメータ
/etc/securetty           # 端末による root でのログインを制御
/etc/login.defs          # login の挙動を制御
</example>
<p>
自分でリスクを負って安全ではないけれどパスワード無しで端末にログインしたい
場合は、<file>/etc/pam.d/login</file> の内容を次のように変えてください。
<example>
#auth       required   pam_unix.so nullok
auth       required   pam_permit.so
</example>
パスワード無しで X コンソールにログインするために同様のトリックを
 <prgn>xdm</prgn>、<prgn>gdm</prgn> などに適用できます。
<p>
一方、良いパスワードポリシーを実施したい場合には、次のように 
<package>cracklib2</package> をインストールして
<file>/etc/pam.d/passwd</file> をセットしてください。
<example>
password required       pam_cracklib.so retry=3 minlen=6 difok=3
</example>
ワンタイムログインパスワードも役に立つかもしれません。
この目的には、<prgn>passwd</prgn> コマンドを <tt>-e</tt> オプション付で
使ってください。<manref name="passwd" section="1"> をご覧ください。
<p>
Bash シェルではプロセスの最大数を <tt>ulimit -u 1000</tt> としてセット
できますし、<file>/etc/security/limits.conf</file> で PAM から設定
することもできます。<tt>core</tt> のような他のパラメータも
同様に設定できます。<prgn>PATH</prgn> の初期値はシェル起動スクリプトの
起動前に <file>/etc/login.defs</file> によりセットできます。
<p>
PAM のドキュメントは <package>libpam-doc</package> パッケージで
パッケージングされています。<em>Linux-PAM システム管理者ガイド</em>
は PAM の設定、必要なモジュールなどについてカバーしています。この
ドキュメントは <em>Linux-PAM アプリケーション開発ガイド</em> と
<em>Linux-PAM モジュール開発者ガイド</em> も含んでいます。
</sect1>

<sect1 id="wheel">"なぜ GNU <prgn>su</prgn> は <tt>wheel</tt> グループを
サポートしていないのか"
<p>
これは Richard M. Stallman による古い <tt>info su</tt> ページの末尾にある
有名なフレーズです。心配ありません。&debian; にある現在の <prgn>su</prgn>
は PAM を使っているので、<prgn>su</prgn> が使える能力を 
<file>/etc/pam.d/su</file> にある <prgn>pam_wheel.so</prgn> を使って
あらゆるグループに対して制限できます。次は &debian; システムの <tt>adm</tt> 
グループを BSD の <tt>wheel</tt> グループと同じようにセットし、
このグループに属するメンバーがパスワード無しで <prgn>su</prgn> 
を使用することを許可します。
<example>
# /etc/pam.d/su において反 RMS 設定を行う
auth       required   pam_wheel.so group=adm

# Wheel メンバーがパスワード無しで suを使えるようにする
auth       sufficient pam_wheel.so trust group=adm
</example>

<sect1>標準で存在するグループの目的
<p>
興味深いグループがいくつか存在します。
<list compact>
<item><tt>root</tt> グループは <prgn>pam_wheel.so</prgn> が <tt>group=</tt>
 引数無しで使用されている場合の標準的な wheel グループです。
<item><tt>adm</tt> グループはログファイルを読むことが可能です。
<item><tt>cdrom</tt> グループは CD-ROM ドライブへのユーザのアクセスを
局所的に許すために使われます。
<item><tt>floppy</tt> グループはフロッピドライブへのユーザのアクセスを
局所的に許すために使われます。
<item><tt>audio</tt> グループはオーディオデバイスへのユーザのアクセスを
局所的に許すために使われます。
<item><tt>src</tt> グループは <file>/usr/src/</file> にあるソースコードを
所有しています。システムのソースコードを管理する能力をユーザに局所的に
与えるために使われます。
<item><tt>staff</tt> メンバは ヘルプデスクやシステム管理者補に対して
<file>/use/local/</file> で作業を行い、<file>/home/</file> に
ディレクトリを作成する能力を与えるのに役立ちます。
</list>
<p>
完全なリストは、Woody では <package>&p-securing-debian-howto;</package>
パッケージでも見つかる 
<url id="&securing-debian-howto;" name="Securing Debian Manual"> の
"FAQ" セクションをご覧ください。
又、新しい <package>&p-base-passwd;</package> (3.4.6 以降) にも信頼できる
リスト: <file>&f-users-and-groups;</file> が含まれます。

<sect1 id="sudo">&ndash; <prgn>sudo</prgn> を使ってより安全に作業をする
<p>
私の <prgn>sudo</prgn> の使いかたはほとんど自分のミスからの防御が目的です。
個人的には、<prgn>sudo</prgn> を使うことは、常に root としてシステムを使う
ことのより良い代替手段と考えます。
<p>
<prgn>sudo</prgn> をインストールして 
<file><url id="&examples;" name="/etc/sudoers"></file> にあるオプションを
設定して有効にします。また、<file>&dochome;sudo/OPTIONS</file> にある
<tt>sudo</tt> グループ機能を調べます。
<p>
設定サンプルは "staff" グループのメンバが <prgn>sudo</prgn> の元で
root としてあらゆるコマンドを起動することと "src" メンバが <prgn>sudo</prgn>
の元で root として選ばれたコマンドを起動することを許可します。
<p>
<prgn>sudo</prgn> の利点は、ユーザの普通のログインパスワードしか必要とせず、
その行動がモニタできるということです。これはシステム管理者補にいくらかの
権限を与える良い方法です。例えば、
<example>
$ sudo chown -R <var>myself</var>:<var>mygrp</var> .
</example>
<p>
もちろん root パスワードを知っている場合、(ほとんどのホームユーザがしているように) ユーザアカウントから root としてコマンドを起動できます。
<example>
$ su -c "shutdown -h now"
Password:
</example>
(管理者アカウントの <prgn>sudo</prgn> 権限を強化すべきだと知っていますが、
これは私のホームサーバなので、まだ困っていません。)
<p>
通常のユーザが root 権限でコマンドを実行することを許可するプログラムが
他にあります。<package>super</package> パッケージをご覧ください。
</sect1>
    
<sect1 id="tcpd">サービスへのアクセスを制限する
<p>
インターネット <em>スーパーサーバ</em> すなわち <prgn>inetd</prgn> は
ブート時に  <file>/etc/init.d/inetd</file> のシンボリックリンクである
<file>/etc/rc2.d/S20inetd</file> (RUNLEVEL=2 の場合) により起動されます。
基本的に、<prgn>inetd</prgn> は一つの起動中のデーモンが複数の他のデーモン
を起動し、システムの負荷を低減することを許可します。
<p>
サービス要求が届いた時には常に
<file>/etc/protocols</file> と <file>/etc/services</file> にあるデータベース
を検索することによりプロトコル並びにサービスが識別されます。
そして <prgn>inetd</prgn> は通常のインターネットサービスを
<file>/etc/inetd.conf</file> データベース、
Sun-RPC ベースのサービスを <file>/etc/rpc.conf</file> にあるデータベースから
捜し出します。
<p>
システムのセキュリティのために、<file>/etc/inetd.conf</file> にある
使用しないサービスを必ず無効化してください。
Sun-RPC サービスは NFS や他の RPC ベースのプログラムが必要とします。
<p>
時々、<prgn>inetd</prgn> は意図したサーバを直接起動しませんが、
<prgn>tcpd</prgn> TCP/IP デーモンラッパプログラムが意図したサーバ名により
<file>/etc/inetd.conf</file> にある引数として起動されます。
<p>
この場合、<prgn>tcpd</prgn> は要求を記録した後に適切なサーバプログラムを
起動し、<file>/etc/hosts.deny</file> と <file>/etc/hosts.allow</file>
を使ったいくつかの付随的な検査を行います。
<p>
最近の &debian; システムで遠隔アクセスに問題が発生した場合、
<file>/etc/hosts.deny</file> に  "ALL: PARANOID" という行が存在する
場合はこれをコメントアウトしてください。
<p>
詳細については
<manref name="inetd" section="8">、
<manref name="inetd.conf" section="5">、
<manref name="protocols" section="5">、
<manref name="services" section="5">、
<manref name="tcpd" section="8">、  
<manref name="hosts_access" section="5">、そして
<manref name="hosts_options" section="5"> をご覧ください。
<p>
Sun-RPC についての詳細は、
<manref name="rpcinfo" section="8">、
<manref name="portmap" section="8">、そして
<file>&f-portmap;</file> をご覧ください。

<sect1 id="ldap">集権的認証 &ndash; LDAP
<p>
Lightweight Directory Access Protocol (LDAP) を使いましょう。
以下を参照してください:
<list compact>
<item><url id="&openldaphome;" name="OpenLDAP">
<item><package>openldap-guide</package> パッケージにある OpenLDAP 管理者ガイド
<item>LDP: <url id="&ldap-linux-howto;" name="LDAP Linux HOWTO">
<item>LDP: <url id="&ldap-implementation-howto;" name="LDAP Implementation HOWTO">
<item><url id="&ldap-use1;" name="OpenLDAP, extensive use reports">
<item><url id="&ldap-use2;" name="Open LDAP with Courier IMAP and Postfix">
</list>
</sect>

<sect id="cdrw">CD ライター
<p>
ATAPI/IDE インターフェースを用いた CD ライターは最近非常にポピュラーな
選択肢になっています。640MB 以下の容量しか必要としないホームユーザ
にとってのシステムバックアップとアーカイブのための素晴らしい媒体です。
CD ライターに関する最も信頼できる情報は、LDP 
<url id="&cd-writing-howto;" name="CD-Writing-HOWTO"> をご覧ください。

<sect1>導入
<p>
まず、CD ライターに送るデータが中断すると CD に回復できない被害が発生します。
できるだけ大きなバッファを CD ライターに与えて下さい。
お金を問わないならば、ATAPI/IDE に拘らず、SCSI を使ってください。
接続する IDE インターフェースを選択する場合、ISA バス上 (SB16 カード
など) にあるものよりも PCI バス上 (マザーボードにあるものなど) にあるものを
使ってください。
<p>
CD ライターが IDE に接続されていると、Linux 2.2 kernel と 2.4 kernel では
通常の IDE CD ドライバの代わりに IDE-SCSI ドライバが働きます。
又、IDE-SCCI ドライバを有効にするには SCSI generic ドライバが必要となります。
最新のディストリビューション (2001年3月現在)により配布されている kernel 
の使用を仮定すると、CD を焼くためには二つの可能なアプローチが存在します。
</sect1>

<sect1>アプローチ 1: モジュール + <prgn>lilo</prgn>
<p>
Debian パッケージの kernel を使っている場合は、<file>/etc/lilo.conf</file>
に次の行を追加してください。複数のオプションを使う場合、スペースでそれらを
区切ってください。
<example>
append="hd<var>x</var>=ide-scsi ignore=hd<var>x</var>"
</example>
ここで CD ライターの場所は、ide-scsi ドライバを通してアクセスする場合は
<tt>hd<var>x</var></tt> により示されます。ここで <var>x</var> は
次のいずれかを表します。
<example>
hda          プライマリ IDE ポートのマスター
hdb          プライマリ IDE ポートのスレーブ
hdc          セカンダリ IDE ポートのマスター
hdd          セカンダリ IDE ポートのスレーブ
hde から hdh  外部 IDE ポート又は ATA66/100 IDE ポートに接続されたドライブ
</example>
root で次のコマンドをタイプすることにより全設定を有効化します。
<example>
# lilo
# shutdown -h now
</example>
</sect1>


<sect1>アプローチ 2: kernel 再構築
<p>
Debian は kernel を作るために <prgn>make-kpkg</prgn> を用います。
複数の kernel イメージを構築するため、<prgn>make-kpkg</prgn> の
新しい <tt>--append_to_version</tt> オプションを用います。
<ref id="kernel"> をご覧ください。
<p>
<tt>make menuconfig</tt> を通じて次のセットアップを使用してください。
<list>
<item>bzImage
<item>IDE CD ドライバを除く (必須ではないがシンプルになります)
<item>ide-scsi と sg を組み込むかモジュールとしてコンパイルする
</list>
</sect1>

<sect1>設定後のステップ
<p>
次を実行することによりブート中に kernel の CD ライターのサポートを有効に
できます。
<example>
# echo ide-scsi &gt;&gt;/etc/modules
# echo sg       &gt;&gt;/etc/modules
# cd /dev; ln -sf scd0 cdrom
</example>
手動により CD ライターを有効にするには次を実行します。
<example>
# modprobe ide-scsi
# modprobe sg
</example>
リブート後、このように CD ライターのインストールをチェックできます。
<example>
$ dmesg|less
# apt-get install cdrecord
# cdrecord -scanbus
</example>
<p>
[Warren Dodge による] 
CD-ROM と CD-R/RW がシステムに同時に存在する場合、時々 <tt>ide-scsi</tt> と
<tt>ide-cd</tt> の間で衝突が発生することがありえます。
<file>/etc/modutils/aliaese</file> に次の行を追加して、
<prgn>update-modules</prgn> を起動してからリブートしてみてください。
<example>
pre-install      ide-scsi      modprobe ide-cd
</example>
この設定は IDE ドライバを <tt>ide-scsi</tt> の前にロードさせます。
IDE ドライバ <tt>ide-cd</tt> は ATAPI CD-ROM を制御します。 &mdash; 
anything that it hasn't been told to <strong>ignore</strong>.
これは <tt>ide-scsi</tt> が制御するデバイスを無視するだけです。
</sect1>

<sect1>CD イメージファイル (ブータブル)
<p>
<file>target-directory/</file> にあるファイルの CD イメージを
<file>cd-image.raw</file> 
として作成するには、フロッピドライブにブートフロッピを挿入して次を
実行します。
(ブータブルな Joilet TRANS.TBL が有効化されたフォーマット。
ブート不能な場合は、<tt>-b</tt> と <tt>-c</tt> オプションを取る)
<example>
# dd if=<var>/dev/fd0</var> <var>target-directory/boot.img</var> 
# mkisofs -r -V <var>volume_id</var> -b <var>boot.img</var> -c <var>bootcatalog</var> -J -T \
        -o <var>cd-image.raw</var> <var>target_directory/</var>
</example>
<p>
ブータブル DOS CD-ROM を作るのは面白いハックです。通常の DOS ブートフロッピ
ディスクイメージは <file><var>boot.img</var></file> にあり、CD-ROM
は DOS フロッピが A ドライブにあるかのようにブートします。これを
freeDOS を使って行うとより面白いかもしれません。
<p>
この CD イメージはループバックデバイスによりマウントして検査できます。
<example>
# mount -t iso9660 -o ro,loop <var>cd-image.raw</var> /cdrom
# cd /cdrom
# mc
# umount /cdrom
</example>
</sect1>

<sect1>CD ライター (R,RW) に書き込む
<p>
まず次のようにテストを行います。 (倍速と仮定)
<example>
# nice --10 cdrecord -dummy speed=2 dev=0,0 <var>disk.img</var>
</example>
結果が OK ならば、CD-R に次のように書き込みます。
<example>
# nice --10 cdrecord -v -eject speed=2 dev=0,0 <var>disk.img</var>
</example>
又は CD-RW ディスクに次のように書き込みます。
<example>
# nice --10 cdrecord -v -eject blank=fast speed=2 dev=0,0 <var>disk.img</var>
</example>
次のようにした方が良い CD-RW ドライブもあります。
<example>
# nice --10 cdrecord -v blank=all speed=2 dev=0,0 <var>disk.img</var>
</example>
に続いて
<example>
# nice --10 cdrecord -v -eject speed=2 dev=0,0 <var>disk.img</var>
</example>
を実行します。
この2ステップは消去作業中に、書き込み作業を妨害するのを防ぐために
必要となります。<prgn>nice</prgn> の引数は幾らか調整が必要となる
かもしれません。
</sect1>

<sect1>CD イメージファイルの作成
<p>
ある CD-R や商用 CD は <prgn>dd</prgn> によるコピーができなくなるように
終わりに壊れたセクタを持っています。(Windows 98 CD はこの一つです)
<package>cdrecord</package> パッケージには <prgn>readcd</prgn>
コマンドが付随しています。このコマンドを使うと CD の内容をコピーして
イメージファイルを作成できます。データディスクの場合、マウントして
<prgn>df</prgn> を実行することにより実際のサイズがわかります。
そのブロック数を2で割って実際の CD セクター数がわかります。
(1セクタ = 2048 byte)
そして <prgn>readcd</prgn> を次に示すオプション付きで実行し、
作成されたディスクイメージを使って CD-R/RW に書き込めます。
<example>
# readcd dev=<var>target</var>,<var>lun</var>,<var>scsibusno</var> # 機能 11 を選択
</example> 
ここで、ほとんどの場合はこれら三つのパラメータは全て 0 にセットします。
通常 <prgn>readcd</prgn> により与えられるセクタ数は過大です!
実際にマウントして得られる数を使う方がより良い結果をもたらします。
<p>
<prgn>dd</prgn> を CD に対して使うといくつか問題が発生することを
言及すべきです。<prgn>dd</prgn> コマンドを最初に実行すると、
エラーが発生し、末尾が失われた短いディスクイメージができるかもしれません。
次に <prgn>dd</prgn> コマンドを実行すると、ディスクサイズが指定されていない
場合、後ろにごみデータが付随した大きなディスクイメージができるかもしれない
システムがあるかもしれません。引数として正しいディスクサイズを与えて 
<prgn>dd</prgn> コマンドを2回実行し、エラーメッセージの後に CD 
をイジェクトしなければこれらの問題を避けられるようです。
例えば、<prgn>df</prgn> により表示されるイメージサイズが 
<tt>46301184</tt> であった場合、次のコマンドを二回実行すると
正しいイメージを得られます。(これは経験的な情報です)
<example>
# dd if=/dev/cdrom of=cd.img bs=2048 count=$((46301184/2))
</example>
</sect1>

<sect1>Debian CD イメージ
<p>
&debian; CD の最新情報を得るには、
<url id="&debian-cd;" name="Debian CD site"> を訪れてください。
<p>
高速なインターネット接続を持っている場合は、次を用いてネットワーク越しに
インストールすることを考えてみてください。
<list compact>
<item>数枚の <url id="&debian-floppyinst;" name="floppy images"> 又は
<item> <url id="&debian-netinst;" name="minimal bootable CD image">.
</list>
<p>
高速なインターネット接続を持っていない場合は、
<url id="&debian-venders;" name="CD vendor"> から CD を購入することを
考慮してください。
<p>
CD イメージのテスタで無い限り、(たとえ新しい jigdo を使ったとしても)
標準の CD イメージをダウンロードしてバンド幅を無駄に消費しないでください。
<p>
言及すべき CD イメージは
<url id="&knoppix;"  name="KNOPPIX - Live Linux Filesystem On CD"> です。
この CD はハードディスクにインストールせずに機能する &debian; システムを
ブートします。

<!-- old document section
$ export CVSROOT=anonymous@cvs.debian.org:/cvs/debian-boot
$ cvs co debian-cd
</example>
次は CD イメージ作成のためのサマリです。
<example>
# apt-get install debian-cd
# cd /etc/debian-cd
# vim CONF.sh
$ . CONF.sh
$ make distclean
$ make status
$ make list COMPLETE=1 SIZELIMIT1=555000000 SRCSIZELIMIT=665000000
$ make official_images
 又はバイナリイメージしか欲しくない場合は、次を実行します。
$ make bin-official_images
-->
</sect1>

<sect1>システムを CD-R にバックアップ
<p>
主要な設定ファイルとデータファイルを CD-R にコピーするには、
<file><url id="examples/" name="backup"></file> にあるサンプルバックアップ
スクリプトを使います。又、<ref id="archiving"> と <ref id="diff-backup"> 
もご覧下さい。
</sect1>

<sect1>音楽 CD を CD-R にコピーする
<p>
テストしていません。
<example>
# apt-get install cdrecord cdparanoia
# cdparanoia -s -B
# cdrecord dev=0,0,0 speed=2 -v -dao -eject defpregap=1 -audio *.wav
</example>
又は
<example>
# apt-get install cdrdao #disk at once
# cdrdao read-cd --device /dev/cdrom --paranoia-mode 3 my_cd # CD を読み込む
# cdrdao write --device /dev/cdrom --speed 8 my_cd    # 新しい CD を書き込む
</example>
<prgn>cdrdao</prgn> は (ギャップなどが無い) 真のコピーを作ります。
</sect1>
</sect>

<sect id="x">X
<p>
W Window System は <url id="&xfree86home;" name="XFree86"> により
供給されています。&debian; システムでは二つのメジャーバージョンの X サーバ、
すなわち XFree86 Version 3.3 (XF3) と XFree86 Version 4.x シリーズ (XF4)
が得られますが、どちらも <url id="&xorghome;" name="X.Org"> による X11R6
規格に基づいています。
<p>
X の基礎は、<manref name="X" section="7">、LDP 
<url id="&xwindowuser-howto;" name="XWindow-User-HOWTO"> や
<url id="&remote-xapps-howto;" name="Remote X Apps mini-HOWTO">
を参照してください。&debian; 特有のユーザガイドは、
<package>xfree86-common</package> パッケージにより供給される
<file>&f-x-deb-faq;</file> をご覧下さい。
これには Branded Robinson による興味深く信頼が置けるキーバインディング
問題の報告が含まれます。
<p>
<taglist>
<tag><ref id="xsrvr">
<item>ユーザのモニタ (CDT,液晶) に X window やデスクトップを
表示し、キーボードやマウスの入力を受け付けるローカルホストでのプログラム。
<tag><ref id="xclnt">
<item>X 互換なアプリケーションソフトを起動する (ローカル又はリモートでの)
プログラム
</taglist>
これは他の文脈での通常の "サーバ" と "クライアント" の逆の使いかたです。
<p>
"X クライアント" (アプリケーション側) から "X サーバ" (ディスプレイ側)
がリモート接続を得るための複数の方法があります。

<list>
<item><prgn>xhost</prgn> 
<list compact>
<item>ホストリストを用いた方法 (非常に危険)
<item>暗号化されていないプロトコル (盗聴されやすい)
<item>できるならば使わないでください。
<item><ref id="xhost"> と <manref name="xhost" section="1x"> 参照。
</list>
<item><strong><prgn>xauth</prgn></strong> 
<list compact>
<item>MIT magic cookie を使った方法 (安全ではないが <prgn>xhost</prgn> 
よりは良い)
<item>暗号化されていないプロトコル (盗聴されやすい)
<item><prgn>ssh -X</prgn> よりは CPU 負荷が少ないのでローカル接続に限り
使ってください。
<item><ref id="ss-xsu"> と <manref name="xauth" section="1x"> 参照。
</list>
<item><prgn>xdm</prgn>、 <prgn>wdm</prgn>、 <prgn>gdm</prgn>、
 <prgn>kdm</prgn> などの方法
<list compact>
<item>MIT magic cookie を用いた方法 (<prgn>xauth</prgn> と同様に安全では無い)
<item>X ディスプレイアクセス制御については <manref name="xdm" section="1x"> と
 <manref name="Xsecurity" section="7"> を参照。
<item>インストールしている場合、詳細は <manref name="wdm" section="1x">、
<manref name="gdm" section="8"> と <manref name="kdm.options" section="5">
を参照。
<item><prgn>xdm</prgn> パッケージをパージせずにブート時に Linux コンソール
を得るために <prgn>xdm</prgn> を無効にする方法は <ref id="sys-v"> を参照。
</list>
<item><strong><prgn>ssh -X</prgn></strong> 
<list compact>
<item>安全なシェル (<strong>ssh</strong>) によるポートフォワードを用いる
方法
<item>暗号化されたプロトコル (ローカル接続の場合リソースの無駄)
<item>リモート接続の場合はこれを使ってください。
<item><ref id="xssh"> 参照。
</list>
</list>
<prgn>ssh</prgn> を除いて、全てのリモート接続は X サーバ上で可能な
TCP/IP 接続を要求します。<ref id="xtcp"> をご覧下さい。

<sect1 id="x-system">X パッケージ
<p>
Woody に X システムをインストールするのを簡単にするためにいくつかの
(メタ)パッケージが供給されています。
<taglist>
<tag><package>x-window-system-core</package>
<item>
このメタパッケージは X Window System を起動するスタンドアロンの
ワークステーションに不可欠な構成要素を供給します。X ライブラリ、
X サーバ (<package>xserver-xfree86</package>)、フォント群、そして
基本的な X クライアントおよびユーティリティ群を供給します。

<tag><package>x-window-system</package> 
<item>
このメタパッケージは XFree86 プロジェクトにより開発されている
X Window System としての実質上全ての構成要素を供給するだけでなく、
歴史的に有名なアクセサリプログラムのセットを供給します。
(とりわけ、<package>x-window-system-core</package>、 <package>twm</package>、
そして <package>xdm</package> などに依存します。これをインストールする場合
<package>x-window-system-core</package> をインストールする必要はありません。)

<tag><package>xserver-common-v3</package> 
<item>
XFree86 3.x X サーバ (XF3) に共通のファイルやユーティリティです。

<tag><package>xserver-*</package> 
<item>
何らかの理由で新しい XF4 サーバ (<package>xserver-xfree86</package>)
によりサポートされていないハードウェアをサポートするための補助的な
XF3 サーバパッケージです。いくつかの古い ATI mach64 カードは XF4
でサポートされていませんし、他のカードも Woody でのバージョンの XF4
ではひどくハングします。(取得可能なパッケージは、
<tt>apt-cache search xserver-|less</tt> により判明します。
これら XF3 サーバの全ては <package>xserver-common-v3</package> に
依存します。)
</taglist>
<p>
ほとんどの場合、<package>x-window-system</package> パッケージをインストール
すべきです。(コンソールでログインしたい場合は、<ref id="no-x-start">
で言及されているように <package>xdm</package> を無効にすることを忘れないで
ください。)

<sect1 id="hdetect-x">X 用のハードウェア検出
<p>
X の設定段階でハードウェアの検出を有効にするには、
X システムをインストールする前に次のパッケージをインストールしてください。
<list>
<item><package>discover</package> &ndash; ハードウェア認識システム。
<item><package>mdetect</package> &ndash; マウスデバイス自動検知ツール。
<item><package>read-edid</package> &ndash; VESA PnP モニタ用のハードウェア
情報収集ツール。
</list>

<sect1 id="xsrvr">X サーバ
<p>
X サーバに関する情報は <manref name="XFree86" section="1x"> をご覧下さい。
<p>
ローカルの端末から X サーバを起動するには、次を実行します。
<example>
$ startx -- :&lt;display&gt; <var>vtXX</var>
例えば、
$ startx -- :1 vt8 -bpp 16
... vt8 で 16bpp モードを用いて X サーバを起動し、localhost:1 に接続
</example>
<tt>--</tt> の後に与えられた引数は X サーバのためのものです。
<p>
X サーバ起動スクリプトをカスタマイズするために  <file>~/.xserverrc</file>
スクリプトを使用している場合、本当の X サーバを必ず <tt>exec</tt> してください。こうしないと X サーバの起動が遅くなり、exit することに注意してください。
例えば、
<example>
#!/bin/sh
exec /usr/bin/X11/X -dpi 100 -nolisten tcp
</example>

<sect2 id="config-x4">X サーバの設定 (version 4)
<p>
XF4 サーバの(再)設定を行うには、
<example>
# dpkg-reconfigure --priority=low xserver-common
# dpkg-reconfigure --priority=low xserver-xfree86
</example>
を実行して <file>/etc/X11/XF86Config-4</file> ファイルを生成し、
<prgn>dexconf</prgn> スクリプトを用いて X の設定を行います。

<sect2 id="config-x3">X サーバの設定 (version 3)
<p>
XF3 サーバの(再)設定を行うには、例えば、ATI mach64 の場合、
<example>
# dpkg-reconfigure --priority=low xserver-common-v3
# dpkg-reconfigure --priority=low xserver-mach64
</example>
を実行して <file>/etc/X11/XF86Config</file> ファイルを生成し、
<prgn>xf86config-v3</prgn> スクリプトを用いて X の設定を行います。

<sect2 id="manual-config-x">X サーバを手動で設定する
<p>
Woody の場合、<file>/etc/X11/XF86Config-4</file> ファイルにユーザの
カスタマイズを追加します。
<strong>設定ファイル中の次の行を決して編集しないでください。</strong>
<!-- FIXME for XF3 -->
<example>
### BEGIN DEBCONF SECTION
[snip]
### END DEBCONF SECTION
</example>
<p>
その代わり、<strong>テキストの前にカスタマイズを追加してください。</strong>
例えば、ビデオデバイスをカスタマイズするには、ファイルの <em>先頭</em>
に次のテキストに似た行を追加してください。
<example>
Section "Device"
  Identifier        "Custom Device"
  Driver            "ati"
  Option            "NoAccel"
EndSection

Section "Screen"
  Identifier  "Custom Screen"
  Device      "Custom Device"
  Monitor     "Generic Monitor"
  DefaultDepth 24
  Subsection "Display"
    Depth       8
    Modes       "1280x960" "1152x864" "1024x768" "800x600" "640x480"
  EndSubsection
  Subsection "Display"
    Depth       16
    Modes       "1280x960" "1152x864" "1024x768" "800x600" "640x480"
  EndSubsection
  Subsection "Display"
    Depth       24
    Modes       "1280x960" "1152x864" "1024x768" "800x600" "640x480"
  EndSubsection
EndSection

Section "ServerLayout"
    Identifier        "Custom"
    Screen            "Custom Screen"
    InputDevice       "Generic Keyboard" "CoreKeyboard"
    InputDevice       "Configured Mouse" "CorePointer"
EndSection
</example>
<p>
Sarge (この文書の作成時は <tt>testing</tt>) の場合、
アップグレードを通じてカスタマイズした設定を <file>/etc/X11/XF86Config</file> 
保ちたい場合、次のコマンドを root として実行してください。
<example>
# cp /etc/X11/XF86Config-4 /etc/X11/XF86Config-4.custom
# md5sum /etc/X11/XF86Config-4 &gt; /var/lib/xfree86/XF86Config-4.md5sum
# dpkg-reconfigure xserver-xfree86
</example> 
<strong>フォントのアンチエイリアス</strong> を行うには、
<ref id="xfs-tt"> に記述されているように <file>/etc/X11/XF86Config-4</file>
を編集する必要があります。
<!--
<p>
For XF3, in order to achieve <strong>font de-uglification</strong>, 
you need to edit the order of <tt>FontPath</tt> in
<file>/etc/X11/XF86Config</file> 
while adding <tt>:unscaled</tt> as follows.
<example>
FontPath        "/usr/X11R6/lib/X11/fonts/misc:unscaled"
FontPath        "/usr/X11R6/lib/X11/fonts/100dpi:unscaled"
FontPath        "/usr/X11R6/lib/X11/fonts/75dpi:unscaled"
FontPath        "/usr/X11R6/lib/X11/fonts/Type1"
FontPath        "/usr/X11R6/lib/X11/fonts/Speedo"
FontPath        "/usr/X11R6/lib/X11/fonts/misc"
FontPath        "/usr/X11R6/lib/X11/fonts/100dpi"
FontPath        "/usr/X11R6/lib/X11/fonts/75dpi"
</example>
<p>
If you use xfs serves fonts via a Unix Domain Socket, you may also edit
<tt>catalogue</tt> entry of <file>/etc/X11/fs/config</file> as:
<example>
catalogue = /usr/X11R6/lib/X11/fonts/misc:unscaled,
            /usr/X11R6/lib/X11/fonts/100dpi:unscaled,
            /usr/X11R6/lib/X11/fonts/75dpi:unscaled,
            /usr/X11R6/lib/X11/fonts/Type1,
            /usr/X11R6/lib/X11/fonts/Speedo,
            /usr/X11R6/lib/X11/fonts/misc,
            /usr/X11R6/lib/X11/fonts/100dpi,
            /usr/X11R6/lib/X11/fonts/75dpi,
</example>
<p>
These <tt>:unscaled</tt> tricks are depreciated in new XF4 and no longer
needed.
-->
<!-- per /usr/share/doc/xfree86-common/README.fonts.gz in 4.2.1 -->
<p>
X の設定ファイルの他の部分もチェックしてみてください。ひどいモニタ設定
はひどいフォントよりも頭痛をもたらします。ですのでリフレッシュレートが
使っているモニタが発揮できるレートと同じ位高いことを確認してください。
(85 Hz なら素晴らしい、75 Hz なら大丈夫、60Hz だと苦痛です。)

<sect1 id="xclnt">X クライアント
<p>
X クライアントプログラムのほとんどは次のようなコマンドで起動されます。
<example>
client $ xterm -geometry 80x24+30+200 -fn 6x10 -display <var>hostname</var>:0 &amp;
</example>
ここで、任意のコマンドライン引数は次を意味します。
<list>
<item><tt>-geometry <var>WIDTH</var>x<var>HEIGHT</var>+<var>XOFF</var>+<var>YOFF</var></tt>: 
起動時のウィンドウのサイズと位置

<item><tt>-fn <var>FONTNAME</var></tt>: テキスト表示用のフォント
 <tt><var>FONTNAME</var></tt> can be:
<list compact>
<item>a14: 通常サイズのフォント
<item>a24: 大きなサイズのフォント
<item>など (<tt>xlsfont</tt> でフォントが使えるかをチェックしてください。)
</list>
<item><tt>-display <var>displayname</var></tt>: 使用する X サーバ名
 <tt><var>displayname</var></tt> は次のようになります。
<list compact>
<item><tt><var>hostname</var>:<var>D.S</var></tt> 
はホスト <tt><var>hostname</var></tt> のディスプレイ <var>D</var> 上の
<tt><var>S</var></tt> スクリーンを意味します。このディスプレイ用の
X サーバは UNIX domain socket <file>/tmp/.X11-unix/XD</file> を listen
しています。(それゆえ <tt><var>host</var></tt> からしか読めません)

<item><tt><var>:D.S</var></tt> は <tt><var>host</var>/unix:<var>D.S</var></tt>
と等価です。ここで <tt><var>host</var></tt> はローカルのホスト名です。
</list>
</list>
<p>
X クライアントプログラム (アプリケーション側) 用の標準の 
<tt><var>displayname</var></tt> は DISPLAY 環境変数によりセットできます。
例えば、環境変数を設定するために X クライアントプログラムより先に
次のコマンドのうちひとつを実行します。
<example>
$ export DISPLAY=:0 
        # 標準、ローカルマシンの第一スクリーン
$ export DISPLAY=<var>hostname.fulldomain.name</var>:0.2
$ export DISPLAY=localhost:0
</example>
この設定は <file>~/.xinitrc</file> によりカスタマイズできます。例えば、
<example>
xrdb -load $HOME/.Xresources
xsetroot -solid gray &amp;
xclock -g 50x50-0+0 -bw 0 &amp;
xload -g 50x50-50+0 -bw 0 &amp;
xterm -g 80x24+0+0 &amp;
xterm -g 80x24+0-0 &amp;
twm
</example>
<ref id="custom-x"> に記述したように、この設定は <prgn>startx</prgn>
から実行されたとき、<prgn>Xsession</prgn> の通常の実行結果を全て上書きします。
その代わり、<file>~/.xsession</file> を苦肉の策としてのみ使ってください。
<manref name="xsetroot" section="1x">、
<manref name="xset" section="1x"> と <ref id="xresources"> をご覧下さい。
</sect1>

<sect1 id="x-session">X セッション
<p>
X セッション (X サーバ + X クライアント) は次のように起動できます。
<list compact>
<item><prgn>startx</prgn>: Linux 文字端末から X サーバと X クライアントを
起動するための <prgn>xinit</prgn> のラッパースクリプトコマンド。
<file>~/.xinitrc</file> が存在しない場合、<file>/etc/X11/Xsession</file>
が <file>/etc/X11/xinit/xinitrc</file> を通じて実行される。
<item><prgn>xdm</prgn>、 <prgn>gdm</prgn>、 <prgn>kdm</prgn> や
      <prgn>wdm</prgn>: X サーバと X クライアントを起動し、GUI スクリーン
経由でログインを制御するためのX ディスプレイマネージャデーモン。
<file>/etc/X11/Xsession</file> が直接実行される。
</list>
コンソールは <ref id="no-x-start"> に記述されている方法で取得できます。

<sect2 id="custom-x">X セッションのカスタマイズ
<p>
標準の起動スクリプト <file>/etc/X11/Xsession</file> は
<file>/etc/X11/Xsession.d/50xfree86-common_determine-startup</file> と
<file>/etc/X11/Xsession.d/99xfree86-common_start</file> が組み合わさったもの
です。
<p>
<file>/etc/X11/Xsession</file> の実行は
<file>/etc/X11/Xsession.options</file> にいくらか影響を受け、本質的には
次の順序で最初に見付かったプログラムを <prgn>exec</prgn> コマンドで
実行することになります。
<enumlist compact>
<item>定義されている場合、 <file>~/.xsession</file> か <file>~/.Xsession</file>
<item>定義されている場合、 <file>/usr/bin/x-session-manager</file>
<item>定義されている場合、<file>/usr/bin/x-window-manager</file>
<item>定義されている場合、<file>/usr/bin/x-terminal-emulator</file>
</enumlist>
<p>
これらのコマンドの正確な意味は <ref id="alternatives"> に記述されている
&debian; alternative システムにより定義されています。
例えば、
<example>
# update-alternatives --config x-session-manager
又は
# update-alternatives --config x-window-manager
</example>
GNOME や KDE のセッションマネージャをインストールしたまま他の
X ウィンドウマネージャを標準にするには、
<file>/etc/X11/Xsession.d/50xfree86-common_determine-startup</file>
を <url id="&bug-xfree;"> の2番目のバグレポートに添付されているもの
に置き換え (これがすぐに含まれればいいのですが)、
X セッションマネージャを禁じるために次のように
<file>/etc/X11/Xsession.options</file> を編集します。
<example>
# /etc/X11/Xsession.options
#
# configuration options for /etc/X11/Xsession
# See Xsession.options(5) for an explanation of the available options.
# Default enabled
allow-failsafe
allow-user-resources
allow-user-xsession
use-ssh-agent
# Default disabled (enable them by uncommenting)
do-not-use-x-session-manager
#do-not-use-x-window-manager
</example>
<p>
上で述べた修正をシステムに行わないと、<package>gnome-session</package> 
と <package>kdebase</package> はこれらの X セッションマネージャを含む
パッケージとなります。これらを削除すると X ウィンドウマネージャが標準
になります。(Yack, any better idea?)
<p>
<file>/etc/X11/Xsession.options</file> に 
<tt>allow-user-xsession</tt> という行が有効になっている場合、
<file>~/.xsession</file> や <file>~/.Xsession</file> を定義したユーザは
<file>/etc/X11/Xsession</file> のアクションをカスタマイズできます。
<p>
お好みの X ウィンドウ/セッションマネージャを起動するために、
<file>~/.xsession</file> ファイルの最後のコマンドは
<tt>exec <var>some-window/session-manager</var></tt> の形にすべきです。
<p>
<file>~/.xsession</file> スクリプトの良い例は <file>&f-xsession;</file>
に置いておきます。
<p>
私はこれをウィンドウマネージャ、スクリーンへのアクセス、ユーザアカウント毎の
言語サポートの設定のために使っています。
<ref id="s-w-manager">、 <ref id="ss-xsu">、そして <ref id="x-cjk">
をご覧下さい。
<p>
複数の X クライアントプログラムを同時に起動したい場合、
<ref id="xclnt"> の例を見て、それらを <file>~/.xinitrc</file> ではなく
<file>~/.xsession</file> から起動してください。
<p>
ユーザが指定する追加的な X リソースは <file>~/.Xresources</file> に
保存できます。<ref id="xresources"> をご覧下さい。
<p>
X においてユーザがカスタマイズしたキーマップとポインタデバイスのマッピングも
ユーザの起動スクリプトで指定できます。<ref id="xmodmap"> をご覧下さい。

<sect2 id="s-w-manager">ユーザ用に X セッションを開始する
<p>
<ref id="custom-x"> に記述されている原則に従い、ユーザ指定の X 
セッション/ウィンドウマネージャは、指示されたパッケージをインストールし、
次のように <file>~/.xsession</file> の最後に設定することにより有効化
できます。
(私はシンプルなスタイルと高速性から <package>blackbox</package>/
<package>fluxbox</package> が好きです。)

<list>
<item>標準の X セッションマネージャ
<list compact>
<item><ref id="alternatives"> 参照
<item><tt>exec /usr/bin/x-session-manager</tt>
</list>
<item>標準の X ウィンドウマネージャ
<list compact>
<item><ref id="alternatives"> 参照
<item><tt>exec /usr/bin/x-window-manager</tt>
</list>

<item>GNOME セッションマネージャ (重い)
<list compact>
<item>インストールするパッケージ: <package>gnome-session</package>
<item><tt>exec /usr/bin/gnome-session</tt>
</list>

<item>KDE セッションマネージャ (重い)
<list compact>
<item>インストールするパッケージ: <package>kdebase</package> (又は
KDE3 の場合 <package>kdebase3</package>)
<item><tt>exec /usr/bin/kde2</tt>
</list>

<item>Blackbox ウィンドウマネージャ (軽量でしなやか)
<list compact>
<item>インストールするパッケージ: <package>blackbox</package>
<item><tt>exec /usr/bin/blackbox</tt>
</list>

<item>Fluxbox ウィンドウマネージャ (軽量、新しい blackbox)
<list compact>
<item>インストールするパッケージ: <package>fluxbox</package>
<item><tt>exec /usr/bin/fluxbox</tt>
</list>

<item>Xfce ウィンドウマネージャ (Mac OS-X や SUN CDE ライク)
<list compact>
<item>インストールするパッケージ: <package>xfce</package>
<item><tt>exec /usr/bin/xfwm</tt>
</list>

<item>IceWM ウィンドウマネージャ (軽量、GNOME の代替品)
<list compact>
<item>インストールするパッケージ: <package>icewm</package>
<item><tt>exec /usr/bin/X11/icewm</tt>
</list>

<item>FVWM2 仮想ウィンドウマネージャ (軽量、Win95 ライク)
<list compact>
<item>インストールするパッケージ: <package>fvwm</package>
<item><tt>exec /usr/bin/fvwm2</tt>
</list>

<item>Windowmaker ウィンドウマネージャ (幾らか NexT ライク)
<list compact>
<item>インストールするパッケージ: <package>wmaker</package>
<item><tt>exec /usr/bin/wmaker</tt>
</list>

<item>Enlightenment ウィンドウマネージャ (重い)
<list compact>
<item>インストールするパッケージ: <package>enlightenment</package>
<item><tt>exec /usr/bin/enlightenment</tt>
</list>

</list>
<url id="&windomanagerhome;" name="Window Managers for X"> をご覧下さい。


<sect2 id="kde-gnome">KDE と GNOME の設定
<p>
KDE 又は GNOME 環境を完全に設定するためには、次のメタパッケージが
役立ちます。
<list compact>
<item>KDE: <package>kde</package> パッケージをインストール
<item>GNOME: <package>gnome</package> パッケージをインストール
</list>
これらのパッケージを <tt>recommends</tt> を操作できる <prgn>dselect</prgn>
や <prgn>aptitude</prgn> のようなツールでインストールすると、
ただ <prgn>apt-get</prgn> でインストールするよりも適切な
ソフトウェアの選択を行えます。
<p>
端末からログインをしたい場合、<package>kdm</package>、
<package>gdm</package> のようなX ディスプレイマネージャを必ず無効に
してください。これらは <ref id="no-x-start"> に記述されているように、
メタパッケージといっしょに依存性に従いインストールされるかもしれません。
<p>
KDE ではなく、GNOME をシステムの標準にしたい場合、
<ref id="alternatives"> にあるように <prgn>x-session-manager</prgn> の
設定を必ず行ってください。

<sect1 id="xtcp">Using X over TCP/IP
<p>
Because a remote TCP/IP socket connection without encryption is prone 
to an eavesdropping attack, the default setting for X in recent 
&debian; versions disables the TCP/IP socket.  Consider using <prgn>ssh</prgn> 
for a remote X connection (see <ref id="xssh">). 
<p>
The method described here is not encouraged unless one is in a very secure 
environment behind a good firewall system with only trusted users present.
Use the following command to verify your current X server setting for the
TCP/IP socket:
<example>
# find /etc/X11 -type f -print0 | xargs -0 grep nolisten
/etc/X11/xinit/xserverrc:exec /usr/bin/X11/X -dpi 100 -nolisten tcp
</example>
Remove <tt>-nolisten</tt> to restore TCP/IP listening on the X server.
</sect1>
 
<sect1 id="xhost">Connecting to a remote X server &ndash; <prgn>xhost</prgn>
<p>
<prgn>xhost</prgn> allows access based on hostnames. This is very insecure.
The following will disable host checking and allow connections from anywhere 
if a TCP/IP socket connection is allowed (see <ref id="xtcp">):
<example>
$ xhost +
</example>
You can re-enable host checking with:
<example>
$ xhost -
</example>
<p>
<prgn>xhost</prgn> does not distinguish between different users on the 
remote host. Also, hostnames (addresses actually) can be spoofed. 
<p>
This method must be avoided even with more restrictive host criteria
if you're on an untrusted network (for instance with dial-up PPP
access to the Internet).  See <manref name="xhost" section="1x">.
</sect1>

<sect1 id="xssh">Connecting to a remote X server &ndash; <prgn>ssh</prgn>
<p>
The use of <prgn>ssh</prgn> enables a secure connection from a local X server 
to a remote application server.  
<list>
<item>Set <tt>X11Forwarding</tt> and <tt>AllowTcpForwarding</tt> entries 
to <tt>yes</tt> in <file>/etc/ssh/sshd_config</file> of the remote host,
if you want to avoid corresponding command-line options.
<item>Start the X server on the local host.
<item>Open an <prgn>xterm</prgn> in the local host.
<item>Run <prgn>ssh</prgn> to establish a connection with the remote site.  
<example>
localname @ localhost $ ssh -q -X -l loginname remotehost.domain
Password:
.....
</example>
<item>Run X application commands on the remote site.
<example>
loginname @ remotehost $ gimp &
</example>
</list>
This method allows the display of the remote X client output as if it 
were locally connected through a local UNIX domain socket.
</sect1>

<sect1 id="xtermfaq">The X terminal emulator &ndash; <prgn>xterm</prgn>
<p>
Learn everything about <prgn>xterm</prgn> at <url id="&xtermfaq;">.
</sect1>

<sect1 id="xresources">X resources
<p>
Many older X programs, such as <prgn>xterm</prgn>, use the X resource database
to configure their appearance.  The file <file>~/.Xresources</file> is used
to store user resource specifications.  This file is automatically
merged into the default X resources upon login. The system-wide defaults of 
X resources are stored in <file>/etc/X11/Xresources/*</file> and application 
defaults of them are stored in <file>/etc/X11/app-defaults/*</file>.  Use
these settings as the starting points.
<p>
Here are some helpful settings to add to your
<file>~/.Xresources</file> file:
<example>
! Set the font to a more readable 9x15
XTerm*font: 9x15

! Display a scrollbar
XTerm*scrollBar: true

! Set the size of the buffer to 1000 lines
XTerm*saveLines: 1000

! Large kterm screen
KTerm*VT100*fontList: -*-fixed-medium-r-normal--24-*,\
 -*-gothic-medium-r-normal--24-*,\
 -*-mincho-medium-r-normal--24-*
</example>
To make these settings take effect immediately, merge them into the
database using the command:
<example>
xrdb -merge ~/.Xresources
</example>
See <manref name="xrdb" section="1x">.

<sect1 id="xmodmap">Keymaps and pointer button mappings in X
<p>
The <prgn>xmodmap</prgn> program is used to edit and display the
keyboard  modifier map  and  keymap  table that are used by client
applications to convert event keycodes into keysyms in X.
<example>
$ xmodmap -pm 
 ... display the current modifier map
$ xmodmap -pk | pager
 ... display the current keymap table
$ xmodmap -e "pointer = 3 2 1" # set mouse for the left hand.
$ xmodmap ~/.xmodmaprc # set keyboad as in ~/.xmodmaprc
</example>
It is usually run from the user's session startup script,
<file>~/.xsession</file>. 
<!--
User-customized keymaps and pointer button mappings in X can be
specified in <file>~/.xmodmaprc</file>.
-->
<p>
To get the <tt>keycode</tt>, run <prgn>xev</prgn> in X and press keys.
To get the meaning of <tt>keysym</tt>, look into the MACRO definition in
<file>/usr/include/X11/keysymdef.h</file> file.  All the
<tt>#define</tt> statements in this file are named as <tt>XK_</tt>
prepended to the <tt>keysym</tt> names.
<p>
See <manref name="xmodmap" section="1x">.

<sect1 id="ss-xsu">Getting root in X
<p>
If a GUI program needs to be run with root privilege, use the following
procedures to display program output on a user's X server.
<strong>Never attempt to start an X server directly from the root
account</strong> in order to avoid possible security risks.
<p>
Start the X server as a normal user and open an <prgn>xterm</prgn> console.
Then:
<example>
$ XAUTHORITY=$HOME/.Xauthority
$ export XAUTHORITY
$ su root
Password:*****
# printtool &
</example>
When using this trick to <prgn>su</prgn> to a non-root user, make
sure <file>~/.Xauthority</file> is group readable by this non-root user.
<p>

<!-- this section moved up -->

To automate this command sequence, create a file
<file>~/.xsession</file> from the user's account, containing the following
lines:
<example>
# This makes X work when I su to the root account.
if [ -z "$XAUTHORITY" ]; then
        XAUTHORITY=$HOME/.Xauthority
        export XAUTHORITY
fi
unset XSTARTUP
# If a particular window/session manager is desired, uncomment
# the following and edit it to fit your needs.
#XSTARTUP=/usr/bin/blackbox
# This starts x-window/session-manager program
if [ -z "$XSTARTUP" ]; then
  if [ -x /usr/bin/x-session-manager ]; then
    XSTARTUP=x-session-manager
  elif [ -x /usr/bin/x-window-manager ]; then
    XSTARTUP=x-window-manager
  elif [ -x /usr/bin/x-terminal-emulator ]; then
    XSTARTUP=x-terminal-emulator
  fi
fi
# execute auto selected X window/session manager
exec $XSTARTUP
</example>
Then run <prgn>su</prgn> (not <tt>su -</tt>) in an
<prgn>xterm</prgn> window of the user.  Now GUI programs started from this
<prgn>xterm</prgn> can display output on this user's X window while running
with root privilege.  This trick works as long as the default 
<file>/etc/X11/Xsession</file> is
executed.  If a user set up his customization using <file>~/.xinit</file>
or <file>~/.xsession</file>, the above mentioned environment
variable <tt>XAUTHORITY</tt> needs to be set similarly in those scripts.

<p>Alternatively, <package>sudo</package> can be used to automate the command sequence:
<example>
$ sudo xterm
... or
$ sudo -H -s
</example>
Here <file>/root/.bashrc</file> should contain:
<example>
if [ $SUDO_USER ]; then
    sudo -H -u $SUDO_USER xauth extract - $DISPLAY | xauth merge -
fi
</example>
This works fine even with the home directory of the user on an NFS
mount, because root does not read the <file>.Xauthority</file> file.
<p>
There are also several specialized packages for this purpose:
<package>kdesu</package>, <package>gksu</package>, <package>gksudo</package>,
<package>gnome-sudo</package>, and <package>xsu</package>.  Some
other methods can be used to achieve similar results: creating a symlink from
<file>/root/.Xauthority</file> to the user's corresponding one; use of the
script <url id="&suxhome;" name="sux">; or putting "<tt>xauth merge
~<var>USER_RUNNING_X</var>/.Xauthority</tt>" in the root initialization script.
<p>
See more on the <url id="&deb-dev-su;" name="debian-devel mailing list">.
</sect1>

<sect1 id="xfs-tt">TrueType fonts in X
<p>
The standard <prgn>xfs</prgn> in XFree86-4 works fine with TrueType
fonts.  You have to install a third-party font server such as
<prgn>xfs-xtt</prgn>, if you are using XFree86-3.
<p>
You just need to make sure that whatever applications you want to use the
TrueType fonts are linked against libXft or libfreetype (you probably
don't even have to worry about this if you're using pre-compiled
.debs).
<p>
First set up font support infrastructure:
<list compact>
<item>Install <package>x-ttcidfont-conf</package> and
<package>defoma</package> packages. This automates generation of the
<file>fonts.scale</file> and <file>fonts.dir</file> files.
<example>
# apt-get install x-ttcidfont-conf
</example>
<item>Edit <file>/etc/X11/XF86Config-4</file> in the <tt>Section "Files"</tt>
as:
<example>
Section "Files"
    FontPath  "/var/lib/defoma/x-ttcidfont-conf.d/dirs/TrueType"
    FontPath  "/usr/share/fonts/truetype"
    FontPath  "/usr/lib/X11/fonts/CID"
    FontPath  "/usr/lib/X11/fonts/Speedo"
    FontPath  "/usr/lib/X11/fonts/misc"
    FontPath  "/usr/lib/X11/fonts/cyrillic"
    FontPath  "/usr/lib/X11/fonts/100dpi:unscaled"
    FontPath  "/usr/lib/X11/fonts/75dpi:unscaled"
    FontPath  "/usr/lib/X11/fonts/Type1"
EndSection
</example>
The first line will setup XFree86 to use any TrueType fonts you install
from &debian; packages.  
Type1 font entry is moved down since XFree86 does a rather poor job of
rendering Type1 fonts.
The <tt>:unscaled</tt> trick for bitmap fonts should not be needed for
new XF4 anymore but I included it here just be sure.
<!-- per /usr/share/doc/xfree86-common/README.fonts.gz in 4.2.1 -->
<p>
In order to preserve manual changes of <file>/etc/X11/XF86Config-4</file>
follow instructions in <ref id="manual-config-x">.
</list>
<p>
Then install DSFG font packages:
<list compact>
<item>Western TrueType fonts:
<list compact>
<item><package>ttf-bitstream-vera</package>: A set of high-quality
TrueType fonts created by Bitstream, Inc.
<footnote>
Though this is not available in Woody, you can install this from Sarge.
</footnote>
<item><package>ttf-freefont</package>: A set of free high-quality
TrueType fonts covering the UCS character set.
<item><package>ttf-thryomanes</package>: A TrueType Unicode font
covering Latin, Greek, Cyrillic and IPA.
</list>
<item>Asian fonts:
<list compact>
<item><package>tfm-arphic-bsmi00lp</package>: Chinese Arphic "AR PL
Mingti2L Big5" TrueType font TeX font metric data
<item><package>tfm-arphic-bkai00mp</package>: Chinese Arphic "AR PL
KaitiM Big5" TrueType font TeX font metric data
<item><package>tfm-arphic-gbsn00lp</package>: Chinese Arphic "AR PL
SungtiL GB" TrueType font TeX font metric data
<item><package>tfm-arphic-gkai00mp</package>: Chinese Arphic "AR PL
KaitiM GB" TrueType font TeX font metric data
<item><package>ttf-baekmuk</package>: Korean Baekmuk series TrueType fonts
<item><package>hbf-jfs56</package>: Chinese Jianti Fangsong 56x56 bitmap
font (GB2312) for CJK
<item><package>hbf-cns40-b5</package>: Chinese Fanti Song 40x40 bitmap
font (Big5) for CJK
<item><package>hbf-kanji48</package>: Japanese Kanji 48x48 bitmap font
(JIS X-0208) for CJK
</list>
</list>
<!-- Need to watch Japanese font issue -->
<p>
Since <strong>Free</strong> fonts are sometimes limited, installing
or sharing some commercial TrueType fonts is an option for a &debian;
users. In order to make this process easy for the user, 
some convenience packages have been created:
<list compact>
<item><package>ttf-commercial</package>
<item><package>msttcorefonts (>1.1.0)</package>
<footnote>
The package in Woody does not work as of 8/2002 due to a change in
Microsoft's website.  Use Sarge version even in Woody instead.
</footnote>
</list>
You'll have a really good selection of TruType fonts at the expense of
contaminating your <strong>Free</strong> system with non-Free fonts.
<p>
All these font packages in &debian; should work without any efforts
and appear available to all X programs that use the
regular "core" font system.  This includes things like Xterm, Emacs and
most other non-KDE and non-GNOME applications.
<p>
Now, run <prgn>xfontsel</prgn> and select any TrueType fonts in the
fndry menu, you should be able to see many ungrayed out
entries in the "fmly" menu.
<p>
For KDE2.2 and GNOME1.4 (with libgdkxft0, which is a hack to get GTK 1.2
to do anti-aliased font rendering), you need to setup Xft1, as well.
Xft1 is highly deprecated, and is basically only used by GNOME1.4 and
KDE2.2.  Edit <file>/etc/X11/XftConfig</file> and add a line like
<example>
    dir "/var/lib/defoma/x-ttcidfont-conf.d/dirs/TrueType"
</example>
<p>
before the other dir lines.  
<footnote>
I don't have any xft1 stuff on my machine
anymore, so I'm not sure if you need to restart X or not before this
change will take effect.  I seem to remember that "xftcache" would
update the Xft1 cache, but it'd be good if someone could confirm that
for me.
</footnote>
<p>
For GNOME2 and KDE3 (post Sarge release), you need to setup
<package>fontconfig</package> which Xft2 uses to find fonts. 
<footnote>
<package>Fontconfig</package> does <strong>not</strong>
exist in Woody.  
</footnote>
You shouldn't need to install anything extra for this,
since all the packages using <package>fontconfig</package> will Depend
on it (indirectly) already.
<p>
First, look in <file>/etc/fonts/fonts.conf</file>.  There should be a
line like the one below.  If not, open up
<file>/etc/fonts/local.conf</file> and add this
<example>
    &lt;dir&gt;/var/lib/defoma/x-ttcidfont-conf.d/dirs/TrueType&lt;/dir&gt;
</example>
just after the &lt;fontconfig&gt; line.
<p>
<package>Fontconfig</package> should pick these up immediately, and
"fc-list" should list your new fonts.  Another neat feature of
<package>fontconfig</package> is that you can just drop fonts in
<file>~/.fonts/</file> and all your fontconfigified programs will have
access to them immediately.
<p>
If you manually install a new set of TrueType fonts while in X without
using &debian; package, run
<example>
# xset fp rehash
</example>
to get XFree86 to look at the contents of that directory again and to
pickup new ones.

<sect1 id="ss-browser">Web browsers in X
<p>
There are a few web browser packages with graphical display capabilities
as of the Woody release:
<list compact>
<item><package>mozilla</package> The Mozilla browser (new)
<item><package>galeon</package> Mozilla-based browser with a Gnome UI (new)
<item><package>konqueror</package> KDE browser
<item><package>dillo</package> GTK browser
<item><package>amaya-gtk</package> W3C reference browser
<item><package>amaya-lesstif</package> W3C reference browser
<item><package>netscape-...</package> (many, old)
<item><package>communicator-...</package> (many, old)
<item>...
</list>
The version of <package>mozilla</package> must match 
the version that <package>galeon</package> requires.  Although they differ in
UI, these two programs share the Gecko HTML rendering engine.
<p>
Plug-ins for browsers such as <package>mozilla</package> and
<package>galeon</package> can be enabled by installing "<tt>*.so</tt>" 
manually in the plug-in directory and restarting the browsers.
<p>
Plug-in resources:
<list compact>
<item>Java plug-in: install binary "J2SE" from <url id="&javasunhome;">.
<item>Flash plug-in: install binary "Macromedia Flash Player 5" from
 <url id="&flashhome;">.
<item><package>freewrl</package>: VRML browser and Netscape plug-in
<item>...
</list>
</sect1>

<!-- CJK and X moved to bottom with different name to locale section -->

</sect>

<sect id="ssh">SSH
<p>
SSH (Secure SHell) is the secure way to connect over the Internet.  A free
version of SSH called OpenSSH is available as the <package>ssh</package>
package in &debian;.

<sect1 id="ssh-basics">Basics of SSH
<p>
First install the OpenSSH server and client.
<example>
# apt-get update && apt-get install ssh
</example>
The non-US entry in the <file>/etc/apt/source.list</file> is required.
<file>/etc/ssh/sshd_not_to_be_run</file> must not be present if one wishes to 
run the OpenSSH server.
<p>
SSH has two authentication protocols:
<list>
<item>SSH protocol version 1: 
 <list compact>
<item>Potato version only supports this protocol.
<item>available authentication methods:
  <list compact>
<item>RSAAuthentication: RSA identity key based user authentication
<item>RhostsAuthentication: .rhosts based host authentication 
 (insecure, disabled)
<item>RhostsRSAAuthentication: .rhosts authentication combined with 
 RSA host key (disabled)
<item>ChallengeResponseAuthentication: RSA challenge-response authentication
<item>PasswordAuthentication: password based authentication
  </list>
 </list>
<item>SSH protocol version 2: 
 <list compact>
<item>post-Woody versions use this as the primary protocol.
<item>available authentication methods:
  <list compact>
<item>PubkeyAuthentication: public key based user authentication
<item>HostbasedAuthentication: <file>.rhosts</file> or
 <file>/etc/hosts.equiv</file> authentication 
 combined with public key client host authentication  (disabled)
<item>ChallengeResponseAuthentication: challenge-response authentication
<item>PasswordAuthentication: password based authentication
  </list>
 </list>
</list>

<p>
Be careful about these differences if you are migrating to Woody or using 
a non-&debian; system.  
<p>
See <file>/usr/share/doc/ssh/README.Debian.gz</file>,
<manref name="ssh" section="1">, 
<manref name="sshd" section="8">,
<manref name="ssh-agent" section="1">, and
<manref name="ssh-keygen" section="1"> for details.

<p>
Following are the key configuration files:

<list>

<item><file>/etc/ssh/ssh_config</file>: SSH client defaults.
 See <manref name="ssh" section="1">.  Notable entries are:

 <list compact>
<item><tt>Host</tt>: Restricts the following declarations 
  (up to the next Host keyword) to be only for those hosts 
   that match one of the patterns given after the keyword.
<item><tt>Protocol</tt>: Specifies the SSH protocol versions.  
 The default is "2,1".
<item><tt>PreferredAuthentications</tt>: Specifies the SSH2 client 
 authentication method.  The default is 
"hostbased,publickey,keyboard-interactive,password".
<item><tt>PasswordAuthentication</tt>: If you want to log in with 
 a password, you have to make sure this is not set <tt>no</tt>.
<item><tt>ForwardX11</tt>: The default is disabled.  This can be
 overridden by the command-line option "<tt>-X</tt>".
 </list>

<item><file>/etc/ssh/sshd_config</file>: SSH server defaults.
 See <manref name="sshd" section="8">.  Notable entries are:

 <list compact>
<item><tt>ListenAddress</tt>: Specifies the local addresses 
 <prgn>sshd</prgn> should listen on. Multiple options are permitted.
<item><tt>AllowTcpForwarding</tt>: The default is disabled.  
<item><tt>X11Forwarding</tt>: The default is disabled.  
 </list>

<item><file>$HOME/.ssh/authorized_keys</file>: the lists of the default 
public keys that clients use to connect to this account on this host.
See <manref name="ssh-keygen" section="1">.

<item><file>$HOME/.ssh/identity</file>: 
See <manref name="ssh-add" section="1">
and <manref name="ssh-agent" section="1">.
</list>

<p>
The following will start an <prgn>ssh</prgn> connection from a client.
<example>
$ ssh username@hostname.domain.ext
$ ssh -1 username@hostname.domain.ext # Force SSH version 1
$ ssh -1 -o RSAAuthentication=no -l username foo.host
    # force password on SSH1
$ ssh -o PreferredAuthentications=password -l username foo.host
    # force password on SSH2
</example>
For the user, <prgn>ssh</prgn> functions as a smarter and more secure 
<prgn>telnet</prgn> (will not bomb with ^]).

</sect1>

<sect1 id="ssh-forward">Port forwarding for SMTP/POP3 tunneling
<p>
To establish a pipe to connect to port 25 of <var>remote-server</var> from port 4025 of
localhost, and to port 110 of <var>remote-server</var> from port 4110 of localhost
through <prgn>ssh</prgn>, execute on the local machine:
<example>
# ssh -q -L 4025:remote-server:25 4110:remote-server:110 \
           username@remote-server
</example>
This is a secure way to make connections to SMTP/POP3 servers over the Internet.
Set the <tt>AllowTcpForwarding</tt> entry to <tt>yes</tt> in 
<file>/etc/ssh/sshd_config</file> of the remote host.
</sect1>

<sect1 id="ssh-rsa">Connecting with fewer passwords &ndash; RSA
<p>
One can avoid having to remember a password for each remote system by using
RSAAuthentication (SSH1 protocol) or PubkeyAuthentication (SSH2 protocol).  
<p>
On the remote system, set the respective entries,
"RSAAuthentication yes" or "PubkeyAuthentication yes", in 
<file>/etc/ssh/sshd_config</file>.
<p>
Then generate authentication keys locally and install the public key
on the remote system:
<example>
$ ssh-keygen          # RSAAuthentication: RSA1 key for SSH1
$ cat .ssh/identity   | ssh user1@remote \
        "cat - &gt;&gt;.ssh/authorized_keys"
...
$ ssh-keygen -t rsa   # PubkeyAuthentication: RSA key for SSH2
$ cat .ssh/id_rsa.pub | ssh user1@remote \
        "cat - &gt;&gt;.ssh/authorized_keys"
...
$ ssh-keygen -t dsa   # PubkeyAuthentication: DSA key for SSH2
$ cat .ssh/id_dsa.pub | ssh user1@remote \
        "cat - &gt;&gt;.ssh/authorized_keys"
</example>
One can change the passphrase later with "<tt>ssh-keygen -p</tt>".
Make sure to verify settings by testing the connection.  In case of any
problem, use "<tt>ssh -v</tt>".
<p>
You can add options to the entries in <prgn>authorized_keys</prgn> to limit
hosts and to run specific commands. See <manref name="sshd" section="8"> for details.
<p>
Note that SSH2 has <tt>HostbasedAuthentication</tt>. For this to work, 
you must adjust the settings of <tt>HostbasedAuthentication</tt> to <tt>yes</tt> in 
both <file>/etc/ssh/sshd_config</file> on the server machine and 
<file>/etc/ssh/ssh_config</file> or <file>$HOME/.ssh/config</file> on 
the client machine.
</sect1>

<sect1 id="ssh-client">Dealing with alien SSH clients
<p>
There are a few free SSH clients available for non-Unix-like platforms.
<taglist>
<tag>Windows
<item><url id="&puttyhome;" name="puTTY"> (GPL)
<tag>Windows (cygwin)
<item>SSH in <url id="&cygwinhome;" name="cygwin"> (GPL)
<tag>Macintosh Classic
<item><url id="&macsshhome;" name="macSSH"> (GPL) [Note that Mac OS X
  includes OpenSSH; use <tt>ssh</tt> in the Terminal application]
</taglist>
See also <url id="&sfdochome;" name="SourceForge.net, site documentation">, 
"6. CVS Instructions".

<sect1 id="ssh-agent">Setting up <prgn>ssh-agent</prgn>
<p>
It is safer to protect your SSH authentication key with a passphrase.
If it was not set, use <tt>ssh-keygen -p</tt> to set it.
<p>
Place your public key (e.g. <file>~/.ssh/id_rsa.pub</file>) 
into <file>~/.ssh/authorized_keys</file> on a remote host using
a password-based connection to the remote host as described in
<ref id="ssh-rsa">.
<example>
$ ssh-agent bash # or run zsh/tcsh/pdksh program instead.
$ ssh-add ~/.ssh/id_rsa
Enter passphrase for /home/osamu/.ssh/id_rsa:
Identity added: /home/osamu/.ssh/id_rsa (/home/osamu/.ssh/id_rsa)
$ scp <var>foo</var> <var>user@remote.host:foo</var>
 ... no passphrase needed from here on :-)
$^D
 ... terminating ssh-agent session
</example>
For the X server, normal &debian; startup scripts execute 
<prgn>ssh-agent</prgn> as parent process.  So you only need to execute 
<prgn>ssh-add</prgn> once.
<p>
For more, read <manref name="ssh-agent" section="1">and
<manref name="ssh-add" section="1">.
</sect1>

<sect1 id="ssh-trouble">Troubleshooting SSH
<p>
If you have problems, check the permissions of configuration files and run
<prgn>ssh</prgn> with the "<tt>-v</tt>" option.
<p>
Use the "<tt>-P</tt>" option if you are root and have trouble with a firewall;
this avoids the use of server ports 1&ndash;1023.
<p>
If <prgn>ssh</prgn> connections to a remote site suddenly stop working, it may be the
result of tinkering by the sysadmin, most likely a change in
<prgn>host_key</prgn> during system maintenance.  After making sure this is
the case and nobody is trying to fake the remote host by some clever hack, one
can regain a connection by removing the <prgn>host_key</prgn> entry from
<file>$HOME/.ssh/known_hosts</file> on the local machine.
</sect1>

</sect>

<sect id="mail">Mail
<p>
Mail configuration divides into three categories:
<list>
<item>mail transfer agent (MTA): <prgn>exim</prgn>, <prgn>postfix</prgn>, 
 <prgn>sendmail</prgn>, <prgn>qmail</prgn>, <prgn>ssmtp</prgn>,
 <prgn>nullmailer</prgn>, ...
<item>mail utilities: <prgn>procmail</prgn>, <prgn>fetchmail</prgn>,
<prgn>mailx</prgn>, ...
<item>mail user agent (MUA): <prgn>mutt</prgn>,
<prgn>emacs</prgn>+<prgn>gnus</prgn>, ...
</list>

<sect1 id="mta">Mail transport agents (MTAs)
<p>
For a full-featured MTA, use <package>exim</package>. References:
<list compact>
<item><package>exim-doc</package> and <package>exim-doc-html</package> packages
<item><url id="&eximhome;">
</list>
The only reasonable alternative MTA is <package>postfix</package> if you
care about security. <package>sendmail</package> and
<package>qmail</package> are available as &debian; packages but are not
recommended. 
<p>
If you do not need the relay capability of an MTA as in the case of a
satellite system such as a laptop PC, you may consider using one of these 
lightweight packages:
<list compact>
<item><prgn>ssmtp</prgn>: needs an SMTP connection and is alias-capable, or
<item><prgn>nullmailer</prgn>: can spool but is not alias-capable.
</list>
At this moment, I find <prgn>exim</prgn> to be more suitable even for
my personal workstation machine, which is a laptop PC.
<p>
You may need to remove <prgn>exim</prgn> for the installation of 
these conflicting packages:
<example>
# dpkg -P --force-depends exim
# apt-get install nullmailer         # or ssmtp
</example> 

<sect2 id="exim-smart">Smarthost
<p>
If you are running <prgn>exim</prgn> on a host which is connected
through the consumer grade services, please make sure to send outgoing
mail through a smarthost offered by your ISP or some others.
<footnote>
You must follow this rule for any hosts on dial-up, DSL, cable services
or LAN through some broadband router.  Even if your home host has a
fixed IP from your ISP, it is still a good idea to follow this rule.
Most workstations and home servers fall into this category.
</footnote>
There are few good reasons:
<list compact>
<item>to ensure SMTP retries since your ISP's smarthost usually have
more reliably connection.
<item>to avoid sending mail directly from a <strong>dynamic IP
address</strong> which will likely be blocked by dial-up spam lists. 
<item>to save your local bandwidth to send mails with multiple
recipients. 
</list>
<p>
The only conceivable exceptions are:
<list compact>
<item>the emergency cure for your ISP's SMTP service trouble.
<item>an experiment for the educational purpose.
<item>your host being a professionally hosted server.
</list>

<sect2 id="exim-base">Basic configuration of Exim
<p>
In order to use <prgn>exim</prgn> as your MTA, configure the following:
<example>
/etc/exim/exim.conf     "eximconfig" to create and edit
/etc/inetd.conf         comment out smtp to run exim as daemon
/etc/email-addresses    Add spoofed source address lists
check filters using exim -brw, -bf, -bF, -bV, ... etc.
</example>

<sect2 id="addr-catchall">Setting up a catchall for nonexistent email addresses under Exim
<p>
In <file>/etc/exim/exim.conf</file> (Woody or later),
in the DIRECTORS part, at the end (after the localuser: director)
add a catch-all director that matches all addresses that the
previous directors couldn't resolve (per Miquel van Smoorenburg):
<example>
catchall:
  driver = smartuser
    new_address = <var>webmaster@mydomain.com</var>
</example>
<p>
If one wants to have more a detailed recipe for each virtual domain, etc., 
add the following at the end of <file>/etc/exim/exim.conf</file> 
(per me, not well tested):
<example>
*@yourdomain.com ${lookup{$1}lsearch*{/etc/email-addresses} \
        {$value}fail} T
</example>
Then have an "*" entry in <file>/etc/email-addresses</file>.
</sect2>

<sect2 id="addr-rewrite">Configuring selective address rewriting for outgoing mail under Exim
<p>
<!-- Derrick 'dman' Hudson dman@dman.ddts.net -->
Selective address rewrite for outgoing mail to produce
proper "From:" headers can be done using <prgn>exim</prgn>
by configuring near the end of <file>/etc/exim/exim.conf</file>:
<example>
*@host1.something.dyndns.org \
  "${if eq {${lookup{$1}lsearch{/etc/passwd}{1}{0}}} {1}  \
   {$0}{$1@somethig.dyndns.org}}"  frFs
</example>
This rewrites all addresses matching <tt>*@host1.something.dyndns.org</tt>.
<enumlist>
<item>It searches through <file>/etc/password</file> to see if the local part ($1)
   is a local user or not.
<item>If it is a local user, it rewrites the address to the same thing it was in
   the first place ($0).
<item>If it is not a local user, it rewrites the domain part.
</enumlist>

<sect2 id="smtp-aauth">Configuring SMTP authentication under Exim
<p>
Some SMTP services such as yahoo.com require SMTP auth.
Configure <file>/etc/exim/exim.conf</file> as follows:
<example>
remote_smtp:
  driver = smtp
  authenticate_hosts = smtp.mail.yahoo.com
...

smarthost:
  driver = domainlist
  transport = remote_smtp
  route_list = "* smtp.mail.yahoo.com bydns_a"
...

plain:
  driver = plaintext
  public_name = PLAIN
  client_send = "^cmatheson3^this_is_my_password"
</example>
Do not forget double quotes in the last line.

<sect1 id="fetchmail">Fetching mail &ndash; Fetchmail
<p>
<prgn>fetchmail</prgn> is run in daemon mode to fetch mail from a POP3 account
with an ISP into the local mail system.  Configure:
<example>
/etc/init.d/fetchmail   
/etc/rc?.d/???fetchmail run update-rc.d fetchmail default priority 30
/etc/fetchmailrc        configuration file (chown 600, owned by fetchmail)
</example>
<p>
Information on how to start <prgn>fetchmail</prgn> as a daemon from the
<prgn>init.d</prgn> script for Potato is confusing (Woody fixed this). See the
sample <file>/etc/init.d/fetchmail</file> and <file>/etc/fetchmailrc</file>
files in the <url id="&examples;" name="example scripts">.
<p>
If your email headers are contaminated by ^M due to your ISP's mailer, add
"stripcr" to your options in <file>$HOME/.fetchmailrc</file>:
<example>
options fetchall no keep stripcr
</example>
</sect1>

<sect1 id="procmail">Processing mail &ndash; Procmail
<p>
<prgn>procmail</prgn> is a local mail delivery and filter program. One needs to create 
<file>$HOME/.procmailrc</file> for each account that uses it. Example:
<url id="&examples;" name="_procmailrc">
</sect1>

<sect1 id="mutt">Reading mail &ndash; Mutt
<p>
Use <prgn>mutt</prgn> as the mail user agent (MUA) in combination with
<prgn>vim</prgn>.
Customize with <file>~/.muttrc</file>; for example:

<example>
# use visual mode and "gq" to reformat quotes
set editor="vim -c 'set tw=72 et ft=mail'"
#
# header weeding taken from the manual (Sven's Draconian header weeding)
#
ignore *
unignore from: date subject to cc
unignore user-agent x-mailer
hdr_order from subject to cc date user-agent x-mailer
auto_view application/msword
....
</example>
<p>
Add the following to <file>/etc/mailcap</file> or
<file>$HOME/.mailcap</file> to display HTML mail and MS Word attachments
inline:
<example>
text/html; lynx -force_html &percnt;s; needsterminal;
application/msword; /usr/bin/antiword '&percnt;s'; copiousoutput;
description="Microsoft Word Text"; nametemplate=&percnt;s.doc
</example>

</sect1>

</sect>

<sect id="l10n">ローカライゼーション
<p>
&debian; は国際化されており、言語や地方差に関するサポートが充実しつつある。
この次のサブセクションは &debian; が現在サポートする多様性の形態の一部をリストし、それに続くサブセクションで選ばれた言語の円滑な入出力や日付表示や数字金銭フォーマット等のシステムの地方差のあるアスペクト等に関してあなたの使用環境をカスタマイズするプロセスである<strong>ローカリゼーション</strong>に付いて議論する。

<sect1 id="languages">ローカリゼーションの基本
<p>
ローカリゼーションと各国語サポートにはいくつかのアスペクトがある。

<sect2 id="keyboard">キーボードのローカリゼーション
<p>
&debian; は24程のキーマップとともに配布されている。
Woody でのキーボードをリコンフィギュレーションするには:
<list compact>
<item><tt>dpkg-reconfigure --priority=low console-data # console</tt>
<item><tt>dpkg-reconfigure --priority=low xserver-xfree86   # XF4</tt>
<item><tt>dpkg-reconfigure --priority=low xserver-common-v3 # XF3</tt>
</list>
</sect2>

<sect2 id="data-stream">データーファイルのローカライゼーション
<p>
The vast majority of Debian software packages support data 
    handling of non-US-ASCII characters through the LC_CTYPE environment 
    variable offered by the <strong>locale</strong> technology in glibc.
   
    <list compact>
    <item>8-bit clean: practically all programs
    <item>other Latin character sets (e.g. ISO-8859-1 or ISO-8859-2): the
                  majority of programs
    <item>multibyte languages such as Chinese, Japanese, or Korean:
                  many new applications
    </list>
</sect2>

<sect2 id="display">表示のローカライゼーション
<p>
X can display any coding, including UTF-8, and supports all fonts.
The list includes not only all the 8-bit fonts but also 16-bit fonts 
such as Chinese, Japanese, or Korean.  Multibyte character input
method is supported by the <ref id="x-input"> mechanism.   
See <ref id="x-cjk"> and <ref id="x-utf-8">.
<p>
Japanese EUC code display is also available in a (S)VGA graphics console
through the <package>kon2</package> package.  There is an alternative new
Japanese display, <package>jfbterm</package>, which uses a frame-buffer
console, too.  In these console environments, the Japanese input method must
be supplied by the application.  Use <package>egg</package> package for Emacs
and use japanized <package>jvim</package> package for a Vim environment.
<p>
Installation of non Unicode fonts to X will help in displaying documents
with any encoding in X.  So do not worry too much about encoding of fonts.
</sect2>

<sect2 id="translation">メッセージやドキュメンテーションのローカリゼーション
<p>
Translations exist for many of the text messages and documents that
    are displayed in the &debian; system, such as error messages, standard
    program output, menus, and manual pages.
    Currently, support for manual pages in German, Spanish, Finnish, French,
    Hungarian, Italian, Japanese, Korean, Polish, Portuguese, Chinese,
    and Russian is provided through the <tt>manpages-<var>LANG</var></tt>
    packages (where <var>LANG</var> is a comma-separated list of two-letter
    ISO country codes.  Use <tt>apt-cache search manpages-|less</tt> to get a 
    list of available Unix manual pages.)
    <p>
    To access an NLS manual page, the user must set the environment variable
    LC_MESSAGES to the appropriate string. For example, in the case of the 
    Italian-language manual pages,
    LC_MESSAGES needs to be set to <tt>it</tt>.  The <prgn/man/ program will
    then search for Italian manual pages under <file>/usr/share/man/it/</file>.
</sect2>
</sect1>

<sect1 id="locales">ローケール
<p>
Debian supports <strong>locale</strong> technology.  Locale is a mechanism
that allows programs to provide suitable output and functionality according to
local conventions such as character set, format for date and time, currency
symbol, and so on. It uses environment variables to determine the appropriate
behavior. For example, assuming you have both the American English and German
locales installed on your system, the error messages of many programs can be
multilingual:
<example>
$ LANG="en_US" cat foo
cat: foo: No such file or directory
$ LANG="de_DE" cat foo
cat: foo: Datei oder Verzeichnis nicht gefunden
</example>
Glibc offers support for this functionality to programs as a library.  See
<manref name="locale" section="7">.

<sect1 id="base-locale">ローケール入門
<p>
Full locale description consists of 3 parts: <tt>xx_YY.ZZZZ</tt>.
<list compact>
<item><strong><tt>xx</tt></strong>: ISO 639 language codes (lower case)
<item><strong><tt>YY</tt></strong>: ISO 3166 country codes (upper case)
<item><strong><tt>ZZZZ</tt></strong>: codeset, i.e., character set or encoding
identifier.
</list>
<p>
For language codes and country codes, see pertinent description in the
<tt>info gettext</tt>.
<p>
Please note this codeset part may be normalized internally to achieve
cross platform compatibility by removing all <tt>-</tt> and by
converting all characters into lower case.  Typical codesets are:
<list compact>
  <item><strong>UTF-8</strong>: Unicode for all regions, mostly in 1-3 Octets (new
       de facto standard)
  <item><strong>ISO-8859-1</strong>: western Europe (de facto old standard)
  <item><strong>ISO-8859-2</strong>: eastern Europe (Bosnian, Croatian, Czech,
       Hungarian, Polish, Romanian, Serbian, Slovak,  Slovenian)
  <item><strong>ISO-8859-3</strong>: Maltese
  <item><strong>ISO-8859-5</strong>: Macedonian, Serbian
  <item><strong>ISO-8859-6</strong>: Arabic
  <item><strong>ISO-8859-7</strong>: Greek
  <item><strong>ISO-8859-8</strong>: Hebrew
  <item><strong>ISO-8859-9</strong>: Turkish
  <item><strong>ISO-8859-11</strong>: Thai (=TIS-620)
  <item><strong>ISO-8859-13</strong>: Latvian, Lithuanian, Maori
  <item><strong>ISO-8859-14</strong>: Welsh
  <item><strong>ISO-8859-15</strong>: western Europe with euro
  <item><strong>KOI8-R</strong>: Russian
  <item><strong>KOI8-U</strong>: Ukrainian
  <item><strong>CP1250</strong>: Czech, Hungarian, Polish (MS Windows origin)
  <item><strong>CP1251</strong>: Bulgarian, Byelorussian (MS Windows origin)
  <item><strong>eucJP</strong>: Unix style Japanese (=ujis)
  <item><strong>eucKR</strong>: Unix style Korean 
  <item><strong>GB2312</strong>: Unix style Simplified Chinese (=GB, =eucCN) for zh_CN
  <item><strong>Big5</strong>: Traditional Chinese for zh_TW
  <item><strong>sjis</strong>: Microsoft style Japanese (Shift-JIS) 
</list>
As for the meaning of basic encoding system jargons:
<list compact>
<item><strong>ASCII</strong>: 7 bits (0-0x7f)
<item><strong>ISO-8859-?</strong>: 8 bits (0-0xff)
<item><strong>ISO-10646-1</strong>: Universal Character Set (UCS) (31 bits, 0-0x7fffffff)
<item><strong>UCS-2</strong>: First 16 bit of UCS as straight 2 Octets (Unicode: 0-0xffff)
<item><strong>UCS-4</strong>: UCS as straight 4 Octets (UCS: 0-0x7fffffff)
<item><strong>UTF-8</strong>: UCS encoded in 1-6 Octets (mostly in 3 Octets)
<item><strong>ISO-2022</strong>: 7 bits (0-0xff) with the escape sequence.
ISO-2022-JP is the most popular encoding for the Japanese e-mail.
<item><strong>EUC</strong>: 8 bits + 16 bits combination (0-0xff), Unix style
<item><strong>Shift-JIS</strong>: 8 bits + 16 bits combination (0-0xff), Microsoft
style.
</list>
ISO-8859-?, EUC, ISO-10646-1, UCS-2, UCS-4, and UTF-8 share the same
code with ASCII for the 7 bit characters.  EUC or Shift-JIS uses
high-bit characters (0x80-0xff) to indicate that part of encoding is 16
bit.  UTF-8 also uses high-bit characters (0x80-0xff) to indicate non 7
bit character sequence bytes and this is the most sane encoding system 
to handle non-ASCII characters.
<p>
Please note the byte order difference of Unicode implementation:
<list compact>
<item><strong>Standard  UCS-2, UCS-4</strong>: big endian
<item><strong>Microsoft UCS-2, UCS-4</strong>: little endian for ix86 (machine-dependent)
</list>
For more see <url id="&intro-i18n;" name="Introduction to i18n">.

<sect1 id="activate-locales">ローケールサポートの活性化
<p>
&debian; does <strong>not</strong> come with all available
locales pre-compiled. Check <file>/usr/lib/locale</file> to see which
locales (besides the default "C") are compiled for your system. If the one
you need is not present, you have two options:
<list compact>
 <item>Edit <file>/etc/locale.gen</file> to add the desired locale, then
   run <prgn>locale-gen</prgn> as root to compile it. See <manref
   name="locale-gen" section="8"> and the manpages listed in its "SEE ALSO"
   section.
 <item>Run <tt>dpkg-reconfigure locales</tt> to reconfigure the
   <package>locales</package> package. Or if it is not already installed,
   installing <package>locales</package> will invoke the debconf interface to
   let you choose needed locales and compile the database.
 <!--  XXX FIXME XXX 
 <item>Run <prgn>localedef</prgn> manually from user account to compile 
   the locale database and use it by setting 
   <tt>LOC_PATH</tt> 
   environment variable.  For example for <tt>en_GB.UTF-8</tt>:
   <example>
$ localedef -v -c -i en_GB -f UTF-8 <var>somewhere/</var>en_GB.UTF-8
$ export LOC_PATH=<var>somewhere/</var>
   </example>
 -->
</list>

<sect1 id="env-locale">特定ローケールの活性化
<p>
The following environment variables are evaluated in this order to provide
particular locale values to programs:
<enumlist>
<item>LANGUAGE: This environment variable consists of a colon-separated 
      list of locale names in order of priority. Used only if the POSIX
      locale is set to a value other than "C" [in Woody; the Potato version
      always has priority over the POSIX locale]. (GNU extension)
<item>LC_ALL: If this is non-null, the value is used for all locale
      categories. (POSIX.1) Usually "" (null).
<item>LC_*: If this is non-null, the value is used
      for the corresponding category (POSIX.1).  Usually "C".
<p>
      LC_* variables are:
 <list compact>
<item>LC_CTYPE: Character classification and case conversion.
<item>LC_COLLATE: Collation order.
<item>LC_TIME: Date and time formats.
<item>LC_NUMERIC: Non-monetary numeric formats.
<item>LC_MONETARY: Monetary formats.
<item>LC_MESSAGES: Formats of informative and diagnostic messages and
            interactive responses.
<item>LC_PAPER: Paper size.
<item>LC_NAME: Name formats.
<item>LC_ADDRESS: Address formats and location information.
<item>LC_TELEPHONE: Telephone number formats.
<item>LC_MEASUREMENT: Measurement units (Metric or Other).
<item>LC_IDENTIFICATION: Metadata about the locale information.
 </list>
<item>LANG:   If this is non-null and LC_ALL is undefined, the value is used
      for all LC_* locale categories with undefined values. (POSIX.1) Usually
      "C".
</enumlist>
Note that some applications (e.g., Netscape 4) ignore LC_* settings.
<p>
The <prgn>locale</prgn> program can display active locale settings and
available locales; see <manref name="locale" section="1">. (NOTE: <tt>locale
-a</tt> lists all the locales that your system knows about; this does
<em>not</em> mean that all of them are compiled! See
<ref id="activate-locales">.)


<sect1 id="ISO-locale">ISO 8601 日付表示ローケール
<p>
The locale support for the international date standard of <tt>yyyy-mm-dd</tt>
(ISO 8601 date format) is provided by the locale called <tt>en_DK</tt>, 
"English in Denmark", which is a bit of joke :-)
This seems to work only in a console screen for <prgn>ls</prgn>.

<!-- beyond locale moved to below -->

<sect1 id="iso-8859-1">米国 (ISO-8859-1) の例
<p>
Add the following lines to <file>~/.bash_profile</file>:
<example>
LC_CTYPE=en_US.ISO-8859-1
export LC_CTYPE
</example>

<sect1 id="france">Example for France with Euro sign (ISO-8859-15)
<p>
Add the following lines to <file>~/.bash_profile</file>:
<example>
LANG=fr_FR@euro
export LANG
LC_CTYPE=fr_FR@euro
export LC_CTYPE
</example>
<p>
Configure the keyboard for French "AZERTY" as described in <ref id="keyboard">;
add French manual pages by installing <package>manpages-fr</package>.  The
Right-Alt key in the US is called Alt-Gr in Europe.  Pressing this together
with other keys creates numerous accented and special characters.  For example,
Alt-Gr+E creates a Euro sign.
<p>
Most western European languages can be configured similarly.
<p>
See <url id="&debian-euro-support;" name="Debian Euro HOWTO"> for 
adding support for the new Euro currency and 
<url id="&debian-fr-howto;" name="Utiliser et configurer Debian pour le francais"> 
for more details in French.

<sect1 id="x-cjk">多言語 X window システムの例
<p>
コンソール毎に、日本語と英語とドイツ語とフランス語をそれぞれ EUC と UTF-8 と ISO-8859-1 のエンコーディングで同時にサポートする多言語 X window システムを設定しよう。
<p>
I will show you a costomization using the &debian; menu system.  See the
details of &debian; menu system in <url id="&f-menu;">.  I also create a
shortcut to the <prgn>mozilla</prgn> web browser in this example.
 <footnote>
In this example, 2 bug work arounds are deployed for the version of
<prgn>blackbox</prgn> in 2003. I use <tt>sh -c</tt> in command. Also
<file>~/.menu/*</file> entry is not used but root requiring
<file>/etc/menu/*</file> was used instead.
 </footnote>
<list>

 <item>add locale support for the Japanese ja_JP.eucJP locale and other
 required locales using the method described at <ref id="l10n">. (for
 all)

 <item>install Kana-to-Kanji conversion system and dictionary (for
 Japanese):
  <list compact>
  <item><package>canna</package> &ndash; Local server ("free-beer" license), or
  <item><package>freewnn-jserver</package> &ndash; Network-extensible server 
   (Public Domain)
  </list>

 <item>install Japanese input method system (for Japanese):
  <list compact>
  <item><package>kinput2-canna</package> &ndash; for X, or
  <item><package>kinput2-canna-wnn</package> &ndash; for X, and
  <item><package>egg</package> &ndash; directly works with Emacsen even 
    in console (optional)
  </list>

 <item>Install compatible terminals (for all):
  <list compact>
  <item><package>xterm</package> &ndash; X (for ISO-8859-1 and UTF-8),
  <item><package>kterm</package> &ndash; X (for Japanese EUC), and
  <item><package>mlterm</package> &ndash; X (multilingual).
  </list>

 <item>add all the required font packages. (for all)
 
 <item>create the <file>~/.xsession</file> that sets the user-specific X 
  environment as described in <ref id="custom-x"> (for all):

<example>
#!/bin/sh
# This makes X work when I su to root.
if [ -z "$XAUTHORITY" ]; then
        XAUTHORITY=$HOME/.Xauthority
        export XAUTHORITY
fi

# Set specific environment through debian menu system.
# Reset locale
unset LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES 
unset LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT 
unset LC_IDENTIFICATION LC_ALL LANG LANGUAGE PAGER
# set locale default in X
LANG=C
# export locale
export LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES 
export LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT 
export LC_IDENTIFICATION LC_ALL LANG LANGUAGE PAGER
###
# activate input method for Japanese with kinput2
kinput2 &
XMODIFIERS="@im=kinput2"
export XMODIFIERS
# How about blackbox window manager (lightweight)
exec blackbox
#exec xfwm
#exec wmaker
</example>

 <item>set locale in <file>~/.bash_profile</file> for Linux consoles
 (for all).
 
 <item>remove locale settings from <file>~/.bashrc</file>, if existed
 (for all).

 <item>create few files in <file>/etc/menu/</file> (for all).
 <list compact>
 <item><file>/etc/menu/xterm-local</file>: (add new entries to menu)
 <footnote>
Use a file name which does not overwrap with any package names.
 </footnote>
<example>
?package(xterm):\
 needs=x11\
 section=XShells\
 longtitle="XTerm: terminal emulator (en_US.ISO-8859-1)"\
 title="XTerm (en_US.ISO-8859-1)"\
 command="sh -c 'LC_ALL=en_US.ISO-8859-1 xterm'"
?package(xterm):\
 needs=x11\
 section=XShells\
 longtitle="XTerm: terminal emulator (de_DE.ISO-8859-1)"\
 title="XTerm (de_DE.ISO-8859-1)"\
 command="sh -c 'LC_ALL=de_DE.ISO-8859-1 xterm -T xterm-de'"
?package(xterm):\
 needs=x11\
 section=XShells\
 longtitle="XTerm: terminal emulator for X with Unicode support (Japanese)"\
 title="UXTerm (ja_JP.UTF-8)"\
 command="sh -c 'LC_ALL=ja_JP.UTF-8 uxterm'"
</example>
 <item><file>/etc/menu/kterm</file>: (override the system default)
 <footnote>
Use a file name which overwraps with the package name.
 </footnote>
<example>
?package(kterm):\
 needs="x11"\
 section="XShells"\
 command="sh -c 'LC_ALL=ja_JP.eucJP PAGER=w3m /usr/X11R6/bin/kterm -xim'" \
 title="Kanji Terminal"
?package(kterm):\
 needs="x11"\
 section="XShells"\
 command="sh -c 'LANG=ja_JP.eucJP \
          LC_MESSAGES=en_US.ISO-8859-1 PAGER=w3m /usr/X11R6/bin/kterm -xim'" \
 title="Kanji Terminal (bilingal)"
</example>
 <item><file>/etc/menu/mozilla-local</file>: (add a new shortcut)
 <footnote>
 The slash in <tt>section="/"</tt> enables entry to the initial menu,
 and the leading space in <tt>title=" Mozilla Navigator"</tt> enables
 entry to the top of the list.
 </footnote>
<example>
?package(mozilla-browser):needs="x11" section="/" \
        title=" Mozilla Navigator" command="mozilla-1.5" hints="Web browsers" \
        icon=/usr/share/pixmaps/mozilla.xpm
</example>
 <item>run <prgn>update-menus</prgn> from the root account.
 </list>
 <item>add the following lines to <file>~/.muttrc</file> (for Japanese):
<example>
# UTF-8 support is not popular in popular Japanese EMACS environment
# 7-bit encoding of iso-2022-jp is easier for everyone.
# default encoding order = us-ascii --&gt; iso-8859-1 --&gt; iso-2022-jp
set send_charset="us-ascii:iso-8859-1:iso-2022-jp"
set allow_8bit=no
</example>
 <item>activate XIM <prgn>kinput2</prgn> for X applications (for
 Japanese):
  <list compact>
  <item>add <tt>*inputMethod: kinput2</tt> and <tt>KTerm*VT100*OpenIm:
  true</tt> to your X resources file,
  <file>~/.Xresources</file>  (it looks like Debian takes care of this
  automatically somehow).
  <item>Some applications (such as <prgn>mlterm</prgn>) also allow 
  you to set up <tt>*inputMethod:</tt> and other information dynamically 
  at runtime (press <strong>Ctrl-MouseButton-3</strong> in <prgn>mlterm</prgn>).
  </list>
 <item>start X by typing <tt>startx</tt> or from one of the display
  managers (<prgn>xdm</prgn>, <prgn>gdm</prgn>, <prgn>kdm</prgn>,
  <prgn>wdm</prgn>, ...)  (for all).
 <item>start a Japanese-compatible application such as
  Vim 6, (x)emacs21, mc-4.5, mutt-1.4, ... in <prgn>kterm</prgn>  (for
  Japanese).
  (Emacs seems to be the most popular platform, though I do not use it.)
 <item>press <strong>Shift+Space</strong> to toggle Japanese 
  character input mode on and off (for Japanese).
 <item>read the localized manual page by starting command in localized
 console (for all).
</list>
For other CJK language supports, see the following sections and <url
id="&suse-cjk;" name="SuSE pages for CJK">.

<sect1 id="x-input">Alternative X input methods
<!-- I need feed back from Chinese and Korean people for here -->
<p>
There are many alternative X input methods support packages available:
<example>
Language   LC_CTYPE     XIM server XMODIFIERS              Start key
Japanese   ja_JP*       kinput2    "@im=kinput2"           Shift-Space
Korean     ko_KR*       ami        "@im=Ami"               Shift-Space
Chinese(T) zh_TW.Big5   xcin       "@im=xcin-zh_TW.big5"   Ctrl-Space
Chinese(S) zh_CN.GB2312 xcin       "@im=xcin-zh_CN.GB2312" Ctrl-Space
</example>
<p>
Japanese input method <prgn>kinput2</prgn> is offered by the packages
such as <package>kinput2-canna-wnn</package>,
<package>kinput2-canna</package>, and <package>kinput2-wnn</package>.
Japanese needs dictionary server such as <package>canna</package> and
<package>freewnn-jserver</package> to be practical.

<!--
<p>
Korean and Chinese may also use dictionary server such as 
<package>freewnn-kserver</package> and
<package>freewnn-cserver</package> too.
-->

<sect1 id="x-term">X terminal emulators
<p>
There are many X consoles which support simple 8 bit encodings
when pertinent font packages are installed:
<list compact>
  <item><package>xterm</package> &ndash; The X terminal emulator
  <item><package>gnome-terminal</package> &ndash; <package>xterm</package> 
   for Gnome
  <item><package>konsole</package> &ndash; <package>xterm</package> 
   for KDE
  <item><package>rxvt</package> &ndash; VT102 terminal (lighter)
  <item><package>aterm</package> &ndash; VT102 for Afterstep WM
  <item><package>eterm</package> &ndash; VT102 for Enlightment WM
  <item><package>wterm</package> &ndash; VT102 for WindowMaker WM
</list>
<p>
Multi-byte encoding supports of X console are provided by
<package>xterm</package> through UTF-8 encoding (<ref id="x-utf-8">).
Other traditional encoding supports are in progress (as of 2003).
Following packages offer traditional encoding supports:
<list compact>
  <item><package>aterm-ml</package> &ndash; Multi-lingual
  <item><package>kterm</package> &ndash; Multi-lingual (Japanese, ...)
  <item><package>rxvt-ml</package> &ndash; Multi-lingual
  <item><package>wterm-ml</package> &ndash; Multi-lingual 
  <item><package>cxterm-big5</package> &ndash; Chinese (Trad., Big5)
  <item><package>cxterm-gb</package> &ndash; Chinese (Simp., GB)
  <item><package>cxterm-ks</package> &ndash; Chinese (KS)
  <item><package>cxterm-jis</package> &ndash; Japanese
  <item><package>hanterm-classic</package> &ndash; Korean (Hangul)
  <item><package>hanterm-xf</package> &ndash; Korean (Hangul)
  <item><package>hztty</package> &ndash; Chinese (GB, Big5, zW/HZ)
</list>
For <prgn>kterm</prgn> (and possibly others), you may want to 
activate XIM through menu after Ctrl-middle-click mouse action.

<sect1 id="x-utf-8">UTF-8 support for the X terminal emulator
<p>
UTF-8 support for X terminal emulator is provided by the
<prgn>uxterm</prgn> program in the <package>xterm</package> package for
XFree86 4.x.  It enables support for all languages.  It is a wrapper
around the <manref name="xterm" section="1"> program that invokes the
latter program with the "UXTerm" X resource class set.
<p>
For example, to enable nice large display of English, Russian, Japanese,
Chinese and Korean characters, add following to your
<file>~/.Xresources</file> after installing all the pertinent fonts:
<example>
! set large font
UXTerm*font: -misc-fixed-medium-r-normal-*-18-120-100-100-c-90-iso10646-1
! Use XIM for Japanese
*inputMethod: kinput2
</example> 
Then run <tt>xrdb -merge ~/.Xresources</tt> to update X resources as
described in <ref id="xresources">.
<p>
Although most of the popular console program packages such as
<package>vim</package>, <package>mutt</package>, and
<package>emacs</package> have been made compatible with UTF-8 recently
(Woody-Sarge).  Program such as <package>mc</package> still is not UTF-8
compatible but simply 8-bit clean. If you are editing 7 bit ASCII part
of unknown or mixed encoding file, it is safer to use the locale unaware
8-bit clean editor.
<p>
See <url id="&unicode-howto;" name="The Unicode HOWTO">.

<sect1 id="fb-utf-8">Example for UTF-8 in a framebuffer console
<p>
UTF-8 support on a FB console is provided by <package>bterm</package>
used in the <prgn>debian-installer</prgn>.

<sect1 id="beyond-locale">Beyond locales
<p>
When you are first setting the system up for a <strong>national
language environment</strong>, please consider using
<prgn>tasksel</prgn> or <prgn>aptitude</prgn> to find out what packages
are selected by choosing the corresponding language environment task.
The package choice made is useful even for a multilingual setup.  If
you encounter any package dependency conflicts during the install to
your carefully configured system, avoid installing any software that
conflicts with the existing system.  You may have to use
<prgn>update-alternative</prgn> to regain the original state for some
commands since a newly installed one may have higher priority than
existing ones.
<p>
Newer major programs are using glibc 2.2 and are mostly internationalized.  So
a specially localized version such as <prgn>jvim</prgn> for Vim may not be
needed as its functionality is offered by <prgn>vim</prgn> version 6.0 in X.
In reality, it is still somewhat rough-edged.  Since <prgn>jvim</prgn> has a
version compiled with direct Japanese input method (<prgn>canna</prgn>)
support even in the console and addresses many other Japanese-specific issues
maturely, you may still want it :-)
<p>
Programs may need to be configured beyond <tt>locale</tt> configuration
to enable a comfortable working environment.  The
<package>language-env</package> package and its command
<prgn>set-language-env</prgn> greatly eases this process.
<p>
Also see the internationalization document, <url id="&intro-i18n;" 
name="Introduction to i18n">. It is aimed at developers but is also 
useful for system administrators.
</sect1>

</sect>
</chapt>

