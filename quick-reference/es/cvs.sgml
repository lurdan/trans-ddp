<!-- CVS revision of original english document "1.26"  -->
<!--Line width ruler (ruler uses 78 characters)     34567890123456789012345-->
<chapt id="vcs">Sistemas de control de versiones
<sect id="cvs">CVS

<p>
Consulte <file>/usr/share/doc/cvs/html-cvsclient</file>,
<file>/usr/share/doc/cvs/html-info</file>,
<file>/usr/share/doc/cvsbook</file> con la ayuda de lynx o ejecute
<tt>info cvs</tt> o <tt>man cvs</tt> para una información más detallada.

<sect1 id="cvs-inst">Instalar el servidor CVS
<p>
La siguiente configuración permite que sólo un miembro del grupo "src"
pueda hacer envíos al repositorio CVS (mediante el comando 'commit') y
que la administración del CVS pueda llevarse a cabo únicamente por un
miembro del grupo "staff" de modo de reducir las posibilidades de
conflicto. 
<example>
# cd /var/lib; umask 002 ; sudo mkdir cvs # [WOODY] FSH
# apt-get install cvs cvs-doc cvsbook
# export CVSROOT=<var>/var/lib/cvs</var>
# cd $CVSROOT
# chown root:src .         # "staff": restricción importante para un
                           #  proyecto nuevo
# chmod 3775 .             #  Si usa "staff", escribir 2775
# cvs -d <var>/var/lib/cvs</var> init #  ¡resulta más seguro especificar
                           #  explícitamente -d!
# cd CVSROOT
# chown -R root:staff .
# chmod 2775 .
# touch val-tags 
# chmod 664 history val-tags
# chown root:src history val-tags
</example>
<p>
</sect1>

<sect1 id="cvs-examples">Sesiones CVS de ejemplo
<p>
Lo siguiente configurará el intérprete de comandos para acceso
al repositorio CVS.
<sect2>CVS anónimo (únicamente para descargar)
<p>
Acceso de sólo lectura:
<example>
$ export
CVSROOT=:pserver:<var>anonymous@cvs.qref.sf.net:/cvsroot/qref</var>
$ cvs login
$ cvs -z3 co <var>qref</var>
</example>
</sect2>

<sect2>Uso del servidor CVS local
<p>
Acceso local desde el intérprete de comandos en la misma máquina:
<example>
$ export CVSROOT=<var>/var/lib/cvs</var>
</example>
</sect2>

<sect2>Uso del pserver en un CVS remoto
<p>
Acceso remoto sin SSH (uso del protocolo RSH en el 
<prgn>cvs</prgn>)
<example>
$ export CVSROOT=:pserver:<var>cuenta@cvs.loquesea.com:/var/lib/cvs</var>
$ cvs login
</example>
Propenso a ataques espías.
</sect2>

<sect2>Uso de un CVS remoto mediante <prgn>ssh</prgn>
<p>
Acceso remoto con SSH: 
<example>
$ export CVSROOT=:ext:<var>cuenta@cvs.loquesea.com:/var/lib/cvs</var>
</example>
o para Sourceforge:
<example>
$ export CVSROOT=:ext:<var>cuenta@cvs.qref.sf.net:/cvsroot/qref</var>
</example>
También puede utilizar la autenticación RSA (<ref id="ssh-rsa">), que
evita la solicitud de la contraseña.
</sect2>

<sect2>Crear un archivo CVS nuevo
<p>
Para,
<example>
ITEM                  VALOR                           SIGNIFICADO
Árbol del proyecto:   ~/<var>proyecto-x</var>         Todos los archivos fuente
Nombre del proyecto:  <var>proyecto-x</var>           Nombre para este proyecto
Nombre del proveedor: <var>Rama-principal</var>       Etiqueta para toda la rama
Etiqueta de versión:  <var>Versión-inicial</var>      Etiqueta para una versión
                                                      específica
</example>
Entonces,
<example>
$ cd ~/<var>proyecto-x</var>          # para entrar en el directorio del proyecto
 ... crear un árbol ...
$ cvs import -m <var>"Comienzo del proyecto-x" proyecto-x Rama-principal Versión-inicial</var>
$ cd ..; rm -R <var>~/proyecto-x</var>
</example>
</sect2>

<sect2>Trabajando con CVS
<p>
Para recordar y trabajar con los fuentes locales del <var>proyecto-x</var> en un
archivo CVS:
<example>
$ cd                            # para ubicarse en la zona de trabajo.
$ cvs co <var>proyecto-x</var>             # copia los fuentes del repositorio CVS
                                # a la máquina local
$ cd <var>proyecto-x</var>
 ... efectuar los cambios ...
$ cvs diff -u                   # similar a diff -u repository/ local/
$ cvs ci -m "<var>Describir cambio</var>"  # guarda los fuentes locales en el CVS
$ vi <var>archivo_nuevo</var>
$ cvs add <var>archivo_nuevo</var>
$ cvs ci -m "<var>Se añadió archivo_nuevo</var>"
$ cvs up                  # actualiza a la última versión del CVS
 ... cuidado con las líneas que comienzan con "C <var>nombre_archivo</var>"
 ... el código sin modificar se renombra como `.#<var>nombre_archivo</var>.version'.
 ... Busque "&lt;&lt;&lt;&lt;&lt;&lt;&lt;" y "&gt;&gt;&gt;&gt;&gt;&gt;&gt;" en
     <var>nombre_archivo</var>.

$ cvs tag <var>Release-1</var>       # añade etiqueta de versión
... hacer otras modificaciones ...
$ cvs tag -d <var>Release-1</var>    # elimina etiqueta de versión
$ cvs ci -m "<var>otros comentarios</var>"
$ cvs tag <var>Release-1</var>       # vuelve a añadir la etiqueta de versión
$ cd                      # para volver al área de trabajo.
$ cvs co -r <var>Versión-inicial</var> -d <var>antiguo</var> <var>proyecto-x</var> 
... obtiene la versión original y la ubica en el directorio '<var>antiguo</var>'
$ cd antiguo
$ cvs tag -b <var>Versión-inicial-modif</var> # crea la etiqueta de la rama (-b)
 ... Ahora puede trabajar sobre la versión original (Etiqueta=sticky)
$ cvs update
 ... El árbol de fuentes tiene ahora la etiqueta sticky "Versión-inicial-modif"
 ... Trabaje en esta rama
$ cvs up              # sicroniza los cambios en la rama con el resto
$ cvs ci -m "<var>verificación hecha en la rama</var>"
$ cvs update -kk -A
 ... Elimina la etiqueta sticky y descarta el contenido
 ... Actualiza  desde el tronco principal sin reemplazar palabras claves
$ cvs update -kk -j <var>Versión-inicial-modif</var>
 ... Añade rama  <var>Versión-inicial-modif</var> en el tronco
 principal 
 ... sin el reemplazo de palabras claves. Resolver confictos con el editor.
$ cvs ci -m "<var>Creación Versión-inicial-modif</var>"
$ cd
$ tar -cvzf <var>antiguo-proyecto-x.tar.gz</var> <var>antiguo</var>  # crear
archivo, -j para bz2
$ cvs release -d <var>antiguo</var>     # eliminar fuentes locales (opcional)
</example>

<example>
-n      no ejecuta ningún comando que cambie el disco
-t      muestra los mensajes de la actividad en el cvs
</example>
</sect2>

<sect2>Exportar archivos desde el CVS
<p>
Para obtener la última versión del CVS use "tomorrow":
<example>
$ cvs ex -D tomorrow <var>nombre_módulo</var>
</example>
</sect2>

<sect2>Administrar el CVS
<p>
Añadir un alias al proyecto (servidor local):
<example>
$ su - admin           # un miembro del equipo
$ export CVSROOT=<var>/var/lib/cvs</var>
$ cvs co CVSROOT/modules
$ cd CVSROOT
$ echo "<var>px</var> -a <var>proyecto-x</var>" &gt;&gt;modules
$ cvs ci -m "<var>Ahora px es un alias del proyecto-x</var>"
$ cvs release -d .
$ exit                 # control-D para salir de 'su'
$ cvs co -d <var>proyecto</var> <var>px</var> 
 ... <var>proyecto-x</var> (<var>alias:px</var>) del CVS al directorio proyecto
$ cd proyecto
 ... realizar cambios ...
</example>
</sect2>

<sect1 id="cvs-trouble">Resolución de problemas 

<sect2>Permisos de los archivos en el repositorio
<p>
CVS no sobreescribe el archivo del repositorio actual sino que lo
reemplaza por otro. Por lo tanto el <em>permiso de escritura en el
directorio del repositorio</em> resulta crítico. Cada vez que se cree
un nuevo repositorio ejecute lo siguiente para evitar cualquier
problema.
<example>
# cd <var>/var/lib/cvs</var>
# chown -R root:src <var>repositorio</var>
# chmod -R ug+rwX   <var>repositorio</var>
# chmod    2775     <var>repositorio</var>  # si es necesario para éste y sus
                                            # subdirectorios
</example>
</sect2>

<sect2>El bit de ejecución 
<p>
Cuando se abandona la sesión (check-out) se conserva el bit de
ejecución.  Ante cualquier problema de permisos de ejecución sobre
un archivo puede cambiar sus permisos en el repositorio CVS con el
siguiente comando.
<example>
# chmod ugo-x <var>nombre_archivo</var>
</example>
</sect2>

</sect1>

<sect1 id="cvs-short">Comandos del CVS
<p>
Veamos los comandos del CVS con sus respectivos atajos.
<example>
{add|ad|new} [-k kflag] [-m 'mensaje'] archivos...
{admin|adm|rcs} [opciones-rcs] archivos...
{annotate|ann} [opciones] [archivos...]
{checkout|co|get} [opciones] módulos...
{commit|ci|com}   [-lnR]  [-m  'mensaje_registro'  |  -f  archivo] \
        [-r revision] [archivos...]
{diff|di|dif} [-kl] [opciones_rcsdiff] [[-r rev1 | -D fecha1] \
        [-r rev2 |  -D fecha2]] [archivos...]
{export|ex|exp} [-flNn] -r rev|-D fecha [-d dir] [-k kflag] módulo...
{history|hi|his} [-report] [-flags] [-options args] [archivos...]
{import|im|imp} [-options] repositorio nombre_proveedor etiq_versión...
{login|logon|lgn}
{log|lo|rlog} [-l] opciones-rlog [archivos...]
{rdiff|patch|pa} [-flags] [-V vn] [-r t|-D d [-r t2|-D d2]] módulos...
{release|re|rel} [-d] directorios...
{remove|rm|delete} [-lR] [archivos...]
{rtag|rt|rfreeze} [-falnR]  [-b]  [-d]  [-r  etiqueta  |  -D  fecha] \
         sym_bolic_tag módulos...
{status|st|stat} [-lR] [-v] [archivos...]
{tag|ta|freeze} [-lR] [-F] [-b] [-d] [-r etiqueta | -D fecha]  [-f] \
         sym_bolic_tag [archivos...]
{update|up|upd} [-AdflPpR] [-d] [-r tag|-D fecha] archivos...
</example>
</sect1>
<sect id="svn">Subversion
<p>
Subversion es la siguiente generación del sistema de control 
de versiones destinado a reemplazar CVS.  Actualmente, los desarrolladores
consideran que se encuentra en la etapa "alfa" pero es muy 
probable que sea lo suficientemente estable para la mayoría de los
usuarios. A la fecha de escribir este documento, Subversion se encuentra
en la rama inestable de Debian.
<sect1 id="svn-inst">Instalando el servidor Subversion
<p>
El metapaquete <package>subversion-server</package> depende de los
paquetes <package>libapache2-dav-svn</package> y
<package>subversion-tools</package> necesarios para configurar el servidor.
<sect2>Configurando un repositorio
<p>
Actualmente, el paquete <package>subversion</package> no configura el
repositorio y, por lo tanto, hay que hacerlo en forma manual.  Una 
posible ubicación del repositorio es <file>/var/local/repos</file>.
<p>
Cree el directorio:
<example>
# mkdir -p /var/local/repos
</example>
Cree la base de datos del repositorio:
<example>
# svnadmin create /var/local/repos
</example>
Permitir que el servidor www escriba en el repositorio:
<example>
# chown -R www-data:www-data /var/local/repos
</example>
</sect2>
<sect2>Configurando Apache2
<p>
Para permitir el acceso al repositorio mediante la autenticación
de usuario, añada lo siguiente al <file>/etc/apache2/httpd.conf</file>:
<example>
&lt;Location /repos&gt;
  DAV svn
  SVNPath /var/local/repos
  AuthType Basic
  AuthName "Repositorio Subversion"
  AuthUserFile /etc/subversion/passwd
  Require valid-user
&lt/Location&gt
</example>
A continuación, cree el archivo de autenticación de usuario 
mediante el comando:
<example>
htpasswd2 -c /etc/subversion/passwd nombre_usuario
</example>
Reinicie Apache2 y podrá acceder al nuevo repositorio de subversion
desde la URL http://<var>nombre_máquina</var>/repos.
</sect2>
</sect1>
<sect1 id="svn-cvs">Migrando un repositorio CVS a Subversion
</sect1>
<sect1 id="svn-usage">Ejemplos de uso de Subversion
</sect1>
</sect>

</chapt>


