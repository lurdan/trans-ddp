<!-- CVS revision of this document "$Revision: 1.2 $"  -->
<!-- CVS revision of original english document "1.36"  -->

<chapt id="kernel">The Linux kernel under Debian

<p>
Debian has its own method of recompiling the kernel and related modules.

<sect id="kernel-compile">Kernel recompile

<sect1 id="kernel-debian">Debian standard method
<p>
Use the new <package>kernel-package</package> in unstable (7/2001).  Also, some arguments to
the <prgn>tar</prgn> command changed between Potato and Woody, so use <tt>-j</tt> instead
of <tt>-I</tt> for <file>.bz2</file>.  Also watch out for bug reports on
<prgn>gcc</prgn>, <prgn>binutils</prgn>, and <prgn>modutils</prgn>.
<p>
Compiling a custom kernel from source under a Debian system requires special
care.  Use the new <tt>--append_to_version</tt> with
<prgn>make-kpkg</prgn> to build multiple kernel-images.
<example>
# apt-get install debhelper modutils kernel-package libncurses5-dev
# apt-get install kernel-source-2.4.12   # use latest version
# vi /etc/kernel-pkg.conf                # input my name and email
$ cd /usr/src                            # build directory
$ tar -xvjf kernel-source-2.4.12.tar.bz2
$ cd kernel-source-2.4.12                # if this is your kernel source
$ rm -rf */pcmcia 
    # [OPTIONAL] if one wants to use modules from pcmcia-cs or no pcmcia
$ cp /boot/config-2.4.12-386 .config     # get current config as default
$ make menuconfig                        # customize as one wishes
$ make-kpkg clean                        # must run (per: man make-kpkg)
$ fakeroot make-kpkg --append_to_version -486 --initrd \
        --revision=rev.01 kernel_image
$ cd ../modules/pcmcia
$ fakeroot ./debian/rules
$ cd ../..
# dpkg -i kernel-image*.deb pcmcia-cs*.deb # install
</example>
<tt>make-kpkg kernel_image</tt> actually does <tt>make oldconfig</tt>
and <tt>make dep</tt>.  Do not use <tt>--initrd</tt> if initrd is not used.
<p>
One can avoid <tt>rm -fr */pcmcia</tt> by selecting "General setup  &mdash;&gt;" 
to "PCMCIA/CardBus support  &mdash;&gt;" in <tt>make menuconfig</tt> and setting 
configuration as "&lt;&nbsp;&gt; PCMCIA/CardBus support". 
</sect1>

<sect1 id="kernel-classic">Classic method
<p>
Get pristine sources from:
<list compact>
<item>Linux:     <url id="&linuxsrc;">
<item>pcmcia-cs: <url id="&pcmciasrc;">
</list>
or use equivalent source in Debian and do the following:
<example>
# cd /usr/src
# tar xfvz linux-whatever.tar.gz
# rm -rf linux
# ln -s linux-whatever linux
# tar xfvz pcmcia-cs-whatever.tar.gz
# ln -s pcmcia-cs-whatever pcmcia
# cd linux
# rm -rf */pcmcia   
    # [OPTIONAL] if one wants to use modules from pcmcia-cs or no pcmcia
# make menuconfig
... configure stuff ...
# make dep
# make bzImage
... edits for lilo / grub ...
... move /usr/src/linux/arch/i386/boot/bzImage to boot ...
... /sbin/lilo or whatever you do for grub
# make modules; make modules_install
# cd ../pcmcia
# make config
# make all
# make install
... add needed module names to /etc/modules
# shutdown -r now
... boot to new kernel ...
</example>
Use of <prgn>gcc</prgn>, <prgn>binutils</prgn>, and
<prgn>modutils</prgn> from Debian unstable may help.
</sect1>

</sect>

<sect id="kernel-modules">The modularized 2.4 kernel
<p>
The new Debian 2.4 kernels are very modularized.  You have to make sure those
modules are present to make the kernel function as you intend. 
<sect1 id="kernel-pcmcia">PCMCIA
<p>
<file>/etc/modules</file> needs to contain the following for PCMCIA to function:
<example>
# ISA PnP driver
isa-pnp
# Low level PCMCIA driver
# yenta_socket # does not seem to be needed im my case
</example>
The rest is taken care of by pcmcia scripts (from the
<package>pcmcia-cs</package> package),
<prgn>depmod</prgn> and <prgn>kmod</prgn>.  I think I needed
<prgn>isa-pnp</prgn> because my laptop is an old
isa-pcmcia.  Recent laptops with cardbus-pcmcia may not require this. 
<p>
Voice of the generous Miquel van Smoorenburg
<email>miquels@cistron.nl</email>
<p>
I simply removed the entire pcmcia
stuff from the laptop here at work, including the cardmgr etc
and just installed a 2.4 kernel with cardbus support, and the
new "hotplug" package from Woody.
<p>
As long as you only have 32-bit cards you don't need the pcmcia
package; 2.4 has cardservices built in.
And the standard tulip driver should work fine with your dlink card.
<p>
&mdash;Mike.
</sect1>

<sect1 id="kernel-scsi">SCSI
<p>  <!-- Osamu: maybe test this section? -->
[NOT TESTED] <file>/etc/modules</file> needs to contain the following
for SCSI to function:
<example>
# SCSI core
scsi_mod
# SCSI generic driver
sg
# SCSI disk
sd_mod
# All other needed HW modules
...
</example>
<prgn>depmod</prgn> may take care of some of the above modules.
</sect1>

<sect1 id="kernel-net">Network function
<p>
<file>/etc/modules</file> needs to contain the following for extra network function:
<example>
# net/ipv-4
ip_gre
ipip

# net/ipv-4/netfilter
# iptable (in order)
ip_tables
ip_conntrack
ip_conntrack_ftp
iptable_nat
iptable_filter
iptable_mangle
#
ip_nat_ftp
ip_queue
#
ipt_LOG
ipt_MARK
ipt_MASQUERADE
ipt_MIRROR
ipt_REDIRECT
ipt_REJECT
ipt_TCPMSS
ipt_TOS
ipt_limit
ipt_mac
ipt_mark
ipt_multiport
ipt_owner
ipt_state
ipt_tcpmss
ipt_tos
ipt_unclean
#
#ipchains
#ipfwadm
</example>
The preceding may not be optimized. <prgn>depmod</prgn> may take care of
some of the above modules.
</sect1>

<sect1 id="ext3">EXT3 filesystem ( &gt; 2.4.17)
<p>
Enabling a journaling filesystem with the EXT3 FS involves the following steps
using a Debian precompiled kernel-image ( &gt; 2.4.17):
<example>
# cd /etc; mv fstab fstab.old
# sed 's/ext2/ext3,ext2/g' &lt;fstab.old &gt;fstab
# vi /etc/fstab
... set root filesystem type to "auto" instead of "ext3,ext2"
# cd /etc/mkinitrd
# echo jbd &gt;&gt;modules
# echo ext3 &gt;&gt;modules
# echo ext2 &gt;&gt;modules
# cd /
# apt-get update; apt-get install kernel-image-2.4.17-686-smp
... install latest kernel and set up boot (lilo is run here)
# tune2fs -j -i 0 /dev/hda1
# tune2fs -j -i 0 /dev/hda2 
... For all EXT2 FS's converted to EXT3
# shutdown -r now
</example>
Now EXT3 journaling is enabled. 
Using <tt>ext3,ext2</tt> as the <prgn>fstab</prgn> "type" entry
ensures safe fallback to EXT2 if the kernel does not support EXT3
for non-root partitions.
<p>
If you have previously installed a 2.4 kernel and do not wish to reinstall,
perform the above steps up to the <prgn>apt-get</prgn> commands, then:
<example>
# mkinitrd -o /boot/initrd.img-2.4.17-686-smp /lib/modules/2.4.17-686-smp
# lilo
# tune2fs -j -i 0 /dev/hda1
# tune2fs -j -i 0 /dev/hda2
... for all EXT2 FS's converted to EXT3
# shutdown -r now
</example>
Now EXT3 journaling is enabled. 
<p>
If <file>/etc/mkinitrd/modules</file> was not set when
<prgn>mkinitrd</prgn> was run and you would like to add some modules at
boot time:
<example>
... at initrd prompt to gain shell (5 sec.), type RETURN
# insmod jbd
# insmod ext3 # modprobe ext3 may take care of everything
# insmod ext2
# ^D
... continue booting
</example>
At the system boot screen (<prgn>dmesg</prgn>), "cramfs: wrong magic"
appears but this is known to be harmless.  (This will be resolved in a
later release.)
<p>
Some systems experience severe kernel lock-up if EXT3 is enabled 
(as of 2.4.17). 
</sect1>

<sect1 id="ss-rtl8139">Realtek RTL-8139 support in 2.4
<p>
For whatever reason, the RTL-8139 support module is no longer called rtl8139,
it's now called 8139too.  Just edit your <file>/etc/modules</file> to reflect
this change when upgrading a 2.2 kernel to a 2.4 kernel.
</sect1>

</sect>
</chapt>
