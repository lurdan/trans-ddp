<!-- CVS revision of original english document "1.49"  -->

<chapt id="kernel">El kernel de Linux en Debian
<p>
Debian tiene su propio método de recompilar el kernel y sus módulos
asociados. Véase también <ref id="kernel-details">.

<sect id="kernel-compile">Recompilación del kernel
<p>
La utilización de <prgn>gcc</prgn>, <prgn>binutils</prgn> y
<prgn>modutils</prgn> de la rama <tt>unstable</tt> de Debian puede resultar de
ayuda al compilar el kernel de linux más reciente. Véase
<file>&f-kernel-readme;</file> de la información oficial (en especial la parte
inferior de ésta)
<p>
Puesto que es un tema dinámico, la compilación del kernel es un asunto difícil
que puede confundir incluso a los desarrolladores más admirados:
<taglist compact>
<tag>Manoj Srivastava escribió:
<item><tt>--initrd</tt> requiere de un parche cramfs de Debian.
<tag>Herbert Xu escribió:
<item>No, no es así. Para usar un sistema de archivos diferente al CRAMFS 
hay que configurar MKIMAGE en el <file>/etc/mkinitrd/mkinitrd.conf</file>.
</taglist>
<p>
Sea cuidadoso y consulte siempre el <file>&f-kernel-readme;</file> de Manoj y
Kent.  Asegúrese de obtener la última versión inestable del paquete
<package>kernel-package</package> si va a compilar la versión más reciente del
kernel.
<p>
<tt>initrd</tt> no es necesario para un kernel compilado para una única
máquina.  Lo uso porque deseo que mi kernel sea casi el mismo que el
proporcionado por el kernel-image.  Si utiliza <tt>initrd</tt>, asegúrese de
leer 
<manref name="mkinitrd" section="8"> y
<manref name="mkinitrd.conf" section="5">.  Véase también
<url id="&bug-initrd;">.

<sect1 id="kernel-debian">Método Debian estándar
<p>
Preste atención a los informes de fallos de los paquetes
<package>kernel-package</package>, <prgn>gcc</prgn>, <prgn>binutils</prgn> y
<prgn>modutils</prgn>.  Si es necesario utilice las versiones más recientes.
<p>
Compilar en un sistema Debian un kernel personalizado a partir de los fuentes
exige de un cuidado especial. Utilice la nueva opción
<tt>--append_to_version</tt> de <prgn>make-kpkg</prgn> para crear múltiples
imágenes del kernel.
<example>
# apt-get install debhelper modutils kernel-package libncurses5-dev
# apt-get install kernel-source-<var>2.4.18</var> # utilice la versión más
                                                  # reciente
# vi /etc/kernel-pkg.conf                # escriba su nombre y dirección
                                         # electrónica
$ cd /usr/src                            # cree el directorio
$ tar --bzip2 -xvf kernel-source-<var>2.4.18</var>.tar.bz2
$ cd kernel-source-<var>2.4.18</var>     # si este es el código fuente de su
                                         # kernel
$ rm -rf */pcmcia 
    # [OPCIONAL] si uno desea usar los módulos de pcmcia-cs 
$ cp /boot/config-<var>2.4.18-386</var> .config  # tomar configuración
                                           # actual como predeterminada
$ make menuconfig            # personalizar a gusto
$ make-kpkg clean            # indispensable (consultar: man make-kpkg)
$ fakeroot make-kpkg --append_to_version -<var>486</var> --initrd \
        --revision=<var>rev.01</var> kernel_image \
        modules_image # modules_image para pcmcia-cs* etc.
$ cd ..
# dpkg -i kernel-image*.deb pcmcia-cs*.deb # instalar
</example>
En realidad, <tt>make-kpkg kernel_image</tt> ejecuta <tt>make oldconfig</tt>
y <tt>make dep</tt>.  No utilice <tt>--initrd</tt> si no va a usar initrd.
<p>
Se puede evitar hacer <tt>rm -fr */pcmcia</tt> seleccionado "General setup
&mdash;&gt;" en "PCMCIA/CardBus support  &mdash;&gt;" en <tt>make
menuconfig</tt> y tomar como configuración "&lt;&nbsp;&gt; PCMCIA/CardBus
support" (es decir, destilde la casilla de verificación).
<p>
En una máquina SMP, configure CONCURRENCY_LEVEL de acuerdo con el
<manref name="kernel-pkg.conf" section="5">.
</sect1>

<sect1 id="kernel-classic">Método clásico
<p>
Obtenga los fuentes nuevos de:
<list compact>
<item>Linux:     <url id="&linuxsrc;">
<item>pcmcia-cs: <url id="&pcmciasrc;">
</list>
o utilice el fuente de Debian equivalente y haga lo siguiente:
<example>
# cd /usr/src
# tar xfvz linux-<var>loquesea</var>.tar.gz
# rm -rf linux
# ln -s linux-<var>loquesea</var> linux
# tar xfvz pcmcia-cs-<var>loquesea</var>.tar.gz
# ln -s pcmcia-cs-<var>loquesea</var> pcmcia
# cd linux
# rm -rf */pcmcia   
    # [OPCIONAL] si desea usar los módulos de pcmcia-cs
# make menuconfig
... lo relativo a la configuración ...
# make dep
# make bzImage
... edite lilo / grub ...
... mueva /usr/src/linux/arch/i386/boot/bzImage al directorio boot ...
... /sbin/lilo o lo que corresponda si usa grub
# make modules; make modules_install
# cd ../pcmcia
# make config
# make all
# make install
... añada los nombres de los módulos que se necesitan al /etc/modules
# shutdown -r now
... arranque con el nuevo kernel ...
</example>
</sect1>

<sect1 id="kernel-headers">Cabeceras del kernel
<p> La mayoría de los programas "normales" no necesitan las cabeceras del
núcleo y de hecho pueden corromperse si se las usa directamente; en cambio,
deben compilarse usando las cabeceras con las que fueron creadas las
<strong><prgn>glibc</prgn></strong> que en un sistema &debian; se encuentran
en los directorios <file>/usr/include/linux</file> y
<file>/usr/include/asm</file>.
<p>
Por lo tanto no cree  enlaces simbólicos al directorio
<file>/usr/src/linux</file> desde <file>/usr/include/linux</file> y
<file>/usr/include/asm</file>, como lo sugieren algunos documentos
desactualizados.
<p>
Si <strong>necesita</strong> las cabeceras del un kernel en particular
para algunas aplicaciones específicas que así lo requieran, altere
el <file>Makefile</file>(s) de modo de incluir las rutas correspondientes
<file><var>dir-de-las-cabeceras-de-un-kernel-en-particular</var>/include/linux</file>
y
<file><var>dir-de-las-cabeceras-de-un-kernel-en-particular</var>/include/asm</file>.
</sect1>

</sect>

<sect id="kernel-modules">El kernel modular 2.4
<p>
Los nuevos núcleos 2.4 de debian proporcionados por el paquete
kernel-image-2.4.<var>NN</var> están muy modularizados.  Debe asegurarse que
los módulos estén activados para hacer que el kernel funcione como se
pretende. 
<p>
Si bien hay numerosos ejemplos de <file>/etc/modules</file> en la siguiente
sección, me han dicho que la manera adecuada de corregir los problemas
relacionados con los módulos consiste en crear un alias para el dispositivo en
un archivo situado en <file>/etc/modutils/</file> ya que en los núcleos
actuales hay suficientes alias disponibles.
<p>
Véase <file>Documentation/*.txt</file> en los fuentes de Linux para una
información detallada.

<sect1 id="kernel-pcmcia">PCMCIA
<p>
<file>/etc/modules</file> necesita incluir lo siguiente para que funcione
PCMCIA:
<example>
# controlador PnP ISA
isa-pnp
# Controlador PCMCIA de bajo nivel
# yenta_socket # en mi caso no parece ser necesario
</example>
Del resto se encarga los scripts PCMCIA (del paquete
<package>pcmcia-cs</package>),
<prgn>depmod</prgn> y <prgn>kmod</prgn>. Creo que necesité de
<prgn>isa-pnp</prgn> ya que mi portátil es una antigua
ISA-PCMCIA.  Las portátiles actuales con CardBus/PCMCIA no necesitan de él. 
<p>
Miquel van Smoorenburg <email>miquels@cistron.nl</email> dijo:
<p>
"Simplemente eliminé todo lo referente a pcmcia
de la PC portátil de mi trabajo, incluyendo cardmgr,
e instalé el kernel 2.4 con soporte cardbus y el nuevo paquetee
<package>hotplug</package> de woody.
<p>
Mientras posea únicamente tarjetas de 32 bits, no necesitará el paquete pcmia;
2.4 incluye servicios incorporados para tarjetas.  El controlador estándar
tulip debería funcionar correctamente con su tarjeta dlink.
<p>
&mdash;Mike."
</sect1>

<sect1 id="kernel-scsi">SCSI
<p>  <!-- Osamu: maybe test this section? I do not have SCSI :(  
                                     But this is almost sure :) -->
[SIN PROBAR] <file>/etc/modules</file> necesita incluir lo siguiente para que
funcione SCSI:
<example>
# núcleo SCSI
scsi_mod
# controlador SCSI genérico
sg
# disco SCSI
sd_mod
# Todos los módulos necesario para el hardware
...
</example>
<prgn>depmod</prgn> puede encargarse de algunos de los módulos anteriores.
</sect1>

<sect1 id="kernel-net">Funciones de Red
<p>
<file>/etc/modules</file> debe incluir lo siguiente para funciones de
red adicionales:
<example>
# net/ipv-4
ip_gre
ipip

# net/ipv-4/netfilter
# iptable (en orden)
ip_tables
ip_conntrack
ip_conntrack_ftp
iptable_nat
iptable_filter
iptable_mangle
#
ip_nat_ftp
ip_queue
#
ipt_LOG
ipt_MARK
ipt_MASQUERADE
ipt_MIRROR
ipt_REDIRECT
ipt_REJECT
ipt_TCPMSS
ipt_TOS
ipt_limit
ipt_mac
ipt_mark
ipt_multiport
ipt_owner
ipt_state
ipt_tcpmss
ipt_tos
ipt_unclean
#
#ipchains
#ipfwadm
</example>
Lo anterior puede no estar optimizado. <prgn>depmod</prgn> puede encargarse de 
algunos de los módulos anteriores.
</sect1>

<sect1 id="ext3">Sistema de archivos EXT3 ( &gt; 2.4.17)
<p>
Para activar el sistema de archivos transaccional EXT3 usando el paquete
precompilado kernel-image ( &gt; 2.4.17) de Debian hay que seguir los
siguientes pasos:
<example>
# cd /etc; mv fstab fstab.antiguo
# sed 's/ext2/ext3,ext2/g' &lt;fstab.antiguo &gt;fstab
# vi /etc/fstab
... fijar el sistema de archivos raíz en "auto" en vez de "ext3,ext2"
# cd /etc/mkinitrd
# echo jbd &gt;&gt;modules
# echo ext3 &gt;&gt;modules
# echo ext2 &gt;&gt;modules
# cd /
# apt-get update; apt-get install kernel-image-<var>2.4.17-686-smp</var>
... intale el último kernel y configure el arranque (en este caso se ejecuta lilo)
# tune2fs -j -i 0 <var>/dev/hda1</var>
# tune2fs -j -i 0 <var>/dev/hda2</var>
... Para todos los sistemas de archivos EXT2 convertidos en EXT3
# shutdown -r now
</example>
El sistema transaccional EXT3 se encuentra ahora habilitado. 
Una entrada "type" <tt>ext3,ext2</tt> en el <prgn>fstab</prgn> 
permite una migración segura a EXT2 si el núcleo no soporta EXT3
para particiones diferentes a la partición raíz.
<p>
Si ya tiene instalado un kernel 2.4 y no desea reinstalarlo,
realice los pasos anteriores a los comandos <prgn>apt-get</prgn>, y a continuación:
<example>
# mkinitrd -o /boot/initrd.img-<var>2.4.17-686-smp</var> /lib/modules/<var>2.4.17-686-smp</var>
# lilo
# tune2fs -j -i 0 <var>/dev/hda1</var>
# tune2fs -j -i 0 <var>/dev/hda2</var>
... para todos los sistemas de archivos EXT2 convertidos a EXT3
# shutdown -r now
</example>
El sistema transaccional EXT3 se encuentra ahora habilitado.
<p>
Si <file>/etc/mkinitrd/modules</file> no ha sido configurado cuando
<prgn>mkinitrd</prgn> fue ejecutado y le gustaría añadir algunos módulos
en tiempo de arranque:
<example>
... en el indicador de initrd pulse ENTER (5 seg.) para acceder al intérprete
de comandos
# insmod jbd
# insmod ext3 # modprobe ext3 puede hacerse cargo de todo
# insmod ext2
# ^D
... continua el arranque
</example>
En los mensajes del arranque del sistema (<prgn>dmesg</prgn>), puede aparecer
la frase "cramfs: wrong magic" que no acarrea ninguna consecuencia.  Este
problema se ha resuelto en Sarge (2002/10).  Véase <url id="&bug-ext3;"> y el
<url id="&howtoext3;" name="EXT3 File System mini-HOWTO"> o
<file>&f-howtoext3;</file> para más información.
<p>
Se ha informado sobre graves cuelgues del kernel al activar 
EXT3 pero no he tenido ningún problema (con el 2.4.17). 
</sect1>

<sect1 id="ss-rtl8139">Soporte Realtek RTL-8139 en el kernel 2.4
<p>
Por alguna razón, el módulo que soporta RTL-8139 ya no se llama rtl8139 sino
8139too.  Simplemente edite su <file>/etc/modules</file> para reflejar este
cambio al pasar del kernel 2.2 al 2.4.
</sect1>

<sect1 id="parport">Soporte puerto paralelo
<p>
En el <package>kernel-image-2.4.*</package>, el soporte del puerto paralelo es
proporcionado mediante un módulo. Actívelo haciendo:
<example>
# modprobe lp
# echo lp >> /etc/modules
</example>
Véase <file>Documentation/parport.txt</file> del código fuente de Linux.

</sect1>

<sect1 id="proc-sys">Demasiado archivos abiertos
<p>
El kernel de Linux puede quejarse diciendo "Too many open files" ("Demasiado
archivos abiertos").  Esto es debido al pequeño valor predeterminado (8096) de
<tt>file-max</tt>. Para solucionar este problema, ejecute el siguiente comando
como superusuario (o escriba lo siguiente en un script init del directorio
<file>/etc/rcS.d/*</file>).
<example>
# echo "65536"  >/proc/sys/fs/file-max  # para los núcleos 2.2 y 2.4 
# echo "131072" >/proc/sys/fs/inode-max # únicamente para el núcleo 2.2 
</example>
Para más información sobre cómo cambiar los parámetros del kernel mediante los
archivos de <file>/proc</file> del sistema, lea
<file>Documentation/sysctl/*</file> del código fuente de Linux.
<p>
Véase los ejemplos de otras manipulaciones de los parámetros del kernel en 
<file>/etc/init.d/networking</file> y <ref id="killecn">.
</sect1>

</sect>
</chapt>
