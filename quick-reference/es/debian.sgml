<!-- CVS revision of this document "$Revision: 1.3 $"  -->
<!-- CVS revision of original english document "1.29"  -->
<!--Line width ruler (ruler uses 78 characters) 34567890123456789012345-->

<chapt id="package">Gestión de paquetes Debian

<p>
Asegúrese de configurar un proxy HTTP local utilizando <prgn>squid</prgn> para los
paquetes bajados con APT. Esto mejora considerablemente las actualizaciones via la Red,
especialment con varios sistemas Debian en la LAN. Este documento está basado en
el sistema Woody pero tambíen se aplica a Potato (excepto para
<manref name="apt_preferences" section="5"> y asuntos relativos a 
<file>/etc/preferences)</file>).

<sect id="pkg-intro">Introducción
<p>
Si esto es mucho pedir, lea este documento primero y
empieze a disfrutar de la potencia de Debian con testing/unstable :-)

<sect1>Herramientas principales
<p>
<example>
dselect     - Gestion de paquetes via menu (primer nivel)
apt-get     - Instala un paquete (package-archive centric, APT)
dpkg        - Instala un paquete (package-file centric)
aptitude & deity - Futuros remplazos para dselect (GUI APT)
</example>
Estas herramientas no son todas de mismo nivel. <prgn>dselect</prgn> se ejecuta por encima de APT
(las líneas de comando son: <prgn>apt-get</prgn>) y <prgn>dpkg</prgn>.
Cuando se utilize <prgn>dselect</prgn>, asegurarse de actualizar el fichero de estado (utilizando
[U]pdate en el menu) antes de la selección si ha instalado paquetes con
<prgn>apt-get</prgn>.
<p>
As for package dependencies, <prgn>apt-get</prgn> automatically pulls 
in packages with <em>depends</em> but leaves packages with 
<em>suggests</em> and <em>recommends</em>, while <prgn>dselect</prgn> offers fine-grained control 
over choices of these packages.  See <ref id="depends">.
</sect1>

<sect1>Herramientas convenientes
<p>
<example>
apt-cache         - consulta el archivo de paquetes en el "cache" local
dpkg-reconfigure  - lanza el proceso de reconfiguración de un paquete ya instalado
dpkg-source       - gestion de los paquetes de codigo fuente
dpkg-buildpackage - construcción automatizada de paquetes
...
</example>
</sect1>
</sect>

<sect id="survival">Comandos de supervivencia Debian
<p>
Con este conocimiento, se puede vivir eternamente de "upgrades" :-)
<p>
Refiérase tambíen a <ref id="install"> and <ref id="woody">.

<sect1 id="tasksel">Instalar <var>task</var> con <prgn>tasksel</prgn>
<p>
<prgn>tasksel</prgn> es el <em>Debian Task Installer</em>, el cúal es 
el "<tt>simple</tt>" método para instalar el sistema.
<p>
Cuando se necesita instalar una función común que requiere varios paquetes
esta es la mejor manera. Asegúrese de ejecutar como sigue :
<example>
# dselect update
# tasksel
</example>
</sect1>

<sect1 id="apt-install">Instalar el sistema con APT
<p>
Se puede instalar selectivamente paquetes desde archivos diferentes utilizando versiones más
recientes de <prgn>apt-get</prgn> (&gt;Woody). Esto activará la actualización selectiva hacia
"unstable" y desactualización selectiva hacia "stable" mientras se sigue vigilando "testing".
<example>
# apt-cache policy libc6 libc6-dev locales         # verifica el estado
# apt-get install libc6=2.2.4-1 libc6-dev=2.2.4-1 locales=2.2.4-1
# apt-get install libc6/unstable libc6-dev/unstable locales/unstable
# apt-get install -t unstable libc6 libc6-dev locales
# apt-get -u install interesting-new-package remove-package-
# apt-get remove useless-old-package
# apt-get remove --purge really-useless-old-package
</example>
<p>
Para desactualizar todos los paquetes hacia "stable", modifique <file>/etc/apt/preferences</file> como sigue:
<example>
Package: *
Pin: release a=stable
Pin-Priority: 1001
</example>
y lanze <tt>apt-get upgrade</tt>, esto provoca la desactualización por causa de la variable Pin-priority &gt; 1000.
</sect1>

<sect1 id="apt-upgrade">Actualizar con APT
<p>
Actualizar el sistema con APT:
<example>
# apt-get update
... siguiendo con lo siguiente:
# apt-get -u upgrade         # instala según recomendado
# apt-get -u dist-upgrade    # instala lo recomendado y verifica las dependencias
# apt-get -u dselect-upgrade # sigue la selección con dselect
</example>
Utilize la opción <tt>-s</tt> para simular la actualización sin hacerlo realmente.
<p>
<prgn>dselect</prgn> ofrece un interfaz de tipo menu por encima de APT.
<prgn>deity</prgn> y <prgn>aptitude</prgn>
ofrecerán alternativas a <prgn>dselect</prgn>.
</sect1>

<sect1 id="bug-check">Verificar los bugs Debian
<P>
A menudo, la mayor parte de los problemas ya son conocidos. Comienze primero consultando aquí:
<example>
$ lynx http://bugs.debian.org/
$ lynx http://bugs.debian.org/&lt;packagename&gt;
</example>
Buscar con Google (www.google.com) con palabras clave como "site:debian.org".
<p>
Si duda consulte el manual. Modifique <tt>CDPATH</tt> como sigue:
<example>
export CDPATH=.:/usr/local:/usr/share/doc
</example>
y ejecute
<example>
$ cd &lt;packagename&gt;
$ mc &lt;packagename&gt;
</example>
</sect1>

<sect1 id="apt-trouble">Solución de problemas de actualización APT.
<p>
Problemas de dependencias de paquetes pueden ocurrir cuando se actualiza en unstable/testing.
frecuentemente, esto ocurre cuando un paquete debe ser actualizado y una nueva dependencia
no es respetada. Estos problemas se solucionan utilizando:
<example>
# apt-get dist-upgrade
</example>
Sí esto no funciona, entonces repita lo siguiente hasta que el problema se solucione por si solo:
<example>
# apt-get upgrade -f         # continua la actualización mismo despues de un error.
... or
# apt-get dist-upgrade -f    # continua dist-upgrade mismo despues de un error.
</example>
<p>
Algún script de actualización corrupto puede causar daños definitivos.
Es mejor resolver este tipo de problemas inspectando los ficheros
<file>/var/lib/dpkg/info/nombredelpaquete.<em>{post-,pre-}{install,removal}</em></file>
del paquete corrupto y luego lanzando:
<example>
# dpkg --configure -a    # configura todos los paquetes parcialmente instalados
</example>
<p>
Si un script se queja de la falta de un fichero de configuración, mire en
<file>/etc</file> para encontrarlo. Si existe un fichero con la extensión
<tt>.new</tt>
(o algo similar), cambielo (<prgn>mv</prgn>) quitando el sufijo.
<p>
Pueden aparecer problemas de dependencias cuando se instalan paquetes unstable/testing.
Es posible sobrepasar las dependencias.
<example>
# apt-get install -f package # ignora la dependencias rotas
</example>
<p>
El método alternativo para reparar estas situaciones es utilizar el paquete
<package>equivs</package>. Vea <ref id="equivs">.
</sect1>

<sect1 id="rescue-dpkg">Reparación utilizando <prgn>dpkg</prgn>
<p>
Una reparación apropiada para un crash <prgn>dselect</prgn> (APT) es utilizando
<prgn>dpkg</prgn> sin APT:
<example>
# cd /var/cache/apt/archives
# dpkg -i libc6* libdb2* perl*
# dpkg -i apt* dpkg* debconf*
# dpkg -i *  (si no hay errores)
</example>
Si falta un paquete, cogerlo por:
<example>
# mc            # utilize "FTP link" dirigido sobre el servidor FTP Debian
</example>
Como recientemente, los paquetes actuales en los servidores HTTP/FTP puede ser que no se
encuentren en el clasico dosier <file>/dist</file> en cambio mire en el nuevo <file>/pool</file>.
<p>
Luego instale así:
<example>
# dpkg -i /var/cache/apt/archives/elpaquete.deb
</example>
Para una dependencia rota, repare o utilize:
<example>
# dpkg --ignore-depends=paquete1,... -i elpaquete.deb
# dpkg --force-depends -i elpaquete.deb
# dpkg --force-depends --purge nombredelpaquete
</example>
</sect1>

<sect1 id="un-bootable">Instalar un paquete en un sistema no bootable
<p>
Boot Linux a partir de un floppy, CD, o otra partición si se trata de un sistema Linux multiboot.
Montar la partición sistema no bootable en <file>/target</file> y utilize el modo de instalación chroot de
<prgn>dpkg</prgn>.
<example>
# dpkg --root /target -i elpaquete.deb
</example>
Luego configure y corriga los problemas.
<p>
By the way, if a broken <prgn>lilo</prgn> is all that prevents booting, you can boot using 
a standard Debian rescue disk. At boot prompt, assuming the root partition of 
your Linux installation is in <file>/dev/hda12</file> and you want runlevel 3, enter:
<example>
boot: rescue root=/dev/hda12 3
</example>
Then you are booted into an almost fully functional system with the kernel on
floppy disk. (There may be minor glitches due to lack of kernel features or modules.) 
</sect1>
</sect>

<sect id="debian-package">Debian nirvana commands
<p>
Enlightment with these commands will save a person from the eternal
karmic struggle of upgrade hell and let him reach Debian nirvana. :-)

<sect1 id="info-file">Information on a file
<p>
To find the package to which a particular file belongs:
<example>
$ dpkg {-S|--search} pattern # search package from installed filename
$ zgrep -e pattern /local/copy/of/debian/woody/Contents-i386.gz
             # find filename-pattern of files in the debian archive
</example>
Or use specialized package commands:
<example>
# apt-get install dlocate  
                 # conflicts with slocate (secure version of locate)
$ dlocate filename         # fast alternative to dpkg -L and dpkg -S
...
# apt-get install auto-apt # on-demand package installation tool
# auto-apt update          # create db file for auto-apt
$ auto-apt search pattern  
                 # thorough search over the archive of packages
</example>
</sect1>

<sect1 id="info-package">Information on a package
<p>
Search and display information from package archives.  Make sure to
point apt to the proper archive(s) by editing
<file>/etc/apt/sources.list</file>.
If you want to see how packages in testing/unstable do against the currently 
installed one, use <tt>apt-cache policy</tt>&mdash;quite nice.
<example>
# apt-get   check         # update cache and check for broken packages
$ apt-cache search  pattern # search package from text description
$ apt-cache policy  package # package priority/dists information
$ apt-cache show -a package # show description of package in all dists
$ apt-cache showpkg package # package information for debugging
# dpkg  --audit|-C          # search for partially installed packages
$ dpkg {-s|--status} package ... # description of installed package
$ dpkg -l package ...       # status of installed package (1 line each)
$ dpkg -L package ...       # list file names installed by the package
</example>
<p>
You can also find package information in (I use <tt>mc</tt> to browse these):
<example>
/var/lib/apt/lists/*
/var/lib/dpkg/{available|status}
</example>
</sect1>

<sect1 id="reconfigure">Reconfigure installed packages
<p>
Use the following to reconfigure any already-installed package.
<example>
# dpkg-reconfigure --priority=medium package [...]
# dpkg-reconfigure --all  # reconfigure all packages
</example>
Do this for <prgn>debconf</prgn> if you need to change the
<prgn>debconf</prgn> dialog mode permanently.
<p>
Some programs come with special configuration scripts.
<example>
apt-setup     - create /etc/sources.list
install-mbr   - install a Master Boot Record manager
tzconfig      - set the local timezone
gpmconfig     - set gpm mouse daemon
smbconfig     - configure Samba
eximconfig    - configure Exim (MTA)
texconfig     - configure teTeX
apacheconfig  - configure Apache (httpd)
cvsconfig     - configure CVS
sndconfig     - configure sound system
...
update-alternatives - set default command, e.g., vim as vi
update-rc.d         - System-V init script management
update-menus        - Debian menu system
...
</example>
</sect1>

<sect1 id="remove">Remove and purge packages
<p>
Remove a package while maintaining its configuration:
<example>
# apt-get remove package ...
# dpkg  --remove package ...
</example>
Remove a package and all configuration:
<example>
# apt-get remove --purge package ...
# dpkg    --purge        package ...
</example>
</sect1>

<sect1 id="hold">Holding older packages
<p>
For example, holding of <package>libc6</package> and
<package>libc6-dev</package> for <prgn>dselect</prgn> and 
<tt>apt-get -u upgrade package</tt> can be done as follows:
<example>
# echo -e "libc6 hold\nlibc6-dev hold" | dpkg --set-selections
</example>
<tt>apt-get -u install package</tt> will not be hindered by this "hold".  To
hold a package through forcing automatic downgrade for <tt>apt-get -u upgrade
package</tt> or <tt>apt-get -u dist-upgrade</tt>, add the following to
<file>/etc/apt/preferences</file>:
<example>
Package: libc6*
Pin: release a=stable
Pin-Priority: 2000
</example>
<p>
The following will list packages on hold:
<example>
dpkg --get-selections "*"|grep -e "hold$"
</example>
</sect1>

<sect1 id="dselect"><prgn>dselect</prgn> &ndash; global configuration
<p>
Add a line with "expert" in <file>/etc/dpkg/dselect.cfg</file> to reduce noise.
<p>
When started, <prgn>dselect</prgn> automatically selects all "Required", "Important", and
"Standard" packages.  Some packages, such as <package>teTEX</package> and
<package>emacs</package>, are large and may not be needed when you first
install a system. So be careful.
<p>
<prgn>dselect</prgn> has a somewhat strange user interface. There are 4 ambiguous commands
(Capital means CAPITAL!):
<example>
Key-stroke  Action
Q           Quit. Confirm current selection and quit anyway. 
            (override dependencies)
R           Revert! I did not mean it.
D           Damn it! I do not care what dselect thinks.  Just Do it!
U           Set all to sUggested state
</example>
With <tt>D</tt> and <tt>Q</tt>, you can select conflicting selections at your own risk.
Handle these commands with care.  For a slower machine, run
<prgn>dselect</prgn> on another
fast machine to find packages and use <tt>apt-get install</tt> to install them.
<tt>apt-get dselect-upgrade</tt> best honors <prgn>dselect</prgn> selection.
</sect1>

<sect1 id="cache">Reduce cached package files
<p>
Package install with APT leaves cached package files in
<file>/var/cache/apt/archives</file> and these need to be cleaned.
<example>
# apt-get autoclean # removes only useless package files
# apt-get clean     # removes all cache package files
</example>
</sect1>

<sect1 id="record">Record/copy system configuration
<p>
To make a local copy of the package selection states:
<example>
$ dpkg --get-selections "*" &gt;myselections   # or use \*
</example>
<tt>"*"</tt> makes <tt>myselections</tt> include package entries for "purge" too.
<p>
You transfer this file to another computer, and install it there with:
<example>
# apt-get update
# dpkg --set-selections &lt;myselections
# apt-get -u dselect-upgrade
</example>
</sect1>

<sect1 id="port">Port a package to the "stable" system
<p>
For partial upgrades of the stable system, rebuilding a package within its
environment using the source package is desirable.  This avoids massive
package upgrades due to their dependencies.  First, add the following entries
to <file>/etc/apt/sources.list</file>:
<example>
deb-src http://http.us.debian.org/debian testing main contrib non-free
deb-src http://non-us.debian.org/debian-non-US testing/non-US main 
contrib non-free
deb-src http://http.us.debian.org/debian unstable main contrib non-free
deb-src http://non-us.debian.org/debian-non-US unstable/non-US main 
contrib non-free
</example>
Then get the source and make a local package:
<example>
$ apt-get source package/unstable
$ dpkg-source -x package.dsc
$ cd package-version
  ... inspect required packages (Build-depends in .dsc file) and
      install them too.  You need fakeroot too.

$ dpkg-buildpackage -rfakeroot 

  ...or (no sig)
$ dpkg-buildpackage -rfakeroot -us -uc # use "debsign" later if needed

  ...or (no sig)
# ./debian/rules binary
# ./debian/rules clean
# cd ..
# dpkg-source -b package-version

  ...Then to install
# dpkg -i packagefile.deb
</example>
Usually, one needs to install a few packages with the "-dev" suffix to satisfy
package dependencies. <prgn>debsign</prgn> is in the
<package>devscripts</package> package.  <prgn>auto-apt</prgn> may
ease satisfying these dependencies.
<p>
In Woody, these dependency issues can be simplified.  
For example, to compile a source-only <package>pine</package> package:
<example>
# apt-get build-dep pine
# apt-get source -b pine
</example>
</sect1>

<sect1 id="alien">Convert or install an alien binary package
<p>
<package>alien</package> enables the conversion of binary packages provided in 
Redhat <tt>rpm</tt>, Stampede <tt>slp</tt>, Slackware <tt>tgz</tt>, and
Solaris <tt>pkg</tt> file formats
into a &debian; <tt>deb</tt> package. If you want to use a package from another
Linux distribution than the one you have installed on your
system, you can use <prgn>alien</prgn> to convert it to your preferred
package format and install it. It also supports LSB packages.
</sect1>						 

</sect>

<sect id="pecuriarities">Other Debian peculiarities

<sect1 id="dpkg-divert">dpkg-divert command
<p>
<prgn>dpkg-divert</prgn> forces <prgn>dpkg</prgn> not to install
a  file  into  its location, but to a <em>diverted</em> location.
<p>
System administrators or maintenance scripts can use this to override 
some package's configuration file, or whenever some files (which 
aren't marked as <tt>conffiles</tt>) need to be preserved by 
<prgn>dpkg</prgn>, when installing a newer version of a package 
which contains those files.
<example>
# dpkg-divert [--add]  filename # add "divert"
# dpkg-divert --remove filename # remove "divert"
</example>
</sect1>

<sect1 id="equivs"><package>equivs</package> package
<p>
If you compile a program from source, it is best to make it into a real
local debianized package (<tt>*.deb</tt>).  
Use <tt>equivs</tt> as a last resort.
<example>
Package: equivs
Priority: extra
Section: admin
Description: Circumventing Debian package dependencies
 This is a dummy package which can be used to create Debian
 packages, which only contain dependency information.
</example>
</sect1>

<sect1 id="alternatives">Alternative commands
<p>
To make the command <prgn>vi</prgn> run <prgn>vim</prgn>, use
<prgn>update-alternatives</prgn>:
<example>
# update-alternatives --display vi
...
# update-alternatives --config vi
  Selection    Command
-----------------------------------------------
      1        /usr/bin/elvis-tiny
      2        /usr/bin/vim
*+    3        /usr/bin/nvi

Enter to keep the default[*], or type selection number: 2
</example>
Items in the Debian alternatives system are kept in
<file>/etc/alternatives</file> as symlinks.
<p>
To set your favorite X window manager, use <prgn>x-window-manager</prgn> instead.
<p>
<file>/bin/sh</file> is a direct symlink to <file>/bin/bash</file> or
<file>/bin/ash/.</file>  It's safer to
use <file>/bin/bash</file> to be compatible with old bashism-contaminated scripts but 
better discipline to use <file>/bin/ash</file> to enforce POSIX compliance.
</sect1>

<sect1 id="sys-v">System-V <prgn>init</prgn> and runlevels
<p>
The default runlevel to boot into can be set in <file>/etc/inittab</file>.
<p>
Unlike other distributions, Debian makes the management of runlevel completely 
the sysadmin's responsibility.  Management of System-V style <prgn>init</prgn> on Debian is
intended to be performed through <prgn>update-rc.d</prgn> scripts.
<p>
Starting <file>/etc/init.d/<var>name</var></file> in runlevel 1,2,3 and stopping in
4,5 with sequencing priority number 20 (normal) can be done by:
<example>
# update-rc.d name start 20 1 2 3 . stop 20 4 5 .
</example>
Removing symbolic links while the script in <prgn>init.d</prgn> still exists can be done by:
<example>
# update-rc.d -f name remove
</example>
For editing runlevels, I cheat.  I edit entries manually using the
<prgn>mv</prgn> command at the shell prompt of <prgn>mc</prgn> while copying
link entries using <tt>Alt-Enter</tt>. I even disable a daemon by inserting
<tt>exit 0</tt> at the start of an <prgn>init.d</prgn> script as a quick hack.
These are conffiles after all.
</sect1>

<sect1 id="disables">Disabled daemon services
<p>
Debian distribution cares system security seriously and expects the
system administrator to be really a competent one.  Thus, sometimes
ease of use becomes secondary concern and many daemon services come with
the highest security level with the least or no service available as
their default install state.
<p>
Check <tt>ps aux</tt> or contents of <file>/etc/init.d/*</file> and
<file>/etc/inetd.conf</file>, if you have doubt (exim, dhcp, ...).  
Also check <file>/etc/hosts.deny</file> as <ref id="loginctrl">.
<p>
X11 doesn't allow TCP/IP (remote) connections as default in the recent
versions of &debian;.  See <ref id="xtcp">.
</sect1>

</sect>

</chapt>
