<!-- CVS revision of this document "$Revision: 1.12 $"  -->
<!-- CVS revision of original english document "1.54"  -->
<chapt id="system">Debian &ndash; Podstawy

<!-- 

Merged from 4 SGML files in FAQ February 2002
  ftparchives.sgml, 
  pkg_basics.sgml, 
  pkgtools.sgml, 
  uptodate.sgml

Then retitled under "Debian fundamentals" with 
 chapt moved to sect
 sect moved to sect1
 sect1 moved to sect2

Commented out reference to arches, should rewrite it to reference to 
release manual/install manual soon.
 
Pieces imported from other parts of FAQ.
 Small section from customizing.sgml regarding init/runlevel is added.
 Small section from customizing.sgml regarding diverse is added.
 Small section from software.sgml regarding non-English is added.

Merged from other SGML files in FAQ February 2002
  kernel.sgml

Then retitled under "Debian fundamentals" with 
 chapt moved to sect
 sect moved to sect1

Titles of sect/sect1 are changed to suit "Debian reference"

All minor edits I did left tracing information as comments.

Several sections were actually deleted since two consecutive -'s
made it impossible to comment out.

Also rewrote section to suit better for Potato and Woody.
Unless slink is used, how many people about dpkg-ftp :)

-->

<p>
Ten rozdzia³ dostarcza podstawowych informacji o systemie Debian dla osób
nie bêd±cych deweloperami. Sprawdzone i oficjalne wiadomo¶ci nale¿y 
czerpaæ z:
<p>
<list compact>
<item>Debian Policy Manual
<item>Debian Developer's Reference
<item>Debian New Maintainers' Guide
<p>
</list>
wymienionych w <ref id="references">.

<p>
Je¿eli szukasz mniej szczegó³owych &ldquor;jak-to-zrobiæ&rdquor; (&ldquor;how-to&rdquor;), przejd¼ 
bezpo¶rednio do <ref id="package"> lub innych zasobów.
<p>
Niniejszy rozdzia³ zawiera dokumenty wziête z &ldquor;Debian FAQ&rdquor;, 
poddane gruntownej reorganizacji dla u³atwienia startu pocz±tkuj±cemu 
administratorowi systemu Debian.

<!-- 
"FTP archives" is now changed to simple "archives" since it can be reached 
through HTTP and other methods
-->

<sect id="ftparchives">Archiwa Debiana 

<sect1 id="dirtree">Struktura katalogów

<p>Pakiety z oprogramowaniem systemu &debian; dostêpne s± poprzez FTP lub
HTTP z katalogów znajduj±cych siê na 
<url id="&mirror-site;" name="serwerze lustrzanym Debiana">.

<p>Na ka¿dym z takich serwerów w katalogu <tt>debian</tt> 
mo¿na znale¼æ nastêpuj±ce podkatalogi:
<taglist>
  <tag><file>dists/</file>:
    <item>Ten katalog zawiera &ldquor;dystrybucje&rdquor;, a niegdy¶ by³ to
    kanoniczny sposób uzyskiwania dostêpu do aktualnych 
    pakietów w stabilnych i niestabilnych wydaniach Debiana. Wci±¿ mo¿na  
    tam znale¼æ trochê starych pakietów,
    pliki <tt>Contents-*.gz</tt>,
    i pliki <tt>Packages.gz</tt>.
  <tag><file>pool/</file>:
    <item>Nowe miejsce umieszczenia pakietów nale¿±cych do wszystkich
    koñcowych i testowych wydañ Debiana. 
  <tag><file>tools/</file>:
    <item>DOSowe programy u¿ytkowe, umo¿liwiaj±ce tworzenie dyskietek 
    startowych, partycjonowanie dysków, kompresjê i dekompresjê plików
    oraz uruchomienie Linuksa.
  <tag><file>doc/</file>:
    <item>Podstawowa dokumentacja Debiana, np. FAQ, instrukcje dotycz±ce
    zg³aszania b³êdów, itp.
  <tag><file>indices/</file>:
    <item>Pliki Maintainers i override.
  <tag><file>project/</file>:
    <item>przewa¿nie materia³y dla deweloperów takie, jak:
    <taglist>
      <tag><file>project/experimental/</file>:
        <item>Pakiety i narzêdzia, które jeszcze nie
     zosta³y ukoñczone i znajduj± siê w fazie alfa. Nie nale¿y ich u¿ywaæ
     poniewa¿ mog± siê okazaæ niebezpieczne i szkodliwe
     nawet dla najbardziej do¶wiadczonych.
      <tag><file>project/orphaned/</file>:
        <item>Pakiety osierocone przez dotychczasowych opiekunów i wykre¶lone
     z dystrybucji.
    </taglist>
</taglist>

<sect1 id="dists">Dystrybucje Debiana 

<p>W katalogu <file>dists</file> normalnie znajduj± siê informacje o trzech 
dystrybucjach Debiana. 
Katalogi z nimi (i same dystrybucje) nosz± nazwy <tt>stable</tt> (dystrybucja 
stabilna), <tt>testing</tt> (dystrybucja testowa) i <tt>unstable</tt> (dystrybucja 
niestabilna). Czasami te¿ wystêpuje tam dystrybucja <tt>frozen</tt> 
(&ldquor;zamro¿ona&rdquor;). Katalog ka¿dej dystrybucji stanowi symboliczne dowi±zanie do 
rzeczywistego katalogu o odpowiednim kryptonimie 
w katalogu <file>dists</file>.

<sect1 id="stable">Dystrybucja <tt>stabilna</tt>

<p>Dane pakietów nale¿±cych do dystrybucji <tt>stabilnej</tt>, &stabledebian;, 
s± zapisywane do katalogu <file>stable</file> (dowi±zanie symboliczne 
do <file>&stablecodename;/</file>):
<list>
  <item><file>stable/main/</file>:
  Ten katalog zawiera pakiety oficjalnie uznawane za najbardziej aktualne
  wydanie systemu &debian;. 

  <p>Wszystkie z tych pakietów s± zgodne z <url name="Wytycznymi Debiana dotycz±cymi Wolnego Oprogramowania" id="&social-contract;#guidelines"> 
  (dokument dostêpny 
  równie¿ jako <file>&f-social-contract;</file> po zainstalowaniu pakietu 
  <package>&p-social-contract;</package>)
  i mo¿na ich swobodnie u¿ywaæ, a tak¿e rozpowszechniaæ.

  <item><file>stable/non-free/</file>:
  Ten katalog zawiera informacje o pakietach, których rozpowszechnianie zosta³o
  ograniczone przez wymagania stawiane dystrybutorowi, które mówi± o zwróceniu
  szczególnej uwagi, na kwestie praw autorskich danego programu.

  <p>Na przyk³ad, licencje niektórych pakietów zabraniaj± komercyjnego
  rozpowszechniania. Inne znowu¿ mog± byæ redystrybuowane, ale stanowi±
  shareware, a nie wolne oprogramowanie. Zanim w³±czy siê którykolwiek
  z tych pakietów do jakiej¶ redystrybucji (np. na CD-ROMie), nale¿y 
  przestudiowaæ jego licencjê i prawdopodobnie przeprowadziæ odpowiednie
  negocjacje.

  <item><file>stable/contrib/</file>:
  Ten katalog zawiera informacje o pakietach wolnych w rozumieniu DFSG 
  (Debian Free Software Guidelines) i podlegaj±cych 
  <strong>swobodnemu rozpowszechnianiu</strong>, ale w jaki¶ 
  sposób zale¿nych od pakietu, który swobodnemu rozpowszechnianiu 
  <strong>nie podlega</strong> i z tej przyczyny jest dostêpny w sekcji 
  non-free.
</list>
Wy¿ej wymienione katalogi zawieraj± informacje o pakietach. Same pakiety za¶
mieszcz± siê w katalogu <file>pool</file> (<ref id="pools">).  

<p>Aktualny stan b³êdów w dystrybucji <tt>stabilnej</tt> podaje strona WWW 
<url id="&stable-problems;" name="Problemy ze stabiln± dystrybucj±"> (po
angielsku) . 

<sect1 id="testing">Dystrybucja <tt>testowa</tt>

<p>Informacja o pakietach zawartych w dystrybucji <tt>testowej</tt>, 
czyli &testingdebian;, jest zapisywana w katalogu <file>testing</file> 
(dowi±zanie symboliczne do <file>&testingcodename;/</file>) po tym, jak
przejd± testowanie wstêpne w dystrybucji <tt>niestabilnej</tt>.
Pakiety, których dotycz± informacje zapisane w katalogu <tt>testing</tt>,
s± umieszczane w katalogu <file>pool</file> (<ref id="pools">).  
Oczywi¶cie, w katalogu <file>testing</file> istniej± równie¿ podkatalogi 
<file>main</file>, <file>contrib</file> oraz <file>non-free</file>, 
pe³ni±ce takie same funkcje, jak ich odpowiedniki w <file>stable</file>. 

<p>Pakiety w dystrybucji <tt>testowej</tt> musz± dzia³aæ na wszystkich architekturach,
na których zostan± zbudowane i nie mog± posiadaæ zale¿no¶ci uniemo¿liwiaj±cych
instalacjê; musz± mieæ równie¿ mniej b³êdów o priorytecie release-critical 
(o znaczeniu krytycznym dla wydania), ni¿ wersje znajduj±ce siê 
w <tt>unstable</tt>. W ten sposób mo¿na mieæ nadziejê, ¿e dystrybucja <tt>testowa</tt> 
zawsze jest dystrybucj± blisk± wydania. Wiêcej informacji o mechanizmach 
testowania znajduje siê na <url id="&testing-notes;"> (po angielsku).

<p>Naj¶wie¿sze informacje o stanie dystrybucji <tt>testowej</tt> zawieraj±
nastêpuj±ce strony WWW:
<list compact>
<item><url id="&update-excuses;" 
         name="update excuses (wymówki aktualizacyjne)">
<item><url id="&testing-problems;" 
         name="testing problems (problemy w dystrybucji testowej)">
<item><url id="&release-critical;" 
         name="release-critical bugs (b³êdy o znaczeniu krytycznym dla wydania)">
<item><url id="&qa-base-bugs;" 
         name="base system bugs (b³êdy w systemie podstawowym)">
<item><url id="&qa-standard-bugs;" 
         name="bugs in standard and task packages (b³êdy w pakietach kategorii standard i task)">
<item><url id="&qa-bugs;" 
         name="other bugs and bug-squashing party notes (inne b³êdy i uwagi z sesji têpienia pluskiew)">
</list>



<sect1 id="unstable">Dystrybucja <tt>niestabilna</tt>

<p>Informacje o pakietach wchodz±cych w sk³ad dystrybucji <tt>niestabilnej</tt>, 
zawsze nazywanej &ldquor;Sid&rdquor;, s± zapisywane do katalogu <file>unstable</file> 
(dowi±zanie symboliczne do <file>sid/</file>) po umieszczeniu tych pakietów 
w archiwum Debiana i pozostaj± tu, a¿ zostan± przeniesione do
<file>testing/</file>. 
Odpowiadaj±ce wpisom pakiety umieszcza siê w katalogu <file>pool</file> 
(<ref id="pools">). Równie¿ istniej± tu podkatalogi <file>main</file>, 
<file>contrib</file> i <file>non-free</file>, spe³niaj±ce te same zadania, co 
w katalogu <file>stable/</file>. 

<p>Dystrybucja <tt>niestabilna</tt> jest obrazem systemu w najnowszym stadium jego 
rozwoju. Nic nie stoi na przeszkodzie w u¿ywaniu i testowaniu tych pakietów, 
trzeba jednak uwa¿aæ, bo mog± byæ jeszcze nie w pe³ni dopracowane. 
Zalet± korzystania z dystrybucji <tt>niestabilnej</tt> jest to, ¿e jest siê zawsze 
&ldquor;na czasie&rdquor; ze wszystkimi nowinkami w projekcie &debian;, 
ale je¿eli co¶ nawali, to licz na siebie, a nie na pomoc.  

<p>Na stronie WWW <url id="&unstable-problems;" name="Problemy 
z dystrybucj± niestabiln±"> (po angielsku) 
mo¿na siê zapoznaæ z aktualnym stanem b³êdów w dystrybucji <tt>niestabilnej</tt>. 

<!-- Above was enough
<sect1 id="sid">The "Sid" distribution
<p>Sid or <tt>unstable</tt> is the place where most of the packages
are initially uploaded. It will never be released directly, because
packages which are to be released will first have to be included in
<tt>testing</tt>, in order to be released in <tt>stable</tt> later on. Sid
contains packages for both released and unreleased architectures.

<p>The name "Sid" also comes from the "Toy Story" animated motion picture:
Sid was the boy next door who destroyed toys :-)
-->

<sect1 id="frozen">Dystrybucja <tt>frozen</tt> (<tt>zamro¿ona</tt>)

<p>Gdy dystrybucja <tt>testowa</tt> osi±gnie wystarczaj±c± dojrza³o¶æ, 
zostaje zamro¿ona, co oznacza, ¿e nie przyjmuje siê do niej ju¿ ¿adnego nowego 
oprogramowania z wyj±tkiem koniecznych poprawek (bugfixes). 
W katalogu <file>dists/</file> tworzy siê nowy podkatalog dla dystrybucji testing, 
dowi±zany do nowego kryptonimu.  
Dystrybucja zamro¿ona przechodzi przez kilkumiesiêczny okres próbny 
sk³adaj±cy siê na przemian z aktualizacji i z okresów g³êbokiego zamro¿enia 
nazywanych &ldquor;cyklami testowymi&rdquor;.  

<p>Utrzymujemy rejestr b³êdów w dystrybucji zamro¿onej, które mog± 
opó¼niæ wydanie pakietu lub doprowadziæ do wstrzymania wydania ca³ej 
dystrybucji. Gdy liczba b³êdów spadnie do maksymalnie akceptowalnej 
warto¶ci, dystrybucja zamro¿ona staje siê dystrybucj± stabiln± (stable), 
zostaje wydana, a dotychczasowe wydanie stabilne staje siê przestarza³e 
(obsolete) i zostaje przeniesione do archiwum. 
<!--
(Od t³um.: 
a Potato przyj±³ nazwê "old-stable" i nie powêdrowa³ do archiwum 
tak od razu!).

pos³a³em o tym info do angielskiej wersji -->

<sect1 id="codenames">Kryptonimy dystrybucji Debiana 

<p>Nazwy rzeczywistych podkatalogów w katalogu <file>dists</file>, na przyk³ad 
<file>&stablecodename;</file> i <file>&testingcodename;</file>, s± tylko 
&ldquor;kryptonimami&rdquor;.  
Kiedy dystrybucja systemu &debian; znajduje siê jeszcze w etapie rozwojowym, 
nie posiada numeru wersji, a zamiast niego kryptonim. 
Kryptonimy zastosowano w celu u³atwienia tworzenia archiwów lustrzanych
(mirroring) dystrybucji systemu &debian; 
(gdyby rzeczywisty katalog taki, jak <file>unstable</file> nagle zmieni³ swoj± 
nazwê na <file>stable/</file>, niejeden musia³by niepotrzebnie pobieraæ 
ponownie masê oprogramowania). 

<p>Aktualnie, <file>stable/</file> jest dowi±zaniem symbolicznym do
<file>&stablecodename;/</file>, 
a <file>testing/</file> dowi±zaniem do <file>&testingcodename;/</file>. 
Oznacza to, ¿e <tt>&stablecodename;</tt> jest aktualn± dystrybucj± stabiln±, 
a <tt>&testingcodename;</tt> testow±. 

<p><file>unstable/</file> jest ju¿ na zawsze dowi±zaniem 
symbolicznym do <file>sid/</file>, poniewa¿ Sid jest zawsze dystrybucj± 
niestabiln±. <!-- (zobacz <ref id="sid">).-->

<sect1 id="oldcodenames">Kryptonimy u¿ywane w przesz³o¶ci  

<p>Inne kryptonimy, których ju¿ wcze¶niej u¿ywano, to: 
&ldquor;Buzz&rdquor; dla wydania 1.1, 
&ldquor;Rex&rdquor; dla wydania 1.2, 
&ldquor;Bo&rdquor; dla wydania 1.3.x, 
&ldquor;Hamm&rdquor; dla wydania 2.0, 
&ldquor;Slink&rdquor; dla wydania 2.1,
&ldquor;Potato&rdquor; dla wydania 2.2, 
&ldquor;Woody&rdquor; dla wydania 3.0 
oraz 
&ldquor;Sarge&rdquor; dla wydania 3.1. 

<sect1 id="sourceforcodenames">¬ród³o kryptonimów 

<p>Jak dotychczas wybierano postaci z filmu <em>Toy Story</em> produkcji Pixar.
<list compact>
  <item><strong>Buzz</strong> (Buzz Lightyear) by³ kosmonaut±,
  <item><strong>Rex</strong> by³ tyranozaurem, 
  <item><strong>Bo</strong> (Bo Peep) by³a dziewczynk±, która opiekowa³a siê owieczk±, 
  <item><strong>Hamm</strong> by³a ¶wink±-skarbonk±, 
  <item><strong>Slink</strong> (Slinky Dog) by³ psem-zabawk±, 
  <item><strong>Potato</strong> by³ oczywi¶cie Panem Ziemniakiem, 
  <item><strong>Woody</strong> by³ kowbojem,
  <item><strong>Sarge</strong> by³ ¿o³nierzem z zielonego plastiku, 
  <item><strong>Etch</strong> (Etch-a-Sketch) by³ tablic±,
  <item><strong>Sid</strong> by³ ch³opcem psuj±cym zabawki. 
</list>
<!--
  more info in http://www.pixar.com/featurefilms/ts/index.html
  or better yet http://us.imdb.com/M/title-exact?Toy&percnt;20Story&percnt;20(1995)
  or actually:
    http://us.imdb.com/Title?0114709 for TS1
    http://us.imdb.com/Title?0120363 for TS2
  we shouldn't put the links in, Pixar needs no additional propaganda
-->
<!--
  characters not used from Toy Story (yet):
    - Andy (the kid)
    - Snake
    - Robot
    - Scud (Sid's dog)
  and additional characters from Toy Story 2, also not yet used:
    - Jessie (the Yodelling Cowgirl)
    - Zurg (the Emperor)
    - Wheezy (the penguin)
    - Hannah (owner of Jessie)
    - Stinky Pete the Prospector (the old fat guy)
    - Mrs. Davis (Andy's Mom)
    - Barbie
-->

<sect1 id="pools">Katalog <file>pool</file>

<p>Dawniej pakiety przechowywano w podkatalogu katalogu <file>dists</file>,
którego nazwa odpowiada³a dystrybucji, w sk³ad której wchodzi³y.
Okaza³o siê jednak, ¿e wywo³ywa³o to ró¿ne problemy, jak np. du¿e obci±¿enie 
serwerów lustrzanych, gdy dokonywano wiêkszych zmian.

<p>Obecnie pakiety znajduj± siê w du¿ej &ldquor;puli&rdquor; (&ldquor;pool&rdquor;), 
której struktura jest utworzona na podstawie nazw pakietów ¼ród³owych. 
Dla u³atwienia zarz±dzania czym¶ takim, pula - pool jest podzielona 
wed³ug sekcji (<tt>main</tt>, <tt>contrib</tt> i <tt>non-free</tt>) i wed³ug 
pierwszej litery nazwy pakietu ¼ród³owego. 
Katalogi te zawieraj± pewn± liczbê plików: pakiety binarne dla ka¿dej 
architektury (platformy sprzêtowej) oraz pakiety ¼ród³owe, z których 
te pierwsze zosta³y wygenerowane.

<p>Miejsce, gdzie znajduje siê jaki¶ pakiet, mo¿na okre¶liæ wykonuj±c 
polecenie 
<tt>apt-cache showsrc <var>nazwa_pakietu</var></tt> i znajduj±c w jego wyj¶ciu
wiersz zaczynaj±cy siê od &ldquor;Directory:&rdquor;. Na przyk³ad
pakiety serwera http <package>apache</package> znajduj± siê 
w <file>pool/main/a/apache/</file>. Pakietów <tt>lib*</tt> jest bardzo du¿o, 
wiêc s± traktowane szczególnie: na przyk³ad pakiety 
<package>libpaper</package> s± przechowywane w katalogu 
<file>pool/main/libp/libpaper/</file>. 

<p>Podkatalogi katalogu <file>dists</file> s± w dalszym ci±gu u¿ywane do 
przechowywania plików indeksowych u¿ywanych przez programy 
w rodzaju <prgn>apt</prgn>. Równie¿, w czasie pisania niniejszego dokumentu 
starsze dystrybucje nie by³y przestawione na u¿ywanie katalogu pool, 
wiêc mo¿na zobaczyæ takie nazwy dystrybucji, jak <tt>potato</tt> 
czy <tt>woody</tt> w wierszach zaczynaj±cych siê od &ldquor;Directory:&rdquor; (przytoczone 
powy¿ej polecenie apt-cache). 

<p>Nie jest to powód do zmartwieñ, poniewa¿ nowy <prgn>apt</prgn> i prawdopodobnie 
równie¿ starszy <prgn>dpkg-ftp</prgn> (zobacz <ref id="howtocurrent">) radz± sobie 
z tak± struktur± bez problemów. Wiêcej informacji mo¿na znale¼æ 
w <url id="&pool-faq;" name="RFC: implementation of package pools"> (po angielsku).

<!-- bumped up from sect2 to sect1 -->
<sect1 id="sid-history">Nota historyczna o dystrybucji Sid

<p>Kiedy dzisiejszy Sid jeszcze nie istnia³, <!--FTP removed --> 
organizacja sieciowych archiwów Debiana mia³a jedn± du¿± wadê: 
kiedy dok³adano now± architekturê do bie¿±cej dystrybucji
<file>unstable</file>, pakiety zrobione dla niej mog³y byæ wydane dopiero 
wtedy, gdy ta dystrybucja stawa³a siê now± dystrybucj± <tt>stable</tt>. 
Dla wielu architektur nie dochodzi³o do tego i trzeba by³o przenosiæ 
odpowiadaj±ce im katalogi, gdy dochodzi³o do wydania dystrybucji. By³o to 
niepraktyczne, poniewa¿ przenoszenie katalogów silnie obci±¿a³o ³±cza.

<p>Administratorzy archiwów sieciowych przez kilka lat obchodzili ten problem, 
umieszczaj±c binaria dla architektur jeszcze nie wydanych w specjalnym 
katalogu o nazwie <file>sid</file>. 
Dla architektur jeszcze nie wydanych, tworzono w chwili wydania dowi±zanie 
z aktualnego katalogu <file>stable</file> do <file>sid</file> i od tej 
pory tworzono je w drzewie <file>unstable</file>, jak zwykle. 
Takie rozwi±zanie by³o trochê myl±ce dla u¿ytkowników.

<p>Z nadej¶ciem katalogu &ldquor;pool&rdquor; (zobacz <ref id="pools">) w trakcie 
powstawania dystrybucji Woody, 
zaczêto zapisywaæ pakiety binarne w lokalizacji kanonicznej w tym¿e katalogu, 
niezale¿nie od dystrybucji, wiêc wydanie dystrybucji przesta³o byæ zwi±zane 
z poddawaniem serwerów lustrzanych du¿ym obci±¿eniom (natomiast mamy do 
czynienia z do¶æ sporymi, roz³o¿onymi w czasie obci±¿eniami w trakcie ca³ego 
procesu rozwijania dystrybucji). 

<sect1 id="incoming">Pakiety umieszczone w <file>incoming/</file>

<p>
Pakiety umieszczane w archiwum trafiaj± najpierw do <url id="&incoming;">, 
po sprawdzeniu autentyczno¶ci pochodzenia od jednego z deweloperów (w wypadku tzw.
Non-Maintainer Upload -- NMU -- pakiety trafiaj± do podkatalogu 
<file>DELAYED</file>).
Raz dziennie pakiety przenosi siê z <file>incoming/</file> do
<file>unstable/</file>. 
<p>
W nag³ych wypadkach mo¿na instalowaæ pakiety z <file>incoming/</file>, zanim 
jeszcze trafi± do <file>unstable</file>. 
</sect1>

<sect1 id="snapshot">Odzyskiwanie starszego pakietu 
<p>
Podczas gdy najnowsze dystrybucje Debiana trzyma siê w podkatalogach katalogu 
<file>debian</file>, na ka¿dym z serwerów wymienionych na 
<url id="&mirror-site;" name="Stronie serwerów lustrzanych Debiana">, 
archiwa starszych dystrybucji (np. Slink) znajduj± siê na 
<url id="&archivehome;"> lub w podkatalogach katalogu
<file>debian-archive</file> 
na ka¿dym serwerze lustrzanym Debiana. 
<p>
Starsze pakiety z <tt>testing</tt> i <tt>unstable</tt> mo¿na znale¼æ na 
<url id="&snapshothome;">.

</sect1>

<sect1 id="archsections">Podzia³ na architektury 
<!--
What are all those directories inside <tt>dists/stable/main</tt>?
Simplified this !!!
-->

<p>W obrêbie ka¿dego z g³ównych drzew katalogów (<file>dists/stable/main</file>,
<file>dists/stable/contrib</file>, <file>dists/stable/non-free</file>, 
<file>dists/unstable/main/</file>, itd.), informacja o pakietach binarnych 
znajduje siê w podkatalogach o nazwach wskazuj±cych na platformê sprzêtow± 
(architekturê), dla jakiej zosta³y skompilowane.

<list>
  <item><file>binary-all/</file>, dla pakietów niezale¿nych od architektury 
  (dotyczy to np. skryptów Perla lub czystej dokumentacji). 
  <item><file>binary-<var>platform</var>/</file>, dla pakietów przeznaczonych dla 
  konkretnej architektury. 
  <!-- Yes I simplified this -->
</list>

<p>Warto zauwa¿yæ, ¿e pakiety binarne dla dystrybucji <tt>testing</tt> 
i <tt>unstable</tt> nie s± ju¿ przechowywane w tych katalogach, ale w katalogu 
<file>pool</file>. Pliki indeksowe (<file>Packages</file> 
i <file>Packages.gz</file>) jednak, dla zachowania kompatybilno¶ci
z wcze¶niejszymi rozwi±zaniami, w dalszym ci±gu przebywaj± tam, gdzie by³y.

<p>Aby poznaæ faktyczny zestaw wspieranych platform sprzêtowych, nale¿y zapoznaæ 
siê z Informacjami Wydawniczymi dla danej dystrybucji. 
Mo¿na je odnale¼æ na stronach zajmuj±cych siê Uwagami Wydawniczymi 
dla <url id="&stable-release;" name="stable"> 
i <url id="&testing-release;" name="testing">.

<!-- Removed, above release note shall be enough.
<p>See <ref id="arches"> for more information.
-->

<sect1 id="source">Kod ¼ród³owy

<p>Debian posiada równie¿ kod ¼ród³owy ka¿dego ze swoich sk³adników. 
Co wiêcej, warunki licencji wiêkszo¶ci programów w systemie zawieraj± 
<strong>wymóg</strong> dystrybucji kodu ¼ród³owego wraz z programem, lub 
przynajmniej zadeklarowania gotowo¶ci dostarczenia kodu ¼ród³owego wraz 
z programem. 

<p>Normalnie kod ¼ród³owy jest rozpowszechniany za po¶rednictwem katalogów 
<file>source</file>, istniej±cych równolegle do wszystkich katalogów 
charakterystycznych dla poszczególnych architektur, a obecnie w katalogu 
<file>pool</file> directory (zobacz <ref id="pools">). Aby pobraæ z archiwum kod 
¼ród³owy bez konieczno¶ci zaznajamiania siê ze struktur± archiwum Debiana 
nale¿y wykonaæ polecenie podobne do tego: 
<tt>apt-get source <var>mojanazwapakietu</var></tt>. 

<p>Niektóre pakiety, na przyk³ad <package>pine</package>, s± dostêpne 
wy³±cznie w postaci ¼róde³ wskutek ograniczeñ licencyjnych. (Niedawno 
pojawi³ siê pakiet <package>pine-tracker</package> u³atwiaj±cy instalacjê 
Pine). Procedury opisane w <ref id="port"> i <ref id="packaging"> opisuj± 
sposoby tworzenia pakietów samemu. 

<p>Dla pakietów z katalogów <file>contrib</file> i <file>non-free</file>, 
które oficjalnie nie stanowi± czê¶ci systemu Debian, kod ¼ród³owy mo¿e byæ 
niedostêpny. 

<sect id="pkg-basics">System zarz±dzania pakietami w Debianie 

<sect1 id="package-basics">Przegl±d pakietów Debiana 

<p>W ogólno¶ci pakiety zawieraj± wszystkie pliki niezbêdne do 
zaimplementowania zestawu odpowiednich poleceñ lub w³a¶ciwo¶ci. 
S± dwa typy pakietów Debiana:
<list>
  <item><strong>Pakiety binarne</strong>, zawieraj±ce pliki wykonywalne, 
  pliki konfiguracyjne, strony podrêcznika systemowego <tt>man</tt> lub 
  <tt>info</tt>, informacje o prawach autorskich i pozosta³± dokumentacjê. 
  S± one rozpowszechniane w charakterystycznym dla Debiana formacie archiwum 
  (zobacz <ref id="deb-format">); zwykle mo¿na je odró¿niæ od innych plików 
  po tym, ¿e ich nazwa koñczy siê na <tt>.deb</tt>. 
  <footnote>
  	 <!-- Below added by Osamu based on a message posted by Colin Watson -->
  	 <p>Projekt <prgn>debian-installer</prgn> wprowadza pakiety o nazwach
koñcz±cych siê na <tt>.udeb</tt>.  W skrócie, jest to
format micro-<tt>.deb</tt>, który niekoniecznie zgadza siê dok³adnie z
polityk± Debiana, nie posiada zawarto¶ci takiej jak dokumentacja i jest
wykorzystywany wy³±cznie przez  <prgn>debian-installer</prgn>, nowe
instalator Debiana, tworzony dla wydania Sarge.  Format plików <tt>.deb</tt>
oraz <tt>.udeb</tt> jest identyczny. Program <prgn>udpkg</prgn> u¿ywany 
do obs³ugi pakietów <tt>.udeb</tt> posiada ograniczone mo¿liwo¶ci w stosunku
do standardowego <prgn>dpkg</prgn> i obs³uguje mniej zale¿no¶ci pomiêdzy
pakietami. Ró¿nica w nazwie wynika z tego, ¿e osoby utrzymuj±ce pakiety
Debiana w formacie <tt>.deb</tt> nie by³y by zadowolone z pojawienia siê
pakietów nie spe³niaj±cych za³o¿eñ. Wybrano wiêc inn± nazwê w celu
podkre¶lenia tych ró¿nic oraz zabezpieczenia przed sytuacj±, w której
u¿ytkownicy moh± próbowaæ instalowaæ takie pakiety w dzia³aj±cym systemie.
Pakiety <tt>.udeb</tt> s± u¿ywane na startowym dysku umieszczonym w pamiêci
wy³±cznie podczas podstawowej instalacji, w celu utworzenia bardzo okrojonego
systemu.</footnote>
  Pakiety binarne mo¿na rozpakowywaæ z pomoc± programu <prgn>dpkg</prgn>; ze 
  szczegó³ami mo¿na siê zapoznaæ czytaj±c stronê podrêcznika systemowego 
  po¶wiêcon± dpkg.
  
  <item><strong>Pakiety ¼ród³owe</strong>, sk³adaj±ce siê z pliku <tt>.dsc</tt> 
  opisuj±cego pakiet ¼ród³owy (w³±cznie z nazwami plików sk³adowych pakietu), 
  pliku <tt>.orig.tar.gz</tt> zawieraj±cego oryginalny, niezmodyfikowany 
  kod ¼ród³owy spakowany programem tar i skompresowany programem gzip oraz 
  zwykle pliku <tt>.diff.gz</tt> zawieraj±cego charakterystyczne dla Debiana 
  zmiany w stosunku do oryginalnego ¼ród³a. Do pakowania i rozpakowywania 
  archiwów ¼ród³owych Debiana u¿ywa siê programu u¿ytkowego 
  <prgn>dpkg-source</prgn>; szczegó³y s± dostêpne po zapoznaniu siê 
  z po¶wiêcon± mu stron± podrêcznika systemowego <tt>man</tt>. 
</list>

<p>Instalacja oprogramowania przez system pakietów pos³uguje siê pojêciem 
&ldquor;zale¿no¶ci&rdquor; (&ldquor;dependencies&rdquor;), troskliwie okre¶lonych przez opiekunów 
poszczególnych pakietów. Te zale¿no¶ci s± wyszczególnione w pliku 
<file>control</file> wchodz±cym w sk³ad ka¿dego pakietu. 
Na przyk³ad, pakiet zawieraj±cy kompilator GNU C (<package/gcc/) 
jest zale¿ny od zawieraj±cego konsolidator (linker) i asembler pakietu 
<package/binutils/. 
Je¿eli u¿ytkownik usi³uje zainstalowaæ <package/gcc/ nie zainstalowawszy 
uprzednio <package/binutils/, system zarz±dzania pakietami (dpkg) drukuje 
komunikat mówi±cy, ¿e trzeba zainstalowaæ <package/binutils/, a nastêpnie 
zatrzymuje instalacjê <package/gcc/ (uparty u¿ytkownik mo¿e jednak zmieniæ 
to zachowanie; zobacz <manref name="dpkg" section="8">). 
Z dodatkowymi szczegó³ami mo¿na zapoznaæ siê w <ref id="depends">.
<p>Zawartych w Debianie narzêdzi obs³uguj±cych pakiety mo¿na u¿ywaæ do:
<list>
  <item>manipulowania i zarz±dzania pakietami lub ich czê¶ciami sk³adowymi,
  <item>u³atwienia u¿ytkownikowi podzia³u na czê¶ci pakietów, które 
  trzeba umie¶ciæ na no¶nikach o ograniczonej wielko¶ci (np. na dyskietkach),
  <item>pomocy deweloperom w konstruowaniu archiwów pakietów, oraz
  <item>pomocy u¿ytkownikom w instalacji pakietów przechowywanych 
  na sieciowych serwerach z archiwami Debiana. 
</list>

<sect1 id="deb-format">Format pakietów Debiana 

<p>&ldquor;Pakiet&rdquor; Debiana (zwany te¿ archiwum Debiana - nie myliæ z umieszczon± 
na serwerze ca³± dystrybucj±!) zawiera pliki wykonywalne, biblioteki oraz 
dokumentacjê zwi±zan± z konkretnym programem lub zestawem w jaki¶ sposób 
powi±zanych ze sob± programów. Z regu³y nazwa pakietu Debiana koñczy siê 
sufiksem <tt>.deb</tt>. 

<p>Budowê wewnêtrzn± pakietów binarnych w tym formacie opisuje 
podrêcznik systemowy <manref name="deb" section="5">. 
Z uwagi na mo¿liwo¶æ zachodzenia zmian w specyfikacji formatu (z jednego wydania 
systemu &debian; na kolejne jego wydanie), przy manipulacji plikami 
<tt>.deb</tt> nale¿y zawsze korzystaæ z <manref name="dpkg-deb" section="1">. 

<!-- Below added by Osamu Not sure but should be right -->

<p>Wszystkie pakiety Debiana (Sarge i wcze¶niejsze dystrybucje), 
mo¿na obrabiaæ u¿ywaj±c standardowych poleceñ systemu Unix: <prgn>ar</prgn>,
i <prgn>tar</prgn>, nawet, gdy polecenia <prgn>dpkg</prgn> s± 
niedostêpne.

<sect1 id="pkgname">Zasady nadawania nazw pakietom Debiana 
<!--
Why are Debian package file names so long? 
Dlaczego nazwy pakietów w Debianie s± takie d³ugie?
-->

<p>Nazwy plików zawieraj±cych pakiety w Debianie przestrzegaj± nastêpuj±cych 
zasad:
<example>
<var>foo</var>_<var>NumerWersji</var>-<var>NumerRewizjiDebiana</var>.deb
</example>
gdzie <var>foo</var> stanowi nazwê pakietu. Dla sprawdzenia:
maj±c dany plik <tt>.deb</tt> mo¿na okre¶liæ nazwê zawartego w nim pakietu 
w jeden z nastêpuj±cych sposobów: 
<list>
  <item>przejrzeæ plik &ldquor;Packages&rdquor; w katalogu, w którym jest przechowywany
  na jednym z serwerów Debiana. Plik ten zawiera sekcje
  opisuj±ce ka¿dy pakiet. Pierwszy wiersz ka¿dej sekcji zawiera oficjaln±
  nazwê pakietu (po &ldquor;Package: &rdquor;).
  
  <item>u¿yæ polecenia <tt>dpkg --info <var>foo_VVV-RRR</var>.deb</tt> 
  (gdzie <var>VVV</var> i <var>RRR</var> s± odpowiednio wersj± i rewizj± 
  pakietu <var>foo</var>). Polecenie wy¶wietla w¶ród innych rzeczy 
  nazwê pakietu zawartego w pliku poddanym sprawdzeniu.
</list>

<p>Sk³adnik <var>VVV</var> jest numerem wersji, nadanym przez programistê 
zajmuj±cego siê danym programem/pakietem poza systemem Debian.  
Numery wersji nie s± ustalane 
przez ¿adne normy, dlatego te¿ mog± one mieæ najrozmaitsze formaty, jak 
np. &ldquor;19990513&rdquor; czy &ldquor;1.3.8pre1&rdquor;. 

<p>Sk³adnik <var>RRR</var> jest numerem rewizji w Debianie 
i jest nadawany przez opiekuna danego pakietu lub przez indywidualnego u¿ytkownika, 
je¶li ten zechce zbudowaæ pakiet samodzielnie. Numer ten odpowiada 
poziomowi rewizji  pakietu w systemie; z tego wzglêdu nowy poziom rewizji 
zwykle oznacza zmiany w plikach opisuj±cych budowê i instalacjê pakietu: 
<file>debian/rules</file> (Debian makefile), <file>debian/control</file> 
(Debian control file), skrypcie instalacyjnym i deinstalacyjnym 
<file>debian/p*</file>, lub plikach konfiguracyjnych zwi±zanych z pakietem. 

<!-- This get too detailed
<sect1 id="controlfile">The Debian control file
-->

<sect1 id="conffile">Ochrona lokalnych plików konfiguracyjnych 
<!--
What is a Debian conffile
-->
<p>Mechanizm &ldquor;conffiles&rdquor; istniej±cy w Debianie pozwala na otoczenie ochron±
plików konfiguracyjnych w systemie. Pliki te, zazwyczaj umieszczone w katalogu
<file>/etc</file>, s± wymienione w plikach o nazwach koñcz±cych siê na 
<file>conffiles</file> wchodz±cych w sk³ad systemu pakietów. Mechanizm ten 
gwarantuje, ¿e systemowe pliki konfiguracyjne nie bêd± nadpisywane podczas 
instalacji nowej wersji pakietu.
<p>
Je¶li mo¿liwa jest konfiguracja systemu bez dokonywania zmian w plikach 
nale¿±cych do ró¿nych pakietów, dobrym pomys³em jest powstrzymanie siê
od ich modyfikacji nawet je¶li s± to pliki &ldquor;conffiles&rdquor;. 
U³atwi to i przyspieszy instalacjê nowych wersji pakietów.
<!--
<p>Conffiles is a list of configuration files (usually placed in <file>/etc</file>)
that the package management system will not overwrite when the package is
upgraded. This ensures that local values for the contents of these files
will be preserved, and is a critical feature enabling the in-place upgrade
of packages on a running system.
-->
<p>Aby dowiedzieæ siê, jakie dok³adnie pliki zostan± zachowane 
podczas instalacji nowej wersji (upgrade'u) pakietu, nale¿y uruchomiæ 
polecenie:
<example>
dpkg --status <var>pakiet</var>
</example>
i szukaæ &ldquor;Conffiles:&rdquor;.

<p>
Szczegó³ów na temat zawarto¶ci plików <file>conffiles</file> dostarcza dokument
Debian Policy Manual w rozdziale 11.7 (zobacz <ref id="references">).

<sect1 id="maintscripts">Skrypty instalacyjne i deinstalacyjne
<!--
What is a Debian preinst, postinst, prerm, and postrm
  script?
-->
<p><!--These files--> 
S± to skrypty automatycznie uruchamiane przed instalacj± i po instalacji pakietu. 
Wraz z plikiem o nazwie <file>control</file> 
wchodz± w sk³ad sekcji &ldquor;control&rdquor; ka¿dego pakietu w Debianie. 

<p>S± to:
<taglist>
<tag/preinst/
  <item>Ten skrypt jest wykonywany zanim pakiet zostanie rozpakowany z pliku 
  <tt/.deb/. Wiele skryptów &ldquor;preinst&rdquor; zatrzymuje dzia³anie us³ug ¶wiadczonych 
  przez pakiety, których now± wersjê w³a¶nie instalujemy, a¿ do czasu 
  zakoñczenia procesu instalacji lub aktualizacji (tzn. do chwili bezb³êdnego 
  wykonania skryptu &ldquor;postinst&rdquor;). 

<tag/postinst/
  <item>Ten skrypt z zasady wykonuje wszelkie operacje konfiguracyjne wymagane 
  do prawid³owej pracy pakietu po jego rozpakowaniu z pliku <tt/.deb/. 
  Skrypty &ldquor;postinst&rdquor; czêsto wymagaj± wprowadzenia pewnych informacji przez 
  u¿ytkownika i/lub ostrzegaj± go, ¿e w wypadku akceptacji warto¶ci domy¶lnych 
  powinien pamiêtaæ o pó¼niejszej rekonfiguracji pakietu w miarê potrzeb. 
  Wiele ze skryptów &ldquor;postinst&rdquor; wykonuje nastêpnie wszelkie polecenia 
  konieczne do uruchomienia lub ponownego uruchomienia danej us³ugi 
  po instalacji lub aktualizacji pakietu. 

<tag/prerm/
  <item>Z regu³y, skrypt ten zatrzymuje wszystkie demony zwi±zane z pakietem, 
  a jest wykonywany przed usuniêciem plików, które zawiera³ ten pakiet. 

<tag/postrm/
  <item>Ten skrypt z regu³y modyfikuje dowi±zania lub inne pliki 
  zwi±zane z pakietem i/lub usuwa pliki przezeñ utworzone (zobacz równie¿ 
  <ref id="virtual">). 
</taglist>

<p>Aktualnie wszystkie pliki steruj±ce pakietu (te z sekcji &ldquor;control&rdquor;) 
mo¿na znale¼æ w katalogu <file>/var/lib/dpkg/info</file>. 
Pliki zwi±zane z pakietem <tt>foo</tt> maj± nazwy zaczynaj±ce siê 
od &ldquor;foo&rdquor; i koñcz±ce na &ldquor;preinst&rdquor;, &ldquor;postinst&rdquor;, 
itd. Plik <file>foo.list</file> w tym katalogu wymienia wszystkie pliki 
zainstalowane podczas instalacji pakietu <tt>foo</tt>. 
(Po³o¿enie tych plików jest wewnêtrzn± spraw± programu <prgn>dpkg</prgn> 
i mo¿e byæ zmienione). 

<sect1 id="priority">Priorytety pakietów 
<!--
What is a Required/Important/Standard/Optional/Extra
package?
-->
<p>Ka¿demu pakietowi w Debianie opiekunowie dystrybucji przypisali pewien 
<strong>priorytet</strong>, maj±cy spe³niaæ pomocnicze funkcje wzglêdem systemu 
zarz±dzania pakietami. Istniej± nastêpuj±ce rodzaje priorytetów:

<list>
  <item>Pakiety <strong>Wymagane</strong> (<strong>Required</strong>), 
  s± konieczne do w³a¶ciwego dzia³ania systemu.
    <p>W ich sk³ad wchodz± wszystkie narzêdzia konieczne do naprawy uszkodzeñ 
    systemu. Nie wolno ich usuwaæ, bo system mo¿e ulec totalnej zapa¶ci, która 
    uniemo¿liwi nawet u¿ycie <prgn>dpkg</prgn> do próby jego odtworzenia.
    Systemy zawieraj±ce wy³acznie pakiety o priorytecie Required 
    najprawdopodobniej nie nadaj± siê do wielu rzeczy, ale posiadaj± 
    funkcjonalno¶æ wystarczaj±c± do ich uruchomienia i instalacji 
    dodatkowego oprogramowania.
  <item>Pakiety <strong>Wa¿ne</strong> (<strong>Important</strong>), 
  powinny byæ zainstalowane na ka¿dym systemie uniksopodobnym.
    <p>Inne pakiety, bez których system nie bêdzie dobrze dzia³a³, lub 
    nie bêdzie u¿yteczny, bêd± posiadaæ równie¿ ten priorytet. <strong>Nie
    nale¿±</strong> do nich Emacs, X11, TeX czy inne du¿e aplikacje. Pakiety 
    o priorytecie <strong>Important</strong> tworz± zaledwie go³± 
    infrastrukturê.
  <item>Pakiety <strong>Standardowe</strong> (<strong>Standard</strong>). 
  Stanowi± standard na ka¿dym systemie linuksowym, tworz±c niedu¿y, ale 
  niezbyt ograniczony system pracuj±cy w trybie tekstowym. 
    <p>Pakiety o tym priorytecie zainstaluj± siê domy¶lnie, je¿eli u¿ytkownik 
    nie wybierze nic ponadto. Grupa <strong>Standard</strong> zawiera niewiele 
    du¿ych aplikacji, ale zawiera Emacs (jest on bardziej elementem 
    infrastruktury, ni¿ aplikacj±) i rozs±dny wybór z TeX-a i LaTeX-a (to, 
    czego mo¿na u¿ywaæ bez X). 
  <item>Pakiety <strong>Opcjonalne</strong> (<strong>Optional</strong>) 
  s± pakietami, których instalacja mo¿e siê okazaæ rozs±dnym wyborem nawet 
  wtedy, gdy siê nie zna ich na wskro¶ i kiedy nie ma siê jakich¶ szczególnych 
  wymagañ. 
    <p>W sk³ad tej grupy wchodz± X11, pe³na dystrybucja TeX-a i mnóstwo 
    aplikacji. 
  <item>Pakiety <strong>Ekstra</strong> (<strong>Extra</strong>) 
  s± w konflikcie z innymi pakietami o wy¿szym priorytecie, maj± ma³±
  u¿yteczno¶æ dla nieobeznanych z nimi, albo maj± szczególne wymagania, 
  które nie pozwalaj± im wej¶æ do grupy pakietów Opcjonalnych. 
</list>

<p>Zwróæ uwagê na ró¿nice pomiêdzy "Priority: required", 
"Section: base" i "Essential: yes" w opisie pakietu.  "Section: base"
oznacza, ¿e ten pakiet jest instalowany w nowym systemie przed czymkolwiek 
innym. Wiêkszo¶æ pakietów z "Section: base" posiada ""Priority: required" 
lub przynajmniej "Priority: important" i wiele z nich jest oznaczona jako
"Essential: yes". "Essential: yes" oznacza, ¿e aby taki pakiet usun±æ
nale¿y u¿yæ dodatkowych parametrów do polecenia tak by wymusiæ to usuwanie
korzystaj±c z <prgn>dpkg</prgn>. Na przyk³ad <package>libc6</package>, 
<package>mawk</package> i <package>makedev</package> posiadaj±
w ustawieniach  "Priority: required" i "Section: base" ale nie 
"Essential: yes".

<sect1 id="virtual">Pakiety wirtualne 

<p>Pakiet wirtualny nosi nazwê odnosz±c± siê do dowolnego z grupy pakietów, 
posiadaj±cych zbli¿on± funkcjonalno¶æ. Na przyk³ad zarówno <prgn>tin</prgn> 
jak i <prgn>trn</prgn> s± klientami grup dyskusyjnych i ka¿dy z nich 
powinien spe³niaæ wymagania innego programu, wymagaj±cego czytnika news do 
dzia³ania. O obu z nich mówi siê wiêc, ¿e dostarczaj± &ldquor;wirtualny pakiet&rdquor; 
o nazwie <package>news-reader</package>. 

<p>Podobnie, <prgn>exim</prgn> i <prgn>sendmail</prgn> s± programami 
transportuj±cymi pocztê (mail transport agent). 
Mówi siê wiêc o nich, ¿e dostarczaj± wirtualny pakiet o nazwie 
<package>mail-transport-agent</package>. Je¿eli jeden z nich zostanie 
zainstalowany, ka¿dy program zale¿±cy od instalacji 
mail transport agent zostanie 
usatysfakcjonowany dziêki istnieniu tego pakietu wirtualnego. 

<p>Debian posiada równie¿ mechanizm umo¿liwiaj±cy administratorowi 
wyznaczenie preferowanego pakietu w razie, gdy kilka zainstalowanych 
pakietów dostarcza ten sam &ldquor;pakiet wirtualny&rdquor;. Odpowiednim poleceniem 
jest <prgn>update-alternatives</prgn>, które opisano w <ref id="alternatives">. 

<sect1 id="depends">Zale¿no¶ci miêdzy pakietami 
<!--
What is meant by saying that a package
  Depends/Recommends/Suggests/Conflicts/Replaces/Provides another package?
-->
<p>W systemie zarz±dzania pakietami w Debianie istnieje kategoria 
&ldquor;zale¿no¶ci&rdquor; miêdzy pakietami zaprojektowanych tak, aby w prosty sposób, 
(za pomoc± pojedynczej flagi) ukazaæ poziom niezale¿no¶ci funkcjonowania 
programu A od istnienia w danym systemie programu B: 
<list>
  <item>Pakiet A <strong>zale¿y</strong> (<strong>depends</strong> on) od 
  Pakietu B, je¿eli B musi byæ bezwarunkowo zainstalowany, aby mo¿na by³o 
  uruchomiæ A. W niektórych przypadkach A nie tylko zale¿y od B, ale od 
  jego okre¶lonej wersji. W takich przypadkach zale¿no¶æ wersji jest doln± 
  granic±, co nale¿y rozumieæ, ¿e A zale¿y od dowolnej wersji B nowszej od 
  wersji podanej. 
  <item>Pakiet A <strong>zaleca</strong> (<strong>recommends</strong>) 
  Pakiet B, je¿eli opiekun pakietu jest zdania, ¿e wiêkszo¶æ u¿ytkowników 
  nie zechcia³aby skorzystaæ z A bez posiadania mo¿liwo¶ci oferowanych przez B. 
  <item>Pakiet A <strong>sugeruje</strong> (<strong>suggests</strong>) 
  Pakiet B, je¿eli B zawiera pliki maj±ce zwi±zek z funkcjonalno¶ci± A 
  (zwykle zwiêkszaj±ce j±). 
  <item>Package A <strong>jest w konflikcie</strong> (<strong>conflicts</strong>) 
  z Pakietem B wtedy, kiedy A nie bêdzie dzia³aæ, je¿eli B jest zainstalowany 
  w systemie. Konflikty zachodz± przewa¿nie wtedy, gdy A zawiera pliki, które 
  maj± pod jakim¶ wzglêdem przewagê nad plikami nale¿±cymi do B.
  Stan &ldquor;conflicts&rdquor; czêsto wystêpuje wspólnie z &ldquor;replaces&rdquor;. 
  <item>Pakiet A <strong>zastêpuje</strong> (<strong>replaces</strong>) 
  Pakiet B wtedy, gdy pliki zainstalowane przez B ulegaj± usuniêciu 
  i (w niektórych wypadkach) nadpisaniu przez pliki nale¿±ce do A. 
  <item>Pakiet A <strong>dostarcza</strong> (<strong>provides</strong>) 
  Pakiet B wtedy, gdy wszystkie pliki i ca³a funkcjonalno¶æ 
  pakietu B zawieraj± siê w A. Daje to u¿ytkownikom mniejszych dysków 
  mo¿liwo¶æ zainstalowania tylko tej czê¶ci pakietu A, której 
  naprawdê potrzebuj±. 
</list>

<p>Bardziej szczegó³owe informacje o wykorzystaniu ka¿dego z powy¿szych pojêæ 
zawieraj± dokumenty <em>Packaging Manual</em> i <em>Policy Manual</em>.

<p>Dobrze wiedzieæ, ¿e <prgn>dselect</prgn> umo¿liwia bardziej subteln± 
kontrolê nad pakietami <strong>zalecanymi</strong> 
i <strong>sugerowanymi</strong>, ni¿ <prgn>apt-get</prgn>, 
który po prostu pobiera wszystkie pakiety oznaczone <strong>zale¿y</strong> 
a zostawia w spokoju <strong>rekomendowane</strong> 
i <strong>sugerowane</strong>. 
W nowoczesnym wydaniu obydwa programy s± &ldquor;nak³adk±&rdquor; na APT. 

<sect1 id="pre-depends">Znaczenie &ldquor;pre-depends&rdquor;

<p>Pojêcie &ldquor;zale¿no¶æ wstêpna&rdquor; (&ldquor;pre-depend&rdquor;) stanowi szczególny rodzaj 
zale¿no¶ci. W wypadku zwyczajnego pakietu <prgn>dpkg</prgn> rozpakuje plik 
pakietu (plik <tt>.deb</tt>) niezale¿nie od tego, czy pliki, od których 
dany pakiet zale¿y, s± ju¿ w systemie. Samo rozpakowanie polega na tym, ¿e 
<prgn>dpkg</prgn> wyci±ga z pliku archiwum pliki przeznaczone do instalacji 
w systemie u¿ytkownika i umieszcza je we w³a¶ciwych miejscach w tym systemie.
Je¿eli pakiet w³a¶nie instalowany <strong>zale¿y</strong> od obecno¶ci
w systemie u¿ytkownika jakich¶ innych pakietów, <prgn>dpkg</prgn> odmówi
dokoñczenia instalacji (co przejawi³oby siê wykonaniem akcji &ldquor;configure&rdquor;) a¿
do czasu zainstalowania tych pakietów.

<p>Istnieje jednak trochê pakietów, których <prgn>dpkg</prgn> nie bêdzie 
chcia³ nawet rozpakowaæ, dopóki nie zostan± spe³nione pewne zale¿no¶ci. 
Mówimy, ¿e takie pakiety &ldquor;pre-depend&rdquor; (zale¿± wstêpnie) od obecno¶ci 
w systemie jakich¶ innych pakietów. Mechanizm ten zosta³ wprowadzony 
w projekcie Debian w celu u³atwienia bezpiecznej instalacji nowych wersji 
pakietów w dobie przej¶cia z formatu <tt>a.out</tt> na <tt>ELF</tt>, gdy nawet 
<strong>kolejno¶æ</strong> rozpakowywania pakietów by³a krytyczna. 
S± te¿ inne sytuacje zwi±zane z du¿ymi aktualizacjami systemu, w których omawiany 
mechanizm okazuje siê u¿yteczny, np. dla pakietów o priorytecie &ldquor;Wymagane&rdquor; 
zale¿nych od libc. 

<p>Bardziej szczegó³owe informacje mo¿na znale¼æ w dokumencie Packaging Manual.

<sect1 id="pkgstatus">Status pakietu 
<!--
What is meant by unknown/install/remove/purge/hold in
  the package status?
-->
<p>Status pakietu mo¿e przybieraæ formê: &ldquor;nieznany&rdquor; (&ldquor;unknown&rdquor;), &ldquor;zainstalowaæ&rdquor; 
(&ldquor;install&rdquor;), &ldquor;usun±æ czê¶ciowo&rdquor; (&ldquor;remove&rdquor;), &ldquor;usun±æ ca³kowicie&rdquor; (&ldquor;purge&rdquor;) lub 
&ldquor;zatrzymaæ&rdquor; (&ldquor;hold&rdquor;).
Te znaczniki pokazuj±, co u¿ytkownik chcia³by 
uczyniæ z danym pakietem (przez dokonanie wyboru w sekcji &ldquor;Select&rdquor; programu 
<prgn>dselect</prgn> lub przez bezpo¶rednie wywo³anie <prgn>dpkg</prgn>). 

<p>Ich znaczenie jest nastêpuj±ce:
<list compact>
  <item><strong>unknown</strong>  - u¿ytkownik nigdy nie zdradzi³, czy 
  w ogóle chce tego pakietu 
  <item><strong>install</strong>  - u¿ytkownik chce, aby pakiet (lub jego 
  nowsza wersja) zosta³ zainstalowany. 
  <item><strong>remove</strong>   - u¿ytkownik chce, aby pakiet zosta³ 
  usuniêty, ale nie chce usuwaæ jego plików konfiguracyjnych. 
  <item><strong>purge</strong>    - u¿ytkownik chce ca³kowitego usuniêcia 
  pakietu, z plikami konfiguracyjnymi w³±cznie. 
  <item><strong>hold</strong>     - u¿ytkownik nie chce, aby pakiet by³ 
  ruszany, tzn. chce zachowaæ bie¿±c± wersjê pakietu w bie¿±cym stanie, 
  wszystko jedno jakim. 
</list>

<sect1 id="puttingonhold">Zapobieganie instalacji nowych wersji pakietów 
<!--
How do I put a package on hold?
Made major rewrite to accommodate new /etc/apt/preferences in progress
-->
<p>S± dwa mechanizmy chroni±ce pakiety przed instalacj± nowej wersji, 
jeden z nich oparty jest na <prgn>dpkg</prgn>, a drugi od dystrybucji  
Woody, na <prgn>APT</prgn>. 

<p>Wykorzystuj±c ten pierwszy z nich, nale¿y najpierw wyeksportowaæ listê 
zawieraj±c± nazwy zainstalowanych pakietów i status ka¿dego z nich: 
<example>
dpkg --get-selections \* &gt; <var>selections.txt</var> 
</example>
Nastêpnie nale¿y dokonaæ edycji powsta³ego pliku 
<file><var>selections.txt</var></file>, zmieniaj±c odpowiednio wiersz 
zawieraj±cy nazwê pakietu, który chcemy chroniæ (np. <package/libc6/), 
z czego¶ takiego: 
<example>
libc6                       install
</example>
na co¶ takiego:
<example>
libc6                       hold
</example>
Plik nale¿y zapisaæ na dysku i wprowadziæ go do bazy danych <prgn>dpkg</prgn> 
wykonuj±c polecenie: 
<example>
dpkg --set-selections &lt; <var>selections.txt</var> 
</example>
Je¿eli dobrze znamy nazwê pakietu, który chcemy chroniæ, mo¿emy po prostu
wykonaæ:
<example>
echo libc6 hold | dpkg --set-selections 
</example>
Dla ka¿dego potraktowanego w ten sposób pakietu oznacza to, ¿e bêdzie 
on chroniony przed zainstalowaniem swojej nowszej wersji. 

<p>Taki sam wynik mo¿na uzyskaæ korzystaj±c z programu <prgn>dselect</prgn>. 
Wystarczy w tym wypadku wej¶æ do sekcji [S]elect, odnale¼æ pakiet, który 
chcemy chroniæ przed zmian± i nacisn±æ klawisz &ldquor;=&rdquor; lub &ldquor;H&rdquor;. Zmiana 
statusu bêdzie obowi±zywaæ od chwili opuszczenia sekcji [S]elect. 

<p>Wiod±cy w dystrybucji Woody, system APT posiada nowy, alternatywny 
mechanizm ochrony pakietów podczas ich pobierania z repozytorium, oparty 
na <tt>Pin-Priority</tt>. 
Wiêcej szczegó³ów na ten temat dostarczy <manref name="apt_preferences" 
section="5">, wraz z <url id="&apt-howto;"> lub pakietem 
<package>&p-apt-howto;</package>; <ref id="apt-preferences"> równie¿
zawiera krótkie wyja¶nienie.

<sect1 id="sourcepkgs">Pakiety ¼ród³owe 

<p>
Pakiety ¼ród³owe s± przechowywane w katalogu o nazwie <file>source</file>, mo¿na
je pobieraæ klasycznymi metodami, mo¿na te¿ u¿yæ polecenia 
<example>
apt-get source <var>foo</var>
</example>
do ich pobrania (o konfiguracji programu APT do tej operacji 
szerzej traktuje podrêcznik systemowy: <manref name="apt-get" section="8">). 

<sect1 id="sourcebuild">Tworzenie pakietów binarnych ze ¼ród³owych 

<p>Aby skompilowaæ pliki ¼ród³owe dla pakietu o nazwie <tt><var>foo</var></tt>,
 bêdzie trzeba u¿yæ wszystkich, z nastêpuj±cych plików: <file><var>foo_*</var>.dsc</file>,
<file><var>foo_*</var>.tar.gz</file> oraz <file><var>foo_*.diff</var>.gz</file>. 
(ciekawa rzecz: dla rodzimych pakietów Debiana nie ma plików <tt>.diff.gz</tt>).

<p>Je¶li pobrali¶my ju¿ wszystkie potrzebne pliki i mamy zainstalowany pakiet 
<package/dpkg-dev/, polecenie 
<example>
$ dpkg-source -x <var>foo_version-revision</var>.dsc
</example>
rozpakuje pakiet do katalogu o nazwie <tt><var>foo-version</var></tt>.

<p>Aby utworzyæ pakiet binarny, nale¿y wydaæ nastêpuj±ce polecenie (tutaj 
podane w wersji dla zwyk³ego u¿ytkownika):
<example>
$ cd foo-version
$ su -c "apt-get update ; apt-get install fakeroot"
$ dpkg-buildpackage -rfakeroot -us -uc 
</example>
Nastêpnie,
<example>
$ su -c "dpkg -i ../<var>foo_version-revision_arch</var>.deb" 
</example>
aby zainstalowaæ ¶wie¿o utworzony pakiet. Wiêcej informacji - <ref id="port">. 

<!-- woody has simpler commands and build-depends -->

<sect1 id="creatingdebs">Tworzenie nowych pakietów Debiana 

<p>Szczegó³owych informacji dotycz±cych tworzenia nowych pakietów dostarczy 
lektura <em>New Maintainers' Guide</em>, dostêpnego jako pakiet 
<package/maint-guide/, lub pod adresem <url id="&maint-guide;" name="&urlname;">. 
<!--
<url id="ftp://ftp.debian.org/debian/doc/package-developer/maint-guide.html.tar.gz">.
-->
<!-- 
<sect id="pkgtools">Package Management Tools
Once many were moved up here but now moved down
-->

<!-- 
Rarely use command for Woody, exclude but mention its manual page above. 
<sect2 id="dpkg-deb">dpkg-deb 
Removed below
-->

<!--
move up contents as a part of APT
<sect2 id="apt-get">apt-get
-->

<!--
Rarely use command for Woody, exclude but mention its manual page above.
<sect2 id="dpkg-split">dpkg-split
removed
-->

<!--
Moved down
<sect1 id="updaterunning">Upgrade running system
Debian claims to be able to update a running program;
  how is this accomplished?
-->

<!--
<sect1 id="whatpackages">How can I tell what packages are already installed 
  on a Debian system?
removed dpkg list and status things here
-->

<!-- these information are in debian.sgml and above
<sect1 id="filesearch">How can I find out what package produced a particular
  file?
removed dpkg list and status things here
-->

<sect id="uptodate">Aktualizacja systemu Debian 

<p>Jednym ze strategicznych celów Debiana jest dostarczenie spójnych metod 
umo¿liwiaj±cych bezpieczn± instalacjê nowego oprogramowania; dok³adamy starañ, 
aby proces instalacji nowego wydania na poprzednim przebiega³ jak
najbardziej g³adko. Pakiety bêd± informowaæ u¿ytkownika o wa¿nych zdarzeniach 
podczas instalacji, a czêsto bêd± proponowaæ rozwi±zanie problemu.

<p>Nale¿y przeczytaæ Uwagi Wydawnicze (Release Notes), dokument 
opisuj±cy szczegó³y instalacji nowej wersji (upgrade'u) poszczególnych 
dystrybucji, dostarczany na ka¿dej p³ytce z systemem Debian i dostêpny 
na stronach WWW pod adresem 
<url id="&stable-release;"> lub <url id="&testing-release;">. 

<p>
Praktyczny poradnik traktuj±cy o instalacji nowej dystrybucji na poprzedni± 
jest zawarty w <ref id="package">. Ten rozdzia³ opisuje podstawowe szczegó³y. 

<!-- Obsolete, removed
<sect1 id="libc5to6upgrade">How can I upgrade my Debian 1.3.1 (or earlier)
  distribution, based on libc5, to 2.0 (or later), based on libc6?
...
This paragraph is obsolete.
-->

<sect1 id="howtocurrent">Sposoby aktualizacji systemu Debian 

<p>Zawsze mo¿na u¿yæ anonimowego FTP lub programu <prgn>wget</prgn>, 
aby dostaæ siê do sieciowego archiwum Debiana, przeszukaæ katalogi, znale¼æ ¿±dany  
plik, pobraæ go i wreszcie zainstalowaæ przy pomocy <prgn>dpkg</prgn> 
(<prgn>dpkg</prgn> instaluje nowe pakiety na w³a¶ciwym miejscu, 
równie¿ na dzia³aj±cym systemie). 
Czasami jednak nowa wersja jednego pakietu wymaga instalacji nowej wersji 
innego pakietu, co mo¿e prowadziæ do uniemo¿liwienia instalacji ¿±danego 
pakietu do czasu zainstalowania tego drugiego, wymaganego. 

<p>Dla wielu osób takie rêczne podej¶cie jest zbyt czasoch³onne, ze wzglêdu 
na fakt, ¿e Debian tak szybko ewoluuje - co tydzieñ dochodzi tuzin lub wiêcej 
nowych pakietów. Tu¿ przed du¿ymi wydaniami ta liczba jeszcze ro¶nie. ¯eby 
sobie daæ radê z tak± lawin±, wiele osób preferuje u¿ywanie zautomatyzowanego 
oprogramowania. Do tego celu powsta³o kilka wyspecjalizowanych narzêdzi 
do zarz±dzania pakietami. 

<sect1 id="pkgtools">Przegl±d narzêdzi do zarz±dzania pakietami

<!-- reorganize this and following section in a compact section -->
<!--
<sect1 id="pkgprogs">What programs does Debian provide for managing its
  packages?
  Insert overview and
  bump sect2 to sect1
-->
<p>System zarz±dzania pakietami w Debianie posiada dwa cele: manipulacja 
samymi pakietami oraz pobieranie plików wraz z pakietami z archiwum pakietów. 
Pierwsze zadanie jest wykonywane przez <prgn>dpkg</prgn>, drugie 
- przez APT i <prgn>dselect</prgn> 

<sect1 id="dpkg"><prgn>dpkg</prgn>

<p>Jest to g³ówny program do manipulacji plikami z pakietami. Pe³ny opis mo¿na 
znale¼æ w <manref name="dpkg" section="8">. 
<!-- "install dpkg" deleted because it's a required package -->

<p><prgn>dpkg</prgn> wystêpuje w towarzystwie kilku prostych programów 
pomocniczych:

<list>
<item><prgn>dpkg-deb</prgn>: Manipulacja plikami <tt>.deb</tt>. 
 <manref name="dpkg-deb" section="1">
<item><prgn>dpkg-ftp</prgn>: Starszy program do pobierania plików z pakietami. 
 <manref name="dpkg-ftp" section="1">
<item><prgn>dpkg-mountable</prgn>: Starszy program do pobierania plików z pakietami. 
 <manref name="dpkg-mountable" section="1">
<item><prgn>dpkg-split</prgn>: Dzieli du¿y pakiet na mniejsze pliki. 
 <manref name="dpkg-split" section="1">
</list>

<prgn>dpkg-ftp</prgn> i <prgn>dpkg-mountable</prgn> zosta³y zast±pione przez 
system APT.

<!-- Insert APT and apt-get here: -->
<sect1 id="apt">APT

<p>APT (skrót od Advanced Packaging Tool - Zaawansowane Narzêdzie Pakietuj±ce) 
jest zaawansowanym interfejsem do debianowego systemu zarz±dzania pakietami 
sk³adaj±cym siê z kilku programów, których nazwy z regu³y zaczynaj± siê 
od &ldquor;apt-&rdquor;. 
<prgn>apt-get</prgn>, <prgn>apt-cache</prgn> i <prgn>apt-cdrom</prgn> 
s± dzia³aj±cymi w ¶rodowisku znakowym narzêdziami do obs³ugi pakietów. S± 
równie¿ u¿ywane jako &ldquor;back end&rdquor; (program wykonuj±cy w³a¶ciw± pracê pod os³on± 
interfejsu u³atwiaj±cego u¿ytkownikowi obs³ugê) dla innych narzêdzi takich, 
jak <prgn/dselect/ i <prgn/aptitude/.

<p>Wiêcej informacji mo¿na uzyskaæ, instaluj±c pakiet <package/apt/ i czytaj±c

<manref name="apt-get" section="8">,
<manref name="apt-cache" section="8">,
<manref name="apt-cdrom" section="8">,
<manref name="apt.conf" section="5">,
<manref name="sources.list" section="5">, 
<manref name="apt_preferences" section="5"> (Woody) oraz 
<file>/usr/share/doc/apt/guide.html/index.html</file>. 

<p>Innym ¼ród³em informacji mo¿e byæ równie¿ 
<url id="&apt-howto;" name="APT HOWTO">, dostêpny po zainstalowaniu 
pakietu <package/apt-howto/ jako <file>&f-apt-howto;</file>. 

<p><tt>apt-get upgrade</tt> i <tt>apt-get dist-upgrade</tt> 
pobieraj± tylko pakiety wymienione w polach &ldquor;Depends:&rdquor; i ignoruj± wszystkie 
pakiety wymienione w polach &ldquor;Recommends:&rdquor; i &ldquor;Suggests:&rdquor;. 
Je¿eli siê tego nie lubi, u¿ywa siê <prgn>dselect</prgn>. 

<!-- removed boring APT info -->

<!-- bump from sect2 to sect1 -->
<sect1 id="dselect-basics"><prgn>dselect</prgn>

<p><prgn>dselect</prgn> jest zaopatrzonym w menu, interfejsem systemu 
zarz±dzania pakietami w Debianie. Jest szczególnie u¿yteczny przy okazji 
pierwszych instalacji i wiêkszych aktualizacji. Zobacz <ref id="dselect">. 

<p>Wiêcej informacji zawiera dokument <file>/usr/share/doc/install-doc/dselect-beginner.en.html</file> 
z pakietu <package/install-doc/ 
lub <url id="&dselect-beginner;" name="dselect Documentation for Beginners (Dokumentacja dselect dla pocz±tkuj±cych)">. 

<!-- removed boring dselect info -->

<!-- move this up and make this sect1
<sect2 id="apt">APT
-->
<!-- remove this and mention above in dpkg
<sect2 id="dpkg-ftp">dpkg-ftp
-->
<!-- remove this
<sect2 id="mirror">mirror
-->

<!-- remove this section and mention above in dpkg
<sect2 id="dpkg-mountable">dpkg-mountable
-->

<!--
<sect1 id="upgradesingle">Must I go into single-user mode in order to
  upgrade a package?

<p>No.  Packages can be upgraded in place, even in running systems.
Debian has a <prgn>start-stop-daemon</prgn> program that is invoked to stop,
then restart running process if necessary during a package upgrade.
-->

<sect1 id="updaterunning">Aktualizacja dzia³aj±cego systemu

<p>Kernel i system plików u¿ywane w Debianie umo¿liwiaj± zastêpowanie 
jednych plików drugimi nawet wtedy, gdy s± one w³a¶nie u¿ywane.

<p>Dostarczamy równie¿ program o nazwie <prgn/start-stop-daemon/, u¿ywany 
do uruchamiania demonów (pracuj±cych w tle programów u¿ytkowych) przy starcie 
systemu i do ich zatrzymywania podczas zmiany trybu pracy kernela 
(np. z trybu wielou¿ytkownikowego na jednou¿ytkownikowy lub na &ldquor;halt&rdquor;). Tego 
samego programu u¿ywaj± skrypty instalacyjne, gdy instalowany jest nowy pakiet 
zawieraj±cy demony - do ich zatrzymywania i uruchamiania w miarê potrzeb. 

<p>Nawiasem mówi±c, Debian nie wymaga, aby system poddawany aktualizacji
pracowa³ w trybie jednou¿ytkownikowym.

<sect1 id="savedebs">Pobrane i chwilowo zapisane na dysku pliki <tt>.deb</tt> 

<p>Je¿eli rêcznie pobra³e¶ pliki pakietów na dysk (co nie jest absolutnie 
konieczne, wystarczy zapoznaæ siê z wy¿ej zamieszczonym opisem 
<prgn>dpkg-ftp</prgn> lub APT), to po ich zainstalowaniu mo¿esz usun±æ 
ze swojego systemu pliki <tt>.deb</tt>. 

<p>W wypadku u¿ycia programu APT, pakiety s± zapisywane w katalogu 
<file>/var/cache/apt/archives/</file>. Mo¿na je skasowaæ po zainstalowaniu 
(<tt>apt-get clean</tt>) albo skopiowaæ do katalogu 
<file>/var/cache/apt/archives/</file> na innej maszynie, aby 
nie ¶ci±gaæ ich kolejny raz przy powtórnych instalacjach. 

<sect1 id="keepingalog">Rejestracja zmian w pakietach 

<p><prgn/dpkg/ rejestruje pakiety, które rozpakowano, skonfigurowano, usuniêto 
czê¶ciowo lub ca³kowicie, ale (przynajmniej obecnie) nie przechowuje rejestru 
tego, co siê dzia³o na konsoli w czasie poddawania pakietów tym dzia³aniom. 

<p>Najprostszym sposobem obej¶cia tego problemu jest uruchamianie 
sesji <prgn>dpkg</prgn>, <prgn>dselect</prgn>, <prgn>apt-get</prgn> itd. 
przy pomocy programu <prgn>script</prgn> (<manref name="script" section="1">). 

<sect id="boot">Proces ³adowania systemu w Debianie 

<sect1 id="init">Program <prgn>init</prgn> 

<p>Jak wszystkie Uniksy, Debian ³aduje siê do pamiêci wykonuj±c 
program <prgn>init</prgn>. 
W pliku konfiguracyjnym programu <prgn>init</prgn>
(<file>/etc/inittab</file>) 
jest zapisane, ¿e w pierwszej kolejno¶ci ma byæ wykonany skrypt 
<file>/etc/init.d/rcS</file>. Uruchamia on wszystkie skrypty znajduj±ce siê 
w katalogu <file>/etc/rcS.d/</file> poprzez nowe podprocesy lub ich kopie,  
zale¿nie od rozszerzenia nazwy pliku, wykonuj±c inicjalizacjê systemu, 
w sk³ad której wchodzi sprawdzanie i montowanie systemów plików, 
³adowanie modu³ów, uruchamianie us³ug sieciowych, ustawianie zegara i in. 
Nastêpnie, dla kompatybilno¶ci z innymi systemami, uruchamia skrypty 
umieszczone w katalogu <file>/etc/rc.boot/</file> 
(z wyj±tkiem tych, których nazwy 
zawieraj± &ldquor;.&rdquor;). Skrypty umieszczone w tym katalogu s± zwykle zarezerwowane 
do wy³±cznego u¿ytku administratora i u¿ywanie ich w pakietach nie jest 
pochwalane. Wiêcej informacji mo¿na znale¼æ w Podrêczniku Polityki Debiana w
<ref id="init-hints"> i <url id="&sysvinit;" name="System run levels and
init.d scripts">.

<sect1 id="runlevels">Poziomy startu (Runlevels)

<p>Po za³adowaniu systemu, <prgn>init</prgn> wykonuje wszystkie skrypty 
startowe w katalogu okre¶lonym przez domy¶lny poziom startu 
(default runlevel, wpis <tt>id</tt> w pliku <file>/etc/inittab</file>). 
Jak wiêkszo¶æ Uniksów kompatybilnych z System V, Linux ma 7 poziomów startu: 

<list compact>
<item>0 (zatrzymanie systemu), 
<item>1 (tryb jednou¿ytkownikowy), 
<item>2 do 5 (ró¿ne tryby wielou¿ytkownikowe) oraz 
<item>6 (restart czyli prze³adowanie systemu). 
</list>
<p>
W Debianie ustawia siê <tt>id=2</tt>, co oznacza, ¿e domy¶lny poziom startu 
po wej¶ciu w tryb wielou¿ytkownikowy wynosi 2, a uruchomieniu podlegaj± 
skrypty znajduj±ce siê w katalogu <file>/etc/rc2.d/</file>. 

<p>W rzeczywisto¶ci skrypty w ka¿dym z katalogów 
<file>/etc/rc<var>N</var>.d/</file> s± tylko symbolicznymi dowi±zaniami 
(symlinkami) do skryptów w <file>/etc/init.d/</file>. 
Ich <strong>nazwy</strong> natomiast dobiera siê tak, aby odzwierciedla³y 
<strong>sposób</strong>, w jaki zostan± uruchomione skrypty znajduj±ce siê 
w <file>/etc/init.d/</file>. W szczególno¶ci, przed wej¶ciem na którykolwiek 
poziom startu uruchomione zostaj± wszystkie skrypty o nazwach zaczynaj±cych 
siê na &ldquor;K&rdquor;; s± to skrypty wy³±czaj±ce us³ugi. Nastêpnie uruchomione 
zostaj± skrypty o nazwach zaczynaj±cych siê na &ldquor;S&rdquor;, które s± skryptami 
uruchamiaj±cymi us³ugi. Dwucyfrowa liczba wystêpuj±ca po &ldquor;K&rdquor; lub &ldquor;S&rdquor; okre¶la 
kolejno¶æ, w jakiej skrypty zostan± uruchomione. Skrypty z mniejszymi liczbami 
s± uruchamiane w pierwszej kolejno¶ci. 

<p>To wszystko dzia³a, poniewa¿ skrypty w <file>/etc/init.d/</file> pobieraj± 
argument, którego warto¶ci± mo¿e byæ &ldquor;start&rdquor;, &ldquor;stop&rdquor;, &ldquor;reload&rdquor;, &ldquor;restart&rdquor; 
lub &ldquor;force-reload&rdquor; i wykonuj± zadanie okre¶lone przez ten w³a¶nie argument. 
Skryptów tych mo¿na u¿ywaæ równie¿ po za³adowaniu systemu, steruj±c w ten 
sposób ró¿nymi procesami.

<p>Na przyk³ad, (z argumentem &ldquor;reload&rdquor;) polecenie
<example>
# /etc/init.d/exim4 reload
</example>
wysy³a demonowi programu exim4 polecenie powtórnego wczytania pliku 
konfiguracyjnego. 

<sect1 id="custombootscripts">Modyfikacje procesu ³adowania 
<p>
Debian nie korzysta z pochodz±cego z BSD katalogu 
<tt>rc.local</tt> w celu dostosowywania procesu ³adowania do jakich¶ szczególnych ¿yczeñ 
u¿ytkownika; zamiast tego oferuje nastêpuj±cy mechanizm.

<p>Za³ó¿my, ¿e system powinien wykonaæ skrypt <tt>foo</tt> przy starcie 
lub podczas wchodzenia na który¶ z poziomów startu. Administrator powinien 
wtedy: 
<enumlist>
<item>Umie¶ciæ skrypt <tt>foo</tt> w katalogu <file>/etc/init.d/</file>. 
<item>Uruchomiæ wystêpuj±ce w Debianie polecenie <prgn>update-rc.d</prgn> 
z odpowiednimi argumentami, ustawiaj±c w ten sposób dowi±zania miêdzy 
wymienionymi w wierszu poleceñ plikami w katalogach <tt>rc<var>?</var>.d</tt> 
  a <file>/etc/init.d/foo</file>, 
  gdzie <var>?</var> jest liczb± od 0 do 6 odpowiadaj±c± jednemu z poziomów 
  startu (runlevel) Systemu V.
  <item>Prze³adowaæ system.
</enumlist>

<p>Polecenie <prgn>update-rc.d</prgn> ustawi dowi±zania miêdzy plikami 
w katalogach <tt>rc<var>?</var>.d</tt> a skryptem w <file>/etc/init.d/</file>. 
Nazwa ka¿dego z dowi±zañ bêdzie siê zaczynaæ od litery &ldquor;K&rdquor; lub &ldquor;S&rdquor;, po której 
wyst±pi liczba oraz nazwa skryptu. Gdy system osi±gnie poziom startu 
<var>N</var>, skrypty z <file>/etc/init.d/</file> posiadaj±ce w katalogu 
<file>/etc/rc<var>N</var>.d/</file> dowi±zania o nazwach zaczynaj±cych siê 
na &ldquor;K&rdquor; s± wykonywane z argumentem <tt>stop</tt>, nastêpnie s± wykonywane 
skrypty, nazwy odniesieñ do których zaczynaj± siê na &ldquor;S&rdquor;, przyjmuj±c 
za argument <tt>start</tt>. 

<p>Mo¿na, na przyk³ad, spowodowaæ uruchomienie skryptu <tt>foo</tt> 
w toku sekwencji startowej umieszczaj±c go w <file>/etc/init.d/</file> 
i instaluj±c dowi±zania poleceniem <tt>update-rc.d foo defaults 19</tt>. 
Argument <tt>defaults</tt> odnosi siê do domy¶lnych poziomów startu 
(od 2 do 5). Argument <tt>19</tt> gwarantuje, ¿e <tt>foo</tt> zostanie 
uruchomiony przed którymkolwiek skryptem zawieraj±cym liczbê 20 lub wiêksz±. 

<sect id="diverse">Wsparcie dla ró¿norodno¶ci
<p>
Debian oferuje wiele sposobów spe³niania ¿yczeñ administratora 
systemu bez gro¼by uszkodzenia systemu. 
<list>
<item><prgn>dpkg-divert</prgn>, zobacz <ref id="dpkg-divert">.
<item><prgn>equivs</prgn>, zobacz <ref id="equivs">.
<item><prgn>update-alternatives</prgn>, zobacz <ref id="alternatives">.
<item><prgn>make-kpkg</prgn> mo¿e zadowoliæ wymagania stawiane przez wiele 
bootloaderów. Zobacz <manref name="make-kpkg" section="1"> 
i <ref id="kernel-debian">.
</list>
Wszystkie pliki w podkatalogach katalogu <file>/usr/local/</file> 
nale¿± do administratora systemu i &debian; ich nawet nie tknie. Wiêkszo¶æ 
(lub wszystkie) plików w podkatalogach <file>/etc</file> to pliki 
konfiguracyjne i &debian; nie nadpisze ich w trakcie instalacji nowszych wersji 
pakietów, chyba, ¿e administrator wyra¼nie sobie tego za¿yczy. 

<sect id="i18n">Internacjonalizacja
<p>
System &debian; jest zinternacjonalizowany: obs³uguje wy¶wietlanie 
i wprowadzanie znaków w wielu jêzykach, tak na konsoli tekstowej, jak i w Xach. 
Wiele dokumentów, stron podrêcznika systemowego <prgn>man</prgn> i komunikatów 
systemu przet³umaczono i t³umaczy siê na coraz wiêksz± liczbê jêzyków. 
W trakcie instalacji, Debian zachêca u¿ytkownika do wybrania jêzyka instalacji 
(czasem nawet lokalnego dialektu). 
<p>
Je¿eli zainstalowany przez Ciebie system nie obs³uguje wszystkich w³a¶ciwo¶ci 
jêzykowych, których potrzebujesz, lub je¿eli chcesz zmieniæ jêzyk lub 
zainstalowaæ inn± klawiaturê, która obs³ugiwa³aby Twój jêzyk, zapoznaj siê 
z <ref id="l10n">.

<sect id="kernel-details">Debian i kernel
<p>
Zobacz <ref id="kernel">.

<sect1 id="non-debian-kernel">Kompilacja j±dra ze ¼róde³ innych, ni¿ debianowe 

<p><!--Yes.  But you have-->
Trzeba zrozumieæ obowi±zuj±ce w Debianie zasady postêpowania odno¶nie plików 
nag³ówkowych.

<p>Biblioteki C w Debianie buduje siê z wykorzystaniem najnowszych 
<strong>stabilnych</strong> wydañ plików nag³ówkowych <strong>j±dra</strong> 
(<strong>kernel</strong>) (Na przyk³ad, Debian-1.2 u¿ywa³ plików nag³ówkowych 
j±dra w wersji 5.4.13). 

<p>Taka praktyka jest w kontra¶cie ze wszystkimi pakietami zawieraj±cymi pliki 
¼ród³owe j±dra, które wykorzystuj± równie¿ nowsze wersje plików nag³ówkowych. 
Pliki nag³ówkowe j±dra rozpowszechniane z jego ¼ród³ami s± umieszczone 
w katalogu <file>/usr/include/linux/include/</file>. 

<p>W razie potrzeby kompilacji programu wymagaj±cego plików nag³ówkowych 
kernela w wersji nowszej, ni¿ zawarte w pakiecie <package/libc6-dev/, trzeba 
do linii poleceñ w trakcie kompilacji dodaæ 
<tt>-I/usr/src/linux/include/</tt>. Co¶ takiego w pewnym momencie 
przydarzy³o siê na przyk³ad pakietowi demona automountera (<package/amd/). 
Gdy nowsze j±dro zmieni³o trochê funkcji obs³uguj±cych NFS, <prgn>amd</prgn> 
musia³ zostaæ o tym powiadomiony, co wymaga³o do³±czenia najnowszej 
wersji plików nag³ówkowych j±dra. 

<sect1 id="customkernel">Narzêdzia do tworzenia j±dra 

<p>U¿ytkowników, którzy chc± (albo musz±) utworzyæ w³asne pakiety kernela, 
zachêcamy do instalacji pakietu <package/kernel-package/. Zawiera on skrypt 
umo¿liwiaj±cy zbudowanie pakietu zawieraj±cego j±dro, umo¿liwiaj±c w ten sposób utworzenie 
Debianowego pakietu zawieraj±cego ju¿ skompilowane j±dro przez wydanie 
polecenia
<example>
# make-kpkg kernel_image
</example>
w katalogu <file>/usr/src/linux/</file>.
Bardziej szczegó³owych informacji udostêpnia polecenie
<example>
# make-kpkg --help
</example>
oraz strona podrêcznika systemowego <manref name="make-kpkg" section="1">
i <ref id="kernel">.

<p>U¿ytkownicy chc±cy skompilowaæ najnowszy kernel (albo po prostu dowolny, 
wymarzony) musz± samodzielnie pobraæ kod ¼ród³owy ze swojego ulubionego 
archiwum sieciowego, o ile nie jest dostêpny pakiet 
kernel-source-<var>version</var>, gdzie <var>version</var> oznacza wersjê 
kernela. Skrypt startowy <file>initrd</file> wymaga specjalnej ³aty na kernel 
o nazwie <prgn>initrd</prgn>; zobacz <url id="&bug-initrd;">. 

<p>Szczegó³ow± instrukcjê u¿ytkowania pakietu <package/kernel-package/ 
mo¿na znale¼æ w pliku <file>/usr/doc/kernel-package/README.gz</file>. 

<!-- TODO: check out a new source of details, this README isn't too useful,
  I'm told (joy) -->

<sect1 id="modules">Specjalne wyposa¿enie do obs³ugi modu³ów j±dra 

<p>Pakiet <package/modconf/ zawiera skrypt <file>/usr/sbin/modconf</file>, 
którego mo¿na u¿ywaæ w celu wprowadzania w³asnych modyfikacji do konfiguracji 
modu³ów. Skrypt ten wy¶wietla menu, wypytuj±c u¿ytkownika o szczegó³y 
dotycz±ce ³adowanych sterowników urz±dzeñ w jego systemie. Na podstawie 
udzielonych odpowiedzi przeprowadzana jest modyfikacja pliku 
<file>/etc/modules.conf</file> (wyszczególniaj±cego aliasy i inne argumenty, 
których nale¿y u¿yæ w po³±czeniu z ró¿nymi modu³ami), w powi±zaniu 
z plikami w <file>/etc/modutils/</file> i plikiem <file>/etc/modules</file> 
(zawieraj±cym spis modu³ów, które trzeba za³adowaæ przy starcie systemu). 

<p>Podobnie jak ¼ród³a kernela zosta³y wyposa¿one w plik
<file>Configure.help</file>, 
u³atwiaj±cy konfiguracjê kerneli w³asnej produkcji, tak i pakiet 
<package/modconf/ daje do dyspozycji seriê plików pomocy 
(w <file>/usr/share/modconf/</file>), dostarczaj±cych szczegó³owych 
informacji na temat odpowiednich argumentów dla ka¿dego modu³u. Przyk³ady 
mo¿na znale¼æ w <ref id="kernel-modules">. 

<sect1 id="removeoldkernel">Usuwanie starego pakietu z j±drem

<p>Skrypt <prgn>kernel-image-<var>NNN</var>.prerm</prgn> sprawdza, 
czy kernel, który jest aktualnie za³adowany, nie jest tym samym, który 
usi³ujemy odinstalowaæ. Mo¿na wiêc niechciane pakiety kerneli usuwaæ u¿ywaj±c 
polecenia 
<example>
# dpkg --purge --force-remove-essential kernel-image-<var>NNN</var>
</example>

(Oczywi¶cie, w miejsce <var>NNN</var> trzeba wpisaæ wersjê i podwersjê 
usuwanego kernela). 
</sect>
