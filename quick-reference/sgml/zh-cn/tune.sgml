<!-- CVS revision of this document "# Revision is not used here.#"  -->
<!-- CVS revision of original english document "1.182"  -->

<chapt id="tune">&debian; 系统微调
<p>
本章讲述了基本的基于命令行界面的系统配置方法。在学习本章前，你需要先阅读 <ref id="install">.  
<p>
如是你很关心安全方面的信息，你应该阅读 <url id="&securing-debian-howto;" name="Securing Debian Manual">，它在 <package>&p-securing-debian-howto;</package> 软件包中。

<sect id="init-hints">系统初始化
<p>
&debian; 使用 System V 的 init 脚本系统。参阅 <ref id="init">的介绍。

<sect1 id="init-defaults">自定义 init 脚本
<p>
最简单的控制 init 脚本的方法是改变 <file>/etc/default</file> 目录下，与 init 脚本同名的文件里的环境变量设置。
<footnote>
<file>/etc/default</file> 下面的文件<strong>只</strong>包含环境变量设置。每一个文件都会被他们所对应的 init 脚本读取，用来替换脚本中缺省的变量设置。对于 &debian;，我们选择这个目录是有原因的 <url id="&etc-defaults;" name="peculiar">。大致上，<file>/etc/default</file> 和 Rdhat 或其他发行版本中的 <file>/etc/sysconfig</file> 等价。
</footnote>
例如，<file>/etc/default/hotplug</file> 可以控制 <file>/etc/init.d/hotplug</file> 的行为。文件 <file>/etc/default/rcS</file> 可以用来定制 <prgn>motd</prgn>、<prgn>sulogin</prgn> 等为默认启动。
<p>
如果你不能通过设置这些变量来得到你所需要的行为，你可以去修改 init 脚本：它们都是配置文件。

<sect1 id="syslogd">自定义系统日志
<p>
可通过 <file>/etc/syslog.conf</file> 配置系统日志记录方式。如果想为日志文件上色可安装 <package>colorize</package> 软件包。参阅 <manref name="syslogd" section="8"> 和 <manref name="syslog.conf" section="5">。
</sect1>

<sect1 id="hdtune">硬件存取优化
<p>
有一部分硬件优化的配置工作 Debian 留给了系统管理员。
<list>
<item><package>hdparm</package>
 <list compact>
<item>硬盘存取优化。效果显著。
<item>危险。务必先阅读 <manref name="hdparm" section="8">。
<item><tt>hdparm -tT <var>/dev/hda</var></tt> 测试硬盘存取速度。
<item><tt>hdparm -q -c3 -d1 -u1 -m16 <var>/dev/hda</var></tt> 加速新型 IDE 系统。(有一定风险。)
 </list>

<item><package>setcd</package>
 <list compact>
<item>压缩磁盘存取优化。
<item><tt>setcd -x <var>2</var></tt> 减速至 <var>2</var>x speed。
<item>参阅  <manref name="setcd" section="1">。
 </list>

<item><package>setserial</package>
 <list compact>
<item>串行接口管理工具集。
 </list>

<item><package>scsitools</package>
 <list compact>
<item>SCSI 硬件管理工具集。
 </list>

<item><package>memtest86</package>
 <list compact>
<item>内存硬件管理工具集。
 </list>

<item><package>hwtools</package>
 <list compact>
<item>低级硬件管理工具集。
  <list compact>
   <item><prgn>irqtune</prgn>：修改设备的 IRQ 优先级，使那些需要高优先级和快速服务的硬件(例如，串行接口、调制解调器)获得它所要的资源。对串口/调制解调器加速后获得原来 3 倍的吞吐量。 

   <item><prgn>scanport</prgn>：扫描 I/O 空间的 0x100 至 0x3ff 地址段，查找已安装的 ISA 设备。 
   <item>inb：一个小巧的黑客工具，用来阅读 I/O 端口信息并将其值转换成十六进制和二进制。 
  </list>

 </list>

<item><package>schedutils</package>
 <list compact>
<item>Linux 日程安排工具包。
<item>包括 <prgn>taskset</prgn>、<prgn>irqset</prgn>、<prgn>lsrt</prgn> 和 <prgn>rt</prgn>。
<item>再加上 <prgn>nice</prgn> 和 <prgn>renice</prgn>(不包括在工具包内)，就可对进程的日程安排进行全面的管理。 
 </list>
</list>
<p>
使用 noatime 选项挂载文件系统可有效提高文件的读取速度。参阅 <manref name="fstab"
section="5"> 和 <manref name="mount" section="8">。
<p>
通过 proc 文件系统，Linux 内核可直接调节某些硬件参数。参阅<ref id="proc-sys">。
<p>
Debian 中有许多专门的硬件配置工具包。其中有不少是针对笔记本电脑的。这儿有一些有趣的软件包：
<list compact>
<item><package>tpconfig</package> - 一个配置触摸屏设备的程序
<item><package>apmd</package> - 高级电源管理(APM)工具
<item><package>acpi</package> - 显示 ACPI 设备信息
<item><package>acpid</package> - ACPI 使用工具
<item><package>lphdisk</package> - 识别 Phoenix NoteBIOS 下的隐藏分区。
<item><package>sleepd</package> - 笔记本电脑处于非工作状态时进入休眠
<item><package>noflushd</package> - 让空闲硬盘进入减速状态
<item><package>big-cursor</package> - X 下的巨型鼠标指针
<item><package>acme</package> - 激活笔记本电脑上的“多媒体按钮”
<item><package>tpctl</package> - IBM ThinkPad 硬件配置工具
<item><package>mwavem</package> - Mwave/ACP modem 支持
<item><package>toshset</package> - 访问大部分 Toshiba 笔记本电脑的硬件接口
<item><package>toshutils</package> - Toshiba 笔记本电脑工具集
<item><package>sjog</package> - 激活 Sony Vaio 笔记本电脑上“Jog Dial”功能的程序
<item><package>spicctrl</package> - Sony Vaio 控制器程序可增亮 LCD 背光
</list>
ACPI 是一种比 APM 更新的电源管理系统。
<p>
某些软件包需要专门的内核模块。它们已经包含在许多最新的内核源码中。如果遇此问题，则需要手动打上最新的内核补丁。

<sect>访问限制(Restricting access)

<sect1 id="loginctrl">用 PAM 来控制登录
<p>
PAM(Pluggable Authentication Modules 可嵌入认证模块)允许你控制用户是如何登录的。  
<example>
/etc/pam.d/*             # PAM 管理文件
/etc/pam.d/login         # PAM 登录管理文件
/etc/security/*          # PAM 模块参数
/etc/securetty           # 管理通过控制台进行的 root 登录(login)
/etc/login.defs          # 管理登录行为(login)
</example>
<p>
如果想在控制台终端不用密码直接登录系统，可按下面的方法修改 <file>/etc/pam.d/login</file> 文件的内容，风险自负。
<example>
#auth       required   pam_unix.so nullok
auth       required   pam_permit.so
</example>
该方法亦可用于 <prgn>xdm</prgn>、<prgn>gdm</prgn>，实现无密码 X 控制台。
<p>
相反，如果你希望强化密码政策，可安装 <package>cracklib2</package> 并按下面的方法修改<file>/etc/pam.d/passwd</file>：
<example>
password required       pam_cracklib.so retry=3 minlen=6 difok=3
</example>
使用一次性登录密码激活帐户也很有用。要实现该功能，在 passwd 命令后加上 <tt>-e</tt> 参数，参阅 <manref name="passwd" section="1">。
<p>
要设置系统最大进程数，可在 Bash shell 中设定 <tt>ulimit -u 1000</tt> 或设置 PAM 的 <file>/etc/security/limits.conf</file> 文件。其它参数如 <tt>core</tt> 等的设置方法与之类似。<prgn>PATH</prgn> 的初始值可在 <file>/etc/login.defs</file> 中先于 shell 启动脚本设置。
<p>
PAM 的文档位于 <package>libpam-doc</package> 软件包内。其中 <em>The Linux-PAM System Administrator's Guide</em> 一文涵盖了 PAM 配置、可用模块等内容，文档中还包括了 <em>The Linux-PAM Application Developers' Guide</em> 和 <em>The Linux-PAM Module Writers' Guide</em>。
</sect1>

<sect1 id="wheel">“为什么 GNU <prgn>su</prgn> 命令不支持 <tt>wheel</tt> group”
<p>
这是 Richard M. Stallman 的一句名言，位于旧版 <tt>info su</tt> 页面末尾。别担心：在 Debian 中，当前版本的 <prgn>su</prgn> 使用 PAM，因此你可以用 <file>/etc/pam.d/su</file> 下的 <prgn>pam_wheel.so</prgn> 来限制任何用户组使用 <prgn>su</prgn> 的能力。下面的操作将在 Debian 系统中赋予 <tt>adm</tt> 用户等同于 BSD <tt>wheel</tt> 用户组的权限，而且该组成员不需要密码就能使用 <prgn>su</prgn> 命令。
<example>
# anti-RMS configuration in /etc/pam.d/su
auth       required   pam_wheel.so group=adm

# Wheel members to be able to su without a password
auth       sufficient pam_wheel.so trust group=adm
</example>

<sect1>各标准用户组的目的
<p>
一些有趣的用户组：
<list compact>
<item>如果 <prgn>pam_wheel.so</prgn> 不带任何 <tt>group=</tt> 参数，<tt>root</tt> group 就是 <prgn>su</prgn >默认的 wheel group。
<item><tt>adm</tt> group 可以阅读日志文件。
<item><tt>cdrom</tt> group 可在本地赋予一组用户访问 CD-ROM 驱动器的权限。
<item><tt>floppy</tt> group 可在本地赋予一组用户访问软盘驱动器的权限。 
<item><tt>audio</tt> group 可在本地赋予一组用户访问声音设备的权限。
<item><tt>src</tt> group 拥有源代码以及 <file>/usr/src</file> 目录下的文件。它可以在本地赋予某个用户管理系统源代码的权限。
<item>对于管理桌面或低级别的系统管理员，可设置他们为 <tt>staff</tt> 成员，该类成员可以在 <file>/usr/local</file> 下工作并且可以在 <file>/home</file> 下创建目录。
</list>
<p>
完整列表参阅 <url id="&securing-debian-howto;" name="Securing Debian Manual"> 的“FAQ”章节，亦见于 Woody 中的 <package>&p-securing-debian-howto;</package> 软件包。新的 <package>&p-base-passwd;</package> (>3.4.6)软件包亦包含了权威列表：<file>&f-users-and-groups;</file>。

<sect1 id="sudo">更安全地工作 &ndash; <prgn>sudo</prgn>
<p>
使用 <prgn>sudo</prgn> 最主要的目的是保护自己少做蠢事，我认为使用系统时使用 <prgn>sudo</prgn> 比总是使用 root 帐号更好。
<p>
安装 <prgn>sudo</prgn> 然后编辑 <file><url id="&examples;" name="sudoers"></file> 中有关选项激活它。还可在 <file>&dochome;sudo/OPTIONS</file> 中查看 <tt>sudo</tt> 的用户组特性。
<p>
样例中的配置，设定“staff”用户组成员可通过 <prgn>sudo</prgn> 执行任何 root 权限的命令而“src”用户组成员只可执行规定的一部分 root 权限的命令。
<p>
使用 <prgn>sudo</prgn> 的好处在于只需一个普通用户密码登录，并且所有的活动都受到监控。用它为低级别的系统管理员赋权是个好主意。例如：
<example>
$ sudo chown -R <var>myself</var>:<var>mygrp</var> .
</example>
<p>
当然，如果你知道 root 密码(绝大部分在家安装系统的用户都会知道)，就可以在普通用户下执行任何 root 命令：
<example>
$ su -c "shutdown -h now"
Password:
</example>
(我想我该严格限制 admin 帐号的 <prgn>sudo</prgn> 特权，但对于家中的服务器，就不用考虑那么多了。)
<p>
想了解其它允许普通用户执行 root 权限命令的程序，可以看看 <package>super</package> 软件包。
</sect1>
    
<sect1 id="tcpd">服务的访问限制
<p>
对于 Internet <em>超级服务器</em>，<prgn>inetd</prgn> 会在系统启动时通过 <file>/etc/rc2.d/S20inetd</file>(for RUNLEVEL=2)加载，S20inetd 是一个指向 <file>/etc/init.d/inetd</file> 的符号链接。本质上，<prgn>inetd</prgn> 允许一个运行中的守护进程(daemon)调用其它多个守护进程，以减轻系统的负载。
<p>
当某个服务请求到达，系统会查询 <file>/etc/protocols</file> 和 <file>/etc/services</file> 中的数据库，确定该请求所指定的相关协议和服务，接着 <prgn>inetd</prgn> 会在 <file>/etc/inetd.conf</file> 数据库中查找普通 Internet 服务或 <file>/etc/rpc.conf</file> 中查找基于 Sun-RPC 的服务。
<p>
为了系统安全，请在 <file>/etc/inetd.conf</file> 中关闭所有不用的服务。涉及到 NFS 和其它基于 RPC 的程序时需要激活 Sun-RPC 服务。
<p>
有时，<prgn>inetd</prgn> 并不直接打开请求的服务，而是在 <file>/etc/inetd.conf</file> 中将该服务名作为的参数，打开 <prgn>tcpd</prgn> TCP/IP 守护进程包装程序。这时，<prgn>tcpd</prgn> 首先登记请求并使用 <file>/etc/hosts.deny</file> 和 <file>/etc/hosts.allow</file> 进行附加的检查，然后再运行相应的服务程序。
<p>
如果新版的 &debian; 系统进行远程访问时出现问题，可以在 <file>/etc/hosts.deny</file> 中注释掉“ALL: PARANOID”，如果有该行的话。
<p>
更多信息参阅 <manref name="inetd" section="8">、<manref name="inetd.conf" section="5">、<manref name="protocols" section="5">、<manref name="services" section="5">、<manref name="tcpd" section="8">、<manref name="hosts_access" section="5"> 和 <manref name="hosts_options" section="5">。
<p>
有关 Sun-RPC 的更多信息参阅 <manref name="rpcinfo" section="8">、<manref name="portmap" section="8"> 和 <file>&f-portmap;</file>。

<sect1 id="ldap">集中式验证 &ndash; LDAP
<p>
使用轻形目录访问控制协议(LDAP)
参阅：
<list compact>
<item><url id="&openldaphome;" name="OpenLDAP">
<item>OpenLDAP 管理员指南在软将包 <package>openldap-guide</package> 中
<item>LDP: <url id="&ldap-linux-howto;" name="LDAP Linux HOWTO">
<item>LDP: <url id="&ldap-implementation-howto;" name="LDAP Implementation HOWTO">
<item><url id="&ldap-use1;" name="OpenLDAP, extensive use reports">
<item><url id="&ldap-use2;" name="Open LDAP with Courier IMAP and Postfix">
</list>
</sect>


<sect id="cdrw">刻录机
<p>
ATAPI/IDE 接口的刻录机是时下非常流行的配件，它是极好的系统备份工具，特别是对于那些单个文件容量一般 &lt; 640 MB 的家庭用户。更多权威的信息，请参阅 LDP <url id="&cd-writing-howto;" name="CD-Writing-HOWTO">。

<sect1>概述
<p>
首先需要说明的是，在向刻录机发送数据过程中，任何数据中断都有可能对光盘造成无法挽回的损坏。
尽管现在大部分新的刻录机支持运行时缓冲区保护（Buffer Underrun protection），并且该功能默认是打开的。
所以应选购缓冲区尽可能大的刻录机。如果资金充裕，就别再考虑 ATAPI/IDE 型的，买台 SCSI 型的没错。如果可以连接 IDE 接口，就使用 PCI 总线(例如，在主板上)而别用 ISA 总线(SB16 声卡使用的就是它)。
<p>
当刻录机连接到 IDE，驱动它的通常是 IDE-SCSI 驱动而非旧式的 IDE CD 驱动，所以，需要激活 SCSI 通用驱动。有两种方法激活它，假设系统使用的是较新版本的内核(如 2001 年三月的版本)。
<p>
对于 Linux 2.6 的内核，你应该使用 IDE 驱动并直接使用 <file>/dev/hd<var>x</var></file> 这些设备名称来访问。这种方式你可以使用 DMA。 
</sect1>

<sect1>方法一：modules + <prgn>lilo</prgn>
<p>
如果使用的是 Debian 原装内核，将下面的内容添加到 <file>/etc/lilo.conf</file>，如果有多个选项，列出时要将它们用空格分隔开：
<example>
append="hd<var>x</var>=ide-scsi ignore=hd<var>x</var>"
</example>
在此，刻录机使用 ide-scsi 驱动访问，<tt>hd<var>x</var></tt> 就代表它，其中 <var>x</var> 代表下列任何一种设备：
<example>
hda          接第一个 IDE 接口作主盘
hdb          接第一个 IDE 接口作从盘
hdc          接第二个 IDE 接口作主盘
hdd          接第二个 IDE 接口作从盘
hde ... hdh  接扩展 IDE 接口或 ATA66/100 IDE 接口
</example>
完成上述配置工作后以 root 身份运行下列命令激活设备
<example>
# lilo
# shutdown -h now
</example>
</sect1>


<sect1>方法二：重编译内核
<p>
Debian 用 <prgn>make-kpkg</prgn> 创建新内核，使用 make-kpkg 时加上新的 <tt>--append_to_version</tt> 参数可创建多重内核镜像。参阅 <ref id="kernel">。
<p>
<tt>make menuconfig</tt> 后执行下列步骤：
<list>
<item>bzImage
<item>包含 IDE CD driver(不是必须的，但这样更简单)
<item>将 ide-scsi 和 sg 编译进内核，或编译成模块 
</list>
</sect1>

<sect1>配置步骤
<p>
下列步骤可让系统在启动时激活内核对刻录机的支持：
<example>
# echo ide-scsi &gt;&gt;/etc/modules
# echo sg       &gt;&gt;/etc/modules
# cd /dev; ln -sf scd0 cdrom
</example>
手工激活可以这样做：
<example>
# modprobe ide-scsi
# modprobe sg
</example>
重启以后，用下列方法检查安装情况：
<example>
$ dmesg|less
# apt-get install wodim
# wodim -scanbus
</example>
<p>
<prgn>wodim</prgn> 是非常著名的 <prgn>cdrecord</prgn> 程序的一个分支，
Sarge 和以前的版本集成的是 <prgn>cdrecord</prgn> 程序。
如果使用 Sarge 和以前的版本，请用 <prgn>cdrecord</prgn> 代替 <prgn>wodim</prgn>。
<p>
[Per Warren Dodge]如果机器上同时有 CD-ROM 和 CD-R/RW，这时 <tt>ide-scsi</tt> 和 <tt>ide-cd</tt> 可能会产生冲突，请试试在 <file>/etc/modutils/aliases</file> 中加上下面的内容，然后运行 <prgn>update-modules</prgn> 并重启系统。
<example>
pre-install      ide-scsi      modprobe ide-cd
</example>
上述指令指示系统在加载 <tt>ide-scsi</tt> 前先加载 IDE 驱动。IDE 驱动 <tt>ide-cd</tt> 接管所有 ATAPI CD-ROM――对指明<strong>忽略的</strong>设备除外。剩下的设备才由 <tt>ide-scsi</tt> 来管理。
</sect1>

<sect1>光盘镜像文件(可引导光盘)
<p>
将 <file>target-directory/</file> 下的文件制作成光盘镜像文件 <file>cd-image.raw</file>(可引导系统、Joliet TRANS.TBL-enabled 格式的光盘；如果不需要引导系统功能，可去掉 <tt>-b</tt> 和 <tt>-c</tt> 选项)，在第一个软驱中插入启动软盘然后执行：
<example>
# dd if=<var>/dev/fd0</var> <var>target-directory/boot.img</var> 
# mkisofs -r -V <var>volume_id</var> -b <var>boot.img</var> -c <var>bootcatalog</var> -J -T \
        -o <var>cd-image.raw</var> <var>target_directory/</var>
</example>
<p>
一个有趣的黑客尝试是制作一盘 DOS 引导光盘。如果上述的 <file><var>boot.img</var></file> 文件中包含了通用 DOS 引导软盘镜像，光盘就可以象插在软驱(A:)中的 DOS 软盘一样引导 DOS 系统。如果再加上 freeDOS 就更有趣。
<p>
想检查该光盘镜像文件，可以在回送设备(loop device)上加载它。
<example>
# mount -t iso9660 -o ro,loop <var>cd-image.raw</var> /cdrom
# cd /cdrom
# mc
# umount /cdrom
</example>
</sect1>

<sect1>刻录光盘(R，R/W)：
<p>
首先进行设备测试(假设是双倍数刻录)
<example>
# nice --10 wodim -dummy speed=2 dev=0,0 <var>disk.img</var>
</example>
如果测试通过，执行下面的命令刻录 CD-R
<example>
# nice --10 wodim -v -eject speed=2 dev=0,0 <var>disk.img</var>
</example>
或执行下面命令刻录 CD-RW
<example>
# nice --10 wodim -v -eject blank=fast speed=2 dev=0,0 <var>disk.img</var>
</example>
某些型号的 CD-RW 刻录机用下面的命令更好
<example>
# nice --10 wodim -v blank=all speed=2 dev=0,0 <var>disk.img</var>
</example>
接下来执行
<example>
# nice --10 wodim -v -eject speed=2 dev=0,0 <var>disk.img</var>
</example>
分两步做是必要，这可以防止在刻录时遇到数据空白产生 SCSI 超时错误。<prgn>nice</prgn>参数可时也要做一些调整。
</sect1>

<sect1>制作光盘镜像文件
<p>
某些 CD-R 和商业光盘在数据末尾追加了空白扇区(junk sectors)，使用 <prgn>dd</prgn> 无法拷贝这些光盘(Windows98 CD 就是其中之一)。
<package>wodim</package> 软件包中有一个 <prgn>readom</prgn> 命令（
<package>cdrecord</package> 软件包中有替代的 <prgn>readcd</prgn> 命令），用它可以将任何光盘内容拷贝成镜像文件。对于数据盘，先挂载，运行 <prgn>df</prgn> 查看它的实际大小，再将显示的数字(in blocks, = 1024 bytes)除以 2 得到实际光盘扇区数(2048 bytes)，带参数运行 <prgn>readom</prgn> 用该硬盘镜像文件烧制 CD-R/RW。
<example>
# readom dev=<var>target</var>,<var>lun</var>,<var>scsibusno</var> # select function 11
</example> 
其中，大部分情况下命令行中三个参数都为 0。有时 <prgn>readom</prgn> 给出的扇区数会偏多！此时使用前面用挂载镜像的方法得出的大小值来对上述参数赋值效果更好。
<p>
应该提醒的是，如果你对 CD-ROM 使用 <prgn>dd</prgn> 的话，会有不少问题。第一次执行 <prgn>dd</prgn> 时可能会产生错误信息并丢失光盘镜像末端的一些数据。再次执行 <prgn>dd</prgn> 时，如果没有指定镜像的大小的话，在一些系统上会产生一个过大光盘镜像，其末端都是垃圾。只有第二次运行 <prgn>dd</prgn> 时，使用正确的镜像大小并在看到错误信息之后不弹出光盘，才能避免这些问题。例如，假设用 <prgn>df</prgn> 得到镜像的大小为 <tt>46301184</tt> blocks，则执行两次下面的命令可以得到正确的镜像(这是我的经验)：
<example>
# dd if=/dev/cdrom of=cd.img bs=2048 count=$((46301184/2))
</example>
</sect1>

<sect1>Debian 安装盘镜像
<p>
有关 &debian; CDs 的最新信息，请浏览 <url id="&debian-cd;" name="Debian CD site">。
<p>
如果有较快的 Internet 连接，可考虑用下面的引导方法从网络安装系统：
<list compact>
<item>一些<url id="&debian-floppyinst;" name="软盘镜像">。
<item>一个<url id="&debian-netinst;" name="迷你型可引导光镜像">。
</list>
<p>
如果没有较快的 Internet 连接，可考虑从<url id="&debian-venders;" name="光盘出售商">处购买安装光盘。
<p>
请不要浪费带宽来下载标准光盘镜像(即使是使用新的 jigdo 方式)，除非你是光盘镜像测试员。
<p>
有一个很有名的光盘镜像 <url id="&knoppix;" name="KNOPPIX - Live Linux Filesystem On CD">。该光盘可以启动一个全功能的 &debian; 系统而且不需要在硬盘上安装。

<!-- old document section
$ export CVSROOT=anonymous@cvs.debian.org:/cvs/debian-boot
$ cvs co debian-cd
</example>
Following is a summary of CD image creation. 
<example>
# apt-get install debian-cd
# cd /etc/debian-cd
# vim CONF.sh
$ . CONF.sh
$ make distclean
$ make status
$ make list COMPLETE=1 SIZELIMIT1=555000000 SRCSIZELIMIT=665000000
$ make official_images
 or if you want only binary images :
$ make bin-official_images
-->
</sect1>

<sect1>将系统备份到 CD-R
<p>
想要将重要的配置文件和数据备份到 CD-R，可使用 <file><url id="&examples;" name="backup"></file> 中的“backup”脚本。亦可参阅<ref id="diff-backup">。
</sect1>

<sect1>将音乐 CD 刻录到 CD-R
<p>
我没测试过：
<example>
# apt-get install wodim cdparanoia
# cdparanoia -s -B
# wodim dev=0,0,0 speed=2 -v -dao -eject defpregap=1 -audio *.wav
</example>
或
<example>
# apt-get install cdrdao #disk at once
# cdrdao read-cd --device /dev/cdrom --paranoia-mode 3 my_cd # read cd
# cdrdao write --device /dev/cdrom --speed 8 my_cd    # write a new CD
</example>
<prgn>cdrdao</prgn>与拷贝不同(如没有数据间隙，等...)。
</sect1>

<sect1 id="dvd">刻录 DVD-R、DVD-RW 和 DVD+RW
<p>
刻录 DVD 光盘有两种方式：
<list compact>
<item>使用 <package>growisofs</package>。
<item>使用 <package>wodim</package>。
</list>
</sect1>
</sect>

<sect id="x">X
<p>
X 窗口系统由 <url id="&xfree86home;" name="XFree86"> 提供。&debian; 系统中 X 服务器有两个主要版本：XFree86 Version 3.3 (XF3)和 XFree86 Version 4.x series (XF4)，它们都是基于 <url id="&xorghome;" name="X.Org"> 制定的 X11R6 标准。
<p>
想了解 X 的基础知识，可参阅 <manref name="X" section="7">，LDP <url id="&xwindowuser-howto;" name="XWindow-User-HOWTO"> 和 <url
id="&remote-xapps-howto;" name="Remote X Apps mini-HOWTO">。对 &debian;
用户专门的指南，可阅读 <package>xfree86-common</package> 软件包中提供的 <file>&f-x-deb-faq;</file>，其中 Branden Robinson 有一些关于 key binding 的有趣且权威的讨论。
<p>
<taglist>
<tag><ref id="xsrvr">
<item>该程序存在于那些需要在用户显示器(CRT，LCD)上显示 X 窗口和桌面并接收键盘和鼠标输入的本地主机上。
<tag><ref id="xclnt">
<item>该程序存在于那些需要运行与 X 兼容的应用程序的(本地或远程)主机上。
</taglist>
这正好将常规的“服务器”和“客户机”关系倒转过来。
<p>
有几种途径让“X server”(显示端)接收远程“X client”(应用端)的连接请求：

<list>
<item><prgn>xhost</prgn> 方式
<list compact>
<item>主机列表机制(很不安全)。
<item>协议不加密(易受到网络监听攻击)
<item>尽量不要使用该方式。
<item>参阅<ref id="xhost"> 和 <manref name="xhost" section="1x">。
</list>
<item><strong><prgn>xauth</prgn></strong> 方式
<list compact>
<item>MIT magic cookie 机制(不安全但比 <prgn>xhost</prgn> 强点)。
<item>协议不加密(易受到网络监听攻击)
<item>仅用于本地连接，它所需的 CPU 消耗比 <prgn>ssh -X</prgn> 低。
<item>参阅 <ref id="ss-xsu"> 和 <manref name="xauth" section="1x">。
</list>
<item><prgn>xdm</prgn>, <prgn>wdm</prgn>, <prgn>gdm</prgn>, 
 <prgn>kdm</prgn>, ... 方式
<list compact>
<item>MIT magic cookie 机制(和 <prgn>xauth</prgn> 一样不安全)
<item>参阅 <manref name="xdm" section="1x"> 和 <manref name="Xsecurity" section="7"> 获得更多有关 X 显示访问控制的基础知识
<item>参阅 <manref name="wdm" section="1x">、<manref name="gdm" section="8"> 和 <manref name="kdm.options" section="5"> 获得更多信息，当然先得装上它们。
<item>参阅<ref id="custombootscripts">了解如何在不删除 <prgn>xdm</prgn> 包的情况下禁用它，使系统启动到控制台。
</list>
<item><strong><prgn>ssh -X</prgn></strong> 方式
<list compact>
<item>基于安全 shell 的端口发送机制(<strong>安全</strong>)。
<item>加密协议(在本地使用很耗系统资源)。
<item>使用它进行远程连接。
<item>参阅<ref id="xssh">。
</list>
</list>
除了 <prgn>ssh</prgn>，所有的远程连接方式，都需要X服务器开启 TCP/IP 连接。参阅<ref id="xtcp">。

<sect1 id="x-system">X 软件包
<p>
在 Woody 中提供了下列几个(meta)软件包来简化 X 的安装。
<taglist>
<tag><package>x-window-system-core</package>
<item>
该综合包提供一些基本组件，用于在单一工作站上运行 X Window 系统，其中包括 X 函数库、一个 X 服务器(<package>xserver-xfree86</package>)、一套字体、一组基本的 X 客户端及工具。

<tag><package>x-window-system</package> 
<item>
该综合包提供 XFree86 项目开发的所有 X Window 系统的组件，以及一套经久不衰的辅助程序。(注意，它包含了 <package>x-window-system-core</package>、<package>twm</package> 和 <package>xdm</package> 等组件，故安装了它就不用再安装 <package>x-window-system-core</package> 了。)

<tag><package>xserver-common-v3</package> 
<item>
XFree86 3.x X服务器(X3)相关的程序和工具。

<tag><package>xserver-*</package> 
<item>
XF3 服务器软件包的补充包，包含了对那些新的 XF4 服务器(<package>xserver-xfree86</package>)不支持的硬件的支持。如 XF4 不支持某些老式的 ATI mach64 卡，某些视频卡在 Woody 版的 XF4 中无法工作等等。(要获得可用软件包，可执行<tt>apt-cache search xserver-|less</tt>。所有这些 XF3 服务器均是基于 <package>xserver-common-v3</package> 的。)
</taglist>
<p>
大多数情况下，应该安装 <package>x-window-system</package>(如果要通过控制台登录，需禁用 <package>xdm</package>，具体方法参阅<ref id="no-x-start">。)

<sect1 id="hdetect-x">X 服务器的硬件侦测
<p>
在安装 X 系统之前安装下列软件包，就能在 X 配置阶段实现硬件侦测：
<list>
<item><package>discover</package> &ndash; 硬件识别系统。
<item><package>mdetect</package> &ndash; 鼠标自动侦测工具。
<item><package>read-edid</package> &ndash; VESA PnP 监视器硬件信息收集工具。
</list>

<sect1 id="xsrvr">X 服务器
<p>
有关 X 服务器的信息，参阅 <manref name="XFree86" section="1x">。
<p>
从本地控制台调用 X 服务器：
<example>
$ startx -- :&lt;display&gt; <var>vtXX</var>
e.g.:
$ startx -- :1 vt8 -bpp 16
... start on vt8 connected to localhost:1 with 16 bpp mode
</example>
<tt>--</tt>后面的参数用于设置 X 服务器。
<p>
注意，在使用 <file>~/.xserverrc</file> 脚本定制 X 服务器启动进程时，请确保 <tt>exec</tt> 调用的是真正的 X 服务器。如果没这么做会导致 X 服务器启动缓慢及退出。例如：
<example>
#!/bin/sh
exec /usr/bin/X11/X -dpi 100 -nolisten tcp
</example>

<sect2 id="config-x4">配置 X 服务器(版本 4)
<p>
(重新)配置 XF4 服务器，
<example>
# dpkg-reconfigure --priority=low xserver-common
# dpkg-reconfigure --priority=low xserver-xfree86
</example>
该命令会生成 <file>/etc/X11/XF86Config-4</file> 文件并调用 <prgn>dexconf</prgn> 脚本来配置X。

<sect2 id="config-x3">配置 X 服务器(版本 3)
<p>
(重新)配置 XF3 服务器。例如，针对 ATI mach64，
<example>
# dpkg-reconfigure --priority=low xserver-common-v3
# dpkg-reconfigure --priority=low xserver-mach64
</example>
该命令会生成 <file>/etc/X11/XF86Config</file> 文件并调用 <prgn>xf86config-v3</prgn> 脚本来配置X。

<sect2 id="manual-config-x">手工配置 X 服务器
<p>
在 Woody 系统上，往文件 <file>/etc/X11/XF86Config-4</file> 中添加用户自定义内容时，<strong>不要在配置文件的定义段落中进行编辑</strong>：
<!-- FIXME for XF3 -->
<example>
### BEGIN DEBCONF SECTION
[snip]
### END DEBCONF SECTION
</example>
<p>
<strong>正确是做法是将用户定义内容加在定义段落之前</strong>。例如，要添加自定义视频卡，可在文件<em>开头</em>添加类似下面的内容：
<example>
Section "Device"
  Identifier        "Custom Device"
  Driver            "ati"
  Option            "NoAccel"
EndSection

Section "Screen"
  Identifier  "Custom Screen"
  Device      "Custom Device"
  Monitor     "Generic Monitor"
  DefaultDepth 24
  Subsection "Display"
    Depth       8
    Modes       "1280x960" "1152x864" "1024x768" "800x600" "640x480"
  EndSubsection
  Subsection "Display"
    Depth       16
    Modes       "1280x960" "1152x864" "1024x768" "800x600" "640x480"
  EndSubsection
  Subsection "Display"
    Depth       24
    Modes       "1280x960" "1152x864" "1024x768" "800x600" "640x480"
  EndSubsection
EndSection

Section "ServerLayout"
    Identifier        "Custom"
    Screen            "Custom Screen"
    InputDevice       "Generic Keyboard" "CoreKeyboard"
    InputDevice       "Configured Mouse" "CorePointer"
EndSection
</example>
<p>
对于 Sarge(撰写本文时是 <tt>testing</tt>)，如果你希望在升级的时候保留用户的自定义的 <file>/etc/X11/XF86Config</file> 设置，请用 root 运行下列命令：
<example>
# cp /etc/X11/XF86Config-4 /etc/X11/XF86Config-4.custom
# md5sum /etc/X11/XF86Config-4 &gt; /var/lib/xfree86/XF86Config-4.md5sum
# dpkg-reconfigure xserver-xfree86
</example> 
如果想美化字体，请按照 <ref id="xfs-tt">中的说明来修改 <file>/etc/X11/XF86Config-4</file>。
<!--
<p>
For XF3, in order to achieve <strong>font de-uglification</strong>, 
you need to edit the order of <tt>FontPath</tt> in
<file>/etc/X11/XF86Config</file> 
while adding <tt>:unscaled</tt> as follows.
<example>
FontPath        "/usr/X11R6/lib/X11/fonts/misc:unscaled"
FontPath        "/usr/X11R6/lib/X11/fonts/100dpi:unscaled"
FontPath        "/usr/X11R6/lib/X11/fonts/75dpi:unscaled"
FontPath        "/usr/X11R6/lib/X11/fonts/Type1"
FontPath        "/usr/X11R6/lib/X11/fonts/Speedo"
FontPath        "/usr/X11R6/lib/X11/fonts/misc"
FontPath        "/usr/X11R6/lib/X11/fonts/100dpi"
FontPath        "/usr/X11R6/lib/X11/fonts/75dpi"
</example>
<p>
If you use xfs serves fonts via a Unix Domain Socket, you may also edit
<tt>catalogue</tt> entry of <file>/etc/X11/fs/config</file> as:
<example>
catalogue = /usr/X11R6/lib/X11/fonts/misc:unscaled,
            /usr/X11R6/lib/X11/fonts/100dpi:unscaled,
            /usr/X11R6/lib/X11/fonts/75dpi:unscaled,
            /usr/X11R6/lib/X11/fonts/Type1,
            /usr/X11R6/lib/X11/fonts/Speedo,
            /usr/X11R6/lib/X11/fonts/misc,
            /usr/X11R6/lib/X11/fonts/100dpi,
            /usr/X11R6/lib/X11/fonts/75dpi,
</example>
<p>
These <tt>:unscaled</tt> tricks are deprecated in new XF4 and no longer
needed.
-->
<!-- per /usr/share/doc/xfree86-common/README.fonts.gz in 4.2.1 -->
<p>
请同时检查 X 设置中的其他部分。不良的显示器设置甚至比难看的字体更让人头痛，所以请确保你设置的刷新率是你显示器能处理的最高刷新率(85 Hz 很好，75 Hz 还可以，60 Hz 就很糟糕了)。

<sect1 id="xclnt">X 客户端
<p>
绝大多数 X 客户端程序都可以用类似下面的命令启动：
<example>
client $ xterm -geometry 80x24+30+200 -fn 6x10 -display <var>hostname</var>:0 &amp;
</example>
命令行中各参数的含义如下：
<list>
<item><tt>-geometry <var>WIDTH</var>x<var>HEIGHT</var>+<var>XOFF</var>+<var>YOFF</var></tt>：窗口初始尺寸和位置。

<item><tt>-fn <var>FONTNAME</var></tt>：显示文本的字体。<tt><var>FONTNAME</var></tt> 的赋值有如下几个：
<list compact>
<item>a14: 普通字体
<item>a24: 大号字体
<item>... (使用 <tt>xlsfont</tt> 检查可用字体。)
</list>
<item><tt>-display <var>displayname</var></tt>：X 服务器名称。 <tt><var>displayname</var></tt> 的赋值有如下几个：
<list compact>
<item><tt><var>hostname</var>:<var>D.S</var></tt> 表示在名为 <tt><var>hostname</var></tt> 的主机的显示器 <tt><var>D</var></tt> 上显示的屏幕 <tt><var>S</var></tt>；工作于该显示器的X服务器监听 TCP 端口 6000+D。

<item><tt><var>host</var>/unix:<var>D.S</var></tt> 表示在 <tt><var>host</var></tt> 主机的显示器 <var>D</var> 上显示的屏幕 <tt><var>S</var></tt>；工作于该显示器的 X 服务器监听 UNIX domain socket <file>/tmp/.X11-unix/XD</file>(故只能从主机访问它)。

<item><tt><var>:D.S</var></tt> 等价于 <tt><var>host</var>/unix:<var>D.S</var></tt>，其中 <tt><var>host</var></tt> 代表本地主机名。
</list>
</list>
<p>
默认的 X 客户端程序(应用端)的 <tt><var>displayname</var></tt> 可通过 DISPLAY 环境变量来设置。例如：在运行某 X 客户端程序之前，执行下列命令之一就可以完成设置工作：
<example>
$ export DISPLAY=:0 
        # 默认情况下，本地机器使用第一个 X 屏幕
$ export DISPLAY=<var>hostname.fulldomain.name</var>:0.2
$ export DISPLAY=localhost:0
</example>
程序启动方式可以在<file>~/.xinitrc</file>中进行自定义。例如：
<example>
xrdb -load $HOME/.Xresources
xsetroot -solid gray &amp;
xclock -g 50x50-0+0 -bw 0 &amp;
xload -g 50x50-50+0 -bw 0 &amp;
xterm -g 80x24+0+0 &amp;
xterm -g 80x24+0-0 &amp;
twm
</example>
正如<ref id="custom-x">中所描述的，当使用 <prgn>startx</prgn> 启动 X 时，该脚本将重载 <prgn>Xsession</prgn> 所做的所有常规操作，通常用 <file>~/.xsession</file> 来代替，而该方法仅作为最后的手段使用。参阅 <manref name="xsetroot" section="1x">、<manref name="xset" section="1x"> 和 <ref id="xresources">。
</sect1>

<sect1 id="x-session">X 会话
<p>
X 会话(X 服务器 + X 客户端)可使用下列方法启动：
<list compact>
<item><prgn>startx</prgn>：<prgn>xinit</prgn> 的脚本化命令(wrapper script command)，负责从 Linux 字符型控制台启动 X 服务器和客户端。如果 <file>~/.xinitrc</file> 文件不存在，<file>/etc/X11/xinit/xinitrc</file> 会调用并执行 <file>/etc/X11/Xsession</file>。
<item><prgn>xdm</prgn>、<prgn>gdm</prgn>、<prgn>kdm</prgn> 或 <prgn>wdm</prgn>：X 显示管理器守护进程，负责启动 X 服务器和客户端，并管理来自 GUI 屏幕的登录行为。直接执行 <file>/etc/X11/Xsession</file>。
</list>
想使用控制台参阅<ref id="no-x-start">。

<sect2 id="custom-x">自定义 X 会话
<p>
默认的启动脚本 <file>/etc/X11/Xsession</file> 是 <file>/etc/X11/Xsession.d/50xfree86-common_determine-startup</file> 和 <file>/etc/X11/Xsession.d/99xfree86-common_start</file> 的高效的结合体。
<p>
<file>/etc/X11/Xsession</file> 的执行会受 <file>/etc/X11/Xsession.options</file> 的影响，从本质上讲，它使用 <prgn>exec</prgn> 命令执行系统中按下面的次序排序，排在第一位的程序：
<enumlist compact>
<item><file>~/.xsession</file> or <file>~/.Xsession</file>，如果它被定义。
<item><file>/usr/bin/x-session-manager</file>，如果它被定义。
<item><file>/usr/bin/x-window-manager</file>，如果它被定义。
<item><file>/usr/bin/x-terminal-emulator</file>，如果它被定义。
</enumlist>
<p>
&debian; 选择系统(&debian; alternative system )对这些命令的确切定义进行了描述，参阅<ref id="alternatives">。例如：
<example>
# update-alternatives --config x-session-manager
... 或
# update-alternatives --config x-window-manager
</example>
如果想定义某 X 窗口管理器为默认窗口管理器，同时保留已安装的 GNOME 和 KDE 会话管理器，可用 <url id="&bug-xfree;"> 中第二个错误报告所附的文件替换 <file>/etc/X11/Xsession.d/50xfree86-common_determine-startup</file> 文件(我希望它能早日加到发行版中)，然后按下面的方法编辑 <file>/etc/X11/Xsession.options</file> 来禁用 X 会话管理器：
<example>
# /etc/X11/Xsession.options
#
# configuration options for /etc/X11/Xsession
# See Xsession.options(5) for an explanation of the available options.
# Default enabled
allow-failsafe
allow-user-resources
allow-user-xsession
use-ssh-agent
# Default disabled (enable them by uncommenting)
do-not-use-x-session-manager
#do-not-use-x-window-manager
</example>
<p>
如果不想按上述方法修改系统，由于 <package>gnome-session</package> 和 <package>kdebase</package> 软件包包含了那些 X 会话管理器。所以删除它们，X 窗口管理器就成了默认窗口管理器了。(废话，还更好的主意吗？)
<p>
对于那些 <file>/etc/X11/Xsession.options</file> 中仅包含一行 <tt>allow-user-xsession</tt> 的系统，任何定义了 <file>~/.xsession</file> 或 <file>~/.Xsession</file> 的用户，均可以自定义 <file>/etc/X11/Xsession</file> 的行为。
<p>
<file>~/.xsession</file> 文件中排在最后的命令，其格式应该为 <tt>exec <var>some-window/session-manager</var></tt>，用来启动你喜欢的 X 窗口/会话管理器。
<p>
<file>&f-xsession;</file> 给出了一个不错的 <file>~/.xsession</file> 脚本样例。
<p>
我使用它来为每个用户设置窗口管理器、屏幕访问和语言支持。参阅<ref id="s-w-manager">、<ref id="ss-xsu">、<ref id="x-cjk">。
<p>
如果你希望一些 X 客户端程序能自动启动，参阅 <ref id="xclnt"> 的范例并将其写在 <file>~/.xsession</file> 而不是 <file>~/.xinitrc</file>。
<p>
用户自己添加的 X 资源保存在 <file>~/.Xresources</file>，而系统级的 X 资源保存于<file>/etc/X11/Xresources/*</file>。参阅 <manref name="xrdb" section="1x">。
<p>
用户可以在 <file>~/.xmodmaprc</file> 中自定义键盘布局和鼠标按键布局，参阅 <manref name="xmodmap" section="1x">。

<sect2 id="s-w-manager">针对用户启动 X 会话
<p>
遵循<ref id="custom-x">中描述的原则，要激活用户特定的 X 会话/窗口管理器，需要安装相应的软件包并在 <file>~/.xsession</file> 文件末尾添加如下内容(我爱用 <package>blackbox</package>/<package>fluxbox</package>，它简单快捷。)：

<list>
<item>默认 X 会话管理器
<list compact>
<item>参阅<ref id="alternatives">.
<item><tt>exec /usr/bin/x-session-manager</tt>
</list>
<item>默认 X 窗口管理器 
<list compact>
<item>参阅<ref id="alternatives">.
<item><tt>exec /usr/bin/x-window-manager</tt>
</list>

<item>GNOME 会话管理器(loaded)
<list compact>
<item>需安装软件包：<package>gnome-session</package>
<item><tt>exec /usr/bin/gnome-session</tt>
</list>

<item>KDE 会话管理器(loaded) 
<list compact>
<item>需安装软件包：<package>kdebase</package> (or 
<package>kdebase3</package> for KDE3)
<item><tt>exec /usr/bin/kde2</tt>
</list>

<item>Blackbox 窗口管理器(lightweight, slick).
<list compact>
<item>需安装软件包：<package>blackbox</package>
<item><tt>exec /usr/bin/blackbox</tt>
</list>

<item>Fluxbox 窗口管理器(lightweight, new blackbox).
<list compact>
<item>需安装软件包：<package>fluxbox</package>
<item><tt>exec /usr/bin/fluxbox</tt>
</list>

<item>Xfce 窗口管理器(Mac OS-X, SUN CDE like).
<list compact>
<item>需安装软件包：<package>xfce</package>
<item><tt>exec /usr/bin/xfwm</tt>
</list>

<item>IceWM 窗口管理器(lightweight, GNOME alternative)
<list compact>
<item>需安装软件包：<package>icewm</package>
<item><tt>exec /usr/bin/X11/icewm</tt>
</list>

<item>FVWM2 虚拟窗口管理器(lightweight, Win95 like)
<list compact>
<item>需安装软件包：<package>fvwm</package>
<item><tt>exec /usr/bin/fvwm2</tt>
</list>

<item>Windowmaker 窗口管理器(somewhat NexT like)
<list compact>
<item>需安装软件包：<package>wmaker</package>
<item><tt>exec /usr/bin/wmaker</tt>
</list>

<item>Enlightenment 窗口管理器(loaded).
<list compact>
<item>需安装软件包：<package>enlightenment</package>
<item><tt>exec /usr/bin/enlightenment</tt>
</list>

</list>
参阅 <url id="&windomanagerhome;" name="Window Managers for X">.


<sect2 id="kde-gnome">配置 KDE/GNOME
<p>
要配置完整的 KDE 或 GNOME 环境，下列的综合包很有用：
<list compact>
<item>KDE：安装 <package>kde</package> 软件包
<item>GNOME：安装 <package>gnome</package> 软件包
</list>
请使用能操作 <tt>Recommends</tt> 类软件包的安装工具安装这些软件包，如 <prgn>dselect</prgn> 和 <prgn>aptitude</prgn>，比起 <prgn>apt-get</prgn> 它们能提供更丰富的软件供你选择。
<p>
如果想从控制台登录，必须禁用 X 显示管理器，例如 <package>kdm</package>、<package>gdm</package> 和 <package>wdm</package> 这会牵扯到一些关联问题，有关信息参阅<ref id="no-x-start">。
<p>
如果想将系统的默认环境由 KDE 换成 GNOME，请用 <ref id="alternatives">中所述的方法配置 <prgn>x-session-manager</prgn>。

<sect1 id="xtcp">在 TCP/IP 中使用 X
<p>
由于不加密的远程 TCP/IP 套接字连接易受到窃听攻击，新版的 &debian; 安装 X 时默认是禁用 TCP/IP 套接字口的。建议使用 <prgn>ssh</prgn> 进行远程 X 连接(参阅<ref id="xssh">)。
<p>
通常不推荐使用本节所述的方法，除非系统处于防火墙之后且所处网络中全是绝对可信任的用户。使用下面的命令检查当前X服务器的 TCP/IP 套接字口的设置：
<example>
# find /etc/X11 -type f -print0 | xargs -0 grep nolisten
/etc/X11/xinit/xserverrc:exec /usr/bin/X11/X -dpi 100 -nolisten tcp
</example>
删除 <tt>-nolisten</tt> 就可以恢复X服务器对 TCP/IP 的监听。
</sect1>
 
<sect1 id="xhost">联接远程的 X 服务器 &ndash; <prgn>xhost</prgn>
<p>
<prgn>xhost</prgn> 允许通过主机名访问。该方式极不安全。下面的方法将关闭主机验证功能，只要 TCP/IP 套接字连接功能是打开的(参阅<ref id="xtcp">)本机就会接收来自任何地方的连接请求。
<example>
$ xhost +
</example>
要重新打开主机验证功能可执行：
<example>
$ xhost -
</example>
<p>
<prgn>xhost</prgn> 无法区分远程主机上不同的用户，而且远程连接的主机名(实际上是地址)也可以是伪造的。
<p>
如果处于一个不可信的网络环境(例如通过 PPP 拔号连接到 Internet)，即使在网络中成为主机受到一定标准的限制，也应尽量避免使用该连接方式。参阅 <manref name="xhost" section="1x">。
</sect1>

<sect1 id="xssh">联接远程的 X 服务器 &ndash; <prgn>ssh</prgn>
<p>
使用 <prgn>ssh</prgn> 可以在本地主机和远程应用服务器之间建立一个安全的连接通道。
<list>
<item>如果不想每次执行相同的命令行选项，可在远程主机的 <file>/etc/ssh/sshd_config</file> 文件中，打开 <tt>X11Forwarding</tt> 和 <tt>AllowTcpForwarding</tt> 选项。
<item>启动本地主机的 X 服务器。
<item>在本地主机上开一个 <prgn>xterm</prgn> 进程。
<item>运行 <prgn>ssh</prgn> 建立与远程站点的连接。
<example>
localname @ localhost $ ssh -q -X -l loginname remotehost.domain
Password:
.....
</example>
<item>在远程站点上运行 X 应用程序命令。
<example>
loginname @ remotehost $ gimp &
</example>
</list>
该连接方式使得远程 X 客户机上的屏幕输出，看上去就好象是通过本地 UNIX 域套接字的方式连接到服务器的客户机输出。
</sect1>

<sect1 id="xtermfaq">X 终端模拟器 &ndash; <prgn>xterm</prgn>
<p>
学习 <prgn>xterm</prgn> 可以去 <url id="&xtermfaq;">。
</sect1>

<sect1 id="xresources">X 资源
<p>
许多老式的 X 程序，如 <prgn>xterm</prgn>，使用 X 资源数据库配置它们的外观。<file>~/.Xresources</file> 文件用于保存用户资源定义。登录后该文件自动合并到默认的 X 资源中。系统范围的缺省配置存储在 <file>/etc/X11/Xresources/*</file> 中，应用程序缺省的配置存储在 <file>/etc/X11/app-defaults/*</file>。使用这些设置作为学习的起点。
<p>
这儿是一些有用的设置，可加到<file>~/.Xresources</file>文件中：
<example>
! Set the font to a more readable 9x15
XTerm*font: 9x15

! Display a scrollbar
XTerm*scrollBar: true

! Set the size of the buffer to 1000 lines
XTerm*saveLines: 1000

! Large kterm screen
KTerm*VT100*fontList: -*-fixed-medium-r-normal--24-*,\
 -*-gothic-medium-r-normal--24-*,\
 -*-mincho-medium-r-normal--24-*
</example>
要使上述设置立即生效，可用下面的命令将它们合并到数据库：
<example>
xrdb -merge ~/.Xresources
</example>
参阅 <manref name="xrdb" section="1x">。

<sect1 id="xmodmap">X 中键盘和指针按钮的映射
<p>
<prgn>xmodmap</prgn> 程序用来编辑和显示键盘修订表和按键映射表的，客户端程序用它们来把按键代码事件(event keycodes)转换成 X 中的 keysyms。
<example>
$ xmodmap -pm 
 ... 显示当前按键修订表
$ xmodmap -pk | pager
 ... 显示当前按键映射表
$ xmodmap -e "pointer = 3 2 1" # 设置为惯用左手鼠标
$ xmodmap ~/.xmodmaprc # 用 ~/.xmodmaprc 中的描述设置键盘
</example>
通常从用户的会话中启动脚本，从 <file>~/.xsession</file> 中执行。
<!--
User-customized keymaps and pointer button mappings in X can be
specified in <file>~/.xmodmaprc</file>.
-->
<p>
要获得<tt>按键代码(keycode)</tt>，请在 X 中运行 <prgn>xev</prgn> 并按键。要想获得 <tt>keysym</tt> 的含义，请从宏定义文件 <file>/usr/include/X11/keysymdef.h</file> 中查找。该文件中所有的 <tt>#define</tt> 声明都用 <tt>XK_</tt> 命名，伪装成 <tt>keysym</tt> 的名字。
<p>
参阅 <manref name="xmodmap" section="1x">。

<sect1 id="ss-xsu">X 下获取 root 权限
<p>
如果运行 GUI 程序时需要 root 权限，请用下面的步骤在用户的 X 服务器上显示程序输出。<strong>千万不要直接使用 root 帐号启动 X 服务器</strong>以避免承担不必要的安全风险。
<p>
以普通用户身份启动 X 服务器，开一个 <prgn>xterm</prgn> 控制台窗口，执行：
<example>
$ XAUTHORITY=$HOME/.Xauthority
$ export XAUTHORITY
$ su root
Password:*****
# printtool &
</example>
非 root 用户以 <prgn>su</prgn> 方式运用该技巧时，要确保该非 root 用户所在用户组对 <file>~/.Xauthority</file> 文件有读权限。
<p>

<!-- this section moved up -->

想要系统自动执行该命令序列，请在用户帐号下创建 <file>~/.xsession</file> 文件，编辑文件如下：
<example>
# This makes X work when I su to the root account.
if [ -z "$XAUTHORITY" ]; then
        XAUTHORITY=$HOME/.Xauthority
        export XAUTHORITY
fi
unset XSTARTUP
# If a particular window/session manager is desired, uncomment following
# and edit it to fit your needs.
#XSTARTUP=/usr/bin/blackbox
# This starts x-window/session-manager program
if [ -z "$XSTARTUP" ]; then
  if [ -x /usr/bin/x-session-manager ]; then
    XSTARTUP=x-session-manager
  elif [ -x /usr/bin/x-window-manager ]; then
    XSTARTUP=x-window-manager
  elif [ -x /usr/bin/x-terminal-emulator ]; then
    XSTARTUP=x-terminal-emulator
  fi
fi
# execute auto selected X window/session manager
exec $XSTARTUP
</example>
接着在用户的 <prgn>xterm</prgn> 窗口中运行 <prgn>su</prgn>(不是<tt>su -</tt>)。现在从该 <prgn>xterm</prgn> 启动的 GUI 程序就可以在该用户的 X window 环境中显示以 root 权限运行的程序输出。只要执行了默认的 <file>/etc/X11/Xsession</file>，就可以使用该方法。如果用户使用 <file>~/.xinitrc</file> 或 <file>~/.xsession</file> 来配置自定义环境，需要将上面提到的环境变量 <tt>XAUTHORITY</tt> 加到这些脚本中去。

<p>还有一种方法，<package>sudo</package> 可用于自动执行上面的命令序列：
<example>
$ sudo xterm
... 或
$ sudo -H -s
</example>
这时 <file>/root/.bashrc</file> 中应包含：
<example>
if [ $SUDO_USER ]; then
    sudo -H -u $SUDO_USER xauth extract - $DISPLAY | xauth merge -
fi
</example>
即使对那些 home 目录位于 NFS 上的用户，它也能正常工作。因为 root 不用读 <file>.Xauthority</file> 文件。
<p>
还有一些用于该目的的专用软件包：<package>kdesu</package>、<package>gksu</package>、<package>gksudo</package>、<package>gnome-sudo</package> 和 <package>xsu</package>。其它方法也可以达到同样的目的：如在 <file>/root/.Xauthority</file> 和相应用户文件之间创建一个符号链接；使用 <url id="&suxhome;" name="sux"> 脚本；或对 root 初始化脚本执行“<tt>xauth merge
~<var>USER_RUNNING_X</var>/.Xauthority</tt>”。
<p>
更多方法参阅 <url id="&deb-dev-su;" name="debian-devel mailing list">。
</sect1>

<sect1 id="xfs-tt">X 下的 TrueType 字体
<p>
XFree86-4 中标准的 <prgn>xfs</prgn> 能完美地驱动 TrueType 字体，如果你使用的是 XFree86-3，就得安装第三方字体服务器如 <prgn>xfs-xtt</prgn>。
<p>
不论什么应用程序，如果要使用 TrueType 字体，就要与 libXft 或 libfreetype 建立链接(如果你使用的是已编译好的 .deb 包，就不用在这方面操心了)。
<p>
首先进行字体支持的基础设置：
<list compact>
<item>安装软件包 <package>x-ttcidfont-conf</package> 和
<package>defoma</package>。它们能自动生成文件 <file>fonts.scale</file> 和 <file>fonts.dir</file>。
<example>
# apt-get install x-ttcidfont-conf
</example>
<item>编辑 <file>/etc/X11/XF86Config-4</file> 的 <tt>Section "Files"</tt> 部分，如下显示：
<example>
Section "Files"
    FontPath  "/var/lib/defoma/x-ttcidfont-conf.d/dirs/TrueType"
    FontPath  "/usr/share/fonts/truetype"
    FontPath  "/usr/lib/X11/fonts/CID"
    FontPath  "/usr/lib/X11/fonts/Speedo"
    FontPath  "/usr/lib/X11/fonts/misc"
    FontPath  "/usr/lib/X11/fonts/cyrillic"
    FontPath  "/usr/lib/X11/fonts/100dpi:unscaled"
    FontPath  "/usr/lib/X11/fonts/75dpi:unscaled"
    FontPath  "/usr/lib/X11/fonts/Type1"
EndSection
</example>
第一行使 XFree86 使用任何你从 &debian; 软将包安装的 TrueType 字体。因为 XFree86 渲染 Type1 字体的效果很差，Type1 字体的目录就放在后面了。点阵字体的小技巧 <tt>:unscaled</tt> 对于新的 XF4 来说是不需要的，我把它包含在内是为了确保万无一失。
<!-- per /usr/share/doc/xfree86-common/README.fonts.gz in 4.2.1 -->
<p>
为了保留手工修改的 <file>/etc/X11/XF86Config-4</file> 文件，请按照<ref id="manual-config-x">的说明操作。
</list>
<p>
然后安装 DFSG 字体软件包：
<list compact>
<item>西方 TrueType 字体：
<list compact>
<item><package>ttf-bitstream-vera</package>：一套由 Bitstream, Inc 创造的高质量的 TrueType 字体。
<footnote>
在 Woody 中并没有这个包，不过你可以从 Sarge 中安装它。
</footnote>
<item><package>ttf-freefont</package>：一套高质量的 TrueType 字体，包含了 UCS 字符集。
<item><package>ttf-thryomanes</package>：一套包括了 Latin、Greek、Cyrillic 和 IPA 的Unicode TrueType 字体。
</list>
<item>亚洲字体：
<list compact>
<item><package>tfm-arphic-bsmi00lp</package>: Chinese Arphic "AR PL
Mingti2L Big5" TrueType font TeX font metric data
<item><package>tfm-arphic-bkai00mp</package>: Chinese Arphic "AR PL
KaitiM Big5" TrueType font TeX font metric data
<item><package>tfm-arphic-gbsn00lp</package>: Chinese Arphic "AR PL
SungtiL GB" TrueType font TeX font metric data
<item><package>tfm-arphic-gkai00mp</package>: Chinese Arphic "AR PL
KaitiM GB" TrueType font TeX font metric data
<item><package>ttf-baekmuk</package>: Korean Baekmuk series TrueType fonts
<item><package>hbf-jfs56</package>: Chinese Jianti Fangsong 56x56 bitmap
font (GB2312) for CJK
<item><package>hbf-cns40-b5</package>: Chinese Fanti Song 40x40 bitmap
font (Big5) for CJK
<item><package>hbf-kanji48</package>: Japanese Kanji 48x48 bitmap font
(JIS X-0208) for CJK
</list>
</list>
<!-- Need to watch Japanese font issue -->
<p>
由于供<strong>自由</strong>使用的字体有时很有限，Debian 用户也可以安装或共享某些商业 TrueType 字体。为了简化安装这类字体的工序，于是产生了一些方便的软件包：
<list compact>
<item><package>ttf-commercial</package>
<item><package>msttcorefonts (>1.1.0)</package>
<footnote>
由于 Microsoft 的网站在 8／2002 之后有改动，所以 Woody 中的软件包无法正常工作。请使用 Sarge 中的版本。
</footnote>
</list>
请慎重选择 TT 字体，以免<strong>自由</strong>系统受到不自由字体的污染。
<p>
所有这些 &debian; 字体软件包不用设置就能工作，并且对于使用“core”字体系统的 X 程序来说，它都是可用的。包括 Xterm、Emacs 和其他一些非 KDE 和 gnome 的程序。
<p>
现在运行 <prgn>xfontsel</prgn>，在 fndry 菜单中选中任何一个 TrueType 字体，你可以在 “fmly”菜单中看到很多项目。
<p>
对于 KDE2.2 和 GNOME1.4(搭配 libgdkxft0 使 GTK 1.2 能对字体进行反锯齿的渲染)，同样的你需要配置 Xft1。Xft1 非常的过时了，基本上只有 GNOME1.4 和 KDE2.2 在使用。编辑 <file>/etc/X11/XftConfig</file> 文件，在其他“dir”之前加入下面这一行东西。
<example>
    dir "/var/lib/defoma/x-ttcidfont-conf.d/dirs/TrueType"
</example>
<footnote>
我机器上没有使用 xft1 的东西，所以我不知道在这些起效之前是不是要重启 X。我似乎记得“xftcache”或更新 Xft1 的缓存，谁知到的话就和我确认一下。
</footnote>
<p>
对于 GNOME2 和 KDE3(Sarge 之后的版本)，你需要设置 <package>fontconfig</package>，Xft2 用它来查找字体。
<footnote>
<package>Fontconfig</package> 软件包不在 Woody 中。  
</footnote>
你不必为此再安装其他额外的软件包，因为所有用到 <package>fontconfig</package> 的软件包都会依赖与它的。
<p>
首先，查看 <file>/etc/fonts/fonts.conf</file>。里面应该有如下的一行内容。如果没有，就打开 <file>/etc/fonts/local.conf</file>，在 &lt;fontconfig&gt; 行后面添加这些内容。
<example>
    &lt;dir&gt;/var/lib/defoma/x-ttcidfont-conf.d/dirs/TrueType&lt;/dir&gt;
</example>
<p>
<package>Fontconfig</package> 应该能直接获得字体信息，“fc-list”能列出你的新字体。另外一个 <package>fontconfig</package> 的特色是，你能把字体放在 <file>~/.fonts/</file> 中，而所有字体可设置的程序都能立即访问它们。
<p>
如果你在 X 中手动安装了新的一个 TrueTyep 字体，而没有使用 &debian;的软件包，运行
<example>
# xset fp rehash
</example>
让 XFree86 重新检查目录下面的内容并找到新的字体。

<sect1 id="ss-browser">X 中的网页浏览器
<p>
Sarge 发行版中包含了下面这些拥有图形处理能力的网页浏览器：
<list compact>
<item><package>mozilla</package> Mozilla 浏览器
<item><package>mozilla-firefox</package> Mozilla 浏览器变体(独立的)
<item><package>epiphany-browser</package> Mozilla 浏览器变体(Gnome)
<item><package>galeon</package> 基于 Mozilla 的使用 Gnome UI 的浏览器(新增)
<item><package>konqueror</package> KDE 浏览器
<item><package>amaya</package> W3C 参考浏览器
<item>...
</list>
在 <tt>testing</tt> 或 <tt>unstable</tt> 中，将会遇到 <package>mozilla</package>
变体浏览器的版本匹配问题，因为这些变体浏览器需要匹配共享库的版本。
<p>
安装诸如 <package>mozilla</package> 浏览器的插件，可手工将“<tt>*.so</tt>”装到 plug-in 目录下，然后重启浏览器。
<p>
Plug-in 资源：
<list compact>
<item>Java plug-in: 从 <url id="&javasunhome;"> 安装二进制的“J2SE”。
<item>Flash plug-in: 从 <url id="&flashhome;"> 安装二进制的“Macromedia Flash Player 5”
<item><package>freewrl</package>: VRML 浏览器和 Netscape plug-in
<item>...
</list>
</sect1>

<sect1 id="ss-mail"> X 图形界面下的邮件客户端(MUAs)
<p>
在 Sarge 发行版下，有几个客户端软件包有图形显示界面：
<list compact>
<item><package>mozilla-thunderbird</package> 独立的邮件客户端
<item><package>kmail</package> KDE 邮件客户端
<item><package>evolution</package> Novell 里面的 groupware 套件
<item>...
</list>

<!-- CJK and X moved to bottom with different name to locale section -->

</sect>

<sect id="ssh">SSH
<p>
SSH(Secure SHell)是在 Internet 中建立连接的安全途径。OpenSSH 是一个自由的 SSH 实现软件，它包含 在&debian; 的 ssh 软件包中。

<sect1 id="ssh-basics">SSH 基础
<p>
首次安装 OpenSSH 服务器和客户机。
<example>
# apt-get update && apt-get install ssh
</example>
要运行 OpenSSH 服务器，还得屏蔽掉 <file>/etc/ssh/sshd_not_to_be_run</file>。
<p>
SSH 有两个验证协议：
<list>
<item>SSH 协议 第 1 版：
 <list compact>
<item>Potato 发布版仅支持该版协议
<item>可用的验证方法：
  <list compact>
<item>RSA 验证：基于 RSA 密钥的用户验证
<item>Rhosts 验证：基于 .rhosts 的主机验证(不安全，有缺陷)
<item>RhostsRSA 验证：.rhosts 验证与 RSA 主机密钥相结合(有缺陷)
<item>ChallengeResponse 验证：RSA Challenge-response 验证
<item>Password 验证：基于 password 的验证
  </list>
 </list>
<item>SSH 协议 第 2 版
 <list compact>
<item>Woody 后继版本将以该版协议为主
<item>可用的验证方式：
  <list compact>
<item>Pubkey 验证：基于公共密钥的用户验证
<item>Hostbase 验证：<file>.rhosts</file> 或 <file>/etc/hosts.equiv</file> 验证与公共密钥客户端主机验证相结合(有缺陷)
<item>ChallengeResponse 验证：challenge-response 验证
<item>Password 验证：基于 password 的验证
  </list>
 </list>
</list>

<p>
如果系统正迁移到 Woody 或使用非 &debian; 系统，请注意版本差异。
<p>
更多信息请参阅 <file>/usr/share/doc/ssh/README.Debian.gz</file>、<manref name="ssh" section="1">、<manref name="sshd" section="8">、<manref name="ssh-agent" section="1"> 和 <manref name="ssh-keygen" section="1">。

<p>
下面是一些关键的配置文件：

<list>

<item><file>/etc/ssh/ssh_config</file>：默认的 SSH 客户机。参阅 <manref name="ssh" section="1">。其中重要的项目有：

 <list compact>
<item><tt>Host</tt>：作用于所有与该关键字后所列出的主机相匹配的主机，它们须遵守下面(处于本host 关键字之后下一个 host 关键字之前的内容)所列的各项条款。
<item><tt>Protocol</tt>：规定所使用的 SSH协议的版本。默认为“2,1”。
<item><tt>PreferredAuthentications</tt>：规定 SSH2 客户端验证方式。默认为“hostbased,publickey,keyboard-interactive,password”。
<item><tt>PasswordAuthentication</tt>：如果想使用密码登录，须确认该选项没有设置成 <tt>no</tt>。
<item><tt>ForwardX11</tt>：默认为关闭状态。可使用命令行选项“<tt>-X</tt>”重载它。
 </list>

<item><file>/etc/ssh/sshd_config</file>：默认的 SSH 服务器。参阅 <manref name="sshd" section="8">。其中重要的项目有：

 <list compact>
<item><tt>ListenAddress</tt>：规定 <prgn>sshd</prgn> 监听的本地地址。允许多重指定。
<item><tt>AllowTcpForwarding</tt>：默认为关闭状态。 
<item><tt>X11Forwarding</tt>：默认为关闭状态。
 </list>

<item><file>$HOME/.ssh/authorized_keys</file>：默认公共密钥列表，客户机可使用这些密钥连接本主机的该用户帐号。参阅 <manref name="ssh-keygen" section="1">。

<item><file>$HOME/.ssh/identity</file>：参阅 <manref name="ssh-add" section="1"> 和 <manref name="ssh-agent" section="1">。
</list>

<p>
下面的操作将从客户机建立一个 <prgn>ssh</prgn> 连接。
<example>
$ ssh username@hostname.domain.ext
$ ssh -1 username@hostname.domain.ext # Force SSH version 1
$ ssh -1 -o RSAAuthentication=no -l username foo.host
    # force password on SSH1
$ ssh -o PreferredAuthentications=password -l username foo.host
    # force password on SSH2
</example>
在用户眼里，<prgn>ssh</prgn> 的功能相当于一个更灵巧更安全的 <prgn>telnet</prgn>(will not bomb with ^])。

</sect1>

<sect1 id="ssh-forward">发送端口 SMTP/POP3 微调
<p>
在本地机器上执行下面的命令，可以建立一个连接本地主机 4025 端口和<var>远程服务器</var> 25 端口的管道，以及一个连接本地主机 4110 端口和<var>远程服务器</var> 110 端口的 <prgn>ssh</prgn> 连接。
<example>
# ssh -q -L 4025:remote-server:25 4110:remote-server:110 \
           username@remote-server
</example>
在 Internet 上可使用该方法建立与 SMTP/POP3 服务器的安全连接。记得在远程主机的 <file>/etc/ssh/sshd_config</file> 中设置 <tt>AllowTcpForwarding</tt> 值为 <tt>yes</tt>。
</sect1>

<sect1 id="ssh-rsa">用更少的密码建立连接 &ndash; RSA
<p>
使用 RSAAuthentication(SSH1协议)或 PubkeyAuthentication(SSH2协议)可不必记住每个远程系统的连接密码。
<p>
在远程系统上，在 <file>/etc/ssh/sshd_config</file> 中分别设置“RSAAuthentication yes”或“PubkeyAuthentication yes”。
<p>
然后在本地生成验证密匙，在远程系统上安装公共密钥：
<example>
$ ssh-keygen          # RSAAuthentication: RSA1 key for SSH1
$ cat .ssh/identity.pub | ssh user1@remote \
        "cat - &gt;&gt;.ssh/authorized_keys"
...
$ ssh-keygen -t rsa   # PubkeyAuthentication: RSA key for SSH2
$ cat .ssh/id_rsa.pub | ssh user1@remote \
        "cat - &gt;&gt;.ssh/authorized_keys"
...
$ ssh-keygen -t dsa   # PubkeyAuthentication: DSA key for SSH2
$ cat .ssh/id_dsa.pub | ssh user1@remote \
        "cat - &gt;&gt;.ssh/authorized_keys"
</example>
今后可用“<tt>ssh-keygen -p</tt>”来改密码。最后记得检查一下设置，可做个连接测试，如遇问题，执行“<tt>ssh -v</tt>”。
<p>
你可以通过在 <prgn>authorized_keys</prgn> 里添加选项来限制主机及运行指定的命令。详情参阅 <manref name="sshd" section="8">。
<p>
注意 SSH2 有 <tt>HostbasedAuthentication</tt>，要使它工作，必须同时在服务器端的 <file>/etc/ssh/sshd_config</file> 文件中和客户机端的 <file>/etc/ssh/ssh_config</file> 或 <file>$HOME/.ssh/config</file> 文件中设置 <tt>HostbasedAuthentication</tt> 为 <tt>yes</tt>。
</sect1>

<sect1 id="ssh-client">处理外来的 SSH 客户端
<p>
下面是其它一些非类 Unix 平台的免费 SSH 客户端。
<taglist>
<tag>Windows
<item><url id="&puttyhome;" name="puTTY"> (GPL)
<tag>Windows (cygwin)
<item>SSH in <url id="&cygwinhome;" name="cygwin"> (GPL)
<tag>Macintosh Classic
<item><url id="&macsshhome;" name="macSSH"> (GPL) [注意 Mac OS X 包含 OpenSSH；在终端应用程序中使用 <tt>ssh</tt>]
</taglist>
参阅 <url id="&sfdochome;" name="SourceForge.net的站点文档">，“6. CVS Instructions”。

<sect1 id="ssh-agent">设置 <prgn>ssh-agent</prgn>
<p>
使用 passphrase 来保护 SSH 认证密匙会更安全，如果还没有设置，可使用 <tt>ssh-keygen -p</tt> 来设置。
<p>
<ref id="ssh-rsa">中描述了如何使用一个基于密码的远程主机连接，将公共密钥(例如<file>~/.ssh/id_rsa.pub</file>)放入远程主机的 <file>~/.ssh/authorized_keys</file>。
<example>
$ ssh-agent bash # 或者用 zsh/tcsh/pdksh 这些程序代替。
$ ssh-add ~/.ssh/id_rsa
Enter passphrase for /home/osamu/.ssh/id_rsa:
Identity added: /home/osamu/.ssh/id_rsa (/home/osamu/.ssh/id_rsa)
$ scp <var>foo</var> <var>user@remote.host:foo</var>
 ... no passphrase needed from here on :-)
$^D
 ... terminating ssh-agent session
</example>
对于 X 服务器，普通 &debian; 启动脚本会将 <prgn>ssh-agent</prgn> 作为一个父进程执行。所以只需执行一次 <prgn>ssh-add</prgn> 即可。
<p>
详情参阅 <manref name="ssh-agent" section="1"> 和 <manref name="ssh-add" section="1">。
</sect1>

<sect1 id="ssh-trouble">SSH 问题处理
<p>
如果遇到问题，检查一下配置文件的访问权限，并使用“<tt>-v</tt>”选项运行 <prgn>ssh</prgn>。
<p>
如果是 root 身份，遇到连接防火墙出错的情况，可使用“<tt>-P</tt>”选项；它规定 ssh 使用服务器的1 &ndash; 1023 以外的端口。
<p>
如果与远程站点的 <prgn>ssh</prgn> 连接突然停止工作，很可能是因为系统管理员修补系统造成的，<prgn>host_key</prgn> 在系统维护过程中被更改。在查明了事情真象并确定并不是有人试图冒充远程主机非法入侵之后，从本地机器的 <file>$HOME/.ssh/known_hosts</file> 中删除 <prgn>host_key</prgn> 项目就可以恢复连接了。
</sect1>

</sect>

<sect id="mail">邮件
<p>
邮件系统配置分为三类：
<list>
<item>邮件传输代理(MTA)：<prgn>exim4</prgn>, <prgn>exim</prgn>,
 <prgn>postfix</prgn>, 
 <prgn>sendmail</prgn>, <prgn>qmail</prgn>, <prgn>ssmtp</prgn>,
 <prgn>nullmailer</prgn>, ...
<item>邮件工具：<prgn>procmail</prgn>, <prgn>fetchmail</prgn>,
<prgn>mailx</prgn>, <prgn>crm114</prgn>, ...
<item>邮件用户代理(MUA)：<prgn>mutt</prgn>, <prgn>emacs</prgn>+<prgn>gnus</prgn>,
</list>

<sect1 id="mta">邮件传输代理(MTAs)
<p>
对于全功能的 MTA 来说，请在 Woody 中使用 <package>exim</package>，在 Sarge 中使用 <package>exim4</package>。 
<footnote>
下面的章节中用 <prgn>exim</prgn> 作为例子。对于 Sarge，如果需要的话用 <prgn>exim4</prgn> 代替。
</footnote>
参考资料：
<list compact>
<item>针对软件包 <package>exim</package> 的 <package>exim-doc</package> 和 <package>exim-doc-html</package>。
<item>针对软件包 <package>exim4</package> 的 <package>exim4-doc</package> 和 <package>exim4-doc-html</package>。
<item><url id="&eximhome;">
</list>
如果你对安全性有高要求的话，唯一一个可替代的 MTA 是 <package>postfix</package>。&debian; 软件包还提供了 <package>sendmail</package> 和 <package>qmail</package>，但并不推荐你使用它们。
<p>
有时并不需要 MTA 的所有功能，如在一个卫星系统中的一台笔记本电脑，可以考虑下列几种轻量级软件包：
<list compact>
<item><prgn>ssmtp</prgn>：需要 SMTP 连接并支持别名功能，或者
<item><prgn>nullmailer</prgn>：可以存信但不支持别名。
</list>
此刻，我发现 <prgn>exim</prgn> 对于我作为个人工作站的笔记本电脑再合适不过了。
<p>
如果要安装这些软件包必须先删除 <prgn>exim</prgn>，它们有冲突：
<example>
# dpkg -P --force-depends exim
# apt-get install nullmailer         # or ssmtp
</example> 

<sect2 id="exim-smart">Smarthost
<p>
如果你在一台通过用户级别的服务连接的机器上运行 <prgn>exim4</prgn> 或 <prgn>exim</prgn>，请确保在发信的时候通过 ISP 或者其他人提供的 smarthost。
<footnote>
任何一个通过拨号、DSL、cable 或 LAN 中的宽带路由器上网的主机，都要遵守这一原则。即使你家里的主机有一个来自 ISP 的固定 IP，遵守这个原则也是一个好主意。大多数工作站和家用服务器都可以归为这一类型。
</footnote>
这样做有许多好处：
<list compact>
<item>ISP 的 smarthost 通常有更可靠的连接，可以确保 SMTP 重发。
<item>避免使用<strong>动态 IP</strong> 发送信件，这类信件会被 dial-up spam 列表过滤的。
<item>节省寄出多个收信人的邮件的带宽。
</list>
<p>
唯一可能的坏处是：
<list compact>
<item>你 ISP 的 SMTP 出问题时的紧急处理。
<item>用于学习目的的实验。
<item>你的主机是专业的主机服务器。
</list>


<sect2 id="exim-base">Exim 的基础设置
<p>
为了将 <prgn>exim</prgn> 作为 MTA，可按下列步骤进行配置：
<example>
/etc/exim/exim.conf     使用“eximconfig”创建及编辑(exim)
/etc/exim4/*		使用“dpkg-reconfigure exim4-config”创建及编辑(exim4)
/etc/inetd.conf         注释掉 smtp，将 exim 作为 daemon 运行
/etc/email-addresses    添加伪来源地址列表
</example>
检查邮件过滤器可使用 <prgn>exim4</prgn> 或 <prgn>exim</prgn> 搭配 -brw, -bf, -bF, -bV, ... 等等

<sect2 id="addr-catchall">在 Exim 下设置一个收集不存在的邮件地址的容器
<p>
在 <file>/etc/exim/exim.conf</file> 文件(Woody 或后继版本)的 DIRECTORS 部分的末尾(localuser:director 之后)添加一个 catch-all director，将所有前面的 director 无法解析的地址收集到一起(per Miquel van Smoorenburg)：
<example>
catchall:
  driver = smartuser
    new_address = <var>webmaster@mydomain.com</var>
</example>
<p>
如果要为每个虚拟域指定更精细的处理方法或其它什么的，可在<file>/etc/exim/exim.conf</file>末尾添加(我没仔细测试过)：
<example>
*@yourdomain.com ${lookup{$1}lsearch*{/etc/email-addresses} \
        {$value}fail} T
</example>
接着在<file>/etc/email-addresses</file>中加上一行“*”。
</sect2>

<sect2 id="addr-rewrite">在 Exim 下设置寄出邮件的地址重写
<p>
<!-- Derrick 'dman' Hudson dman@dman.ddts.net -->
可用 <prgn>exim</prgn> 为发出的邮件指定特定的“From:”信头，在 <file>/etc/exim/exim.conf</file> 文件的末尾编辑：
<example>
*@host1.something.dyndns.org \
  "${if eq {${lookup{$1}lsearch{/etc/passwd}{1}{0}}} {1}  \
   {$0}{$1@something.dyndns.org}}"  frFs
</example>
该语句将作用于所有符合<tt>*@host1.something.dyndns.org</tt>的邮件。
<enumlist>
<item>在 <file>/etc/password</file> 中搜索，以确定 local part($1)是否为本地用户。
<item>如果是本地用户，它将用第一个域($0)中的内容重写地址
<item>如果不是本地用户，重写域部分。
</enumlist>

<sect2 id="smtp-aauth">在 Exim 中设置 SMTP 认证
<p>
某些 SMTP 服务如 yahoo.com 需要 SMTP 认证。可用下面的方法配置 <file>/etc/exim/exim.conf</file>：
<example>
remote_smtp:
  driver = smtp
  authenticate_hosts = smtp.mail.yahoo.com
...

smarthost:
  driver = domainlist
  transport = remote_smtp
  route_list = "* smtp.mail.yahoo.com bydns_a"
...

plain:
  driver = plaintext
  public_name = PLAIN
  client_send = "^cmatheson3^this_is_my_password"
</example>
别忘了最后一行的双引号。

<sect1 id="fetchmail">收取邮件 &ndash; Fetchmail
<p>
<prgn>fetchmail</prgn> 以 daemon 方式运行，用 ISP 提供的 POP3 帐号将邮件收到本地邮件系统。配置：
<example>
/etc/init.d/fetchmail   
/etc/rc?.d/???fetchmail run update-rc.d fetchmail default priority 30
/etc/fetchmailrc        configuration file (chown 600, owned by fetchmail)
</example>
<p>
在 Potato 中，有关如何在 <prgn>init.d</prgn> 脚本中配置 <prgn>fetchmail</prgn> 以 daemon 方式运行的信息，十分混乱，Woody 解决了这个问题。参阅 <url id="&examples;" name="example scripts"> 中 <file>/etc/init.d/fetchmail</file> 和 <file>/etc/fetchmailrc</file> 样例文件。
<p>
如果你的邮件信头被 ISP 的邮件工具以^M污染，可在 <file>$HOME/.fetchmailrc</file> 中添加“stripcr”选项：
<example>
options fetchall no keep stripcr
</example>
</sect1>

<sect1 id="procmail">处理邮件 &ndash; Procmail
<p>
<prgn>procmail</prgn>是一个本地邮件分发过滤程序。使用时，需要为每个使用它的用户创建<file>$HOME/.procmailrc</file>，样例：<url id="&examples;" name="_procmailrc">。
</sect1>

<sect1 id="crm114">用 <package>crm114</package> 处理垃圾邮件
<p>
<package>crm114</package> 软件包提供了 <prgn>/usr/share/crm114/mailfilter.crm</prgn> 脚本。该脚本是用 CRM114 撰写的，提供了非常有效的垃圾信件过滤器，并可以通过喂食垃圾邮件来调节它的处理能力。
<p>
CRM114 是一种专门为写过滤器设计的小语言，可以把它当做拥有超能力的 grep 版本。参阅 <manref name="crm" section="1">。
</sect1>

<sect1 id="mutt">阅读邮件 &ndash; Mutt
<p>
用 <prgn>mutt</prgn> 做用户邮件代理(MUA)与 <prgn>vim</prgn> 结合使用。使用 <file>~/.muttrc</file> 进行自定义；例如：

<example>
# use visual mode and "gq" to reformat quotes
set editor="vim -c 'set tw=72 et ft=mail'"
#
# header weeding taken from the manual (Sven's Draconian header weeding)
#
ignore *
unignore from: date subject to cc
unignore user-agent x-mailer
hdr_order from subject to cc date user-agent x-mailer
auto_view application/msword
....
</example>
<p>
在 <file>/etc/mailcap</file> 或 <file>$HOME/.mailcap</file> 中添加下列内容，就能显示 HTML 邮件和内嵌的 MS Word 附件：
<example>
text/html; lynx -force_html &percnt;s; needsterminal;
application/msword; /usr/bin/antiword '&percnt;s'; copiousoutput;
description="Microsoft Word Text"; nametemplate=&percnt;s.doc
</example>

</sect1>

</sect>

<sect id="l10n">本地化(localization)
<p>
&debian; 是国际化的操作系统，它所支持的语言和地区惯例的数目正在不断增加。接下来的部分列出了当前 &debian; 对各种差异形式的支持，接着再讨论<strong>本地化</strong>，该过程负责定制你的工作环境，根据你所选的语言确定当前系统的输入输出方式，并按照你所在地区的惯例转化日期、数字、货币格式以及系统中其它相关方面。

<sect1 id="languages">本地化基础
<p>
定制系统的本地化和国家语言支持包括以下几个方面。

<sect2 id="keyboard">键盘本地化
<p>
&debian; 发布版中包含了二十多种键盘布局方案。在 Woody 中重新配置键盘可使用：

<list compact>
<item><tt>dpkg-reconfigure --priority=low console-data # console</tt>
<item><tt>dpkg-reconfigure --priority=low xserver-xfree86   # XF4</tt>
<item><tt>dpkg-reconfigure --priority=low xserver-common-v3 # XF3</tt>
</list>
</sect2>

<sect2 id="data-stream">资料文件本地化
<p>
绝大多数 Debian 软件包都能使用 non-US-ASCII 字符，它们通过 glibc 中的 <strong>locale</strong> 技术，用 LC_CTYPE 环境变量来操作这些字符。
   
    <list compact>
    <item>纯 8-bit 字符：应用于所有程序中
    <item>其它拉丁字符集(例如：ISO-8859-1 或 ISO-8859-2)：应用于绝大多数程序中
    <item>多字节语言如中文、日文或韩文：应用于较新的应用程序中
    </list>
</sect2>

<sect2 id="display">显示本地化
<p>
X 可以显示包括 UTF-8 在内的许多编码并支持所有的字体。列表中包含了所有的 8-bit 字体和 16-bit 字体诸如中文、日文或韩文。<ref id="x-input"> 机制支持多字节输入法。参阅<ref id="x-cjk">和<ref id="x-utf-8">。
<p>
<package>kon2</package> 软件包可实现在 (S)VGA 图形化控制台中显示日文 EUC 编码。另一个替代品是 <package>jfbterm</package>，它也使用 FB 控制台。在控制台环境里，必须由应用程序来提供对日文输入的支持。所以要为 Emacs 加装 <package>egg</package> 软件包，可使用日文化的 <package>jvim</package> 软件包作为 Vim 环境。
<p>
安装非 Unicode 字体到 X 就能在 X 下显示任何编码的文件。所以不用太担心字体的编码问题。
</sect2>

<sect2 id="translation">信息和文档的本地化
<p>
许多在 &debian; 系统中显示的文本信息和文档被翻译成了各种译本，如出错信息、标准程序输出、菜单以及帮助页面。当前 &debian; 支持德语、西班牙语、芬兰语、法语、匈牙利语、意大利语、日语、韩语、波兰语、葡萄牙语、汉语以及俄语帮助页面，可通过安装 <tt>manpages-<var>LANG</var></tt> 软件包实现这些支持(此处 <var>LANG</var> 代表双位的 ISO 国家代码。使用 <tt>apt-cache search manpages-|less</tt> 获得可用的 Unix 帮助页面列表。)
    <p>
   要访问 NLS 帮助页面，用户必须将环境变量 LC_MESSAGES 设置成相应的字串。例如，要访问意大利语的帮助页面，需要将 LC_MESSAGES 设置成 <tt>it</tt>，这时 <prgn>man</prgn> 程序会在 <file>/usr/share/man/it/</file> 目录下搜索帮助页面。
</sect2>
</sect1>

<sect1 id="locales">Locales
<p>
<!-- FIXME substitute French -> German -->
Debian 支持 <strong>locale</strong> 技术。locale 机制允许程序按照该地区惯例来提供输出和其它特殊功能如字符集、日期时间显示格式，货币符号等等。该机制使用环境变量来确定其相关的行为。例如，假设你同时在系统上安装了美式英语和法语 locales，许多程序的出错信息都以双语显示：
<example>
$ LANG="en_US" cat foo
cat: foo: No such file or directory
$ LANG="de_DE" cat foo
cat: foo: Datei oder Verzeichnis nicht gefunden
</example>
Glibc 以函数库的形式向程序提供该功能的支持。参阅 <manref name="locale" section="7">。

<sect1 id="base-locale">Locales 简介
<p>
完整的 locale 描述包括三个部分：<tt>xx_YY.ZZZZ</tt>。
<list compact>
<item><strong><tt>xx</tt></strong>: ISO 639 个语言代码(小写)
<item><strong><tt>YY</tt></strong>: ISO 3166 个国家代码(大写)
<item><strong><tt>ZZZZ</tt></strong>: 编码集，例如，字符集或编码标志。
</list>
<p>
关于语言代码和国家代码，请参阅 <tt>info gettext</tt> 中的相关描述。
<p>
请注意，为了完成跨平台的兼容性，这个编码集部分可能被“内部标准化”。移除了所有 <tt>-</tt>，把所有字符都转化成小写的。典型的编码集：
<list compact>
  <item><strong>UTF-8</strong>: 适合所有区域的 Unicode 码，通常是 1-3 个八进制数(新的事实上的标准)
  <item><strong>ISO-8859-1</strong>: western Europe (de facto old standard)
  <item><strong>ISO-8859-2</strong>: eastern Europe (Bosnian, Croatian, Czech,
       Hungarian, Polish, Romanian, Serbian, Slovak,  Slovenian)
  <item><strong>ISO-8859-3</strong>: Maltese
  <item><strong>ISO-8859-5</strong>: Macedonian, Serbian
  <item><strong>ISO-8859-6</strong>: Arabic
  <item><strong>ISO-8859-7</strong>: Greek
  <item><strong>ISO-8859-8</strong>: Hebrew
  <item><strong>ISO-8859-9</strong>: Turkish
  <item><strong>ISO-8859-11</strong>: Thai (=TIS-620)
  <item><strong>ISO-8859-13</strong>: Latvian, Lithuanian, Maori
  <item><strong>ISO-8859-14</strong>: Welsh
  <item><strong>ISO-8859-15</strong>: western Europe with euro
  <item><strong>KOI8-R</strong>: Russian
  <item><strong>KOI8-U</strong>: Ukrainian
  <item><strong>CP1250</strong>: Czech, Hungarian, Polish (MS Windows origin)
  <item><strong>CP1251</strong>: Bulgarian, Byelorussian (MS Windows origin)
  <item><strong>eucJP</strong>: Unix style Japanese (=ujis)
  <item><strong>eucKR</strong>: Unix style Korean 
  <item><strong>GB2312</strong>: Unix style Simplified Chinese (=GB, =eucCN) for zh_CN
  <item><strong>Big5</strong>: Traditional Chinese for zh_TW
  <item><strong>sjis</strong>: Microsoft style Japanese (Shift-JIS) 
</list>
询问基本编码系统术语的意思：
<list compact>
<item><strong>ASCII</strong>: 7 bits (0-0x7f)
<item><strong>ISO-8859-?</strong>: 8 bits (0-0xff)
<item><strong>ISO-10646-1</strong>: Universal Character Set (UCS) (31 bits, 0-0x7fffffff)
<item><strong>UCS-2</strong>: First 16 bit of UCS as straight 2 Octets (Unicode: 0-0xffff)
<item><strong>UCS-4</strong>: UCS as straight 4 Octets (UCS: 0-0x7fffffff)
<item><strong>UTF-8</strong>: UCS encoded in 1-6 Octets (mostly in 3 Octets)
<item><strong>ISO-2022</strong>: 7 bits (0-0xff) with the escape sequence.
ISO-2022-JP is the most popular encoding for the Japanese e-mail.
<item><strong>EUC</strong>: 8 bits + 16 bits combination (0-0xff), Unix style
<item><strong>Shift-JIS</strong>: 8 bits + 16 bits combination (0-0xff), Microsoft
style.
</list>
ISO-8859-?、EUC、ISO-10646-1、UCS-2、UCS-4 和 UTF-8 对于 7 位的字符使用和 ASCII 相同的编码。  EUC or Shift-JIS uses
high-bit characters (0x80-0xff) to indicate that part of encoding is 16
bit.  UTF-8 also uses high-bit characters (0x80-0xff) to indicate non 7
bit character sequence bytes and this is the most sane encoding system 
to handle non-ASCII characters.
<p>
Please note the byte order difference of Unicode implementation:
<list compact>
<item><strong>Standard  UCS-2, UCS-4</strong>: big endian
<item><strong>Microsoft UCS-2, UCS-4</strong>: little endian for ix86 (machine-dependent)
</list>
See <ref id="recode"> for conversion between various character sets.
For more see <url id="&intro-i18n;" name="Introduction to i18n">.

<sect1 id="activate-locales">激活 locale 支持
<p>
&debian; 并<strong>不</strong>在系统中编译所有可用的 locales，检查 <file>/usr/lib/locale</file> 确定哪个 locales(除了默认的“C”)已在系统上编译安装。如果所需的 locale 并不在其中，有两个解决办法：
<list compact>
 <item>编辑 <file>/etc/locale.gen</file> 添加需要的 locale，然后以 root 身份运行 <prgn>locale-gen</prgn> 编译它。参阅 <manref
   name="locale-gen" section="8">以及该帮助页面中“SEE ALSO”一节所列的命令。
 <item>运行 <tt>dpkg-reconfigure locales</tt> 可以重新配置 <package>locales</package> 软件包。如果还没有安装 locales，locales 安装程序会调出 debconf 界面让你选择所需的 locales 并编译相关数据库。
</list>

<sect1 id="env-locale">激活特定 locale
<p>
相关的环境变量按如下次序将特定 locale 值赋给程序：
<enumlist>
<item>LANGUAGE：该环境变量由一个用冒号分隔、以优先级排序的地区名称列表组成。仅当 POSIX 地区值与“C”地区值相异时才使用到它[在 Woody 中；在 Potato 版本中通常其优先级高于 POSIX locale]。(GNU 扩展名)
<item>LC_ALL：如果为非空值，其值将作用于所有 locale 项目。(POSIX.1)通常为“”(空值)。
<item>LC_*：如果为非空值，其值将作用于相应的 locale 项目。(POSIX.1)通常为“C”。
<p>
      LC_*变量有：
 <list compact>
<item>LC_CTYPE：字符分类和环境转换
<item>LC_COLLATE：校正命令
<item>LC_TIME：时间显示格式
<item>LC_NUMERIC：非货币型数字格式
<item>LC_MONETARY：货币符号
<item>LC_MESSAGES：常规信息、诊断消息和交互响应信息的格式
<item>LC_PAPER：纸张尺寸
<item>LC_NAME：姓名格式
<item>LC_ADDRESS：地址格式和地区信息
<item>LC_TELEPHONE：电话号码格式
<item>LC_MEASUREMENT：度量单位(公制或其它)
<item>LC_IDENTIFICATION：有关地区信息的元数据
 </list>
<item>LANG：如果为非空值且 LC_ALL 也没有定义，则该值作用于所有没有定义的 LC_*地区项目。(POSIX.1)通常为“C”。
</enumlist>
注意，有些应用程序(例如Netscape 4)忽略LC_*设置。
<p>
<prgn>locale</prgn> 程序可显示当前激活的地区设置和可用的 locale；参阅 <manref name="locale" section="1">。(注意：<tt>locale
-a</tt> 将列出系统已知的所有的 locales；这并<em>不</em>代表它们都已在系统中编译了！参阅<ref id="activate-locales">。)

<sect1 id="ISO-locale">ISO 8601日期格式
<p>
名为 en_DK “丹麦英语的” locale 提供了对国际标准日期格式 <tt>yyyy-mm-dd</tt>(ISO 8601日期格式)的支持(听起来有点搞笑:-))。它仅工作于 <prgn>ls</prgn> 的控制台屏幕。

<!-- beyond locale moved to below -->

<sect1 id="iso-8859-1">US(ISO-8859-1)例子
<p>
将下列语句添加到 <file>~/.bash_profile</file>：
<example>
LC_CTYPE=en_US.ISO-8859-1
export LC_CTYPE
</example>

<sect1 id="france">带 Euro 符号的 France(ISO-8859-15)的例子
<p>
将下列语句添加到 <file>~/.bash_profile</file>：
<example>
LANG=fr_FR@euro
export LANG
LC_CTYPE=fr_FR@euro
export LC_CTYPE
</example>
<p>
按<ref id="keyboard">中描述的方法，将键盘设置成 French "AZERTY"。安装 <package>manpages-fr</package> 包添加法语帮助页面。US 中的 Right-Alt 键在 Europe 中称为Alt-Gr，它与其它键组成的组合键可用于输出大量特殊字符，例如 Alt-Gr+E 可以输出欧元符号。
<p>
可使用类似的方法配置绝大多数西欧语言环境。
<p>
参阅 <url id="&debian-euro-support;" name="Debian Euro HOWTO"> 了解有关对新欧洲货币方面的支持，有关对法语环境的支持请参阅 <url id="&debian-fr-howto;" name="Utiliser et configurer Debian pour le francais">。

<sect1 id="x-cjk">多语言的 X 窗口系统范例
<p>
让我们来创建一个多语言 X 窗口系统，能在不同的控制台中搭配 EUC、UTF-8 和 ISO-8859-1 来同时支持日语、英语、德语和法语。
<p>
我会向你展示用 &debian; menu 系统进行的自定义设置。&debian; menu 系统的详细信息参阅 <url id="&f-menu;">。在例子中，我也创建了 <prgn>mozilla</prgn> 网络浏览器的快捷键。
<footnote>
在这个例子中，两个问题会影响到 <prgn>blackbox</prgn> 2003 发行版本。我使用 <tt>sh -c</tt> 命令。另外，root 不需要建立 <file>~/.menu/*</file> 项目，改用 <file>/etc/menu/*</file> 取代。
</footnote>
<list>

 <item>使用<ref id="l10n">中描述的方法添加对日文 ja_JP.eucJP locale 和其他需要的 locale 的支持。

 <item>安装 Kana-to-Kanji 转换系统和字典(针对日语)：
  <list compact>
  <item><package>canna</package> &ndash; 本地服务器 (free bear license)，或
  <item><package>freewnn-jserver</package> &ndash; 加入网络功能的服务器 (Public Domain)
  </list>

 <item>安装日文输入系统(针对日语)：
  <list compact>
  <item><package>kinput2-canna</package> &ndash; X 下或
  <item><package>kinput2-canna-wnn</package> &ndash; X 下和
  <item><package>egg</package> &ndash; 在控制台下能搭配 Emacsen 直接输入日文(额外)
  </list>

 <item>安装日文兼容终端机：
  <list compact>
  <item><package>xterm</package> &ndash; X(支持 ISO-8859-1 和 UTF-8)，
  <item><package>kterm</package> &mdash; X (支持日文 EUC)，和
  <item><package>mlterm</package> &mdash; X (支持多语言) 
  </list>

 <item>添加全部日文字库包。(针对所有语言)
 
  
 <item>创建<file>~/.xsession</file>，用户可通过配置它来指定X环境，如<ref id="custom-x">中描述的(针对所有语言)：

<example>
#!/bin/sh
# This makes X work when I su to root.
if [ -z "$XAUTHORITY" ]; then
        XAUTHORITY=$HOME/.Xauthority
        export XAUTHORITY
fi

# Set specific environment through debian menu system.
# Reset locale
unset LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES 
unset LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT 
unset LC_IDENTIFICATION LC_ALL LANG LANGUAGE PAGER
# set locale default in X
LANG=C
# export locale
export LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES 
export LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT 
export LC_IDENTIFICATION LC_ALL LANG LANGUAGE PAGER
###
# activate input method for Japanese with kinput2
kinput2 &
XMODIFIERS="@im=kinput2"
export XMODIFIERS
# How about blackbox window manager (lightweight)
exec blackbox
#exec xfwm
#exec wmaker
</example>

 <item>在 <file>~/.bash_profile</file> 中为 Linux 控制台设置 locale(针对所有语言)。

 <item>删除 <file>~/.bashrc</file> 中的 locale 设置，如果其存在的话(针对所有语言)。
 
 <item>在 <file>/etc/menu/</file> 中建立新文件(针对所有语言)。
 <list compact>
 <item><file>/etc/menu/xterm-local</file>:(在菜单中加入新项目)
 <footnote>
使用一个不会和其他软件包名字重复的名称。
 </footnote>
<example>
?package(xterm):\
 needs=x11\
 section=XShells\
 longtitle="XTerm: terminal emulator (en_US.ISO-8859-1)"\
 title="XTerm (en_US.ISO-8859-1)"\
 command="sh -c 'LC_ALL=en_US.ISO-8859-1 xterm'"
?package(xterm):\
 needs=x11\
 section=XShells\
 longtitle="XTerm: terminal emulator (de_DE.ISO-8859-1)"\
 title="XTerm (de_DE.ISO-8859-1)"\
 command="sh -c 'LC_ALL=de_DE.ISO-8859-1 xterm -T xterm-de'"
?package(xterm):\
 needs=x11\
 section=XShells\
 longtitle="XTerm: terminal emulator for X with Unicode support (Japanese)"\
 title="UXTerm (ja_JP.UTF-8)"\
 command="sh -c 'LC_ALL=ja_JP.UTF-8 uxterm'"
</example>
 <item><file>/etc/menu/kterm</file>:(覆盖系统默认的)
 <footnote>
使用覆盖软件包名字的文件名。
 </footnote>
<example>
?package(kterm):\
 needs="x11"\
 section="XShells"\
 command="sh -c 'LC_ALL=ja_JP.eucJP PAGER=w3m /usr/X11R6/bin/kterm -xim'" \
 title="Kanji Terminal"
?package(kterm):\
 needs="x11"\
 section="XShells"\
 command="sh -c 'LANG=ja_JP.eucJP \
          LC_MESSAGES=en_US.ISO-8859-1 PAGER=w3m /usr/X11R6/bin/kterm -xim'" \
 title="Kanji Terminal (bilingal)"
</example>
 <item><file>/etc/menu/mozilla-local</file>:(添加新的快捷键)
 <footnote>
 <tt>section="/"</tt> 中的斜杠会使该条目加入初始的菜单中，<tt>title=" Mozilla Navigator"</tt> 开头的空格会让条目位于列表的顶端。
 </footnote>
<example>
?package(mozilla-browser):needs="x11" section="/" \
        title=" Mozilla Navigator" command="mozilla-1.5" hints="Web browsers" \
        icon=/usr/share/pixmaps/mozilla.xpm
</example>
 <item>以 root 帐号运行 <prgn>update-menus</prgn>。
 </list>
 <item>在 <file>~/.muttrc</file> 中加入下列内容(针对日语)：
<example>
# UTF-8 support is not popular in popular Japanese EMACS environment
# 7 bit encoding of iso-2022-jp is easier for everyone
# default encoding order = us-ascii --&gt; iso-8859-1 --&gt; iso-2022-jp
set send_charset="us-ascii:iso-8859-1:iso-2022-jp"
set allow_8bit=no
</example>
 <item>为  X 应用程序激活 XIM <prgn>kinput2</prgn>(针对日语)：
  <list compact>
  <item>在 X 资源文件 <file>~/.Xresources</file>(不知何故，看上去 Debian 好象在自动配置它)添加 <tt>*inputMethod: kinput2</tt> 和 <tt>KTerm*VT100*OpenIm:true</tt>。
  <item>某些应用程序(如 <prgn>mlterm</prgn>)也允许设置 <tt>*inputMethod:</tt> 和其它运行时的动态信息(在 <prgn>mlterm</prgn> 中按下 <strong>Ctrl-MouseButton-3</strong>)。
  </list>
 <item>用 <tt>startx</tt> 或任何显示管理器(xdm、gdm、kdm、wdm...)启动 X(针对所有语言)
 <item>打开日文兼容应用程序：VIM6、(x)emacs21、mc-4.5、mutt-1.4...(针对日语)。
 (通常 Emacs 是最流行的平台，尽管我不怎么用它。)
 <item>按“<strong>Shift+Space</strong>”可切换日文输入法。(针对日语)。
 <item>在本地化了的控制台中阅读本地化手册(针对所有语言)。
</list>
关于其他 CJK 语言的支持，参阅下面的章节和 <url id="&suse-cjk;" name="SuSE pages for CJK">。

<sect1 id="x-input">其他 X 输入法
<!-- I need feed back from Chinese and Korean people for here -->
<p>
还有许多其他可用的 X 输入法支援软件包：
<example>
Language   LC_CTYPE     XIM server XMODIFIERS              Start key
Japanese   ja_JP*       kinput2    "@im=kinput2"           Shift-Space
Korean     ko_KR*       ami        "@im=Ami"               Shift-Space
Chinese(T) zh_TW.Big5   xcin       "@im=xcin-zh_TW.big5"   Ctrl-Space
Chinese(S) zh_CN.GB2312 xcin       "@im=xcin-zh_CN.GB2312" Ctrl-Space
</example>
<p>
日语输入法 <prgn>kinput2</prgn> 由软件包 <package>kinput2-canna-wnn</package>、<package>kinput2-canna</package> 和 <package>kinput2-wnn</package> 提供。输入法还需要例如 <package>canna</package> 和 <package>freewnn-jserver</package> 这样的字典服务器才能使用。

<!--
<p>
Korean and Chinese may also use dictionary server such as 
<package>freewnn-kserver</package> and
<package>freewnn-cserver</package> too.
-->

<sect1 id="x-term">X 终端模拟机
<p>
还有许多 X 终端机支持 8-bit 编码，安装相应的字体就能正常显示：
<list compact>
  <item><package>xterm</package> &ndash; X 终端机
  <item><package>gnome-terminal</package> &ndash; Gnome 的 <package>xterm</package>
  <item><package>konsole</package> &ndash; KDE 的 <package>xterm</package>
  <item><package>rxvt</package> &ndash; VT102 终端 (lighter)
  <item><package>aterm</package> &ndash; Afterstep WM 的 VT102 终端
  <item><package>eterm</package> &ndash; Enlightment WM 的 VT102 终端
  <item><package>wterm</package> &ndash; WindowMaker WM 的 VT102 终端
</list>
<p>
在 UTF-8 编码的情况下，<package>xterm</package> 提供多编码的 X 终端的支持(<ref id="x-utf-8">)。其他传统编码的支持还在开发中(2003 年时)。下面的软件包都提供了传统编码的支持：
<list compact>
  <item><package>aterm-ml</package> &ndash; Multi-lingual
  <item><package>kterm</package> &ndash; Multi-lingual (Japanese, ...)
  <item><package>rxvt-ml</package> &ndash; Multi-lingual
  <item><package>wterm-ml</package> &ndash; Multi-lingual 
  <item><package>cxterm-big5</package> &ndash; Chinese (Trad., Big5)
  <item><package>cxterm-gb</package> &ndash; Chinese (Simp., GB)
  <item><package>cxterm-ks</package> &ndash; Chinese (KS)
  <item><package>cxterm-jis</package> &ndash; Japanese
  <item><package>hanterm-classic</package> &ndash; Korean (Hangul)
  <item><package>hanterm-xf</package> &ndash; Korean (Hangul)
  <item><package>hztty</package> &ndash; Chinese (GB, Big5, zW/HZ)
</list>
对于 <prgn>kterm</prgn>(和其他终端)，你可以通过在菜单上按下 Ctrl+鼠标中键来激活 XIM。

<sect1 id="x-utf-8">支持 UTF-8 的 X 终端机
<p>
XFree86 4.x 的软件包 <package>xterm</package> 中的 X 终端机 <prgn>uxterm</prgn> 提供了对 UTF-8 的支持。它支持所有语言。它是 <manref name="xterm" section="1"> 程序的一个 wrapper，使得启动的 xterm 使用了“UXTerm”的 X 资源集。
<p>
例如，为了提供英文、俄文、日文、中文和韩文大字体的完美显示，需要在安装相应的字体后在 <file>~/.Xresources</file> 中添加下列内容：
<example>
! set large font
UXTerm*font: -misc-fixed-medium-r-normal-*-18-120-100-100-c-90-iso10646-1
! Use XIM for Japanese
*inputMethod: kinput2
</example>
然后按照 <ref id="xresources"> 中描述的，运行 <tt>xrdb -merge ~/.Xresources</tt> 来更新 X 资源。
<p>
虽然大部分的终端程序，例如 <package>vim</package>、<package>mutt</package> 和 <package>emacs</package> 都已经能兼容 UTF-8 了(Woody-Sarge)。但是还有不少 <package>mc</package> 这样的程序不兼容 UTF-8，只支持 8-bit 编码。如果你编辑未知或者混合编码文件的 7-bit ASCII 部分，使用 locale 不敏感的支持 8-bit 的编辑器比较安全。
<p>
参阅 <url id="&unicode-howto;" name="The Unicode HOWTO">。

<sect1 id="fb-utf-8">FB 控制台下 UTF-8 的例子
<p>
在 <package>debian-installer</package> 中 <package>bterm</package> 提供了在 FB 控制台对 UTF-8 的支持。

<sect1 id="beyond-locale">超越 locales
<p>
当你第一次在系统上安装“<strong>国家语言环境</strong>”(national language environment)时，请注意使用 <prgn>tasksel</prgn> 或 <prgn>aptitude</prgn> 查看一下，在选择相关语言环境任务项时都有哪些软件包被选上了，这些选择信息非常有用特别是进行多语言设置时。如果遇到某些关联包与运行良好的系统上的某些软件发生冲突，就不要安装那些引起冲突的包。由于新装的软件比原来的软件具有更高的优先级，所以必须用 <prgn>update-alternative</prgn> 结合有关命令让系统恢复到原来状态。
<p>
大部分较新的使用 glibc2.2 的程序都已支持国际化了。所以不必再为诸如基于 VIM 的 <prgn>jvim</prgn> 等程序指定 loclae，因为 X 下的 <prgn>vim</prgn> 6.0 版已提供了该功能。事实上，比起另一个版本它显得有点粗糙，<prgn>jvim</prgn> 有个版本直接将日文输入法(<prgn>canna</prgn>)支持编译进去了，而且还集成了大量成熟的日文特性，很值得你期待:-)
<p>
有时为了获得更好的工作环境，仅通过 <tt>locale</tt> 来配置程序是不够的。<package>language-env</package> 软件包和 <prgn>set-language-env</prgn>命令可以大大简化你的工作。
<p>
亦可参阅有关国际化的文档<url id="&intro-i18n;" 
name="Introduction to i18n">，虽然其目标读者为开发人员但对系统管理员也十分有用。
</sect1>

<sect id="m17n">多语言化(Multilingualization, m17n)
<p>
由 <package>language-env</package> 等软件包所实现的<ref id="l10n">是以单一语言的本地化为目标的。这些软件包使用传统的文本编码(encoding)方式。你在这样的环境下不能在文本中混合使用法语和日语，因为它们分别使用 ISO-8859-1 和 EUC-JP 的编码方式，而这两种编码是不兼容的。
<p>
如果你选择在一个可用的 UTF-8 区域设置(locale)下启动 GNOME 或 KDE，你就可以得到一个多语言化的 UTF-8 桌面环境。在这样的环境下，只要你用的软件是符合 UTF-8 标准的，你就可以自由地混合使用英语，汉语，俄语，日语等各种文字。
<p>
在这样的环境下，最好使用基于 <package>scim</package> 的多语言化输入法。<package>scim</package> 所提供的各种输入法可以一起用 Ctrl-Space 开启或关闭。具体的输入法引擎可以通过点击 SCIM 面板来选择和切换。
<p>
<package>vim</package> 提供多语言环境，当它在像 
<prgn>gnome-teminal</prgn> 这样的 UTF-8 控制台运行时，它能够同时处理
UTF-8 编码和传统编码的文件（EUC-JP、ISO-8859-1 ……）。
参见 vim 的帮助信息，按下 [Esc] 键，
输入 <tt>:help mbyte.txt</tt>。
</sect>
</chapt>

