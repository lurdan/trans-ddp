<!-- CVS revision of this document "# Revision is not used here.#"  -->
<!-- CVS revision of original english document "1.70"  -->

<chapt id="kernel">Debian 下的 Linux 内核
<p>
Debian 使用自己的方法来编译内核及相关模块。参阅 <ref id="kernel-details">。

<sect id="kernel-compile">内核编译
<p>
Debian unstable 发行版中的 <prgn>gcc</prgn>、<prgn>binutils</prgn> 和 
<prgn>module-init-tools</prgn> 可用来编译最新的 Linux 内核。这方面的官方信息，参阅 <file>&f-kernel-readme;</file>，特别是文件的后半部分。

<p>
内核编译是个很困难的议题，由于目标在不断的变化，即使是最受人尊敬的开发者也会有不同的见解：
<taglist compact>
<tag>Manoj Srivastava 写到：
<item><tt>--initrd</tt> 需要 Debian 专用 cramfs 补丁。
<tag>Herbert Xu 写到：
<item>不，它不需要，想使用除 CRAMFS 以外的文件系统只需在 <file>/etc/mkinitrd/mkinitrd.conf</file> 中设置 MKIMAGE。
</taglist>
<p>
按照 Manoj 和 Kent 撰写的 <file>&f-kernel-readme;</file> 以及 <url id="&kernel-handbook;"> 的指导小心行事，如果要编译最新版本的内核请确认安装了最新 unstable 版 <package>kernel-package</package> 软件包。
<p>
对于单机内核编译，<tt>initrd</tt> 不是必须的。我用它是希望我新编译的内核与相应的内核镜像一模一样。如果使用 <tt>initrd</tt>，请先阅读一下 <manref name="mkinitrd" section="8"> 和 <manref name="mkinitrd.conf" section="5">。

<sect1 id="kernel-headers">内核头文件
<p>
绝大多数“普通”程序不需要内核头文件，事实上如果直接引用它们会出错。这些程序应该引用那些<strong>编译 <prgn>glibc</prgn></strong> 所用的头文件，它们位于 Debian 系统的 <file>/usr/include/linux</file> 和 <file>/usr/include/asm</file> 目录下。
<p>
故不要在 <file>/usr/src/linux</file> 目录中创建指向 <file>/usr/include/linux</file> 和 <file>/usr/include/asm</file> 的链接，一些过时的文档曾建议创建它们。
<p>
如果某些内核类应用程序<strong>需要</strong>特定的内核头文件，可修改 Makefile(s)，使其包含指向“<file><var>特定内核头文件目录</var>/include/linux</file>”和“<file><var>特定内核头文件目录</var>/include/asm</file>”的路径。
</sect1>
</sect>

<sect id="proc-sys">通过 proc 文件系统调整内核
<p>
Linux 内核行为可以在运行状态下通过 proc 文件系统进行调节。
<p>
有关在 <file>/proc</file> 文件系统下修改内核参数的基础知识，可参阅 Linux 源码包中的 <file>Documentation/sysctl/*</file> 文件。
<p>
调整内核参数的例子，可参考 <file>/etc/init.d/networking</file> 和<ref id="killecn">。
<p>
参阅 <manref name="sysctl.conf" section="5"> 了解如何使用 <file>/proc</file> 文件系统和脚本 <file>/etc/init.d/procps.sh</file> 来设置内核开机时的配置。此脚本由 <file>/etc/rcS.d/S30procps.sh</file> 执行。

<sect1 id="many-files">打开了太多文件
<p>
Linux 内核有时会报告“Too many open files”，起因是 <tt>file-max</tt> 默认值(8096)太小。要解决这个问题，可以 root 身份执行下列命令：(或将它们加入<file>/etc/rcS.d/*</file>下的 init 脚本。)
<example>
# echo "65536"  &gt; /proc/sys/fs/file-max  # 适用于 2.2 和 2.4 版内核
# echo "131072" &gt; /proc/sys/fs/inode-max # 仅适用于 2.2 版内核
</example>
或将下列内容放入 <file>/etc/sysctl.conf</file>，做永久性的更改：
<example>
file-max=65536   # 适用于 2.2 和 2.4 版内核
inode-max=131072 # 仅适用于 2.2 版内核
</example>

<sect1 id="bdflush">磁盘缓存清除时间(Disk flush intervals)
<p>
可通过 proc 文件系统来修改磁盘缓存清除时间。下面的操作将默认的 5 秒时间间隔缩短到 1 秒。
<example>
# echo "40 0 0 0 100 30000 60 0 0"  &gt; /proc/sys/vm/bdflush
</example>
这可能对文件 I/O 性能产生一点儿负面影响。但它能保证文件内容是最近 1 秒的，比默认的 5 秒更短。对日志文件系统来说更是如此。
</sect1>

<sect1 id="over-commit">迟缓的小内存旧机器
<p>
对某些小内存的旧机器来说，在 proc 文件系统中打开内存的 over-commit 功能会很有效果：
<example>
# echo 1 &gt; /proc/sys/vm/overcommit_memory
</example> 
</sect1>

</sect>

<sect id="udev">2.6 版内核和 udev
<p>
udev 是取代 <file>/dev/</file> 的动态设置的系统。我们可以选择很短的设备名字。而 2.4 版内核使用的 devfs 已经被淘汰。
<p>
安装 Debian 新版的 <package>kernel-image-2.6.<var>NN</var></package> 和 <package>udev</package> 就能启用这个功能。
</sect>

</chapt>

