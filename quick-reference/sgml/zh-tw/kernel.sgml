<!-- CVS revision of this document "# Revision is not used here.#"  -->
<!-- CVS revision of original english document "1.70" -->
<chapt id="kernel">Debian下的Linux核心
<p>
Debian運用自己的方式來編譯核心及相關模組。參閱<ref id="kernel-details">。

<sect id="kernel-compile">核心(重新)編譯
<p>
Debian unstable發行版中的<prgn>gcc</prgn>、<prgn>binutils</prgn>和<prgn>module-init-tools</prgn>可用來編譯最新的Linux核心。這方面的官方訊息，參閱<file>&f-kernel-readme;</file>文件的後半部分。

<p>
核心編譯是個很困難的議題，由于目標在不斷的變化，即使是最受人尊敬的開發者也會有不同的見解：
<taglist compact>
<tag>Manoj Srivastava寫到：
<item><tt>--initrd</tt> 需要Debian專用cramfs修正檔。
<tag>Herbert Xu 寫到：
<item>不，它不需要，想使用除CRAMFS以外的文件系統只需在<file>/etc/mkinitrd/mkinitrd.conf</file>中設定MKIMAGE。
</taglist>
<p>
按照Manoj和Kent撰寫的<file>&f-kernel-readme;</file>以及<url id="&kernel-handbook;">的指導小心行事，如果要編譯最新版本的核心請確認安裝了最新unstable版<package>kernel-package</package>套件。
<p>
對於單機核心編譯，<tt>initrd</tt>不是必須的。我用它是希望我新編譯的核心與相應的核心一模一樣。如果使用<tt>initrd</tt>，請先閱讀一下<manref name="mkinitrd" section="8">和<manref name="mkinitrd.conf" section="5">。

<sect1 id="kernel-headers">核心標頭檔
<p>
絕大多數"正常"程序不需要核心標頭檔，事實上如果直接引用它們會出錯。這些程序應該引用那些<strong>編譯<prgn>glibc</prgn></strong>所用的標頭檔，它們位於Debian系統的<file>/usr/include/linux</file>和<file>/usr/include/asm</file>目錄下。
<p>
故不要在<file>/usr/src/linux</file>目錄中建立指向<file>/usr/include/linux</file>和<file>/usr/include/asm</file>的連結，一些過時的文檔曾建議建立它們。
<p>
如果某些核心類應用程序<strong>需要</strong>特定的標頭檔，可修改<file>Makefile</file>(s)，使其包含指向"<file><var>特定標頭檔目錄</var>/include/linux</file>"和"<file><var>特定標頭檔目錄</var>/include/asm</file>"的路徑。
</sect1>

</sect>

<sect id="proc-sys">透過 proc 檔案系統調整核心
<p>
透過proc檔案系統，可在運行的狀態下進行調整Linux核心動作。
<p>
有關 <file>/proc</file> 檔案系統下修改核心參數的基礎知識，可參閱Linux源碼中的<file>Documentation/sysctl/*</file>文件。
<p>
調整核心參數的例子，可參考<file>/etc/init.d/networking</file>和<ref id="killecn">。
<p>
參閱 <manref name="sysctl.conf" section="5"> 了解如何透過 <file>/etc/init.d/procps.sh</file> 和 <file>/proc</file>檔案系統來設定核心啟動組態。<file>/etc/rcS.d/S30procps.sh</file> 在執行時會呼叫 <file>/etc/init.d/procps.sh</file> script。

<sect1 id="many-files">開啟太多檔案
<p>
Linux核心有時會報告 “Too many open files”，原因是<tt>file-max</tt>預設值（8096）太小。要解決這個問題，請用 root 身份執行下列命令：
<example>
# echo "65536"  &gt; /proc/sys/fs/file-max  # for 2.2 and 2.4 kernel
# echo "131072" &gt; /proc/sys/fs/inode-max # for 2.2 kernel only
</example>
或者修改加入底下的敘述到 <file>/etc/sysctl.conf</file>：
<example>
file-max=65536   # for 2.2 and 2.4 kernel
inode-max=131072 # for 2.2 kernel only
</example>

<sect1 id="bdflush">清除磁碟緩衝區時間
<p>
透過proc檔案系統來修改清除磁碟緩衝區時間。下面的操作將預設的5秒時間間隔縮短到1秒。
<example>
# echo "40 0 0 0 100 30000 60 0 0"  &gt; /proc/sys/vm/bdflush
</example>
這可能對文件I/O效能產生一些負面影響。但它能保證文件內容是最近1秒的，比預設的5秒更短。對日誌式檔案系統來說更是如此。
</sect1>

<sect1 id="over-commit">慢速且記憶體小的機器
<p>
對某些記憶體少的舊機器來說，在proc檔案系統中打開 over-commit 功能會很有效果：
<example>
# echo 1 &gt; /proc/sys/vm/overcommit_memory
</example> 
</sect1>

</sect>

<sect id="udev">核心 2.6 和 udev
<p>
udev 是取代 <file>/dev/</file> 的動態配置的檔案系統。裝置名稱可以取較短的名稱。而 2.4 核心中的 devfs 已經淘汰了。
<p>
安裝 Debian 新版的 <package>kernel-image-2.6.<var>NN</var></package> 和 <package>udev</package> 就能啟動該功能了。
</sect>

</chapt>
