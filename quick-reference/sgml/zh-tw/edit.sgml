<!-- CVS revision of this document "# Revision is not used here.#"  -->
<!-- CVS revision of original english document "1.29" -->

<chapt id="edit">編輯器

<sect id="pop-editor">流行的編輯器
<p>
Linux 下有許多在控制台 (console) 環境下執行的文字編輯器任你選用，包括：
<list compact>
<item><prgn>vim</prgn>:    強大而輕便的 BSD 傳統編輯器。VI iMproved。
<item><prgn>emacs</prgn>:  重量級的 GNU 傳統編輯器。RMS (Richard M. Stallman) 原創。
<item><prgn>xemacs</prgn>: Emacs 的下一代，由 Lucid 原創。
<item><prgn>mcedit</prgn>: 初學者的 GNU 編輯器。也就是 <prgn>mc</prgn> 內建編輯器。參閱 <ref id="mcedit">。
<item><prgn>ae</prgn>:     預設的小型編輯器 (Potato)。通常不用它。 
<item><prgn>nano</prgn>:   預設的小型 GNU 編輯器 (Woody)。模彷 <prgn>pico</prgn>。
<item><prgn>joe</prgn>:    給舊式的 WordStar 或 TurboPascal 。
<item><prgn>jed</prgn>:    快速、多功能、選單式的編輯器，相容於 Emacs 的鍵盤操作方式。
<item><prgn>jove</prgn>:   微型編輯器，相容於 Emacs 的鍵盤操作方式。
<item><prgn>nvi</prgn>:    新版 vi。連 Bug 都相容於原本的 vi 。
</list>
<p>
使用 <tt>update-alternatives --config editor</tt> 命令可改變預設的編輯器。許多程式也使用環境變數 <tt>EDITOR</tt> 或 <tt>VISUAL</tt> 來決定編輯器。參閱 <ref id="mcedit"> 。
<p>
還有一些於 X 環境下執行的編輯器也值得一提：
<list compact>
<item><prgn>gvim</prgn>: Vim with GUI (<package>vim</package> 和 <package>vim-gtk</package> 套件)
<item><prgn>emacs</prgn>:  唯一的 Emacs (自動偵測 X) 。 
<item><prgn>xemacs</prgn>: 次世代 Emacs (自動偵測 X) 。
</list>
這些 xclient 的命令列使用標準選項，如 <tt>-fn <var>a24</var></tt>，這對像我這樣的老傢伙來說就再好不過了 :) 參閱 <ref id="xclnt"> 。
</sect>

<sect id="bin-editor">應急的編輯器
<p>
有少數幾個編輯器安裝在 <file>/bin</file> 下。至少應該安裝一個這類的編輯器，以免 <file>/usr/</file> 不能存取時，就無法編輯文件了。
<p>
<list compact>
<item><package>elvis-tiny</package>: 最小的 vi 編輯器 (用 <prgn>vi</prgn> 命令啟動)
<item><package>nano</package>:  最小的非 vi 編輯器 (用 <prgn>nano-tiny</prgn> 命令啟動)
<item><package>ed</package>:         最小的編輯器 (總是存在但使用起來不方便)
</list>
<p>

<sect>Emacs 和 Vim

<sect1>Vim 指示
<p>
程式執行時可按下 &lt;F1&gt; 閱讀 "VIM - main help file" 文件。

<example>
&lt;F1&gt;           說明
&lt;esc&gt;          返回正常模式
V              Visual 模式
i              Insert 模式
:              命令列指令
:set tw=72     設定文字行寬為 72
&lt;F11&gt;          插入 (貼上) 模式
:r! date -R    插入 RFC-822 日期
q<var>a</var>             將鍵盤操作記錄到暫存器 <var>a</var>
q              停止鍵盤操作記錄
@<var>a</var>             執行暫存器 <var>a</var> 的鍵盤操作
:edit <var>foo.txt</var>  載入並編輯檔案 <var>foo.txt</var>
:wnext         寫入目前的檔案並編輯下一個檔案
</example>
<tt>q</tt> 和 <tt>@</tt> 可用來記錄簡單的鍵盤巨集然後執行它們。例如，想建立一個巨集為將游標所在處的單詞加上 HTML 斜體字標籤，可以輸入 <tt>qii&lt;i&gt;^[ea&lt;/i&gt;^[q</tt> (此處 <tt>^[</tt> 表示按 ESC 鍵) 。然後，在單詞前輸入 <tt>@i</tt> ，編輯器就會自動為它加上 &lt;i&gt; 和 &lt;/i&gt; 。
<p>
也請參閱 <ref id="vimgpg"> 。
</sect1>

<sect1>Emacs 提示
<p>
<example>
&lt;F1&gt;                說明
&lt;F10&gt;               選單
C-u M-! date -R     插入 RFC-822 日期
</example>
</sect1>

<sect1>啟動編輯器
<p>
<example>
啟動編輯器：                   emacs filename  vim filename
以與 vi 相容方式啟動：                          vim -C
以與 vi 不相容方式啟動：                        vim -N
以編譯預設值啟動：              emacs -q        vim -N -u NONE
</example>
</sect1>

<sect1 id="editkey">Editor 指令摘要 (Emacs ， Vim)
<p>
<example>
exit:                           C-x C-c         :qa /:wq /:xa /:q!
Get back/command mode:          C-g             &lt;esc&gt;
Backward(left):                 C-b             h
Forward(right):                 C-f             l
Next(down):                     C-n             j
Previous(up):                   C-p             k
stArt of line(^):               C-a             0
End of line($):                 C-e             $
mUltiple commands:              C-u nnn cmd     nnn cmd
Multiple commands:              M-digitkey cmd
save File:                      C-x C-s         :w file
beginning of buffer:            M-&lt;             1G
end of buffer:                  M-&gt;             G
scroll forward 1 screen:        C-v             ^F
scroll forward 1/2 screen:                      ^D
scroll forward 1 line:                          ^E
scroll backward 1 screen:       M-v             ^B
scroll backward 1/2 screen:                     ^U
scroll backward 1 line:                         ^Y
scroll the other window:        M-C-v
delete under cursor:            C-d             x
delete from cursor to eol:      C-k             D
iSearch forward:                C-s
isearch Reverse:                C-r
Search forward:                 C-s enter       /
search Reverse:                 C-r enter       ?
isearch regexp:                 M-C-s
isearch backward regexp:        M-C-r
search regexp:                  M-C-s enter     /
search backward regexp:         M-C-r enter     ?
Help:                           C-h C-h         :help
Help Apropos:                   C-h a
Help key Bindings:              C-h b           :help [key]
Help Info:                      C-h i
Help Major mode:                C-h m
Help tutorial:                  C-h t           :help howto
Undo:                           C-_             u
Redo:                           C-f             ^R
Mark cursor position:           C-@             m{a-zA-Z}
eXchange Mark and position:     C-x C-x
goto mark in current file:                      '{a-z}
goto mark in any file:                          '{A-Z}
copy region:                    M-w             {visual}y
kill region:                    C-w             {visual}d
Yank and keep buffer:           C-y             <![%FIXME;[p y ? XXX FIXME XXX]]>
Yank from kill buffer:          M-y             p
convert region to Upper:        C-x C-u         {visual}U
convert region to Lower:        C-x C-l         {visual}u
Insert special char:            C-q octalnum/keystroke  
                                                ^V decimal/keystroke
replace:                        M-x replace-string      :&percnt;s/aaa/bbb/g
replace regexp:                 M-x replace-regexp      :&percnt;s/aaa/bbb/g
query replace:                  M-&percnt;                     :&percnt;s/aaa/bbb/gc
query replace:                  M-x query-replace
query replace regexp:           M-x query-replace-regexp
Open file:                      C-x C-f         :r file
Save file:                      C-x C-s         :w
Save all buffers:               C-x s           :wa
Save as:                        C-x C-w file    :w file
Prompt for buffer:              C-x b
List buffers:                   C-x C-b         :buffers
Toggle read-only:               C-x C-q         :set ro
Prompt and kill buffer:         C-x k
Split vertical:                 C-x 2           :split
Split horizontal:               C-x 3           :vsplit (ver. 6)
Move to other window:           C-x o           ^Wp
Delete this window:             C-x 0           :q
Delete other window(s):         C-x 1           ^Wo
run shell in bg:                M-x compile
kill shell run in bg:           M-x kill-compilation
run make:                                       :make Makefile
check error message:            C-x`            :echo errmsg
run shell and record:           M-x shell       :!script -a tmp
...clean BS, ...                                :!col -b &lt;tmp &gt;record
...save/recall shell record:    C-x C-w record  :r record
run shell:                      M-! sh          :sh
run command:                    M-! cmd         :!cmd
run command and insert:         C-u M-! cmd     :r!cmd
run filter:                     M-| file        {visual}:w file
run filter and insert:          C-u M-| filter  {visual}:!filter
show option                                     :se[t] {option}?
reset option to default                         :se[t] {option}&
reset boolean option                            :se[t] no{option}
toggle boolean option                           :se[t] inv{option}
wrap text at column 72                          :se tw=72
do not wrap                                     :se tw=0
autoindent                                      :se ai
expand tab                                      :se et
specify comment (mail)                          :se comments=n:&gt;,n:\|

run GDB                         M-x gdb                        
describe GDB mode               C-h m                          
step one line                   M-s
next line                       M-n
step one instruction (stepi)    M-i                            
finish current stack frame      C-c C-f                        
continue                        M-c                            
up arg frames                   M-u                            
down arg frames                 M-d                            
copy number from point, insert at the end 
                                C-x &                          
set break point                 C-x SPC                        
</example>
</sect1>

<sect1>Vim 設定
<p>
要使用 Vim 所有的功能和高亮度關鍵字，請在 <file>~/.vimrc</file> 或 <file>/etc/vimrc</file> 加入下列內容：
<example>
set nocompatible
set nopaste
set pastetoggle=&lt;f11&gt;
syn on
</example>
Paste 模式能避免自動縮進功能影響在控制台終端下的剪下－貼上操作，比只用 ":set noai" 更好。
<p>
有關 GnuPG 整合的資訊，請參閱 <ref id="vimgpg"> 。
</sect1>

<sect1>Ctags
<p>
執行 <tt>apt-get install exuberant-ctags</tt>，接著就可以在源碼檔中使用 ctags 了。在 Vim 中輸入 <tt>:tag <var>function_name</var></tt> 可直接跳到 <var>function_name</var> 的開始行。它適用於 C 、 C++ 、 Java 、 Python 和許多其它的語言。
<p>
Emacs 也有相同的 ctags 功能。
</sect1>

<sect1>將高亮度顯示的螢幕內容轉為 HTML 文件
<p>
在 Vim 命令模式下輸入 <tt>so \$VIMRUNTIME/syntax/2html.vim</tt> ，可將螢幕上高亮度顯示的文字轉化為 HTML 文字，然後用 <tt>:w file.html</tt> 存檔， <tt>:q</tt> 退出。對 C 等源碼特別適用。
</sect1>

<sect1>用 <prgn>vim</prgn> 分割螢幕
<p>
<prgn>vim</prgn> 可以在多重分割視窗 (multi-split-screen) 環境下編輯多個檔案。想了解有關詳情，可輸入 <tt>:help usr_08.txt</tt> 。
<p>
要分割螢幕顯示多個不同文件，請在 vi 命令提示後輸入：
<example>
:split <var>another-file</var>
:vsplit <var>another-file</var>
</example>
或在 shell 提示時：
<example>
$ vi -o file1.txt file2.txt   # 水平分割
$ vi -O file1.txt file2.txt   # 垂直分割
</example>
就可以使用多視窗 vi。
<example>
$ vimdiff file.txt~ file.txt         # 檢查 file.txt 的最近修改情況
$ vimdiff file.en.sgml file.fr.sgml  # 檢查翻譯的變化
$ gvimdiff file.txt~ file.txt        # 在 X 中
</example>
上述操作可以明確地顯示原始文件與備份文件的差別。對 SGML 文件，它進行標籤匹配檢查，所以用它來檢查翻譯結果十分有效。
<p>
用 CTRL-W 命令指定游標移動：
<example>
Ctrl-W +      增加視窗大小
Ctrl-W -      減小視窗大小
Ctrl-W h      移動至視窗左邊
Ctrl-W j      移動至視窗下方
Ctrl-W k      移動至視窗上方
Ctrl-W l      移動至視窗右邊
...
</example>
下列命令用於控制螢幕捲軸：
<example>
:set scrollbind
:set noscrollbind
</example>
</sect1>

</sect>

</chapt>
