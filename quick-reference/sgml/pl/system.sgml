<!-- CVS revision of this document "# Revision is not used here.#"  -->
<!-- CVS revision of original english document "1.54"  -->
<chapt id="system">Debian &ndash; Podstawy

<!-- 

Merged from 4 SGML files in FAQ February 2002
  ftparchives.sgml, 
  pkg_basics.sgml, 
  pkgtools.sgml, 
  uptodate.sgml

Then retitled under "Debian fundamentals" with 
 chapt moved to sect
 sect moved to sect1
 sect1 moved to sect2

Commented out reference to arches, should rewrite it to reference to 
release manual/install manual soon.
 
Pieces imported from other parts of FAQ.
 Small section from customizing.sgml regarding init/runlevel is added.
 Small section from customizing.sgml regarding diverse is added.
 Small section from software.sgml regarding non-English is added.

Merged from other SGML files in FAQ February 2002
  kernel.sgml

Then retitled under "Debian fundamentals" with 
 chapt moved to sect
 sect moved to sect1

Titles of sect/sect1 are changed to suit "Debian reference"

All minor edits I did left tracing information as comments.

Several sections were actually deleted since two consecutive -'s
made it impossible to comment out.

Also rewrote section to suit better for Potato and Woody.
Unless slink is used, how many people about dpkg-ftp :)

-->

<p>
Ten rozdział dostarcza podstawowych informacji o systemie Debian dla osób
nie będących deweloperami. Sprawdzone i oficjalne wiadomości należy 
czerpać z:
<p>
<list compact>
<item>Debian Policy Manual
<item>Debian Developer's Reference
<item>Debian New Maintainers' Guide
<p>
</list>
wymienionych w <ref id="references">.

<p>
Jeżeli szukasz mniej szczegółowych „jak-to-zrobić” („how-to”), przejdź 
bezpośrednio do <ref id="package"> lub innych zasobów.
<p>
Niniejszy rozdział zawiera dokumenty wzięte z „Debian FAQ”, 
poddane gruntownej reorganizacji dla ułatwienia startu początkującemu 
administratorowi systemu Debian.

<!-- 
"FTP archives" is now changed to simple "archives" since it can be reached 
through HTTP and other methods
-->

<sect id="ftparchives">Archiwa Debiana 

<sect1 id="dirtree">Struktura katalogów

<p>Pakiety z oprogramowaniem systemu &debian; dostępne są poprzez FTP lub
HTTP z katalogów znajdujących się na 
<url id="&mirror-site;" name="serwerze lustrzanym Debiana">.

<p>Na każdym z takich serwerów w katalogu <tt>debian</tt> 
można znaleźć następujące podkatalogi:
<taglist>
  <tag><file>dists/</file>:
    <item>Ten katalog zawiera „dystrybucje”, a niegdyś był to
    kanoniczny sposób uzyskiwania dostępu do aktualnych 
    pakietów w stabilnych i niestabilnych wydaniach Debiana. Wciąż można  
    tam znaleźć trochę starych pakietów,
    pliki <tt>Contents-*.gz</tt>,
    i pliki <tt>Packages.gz</tt>.
  <tag><file>pool/</file>:
    <item>Nowe miejsce umieszczenia pakietów należących do wszystkich
    końcowych i testowych wydań Debiana. 
  <tag><file>tools/</file>:
    <item>DOSowe programy użytkowe, umożliwiające tworzenie dyskietek 
    startowych, partycjonowanie dysków, kompresję i dekompresję plików
    oraz uruchomienie Linuksa.
  <tag><file>doc/</file>:
    <item>Podstawowa dokumentacja Debiana, np. FAQ, instrukcje dotyczące
    zgłaszania błędów, itp.
  <tag><file>indices/</file>:
    <item>Pliki Maintainers i override.
  <tag><file>project/</file>:
    <item>przeważnie materiały dla deweloperów takie, jak:
    <taglist>
      <tag><file>project/experimental/</file>:
        <item>Pakiety i narzędzia, które jeszcze nie
     zostały ukończone i znajdują się w fazie alfa. Nie należy ich używać
     ponieważ mogą się okazać niebezpieczne i szkodliwe
     nawet dla najbardziej doświadczonych.
      <tag><file>project/orphaned/</file>:
        <item>Pakiety osierocone przez dotychczasowych opiekunów i wykreślone
     z dystrybucji.
    </taglist>
</taglist>

<sect1 id="dists">Dystrybucje Debiana 

<p>W katalogu <file>dists</file> normalnie znajdują się informacje o trzech 
dystrybucjach Debiana. 
Katalogi z nimi (i same dystrybucje) noszą nazwy <tt>stable</tt> (dystrybucja 
stabilna), <tt>testing</tt> (dystrybucja testowa) i <tt>unstable</tt> (dystrybucja 
niestabilna). Czasami też występuje tam dystrybucja <tt>frozen</tt> 
(„zamrożona”). Katalog każdej dystrybucji stanowi symboliczne dowiązanie do 
rzeczywistego katalogu o odpowiednim kryptonimie 
w katalogu <file>dists</file>.

<sect1 id="stable">Dystrybucja <tt>stabilna</tt>

<p>Dane pakietów należących do dystrybucji <tt>stabilnej</tt>, &stabledebian;, 
są zapisywane do katalogu <file>stable</file> (dowiązanie symboliczne 
do <file>&stablecodename;/</file>):
<list>
  <item><file>stable/main/</file>:
  Ten katalog zawiera pakiety oficjalnie uznawane za najbardziej aktualne
  wydanie systemu &debian;. 

  <p>Wszystkie z tych pakietów są zgodne z <url name="Wytycznymi Debiana dotyczącymi Wolnego Oprogramowania" id="&social-contract;#guidelines"> 
  (dokument dostępny 
  również jako <file>&f-social-contract;</file> po zainstalowaniu pakietu 
  <package>&p-social-contract;</package>)
  i można ich swobodnie używać, a także rozpowszechniać.

  <item><file>stable/non-free/</file>:
  Ten katalog zawiera informacje o pakietach, których rozpowszechnianie zostało
  ograniczone przez wymagania stawiane dystrybutorowi, które mówią o zwróceniu
  szczególnej uwagi, na kwestie praw autorskich danego programu.

  <p>Na przykład, licencje niektórych pakietów zabraniają komercyjnego
  rozpowszechniania. Inne znowuż mogą być redystrybuowane, ale stanowią
  shareware, a nie wolne oprogramowanie. Zanim włączy się którykolwiek
  z tych pakietów do jakiejś redystrybucji (np. na CD-ROMie), należy 
  przestudiować jego licencję i prawdopodobnie przeprowadzić odpowiednie
  negocjacje.

  <item><file>stable/contrib/</file>:
  Ten katalog zawiera informacje o pakietach wolnych w rozumieniu DFSG 
  (Debian Free Software Guidelines) i podlegających 
  <strong>swobodnemu rozpowszechnianiu</strong>, ale w jakiś 
  sposób zależnych od pakietu, który swobodnemu rozpowszechnianiu 
  <strong>nie podlega</strong> i z tej przyczyny jest dostępny w sekcji 
  non-free.
</list>
Wyżej wymienione katalogi zawierają informacje o pakietach. Same pakiety zaś
mieszczą się w katalogu <file>pool</file> (<ref id="pools">).  

<p>Aktualny stan błędów w dystrybucji <tt>stabilnej</tt> podaje strona WWW 
<url id="&stable-problems;" name="Problemy ze stabilną dystrybucją"> (po
angielsku) . 

<sect1 id="testing">Dystrybucja <tt>testowa</tt>

<p>Informacja o pakietach zawartych w dystrybucji <tt>testowej</tt>, 
czyli &testingdebian;, jest zapisywana w katalogu <file>testing</file> 
(dowiązanie symboliczne do <file>&testingcodename;/</file>) po tym, jak
przejdą testowanie wstępne w dystrybucji <tt>niestabilnej</tt>.
Pakiety, których dotyczą informacje zapisane w katalogu <tt>testing</tt>,
są umieszczane w katalogu <file>pool</file> (<ref id="pools">).  
Oczywiście, w katalogu <file>testing</file> istnieją również podkatalogi 
<file>main</file>, <file>contrib</file> oraz <file>non-free</file>, 
pełniące takie same funkcje, jak ich odpowiedniki w <file>stable</file>. 

<p>Pakiety w dystrybucji <tt>testowej</tt> muszą działać na wszystkich architekturach,
na których zostaną zbudowane i nie mogą posiadać zależności uniemożliwiających
instalację; muszą mieć również mniej błędów o priorytecie release-critical 
(o znaczeniu krytycznym dla wydania), niż wersje znajdujące się 
w <tt>unstable</tt>. W ten sposób można mieć nadzieję, że dystrybucja <tt>testowa</tt> 
zawsze jest dystrybucją bliską wydania. Więcej informacji o mechanizmach 
testowania znajduje się na <url id="&testing-notes;"> (po angielsku).

<p>Najświeższe informacje o stanie dystrybucji <tt>testowej</tt> zawierają
następujące strony WWW:
<list compact>
<item><url id="&update-excuses;" 
         name="update excuses (wymówki aktualizacyjne)">
<item><url id="&testing-problems;" 
         name="testing problems (problemy w dystrybucji testowej)">
<item><url id="&release-critical;" 
         name="release-critical bugs (błędy o znaczeniu krytycznym dla wydania)">
<item><url id="&qa-base-bugs;" 
         name="base system bugs (błędy w systemie podstawowym)">
<item><url id="&qa-standard-bugs;" 
         name="bugs in standard and task packages (błędy w pakietach kategorii standard i task)">
<item><url id="&qa-bugs;" 
         name="other bugs and bug-squashing party notes (inne błędy i uwagi z sesji tępienia pluskiew)">
</list>



<sect1 id="unstable">Dystrybucja <tt>niestabilna</tt>

<p>Informacje o pakietach wchodzących w skład dystrybucji <tt>niestabilnej</tt>, 
zawsze nazywanej „Sid”, są zapisywane do katalogu <file>unstable</file> 
(dowiązanie symboliczne do <file>sid/</file>) po umieszczeniu tych pakietów 
w archiwum Debiana i pozostają tu, aż zostaną przeniesione do
<file>testing/</file>. 
Odpowiadające wpisom pakiety umieszcza się w katalogu <file>pool</file> 
(<ref id="pools">). Również istnieją tu podkatalogi <file>main</file>, 
<file>contrib</file> i <file>non-free</file>, spełniające te same zadania, co 
w katalogu <file>stable/</file>. 

<p>Dystrybucja <tt>niestabilna</tt> jest obrazem systemu w najnowszym stadium jego 
rozwoju. Nic nie stoi na przeszkodzie w używaniu i testowaniu tych pakietów, 
trzeba jednak uważać, bo mogą być jeszcze nie w pełni dopracowane. 
Zaletą korzystania z dystrybucji <tt>niestabilnej</tt> jest to, że jest się zawsze 
„na czasie” ze wszystkimi nowinkami w projekcie &debian;, 
ale jeżeli coś nawali, to licz na siebie, a nie na pomoc.  

<p>Na stronie WWW <url id="&unstable-problems;" name="Problemy 
z dystrybucją niestabilną"> (po angielsku) 
można się zapoznać z aktualnym stanem błędów w dystrybucji <tt>niestabilnej</tt>. 

<!-- Above was enough
<sect1 id="sid">The "Sid" distribution
<p>Sid or <tt>unstable</tt> is the place where most of the packages
are initially uploaded. It will never be released directly, because
packages which are to be released will first have to be included in
<tt>testing</tt>, in order to be released in <tt>stable</tt> later on. Sid
contains packages for both released and unreleased architectures.

<p>The name "Sid" also comes from the "Toy Story" animated motion picture:
Sid was the boy next door who destroyed toys :-)
-->

<sect1 id="frozen">Dystrybucja <tt>frozen</tt> (<tt>zamrożona</tt>)

<p>Gdy dystrybucja <tt>testowa</tt> osiągnie wystarczającą dojrzałość, 
zostaje zamrożona, co oznacza, że nie przyjmuje się do niej już żadnego nowego 
oprogramowania z wyjątkiem koniecznych poprawek (bugfixes). 
W katalogu <file>dists/</file> tworzy się nowy podkatalog dla dystrybucji testing, 
dowiązany do nowego kryptonimu.  
Dystrybucja zamrożona przechodzi przez kilkumiesięczny okres próbny 
składający się na przemian z aktualizacji i z okresów głębokiego zamrożenia 
nazywanych „cyklami testowymi”.  

<p>Utrzymujemy rejestr błędów w dystrybucji zamrożonej, które mogą 
opóźnić wydanie pakietu lub doprowadzić do wstrzymania wydania całej 
dystrybucji. Gdy liczba błędów spadnie do maksymalnie akceptowalnej 
wartości, dystrybucja zamrożona staje się dystrybucją stabilną (stable), 
zostaje wydana, a dotychczasowe wydanie stabilne staje się przestarzałe 
(obsolete) i zostaje przeniesione do archiwum. 
<!--
(Od tłum.: 
a Potato przyjął nazwę "old-stable" i nie powędrował do archiwum 
tak od razu!).

posłałem o tym info do angielskiej wersji -->

<sect1 id="codenames">Kryptonimy dystrybucji Debiana 

<p>Nazwy rzeczywistych podkatalogów w katalogu <file>dists</file>, na przykład 
<file>&stablecodename;</file> i <file>&testingcodename;</file>, są tylko 
„kryptonimami”.  
Kiedy dystrybucja systemu &debian; znajduje się jeszcze w etapie rozwojowym, 
nie posiada numeru wersji, a zamiast niego kryptonim. 
Kryptonimy zastosowano w celu ułatwienia tworzenia archiwów lustrzanych
(mirroring) dystrybucji systemu &debian; 
(gdyby rzeczywisty katalog taki, jak <file>unstable</file> nagle zmienił swoją 
nazwę na <file>stable/</file>, niejeden musiałby niepotrzebnie pobierać 
ponownie masę oprogramowania). 

<p>Aktualnie, <file>stable/</file> jest dowiązaniem symbolicznym do
<file>&stablecodename;/</file>, 
a <file>testing/</file> dowiązaniem do <file>&testingcodename;/</file>. 
Oznacza to, że <tt>&stablecodename;</tt> jest aktualną dystrybucją stabilną, 
a <tt>&testingcodename;</tt> testową. 

<p><file>unstable/</file> jest już na zawsze dowiązaniem 
symbolicznym do <file>sid/</file>, ponieważ Sid jest zawsze dystrybucją 
niestabilną. <!-- (zobacz <ref id="sid">).-->

<sect1 id="oldcodenames">Kryptonimy używane w przeszłości  

<p>Inne kryptonimy, których już wcześniej używano, to: 
„Buzz” dla wydania 1.1, 
„Rex” dla wydania 1.2, 
„Bo” dla wydania 1.3.x, 
„Hamm” dla wydania 2.0, 
„Slink” dla wydania 2.1,
„Potato” dla wydania 2.2, 
„Woody” dla wydania 3.0 
oraz 
„Sarge” dla wydania 3.1. 

<sect1 id="sourceforcodenames">Źródło kryptonimów 

<p>Jak dotychczas wybierano postaci z filmu <em>Toy Story</em> produkcji Pixar.
<list compact>
  <item><strong>Buzz</strong> (Buzz Lightyear) był kosmonautą,
  <item><strong>Rex</strong> był tyranozaurem, 
  <item><strong>Bo</strong> (Bo Peep) była dziewczynką, która opiekowała się owieczką, 
  <item><strong>Hamm</strong> była świnką-skarbonką, 
  <item><strong>Slink</strong> (Slinky Dog) był psem-zabawką, 
  <item><strong>Potato</strong> był oczywiście Panem Ziemniakiem, 
  <item><strong>Woody</strong> był kowbojem,
  <item><strong>Sarge</strong> był żołnierzem z zielonego plastiku, 
  <item><strong>Etch</strong> (Etch-a-Sketch) był tablicą,
  <item><strong>Sid</strong> był chłopcem psującym zabawki. 
</list>
<!--
  more info in http://www.pixar.com/featurefilms/ts/index.html
  or better yet http://us.imdb.com/M/title-exact?Toy&percnt;20Story&percnt;20(1995)
  or actually:
    http://us.imdb.com/Title?0114709 for TS1
    http://us.imdb.com/Title?0120363 for TS2
  we shouldn't put the links in, Pixar needs no additional propaganda
-->
<!--
  characters not used from Toy Story (yet):
    - Andy (the kid)
    - Snake
    - Robot
    - Scud (Sid's dog)
  and additional characters from Toy Story 2, also not yet used:
    - Jessie (the Yodelling Cowgirl)
    - Zurg (the Emperor)
    - Wheezy (the penguin)
    - Hannah (owner of Jessie)
    - Stinky Pete the Prospector (the old fat guy)
    - Mrs. Davis (Andy's Mom)
    - Barbie
-->

<sect1 id="pools">Katalog <file>pool</file>

<p>Dawniej pakiety przechowywano w podkatalogu katalogu <file>dists</file>,
którego nazwa odpowiadała dystrybucji, w skład której wchodziły.
Okazało się jednak, że wywoływało to różne problemy, jak np. duże obciążenie 
serwerów lustrzanych, gdy dokonywano większych zmian.

<p>Obecnie pakiety znajdują się w dużej „puli” („pool”), 
której struktura jest utworzona na podstawie nazw pakietów źródłowych. 
Dla ułatwienia zarządzania czymś takim, pula - pool jest podzielona 
według sekcji (<tt>main</tt>, <tt>contrib</tt> i <tt>non-free</tt>) i według 
pierwszej litery nazwy pakietu źródłowego. 
Katalogi te zawierają pewną liczbę plików: pakiety binarne dla każdej 
architektury (platformy sprzętowej) oraz pakiety źródłowe, z których 
te pierwsze zostały wygenerowane.

<p>Miejsce, gdzie znajduje się jakiś pakiet, można określić wykonując 
polecenie 
<tt>apt-cache showsrc <var>nazwa_pakietu</var></tt> i znajdując w jego wyjściu
wiersz zaczynający się od „Directory:”. Na przykład
pakiety serwera http <package>apache</package> znajdują się 
w <file>pool/main/a/apache/</file>. Pakietów <tt>lib*</tt> jest bardzo dużo, 
więc są traktowane szczególnie: na przykład pakiety 
<package>libpaper</package> są przechowywane w katalogu 
<file>pool/main/libp/libpaper/</file>. 

<p>Podkatalogi katalogu <file>dists</file> są w dalszym ciągu używane do 
przechowywania plików indeksowych używanych przez programy 
w rodzaju <prgn>apt</prgn>. Również, w czasie pisania niniejszego dokumentu 
starsze dystrybucje nie były przestawione na używanie katalogu pool, 
więc można zobaczyć takie nazwy dystrybucji, jak <tt>potato</tt> 
czy <tt>woody</tt> w wierszach zaczynających się od „Directory:” (przytoczone 
powyżej polecenie apt-cache). 

<p>Nie jest to powód do zmartwień, ponieważ nowy <prgn>apt</prgn> i prawdopodobnie 
również starszy <prgn>dpkg-ftp</prgn> (zobacz <ref id="howtocurrent">) radzą sobie 
z taką strukturą bez problemów. Więcej informacji można znaleźć 
w <url id="&pool-faq;" name="RFC: implementation of package pools"> (po angielsku).

<!-- bumped up from sect2 to sect1 -->
<sect1 id="sid-history">Nota historyczna o dystrybucji Sid

<p>Kiedy dzisiejszy Sid jeszcze nie istniał, <!--FTP removed --> 
organizacja sieciowych archiwów Debiana miała jedną dużą wadę: 
kiedy dokładano nową architekturę do bieżącej dystrybucji
<file>unstable</file>, pakiety zrobione dla niej mogły być wydane dopiero 
wtedy, gdy ta dystrybucja stawała się nową dystrybucją <tt>stable</tt>. 
Dla wielu architektur nie dochodziło do tego i trzeba było przenosić 
odpowiadające im katalogi, gdy dochodziło do wydania dystrybucji. Było to 
niepraktyczne, ponieważ przenoszenie katalogów silnie obciążało łącza.

<p>Administratorzy archiwów sieciowych przez kilka lat obchodzili ten problem, 
umieszczając binaria dla architektur jeszcze nie wydanych w specjalnym 
katalogu o nazwie <file>sid</file>. 
Dla architektur jeszcze nie wydanych, tworzono w chwili wydania dowiązanie 
z aktualnego katalogu <file>stable</file> do <file>sid</file> i od tej 
pory tworzono je w drzewie <file>unstable</file>, jak zwykle. 
Takie rozwiązanie było trochę mylące dla użytkowników.

<p>Z nadejściem katalogu „pool” (zobacz <ref id="pools">) w trakcie 
powstawania dystrybucji Woody, 
zaczęto zapisywać pakiety binarne w lokalizacji kanonicznej w tymże katalogu, 
niezależnie od dystrybucji, więc wydanie dystrybucji przestało być związane 
z poddawaniem serwerów lustrzanych dużym obciążeniom (natomiast mamy do 
czynienia z dość sporymi, rozłożonymi w czasie obciążeniami w trakcie całego 
procesu rozwijania dystrybucji). 

<sect1 id="incoming">Pakiety umieszczone w <file>incoming/</file>

<p>
Pakiety umieszczane w archiwum trafiają najpierw do <url id="&incoming;">, 
po sprawdzeniu autentyczności pochodzenia od jednego z deweloperów (w wypadku tzw.
Non-Maintainer Upload -- NMU -- pakiety trafiają do podkatalogu 
<file>DELAYED</file>).
Raz dziennie pakiety przenosi się z <file>incoming/</file> do
<file>unstable/</file>. 
<p>
W nagłych wypadkach można instalować pakiety z <file>incoming/</file>, zanim 
jeszcze trafią do <file>unstable</file>. 
</sect1>

<sect1 id="snapshot">Odzyskiwanie starszego pakietu 
<p>
Podczas gdy najnowsze dystrybucje Debiana trzyma się w podkatalogach katalogu 
<file>debian</file>, na każdym z serwerów wymienionych na 
<url id="&mirror-site;" name="Stronie serwerów lustrzanych Debiana">, 
archiwa starszych dystrybucji (np. Slink) znajdują się na 
<url id="&archivehome;"> lub w podkatalogach katalogu
<file>debian-archive</file> 
na każdym serwerze lustrzanym Debiana. 
<p>
Starsze pakiety z <tt>testing</tt> i <tt>unstable</tt> można znaleźć na 
<url id="&snapshothome;">.

</sect1>

<sect1 id="archsections">Podział na architektury 
<!--
What are all those directories inside <tt>dists/stable/main</tt>?
Simplified this !!!
-->

<p>W obrębie każdego z głównych drzew katalogów (<file>dists/stable/main</file>,
<file>dists/stable/contrib</file>, <file>dists/stable/non-free</file>, 
<file>dists/unstable/main/</file>, itd.), informacja o pakietach binarnych 
znajduje się w podkatalogach o nazwach wskazujących na platformę sprzętową 
(architekturę), dla jakiej zostały skompilowane.

<list>
  <item><file>binary-all/</file>, dla pakietów niezależnych od architektury 
  (dotyczy to np. skryptów Perla lub czystej dokumentacji). 
  <item><file>binary-<var>platform</var>/</file>, dla pakietów przeznaczonych dla 
  konkretnej architektury. 
  <!-- Yes I simplified this -->
</list>

<p>Warto zauważyć, że pakiety binarne dla dystrybucji <tt>testing</tt> 
i <tt>unstable</tt> nie są już przechowywane w tych katalogach, ale w katalogu 
<file>pool</file>. Pliki indeksowe (<file>Packages</file> 
i <file>Packages.gz</file>) jednak, dla zachowania kompatybilności
z wcześniejszymi rozwiązaniami, w dalszym ciągu przebywają tam, gdzie były.

<p>Aby poznać faktyczny zestaw wspieranych platform sprzętowych, należy zapoznać 
się z Informacjami Wydawniczymi dla danej dystrybucji. 
Można je odnaleźć na stronach zajmujących się Uwagami Wydawniczymi 
dla <url id="&stable-release;" name="stable"> 
i <url id="&testing-release;" name="testing">.

<!-- Removed, above release note shall be enough.
<p>See <ref id="arches"> for more information.
-->

<sect1 id="source">Kod źródłowy

<p>Debian posiada również kod źródłowy każdego ze swoich składników. 
Co więcej, warunki licencji większości programów w systemie zawierają 
<strong>wymóg</strong> dystrybucji kodu źródłowego wraz z programem, lub 
przynajmniej zadeklarowania gotowości dostarczenia kodu źródłowego wraz 
z programem. 

<p>Normalnie kod źródłowy jest rozpowszechniany za pośrednictwem katalogów 
<file>source</file>, istniejących równolegle do wszystkich katalogów 
charakterystycznych dla poszczególnych architektur, a obecnie w katalogu 
<file>pool</file> directory (zobacz <ref id="pools">). Aby pobrać z archiwum kod 
źródłowy bez konieczności zaznajamiania się ze strukturą archiwum Debiana 
należy wykonać polecenie podobne do tego: 
<tt>apt-get source <var>mojanazwapakietu</var></tt>. 

<p>Niektóre pakiety, na przykład <package>pine</package>, są dostępne 
wyłącznie w postaci źródeł wskutek ograniczeń licencyjnych. (Niedawno 
pojawił się pakiet <package>pine-tracker</package> ułatwiający instalację 
Pine). Procedury opisane w <ref id="port"> i <ref id="packaging"> opisują 
sposoby tworzenia pakietów samemu. 

<p>Dla pakietów z katalogów <file>contrib</file> i <file>non-free</file>, 
które oficjalnie nie stanowią części systemu Debian, kod źródłowy może być 
niedostępny. 

<sect id="pkg-basics">System zarządzania pakietami w Debianie 

<sect1 id="package-basics">Przegląd pakietów Debiana 

<p>W ogólności pakiety zawierają wszystkie pliki niezbędne do 
zaimplementowania zestawu odpowiednich poleceń lub właściwości. 
Są dwa typy pakietów Debiana:
<list>
  <item><strong>Pakiety binarne</strong>, zawierające pliki wykonywalne, 
  pliki konfiguracyjne, strony podręcznika systemowego <tt>man</tt> lub 
  <tt>info</tt>, informacje o prawach autorskich i pozostałą dokumentację. 
  Są one rozpowszechniane w charakterystycznym dla Debiana formacie archiwum 
  (zobacz <ref id="deb-format">); zwykle można je odróżnić od innych plików 
  po tym, że ich nazwa kończy się na <tt>.deb</tt>. 
  <footnote>
  	 <!-- Below added by Osamu based on a message posted by Colin Watson -->
  	 <p>Projekt <prgn>debian-installer</prgn> wprowadza pakiety o nazwach
kończących się na <tt>.udeb</tt>.  W skrócie, jest to
format micro-<tt>.deb</tt>, który niekoniecznie zgadza się dokładnie z
polityką Debiana, nie posiada zawartości takiej jak dokumentacja i jest
wykorzystywany wyłącznie przez  <prgn>debian-installer</prgn>, nowe
instalator Debiana, tworzony dla wydania Sarge.  Format plików <tt>.deb</tt>
oraz <tt>.udeb</tt> jest identyczny. Program <prgn>udpkg</prgn> używany 
do obsługi pakietów <tt>.udeb</tt> posiada ograniczone możliwości w stosunku
do standardowego <prgn>dpkg</prgn> i obsługuje mniej zależności pomiędzy
pakietami. Różnica w nazwie wynika z tego, że osoby utrzymujące pakiety
Debiana w formacie <tt>.deb</tt> nie były by zadowolone z pojawienia się
pakietów nie spełniających założeń. Wybrano więc inną nazwę w celu
podkreślenia tych różnic oraz zabezpieczenia przed sytuacją, w której
użytkownicy mohą próbować instalować takie pakiety w działającym systemie.
Pakiety <tt>.udeb</tt> są używane na startowym dysku umieszczonym w pamięci
wyłącznie podczas podstawowej instalacji, w celu utworzenia bardzo okrojonego
systemu.</footnote>
  Pakiety binarne można rozpakowywać z pomocą programu <prgn>dpkg</prgn>; ze 
  szczegółami można się zapoznać czytając stronę podręcznika systemowego 
  poświęconą dpkg.
  
  <item><strong>Pakiety źródłowe</strong>, składające się z pliku <tt>.dsc</tt> 
  opisującego pakiet źródłowy (włącznie z nazwami plików składowych pakietu), 
  pliku <tt>.orig.tar.gz</tt> zawierającego oryginalny, niezmodyfikowany 
  kod źródłowy spakowany programem tar i skompresowany programem gzip oraz 
  zwykle pliku <tt>.diff.gz</tt> zawierającego charakterystyczne dla Debiana 
  zmiany w stosunku do oryginalnego źródła. Do pakowania i rozpakowywania 
  archiwów źródłowych Debiana używa się programu użytkowego 
  <prgn>dpkg-source</prgn>; szczegóły są dostępne po zapoznaniu się 
  z poświęconą mu stroną podręcznika systemowego <tt>man</tt>. 
</list>

<p>Instalacja oprogramowania przez system pakietów posługuje się pojęciem 
„zależności” („dependencies”), troskliwie określonych przez opiekunów 
poszczególnych pakietów. Te zależności są wyszczególnione w pliku 
<file>control</file> wchodzącym w skład każdego pakietu. 
Na przykład, pakiet zawierający kompilator GNU C (<package/gcc/) 
jest zależny od zawierającego konsolidator (linker) i asembler pakietu 
<package/binutils/. 
Jeżeli użytkownik usiłuje zainstalować <package/gcc/ nie zainstalowawszy 
uprzednio <package/binutils/, system zarządzania pakietami (dpkg) drukuje 
komunikat mówiący, że trzeba zainstalować <package/binutils/, a następnie 
zatrzymuje instalację <package/gcc/ (uparty użytkownik może jednak zmienić 
to zachowanie; zobacz <manref name="dpkg" section="8">). 
Z dodatkowymi szczegółami można zapoznać się w <ref id="depends">.
<p>Zawartych w Debianie narzędzi obsługujących pakiety można używać do:
<list>
  <item>manipulowania i zarządzania pakietami lub ich częściami składowymi,
  <item>ułatwienia użytkownikowi podziału na części pakietów, które 
  trzeba umieścić na nośnikach o ograniczonej wielkości (np. na dyskietkach),
  <item>pomocy deweloperom w konstruowaniu archiwów pakietów, oraz
  <item>pomocy użytkownikom w instalacji pakietów przechowywanych 
  na sieciowych serwerach z archiwami Debiana. 
</list>

<sect1 id="deb-format">Format pakietów Debiana 

<p>„Pakiet” Debiana (zwany też archiwum Debiana - nie mylić z umieszczoną 
na serwerze całą dystrybucją!) zawiera pliki wykonywalne, biblioteki oraz 
dokumentację związaną z konkretnym programem lub zestawem w jakiś sposób 
powiązanych ze sobą programów. Z reguły nazwa pakietu Debiana kończy się 
sufiksem <tt>.deb</tt>. 

<p>Budowę wewnętrzną pakietów binarnych w tym formacie opisuje 
podręcznik systemowy <manref name="deb" section="5">. 
Z uwagi na możliwość zachodzenia zmian w specyfikacji formatu (z jednego wydania 
systemu &debian; na kolejne jego wydanie), przy manipulacji plikami 
<tt>.deb</tt> należy zawsze korzystać z <manref name="dpkg-deb" section="1">. 

<!-- Below added by Osamu Not sure but should be right -->

<p>Wszystkie pakiety Debiana (Sarge i wcześniejsze dystrybucje), 
można obrabiać używając standardowych poleceń systemu Unix: <prgn>ar</prgn>,
i <prgn>tar</prgn>, nawet, gdy polecenia <prgn>dpkg</prgn> są 
niedostępne.

<sect1 id="pkgname">Zasady nadawania nazw pakietom Debiana 
<!--
Why are Debian package file names so long? 
Dlaczego nazwy pakietów w Debianie są takie długie?
-->

<p>Nazwy plików zawierających pakiety w Debianie przestrzegają następujących 
zasad:
<example>
<var>foo</var>_<var>NumerWersji</var>-<var>NumerRewizjiDebiana</var>.deb
</example>
gdzie <var>foo</var> stanowi nazwę pakietu. Dla sprawdzenia:
mając dany plik <tt>.deb</tt> można określić nazwę zawartego w nim pakietu 
w jeden z następujących sposobów: 
<list>
  <item>przejrzeć plik „Packages” w katalogu, w którym jest przechowywany
  na jednym z serwerów Debiana. Plik ten zawiera sekcje
  opisujące każdy pakiet. Pierwszy wiersz każdej sekcji zawiera oficjalną
  nazwę pakietu (po „Package: ”).
  
  <item>użyć polecenia <tt>dpkg --info <var>foo_VVV-RRR</var>.deb</tt> 
  (gdzie <var>VVV</var> i <var>RRR</var> są odpowiednio wersją i rewizją 
  pakietu <var>foo</var>). Polecenie wyświetla wśród innych rzeczy 
  nazwę pakietu zawartego w pliku poddanym sprawdzeniu.
</list>

<p>Składnik <var>VVV</var> jest numerem wersji, nadanym przez programistę 
zajmującego się danym programem/pakietem poza systemem Debian.  
Numery wersji nie są ustalane 
przez żadne normy, dlatego też mogą one mieć najrozmaitsze formaty, jak 
np. „19990513” czy „1.3.8pre1”. 

<p>Składnik <var>RRR</var> jest numerem rewizji w Debianie 
i jest nadawany przez opiekuna danego pakietu lub przez indywidualnego użytkownika, 
jeśli ten zechce zbudować pakiet samodzielnie. Numer ten odpowiada 
poziomowi rewizji  pakietu w systemie; z tego względu nowy poziom rewizji 
zwykle oznacza zmiany w plikach opisujących budowę i instalację pakietu: 
<file>debian/rules</file> (Debian makefile), <file>debian/control</file> 
(Debian control file), skrypcie instalacyjnym i deinstalacyjnym 
<file>debian/p*</file>, lub plikach konfiguracyjnych związanych z pakietem. 

<!-- This get too detailed
<sect1 id="controlfile">The Debian control file
-->

<sect1 id="conffile">Ochrona lokalnych plików konfiguracyjnych 
<!--
What is a Debian conffile
-->
<p>Mechanizm „conffiles” istniejący w Debianie pozwala na otoczenie ochroną
plików konfiguracyjnych w systemie. Pliki te, zazwyczaj umieszczone w katalogu
<file>/etc</file>, są wymienione w plikach o nazwach kończących się na 
<file>conffiles</file> wchodzących w skład systemu pakietów. Mechanizm ten 
gwarantuje, że systemowe pliki konfiguracyjne nie będą nadpisywane podczas 
instalacji nowej wersji pakietu.
<p>
Jeśli możliwa jest konfiguracja systemu bez dokonywania zmian w plikach 
należących do różnych pakietów, dobrym pomysłem jest powstrzymanie się
od ich modyfikacji nawet jeśli są to pliki „conffiles”. 
Ułatwi to i przyspieszy instalację nowych wersji pakietów.
<!--
<p>Conffiles is a list of configuration files (usually placed in <file>/etc</file>)
that the package management system will not overwrite when the package is
upgraded. This ensures that local values for the contents of these files
will be preserved, and is a critical feature enabling the in-place upgrade
of packages on a running system.
-->
<p>Aby dowiedzieć się, jakie dokładnie pliki zostaną zachowane 
podczas instalacji nowej wersji (upgrade'u) pakietu, należy uruchomić 
polecenie:
<example>
dpkg --status <var>pakiet</var>
</example>
i szukać „Conffiles:”.

<p>
Szczegółów na temat zawartości plików <file>conffiles</file> dostarcza dokument
Debian Policy Manual w rozdziale 11.7 (zobacz <ref id="references">).

<sect1 id="maintscripts">Skrypty instalacyjne i deinstalacyjne
<!--
What is a Debian preinst, postinst, prerm, and postrm
  script?
-->
<p><!--These files--> 
Są to skrypty automatycznie uruchamiane przed instalacją i po instalacji pakietu. 
Wraz z plikiem o nazwie <file>control</file> 
wchodzą w skład sekcji „control” każdego pakietu w Debianie. 

<p>Są to:
<taglist>
<tag/preinst/
  <item>Ten skrypt jest wykonywany zanim pakiet zostanie rozpakowany z pliku 
  <tt/.deb/. Wiele skryptów „preinst” zatrzymuje działanie usług świadczonych 
  przez pakiety, których nową wersję właśnie instalujemy, aż do czasu 
  zakończenia procesu instalacji lub aktualizacji (tzn. do chwili bezbłędnego 
  wykonania skryptu „postinst”). 

<tag/postinst/
  <item>Ten skrypt z zasady wykonuje wszelkie operacje konfiguracyjne wymagane 
  do prawidłowej pracy pakietu po jego rozpakowaniu z pliku <tt/.deb/. 
  Skrypty „postinst” często wymagają wprowadzenia pewnych informacji przez 
  użytkownika i/lub ostrzegają go, że w wypadku akceptacji wartości domyślnych 
  powinien pamiętać o późniejszej rekonfiguracji pakietu w miarę potrzeb. 
  Wiele ze skryptów „postinst” wykonuje następnie wszelkie polecenia 
  konieczne do uruchomienia lub ponownego uruchomienia danej usługi 
  po instalacji lub aktualizacji pakietu. 

<tag/prerm/
  <item>Z reguły, skrypt ten zatrzymuje wszystkie demony związane z pakietem, 
  a jest wykonywany przed usunięciem plików, które zawierał ten pakiet. 

<tag/postrm/
  <item>Ten skrypt z reguły modyfikuje dowiązania lub inne pliki 
  związane z pakietem i/lub usuwa pliki przezeń utworzone (zobacz również 
  <ref id="virtual">). 
</taglist>

<p>Aktualnie wszystkie pliki sterujące pakietu (te z sekcji „control”) 
można znaleźć w katalogu <file>/var/lib/dpkg/info</file>. 
Pliki związane z pakietem <tt>foo</tt> mają nazwy zaczynające się 
od „foo” i kończące na „preinst”, „postinst”, 
itd. Plik <file>foo.list</file> w tym katalogu wymienia wszystkie pliki 
zainstalowane podczas instalacji pakietu <tt>foo</tt>. 
(Położenie tych plików jest wewnętrzną sprawą programu <prgn>dpkg</prgn> 
i może być zmienione). 

<sect1 id="priority">Priorytety pakietów 
<!--
What is a Required/Important/Standard/Optional/Extra
package?
-->
<p>Każdemu pakietowi w Debianie opiekunowie dystrybucji przypisali pewien 
<strong>priorytet</strong>, mający spełniać pomocnicze funkcje względem systemu 
zarządzania pakietami. Istnieją następujące rodzaje priorytetów:

<list>
  <item>Pakiety <strong>Wymagane</strong> (<strong>Required</strong>), 
  są konieczne do właściwego działania systemu.
    <p>W ich skład wchodzą wszystkie narzędzia konieczne do naprawy uszkodzeń 
    systemu. Nie wolno ich usuwać, bo system może ulec totalnej zapaści, która 
    uniemożliwi nawet użycie <prgn>dpkg</prgn> do próby jego odtworzenia.
    Systemy zawierające wyłacznie pakiety o priorytecie Required 
    najprawdopodobniej nie nadają się do wielu rzeczy, ale posiadają 
    funkcjonalność wystarczającą do ich uruchomienia i instalacji 
    dodatkowego oprogramowania.
  <item>Pakiety <strong>Ważne</strong> (<strong>Important</strong>), 
  powinny być zainstalowane na każdym systemie uniksopodobnym.
    <p>Inne pakiety, bez których system nie będzie dobrze działał, lub 
    nie będzie użyteczny, będą posiadać również ten priorytet. <strong>Nie
    należą</strong> do nich Emacs, X11, TeX czy inne duże aplikacje. Pakiety 
    o priorytecie <strong>Important</strong> tworzą zaledwie gołą 
    infrastrukturę.
  <item>Pakiety <strong>Standardowe</strong> (<strong>Standard</strong>). 
  Stanowią standard na każdym systemie linuksowym, tworząc nieduży, ale 
  niezbyt ograniczony system pracujący w trybie tekstowym. 
    <p>Pakiety o tym priorytecie zainstalują się domyślnie, jeżeli użytkownik 
    nie wybierze nic ponadto. Grupa <strong>Standard</strong> zawiera niewiele 
    dużych aplikacji, ale zawiera Emacs (jest on bardziej elementem 
    infrastruktury, niż aplikacją) i rozsądny wybór z TeX-a i LaTeX-a (to, 
    czego można używać bez X). 
  <item>Pakiety <strong>Opcjonalne</strong> (<strong>Optional</strong>) 
  są pakietami, których instalacja może się okazać rozsądnym wyborem nawet 
  wtedy, gdy się nie zna ich na wskroś i kiedy nie ma się jakichś szczególnych 
  wymagań. 
    <p>W skład tej grupy wchodzą X11, pełna dystrybucja TeX-a i mnóstwo 
    aplikacji. 
  <item>Pakiety <strong>Ekstra</strong> (<strong>Extra</strong>) 
  są w konflikcie z innymi pakietami o wyższym priorytecie, mają małą
  użyteczność dla nieobeznanych z nimi, albo mają szczególne wymagania, 
  które nie pozwalają im wejść do grupy pakietów Opcjonalnych. 
</list>

<p>Zwróć uwagę na różnice pomiędzy "Priority: required", 
"Section: base" i "Essential: yes" w opisie pakietu.  "Section: base"
oznacza, że ten pakiet jest instalowany w nowym systemie przed czymkolwiek 
innym. Większość pakietów z "Section: base" posiada ""Priority: required" 
lub przynajmniej "Priority: important" i wiele z nich jest oznaczona jako
"Essential: yes". "Essential: yes" oznacza, że aby taki pakiet usunąć
należy użyć dodatkowych parametrów do polecenia tak by wymusić to usuwanie
korzystając z <prgn>dpkg</prgn>. Na przykład <package>libc6</package>, 
<package>mawk</package> i <package>makedev</package> posiadają
w ustawieniach  "Priority: required" i "Section: base" ale nie 
"Essential: yes".

<sect1 id="virtual">Pakiety wirtualne 

<p>Pakiet wirtualny nosi nazwę odnoszącą się do dowolnego z grupy pakietów, 
posiadających zbliżoną funkcjonalność. Na przykład zarówno <prgn>tin</prgn> 
jak i <prgn>trn</prgn> są klientami grup dyskusyjnych i każdy z nich 
powinien spełniać wymagania innego programu, wymagającego czytnika news do 
działania. O obu z nich mówi się więc, że dostarczają „wirtualny pakiet” 
o nazwie <package>news-reader</package>. 

<p>Podobnie, <prgn>exim</prgn> i <prgn>sendmail</prgn> są programami 
transportującymi pocztę (mail transport agent). 
Mówi się więc o nich, że dostarczają wirtualny pakiet o nazwie 
<package>mail-transport-agent</package>. Jeżeli jeden z nich zostanie 
zainstalowany, każdy program zależący od instalacji 
mail transport agent zostanie 
usatysfakcjonowany dzięki istnieniu tego pakietu wirtualnego. 

<p>Debian posiada również mechanizm umożliwiający administratorowi 
wyznaczenie preferowanego pakietu w razie, gdy kilka zainstalowanych 
pakietów dostarcza ten sam „pakiet wirtualny”. Odpowiednim poleceniem 
jest <prgn>update-alternatives</prgn>, które opisano w <ref id="alternatives">. 

<sect1 id="depends">Zależności między pakietami 
<!--
What is meant by saying that a package
  Depends/Recommends/Suggests/Conflicts/Replaces/Provides another package?
-->
<p>W systemie zarządzania pakietami w Debianie istnieje kategoria 
„zależności” między pakietami zaprojektowanych tak, aby w prosty sposób, 
(za pomocą pojedynczej flagi) ukazać poziom niezależności funkcjonowania 
programu A od istnienia w danym systemie programu B: 
<list>
  <item>Pakiet A <strong>zależy</strong> (<strong>depends</strong> on) od 
  Pakietu B, jeżeli B musi być bezwarunkowo zainstalowany, aby można było 
  uruchomić A. W niektórych przypadkach A nie tylko zależy od B, ale od 
  jego określonej wersji. W takich przypadkach zależność wersji jest dolną 
  granicą, co należy rozumieć, że A zależy od dowolnej wersji B nowszej od 
  wersji podanej. 
  <item>Pakiet A <strong>zaleca</strong> (<strong>recommends</strong>) 
  Pakiet B, jeżeli opiekun pakietu jest zdania, że większość użytkowników 
  nie zechciałaby skorzystać z A bez posiadania możliwości oferowanych przez B. 
  <item>Pakiet A <strong>sugeruje</strong> (<strong>suggests</strong>) 
  Pakiet B, jeżeli B zawiera pliki mające związek z funkcjonalnością A 
  (zwykle zwiększające ją). 
  <item>Package A <strong>jest w konflikcie</strong> (<strong>conflicts</strong>) 
  z Pakietem B wtedy, kiedy A nie będzie działać, jeżeli B jest zainstalowany 
  w systemie. Konflikty zachodzą przeważnie wtedy, gdy A zawiera pliki, które 
  mają pod jakimś względem przewagę nad plikami należącymi do B.
  Stan „conflicts” często występuje wspólnie z „replaces”. 
  <item>Pakiet A <strong>zastępuje</strong> (<strong>replaces</strong>) 
  Pakiet B wtedy, gdy pliki zainstalowane przez B ulegają usunięciu 
  i (w niektórych wypadkach) nadpisaniu przez pliki należące do A. 
  <item>Pakiet A <strong>dostarcza</strong> (<strong>provides</strong>) 
  Pakiet B wtedy, gdy wszystkie pliki i cała funkcjonalność 
  pakietu B zawierają się w A. Daje to użytkownikom mniejszych dysków 
  możliwość zainstalowania tylko tej części pakietu A, której 
  naprawdę potrzebują. 
</list>

<p>Bardziej szczegółowe informacje o wykorzystaniu każdego z powyższych pojęć 
zawierają dokumenty <em>Packaging Manual</em> i <em>Policy Manual</em>.

<p>Dobrze wiedzieć, że <prgn>dselect</prgn> umożliwia bardziej subtelną 
kontrolę nad pakietami <strong>zalecanymi</strong> 
i <strong>sugerowanymi</strong>, niż <prgn>apt-get</prgn>, 
który po prostu pobiera wszystkie pakiety oznaczone <strong>zależy</strong> 
a zostawia w spokoju <strong>rekomendowane</strong> 
i <strong>sugerowane</strong>. 
W nowoczesnym wydaniu obydwa programy są „nakładką” na APT. 

<sect1 id="pre-depends">Znaczenie „pre-depends”

<p>Pojęcie „zależność wstępna” („pre-depend”) stanowi szczególny rodzaj 
zależności. W wypadku zwyczajnego pakietu <prgn>dpkg</prgn> rozpakuje plik 
pakietu (plik <tt>.deb</tt>) niezależnie od tego, czy pliki, od których 
dany pakiet zależy, są już w systemie. Samo rozpakowanie polega na tym, że 
<prgn>dpkg</prgn> wyciąga z pliku archiwum pliki przeznaczone do instalacji 
w systemie użytkownika i umieszcza je we właściwych miejscach w tym systemie.
Jeżeli pakiet właśnie instalowany <strong>zależy</strong> od obecności
w systemie użytkownika jakichś innych pakietów, <prgn>dpkg</prgn> odmówi
dokończenia instalacji (co przejawiłoby się wykonaniem akcji „configure”) aż
do czasu zainstalowania tych pakietów.

<p>Istnieje jednak trochę pakietów, których <prgn>dpkg</prgn> nie będzie 
chciał nawet rozpakować, dopóki nie zostaną spełnione pewne zależności. 
Mówimy, że takie pakiety „pre-depend” (zależą wstępnie) od obecności 
w systemie jakichś innych pakietów. Mechanizm ten został wprowadzony 
w projekcie Debian w celu ułatwienia bezpiecznej instalacji nowych wersji 
pakietów w dobie przejścia z formatu <tt>a.out</tt> na <tt>ELF</tt>, gdy nawet 
<strong>kolejność</strong> rozpakowywania pakietów była krytyczna. 
Są też inne sytuacje związane z dużymi aktualizacjami systemu, w których omawiany 
mechanizm okazuje się użyteczny, np. dla pakietów o priorytecie „Wymagane” 
zależnych od libc. 

<p>Bardziej szczegółowe informacje można znaleźć w dokumencie Packaging Manual.

<sect1 id="pkgstatus">Status pakietu 
<!--
What is meant by unknown/install/remove/purge/hold in
  the package status?
-->
<p>Status pakietu może przybierać formę: „nieznany” („unknown”), „zainstalować” 
(„install”), „usunąć częściowo” („remove”), „usunąć całkowicie” („purge”) lub 
„zatrzymać” („hold”).
Te znaczniki pokazują, co użytkownik chciałby 
uczynić z danym pakietem (przez dokonanie wyboru w sekcji „Select” programu 
<prgn>dselect</prgn> lub przez bezpośrednie wywołanie <prgn>dpkg</prgn>). 

<p>Ich znaczenie jest następujące:
<list compact>
  <item><strong>unknown</strong>  - użytkownik nigdy nie zdradził, czy 
  w ogóle chce tego pakietu 
  <item><strong>install</strong>  - użytkownik chce, aby pakiet (lub jego 
  nowsza wersja) został zainstalowany. 
  <item><strong>remove</strong>   - użytkownik chce, aby pakiet został 
  usunięty, ale nie chce usuwać jego plików konfiguracyjnych. 
  <item><strong>purge</strong>    - użytkownik chce całkowitego usunięcia 
  pakietu, z plikami konfiguracyjnymi włącznie. 
  <item><strong>hold</strong>     - użytkownik nie chce, aby pakiet był 
  ruszany, tzn. chce zachować bieżącą wersję pakietu w bieżącym stanie, 
  wszystko jedno jakim. 
</list>

<sect1 id="puttingonhold">Zapobieganie instalacji nowych wersji pakietów 
<!--
How do I put a package on hold?
Made major rewrite to accommodate new /etc/apt/preferences in progress
-->
<p>Są dwa mechanizmy chroniące pakiety przed instalacją nowej wersji, 
jeden z nich oparty jest na <prgn>dpkg</prgn>, a drugi od dystrybucji  
Woody, na <prgn>APT</prgn>. 

<p>Wykorzystując ten pierwszy z nich, należy najpierw wyeksportować listę 
zawierającą nazwy zainstalowanych pakietów i status każdego z nich: 
<example>
dpkg --get-selections \* &gt; <var>selections.txt</var> 
</example>
Następnie należy dokonać edycji powstałego pliku 
<file><var>selections.txt</var></file>, zmieniając odpowiednio wiersz 
zawierający nazwę pakietu, który chcemy chronić (np. <package/libc6/), 
z czegoś takiego: 
<example>
libc6                       install
</example>
na coś takiego:
<example>
libc6                       hold
</example>
Plik należy zapisać na dysku i wprowadzić go do bazy danych <prgn>dpkg</prgn> 
wykonując polecenie: 
<example>
dpkg --set-selections &lt; <var>selections.txt</var> 
</example>
Jeżeli dobrze znamy nazwę pakietu, który chcemy chronić, możemy po prostu
wykonać:
<example>
echo libc6 hold | dpkg --set-selections 
</example>
Dla każdego potraktowanego w ten sposób pakietu oznacza to, że będzie 
on chroniony przed zainstalowaniem swojej nowszej wersji. 

<p>Taki sam wynik można uzyskać korzystając z programu <prgn>dselect</prgn>. 
Wystarczy w tym wypadku wejść do sekcji [S]elect, odnaleźć pakiet, który 
chcemy chronić przed zmianą i nacisnąć klawisz „=” lub „H”. Zmiana 
statusu będzie obowiązywać od chwili opuszczenia sekcji [S]elect. 

<p>Wiodący w dystrybucji Woody, system APT posiada nowy, alternatywny 
mechanizm ochrony pakietów podczas ich pobierania z repozytorium, oparty 
na <tt>Pin-Priority</tt>. 
Więcej szczegółów na ten temat dostarczy <manref name="apt_preferences" 
section="5">, wraz z <url id="&apt-howto;"> lub pakietem 
<package>&p-apt-howto;</package>; <ref id="apt-preferences"> również
zawiera krótkie wyjaśnienie.

<sect1 id="sourcepkgs">Pakiety źródłowe 

<p>
Pakiety źródłowe są przechowywane w katalogu o nazwie <file>source</file>, można
je pobierać klasycznymi metodami, można też użyć polecenia 
<example>
apt-get source <var>foo</var>
</example>
do ich pobrania (o konfiguracji programu APT do tej operacji 
szerzej traktuje podręcznik systemowy: <manref name="apt-get" section="8">). 

<sect1 id="sourcebuild">Tworzenie pakietów binarnych ze źródłowych 

<p>Aby skompilować pliki źródłowe dla pakietu o nazwie <tt><var>foo</var></tt>,
 będzie trzeba użyć wszystkich, z następujących plików: <file><var>foo_*</var>.dsc</file>,
<file><var>foo_*</var>.tar.gz</file> oraz <file><var>foo_*.diff</var>.gz</file>. 
(ciekawa rzecz: dla rodzimych pakietów Debiana nie ma plików <tt>.diff.gz</tt>).

<p>Jeśli pobraliśmy już wszystkie potrzebne pliki i mamy zainstalowany pakiet 
<package/dpkg-dev/, polecenie 
<example>
$ dpkg-source -x <var>foo_version-revision</var>.dsc
</example>
rozpakuje pakiet do katalogu o nazwie <tt><var>foo-version</var></tt>.

<p>Aby utworzyć pakiet binarny, należy wydać następujące polecenie (tutaj 
podane w wersji dla zwykłego użytkownika):
<example>
$ cd foo-version
$ su -c "apt-get update ; apt-get install fakeroot"
$ dpkg-buildpackage -rfakeroot -us -uc 
</example>
Następnie,
<example>
$ su -c "dpkg -i ../<var>foo_version-revision_arch</var>.deb" 
</example>
aby zainstalować świeżo utworzony pakiet. Więcej informacji - <ref id="port">. 

<!-- woody has simpler commands and build-depends -->

<sect1 id="creatingdebs">Tworzenie nowych pakietów Debiana 

<p>Szczegółowych informacji dotyczących tworzenia nowych pakietów dostarczy 
lektura <em>New Maintainers' Guide</em>, dostępnego jako pakiet 
<package/maint-guide/, lub pod adresem <url id="&maint-guide;" name="&urlname;">. 
<!--
<url id="ftp://ftp.debian.org/debian/doc/package-developer/maint-guide.html.tar.gz">.
-->
<!-- 
<sect id="pkgtools">Package Management Tools
Once many were moved up here but now moved down
-->

<!-- 
Rarely use command for Woody, exclude but mention its manual page above. 
<sect2 id="dpkg-deb">dpkg-deb 
Removed below
-->

<!--
move up contents as a part of APT
<sect2 id="apt-get">apt-get
-->

<!--
Rarely use command for Woody, exclude but mention its manual page above.
<sect2 id="dpkg-split">dpkg-split
removed
-->

<!--
Moved down
<sect1 id="updaterunning">Upgrade running system
Debian claims to be able to update a running program;
  how is this accomplished?
-->

<!--
<sect1 id="whatpackages">How can I tell what packages are already installed 
  on a Debian system?
removed dpkg list and status things here
-->

<!-- these information are in debian.sgml and above
<sect1 id="filesearch">How can I find out what package produced a particular
  file?
removed dpkg list and status things here
-->

<sect id="uptodate">Aktualizacja systemu Debian 

<p>Jednym ze strategicznych celów Debiana jest dostarczenie spójnych metod 
umożliwiających bezpieczną instalację nowego oprogramowania; dokładamy starań, 
aby proces instalacji nowego wydania na poprzednim przebiegał jak
najbardziej gładko. Pakiety będą informować użytkownika o ważnych zdarzeniach 
podczas instalacji, a często będą proponować rozwiązanie problemu.

<p>Należy przeczytać Uwagi Wydawnicze (Release Notes), dokument 
opisujący szczegóły instalacji nowej wersji (upgrade'u) poszczególnych 
dystrybucji, dostarczany na każdej płytce z systemem Debian i dostępny 
na stronach WWW pod adresem 
<url id="&stable-release;"> lub <url id="&testing-release;">. 

<p>
Praktyczny poradnik traktujący o instalacji nowej dystrybucji na poprzednią 
jest zawarty w <ref id="package">. Ten rozdział opisuje podstawowe szczegóły. 

<!-- Obsolete, removed
<sect1 id="libc5to6upgrade">How can I upgrade my Debian 1.3.1 (or earlier)
  distribution, based on libc5, to 2.0 (or later), based on libc6?
...
This paragraph is obsolete.
-->

<sect1 id="howtocurrent">Sposoby aktualizacji systemu Debian 

<p>Zawsze można użyć anonimowego FTP lub programu <prgn>wget</prgn>, 
aby dostać się do sieciowego archiwum Debiana, przeszukać katalogi, znaleźć żądany  
plik, pobrać go i wreszcie zainstalować przy pomocy <prgn>dpkg</prgn> 
(<prgn>dpkg</prgn> instaluje nowe pakiety na właściwym miejscu, 
również na działającym systemie). 
Czasami jednak nowa wersja jednego pakietu wymaga instalacji nowej wersji 
innego pakietu, co może prowadzić do uniemożliwienia instalacji żądanego 
pakietu do czasu zainstalowania tego drugiego, wymaganego. 

<p>Dla wielu osób takie ręczne podejście jest zbyt czasochłonne, ze względu 
na fakt, że Debian tak szybko ewoluuje - co tydzień dochodzi tuzin lub więcej 
nowych pakietów. Tuż przed dużymi wydaniami ta liczba jeszcze rośnie. Żeby 
sobie dać radę z taką lawiną, wiele osób preferuje używanie zautomatyzowanego 
oprogramowania. Do tego celu powstało kilka wyspecjalizowanych narzędzi 
do zarządzania pakietami. 

<sect1 id="pkgtools">Przegląd narzędzi do zarządzania pakietami

<!-- reorganize this and following section in a compact section -->
<!--
<sect1 id="pkgprogs">What programs does Debian provide for managing its
  packages?
  Insert overview and
  bump sect2 to sect1
-->
<p>System zarządzania pakietami w Debianie posiada dwa cele: manipulacja 
samymi pakietami oraz pobieranie plików wraz z pakietami z archiwum pakietów. 
Pierwsze zadanie jest wykonywane przez <prgn>dpkg</prgn>, drugie 
- przez APT i <prgn>dselect</prgn> 

<sect1 id="dpkg"><prgn>dpkg</prgn>

<p>Jest to główny program do manipulacji plikami z pakietami. Pełny opis można 
znaleźć w <manref name="dpkg" section="8">. 
<!-- "install dpkg" deleted because it's a required package -->

<p><prgn>dpkg</prgn> występuje w towarzystwie kilku prostych programów 
pomocniczych:

<list>
<item><prgn>dpkg-deb</prgn>: Manipulacja plikami <tt>.deb</tt>. 
 <manref name="dpkg-deb" section="1">
<item><prgn>dpkg-ftp</prgn>: Starszy program do pobierania plików z pakietami. 
 <manref name="dpkg-ftp" section="1">
<item><prgn>dpkg-mountable</prgn>: Starszy program do pobierania plików z pakietami. 
 <manref name="dpkg-mountable" section="1">
<item><prgn>dpkg-split</prgn>: Dzieli duży pakiet na mniejsze pliki. 
 <manref name="dpkg-split" section="1">
</list>

<prgn>dpkg-ftp</prgn> i <prgn>dpkg-mountable</prgn> zostały zastąpione przez 
system APT.

<!-- Insert APT and apt-get here: -->
<sect1 id="apt">APT

<p>APT (skrót od Advanced Packaging Tool - Zaawansowane Narzędzie Pakietujące) 
jest zaawansowanym interfejsem do debianowego systemu zarządzania pakietami 
składającym się z kilku programów, których nazwy z reguły zaczynają się 
od „apt-”. 
<prgn>apt-get</prgn>, <prgn>apt-cache</prgn> i <prgn>apt-cdrom</prgn> 
są działającymi w środowisku znakowym narzędziami do obsługi pakietów. Są 
również używane jako „back end” (program wykonujący właściwą pracę pod osłoną 
interfejsu ułatwiającego użytkownikowi obsługę) dla innych narzędzi takich, 
jak <prgn/dselect/ i <prgn/aptitude/.

<p>Więcej informacji można uzyskać, instalując pakiet <package/apt/ i czytając

<manref name="apt-get" section="8">,
<manref name="apt-cache" section="8">,
<manref name="apt-cdrom" section="8">,
<manref name="apt.conf" section="5">,
<manref name="sources.list" section="5">, 
<manref name="apt_preferences" section="5"> (Woody) oraz 
<file>/usr/share/doc/apt/guide.html/index.html</file>. 

<p>Innym źródłem informacji może być również 
<url id="&apt-howto;" name="APT HOWTO">, dostępny po zainstalowaniu 
pakietu <package/apt-howto/ jako <file>&f-apt-howto;</file>. 

<p><tt>apt-get upgrade</tt> i <tt>apt-get dist-upgrade</tt> 
pobierają tylko pakiety wymienione w polach „Depends:” i ignorują wszystkie 
pakiety wymienione w polach „Recommends:” i „Suggests:”. 
Jeżeli się tego nie lubi, używa się <prgn>dselect</prgn>. 

<!-- removed boring APT info -->

<!-- bump from sect2 to sect1 -->
<sect1 id="dselect-basics"><prgn>dselect</prgn>

<p><prgn>dselect</prgn> jest zaopatrzonym w menu, interfejsem systemu 
zarządzania pakietami w Debianie. Jest szczególnie użyteczny przy okazji 
pierwszych instalacji i większych aktualizacji. Zobacz <ref id="dselect">. 

<p>Więcej informacji zawiera dokument <file>/usr/share/doc/install-doc/dselect-beginner.en.html</file> 
z pakietu <package/install-doc/ 
lub <url id="&dselect-beginner;" name="dselect Documentation for Beginners (Dokumentacja dselect dla początkujących)">. 

<!-- removed boring dselect info -->

<!-- move this up and make this sect1
<sect2 id="apt">APT
-->
<!-- remove this and mention above in dpkg
<sect2 id="dpkg-ftp">dpkg-ftp
-->
<!-- remove this
<sect2 id="mirror">mirror
-->

<!-- remove this section and mention above in dpkg
<sect2 id="dpkg-mountable">dpkg-mountable
-->

<!--
<sect1 id="upgradesingle">Must I go into single-user mode in order to
  upgrade a package?

<p>No.  Packages can be upgraded in place, even in running systems.
Debian has a <prgn>start-stop-daemon</prgn> program that is invoked to stop,
then restart running process if necessary during a package upgrade.
-->

<sect1 id="updaterunning">Aktualizacja działającego systemu

<p>Kernel i system plików używane w Debianie umożliwiają zastępowanie 
jednych plików drugimi nawet wtedy, gdy są one właśnie używane.

<p>Dostarczamy również program o nazwie <prgn/start-stop-daemon/, używany 
do uruchamiania demonów (pracujących w tle programów użytkowych) przy starcie 
systemu i do ich zatrzymywania podczas zmiany trybu pracy kernela 
(np. z trybu wieloużytkownikowego na jednoużytkownikowy lub na „halt”). Tego 
samego programu używają skrypty instalacyjne, gdy instalowany jest nowy pakiet 
zawierający demony - do ich zatrzymywania i uruchamiania w miarę potrzeb. 

<p>Nawiasem mówiąc, Debian nie wymaga, aby system poddawany aktualizacji
pracował w trybie jednoużytkownikowym.

<sect1 id="savedebs">Pobrane i chwilowo zapisane na dysku pliki <tt>.deb</tt> 

<p>Jeżeli ręcznie pobrałeś pliki pakietów na dysk (co nie jest absolutnie 
konieczne, wystarczy zapoznać się z wyżej zamieszczonym opisem 
<prgn>dpkg-ftp</prgn> lub APT), to po ich zainstalowaniu możesz usunąć 
ze swojego systemu pliki <tt>.deb</tt>. 

<p>W wypadku użycia programu APT, pakiety są zapisywane w katalogu 
<file>/var/cache/apt/archives/</file>. Można je skasować po zainstalowaniu 
(<tt>apt-get clean</tt>) albo skopiować do katalogu 
<file>/var/cache/apt/archives/</file> na innej maszynie, aby 
nie ściągać ich kolejny raz przy powtórnych instalacjach. 

<sect1 id="keepingalog">Rejestracja zmian w pakietach 

<p><prgn/dpkg/ rejestruje pakiety, które rozpakowano, skonfigurowano, usunięto 
częściowo lub całkowicie, ale (przynajmniej obecnie) nie przechowuje rejestru 
tego, co się działo na konsoli w czasie poddawania pakietów tym działaniom. 

<p>Najprostszym sposobem obejścia tego problemu jest uruchamianie 
sesji <prgn>dpkg</prgn>, <prgn>dselect</prgn>, <prgn>apt-get</prgn> itd. 
przy pomocy programu <prgn>script</prgn> (<manref name="script" section="1">). 

<sect id="boot">Proces ładowania systemu w Debianie 

<sect1 id="init">Program <prgn>init</prgn> 

<p>Jak wszystkie Uniksy, Debian ładuje się do pamięci wykonując 
program <prgn>init</prgn>. 
W pliku konfiguracyjnym programu <prgn>init</prgn>
(<file>/etc/inittab</file>) 
jest zapisane, że w pierwszej kolejności ma być wykonany skrypt 
<file>/etc/init.d/rcS</file>. Uruchamia on wszystkie skrypty znajdujące się 
w katalogu <file>/etc/rcS.d/</file> poprzez nowe podprocesy lub ich kopie,  
zależnie od rozszerzenia nazwy pliku, wykonując inicjalizację systemu, 
w skład której wchodzi sprawdzanie i montowanie systemów plików, 
ładowanie modułów, uruchamianie usług sieciowych, ustawianie zegara i in. 
Następnie, dla kompatybilności z innymi systemami, uruchamia skrypty 
umieszczone w katalogu <file>/etc/rc.boot/</file> 
(z wyjątkiem tych, których nazwy 
zawierają „.”). Skrypty umieszczone w tym katalogu są zwykle zarezerwowane 
do wyłącznego użytku administratora i używanie ich w pakietach nie jest 
pochwalane. Więcej informacji można znaleźć w Podręczniku Polityki Debiana w
<ref id="init-hints"> i <url id="&sysvinit;" name="System run levels and
init.d scripts">.

<sect1 id="runlevels">Poziomy startu (Runlevels)

<p>Po załadowaniu systemu, <prgn>init</prgn> wykonuje wszystkie skrypty 
startowe w katalogu określonym przez domyślny poziom startu 
(default runlevel, wpis <tt>id</tt> w pliku <file>/etc/inittab</file>). 
Jak większość Uniksów kompatybilnych z System V, Linux ma 7 poziomów startu: 

<list compact>
<item>0 (zatrzymanie systemu), 
<item>1 (tryb jednoużytkownikowy), 
<item>2 do 5 (różne tryby wieloużytkownikowe) oraz 
<item>6 (restart czyli przeładowanie systemu). 
</list>
<p>
W Debianie ustawia się <tt>id=2</tt>, co oznacza, że domyślny poziom startu 
po wejściu w tryb wieloużytkownikowy wynosi 2, a uruchomieniu podlegają 
skrypty znajdujące się w katalogu <file>/etc/rc2.d/</file>. 

<p>W rzeczywistości skrypty w każdym z katalogów 
<file>/etc/rc<var>N</var>.d/</file> są tylko symbolicznymi dowiązaniami 
(symlinkami) do skryptów w <file>/etc/init.d/</file>. 
Ich <strong>nazwy</strong> natomiast dobiera się tak, aby odzwierciedlały 
<strong>sposób</strong>, w jaki zostaną uruchomione skrypty znajdujące się 
w <file>/etc/init.d/</file>. W szczególności, przed wejściem na którykolwiek 
poziom startu uruchomione zostają wszystkie skrypty o nazwach zaczynających 
się na „K”; są to skrypty wyłączające usługi. Następnie uruchomione 
zostają skrypty o nazwach zaczynających się na „S”, które są skryptami 
uruchamiającymi usługi. Dwucyfrowa liczba występująca po „K” lub „S” określa 
kolejność, w jakiej skrypty zostaną uruchomione. Skrypty z mniejszymi liczbami 
są uruchamiane w pierwszej kolejności. 

<p>To wszystko działa, ponieważ skrypty w <file>/etc/init.d/</file> pobierają 
argument, którego wartością może być „start”, „stop”, „reload”, „restart” 
lub „force-reload” i wykonują zadanie określone przez ten właśnie argument. 
Skryptów tych można używać również po załadowaniu systemu, sterując w ten 
sposób różnymi procesami.

<p>Na przykład, (z argumentem „reload”) polecenie
<example>
# /etc/init.d/exim4 reload
</example>
wysyła demonowi programu exim4 polecenie powtórnego wczytania pliku 
konfiguracyjnego. 

<sect1 id="custombootscripts">Modyfikacje procesu ładowania 
<p>
Debian nie korzysta z pochodzącego z BSD katalogu 
<tt>rc.local</tt> w celu dostosowywania procesu ładowania do jakichś szczególnych życzeń 
użytkownika; zamiast tego oferuje następujący mechanizm.

<p>Załóżmy, że system powinien wykonać skrypt <tt>foo</tt> przy starcie 
lub podczas wchodzenia na któryś z poziomów startu. Administrator powinien 
wtedy: 
<enumlist>
<item>Umieścić skrypt <tt>foo</tt> w katalogu <file>/etc/init.d/</file>. 
<item>Uruchomić występujące w Debianie polecenie <prgn>update-rc.d</prgn> 
z odpowiednimi argumentami, ustawiając w ten sposób dowiązania między 
wymienionymi w wierszu poleceń plikami w katalogach <tt>rc<var>?</var>.d</tt> 
  a <file>/etc/init.d/foo</file>, 
  gdzie <var>?</var> jest liczbą od 0 do 6 odpowiadającą jednemu z poziomów 
  startu (runlevel) Systemu V.
  <item>Przeładować system.
</enumlist>

<p>Polecenie <prgn>update-rc.d</prgn> ustawi dowiązania między plikami 
w katalogach <tt>rc<var>?</var>.d</tt> a skryptem w <file>/etc/init.d/</file>. 
Nazwa każdego z dowiązań będzie się zaczynać od litery „K” lub „S”, po której 
wystąpi liczba oraz nazwa skryptu. Gdy system osiągnie poziom startu 
<var>N</var>, skrypty z <file>/etc/init.d/</file> posiadające w katalogu 
<file>/etc/rc<var>N</var>.d/</file> dowiązania o nazwach zaczynających się 
na „K” są wykonywane z argumentem <tt>stop</tt>, następnie są wykonywane 
skrypty, nazwy odniesień do których zaczynają się na „S”, przyjmując 
za argument <tt>start</tt>. 

<p>Można, na przykład, spowodować uruchomienie skryptu <tt>foo</tt> 
w toku sekwencji startowej umieszczając go w <file>/etc/init.d/</file> 
i instalując dowiązania poleceniem <tt>update-rc.d foo defaults 19</tt>. 
Argument <tt>defaults</tt> odnosi się do domyślnych poziomów startu 
(od 2 do 5). Argument <tt>19</tt> gwarantuje, że <tt>foo</tt> zostanie 
uruchomiony przed którymkolwiek skryptem zawierającym liczbę 20 lub większą. 

<sect id="diverse">Wsparcie dla różnorodności
<p>
Debian oferuje wiele sposobów spełniania życzeń administratora 
systemu bez groźby uszkodzenia systemu. 
<list>
<item><prgn>dpkg-divert</prgn>, zobacz <ref id="dpkg-divert">.
<item><prgn>equivs</prgn>, zobacz <ref id="equivs">.
<item><prgn>update-alternatives</prgn>, zobacz <ref id="alternatives">.
<item><prgn>make-kpkg</prgn> może zadowolić wymagania stawiane przez wiele 
bootloaderów. Zobacz <manref name="make-kpkg" section="1"> 
i <ref id="kernel-debian">.
</list>
Wszystkie pliki w podkatalogach katalogu <file>/usr/local/</file> 
należą do administratora systemu i &debian; ich nawet nie tknie. Większość 
(lub wszystkie) plików w podkatalogach <file>/etc</file> to pliki 
konfiguracyjne i &debian; nie nadpisze ich w trakcie instalacji nowszych wersji 
pakietów, chyba, że administrator wyraźnie sobie tego zażyczy. 

<sect id="i18n">Internacjonalizacja
<p>
System &debian; jest zinternacjonalizowany: obsługuje wyświetlanie 
i wprowadzanie znaków w wielu językach, tak na konsoli tekstowej, jak i w Xach. 
Wiele dokumentów, stron podręcznika systemowego <prgn>man</prgn> i komunikatów 
systemu przetłumaczono i tłumaczy się na coraz większą liczbę języków. 
W trakcie instalacji, Debian zachęca użytkownika do wybrania języka instalacji 
(czasem nawet lokalnego dialektu). 
<p>
Jeżeli zainstalowany przez Ciebie system nie obsługuje wszystkich właściwości 
językowych, których potrzebujesz, lub jeżeli chcesz zmienić język lub 
zainstalować inną klawiaturę, która obsługiwałaby Twój język, zapoznaj się 
z <ref id="l10n">.

<sect id="kernel-details">Debian i kernel
<p>
Zobacz <ref id="kernel">.

<sect1 id="non-debian-kernel">Kompilacja jądra ze źródeł innych, niż debianowe 

<p><!--Yes.  But you have-->
Trzeba zrozumieć obowiązujące w Debianie zasady postępowania odnośnie plików 
nagłówkowych.

<p>Biblioteki C w Debianie buduje się z wykorzystaniem najnowszych 
<strong>stabilnych</strong> wydań plików nagłówkowych <strong>jądra</strong> 
(<strong>kernel</strong>) (Na przykład, Debian-1.2 używał plików nagłówkowych 
jądra w wersji 5.4.13). 

<p>Taka praktyka jest w kontraście ze wszystkimi pakietami zawierającymi pliki 
źródłowe jądra, które wykorzystują również nowsze wersje plików nagłówkowych. 
Pliki nagłówkowe jądra rozpowszechniane z jego źródłami są umieszczone 
w katalogu <file>/usr/include/linux/include/</file>. 

<p>W razie potrzeby kompilacji programu wymagającego plików nagłówkowych 
kernela w wersji nowszej, niż zawarte w pakiecie <package/libc6-dev/, trzeba 
do linii poleceń w trakcie kompilacji dodać 
<tt>-I/usr/src/linux/include/</tt>. Coś takiego w pewnym momencie 
przydarzyło się na przykład pakietowi demona automountera (<package/amd/). 
Gdy nowsze jądro zmieniło trochę funkcji obsługujących NFS, <prgn>amd</prgn> 
musiał zostać o tym powiadomiony, co wymagało dołączenia najnowszej 
wersji plików nagłówkowych jądra. 

<sect1 id="customkernel">Narzędzia do tworzenia jądra 

<p>Użytkowników, którzy chcą (albo muszą) utworzyć własne pakiety kernela, 
zachęcamy do instalacji pakietu <package/kernel-package/. Zawiera on skrypt 
umożliwiający zbudowanie pakietu zawierającego jądro, umożliwiając w ten sposób utworzenie 
Debianowego pakietu zawierającego już skompilowane jądro przez wydanie 
polecenia
<example>
# make-kpkg kernel_image
</example>
w katalogu <file>/usr/src/linux/</file>.
Bardziej szczegółowych informacji udostępnia polecenie
<example>
# make-kpkg --help
</example>
oraz strona podręcznika systemowego <manref name="make-kpkg" section="1">
i <ref id="kernel">.

<p>Użytkownicy chcący skompilować najnowszy kernel (albo po prostu dowolny, 
wymarzony) muszą samodzielnie pobrać kod źródłowy ze swojego ulubionego 
archiwum sieciowego, o ile nie jest dostępny pakiet 
kernel-source-<var>version</var>, gdzie <var>version</var> oznacza wersję 
kernela. Skrypt startowy <file>initrd</file> wymaga specjalnej łaty na kernel 
o nazwie <prgn>initrd</prgn>; zobacz <url id="&bug-initrd;">. 

<p>Szczegółową instrukcję użytkowania pakietu <package/kernel-package/ 
można znaleźć w pliku <file>/usr/doc/kernel-package/README.gz</file>. 

<!-- TODO: check out a new source of details, this README isn't too useful,
  I'm told (joy) -->

<sect1 id="modules">Specjalne wyposażenie do obsługi modułów jądra 

<p>Pakiet <package/modconf/ zawiera skrypt <file>/usr/sbin/modconf</file>, 
którego można używać w celu wprowadzania własnych modyfikacji do konfiguracji 
modułów. Skrypt ten wyświetla menu, wypytując użytkownika o szczegóły 
dotyczące ładowanych sterowników urządzeń w jego systemie. Na podstawie 
udzielonych odpowiedzi przeprowadzana jest modyfikacja pliku 
<file>/etc/modules.conf</file> (wyszczególniającego aliasy i inne argumenty, 
których należy użyć w połączeniu z różnymi modułami), w powiązaniu 
z plikami w <file>/etc/modutils/</file> i plikiem <file>/etc/modules</file> 
(zawierającym spis modułów, które trzeba załadować przy starcie systemu). 

<p>Podobnie jak źródła kernela zostały wyposażone w plik
<file>Configure.help</file>, 
ułatwiający konfigurację kerneli własnej produkcji, tak i pakiet 
<package/modconf/ daje do dyspozycji serię plików pomocy 
(w <file>/usr/share/modconf/</file>), dostarczających szczegółowych 
informacji na temat odpowiednich argumentów dla każdego modułu. Przykłady 
można znaleźć w <ref id="kernel-modules">. 

<sect1 id="removeoldkernel">Usuwanie starego pakietu z jądrem

<p>Skrypt <prgn>kernel-image-<var>NNN</var>.prerm</prgn> sprawdza, 
czy kernel, który jest aktualnie załadowany, nie jest tym samym, który 
usiłujemy odinstalować. Można więc niechciane pakiety kerneli usuwać używając 
polecenia 
<example>
# dpkg --purge --force-remove-essential kernel-image-<var>NNN</var>
</example>

(Oczywiście, w miejsce <var>NNN</var> trzeba wpisać wersję i podwersję 
usuwanego kernela). 
</sect>
