<!-- CVS revision of this document "# Revision is not used here.#"  -->
<!-- CVS revision of original english document "1.88"  -->

<!--Line width ruler (ruler uses 78 characters) 34567890123456789012345-->

<chapt id="package">Zarządzanie pakietami Debiana

<p>
<!-- XXX FIXME XXX -->
This chapter is based on older version of English original text.  Please
check the English version too.
<p>
By zmniejszyć obciążenie sieci na serwerach archiwów Debiana, upewnij się,
że skonfigurowałeś lokalnego pośrednika HTTP (np. <prgn>squid</prgn>)
dla pakietów ściąganych przez APT oraz, jeśli jest taka potrzeba, zmienną
środowiskową <tt>http_proxy</tt> lub ustaw wartość <tt>http</tt> w pliku
<file>/etc/apt/apt.conf</file>. To znacząco zwiększy wydajność uaktualnień
przez sieć, szczególnie wtedy, gdy posiadasz wiele komputerów z Debianem
w sieci lokalnej.
<p>
Pomimo tego, że możliwości przyszpilania w 
<manref name="apt_preferences" section="5"> są wręcz nieograniczone, nie rozwiązuje
ono wszystkich problemów z zależnościami, ponieważ zazwyczaj wymagają one
najnowszych wersji innych, podstawowych programów.
<p>
<![%f-ref;[
Użycie metody opisanej w <ref id="chroot">
]]>
<![%q-ref;[
Użycie metody chroot
]]>
jest pożądane do równoczesnego zabezpieczenia zarówno stabilności systemu
jak i dostępu do najnowszych wersji oprogramowania.
<p>
Informacje opisane w tym rozdziale dotyczą systemu Woody, ale wiele z nich
tyczy się również systemu Potato (z wyjątkiem <manref name="apt_preferences"
section="5"> i tematów związanych z <file>/etc/apt/preferences</file>).

<sect id="pkg-intro">Wprowadzenie
<p>
Jeśli czytanie dokumentacji dla deweloperów jest dla ciebie zbyt ciężkim
zajęciem, przeczytaj poniższy rozdział i zacznij się cieszyć prawdziwą
mocą Debiana w wersji <tt>testing</tt>/<tt>unstable</tt> :-).

<sect1>Podstawowe narzędzia
<p>
<example>
dselect   &ndash; narzędzie do zarządzania pakietami z menu
dpkg      &ndash; instaluje pakiet (z pliku)
apt-get   &ndash; instaluje pakiet (z archiwum, CLI APT)
tasksel   &ndash; instaluje zadania (zestawy pakietów)
aptitude  &ndash; instaluje pakiet (pakiet i zadanie, ncurses APT)
deity     &ndash; alternatywny interfejs ncurses dla APT
synaptic, gsynaptic &ndash; alternatywne graficzne interfejsy dla APT
</example>
Powyższe narzędzia nie działają na tym samym poziomie. <prgn>dselect</prgn>
działa nad APT (polecenie <prgn>apt-get</prgn>) oraz <prgn>dpkg</prgn>.
<p>
APT używa plików <file>/var/lib/lists/*</file> do śledzenia dostępnych pakietów,
podczas gdy <prgn>dpkg</prgn> używa pliku <file>/var/lib/dpkg/available</file>.
Jeśli zainstalowałeś pakiety używając bezpośrednio <prgn>apt-get</prgn> lub
podobnego programu (jak np. <prgn>aptitude</prgn>) upewnij się, że uaktualniłeś
plik <file>/var/lib/dpkg/available</file> korzystając z opcji <tt>[U]pdate</tt>
w menu <prgn>dselect</prgn> lub za pomocą polecenia „<tt>dselect update</tt>”
przed wywołaniem <tt>dselect select</tt>, <tt>tasksel</tt> lub <tt>dpkg -l</tt>.
<p>
Jeśli chodzi o zależności między pakietami, <prgn>apt-get</prgn> automatycznie
ściąga pakiety z jego <strong>zależnościami</strong>
(<strong>depends</strong>), ale nie rusza pakietów podanych w polach
<strong>recommends</strong> (zaleca) i <strong>suggests</strong> (proponuje),
podczas gdy <prgn>dselect</prgn> pozwala wybierać między zalecanymi lub
proponowanymi pakietami. <prgn>aptitude</prgn> pozwala na automatyczne
ściągnięcie wszystkich pakietów z pól <strong>depends</strong>,
<strong>recommends</strong> oraz <strong>suggests</strong>.
<![%f-ref;[
Zajrzyj również do rozdziału <ref id="depends">.
]]>
</sect1>

<sect1>Wygodne narzędzia
<p>
<example>
apt-cache         - przeglądanie lokalnej kopii archiwum pakietów
dpkg-reconfigure  - ponowna konfiguracja już zainstalowanego pakietu
                   (jeśli korzysta z debconf)
dpkg-source       - obsługa pakietów źródłowych
dpkg-buildpackage - automatyzacja budowania pakietu
...
</example>
</sect1>
</sect>

<sect id="apt-install">Podstawy zarządzania pakietami Debiana
<p>
Możesz instalować zestawy pakietów nazywane <em>zadaniami</em> lub
instalować pojedyncze pakiety albo uaktualniać system przy użyciu
narzędzi do zarządzania pakietami, które są opisane poniżej.
<![%f-ref;[
Zajrzyj również na strony
<ref id="install">, <ref id="woody"> oraz <ref id="bin-editor">.
]]>

<sect1 id="tasksel">Instalowanie <em>zadań</em> programem <prgn>tasksel</prgn>
 lub <prgn>aptitude</prgn>
<p>
<prgn>tasksel</prgn> to <strong>Debian Task Installer</strong> (instalator
zadań Debiana), który podczas instalacji systemu jest dostępny jako
jedna z „<tt>prostszych</tt>” opcji.
<p>
Jeśli chcesz zainstalować całe środowisko lub zestaw logicznie ze sobą
powiązanych programów, które wymaga wielu pakietów, to ta droga jest
jedną z najlepszych. Upewnij się, że wykonujesz polecenia w następujący
sposób:
<example>
# dselect update
# tasksel
</example>
<p>
<prgn>aptitude</prgn> również daje dostęp do <em>zadań</em>. Pozwala on jednak
nie tylko na ich wybór, ale również na rezygnację z instalacji poszczególnych
pakietów z danego <em>zadania</em>.
</sect1>

<sect1 id="setup-apt">Konfiguracja systemu APT
<p>
Jeśli spróbujesz poniższego opisu na mieszane środowisko, możesz
doświadczyć pewnych konfliktów z zależnościami. Dobrym zwyczajem jest nie
mieszanie różnych dystrybucji. Poniższy rozdział jest dla ludzi, którzy
licząc się z ryzykiem chcą poeksperymentować.
<!--
Yes. This is sloppy fix but better than nothing.  I saw many newbie
confused.
 -->
<p>
Dla selektywnej aktualizacji podczas trzymania się ciągle dystrybucji
<tt>testowej</tt>, system APT (&gt;Woody) musi być skonfigurowany
jak w <ref id="woody-transition">, by móc korzystać z opcji
<manref name="apt_preferences" section="5">.
<p>
Najpierw dodaj źródła dla <tt>stable</tt>, <tt>testing</tt>
i <tt>unstable</tt> do pliku <file>/etc/apt/sources.list</file>,
a następnie zmodyfikuj plik <file>/etc/apt/preferences</file> tak,
by ustawić poprawne wartości Pin-Priority.
<footnote>
Zostawiam poniższy opis dla spójności z innymi częściami. Jeśli naprawdę
chcesz śledzić <tt>testing</tt> lub <tt>unstable</tt>, powinieneś usunąć
wszelkie odsyłacze do <tt>stable</tt> w <file>/etc/apt/sources.list</file> 
i <file>/etc/apt/preferences</file>. Tak jest ponieważ <tt>testing</tt>
jest ustawiana jako kopia <tt>stable</tt>.
</footnote>
<example>
Package: *
Pin: release a=stable
Pin-Priority: 500

Package: *
Pin: release a=testing
Pin-Priority: 600

Package: *
Pin: release a=unstable
Pin-Priority: 50
</example>

<sect1 id="dselect"><prgn>dselect</prgn>
<p>
Zaraz po uruchomieniu <prgn>dselect</prgn> automatycznie wybiera pakiety
oznaczone jako wymagane (required), ważne (important) oraz standardowe
(standard). W Potato, niektóre duże objętościowo programy takie jak teTeX
czy Emacs były również wybierane tutaj i najlepiej było je po prostu omijać
(przez ręczne odznaczenie - wpisując `_') przy wstępnej instalacji.
W Woodym, powyższe pakiety zostały przeniesione do kategorii „Optional”.
<p>
<prgn>dselect</prgn> w pewnym sensie posiada dziwny interfejs użytkownika.
Dostępne są cztery dwuznaczne polecenia (wielkość liter ma znaczenie):
<example>
Klawisz     Działanie
Q           Wyjście. Potwierdź obecny wybór i wyjdź (zastąp zależności)
R           Powrót! Nie chciałem tego zrobić.
D           Cholera! Zwisa mi co o tym myśli dselect. Po prostu wykonaj to!
U           Ustaw wszystko na stan „sugerowane”
</example>
Za pomocą <tt>D</tt> i <tt>Q</tt> możesz dokonać konfliktującego wyboru na
własne ryzyko. Używaj tych poleceń z rozwagą. Obecnie <prgn>dselect</prgn>
jest dojrzałym narzędziem, które daje Ci całkiem dużą kontrolę nad wyborem
pomiędzy pakietami <strong>sugerowanymi</strong>
a <strong>rekomendowanymi</strong>.
<p>
Jeśli chcesz zmniejszyć ilość pojawiających się ostrzeżeń i komunikatów,
to dodaj opcję „expert” do pliku <file>/etc/dpkg/dselect.cfg</file>.
Jeżeli posiadasz powolny komputer, to możesz uruchamiać <prgn>dselect</prgn>
na innej, szybszej maszynie do wyszukiwania pakietów, a później możesz
skorzystać z polecenia <tt>apt-get install</tt>, by je zainstalować.
<p>
<prgn>dselect</prgn> nie daje dostępu do pakietów, które nie są preferowane
przez Pin-Priority.
</sect1>

<sect1 id="aptitude"><prgn>aptitude</prgn>
<p>
<prgn>aptitude</prgn> jest nowym programem do instalowania pakietów podobnym do
<prgn>dselect</prgn>. Możesz go używać jako zamiennika polecenia tekstowego
<prgn>apt-get</prgn>. Zobacz też <manref name="aptitude" section="1">.
<p>
Wydawanie poleceń <prgn>aptitude</prgn> odbywa się za pośrednictwem
poszczególnych klawiszy.
<example>
Klawisz     Działanie
F10         Menu
?           Ściągawka z klawiszologii
u           Uaktualnij informacje o archiwum pakietów
g           Ściągnij i zainstaluj wybrane pakiety
q           Wyjdź z danego ekranu i zapamiętaj zmiany
x           Wyjdź z danego ekranu i porzuć zmiany
Enter       Pokaż informacje o pakiecie
</example>
<prgn>aptitude</prgn> umożliwia ci automatyczne ściągnięcie wszystkich
pakietów bazując na polach <strong>depends</strong>,
<strong>recommends</strong> oraz <strong>suggests</strong>.
Możesz zmienić to zachowanie wybierając z menu <tt>F10 -> Opcje ->
Zależności</tt>.
<p>
<prgn>aptitude</prgn> daje Ci dostęp do wszystkich dostępnych wersji pakietów.
</sect1>

<sect1 id="apt-commands">Polecenia <prgn>apt-cache</prgn> i <prgn>apt-get</prgn>
<p>
Podczas śledzenia dystrybucji <tt>testing</tt> jak zostało to opisane
w powyższym przykładzie, możemy zarządzać pakietami przy użyciu poniższych
poleceń:
<list>
<item><tt>apt-get -u upgrade</tt>
 <p>Uaktualnia wszystkie pakiety w systemie, wybierając zależności
 z dystrybucji <tt>testing</tt>.
<item><tt>apt-get -u dist-upgrade</tt>
 <p>Uaktualnia wszystkie pakiety w systemie, wybierając
 i rozwiązując zależności z dystrybucji <tt>testing</tt>.
<item><tt>apt-get -u dselect-upgrade</tt>
 <p>Uaktualnia wszystkie pakiety w systemie korzystając
 z wyboru dokonanego przez <prgn>dselect</prgn>.
<item><tt>apt-get -u install <var>pakiet</var></tt>
 <p>Instaluje <var>pakiet</var> wraz z zależnościami
 z dystrybucji <tt>testing</tt>.
<item><tt>apt-get -u install <var>pakiet</var>/unstable</tt>
 <p>Instaluje <var>pakiet</var> z <tt>unstable</tt>, ale zależności
 pobiera z <tt>testing</tt>.
<item><tt>apt-get -u install -t unstable <var>pakiet</var></tt>
 <p>Instaluje <var>pakiet</var> z <tt>unstable</tt> wraz z zależnościami
 z <tt>unstable</tt>, poprzez ustawienie Pin-Priority <tt>unstable</tt> na 990.
<item><tt>apt-cache policy <var>foo bar ...</var></tt>
 <p>Sprawdza stan pakietów <var>foo bar ...</var>.
<item><tt>apt-cache show <var>foo bar ...</var> | less</tt>
 <p>Wyświetla informacje o pakietach <var>foo bar ...</var>.
<item><tt>apt-get install <var>foo=2.2.4-1</var></tt>
 <p>Instaluje wybraną wersję <var>2.2.4-1</var> pakietu <var>foo</var>.
<item><tt>apt-get -u install <var>foo bar-</var></tt>
 <p>Instaluje pakiet <var>foo</var> i usuwa pakiet <var>bar</var>
<item><tt>apt-get remove <var>bar</var></tt>
 <p>Usuwa pakiet <var>bar</var>, ale zachowuje zmienione pliki konfiguracyjne.
<item><tt>apt-get remove --purge <var>bar</var></tt>
 <p>Usuwa pakiet <var>bar</var> wraz ze wszystkimi jego plikami
 konfiguracyjnymi.
</list>
W powyższych przykładach opcja <tt>-u</tt> wymusza, by <prgn>apt-get</prgn>
pokazał listę pakietów do aktualizacji i poczekał na dalsze decyzje użytkownika
przez przystąpieniem do dalszych czynności. Poniższe działania ustawiają
opcję <tt>-u</tt> jako domyślną:
<example>
$ cat &gt;&gt; /etc/apt/apt.conf &lt;&lt; .
// Zawsze pokazuj aktualizowane pakiety (-u)
APT::Get::Show-Upgraded "true";
.
</example>
<p>
Użyj opcji <tt>-s</tt>, by zasymulować aktualizację.

<sect1 id="apt-tracking">Podążanie za smakiem dystrybucji &debian;
<p>
W zależności od wyboru smaku dystrybucji, możesz zmienić przykładowy
plik <file>/etc/apt/preference</file> z <ref id="setup-apt"> tak,
by odpowiadał twoim potrzebom:
<example>
śledzenie stable:            zmień Pin-Priority testing na 50
śledzenie testing:           pozostaw bez zmian
śledzenie testing(unstable): zmień Pin-Priority unstable na 500
śledzenie unstable(testing): zmień Pin-Priority unstable na 800
</example>
Zasadą przy ustawianiu wartości Pin-Priority powinno być przewijanie wartości z
góry na dół tabeli wraz z upływem czasu, od chwili po wydaniu dystrybucji, do
czasu zamrażania przed wydaniem kolejnym.
<p>
Uwaga: śledzenie dystrybucji <tt>testing</tt> ma jedną wadę - poprawki
bezpieczeństwa pojawiają się dosyć późno.
<p>
Jeśli mieszasz dystrybucje Debiana, <tt>testing</tt> z <tt>stable</tt> lub
<tt>unstable</tt> ze <tt>stable</tt>, prawdopodobnie będziesz często
nieświadomie pobierać kluczowe pakiety z <tt>testing</tt> lub
<tt>unstable</tt>, które nie zawsze są najwyższej jakości. Miej to na uwadze.
<p>
Przykłady pliku <file>/etc/apt/preferences</file>, dzięki którym pobierane
są kluczowe pakiety w dojrzałych wersjach, natomiast pakiety dodatkowe
mogą być w wersjach niestabilnych, znajdują się w <url id="&examples;"
name="katalogu z przykładami"> jako pliki <file>preferences.testing</file> i
<file>preferences.unstable</file>.
Z drugiej strony, <file>preferences.stable</file> wymusza, by wszystkie wersje
pakietów zostały zmniejszone do wersji stabilnych.

<sect1 id="apt-stable">Obniżenie wersji wszystkich pakietów do <tt>stable</tt>
<p>
By zmniejszyć wersję wszystkich pakietów do wydania <tt>stable</tt>,
ustaw plik <file>/etc/apt/preferences</file> jak poniżej:
<example>
Package: *
Pin: release a=stable
Pin-Priority: 1001
</example>
a następnie uruchom „<tt>apt-get upgrade</tt>”, które wymusi zmniejszenie
wersji z powodu Pin-Priority &gt; 1000. Pamiętaj jednak, że podczas
tej operacji mogą wystąpić problemy z zależnościami.

<sect1 id="apt-preferences">Przegląd pliku <file>/etc/apt/preferences</file>
<p>
W przykładowym pliku <file>/etc/apt/preferences</file> przedstawionym
w <ref id="setup-apt">, pierwsza linia, <tt>Package: *</tt>, oznacza, że
ta regułka odnosi się do wszystkich pakietów. Możesz użyć konkretnej
nazwy pakietu zamiast gwiazdki, by ustawić Pin-Priority dla danego pakietu.
<p>
Następna linia, <tt>Pin: release a=stable</tt>, oznacza, że
<prgn>apt-get</prgn> pobiera plik <file>Packages.gz</file>
z archiwum zawierającego plik <file>Release</file>, w którym
znajduje się linia <tt>Archive: stable</tt>.
<p>
Ostatnia linia, <tt>Pin-Priority: 500</tt>, ustala Pin-Priority na 500.
<p>
Jeśli jest wiele pakietów o tej samej nazwie, to instalowany jest ten
z najwyższą wartością Pin-Priority.
<p>
Poniżej znajdują się oznaczenia Pin-Priority:
<list>
<item>1001 i więcej: priorytety zmniejszające wersję pakietu.
 <p>Zmniejszanie wersji pakietu jest dozwolone dla tego przedziału
 Pin-Priority.
<item>100 do 1000: normalne priorytety.
 <p>Zmniejszanie wersji pakietu jest niedozwolone. Kilka kluczowych
 wartości Pin-Priority:
<list>
<item>990: priorytet ustawiony przez opcję <tt>--target-release</tt>
lub <tt>-t</tt> programu <manref name="apt-get" section="8">.
<item>500: priorytet dla wszystkich domyślnych plików pakietów.
<item>100: priorytet dla obecnie zainstalowanych pakietów.
</list>
<item>0 do 99: nieautomatyczne priorytety. (są one używane tylko, jeśli
pakiet nie jest zainstalowany i nie ma żadnej dostępnej wersji)
<item>mniej niż 0: wersja nigdy nie zostanie wybrana.
</list>
Ten sam efekt działania jak przy <tt>--target-release</tt> może być
osiągnięty przez ustawienie pliku
<file>/etc/apt/apt.conf</file> jak poniżej:
<example>
# echo 'APT::Default-Release "testing";' &gt;&gt; /etc/apt/apt.conf
</example>
Opcja lini poleceń <tt>--target-release</tt> oraz ustawienia w pliku
<file>/etc/apt/apt.conf</file> zastępują ustawienia pliku
<file>/etc/apt/preferences</file>. Miej to na uwadze podczas zabawy
z plikiem <file>/etc/apt/preferences</file>.

<sect id="survival">Polecenia zapewniające przetrwanie w Debianie
<p>
Posiadając tę wiedzę, możesz cieszyć się <strong>nieśmiertelnymi</strong>
aktualizacjami :-).

<sect1 id="bug-check">Sprawdzanie błędów w Debianie i poszukiwanie pomocy
<P>
Jeśli masz problemy z konkretnym pakietem, pamiętaj by najpierw sprawdzić
poniższe strony zanim będziesz szukać pomocy lub zgłaszać błąd.
(<prgn>lynx</prgn>, <prgn>links</prgn> oraz <prgn>w3m</prgn> działają tak
samo dobrze):
<example>
$ lynx &bugs;
$ lynx &bugs;<var>nazwa pakietu</var>   # jeśli znasz nazwę pakietu
$ lynx &bugs;<var>numer błędu</var>     # jeśli znasz numer błędu
</example>
Szukaj z Google (http://www.google.com/) dołączając ciąg „site:debian.org”.
<p>
Jeśli masz wątpliwości, to przeczytaj porządny podręcznik. Ustaw zmienną
<tt>CDPATH</tt> jak poniżej:
<example>
export CDPATH=.:/usr/local:/usr/share/doc
</example>
i wpisz
<example>
$ cd <var>nazwa pakietu</var>
$ pager README.Debian # jeśli istnieje
$ mc
</example>
<![%f-ref;[
Więcej pomocnych zasobów podanych jest w rozdziale <ref id="support">.
]]>
</sect1>

<sect1 id="apt-trouble">Problemy przy aktualizacji APT
<p>
Podczas aktualizacji w dystrybucji <tt>niestabilnej</tt>/<tt>testowej</tt>
mogą wystąpić problemy z zależnościami między pakietami tak, jak to zostało
opisane w rozdziale <ref id="upgrade-system">.
W większości przypadków jest to spowodowane tym, że aktualizowany pakiet
posiada nowe zależności, które nie są jeszcze spełnione. W takim przypadku,
problem możesz rozwiązać używając
<example>
# apt-get dist-upgrade
</example>
Jeśli to nie działa, powtarzaj jedno z poniższych poleceń dopóki problem
sam się nie rozwiąże:
<example>
# apt-get upgrade -f         # dalej aktualizuj nawet jeśli wystąpiły błędy
... lub
# apt-get dist-upgrade -f    # dalej aktualizuj całą dystrybucję nawet jeśli
                               wystąpiły błędy
</example>
<p>
Niektóre naprawdę zepsute skrypty aktualizujące mogą powodować trwałe problemy.
Najlepiej w takim przypadku przyjrzeć się skryptom
<file>/var/lib/dpkg/info/<var>nazwapakietu</var>.{post-,pre-}{install,removal}</file>
dla danego pakietu, a następnie uruchomić:
<example>
# dpkg --configure -a    # konfiguruje wszystkie częściowo zainstalowane pakiety
</example>
<p>
Jeśli skrypt mówi o brakującym pliku konfiguracyjnym, poszukaj odpowiedniego
pliku w katalogu <file>/etc</file>. Jeśli istnieje szukany plik z rozszerzeniem
<tt>.new</tt> (lub podobnym), zmień nazwę tego pliku (za pomocą <prgn>mv</prgn>)
tak, by usunąć rozszerzenie.
<p>
Problemy z zależnościami mogą też występować podczas instalacji w dystrybucji
<tt>unstable</tt>/<tt>testing</tt>. Są jednak sposoby na obejście zależności.
<example>
# apt-get install -f <var>pakiet</var> # pomiń zepsute zależności
</example>
<p>
Innym sposobem na wyjście z tej sytuacji jest użycie pakietu
<package>equivs</package>.
Zobacz <file>&f-equivs;</file><![%f-ref;[ jak również <ref id="equivs">]]>.
</sect1>

<sect1 id="rescue-dpkg">Ratowanie przy użyciu <prgn>dpkg</prgn>
<p>
Doraźny ratunek zepsutego <prgn>dselect</prgn> (APT) może być przeprowadzony
na całkowicie zepsutym systemie przy użyciu tylko <prgn>dpkg</prgn> bez
APT:
<example>
# cd /var/cache/apt/archives
# dpkg -i libc6* libdb2* perl*
# dpkg -i apt* dpkg* debconf*
# dpkg -i *  # aż nie pojawi się żaden błąd
</example>
Jeśli brakuje jakiegoś pakietu, ściągnij go z
<url id="&mirror-site;" name="serwerów lustrzanych"> przy pomocy:
<example>
# mc            # użyj „FTP link” wskazując serwer FTP Debiana
</example>
Od niedawna, właściwe pakiety na serwerach HTTP/FTP mogą nie znajdować
się w katalogu <file>/dist</file>, ale raczej w nowym <file>/pool</file>.
<![%f-ref;[
(Zobacz też <ref id="pools">.)
]]>
<p>
Ściągnięty plik zainstaluj jak poniżej:
<example>
# dpkg -i /var/cache/apt/archives/<var>plikpakietu.deb</var>
</example>
W przypadku niespełnionych zależności, napraw je lub użyj poniższych poleceń:
<example>
# dpkg --ignore-depends=<var>pakiet1</var>,... -i <var>plikpakietu.deb</var>
# dpkg --force-depends -i <var>plikpakietu.deb</var>
# dpkg --force-depends --purge <var>pakiet</var>
# dpkg --force-confmiss -i <var>plik pakietu.deb</var> # zainstaluj brakujące
pliki konfiguracyjne
</example>
</sect1>

<sect1 id="recover-status">Przywracanie danych wyboru pakietów
<p>
Jeśli z jakiekogoś powodu plik <file>/var/lib/dpkg/status</file>
zostanie uszkodzony, &debian; straci dane wyboru pakietów i przez
to stanie się nie do końca sprawny. Poszukaj starego pliku
<file>/var/lib/dpkg/status</file> w <file>/var/lib/dpkg/status-old</file>
lub <file>/var/backups/dpkg.status.*</file>.
<p>
Umieszczanie <file>/var/backups/</file> na osobnej  partycji jest dobrym
pomysłem, ponieważ katalog ten zawiera wiele ważnych dla systemu danych.
<p>
Jeśli stary plik <file>/var/lib/dpkg/status</file> nie jest dostępny, nadal
możesz przywrócić informacje z katalogów w <file>/usr/share/doc/</file>.
<example>
# ls /usr/share/doc | \
  grep -v [A-Z] | \
  grep -v '^texmf$' | \
  grep -v '^debian$' | \
  awk '{print $1 " install"}' | \
  dpkg --set-selections
# dselect --expert # przeinstaluj system, odznacz, jeśli trzeba
</example>

<sect1 id="rescue-var">Przywracanie systemu po awarii <file>/var</file>
<p>
Ponieważ katalog <file>/var</file> zawiera regularnie uaktualniane dane takie,
jak poczta, jest on podatny na wszelkiego rodzaju uszkodzenia. Oddzielenie
tego katalogu na innej, niezależnej partycji zmniejsza ryzyko wystąpienia
problemów. Jeśli zdarzy się katastrofa, wtedy możesz przebudować katalog
<file>/var</file>, by przywrócić sprawność systemu.
<p>
Najpierw zdobądź szkielet zawartości <file>/var</file> z minimalnego,
działającego systemu &debian; w tej samej lub starszej wersji, np.
z <file><url id="&var-tar-gz;" name="var.tar.gz"></file>, i umieść go w katalogu
głównym zepsutego systemu. Następnie wykonaj poniżesze kroki:
<example>
# cd /
# mv var var-old      # jeśli jakieś przydatne dane pozostały
# tar xvzf var.tar.gz # użyj szkieletu Woody
# aptitude            # lub dselect
</example>
To powinno postawić system na nogi. Możesz przyspieszyć przywracanie
wyborów pakietów używając sposobu opisanego w rozdziale
<ref id="recover-status">.
([FIXME]: Ta procedura wymaga więcej testów do potwierdzenia poprawności.)
</sect1>

<sect1 id="un-bootable">Instalowanie pakietu w niestartującym systemie
<p>
Uruchom Linuksa używając płyty lub dyskietki ratunkowej Debiana lub
alternatywnej partycji w przypadku tzw. multi-bootu.
<![%f-ref;[
Zobacz <ref id="booting">.
]]>
Zamontuj partycję główną niestartującego systemu w <file>/target</file>
i skorzystaj z <prgn>dpkg</prgn> w trybie instalacji w środowisku chroot.
<example>
# dpkg --root /target -i <var>plikpakietu.deb</var>
</example>
Następnie skonfiguruj pakiet i popraw wszelkie problemy.
<p>
Tak przy okazji - jeśli to <prgn>lilo</prgn> uniemożliwia start systemu,
możesz go uruchomić używając standardowego dysku ratunkowego Debiana.
W lini zachęty programu startującego wpisz (zakładając, że twoją główną
partycją jest <file>/dev/hda12</file> i chcesz uruchomić system na poziomie
startu (runlevel) 3):
<example>
boot: rescue root=/dev/<var>hda12</var> 3
</example>
W ten sposób wystartujesz prawie w pełni funkcjonalny system z jądrem
ładowanym z dyskietki (mogą jednak wystąpić pewne problemy spowodowane
brakiem niektórych funkcji jądra lub modułów).
</sect1>

<sect1>Co robić, gdy polecenie <prgn>dpkg</prgn> nie działa?
<p>
Niedziałający <prgn>dpkg</prgn> może uniemożliwić instalację jakiegokolwiek
pliku <tt>.deb</tt>. Poniższa procedura pomoże Ci naprawić tą sytuację
(w pierwszej linijce zastąp „links” nazwą twojej ulubionej przeglądarki
internetowej):
<example>
$ links http://<var>http.us.debian.org</var>/debian/pool/main/d/dpkg/
  ... ściągnij dobry plik dpkg_<var>wersja</var>_<var>arch</var>.deb
$ su
password: *****
# ar x dpkg_<var>version</var>_<var>arch</var>.deb
# mv data.tar.gz /data.tar.gz
# cd /
# tar xzfv data.tar.gz
</example>
Dla architektury <tt>i386</tt> jako adresu możesz użyć
<tt>http://packages.debian.org/dpkg</tt>.
</sect1>

</sect>

<sect id="debian-package">Polecenia prowadzące do nirwany w Debianie
<p>
Te polecenia uchronią człowieka od wiecznego
cierpienia w piekle aktualizacji i pozwolą osiągnąć mu stan
<strong>nirwany</strong>. :-)

<sect1 id="info-file">Informacje o pliku
<p>
Aby odnaleźć nazwę pakietu, do którego należy dany plik wpisz:
<example>
$ dpkg {-S|--search} wzorzec # szukaj wg. wzorca w zainstalowanych pakietach
$ wget http://ftp.us.debian.org/debian/dists/<var>sarge</var>/<var>Contents-i386.gz</var>
$ zgrep -e pattern <var>Contents-i386.gz</var>
                             # znajdź wg. wzoru nazwę plików w archiwum Debiana
</example>
Możesz też użyć specjalnie do tego celu przeznaczonych narzędzi:
<example>
# apt-get install dlocate
$ dlocate <var>nazwa_pliku</var>          # szybsza wersja dpkg -L oraz dpkg -S
...
# apt-get install auto-apt   # narzędzie instalujące pakiet na życzenie
# auto-apt update            # tworzenie pliku bazy dla auto-apt
$ auto-apt search <var>wzorzec</var>
                             # szukaj wg. wzorca we wszystkich pakietach
</example>
</sect1>

<sect1 id="info-package">Informacje o pakiecie
<p>
APT pozwala na przeszukiwanie i wyświetlanie informacji pobranych z archiwum
pakietów. Upewnij się, że APT pobiera prawidłowe archiwa (plik
<file>/etc/apt/sources.list</file>).
Jeśli chcesz zobaczyć jaki jest stosunek pakietów
z <tt>testing</tt>/<tt>unstable</tt> do tych zainstalowanych, użyj
<tt>apt-cache policy</tt>.
<example>
# apt-get   check              # aktualizuje cache i sprawdza błędne pakiety
$ apt-cache search  <var>wzorzec</var>     # szuka pakietu wg. podanego wzorca (szuka w opisach)
$ apt-cache policy  <var>pakiet</var>      # informacje o priorytecie i dystrybucji pakietu
$ apt-cache show -a <var>pakiet</var>      # pokazuje opis pakietu ze wszystkich dystrybucji
$ apt-cache showsrc <var>pakiet</var>      # pokazuje opis pakietu źródłowego
$ apt-cache showpkg <var>pakiet</var>      # informacje o pakiecie dla odpluskiwania
# dpkg  --audit|-C             # szuka częściowo zainstalowanych pakietów
$ dpkg {-s|--status} <var>pakiet</var> ... # pokazuje opis zainstalowanego pakietu
$ dpkg -l <var>pakiet</var> ...            # stan zainstalowanego pakietu (po jednej lini na pakiet)
$ dpkg -L <var>pakiet</var> ...            # pokazuje listę plików zainstalowanych przez pakiet
</example>
<!-- Erase this when manual page gets fixed.  FIXME -->
<tt>apt-cache showsrc</tt> jest nieudokumentowane w Woodym, ale działa :).
<p>
Możesz też znaleźć informacje o pakiecie w (ja używam <tt>mc</tt> do
przeglądania poniższych):
<example>
/var/lib/apt/lists/*
/var/lib/dpkg/available
</example>
Porównanie poniższych plików da Ci informacje o tym, co dokładnie
działo się w ciągu ostatnich kilku sesji instalacyjnych.
<example>
/var/lib/dpkg/status
/var/backups/dpkg.status*
</example>

</sect1>

<sect1 id="apt-get-auto">Niepilnowana instalacja przy użyciu APT
<p>
Żeby móc instalować pakiety bez potrzeby pilnowania przebiegu instalacji,
dodaj poniższa linię do pliku <file>/etc/apt/apt.conf</file>:
<example>
Dpkg::Options {"--force-confold";}
</example>
Jest to równoważne uruchomieniu <tt>apt-get -q -y <var>pakiet</var></tt>.
Korzystaj z tej opcji bardzo ostrożnie, ponieważ sprawia ona, że automatycznie
zostaje wybrana odpowiedź „tak” na każde pytanie, co może sprawić Ci wiele
problemów. Przeczytaj <manref name="apt.conf" section="5"> oraz
<manref name="dpkg" section="1">.
<p>
Możesz skonfigurować dowolny pakiet później za pomocą techniki opisanej
w rozdziale <ref id="reconfigure">.

<sect1 id="reconfigure">Ponowna konfiguracja zainstalowanych pakietów
<p>
Poniższe polecenia ponownie konfigurują dowolny, już zainstalowany pakiet.
<example>
# dpkg-reconfigure --priority=<var>medium</var> <var>pakiet</var> [...]
# dpkg-reconfigure --all   # przekonfiguruj wszystkie pakiety
# dpkg-reconfigure locales # wygeneruj dodatkowe locale
# dpkg-reconfigure --p=<var>low</var> xserver-xfree86 # przekonfiguruj serwer X
</example>
Przekonfiguruj <prgn>debconf</prgn>, jeśli chcesz zmienić na stałe typ
zapytań <prgn>debconf</prgn>.
<p>
Niektóre programy posiadają również własne skrypty konfiguracyjne.
<example>
apt-setup     - tworzy /etc/apt/sources.list
install-mbr   - instaluje menedżera Master Boot Record
tzconfig      - ustawia lokalną strefę czasową
gpmconfig     - konfiguruje demona myszy gpm
eximconfig    - konfiguruje Exim (MTA)
texconfig     - konfiguruje teTeX
apacheconfig  - konfiguruje Apache (httpd)
cvsconfig     - konfiguruje CVS
sndconfig     - konfiguruje system dźwięku
...
update-alternatives - ustawia domyślne polecenia, np. vim jako vi
update-rc.d         - zarządza skryptami startowymi System-V
update-menus        - system menu Debiana
...
</example>
</sect1>

<sect1 id="remove">Usuwanie i czyszczenie pakietów
<p>
Usunięcie pakietu pozostawiając jego konfigurację:
<example>
# apt-get remove <var>pakiet</var> ...
# dpkg  --remove <var>pakiet</var> ...
</example>
Usunięcie pakietu wraz z jego konfiguracją:
<example>
# apt-get remove --purge <var>pakiet</var> ...
# dpkg    --purge        <var>pakiet</var> ...
</example>
</sect1>

<sect1 id="hold">Wstrzymywanie starszych pakietów
<p>
Przykładowe wstrzymanie pakietów <package>libc6</package>
oraz <package>libc6-dev</package> dla programu <prgn>dselect</prgn>
oraz dla <tt>apt-get -u upgrade <var>pakiet</var></tt> odbywa się
następująco:
<example>
# echo -e "libc6 hold\nlibc6-dev hold" | dpkg --set-selections
</example>
Stan "hold" nie powstrzyma polecenia <tt>apt-get -u install
<var>pakiet</var></tt>.
By wstrzymać pakiet przez wymuszanie automatycznego zmniejszenia wersji
dla poleceń <tt>apt-get -u upgrade <var>pakiet</var></tt> lub
<tt>apt-get -u dist-upgrade</tt>,
dodaj poniższe do pliku <file>/etc/apt/preferences</file>:
<example>
Package: libc6
Pin: release a=stable
Pin-Priority: 2000
</example>
Tutaj pole <tt>Package:</tt> nie może przyjmować wpisów takich jak
<tt>libc6*</tt>. Jeśli musisz trzymać zsynchronizowane wersje wszystkich
pakietów binarnych powiązanych z pakietem źródłowym <package>glibc</package>
musisz je oddzielnie wypisać.
<p>
Poniższe polecenie wyświetli listę pakietów wstrzymanych:
<example>
dpkg --get-selections "*"|grep -e "hold$"
</example>
</sect1>

<sect1 id="mixedsys">Mieszany system - <tt>stable</tt>/<tt>testing</tt>/<tt>unstable</tt>
<p>
<prgn>apt-show-versions</prgn> pokaże Ci listę dostępnych wersji
pakietu wg. dystrybucji, z której pochodzi.
<example>
$ apt-show-versions | fgrep /testing | wc
... jak dużo posiadasz pakietów z testing
$ apt-show-versions -u
... lista pakietów do uaktualnienia
$ apt-get install `apt-show-versions -u -b | fgrep /unstable`
... aktualizacja wszystkich niestabilnych pakietów do ich najnowszych wersji
</example>
</sect1>

<sect1 id="cache">Wyczyść buforowane pliki pakietów
<p>
Instalacja pakietów przy użyciu APT pozostawia pliki pakietów
w katalogu <file>/var/cache/apt/archives</file>, które muszą być
usuwane by zwolnić miejsce.
<example>
# apt-get autoclean # usuwa tylko zbędne pliki pakietów
# apt-get clean     # usuwa wszystkie przetrzymywane pliki pakietów
</example>
</sect1>


<sect1 id="record">Zapisanie/kopiowanie konfiguracji systemu
<p>
Poniższe polecenie tworzy lokalną kopię wyborów pakietów:
<example>
# debconf-get-selections &gt; <var>debconfsel.txt</var>
# dpkg --get-selections "*" &gt; <var>myselections</var>   # lub \* zamiast "*"
</example>
<tt>"*"</tt> sprawia, że w pliku <tt><var>myselections</var></tt> znajdą
się również pozycje odnoszące się do pakietów ze stanem „purge”.
<p>
Możesz skopiować ten plik na inny komputer i zainstalować go za pomocą
poniższych poleceń:
<example>
# dselect update
# debconf-set-selections &lt; <var>debconfsel.txt</var>
# dpkg --set-selections &lt; <var>myselections</var>
# apt-get -u dselect-upgrade    # <var>lub</var> dselect install
</example>
</sect1>

<sect1 id="port">Przeniesienie pakietu do systemu <tt>stabilnego</tt>
<p>
W przypadku częściowych uaktualnień systemu <tt>stable</tt>, pożądane jest
przebudowywanie pakietów w jego własnym środowisku korzystając z pakietu
źródłowego. Pozwala to uniknąć masowych uaktualnień spowodowanych ich
zależnościami. Przede wszystkim dodaj poniższe linie do pliku
<file>/etc/apt/sources.list</file>:
<example>
deb-src &http-us;debian testing \
 main contrib non-free
deb-src &http-us;debian unstable \
 main contrib non-free
</example>
W tym przykładzie każdy wpis <tt>deb-src</tt> został rozbity na dwie
linie z powodu ograniczonego rozmiaru papieru podczas drukowania. Sam wpis
w <file>sources.list</file> powinien składać się z jednej lini.
<p>
Przyszła kolej na ściągnięcie źródeł i zbudowanie lokalnego pakietu:
<example>
$ apt-get update # uaktualnij listę ze źródłami pakietów
$ apt-get source <var>pakiet</var>
$ dpkg-source -x <var>pakiet.dsc</var>
$ cd <var>pakiet-wersja</var>
  ... przejrzyj wymagane pakiety (Build-depends w pliku .dsc)
      i również je zainstaluj. Potrzebujesz także pakietu
      'fakeroot'.

$ dpkg-buildpackage -rfakeroot

  ...lub (bez sygnatury)
$ dpkg-buildpackage -rfakeroot -us -uc # jeśli trzeba, użyj później „debsign”

  ...Następnie zainstaluj pakiet
$ su -c "dpkg -i <var>plikpakietu.deb</var>"
</example>
Zazwyczaj należy też zainstalować kilka pakietow z końcówką „-dev”, by
spełnić zależności pakietów. <prgn>debsign</prgn> znajduje się w pakiecie
<package>devscripts</package>. <prgn>auto-apt</prgn> może pomóc
przy spełnianiu tych zależności. Użycie <prgn>fakeroot</prgn>
pozwala uniknąć niepotrzebnego korzystania z konta roota.
<p>
W Woodym, sprawy związane z zależnościami mogą być ułatwione.
Przykładowo, by skompilować występujący tylko w formie źródłowej pakiet
<package>pine</package>:
<example>
# apt-get build-dep pine
# apt-get source -b pine
</example>
</sect1>

<sect1 id="local">Lokalne archiwum pakietów
<p>
Aby utworzyć zgodne z systemem APT i <prgn>dselect</prgn> lokalne archiwum
pakietów, należy utworzyć plik <file>Packages</file>, a same pliki pakietów
muszą być umieszczone
w specjalnym drzewie katalogów.
<p>
Lokalne archiwum pakietów <tt>deb</tt> podobne do oficjalnego archiwum Debiana
tworzy się w następujący sposób:
<example>
# apt-get install dpkg-dev
# cd <var>/usr/local</var>
# install -d <var>pool</var> # tutaj umieszczane są pakiety
# install -d dists/<var>unstable</var>/<var>main</var>/binary-<var>i386</var>
# ls -1 <var>pool</var> | sed 's/_.*$/ <var>priority</var> <var>section</var>/' | uniq &gt; <var>override</var>
# editor <var>override</var> # zmień <var>priority</var> oraz <var>section</var>
# dpkg-scanpackages <var>pool</var> <var>override</var> <var>/usr/local</var>/ \
   &gt; dists/<var>unstable</var>/<var>main</var>/binary-<var>i386</var>/Packages
# cat &gt; dists/<var>unstable</var>/<var>main</var>/Release &lt;&lt; EOF
Archive: <var>unstable</var>
Version: <var>3.0</var>
Component: <var>main</var>
Origin: <var>Local</var>
Label: <var>Local</var>
Architecture: <var>i386</var>
EOF
# echo "deb file:<var>/usr/local</var> <var>unstable</var> <var>main</var>" \
   &gt;&gt; /etc/apt/sources.list
</example>
<p>
Można też użyć szybszego sposobu:
<example>
# apt-get install dpkg-dev
# mkdir <var>/usr/local/debian</var>
# mv <var>/ścieżka/do/pakietu.deb</var> <var>/usr/local/debian</var>
# dpkg-scanpackages <var>/usr/local/debian</var> /dev/null | \
  gzip - &gt; <var>/usr/local/debian</var>/Packages.gz
#  echo "deb file:<var>/usr/local/debian</var> ./" &gt;&gt; /etc/apt/sources.list
</example>
<p>
Zdalny dostęp do utworzonych archiwów jest możliwy za pośrednictwem HTTP
lub FTP. Należy wówczas odpowiednio ustawić wpisy w pliku
<file>/etc/apt/sources.list</file>.

<sect1 id="alien">Zmiana lub instalacja obcego pakietu binarnego
<p>
<package>alien</package> pozwala na konwersję pakietów binarnych z formatów
<tt>rpm</tt> Redhata, <tt>slp</tt> Stampede, <tt>tgz</tt> Slackware oraz
<tt>pkg</tt> Solarisa na format pakietu <tt>deb</tt> Debiana.
Jeśli chcesz użyć pakietu z innej dystrybucji Linuksa, możesz użyć programu
<prgn>alien</prgn> do zmiany go na twój preferowany format i późniejszej
instalacji. <package>alien</package> obsługuje również pakiety LSB.
</sect1>

<sect1 id="debsums">Sprawdzanie poprawności zainstalowanych plików
<p>
<prgn>debsums</prgn> sprawdza poprawność zainstalowanych plików pakietów
na podstawie sum kontrolnych MD5. Niektóre z pakietów nie posiadają sum
MD5. W takim przypadku tymczasowym rozwiązaniem dla administratorów jest:
<example>
# cat >>/etc/apt/apt.conf.d/90debsums
DPkg::Post-Install-Pkgs {"xargs /usr/bin/debsums -sg";};
^D
</example>
wg. pomysłu Joerga Wendlanda <email>joergland@debian.org</email>  (nieprzetestowane).

<![%f-ref;[
<sect1 id="spy">Zoptymalizowane <file>sources.list</file>
<p>
Wymyślne sposoby optymalizacji pliku <file>sources.list</file> nie spowodowały
u mnie (w USA), znaczącej poprawy. Ręcznie wybrałem najbliższe serwery przy
użyciu <prgn>apt-setup</prgn>.
<p>
<prgn>apt-spy</prgn> automatycznie tworzy <file>sources.list</file>, kierując
się opóźnieniami i przepustowością. <prgn>netselect-apt</prgn> tworzy
bardziej kompletny <file>sources.list</file>, ale używa gorszej metody
do wybrania najlepszego serwera lustrzanego (porównanie czasów odpowiedzi
na pingi).
<example>
# apt-get install apt-spy
# cd /etc/apt ; mv sources.list sources.list.org
# apt-spy -d testing -l sources.apt
</example>
</sect1>

]]>


</sect>

<sect id="pecuriarities">Inne osobliwości Debiana

<sect1 id="dpkg-divert">Polecenie <prgn>dpkg-divert</prgn>
<p>
<!-- copied from manual page -->
<strong>Objazdy</strong> (diversions) są metodą zmuszenia <prgn>dpkg</prgn> w
<strong>zmienionej</strong>, w stosunku do domyślnej lokalizacji.
<strong>Objazdy</strong> mogą być używane przez skrypty pakietu Debiana
do przeniesienia pliku, gdy ten powoduje konflikt. Administrator systemu
może też użyć dywersji do zastąpienia pliku konfiguracyjnego pakietu lub
gdy pewne pliki (nieoznaczone jako <strong>conffiles</strong>) muszą być
zachowane przez <prgn>dpkg</prgn>, podczas instalacji nowej wersji pakietu je
zawierającego <![%f-ref;[
(zobacz <ref id="conffile">)]]>.
<example>
# dpkg-divert [--add]  <var>filename</var> # dodaj „dywersję”
# dpkg-divert --remove <var>filename</var> # usuń „dywersję”
</example>
Zazwyczaj nie należy stosować <prgn>dpkg-divert</prgn>, gdy nie jest
to absolutnie potrzebne.
</sect1>

<sect1 id="equivs">Pakiet <package>equivs</package>
<p>
Jeśli własnoręcznie kompilujesz program, najlepiej jest uczynić go prawdziwym,
lokalnym pakietem zdebianizowanym (<tt>*.deb</tt>).
W ostateczności użyj <tt>equivs</tt>.
<example>
Package: equivs
Priority: extra
Section: admin
Description: Circumventing Debian package dependencies
 This is a dummy package which can be used to create Debian
 packages, which only contain dependency information.
</example>
</sect1>

<sect1 id="alternatives">Alternatywne polecenia
<p>
Użyj programu <prgn>update-alternatives</prgn>, jeśli chcesz, by
polecenie <prgn>vi</prgn> uruchamiało program <prgn>vim</prgn>:
<example>
# update-alternatives --display vi
...
# update-alternatives --config vi
  Selection    Command
-----------------------------------------------
      1        /usr/bin/elvis-tiny
      2        /usr/bin/vim
*+    3        /usr/bin/nvi

Enter to keep the default[*], or type selection number: 2
</example>
Poszczególne pozycje w systemie alternatyw Debiana są trzymane
jako dowiązania symboliczne w katalogu <file>/etc/alternatives</file>.
<p>
Jeśli chcesz ustawić swoje ulubione środowisko graficzne X,
użyj <prgn>update-alternatives</prgn> na
<file>/usr/bin/x-session-manager</file> oraz
<file>/usr/bin/x-window-manager</file>.
<![%f-ref;[
Szczegóły w <ref id="custom-x">.
]]>
<p>
<file>/bin/sh</file> jest bezpośrednim dowiązaniem do <file>/bin/bash</file>
lub <file>/bin/dash</file>. Bezpieczniej jest użyć <file>/bin/bash</file>,
by zachować kompatybilność ze skryptami skażonymi starą składnią Basha.
Lepiej jednak zdyscyplinować się do używania <file>/bin/dash</file>, w celu
wymuszenia zgodności z normą POSIX.
<file>/bin/dash</file>. Aktualizacja jądra Linuksa do wersji 2.4 skłania
się do użycia <file>/bin/dash</file>.
</sect1>

<sect1 id="sys-v">System-V <prgn>init</prgn> i poziomy startu (runlevels)
<p>
W pliku <file>/etc/inittab</file> można ustawić domyślny poziom startu.
<p>
W przeciwieństwie do innych dystrybucji, Debian w pełni pozostawia zarządzanie
poziomami startu administratori systemu. Zarządzanie skryptami <prgn>init</prgn>
w stylu System-V w Debianie powinno odbywać się za pośrednictwem skryptu
<prgn>update-rc.d</prgn>.
<p>
Poniżej znajduje się przykład polecenia, które tak ustawi skrypty startowe (skrypty
<prgn>init</prgn>), by skrypt <file>/etc/init.d/<var>nazwa</var></file> był
uruchamiany na poziomach startu (runlevel) 1,2,3, a zatrzymywany na
poziomach 4 i 5 z priorytetem równym 20 (normalnym).
<example>
# update-rc.d <var>nazwa</var> start 20 1 2 3 . stop 20 4 5 .
</example>
Usunięcie dowiązań symbolicznych z pozostawieniem skryptu w <prgn>init.d</prgn>:
<example>
# update-rc.d -f <var>nazwa</var> remove
</example>
Jeśli chodzi o edycję poziomów startu, nigdy nie używam narzędzi do tego celu.
Poszczególne elementy zmieniam ręcznie za pomocą <prgn>mv</prgn> w lini poleceń
<prgn>mc</prgn>, kopiując dowiązania za pomocą Alt-Enter. Przykład:
<example>
# mv S99xdm K99xdm # wyłącz xdm (X display manager)
</example>
Również wyłączam demony przez wstawienie <tt>exit 0</tt> na początku
skryptu w <prgn>init.d</prgn>. Ot, takie szybkie rozwiązanie. W końcu są
to pliki oznaczone jako <tt>conffile</tt>.
</sect1>

<sect1 id="disables">Wyłączone usługi demonów
<p>
Bezpieczeństwo systemu jest bardzo ważną rzeczą w Debianie, który
zakłada, że administrator jest osobą kompetentną. Dlatego czasami
łatwość użycia stoi na drugim miejscu, a wiele usług demonów domyślnie
ma ustawiony najwyższy poziom bezpieczeństwa z włączonymi tylko nielicznymi
usługami (lub nawet żadnymi).
<p>
Uruchom <tt>ps aux</tt> lub przejrzyj zawartość <file>/etc/init.d/*</file> oraz
<file>/etc/inetd.conf</file>, jeśli masz jakiekolwiek wątpliwości (odnośnie
Exima, DHCP, ...). Sprawdź również <![%f-ref;[opisany
w <ref id="loginctrl"> ]]> plik <file>/etc/hosts.deny</file>. Pomocne może się
też okazać polecenie <prgn>pidof</prgn> (patrz
<manref name="pidof" section="8">).
<p>
W ostatnich wersjach Debiana, X11 domyślnie nie zezwala na (zdalne) połączenia
TCP/IP.
<![%f-ref;[
Patrz też <ref id="xtcp">.
]]>
Przekazywanie X przez SSH również jest wyłączone.
<![%f-ref;[
Patrz <ref id="xssh">.
]]>
</sect1>
</sect>

</chapt>
