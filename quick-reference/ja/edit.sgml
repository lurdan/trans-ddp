<!-- CVS revision of this document "$Revision: 1.4 $"  -->
<!-- CVS revision of original english document "1.29"  -->
<!--Line width ruler (ruler uses 78 characters) 34567890123456789012345-->

<chapt id="edit">エディタ

<sect id="pop-editor">有名なエディタ
<p>
Linux はコンソールテキストエディタの多くの代替品を提供します。それらは:
<list compact>
<item><prgn>vim</prgn>:    力強く軽量な BSD の遺産であるエディタ。VI iMproved.
<item><prgn>emacs</prgn>:  究極かつ巨大な GNU の遺産であるエディタ。
 RMS (Richard M. Stallman) オリジナル。
<item><prgn>xemacs</prgn>: 元々は Lucid による Emacs: The Next Generation。
<item><prgn>mcedit</prgn>: 新参の GNU エディタ。元々は <prgn>mc</prgn> の
 内部組込みエディタ。<ref id="mcedit"> をご覧ください。
<item><prgn>ae</prgn>:     Potato のデフォルトのエディタ。やめときましょう。
<item><prgn>nano</prgn>:   Woody のデフォルトのエディタ。<prgn>pico</prgn>
 をエミュレート。
<item><prgn>joe</prgn>:    WordStar または TurboPascal の古豪。
<item><prgn>jed</prgn>:    高速かつフル機能を持った、Emacs のキーバインディングを持つ
メニュ指向のエディタ。
<item><prgn>jove</prgn>:   Emacs キーバインディングを持つ非常に小さなエディタ。
<item><prgn>nvi</prgn>:    新 vi。オリジナルの vi と同じバグを持つ。
</list>
<p>
デフォルトのエディタを変更するには、<tt>update-alternatives --config editor</tt>を
使用してください。又、使用するエディタを決定するために環境変数
<tt>EDITOR</tt> 並びに <tt>VISUAL</tt> を用いることには多くの問題があります。
<ref id="mcedit"> をご覧ください。
<p>
また、数種の X ベースのテキストエディタも言及する価値があります:
<list compact>
<item><prgn>gvim</prgn>: GUI 付きの Vim (<package>vim</package> および 
<package>vim-gtk</package> パッケージ)
<item><prgn>emacs</prgn>:  唯一の真の Emacs (X を自動検知)。
<item><prgn>xemacs</prgn>:  次世代の Emacs (X を自動検知)。
</list>
これらの xclient コマンドは <tt>-fn <var>a24</var></tt> のような標準的な
オプションを引数に取り、私のような古株にも優しく使えます :) 
<ref id="xclnt"> をご覧ください。
</sect>

<sect id="bin-editor">緊急用エディタ
<p>
<file>/bin/</file> にはいくつかのエディタが存在します。<file>/usr/</file> に
アクセスできない場合にファイルの編集を容易にするため、これらのエディタのうち
一つをインストールすべきです。
<p>
<list compact>
<item><package>elvis-tiny</package>: 最小限の vi エディタ 
(<prgn>vi</prgn> で起動)
<item><package>nano-tiny</package>:  最小限の 非 vi エディタ 
(<prgn>nano-tiny</prgn> で起動)
<item><package>nano</package>:  最小限の 非 vi エディタ 
(<prgn>nano</prgn> で起動) (Sarge)
<item><package>ed</package>:         最小限のエディタ 
(常に存在するが使用しがたい)
</list>
<p>

<sect>Emacs と Vim

<sect1>Vim の使用ヒント
<p>
Vim 起動中に &lt;F1&gt; を押すことにより、 "VIM - main help file" ドキュメント
をご覧ください。

<example>
&lt;F1&gt;           ヘルプ
&lt;esc&gt;          ノーマルモードに戻る
V              ビジュアルモード
i              挿入モード
:              コマンドライン
:set tw=72     テキスト幅を 72 に設定
&lt;F11&gt;    挿入(ペースト)モード
:r! date -R    RFC-822 日付を挿入
q<var>a</var>             レジスタ <var>a</var> にキーストロークを記録
q              キーストロークの記録を停止
@<var>a</var>             レジスタ <var>a</var> からキーストロークを実行
:edit <var>foo.txt</var>  <var>foo.txt</var> をロードし、ファイルを編集
:wnext         現在のファイルを保存し次のファイルを編集
</example>

<tt>q</tt> および <tt>@</tt> はシンプルなマクロ記録および再生に使用できます。
例えば、カーソル位置の単語に HTML イタリックタグを挿入するマクロを作成するには、
<tt>qii&lt;i&gt;^[ea&lt;/i&gt;^[q</tt> と入力してください。(ここで <tt>^[</tt>
は ESC キー入力) そして単語の始まりで <tt>@i</tt> を入力すると、&lt;i&gt; 
および &lt;/i&gt; タグが挿入されます。
<p>
<ref id="vimgpg"> もご覧ください。
</sect1>

<sect1>Emacs の使用ヒント
<p>
<example>
&lt;F1&gt;                ヘルプ
&lt;F10&gt;               メニュ
C-u M-! date -R     RFC-822 日付を挿入
</example>
</sect1>

<sect1>エディタを起動
<p>
<example>
エディタを起動:                   emacs filename  vim filename
vi 互換モードで起動:                         vim -C
vi 非互換モードで起動:                     vim -N
コンパイル時のデフォルトで起動:     emacs -q        vim -N -u NONE
</example>
</sect1>

<sect1 id="editkey">エディタのコマンドのサマリ (Emacs, Vim)
<p>
<example>
終了:                           C-x C-c         :qa /:wq /:xa /:q!
中断/コマンドモード:          C-g             &lt;esc&gt;
1字戻る(左):                 C-b             h
1字進む(右):                 C-f             l
1行進む(下):                     C-n             j
1行戻る(上):                   C-p             k
行の先頭に飛ぶ(^):               C-a             0
行の最後に飛ぶ($):                 C-e             $
複数回コマンドを実行:              C-u nnn cmd     nnn cmd
複数のコマンド:              M-digitkey cmd
ファイルの保存:                      C-x C-s         :w file
バッファの先頭に飛ぶ:            M-&lt;             1G
バッファの最後に飛ぶ:                  M-&gt;             G
1スクリーン先にスクロール:        C-v             ^F
半スクリーン先にスクロール:                      ^D
1行先にスクロール:                          ^E
1行後ろにスクロール:       M-v             ^B
半スクリーン後ろにスクロール:                     ^U
1スクリーン後ろにスクロール:                         ^Y
他のウィンドウにスクロール:        M-C-v
カーソルの下を削除:            C-d             x
カーソルから行末まで削除:      C-k             D
順方向インクリメンタル探索:                C-s
逆方向インクリメンタル探索:                C-r
順方向一括探索:                 C-s enter       /
逆方向一括探索:                 C-r enter       ?
順方向正規表現探索:                 M-C-s
逆方向正規表現探索:        M-C-r
順方向正規表現一括探索:                  M-C-s enter     /
逆方向正規表現一括探索:         M-C-r enter     ?
ヘルプ:                           C-h C-h         :help
Apropos:                   C-h a
キーバインドヘルプ:              C-h b           :help [key]
Info ヘルプ:                      C-h i
メジャーモードヘルプ:                C-h m
ヘルプチュートリアル:                  C-h t           :help howto
Undo:                           C-_             u
Redo:                           C-f             ^R
カーソル位置をマーク:           C-@             m{a-zA-Z}
マークした位置に移動、再入力で元に戻る:     C-x C-x
現在のファイルのマークに飛ぶ:                      '{a-z}
あらゆるファイルにおいてマークに飛ぶ:                          '{A-Z}
領域コピー:                    M-w             {visual}y
領域削除:                    C-w             {visual}d
Yank:           C-y             <![%FIXME;[p y ? XXX FIXME XXX]]>
以前削除したバッファを Yank:          M-y             p
領域をを大文字に変換:        C-x C-u         {visual}U
領域を小文字に変換:        C-x C-l         {visual}u
スペシャルキャラクタを挿入:        C-q octalnum/keystroke  
                                                ^V decimal/keystroke
置換:                     M-x replace-string      :&percnt;s/aaa/bbb/g
正規表現を用いた置換:            M-x replace-regexp      :&percnt;s/aaa/bbb/g
置換問合せ:              M-&percnt;                     :&percnt;s/aaa/bbb/gc
置換問合せ:              M-x query-replace
正規表現を用いた置換問合せ:           M-x query-replace-regexp
ファイルを開く:                      C-x C-f         :r file
ファイルをセーブ:                      C-x C-s         :w
全バッファのセーブ:               C-x s           :wa
別ファイルにセーブ:                        C-x C-w file    :w file
バッファのプロンプト:              C-x b
バッファ表示:                   C-x C-b         :buffers
読み込み専用にトグルする:               C-x C-q         :set ro
プロンプトを出し、バッファを削除する:         C-x k
縦に 2分割する:                 C-x 2           :split
横に 2分割する:               C-x 3           :vsplit (ver. 6)
他のウィンドウに移動する:           C-x o           ^Wp
現在のウィンドウを削除する:             C-x 0           :q
他のウィンドウを削除する:         C-x 1           ^Wo
シェルをバックグラウンド起動する:                M-x compile
バックグラウンド起動したシェルを殺す:           M-x kill-compilation
make を起動:                                       :make Makefile
エラーメッセージを調べる:            C-x`            :echo errmsg
シェルを起動し、記録する:           M-x shell       :!script -a tmp
...clean BS, ...                                :!col -b &lt;tmp &gt;record
シェルの記録を保存/再呼び出し:    C-x C-w record  :r record
シェルを起動する:                      M-! sh          :sh
コマンドを起動する:                    M-! cmd         :!cmd
コマンドを起動し、挿入する:         C-u M-! cmd     :r!cmd
フィルタを起動する:                     M-| file        {visual}:w file
フィルタを起動し、挿入する:          C-u M-| filter  {visual}:!filter
オプションを表示する                                     :se[t] {option}?
オプションをデフォルトにリセットする                     :se[t] {option}&
ブーリアンオプションをリセットする                         :se[t] no{option}
ブーリアンオプションをトグルする                           :se[t] inv{option}
72列でテキストをラップする                          :se tw=72
ラップしない                                     :se tw=0
自動インデント                                      :se ai
タブを広げる                                      :se et
特別なコマンド (mail)                          :se comments=n:&gt;,n:\|

GDB を起動                         M-x gdb                        
describe GDB mode               C-h m                          
1行進める                   M-s
次の行                       M-n
1命令進める (stepi)    M-i                            
現在のスタックフレームを終了      C-c C-f                        
続行する                        M-c                            
up arg frames                M-u             
down arg frames                 M-d                            
copy number from point, insert at the end 
                                C-x &                          
ブレークポイントを設定                 C-x SPC                        
</example>
</sect1>

<sect1>Vim の設定
<p>
Vim の全機能と文法強調を使用するには、<file>~/.vimrc</file> または
<file>/etc/vimrc</file> が次の行を含むようにしてください。
<example>
set nocompatible
set nopaste
set pastetoggle=&lt;f11&gt;
syn on
</example>
ペーストモードは端末でのカットアンドペースト操作にと自動インデントとの
干渉を避けることができます。これは単なる ":set noai" 以上のことを行います。
<p>
Vim への GnuPG の統合については <ref id="vimgpg"> をご覧ください。
</sect1>

<sect1>Ctags
<p>
<tt>apt-get install exuberant-ctags</tt> を行い、ソースファイルにおいて
<prgn>ctags</prgn> を起動します。<var>function_name</var> が始まる行に
ジャンプするため、Vim 上で<tt>:tag <var>function_name</var></tt> と
タイプします。Tag は C、C++、Java、Python 並びに他の多くの言語に対して
働きます。
<p>
Emacs でも同様の Ctags を利用できます。
</sect1>

<sect1>構文強調されたスクリーンから HTML ソースに変換
<p>
Vim のコマンドモードから <tt>so  \$VIMRUNTIME/syntax/2html.vim</tt> を
実行すると構文強調されたテキストから HTML テキストへの変換が行えます。
<tt>:w file.html</tt> および <tt>:q</tt> でセーブします。C コードなどで
役立ちます。
</sect1>

<sect1><prgn>vim</prgn> によりスクリーンを分割する
<p>
<prgn>vim</prgn> は複数に分割したスクリーン環境において複数のファイルを
編集可能です。詳細は <tt>:help usr_08.txt</tt> とタイプしてみてください。
<p>
異なったファイルに対してスクリーンを分割するには、vi コマンドプロンプトで
次のようにタイプします。
<example>
:split <var>another-file</var>
:vsplit <var>another-file</var>
</example>
又はシェルプロンプトにおいて
<example>
$ vi -o file1.txt file2.txt   # 水平分割
$ vi -O file1.txt file2.txt   # 垂直分割
</example>
を実行することによりマルチウィンドウの vi を実現できます。
<example>
$ vimdiff file.txt~ file.txt         # file.txt の最近の変更点を調べる
$ vimdiff file.en.sgml file.fr.sgml  # 翻訳版との相異点を調べる
$ gvimdiff file.txt~ file.txt        # X における上記コマンド
</example>
以上のコマンドによりオリジナルとバックアップファイル間の相異点をうまく表示
できます。SGML ではタグとマッチするので、SGML モードにおいて翻訳を比較すると
うまく動きます。
<p>
Ctrl-W コマンドを用いた特別なカーソル操作コマンドは次の通り:
<example>
Ctrl-W +      ウィンドウサイズを広げる
Ctrl-W -      ウィンドウサイズを狭める
Ctrl-W h      左のウィンドウに移動
Ctrl-W j      下のウィンドウに移動
Ctrl-W k      上のウィンドウに移動
Ctrl-W l      右のウィンドウに移動
...
</example>
スクリーンのスクロール制御には次のコマンドを使用してください。
<example>
:set scrollbind
:set noscrollbind
</example>
</sect1>

</sect>

</chapt>
