<!-- CVS revision of this document "$Revision: 1.7 $"  -->
<!-- CVS revision of original english document "1.68"  -->

<chapt id="kernel">Debian での Linux kernel
<p>
Debian には独自の kernel と関連モジュールの再構築方法があります。
<ref id="kernel-details"> をご覧ください。

<sect id="kernel-compile">Kernel 再構築
<p>
最新の Linux kernel をコンパイルする場合、<tt>unstable</tt> から
<prgn>gcc</prgn>、<prgn>binituls</prgn> と <prgn>modutils</prgn>
をインストールして使用すると役に立つかもしれません。
公式の情報を得るには、<file>&f-kernel-readme;</file>、特に最後尾を
ご覧ください。
<p>
常に変更が発生しているので、kernel のコンパイルは最も称賛される開発者
でさえも混乱を招きかねない難しい事項です。
<taglist compact>
<tag>Manoj Srivastava の発言
<item><tt>--initrd</tt> は Debian のみ cramfs パッチを必要とする。
<tag>Herbert Xu の発言
<item>間違っている。CRAMFS 以外のファイルシステムを使うならば
<file>/etc/mkinitrd/mkinitrd.conf</file> に MKIMAGE を必ず設定する必要がある。
</taglist>
<p>
常に注意して Manoj と Kent による <file>&f-kernel-readme;</file>
に頼ってください。最新版の kernel をコンパイルしようとしている場合、
最新の unstable 版の <package>kernel-package</package> パッケージを
確実にインストールしてください。
<p>
1 台のマシンのためにしか kernel をコンパイルする必要がないなら、
<tt>initrd</tt> は必要ありません。kernel-image パッケージにより供給される
kernel とほとんど同じにしたいため、私は initrd を用います。
もし <tt>initrd</tt> を使用するなら、<manref name="initrd" section="8"> 
と <manref name="mkinitrd.conf" section="5"> をご覧ください。
また、<url id="&bug-initrd;"> もご覧ください。
<sect1 id="kernel-debian">Debian 標準の方法
<p>
<package>kernel-package</package>, <prgn>gcc</prgn>, <prgn>binutils</prgn>,
そして <prgn>modutils</prgn> へのバグレポートに気を付けてください。
これらの最新版を使うことが必要です。
<p>
Debian system 上でソースから カスタム kernel をコンパイルするには、
特別な注意が必要です。複数の kernel-image を作成するには、
<tt>--append_to_version</tt> オプション付きで <prgn>make-kpkg</prgn> 
を用いてください。
<example>
# apt-get install debhelper modutils kernel-package libncurses5-dev
# apt-get install kernel-source-<var>2.4.18</var>   # 最新版を使用
# apt-get install fakeroot
# vi /etc/kernel-pkg.conf                # 名前と email アドレスを入力
$ cd /usr/src                            # 構築ディレクトリ
$ tar --bzip2 -xvf kernel-source-<var>2.4.18</var>.tar.bz2
$ cd kernel-source-<var>2.4.18</var>            # これがあなたの kernel ソースの場合
$ cp /boot/config-<var>2.4.18-386</var> .config # 現在の config をデフォルトにする
$ make menuconfig                    # 希望どおりカスタマイズする
$ make-kpkg clean                    # 必ず実行 (man make-kpkg による)
$ fakeroot make-kpkg --append_to_version -<var>486</var> --initrd \
        --revision=<var>rev.01</var> kernel_image \
        modules_image # pcmcia-cs などのためのモジュールイメージ
$ cd ..
# dpkg -i kernel-image*.deb pcmcia-cs*.deb # インストール
</example>
<tt>make dep</tt> を行います。initrd を使用しない場合は、<tt>--initrd</tt> 
を使わないでください。
<p>
pcmcia-cs からのモジュールを使いたい場合、又は kernel pcmcia source による
モジュールを使いたくない場合、
<tt>make menuconfig</tt> ダイアログで "General setup &mdash;&gt;" ->
"PCMCIA/CardBus support &mdash;&gt;" を選び、
"&lt;&nbsp;&gt; PCMCIA/CardBus support" を設定 (すなわちチェックボックスを外す)
してください。
<p>
SMP の場合は、<manref name="kernel-pkg.conf" section="5"> に従い、
CONCURRENT_LEVEL を設定してください。
</sect1>

<sect1 id="kernel-classic">古典的な方法
<p>
オリジナルソースを以下から取得してください。
<list compact>
<item>Linux:     <url id="&linuxsrc;">
<item>pcmcia-cs: <url id="&pcmciasrc;">
</list>
又は Debian での 同等の kernel source を用いて次の手順を実行してください。
<example>
# cd /usr/src
# tar xfvz linux-<var>whatever</var>.tar.gz
# rm -rf linux
# ln -s linux-<var>whatever</var> linux
# tar xfvz pcmcia-cs-<var>whatever</var>.tar.gz
# ln -s pcmcia-cs-<var>whatever</var> pcmcia
# cd linux
# make menuconfig
... 設定を行う
# make dep
# make bzImage
... lilo / grub の設定 ...
... /usr/src/linux/arch/i386/boot/bzImage を boot に移動...
... /sbin/lilo 又は grub のための好みの方法を実行
# make modules; make modules_install
# cd ../pcmcia
# make config
# make all
# make install
... 必要なモジュール名を /etc/modules に追加
# shutdown -r now
... 新しい kernel を boot 
</example>
</sect1>

<sect1 id="kernel-headers">Kernel ヘッダ
<p>
ほとんどの "normal" なプログラムには kernel ヘッダは必要なく、実際直接
使用した場合動かなくなるかもしれません。その代わり、<strong><prgn>glibc</prgn>
を構築するのに使った</strong> ヘッダに対してコンパイルすべきです。それらは
&debian; システムの <file>/usr/include/linux</file> と
<file>/usr/include/asm</file> にあるバージョンのものです。
<p>
それゆえ、いくつかの古びたドキュメントが推奨しているように
<file>/usr/include/linux</file> および <file>/usr/include/asm</file> から 
<file>/usr/src/linux</file> にあるディレクトリに symlink を張らないでください。
<p>
カーネル特有のアプリケーションプログラムに特定の kernel ヘッダが
<strong>必要</strong> ならば、include path が
<file><var>dir-of-particular-kernel-headers</var>/include/linux</file> と
<file><var>dir-of-particular-kernel-headers</var>/include/asm</file> を
指すように makefile を変更してください。
</sect1>

</sect>

<sect id="kernel-modules">モジュール化された 2.4 kernel
<p>
<package>kernel-image-2.4.<var>NN</var></package> により供給されている
新しい Debian 2.4 kernel は非常にモジュール化されています。
意図したとおりに kernel が動くように必要なモジュールが有効になっているかを
確認する必要があります。
<p>
次の章で応急手段として <file>/etc/modules</file> の多くの例を挙げていますが、
モジュール関連のこれらの問題を修正するための正しい方法は、現在の kernel 
で得られる充分な alias が存在するので、<file>/etc/modutils/</file> にある
デバイスへの alias を設定することだと聞いています。いくつかのモジュールは
<package>discover</package> などのハードウェア自動検知プログラムにより
自動で有効化されるかもしれません。<ref id="hdetect-x"> もご覧ください。
<p>
正確な情報は <ref id="modules"> や Linux source にある <file>Documentation/*.txt</file> をご覧ください。

<sect1 id="kernel-pcmcia">PCMCIA
<p>
PCMCIA を動かすには、<file>/etc/modules</file> に次に示す内容を含める必要
があるかもしれません。
<example>
# ISA PnP ドライバ
isa-pnp
# 新しい低レベル PCMCIA ドライバ
# yenta_socket # 私の場合、必要ないようです
</example>
残りは PCMCIA スクリプト (<package>pcmcia-cs</package> パッケージのもの)、
<prgn>depmod</prgn> と <prgn>kmod</prgn> がやってくれます。
私のノート PC は古い ISA-PCMCIA なので、<prgn>isa-pnp</prgn> が必要と
考えています。最近の CardBus/PCMCIA を使ったノート PC にはこれは
必要ないかもしれません。
<p>
genius Miquel van Smoorenburg <email>miquels@cistron.nl</email> の発言を
次に示します。
<p>
"ノート PC から cardmgr などの pcmcia 関連全体を単に削除して、
cardbus をサポートした 2.4 kernel をインストールしました。
そして woody から新しい <package>hotplug</package> パッケージを
インストールしました。
<p>
32-bit カードしか持っていない限り、pcmcia パッケージは必要ありません。
Linux 2.4 は組込みの PC カードサービスを持っています。そして標準の
tulip ドライバは dlink カードでもうまく動きます。
<p>
&mdash;Mike."
<p>
<url id="&pcmcia-howto;" name="Linux PCMCIA HOWTO"> と
<ref id="trigger-pcmcia"> をご覧ください。
</sect1>

<sect1 id="kernel-scsi">SCSI
<p>  <!-- Osamu: maybe test this section? I do not have SCSI :(  
                                     But this is almost sure :) -->
[NOT TESTED] SCSI を動かすには <file>/etc/modules</file> に次の内容を
追加する必要があります。
<example>
# SCSI コアドライバ
scsi_mod
# SCSI 汎用ドライバ
generic driver
sg
# SCSI disk
sd_mod
# 他に必要なハードウェアモジュール全て
...
</example>
上記モジュールのうちいくつかは <prgn>depmod</prgn> が対処してくれるかも
しれません。
</sect1>

<sect1 id="kernel-net">Network 機能
<p>
特別なネットワーク機能のためには、次に示す内容を <file>/etc/modules</file> 
に追加する必要があります。
<example>
# net/ipv-4
ip_gre
ipip

# net/ipv-4/netfilter
# iptable (in order)
ip_tables
ip_conntrack
ip_conntrack_ftp
iptable_nat
iptable_filter
iptable_mangle
#
ip_nat_ftp
ip_queue
#
ipt_LOG
ipt_MARK
ipt_MASQUERADE
ipt_MIRROR
ipt_REDIRECT
ipt_REJECT
ipt_TCPMSS
ipt_TOS
ipt_limit
ipt_mac
ipt_mark
ipt_multiport
ipt_owner
ipt_state
ipt_tcpmss
ipt_tos
ipt_unclean
#
#ipchains
#ipfwadm
</example>
これらの記述は最適化されていません。上記モジュールのいくつかは、
<prgn>depmod</prgn> が対処してくれるかもしれません。
</sect1>

<sect1 id="ext3">EXT3 filesystem ( &gt; 2.4.17)
<p>
EXT3 FS によりジャーナリングファイルシステムを有効化するには、Debian の
プリコンパイルされた kernel-image ( &gt; 2.4.17) パッケージを用いると、
次の手順が発生します。
<example>
# cd /etc; mv fstab fstab.old
# sed 's/ext2/ext3,ext2/g' &lt;fstab.old &gt;fstab
# vi /etc/fstab
... root filesystem type を "ext3,ext2" の代わりに "auto" に設定
# cd /etc/mkinitrd
# echo jbd &gt;&gt;modules
# echo ext3 &gt;&gt;modules
# echo ext2 &gt;&gt;modules
# cd /
# apt-get update; apt-get install kernel-image-<var>2.4.17-686-smp</var>
... 最新の kernel をインストールし boot の設定を行う (ここでは lilo を用いる)
# tune2fs -j -i 0 <var>/dev/hda1</var>
# tune2fs -j -i 0 <var>/dev/hda2</var>
... 全ての EXT2 FS を EXT3 に変換するため
# shutdown -r now
</example>
ついに EXT3 ジャーナルが有効化されました。
<prgn>fstab</prgn> の "type" エントリに <tt>ext3,ext2</tt> を用いると
非 root パーティションに対して kernel が EXT3 をサポートしていない場合、
EXT2 に safe fallback するのを保証してくれます。
<p>
以前 2.4 kernel をインストールしており、再インストールしたくない場合、
上記の手順を <prgn>apt-get</prgn> まで行い、そして次の手順を行ってください。
<example>
# mkinitrd -o /boot/initrd.img-<var>2.4.17-686-smp</var> /lib/modules/<var>2.4.17-686-smp</var>
# lilo
# tune2fs -j -i 0 <var>/dev/hda1</var>
# tune2fs -j -i 0 <var>/dev/hda2</var>
... 全 EXT2 FS を EXT3 に変換するため
# shutdown -r now
</example>
EXT3 ジャーナルが有効化されました。
<p>
<prgn>mkinitrd</prgn> を起動した時に <file>/etc/mkinitrd/modules</file> 
が設定されていなく、ブート時にモジュールを追加したいなら、initrd プロンプトで
RETURN を押せば shell を実行できます。
<example>
# insmod jbd
# insmod ext3 # modprobe ext3 の実行には注意が必要
# insmod ext2
# ^
...ブートを継続
</example>
システムブートスクリーン (<prgn>dmesg</prgn>) において、
"cramfs: wrong magic" が表示されるかもしれませんが、これは害がないことが
わかっています。本件は Sarge において 2002 年 10 月に解決しています。
詳細は <url id="&bug-ext3;"> 、
<url id="&howtoext3;" name="EXT3 File System mini-HOWTO"> 並びに
<file>&f-howtoext3;"</file> をご覧ください。
<p>
EXT3 を有効にして深刻な kernel lockup を経験したという報告が
数例有りますが、私は問題ありません (2.4.17 kernel を使用)
</sect1>

<sect1 id="ss-rtl8139">2.4 における Realtek RTL-8139 のサポート
<p>
なんらかの理由で、現在 RTL-8139 モジュールは rtl8139 ではなく、8139too
と呼ばれます。2.2 kernel から 2.4 kernel に更新する場合、
<file>/etc/modules</file> を編集してこの変更を反映してください。
</sect1>

<sect1 id="parport">パラレルポートのサポート
<p>
<package>kernel-image-2.4.*</package> では、パラレルポートのサポートは
モジュールとして供給されています。次の手順で有効化できます。
<example>
# modprobe lp
# echo lp >> /etc/modules
</example>
Linux source の <file>Documentation/parport.txt</file> をご覧ください。

</sect1>
</sect>

<sect id="proc-sys">proc filesystem により Linux kernel をチューニングする
<p>
Linux kernel の挙動は proc ファイルシステムを用いるとオンザフライで変更できます。
<p>
<file>/proc</file> ファイルシステムを通して kernel パラメータを変更すること
に関する基本的な情報は Linux source の <file>Documentation/sysctl/*</file> 
をご覧ください。
<p>
<file>/etc/init.d/networking</file> と <ref id="killecn"> には
kernel パラメータの操作方法の例がいくつかあります。
<p>
通常 <file>/etc/rcS.d/S30procps.sh</file> から起動される 
<file>/etc/init.d/procps.sh</file> を用いた <file>/proc</file>
ファイルシステムを通じたブート時の kernel 設定手順については
See <manref name="sysctl.conf" section="5"> をご覧ください。

<sect1 id="many-files">Too many open files
<p>
Linux kernel が "Too many open files" とエラーを出力することがあります。
これは <tt>file-max</tt> の標準値が小さい (8096) ためです。
この問題を解決するには、root で次のコマンドを実行してください。
<example>
# echo "65536"  &gt; /proc/sys/fs/file-max  # 2.2 と 2.4 kernel の両方で有効
# echo "131072" &gt; /proc/sys/fs/inode-max # 2.2 kernel のみ
</example>
変更をずっと有効にしたい場合は、<file>/etc/sysctl.conf</file> に次の行を追加してください。
<example>
file-max=65536   # 2.2 と 2.4 kernel の両方で有効
inode-max=131072 # 2.2 kernel のみ
</example>

<sect1 id="bdflush">Disk flush 間隔
<p>
proc ファイルシステムを通じて disk flush 間隔を変更できます。
次のコマンドにより、間隔をデフォルトの 5 秒 から 1 秒 に変更されます。

<example>
# echo "40 0 0 0 100 30000 60 0 0"  &gt; /proc/sys/vm/bdflush
</example>
本変更はファイル I/O 性能にほんの少し悪影響を与えるかもしれません。しかし、
本変更により、デフォルトの 5 秒より短い最後の 1 秒の間を除き、ファイル内容を
安全に保たれます。
</sect1>

<sect1 id="over-commit">鈍くて古い少メモリ容量マシン
<p>
古い少メモリ容量マシンの場合、proc ファイルシステムを通じて
メモリの over-commit を有効にするとまだ役に立つかもしれません。
<example>
# echo 1 &gt; /proc/sys/vm/overcommit_memory
</example> 
</sect1>

</sect>

<sect id="udev">2.6 カーネルと udev
<p>
udev は <file>/dev/</file> のダイナミックな置き換えです。
デバイス名は非常に短い物にもできます。
2.4 カーネルで使われた devfs は今や過去の物となりました。
<p>
<package>udev</package> パッケージを 
<package>kernel-image-2.6.<var>NN</var></package> 
で提供される新たな &debian; 2.6 カーネルとともにインストールすると、
本機能が実現します。
</sect>

</chapt>
