<!-- CVS revision of this document "$Revision: 1.9 $"  -->
<!-- CVS revision of original english document "1.70"  -->

<chapt id="kernel">Debian での Linux kernel
<p>
Debian には独自の kernel と関連モジュールの再構築方法があります。
<ref id="kernel-details"> をご覧ください。

<sect id="kernel-compile">Kernel (再)構築
<p>
最新の Linux kernel をコンパイルする場合、Debian <tt>unstable</tt> から、
<prgn>gcc</prgn>、<prgn>binituls</prgn> と <prgn>module-init-tools</prgn>
をインストールして使用すると役に立つかもしれません。
公式の情報を得るには、<file>&f-kernel-readme;</file>、特に最後尾を
ご覧ください。
<p>
常に変更が発生しているので、kernel のコンパイルは最も称賛される開発者
でさえも混乱を招きかねない難しい事項です。
<taglist compact>
<tag>Manoj Srivastava の発言
<item><tt>--initrd</tt> は Debian のみ cramfs パッチを必要とする。
<tag>Herbert Xu の発言
<item>間違っている。CRAMFS 以外のファイルシステムを使うならば
<file>/etc/mkinitrd/mkinitrd.conf</file> に MKIMAGE を必ず設定する必要がある。
</taglist>
<p>
注意して、常に Manoj と Kent による <file>&f-kernel-readme;</file>
や <url id="&kernel-handbook;"> に頼ってください。
最新版の kernel をコンパイルしようとしている場合、
最新の unstable 版の <package>kernel-package</package> パッケージを
確実にインストールしてください。
<p>
1 台のマシンのためにしか kernel をコンパイルする必要がないなら、
<tt>initrd</tt> は必要ありません。kernel-image パッケージにより供給される
kernel とほとんど同じにしたいため、私は initrd を用います。
もし <tt>initrd</tt> を使用するなら、<manref name="initrd" section="8"> 
と <manref name="mkinitrd.conf" section="5"> をご覧ください。

<sect1 id="kernel-classic">古典的な方法
<p>
オリジナルソースを以下から取得してください。
<list compact>
<item>Linux:     <url id="&linuxsrc;">
<item>pcmcia-cs: <url id="&pcmciasrc;">
</list>
又は Debian での 同等の kernel source を用いて次の手順を実行してください。
<example>
# cd /usr/src
# tar xfvz linux-<var>whatever</var>.tar.gz
# rm -rf linux
# ln -s linux-<var>whatever</var> linux
# tar xfvz pcmcia-cs-<var>whatever</var>.tar.gz
# ln -s pcmcia-cs-<var>whatever</var> pcmcia
# cd linux
# make menuconfig
... 設定を行う
# make dep
# make bzImage
... lilo / grub の設定 ...
... /usr/src/linux/arch/i386/boot/bzImage を boot に移動...
... /sbin/lilo 又は grub のための好みの方法を実行
# make modules; make modules_install
# cd ../pcmcia
# make config
# make all
# make install
... 必要なモジュール名を /etc/modules に追加
# shutdown -r now
... 新しい kernel を boot 
</example>
</sect1>

<sect1 id="kernel-headers">Kernel ヘッダ
<p>
ほとんどの "normal" なプログラムには kernel ヘッダは必要なく、実際直接
使用した場合動かなくなるかもしれません。その代わり、<strong><prgn>glibc</prgn>
を構築するのに使った</strong> ヘッダに対してコンパイルすべきです。それらは
&debian; システムの <file>/usr/include/linux</file> と
<file>/usr/include/asm</file> にあるバージョンのものです。
<p>
それゆえ、いくつかの古びたドキュメントが推奨しているように
<file>/usr/include/linux</file> および <file>/usr/include/asm</file> から 
<file>/usr/src/linux</file> にあるディレクトリに symlink を張らないでください。
<p>
カーネル特有のアプリケーションプログラムに特定の kernel ヘッダが
<strong>必要</strong> ならば、include path が
<file><var>dir-of-particular-kernel-headers</var>/include/linux</file> と
<file><var>dir-of-particular-kernel-headers</var>/include/asm</file> を
指すように makefile を変更してください。
</sect1>
</sect>

<sect id="proc-sys">proc filesystem により Linux kernel をチューニングする
<p>
Linux kernel の挙動は、proc ファイルシステムを用いるとオンザフライで変更できます。
<p>
<file>/proc</file> ファイルシステムを通して kernel パラメータを変更すること
に関する基本的な情報は Linux source の <file>Documentation/sysctl/*</file> 
をご覧ください。
<p>
<file>/etc/init.d/networking</file> と <ref id="killecn"> には、
kernel パラメータの操作方法の例がいくつかあります。
<p>
通常、<file>/etc/rcS.d/S30procps.sh</file> から起動される 
<file>/etc/init.d/procps.sh</file> を用いて <file>/proc</file>
ファイルシステム経由でブート時に kernel を設定する手順については、
<manref name="sysctl.conf" section="5"> をご覧ください。

<sect1 id="many-files">Too many open files
<p>
Linux kernel が "Too many open files" とエラーを出力することがあります。
これは <tt>file-max</tt> の標準値が小さい (8096) ためです。
この問題を解決するには、root で次のコマンドを実行してください。
<example>
# echo "65536"  &gt; /proc/sys/fs/file-max  # 2.2 と 2.4 kernel の両方で有効
# echo "131072" &gt; /proc/sys/fs/inode-max # 2.2 kernel のみ
</example>
変更をずっと有効にしたい場合は、<file>/etc/sysctl.conf</file> に次の行を追加してください。
<example>
file-max=65536   # 2.2 と 2.4 kernel の両方で有効
inode-max=131072 # 2.2 kernel のみ
</example>

<sect1 id="bdflush">Disk flush 間隔
<p>
proc ファイルシステムを通じて disk flush 間隔を変更できます。
次のコマンドにより、間隔をデフォルトの 5 秒 から 1 秒 に変更されます。

<example>
# echo "40 0 0 0 100 30000 60 0 0"  &gt; /proc/sys/vm/bdflush
</example>
本変更はファイル I/O 性能にほんの少し悪影響を与えるかもしれません。しかし、
本変更により、デフォルトの 5 秒より短い最後の 1 秒の間を除き、ファイル内容を
安全に保たれます。
</sect1>

<sect1 id="over-commit">鈍くて古い少メモリ容量マシン
<p>
古い少メモリ容量マシンの場合、proc ファイルシステムを通じて
メモリの over-commit を有効にするとまだ役に立つかもしれません。
<example>
# echo 1 &gt; /proc/sys/vm/overcommit_memory
</example> 
</sect1>

</sect>

<sect id="udev">2.6 カーネルと udev
<p>
udev は <file>/dev/</file> のダイナミックな置き換えです。
デバイス名は非常に短い物にもできます。
2.4 カーネルで使われた devfs は今や過去の物となりました。
<p>
<package>udev</package> パッケージを 
<package>kernel-image-2.6.<var>NN</var></package> 
で提供される新たな &debian; 2.6 カーネルとともにインストールすると、
本機能が実現します。
</sect>

</chapt>
