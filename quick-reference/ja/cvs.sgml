<!-- CVS revision of this document "$Revision: 1.4 $"  -->
<!-- CVS revision of original english document "1.40"  -->
<!--Line width ruler (ruler uses 78 characters)     34567890123456789012345-->

<chapt id="vcs">バージョン管理システム

<sect id="cvs">Concurrent Versions System (CVS)
<p>
詳細な情報は、 <prgn>lynx</prgn> を使って
<file>/usr/share/doc/cvs/html-cvsclient</file>, 
<file>/usr/share/doc/cvs/html-info</file>,
<file>/usr/share/doc/cvsbook</file> を見るか、
<tt>info cvs</tt> や <tt>man cvs</tt> を実行して
下さい。

<sect1 id="cvs-inst">CVS サーバのインストール
<p>
次に示すセットアップにより、"src" グループのメンバのみが CVS リポジトリ
にコミットでき、"staff" グループのメンバだけが CVS の管理を行うように
設定できます。これにより自爆する危険を低減できます。
<example>
# cd <var>/var/lib</var>; umask 002; mkdir <var>cvs</var> # [Woody] FSH
# apt-get install cvs cvs-doc cvsbook
# export CVSROOT=<var>/var/lib/cvs</var>
# cd $CVSROOT
# chown root:src .  # プロジェクトの開始をさらに制限するには "staff" にする
# chmod 3775 .             # 上記で "staff" を使っている場合は 2775 を使う
# cvs -d <var>/var/lib/cvs</var> init # ここでは明示的に -d を指定する方が安全
# cd CVSROOT
# chown -R root:staff .
# chmod 2775 .
# touch val-tags 
# chmod 664 history val-tags
# chown root:src history val-tags
</example>
<p>
</sect1>

<sect1 id="cvs-examples">CVS セッションの例
<p>
次は CVS リポジトリへのアクセスのためのシェル環境をセットアップします。

<sect2>Anonymous CVS (ダウンロードのみ)
<p>
読み込みのみのリモートアクセスのためには次を実行します。
<example>
$ export CVSROOT=:pserver:<var>anonymous@cvs.sf.net:/cvsroot/qref</var>
$ cvs login
$ cvs -z3 co <var>qref</var>
</example>
</sect2>

<sect2>ローカル CVS サーバを使う
<p>
サーバと同じマシン上でシェルからローカルのアクセスを行うには次を実行します。
<example>
$ export CVSROOT=<var>/var/lib/cvs</var>
</example>
</sect2>

<sect2>リモート CVS サーバを使う
<p>
SSH を用いずに (<prgn>cvs</prgn> の RSH プロトコル機能を利用して) 
リモートアクセスを行うには次を実行します。
<example>
$ export CVSROOT=:pserver:<var>account@cvs.foobar.com:/var/lib/cvs</var>
$ cvs login
</example>
これは盗聴される危険があります。
</sect2>

<sect2><prgn>ssh</prgn> を通じてリモート CVS にアクセスする
<p>
SSH を用いてリモートアクセスするには次を実行します。
<example>
$ export CVSROOT=:ext:<var>account@cvs.foobar.com:/var/lib/cvs</var>
</example>
又は SourceForge の場合では次を実行します。
<example>
$ export CVSROOT=:ext:<var>account@cvs.sf.net:/cvsroot/qref</var>
</example>
パスワードプロンプトを除外する RSA 認証 (<ref id="ssh-rsa">) 
も利用できます。
</sect2>

<sect2>新規 CVS アーカイブの作成
<p>
次に示すプロジェクトのためにアーカイブを作成するとして、
<example>
アイテム             値               意味
ソースツリー      ~/<var>project-x</var>         全ソースコード
プロジェクト名     <var>project-x</var>          作成するプロジェクト名
ベンダータグ       <var>Main-branch</var>         ブランチ全体のタグ
リリースタグ      <var>Release-initial</var>     指定したリリースのためのタグ
</example>
次の手順によりアーカイブを作成できます。
<example>
$ cd ~/<var>project-x</var>                # ソースディレクトリに飛び込む
 ... ソースツリーを作成する ...
$ cvs import -m <var>"Start project-x" project-x Main-branch Release-initial</var>
$ cd ..; rm -R ~/<var>project-x</var>
</example>
</sect2>

<sect2>CVS を用いた作業
<p>
ローカルの CVS リポジトリを用いて <var>project-x</var> の作業を
行うには、次のようにします。
<example>
$ cd                            # 作業エリアに移動
$ cvs co <var>project-x</var>              # CVS からソースを取得してローカルにコピー
$ cd <var>project-x</var>
 ... 内容をいろいろ変更する ...
$ cvs diff -u                   # diff -u repository/ local/ と同様の出力
$ cvs up -C <var>modified_file</var>       # ファイルへの変更を undo する
$ cvs ci -m "<var>Describe change</var>"   # ローカルのソースを CVS に保存
$ vi <var>newfile_added</var>
$ cvs add <var>newfile_added</var>
$ cvs ci -m "<var>Added newfile_added</var>"
$ cvs up                        # CVS から最新版をマージする
 ... CVS から新規に作成したサブディレクトリを作成するには、
 ... 代わりに "cvs up -d -P" を使います。
 ... "C <var>filename</var>" で始まる行を監視してください。
 ... 未修正のコードは `.#<var>filename</var>.version' に移動します。
 ... <var>filename</var> にある "&lt;&lt;&lt;&lt;&lt;&lt;&lt;" と
 ... "&gt;&gt;&gt;&gt;&gt;&gt;&gt;" を探してください。
$ cvs tag <var>Release-1</var>             # リリースタグを追加
 ... さらに編集を続ける ...
$ cvs tag -d <var>Release-1</var>          # リリースタグを削除
$ cvs ci -m "<var>more comments</var>"
$ cvs tag <var>Release-1</var>             # リリースタグを再び追加
$ cd                            # 作業エリアに戻る
$ cvs co -r <var>Release-initial</var> -d <var>old</var> <var>project-x</var>
 ... オリジナルのバージョンを <var>old</var> ディレクトリに置いておく
$ cd old
$ cvs tag -b <var>Release-initial-bugfixes</var> # ブランチ (-b) タグを作成
 ... 旧バージョンで作業できるようになりました (Tag=sticky)
$ cvs update -d -P              # 空のディレクトリは作成不可
 ... ソースツリーは今 "Release-initial-bugfixes" sticky タグを持つ
 ... このブランチで作業
$ cvs up -d -P # このブランチの他者により修正されたファイルを同期
$ cvs ci -m "<var>check into this branch</var>"
$ cvs update -kk -A -d -P
 ... sticky タグを削除し、内容を忘れる
 ... キーワード拡張無しで main trunk から更新
$ cvs update -kk -d -P -j <var>Release-initial-bugfixes</var>
 ... <var>Release-initial-bugfixes</var> ブランチから main にマージ
 ... キーワード拡張無しの trunk。エディタで衝突を修正
$ cvs ci -m "<var>merge Release-initial-bugfixes</var>"
$ cd
$ tar -cvzf <var>old-project-x.tar.gz</var> <var>old</var>  # アーカイブを作成。bz2 にするには -z の代わりに -j とする
$ cvs release -d <var>old</var>            # ローカルのソースを削除 (任意)
</example>
覚えておくべき役立つオプションを次に挙げます。(<prgn>cvs</prgn> の第一引数と
して使います)
<example>
-n      効果を及ぼさずに起動
-t      cvs の活動の各ステップごとに示されるメッセージを表示
</example>
</sect2>

<sect2>CVS からのエクスポート
<p>
CVS から最新版を取得するには、"tomorrow" を使います。
<example>
$ cvs ex -D tomorrow <var>module_name</var>
</example>
</sect2>

<sect2>CVS 管理者
<p>
(ローカルサーバの) プロジェクトへのエイリアスを追加します。
<example>
$ su - admin           # staff のメンバ
$ export CVSROOT=<var>/var/lib/cvs</var>
$ cvs co CVSROOT/modules
$ cd CVSROOT
$ echo "<var>px</var> -a <var>project-x</var>" &gt;&gt;modules
$ cvs ci -m "<var>Now px is an alias for project-x</var>"
$ cvs release -d .
$ exit                 # 又は su から戻るために Ctrl-D を実行
$ cvs co -d <var>project</var> <var>px</var> 
 ... CVS から project ディレクトリに <var>project-x</var> 
(エイリアス:<var>px</var>) をチェックアウトする
$ cd project
 ... 内容を変更する
</example>
</sect2>

<sect1 id="cvs-trouble">CVS のトラブルシュート

<sect2>リポジトリのファイルアクセス権限
<p>
CVS はカレントのリポジトリファイルを上書きしませんが、他のファイルで
置き換えることはあります。それゆえ、<em>リポジトリディレクトリに書き込み
権限を設定する</em> ことは致命的です。全ての新しいリポジトリの作成には、
必要ならばこの条件を保証するために次の手順を行ってください。
<example>
# cd <var>/var/lib/cvs</var>
# chown -R root:src <var>repository</var>
# chmod -R ug+rwX   <var>repository</var>
# chmod    2775     <var>repository</var>  # 必要ならば、これをサブディレクトリに対しても行う
</example>
</sect2>

<sect2>実行権ビット
<p>
ファイルの実行権ビットはチェックアウト時にも保持されます。
チェックアウトしたファイルの実行権が設定されているのを見掛けたときはいつでも
次のコマンドで CVS リポジトリにあるファイル権限を変更してください。
<example>
# chmod ugo-x <var>filename</var>
</example>
</sect2>

</sect1>

<sect1 id="cvs-short">CVS コマンド
<p>
ここに CVS のコマンドとそのショートカットを示します。
<example>
{add|ad|new} [-k kflag] [-m 'message'] files...
{admin|adm|rcs} [rcs-options] files...
{annotate|ann} [options] [files...]
{checkout|co|get} [options] modules...
{commit|ci|com}   [-lnR]  [-m  'log_message'  |  -f  file] \
        [-r revision] [files...]
{diff|di|dif} [-kl] [rcsdiff_options] [[-r rev1 | -D date1] \
        [-r rev2 |  -D date2]] [files...]
{export|ex|exp} [-flNn] -r rev|-D date [-d dir] [-k kflag] module...
{history|hi|his} [-report] [-flags] [-options args] [files...]
{import|im|imp} [-options] repository vendortag releasetag...
{login|logon|lgn}
{log|lo|rlog} [-l] rlog-options [files...]
{rdiff|patch|pa} [-flags] [-V vn] [-r t|-D d [-r t2|-D d2]] modules...
{release|re|rel} [-d] directories...
{remove|rm|delete} [-lR] [files...]
{rtag|rt|rfreeze} [-falnR]  [-b]  [-d]  [-r  tag  |  -D  date] \
         symbolic_tag modules...
{status|st|stat} [-lR] [-v] [files...]
{tag|ta|freeze} [-lR] [-F] [-b] [-d] [-r tag | -D date]  [-f] \
         symbolic_tag [files...]
{update|up|upd} [-AdflPpR] [-d] [-r tag|-D date] files...
</example>
</sect1>

<sect id="svn">Subversion
<p>
Subversion は CVS の置換を意図した次世代のバージョン管理システムです。
Subversion の開発者は現在 "α版" と考えていますが、ほとんどの人が使うには
十分安定しています。本文書の執筆時では、Subversion は
Debian <tt>unstable</tt> でのみ得られます。
<sect1 id="svn-inst">Subversion サーバのインストール
<p>
<package>subversion-server</package> メタパッケージは
サーバを設定するために必要なパッケージ (<package>libapache2-dav-svn</package>
と <package>subversion-tools</package>) に依存します。
<sect2>リポジトリの設定
<p>
現在、<package>subversion</package> パッケージはリポジトリを設定しませんので、
手動で設定する必要があります。リポジトリの場所としては <file>/var/local/repos</file> が考えられます。
<p>
ディレクトリを作成します。
<example>
# mkdir -p /var/local/repos
</example>
リポジトリデータベースを作成します。
<example>
# svnadmin create /var/local/repos
</example>
リポジトリに WWW サーバが書き込み可能にします。
<example>
# chown -R www-data:www-data /var/local/repos
</example>
</sect2>
<sect2>Apache2 の設定
<p>
ユーザ認証を通じてリポジトリへのアクセスを許可するには、
<file>/etc/apache2/mods-available/dav_svn.conf</file> に次の行を
追加 (又はコメントアウト) しましょう。
<example>
&lt;Location /repos&gt;
  DAV svn
  SVNPath /var/local/repos
  AuthType Basic
  AuthName "Subversion repository"
  AuthUserFile /etc/subversion/passwd
  &lt;LimitExcept GET PROPFIND OPTIONS REPORT&gt;
    Require valid-user
  &lt;/LimitExcept&gt;
&lt/Location&gt
</example>
そして、次のコマンドでユーザ認証ファイルを作成します。
<example>
htpasswd2 -c /etc/subversion/passwd some-username
</example>
Apache2 を再起動すると、新しい Subversion リポジトリは
URL http://<var>hostname</var>/repos によりアクセス可能になります。
</sect2>
</sect1>
<sect1 id="svn-cvs">CVS リポジトリから Subversion への移行
</sect1>
<sect1 id="svn-usage">Subversion の使用例
<p>
次の章は Subversion での異なるコマンドの使いかたについて教えます。

<sect2>新規 Subversion アーカイブの作成
<p>
新規 Subversion アーカイブを作成するには、次をタイプします。
<example>
$ cd ~/<var>your-project</var>         # ソースディレクトリに移動
$ svn import http://localhost/repos <var>your-project</var> \
  <var>project-name</var> -m "initial project import"
</example>
<p>
これはプロジェクトファイルを含む Subversion リポジトリに
<var>project-name</var> という名前のディレクトリを作成します。
アーカイブが存在するかどうかを調べるには http://localhost/repos/ 
を見てください。
</sect2>

<sect2>Subversion を用いた作業
<p>
Subversion を用いて <var>project-y</var> の作業を行います。
<example>
$ cd                            # 作業エリアに移動
$ svn co http://localhost/repos/<var>project-y</var>  # ソースをチェックアウト
$ cd <var>project-y</var>
 ... 作業を行う ...
$ svn diff                      # diff -u repository/ local/ と同様の出力
$ svn revert <var>modified_file</var>      # ファイルへの変更を undo する
$ svn ci -m "<var>Describe changes</var>"  # 変更をリポジトリにチェックインする
$ vi <var>newfile_added</var>
$ svn add <var>newfile_added</var>
$ svn add <var>new_dir</var>               # new_dir に全ファイルを再帰的に追加
$ svn add -N <var>new_dir2</var>           # 非再帰的にディレクトリを追加
$ svn ci -m "Added <var>newfile_added</var>, <var>new_dir</var>, <var>new_dir2</var>"
$ svn up                        # リポジトリから最新版をマージ
$ svn log                       # コミットした全変更を表示
$ svn copy http://localhost/repos/<var>project-y</var> \
      http://localhost/repos/<var>project-y-branch</var> \
      -m "creating my branch of <var>project-y</var>"  # <var>project-y</var> ブランチを作成
$ svn copy http://localhost/repos/<var>project-y</var> \
      http://localhost/repos/<var>proj-y_release1.0</var> \
      -m "<var>project-y</var> 1.0 release"    # リリースタグを作成
 ... ブランチ作成とタグづけは同じであることに注意。唯一の違いは
 ... ブランチはコミットされるがタグはそうではないことです。

 ... ブランチへ変更を施す

# ブランチに分けたコピーをメインのコピーにバックマージする
$ svn merge http://localhost/repos/<var>project-y</var> \
   http://localhost/repos/<var>project-y-branch</var>
$ svn co -r 4 http://localhost/repos/<var>project-y</var> # バージョン 4 を取得
</example>

</sect2>

</sect1>
</sect>
</chapt>
