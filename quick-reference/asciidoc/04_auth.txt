== Authentication

// vim: set sts=2 expandtab:
// Use ":set nowrap" to edit table

When a person (or a program) requests access to the system, authentication confirms the identity to be a trusted one.

WARNING: Configuration errors of PAM may lock you out of your own system.  You must have a rescue CD handy or setup an alternative boot partition.  To recover, boot the system with them and correct things from there.

=== Normal Unix authentication

Normal Unix authentication is provided by the `pam_unix`(8) module under the http://en.wikipedia.org/wiki/Pluggable_Authentication_Modules[PAM (Pluggable Authentication Modules)].  Its 3 important configuration files, with "`:`" separated entries, are the following.

.3 important configuration files for `pam_unix`(8)
[grid="all"]
`-------------`------------`------`--------`-----------------------------------------
file          permission   user   group    description
-------------------------------------------------------------------------------------
`/etc/passwd` `-rw-r--r--` `root` `root`   (sanitized) user account information
`/etc/shadow` `-rw-r-----` `root` `shadow` secure user account information
`/etc/group`  `-rw-r--r--` `root` `root`   group information
-------------------------------------------------------------------------------------

"`/etc/passwd`" contains the following.

--------------------
 ...
user1:x:1000:1000:User1 Name,,,:/home/user1:/bin/bash
user2:x:1001:1001:User2 Name,,,:/home/user2:/bin/bash
 ...
--------------------

As explained in `passwd`(5), each "`:`" separated entry of this file means the following.

- Login name
- Password specification entry
- Numerical user ID
- Numerical group ID
- User name or comment field
- User home directory
- Optional user command interpreter

The second entry of "`/etc/passwd`" was used for the encrypted password entry.  After the introduction of "`/etc/shadow`", this entry is used for the password specification entry.

.The second entry content of "`/etc/passwd`"
[grid="all"]
`-------`--------------------------------------------
content meaning                                      
-----------------------------------------------------
(empty) passwordless account                         
x       the encrypted password is in "`/etc/shadow`" 
\*      no login for this account                    
!       no login for this account                    
-----------------------------------------------------

"`/etc/shadow`" contains the following.

--------------------
 ...
user1:$1$Xop0FYH9$IfxyQwBe9b8tiyIkt2P4F/:13262:0:99999:7:::
user2:$1$vXGZLVbS$ElyErNf/agUDsm1DehJMS/:13261:0:99999:7:::
 ...
--------------------

As explained in `shadow`(5), each "`:`" separated entry of this file means the following.

- Login name
- Encrypted password (The initial "`$1$`" indicates use of the MD5 encryption. The "\*" indicates no login.)
- Days since Jan 1, 1970 that password was last changed
- Days before password may be changed
- Days after which password must be changed
- Days before password is to expire that user is warned
- ...

"`/etc/group`" contains the following.

--------------------
group1:x:20:user1,user2
--------------------

As explained in `group`(5), each "`:`" separated entry of this file means the following.

- Group name
- Encrypted password (not really used)
- Numerical group ID
- "," separated list of user names

NOTE: "`/etc/gshadow`" provides the similar function as "`/etc/shadow`" for "`/etc/group`" but is not really used.

NOTE: The actual group membership of a user may be dynamically added if "`auth optional pam_group.so`" line is added to "`/etc/pam.d/common-auth`" and set it in "`/etc/security/group.conf`".  See `pam_group`(8).

NOTE: The `base-passwd` package contains an authoritative list of the user and the group: "`/usr/share/doc/base-passwd/users-and-groups.html`".

=== Managing account and password information

Here are few notable commands to manage account information.

.List of commands to manage account information
[grid="all"]
`---------------------------`------------------------------------------------------
command                     function
-----------------------------------------------------------------------------------
`getent passwd <user_name>` browse account information of "`<user_name>`"
`getent shadow <user_name>` browse shadowed account information of "`<user_name>`"
`getent group <group_name>` browse group information of "`<group_name>`"
`passwd`                    manage password for the account
`passwd -e`                 set one-time password for the account activation
`chage`                     manage password aging information
-----------------------------------------------------------------------------------

You may need to have the root privilege for some functions to work. See `crypt`(3) for the password and data encryption.

NOTE: On the system set up with PAM and NSS as the Debian http://alioth.debian.org[alioth] machine, the content of local "`/etc/passwd`", "`/etc/group`" and "`/etc/shadow`" may not be actively used by the system.  Above commands are valid even under such environment.

=== Good password

When creating an account during your system installation or with the `passwd`(1) command, you should choose a http://en.wikipedia.org/wiki/Password_strength[good password] which consists of 6 to 8 characters including one or more characters from each of the following sets according to `passwd`(1).

- Lower case alphabetics
- Digits 0 through 9
- Punctuation marks

WARNING: Do not chose guessable words for the password.

=== Creating encrypted password

There are independent tools to generate encrypted password with salt.

.List of tools to generate password
[grid="all"]
`---------`-------------`------------`----------------`-------------------------------------------------
package   popcon        size         command          function
--------------------------------------------------------------------------------------------------------
`whois`   @-@popcon1@-@ @-@psize1@-@ `mkpasswd`       over-featured front end to the `crypt`(3) library
`openssl` @-@popcon1@-@ @-@psize1@-@ `openssl passwd` compute password hashes (OpenSSL). `passwd`(1ssl)
--------------------------------------------------------------------------------------------------------

=== PAM and NSS

Modern http://en.wikipedia.org/wiki/Unix-like[Unix-like] systems such as the Debian system provide http://en.wikipedia.org/wiki/Pluggable_Authentication_Modules[PAM (Pluggable Authentication Modules)] and http://en.wikipedia.org/wiki/Name_Service_Switch[NSS (Name Service Switch)] mechanism to the local system administrator to configure his system.  The role of these can be summarizes as the following.

- PAM offers a flexible authentication mechanism used by the application software thus involves password data exchange.
- NSS offers a flexible name service mechanism which is frequently used by the http://en.wikipedia.org/wiki/C_standard_library[C standard library] to obtain the user and group name for programs such as `ls`(1) and `id`(1).

These PAM and NSS systems need to be configured consistently.

The notable packages of PAM and NSS systems are the following.

.List of notable PAM and NSS systems
[grid="all"]
`---------------------`-------------`------------`---------------------------------------------------------------------------------
package               popcon        size         description
-----------------------------------------------------------------------------------------------------------------------------------
`libpam-modules`      @-@popcon1@-@ @-@psize1@-@ Pluggable Authentication Modules (basic service)
`libpam-ldap`         @-@popcon1@-@ @-@psize1@-@ Pluggable Authentication Module allowing LDAP interfaces
`libpam-cracklib`     @-@popcon1@-@ @-@psize1@-@ Pluggable Authentication Module to enable cracklib support
`libpam-doc`          @-@popcon1@-@ @-@psize1@-@ Pluggable Authentication Modules (documentation in html and text)
`libc6`               @-@popcon1@-@ @-@psize1@-@ GNU C Library: Shared libraries which also provides "Name Service Switch" service
`glibc-doc`           @-@popcon1@-@ @-@psize1@-@ GNU C Library: Manpages
`glibc-doc-reference` @-@popcon1@-@ @-@psize1@-@ GNU C Library: Reference manual in info, pdf and html format (non-free)
`libnss-mdns`         @-@popcon1@-@ @-@psize1@-@ NSS module for Multicast DNS name resolution
`libnss-ldap`         @-@popcon1@-@ @-@psize1@-@ NSS module for using LDAP as a naming service
`libnss-ldapd`        @-@popcon1@-@ @-@psize1@-@ NSS module for using LDAP as a naming service (new folk of `libnss-ldap`)
-----------------------------------------------------------------------------------------------------------------------------------

- "The Linux-PAM System Administrators' Guide" in `libpam-doc` is essential for learning PAM configuration.
- "System Databases and Name Service Switch" section in `glibc-doc-reference` is essential for learning NSS configuration.

NOTE: You can see more extensive and current list by "`aptitude search 'libpam-|libnss-'`" command.  The acronym NSS may also mean "Network Security Service" which is different from "Name Service Switch".  

NOTE: PAM is the most basic way to initialize environment variables for each program with the system wide default value.

==== Configuration files accessed by the PAM and NSS

Here are few notable configuration files accessed by the PAM.

.List of configuration files accessed by the PAM
[grid="all"]
`----------------------------`-------------------------------------------------------------------------------------------------------
configuration file           function
-------------------------------------------------------------------------------------------------------------------------------------
`/etc/pam.d/<program_name>`  set up PAM configuration for the "`<program_name>`" program; see `pam`(7) and `pam.d`(5)
`/etc/nsswitch.conf`         set up NSS configuration with the entry for each service. See `nsswitch.conf`(5)
`/etc/nologin`               limit the user login by the `pam_nologin`(8) module
`/etc/securetty`             limit the tty for the root access by the `pam_securetty`(8) module
`/etc/security/access.conf`  set access limit by the `pam_access`(8) module
`/etc/security/group.conf`   set group based restraint by the `pam_group`(8) module
`/etc/security/pam_env.conf` set environment variables by the `pam_env`(8) module
`/etc/environment`           set additional environment variables by the `pam_env`(8) module with the "`readenv=1`" argument
`/etc/default/locale`        set locale by `pam_env`(8) module with the "`readenv=1 envfile=/etc/default/locale`" argument. (Debian)
`/etc/security/limits.conf`  set resource restraint (ulimit, core, ...) by the `pam_linits`(8) module
`/etc/security/time.conf`    set time restraint by the `pam_time`(8) module
-------------------------------------------------------------------------------------------------------------------------------------

The limitation of the password selection is implemented by the PAM modules, `pam_unix`(8) and `pam_cracklib`(8). They can be configured by their arguments.

TIP: PAM modules use suffix "`.so`" for their filenames.

==== The modern centralized system management

The modern centralized system management can be deployed using the centralized http://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol[Lightweight Directory Access Protocol (LDAP)] server to administer many Unix-like and non-Unix-like systems on the network.  The open source implementation of the Lightweight Directory Access Protocol is http://www.openldap.org/[OpenLDAP Software].

The LDAP server provides the account information through the use of PAM and NSS with `libpam-ldap` and `libnss-ldap` packages for the Debian system. Several actions are required to enable this (I have not used this setup and the following is purely secondary information.  Please read this in this context.).

- You set up a centralized LDAP server by running program such as stand-alone LDAP daemon, `slapd`(8).
- You change the PAM configuration files in the "`/etc/pam.d/`" directory to use "`pam_ldap.so`" instead of the default "`pam_unix.so`".
 * Debian uses "`/etc/pam_ldap.conf`" as the configuration file for `libpam-ldap` and "`/etc/pam_ldap.secret`" as the file to store the password of the root.
- You change the NSS configuration in the "`/etc/nsswitch.conf`" file to use "`ldap`" instead of the default ("`compat`" or "`file`").
 * Debian uses "`/etc/libnss-ldap.conf`" as the configuration file for `libnss-ldap`.
- You must make `libpam-ldap` to use http://en.wikipedia.org/wiki/Transport_Layer_Security[SSL (or TLS)] connection for the security of password.  
- You may make `libnss-ldap` to use http://en.wikipedia.org/wiki/Transport_Layer_Security[SSL (or TLS)] connection to ensure integrity of data at the cost of the LDAP network overhead.
- You should run `nscd`(8) locally to cache any LDAP search results in order to reduce the LDAP network traffic.

See documentations in `pam_ldap.conf`(5) and "`/usr/share/doc/libpam-doc/html/`" offered by the `libpam-doc` package and "`info libc 'Name Service Switch'`" offered by the `glibc-doc` package.

Similarly, you can set up alternative centralized systems with other methods.

- Integration of user and group with the Windows system.
 * Access http://en.wikipedia.org/wiki/Windows_domain[Windows domain] services by the `winbind` and `libpam_winbind` packages.
 * See `winbindd`(8) and http://www.samba.org/samba/docs/man/Samba-HOWTO-Collection/integrate-ms-networks.html[Integrating MS Windows Networks with Samba].
- Integration user and group with the legacy Unix-like system.
 * Access http://en.wikipedia.org/wiki/Network_Information_Service[NIS (originally called YP)] or http://en.wikipedia.org/wiki/NIS@@@plus@@@[NIS@@@plus@@@] by the `nis` package.
 * See http://tldp.org/HOWTO/NIS-HOWTO/[The Linux NIS(YP)/NYS/NIS+ HOWTO].

==== "Why GNU su does not support the wheel group"

This is the famous phrase at the bottom of the old "`info su`" page by Richard M. Stallman.  Not to worry: the current `su` command in Debian uses PAM, so that one can restrict the ability to use `su` to the `root` group by enabling the line with "`pam_wheel.so`" in "`/etc/pam.d/su`".

==== Stricter password rule

Installing the `libpam-cracklib` package enables you to force stricter password rule, for example, by having active lines in "`/etc/pam.d/common-password`" as the following.

For `squeeze`:

--------------------
password required pam_cracklib.so retry=3 minlen=9 difok=3
password [success=1 default=ignore] pam_unix.so use_authtok nullok md5
password requisite pam_deny.so
password required pam_permit.so
--------------------

=== Other access controls

NOTE: See <<_alt_sysrq_key>> for restricting the kernel http://en.wikipedia.org/wiki/Secure_attention_key[secure attention key (SAK)] feature.

==== sudo

`sudo`(8) is a program designed to allow a sysadmin to give limited root privileges to users and log root activity. `sudo` requires only an ordinary user@@@sq@@@s password.  Install `sudo` package and activate it by setting options in "`/etc/sudoers`".  See configuration example at "`/usr/share/doc/sudo/examples/sudoers`" and <<_sudo_configuration>>.

My usage of `sudo` for the single user system (see <<_sudo_configuration>>) is aimed to protect myself from my own stupidity. Personally, I consider using `sudo` a better alternative to using the system from the root account all the time.   For example, the following changes the owner of "`<some_file>`" to "`<my_name>`".

--------------------
$ sudo chown <my_name> <some_file>
--------------------

Of course if you know the root password (as self-installed Debian users do), any command can be run under root from any user@@@sq@@@s account using "`su -c`".

==== PolicyKit

http://en.wikipedia.org/wiki/PolicyKit[PolicyKit] is an operating system component for controlling system-wide privileges in Unix-like operating systems.

Newer GUI applications are not designed to run as privileged processes. They talk to privileged processes via PolicyKit to perform administrative operations.

PolicyKit limits such operations to user accounts belonging to the `sudo` group on Debian system.

See `polkit`(8).

==== SELinux

http://en.wikipedia.org/wiki/Security-Enhanced_Linux[Security-Enhanced Linux (SELinux)] is a framework to tighten privilege model tighter than the ordinary Unix-like security model with the http://en.wikipedia.org/wiki/Mandatory_access_control[mandatory access control (MAC)] policies.  The root power may be restricted under some conditions.

==== Restricting access to some server services

For system security, It is a good idea to disable as much server programs as possible.  This becomes critical for network servers.  Having unused servers, activated either directly as http://en.wikipedia.org/wiki/Daemon_(computer_software)[daemon] or via http://en.wikipedia.org/wiki/Super-server[super-server] program, are considered security risks.

Many programs, such as `sshd`(8), use PAM based access control.  There are many ways to restrict access to some server services.

- configuration files: "`/etc/default/<program_name>`"
- runlevel configuration for http://en.wikipedia.org/wiki/Daemon_(computer_software)[daemon]
- http://en.wikipedia.org/wiki/Pluggable_Authentication_Modules[PAM (Pluggable Authentication Modules)]
- "`/etc/inetd.conf`" for http://en.wikipedia.org/wiki/Super-server[super-server]
- "`/etc/hosts.deny`" and "`/etc/hosts.allow`" for http://en.wikipedia.org/wiki/TCP_Wrapper[TCP wrapper], `tcpd`(8)
- "`/etc/rpc.conf`" for http://en.wikipedia.org/wiki/Open_Network_Computing_Remote_Procedure_Call[Sun RPC]
- "`/etc/at.allow`" and "`/etc/at.deny`" for `atd`(8)
- "`/etc/cron.allow`" and "`/etc/cron.deny`" for `crontab`(1)
- http://en.wikipedia.org/wiki/Firewall[Network firewall] of http://en.wikipedia.org/wiki/Netfilter[netfilter] infrastructure

See <<_the_runlevel_management_example>>, <<_the_default_parameter_for_each_init_script>>, <<_configuration_files_accessed_by_the_pam_and_nss>>, <<_network_service_initialization>>, and <<_netfilter_infrastructure>>.

TIP: http://en.wikipedia.org/wiki/Open_Network_Computing_Remote_Procedure_Call[Sun RPC] services need to be active for http://en.wikipedia.org/wiki/Network_File_System_(protocol)[NFS] and other RPC based programs.

TIP: If you have problems with remote access in a recent Debian system, comment out offending configuration such as "ALL: PARANOID" in "`/etc/hosts.deny`" if it exists.  (But you must be careful on security risks involved with this kind of action.)

=== Security of authentication

The information here may not be sufficient for your security needs but it should be a good start.

==== Secure password over the Internet

Many popular transportation layer services communicate messages including password authentication in the plain text. It is very bad idea to transmit password in the plain text over the wild Internet where it can be intercepted.  You can run these services over "http://en.wikipedia.org/wiki/Transport_Layer_Security[Transport Layer Security]" (TLS) or its predecessor, "Secure Sockets Layer" (SSL) to secure entire communication including password by the encryption.


.List of insecure and secure services and ports
[grid="all"]
`---------------------`----`-------------------`----
insecure service name port secure service name port 
----------------------------------------------------
www (http)            80   https               443  
smtp (mail)           25   ssmtp (smtps)       465  
ftp-data              20   ftps-data           989  
ftp                   21   ftps                990  
telnet                23   telnets             992  
imap2                 143  imaps               993  
pop3                  110  pop3s               995  
ldap                  389  ldaps               636  
----------------------------------------------------

The encryption costs CPU time.  As a CPU friendly alternative, you can keep communication in plain text while securing just password with the secure authentication protocol such as "Authenticated Post Office Protocol" (APOP) for POP and "Challenge-Response Authentication Mechanism MD5" (CRAM-MD5) for SMTP and IMAP.  (For sending mail messages over the Internet to your mail server from your mail client, it is recently popular to use new message submission port 587 instead of traditional SMTP port 25 to avoid port 25 blocking by the network provider while authenticating yourself with CRAM-MD5.)

==== Secure Shell

The http://en.wikipedia.org/wiki/Secure_Shell[Secure Shell (SSH)] program provides secure encrypted communications between two untrusted hosts over an insecure network with the secure authentication. It consists of the http://www.openssh.org/[OpenSSH] client, `ssh`(1), and the http://www.openssh.org/[OpenSSH] daemon, `sshd`(8).  This SSH can be used to tunnel the insecure protocol communication such as POP and X securely over the Internet with the port forwarding feature.

The client tries to authenticate itself using host-based authentication, public key authentication, challenge-response authentication, or password authentication.  The use of public key authentication enables the remote password-less login. See <<_the_remote_access_server_and_utility_ssh>>.

==== Extra security measures for the Internet

Even when you run secure services such as http://en.wikipedia.org/wiki/Secure_Shell[Secure Shell (SSH)] and http://en.wikipedia.org/wiki/Point-to-point_tunneling_protocol[Point-to-point tunneling protocol (PPTP)] servers, there are still chances for the break-ins using brute force password guessing attack etc. from the Internet.  Use of the firewall policy (see <<_netfilter_infrastructure>>) together with the following secure tools may improve the security situation.


.List of tools to provide extra security measures
[grid="all"]
`---------------`-------------`------------`----------------------------------------------------------------------------
package         popcon        size         description
------------------------------------------------------------------------------------------------------------------------
`knockd`        @-@popcon1@-@ @-@psize1@-@ small port-knock daemon `knockd`(1) and client `konck`(1)
`denyhosts`     @-@popcon1@-@ @-@psize1@-@ utility to help sysadmins thwart ssh hackers
`fail2ban`      @-@popcon1@-@ @-@psize1@-@ ban IPs that cause multiple authentication errors
`libpam-shield` @-@popcon1@-@ @-@psize1@-@ lock out remote attackers trying password guessing
------------------------------------------------------------------------------------------------------------------------

// Unmaintained
// || {{{sshguard}}} || - || protects from brute force attacks against ssh ||

==== Securing the root password

To prevent people to access your machine with root privilege, you need to make following actions.

- Prevent physical access to the hard disk
- Lock BIOS and prevent booting from the removable media
- Set password for GRUB interactive session
- Lock GRUB menu from editing

With physical access to hard disk, resetting the password is relatively easy with following steps.

1. Move the hard disk to a PC with CD bootable BIOS.
2. Boot system with a rescue media (Debian boot disk, Knopix CD, GRUB CD, ...).
3. Mount root partition with read/write access.
4. Edit "`/etc/passwd`" in the root partition and make the second entry for the `root` account empty.

If you have the edit access to the GRUB menu entry (see <<_stage_2_the_boot_loader>>) for `grub-rescue-pc` at the boot time, it is even easier with following steps.

1. Boot system with the kernel parameter changed to something like "`root=/dev/hda6 rw init=/bin/sh`".
2. Edit "`/etc/passwd`" and make the second entry for the `root` account empty.
3. Reboot system.

The root shell of the system is now accessible without password.

NOTE: Once one has root shell access, he can access everything on the system and reset any passwords on the system.  Further more, he may compromise password for all user accounts using brute force password cracking tools such as `john` and `crack` packages (see <<_system_security_and_integrity_check>>).  This cracked password may lead to compromise other systems.

The only reasonable software solution to avoid all these concerns is to use software encrypted root partition (or "`/etc`" partition) using http://en.wikipedia.org/wiki/Dm-crypt[dm-crypt] and initramfs (see <<_data_encryption_tips>>).  You always need password to boot the system, though.

