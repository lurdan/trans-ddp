<!-- CVS revision of this document "$Revision: 1.2 $"  -->
<!-- CVS revision of original english document "1.33"  -->
<!--Line width ruler (ruler uses 78 characters)     34567890123456789012345-->

<chapt id="tutorial">&debian;指南

<p>
本章为那些初涉Linux世界的新手指出了基本方向。如果你接触Linux已有一段时间，可以当成是一次实战测验。

<sect>信息资源
<p>
到<url id="&debiandoc;"
name="Debian Documentation Project (DDP)">看看，那儿有最权威的Debian参考资料。其中的许多文档都安装在<file>/usr/share/doc/</file>下。还可以到<file>/usr/share/doc-base/</file>看看，那儿有这些文档的打印文件。在<file>~/.bash_profile</file>中添加<tt>export CDPATH=.:/usr/share/doc:/usr/src/local</tt>，这样更容易访问这些文档目录。
<p>
到<url id="&linuxdoc;" name="Linux Documentation Project
(LDP)">看看，那儿有最权威的通用Linux参考资料。LDP资料通常安装在<file>/usr/share/doc/HOWTO/</file>目录下。
<p>
浏览本地或远程FTP站点的文档，可在Midnight Commander中按下<tt>F9</tt>（参阅<ref id="mc">）。
</sect>

<sect>Linux控制台

<sect1 id="login">登录
<p>
在普通Linux系统中，有6个独立的伪终端（pseudo-terminals）。同时按下<tt>Left-Alt</tt>键和<tt>F1</tt>&ndash;<tt>F6</tt>键可在这些伪终端间切换。每个伪终端均需单独登录。多用户环境是Unix最鲜明的特征，而且一用就上瘾。
<p>
使用普通用户帐号工作是个很好的Unix习惯。不得不承认，我过去常仅仅为图方便而滥用超级用户帐号（root）。
<p>
现在，我通常使用一个普通用户帐号，使用<tt>sudo</tt>、<tt>super</tt>或<tt>su -c</tt>来获得有限的root访问权限。
</sect1>

<sect1 id="newuser">添加用户
<p>
系统安装完毕，我通常会添加一个普通用户帐号，如果用户名为“penguin”，
<example>
# adduser penguin
</example>
就会创建一个这样帐号。
<p>
使用<tt>vigr</tt>命令编辑<file>/etc/group</file>：
<example>
adm:x:4:admin
src:x:40:admin, debian, ...
...
</example>
在系统默认安装状态下，<tt>adm</tt>用户组成果对<file>/var/log</file>下的许多日志文件具有读权限，并可使用<prgn>xconsole</prgn>。<tt>staff</tt>用户组拥有<file>/home</file>，适用于进行用户帐号维护工作的用户，而src用户组拥有<file>/usr/src</file>，用来存放那些完成内核编译等工作的用户。有关用户及用户组的规范描述可参阅最新的<url id="&f-users-and-groups;"
name="users-and-groups">。
<p>
我个人使用<tt>adm</tt>用户组存放那些具有管理员职责和单独<prgn>su</prgn>特权的用户（参阅<ref id="wheel">），而将CVS用户放在<tt>src</tt>用户组（参阅<ref id="cvs">）。
<p>
用<prgn>adduser</prgn>，<prgn>addgroup</prgn>，<prgn>vipw</prgn>，<prgn>vipw -s</prgn>，<prgn>vigr</prgn>，以及<prgn>vigr -s</prgn>检查一下用户及用户组是否配置得当。
</sect1>

<sect1>如何关机
<p>
和其它现代操作系统一样，系统的工作文件均缓存于内存，所以在切断电源之前Linux需要完成特别的关机程序。下面就是多用户模式下使用的关机命令：
<example>
# shutdown -h now
</example>
这是单用户模式下使用的关机命令：
<example>
# poweroff -i -f
</example>
等待屏幕上显示“System halted”字样之后切断电源。如果在BIOS和Linux中开启了apm，系统会自动切断电源。详情参阅<ref id="apm">。
</sect1>

<sect1>命令行编辑
<p>
<prgn>bash</prgn>是默认shell，它能记住使用过的命令。只需按up-arrow键就能进入记忆模式，使用上下箭头找你想输入的命令。其它需要牢记的重要击键有：
<example>
Ctrl-U:                  删除行首到光标间的内容
Ctrl-D:                  中止输入
Lt-click-and-drag-mouse: 选择并拷贝到剪贴板（gpm）
Ctrl-click-mouse:        将剪贴板内容粘贴到光标处（gpm）
</example>
<p>
对于常规Linux系统控制台，上述命令中通常指的是左边的<tt>Ctrl</tt>和<tt>Alt</tt>键。
</sect1>

<sect1>执行命令
<p>
典型的命令执行方法是使用如下shell命令行序列：
<example>
$ LC_ALL=fr ls -la
</example>
在此，<prgn>ls</prgn>程序在前台执行环境变量<tt>LC_ALL</tt>设置为<tt>fr</tt>
Here, program <prgn>ls</prgn> is executed in the foreground job with the
environment variable <tt>LC_ALL</tt> set to <tt>fr</tt> for French and
the command line argument set to <tt>-la</tt> for listing everything in
detail.  If the command line is post-fixed by <tt>&amp;</tt> sign then
the command is executed in the background job.  The background job
allows user to run multiple programs in a single shell.
<p>
The execution of the command can be managed by following key strokes.
<example>
Ctrl-C:                  中止程序
Ctrl-Z:                  暂停程序
Ctrl-S:                  停止屏幕输出
Ctrl-Q:                  恢复屏幕输出
Ctrl-Alt-Del:            重启/关闭系统（参阅/etc/inittab）
</example>
有关如何管理程序运行，可参阅<manref name="bash" section="1">中的<tt>jobs</tt>、<tt>fg</tt>、<tt>bg</tt>和<tt>kill</tt>。
</sect1>

<sect1>需要牢记的基本命令
<p>
下列是最基本的Unix命令：
<example>
ls, ls -al, ls -d, pwd, cd, cd ~user, cd -, 
cat /etc/passwd, less, bg, fg, kill, killall, 
uname -a, type <var>commandname</var>, sync, netstat,
ping, traceroute, top, vi, ps aux, tar, zcat, 
grep, ifconfig, ...
</example>
<p>
在命令提示符后输入<tt>man</tt>或<tt>info</tt>加相关命令名，可查看该命令的意思。许多Linux命令可使用下列调用获得简要帮助信息：
<example>
$ commandname --help
$ commandname -h
</example>
<tt>whatis <em>commandname</em></tt>可以显示任何命令的单行概述，这些内容来自于相关帮助文件的开头。
</sect1>

<sect1>X Window系统
<p>
从控制台启动X Window系统：
<!-- Osamu: formal name here per request in "man 7 X" manpage -->
<example>
# exec startx
</example>
右键点击root窗口可以唤出选择菜单。
</sect1>

<sect1>重要键盘命令
<p>
可在Linux控制台中使用的重要击键（<tt>plus</tt>、<tt>minus</tt>指数字键盘上的按键）：
<example>
Alt-F1 thru F6:       切换到其它伪终端
Ctrl-Alt-F1 thru F6:  切换到其它伪终端
                      (在X-window、DOSEMU等运行环境中)
Alt-F7:               切换回X-window
Ctrl-Alt-minus:       降低X-window的显示分辩率
Ctrl-Alt-plus:        提高X-window的显示分辩率
Ctrl-Alt-Backspace:   中止X-windows
Alt-X, Alt-C, Alt-V:  通用的Windows/Mac剪切、拷贝、粘贴键  
        在某些程序如Netscape Composer中，组合键中的Ctrl键换成了Alt键
</example>
</sect1>
</sect>

<sect id="mc">Midnight Commander (MC)
<p>
Midnight Commander (MC)是Linux控制台和其它终端环境中的GNU“瑞士军刀”。

<sect1>安装MC
<p>
<example>
# apt-get install mc
</example>
接着按照其手册页面<manref name="mc" section="1">中描述的方法修改<file>~/.bashrc</file>（或<file>/etc/bash.bashrc</file>, 
<file>.bashrc</file>会调用它），打开<tt>-P</tt>选项，这使得MC不必退出就能更改其工作目录。
<p>
如果处于<prgn>kon</prgn>或<prgn>Kterm</prgn> for Japanese等使用某些图形特性的终端，MC运行会出一些问题，可在MC命令行中加上<tt>-a</tt>加以预防。
</sect1>

<sect1>启动MC
<p>
<example>
$ mc
</example>
在MC中用户可轻而易举使用菜单完成所有的文件操作。
</sect1>

<sect1>文件管理器
<p>
默认状态下，所有文件列于两个目录面板。一种实用的方式是将右边窗口设定为“information”，用来查看文件访问权限等信息。下面是一些基本的击键。如果<prgn>gpm</prgn> daemon在运行，你还可以使用鼠标。（在MC中进行剪切和粘贴操作时另忘了按下shift键。）
<list compact>
<item><tt>F1</tt>: 帮助菜单
<item><tt>F3</tt>: 内置文件阅读器
<item><tt>F4</tt>: 内置编辑器
<item><tt>F9</tt>:  激活折叠菜单
<item><tt>F10</tt>: 退出Midnight Commander
<item><tt>Tab</tt>: 在两个窗口间移动
<item><tt>Insert</tt>: 为多文件操作生成文件如拷贝
<item><tt>Del</tt>: 删除文件（小心&mdash;请设置MC为安装删除模式）
<item>Cursor keys: 与各自的名字一致
</list>
</sect1>

<sect1>命令行技巧
<p>
<list>
<item><prgn>cd</prgn>命令可改变焦点屏幕中的目录位置。
<item><tt>Control-Enter</tt>或<tt>Alt-Enter</tt>可以将文件名拷贝到命令行。在编辑命令行时可与<prgn>cp</prgn>或<prgn>mv</prgn>命令结合使用。
<item><tt>Alt-Tab</tt>显示焦点文件所属文件或目录的文件名
<item>可指定MC两个目录窗口的起始目录；例如<tt>mc /etc /root</tt>。
<item><tt>Esc</tt> + <var>numberkey</var> == <tt>F<var>n</var></tt> （例如<tt>Esc</tt> + <tt>1</tt> = <tt>F1</tt>, etc.; <tt>Esc</tt> + <tt>0</tt> = <tt>F10</tt>）
<item><tt>Esc</tt> key == <tt>Alt</tt> key (= <tt>Meta</tt>,
  <tt>M-</tt>); 例如<tt>Esc</tt> + <tt>c</tt>等价于<tt>Alt-c</tt>
</list>
</sect1>

<sect1 id="mcedit">编辑器
<p>
内置编辑器的剪切-粘贴方式很有意思。按<tt>F3</tt>在起始处做标记，再次按<tt>F3</tt>在终止处做标记，这时中间的选中部分会高亮显示。然后你可以移动光标到某处按下<tt>F6</tt>，被选中部分就会移到该处。如果你按下的是<tt>F5</tt>，选中部分就会拷贝到该处。<tt>F2</tt>用来存盘，<tt>F10</tt>退出，所有方向键的作为和它们的名字一样直观。
<p>
该编辑器可直接打开某个文件：
<example>
$ mc -e filename_to_edit
$ mcedit filename_to_edit
</example>
<p>
虽然它不是多窗口编辑器，但你可利用Linux多控制台的特性达到相同的效果。要在窗口间进行拷贝操作，可使用<tt>Alt-F<var>n</var></tt>切换虚拟控制台，然后使用“File-&gt;Insert file”或“File-&gt;Copy to file”将一个文件中的内容拷贝到另一个文件。
<!-- Osamu: you could try "&rarr;" instead of "-&gt;" to get a right arrow
above. It's valid SGML, but I don't know if all browsers support it. 
Jens: "&rarr;" doesn't split a line in "->" (after "-")

For this version 1, let us keep it as is for consistency.  
I will think about it for version 2,  Thanks. 

Anyway, PS/PDF compile is real problem (Jens: LaTeX supports \rightarrow!)
-->
<p>
可指定任何外部编辑器作为内置编辑器。
<p>
许多程序使用环境变量<tt>EDITOR</tt>或<tt>VISUAL</tt>来决定使用哪个编辑器。如果你用不惯vim，可在<file>~/.bashrc</file>中加上几行来指定新的<tt>mcedit</tt>：
<example>
...
export EDITOR=mcedit
export VISUAL=mcedit
...
</example>
<p>
我强烈推荐将它们设定为<tt>vim</tt>。在Linux/Unix世界里就该使用vi(m)命令。
</sect1>

<sect1>阅读器
<p>
非常精巧的阅读器。它是在文档中搜索单词的利器。在<file>/usr/share/doc</file>目录下我总是用它，面对大量的Linux资料用它浏览是最快的方法。阅读器可以直接找开文件：
<example>
$ mc -v filename_to_view
</example>
（注意，有些不规范的软件包仍将它们的文档放在<file>/usr/doc</file>目录下。）
</sect1>

<sect1>自动启动特性
<p>
在文件上按<tt>Enter</tt>，会激活相关的程序操作该文件。这是MC的一个极方便的特点。
<example>
executable:        执行命令
man, html file:    将文件内容传入阅读器程序
tar, gz, rpm file: 象浏览子目录一要浏览它的内容
</example>
为了使这些文件特性生效，不要将可阅读文件设成可执行文件。可在MC文件菜单中改变文件属性或使用<prgn>chmod</prgn>命令。
</sect1>

<sect1>FTP虚拟文件系统
<p>
MC可通过FTP访问文件。按<tt>F9</tt>转到菜单栏，输入<tt>p</tt>激活FTP虚拟文件系统。按<tt>username:passwd@hostname.domainname</tt>格式输入URL，远程文件目录就会以本地目录的方式显示出来。
</sect1>

</sect>

<sect id="file-system">GNU/Linux文件系统基础知识
<p>
在GNU/Linux系统中每个文件和目录都与其拥有者（主人）和拥有组相关联。所有的文件信息都保存在一个称为<strong>inode</strong>的数据结构中。

<sect1 id="file-perm">文件和目录的访问权限
<p>
文件和目录的访问权限对如下3类用户进行了分别定义：
<list compact>
<item>文件<strong>拥有者</strong>(u)， 
<item>文件拥有者所在<strong>用户组</strong>中的其它成员(g)，和
<item>所有<strong>其它</strong>用户(o)。
</list>
<p>
每个文件均拥有下列三种权限：
<list compact>
<item><strong>read</strong> (r): 查看文件内容
<item><strong>write</strong> (w): 修改文件
<item><strong>execute</strong> (x): 如同命令一样执行文件
</list>
<p>
每个目录均拥有下列三种权限：
<list compact>
<item><strong>read</strong> (r): 列出目录内容
<item><strong>write</strong> (w): 在目录中增删文件
<item><strong>execute</strong> (x): 访问目录中的文件
</list>
在此，对目录的<strong>execute</strong>权限，不仅意味着允许查看目录下文件的内容，还允许获文件的其它信息如文件大小、修改时间。
<p>

<prgn>ls</prgn>可用来获取目录和文件的这些信息。参阅<manref name="ls" section="1">。使用<prgn>ls</prgn>的<tt>-l</tt>选项，就会按如下顺序显示下列信息：
<list compact>
<item><strong>文件类型</strong>（第1个字符）
 <list compact>
 <item>-: 普通文件
 <item>d: 目录
 <item>l: 符号链接
 <item>c: 字符型设备节点
 <item>b: 块设备节点
 </list>
<item>文件访问<strong>权限</strong>（接下来的9个字符，每3个一组依次代表user、group和other）。
<item>文件的<strong>硬链接数</strong> 。
<item>文件拥有<strong>user</strong>的用户名。
<item>文件所属<strong>group</strong>的用户组名。
<item>文件的字符数<strong>size</strong> (bytes)。
<item>文件的<strong>date and time</strong> (mtime)。
<item>文件的<strong>name</strong>。
</list>
<p>
在root账号下可使用<prgn>chown</prgn>改变文件的拥有者，参阅<manref name="chown" section="1">。要改变文件的所属组，可以文件拥有者或root的身份运行<prgn>chgrp</prgn>，参阅<manref name="chgrp" section="1">。要改变目录的访问权限，可以文件拥有者或root的身份运行<prgn>chmod</prgn>，参阅<manref name="chmod" section="1">。
<p>
例如，可以root帐号下创建一个目录树，并使其拥有者为<var>foo</var>，所属组为<var>bar</var>：
<example>
# cd /some/location/
# chown -R <var>foo</var>:<var>bar</var> .
# chmod -R ug+rwX,o=rX .
</example>
<p>
下面是3个更特殊的权限：
<list compact>
<item><strong>set user ID</strong> (s 或 S 而非 user's x), 
<item><strong>set group ID</strong> (s 或 S 而非 group's x), and
<item><strong>sticky bit</strong> (t 或 T 而非 other's x).
</list>
在此，如果未设置输出时屏蔽执行权限标识位，则<prgn>ls -l</prgn>的输出中这些标识位将使用大写字母。
<p>
为可执行文件设置<strong>set user ID</strong>位将允许用户以该文件拥有者的ID来执行该文件（例如以<strong>root</strong>身份）。同样，为可执行文件设置<strong>set group ID</strong>将允许用户以该文件所属组的ID来执行该文件（例如以<strong>root</strong>身份）。这将引起安全风险所以使用这些特性时要格外小心。
<p>
为目录设置<strong>set group ID</strong>，则该目录会使用BSD-like文件创建方案，即目录中所有新创建的文件均属于该目录所属的<strong>group</strong>。
<p>
为目录设置<strong>sticky bit</strong>可防止非文件拥有者移动目录中的文件。为确保全局可写目录如<file>/tmp</file>或组可写目录中的文件内容不被修改，不仅要关闭文件的<strong>写</strong>权限，还应设置目录的<strong>sticky bit</strong>，否则，任何对该目录有写权限的用户均可以将该文件移动到别处，然后在原地创建一个同名文件。
<p>
这儿有一些有关文件权限的有趣例子。
<example>
$ ls -l /etc/passwd /etc/shadow /dev/ppp /usr/sbin/pppd
crw-rw----    1 root     dip      108,   0 Jan 18 13:32 /dev/ppp
-rw-r--r--    1 root     root         1051 Jan 26 08:29 /etc/passwd
-rw-r-----    1 root     shadow        746 Jan 26 08:29 /etc/shadow
-rwsr-xr--    1 root     dip        234504 Nov 24 03:58 /usr/sbin/pppd
$ ls -ld /tmp /var/tmp /usr/local /var/mail /usr/src
drwxrwxrwt    4 root     root         4096 Feb  9 16:35 /tmp
drwxrwsr-x   10 root     staff        4096 Jan 18 13:31 /usr/local
drwxrwsr-x    3 root     src          4096 Jan 19 08:36 /usr/src
drwxrwsr-x    2 root     mail         4096 Feb  2 22:19 /var/mail
drwxrwxrwt    3 root     root         4096 Jan 25 02:48 /var/tmp
</example>
</sect1>

<sect1 id="timestamp">时间戳
<p>
GNU/Linux的文件有3种类型的时间戳：
<list compact>
<item><strong>mtime</strong>: 修改时间 (<tt>ls -l</tt>),
<item><strong>ctime</strong>: 状态改变时间 (<tt>ls -lc</tt>)，以及
<item><strong>atime</strong>: 最近访问时间 (<tt>ls -lu</tt>).
</list>
注意<strong>ctime</strong>并非文件创建时间。
<list compact>
<item>覆盖一个文件会改变所有三类时间<strong>mtime</strong>、<strong>ctime</strong>和<strong>atime</strong>所有三类时间。
<item>改变文件的访问权限或拥有者会改变文件的<strong>ctime</strong>和<strong>atime</strong>。
<item>读文件会改变文件的<strong>atime</strong>。
</list>
注意，在GNU/Linux系统中，即便是简单的读文件通常会引起文件的写操作，从而更新<strong>inode</strong>上的<strong>atime</strong>信息。使用<tt>noatime</tt>选项来挂载文件系统，可使用系统忽略该操作，从而加速文件的访问和读取。参阅<manref name="mount" section="8">。
</sect1>

<sect1 id="links">链接
<p>
在2种方法将文件<var>foo</var>关联到不同的文件名<var>bar</var>。
<list compact>
<item><strong>hardlink</strong>（硬链接）相当于现存文件的另一个名字。(<tt>ln <var>foo</var> <var>bar</var></tt>)，
<item><strong>symlink</strong>（符号链接）指向一个不同的文件。(<tt>ln -s <var>foo</var> <var>bar</var></tt>)。
</list>
下面的例子显示了链接数的改变和使用<prgn>rm</prgn>命令时产生的微妙差异。
<example>
$ echo "Original Content" &gt; <var>foo</var>
$ ls -l <var>foo</var>
-rw-r--r--    1 osamu    osamu           4 Feb  9 22:26 <var>foo</var>
$ ln <var>foo</var> <var>bar</var>     # hardlink
$ ln -s <var>foo</var> <var>baz</var>  # symlink
$ ls -l <var>foo</var> <var>bar</var> <var>baz</var>
-rw-r--r--    2 osamu    osamu           4 Feb  9 22:26 <var>bar</var>
lrwxrwxrwx    1 osamu    osamu           3 Feb  9 22:28 <var>baz</var> -&gt; <var>foo</var>
-rw-r--r--    2 osamu    osamu           4 Feb  9 22:26 <var>foo</var>
$ rm <var>foo</var>
$ echo "New Content" &gt; <var>foo</var>
$ cat <var>bar</var>
Original Content
$ cat <var>baz</var>
New Content
</example>
上例中所有的符号链接均拥有访问权限“rwxrwxrwx”，它们的访问权限均由它们所指向的文件来定义。
<p>
<file>.</file>链接到它所属的目录，因此任何新目录的链接数都从2开始计算。<file>..</file>链接到父目录，因些目录链接数会随新的子目录数的增长而增长。
</sect1>
</sect>


<sect>进一步学习
<p>
许多Unix入门级参考书出自在O'Reilly，在计算机的各个领域，想买到优秀的指导书，O'Reilly不会让你失望。LDP的文档<url id="&tips-howto;" name="Tips-HOWTO">是另一个极好的资源。更多资源参阅<ref id="support">。

</sect>

</chapt>

