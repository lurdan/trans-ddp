<!-- CVS revision of this document "$Revision: 1.2 $"  -->
<!-- CVS revision of original english document "1.65"  -->

<chapt id="install">Debian系统安装提示

<p>
安装Debian的官方文档位于<url id="&stable-info;">和<url id="&stable-install;">。
<p>
开发版文档位于<url id="&testing-info;" >和<url id="&testing-install;">（处于写作中，有时可能无法访问）。
<p>
尽管“&book-title;”写于Potato发布期间，但其中的绝大部分内部均更新至&stabledebian;和&testingdebian;。

<sect>常规Linux安装提示
<p>
使用<tt>testing</tt>或<tt>unstable</tt>版&debian;会增加遇到严重软件错误的风险，在机器上安装一个稳定版本的&debian;，然后使用多重启动方案可有效控制风险。或者使用更安全的<prgn>chroot</prgn>技巧，参阅<ref id="chroot">。后者可实现同时在不同的控制台运行多种版本的&debian;。
<p>

<sect1>硬件兼容性
<p>
Linux兼容绝大多数PC硬件，而且几乎可以安装在任何系统架构上。对我而言它的安装过程和Windwos 95/98/Me一样简单。可兼容的硬件列表也在不断增加。
<p>
如果你有一部笔记本电脑，可以去<url id="&linonlap;" name="Linux on Laptops">查找对应品牌和型号的安装指导。
<p>
我推荐的台式机硬件通常“比较保守”：
<list compact>
<item>用于工作目的时最好选SCSI而不选IDE，IDE/ATAPI HD适于个人使用。
<item>IDE/ATAPI CD-ROM (或CD-RW)。
<item>最好选PCI而不选ISA, 特别是网卡(NIC)。
<item>选用便宜的NIC。Tulip for PCI、NE2000 for ISA都不错。 
<item>初学Linux安装时避免使用PCMCIA (笔记本电脑)。
<item>别使用USB键盘、鼠标......除非你想证明自己的实力。
</list>
<p>
如果你的机器特别慢，最好把硬盘插到另一个速度快些的机器上安装。
</sect1>

<sect1>确定PC硬件和芯片组
<p>
在安装过程中，可能会要你确定电脑的硬件或芯片组等。有时了解这些信息并非易事，这儿有个方法：
<enumlist compact>
  <item>打开机箱亲自看看。
  <item>记下显卡芯片、网卡芯片、串口和IDE端口周围的芯片上印的数字。
  <item>记下印在PCI和ISA插卡背面的名称。
</enumlist>
</sect1>

<sect1>在&debian;下确定PC硬件
<p>
在Linux系统中使用下列命令，可获得机器当前使用的硬件及配置的相关信息。
<example>
$ lspci -v |pager
$ pager /proc/pci
$ pager /proc/interrupts
$ pager /proc/ioports
$ pager /proc/bus/usb/devices
</example>
在安装过程中按ALT-F2进入控制台，可运行这些命令获得帮助。
<p>
对于USB设备，它们在<file>/proc/bus/usb/devices</file>中以<tt>Cls=<var>nn</var></tt>的形式列出：
<list compact>
<item>Cls=00 : Unused
<item>Cls=01 : Audio (speaker etc.)
<item>Cls=02 : Communication (MODEM, NIC, ...)
<item>Cls=03 : HID (Human Interface Device: KB, mouse, joy stick)
<item>Cls=07 : Printer
<item>Cls=08 : Mass storage (FDD, CD/DVD drive, HDD, Flash, ...)
<item>Cls=09 : Hub (USB hub)
<item>Cls=255 : Vendor specific
</list>
如果设备类别（device class）不是255，则Linux可支持该设备。
</sect1>

<sect1>在其它OS下确定PC硬件
<p>
还可从其它操作系统中获取硬件信息。
<p>
安装其它商业版Linux，当前它们在硬件侦测方面做得比Debian好，不过一但Sarge中加入了debian-installer，情况就会改变。
<p>
安装Windows。用鼠标右键点“我的电脑”在菜单中选属性/设备管理，可获得硬件配置信息。记下所有的资源信息如IRQ、I/O端口地址和DMA。有些旧的ISA卡可能要在DOS下配置。
</sect1>

<sect1>Lilo神话
<p>
加载Lilo受限于1024柱面。&mdash;错！
<p>
Debian Potato之后使用的新版<prgn>lilo</prgn>支持lba32。只要主板的BIOS版本支持lba32，<prgn>lilo</prgn>就可以冲破1024柱面的限制。
<p>
如果你使用的是旧版<prgn>lilo.conf</prgn>，请确定在你的<prgn>lilo.conf</prgn>文件开头的某处加了一行命令指示系统读取“lba32”。参阅<file>&f-lilo;</file>。
</sect1>

<sect1 id="instgrub">GRUB
<p>
GNU HURD项目组提供的新的系统引导工具<package>grub</package>可使用于&debian; Woody系统。
<example>
# apt-get update
# apt-get install grub-doc
# mc &f-grub-doc;
... read contents
# apt-get install grub
# pager &f-grub;
... read it :)
</example>
要编辑GRUB选单，可编辑<file>&f-grub-menu;</file>文件。参阅<ref id="bootgrub">获取有关启动参数设置信息，它和<package>lilo</package>的设置方法不太一样。
</sect1>

<sect1 id="bootfloppy">选择引导软盘
<p>
Potato时期，在进行普通台式机安装时我喜欢用IDEPCI磁盘套件。到了Woody，我爱用bf2.4启动盘套件。两者都使用同一版本的<package>boot-floppies</package>来创建引导软盘。
<p>
如果你有一张PCMCIA网卡，你就得使用标准启动盘套件（使用的软盘数最多，但可用的驱动模块最全）并在PCMCIA设置中配置NIC；别在标准网络设置对话框中设置网卡。
<p>
对于特殊系统，需要创建一张自制急救盘，可以用别的机器上编译好的内核压缩镜像替换&debian;急救盘中名为“linux”的内核镜像。详情参阅急救盘中的<file>readme.txt</file>文件。急救盘使用MS-DOS文件系统，所以你可以在任何系统下编辑它。这将为那些使用特殊网卡的人造福。
<p>
到了Sarge，可用<package>debian-installer</package>或<package>pgi</package>来创建引导软盘。
</sect1>

<sect1>安装系统
<p>
这方面的官方文档见于<url id="&stable-install;">或<url id="&testing-install;">（处于写作中，有时可能无法访问）
<p>
如果你是用引导软盘安装testing发行版，你需要在安装过程中按<tt>ALT-F2</tt>打开一个控制台，手工编辑<file>/etc/apt/sources.list</file>文件，将软件包下载入口从<tt>stable</tt>改为<tt>testing</tt>。
<p>
在安装<file>/dev/hda</file>的<prgn>mbr</prgn>时，我喜欢将<prgn>lilo</prgn>装在诸如<file>/dev/hda3</file>的位置，这样做可以减小引导信息被覆盖的风险。
<p>
下面是我在安装过程中所做的选择。
<list compact>
<item>MD5 passwords "yes"
<item>shadow passwords "yes"
<item>Install "advanced" (dselect **) and select
  <list compact>
    <item>取消emacs (如果它被选中了)、nvi、tex、telnet、talk(d)；
    <item>选上mc、vim、nano-tiny或elvis-tiny任选一个。
    <p>
     参阅<ref id="dselect">。即使你是个Emacs迷也不要在安装阶段使用它，nano可满足你的需要。也不要安装其它庞大的软件包如TEX（Potato曾在此阶段设置它为默认安装）。参阅<ref id="bin-editor">了解此时安装nano-tiny或elvis-tiny的原因。
  </list>
<item>在每个软件包安装对话框中，回答所有的配置提问均=“y”（替换当前值）
<item><package>exim</package>：选第2项，因为我使用ISP的SMTP服务器发送邮件。
</list>
<p>
有关dselect的更多信息，参阅<ref id="dselect">。
</sect1>

<sect1>网络所需的主机名和IP地址
<p>
LAN配置的例子（C subnet: 192.168.1.0/24）：
<example>
Internet
   |
   +--- 外部ISP提供POP服务(使用fetchmail访问)
   | 
  Access point ISP提供DHCP服务和SMTP中继服务
   |                     :
  Cable modem         (Dial-up)
   |                     :
LAN网关外部端口: eth0 (IP由ISP的DHCP提供)
 使用老式笔记本电脑(IBM Thinkpad, 486 DX2 50 MHz, 20 MB RAM)
 运行Linux 2.4内核，提供ext3文件系统支持
 运行"ipmasq"软件包(安装它的NAT和firewall加强包)
 运行"dhcp-client"软件包配置eth0 (覆盖DNS的设定)
 运行"dhcp"软件包配置eth1
 运行"exim"作为smarthost (mode 2)
 运行"fetchmail"设一个较长的时间值(fallback)
 运行"bind" 作为高速域名服务器，在从LAN连入Internet时
            作为认证域名服务器，在从LAN中连入网中某个域时
 运行"ssh"使用端口22和8080(从任何地点连接)
 运行"squid"作为缓存服务器连接Debian包文档服务器(APT需要连接它)
LAN网关内部端口: eth1 (IP = 192.168.1.1, 固定)
                         |
         +--- LAN Switch (10 base T) ---+
         |                              |
LAN中一些固定IP客户端            LAN中一些DHCP客户端
(IP = 192.168.1.2-127, 固定)     (IP = 192.168.1.128-200, 动态)
</example>
参阅<ref id="gateway">了解更多LAN网关服务器设置方面的信息。
</sect1>

<sect1>用户帐号
<p>
为了让机器访问起来有一致的感觉，我的系统中开头几个帐号通常是不变的。
<p>
我首先创建的用户帐号名是“admin”（uid=100）。我通过该帐号转发所有的root email。该帐号加入到<tt>adm</tt>用户组（参阅<ref id="wheel">），这个用户组为成员提供大量root特权的命令，通过<prgn>su</prgn>或<prgn>sudo</prgn>命令就能使用PAM。详情参阅<ref id="newuser">。
</sect1>

<sect1>创建文件系统
<p>
<sect2>硬盘分区
<p>
我更喜欢将不同的目录树分别装在不同的分区下，这样可以将系统崩溃造成的损失减到最小。例如：
<example>
/          == (/ + /boot + /bin + /sbin)
           == 50MB+
/tmp       == 100MB+
/var       == 100MB+
/home      == 100MB+
/usr       == 700MB+ with X
/usr/local == 100MB
</example>
<p>
<file>/usr</file>目录的尺寸很大程度上取决于X-window应用程序和文档的数目。如果只运行控制台终端<file>/usr</file>可以小到300MB，但如果你装了大量Gnome应用程序2GB-3GB也很正常。当<file>/usr</file>增长得太大，将<file>/usr/share/</file>移到别的分区是最有效的解救方法。对新的Linux2.4内核包，<file>/</file>目录的大小可能要超过200MB。

<p>
例如，当前我的Internet网关服务器的硬盘使用情况如下（由<tt>df -h</tt>命令输出）：
<example>
Filesystem            Size  Used Avail Use&percnt; Mounted on
/dev/hda3             300M  106M  179M  38&percnt; /
/dev/hda7             100M   12M   82M  13&percnt; /home
/dev/hda8             596M   53M  513M  10&percnt; /var
/dev/hda6             100M  834k   94M   1&percnt; /var/lib/cvs
/dev/hda9             596M  222M  343M  40&percnt; /usr
/dev/hda10            596M  130M  436M  23&percnt; /var/cache/apt/archives
/dev/hda11            1.5G  204M  1.2G  14&percnt; /var/spool/squid
</example>
（有块大空间留给<file>/var/spool/squid</file>作为下载软件包时代理服务器的缓冲区）
<p>
下面的<tt>fdisk -l</tt>输出提供了一个分区分配方案：
<example>
# fdisk -l /dev/hda # comment

/dev/hda1             1        41    309928+   6  FAT16 # DOS
/dev/hda2            42        84    325080   83  Linux # (not used)
/dev/hda3   *        85       126    317520   83  Linux # Main
/dev/hda4           127       629   3802680    5  Extended
/dev/hda5           127       143    128488+  82  Linux swap
/dev/hda6           144       157    105808+  83  Linux
/dev/hda7           158       171    105808+  83  Linux
/dev/hda8           172       253    619888+  83  Linux
/dev/hda9           254       335    619888+  83  Linux
/dev/hda10          336       417    619888+  83  Linux
/dev/hda11          418       629   1602688+  83  Linux
</example>
里面有一个未使用的分区。留作安装第二个Linux或为增长的目录树提供扩充余地。

<sect2>挂载文件系统
<p>
下面的<file>/etc/fstab</file>文件可完成上述分区的挂载工作：
<example>

# /etc/fstab: static file system information.
#
# file system   mount point     type    options                dump pass
/dev/hda3       /               ext2    defaults,errors=remount-ro 0 1
/dev/hda5       none            swap    sw                      0 0
proc            /proc           proc    defaults                0 0
/dev/fd0        /floppy         auto    defaults,user,noauto    0 0
/dev/cdrom      /cdrom          iso9660 defaults,ro,user,noauto 0 0
#
# keep partition separate
/dev/hda7       /home           ext2    defaults                0 2
/dev/hda8       /var            ext2    defaults                0 2
/dev/hda6       /var/lib/cvs    ext2    defaults                0 2
# noatime will speed up file access for read access
/dev/hda9       /usr            ext2    defaults,noatime        0 2
/dev/hda10      /var/cache/apt/archives ext2    defaults        0 2

# very big partition for proxy cache
/dev/hda11      /var/spool/squid ext2   rw                      0 2

# backup bootable DOS
/dev/hda1       /mnt/dos        vfat    rw,noauto               0 0
# backup bootable Linux system (not done)
/dev/hda2       /mnt/linux      ext2    rw,noauto               0 0
#
# nfs mounts
mickey:/        /mnt/mickey     nfs     ro,noauto,intr          0 0
goofy:/         /mnt/goofy      nfs     ro,noauto,intr          0 0
# minnie:/ /mnt/minnie smbfs ro,soft,intr,credentials={filename} 0 2
</example>

对于NFS，我使用<tt>noauto、intr</tt>以及默认的<tt>hard</tt>项。如果有死连接，挂载进程可能会死掉，可以使用Control-C恢复。
<p>
对于使用Samba连接的Windows机器(smbfs)，<tt>rw,auto,soft,intr</tt>是个好方案，参阅<ref id="samba">。
<p>
对于软驱，使用<tt>noauto,rw,sync,user,exec</tt>可以防止因退盘前未执行卸载命令而造成文件损坏，但它会降低写盘速度。

<sect2>自动挂载
<p>
自动挂载的要点：
<list compact>
<item>加载<tt>vfat</tt>模块，从而<file>/etc/auto.misc</file>可使用<tt>-fstype=auto</tt>参数：
<example>
# modprobe vfat # prior to the floppy access attempt
 ... or to automate this settings,
# cat >>/etc/modules
vfat
^D
 ... 重启系统。
</example>
<item>设置<file>/etc/auto.misc</file>如下：
<example>
floppy -fstype=auto,sync,nodev,nosuid,gid=100,umask=000 :/dev/fd0
 ... 此处gid=100表示“users”。
</example>
<item>在<file>/home/<var>user</var></file>中创建链接文件<file>cdrom</file>和<file>floppy</file>，分别指向<file>/var/autofs/misc/cdrom</file>和<file>/var/autofs/misc/floppy</file>。
<item>将<var>user</var>加入“users”用户组。
</list>

<sect2>挂载NFS
<p>
外部Linux NFS服务器（goofy）处于防火墙（gateway）之后。在我的LAN内部，安全策略非常宽松，因为只有我自己一个用户。为了访问NFS，NFS服务器端要按如下方式加上<file>/etc/exports</file>：
<example>
# /etc/exports: the access control list for file systems which may be
#               exported to NFS clients.  See exports(5).
/       (rw,no_root_squash)
</example>
除安装和激活NFS服务器及客户机外，这一步对激活NFS服务器也是必要的。
<p>
我通常创建一个单独的2GB分区，有时想玩玩别的Linux系统，就可以装在这儿。两个系统可共享swap和<file>/tmp</file>分区。多分区方案很难满足这种需求。如果只想装一个运行简单控制台模式的系统，分区留500MB就绰绰有余了。
</sect1>

<sect1>DRAM内存指导
<p>
下列是有关DRAM的简单指导。
<example>
  4 MB:  Linux内核运行的最低配置。
 16 MB:  控制台系统运行的最低配置。
 32 MB:  简单X系统运行的最低配置。
 64 MB:  GNOME/KDE系统运行最低配置。
128 MB:  流畅运行GNOME/KDE。
256+MB:  如果你银子充裕干嘛不呢？DRAM很便宜了。
</example>
使用启动选项<tt>mem=4m</tt>（或lilo <tt>append="mem=4m"</tt>）可以看看只用4MB内存时系统如何运行。如果机器的BIOS比较旧且内存数大于64MB启动时就得加lilo启动参数。
</sect1>

<sect1>Swap空间
<p>
我按下面的指导原则来划分swap空间：
<list compact>
<item>每个swap分区均&lt;128MB（使用旧版2.0内核），&lt;2GB（使用最新内核）
<item>总容量 =（机器内存大小的1到2倍）或（128MB到2GB之间）
<item>将它们分散于不同的硬盘，在<file>/etc/fstab</file>中可使用<tt>sw,pri=1</tt>选项挂载它们。这样可确保内核以RAID方式使用swap分区，最大限度地发挥swap的性能。
<item>如果可能，使用硬盘中间的扇区。
</list>
<p>
尽管你不一定真的需要，但为系统设置多一些swap空间（128MB）总要好点，至少运行有内存漏洞的坏程序，系统会先慢下来而不是马上死机。
</sect1>
</sect>

<sect>Bash设置
<p>
我按自己的喜好修改shell启动脚本：
<example>
/etc/bash.bashrc        换成你的喜好
/etc/profile            保持发布版设定 ( \w -&gt; \W)
/etc/skel/.bashrc       换成你的喜好
/etc/skel/.profile      换成你的喜好
/etc/skel/.bash_profile 换成你的喜好
~/.bashrc               换成你的喜好，会改变所有用户的设置
~/.profile              换成你的喜好，会改变所有用户的设置
~/.bash_profile         换成你的喜好，会改变所有用户的设置
</example>
<url id="&examples;" name="可以参考我提供的脚本样例">。我喜欢系统看起来清清楚楚，所以将<prgn>umask</prgn>设为002或022。
<p>
<prgn>PATH</prgn>依次由以下配置文件设定：
<example>
/etc/login.defs  - 在shell之前设定PATH
/etc/profile     (会调用/etc/bash.bashrc)
~/.bash_profile  (会调用~/.bashrc)
</example>
</sect>

<sect>鼠标设置
<p>
<sect1>PS/2鼠标
<p>
对于ATX主板上使用PS/2接口的鼠标，信号通路如下：
<example>
mouse -&gt; /dev/psaux -&gt; gpm -&gt; /dev/gpmdata = /dev/mouse -&gt; X
</example>
这里，创建指向<file>/dev/gpmdata</file>的符号链接<file>/dev/mouse</file>，有助于简化配置操作。（例如，如果你决定不再使用gpm daemon，只需在删掉<prgn>gpm</prgn> daemon后，将符号链接<file>/dev/mouse</file>指向<file>/dev/psaux</file>。）
<p>
信号通路使得对键盘和鼠标插拔操作，只要重启<prgn>gpm</prgn>就可以生效，不必重启X！
<p>
处于<prgn>gpm</prgn>输出与X输入之间的信号通路协议有两种执行方式，“ms3”（使用Microsoft 3-button serial mouse协议）和“raw”（对于已连接的鼠标使用相同的协议），此处选择的协议将决定X配置中使用的协议。
<p>
下面我将示范一下如何配置Logitech 3-button（传统Unix风格的鼠标）PS/2鼠标：
<p>
如果新版X4不支持你的显卡则需要使用旧版X3（如某些ATI 64位卡），请配置<tt>/etc/X11/X86Config</tt>而不是<tt>/etc/X11/X86Config-4</tt>，下面的示例中使用的是X4：

<sect2 id="gpmms3">使用ms3协议方式
<p>
<example>
/etc/gpm.conf            | /etc/X11/X86Config-4
=========================+======================================
device=/dev/psaux        | Section "InputDevice"
responsiveness=          |  Identifier "Configured Mouse"
repeat_type=ms3          |  Driver     "mouse"
type=autops2             |  Option     "CorePointer"
append=""                |  Option     "Device"   "/dev/mouse"
sample_rate=             |  Option     "Protocol" "IntelliMouse"
                         | EndSection
</example>
如果使用这种方式，设置鼠标类型只需编辑<file>gpm.conf</file>，X的设置将保持不变。参阅<url id="&examples;" name="我的样例脚本">。

<sect2 id="gpmraw">使用raw协议方式
<p>
<example>
/etc/gpm.conf            | /etc/X11/X86Config-4
=========================+======================================
device=/dev/psaux        | Section "InputDevice"
responsiveness=          |  Identifier "Configured Mouse"
repeat_type=raw          |  Driver     "mouse"
type=autops2             |  Option     "CorePointer"
append=""                |  Option     "Device"   "/dev/mouse"
sample_rate=             |  Option     "Protocol" "MouseManPlusPS/2"
                         | EndSection
</example>
如果使用这种方式，设置鼠标类型可编辑<file>gpm.conf</file>，同时也会改变X的设置。

<sect2>如何设置不同的鼠标
<p>
<prgn>gpm</prgn>的设备类型<tt>autops2</tt>可以自动检测出市面上大多数PS/2鼠标。不幸的是它也不是万能的，而且Woody之前的发布版中并不包括它，这时可在<file>gpm.conf</file>中试试<tt>ps2</tt>或者<tt>imps2</tt>。想看看gpm支持哪些类型的鼠标可输入：<tt>gpm -t help</tt>。参阅<manref name="gpm" section="8">。
<p>
如果使用的是2键PS/2鼠标，可选上X协议的<tt>Emulate3Buttons</tt>项。协议中2键鼠标和3键鼠标的区别在于每次按下中间键时，是自动检测还是自动模拟信号传给<prgn>gpm</prgn>。
<p>
对于在X协议<ref id="gpmraw">或不使用<prgn>gpm</prgn>，可使用下面的设置：
<list compact>
<item><tt>IntelliMouse</tt>: 串口鼠标(gpm转换器使用"ms3")
<item><tt>PS/2</tt>: PS/2鼠标(通常首先试试这项) 
<item><tt>IMPS/2</tt>: 任何PS/2鼠标(2键、3键或滚轴鼠标) 
<item><tt>MouseManPlusPS/2</tt>: Logitech PS/2鼠标 
<item><tt>...</tt>
</list>
更多信息可浏览<url id="&mousexf86;" name="Mouse Support in XFree86">。
<p>
对于典型的Microsoft滚轴鼠标，有报导说这样设置最好：
<example>
/etc/gpm.conf            | /etc/X11/X86Config-4
=========================+======================================
device=/dev/psaux        | Section "InputDevice"
responsiveness=          |  Identifier "Configured Mouse"
repeat_type=raw          |  Driver     "mouse"
type=autops2             |  Option     "CorePointer"
append=""                |  Option     "Device"   "/dev/mouse"
sample_rate=             |  Option     "Protocol" "IMPS/2"
                         |  Option     "Buttons" "5"
                         |  Option  "ZAxisMapping" "4 5"
                         | EndSection
</example>
<p>
对于某些最新的Toshiba超薄笔记本，在System-V init脚本中设置<prgn>gpm</prgn>先于PCMCIA激活可防止系统锁死。听起来古怪不过是真的。

<sect1>USB鼠标
<p>
请确定你完成了：
<list compact>
<item>在内核中打开了“Input Core Support”和“Input Core Support/Mouse Support”或作为模块加载。
<item>在内核中打开了“Support for USB”、“Preliminary USB device filesystem”、“UHCI or OHCI”和“USB HID Support”或作为模块加载。
<item>安装了<package>hotplug</package>软件包并在<file>/etc/default/hotplug.usb</file>中激活了<tt>X11_USBMICE_HACK=true</tt>。
</list>
<p>
如果你没使用devfs，则需按下面的方法创建一个设备节点<file>/dev/input/mice</file>：
<example>
# cd /dev
# mkdir input
# mknod input/mice c 13 63
</example>
<p>
对于典型的滚轴<strong>USB</strong>鼠标，配置如下：
<example>
/etc/gpm.conf            | /etc/X11/X86Config-4
=========================+======================================
device=/dev/input/mice   | Section "InputDevice"
responsiveness=          |  Identifier "Generic Mouse"
repeat_type=raw          |  Driver     "mouse"
type=autops2             |  Option     "SendCoreEvents" "true"
append=""                |  Option     "Device"   "/dev/input/mice"
sample_rate=             |  Option     "Protocol" "IMPS/2"
                         |  Option     "Buttons" "5"
                         |  Option  "ZAxisMapping" "4 5"
                         | EndSection
</example>
<p>
更多信息可浏览<url id="&linuxusb;" name="Linux USB Project">。

<sect1>触摸屏（touch pad）
<p>
尽管触摸屏在笔记本电脑上默认是模拟2键PS/2鼠标行为，仍可从<package>tpconfig</package>软件包获得对这类设备的完全操控。例如在<file>/etc/default/tpconfig</file>中设置<tt>OPTIONS="--tapmode=0"</tt>可屏蔽讨厌的“click by tap”行为。按如下方法设置<file>/etc/gpm.conf</file>可以控制台下使用触摸屏和USB外接鼠标。
<example>
device=/dev/psaux
responsiveness=
repeat_type=ms3
type=autops2
append="-M -m /dev/input/mice -t autops2"
sample_rate=
</example>

</sect>

<sect>NFS设置
<p>
安装NFS要设置<file>/etc/exports</file>。
<example>
# echo "/ *.domainname-for-lan-hosts(rw,no_root_squash,nohide)" \
        &gt;&gt; /etc/exports
</example>
<url id="&examples;" name="详情见我的样例脚本">.
</sect>

<sect id="samba">Samba设置
<p>
参考资料：
<list compact>
<item><url id="&sambahome;">
<item><package>samba-doc</package> package
</list>
<p>
以“share”方式安装Samba比较容易，因为安装过程会创建WfW-type共享驱动器。但最好使用“user”模式来配置它。
<p>
可以用<prgn>debconf</prgn>或<prgn>vi</prgn>来设置Samba：

<example>
# dpkg-reconfigure --priority=<var>low</var> samba # in Woody
# vi /etc/samba/smb.conf
</example>
<url id="&examples;" name="详情参阅我的脚本样例">.
<p>
可通过<prgn>smbpasswd</prgn>向smbpasswd文件添加一个新用户：
<example>
$ su -c "smbpasswd -a username"
</example>
确保使用的加密密码有恰当的兼容性。
<p>
按下表中相应的值设定<tt>os level</tt>（数字越大，服务器的优先级越高）：
<example>
0:      Samba with a loose attitude (will never become a master browser)
1:      WfW 3.1, Win95, Win98, Win/Me?
16:     Win NT WS 3.51
17:     Win NT WS 4.0
32:     Win NT SVR 3.51
33:     Win NT SVR 4.0
255:    Samba with mighty power
</example>
确认用户是目录所属组的成员，并且对目录赋予了执行权限。
</sect>

<sect id="printer">打印机设置
<p>
传统打印方法是<prgn>lpr</prgn>/<prgn>lpd</prgn>。新的CUPS系统（Common UNIX Pinting System）提供了另一方法PDQ，详情参阅<url id="&printing-howto;" name="Linux Printing HOWTO">。

<sect1 id="lprlpd"><prgn>lpr</prgn>/<prgn>lpd</prgn>
<p>
For the <prgn>lpr</prgn>/<prgn>lpd</prgn>的打印缓冲池（type spoolers）（<package>lpr</package>、<package>lprng</package>和<package>gnulpr</package>），如果它们连接的是PostScript或text-only打印机（最基本的打印机）可按如下方式设置<file>/etc/printcap</file>：
<example>
<var>lp</var>|<var>alias</var>:\
        :sd=/var/spool/lpd/<var>lp</var>:\
        :mx#0:\
        :sh:\
        :lp=/dev/lp0:
</example>
上述各行的意思是：
<list compact>
<item>Head line: <var>lp</var> &mdash; spool名称, <var>alias</var> =
 alias
<item>mx#0 &mdash; 不限最大文件尺寸
<item>sh &mdash; 不打印页眉 
<item>lp=/dev/lp0 &mdash; 本地机印机，或port@host远程打印机 
</list>
如果连接的是台PostScript打印机，上述设置就够用了。如果是Windows机器通过Samba打印，上述设置也适用于任何Windows支持的打印机（不支持双向通信）。你必须在Windows环境中对打印机做相应的配置。
<p>
如果你没有PostScript打印机，就得用<prgn>gs</prgn>安装过滤系统。有很多自动配置工具可用于配置<file>/etc/printcap</file>，可选择下列任何一组：
<list compact>
<item><package>gnulpr</package>、(<package>lpr-ppd</package>)和<package>printtool</package> &mdash; 我用这种
<item><package>lpr</package>和<package>apsfilter</package>
<item><package>lpr</package>和<package>magicfilter</package>
<item><package>lprng</package>和<package>lprngtool</package>
<item><package>lprng</package>和<package>apsfilter</package>
<item><package>lprng</package>和<package>magicfilter</package>
<!-- I can think of more combinations but I add them if someone  
  actually report me they got it working with them.  -->
</list>
<p>
想运行GUI配置工具如<prgn>printtool</prgn>，需要root权限，参阅<ref id="ss-xsu">。<prgn>printtool</prgn>可创建打印缓冲池，它使用<prgn>gs</prgn>模拟PostScript打印机，所以要使用PostScript打印驱动来访问它们。在Windows端，“Apple LaserWriter”是标准件。
</sect1>

<sect1 id="cups">CUPS&trade;
<p>
首先安装Common UNIX Printing System（或CUPS&trade;）：
<example>
# apt-get install cupsys cupsomatic-ppd 
# apt-get install cupsys-bsd cupsys-driver-gimpprint
</example>
<!-- CUPS dependencies: Recommends are not installed automatically -->
<p>
接着用浏览器来配置系统：
</p>
<p>
<example>
$ <var>mybrowser</var> http://localhost:631
</example>
</p>
<p>
举个例子，将你的打印机联接到可访问打印机列表中：
<list>
<item>在主页面上点击“Printers”，然后点“Add Printer”，
<item>输入用户名和密码，进入“root”，
<item>按提示添加打印机，
<item>返回“Printers”页面，点“Configure Printer”，
<item>设定打印纸尺寸、分辨率和其它参数。
</list>
更多信息可浏览<url id="http://localhost:631/documentation.html">和<url id="&cups-help;">。
<p>
对于2.4内核，参见<ref id="parport">。
</sect1>
</sect>

<sect>其它主机安装提示

<sect1>初始化安装完成后再装些什么
<p>
到现在，你已经拥有一个小巧但功能颇强的&debian;。接下来，可以安装那些较大的软件包了。
<list>
<item>运行<prgn>tasksel</prgn>。参阅<ref id="tasksel">。
<p>
可按需选择：
<list compact>
<item>End-user &mdash; X window system
<item>Development &mdash; C and C++
<item>Development &mdash; Python
<item>Development &mdash; Tcl/Tk
<item>Miscellaneous &mdash; TeX/LaTeX environment
<item>
For others &mdash;我把t<prgn>tasksel</prgn>作为安装指导，查看&lt;Task Info&gt;了解有关任务的安装列表 然后用<prgn>dselect</prgn>来选择安装。 
</list>

<item>运行<prgn>dselect</prgn>。
<p>
在此，你最想做的事就是选择钟爱的编辑器和其它需要的程序。你可以同时安装Emacs的多个变种。参阅<ref id="dselect">和<ref id="pop-editor">。
<p>
你也可以将某些默认的软件包替换成特定版本。
<list compact>
<item>lynx-ssh (而不是lynx)
<item>... <!-- Add list in generic way. -->
</list>
<item>...
</list>

我通常会编辑<file>/etc/inittab</file>简化关机步骤。
<example>
...
# What to do when CTRL-ALT-DEL is pressed.
ca:12345:ctrlaltdel:/sbin/shutdown -t1 -a -h now
...
</example>
</sect1>

<sect1>模块
<p>
在初始安装期间可进行设备驱动模块配置。以后还可使用<prgn>modconf</prgn>进行配置，它是基于菜单界面的工具，可用来配置那些在初始安装时未曾配置的模块或完成新内核安装后的配置工作。
<p>
所有预加载（preloading）模块的名称要加入到<file>/etc/modules</file>列表。也可以使用<prgn>lsmod</prgn>和<prgn>depmod</prgn>进行手工操控。
<p>
对于2.4版内核别忘了在<file>/etc/modules</file>中加上几行来处理IP伪装（ftp等）。参阅<ref id="kernel-modules">，特别是<ref id="kernel-net">。

</sect1>

<sect1>CD-RW基本步骤
<p>
编辑下列文件：
<example>
/etc/lilo.conf  (添加append="hdc=ide-scsi ignore=hdc", 
                 执行lilo激活)
/dev/cdrom      (创建链接# cd /dev; ln -sf scd0 cdrom)
/etc/modules    (add "ide-scsi"和"sg"。如果需要可再加上"sr"。)
</example>
详情参阅<ref id="cdrw">。
</sect1>

<sect1 id="apm">多内存和关机自动断电
<p>
编辑<file>/etc/lilo.conf</file>，设置启动提示参数如下，实现识别大内存（适用于2.2版内核）和关机自动断电（适用于APM）：
<example>
append="mem=128M apm=on apm=power-off noapic"
</example>
执行<prgn>lilo</prgn>完成上述设置。对称多处理器内核（SMP-kernel）需要<tt>apm=power-off</tt>，而对我那堆糟糕的SMP硬件而言<tt>noapic</tt>几乎没什么用处。系统启动时，在启动提示符后直接输入这些参数效果也一样。参阅<ref id="bootprompt">。
<p>
在Debian的2.4版内核中apm是作为模块编译的，对于这种情况，可在系统启动后运行<tt># insmod apm power_off=1</tt>或设置<file>/etc/modules</file>：
<example>
# echo "apm power_off=1" &gt;&gt;/etc/modules
</example>
<p>
还可以这样：编译新版内核时加入ACPI支持可达到同样的效果，而且这种方式更适合SMP（只有较新的主板才支持ACPI）。对于较新的主板2.4版内核可以直接检测到大内存。
<example>
CONFIG_PM=y
CONFIG_ACPI=y
...
CONFIG_ACPI_BUSMGR=m
CONFIG_ACPI_SYS=m
</example>
在<file>/etc/modules</file>中按如下顺序添加参数：
<example>
ospm_busmgr
ospm_system
</example>
或者重新编译内核，在配置时将上述内核选项均设为“y”。总之，有了ACPI支持就不再需要任何启动提示参数。
</sect1>

<sect1 id="killecn">无法访问某此站点的怪问题
<p>
新的Linux内核默认开启ECN，对于某些使用劣质路由器的站点，会出现无法访问的问题。检查ECN状态可使用：
<example>
# cat /proc/sys/net/ipv4/tcp_ecn
 ... 或
# sysctl net.ipv4.tcp_ecn
</example>
将它关闭：
<example>
# echo "0" > /proc/sys/net/ipv4/tcp_ecn
 ... 或
# sysctl -w net.ipv4.tcp_ecn=0
</example>
每次启动时禁止TCP ECN，可编辑<file>/etc/sysctl.conf</file>，加上：
<example>
net.ipv4.tcp_ecn = 0
</example>
</sect1>

<sect1>PPP拔号设置
<p>
安装<package>pppconfig</package>软件包，设置PPP拨号访问。
<example>
# apt-get install pppconfig
# pppconfig
 ... 按提示配置PPP拨号
# adduser <var>user_name</var> dip
 ... 允许<var>user_name</var>进行PPP拨号访问
</example>
用户（<var>user_name</var>）进行PPP拨号访问：
<example>
$ pon <var>ISP_name</var>   # 开始PPP访问，接通你的ISP
 ... enjoy the Internet
$ poff <var>ISP_name</var> # 停止PPP访问, <var>ISP_name</var>可选
</example>
详情参阅<file>&f-ppp-readme;</file>。
<p>
另外，<package>wvdial</package>软件包可以用来设置PPP拨号访问。
</sect1>

<sect1><file>/etc</file>中的其它配置文件
<p>
Debian标准安装不包含<file>/etc/cron.deny</file>文件，想添加可拷贝<file>/etc/at.deny</file>。
</sect1>

</sect>

</chapt>



