<!-- CVS revision of this document "$Revision: 1.6 $"  -->
<!-- CVS revision of original english document "1.88"  -->

<!--Line width ruler (ruler uses 78 characters) 34567890123456789012345-->

<chapt id="package">Управление пакетами в Debian 

<p>
Эта глава основывается на более старой версии текста английского оригинала.
Проверьте английский вариант тоже. 
<p>
Чтобы снизить нагрузку на репозитарии &debian; по сети, установите локальный
HTTP прокси-сервер  <prgn>squid</prgn> для кэширования пакетов, скачиваемых
системой APT, и настройте переменную окружения <tt>http_proxy</tt> или задайте
значение параметру <tt>http</tt> в файле <file>/etc/apt/apt.conf</file> (для того,
чтобы APT использовала этот прокси-сервер - прим. переводчика). Эти меры
существенно улучшат производительность сетевых обновлений, особенно, если Вы имеете
несколько Debian-машин в сети.
<p>

Although the pinning feature of <manref name="apt_preferences" section="5"> 
is powerful, it does not solve all the dependency issues since dependency 
requirements tend to pull in newer versions of other fundamental program 
packages.
<p>
<![%f-ref;[
Использование метода, описанного в <ref id="chroot"> предпочтительно для 
]]>
<![%q-ref;[
Использование chroot-метода предпочтительно для 
]]>
обеспечения стабильности системы и одновременно доступа к последним версиям
программного обеспечения. 
<p>
Хотя эта глава предназначена для использования на Woody-версии Debian,
большая часть информации также применима к Potato-версии (за исключением
<manref name="apt_preferences" section="5"> и разделов, связанных
с <file>/etc/apt/preferences</file>).

<sect id="pkg-intro">Введение
<p>
Если чтение всей документации разработчиков слишком утомительно для Вас, то
сначала прочтите эту главу и потом наслаждайтесь всей мощью системы Debian,
используя дистрибутивы <tt>testing</tt>/<tt>unstable</tt> :-). 

<sect1>Основные инструменты
<p>
<example>
dselect   &ndash; инструмент для управления пакетами с меню-подобным интерфейсом (высокоуровневый инструмент)
dpkg      &ndash; инсталлятор пакетов (основная утилита для работы с файлами-пакетами)
apt-get   &ndash; инсталлятор пакетов (утилита для работами с репозитариями пакетов,
                  интерфейс командной строки к системе APT)
tasksel   &ndash; инсталлятор задач (набора пакетов)
aptitude  &ndash; инсталлятор пакетов (пакеты &amp; задачи, интерфейс к APT на базе ncurses)
deity     &ndash; альтернатива ncurses-интерфейса к APT
synaptic, gsynaptic &ndash; графические утилиты для работы с APT
</example>
Данные инструменты принадлежат разным уровням работы с пакетами. <prgn>dselect</prgn>
работает над системой APT (команда <prgn>apt-get</prgn>) и программой <prgn>dpkg</prgn>.

<p>
APT использует файлы <file>/var/lib/apt/lists/*</file> для отслеживания
доступных пакетов, в то время как <prgn>dpkg</prgn> для этих целей использует файл
<file>/var/lib/dpkg/available</file>. Если Вы установили пакеты непосредственно
используя программу <prgn>apt-get</prgn> или подобными средствами (<prgn>aptitude</prgn>), то
перед тем, как запускать команды <tt>dselect select</tt>, <tt>tasksel</tt> или <tt>dpkg -l</tt>, 
не забудьте обновить файл <file>/var/lib/dpkg/available</file> через пункт
меню <tt>[U]pdate</tt> программы <prgn>dselect</prgn> или, запустив в командной
строке команду "<tt>dselect update</tt>". 

<p>
Так как пакеты имееют зависимости, программа <prgn>apt-get</prgn> автоматически 
при установке пакета выбирает к установке дополнительные пакеты, от которых устанавливаемый
пакет зависит (<strong>depends</strong>), но она не трогает пакеты, связанные с ним
зависимостями "рекомендует" (<strong>recommends</strong>) и "предлагает" (<strong>suggests</strong>).
В то же время программа <prgn>dselect</prgn> через меню предлагает установить пакеты, основываясь 
на зависимостях вида "зависит" (<strong>depends</strong>), "рекомендует" (<strong>recommends</strong>) и
"предлагает" (<strong>suggests</strong>). Программа  <prgn>aptitude</prgn> имеет опцию для автоматической
установки всех пакетов, выбираемых этими видами зависимостей.
<![%f-ref;[
Смотрите <ref id="depends">.
]]>
</sect1>

<sect1>Удобные инструменты
<p>
<example>
apt-cache         - проверка локального кэша пакетов
dpkg-reconfigure  - повторная конфигурация уже установленного пакета (если он использует debconf)
dpkg-source       - управляет исходными файлами пакета
dpkg-buildpackage - aвтоматизирует сборку пакета
...
</example>
</sect1>
</sect>

<sect id="apt-install">Основы управления пакетами в &debian; 
<p>
Вы можете установить набор пакетов, называемых <em>задачей</em>,
установить пакеты по одному или обновить систему, используя инструменты
управления пакетами, описанные ниже .
<![%f-ref;[
Также обращайтесь к <ref id="install">, <ref id="woody"> и <ref id="bin-editor">.
]]>

<sect1 id="tasksel">Установка <em>задачи</em> при помощи программ <prgn>tasksel</prgn> 
 или <prgn>aptitude</prgn>
<p>
Программа <prgn>tasksel</prgn> является <strong>Дебиановским Установщиком Задач</strong>,
который используется при установке системы в упрощенном "<tt>simple</tt>" режиме.
<p>
Когда Вам в системе нужна некоторая функциональность, которая реализуется
множеством пакетов, использование <prgn>tasksel</prgn> - самый лучший способ
это сделать. Последовательность команд должна быть такой:
<example>
# dselect update
# tasksel
</example>
<p>
Программа <prgn>aptitude</prgn> также предлагает доступ к <em>задачам</em>. 
Но она не только дает Вам возможность выбрать для установки <em>задачу</em>, но 
и позволяет выборочно через меню отменить установку некоторых пакетов из 
состава <em>задачи</em>.
</sect1>

<sect1 id="setup-apt">Установка системы APT - нет перевода!!!!
<p>
If you try to track mixed environment as described here, you may likely
to hit some package dependency conflicts.  It is good idea not to mix
flavors.  Followings are for people who is willing to experiment knowing
some risks.
<!--
Yes. This is sloppy fix but better than nothing.  I saw many newbie
confused.
-->
<p>

For selective upgrade while tracking the <tt>testing</tt> distribution,
the APT system (&gt;Woody) must be set up as in <ref id="woody-transition">
to use <manref name="apt_preferences" section="5"> features.
<p>
First, add the sources for <tt>stable</tt>, <tt>testing</tt>, and 
<tt>unstable</tt> to your <file>/etc/apt/sources.list</file>.
Then, edit <file>/etc/apt/preferences</file> to set the proper Pin-Priority.
<footnote>
I kept the description around here as is to maintain consistency with
other parts.  If you are really tracking <tt>testing</tt> or
<tt>unstable</tt>, you should actually remove references to
<tt>stable</tt> in <file>/etc/apt/sources.list</file> and
<file>/etc/apt/preferences</file>.  This is because <tt>testing</tt>
starts as a copy of <tt>stable</tt>.
</footnote>
<example>
Package: *
Pin: release a=stable
Pin-Priority: 500

Package: *
Pin: release a=testing
Pin-Priority: 600

Package: *
Pin: release a=unstable
Pin-Priority: 50
</example>


<sect1 id="dselect">Программа <prgn>dselect</prgn>
<p>
После старта программа <prgn>dselect</prgn> автоматически
выбирает все пакеты с приоритетами "Required" (требующиеся),
"Important" (важные) и "Standard" (стандартные). В системе Potato
некоторые большие пакеты вроде teTex или Emacs попадали в этот список, и 
самым лучшим был их пропуск при начальной установке системы путем ручного снятия
отметки соответствущих пакетов (нажатие клавиши `_'). В Woody же эти пакеты
уже помечены приоритетом "Optional"" (опициональный).
<p>
Программа <prgn>dselect</prgn> имеет несколько необычный интерфейс пользователя. 
Существует четыре несколько странных команды (регистр букв важен!):
<example>
Клавиша     Действие
Q           Выход. Подтвердить текущий выбор пакетов и выйти из программы. 
            (не принимать во внимание зависимости)
R           Вернуть все назад! Я не имел это ввиду.
D           Проклятье! Мне не волнует, что думает dselect. Просто сделай это!
U           установить все пакеты как рекомендуемые
</example>
При помощи <tt>D</tt> и <tt>Q</tt> Вы можете выбрать конфликтующие
пакеты (на свой страх и риск). С этими командами следует обращаться осторожно.
В настоящее время <prgn>dselect</prgn> является достаточно продвинутым инструментом
с меню-интерфейсом, который предлагает тонкий контроль над выбором пакетов, в частности, 
по зависимостям <strong>suggests</strong> (предлагает) и <strong>recommends</strong> (рекомендует).
<p>
Для снижения "разговорчивости" программы добавьте в файл <file>/etc/dpkg/dselect.cfg</file>
строку с опцией "expert". Для медленных машин Вы можете запускать <prgn>dselect</prgn>
на другой более быстрой машине для поиска нужных пакетов, а на медленной машине уже 
использовать <tt>apt-get install</tt> для их установки.
<p>
<prgn>dselect</prgn> не дает доступ к пакетам, которые не preferred by the Pin-Priority.
</sect1>

<sect1 id="aptitude">Программа <prgn>aptitude</prgn>
<p>
<prgn>aptitude</prgn> - это новый инстраллятор пакетов с меню-интерфейсом, похожий на <prgn>dselect</prgn>.
Он также может использоваться как альтернативна консольной команде <prgn>apt-get</prgn>. Изучите страницу 
<manref name="aptitude" section="1">.
<p>
Программа <prgn>aptitude</prgn> обрабатывает одно-клавишные команды, вводимые в нижнем регистре
<example>
Клавиша     Действие
F10         Меню
?           Помощь по клавишами управления
u           Обновить информацию об доступных пакетах в репозитарии
g           Скачать и установить выбранные пакеты
q           Выйти из текущего экрана с сохранением изменений
x           Выйти без сохранения изменений
Enter       Просмотр информации о пакете
</example>
Программа <prgn>aptitude</prgn> опционально может автоматически устанавливать пакеты,
основываясь на зависимостях не только <strong>depends</strong>,
но <strong>recommends</strong> и <strong>suggests</strong>. 
Вы можете изменять ее поведение, выбрав в меню <tt>F10 -> Options -> Dependency handling</tt>.
<p>
Программа <prgn>aptitude</prgn> предлагает доступ ко всем версиям пакета.
</sect1>

<sect1 id="apt-commands">Команды <prgn>apt-cache</prgn> и <prgn>apt-get</prgn>
<p>
While tracking <tt>testing</tt> as described in the above example, мы можем
управлять системой следующими командами:
<list>
<item><tt>apt-get -u upgrade</tt>
 <p>This tracks the <tt>testing</tt> distribution and upgrades all the 
 packages on the system while installing their dependencies from 
 <tt>testing</tt>.
<item><tt>apt-get -u dist-upgrade</tt>
 <p>This tracks the <tt>testing</tt> distribution and upgrades all the 
 packages on the system while installing and resolving their 
 dependencies from <tt>testing</tt>.
<item><tt>apt-get -u dselect-upgrade</tt>
 <p>This tracks the <tt>testing</tt> distribution and upgrades all the 
 packages on the system according to the selections of <prgn>dselect</prgn>.
<item><tt>apt-get -u install <var>package</var></tt>
 <p>This installs <var>package</var> and its dependencies from 
 the <tt>testing</tt> distribution.
<item><tt>apt-get -u install <var>package</var>/unstable</tt>
 <p>Устанавливает пакет <var>package</var> из <tt>unstable</tt>-дистрибутива,
 при этом пакеты, от которых он зависит, берутся из <tt>testing</tt>-дистрибутива.
<item><tt>apt-get -u install -t unstable <var>package</var></tt>
 <p>Устанавливает пакет <var>package</var> из <tt>unstable</tt>-дистрибутива,
 при этом, пакеты от которых он зависит, также берутся из <tt>unstable</tt> при помощи
 установки Pin-Priority <tt>unstable</tt> в 990.
<item><tt>apt-cache policy <var>foo bar ...</var></tt>
 <p>Проверяет статус пакетов <var>foo bar ...</var>.
<item><tt>apt-cache show <var>foo bar ...</var> | less</tt>
 <p>Проверяет информацию по пакетам <var>foo bar ...</var>.
<item><tt>apt-get install <var>foo=2.2.4-1</var></tt>
 <p>Устанавливает конкретную версию  <var>2.2.4-1</var> пакета <var>foo</var>.
<item><tt>apt-get -u install <var>foo bar-</var></tt>
 <p>Устанавливает пакет <var>foo</var> и удаляет пакет <var>bar</var>.
<item><tt>apt-get remove <var>bar</var></tt>
 <p>Удаляет пакет <var>bar</var>, но не трогает его конфигурационные файлы.
<item><tt>apt-get remove --purge <var>bar</var></tt>
 <p>Удаляет пакет <var>bar</var> вместе со всеми его конфигурационными файлами.
</list>
В приведенных выше примерах использование опции <tt>-u</tt> гарантирует, что 
<prgn>apt-get</prgn> выведет список всех пакетов, подлежащих обновлению,
и запросит подтверждение у пользователя перед началом своих действий.
Вот так можно установить опцию <tt>-u</tt> в режим по умолчанию:
<example>
$ cat &gt;&gt; /etc/apt/apt.conf &lt;&lt; .
// Всегда показывать пакеты для обновления (-u)
APT::Get::Show-Upgraded "true";
.
</example>
<p>
Используйте опцию <tt>-s</tt> для имитации обновления без выполнения каких-либо
действительных операций.

<sect1 id="apt-tracking">Tracking a flavor of &debian; distribution
<p>
Depending on your preference for a flavor of &debian; to track,
you can change the sample <file>/etc/apt/preferences</file> in
<ref id="setup-apt"> to fit your needs:
<example>
track stable:            change  Pin-Priority of testing  to  50
track testing:           keep settings as shown above
track testing(unstable): change  Pin-Priority of unstable to 500
track unstable(testing): change  Pin-Priority of unstable to 800
</example>
A guideline for the choice of Pin-Priority is to move from the top to bottom
in the above table as the time moves from a time immediately after a
distribution release to a time of freeze for the next release.
<p>
Caution: tracking the <tt>testing</tt> flavor of &debian; has a side effect of
providing very slow security fixes.
<p>
If you mix flavors of &debian;, <tt>testing</tt> with <tt>stable</tt> or
<tt>unstable</tt> with <tt>stable</tt>, you will be likely to pull in 
unintentionally key packages from <tt>testing</tt> or <tt>unstable</tt>
that may be buggy.  So be warned.
<p>
Examples of <file>/etc/apt/preferences</file> which lock some key
packages to the more mature version while tracking the less mature version
for other nonessential packages are available in the 
<url id="&examples;" name="examples subdirectory"> as
<file>preferences.testing</file> and <file>preferences.unstable</file>.
On the other hand, <file>preferences.stable</file> forces all packages to be
downgraded to <tt>stable</tt>.

<sect1 id="apt-stable">Откат всех пакетов до уровня <tt>stable</tt>
<p>
Чтобы откатить все пакеты до уровня <tt>stable</tt>, отредактируйте 
файл <file>/etc/apt/preferences</file> следующим образом:
<example>
Package: *
Pin: release a=stable
Pin-Priority: 1001
</example>
и запустите команду "<tt>apt-get upgrade</tt>", которая вызовет принудительный
откат из-за значения Pin-priority &gt; 1000. Нужно предупредить,
что могут возникнуть небольшие накладки с зависимостями.

<sect1 id="apt-preferences">Обзор файла <file>/etc/apt/preferences</file>
<p>
В примере файла <file>/etc/apt/preferences</file>, представленного 
в разделе <ref id="setup-apt">, строка "Package: *" в первой строчке
означает, что эта секция применяется ко всем пакетам. Вы можете использовать имя 
пакета вместо "*" для указания значения Pin-Priority этого пакета.
<p>
Во второй строчке запись "Pin: release a=stable" означает, что
<prgn>apt-get</prgn> получает файл <file>Packages.gz</file> 
из архива Debian, у которого  в файле <file>Release</file> есть
строка "Archive: stable".

<p>
В последней строчке запись "Pin-Priority: 500" указвает значение 
Pin-Priority равное 500. 
<p>
Если существует несколько пакетов с одним и тем же именем, устанавливается
пакет с наибольшим значением Pin-Priority
<p>
В частности, значения Pin-Priority имеют следующий смысл:
<list>
<item>1001 и выше: Downgradable priorities.
 <p>Пакеты с Pin-Priority из этого диапозона могут быть понижены в версии.
<item>от 100 до 1000: Стандартные приоритеты.
 <p>Такие пакеты нельзя понижать в версии. Вот несколько ключевых значений Pin-Priority:
<list>
<item>990: приоритет установлен через <tt>--target-release</tt> 
или опцию <tt>-t</tt>. Подробнее на странице <manref name="apt-get" section="8">.
<item>500: приоритет всех пакетов по умолчанию.
<item>100: приоритет установленных пакетов в настоящее время.
</list>
<item>0 - 99: неавтоматические приоритеты. (Они используются только в случае, если 
              пакет не установлен и нет другой доступной версии пакета.)
<item>менее нуля: Версия пакета никогда не выбирается.
</list>
Эффект подобный от <tt>--target-release</tt> может быть получен от установки
файла <file>/etc/apt/apt.conf</file> следующим образом:
<example>
# echo 'APT::Default-Release "testing";' &gt;&gt; /etc/apt/apt.conf
</example>
Опция <tt>--target-release</tt> в командой строке и установки в файле <file>/etc/apt/apt.conf</file>
имеют больший приоритет установок в файле <file>/etc/apt/preferences</file>. Будьте внимательны
с этим побочным эффектом при работе с файлом <file>/etc/apt/preferences</file>.

<sect id="survival">Команды выживания в системе Debian
<p>
Обладая этими знаниями, Вы можете пребывать в <strong>вечном</strong> 
"обновлении" :-)

<sect1 id="bug-check">Программные ошибки в Debian и поддержка
<P>
Если у Вас возникли проблемы с определенным пакетом,  
исследуйте следующие сайты перед тем, как обращаться за помощью или 
оформлять отчет об ошибке.
(страницы одинаково хорошо будут выглядеть в браузерах <prgn>lynx</prgn>, 
<prgn>links</prgn> и <prgn>w3m</prgn>):
<example>
$ lynx &bugs;
$ lynx &bugs;<var>имя-пакета</var>  # если известно имя пакета
$ lynx &bugs;<var>номер-ошибки</var>     # если известен номер ошибки
</example>
Зайдите на Google (www.google.com) для поиска слов, включив фразу "site:debian.org".
<p>
Если что-то не ясно, изучите замечательное руководство. Установите переменную окружения 
<tt>CDPATH</tt> следующим образом:
<example>
export CDPATH=.:/usr/local:/usr/share/doc
</example>
и наберите 
<example>
$ cd <var>ИмяПакета</var>
$ pager README.Debian # если файл существует
$ mc 
</example>
<![%f-ref;[
Большое количество ресурсов по поддержке приведены по адресу <ref id="support">.
]]>
</sect1>

<sect1 id="apt-trouble">Разрешение проблем APT upgrade 
<p>
Проблемы с зависимостями пакетов могут случаться при обновлениях в 
<tt>unstable</tt>/<tt>testing</tt>, описанных в 
<ref id="upgrade-system">.
Чаще всего это случается потому, что обновляемый пакет имеет зависимости,
которые нельзя удовлетворить. Подобные проблемы решаются так:
<example>
# apt-get dist-upgrade
</example>
Если это не работает, то повторяйте одну из следующих команд до разрешения проблемы:
<example>
# apt-get upgrade -f # продолжение обновления (upgrade) даже после возникновения ошибки
... или
# apt-get dist-upgrade -f # продолжение обновления дистрибутива (dist-upgrade) даже после возникновения ошибки
</example>
<p>
Некоторые действительно неправильные скрипты могут привести к постоянной
проблеме. Обычно лучше разрешать подобные ситуации, изучив 
файлы <file>/var/lib/dpkg/info/<var>packagename</var>.{post,pre}{inst,rm}</file>
скриптов сбойного пакета и затем запустить команду:
<example>
# dpkg --configure -a    # настраивает все ненастроенные пакеты
</example>
<p>
Если скрипт жалуется на отсутствие какого-нибудь конфигурационного файла,
поищите его в <file>/etc</file>. Если он существует, но с расширением
<tt>.new</tt> (или подобным), измените его имя на имя без этого расширения
 (команда <prgn>mv</prgn>).
<p>
Проблема зависимостей пакетов может возникать при установке пакета в 
смесь <tt>unstable</tt>/<tt>testing</tt>. Существует несколько путей
обойти зависимости.
<example>
# apt-get install -f <var>package</var> # не принимать во внимание сломанные зависимости
</example>
<p>
Альтернативный метод исправить эту ситуацию заключается в использовании
пакета <package>equivs</package>.
Смотрите <file>&f-equivs;</file><![%f-ref;[ and <ref id="equivs">]]>.
</sect1>

<sect1 id="rescue-dpkg">Восстановление через <prgn>dpkg</prgn>
<p>
В крайних случаях восстановление неработоспособной программы <prgn>dselect</prgn> (APT) 
на серьезно поврежденной системе может быть выполнено при помощи программы 
<prgn>dpkg</prgn> без использования APT:
<example>
# cd /var/cache/apt/archives
# dpkg -i libc6* libdb2* perl*
# dpkg -i apt* dpkg* debconf*
# dpkg -i *  # до тех пор, пока ошибки не перестанут появляться
</example>
Если какого-либо пакета нет, получите его с используя:
<example>
# mc            # используйте "FTP-соединение", указав Debian FTP-сервер
</example>
Стоит заметить, что с недавнего времени сами файлы пакетов на HTTP/FTP-сервере
располагаются в новом каталоге <file>/pool</file>, а не в классическом месте
- каталоге <file>/dist</file>.
<![%f-ref;[
(Смотрите <ref id="pools">.)
]]>
<p>
Затем устанавливаем пакеты:
<example>
# dpkg -i /var/cache/apt/archives/<var>packagefile.deb</var>
</example>
Сломанные зависимости или исправляем, или поступаем таким образом:
<example>
# dpkg --ignore-depends=<var>пакет1</var>,... -i <var>имя_файла_пакета.deb</var>
# dpkg --force-depends -i <var>имя_файла_пакета.deb</var>
# dpkg --force-depends --purge <var>пакет</var>
# dpkg --force-confmiss -i <var>имя_файла_пакета.deb</var> # Установка отсутствующих conf-файлов
</example>
</sect1>

<sect1 id="recover-status">Восстановление информации о выбранных пакетах
<p>
Если файл <file>/var/lib/dpkg/status</file> оказался поврежден
по какой-либо причине, система &debian; теряет информацию о выбранных пакетах
и попадает в затруднительное положение. Ищите старую версию файла
<file>/var/lib/dpkg/status</file> под именем <file>/var/lib/dpkg/status-old</file>  
или <file>/var/backups/dpkg.status.*</file>.

<p>
Неплохой идей является размещение каталога <file>/var/backups/</file> на отдельном
разделе жесткого диска, так как он содержит массу важных системных данных. 
<p>
Если старый файл <file>/var/lib/dpkg/status</file> недоступен, Вы все же 
можете восстановить потерянную информацию из каталогов из <file>/usr/share/doc/</file>:
<example>
# ls /usr/share/doc | \
  grep -v [A-Z] | \
  grep -v '^texmf$' | \
  grep -v '^debian$' | \
  awk '{print $1 " install"}' | \
  dpkg --set-selections
# dselect --expert # reinstall system, de-select as needed
</example>

<sect1 id="rescue-var">Восстановление системы после сбоя каталога <file>/var</file>
<p>
Так как каталог <file>/var</file> содержит регулярно обновляемые данные, такие 
как почта, он подвержен разного рода порче. Выделение его на независимый
раздел жесткого диска ограничивает риск. Если сбой все же произошел, то
для восстановления Вашей &debian; системы Вам понадобится восстановить и этот каталог. 

<p>
Получите скелет содержимого каталога <file>/var</file> от минимальной рабочей
системы &debian;, основанной на той же или более древней версии &debian;, например такой,
<file><url id="&var-tar-gz;" name="var.tar.gz"></file>, и поместите его 
в корневой каталог сломанной системы. Далее:
<example>
# cd /
# mv var var-old      # если все же что-то полезное осталось
# tar xvzf var.tar.gz # используйте скелет от Woody
# aptitude            # или dselect
</example>
Это должно воссоздать рабочую систему. Вы можете облегчить
восстановление информации о выбранных пакетах, используя прием из 
раздела 
<ref id="recover-status">.  
([FIXME]: This procedure needs more experiments to verify.)
</sect1>

<sect1 id="un-bootable">Установка пакета в систему, которая не загружается
<p>
Загрузите Linux со спасательного диска/дискеты Debian или альтернативного
раздела мультизагрузочной Linux-системы.
<![%f-ref;[
See <ref id="booting">. 
]]>
Подмонтируйте незагружающуюся систему к каталогу <file>/target</file> и используйте
у <prgn>dpkg</prgn> chroot-режим установки. 
<example>
# dpkg --root /target -i <var>имя_пакета.deb</var>
</example>
Затем настройте пакеты и исправьте проблемы.
<p>
Между прочим, если причиной нормальной загрузки является нарушенный загрузчик <prgn>lilo</prgn>,
Вы можете загрузить систему с использованием стандартного спасательного диска Debian.
На загрузочное приглашение boot: введите (подразумевается, что корневой раздел Вашей
Linux-системы - <file>/dev/hda12</file>, что нужно войти на третий уровень исполнения системы):
<example>
boot: rescue root=/dev/<var>hda12</var> 3
</example>
После этого Вы загружаете практически полностью функционирующую системы на ядре
с гибкого диска. (возможно, при загрузке будут некоторые проблемы с отсутствием поддержки
некоторых возможностей в ядре или каких-либо модулей).
</sect1>

<sect1>Что делать, если команда <prgn>dpkg</prgn> не работает
<p>
Неработоспособность программы  <prgn>dpkg</prgn> приводит к невозможности
установки любого <tt>.deb</tt> файла. Следующая процедура поможет Вам выйти из
подобной ситуации. (в следующей команде можно заменить "links" на Ваш любимый 
браузер) 
<example>
$ links http://<var>http.us.debian.org</var>/debian/pool/main/d/dpkg/
  ... скачиваем пакет dpkg_<var>версия</var>_<var>архитектура</var>.deb
$ su
password: *****
# ar x dpkg_<var>version</var>_<var>arch</var>.deb
# mv data.tar.gz /data.tar.gz
# cd /
# tar xzfv data.tar.gz
</example>
Для архитектуры <tt>i386</tt> также можно использовать следующий адрес: 
<tt>http://packages.debian.org/dpkg</tt>.
</sect1>

</sect>

<sect id="debian-package">Нирвана в командах Debian
<p>
<strong>Осознавшие</strong> смысл этих команд спасутся от вечных мучений ада обновлений 
и достигнут <strong>нирваны</strong> в Debian.

<sect1 id="info-file">Информация о файле
<p>
Чтобы найти пакет, к которому некий файл принадлежит, сделайте:
<example>
$ dpkg {-S|--search} образец # найти слово образец в установленных пакетах
$ zgrep -e образец <var>/local/copy/of/debian/woody/Contents-i386.gz</var>
#... найти образец (имя файла) в архиве Debian
</example>
Или используйте специально предназначенную для этого команду:
<example>
# apt-get install dlocate  
$ dlocate <var>имя_файла</var>         # более быстрая альтернатива командам dpkg -L и dpkg -S
...
# apt-get install auto-apt # инструментарий для установки пакетов по запросу
# auto-apt update          # создать базу данных для auto-apt
$ auto-apt search <var>образец</var> # поиск образца во всех пакета, установленных и нет.
</example>
</sect1>

<sect1 id="info-package">Информация о пакете
<p>
Поиск и вывод информации из архива пакетов. Убедитесь, что
система APT настроена на соответствующий архив(файл
<file>/etc/apt/sources.list</file>).
Если Вы хотите увидеть, как пакеты установлены из дистрибутивов
<tt>testing</tt>/<tt>unstable</tt>, пользуйтесь командой <tt>apt-cache policy</tt>&mdash;
очень удобно.
<example>
# apt-get   check           # обновить кэш и проверить его на предмет сломанных пакетов
$ apt-cache search  <var>образец</var> # поиск пакета по текстовому образцу
$ apt-cache policy  <var>образец</var> # информация по пакету priority/dists
$ apt-cache show -a <var>образец</var> # показать описание пакета во всех дистрибутивах
$ apt-cache showsrc <var>образец</var> # показать описание пакетов с исходным текстом
$ apt-cache showpkg <var>образец</var> # отладочная информация по пакету
# dpkg  --audit|-C          # поиск неполностью установленных пакетов
$ dpkg {-s|--status} <var>пакет</var> ... # описание установленного пакета
$ dpkg -l <var>пакет</var> ... # вывести статус установленного пакета (по одной строчке на пакет)
$ dpkg -L <var>пакет</var> ... # вывести список файлов, установленных пакетом
</example>
<!-- Erase this when manual page gets fixed.  FIXME -->
Команда <tt>apt-cache showsrc</tt> не заявлена для релиза Woody, но она работает:) 
<p>
Вы также можете найти информацию по пакету в следующих файлах
(я использую  <tt>mc</tt> для их просмотра):
<example>
/var/lib/apt/lists/*
/var/lib/dpkg/available
</example>
Сравнение следующих файлов дает информацию о том, что же произошло в последний
сеанс установки.
<example>
/var/lib/dpkg/status
/var/backups/dpkg.status*
</example>

</sect1>

<sect1 id="apt-get-auto">Автоматическая установка при помощи APT
<p>
Для автоматической установки добавьте следующую строку в файл
<file>/etc/apt/apt.conf</file>:
<example>
Dpkg::Options {"--force-confold";}
</example>
Это эквивалентно запуску команды <tt>apt-get -q -y <var>packagename</var></tt>.
Так как на все вопросы дается утвердительный ответ "да", то иногда это может вызвать
проблемы, поэтому используйте эту возможность с осторожностью.
Смотрите страницы <manref name="apt.conf" section="5"> и <manref name="dpkg" section="1">.
<p>
Позже Вы можете повтороно конфигурировать любой конкретный пакет путем 
<ref id="reconfigure">.

<sect1 id="reconfigure">Повторное конфигурирование установленных пакетов
<p>
Используйте следующие команды для повторного конфигурирования любого уже 
установленного пакета.
<example>
# dpkg-reconfigure --priority=<var>medium</var> <var>пакет</var> [...]
# dpkg-reconfigure --all   # повторно конфигурирвоать все пакеты
# dpkg-reconfigure locales # генерировать дополнительные локали
# dpkg-reconfigure --p=<var>low</var> xserver-xfree86 # повторно настроить X-сервер
</example>
Do this for <prgn>debconf</prgn> if you need to change the
<prgn>debconf</prgn> dialog mode permanently.
<p>
Некоторые программы идут со специальными настроечными скриптами.
<example>
apt-setup     - создает список /etc/apt/sources.list
install-mbr   - устанавливает менеджер главной загрузочной записи
tzconfig      - устанавливает временную зону
gpmconfig     - настроить демон мыши gpm 
eximconfig    - настроить Exim (MTA)
texconfig     - настроить TeTeX
apacheconfig  - настроить Apache (httpd)
cvsconfig     - настроить CVS
sndconfig     - настроить звук 
...
update-alternatives - set default command, e.g., vim as vi
update-rc.d         - System-V init script management
update-menus        - Debian menu system
...
</example>
</sect1>

<sect1 id="remove">Операции remove и purge с пакетами
<p>
Удаление пакета с сохранением его конфигурации:
<example>
# apt-get remove <var>пакет</var> ...
# dpkg  --remove <var>пакет</var> ...
</example>
Удаление пакета, включая его конфигурацию:
<example>
# apt-get remove --purge <var>пакет</var> ...
# dpkg    --purge        <var>пакет</var> ...
</example>
</sect1>

<sect1 id="hold">Удержание старых пакетов
<p>
Например, удержание пакетов <package>libc6</package> и
<package>libc6-dev</package> при работе с командами 
<prgn>dselect</prgn> и <tt>apt-get -u upgrade <var>package</var></tt> может быть выполнено так:
<example>
# echo -e "libc6 hold\nlibc6-dev hold" | dpkg --set-selections
</example>

Однако, для команды <tt>apt-get -u install <var>пакет</var></tt> этот "hold" не будет помехой.
Для того, чтобы удержать пакет от обновления путем автоматического отката в командах
<tt>apt-get -u upgrade <var>пакет</var></tt> или <tt>apt-get -u dist-upgrade</tt>,
добавьте следующие строки в файл <file>/etc/apt/preferences</file>:
<example>
Package: libc6
Pin: release a=stable
Pin-Priority: 2000
</example>
Здесь элемент "<tt>Package:</tt>" не может использовать запись вида "<tt>libc6*</tt>".  
Если Вам нужно удержать все бинарные пакеты, связанные с пакетом с исходными текстами 
<package>glibc</package> в синхронном состоянии, Вам нужно перечислить всех их здесь 
явным образом.
<p>
Следующая команда выведет всех удержанные от обновления пакеты:
<example>
dpkg --get-selections "*"|grep -e "hold$"
</example>
</sect1>

<sect1 id="mixedsys">Система на смеси <tt>stable</tt>/<tt>testing</tt>/<tt>unstable</tt>
<p>
Команда <prgn>apt-show-versions</prgn> выводит список версий доступных
пакетов по дистрибутивам.
<example>
$ apt-show-versions | fgrep /testing | wc
... как много пакетов мы имеет в testing
$ apt-show-versions -u
... список пакетов, подлежащих обновлению
$ apt-get install `apt-show-versions -u -b | fgrep /unstable`
... обновляет пакеты из unstable на их более новые версии
</example>
</sect1>

<sect1 id="cache">Удаление файлов кэшированных пакетов
<p>
В процессе установки через APT в каталоге <file>/var/cache/apt/archives</file>
кэшируются файлы пакетов, и их можно удалить.
<example>
# apt-get autoclean # удаляет только неиспользованные файлы пакетов
# apt-get clean     # удаляет все файлы из кэша
</example>
</sect1>


<sect1 id="record">Запись/копирование конфигурации системы
<p>
Для создания локальной копии списка состояния выбранных пакетов сделайте:
<example>
# debconf-get-selections &gt; <var>debconfsel.txt</var>
# dpkg --get-selections "*" &gt;<var>мои_выбранные_пакеты</var>   # или используйте \* вместо *
</example>
Использование <tt>"*"</tt> приводит к помещению в файл <tt><var>мои_выбранные_пакеты</var></tt>
записей о пакетах, подлежащие удалению ("purge").
<p>
Вы можете перенести этот файл на другой компьютер и установить по нему 
системы:
<example>
# dselect update
# debconf-set-selections &lt; <var>debconfsel.txt</var>
# dpkg --set-selections &lt;<var>мои_выбранные_пакеты</var>
# apt-get -u dselect-upgrade    # <var>или</var> dselect install
</example>
</sect1>

<sect1 id="port">Портирование пакета в систему на базе <tt>stable</tt>
<p>
Для частичного обновления системы на базе  <tt>stable</tt> необходимо 
пересобрать пакет в окружении  <tt>stable</tt> системы, используя соответствующий
пакет с исходным текстом. Это позволит избежать большого количества обновлений
пакетов, от которых устанавливаемый пакет зависит. Во-первых, добавьте следующие
записи в файл to <file>/etc/apt/sources.list</file>:
<example>
deb-src &http-us;debian testing \
 main contrib non-free
deb-src &http-us;debian unstable \
 main contrib non-free
</example> 
Здесь каждая запись <tt>deb-src</tt> разбита на две строки для удобства
показа, однако в файле <file>sources.list</file> такое разбиение на 
строки недопустимо.
<p>
Далее получаем исходный текст и собираем пакет:
<example>
$ apt-get update  # обновляем кэш списка пакетов
$ apt-get source <var>пакет</var>
$ dpkg-source -x <var>пакет.dsc</var>
$ cd <var>пакет-версия</var>
  ... изучаем требующиеся пакеты (зависимости Build-depends в .dsc файле) и 
      устанавливаем их также. Вам также понадобится пакет "fakeroot".

$ dpkg-buildpackage -rfakeroot 

  ...или (без сигнатуры)
$ dpkg-buildpackage -rfakeroot -us -uc # если нужно, позже воспользуйтесь "debsign"

  ...Затем для установки пакетов выполняем
$ su -c "dpkg -i <var>имя_файла_пакета.deb</var>"
</example>
Обычно нужно установить несколько пакетов с суффиком "-dev" для удовлетворения
зависимостей пакета. Программа <prgn>debsign</prgn> находится в пакете
<package>devscripts</package>. Программа <prgn>auto-apt</prgn> способна
упростить удовлетворение таких зависимостей. Используйте программу 
<prgn>fakeroot</prgn>, чтобы не заниматься сборкой пакетов под root.
<p>
В Woody эти вопросы с зависимостями могут быть упрощены. Например, 
дл компиляции пакета <package>pine</package>, который поставляется только
в виде исходного текста, выполните:
<example>
# apt-get build-dep pine
# apt-get source -b pine
</example>
</sect1>

<sect1 id="local">Local package archive
<p>
In order to create a local package archive which is compatible with
APT and the <prgn>dselect</prgn> system, <file>Packages</file> needs to be created
and package files need to be populated in a particular directory tree.
<p>
A local <tt>deb</tt> repository similar to an official Debian archive can
be made in this way:
<example>
# apt-get install dpkg-dev
# cd <var>/usr/local</var>
# install -d <var>pool</var> # physical packages are located here
# install -d dists/<var>unstable</var>/<var>main</var>/binary-<var>i386</var>
# ls -1 <var>pool</var> | sed 's/_.*$/ <var>priority</var> <var>section</var>/' | uniq &gt; <var>override</var>
# editor <var>override</var> # adjust <var>priority</var> and <var>section</var>
# dpkg-scanpackages <var>pool</var> <var>override</var> <var>/usr/local</var>/ \
   &gt; dists/<var>unstable</var>/<var>main</var>/binary-<var>i386</var>/Packages
# cat &gt; dists/<var>unstable</var>/<var>main</var>/Release &lt;&lt; EOF
Archive: <var>unstable</var>
Version: <var>3.0</var>
Component: <var>main</var>
Origin: <var>Local</var>
Label: <var>Local</var>
Architecture: <var>i386</var>
EOF
# echo "deb file:<var>/usr/local</var> <var>unstable</var> <var>main</var>" \
   &gt;&gt; /etc/apt/sources.list
</example>
<p>
Alternatively, a quick-and-dirty local <tt>deb</tt> repository can be made:
<example>
# apt-get install dpkg-dev
# mkdir <var>/usr/local/debian</var>
# mv <var>/some/where/package.deb</var> <var>/usr/local/debian</var>
# dpkg-scanpackages <var>/usr/local/debian</var> /dev/null | \
  gzip - &gt; <var>/usr/local/debian</var>/Packages.gz
#  echo "deb file:<var>/usr/local/debian</var> ./" &gt;&gt; /etc/apt/sources.list
</example>
<p>
These archives can be remotely accessed by providing access to these 
directories through either HTTP or FTP methods and changing entries in
<file>/etc/apt/sources.list</file> accordingly.

<sect1 id="alien">Convert or install an alien binary package
<p>
<package>alien</package> enables the conversion of binary packages provided in 
Redhat <tt>rpm</tt>, Stampede <tt>slp</tt>, Slackware <tt>tgz</tt>, and
Solaris <tt>pkg</tt> file formats
into a &debian; <tt>deb</tt> package. If you want to use a package from another
Linux distribution than the one you have installed on your
system, you can use <prgn>alien</prgn> to convert it to your preferred
package format and install it. <package>alien</package> also supports LSB packages.
</sect1>

<sect1 id="debsums">Verify installed package files
<p>
<prgn>debsums</prgn> enables verification of installed package files against
MD5 checksums.  Some packages do not have available MD5 checksums.  A possible
temporary fix for sysadmins:
<example>
# cat >>/etc/apt/apt.conf.d/90debsums
DPkg::Post-Install-Pkgs {"xargs /usr/bin/debsums -sg";};
^D
</example>
per Joerg Wendland <email>joergland@debian.org</email> (untested).

<![%f-ref;[
<sect1 id="spy">Optimized <file>sources.list</file>
<p>
In short, fancy efforts to create an optimized <file>sources.list</file>
did not produce a significant improvement for me from a location in the USA.  I
manually chose a nearby site using <prgn>apt-setup</prgn>.
<p>
<prgn>apt-spy</prgn> creates <file>sources.list</file> automatically,
based on latency and bandwidth. <prgn>netselect-apt</prgn> creates a
more complete <file>sources.list</file>, but uses an inferior method of
choosing the best mirror (ping time comparison).
<example>
# apt-get install apt-spy
# cd /etc/apt ; mv sources.list sources.list.org
# apt-spy -d testing -l sources.apt
</example>
</sect1>

]]>


</sect>

<sect id="pecuriarities">Other Debian peculiarities

<sect1 id="dpkg-divert">The <prgn>dpkg-divert</prgn> command
<p>
<!-- copied from manual page -->
File <strong>diversions</strong> are a way of forcing <prgn>dpkg</prgn> not to
install a file into its default location, but to a <strong>diverted</strong>
location.  <strong>Diversions</strong> can be used through the &debian;
package scripts to move a file away when it causes a conflict.  System
administrators can also use a diversion to override a package's configuration
file, or whenever some files (which aren't marked as
<strong>conffiles</strong>) need to be preserved by <prgn>dpkg</prgn>, when
installing a newer version of a package which contains those files<![%f-ref;[
(see <ref id="conffile">)]]>.
<example>
# dpkg-divert [--add]  <var>filename</var> # add "diversion"
# dpkg-divert --remove <var>filename</var> # remove "diversion"
</example>
It's usually a good idea not to use <prgn>dpkg-divert</prgn> unless it is
absolutely necessary.
</sect1>

<sect1 id="equivs">The <package>equivs</package> package
<p>
If you compile a program from source, it is best to make it into a real
local debianized package (<tt>*.deb</tt>).  
Use <tt>equivs</tt> as a last resort.
<example>
Package: equivs
Priority: extra
Section: admin
Description: Circumventing Debian package dependencies
 This is a dummy package which can be used to create Debian
 packages, which only contain dependency information.
</example>
</sect1>

<sect1 id="alternatives">Alternative commands
<p>
To make the command <prgn>vi</prgn> run <prgn>vim</prgn>, use
<prgn>update-alternatives</prgn>:
<example>
# update-alternatives --display vi
...
# update-alternatives --config vi
  Selection    Command
-----------------------------------------------
      1        /usr/bin/elvis-tiny
      2        /usr/bin/vim
*+    3        /usr/bin/nvi

Enter to keep the default[*], or type selection number: 2
</example>
Items in the Debian alternatives system are kept in
<file>/etc/alternatives</file> as symlinks.
<p>
To set your favorite X Window environment, apply 
<prgn>update-alternatives</prgn> to
<file>/usr/bin/x-session-manager</file> and
<file>/usr/bin/x-window-manager</file>.
<![%f-ref;[
For details, see <ref id="custom-x">.
]]>
<p>
<file>/bin/sh</file> is a direct symlink to <file>/bin/bash</file> or
<file>/bin/dash</file>.  It's safer to
use <file>/bin/bash</file> to be compatible with old Bashism-contaminated scripts but 
better discipline to use <file>/bin/dash</file> to enforce POSIX compliance.
Upgrading to a 2.4 Linux kernel tends to set this to <file>/bin/dash</file>.
</sect1>

<sect1 id="sys-v">System-V <prgn>init</prgn> and runlevels
<p>
The default runlevel to boot into can be set in <file>/etc/inittab</file>.
<p>
Unlike other distributions, Debian makes the management of runlevel completely 
the sysadmin's responsibility.  Management of System-V style <prgn>init</prgn> on Debian is
intended to be performed through <prgn>update-rc.d</prgn> scripts.
<p>
Starting <file>/etc/init.d/<var>name</var></file> in runlevel 1,2,3 and stopping in
4,5 with sequencing priority number 20 (normal) can be done by:
<example>
# update-rc.d <var>name</var> start 20 1 2 3 . stop 20 4 5 .
</example>
Removing symbolic links while the script in <prgn>init.d</prgn> still exists can be done by:
<example>
# update-rc.d -f <var>name</var> remove
</example>
For editing runlevels, I cheat.  I edit entries manually using the
<prgn>mv</prgn> command at the shell prompt of <prgn>mc</prgn> while copying
link entries using Alt-Enter. For example:
<example>
# mv S99xdm K99xdm # disable xdm (X display manager)
</example>
I even disable a daemon by inserting
<tt>exit 0</tt> at the start of an <prgn>init.d</prgn> script as a quick hack.
These are <tt>conffiles</tt> after all.
</sect1>

<sect1 id="disables">Отключение неиспользующихся сервисов
<p>
Дистрибутив &debian; серъезно относится к вопросам безопасности и ожидает
участие компетентного администратора. Поэтому иногда простота использования
переходит на второй план, и многие сервисы идут с наивысшим уровнем безопасности,
а сама система с минимальным набором работающих сервисов после установки по умолчанию.
<p>
Если Вы имеете какие-то сомнения относительно сервисов (Exim, DHCP, ...),
запустите команду  <tt>ps aux</tt> или проверьте содержимое файлов 
<file>/etc/init.d/*</file> и <file>/etc/inetd.conf</file>.
Также проверьте файл <file>/etc/hosts.deny</file><![%f-ref;[
подробнее в <ref id="loginctrl">]]>.
Очень полезная команда <prgn>pidof</prgn> (смотрите <manref name="pidof" section="8">).
<p>
С недавних пор в &debian; система X11 не позволяет удаленные TCP/IP подключения.
<![%f-ref;[
Смотрите <ref id="xtcp">.
]]>
Проброс трафика системы X Window в тунеле SSH также запрещена.  
<![%f-ref;[
Смотрите <ref id="xssh">.
]]>
</sect1>
</sect>

</chapt>

