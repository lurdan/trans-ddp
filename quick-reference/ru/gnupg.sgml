<!-- CVS revision of this document "$Revision: 1.2 $"  -->
<!-- CVS revision of original english document "1.18"  -->

<chapt id="gnupg">GnuPG

<p>
References:
<list compact>
<item><manref name="gpg" section="1">. 
<item><file>&dochome;gnupg/README.gz</file>
<item><em>GNU privacy handbook</em> in 
 <file>&dochome;gnupg-doc/GNU_Privacy_Handbook/</file> 
 (install <package>gnupg-doc</package> package)
</list>

<sect>Installing GnuPG
<p>
<example>
# gpg --gen-key                   # generate a new key
# gpg --gen-revoke <var>my_user_ID</var>     # generate revoke key for <var>my_user_ID</var>
# host -l pgp.net | grep www|less # figure out pgp keyservers
</example>
As of now, good keyservers are:
<example>
keyserver wwwkeys.eu.pgp.net
keyserver wwwkeys.pgp.net
</example>
Here one must be careful <strong>not to create more than 2 sub-keys</strong>.  If you do,
keyservers on pgp.net will <strong>corrupt</strong> your key.  Use
the newer <package>gnupg</package> (>1.2.1-2) to handle these corrupted 
subkeys. See <url id="&gpg-subkeys;">.
<p>
Also, only one keyserver can be specified in <file>$HOME/.gnupg/options</file>.
<p>
Unfortunately, the following does not work any more:
<example>
keyserver search.keyserver.net
keyserver pgp.ai.mit.edu
</example>

</sect>

<sect>Using GnuPG
<p>
File handling:
<example>
$ gpg  [options]  <var>command  [args]</var>
$ gpg {--armor|-a} {--sign|-s} <var>file</var> # sign file into a text <var>file</var>.asc
$ gpg --clearsign <var>file</var>              # clear-sign message
$ gpg --clearsign --not-dash-escaped <var>patchfile</var>  # clear-sign patchfile
$ gpg --verify <var>file</var>                 # verify clear-signed <var>file</var>
$ gpg -o <var>file.sig</var> {-b|--detach-sig} <var>file</var> # create detached signature
$ gpg --verify <var>file.sig</var> <var>file</var>        # verify <var>file</var> with <var>file.sig</var>
$ gpg -o <var>crypt_file</var> {--recipient|-r} <var>name</var> {--encrypt|-e} <var>file</var> 
        # public-key encryption intended for name
$ gpg -o <var>crypt_file</var> {--symmetric|-c} <var>file</var> # symmetric encryption
$ gpg -o <var>file</var> --decrypt crypt_file  # decryption
</example>
</sect>

<sect>Managing GnuPG
<p>
Key management:
<example>
$ gpg --edit-key <var>user_ID</var>               # "help" for help, interactive
$ gpg -o <var>file</var> --exports                # export all keys to <var>file</var> 
$ gpg --imports <var>file</var>                   # import all keys from <var>file</var>
$ gpg --send-keys <var>user_ID</var>              # send key of <var>user_ID</var> to keyserver
$ gpg --recv-keys <var>user_ID</var>              # recv. key of <var>user_ID</var> from keyserver
$ gpg --list-keys <var>user_ID</var>              # list keys of <var>user_ID</var>
$ gpg --list-sigs <var>user_ID</var>              # list sig. of <var>user_ID</var>
$ gpg --check-sigs <var>user_ID</var>             # check sig. of <var>user_ID</var>
$ gpg --fingerprint <var>user_ID</var>            # check fingerprint of <var>user_ID</var>
$ gpg --list-sigs | grep '^sig' | grep '[User id not found]' \
  | awk '{print $2}' | sort -u | xargs gpg --recv-keys # get unknown keys
  # update keys for all unknown sigs.
</example>
Trust code:
<example>
-         No ownertrust assigned / not yet calculated.
e         Trust calculation has failed.
q         Not enough information for calculation.
n         Never trust this key.
m         Marginally trusted.
f         Fully trusted.
u         Ultimately trusted.
</example>
The following will upload my key "<var>A8061F32</var>" to multiple keyservers:
<example>
$ for xx in us es cz de dk uk ch net.uk earth.net.uk; \
$ do gpg --keyserver wwwkeys.$xx.pgp.net  --send-keys <var>A8061F32</var>; done
</example>
</sect>

<sect>Using GnuPG with applications
<p>
<sect1>Using GnuPG with Mutt
<p>
Add the following to <file>~/.muttrc</file> to keep a slow GnuPG from automatically
starting, while allowing it to be used by typing `<tt>S</tt>' at the index menu.
<example>
macro index S ":toggle pgp_verify_sig\n"
set pgp_verify_sig=no
</example>

<sect1 id="vimgpg">Using GnuPG with Vim
<p>
Add the contents of <file>_vimrc</file> obtained from the <url id="&examples;"
name="examples subdirectory"> into <file>~/.vimrc</file> to run GnuPG 
transparently.

</chapt>
