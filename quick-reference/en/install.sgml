<!-- CVS revision of this document "$Revision: 1.52 $"  -->

<chapt id="install">Debian System installation hints

<p>
Official documentation for installing Debian is located at
<url id="&stable-info;"> and
<url id="&stable-install;">.
<p>
The development versions are located at
<url id="&testing-info;" > and
<url id="&testing-install;"> (work in progress, sometimes this may not exist).
<p> 
Although this chapter was initially written during the days of the
Potato installer, most of the contents have been updated to the Woody
installer and they are very similar installers.  Since Sarge will use a
totally new installer, please use this as a reference point for the
Sarge installer.
Also some key packages have changed names and priorities.  For example, 
default MTA of Sarge is <package>exim4</package> instead of 
<package>exim</package>, and <package>coreutils</package> has been 
introduced to replace several packages. You may need to adjust actions.

<sect>General Linux system installation hints
<p>
Do not forget to check <url id="&debian-netinst;"> if you are looking 
for a compact CD image of the &debian; installer.
<p>
Running the <tt>testing</tt> or <tt>unstable</tt> distribution
increases the risk of hitting serious bugs.  This risk can be managed
by deploying a multibooting scheme with a more stable &debian; distribution
or by using the nice trick provided by <prgn>chroot</prgn> 
as described in <ref id="chroot">.  The latter will enable
running different &debian; distributions simultaneously on different
consoles.
<p>

<sect1>Hardware compatibility basics
<p>
Linux is compatible with most PC hardware and can be installed to
almost any system. For me it was as easy as installing Windows 95/98/Me.  
The hardware compatibility list just seems to keep growing.
<p>
If you have a laptop PC, check
<url id="&linonlap;" name="Linux on Laptops">
for installation pointers by brand and model.
<p>
My recommendation for desktop PC hardware is "Just be conservative":
<list compact>
<item>SCSI rather than IDE for work, IDE/ATAPI HD for private use.
<item>IDE/ATAPI CD-ROM (or CD-RW).
<item>PCI rather than ISA, especially for the network card (NIC).
<item>Use a cheap NIC.  Tulip for PCI, NE2000 for ISA are good.
<item>Avoid PCMCIA (notebook) as your first Linux install.
<item>No USB keyboard, mouse, ... unless you want a challenge.
</list>
<p>
If you have a slow machine, yanking out the hard drive and plugging it into
another faster machine for installation is a good idea.  
</sect1>

<sect1>Determining a PC's hardware and chip set
<p>
During installation, one will be asked to identify the hardware or chip 
set of the PC. Sometimes that information may not seem easy to find. 
Here is one method:
<enumlist compact>
  <item>Open your PC's case and look inside.
  <item>Record the product ID codes on the large chips on the graphics card, network card, 
  chip near serial ports, chip near IDE ports.  
  <item>Record card names printed on the back of the PCI and ISA cards.
</enumlist>
</sect1>

<sect1>Determining a PC's hardware via &debian;
<p>
The following commands on a Linux system should give some idea of
actual hardware and configuration.
<example>
$ pager /proc/pci
$ pager /proc/interrupts
$ pager /proc/ioports
$ pager /proc/bus/usb/devices
</example>
These commands can be run during the install process from the console screen 
by pressing Alt-F2.
<p>
After the initial installation, with the installation of optional
packages such as <package>pciutils</package>,
<package>usbutils</package>, and <package>lshw</package>, you can obtain
more extensive system information.
<example>
$ lspci -v |pager
$ lsusb -v |pager
# lshw  |pager
</example>
<p>
Typical uses of interrupts:
<list compact>
<item>IRQ0: timer output (8254)
<item>IRQ1: keyboard controller
<item>IRQ2: cascade to IRQ8&ndash;IRQ15 on PC-AT
<item>IRQ3: secondary serial port (io-port=0x2F8) (<file>/dev/ttyS1</file>)
<item>IRQ4: primary serial port (io-port=0x3F8) (<file>/dev/ttyS0</file>)
<item>IRQ5: free [sound card (SB16: io-port=0x220, DMA-low=1, DMA-high=5)] 
 <!--(was the HD interrupt on the XT) Linux is for 386 or later -->
<item>IRQ6: floppy disk controller (io-port=0x3F0) (<file>/dev/fd0</file>, <file>/dev/fd1</file>)
<item>IRQ7: parport (io-port=0x378) (<file>/dev/lp0</file>)
<item>IRQ8: rtc
<item>IRQ9: software interrupt (int 0x0A), redirect to IRQ2
<item>IRQ10: free [network interface card (NE2000: io-port=0x300)]
<item>IRQ11: free [(SB16-SCSI: io-port=0x340, SB16-IDE: io-port=0x1E8,0x3EE)]
<item>IRQ12: PS/2 Mouse
<item>IRQ13: free (was 80287 math coprocessor)
<item>IRQ14: primary IDE controller (<file>/dev/hda</file>, <file>/dev/hdb</file>)
<item>IRQ15: secondary IDE controller (<file>/dev/hdc</file>, <file>/dev/hdd</file>)
</list>
For old non-PnP ISA cards, you may want to set IRQ5, IRQ10, and IRQ11 as 
non-PnP from the BIOS.
<p>
For USB devices, device classes are listed in 
<file>/proc/bus/usb/devices</file> as <tt>Cls=<var>nn</var></tt>:
<list compact>
<item>Cls=00 : Unused
<item>Cls=01 : Audio (speaker etc.)
<item>Cls=02 : Communication (MODEM, NIC, ...)
<item>Cls=03 : HID (Human Interface Device: KB, mouse, joystick)
<item>Cls=07 : Printer
<item>Cls=08 : Mass storage (FDD, CD/DVD drive, HDD, Flash, ...)
<item>Cls=09 : Hub (USB hub)
<item>Cls=255 : Vendor specific
</list>
If the device class of a device is not 255, Linux supports the device.
</sect1>

<sect1>Determining a PC's hardware via other OSs
<p>
Hardware information can also be obtained from other OSs:
<p>
Install another commercial Linux distribution.  Hardware detection 
on those tends to be better than on Debian as of now.  (This situation 
should even out once <prgn>debian-installer</prgn> is introduced with Sarge.)
<p>
Install Windows.  Hardware configuration can be obtained by right-clicking "My
Computer" to get to Properties / Device Manager.  Record all resource
information such as IRQ, I/O port address, and DMA. Some old ISA cards may
need to be configured under DOS and used accordingly.
</sect1>

<sect1>A Lilo myth
<p>
"Lilo is limited to 1024 cylinders." Wrong!
<p>
The newer <prgn>lilo</prgn> used after Debian Potato has lba32 support. 
If the BIOS of your motherboard is recent enough to support lba32, 
<prgn>lilo</prgn> should be able to load beyond the old 1024-cylinder 
limitation.
<p>
Just make sure to add a line reading "lba32" somewhere near the beginning 
of your <file>lilo.conf</file> file if you have kept an old
<file>lilo.conf</file>.  See <file>&f-lilo;</file>.
</sect1>

<sect1 id="instgrub">GRUB
<p>
The new boot loader <package>grub</package> from the GNU Hurd project can be 
installed on a &debian; Woody system:
<example>
# apt-get update
# apt-get install grub-doc
# mc &f-grub-doc;
... read contents
# apt-get install grub
# pager &f-grub;
... read it :)
</example>
To edit the GRUB menu, edit <file>&f-grub-menu;</file>.  See 
<ref id="bootgrub"> for how to set boot parameters during the boot 
process since it is slightly different from <package>lilo</package>
configuration.
</sect1>

<sect1 id="bootfloppy">Choice of boot floppies
<p>
For Potato, I liked the IDEPCI disk set for normal install to a desktop. 
For Woody, I like the bf2.4 boot disk set.  They both use a version of 
<package>boot-floppies</package> to create boot floppies.
<p>
If you have a PCMCIA network card, you need to use the standard boot
disk set (largest number of floppies but all driver modules available)
and configure the NIC in the PCMCIA setup; do not try to set up an NIC card 
in the standard network setup dialogue.
<p>
For special systems, you may need to create a custom rescue disk.
This can be done by replacing the kernel 
image named "linux" on the &debian; rescue disk by overwriting it
with another compressed kernel image compiled off-site for the machine.  
Details are documented in <file>readme.txt</file> on the rescue disk.  
The rescue floppy
uses the MS-DOS filesystem, so you can use any system to read and edit it.
This should make life easier for people with a special network card, etc.
<p>
For Sarge, <prgn>debian-installer</prgn> and/or 
<package>pgi</package> is expected to be used for creating boot floppies.
</sect1>

<sect1>Installation
<p>
Follow the official instructions found in 
<url id="&stable-install;">
or
<url id="&testing-install;"> (work in progress, sometimes this may not exist).
<p>
If you are installing a system using <prgn>boot-floppies</prgn> in the <tt>testing</tt> distribution, 
you may need to open a console terminal during the install process by pressing 
Alt-F2 and manually edit <file>/etc/apt/sources.list</file> entries, 
changing "stable" to "testing" to adjust APT sources.
<p>
I tend to install <prgn>lilo</prgn> into places like <file>/dev/hda3</file>,
while installing <prgn>mbr</prgn> into <file>/dev/hda</file>.  This minimizes 
the risk of overwriting boot information.
<p>
Here is what I choose during the install process.
<list compact>
<item>MD5 passwords "yes"
<item>shadow passwords "yes"
<item>Install "advanced" (dselect **) and select
  <list compact>
    <item>Exclude emacs (if selected), nvi, tex, telnet, talk(d); 
    <item>Include mc, vim, either one of nano-tiny or elvis-tiny.
    <p>
     See <ref id="dselect">. Even if you are an Emacs fan, avoid it now 
     and be content with nano during install.  Also avoid installing 
     other large packages such as TeX (Potato used to do this) at
     this stage.  See <ref id="bin-editor"> for the reason for 
     installing nano-tiny or elvis-tiny here.
  </list>
<item>All configuration questions = "y" (replace current) during 
  each package install dialog.
<item><package>exim</package>: select 2 for machine since I send mail through 
  my ISP's SMTP server.
</list>
<p>
For more information on dselect, see <ref id="dselect">.
</sect1>

<sect1 id="ipmap">Hosts and IP to use for LAN
<p>
Example of LAN configuration (C subnet: 192.168.1.0/24):
<example>
Internet
   |
   +--- External ISP provides POP service (accessed by fetchmail)
   | 
  Access point ISP provides DHCP service and SMTP relay service
   |                     :
  Cable modem         (Dialup)
   |                     :
LAN Gateway machine external port: eth0 (IP given by ISP's DHCP)
 use old notebook PC (IBM Thinkpad, 486 DX2 50MHz, 20MB RAM)
 run Linux 2.4 kernel with ext3 filesystem.
 run "ipmasq" package (with stronger patch, NAT, and firewall)
 run "dhcp-client" package configured for eth0 (override DNS setting)
 run "dhcp" package configured for eth1
 run "exim" as the smarthost (mode 2)
 run "fetchmail" with a long interval (fallback)
 run "bind" as the cache nameserver for Internet from LAN
            as authoritative nameserver for LAN domain from LAN
 run "ssh" on port 22 and 8080 (connect from anywhere)
 run "squid" as the cache server for the Debian archive (for APT)
LAN Gateway machine internal port: eth1 (IP = 192.168.1.1, fixed)
                         |
         +--- LAN Switch (100base T) ---+
         |                              |
Some fixed IP clients on LAN     Some DHCP clients on LAN
(IP = 192.168.1.2-127, fixed)    (IP = 192.168.1.128-200, dynamic)
</example>
See <ref id="gateway"> for the details of configuring the network.
See <ref id="net-router"> for the details of configuring the LAN gateway 
server.
</sect1>

<sect1>User accounts
<p>
In order to have a consistent feel across machines, the first few accounts are
always the same in my system.
<p>
I always create a first user account with a name like "admin" (uid=1000).
I forward all root email there.  This account is given membership
in the <tt>adm</tt> group (see <ref id="wheel">), 
which can be given a good amount of root privilege through
<prgn>su</prgn> using PAM or
the <prgn>sudo</prgn> command. See <ref id="newuser"> for details.
</sect1>

<sect1>Creating filesystems
<p>
<sect2>Hard disk partition
<p>
I prefer to use different partitions for different directory trees to limit
damage upon system crash. E.g.,
<example>
/          == (/ + /boot + /bin + /sbin)
           == 50MB+
/tmp       == 100MB+
/var       == 100MB+
/home      == 100MB+
/usr       == 700MB+ with X
/usr/local == 100MB
</example>
<p>
The size of the <file>/usr</file> directory is very dependent on X Window
applications and documentation.  
<file>/usr/</file> can be 300MB if one runs a console terminal only, whereas
2GB&ndash;3GB is not an unusual size if one has installed many Gnome
applications.  

When <file>/usr/</file> grows too big, moving out 
<file>/usr/share/</file> to a different partition is the most effective
cure.  With the new large prepackaged Linux 2.4 kernels, <file>/</file> may 
need more than 200MB.

<p>
For example, the current status of my Internet gateway machine is as follows
(output of the <tt>df -h</tt> command):
<example>
Filesystem            Size  Used Avail Use&percnt; Mounted on
/dev/hda3             300M  106M  179M  38&percnt; /
/dev/hda7             100M   12M   82M  13&percnt; /home
/dev/hda8             596M   53M  513M  10&percnt; /var
/dev/hda6             100M  834k   94M   1&percnt; /var/lib/cvs
/dev/hda9             596M  222M  343M  40&percnt; /usr
/dev/hda10            596M  130M  436M  23&percnt; /var/cache/apt/archives
/dev/hda11            1.5G  204M  1.2G  14&percnt; /var/spool/squid
</example>
(The large area reserved for <file>/var/spool/squid/</file> is for a proxy
cache for package downloading.)
<p>
Following is <tt>fdisk -l</tt> output to provide an idea of partition
structure:
<example>
# fdisk -l /dev/hda # comment

/dev/hda1             1        41    309928+   6  FAT16 # DOS
/dev/hda2            42        84    325080   83  Linux # (not used)
/dev/hda3   *        85       126    317520   83  Linux # Main
/dev/hda4           127       629   3802680    5  Extended
/dev/hda5           127       143    128488+  82  Linux swap
/dev/hda6           144       157    105808+  83  Linux
/dev/hda7           158       171    105808+  83  Linux
/dev/hda8           172       253    619888+  83  Linux
/dev/hda9           254       335    619888+  83  Linux
/dev/hda10          336       417    619888+  83  Linux
/dev/hda11          418       629   1602688+  83  Linux
</example>
A few unused partitions exist.  These are for installing a second Linux
distribution or as expansion space for growing directory trees.

<sect2>Mount filesystems
<p>
Mounting the above filesystems properly is accomplished with the following
<file>/etc/fstab</file>:
<example>

# /etc/fstab: static filesystem information.
#
# filesystem    mount point     type    options                dump pass
/dev/hda3       /               ext2    defaults,errors=remount-ro 0 1
/dev/hda5       none            swap    sw                      0 0
proc            /proc           proc    defaults                0 0
/dev/fd0        /floppy         auto    defaults,user,noauto    0 0
/dev/cdrom      /cdrom          iso9660 defaults,ro,user,noauto 0 0
#
# keep partitions separate
/dev/hda7       /home           ext2    defaults                0 2
/dev/hda8       /var            ext2    defaults                0 2
/dev/hda6       /var/lib/cvs    ext2    defaults                0 2
# noatime will speed up file access for read access
/dev/hda9       /usr            ext2    defaults,noatime        0 2
/dev/hda10      /var/cache/apt/archives ext2    defaults        0 2

# very big partition for proxy cache
/dev/hda11      /var/spool/squid ext2   rw                      0 2

# backup bootable DOS
/dev/hda1       /mnt/dos        vfat    rw,noauto               0 0
# backup bootable Linux system (not done)
/dev/hda2       /mnt/linux      ext2    rw,noauto               0 0
#
# nfs mounts
mickey:/        /mnt/mickey     nfs     ro,noauto,intr          0 0
goofy:/         /mnt/goofy      nfs     ro,noauto,intr          0 0
# minnie:/ /mnt/minnie smbfs ro,soft,intr,credentials={filename} 0 2
</example>

For NFS, I use <tt>noauto,intr</tt> combined with the default 
<tt>hard</tt> option.   This 
way, it is possible to recover from a hung process due to a dead connection
using Ctrl-C.
<p>
For a Windows machine connected with Samba (smbfs), <tt>rw,auto,soft,intr</tt> 
may be good idea. See <ref id="samba">.
<p>
For a floppy drive, using <tt>noauto,rw,sync,user,exec</tt> instead prevents file
corruption after accidental disk eject before unmount, but this slows the
write process.

<sect2>Autofs mount
<p>
Key points to auto mount:
<list compact>
<item>Load the <tt>vfat</tt> module to allow <file>/etc/auto.misc</file>
 to contain <tt>-fstype=auto</tt>:
<example>
# modprobe vfat # prior to the floppy access attempt
 ... or to automate this setting,
# echo "vfat" &gt;&gt; /etc/modules
 ... and reboot the system.
</example>
<item>Set <file>/etc/auto.misc</file> as follows:
<example>
floppy -fstype=auto,sync,nodev,nosuid,gid=100,umask=000 :/dev/fd0
 ... where gid=100 is "users".
</example>
<item>Create <file>cdrom</file> and <file>floppy</file> links in <file>/home/<var>user</var></file>, that point to 
 <file>/var/autofs/misc/cdrom</file> and 
 <file>/var/autofs/misc/floppy</file> respectively.
<item>Add <var>user</var> to the "users" group.
</list>

<sect2>NFS mount
<p>
The external Linux NFS server (goofy) resides behind a firewall (gateway). I
have a very relaxed security policy on my LAN since I am the only user. To
enable NFS access, the NFS server side needs to add <file>/etc/exports</file> as
follows:
<example>
# /etc/exports: the access control list for filesystems which may be
#               exported to NFS clients.  See exports(5).
/       (rw,no_root_squash)
</example>
This is needed to activate the NFS server in addition to installing and
activating the NFS server and client packages.
<p>
For simplicity, I usually create a single partition of 2GB for an experimental
or secondary lazy Linux install.  I optionally share swap and <file>/tmp</file>
partitions for these installs.  A multipartition scheme is too involved for
these usages.  If only a simple console system is needed, 500MB may be more
than sufficient.
</sect1>

<sect1>DRAM memory guidelines
<p>
Following are rough guidelines for DRAM.
<example>
  4MB:  Bare minimum for Linux kernel to function.
 16MB:  Minimum for reasonable console system.
 32MB:  Minimum for simple X system.
 64MB:  Minimum for X system with GNOME/KDE.
128MB:  Comfortable for X system with GNOME/KDE.
256MB (or more): Why not if you can afford it?  DRAM is cheap.
</example>
Using the boot option <tt>mem=4m</tt> (or lilo <tt>append="mem=4m"</tt>) will show how the
system would perform with 4MB of memory installed.  A lilo boot parameter 
is needed for a system containing more than 64MB of memory with an old BIOS.
</sect1>

<sect1>Swap space
<p>
I use the following guidelines for swap space:
<list compact>
<item>Each swap partition is &lt; 128MB (if using an old 2.0 kernel), &lt; 2GB
(with recent kernels)
<item>Total = either (1 to 2 times installed RAM) or (128MB to 2GB) as a guideline
<item>Spread them on different drives and mount all of them with 
 <tt>sw,pri=1</tt> options in <file>/etc/fstab</file>.  This
 ensures that the kernel does a striping RAID of the swap partitions
 and offers the maximum swap performance.
<item>Use a central portion of the hard disk when possible.
</list>
<p>
Even if you never need it, some swap space (128MB) is desirable so the
system will slow down before it crashes hard with a program which leaks
memory.
</sect1>
</sect>

<sect id="bashconf">Bash configuration
<p>
I modify shell startup scripts to my taste across the system:
<example>
/etc/bash.bashrc        Replace with private one
/etc/profile            Keep distribution copy ( \w -&gt; \W)
/etc/skel/.bashrc       Replace with private copy
/etc/skel/.profile      Replace with private copy
/etc/skel/.bash_profile Replace with private copy
~/.bashrc               Replace with private copy for all accounts
~/.profile              Replace with private copy for all accounts
~/.bash_profile         Replace with private copy for all accounts
</example>
<url id="&examples;" name="See details in my example scripts">. 
I like a transparent system, so I set <prgn>umask</prgn> to 002 or 022.
<p>
<prgn>PATH</prgn> is set by the following configuration files in this order:
<example>
/etc/login.defs  - before the shell sets PATH
/etc/profile     (may call /etc/bash.bashrc)
~/.bash_profile  (may call ~/.bashrc)
</example>
</sect>

<sect id="gpm">Mouse configuration
<p>
<sect1>PS/2 mice
<p>
In the case of a PS/2-connector mouse on an ATX motherboard, the signal 
flow should be:
<example>
mouse -&gt; /dev/psaux -&gt; gpm -&gt; /dev/gpmdata = /dev/mouse -&gt; X
</example>
Here, a symlink <file>/dev/mouse</file> is created and is pointing to
<file>/dev/gpmdata</file> to make some configuration utilities happy and
to make reconfiguration easy. 
(E.g., if you decide not to use the <prgn>gpm</prgn> daemon after all, just point the
symlink <file>/dev/mouse</file> to <file>/dev/psaux</file> after getting
rid of the <prgn>gpm</prgn> daemon.)
<p>
This signal flow allows the keyboard and mouse to be unplugged and
reinitialized by restarting <prgn>gpm</prgn> upon reconnect.  
X will stay alive! 
<p>
The protocol of the signal flow between <prgn>gpm</prgn> output and X input
can be implemented in either of two ways, as "ms3" (use the Microsoft 3-button
serial mouse protocol) or "raw" (use the same protocol as the mouse that is
connected), and this choice dictates the choice of protocol used in X
configuration.
<p>
I will demonstrate the configuration examples using a Logitech 3-button
(traditional Unix-style mouse) PS/2 mouse as an example in the following.
<p>
If you are one of the unfortunate whose graphics card is not supported 
by the new X4 and need to use the old X3 (some ATI 64 bit cards), configure 
<tt>/etc/X11/X86Config</tt> instead of <tt>/etc/X11/X86Config-4</tt>
in the following examples while installing X3 packages.

<sect2 id="gpmms3">The ms3 protocol approach
<p>
<example>
/etc/gpm.conf            | /etc/X11/X86Config-4
=========================+======================================
device=/dev/psaux        | Section "InputDevice"
responsiveness=          |  Identifier "Configured Mouse"
repeat_type=ms3          |  Driver     "mouse"
type=autops2             |  Option     "CorePointer"
append=""                |  Option     "Device"   "/dev/mouse"
sample_rate=             |  Option     "Protocol" "IntelliMouse"
                         | EndSection
</example>
If this approach is used, the mouse type adjustment is done only by
editing <file>gpm.conf</file> and X configuration stays constant.
See <url id="&examples;" name="my example scripts">.

<sect2 id="gpmraw">The raw protocol approach
<p>
<example>
/etc/gpm.conf            | /etc/X11/X86Config-4
=========================+======================================
device=/dev/psaux        | Section "InputDevice"
responsiveness=          |  Identifier "Configured Mouse"
repeat_type=raw          |  Driver     "mouse"
type=autops2             |  Option     "CorePointer"
append=""                |  Option     "Device"   "/dev/mouse"
sample_rate=             |  Option     "Protocol" "MouseManPlusPS/2"
                         | EndSection
</example>
If this approach is used, the mouse type adjustment is done by
editing <file>gpm.conf</file> as well as adjusting X configuration.

<sect2>How to adjust to different mice
<p>
The <prgn>gpm</prgn> device type <tt>autops2</tt> is supposed to 
autodetect most of the PS/2 mice in the market.  Unfortunately it 
doesn't always work and it isn't available in pre-Woody versions.  
Try using <tt>ps2</tt>, or <tt>imps2</tt> in <file>gpm.conf</file> 
instead of <tt>autops2</tt> for such cases.  To find out the specific 
types of mouse <prgn>gpm</prgn> knows about, type: <tt>gpm -t help</tt>.
See <manref name="gpm" section="8">.
<p>
If a 2-button PS/2 mouse is used, set the X protocol to
enable <tt>Emulate3Buttons</tt>. The difference of protocol between 
the 2-button mouse and the 3-button mouse is autodetected and auto-adjusted for
<prgn>gpm</prgn> after tapping the middle button once.
<p>
For X protocol with <ref id="gpmraw"> or without <prgn>gpm</prgn>, use:
<list compact>
<item><tt>IntelliMouse</tt>: serial port mouse (<prgn>gpm</prgn> repeater with "ms3")
<item><tt>PS/2</tt>: PS/2 port mouse (always test this first)
<item><tt>IMPS/2</tt>: any PS/2 port mice (2, 3, or scroll mice, better)
<item><tt>MouseManPlusPS/2</tt>: Logitech PS/2 port mouse
<item><tt>...</tt>
</list>
See more at <url id="&mousexf86;" name="Mouse Support in XFree86">.
<p>
A typical Microsoft scroll mouse is reported to work 
best with:
<example>
/etc/gpm.conf            | /etc/X11/X86Config-4
=========================+======================================
device=/dev/psaux        | Section "InputDevice"
responsiveness=          |  Identifier "Configured Mouse"
repeat_type=raw          |  Driver     "mouse"
type=autops2             |  Option     "CorePointer"
append=""                |  Option     "Device"   "/dev/mouse"
sample_rate=             |  Option     "Protocol" "IMPS/2"
                         |  Option     "Buttons" "5"
                         |  Option  "ZAxisMapping" "4 5"
                         | EndSection
</example>
<p>
For some recent thin Toshiba notebook PCs, activating <prgn>gpm</prgn>
before PCMCIA in the System-V init script may help prevent system
lockup.  Weird but true.

<sect1>USB mice
<p>
Make sure you have all required kernel functions activated through
kernel compile time configuration or modules:
<list compact>
<item>Under "Input core support":
<list compact>
<item>"Input core support" (CONFIG_INPUT, <file>input.o</file>),
<item>"Mouse support" (CONFIG_INPUT_MOUSEDEV, <file>mousedev.o</file>),
</list>
<item>Under "USB support":
<list compact>
<item>"Support for USB" (CONFIG_USB, <file>usbcore.o</file>),
<item>"Preliminary USB device filesystem" (CONFIG_USB_DEVICEFS),
<item>"UHCI" or "OHCI" (CONFIG_USB_UHCI || CONFIG_USB_UHCI_ALT ||
       CONFIG_USB_OHCI, <file>usb-uhci.o</file> || <file>uhci.o</file> ||
       <file>usb-ohci.o</file>),
<item>"USB Human Interface Device (full HID) support" (CONFIG_USB_HID,
      <file>hid.o</file>), and
<item>"HID input layer support" (CONFIG_USB_HIDINPUT)
</list>
</list>
Here, lower case names are module names.
<p>
If you're not using devfs, create a device node <file>/dev/input/mice</file> 
with major 13 and minor 63 as follows:
<example>
# cd /dev
# mkdir input
# mknod input/mice c 13 63
</example>
<p>
For typical scroll <strong>USB</strong> mice, 
configuration combinations should be:
<example>
/etc/gpm.conf            | /etc/X11/X86Config-4
=========================+======================================
device=/dev/input/mice   | Section "InputDevice"
responsiveness=          |  Identifier "Generic Mouse"
repeat_type=raw          |  Driver     "mouse"
type=autops2             |  Option     "SendCoreEvents" "true"
append=""                |  Option     "Device"   "/dev/input/mice"
sample_rate=             |  Option     "Protocol" "IMPS/2"
                         |  Option     "Buttons" "5"
                         |  Option  "ZAxisMapping" "4 5"
                         | EndSection
</example>
<p>
See <url id="&linuxusb;" name="the Linux USB Project"> for more information.

<sect1>Touchpad
<p>
Although the touchpad on a laptop computer emulates a 2-button PS/2
mouse as the default behavior, the <package>tpconfig</package> package
enables full control of the device.  For example, setting
<tt>OPTIONS="--tapmode=0"</tt> in <file>/etc/default/tpconfig</file>
will disable pesky "click by tap" behavior.  Set
<file>/etc/gpm.conf</file> as follows to use both touchpad and USB
external mouse on the console:
<example>
device=/dev/psaux
responsiveness=
repeat_type=ms3
type=autops2
append="-M -m /dev/input/mice -t autops2"
sample_rate=
</example>

</sect>

<sect id="nfs">NFS configuration
<p>
Set up NFS by setting <file>/etc/exports</file>.
<example>
# apt-get install nfs-kernel-server
# echo "/ *.domainname-for-lan-hosts(rw,no_root_squash,nohide)" \
        &gt;&gt; /etc/exports
</example>
<url id="&examples;" name="See my example scripts for details">.
</sect>

<sect id="samba">Samba configuration
<p>
References:
<list compact>
<item><url id="&sambahome;">
<item><package>samba-doc</package> package
</list>
<p>
Setting up Samba with "share" mode is much easier since this creates WfW-type
share drives.  But it is preferable to set it up with "user" mode.
<p>
Samba can be configured through <prgn>debconf</prgn> or <prgn>vi</prgn>:
<example>
# dpkg-reconfigure --priority=<var>low</var> samba # in Woody
# vi /etc/samba/smb.conf
</example>
<url id="&examples;" name="See my example scripts for details">.
<p>
Adding a new user to the <file>smbpasswd</file> file can be done via <prgn>smbpasswd</prgn>:
<example>
$ su -c "smbpasswd -a username"
</example>
Make sure to use encrypted passwords for optimum compatibility.
<p>
Set <tt>os level</tt> according to the following system equivalences (the larger the
number, the higher the priority as server):
<example>
0:      Samba with a loose attitude (will never become a master browser)
1:      WfW 3.1, Win95, Win98, Win/Me?
16:     Win NT WS 3.51
17:     Win NT WS 4.0
32:     Win NT SVR 3.51
33:     Win NT SVR 4.0
255:    Samba with mighty power
</example>
Make sure that users are members of the group owning the directory that gives
shared access and that the directory path has its execution bit set to access.
</sect>

<sect id="printer">Printer configuration
<p>
The traditional method is <prgn>lpr</prgn>/<prgn>lpd</prgn>.  There is a
new CUPS&trade; system (Common UNIX Printing System).  PDQ is another approach.
See the <url id="&printing-howto;" name="Linux Printing HOWTO"> for
more information.

<sect1 id="lprlpd"><prgn>lpr</prgn>/<prgn>lpd</prgn>
<p>
For the <prgn>lpr</prgn>/<prgn>lpd</prgn> type spoolers (<package>lpr</package>, 
<package>lprng</package>, and <package>gnulpr</package>), set up 
<file>/etc/printcap</file> as follows if they are connected to a PostScript 
or text-only printer (the basics):
<example>
<var>lp</var>|<var>alias</var>:\
        :sd=/var/spool/lpd/<var>lp</var>:\
        :mx#0:\
        :sh:\
        :lp=/dev/lp0:
</example>
Meaning of the above lines:
<list compact>
<item>Head line: <var>lp</var> &ndash; name of spool, <var>alias</var> =
 alias
<item>mx#0 &ndash; max file size unlimited
<item>sh &ndash; suppress printing of burst page header
<item>lp=/dev/lp0 &ndash; local printer device, or port@host for remote
</list>
This is a good configuration if you are connected to a PostScript printer.
Also, when printing from a Windows machine through Samba, this is a good
configuration for any Windows-supported printer (no bidirectional
communication is supported).  You have to select the corresponding printer
configuration on the Windows machine.
<p>
If you do not have a PostScript printer, you need to set up a filtering
system using <prgn>gs</prgn>.  
There are many autoconfiguration tools provided for setting up 
<file>/etc/printcap</file>.
Any of these combinations is an option:
<list compact>
<item><package>gnulpr</package>, (<package>lpr-ppd</package>) and 
  <package>printtool</package>&mdash;I use this.
<item><package>lpr</package> and <package>apsfilter</package>
<item><package>lpr</package> and <package>magicfilter</package>
<item><package>lprng</package> and <package>lprngtool</package>
<item><package>lprng</package> and <package>apsfilter</package>
<item><package>lprng</package> and <package>magicfilter</package>
<!-- I can think of more combinations but I add them if someone  
  actually report me they got it working with them.  -->
</list>
<p>
In order to run GUI configuration tools such as <prgn>printtool</prgn>,
see <ref id="ss-xsu"> to gain root privilege.  Printer spools created
with <prgn>printtool</prgn> use <prgn>gs</prgn> and act like PostScript
printers.  So when accessing them, use PostScript printer drivers.  On
the Windows side, "Apple LaserWriter" is the standard one.
</sect1>

<sect1 id="cups">CUPS&trade;
<p>
Install the Common UNIX Printing System (or CUPS&trade;):
<example>
# apt-get install cupsys foomatic-bin foomatic-db
# apt-get install cupsys-bsd cupsys-driver-gimpprint
</example>
In Sarge, using <prgn>aptitude</prgn>, you can select "Print Server Task".
<!-- CUPS dependencies: Recommends are not installed automatically -->
<p>
KDE and Gnome Desktop Environments provide easy printer configuration.
Alternatively, you can configure the system using any web browser
if <package>swat</package> is installed:
</p>
<p>
<example>
$ <var>mybrowser</var> http://localhost:631
</example>
</p>
<p>
For example, to add your printer on some port to the list of
accessible printers:
<list>
<item>click "Printers" from the main page, and then "Add Printer",
<item>enter "root" for the username and its password,
<item>proceed to add the printer following the prompts,
<item>go back to the "Printers" page and click "Configure Printer", and
<item>proceed to configure the paper size, resolution, and other 
 parameters.
</list>
See more information at
<url id="http://localhost:631/documentation.html"> and
<url id="&cups-help;">.
<p>
For a 2.4 kernel, see also <ref id="parport">.
</sect1>
</sect>

<sect>Other host installation hints

<sect1 id="post-inst">Install a few more packages after initial install
<p>
Once you have made it this far, you have a small but functioning &debian; 
system. It is a good time to install bigger packages.
<list>
<item>Run <prgn>tasksel</prgn>.  See <ref id="tasksel">.
<p>
You may choose these if you need them:
<list compact>
<item>End-user &ndash; X Window System
<item>Development &ndash; C and C++
<item>Development &ndash; Python
<item>Development &ndash; Tcl/Tk
<item>Miscellaneous &ndash; TeX/LaTeX environment
<item>For others, I prefer to use <prgn>tasksel</prgn> as a guide by 
looking into their components listed under &lt;Task Info&gt; and 
installing them selectively through <prgn>dselect</prgn>.
</list>

<item>Run <prgn>dselect</prgn>. 
<p>
Here the first thing you may want to do is select your favorite editor and 
any programs you need. You can install many Emacs variants at the same 
time. See <ref id="dselect"> and <ref id="pop-editor">.
<p>
Also you may replace some of the default packages with full-featured ones.
<list compact>
<item>lynx-ssh (instead of lynx)
<item>... <!-- Add list in generic way. -->
</list>
<item>...
</list>

I usually edit <file>/etc/inittab</file> for easy shutdown.
<example>
...
# What to do when CTRL-ALT-DEL is pressed.
ca:12345:ctrlaltdel:/sbin/shutdown -t1 -a -h now
...
</example>
</sect1>

<sect1>Modules
<p>
Modules for the device drivers are configured during the initial 
installation.  <prgn>modconf</prgn> provides menu-driven module 
configuration afterward. This program is quite useful when some 
modules were left out during the initial installation or a new kernel 
was installed after the initial installation.
<p>
All preloading module names need to be listed in
<file>/etc/modules</file>.  I also use <prgn>lsmod</prgn> and
<prgn>depmod</prgn> to control them manually.
<p>
Also make sure to add a few lines in <file>/etc/modules</file> to 
handle IP masquerading (FTP, etc.) for 2.4 kernels.  See
<ref id="kernel-modules">, specifically <ref id="kernel-net">.

</sect1>

<sect1>CD-RW basic setup
<p>
For IDE connected CD-RW drive with 2.4 kernel, edit the following files:
<example>
/etc/lilo.conf  (add append="hdc=ide-scsi ignore=hdc", 
                 run lilo to activate)
/dev/cdrom      (symlink # cd /dev; ln -sf scd0 cdrom)
/etc/modules    (add "ide-scsi" and "sg". If needed "sr" after this.)
</example>
See <ref id="cdrw"> for details.
</sect1>

<sect1 id="apm">Large memory and auto power-off
<p>
Edit <file>/etc/lilo.conf</file> as follows to set boot-prompt parameters for large 
memory (for 2.2 kernels) and auto power-off (for APM):
<example>
append="mem=128M apm=on apm=power-off noapic"
</example>
Run <prgn>lilo</prgn> to install these settings.  <tt>apm=power-off</tt> 
is needed for a SMP kernel and <tt>noapic</tt> is needed to avoid
problems for my buggy SMP hardware.  The same can be done directly by entering 
options at the boot prompt. See <ref id="bootprompt">.
<p>
If APM is compiled as a module, as in Debian default 2.4 kernels,
run <tt>insmod apm power_off=1</tt> after boot or set
<file>/etc/modules</file> by:
<example>
# echo "apm power_off=1" &gt;&gt;/etc/modules
</example>
<p>
Alternatively, compiling ACPI support achieves the same goal with newer
kernels and seems to be more SMP-friendly (this requires a newer motherboard).
The 2.4 kernel on newer motherboards should detect large memory correctly.
<example>
CONFIG_PM=y
CONFIG_ACPI=y
...
CONFIG_ACPI_BUSMGR=m
CONFIG_ACPI_SYS=m
</example>
and add the following lines in <file>/etc/modules</file> in this order:
<example>
ospm_busmgr
ospm_system
</example>
Or recompile the kernel with all of the kernel options above set to "y".  In
any case, none of the boot-prompt parameters are needed with ACPI.
</sect1>

<sect1 id="killecn">Strange access problems with some websites
<p>
Recent Linux kernels enable ECN by default, which may cause access
problems with some websites on bad routers. To check ECN status:
<example>
# cat /proc/sys/net/ipv4/tcp_ecn
 ... or
# sysctl net.ipv4.tcp_ecn
</example>
To turn it off, use:
<example>
# echo "0" > /proc/sys/net/ipv4/tcp_ecn
 ... or
# sysctl -w net.ipv4.tcp_ecn=0
</example>
To disable TCP ECN on every boot, edit <file>/etc/sysctl.conf</file> and add:
<example>
net.ipv4.tcp_ecn = 0
</example>
</sect1>

<sect1>Dialup PPP configuration
<p>
Install the <package>pppconfig</package> package to set up dialup PPP access.
<example>
# apt-get install pppconfig
# pppconfig
 ... follow the directions to configure dialup PPP
# adduser <var>user_name</var> dip
 ... allow <var>user_name</var> to access dialup PPP
</example>
Dialup PPP access can be initiated by the user 
(<var>user_name</var>):
<example>
$ pon <var>ISP_name</var>  # start PPP access to your ISP
 ... enjoy the Internet
$ poff <var>ISP_name</var> # stop PPP access, <var>ISP_name</var> optional
</example>
See <ref id="low-ppp"> for more details.
</sect1>

<sect1>Other configuration files to tweak in <file>/etc/</file>
<p>
You may want to add an <file>/etc/cron.deny</file> file, missing from the standard Debian
install (you can copy <file>/etc/at.deny</file>).
</sect1>

</sect>

</chapt>



