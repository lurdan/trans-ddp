<!-- CVS revision of this document "$Revision: 1.2 $"  -->

<chapt id="install">Debian GNU/Linux System installation

<![%FIXME[<p>===Proof reading by dsew: DONE ===]]>

<p>
Although this document dates from the days of the Potato release, most of its
contents are aimed at a Woody installation (Debian 3.0).

<sect>Preface
<p>
The command examples in this document assume that one is running the Bash
shell. Conventions:
<example>
# command in root account
$ command in user account
... description of action
</example>

For Bash documentation, "man bash", and also see the HOWTO document
<file>/usr/share/doc/HOWTO/en-txt/Bash-Prog-Intro-HOWTO.gz</file>.
<p>
All examples of scripts are to be found in
<url id="http://qref.sourceforge.net/quick/examples/" 
name="http://qref.sourceforge.net/quick/examples/">.
In this directory, the preceding "." that begins the name of a hidden
file is converted to an underscore ("_").
</sect>

<sect>Basics of the distributions
<p>
Debian GNU/Linux comes in 3 release "flavors": 
<list>
<item>stable:   Good to track on a production server. Boring for the workstation (WS).
<item>testing:  Good to track on the WS (read debian-devel-announce for
updates).
<item>unstable: Never track this unless you know what you're doing.  Use it to
selectively upgrade packages for particular reasons.
</list>
As of January 2002, these correspond to Potato (production quality),
Woody (beta-test, very stable now), and Sid (alpha-test).  When packages
in unstable have no grave bug filed against them after the first week or
so, they are automatically promoted to testing. 
<p>
In theory, there are two things you can do get the latest versions of software
running.  <p>
<ref id="apt-install"> (mainly for WS purposes)
<p>
<ref id="port"> (mainly for server purposes)
<p>
I will present some basic information here to help you live happily with the
latest software, taking advantage of the testing and unstable distributions of
Debian. The impatient should proceed to <ref id="survival"> immediately.
Happy upgrading!
</sect>

<sect>Linux system installation
<p>
In order to minimize risks associated with testing and unstable
packages, it is a good practice to set up your main Linux system for
dual booting along with another small stable Linux system.

<sect1>Hardware compatibility basics
<p>
Linux is compatible with most PC hardware and can be installed to
almost any system. For me it was as easy as installing Windoze 95/98/Me.  
The hardware compatibility list just seems to keep growing.
<p>
If you have a laptop PC, check
<url id="http://www.linux-laptop.net/" name="Linux on Laptops">
for installation pointers by brand and model.
<p>
My recommendation for desktop PC hardware is "Just be conservative":
<list>
<item>SCSI rather than IDE for work, IDE/ATAPI HD for private use
<item>IDE/ATAPI CD-ROM (or CD-RW)
<item>PCI rather than ISA, especially for the network card (NIC)
<item>Use a cheap NIC.  Tulip for PCI, NE2000 for ISA are good.
<item>Avoid PCMCIA (notebook) as your first Linux install
<item>No USB keyboard, mouse . . . unless you want a challenge
</list>
For a slow machine, yanking out the hard drive and plugging it into another 
faster machine for installation is a good idea.  
</sect1>

<sect1>Determining a PC's hardware and chip set
<p>
During installation, one will be asked to identify hardware or chip set.
Sometimes that information may not seem easy to find. Here is my hint:
<p>
(1) Open a PC box and check inside. 
<p>
(2) Record the numbers on the large chips on the graphics card, network card, 
chip near serial ports, chip near IDE ports.  
<p>
(3) Record card names printed on the back of the PCI and ISA cards.
</sect1>

<sect1>Determining a PC's hardware via GNU/Debian
<p>
The following commands on an installed Linux system should give some idea of
actual hardware and configuration.
<example>
$ /usr/sbin/lspci -v |less
$ less /proc/pci
$ less /proc/interrupts
$ less /proc/ioports
</example>
</sect1>

<sect1>Determining a PC's hardware via other OSs
<p>
Hardware information can also be obtained from other OSs.
<p>
Install another commercial Linux distribution.  Hardware detection 
on those tends to be better than on Debian as of now.  This may change 
as Woody evolves.
<p>
Install Windows.  Hardware configuration can be obtained by right-clicking "My
Computer" to get to Properties / Device Manager.  Record all resource
information such as IRQ, I/O port address, and DMA. Some old ISA cards may
need to be configured under DOS and used accordingly.
</sect1>

<sect1>A Lilo myth
<p>
Lilo is limited to 1024 cylinders.  &mdash;WRONG !
<p>
The newer <prgn>lilo</prgn> used in Debian Potato has lba32 support. If the BIOS of your
motherboard is recent enough to support lba32, <prgn>lilo</prgn> should be able to load
beyond the old 1024-cylinder limitation.
<p>
Just make sure to add a line reading "lba32" somewhere near the beginning 
of your <prgn>lilo.conf</prgn> file if you have kept an old
<prgn>lilo.conf.</prgn>
</sect1>

<sect1 id="bootfloppy">Choice of boot floppies
<p>
An IDEPCI disk set is best if you are installing on a desktop. The IDEPCI
kernel on the IDEPCI boot disk enables PCI network cards; thus you can get
almost everything off the network.  Only 2 floppy disks (boot and root) are
needed.
<p>
For special systems, create a custom rescue disk: replace the kernel 
image named "linux" on the Debian rescue disk by overwriting it
with another compressed kernel image compiled offsite for the machine.  
Details are documented in <prgn>readme.txt</prgn> on the rescue disk.  The rescue floppy
uses the MS-DOS filesystem, so you can use any system to read and edit it.
This should make life easier for people with a special network card, etc.
<p>
If you have a PCMCIA network card, configure it in the PCMCIA setup; do not
set it up in the standard network setup.
</sect1>

<sect1>Installation
<p>
Quick hints for a Potato installation are:
<enumlist>
<item> Prepare rescue/root(/driver) disk set. (IDEPCI for a desktop system)
<item> Boot with rescue FD and root FD.
<item> Fdisk/fsck/mount swap, root, tmp, var, home, usr, etc. (no 2.0 kernel
support)
<item> Install OS. (For IDEPCI, network installable)
<item> If the standard kernel FD is used, install driver disks here.
<item> Configure drivers. (No action option, if IDE)
<item> Install base system from network or FD. (<file>base2_2.tgz</file>) [WOODY: may not be there]
<![%FIXME[<p>=== base2_2.tgz replaced by dbootstrap in Woody? --DS ===]]>
<item> Configure base system.
<item> Do not install <prgn>lilo</prgn> as MBR and use multi-boot mbr.
<item> Reboot the system. (Do not bother creating a boot FD)
<item> MD5 passwords "yes", shadow passwords "yes"; set up an ordinary user
account
<item> Install "advanced" (dselect **)
<item> Select minimum sets to your taste. Exclude emacs, nvi, tex, telnet,
talk(d); include mc, vim, kernel-image-2.2.18pre21 (full kernel if
IDE disk is used to install) ...
<item> Install (download all...)
<item> All configuration questions = "y" (replace current)
<item> exim: select 2 for machine behind a firewall, 1 for an Internet machine
<![%FIXME[<p>=== But users running a workstation that is not their main SMTP 
                 server may want to select '3' for "Satellite" system --DS
                                                                          ===]]>
</enumlist>
For more information on dselect, see <ref id="dselect">.
</sect1>

<sect1>Host and IP to use
<p>
<![%FIXME[<p>=== The following may not be too useful for a user trying to
                 set up a single Debian workstation on a university or
                 corporate network. Can it be made more general?  ===]]>
I use a class C subnet at home:
<example>
192.168.1.1     gateway (Linux SMB/NFS/DNS/DHCP/MAIL/SQUID Server, i486DX2)
192.168.1.2     minnie  (windoze98J, Pentium 233MMX)
192.168.1.3     goofy   (Linux WS, Celeron 433MHz SMP)
192.168.1.4     mickey  (Linux WS, Pentium 233MMX CD-RW)
192.168.1.5     pooh    (windowsMEJ, Celeron 650 CD-RW)
...
192.168.1.DHCP          (DHCP=100-200)
</example>
</sect1>

<sect1>User accounts
<p>
In order to have a consistent feel across machines, the first few accounts are
always the same in my system.
<p>
I always create a first user account with a name like "admin" (uid=1000).
I forward all root email there.  This account is made to be a member
of the "staff" group, which is given a good amount of root privilege through
the <prgn>sudo</prgn> command. See <ref id="newuser"> for details.
</sect1>

<sect1>Hard disk partition and NFS setup
<p>
I prefer to use different partitions for different directory trees to limit
damage upon system crash. E.g.,
<example>
/          == (/ + /boot + /bin + /sbin)
           == 50MB+
/tmp       == 100MB+
/var       == 100MB+
/home      == 100MB+
/usr       == 700MB+ with X
/usr/local == 100MB
</example>
<p>
The size of the <file>/usr</file> directory is very dependent on X-window
applications.  
<file>/usr</file> can be 300MB if one runs a console terminal only, whereas
2GB&ndash;3GB is not an unusual size if one has installed many Gnome
applications.
<p>
For example, the current status of my Internet gateway machine is as follows
(output of the <tt>df -h</tt> command):
<example>
Filesystem            Size  Used Avail Use% Mounted on
/dev/hda3             300M  106M  179M  38% /
/dev/hda7             100M   12M   82M  13% /home
/dev/hda8             596M   53M  513M  10% /var
/dev/hda6             100M  834k   94M   1% /var/lib/cvs
/dev/hda9             596M  222M  343M  40% /usr
/dev/hda10            596M  130M  436M  23% /var/cache/apt/archives
/dev/hda11            1.5G  204M  1.2G  14% /var/spool/squid
</example>
(The large area reserved for <file>/var/spool/squid</file> is for a proxy cache for package
downloading.)
<p>
Following is <tt>fdisk -l</tt> output to provide an idea of partition
structure:
<example>
# fdisk -l /dev/hda # comment

/dev/hda1             1        41    309928+   6  FAT16 # DOS
/dev/hda2            42        84    325080   83  Linux # (not used)
/dev/hda3   *        85       126    317520   83  Linux # Main
/dev/hda4           127       629   3802680    5  Extended
/dev/hda5           127       143    128488+  82  Linux swap
/dev/hda6           144       157    105808+  83  Linux
/dev/hda7           158       171    105808+  83  Linux
/dev/hda8           172       253    619888+  83  Linux
/dev/hda9           254       335    619888+  83  Linux
/dev/hda10          336       417    619888+  83  Linux
/dev/hda11          418       629   1602688+  83  Linux
</example>
A few unused partitions exist.  These are for installing a second Linux
distribution or as expansion space for growing directory trees.
<p>
If you have more than 2 hard disks, make a swap partition for each drive to
gain maximum performance.  
<p>
Mounting the above filesystems properly is accomplished with the following
<file>/etc/fstab</file>:
<example>

# /etc/fstab: static file system information.
#
# file system	mount point	type	options			dump	pass
/dev/hda3	/		ext2	defaults,errors=remount-ro 0	1
/dev/hda5	none		swap	sw			0	0
proc		/proc		proc	defaults		0	0
/dev/fd0	/floppy		auto	defaults,user,noauto	0	0
/dev/cdrom	/cdrom		iso9660	defaults,ro,user,noauto	0	0
#
# keep partition separate
/dev/hda7	/home		ext2	rw			0	2
/dev/hda8	/var		ext2	rw			0	2
/dev/hda6	/var/lib/cvs	ext2	rw			0	2
/dev/hda9	/usr		ext2	rw			0	2
/dev/hda10	/var/cache/apt/archives ext2	rw		0	2

# very big partition for proxy cache
/dev/hda11	/var/spool/squid ext2	rw			0	2

# backup bootable DOS
/dev/hda1	/mnt/dos	vfat	rw,noauto		0	0
# backup bootable Linux system (not done)
/dev/hda2	/mnt/linux	ext2	rw,noauto		0	0
#
# nfs mounts
mickey:/	/mnt/mickey	nfs	ro,noauto,intr		0	0
goofy:/		/mnt/goofy	nfs	ro,noauto,intr		0	0
# minnie:/ /mnt/minnie smbfs ro,soft,intr,credentials={filename}  0       2
</example>
Here I use <tt>noauto,intr</tt> combined with the default <tt>hard</tt> option for nfs.   This 
way, it is possible to recover from a hung process due to a dead connection
using Control-C.
<p>
<![%FIXME[<p>===Next two paragraphs need checking. --DS ===]]>
For a Windows machine connected with Samba (smbfs), <tt>rw,auto,soft,intr</tt> 
may be good idea. (FIXME)
<p>
Check-out autofs (FIXME)
<p>
For a floppy drive, using <tt>noauto,rw,sync,user,exec</tt> instead prevents file
corruption after accidental disk eject before unmount, but this slows the
write process.
<p>
The external Linux NFS server (goofy) resides behind a firewall (gateway). I
have a very relaxed security policy on my LAN since I am the only user. To
enable NFS access, the NFS server side needs to add <file>/etc/exports</file> as
follows:
<example>
# /etc/exports: the access control list for file systems which may be exported
#               to NFS clients.  See exports(5).
/       (rw,no_root_squash)
</example>
This is needed to activate the NFS server in addition to installing and
activating the NFS server and client.
<p>
For simplicity, I usually create a single partition of 2GB for an experimental
and/or secondary lazy Linux install.  I optionally share swap and
<file>/tmp</file>
partitions for these installs.  A multi-partition scheme is too involved for
these usages.  If only a simple console system is needed, 500MB may be more
than sufficient.
</sect1>

<sect1>DRAM memory guidelines
<p>
Following are rough guidelines for DRAM.
<example>
  4 MB:  Bare minimum for Linux kernel to function.
 16 MB:  Minimum for reasonable console system.
 32 MB:  Minimum for simple X system.
 64 MB:  Minimum for X system with GNOME/KDE.
128 MB:  Comfortable for X system with GNOME/KDE.
256+MB:  Why not if you can afford it?  DRAM is cheap.
</example>
Using the boot option <tt>mem=4m</tt> (or lilo <tt>append="mem=4m"</tt>) will show how the
system would perform with 4MB of memory installed.  A lilo boot parameter 
is needed for a system containing more than 64MB memory with an old BIOS.
</sect1>

<sect1>Swap space
<p>
I use the following guidelines:
<example>
Total swap = min(1x-2x installed RAM, 128 MB - 1 GB)
Each swap  &lt; 128 MB
Keep them on different drives.
Use a central portion of the hard disk when possible.
</example>
Even if you never need it, some swap space (128MB) is desirable so the
system will slow down before it crashes hard with a program which leaks
memory.
</sect1>
</sect>

<sect>Bash configuration
<p>
I modify shell start-up scripts to my taste across the system:
<example>
/etc/bash.bashrc        Replace with private one
/etc/profile            Keep distribution copy ( \w -&gt; \W)
/etc/skel/.bashrc       Replace with private copy
/etc/skel/.profile      Replace with private copy
/etc/skel/.bash_profile Replace with private copy
~/.bashrc               Replace with private copy for all accounts
~/.profile              Replace with private copy for all accounts
~/.bash_profile         Replace with private copy for all accounts
</example>
<url id="examples/" name="See details in my example scripts">. 
I like a transparent system, so I set <prgn>umask</prgn> to 002 or 022.
<p>
<prgn>PATH</prgn> is set by the following configuration files in this order:
<example>
/etc/login.defs  - before the shell sets PATH
/etc/profile     (may call /etc/bash.bashrc)
~/.bash_profile  (may call ~/.bashrc)
</example>
</sect>

<sect>Mouse configuration
<p>
In the case of a PS/2-connector mouse on an ATX motherboard, the signal flow
should be:
<example>
mouse -&gt; /dev/psaux -&gt; gpm -&gt; /dev/gpmdata = /dev/mouse -&gt; X
</example>
This allows the keyboard and mouse to be unplugged and reinitialized by
restarting gpm upon reconnect.  X will stay alive! 
<p>
For a Logitech 3-button PS2 mouse, configuration combinations should be:
<example>
/etc/gpm.conf                 /etc/X11/X86Config or X86Config4
=============================================================
device=/dev/psaux             Section "Pointer"
responsiveness=                 Protocol    "IntelliMouse"
repeat_type=ms3                 Device      "/dev/gpmdata"
type=ps2
append=""
--------------------------------------------------------------
device=/dev/psaux             Section "Pointer"
responsiveness=                 Protocol    "IntelliMouse"
repeat_type=raw                 Device      "/dev/gpmdata"
type=ps2
append=""
</example>
If a normal 2-button PS2 mouse is used, set the X protocol to
<tt>Microsoft</tt> 
and enable <tt>Emulate3Buttons</tt>.
For a scroll mouse, you can adjust X to the real protocol, such as 
<tt>IMPS/2</tt>.
Create a softlink <file>/dev/gpmdata</file> --&gt; <file>/dev/mouse</file> to make some 
configuration utilities happy. 
<url id="examples/" name="See my example scripts for details">.
<p>
For some recent thin Toshiba notebook PCs: Activate <prgn>gpm</prgn> before PCMCIA in 
the System-V init script.  This keeps <prgn>gpm</prgn> from crashing.  Weird but true.
</sect>

<sect>NFS configuration
<p>
Set up NFS by setting <file>/etc/exports</file>.
<example>
# echo "/ *.domainname-for-lan-hosts(rw,no_root_squash,nohide)" &gt;&gt; /etc/exports
</example>
<url id="examples/" name="See my example scripts for details">.
</sect>

<sect>Samba configuration
<p>
Setting up Samba with "share" mode is much easier since this creates WfW-type
share drives.  But it is preferable to set it up with "user" mode.
<p>
Samba can be configured by <prgn>sambaconfig</prgn> or <prgn>vi</prgn>:
<example>
$su -c "sambaconfig"
$su -c "vi /etc/samba/smb.conf"
</example>
<url id="examples/" name="See my example scripts for details">.
<p>
Adding a new user to the smbpasswd file can be done via <prgn>smbpasswd</prgn>:
<example>
$su -c "smbpasswd -a username"
</example>
Make sure to use encrypted passwords for best compatibility.
<p>
Set <tt>os level</tt> according to the following system equivalences (the larger the
number, the higher the priority as server):
<example>
0:      Samba with a loose attitude (will never become a master browser)
1:      Wfw 3.1, Win95, Win98, Win/me?
16:     Win NT WS 3.51
17:     Win NT WS 4.0
32:     Win NT SVR 3.51
33:     Win NT SVR 4.0
255:    Samba with mighty power
</example>
Make sure that users are members of the group owning the directory that gives
shared access and that the directory path has its execution bit set to access.
</sect>

<sect>Printer configuration
<p>
Install LPRng instead of standard <prgn>lpr</prgn>.
<example>
# apt-get install lprng enscript gs
</example>
As of 3/2001 Debian Potato2.2r2, <prgn>printtool</prgn> and
<prgn>lprngtool</prgn> are not in
Potato.  Grab one of these from <file>woody/binary-all/admin</file> and
<tt>dpkg -i</tt> to install.
<p>
If Windoze machines use LPRng through Samba, they can access it without
GS-filtering through a native Windows printer driver or with GS-filtering
through PostScript printer drivers such as Apple LaserWriter.
</sect>

<sect>Other host configuration hints

<sect1>Install a few more packages and do the basics
<p>
See <ref id="dselect">. I usually dump (_): TEX, nvi, ae, lynx, and 
add (+): vim, ssh, lynx-ssl, mc.
<p>
Edit <file>/etc/inittab</file> to have CTRL-DEL-ALT=halt for easy shutdown.
</sect1>

<sect1>Modules
<p>
Done while configuring drivers during installation.  List module names in
<file>/etc/modules</file>.  I also use <prgn>lsmod</prgn> and
<prgn>depmod</prgn> to control them manually.
<p>
Also add a few lines in <file>/etc/modules</file> to handle ip-masquerading (ftp, etc.)
for 2.4 kernels.  <url id="examples/" name="See my example scripts for details">.

</sect1>

<sect1>CD-RW basic setup
<p>
Edit the following files:
<example>
/etc/lilo.conf  (add append="hdc=ide-scsi ignore=hdc", 
                 run lilo to activate)
/dev/cdrom      (softlink # cd /dev; ln -sf scd0 cdrom)
/etc/modules    (add "ide-scsi" and "sg".  If needed "sr" after this.)
</example>
See <ref id="cdrw"> for details.
</sect1>

<sect1 id="apm">Large memory and auto power-off
<p>
Edit <file>/etc/lilo.conf</file> as follows to set boot prompt parameters for large 
memory (for 2.2 kernels) and auto power-off (for apm):
<example>
append="mem=128M apm=on apm=power-off"
</example>
Run <prgn>lilo</prgn> to install these settings.  <tt>apm=power-off</tt> is needed for an
SMP-kernel.  The same can be done directly by entering options at the boot
prompt. See <ref id="bootprompt">.
<p>
If apm is compiled as a module, as in Debian default 2.4 kernels,
run <tt># insmod apm power_off=1</tt> after boot or set
<file>/etc/modules</file> by:
<example>
# echo "apm power_off=1" >>/etc/modules
</example>
<p>
Alternatively, compiling ACPI support achieves the same goal with newer
kernels and seems to be more SMP-friendly (this requires a newer motherboard).
The 2.4 kernel on newer motherboards should detect large memory correctly.
<example>
CONFIG_PM=y
CONFIG_ACPI=y
...
CONFIG_ACPI_BUSMGR=m
CONFIG_ACPI_SYS=m
</example>
and add the following lines in <file>/etc/modules</file> in this order:
<example>
ospm_busmgr
ospm_system
</example>
Or recompile the kernel with all of the kernel options above set to "y".  In
any case, none of the boot prompt parameters are needed with ACPI.
</sect1>

<sect1>Other configuration fles to tweak in <file>/etc</file>
<p>
You may want to add an <file>/etc/cron.deny</file> file, missing from the standard Debian
install (you can copy <file>/etc/at.deny</file>).
</sect1>

</sect>

</chapt>



