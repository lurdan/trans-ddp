<!-- CVS revision of this document "$Revision: 1.12 $"  -->
<!--Line width ruler (ruler uses 78 characters)     34567890123456789012345-->

<chapt id="cvs">CVS

<p>
Check <file>/usr/share/doc/cvs/html-cvsclient</file>, 
<file>/usr/share/doc/cvs/html-info</file>,
<file>/usr/share/doc/cvsbook</file> with lynx or run <tt>info cvs</tt> and
<tt>man cvs</tt> for detailed information.

<sect id="cvs-inst">Installing a CVS server
<p>
The following setup will allow commits to the CVS repository only by a
member of the "src" group, and administration of CVS only by a member of
the "staff" group, thus reducing the chance of shooting oneself.
<example>
# cd /var/lib; umask 002 ; sudo mkdir cvs # [WOODY] FSH
# apt-get install cvs cvs-doc cvsbook
# export CVSROOT=<var>/var/lib/cvs</var>
# cd $CVSROOT
# chown root:src .  # "staff" to restrict more for starting project.
# chmod 3775 .             # If above uses "staff", use 2775
# cvs -d <var>/var/lib/cvs</var> init # safer to specify -d here explicitly!
# cd CVSROOT
# chown -R root:staff .
# chmod 2775 .
# touch val-tags 
# chmod 664 history val-tags
# chown root:src history val-tags
</example>
<p>
</sect>

<sect id="cvs-examples">CVS session examples
<p>
The following will set up shell environments for the CVS repository access.

<sect1>Anonymous CVS (download only)
<p>
Read-only remote access:
<example>
$ export CVSROOT=:pserver:<var>anonymous@cvs.qref.sf.net:/cvsroot/qref</var>
$ cvs login
$ cvs -z3 co <var>qref</var>
</example>
</sect1>

<sect1>Use local CVS server
<p>
Local access from a shell on the same machine:
<example>
$ export CVSROOT=<var>/var/lib/cvs</var>
</example>
</sect1>

<sect1>Use remote CVS pserver
<p>
Remote access without SSH (use RSH protocol capability in 
<prgn>cvs</prgn>):
<example>
$ export CVSROOT=:pserver:<var>account@cvs.foobar.com:/var/lib/cvs</var>
$ cvs login
</example>
This is prone to eavesdropping attack.
</sect1>

<sect1>Use remote CVS through <prgn>ssh</prgn>
<p>
Remote access with SSH:
<example>
$ export CVSROOT=:ext:<var>account@cvs.foobar.com:/var/lib/cvs</var>
</example>
or for Sourceforge:
<example>
$ export CVSROOT=:ext:<var>account@cvs.qref.sf.net:/cvsroot/qref</var>
</example>
You can also use RSA authentication (<ref id="ssh-rsa">), which
eliminates the password prompt.
</sect1>

<sect1>Create a new CVS archive
<p>
For,
<example>
ITEM              VALUE                    MEANING
source tree:      ~/<var>project-x</var>              All source codes
Project name:     <var>project-x</var>                Name for this project
Vendor Tag:       <var>Main-branch</var>              Tag for the entire branch
Release Tag:      <var>Release-original</var>         Tag for a specific release
</example>
Then,
<example>
$ cd ~/<var>project-x</var>                 # dive into source directory
 ... create a source tree ...
$ cvs import -m <var>"Start project-x" project-x Main-branch Release-initial</var>
$ cd ..; rm -R ~/<var>project-x</var>
</example>
</sect1>

<sect1>Work with CVS
<p>
To recall and work in local sources of project-x with CVS archive:
<example>
$ cd                            # move to the work area.
$ cvs co <var>project-x</var>              # get sources from CVS to local
$ cd <var>project-x</var>
 ... make changes to the content ...
$ cvs diff -u                   # similar to diff -u repository/ local/
$ cvs ci -m "<var>Describe change</var>"   # save local sources to CVS
$ vi <var>newfile_added</var>
$ cvs add <var>newfile_added</var>
$ cvs ci -m "<var>Added newfile_added</var>"
$ cvs up                        # merge latest version from CVS
 ... watch out for lines starting with "C <var>filename</var>"
 ... unmodified code is moved to `.#<var>filename</var>.version'.
 ... Search "&lt;&lt;&lt;&lt;&lt;&lt;&lt;" and "&gt;&gt;&gt;&gt;&gt;&gt;&gt;" in <var>filename</var>.
$ cvs tag <var>Release-1</var>             # add release tag
 ... edit further ...
$ cvs tag -d <var>Release-1</var>          # remove release tag
$ cvs ci -m "<var>more comments</var>"
$ cvs tag <var>Release-1</var>             # re-add release tag
$ cd                            # move back to the work area.
$ cvs co -r <var>Release-initial</var> -d <var>old</var> <var>project-x</var>
 ... get original version to <var>old</var> directory
$ cd old
$ cvs tag -b <var>Release-initial-bugfixes</var> # create branch (-b) tag
 ... Now you can work on the old version (Tag=sticky)
$ cvs update
 ... Source tree now has sticky tag "Release-initial-bugfixes"
 ... Work on this branch
$ cvs up # sync with files modified by others on this branch
$ cvs ci -m "<var>check into this branch</var>"
$ cvs update -kk -A
 ... Remove sticky tag and forget contents
 ... Update from main trunk without keyword expansion
$ cvs update -kk -j <var>Release-initial-bugfixes</var>
 ... Merge from <var>Release-initial-bugfixes</var> branch into the main 
 ... trunk without keyword expansion.  Fix conflicts with editor.
$ cvs ci -m "<var>merge Release-initial-bugfixes</var>"
$ cd
$ tar -cvzf <var>old-project-x.tar.gz</var> <var>old</var>     # make archive, -j for bz2
$ cvs release -d <var>old</var>               # remove local source (optional)
</example>
Nice options to remember (use right after <prgn>cvs</prgn>):
<example>
-n      dry run, no effect
-t      display messages showing steps of cvs activity
</example>
</sect1>

<sect1>Export files from CVS
<p>
To get the latest version from CVS, use "tomorrow":
<example>
$ cvs ex -D tomorrow <var>module_name</var>
</example>
</sect1>

<sect1>Administer CVS
<p>
Add alias to a project (local server):
<example>
$ su - admin           # a member of staff
$ export CVSROOT=<var>/var/lib/cvs</var>
$ cvs co CVSROOT/modules
$ cd CVSROOT
$ echo "<var>px</var> -a <var>project-x</var>" &gt;&gt;modules
$ cvs ci -m "<var>Now px is an alias for project-x</var>"
$ cvs release -d .
$ exit                 # control-D to get back from su
$ cvs co -d <var>project</var> <var>px</var> 
 ... check out <var>project-x</var> (alias:<var>px</var>) from CVS to directory project
$ cd project
 ... make changes to the content ...
</example>
</sect1>
</sect>

<sect id="cvs-trouble">Troubleshooting CVS

<sect1>File permissions in repository
<p>
CVS will not overwrite the current repository file but replaces it with
another one.  Thus, <em>write permission to the repository directory</em>
is critical. For every new repository creation run the following to
ensure this condition if needed.
<example>
# cd <var>/var/lib/cvs</var>
# chown -R root:src <var>repository</var>
# chmod -R ug+rwX   <var>repository</var>
# chmod    2775     <var>repository</var>  # if needed, this and subdirectory
</example>
</sect1>

<sect1>Execution bit
<p>
A file's execution bit is retained when checked out.  Whenever you
see execution permission problems in checked-out files, change
permissions of the file in the CVS repository with the following command.
<example>
# chmod ugo-x <var>filename</var>
</example>
</sect1>

</sect>

<sect id="cvs-short">CVS commands
<p>
Here are CVS commands with their shortcuts.
<example>
{add|ad|new} [-k kflag] [-m 'message'] files...
{admin|adm|rcs} [rcs-options] files...
{annotate|ann} [options] [files...]
{checkout|co|get} [options] modules...
{commit|ci|com}   [-lnR]  [-m  'log_message'  |  -f  file] \
        [-r revision] [files...]
{diff|di|dif} [-kl] [rcsdiff_options] [[-r rev1 | -D date1] \
        [-r rev2 |  -D date2]] [files...]
{export|ex|exp} [-flNn] -r rev|-D date [-d dir] [-k kflag] module...
{history|hi|his} [-report] [-flags] [-options args] [files...]
{import|im|imp} [-options] repository vendortag releasetag...
{login|logon|lgn}
{log|lo|rlog} [-l] rlog-options [files...]
{rdiff|patch|pa} [-flags] [-V vn] [-r t|-D d [-r t2|-D d2]] modules...
{release|re|rel} [-d] directories...
{remove|rm|delete} [-lR] [files...]
{rtag|rt|rfreeze} [-falnR]  [-b]  [-d]  [-r  tag  |  -D  date] \
         sym_bolic_tag modules...
{status|st|stat} [-lR] [-v] [files...]
{tag|ta|freeze} [-lR] [-F] [-b] [-d] [-r tag | -D date]  [-f] \
         sym_bolic_tag [files...]
{update|up|upd} [-AdflPpR] [-d] [-r tag|-D date] files...
</example>
</sect>

</chapt>
