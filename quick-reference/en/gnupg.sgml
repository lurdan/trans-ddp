<!-- CVS revision of this document "$Revision: 1.3 $"  -->

<chapt id="gnupg">GnuPG

<![%FIXME[<p>===Proof reading dsew: DONE ===]]>

<p>
See <file>/usr/share/doc/gnupg/README.gz</file> for detailed information or 
browse "man gpg". 

<sect>Install Gnu PG
<p>
Read the GNU privacy handbook (in Woody, gnupg-doc).
<example>
# gpg --gen-key                         # generate a new key
# gpg --gen-revoke my_user_ID           # generate revoke key for my_user_ID
# host -l pgp.net | grep www|less       # figure out pgp keyservers
</example>
As of now, good keyservers are:
<example>
keyserver wwwkeys.eu.pgp.net
keyserver wwwkeys.pgp.net
</example>
Here one must be careful not to create more than 2 sub-keys.  If you do,
keyservers on pgp.net will corrupt your key.  Also only one keyserver can 
be specified in <file>$HOME/.gnupg/options</file>
<p>
Unfortunately, followings do not work anymore:
<example>
keyserver search.keyserver.net
keyserver pgp.ai.mit.edu
</example>

</sect>

<sect>Use GnuPG
<p>
File handling:
<example>
$ gpg  [options]  command  [args]
$ gpg {--armor|-a} {--sign|-s} file     # sign file into a text file.asc
$ gpg --clearsign file                  # clear-sign message
$ gpg --clearsign --not-dash-escaped patchfile  # clear-sign patchfile
$ gpg --verify file                     # verify clear-signed file
$ gpg -o file.sig {-b|--detach-sig} file    # create detatched signature
$ gpg --verify file.sig file            # verify file with file.sig
$ gpg -o crypt_file {--recipient|-r} name {--encrypt|-e} file 
                                   # public-key encryption intended for name
$ gpg -o crypt_file {--symmetric|-c} file # symmetric encryption
$ gpg -o file --decrypt crypt_file      # decryption
</example>
</sect>

<sect>Manage GnuPG
<p>
Key management:
<example>
$ gpg --edit-key user_ID               # "help" for help, interactive
$ gpg -o file --exports                # export all keys to file 
$ gpg --imports file                   # import all keys from file
$ gpg --send-keys user_ID              # send key of user_ID to keyserver
$ gpg --recv-keys user_ID              # recv. key of user_ID from keyserver
$ gpg --list-keys user_ID              # list keys of user_ID
$ gpg --list-sigs user_ID              # list sig. of user_ID
$ gpg --check-sigs user_ID             # check sig. of user_ID
$ gpg --fingerprint user_ID            # check fingerprint of user_ID
$ gpg --list-sigs | grep '^sig' | grep '[User id not found]' \
  | awk '{print $2}' | sort -u | xargs gpg --recv-keys # get unknown keys
  # update keys for all unknown sigs.
</example>
Trust code:
<example>
-         No  ownertrust assigned / not yet calculated.
e         Trust calculation has failed.
q         Not enough information for calculation.
n         Never trust this key.
m         Marginally trusted.
f         Fully trusted.
u         Ultimately trusted.
</example>
</sect>

<sect>Use with Mutt
<p>
Add the following to ~/.muttrc to keep a slow GnuPG from automatically
starting, while allowing it to be used by typing 'S' at the index menu.
<example>
macro index S ":toggle pgp_verify_sig\n"
set pgp_verify_sig=no
</example>
</sect>

</chapt>
