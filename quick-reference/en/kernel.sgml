<!-- CVS revision of this document "$Revision: 1.1 $"  -->

<chapt id="kernel">The Linux kernel under Debian

<![%FIXME[<p>===Proof reading: dsew DONE ===]]>

<p>
Debian has its own method of recompiling the kernel and related modules.

<sect id="kernel-compile">Kernel recompile

<sect1 id="kernel-debian">Debian standard method
<p>
<!-- Osamu: since all distributions contain "kernel-package", maybe specify
the minimum version number? DS -->
Use the new "kernel-package" in unstable (7/2001).  Also, some arguments to
the "tar" command changed between Potato and Woody, so use <tt>-j</tt> instead
of <tt>-I</tt> for .bz2.  Also watch out for bug reports on gcc, binutils, and
modutils.
<p>
Compiling a custom kernel from source under a Debian system requires special
care.  Use the new "--append_to_version" with make-kpkg to build multiple
kernel-images.
<example>
# apt-get install debhelper modutils kernel-source-2.4.12 kernel-package
# vi /etc/kernel-pkg.conf                # input my name and email
$ cd /usr/src                            # build directory
... download from kernel.org or install kernel-*-source.deb packages.
$ tar -xvjf kernel-source-2.4.12.tar.bz2
$ cd kernel-source-2.4.12                # if this is your kernel source
$ rm -rf */pcmcia   # [OPTIONAL] if one wants to use modules from pcmcia-cs
$ cp /boot/config-2.4.12-386 .config     # get current config as default
$ make menuconfig                        # customize as one wishes
$ make-kpkg clean                        # must run (per: man make-kpkg)
$ fakeroot \
make-kpkg --append_to_version -486 --initrd --revision=rev.01 kernel_image
$ cd ../modules/pcmcia
$ fakeroot ./debian/rules
$ cd ../..
# dpkg -i kernel-image*.deb pcmcia-cs*.deb # install
</example>
"make-kpkg kernel_image" actually does "make oldconfig" and "make dep".
Do not use <tt>--initrd</tt> if initrd is not used.
<p>
One can avoid "rm -fr */pcmcia" by selecting "General setup  &mdash;&gt;" 
to "PCMCIA/CardBus support  &mdash;&gt;" in "make menuconfig" and setting 
configuration as "&lt;&nbsp;&gt; PCMCIA/CardBus support". 
</sect1>

<sect1 id="kernel-classic">Classic method
<p>
Get pristine sources from:
<example>
linux:     http://www.kernel.org/
pcmcia-cs: http://pcmcia-cs.sourceforge.net/  
</example>
or use equivalent source in debian and do the following:
<example>
# cd /usr/src
# tar xfvz linux-whatever.tar.gz
# rm -rf linux
# ln -s linux-whatever linux
# tar xfvz pcmcia-cs-whatever.tar.gz
# ln -s pcmcia-cs-whatever pcmcia
# cd linux
# rm -rf */pcmcia   # [OPTIONAL] if one wants to use modules from pcmcia-cs
# make menuconfig
... configure stuff ...
# make dep
# make bzImage
... edits for lilo / grub ...
... move /usr/src/linux/arch/i386/boot/bzImage to boot ...
... /sbin/lilo or whatever you do for grub
# make modules; make modules_install
# cd ../pcmcia
# make config
# make all
# make install
... add needed module names to /etc/modules
# shutdown -r now
... boot to new kernel ...
</example>
Use of gcc, binutils, modutils from Debian unstable may help.
</sect1>
</sect>

<sect id="kernel-modules">Modularized 2.4 kernel
<p>
The new Debian 2.4 kernels are very modularized.  You have to make sure those
modules are present to make the kernel function as you intend. 
<sect1 id="kernel-pcmcia">PCMCIA
<p>
/etc/modules needs to contain the following for PCMCIA to function:
<example>
# ISA PnP driver
isa-pnp
# Low level PCMCIA driver
# yenta_socket # does not seem to be needed :-(
</example>
The rest is taken care of by pcmcia scripts (from the pcmcia-cs package),
depmod and kmod.  I think I needed isa-pnp because my laptop is an old
isa-pcmcia.  Recent laptops with cardbus-pcmcia may not require this. 
<!-- Osamu: is "FIXME" still needed here?-->
<p>
[Voice of the generous Miquel van Smoorenburg &lt;miquels@cistron.nl&gt;:
I simply removed the entire pcmcia
stuff from the laptop here at work, including the cardmgr etc
and just installed a 2.4 kernel with cardbus support, and the
new "hotplug" package from woody.
<p>
As long as you only have 32-bit cards you don't need the pcmcia
package; 2.4 has cardservices built in.
And the standard tulip driver should work fine with your dlink card.

&mdash;Mike.]
</sect1>

<sect1 id="kernel-scsi">SCSI
<p>
<!-- Osamu: maybe test this section? -->
[NOT TESTED] /etc/modules needs to contain the following for SCSI to function:
<example>
# SCSI core
scsi_mod
# SCSI generic driver
sg
# SCSI disk
sd_mod
# All other needed HW modules
...
</example>
Depmod may take care of some of the above modules.
</sect1>

<sect1 id="kernel-net">Network function
<p>
/etc/modules needs to contain the following for extra network function:
<example>
# net/ipv-4
ip_gre
ipip

# net/ipv-4/netfilter
# iptable (in order)
ip_tables
ip_conntrack
ip_conntrack_ftp
iptable_nat
iptable_filter
iptable_mangle
#
ip_nat_ftp
ip_queue
#
ipt_LOG
ipt_MARK
ipt_MASQUERADE
ipt_MIRROR
ipt_REDIRECT
ipt_REJECT
ipt_TCPMSS
ipt_TOS
ipt_limit
ipt_mac
ipt_mark
ipt_multiport
ipt_owner
ipt_state
ipt_tcpmss
ipt_tos
ipt_unclean
#
#ipchains
#ipfwadm
</example>
The preceding may not be optimized. Depmod may take care of some of the above
modules.
</sect1>

<sect1 id="ext3">EXT3 FS (2.4)
<p>
Enabling a journaling filesystem with the EXT3 FS involves the following steps
using a Debian precompiled kernel-image (2.4):
<example>
# cd /etc; mv fstab fstab.old
# sed 's/ext2/ext3,ext2/g' &lt;fstab.old &gt;fstab
# cd /etc/mkinitrd
# echo jbd >>modules
# echo ext3 >>modules
# echo ext2 >>modules
# cd /
# apt-get update; apt-get install kernel-image-2.4.17-686-smp
... install latest kernel and set up boot (lilo is run here)
# tune2fs -j -i 0 /dev/hda1
# tune2fs -j -i 0 /dev/hda2 # ... For all EXT2 FS's converted to EXT3
</example>
Now ready to reboot to get ext3-enabled system.
Having fstab entry as ext3,ext2 ensures safe fall back to ext2 
if kernel does not support ext3.  
(But for root "/", just ext3 seems better for now.  This
prevents fsck to complain during booting. I will update later)
<p>
If one already installed 2.4 kernel previously and do not wish to reboot:
<example>
# cd /etc; mv fstab fstab.old
# sed 's/ext2/ext3,ext2/g' &lt;fstab.old &gt;fstab
# cd /etc/mkinitrd
# echo jbd >>modules
# echo ext3 >>modules
# echo ext2 >>modules
# cd /
# mkinitrd -o /boot/initrd.img-2.4.17-686-smp /lib/modules/2.4.17-686-smp
# lilo
# tune2fs -j -i 0 /dev/hda1
# tune2fs -j -i 0 /dev/hda2 # ... For all EXT2 FS's converted to EXT3
# insmod jbd
# insmod ext3 # modprobe ext3 may take care all
# insmod ext2
# mount -o remount /dev/hda1
# mount -o remount /dev/hda2 # ... For all new EXT3 FS
</example>
Now journaling is enabled. 
<p>
If /etc/mkinitrd/modules was not set when "mkinitrd" was run and would 
like to add some modules during boot time:
<example>
... at initrd prompt to gain shell (5 sec.), type RETURN
# insmod jbd
# insmod ext3 # depmod ext3 may take care of everything
# insmod ext2
# ^D
... continue booting
</example>
</sect1>

</sect>
</chapt>
