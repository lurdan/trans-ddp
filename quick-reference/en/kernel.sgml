<!-- CVS revision of this document "$Revision: 1.28 $"  -->

<chapt id="kernel">The Linux kernel under Debian
<p>
Debian has its own method of recompiling the kernel and related modules.
See also <ref id="kernel-details">.

<sect id="kernel-compile">Kernel recompile
<p>
The use of <prgn>gcc</prgn>, <prgn>binutils</prgn> and
<prgn>modutils</prgn> from Debian <tt>unstable</tt> may help
when compiling the latest Linux kernel.  
See <file>&f-kernel-readme;</file>, especially the bottom of this,
for the official information.
<p>
Since it is a moving target, kernel compile is a difficult subject
which even the most admired developer may get confused:
<taglist compact>
<tag>Manoj Srivastava wrote:
<item><tt>--initrd</tt> requires a Debian-only cramfs patch.
<tag>Herbert Xu wrote:
<item>No it does not, all you have to do to use a filesystem other than
 CRAMFS is to set MKIMAGE in <file>/etc/mkinitrd/mkinitrd.conf</file>.
</taglist>
<p>
Be careful and always rely on the <file>&f-kernel-readme;</file> 
by Manoj and Kent.  Make sure to obtain the latest unstable version 
of <package>kernel-package</package> package if you are to compile 
latest version of kernel.
<p>
<tt>initrd</tt> is not needed for a kernel compiled only for one 
machine.  I use it since I want my kernel to be almost same as 
the one provided by kernel-image.  If you use <tt>initrd</tt>, 
make sure to read <manref name="mkinitrd" section="8"> and
<manref name="mkinitrd.conf" section="5">.  See also 
<url id="&bug-initrd;">.

<sect1 id="kernel-debian">Debian standard method
<p>
Watch out for bug reports on <package>kernel-package</package>,
<prgn>gcc</prgn>, <prgn>binutils</prgn> and <prgn>modutils</prgn>.
Use new version of them as needed.
<p>
Compiling a custom kernel from source under a Debian system requires special
care.  Use the new <tt>--append_to_version</tt> with
<prgn>make-kpkg</prgn> to build multiple kernel-images.
<example>
# apt-get install debhelper modutils kernel-package libncurses5-dev
# apt-get install kernel-source-<var>2.4.18</var>   # use latest version
# apt-get install fakeroot
# vi /etc/kernel-pkg.conf                # input my name and email
$ cd /usr/src                            # build directory
$ tar --bzip2 -xvf kernel-source-<var>2.4.18</var>.tar.bz2
$ cd kernel-source-<var>2.4.18</var>                # if this is your kernel source
$ cp /boot/config-<var>2.4.18-386</var> .config     # get current config as default
$ make menuconfig                        # customize as one wishes
$ make-kpkg clean                        # must run (per: man make-kpkg)
$ fakeroot make-kpkg --append_to_version -<var>486</var> --initrd \
        --revision=<var>rev.01</var> kernel_image \
        modules_image # modules_image is for pcmcia-cs* etc.
$ cd ..
# dpkg -i kernel-image*.deb pcmcia-cs*.deb # install
</example>
<tt>make-kpkg kernel_image</tt> actually does <tt>make oldconfig</tt>
and <tt>make dep</tt>.  Do not use <tt>--initrd</tt> if initrd is not used.
<p>
If one wants to use modules from pcmcia-cs or no pcmcia, one should
select "General setup  &mdash;&gt;" 
to "PCMCIA/CardBus support  &mdash;&gt;" in <tt>make menuconfig</tt> and setting 
the configuration to "&lt;&nbsp;&gt; PCMCIA/CardBus support" (i.e., uncheck
the box).
<p>
On an SMP machine, set CONCURRENCY_LEVEL according to 
<manref name="kernel-pkg.conf" section="5">.
</sect1>

<sect1 id="kernel-classic">Classic method
<p>
Get pristine sources from:
<list compact>
<item>Linux:     <url id="&linuxsrc;">
<item>pcmcia-cs: <url id="&pcmciasrc;">
</list>
or use equivalent source in Debian and do the following:
<example>
# cd /usr/src
# tar xfvz linux-<var>whatever</var>.tar.gz
# rm -rf linux
# ln -s linux-<var>whatever</var> linux
# tar xfvz pcmcia-cs-<var>whatever</var>.tar.gz
# ln -s pcmcia-cs-<var>whatever</var> pcmcia
# cd linux
# make menuconfig
... configure stuff ...
# make dep
# make bzImage
... edits for lilo / grub ...
... move /usr/src/linux/arch/i386/boot/bzImage to boot ...
... /sbin/lilo or whatever you do for grub
# make modules; make modules_install
# cd ../pcmcia
# make config
# make all
# make install
... add needed module names to /etc/modules
# shutdown -r now
... boot to new kernel ...
</example>
</sect1>

<sect1 id="kernel-headers">Kernel headers
<p>
Most "normal" programs don't need kernel headers and in fact may break if you
use them directly; instead they should be compiled against the headers with
which <strong><prgn>glibc</prgn> was built</strong>, which are the versions 
in <file>/usr/include/linux</file> and <file>/usr/include/asm</file>
of the &debian; system.
<p>
So do not put symlinks to the directories in <file>/usr/src/linux</file>
from <file>/usr/include/linux</file> and <file>/usr/include/asm</file>,
as suggested by some outdated documents.
<p>
If you <strong>need</strong> particular kernel headers for some
kernel-specific application programs, alter the <file>Makefile</file>(s) 
so that their include path points to 
<file><var>dir-of-particular-kernel-headers</var>/include/linux</file> and
<file><var>dir-of-particular-kernel-headers</var>/include/asm</file>.
</sect1>

</sect>

<sect id="kernel-modules">The modularized 2.4 kernel
<p>
The new Debian 2.4 kernels provided by kernel-image-2.4.<var>NN</var> 
are very modularized.  You have to make sure those
modules are activated to make the kernel function as you intend. 
<p>
Although I have many examples for <file>/etc/modules</file>
in the following section as a quick fix,  I hear correct way to fix these
module related issues are to provide alias for the device in a file in 
<file>/etc/modutils/</file> since there are enough aliases available 
with current kernels.
<p>
See <file>Documentation/*.txt</file> in the Linux source 
for the precise information.

<sect1 id="kernel-pcmcia">PCMCIA
<p>
<file>/etc/modules</file> needs to contain the following for PCMCIA to function:
<example>
# ISA PnP driver
isa-pnp
# Low level PCMCIA driver
# yenta_socket # does not seem to be needed in my case
</example>
The rest is taken care of by PCMCIA scripts (from the
<package>pcmcia-cs</package> package),
<prgn>depmod</prgn> and <prgn>kmod</prgn>.  I think I needed
<prgn>isa-pnp</prgn> because my laptop is an old
ISA-PCMCIA.  Recent laptops with CardBus/PCMCIA may not require this. 
<p>
Voice of the generous Miquel van Smoorenburg
<email>miquels@cistron.nl</email>:
<p>
"I simply removed the entire pcmcia
stuff from the laptop here at work, including the cardmgr etc
and just installed a 2.4 kernel with cardbus support, and the
new <package>hotplug</package> package from woody.
<p>
As long as you only have 32-bit cards you don't need the pcmcia
package; 2.4 has cardservices built in.
And the standard tulip driver should work fine with your dlink card.
<p>
&mdash;Mike."
</sect1>

<sect1 id="kernel-scsi">SCSI
<p>  <!-- Osamu: maybe test this section? I do not have SCSI :(  
                                     But this is almost sure :) -->
[NOT TESTED] <file>/etc/modules</file> needs to contain the following
for SCSI to function:
<example>
# SCSI core
scsi_mod
# SCSI generic driver
sg
# SCSI disk
sd_mod
# All other needed HW modules
...
</example>
<prgn>depmod</prgn> may take care of some of the above modules.
</sect1>

<sect1 id="kernel-net">Network function
<p>
<file>/etc/modules</file> needs to contain the following for extra network function:
<example>
# net/ipv-4
ip_gre
ipip

# net/ipv-4/netfilter
# iptable (in order)
ip_tables
ip_conntrack
ip_conntrack_ftp
iptable_nat
iptable_filter
iptable_mangle
#
ip_nat_ftp
ip_queue
#
ipt_LOG
ipt_MARK
ipt_MASQUERADE
ipt_MIRROR
ipt_REDIRECT
ipt_REJECT
ipt_TCPMSS
ipt_TOS
ipt_limit
ipt_mac
ipt_mark
ipt_multiport
ipt_owner
ipt_state
ipt_tcpmss
ipt_tos
ipt_unclean
#
#ipchains
#ipfwadm
</example>
The preceding may not be optimized. <prgn>depmod</prgn> may take care of
some of the above modules.
</sect1>

<sect1 id="ext3">EXT3 filesystem ( &gt; 2.4.17)
<p>
Enabling a journaling filesystem with the EXT3 FS involves the following steps
using a Debian precompiled kernel-image ( &gt; 2.4.17) package:
<example>
# cd /etc; mv fstab fstab.old
# sed 's/ext2/ext3,ext2/g' &lt;fstab.old &gt;fstab
# vi /etc/fstab
... set root filesystem type to "auto" instead of "ext3,ext2"
# cd /etc/mkinitrd
# echo jbd &gt;&gt;modules
# echo ext3 &gt;&gt;modules
# echo ext2 &gt;&gt;modules
# cd /
# apt-get update; apt-get install kernel-image-<var>2.4.17-686-smp</var>
... install latest kernel and set up boot (lilo is run here)
# tune2fs -j -i 0 <var>/dev/hda1</var>
# tune2fs -j -i 0 <var>/dev/hda2</var>
... For all EXT2 FS's converted to EXT3
# shutdown -r now
</example>
Now EXT3 journaling is enabled. 
Using <tt>ext3,ext2</tt> as the <prgn>fstab</prgn> "type" entry
ensures safe fallback to EXT2 if the kernel does not support EXT3
for non-root partitions.
<p>
If you have previously installed a 2.4 kernel and do not wish to reinstall,
perform the above steps up to the <prgn>apt-get</prgn> commands, then:
<example>
# mkinitrd -o /boot/initrd.img-<var>2.4.17-686-smp</var> /lib/modules/<var>2.4.17-686-smp</var>
# lilo
# tune2fs -j -i 0 <var>/dev/hda1</var>
# tune2fs -j -i 0 <var>/dev/hda2</var>
... for all EXT2 FS's converted to EXT3
# shutdown -r now
</example>
Now EXT3 journaling is enabled. 
<p>
If <file>/etc/mkinitrd/modules</file> was not set when
<prgn>mkinitrd</prgn> was run and you would like to add some modules at
boot time:
<example>
... at initrd prompt to gain shell (5 sec.), type RETURN
# insmod jbd
# insmod ext3 # modprobe ext3 may take care of everything
# insmod ext2
# ^D
... continue booting
</example>
At the system boot screen (<prgn>dmesg</prgn>), "cramfs: wrong magic"
may appear but this is known to be harmless.  This issue has been resolved 
in Sarge (2002/10).  See <url id="&bug-ext3;"> and the
<url id="&howtoext3;" name="EXT3 File System mini-HOWTO"> or
<file>&f-howtoext3;</file> for more information.
<p>
Some systems are reported to experience severe kernel lock-up 
if EXT3 is enabled but I had no problem (as of 2.4.17). 
</sect1>

<sect1 id="ss-rtl8139">Realtek RTL-8139 support in 2.4
<p>
For whatever reason, the RTL-8139 support module is no longer called rtl8139,
it's now called 8139too.  Just edit your <file>/etc/modules</file> to reflect
this change when upgrading a 2.2 kernel to a 2.4 kernel.
</sect1>

<sect1 id="parport">Parallel port support
<p>
For <package>kernel-image-2.4.*</package>, parallel port support is 
provided as a module.  Enable it by:
<example>
# modprobe lp
# echo lp >> /etc/modules
</example>
See <file>Documentation/parport.txt</file> in the Linux source.

</sect1>

<sect1 id="proc-sys">Too many open files
<p>
Linux kernel may complain "Too many open files".  This id due to the small 
default value (8096) for <tt>file-max</tt>. To fix this problem, run following 
command as root (or put these into an init script in 
<file>/etc/rcS.d/*</file>.
<example>
# echo "65536"  >/proc/sys/fs/file-max  # for 2.2 and 2.4 kernel
# echo "131072" >/proc/sys/fs/inode-max # for 2.2 kernel only
</example>
For more infomation on changing kernel parameters through the 
<file>/proc</file> file system, read the Linux source in 
<file>Documentation/sysctl/*</file>.
<p>
See examples of other kernel parameter manupulations in 
<file>/etc/init.d/networking</file> and <ref id="killecn">.
</sect1>

</sect>
</chapt>
