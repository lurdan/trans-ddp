<!-- CVS revision of this document "$Revision: 1.46 $"  -->

<chapt id="kernel">The Linux kernel under Debian
<p>
Debian has its own method of recompiling the kernel and related modules.
See also <ref id="kernel-details">.

<sect id="kernel-compile">Kernel (re)compile
<p>
The use of <prgn>gcc</prgn>, <prgn>binutils</prgn>, and
<prgn>module-init-tools</prgn> from Debian <tt>unstable</tt> may help
when compiling the latest Linux kernel.  
See <file>&f-kernel-readme;</file>, especially the bottom of this,
for the official information.
<p>
Since it is a moving target, kernel compilation is a difficult subject
that may confuse even the most admired developer:
<taglist compact>
<tag>Manoj Srivastava wrote:
<item><tt>--initrd</tt> requires a Debian-only cramfs patch.
<tag>Herbert Xu wrote:
<item>No it does not, all you have to do to use a filesystem other than
 CRAMFS is to set MKIMAGE in <file>/etc/mkinitrd/mkinitrd.conf</file>.
</taglist>
<p>
Be careful and always rely on the <file>&f-kernel-readme;</file> 
by Manoj and Kent and <url id="&kernel-handbook;">.  
Make sure to obtain the latest unstable version 
of the <package>kernel-package</package> package if you are to compile 
the latest version of the kernel.
<p>
<tt>initrd</tt> is not needed for a kernel compiled only for one 
machine.  I use it since I want my kernel to be almost the same as 
the one provided by the kernel-image packages.  If you use <tt>initrd</tt>, 
make sure to read <manref name="mkinitrd" section="8"> and
<manref name="mkinitrd.conf" section="5">.  

<sect1 id="kernel-headers">Kernel headers
<p>
Most "normal" programs don't need kernel headers and in fact may break if you
use them directly; instead they should be compiled against the headers with
which <strong><prgn>glibc</prgn> was built</strong>, which are the versions 
in <file>/usr/include/linux</file> and <file>/usr/include/asm</file>
of the &debian; system.
<p>
So do not put symlinks to the directories in <file>/usr/src/linux</file>
from <file>/usr/include/linux</file> and <file>/usr/include/asm</file>,
as suggested by some outdated documents.
<p>
If you <strong>need</strong> particular kernel headers for some
kernel-specific application programs, alter the makefile(s) 
so that their include path points to 
<file><var>dir-of-particular-kernel-headers</var>/include/linux</file> and
<file><var>dir-of-particular-kernel-headers</var>/include/asm</file>.
</sect1>

</sect>


<sect id="proc-sys">Tuning the kernel through the proc filesystem
<p>
The behavior of the Linux kernel can be changed on the fly using the
proc filesystem.
<p>
For basic information on changing kernel parameters through the 
<file>/proc</file> filesystem, read <file>Documentation/sysctl/*</file>
in the Linux source.
<p>
See some examples of kernel parameter manipulations in 
<file>/etc/init.d/networking</file> and <ref id="killecn">.
<p>
See <manref name="sysctl.conf" section="5"> for how to set up the boot 
time kernel configuration through <file>/proc</file> filesystem with 
<file>/etc/init.d/procps.sh</file> script usually run from 
<file>/etc/rcS.d/S30procps.sh</file>.

<sect1 id="many-files">Too many open files
<p>
The Linux kernel may complain "Too many open files".  This is due to the small 
default value (8096) for <tt>file-max</tt>. To fix this problem, run the following 
command as root:
<example>
# echo "65536"  &gt; /proc/sys/fs/file-max  # for 2.2 and 2.4 kernel
# echo "131072" &gt; /proc/sys/fs/inode-max # for 2.2 kernel only
</example>
or put the following into <file>/etc/sysctl.conf</file> for the 
permanent change:
<example>
file-max=65536   # for 2.2 and 2.4 kernel
inode-max=131072 # for 2.2 kernel only
</example>

<sect1 id="bdflush">Disk flush intervals
<p>
You can change disk flush intervals through the proc filesystem.  The
following will shorten its interval from the default five seconds to one second.
<example>
# echo "40 0 0 0 100 30000 60 0 0"  &gt; /proc/sys/vm/bdflush
</example>
This may negatively impact file I/O performance a little bit.  But this
secures file contents except for the last one second which is shorter than
the default five seconds.  This is true even for journaling filesystems.
</sect1>

<sect1 id="over-commit">Sluggish old low memory machines
<p>
For some old low memory systems, it may still be useful to enable 
over-commit of memory through the proc filesystem:
<example>
# echo 1 &gt; /proc/sys/vm/overcommit_memory
</example> 
</sect1>

</sect>

<sect id="udev">The 2.6 kernel with udev
<p>
The udev is a dynamic replacement for <file>/dev/</file>.
Device names can be chosen to be very short ones.
The devfs used in the 2.4 kernel is now obsolete.
<p>
Installing the new Debian 2.6 kernel provided by
<package>kernel-image-2.6.<var>NN</var></package> with
<package>udev</package> package will enable this.
</sect>

</chapt>
