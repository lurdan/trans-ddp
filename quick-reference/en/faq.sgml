<!-- CVS revision of this document "$Revision: 1.1 $"  -->
<chapt id="faq">FAQ

<![%FIXME[<p>===Proof reading: NONE ===]]>

<p>
I have extracteed from old Debian FAQ and retitled with shorter text.
I also added few.

<sect id="rant">Rant about Debian
<sect1 id="rant-slow">Why does Debian take so long to release?
<p>
Ben Collins &lt;bcollins@debian.org&gt; on 15 Feb 2002:
<p>
Fixing the (release critical) bugs is the main thing that will get a release
out the door. Our Release Manager basically gave us free reign over
fixing RC bugs (well, within logic limits outlined in the same document,
posted to debian-devel-announce). Nothing stops non-developers from
making patches, going through and testing bugs to duplicate them.
<p>
No sort of process, policies or mechanisms is going to make fixing bugs
go any faster, other than people actually doing it.

<sect1 id="rant-complicated">Why does Debian so complicated to configure?
<p>
Debian credo "All the power to the sysadmins!" requires us to be compitent 
ones.  This ensures no stupid overwrite by the system upgrade.

<sect id="arches">Available archtectures
<p>
<p>&debian; includes complete source-code for all of the included programs,
so it should work on all systems which are supported by the Linux kernel;
see the <url name="Linux FAQ" id="http://www.linuxdoc.org/FAQ/Linux-FAQ/">
for details.

<!-- XXX update for new distros -->
<p>The current &debian; release, &release;, contains a complete, binary
distribution for the following architectures:

<p><em/i386/: this covers PCs based on Intel and compatible processors,
including Intel's 386, 486, Pentium, Pentium Pro, Pentium II (both Klamath
and Celeron), and Pentium III, and most compatible processors by AMD, Cyrix
and others.

<p><em/m68k/: this covers Amigas and ATARIs having a Motorola 680x0
processor for x>=2; with MMU.

<p><em/alpha/: Compaq/Digital's Alpha systems.

<p><em/sparc/: this covers Sun's SPARC and most UltraSPARC systems.

<p><em/powerpc/: this covers some IBM/Motorola PowerPC machines, including
CHRP, PowerMac and PReP machines.

<p><em/arm/: ARM and StrongARM machines.

<p>The development of binary distributions of Debian for Sparc64
(UltraSPARC native) and MIPS architectures is currently underway.

<p>For further information on booting, partitioning your drive, enabling
PCMCIA (PC Card) devices and similar issues please follow the instructions
given in the Installation Manual, which is available from our WWW site at
<url id="http://www.debian.org/releases/stable/i386/install">.

<sect id="faq-compatibility">Compatibility

<sect1 id="otherdistribs">How compatible is Debian with other distributions
                         of Linux?
	
<p>Debian developers communicate with other Linux distribution creators
in an effort to maintain binary compatibility across Linux distributions.
Most commercial Linux products run as well under Debian as they do on the
system upon which they were built.

<p>&debian; adheres to the <url name="Linux Filesystem Hierarchy
Standard" id="http://www.pathname.com/fhs/">. However, there is room for
interpretation in some of the rules within this standard, so there may be
slight differences between a Debian system and other Linux systems.

<sect1 id="otherunices">How source code compatible is Debian with other
  Unix systems?
	
<p>For most applications Linux source code is compatible with other Unix
systems. It supports almost everything that is available in System V Unix
systems and the free and commercial BSD-derived systems. However in the Unix
business such claim has nearly no value because there is no way to prove it.
In the software development area complete compatibility is required instead
of compatibility in "about most" cases. So years ago the need for standards
arose, and nowadays POSIX.1 (IEEE Standard 1003.1-1990) is one of the major
standards for source code compatibility in Unix-like operating systems.

<p>Linux is intended to adhere to POSIX.1, but the POSIX standards cost real
money and the POSIX.1 (and FIPS 151-2) certification is quite expensive;
this made it more difficult for the Linux developers to work on complete
POSIX conformance. The certification costs make it unlikely that Debian will
get an official conformance certification even if it completely passed the
validation suite. (The validation suite is now freely available, so it is
expected that more people will work on POSIX.1 issues.)

<!-- <p><strong>(The authors would very much like to give you a pointer to
an on-line document that described that standard, but the IEEE is another
one of those organizations that gets away with declaring standards and then
requiring that people PAY to find out what they are.  This makes about as
much sense as having to find out the significance of various colored lights
on traffic signals.)</strong> -->

<p>Unifix GmbH (Braunschweig, Germany) developed a Linux system that has
been certified to conform to FIPS 151-2 (a superset of POSIX.1). This
technology was available in Unifix' own distribution called Unifix
Linux 2.0 and in Lasermoon's Linux-FT.
<!-- I had to comment this out for obvious reasons... SVD
 <url name="Linux-FT" url="http://www.lasermoon.co.uk/linux-ft/linux-ft.html">.
Currently Unifix merges its patches into the Linux kernel, gcc and other
tools; so it is expected that their fixes towards POSIX.1 conformance will
be available in Debian (and other distributions).
-->

<!-- TODO: explain better how to unpack .debs onto non-Debian systems -->
<sect1 id="otherpackages">Can I use Debian packages (".deb" files) on my
  RedHat/Slackware/... Linux system? Can I use RedHat packages (".rpm"
  files) on my &debian; system?

<p>Different Linux distributions use different package formats and different
package management programs.

<taglist>
<tag><strong/You probably can:/
  <item>A program to unpack a Debian package onto a Linux host that is been
  built from a `foreign' distribution is available, and will generally work,
  in the sense that files will be unpacked.  The converse is probably also
  true, that is, a program to unpack a RedHat or Slackware package on a host
  that is based on &debian; will probably succeed in unpacking the package
  and placing most files in their intended directories.  This is largely a
  consequence of the existence (and broad adherence to) the Linux Filesystem
  Hierarchy Standard.

<tag><strong/You probably do not want to:/
  <item>Most package managers write administrative files when they
  are used to unpack an archive.  These administrative files are generally
  not standardized.  Therefore, the effect of unpacking a Debian package
  on a `foreign' host will have unpredictable (certainly not useful) effects
  on the package manager on that system.  Likewise, utilities from other
  distributions might succeed in unpacking their archives on Debian systems,
  but will probably cause the Debian package management system to fail when the
  time comes to upgrade or remove some packages, or even simply to report
  exactly what packages are present on a system.

<tag><strong/A better way:/
  <item>The Linux File System Standard (and therefore &debian;) requires that
  subdirectories under <tt>/usr/local/</tt> be entirely under the user's
  discretion.  Therefore, users can unpack `foreign' packages into this
  directory, and then manage their configuration, upgrade and removal
  individually.
</taglist>

<!-- It would be useful to document all the ways in which Debian and RedHat
systems differ.  I believe such a document would do a lot to dispell
fears of using a Unix system. SGK -->

<sect1 id="no-devs">"ld: cannot find -lfoo" messages 
<p>
Why do I get "ld: cannot find -lfoo" messages when
  compiling programs? Why aren't there any libfoo.so files in Debian library
  packages?

<p>Debian Policy requires that such symbolic links (to libfoo.so.x.y.z or
similar) are placed in separate, development packages. Those packages are
usually named libfoo-dev or libfooX-dev (presuming the library package is
named libfooX, and X is a whole number).

<sect1 id="java">(How) Does Debian support Java?

<p>Since the official Java Development kit from Sun Microsystems is
non-free software, it cannot be included in Debian proper. However, both
the JDK and several <em>free</em> implementations of Java technology are
available as Debian packages. You can write, debug and run Java programs
using Debian.

<p>Running a Java applet requires a web browser with the capability to
recognize and execute them. Several web browsers available in Debian, such
as Mozilla or Konqueror, support Java plug-ins that enable running Java
applets within them. Netscape Navigator, while non-free, is also available
as a Debian package and it can run Java applets.

<p>Please refer to the <url name="Debian Java FAQ"
id="http://www.debian.org/doc/manuals/debian-java-faq/"> for more
information.

<sect1 id="isitdebian">How can I check that I am using a Debian system, and
  what version is it?

<p>In order to make sure that your system has been installed from the
real Debian base disks check for the existence of
<tt>/etc/debian_version</tt> file, which contains a single one-line entry
giving the version number of the release, as defined by the package
<tt>base-files</tt>.

<p>The existence of the program <tt>dpkg</tt> shows that you should be able
to install Debian packages on your system, but as the program has been
ported to many other operating systems and architectures, this is no longer
a reliable method of determining is a system &debian;.

<p>Users should be aware, however, that the Debian system consists of many
parts, each of which can be updated (almost) independently. Each Debian
"release" contains well defined and unchanging contents.  Updates are
separately available.  For a one-line description of the installation status
of package <tt>foo</tt>, use the command <tt>dpkg --list foo</tt>.
To view versions of all installed packages, run:
  <example>dpkg -l</example>
For a more verbose description, use:
  <example>dpkg --status foo</example>

<sect1 id="nonenglish">How does Debian support non-English languages?

<p><list>
  <item>&debian; is distributed with keymaps for nearly two dozen
    keyboards, and with utilities (in the <tt>kbd</tt> package) to install,
    view, and modify the tables.
    <p>The installation prompts the user to specify the keyboard he will use.
  <item>Vast majority of the software we packaged supports entering
    non-US-ASCII characters used in other Latin languages (e.g. ISO-8859-1
    or ISO-8859-2), and a number of programs support multi-byte languages
    such as Japanese or Chinese.
  <item>Currently, support for German-, Spanish-, Finnish-, French-,
    Hungarian-, Italian-, Japanese-, Korean- and Polish-language
    manual pages is provided through the <tt>manpages-LANG</tt> packages
    (where LANG is the two-letter ISO country code). To access an NLS manual
    page, the user must set the shell LC_MESSAGES variable to the appropriate
    string.
    <p>For example, in the case of the Italian-language manual pages,
    LC_MESSAGES needs to be set to 'italian'.  The <prgn/man/ program will
    then search for Italian manual pages under <tt>/usr/share/man/it/</tt>.
</list>

<sect1 id="usexports">What about the US export regulation limitations?

<p>US laws place restrictions on the export of defense articles, which
includes some types of cryptographic software. PGP and ssh, among others,
fall into this category.

<p>To prevent anyone from taking unnecessary legal risks, certain Debian
GNU/Linux packages are only available from a non-US site
<url id="ftp://non-US.debian.org/debian-non-US/">. There are numerous
mirror sites all of which are also outside of the US, see
<url id="ftp://non-US.debian.org/debian-non-US/README.non-US"> for a full
list.

<sect1 id="pine">Where is pine?

<p>Due to its restrictive license, it's in the non-free area. Moreover,
since license does not even allow modified binaries to be distributed,
you have to compile it yourself from the source and the Debian patches.
The source package name is <package/pine/.

<p>Note that there are many replacements for both pine and pico, such as
<package/mutt/ and <package/nano/, that are located in the main section.

<sect1 id="a.out">How to run an old "a.out" programs?

<p>Do you actually still have such a program? :-)

<p>To <em>execute</em> a program whose binary is in <tt>a.out</tt>
(i.e., QMAGIC or ZMAGIC) format,

<list>
  <item>Make sure your kernel has <tt>a.out</tt> support built into it,
  either directly (CONFIG_BINFMT_AOUT=y) or as a module (CONFIG_BINFMT_AOUT=m).
  (Debian's kernel-image package contains the module <tt>binfmt_aout</tt>.)

  <p>If your kernel supports <tt>a.out</tt> binaries by a module, then be
  sure that the <tt>binfmt_aout</tt> module is loaded.  You can do this
  at boot time by entering the line <tt>binfmt_aout</tt> into the file
  <tt>/etc/modules</tt>.  You can do it from the command line by
  executing the command <tt>insmod DIRNAME/binfmt_aout.o</tt> where
  <tt>DIRNAME</tt> is the name of the directory where the modules that
  have been built for the version of the kernel now running are stored.
  On a system with the 2.2.17 version of the kernel,
  <tt>DIRNAME</tt> is likely to be <tt>/lib/modules/2.2.17/fs/</tt>.

  <item>install the package <package/libc4/, found in one of the releases
  prior to release 2.0 (because at that time we removed the package).
  You might want to look for an old Debian CD-ROM (Debian 1.3.1 still had
  this package), or see <url id="ftp://archive.debian.org/debian-archive/">
  on the Internet.

  <item>If the program you want to execute is an <tt>a.out</tt> X client,
  then install the <package/xcompat/ package (see above for availability).
</list>

<p>If you have a commercial application in <tt>a.out</tt> format, now would
be a good time to ask them to send you an <tt>ELF</tt> upgrade.

<sect1 id="libc5">How to run an old libc5 programs?

<p>Yes. Just install the required <package/libc5/ libraries, from the
<tt>oldlibs</tt> section (containing old packages included for compatibility
with older applications).

<sect1 id="libc5-compile">How to compile libc5 programs?

<p>Yes.  Install <package/libc5-altdev/ and <package/altgcc/ packages (from
the <tt>oldlibs</tt> section). You can find the appropriate libc5-compiled
<prgn/gcc/ and <prgn/g++/ in directory <tt>/usr/i486-linuxlibc1/bin</tt>.
Put them in your $PATH variable to get <prgn/make/ and other programs to
execute these first.

<p>If you need to compile libc5 X clients, install <package/xlib6/ and
<package/xlib6-altdev/ packages.

<p>Be aware that libc5 environment isn't fully supported by our other
packages anymore.

<sect1 id="non-debian-programs">How to install a non-Debian program?
	
<p>Files under the directory <tt>/usr/local/</tt> are not under the control
of the Debian package management system.  Therefore, it is good practice
to place the source code for your program in /usr/local/src/.  For example,
you might extract the files for a package named "foo.tar" into the directory
<tt>/usr/local/src/foo</tt>.  After you compile them, place the binaries
in <tt>/usr/local/bin/</tt>, the libraries in <tt>/usr/local/lib/</tt>,
and the configuration files in <tt>/usr/local/etc/</tt>.

<p>If your programs and/or files really must be placed in some other
directory, you could still store them in <tt>/usr/local/</tt>,
and build the appropriate symbolic links from the required location
to its location in <tt>/usr/local/</tt>, e.g., you could make the link
<example>ln -s /usr/local/bin/foo /usr/bin/foo</example>

<p>In any case, if you obtain a package whose copyright allows
redistribution, you should consider making a Debian package of it, and
uploading it for the Debian system.  Guidelines for becoming a package
developer are included in the Debian Policy manual.

<sect1 id="xlib6">"Can't find libX11.so.6" errors

<p>This error message could mean that the program is linked against the
<tt>libc5</tt> version of the X11 libraries. In this case you need to
install the <package/xlib6/ package, from the <tt>oldlibs</tt> section.

<p>You may get similar error messages referring to libXpm.so.4 file, in
which case you need to install the libc5 version of the XPM library,
from the <package/xpm4.7/ package, also in the <tt>oldlibs</tt> section.

<sect1 id="termcap">How to compile programs that require libtermcap?
	
<p>Debian uses the <tt>terminfo</tt> database and the <tt>ncurses</tt>
library of terminal interface routes, rather than the <tt>termcap</tt>
database and the <tt>termcap</tt> library.  Users who are compiling programs
that require some knowledge of the terminal interface should replace
references to <tt>libtermcap</tt> with references to <tt>libncurses</tt>.

<p>To support binaries that have already been linked with the <tt>termcap</tt>
library, and for which you do not have the source, Debian provides a package
called <package/termcap-compat/.  This provides both <tt>libtermcap.so.2</tt>
and <tt>/etc/termcap</tt>.  Install this package if the program fails to run
with the error message "can't load library 'libtermcap.so.2'", or complains
about a missing <tt>/etc/termcap</tt> file.

<sect1 id="accelx">How to install AccelX?
	
<p>AccelX uses the <tt>termcap</tt> library for installation. See
<ref id="termcap"> above.

<sect1 id="motifnls">Why do my old XFree 2.1 Motif applications crash?

<p>You need to install the <package/motifnls/ package, which provides the
XFree-2.1 configuration files needed to allow Motif applications compiled
under XFree-2.1 to run under XFree-3.1.

<p>Without these files, some Motif applications compiled on other machines
(such as Netscape) may crash when attempting to copy or paste from or to
a text field, and may also exhibit other problems.
</sect1>
</sect>


<sect id="faq-customizing">Customizing applications
<p>

<sect1 id="papersize">How can I ensure that all programs use the same
  paper size?

<p>Install the <package/libpaperg/ package, and it will ask you for a
system-wide default paper size. This setting will be kept in the file
<tt>/etc/papersize</tt>.

<p>Users can override the paper size setting using the <tt>PAPERSIZE</tt>
environment variable. For details, see the manual page
<manref name="papersize" section="5">.

<sect1 id="hardwareaccess">How can I provide access to hardware peripherals,
  without compromising security?

<p>Many device files in the <tt>/dev</tt> directory belong to some
predefined groups. For example, <tt>/dev/fd0</tt> belongs to the
<tt>floppy</tt> group, and <tt>/dev/dsp</tt> belongs to the
<tt>audio</tt> group.

<p>If you want a certain user to have access to one of these devices, just
add the user to the group the device belongs to, i.e. do:
  <example>adduser user group</example>
This way you won't have to chmod the device file.

<sect1 id="consolefont">How do I load a console font on startup the Debian way?

<p>The <package/kbd/ and <package/console-tools/ packages support this,
edit <tt>/etc/kbd/config</tt> or <tt>/etc/console-tools/config</tt> files.

<sect1 id="appdefaults">How can I configure an X11 program's application
  defaults?

<p>Debian's X programs will install their application resource data in the
<tt>/etc/X11/app-defaults/</tt> directory. If you want to customize X
applications globally, put your customizations in those files. They are
marked as configuration files, so their contents will be preserved during
upgrades.

<sect1 id="updaterunning">Howto uUpdate running system
<p>
Debian's fame for its technical superiority comes from its claim to be 
able to update a running program.

<p>The kernel (filesystem) in &debian; systems supports replacing files even
while they're being used.

<p>We also provide a program called <prgn/start-stop-daemon/ which is used
to start daemons at boot time or to stop daemons when the kernel runlevel is
changed (e.g., from multi-user to single-user or to halt). The same program
is used by installation scripts when a new package containing a daemon is
installed, to stop running daemons, and restart them as necessary.

<sect1 id="whatpackages">How can I tell what packages are already installed
  on a Debian system?

<p>To learn the status of all the packages installed on a Debian system,
execute the command
  <example>dpkg --list</example>

This prints out a one-line summary for each package, giving a 2-letter
status symbol (explained in the header), the package name, the version
which is <em>installed</em>, and a brief description.

<p>To learn the status of packages whose names match the string any
pattern beginning with "foo" by executing the command:
  <example>dpkg --list 'foo*'</example>

<p>To get a more verbose report for a particular package, execute the
command:
  <example>dpkg --status packagename</example>

<sect1 id="filesearch">How can I find out what package produced a particular
  file?

<p>To identify the package that produced the file named <tt>foo</tt> execute
either:

<list>
  <item><tt>dpkg --search filename</tt>
    <p>This searches for <tt>filename</tt> in installed packages.
    (This is (currently) equivalent to searching all of the files having the
    file extension of <tt>.list</tt> in the directory
    <tt>/var/lib/dpkg/info/</tt>, and adjusting the output to print the names
    of all the packages containing it, and diversions.)

  <item><tt>zgrep foo Contents-ARCH.gz</tt>
    <p>This searches for files which contain the substring <tt>foo</tt>
    in their full path names.  The files <tt>Contents-ARCH.gz</tt> (where ARCH
    represents the wanted architecture) reside in the major package directories
    (main, non-free, contrib) at a Debian FTP site.  A <tt>Contents</tt> file
    refers only to the packages in the subdirectory tree where it resides.
    Therefore, a user might have to search more than one <tt>Contents</tt>
    files to find the package containing the file <tt>foo</tt>.

    <p>This method has the advantage over <tt>dpkg --search</tt> in that it
    will find files in packages that are not currently installed on your
    system.
</list>
</sect1>
</sect>

<sect id="uptodate">Keeping Your Debian System Up To Date

<p>One of Debian goals is to provide a consistent upgrade path and a secure
upgrade process, and we always do our best to make the new release smoothly
upgradable from the previous ones. In case there's some important note to
add to the upgrade process, the packages will alert the user, and often
provide a solution to a possible problem.

<p>You should also read the Release Notes, document that describes the
details of specific upgrades, shipped on all Debian CDs, and available on
the WWW at <url id="http://www.debian.org/releases/stable/i386/release-notes/">.

<sect1 id="libc5to6upgrade">How can I upgrade my Debian 1.3.1 (or earlier)
  distribution, based on libc5, to 2.0 (or later), based on libc6?

<p>There are several ways to upgrade:
<list>
  <item>Using a simple shell script called <tt>autoup.sh</tt> which upgrades
    the most important packages. After <tt>autoup.sh</tt> has done his job,
    you may use dselect to install the remaining packages <em>en masse</em>.
    This is probably the recommended method, but not the only one.
    <p>Currently, the latest release of <tt>autoup.sh</tt> may be found on the
    following locations:
    <list>
      <item><url id="http://www.debian.org/releases/2.0/autoup/">
      <item><url id="http://www.taz.net.au/autoup/">
      <item><url id="http://debian.vicnet.net.au/autoup/">
    </list>
  <item>Following closely the <url name="Debian libc5 to libc6 Mini-HOWTO"
    id="http://debian.vicnet.net.au/autoup/HOWTO/libc5-libc6-Mini-HOWTO.html"> and
    upgrade the most important packages by hand. <tt>autoup.sh</tt> is based
    on this Mini-HOWTO, so this method should work more or less like using
    <tt>autoup.sh</tt>.
  <item>Using a libc5-based <tt>apt</tt>. APT stands for A Package Tool, and
    it might replace dselect some day. Currently, it works just as a
    command-line interface, or as a dselect access method. You will find a
    libc5 version in the <tt>dists/slink/main/upgrade-older-i386</tt>
    directory at the Debian archives.
  <item>Using just dselect, without upgrading any package by hand
    first. It is highly recommended that you do NOT use this method
    if you can avoid it, because dselect alone currently does not install
    packages in the optimal order. APT works much better and it is safer.
    <!-- This should probably work if dpkg's max-error-before-stop internal
    variable is increased. Question: Will it be increased some day? -->
</list>

<!--
This paragraph is obsolete, but I will keep it here as a reminder in
case libc6-based dpkg happen to be some better than the one in Debian
1.3.1: Note that the version of <tt>dpkg</tt> in this directory has the
a.out binary format.  The versions of <tt>dpkg</tt> in the development and
stable trees have the ELF format.
-->

<sect1 id="upgradesingle">Must I go into single user mode in order to
  upgrade a package?

<p>No.  Packages can be upgraded in place, even in running systems.
Debian has a <tt>start-stop-daemon</tt> program that is invoked to stop,
then restart running process if necessary during a package upgrade.

<sect1 id="savedebs">Do I have to keep all those .deb archive files on
  my disk?

<p>No.  If you have downloaded the files to your disk (which is not
absolutely necessary, see above for the description of dpkg-ftp),
then after you have installed the packages, you can remove them from
your system.

<sect1 id="keepingalog">How can I keep a log of the packages I added to
  the system?

<p><prgn/dpkg/ keeps a record of the packages that have been unpacked,
configured, removed, and/or purged, but does not (currently) keep a log
of terminal activity that occured while a package was being so manipulated.

<p>The simplest way to work around this is to run your
<prgn>dpkg</prgn>/<prgn>dselect</prgn>/<prgn>apt-get</prgn>/whatever
sessions within the <manref name="script" section="1"> program.

</sect1>
</sect>

<sect id="debian-kernel">Debian and the kernel

<sect1 id="non-debian-kernel">Can I install and compile a kernel without
  some Debian-specific tweaking?

<p>Yes.  But you have to understand the Debian policy with respect to headers.

<p>The Debian C libraries are built with the most recent <em>stable</em>
releases of the <strong>kernel</strong> headers.

<p>For example, the Debian-1.2 release used version 5.4.13 of the headers.
This practice contrasts with the Linux kernel source packages distributed
at all Linux FTP archive sites, which uses even more recent versions of
the headers.  The kernel headers distributed with the kernel source are
located in <tt>/usr/include/linux/include/</tt>.

<p>If you need to compile a program with kernel headers that are newer
than those provided by <package/libc6-dev/, then you must add
<tt>-I/usr/src/linux/include/</tt> to your command line when compiling.
This came up at one point, for example, with the packaging of the
automounter daemon (<package/amd/).  When new kernels changed some
internals dealing with NFS, <tt>amd</tt> needed to know about them.
This required the inclusion of the latest kernel headers.

<sect1 id="customkernel">What tools does Debian provide to build custom
  kernels?

<p>Users who wish to (or must) build a custom kernel are encouraged to
download the package <package/kernel-package/.  This package contains
the script to build the kernel package, and provides the capability to
create a Debian kernel-image package just by running the command
  <example>make-kpkg kernel_image</example>
in the top-level kernel source directory.
Help is available by executing the command
  <example>make-kpkg --help</example>
and through the manual page <manref name="make-kpkg" section="8">.

<p>Users must separately download the source code for the most recent
kernel (or the kernel of their choice) from their favorite Linux archive
site, unless a kernel-source-version package is available (where "version"
stands for the kernel version).

<p>Detailed instructions for using the <package/kernel-package/ package
are given in the file <tt>/usr/doc/kernel-package/README</tt>. Briefly,
one should:

<list>
  <item>Unpack the kernel sources, and <tt>cd</tt> to the newly created
    directory.
  <item>Modify the kernel configuration using one of these commands:
    <list>
      <item><tt>make config</tt>  (for a tty one-line-at-a-time-interface).
      <item><tt>make menuconfig</tt>  (for an ncurses-based menu driven interface).
        Note that to use this option, the <package/libncurses5-dev/ package
        must be installed.
      <item><tt>make xconfig</tt>  (for an X11 interface).
        Using this option requires that relevant X and Tcl/Tk packages be
        installed.
    </list>
    Any of the above steps generates a new <tt>.config</tt> in the top-level
    kernel source directory.
  <item>Execute the command: <tt>make-kpkg -rev Custom.N kernel_image</tt>,
    where N is a revision number assigned by the user.
    The new Debian archive thus formed would have revision Custom.1, e.g.,
    <tt>kernel-image-2.2.14_Custom.1_i386.deb</tt>
    for the Linux kernel 2.2.14.
  <item>Install the package created.
    <list>
    <item><tt>Run dpkg --install /usr/src/kernel-image-VVV_Custom.N.deb</tt>
      to install the kernel itself.  The installation script will:
      <list>
        <item>run the boot loader, LILO (if it is installed),
        <item>install the custom kernel in /boot/vmlinuz_VVV-Custom.N, and
          set up appropriate symbolic links to the most recent kernel version.
        <item>prompt the user to make a boot floppy.  This boot floppy will
          contain the raw kernel only.  See <ref id="custombootdisk">.
      </list>
    <item>To employ secondary boot loaders such as <package/grub/ or
      <tt/loadlin/, copy this image to other locations (e.g., to /boot/grub
      or to an <tt>MS-DOS</tt> partition).
  </list>
</list>

<!-- TODO: check out a new source of details, this README isn't too useful,
I'm told (joy) -->

<sect1 id="custombootdisk">How can I make a custom boot floppy?

<p>This task is greatly aided by the Debian package <package/boot-floppies/,
normally found in the <tt>admin</tt> section of the Debian FTP archive.
Shell scripts in this package produce boot floppies in the <tt>SYSLINUX</tt>
format.  These are <tt>MS-DOS</tt> formatted floppies whose master boot
records have been altered so that they boot Linux directly (or whatever
other operating system has been defined in the syslinux.cfg file on the
floppy). Other scripts in this package produce emergency root disks and
can even reproduce the base disks.

<p>You will find more information about this in the
<tt>/usr/doc/boot-floppies/README</tt> file after installing the
<package/boot-floppies/ package.

<sect1 id="modules">What special provisions does Debian provide to deal with
  modules?

<p>Debian's <package/modconf/ package provides a shell script
(<tt>/usr/sbin/modconf</tt>) which can be used to customize the
configuration of modules.  This script presents a menu-based interface,
prompting the user for particulars on the loadable device drivers
in his system.  The responses are used to customize the file
<tt>/etc/modules.conf</tt> (which lists aliases, and other arguments that
must be used in conjunction with various modules) through files in
<tt>/etc/modutils/</tt>, and <tt>/etc/modules</tt> (which lists the
modules that must be loaded at boot time).

<p>Like the (new) Configure.help files that are now available to support
the construction of custom kernels, the modconf package comes with a
series of help files (in <tt>/usr/lib/modules_help/</tt>) which provide
detailed information on appropriate arguments for each of the modules.

<sect1 id="removeoldkernel">Can I safely de-install an old kernel package,
  and if so, how?

<p>Yes.  The <tt>kernel-image-NNN.prerm</tt> script checks to see whether
the kernel you are currently running is the same as the kernel you are trying
to de-install.  Therefore you can remove unwanted kernel image packages using
this command:

<example>dpkg --purge --force-remove-essential kernel-image-NNN</example>

(replace "NNN" with your kernel version and revision number, of course)

<sect id="faq-package">Package management
<p>
<sect1 id="interconffiles">How does the package management system deal with
  packages that contain configuration files for other packages?

<p>Some users wish to create, for example, a new server by installing a
group of Debian packages and a locally generated package consisting of
configuration files.  This is not generally a good idea, because <prgn/dpkg/
will not know about those configuration files if they are in a different
package, and may write conflicting configurations when one of the
initial "group" of packages is upgraded.

<p>Instead, create a local package that modifies the configuration files
of the "group" of Debian packages of interest.  Then <prgn/dpkg/ and the
rest of the package management system will see that the files have been
modified by the local "sysadmin" and will not try to overwrite them when
those packages are upgraded.

<!-- check against dpkg-divert description -->
<sect1 id="divert">How do I override a file installed by a package, so that
  a different version can be used instead?

<p>Suppose a sysadmin or local user wishes to use a program "login-local"
rather than the program "login" provided by the Debian <package/login/
package.

<p>Do <strong/not/:
<list>
  <item>Overwrite <tt>/bin/login</tt> with <tt>login-local</tt>.
</list>
The package management system will not know about this change, and will simply
overwrite your custom <tt>/bin/login</tt> whenever <tt>login</tt> (or any
package that provides <tt>/bin/login</tt>) is installed or updated.

<!-- XXX dpkg-divert: is this correct ? -->
<p>Rather, do
<list>
  <item>Execute:
    <example>dpkg-divert --divert /bin/login.debian /bin/login</example>
  in order to cause all future installations of the Debian <package/login/
  package to write the file <tt>/bin/login</tt> to <tt>/bin/login.debian</tt>
  instead.
  <item>Then execute:
    <example>cp login-local /bin/login</example>
  to move your own locally-built program into place.
</list>

<p>Details are given in the manual page <manref name="dpkg-divert" section="8">.

<sect1 id="localpackages">How can I have my locally-built package included in
  the list of available packages that the package management system knows
  about?

<p>Execute the command:

<example>
dpkg-scanpackages BIN_DIR OVERRIDE_FILE [PATHPREFIX] > my_Packages
</example>

<p>where:
  <list>
    <item>BIN-DIR is a directory where Debian archive files (which usually
    have an extension of ".deb") are stored.
    <item>OVERRIDE_FILE is a file that is edited by the distribution
    maintainers and is usually stored on a Debian FTP archive at
    <tt>indices/override.main.gz</tt> for the Debian packages in
    the "main" distribution. You can ignore this for local packages.
    <item>PATHPREFIX is an <em>optional</em> string that can be prepended
    to the <tt>my_Packages</tt> file being produced.
  </list>

<p>Once you have built the file <tt>my_Packages</tt>, tell the package
management system about it by using the command:

<example>
dpkg --merge-avail my_Packages
</example>

<p>If you are using APT, you can add the local repository to your
<manref name="sources.list" section="5"> file, too.

<sect1 id="diverse">Some users like mawk, others like gawk; some like vim,
  others like elvis; some like trn, others like tin; how does Debian
  support diversity?

<p>There are several cases where two packages provide two different versions
of a program, both of which provide the same core functionality.  Users
might prefer one over another out of habit, or because the user
interface of one package is somehow more pleasing than the interface of
another.  Other users on the same system might make a different choice.

<p>Debian uses a "virtual" package system to allow system administrators
to choose (or let users choose) their favorite tools when there are two
or more that provide the same basic functionality, yet satisfy package
dependency requirements without specifying a particular package.

<p>For example, there might exist two different versions of newsreaders on
a system.  The news server package might 'recommend' that there exist
<em>some</em> news reader on the system, but the choice of <tt>tin</tt>
or <tt>trn</tt> is left up to the individual user.  This is satisfied by
having both the <package/tin/ and <package/trn/ packages provide the
virtual package <package/news-reader/.  <em>Which</em> program is
invoked is determined by a link pointing from a file with the virtual
package name <tt>/etc/alternatives/news-reader</tt> to the selected file,
e.g., <tt>/usr/bin/trn</tt>.

<p>A single link is insufficient to support full use of an alternate
program; normally, manual pages, and possibly other supporting files
must be selected as well.  The Perl script <tt>update-alternatives</tt>
provides a way of ensuring that all the files associated with a specified
package are selected as a system default.

<p>For example, to check what executables provide `x-window-manager', run:
  <example>update-alternatives --display x-window-manager</example>
If you want to change it, run:
  <example>update-alternatives --config x-window-manager</example>
And follow the instructions on the screen (basically, press the number
next to the entry you'd like better).

<p>If a package doesn't register itself as a window manager for some reason
(file a bug if it's in error), or if you use a window manager from /usr/local
directory, the selections on screen won't contain your preferred entry.
You can update the link through command line options, like this:
  <example>update-alternatives --install /usr/bin/x-window-manager \
  x-window-manager /usr/local/bin/wmaker-cvs 50</example>

<p>The first argument to `--install' option is the symlink that points to
/etc/alternatives/NAME, where NAME is the second argument. The third argument
is the program to which /etc/alternatives/NAME should point to, and the
fourth argument is the priority (larger value means the alternative will more
probably get picked automatically).

<p>To remove an alternative you added, simply run:
  <example>update-alternatives --remove x-window-manager /usr/local/bin/wmaker-cvs</example>
</sect1>
</sect>
<sect id="cp-right">How to copy a whole subdirectory
<p>
Method of copy a whole subdirectory according to Manoj Srivastava  
&lt;srivasta@debian.org&gt; on debian-user@lists.debian.org:

<sect1>Right way:
<p>
<example>
# cd /path/to/old/directory
# find . -depth -print0 | afio -p -xv -0a /mount/point/of/new/directory
</example>

<sect1>cp:
<p>
Traditionally, cp was not really a candidate since it did not
derenference symbolic links, or preserve hard links
either. Another thing to consider was sparse files (with
holes).
<p>
GNU cp has overcome these limitations, however, on a non GNU
system, cp could still have problems. Also, you can't genrate
small, portable archives using cp.
<example>
% cp -a . newdir
</example>
<sect1>tar:
<p>
Tar overcame some of the problems that cp had with symbolic
links. However, `cpio' handles special files; traditional
`tar' doesn't.
<p>								
`tar's way of handling multiple hard links to a file places
only one copy of the link on the tape, but the name attached
to that copy is the <em>only</em> one you can use to retrieve the
file; `cpio's way puts one copy for every link, but you can
retrieve it using any of the names.
</sect1>

<sect1>pax:
<p>
The new, POSIX (IEEE Std 1003.2-1992, pages 380-388 (section
4.48) and pages 936-940 (section E.4.48)), all singing, all
dancing, Portable archive interchange utility.  pax will read,
write, and list the members of an archive file, and will copy
directory hierarchies.  pax operation is independent of the
specific archive format, and supports a wide variety of
different archive formats.
<p>
pax implementations are still new and wet behind the ears.
<example>
$ pax -rw -p e . newdir
 or
$ find . -depth  | pax -rw -p e  newdir
</example>
</sect1>

<sect1>cpio:
<p>
copies files into or out of a cpio or tar archive, The archive
can be another file on the disk, a magnetic tape, or a pipe.
<example>
$ find . -depth -print0 | cpio --null --sparse -pvd new-dir
</example>
</sect1>

<sect1>afio:
<p>
Afio is a better way of dealing with cpio-format archives. It is
generally faster than cpio, provides more diverse magnetic tape
options and deals somewhat gracefully with input data corruption.  It
deals somewhat gracefully with input data corruption.  Supports
multi-volume archives during interactive operation.  Afio can make
compressed archives that are much safer than compressed tar or cpio
archives.  Afio is best used as an `archive engine' in a backup
script.
<example>
$ find . -depth -print0 | afio -px -0a new-dir
</example>
All my backups onto tape use afio. 
</sect1>

</sect>

</chapt>
