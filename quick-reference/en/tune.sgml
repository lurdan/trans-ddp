<!-- CVS revision of this document "$Revision: 1.11 $"  -->

<chapt id="tune"> Tuning a &debian; system

<sect id="hdtune">Hardware access optimization
<p>
There are few hardware optimization configurations which &debian; leaves 
them to the sysadmin to take care.
<list>
<item><package>hdparm</package>
 <list compact>
<item>Hard disk access optimization. Very effective.
<item>Dangerous. You must read <manref name="hdparm" section="8"> first.
<item>"<tt>hdparm -tT /dev/hda</tt>" to test disk access spead.
<item>"<tt>hdparm -c1 -d1 -u1 -m16 -A /dev/hda</tt>" to spead up modern
 IDE system. (It may be dangerous.)
 </list>

<item><package>setserial</package>
 <list compact>
<item>Collection of tools for serial port management.
 </list>

<item><package>scsitools</package>
 <list compact>
<item>Collection of tools for scsi hardware management.
 </list>

<item><package>memtest86</package>
 <list compact>
<item>Collection of tools for memory hardware management.
 </list>

<item><package>hwtools</package>
 <list compact>
<item>Collection of tools for low-level hardware management.
 </list>

<item><package>schedutils</package>
 <list compact>
<item>Linux scheduler utilities.
<item><prgn>taskset</prgn>, <prgn>irqset</prgn>, <prgn>lsrt</prgn>, 
 and <prgn>rt</prgn> are included.
<item>Together with <prgn>nice</prgn> and <prgn>renice</prgn> 
 (not included), they allow full control of process scheduling parameters. 
 </list>

</list>

<sect id="sudo"><prgn>sudo</prgn> - safer work environment
<p>
My usage of <prgn>sudo</prgn> is mostly a protection from my own stupidity.  I consider
using <prgn>sudo</prgn> a better alternative to always using the system as root.
YMMV. 
<p>
Install <prgn>sudo</prgn> and activate it by setting options in
<url id="&examples;" name="/etc/sudoers">.
<p>
The sample configuration provides staff group members access to any
commands run as root under <prgn>sudo</prgn> and also gives src members access to
selected commands run as root under <prgn>sudo</prgn>.
<p>
The advantage of <prgn>sudo</prgn> is that it only requires an ordinary user's password to
log in, and activity is monitored.  This is nice way to give some authority to
a junior administrator.  For example:
<example>
$ sudo chown -R myself:mygrp .
</example>
<p>
Of course if you know the root password (as most home users do),
any command can be run under root from a user account:
<example>
$ su -c "shutdown -h now"
Password:
</example>
(I know I should tighten the admin account's <prgn>sudo</prgn> privileges.
But since this is my home server, I have not bothered yet.)
<p>
For a different program that allows ordinary users to run commands with root
privileges, see the <package>super</package> package.
</sect>

<sect id="backup">Backup of configuration files
<p>
<example>
# apt-get install changetrack
# vi changetrack.conf
</example>
</sect>

<sect id="cdrw">CD-writer
<p>
CD-writers with ATAPI/IDE interfaces have recently become a very popular
option.  It is a nice media for system backup and archiving for the home user
needing &lt; 640 MB capacity.  For the most authoritative information, see the
LDP <url id="&cd-writing-howto;" name="CD-Writing-HOWTO">.

<sect1>Introduction
<p>
First, any disruption of data sent to the CD-writer will cause irrecoverable
damage to the CD. Get a CD-writer with as large a buffer as possible. If money
is no object, do not bother with ATAPI/IDE, just get a SCSI version.  If you
have a choice of IDE interface to be connected, use the one on the PCI-bus
(i.e., on the motherboard) rather than one on the ISA-bus (an SB16 card,
etc.).
<p>
When a CD-writer is connected to IDE, it has to be driven by the IDE-SCSI
driver instead of an ordinary IDE CD driver. Also, the SCSI generic driver
needs to be activated. There are two possible approaches for of doing this,
assuming a kernel distributed with modern distributions (as of March 2001).
</sect1>

<sect1>Approach 1: modules + <prgn>lilo</prgn>
<p>
Add the following line to <file>/etc/lilo.conf</file> if you are using a stock Debian
kernel. If multiple options are used, list them separated by spaces:
<example>
append="hdx=ide-scsi ignore=hdx"
</example>
Here the location of the CD-writer, which is accessed through the ide-scsi driver,
is indicated by <tt>hdx</tt>, where <em>x</em> represents one of the following:
<example>
hdb      for a slave on the first IDE port
hdc      for a master on the second IDE port
hdd      for a slave on the second IDE port
hde-hdh  for a drive on an external IDE port
</example>
Type the following commands as root to activate after finishing all the
configuration:
<example>
# lilo
# shutdown -h now
</example>
</sect1>


<sect1>Approach 2: recompile the kernel
<p>
Debian uses <prgn>make-kpkg</prgn> to create a kernel.  Use the new
<tt>--append_to_version</tt> with make-kpkg to build multiple kernel images.
Use the following setup through <tt>make menuconfig</tt>:
<list>
<item>bzImage
<item>Exclude the IDE CD driver (not a must, but simpler to do this)
<item>Compile in ide-scsi and sg, or make them modules
</list>
</sect1>

<sect1>Post-configuration steps
<p>
Kernel support for the CD-writer can be activated during booting by
the following:
<example>
# echo ide-scsi &gt;&gt;/etc/modules
# echo sg       &gt;&gt;/etc/modules
# cd /dev; ln -sf scd0 cdrom
</example>
Manual activation can be done by:
<example>
# modprobe ide-scsi
# modprobe sg
</example>
After reboot, you can check installation by:
<example>
$ dmseg|less
# apt-get install cdrecord
# cdrecord -scanbus
</example>
</sect1>

<sect1>CD-image file (bootable)
<p>
To create a CD-ROM of files under <file>target-directory/</file> as
<file>cd-image.raw</file>
(bootable, Joliet TRANS.TBL-enabled format; if not bootable, take out
<tt>-b</tt> and <tt>-c</tt> options), insert a boot floppy in the first floppy drive and
<example>
# dd if=/dev/fd0 target-directory/boot.img 
# mkisofs -r -V volume_id -b boot.img -c bootcatalog -J -T \
        -o cd-image.raw target_directory/
</example>
<p>
One funny hack is to make a bootable DOS CD-ROM.  If an ordinary DOS boot
floppy disk image is in the above <file>boot.img</file>, the CD-ROM will boot
as if a DOS floppy were in the first floppy drive (A:).  Doing this with
freeDOS may be more interesting.
<p>
This CD-image file can be inspected by mounting it on the loop device.
<example>
# mount -t iso9660 -o ro,loop cd-image.raw /cdrom
# cd /cdrom
# mc
# umount /cdrom
</example>
</sect1>

<sect1>Write to the CD-writer (R, R/W):
<p>
First test with (assuming double speed)
<example>
# nice --10 cdrecord -dummy speed=2 dev=0,0 disk.img
</example>
Then if OK, write to CD-R with
<example>
# nice --10 cdrecord -v -eject speed=2 dev=0,0 disk.img
</example>
Or write to a CD-RW disk with
<example>
# nice --10 cdrecord -v -eject blank=fast speed=2 dev=0,0 disk.img
</example>
Some CD-RW drives work better with
<example>
# nice --10 cdrecord -v blank=all speed=2 dev=0,0
</example>
followed by
<example>
# nice --10 cdrecord -v -eject speed=2 dev=0,0 disk.img
</example>
Two steps are needed to prevent SCSI timeouts during blanking from
interfering with the burning step.  The argument value to the 
<prgn>nice</prgn> may require some adjustments.
</sect1>

<sect1>Make an image file of a CD
<p>
Some CD-R's and commercial CD's have junk sectors at the end that make copying
by <prgn>dd</prgn> impossible (the Windows 98 CD is one of them).  The
<package>cdrecord</package> package comes with the <prgn>readcd</prgn> command.  Use this to copy
any CD contents to an image file.  If it is a data disk, mount it and run
<prgn>mount</prgn> to see its actual size.  Divide the number shown (in blocks, = 1024
bytes) by 2 to get the number of actual CD sectors (2048 bytes).  Run
<prgn>readcd</prgn> with options and use this disk image to burn the CD-R/RW.
<example>
# readcd [target] [lun] [scsibusno] # select function 11
</example> 
Here, set all 3 command line parameters to 0 for most cases.  Sometimes the
number of sectors given by <prgn>readcd</prgn> is excessive!  Use the above
number from an actual mount for better results.
<example>
My CD-R       = +2 sectors
MS Windows CD = +1 sector, i.e., +2048 bytes
</example>
</sect1>

<sect1>Create a Debian CD image
<p>
To obtain the latest information, visit the
<url id="&debian-cd;" name="Debian CD site."> 
The latest software can be obtained by anonymous CVS.
<example>
$ export CVSROOT=anonymous@cvs.debian.org:/cvs/debian-boot
$ cvs co debian-cd
</example>
Following is a summary of CD image creation. 
<example>
# apt-get install debian-cd
# cd /etc/debian-cd
# vim CONF.sh
$ . CONF.sh
$ make distclean
$ make status
$ make list COMPLETE=1 SIZELIMIT1=555000000 SRCSIZELIMIT=665000000
$ make official_images
 or if you want only binary images :
$ make bin-official_images
</example>
</sect1>

<sect1>Backup the system to CD-R
<p>
Copy key configuration files and data files to CD-R.
Use script here: <url id="examples/" name="backup">
</sect1>

<sect1>Copy a music CD to CD-R
<p>
Not tested by me:
<example>
# apt-get get install cdrecord cdparanoia
# cdparanoia -s -B
# cdrecord dev=0,0,0 speed=2 -v -dao -eject defpregap=1 -audio *.wav
</example>
or,
<example>
# apt-get install cdrdao #disk at once
# cdrdao read-cd --device /dev/cdrom --driver generic-mmc \
        --paranoia-mode 3 my_cd # read cd
# cdrdao write --device /dev/cdrom --driver generic-mmc --speed 8 \
        my_cd # write a new CD
</example>
<prgn>cdrdao</prgn> does a real copy (no gaps, etc...)
</sect1>
</sect>

<sect id="x">The X program
<p>
<taglist compact>
<tag><ref id="xsrvr">
<item>a program on a local host that displays an X window and/or desktop 
on a user's monitor (CRT, LCD) and accepts keyboard and mouse input. 
<tag><ref id="xclnt">
<item>a program on a (local or remote) host that runs X-window-compatible 
application software.
</taglist>
This reverses the ordinary use of "server" and "client" in other
contexts.  For basics refer to <manref name="X" section="7">, the LDP
<url id="&xwindowuser-howto;" name="XWindow-User-HOWTO">, and <url
id="&remote-xapps-howto;" name="Remote X Apps mini-HOWTO">.
<p>
There are several ways of getting the "X server" (display side) to accept 
remote connections from an "X client" (application side):  
<list>
<item><prgn>xhost</prgn>
<list compact>
<item>the host list mechanism (unsecure).
<item>non-encrypted protocol (prone for eavesdropping attack).
<item>Do not use this, if possible.
<item>See <ref id="xhost"> and <manref name="xhost" section="1x">.
</list>
<item><prgn>xauth</prgn>
<list compact>
<item>the MIT magic cookie mechanism (unsecure but better than xhost).
<item>non-encrypted protocol (prone for eavesdropping attack).
<item>use this only for local connection.
<item>See <ref id="ss-xsu"> and <manref name="xauth" section="1x">.
</list>
<item><prgn>xdm</prgn>, <prgn>wdm</prgn>, <prgn>gdm</prgn>, <prgn>kdm</prgn>, ...
<list compact>
<item>See <manref name="xdm" section="1x"> and 
 <manref name="Xsecurity" section="7"> for the basics of X display access 
 control.
<item>See <manref name="wdm" section="1x">, <manref name="gdm" section="8">, 
 and <manref name="kdm.options" section="5"> for more information, 
 if these are installed.
</list>
<item><prgn>ssh</prgn>
<list compact>
<item>port forwarding mechanism through secure shell (secure).
<item>encrypted protocol (resource waste if used locally).
<item>use this for remote connection.
<item>See <ref id="xssh">.
</list>
</list>
All remote connection methods, except <prgn>ssh</prgn>, require TCP/IP
connection enabled on the X server.  See <ref id="xtcp">.

<sect1 id="xsrvr">X server
<p>
See <manref name="XFree86" section="1x"> for X server information.
<p>
To (re)configure X4 in Woody, run:
<example>
# dpkg-reconfigure --p=low xserver-xfree86
</example>
<p>
Invoke X server from local console:
<example>
$ startx -- :&lt;display&gt; vtXX 
eg.:
$ startx -- :1 vt8
... start on vt8 connected to localhost:1
</example>
</sect1>

<sect1 id="xclnt">X client
<p>
Most X client programs can be started as:
<example>
client $ xterm -geometry 80x24+30+200 -fn 6x10 -display <var>hostname</var>:0 &amp;
</example>
Here, these optional command line arguments mean:
<list>
<item><tt>-geometry <var>WIDTH</var>x<var>HEIGHT</var>+<var>XOFF</var>+<var>YOFF</var></tt>: 
the initial size and location of the window.

<item><tt>-fn <var>FONTNAME</var></tt>: the font to use for displaying text.
 <tt><var>FONTNAME</var></tt> can be:
<list compact>
<item>a14: Normal size font
<item>a24: Large size font
<item>... (check available fonts by <tt>xlsfont</tt>.)
</list>
<item><tt>-display <var>displayname</var></tt>: the name of the X server to use. 
 <tt><var>displayname</var></tt> can be:
<list compact>
<item><tt><var>hostname</var>:<var>D.S</var></tt> means screen <tt><var>S</var></tt> on display
 <tt><var>D</var></tt> of host <tt><var>hostname</var></tt>; the X server for this display is
listening to TCP port 6000+D.

<item><tt><var>host</var>/unix:<var>D.S</var></tt> means screen <tt><var>S</var></tt> on display 
<var>D</var> of host <tt><var>host</var></tt>; the X server for this display is 
listening to UNIX domain socket
<file>/tmp/.X11-unix/XD</file> (so it's only reachable from <tt><var>host</var></tt>).

<item><tt><var>:D.S</var></tt> is equivalent to 
<tt><var>host</var>/unix:<var>D.S</var></tt>, where <tt><var>host</var></tt> is the local hostname.
</list>
</list>
<p>
The default <tt><var>displayname</var></tt> for the X client program (application side) 
can be set by the DISPLAY environment variable.  For example, prior to 
running an X client program, executing one of the following commands 
achieves this:
<example>
$ export DISPLAY=:0 
        # The default, local machine using the first X screen
$ export DISPLAY=<var>hostname.fulldomain.name</var>:0.2
$ export DISPLAY=localhost:0
</example>
</sect1>

<sect1 id="xtcp">TCP/IP connection to X
<p>
Because remote TCP/IP socket connection without encryption is prone 
to the eavesdropping attack, the default setting for X of the recent 
&debian; disables TCP/IP socket.  Think about using <prgn>ssh</prgn> 
for remote X connection (see <ref id="xssh">). 
<p>
Method described here is not encouraged unless one is in a very secure 
environment behind a good firewall system with only trusted users present.
Following configuration on the X server restores TCP/IP socket connection:
<example>
# find /etc/X11 -type f -print0 | xargs -0 grep nolisten
/etc/X11/xinit/xserverrc:exec /usr/bin/X11/X -dpi 100 -nolisten tcp
</example>
Remove <tt>-nolisten</tt> to allow TCP/IP listening on the X server.
</sect1>
 
<sect1 id="xhost">Remote X connection: <prgn>xhost</prgn>
<p>
<prgn>xhost</prgn> allows access based on hostnames. This is very insecure.
The following will disable host checking and allow connections from anywhere 
if TCP/IP socket connection is allowed (see <ref id="xtcp">):
<example>
$ xhost +
</example>
You can re-enable host checking with:
<example>
$ xhost -
</example>
<p>
<prgn>xhost</prgn> does not distinguish between different users on the 
remote host. Also, hostnames (addresses actually) can be spoofed. 
<p>
This method must be avoided even with more restrictive host criteria
if you're on an untrusted network (for instance with dialup PPP
access to the Internet).  See <manref name="xhost" section="1x">.
</sect1>

<sect1 id="xssh">Remote X connection: <prgn>ssh</prgn>
<p>
The use of <prgn>ssh</prgn> enables a secure connection from a local X server 
to a remote application server.  
<list>
<item>Set <tt>X11Forwarding</tt> and <tt>AllowTcpForwarding</tt> entries 
to <tt>yes</tt> in <file>/etc/ssh/sshd_config</file> of the remote host.
<item>Start the X server on the local host.
<item>Open an <prgn>xterm</prgn> in the local host.
<item>Run <prgn>ssh</prgn> to establish a connection with the remote site.  
<example>
localname @ localhost $ ssh -q -X -l loginname remotehost.domain
Password:
.....
</example>
<item>Run X application commands on the remote site.
<example>
loginname @ remotehost $ gimp &
</example>
</list>
This method allows the display of the remote X client output as if they 
were locally connected through local UNIX domain socket.
</sect1>

<sect1 id="xtermfaq"><prgn>xterm</prgn>
<p>
Learn everything about <prgn>xterm</prgn> at <url id="&xtermfaq;">
</sect1>

<sect1 id="ss-xsu">Gain root in X
<p>
If a GUI program needs to be run with root privileges, use the following
procedures to do so on a user's X server. Never attempt to start an X
server directly from the root account in order to prevent possible
security risks.
<p>
Create the file <file>/etc/X11/Xsession.d/00xfree86-common_environment</file>
from the root account, containing these lines:
<example>
if [ -f "$HOME/.xenvironment" ]; then
    . $HOME/.xenvironment
fi
</example>
Then login to the user account from which you will run GUI programs with root
privileges under X.  In his home directory, create the following 
<file>$HOME/.xenvironment</file> file.
<example>
# This makes X work when I su to the root account.
if [ -z "$XAUTHORITY" ]; then
        XAUTHORITY=$HOME/.Xauthority
        export XAUTHORITY
fi
</example>
Then run "<prgn>su</prgn>" (not "<tt>su -</tt>") in an <prgn>xterm</prgn> 
window of the user.  Now GUI programs displays output on the users X window 
while running with root privileges.  This trick works as long as default 
Xsession is executed.  If user set up customization using 
<file>$HOME/.xinit</file> or <file>$HOME/.xsession</file>, above mentioned 
environment <tt>XAUTHORITY</tt> variable needs to be set similary in 
those scripts.
<p>
Alternatively, <package>sudo</package> can be used:
<example>
$ sudo xterm
... or
$ sudo -H -s
</example>
Here <file>/root/.bashrc</file> should contain:
<example>
if [ $SUDO_USER ]; then
    sudo -H -u $SUDO_USER xauth extract - $DISPLAY | xauth merge -
fi
</example>
This works fine even with the home directory of the user on an NFS
mount, because root does not read the <file>.Xauthority</file> file.
<p>
There are also several specialized packages for this purpose:
<package>kdesu</package>, <package>gksu</package>, <package>gksudo</package>,
<package>gnome-sudo</package>, and <package>xsu</package>.  Finally, three
other methods can be used to achieve similar results: creating a symlink from
<file>/root/.Xauthority</file> to the user's corresponding one; use of the
script <url id="&suxhome;" name="sux">; or putting "<tt>xauth merge
~&lt;USER_RUNNING_X&gt;/.Xauthority</tt>" in the root initialization script.
<p>
See more on the <url id="&deb-dev-su;" name="debian-devel mailing list">.
</sect1>

<sect1 id="ss-browser">Web Browser (graphical)
<p>
There are few web browser packages with graphical display capabilities
available after woody release:
<list compact>
<item><package>mozilla</package> The browser (new)
<item><package>galeon</package> The browser with gnome UI (new)
<item><package>konqueror</package> KDE browser
<item><package>amaya-gtk</package> W3C reference browser
<item><package>amaya-lesstif</package> W3C reference browser
<item><package>netscape-...</package> (many, old)
<item><package>communicator-...</package> (many, old)
<item>...
</list>
The version of <package>mozilla</package> must match with 
the version <package>galeon</package> requires.  Except UI, these 2 programs
share HTML rendering engine (Gocko).
<p>
Plug in for the browsers such as <package>mozilla</package> and
<package>galeon</package> can be enabled by installing "<tt>*.so</tt>" 
manually to the plugin directory and restart the browsers.
<p>
Plugin resources:
<list compact>
<item>Java plugin: install binary "J2SE" from <url id="&javasunhome;">.
<item>Flash plugin: install binary "Macromedia Flash Player 5" from
 <url id="&flashhome;">.
<item><package>freewrl</package>: vrml browser and netscape plugin
<item>...
</list>
</sect1>
</sect>

<sect id="ssh">SSH
<p>
SSH (Secure SHell) is the secure way to connect over the Internet.  A free
version of SSH called openSSH is available as <package>ssh</package> package
on &debian;.

<sect1 id="ssh-basics">Basics
<p>
First install openSSH server and client.
<example>
# apt-get update && apt-get install ssh
</example>
The non-US entry in the <file>/etc/apt/source.list</file> is required.
<file>/etc/ssh/sshd_not_to_be_run</file> must not be present if one wish to 
run openSSH server.
<p>
SSH has 2 authentication protocols:
<list>
<item>SSH protocol version 1: 
 <list compact>
<item>potato version only supports this protocol.
<item>available authentication methods:
  <list compact>
<item>RSAAuthentication: RSA identity key based user authentication
<item>RhostsAuthentication: .rhosts based host authentication 
 (insecure, disabled)
<item>RhostsRSAAuthentication: .rhosts authentication combined with 
 RSA host key (disabled)
<item>ChallengeResponseAuthentication: RSA challenge-response authentication
<item>PasswordAuthentication: password based authentication
  </list>
 </list>
<item>SSH protocol version 2: 
 <list compact>
<item>post-woody versions use this as primary protocol.
<item>available authentication methods:
  <list compact>
<item>PubkeyAuthentication: public key based user authentication
<item>HostbasedAuthentication: .rhosts or /etc/hosts.equiv authentication 
 combined with public key client host authentication  (disabled)
<item>ChallengeResponseAuthentication: chllenge-response authentication
<item>PasswordAuthentication: password based authentication
  </list>
 </list>
</list>

<p>
Be careful about these differences if you are migrating to woody or using 
non-&debian; system.  
<p>
See <file>/usr/share/doc/ssh/README.Debian.gz</file>,
<manref name="ssh" section="1">, 
<manref name="sshd" section="8">,
<manref name="ssh-agent" section="1">, and
<manref name="ssh-keygen" section="1"> for details.

<p>
Followings are the key configuration files:

<list>

<item><file>/etc/ssh/ssh_config</file>: SSH client defaults.
 See <manref name="ssh" section="1">.  Notable entries are:

 <list compact>
<item><tt>Host</tt>: Restricts the following declarations 
  (up to the next Host keyword) to be only for those hosts 
   that match one of the patterns given after the keyword.
<item><tt>Protocol</tt>: Specifies the SSH protocol versions.  
 The default is "2,1".
<item><tt>PreferredAuthentications</tt> Specifies the SSH2 client 
 authentication method.  The default is 
"hostbased,publickey,keyboard-interactive,password".
<item><tt>ForwardX11</tt>: The default is disabled.  This can be
 overiden by a command line option "<tt>-X</tt>".
 </list>

<item><file>/etc/ssh/sshd_config</file>: SSH server defaults.
 See <manref name="sshd" section="8">.  Notable entries are:

 <list compact>
<item><tt>ListenAddress</tt>: Specifies the local addresses 
 sshd should listen on. Multiple options are permitted.
<item><tt>AllowTcpForwarding</tt>: The default is disabled.  
<item><tt>X11Forwarding</tt>: The default is disabled.  
 </list>

<item><file>$HOME/.ssh/authorized_keys</file>: the lists of the default 
public keys that client used to connect to this account on this host.
See <manref name="ssh-keygen" section="1">

<item><file>$HOME/.ssh/identity</file>: 
See <manref name="ssh-add" section="1">
and <manref name="ssh-agent" section="1">.
</list>

<p>
The following will start an <prgn>ssh</prgn> connection from client.
<example>
$ ssh username@hostname.domain.ext
$ ssh -1 username@hostname.domain.ext # Force SSH version 1
</example>
For the user, <prgn>ssh</prgn> functions as a smarter and more secure 
<prgn>telnet</prgn> (will not bomb with ^]).

</sect1>

<sect1 id="ssh-forward">Port forwarding &ndash; for SMTP/POP3 tunneling
<p>
To establish a pipe to connect to port 25 of <var>remote-server</var> from port 4025 of
localhost, and to port 110 of <var>remote-server</var> from port 4110 of localhost
through <prgn>ssh</prgn>, execute on the local machine:
<example>
# ssh -q -L 4025:remote-server:25 4110:remote-server:110 \
           username@remote-server
</example>
This is a secure way to make connections to SMTP/POP3 servers over the Internet.
Set <tt>AllowTcpForwarding</tt> entry to <tt>yes</tt> in 
<file>/etc/ssh/sshd_config</file> of the remote host.
</sect1>

<sect1 id="ssh-rsa">Connect with fewer passwords
<p>
One can avoid having to remember a password for each remote system by using
RSAAuthentication (SSH1 protocol) or PubkeyAuthentication (SSH2 protocol).  
<p>
On the remote system, set respective entries,
"RSAAuthentication yes" or "PubkeyAuthentication yes", in 
<file>/etc/ssh/sshd_config</file>.
<p>
Then generate authentication keys locally and install its public key
in the remote system:
<example>
$ ssh-keygen          # RSAAuthentication: RSA1 key for SSH1
$ cat .ssh/id_rsa.pub | ssh user1@remote \
        "cat - &gt;&gt;.ssh/authorized_keys"
...
$ ssh-keygen -t rsa   # PubkeyAuthentication: RSA key for SSH2
$ cat .ssh/id_rsa.pub | ssh user1@remote \
        "cat - &gt;&gt;.ssh/authorized_keys"
...
$ ssh-keygen -t dsa   # PubkeyAuthentication: DSA key for SSH2
$ cat .ssh/id_dsa.pub | ssh user1@remote \
        "cat - &gt;&gt;.ssh/authorized_keys"
</example>
One can change the passphrase later with "<tt>ssh-keygen -p</tt>".
Make sure to verify settings by testing the connection.  In case of any
problem, use "<tt>ssh -v</tt>".
<p>
You can add options to the entries in <prgn>authorized_keys</prgn> to limit
hosts and to run specific commands. See <manref name="sshd" section="8"> for details.
<p>
Note that SSH2 has <tt>HostbaseAuthentication</tt>. For this to work, 
you must adjust settings of <tt>HostbasedAuthentication</tt> to <tt>yes</tt> in 
both <file>/etc/ssh/sshd_config</file> on the server machine and 
<file>/etc/ssh/ssh_config</file> or <file>$HOME/.ssh/config</file> on 
the client machine.
<p>
<![%FIXME[<p>=== Add info on "ssh-agent" ===]]>
</sect1>

<sect1 id="ssh-trouble">Troubles
<p>
If you have problems, check the permissions of configuration files and run
<prgn>ssh</prgn> with "<tt>-v</tt>" option.
<p>
Use "<tt>-P</tt>" option if you are root and have trouble with a firewall; this avoids the use
of server ports 1&ndash;1023.
<p>
If <prgn>ssh</prgn> connections to a remote site suddenly stop working, it may be the
result of tinkering by the sysadmin, most likely a change in
<prgn>host_key</prgn> during system maintenance.  After making sure this is
the case and nobody is trying to fake the remote host by some clever hack, one
can regain connection by removing the <prgn>host_key</prgn> entry from
<file>$HOME/.ssh/known_hosts</file> on the local machine.
</sect1>

</sect>
</chapt>
