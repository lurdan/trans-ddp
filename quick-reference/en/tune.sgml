<!-- CVS revision of this document "$Revision: 1.17 $"  -->

<chapt id="tune"> Tuning a &debian; system
<p>
This chapter only describe basics of system configuration.  Prerequisite
of this chapter is reading of <ref id="install">.  
<p>
Also for the security concious, 
it is highly recommended to read <url id="&securing-debian-howto;" 
name="Securing Debian Manual"> which can also be found as 
<package>&p-securing-debian-howto;</package> package.

<sect id="init-hints">System initialization hints
<p>
See <ref id="init"> for the basics of &debian; init script.

<sect1 id="init-defaults">Customizing init script
<p>
&debian; uses sys-V init sctript system.  Although all these init scripts 
in <file>/etc/init.d/*</file> are marked as conffiles and sysadmins 
are free to modify them, customizing these init scripts through
editting files in <file>/etc/defaults/*</file> are preffered approach.
<p>
For example <file>/etc/init.d/rcS</file> can customize
boot time defaults for <prgn>motd</prgn>, <prgn>sulogin</prgn>, ....

<sect1 id="syslogd">Customizing system logging
<p>
System log mode can be configured <file>/etc/syslog.conf</file>.
Check the <package>colorize</package> package for a program to 
colorize system log files.
See <manref name="syslogd" section="8"> and 
<manref name="syslog.conf" section="5">.
</sect1>

<sect1 id="hdtune">Hardware access optimization
<p>
There are few hardware optimization configurations which &debian; leaves 
them to the sysadmin to take care.
<list>
<item><package>hdparm</package>
 <list compact>
<item>Hard disk access optimization. Very effective.
<item>Dangerous. You must read <manref name="hdparm" section="8"> first.
<item><tt>hdparm -tT <var>/dev/hda</var></tt> to test disk access spead.
<item><tt>hdparm -c1 -d1 -u1 -m16 -A <var>/dev/hda</var></tt> to spead up modern
 IDE system. (It may be dangerous.)
 </list>

<item><package>setserial</package>
 <list compact>
<item>Collection of tools for serial port management.
 </list>

<item><package>scsitools</package>
 <list compact>
<item>Collection of tools for scsi hardware management.
 </list>

<item><package>memtest86</package>
 <list compact>
<item>Collection of tools for memory hardware management.
 </list>

<item><package>hwtools</package>
 <list compact>
<item>Collection of tools for low-level hardware management.
  <list compact>
   <item>irqtune: changes the IRQ priority of devices to allow devices that
   require high priority and fast service (e.g. serial ports, modems) to
   have it.
   <item>scanport: scans i/o space from 0x100 to 0x3ff looking for 
   installed ISA devices.
   <item>inb: a quick little hack that reads an i/o port and dumps the value
   in hex and binary.
  </list>

 </list>

<item><package>schedutils</package>
 <list compact>
<item>Linux scheduler utilities.
<item><prgn>taskset</prgn>, <prgn>irqset</prgn>, <prgn>lsrt</prgn>, 
 and <prgn>rt</prgn> are included.
<item>Together with <prgn>nice</prgn> and <prgn>renice</prgn> 
 (not included), they allow full control of process scheduling parameters. 
 </list>

</list>

<sect>Access control

<sect1 id="loginctrl">Access control through PAM and login
<p>
PAM provide login control.  
<example>
/etc/pam.d/*             # PAM control files
/etc/pam.d/login         # PAM control file for login
/etc/security/*          # PAM module parameters
/etc/securetty           # this controls root login by console (login)
/etc/login.defs          # this controls login behaviors (login)
</example>
<p>
Change the content of <file>/etc/pam.d/login</file> as follows, if you want
insecure but passwordless console terminals at your own risk.
<example>
#auth       required   pam_unix.so nullok
auth       required   pam_permit.so
</example>
Similar tricks can be applied for <prgn>xdm</prgn>, <prgn>gdm</prgn>, ...
for passwordless console X.
<p>
The maximum number of processes can be set with 
<tt>ulimit -u 1000</tt> in a Bash shell or with settings in 
<file>/etc/security/limits.conf</file> from PAM.  Other parameters such as
<tt>core</tt> can be set similarly. Initial value of <prgn>PATH</prgn> 
can be set by <file>/etc/login.defs</file> before the shell start up 
script.
<p>
The documentation for PAM is packaged in the
<package>libpam-doc</package> package. The <em>Linux-PAM System
Administrator's Guide</em> covers configuring PAM, what modules are
available etc. The documentation also includes <em>The Linux-PAM
Application Developers' Guide</em> and <em>The Linux-PAM Module Writers'
Guide</em>.
</sect1>

<sect1 id="wheel">Why GNU <prgn>su</prgn> does not support the <tt>wheel</tt> group
<p>
This is the famous phrase at the bottom of <tt>info su</tt> page by
Richard M. Stallman.  This section is there for historical reason only
and we should not be fooled.  Current <prgn>su</prgn>in &debian; uses
PAM thus can restrict ability to use <prgn>su</prgn> to any group using
<prgn>pam_wheel.so</prgn> in <file>/etc/pam.d/su</file>.  Following
will set <tt>adm</tt> group in &debian; system as an equivalent of 
BSD <tt>wheel</tt> group and allow <prgn>su</prgn> without password
for them.
<example>
# anti-RMS configuration in /etc/pam.d/su
auth       required   pam_wheel.so group=adm

# Wheel members to be able to su without a password
auth       sufficient pam_wheel.so trust group=adm
</example>

<sect1>Meaning of group
<p>
Few interesting groups:
<list compact>
<item><tt>root</tt> group is default wheel group for <prgn>su</prgn>. 
<item><tt>adm</tt> group can read logfiles. 
<item><tt>cdrom</tt> group can be used locally to give a set of 
        users access to a cdrom drive.
<item><tt>floppy</tt> group can be used locally to give a set of 
        users access to a floppy drive.
<item><tt>audio</tt> group can be used locally to give a set of 
        users access to an audio device.
<item><tt>src</tt> group owns source code, including files in 
        <file>/usr/src</file>. It can be used locally to give a user
	the ability to manage system source code.
<item><tt>staff</tt> is useful for more helpdesk/junior sysadmins 
        type of people and gives them the ability to do things in 
        <file>/usr/local</file> and create directories in
        <file>/home</file>.
</list>
<p>
For complete list, see "FAQ" section in 
<url id="&securing-debian-howto;" name="Securing Debian Manual"> 
which can also be found as 
<package>&p-securing-debian-howto;</package> package.

<sect1 id="sudo"><prgn>sudo</prgn> - safer work environment
<p>
My usage of <prgn>sudo</prgn> is mostly a protection from my own stupidity.  I consider
using <prgn>sudo</prgn> a better alternative to always using the system as root.
YMMV. 
<p>
Install <prgn>sudo</prgn> and activate it by setting options in
/etc/<url id="&examples;" name="sudoers">.  Also check out 
<tt>sudo</tt> group feature in <file>&dochome;sudo/OPTIONS</file>.
<p>
The sample configuration provides staff group members access to any
commands run as root under <prgn>sudo</prgn> and also gives src members access to
selected commands run as root under <prgn>sudo</prgn>.
<p>
The advantage of <prgn>sudo</prgn> is that it only requires an ordinary user's password to
log in, and activity is monitored.  This is nice way to give some authority to
a junior administrator.  For example:
<example>
$ sudo chown -R <var>myself</var>:<var>mygrp</var> .
</example>
<p>
Of course if you know the root password (as most home users do),
any command can be run under root from a user account:
<example>
$ su -c "shutdown -h now"
Password:
</example>
(I know I should tighten the admin account's <prgn>sudo</prgn> privileges.
But since this is my home server, I have not bothered yet.)
<p>
For a different program that allows ordinary users to run commands with root
privileges, see the <package>super</package> package.
</sect1>
    
<sect1 id="tcpd">Access control to daemon programs
<p>
Internet <em>super-server</em>, <prgn>inetd</prgn> is started at boot 
time by <file>/etc/rc2.d/S20inetd</file> (for RUNLEVEL=2) which is
symlink to <file>/etc/init.d/inetd</file>.
Essentially, <prgn>inetd</prgn> allows running one daemon to invoke 
several others, reducing load on the system.
<p>
Whenever a request for service arrives, its protocol and service is 
identified by looking up database in <file>/etc/protocols</file> and 
<file>/etc/services</file>.
For the normal internet service, <prgn>inetd</prgn> looks up database in
<file>/etc/inetd.conf</file>.  For Sun-RPC based service,
<prgn>inetd</prgn> looks up database in <file>/etc/rpc.conf</file>.
<p>
For the system security, make sure to disable unused services in 
<file>/etc/inetd.conf</file>.
Sun-RPC services need to be active for NFS and other RPC-based programs.
<p>
Sometimes, <prgn>inetd</prgn> does not start the intended server 
directry but starts <prgn>tcpd</prgn> tcp/ip daemon wrapper program
with the intended server name as its argument in <file>/etc/inetd.conf</file>.  
In this case, <prgn>tcpd</prgn> runs the appropriate server program 
after <prgn>tcpd</prgn> logs the request and does some additional checks
using <file>/etc/hosts.deny</file> and <file>/etc/hosts.allow</file>.
<p>
If you have problem with remote access in recent &debian; systen, 
comment out "ALL: PARANOID" in <file>/etc/hosts.deny</file> if it exists.
<p>
For details, see
<manref name="inetd" section="8">,  
<manref name="inetd.conf" section="5">, 
<manref name="protocols" section="5">,  
<manref name="services" section="5">,  
<manref name="tcpd" section="8">,  
<manref name="hosts_access" section="5">, and
<manref name="hosts_options" section="5">. 
<p>
For more information on Sun-RPC, see
<manref name="rpcinfo" section="8"> , 
<manref name="portmap" section="8">, and
<file>&f-portmap;</file>.

<sect1 id="ldap">Lightweight Directory Access Protocol
<p>
References:
<list compact>
<item><url id="&openldaphome;" name="OpenLDAP">
<item>OpenLDAP Admin Guide in <package>openldap-guide</package> package
<item>LDP: <url id="&ldap-linux-howto;" name="LDAP Linux HOWTO">
<item>LDP: <url id="&ldap-implementation-howto;" name="LDAP Implementation HOWTO">
<item><url id="&ldap-use1;" name="OpenLDAP, extensive use reports">
<item><url id="&ldap-use2;" name="Open LDAP with Courier IMAP and Postfix">
</list>
</sect>


<sect id="cdrw">CD-writer
<p>
CD-writers with ATAPI/IDE interfaces have recently become a very popular
option.  It is a nice media for system backup and archiving for the home user
needing &lt; 640 MB capacity.  For the most authoritative information, see the
LDP <url id="&cd-writing-howto;" name="CD-Writing-HOWTO">.

<sect1>Introduction
<p>
First, any disruption of data sent to the CD-writer will cause irrecoverable
damage to the CD. Get a CD-writer with as large a buffer as possible. If money
is no object, do not bother with ATAPI/IDE, just get a SCSI version.  If you
have a choice of IDE interface to be connected, use the one on the PCI-bus
(i.e., on the motherboard) rather than one on the ISA-bus (an SB16 card,
etc.).
<p>
When a CD-writer is connected to IDE, it has to be driven by the IDE-SCSI
driver instead of an ordinary IDE CD driver. Also, the SCSI generic driver
needs to be activated. There are two possible approaches for of doing this,
assuming a kernel distributed with modern distributions (as of March 2001).
</sect1>

<sect1>Approach 1: modules + <prgn>lilo</prgn>
<p>
Add the following line to <file>/etc/lilo.conf</file> if you are using a stock Debian
kernel. If multiple options are used, list them separated by spaces:
<example>
append="hdx=ide-scsi ignore=hdx"
</example>
Here the location of the CD-writer, which is accessed through the ide-scsi driver,
is indicated by <tt>hdx</tt>, where <em>x</em> represents one of the following:
<example>
hdb      for a slave on the first IDE port
hdc      for a master on the second IDE port
hdd      for a slave on the second IDE port
hde-hdh  for a drive on an external IDE port
</example>
Type the following commands as root to activate after finishing all the
configuration:
<example>
# lilo
# shutdown -h now
</example>
</sect1>


<sect1>Approach 2: recompile the kernel
<p>
Debian uses <prgn>make-kpkg</prgn> to create a kernel.  Use the new
<tt>--append_to_version</tt> with make-kpkg to build multiple kernel images.
See <ref id="kernel">.
<p>
Use the following setup through <tt>make menuconfig</tt>:
<list>
<item>bzImage
<item>Exclude the IDE CD driver (not a must, but simpler to do this)
<item>Compile in ide-scsi and sg, or make them modules
</list>
</sect1>

<sect1>Post-configuration steps
<p>
Kernel support for the CD-writer can be activated during booting by
the following:
<example>
# echo ide-scsi &gt;&gt;/etc/modules
# echo sg       &gt;&gt;/etc/modules
# cd /dev; ln -sf scd0 cdrom
</example>
Manual activation can be done by:
<example>
# modprobe ide-scsi
# modprobe sg
</example>
After reboot, you can check installation by:
<example>
$ dmseg|less
# apt-get install cdrecord
# cdrecord -scanbus
</example>
<p>
[Per Warren Dodge] Sometines, there may be some conflicts between
<tt>ide-scsi</tt> and <tt>ide-cd</tt> if there are both CD-ROM and
CD-R/RW on the system.  Try adding following line to your
<file>/etc/modutils/aliases</file>, run <prgn>update-modules</prgn> and
reboot may help.
<example>
pre-install      ide-scsi      modprobe ide-cd
</example>
This causes the IDE driver to load before <tt>ide-scsi</tt>. The IDE
driver <tt>ide-cd</tt> takes control of the ATAPI CD-ROM &mdash;
anything that it hasn't been told to <strong>ignore</strong>. That
leaves just the ignored devices for <tt>ide-scsi</tt> to control. 
</sect1>

<sect1>CD-image file (bootable)
<p>
To create a CD-ROM of files under <file>target-directory/</file> as
<file>cd-image.raw</file>
(bootable, Joliet TRANS.TBL-enabled format; if not bootable, take out
<tt>-b</tt> and <tt>-c</tt> options), insert a boot floppy in the first floppy drive and
<example>
# dd if=<var>/dev/fd0</var> <var>target-directory/boot.img</var> 
# mkisofs -r -V <var>volume_id</var> -b <var>boot.img</var> -c <var>bootcatalog</var> -J -T \
        -o <var>cd-image.raw</var> <var>target_directory/</var>
</example>
<p>
One funny hack is to make a bootable DOS CD-ROM.  If an ordinary DOS boot
floppy disk image is in the above <file><var>boot.img</var></file>, the CD-ROM will boot
as if a DOS floppy were in the first floppy drive (A:).  Doing this with
freeDOS may be more interesting.
<p>
This CD-image file can be inspected by mounting it on the loop device.
<example>
# mount -t iso9660 -o ro,loop <var>cd-image.raw</var> /cdrom
# cd /cdrom
# mc
# umount /cdrom
</example>
</sect1>

<sect1>Write to the CD-writer (R, R/W):
<p>
First test with (assuming double speed)
<example>
# nice --10 cdrecord -dummy speed=2 dev=0,0 <var>disk.img</var>
</example>
Then if OK, write to CD-R with
<example>
# nice --10 cdrecord -v -eject speed=2 dev=0,0 <var>disk.img</var>
</example>
Or write to a CD-RW disk with
<example>
# nice --10 cdrecord -v -eject blank=fast speed=2 dev=0,0 <var>disk.img</var>
</example>
Some CD-RW drives work better with
<example>
# nice --10 cdrecord -v blank=all speed=2 dev=0,0
</example>
followed by
<example>
# nice --10 cdrecord -v -eject speed=2 dev=0,0 <var>disk.img</var>
</example>
Two steps are needed to prevent SCSI timeouts during blanking from
interfering with the burning step.  The argument value to the 
<prgn>nice</prgn> may require some adjustments.
</sect1>

<sect1>Make an image file of a CD
<p>
Some CD-R's and commercial CD's have junk sectors at the end that make copying
by <prgn>dd</prgn> impossible (the Windows 98 CD is one of them).  The
<package>cdrecord</package> package comes with the <prgn>readcd</prgn> command.  Use this to copy
any CD contents to an image file.  If it is a data disk, mount it and run
<prgn>mount</prgn> to see its actual size.  Divide the number shown (in blocks, = 1024
bytes) by 2 to get the number of actual CD sectors (2048 bytes).  Run
<prgn>readcd</prgn> with options and use this disk image to burn the CD-R/RW.
<example>
# readcd <var>target</var> <var>lun</var> <var>scsibusno</var> # select function 11
</example> 
Here, set all 3 command line parameters to 0 for most cases.  Sometimes the
number of sectors given by <prgn>readcd</prgn> is excessive!  Use the above
number from an actual mount for better results.
<example>
My CD-R       = +2 sectors
MS Windows CD = +1 sector, i.e., +2048 bytes
</example>
</sect1>

<sect1>Debian CD image
<p>
To obtain the latest information on &debian; CD, visit the
<url id="&debian-cd;" name="Debian CD site."> 
<p>
If you have fast Internet connection, think about installing over 
network using:
<list compact>
<item>a few <url id="&debian-floppyinst;" name="floppy images">.
<item>a <url id="&debian-netinst;" name="minimal bootable CD image">.
</list>
<p>
If you do not have fast Internet connection, think about purchasing 
CD's from a <url id="&debian-venders;" name="CD venders">.
<p>
Please do not waste bandwidth by downloading standard CD images 
unless you are a CD image tester (even with new jigdo-method).
<p>
One note worthy CD image is <url id="&knoppix;" 
name="KNOPPIX - Live Linux Filesystem On CD">.  
This CD will boot functioning &debian; system without 
installing itself to the hard disk.

<!-- old document section
$ export CVSROOT=anonymous@cvs.debian.org:/cvs/debian-boot
$ cvs co debian-cd
</example>
Following is a summary of CD image creation. 
<example>
# apt-get install debian-cd
# cd /etc/debian-cd
# vim CONF.sh
$ . CONF.sh
$ make distclean
$ make status
$ make list COMPLETE=1 SIZELIMIT1=555000000 SRCSIZELIMIT=665000000
$ make official_images
 or if you want only binary images :
$ make bin-official_images
-->
</sect1>

<sect1>Backup the system to CD-R
<p>
Copy key configuration files and data files to CD-R.
Use script here: <url id="examples/" name="backup">
</sect1>

<sect1>Copy a music CD to CD-R
<p>
Not tested by me:
<example>
# apt-get get install cdrecord cdparanoia
# cdparanoia -s -B
# cdrecord dev=0,0,0 speed=2 -v -dao -eject defpregap=1 -audio *.wav
</example>
or,
<example>
# apt-get install cdrdao #disk at once
# cdrdao read-cd --device /dev/cdrom --driver generic-mmc \
        --paranoia-mode 3 my_cd # read cd
# cdrdao write --device /dev/cdrom --driver generic-mmc --speed 8 \
        my_cd # write a new CD
</example>
<prgn>cdrdao</prgn> does a real copy (no gaps, etc...)
</sect1>
</sect>

<sect id="x">The X program
<p>
<taglist>
<tag><ref id="xsrvr">
<item>a program on a local host that displays an X window and/or desktop 
on a user's monitor (CRT, LCD) and accepts keyboard and mouse input. 
<tag><ref id="xclnt">
<item>a program on a (local or remote) host that runs X-window-compatible 
application software.
</taglist>
This reverses the ordinary use of "server" and "client" in other
contexts.  For basics refer to <manref name="X" section="7">, the LDP
<url id="&xwindowuser-howto;" name="XWindow-User-HOWTO">, and <url
id="&remote-xapps-howto;" name="Remote X Apps mini-HOWTO">.
<p>
There are several ways of getting the "X server" (display side) to accept 
remote connections from an "X client" (application side):  
<list>
<item><prgn>xhost</prgn>
<list compact>
<item>the host list mechanism (unsecure).
<item>non-encrypted protocol (prone for eavesdropping attack).
<item>Do not use this, if possible.
<item>See <ref id="xhost"> and <manref name="xhost" section="1x">.
</list>
<item><prgn>xauth</prgn>
<list compact>
<item>the MIT magic cookie mechanism (unsecure but better than xhost).
<item>non-encrypted protocol (prone for eavesdropping attack).
<item>use this only for local connection.
<item>See <ref id="ss-xsu"> and <manref name="xauth" section="1x">.
</list>
<item><prgn>xdm</prgn>, <prgn>wdm</prgn>, <prgn>gdm</prgn>, <prgn>kdm</prgn>, ...
<list compact>
<item>See <manref name="xdm" section="1x"> and 
 <manref name="Xsecurity" section="7"> for the basics of X display access 
 control.
<item>See <manref name="wdm" section="1x">, <manref name="gdm" section="8">, 
 and <manref name="kdm.options" section="5"> for more information, 
 if these are installed.
<item>See <ref id="sys-v"> for how to disable <prgn>xdm</prgn> to gain 
 Linux console upon boot without purging <prgn>xdm</prgn> package.
</list>
<item><prgn>ssh -X</prgn>
<list compact>
<item>port forwarding mechanism through secure shell (secure).
<item>encrypted protocol (resource waste if used locally).
<item>use this for remote connection.
<item>See <ref id="xssh">.
</list>
</list>
All remote connection methods, except <prgn>ssh</prgn>, require TCP/IP
connection enabled on the X server.  See <ref id="xtcp">.

<sect1 id="xsrvr">X server
<p>
See <manref name="XFree86" section="1x"> for X server information.
<p>
To (re)configure X4 in woody, run:
<example>
# dpkg-reconfigure --p=low xserver-xfree86
</example>
<p>
Invoke X server from local console:
<example>
$ startx -- :&lt;display&gt; vtXX 
eg.:
$ startx -- :1 vt8
... start on vt8 connected to localhost:1
</example>
</sect1>

<sect1 id="xclnt">X client
<p>
Most X client programs can be started as:
<example>
client $ xterm -geometry 80x24+30+200 -fn 6x10 -display <var>hostname</var>:0 &amp;
</example>
Here, these optional command line arguments mean:
<list>
<item><tt>-geometry <var>WIDTH</var>x<var>HEIGHT</var>+<var>XOFF</var>+<var>YOFF</var></tt>: 
the initial size and location of the window.

<item><tt>-fn <var>FONTNAME</var></tt>: the font to use for displaying text.
 <tt><var>FONTNAME</var></tt> can be:
<list compact>
<item>a14: Normal size font
<item>a24: Large size font
<item>... (check available fonts by <tt>xlsfont</tt>.)
</list>
<item><tt>-display <var>displayname</var></tt>: the name of the X server to use. 
 <tt><var>displayname</var></tt> can be:
<list compact>
<item><tt><var>hostname</var>:<var>D.S</var></tt> means screen <tt><var>S</var></tt> on display
 <tt><var>D</var></tt> of host <tt><var>hostname</var></tt>; the X server for this display is
listening to TCP port 6000+D.

<item><tt><var>host</var>/unix:<var>D.S</var></tt> means screen <tt><var>S</var></tt> on display 
<var>D</var> of host <tt><var>host</var></tt>; the X server for this display is 
listening to UNIX domain socket
<file>/tmp/.X11-unix/XD</file> (so it's only reachable from <tt><var>host</var></tt>).

<item><tt><var>:D.S</var></tt> is equivalent to 
<tt><var>host</var>/unix:<var>D.S</var></tt>, where <tt><var>host</var></tt> is the local hostname.
</list>
</list>
<p>
The default <tt><var>displayname</var></tt> for the X client program (application side) 
can be set by the DISPLAY environment variable.  For example, prior to 
running an X client program, executing one of the following commands 
achieves this:
<example>
$ export DISPLAY=:0 
        # The default, local machine using the first X screen
$ export DISPLAY=<var>hostname.fulldomain.name</var>:0.2
$ export DISPLAY=localhost:0
</example>
</sect1>

<sect1 id="xtcp">TCP/IP connection to X
<p>
Because remote TCP/IP socket connection without encryption is prone 
to the eavesdropping attack, the default setting for X of the recent 
&debian; disables TCP/IP socket.  Think about using <prgn>ssh</prgn> 
for remote X connection (see <ref id="xssh">). 
<p>
Method described here is not encouraged unless one is in a very secure 
environment behind a good firewall system with only trusted users present.
Following configuration on the X server restores TCP/IP socket connection:
<example>
# find /etc/X11 -type f -print0 | xargs -0 grep nolisten
/etc/X11/xinit/xserverrc:exec /usr/bin/X11/X -dpi 100 -nolisten tcp
</example>
Remove <tt>-nolisten</tt> to allow TCP/IP listening on the X server.
</sect1>
 
<sect1 id="xhost">Remote X connection: <prgn>xhost</prgn>
<p>
<prgn>xhost</prgn> allows access based on hostnames. This is very insecure.
The following will disable host checking and allow connections from anywhere 
if TCP/IP socket connection is allowed (see <ref id="xtcp">):
<example>
$ xhost +
</example>
You can re-enable host checking with:
<example>
$ xhost -
</example>
<p>
<prgn>xhost</prgn> does not distinguish between different users on the 
remote host. Also, hostnames (addresses actually) can be spoofed. 
<p>
This method must be avoided even with more restrictive host criteria
if you're on an untrusted network (for instance with dialup PPP
access to the Internet).  See <manref name="xhost" section="1x">.
</sect1>

<sect1 id="xssh">Remote X connection: <prgn>ssh</prgn>
<p>
The use of <prgn>ssh</prgn> enables a secure connection from a local X server 
to a remote application server.  
<list>
<item>Set <tt>X11Forwarding</tt> and <tt>AllowTcpForwarding</tt> entries 
to <tt>yes</tt> in <file>/etc/ssh/sshd_config</file> of the remote host.
<item>Start the X server on the local host.
<item>Open an <prgn>xterm</prgn> in the local host.
<item>Run <prgn>ssh</prgn> to establish a connection with the remote site.  
<example>
localname @ localhost $ ssh -q -X -l loginname remotehost.domain
Password:
.....
</example>
<item>Run X application commands on the remote site.
<example>
loginname @ remotehost $ gimp &
</example>
</list>
This method allows the display of the remote X client output as if they 
were locally connected through local UNIX domain socket.
</sect1>

<sect1 id="xtermfaq"><prgn>xterm</prgn>
<p>
Learn everything about <prgn>xterm</prgn> at <url id="&xtermfaq;">
</sect1>

<sect1 id="ss-xsu">Gain root in X
<p>
If a GUI program needs to be run with root privilege, use the following
procedures to display program output on a user's X server. 
Never attempt to start an X
server directly from the root account in order to prevent possible
security risks.
<p>
Start X server as a normal user and open <prgn>xterm</prgn> console.
Then:
<example>
$ XAUTHORITY=$HOME/.Xauthority
$ export XAUTHORITY
$ su root
Password:*****
# printtool &
</example>
When using this trick to <prgn>su</prgn> to a non-root user, make
sure <file>$HOME/.Xauthority</file> is group readable by this non-root user.
<p>
This command sequence can be automated by adding few files.  From the root
account, create the file
<file>/etc/X11/Xsession.d/00xfree86-common_environment</file>, containing
following lines:
<example>
if [ -f "$HOME/.xenvironment" ]; then
    . $HOME/.xenvironment
fi
</example>
From the user account, create the file <file>$HOME/.xenvironment</file> in his
home directory, containing following lines:
<example>
# This makes X work when I su to the root account.
if [ -z "$XAUTHORITY" ]; then
        XAUTHORITY=$HOME/.Xauthority
        export XAUTHORITY
fi
</example>
Then run <prgn>su</prgn> (not <tt>su -</tt>) in an
<prgn>xterm</prgn> window of the user.  Now GUI programs started from this
<prgn>xterm</prgn> can display output on this user's X window while running
with root privilege.  This trick works as long as default Xsession is
executed.  If a user set up his customization using <file>$HOME/.xinit</file>
or <file>$HOME/.xsession</file>, above mentioned environment
<tt>XAUTHORITY</tt> variable needs to be set similary in those scripts.

<p>Alternatively, <package>sudo</package> can be used to automate the command sequence:
<example>
$ sudo xterm
... or
$ sudo -H -s
</example>
Here <file>/root/.bashrc</file> should contain:
<example>
if [ $SUDO_USER ]; then
    sudo -H -u $SUDO_USER xauth extract - $DISPLAY | xauth merge -
fi
</example>
This works fine even with the home directory of the user on an NFS
mount, because root does not read the <file>.Xauthority</file> file.
<p>
There are also several specialized packages for this purpose:
<package>kdesu</package>, <package>gksu</package>, <package>gksudo</package>,
<package>gnome-sudo</package>, and <package>xsu</package>.  Some
other methods can be used to achieve similar results: creating a symlink from
<file>/root/.Xauthority</file> to the user's corresponding one; use of the
script <url id="&suxhome;" name="sux">; or putting "<tt>xauth merge
~<var>USER_RUNNING_X</var>/.Xauthority</tt>" in the root initialization script.
<p>
See more on the <url id="&deb-dev-su;" name="debian-devel mailing list">.
</sect1>

<sect1 id="xfs-tt">TrueType fonts in X
<p>
The standard <prgn>xfs</prgn> in XFree86-4 works fine with TrueType
fonts.  You have to install a 3rd party font server such as
<prgn>xfs-xtt</prgn>, if you are using XFree86-3.
<p>
You just need to make sure that whatever apps you want to use the
TrueType fonts are linked against libXft or libfreetype (you probably
don't even have to worry about this if you're using precompiled
.debs).
<p>
Remember to install required font files and generate the 
<file>fonts.{scale,dir}</file> files so that the fonts can be indexed
and used.
<p>
Since <strong>Free</strong> fonts are sometimes limitted, installing
or sharing some commercial TrueType fonts are option for a &debian;
users. In order to make this process easy fot the user, there have 
been some convienience packages:
<list compact>
<item><package>ttf-commercial</package>
<item><package>msttcorefonts</package> (No more useful as of 8/2002 
 due to M$ policy change)
</list>
You'll have a really good selection of TT fonts at the expense of
contaminating your <strong>Free</strong> system with non-Free fonts.

<sect1 id="ss-browser">Web Browser (graphical)
<p>
There are few web browser packages with graphical display capabilities
available after woody release:
<list compact>
<item><package>mozilla</package> The browser (new)
<item><package>galeon</package> The browser with gnome UI (new)
<item><package>konqueror</package> KDE browser
<item><package>amaya-gtk</package> W3C reference browser
<item><package>amaya-lesstif</package> W3C reference browser
<item><package>netscape-...</package> (many, old)
<item><package>communicator-...</package> (many, old)
<item>...
</list>
The version of <package>mozilla</package> must match with 
the version <package>galeon</package> requires.  Except UI, these 2 programs
share HTML rendering engine (Gocko).
<p>
Plug in for the browsers such as <package>mozilla</package> and
<package>galeon</package> can be enabled by installing "<tt>*.so</tt>" 
manually to the plugin directory and restart the browsers.
<p>
Plugin resources:
<list compact>
<item>Java plugin: install binary "J2SE" from <url id="&javasunhome;">.
<item>Flash plugin: install binary "Macromedia Flash Player 5" from
 <url id="&flashhome;">.
<item><package>freewrl</package>: vrml browser and netscape plugin
<item>...
</list>
</sect1>

<sect1 id="x-cjk">CJK and X
<p>
Reference: 
<list compact>
<item><ref id="l10n">
<item><url id="&suse-cjk;" name="Suse pages for CJK">
</list>
<p>
Here, let us try for Japanese:
<list>
<item>install Japanese packages:
 <list compact>
 <item><package>kinput2-canna-wnn</package> &mdash; An input server 
   for X11 applications.
 <item><package>kterm</package>, <package>mlterm</package>, and 
  <package>jfbterm</package>: Japanese compatible terminals.
 <item><package>egg</package> &mdash; Input Method Architecture for Emacsen
 <item><package>canna</package> &mdash; A Japanese input system (server and dictionary).
 <item><package>freewnn-jserver</package> &mdash; Network-extensible Kana-to-Kanji conversion system.
 <item>... and all the Japanese font packages.
 </list>
 <p>
 In reality, use <prgn>tasksel</prgn> or <prgn>aptitude</prgn> to select
 "Japanese environment" and avoid installing softwares which conflict
 with the normal system.
<item>add a locale that supports Japanese characters 
 (e.g. ja_JP.UTF-8, see <ref id="l10n">).
<item>add following environment values in <file>~/.xenvironment</file>
  using the same trick used in <ref id="ss-xsu">.
<example>
XMODIFIERS="@im=kinput2"
LC_CTYPE=ja_JP.UTF-8 # some japanese locale
</example>
(Or manually do so in <prgn>xterm</prgn> before starting an application.)
<item>activate XIM <prgn>kinput2</prgn> by adding
 <tt>*inputMethod: kinput2</tt> to your X resources file 
 (Looks like debian takes care of this).
<item>Some applications (such as <prgn>mlterm</prgn>) also allow 
  you to set up <tt>*inputMethod:</tt> information dynamically 
  at run time (press Ctrl-MouseBotton-3 in mlterm).
<p>
</list>
If you started the application, you should press 
"<strong>Shift+Space</strong>" and a
window should popup stating that you now may input Japanese characters.
</sect>

<sect id="ssh">SSH
<p>
SSH (Secure SHell) is the secure way to connect over the Internet.  A free
version of SSH called openSSH is available as <package>ssh</package> package
on &debian;.

<sect1 id="ssh-basics">Basics
<p>
First install openSSH server and client.
<example>
# apt-get update && apt-get install ssh
</example>
The non-US entry in the <file>/etc/apt/source.list</file> is required.
<file>/etc/ssh/sshd_not_to_be_run</file> must not be present if one wish to 
run openSSH server.
<p>
SSH has 2 authentication protocols:
<list>
<item>SSH protocol version 1: 
 <list compact>
<item>potato version only supports this protocol.
<item>available authentication methods:
  <list compact>
<item>RSAAuthentication: RSA identity key based user authentication
<item>RhostsAuthentication: .rhosts based host authentication 
 (insecure, disabled)
<item>RhostsRSAAuthentication: .rhosts authentication combined with 
 RSA host key (disabled)
<item>ChallengeResponseAuthentication: RSA challenge-response authentication
<item>PasswordAuthentication: password based authentication
  </list>
 </list>
<item>SSH protocol version 2: 
 <list compact>
<item>post-woody versions use this as primary protocol.
<item>available authentication methods:
  <list compact>
<item>PubkeyAuthentication: public key based user authentication
<item>HostbasedAuthentication: .rhosts or /etc/hosts.equiv authentication 
 combined with public key client host authentication  (disabled)
<item>ChallengeResponseAuthentication: chllenge-response authentication
<item>PasswordAuthentication: password based authentication
  </list>
 </list>
</list>

<p>
Be careful about these differences if you are migrating to woody or using 
non-&debian; system.  
<p>
See <file>/usr/share/doc/ssh/README.Debian.gz</file>,
<manref name="ssh" section="1">, 
<manref name="sshd" section="8">,
<manref name="ssh-agent" section="1">, and
<manref name="ssh-keygen" section="1"> for details.

<p>
Followings are the key configuration files:

<list>

<item><file>/etc/ssh/ssh_config</file>: SSH client defaults.
 See <manref name="ssh" section="1">.  Notable entries are:

 <list compact>
<item><tt>Host</tt>: Restricts the following declarations 
  (up to the next Host keyword) to be only for those hosts 
   that match one of the patterns given after the keyword.
<item><tt>Protocol</tt>: Specifies the SSH protocol versions.  
 The default is "2,1".
<item><tt>PreferredAuthentications</tt> Specifies the SSH2 client 
 authentication method.  The default is 
"hostbased,publickey,keyboard-interactive,password".
<item><tt>ForwardX11</tt>: The default is disabled.  This can be
 overiden by a command line option "<tt>-X</tt>".
 </list>

<item><file>/etc/ssh/sshd_config</file>: SSH server defaults.
 See <manref name="sshd" section="8">.  Notable entries are:

 <list compact>
<item><tt>ListenAddress</tt>: Specifies the local addresses 
 sshd should listen on. Multiple options are permitted.
<item><tt>AllowTcpForwarding</tt>: The default is disabled.  
<item><tt>X11Forwarding</tt>: The default is disabled.  
 </list>

<item><file>$HOME/.ssh/authorized_keys</file>: the lists of the default 
public keys that client used to connect to this account on this host.
See <manref name="ssh-keygen" section="1">

<item><file>$HOME/.ssh/identity</file>: 
See <manref name="ssh-add" section="1">
and <manref name="ssh-agent" section="1">.
</list>

<p>
The following will start an <prgn>ssh</prgn> connection from client.
<example>
$ ssh username@hostname.domain.ext
$ ssh -1 username@hostname.domain.ext # Force SSH version 1
</example>
For the user, <prgn>ssh</prgn> functions as a smarter and more secure 
<prgn>telnet</prgn> (will not bomb with ^]).

</sect1>

<sect1 id="ssh-forward">Port forwarding &ndash; for SMTP/POP3 tunneling
<p>
To establish a pipe to connect to port 25 of <var>remote-server</var> from port 4025 of
localhost, and to port 110 of <var>remote-server</var> from port 4110 of localhost
through <prgn>ssh</prgn>, execute on the local machine:
<example>
# ssh -q -L 4025:remote-server:25 4110:remote-server:110 \
           username@remote-server
</example>
This is a secure way to make connections to SMTP/POP3 servers over the Internet.
Set <tt>AllowTcpForwarding</tt> entry to <tt>yes</tt> in 
<file>/etc/ssh/sshd_config</file> of the remote host.
</sect1>

<sect1 id="ssh-rsa">Connect with fewer passwords
<p>
One can avoid having to remember a password for each remote system by using
RSAAuthentication (SSH1 protocol) or PubkeyAuthentication (SSH2 protocol).  
<p>
On the remote system, set respective entries,
"RSAAuthentication yes" or "PubkeyAuthentication yes", in 
<file>/etc/ssh/sshd_config</file>.
<p>
Then generate authentication keys locally and install its public key
in the remote system:
<example>
$ ssh-keygen          # RSAAuthentication: RSA1 key for SSH1
$ cat .ssh/id_rsa.pub | ssh user1@remote \
        "cat - &gt;&gt;.ssh/authorized_keys"
...
$ ssh-keygen -t rsa   # PubkeyAuthentication: RSA key for SSH2
$ cat .ssh/id_rsa.pub | ssh user1@remote \
        "cat - &gt;&gt;.ssh/authorized_keys"
...
$ ssh-keygen -t dsa   # PubkeyAuthentication: DSA key for SSH2
$ cat .ssh/id_dsa.pub | ssh user1@remote \
        "cat - &gt;&gt;.ssh/authorized_keys"
</example>
One can change the passphrase later with "<tt>ssh-keygen -p</tt>".
Make sure to verify settings by testing the connection.  In case of any
problem, use "<tt>ssh -v</tt>".
<p>
You can add options to the entries in <prgn>authorized_keys</prgn> to limit
hosts and to run specific commands. See <manref name="sshd" section="8"> for details.
<p>
Note that SSH2 has <tt>HostbaseAuthentication</tt>. For this to work, 
you must adjust settings of <tt>HostbasedAuthentication</tt> to <tt>yes</tt> in 
both <file>/etc/ssh/sshd_config</file> on the server machine and 
<file>/etc/ssh/ssh_config</file> or <file>$HOME/.ssh/config</file> on 
the client machine.
</sect1>

<sect1 id="ssh-client">Foreign SSH client
<p>
There are few free SSH client available on non-Unix like environment.
<taglist>
<tag>Windows
<item><url id="&puttyhome;" name="puTTY"> (GPL)
<tag>Windows (cygwin)
<item>SSH in <url id="&cygwinhome;" name="cygwin"> (GPL)
<tag>Macintosh
<item><url id="&macsshhome;" name="macSSH"> (shareware?, GPL?)
</taglist>
See <url id="&sfdochome;" name="SorceForge.net, site documentation">, 
"6. CVS Instructions".

<sect1 id="ssh-agent">SSH agent
<p>
<!-- XXX FIXME XXX ssh-agent can be improved -->
Just put your public key into <file>~/.ssh/authorized_keys</file>, and
you're all set:
<example>
$ ssh-agent
$ # paste the output to your shell
$ ssh-add .ssh/identity
$ # or ssh-add .ssh/id_dsa or whatever your private key is named
$ scp <var>remote.host.with.public.key</var>
</example>
For more, read <manref name="ssh-agent" section="1">and
<manref name="ssh-add" section="1">.
</sect1>

<sect1 id="ssh-trouble">Troubles
<p>
If you have problems, check the permissions of configuration files and run
<prgn>ssh</prgn> with "<tt>-v</tt>" option.
<p>
Use "<tt>-P</tt>" option if you are root and have trouble with a firewall; this avoids the use
of server ports 1&ndash;1023.
<p>
If <prgn>ssh</prgn> connections to a remote site suddenly stop working, it may be the
result of tinkering by the sysadmin, most likely a change in
<prgn>host_key</prgn> during system maintenance.  After making sure this is
the case and nobody is trying to fake the remote host by some clever hack, one
can regain connection by removing the <prgn>host_key</prgn> entry from
<file>$HOME/.ssh/known_hosts</file> on the local machine.
</sect1>

</sect>

<sect id="mail">Mail programs
<p>
Mail configuration divides into three categories:
<list>
<item>MTA: <prgn>exim</prgn>
<item>MUA: <prgn>mutt</prgn>
<item>Utilities: <prgn>procmail</prgn>, <prgn>fetchmail</prgn>,
<prgn>mail</prgn>, ...
</list>

<sect1>Mail transport agent (Exim)
<p>
References:
<list compact>
<item><package>exim-doc</package> and <package>exim-doc-html</package> packages
<item><url id="&eximhome;">
</list>
<p>
Use <prgn>exim</prgn> as the mail transfer agent (MTA). Configure:
<example>
/etc/exim/exim.conf     "eximconfig" to create and edit
/etc/inetd.conf         comment out smtp to run exim as daemon
/etc/email-addresses    Add spoofed source address lists
check filters using exim -brw, -bf, -bF, -bV, ... etc.
</example>

<sect2>A catchall for nonexistent email addresses (Exim)
<p>
In <file>/etc/exim/exim.conf</file> (Woody or later),
in the DIRECTORS part, at the end (after the localuser: director)
add a catch-all director that matches all addresses that the
previous directors couldn't resolve (per Miquel van Smoorenburg):
<example>
catchall:
  driver = smartuser
    new_address = webmaster@mydomain.com
</example>
<p>
If one wants to have more a detailed recipe for each virtual domain, etc., 
add the following at the end of <file>/etc/exim/exim.conf</file> 
(per me, not well tested):
<example>
*@yourdomain.com ${lookup{$1}lsearch*{/etc/email-addresses} \
        {$value}fail} T
</example>
Then have an "*" entry in <file>/etc/email-addresses</file>
</sect1>

<sect1>Mail utility (Fetchmail)
<p>
<prgn>fetchmail</prgn> is run in daemon mode to fetch mail from a POP3 account
with an ISP into the local mail system.  Configure:
<example>
/etc/init.d/fetchmail   
/etc/rc?.d/???fetchmail run update-rc.d fetchmail default priority 30
/etc/fetchmailrc        configuration file (chown 600, owned by fetchmail)
</example>
<p>
Information on how to start fetchmail as a daemon from the <prgn>init.d</prgn> 
script for potato is confusing (woody fixed this). See
<url id="&examples;" name="/etc/init.d/fetchmail and /etc/fetchmailrc">
<p>
If your email headers are contaminated by ^M due to your ISP's mailer, add
"stripcr" to your options in <file>$HOME/.fetchmailrc</file>:
<example>
options fetchall no keep stripcr
</example>
</sect1>

<sect1>Mail utility (Procmail)
<p>
<prgn>procmail</prgn> is a local mail delivery and filter program. One needs to create 
<file>$HOME/.procmailrc</file> for each account that uses it. Example:
<url id="&examples;" name="_procmailrc">
</sect1>

<sect1>Mail user agent (Mutt)
<p>
Use <prgn>mutt</prgn> as the mail user agent (MUA) in combination with
<prgn>vim</prgn>.
Customize with <file>~/.muttrc</file>; for example:

<example>
# use visual mode and "gq" to reformat quotes
set editor="vim -c 'set tw=72 et ft=mail'"
#
# header weeding taken from the manual (Sven's Draconian header weeding)
#
ignore *
unignore from: date subject to cc
unignore user-agent x-mailer
hdr_order from subject to cc date user-agent x-mailer
auto_view application/msword
....
</example>
Add the following to <file>/etc/mailcap</file> or
<file>$HOME/.mailcap</file> to display HTML mail and MS Word attachments
inline:
<example>
text/html; lynx -force_html %s; needsterminal;
application/msword; /usr/bin/antiword '%s'; copiousoutput;
description="Microsoft Word Text"; nametemplate=%s.doc
</example>

</sect1>

</sect>

<sect id="l10n">Localization
<p>
Although &debian system is internationalized and supports conventions 
which depend on the language and the cultural rules (see <ref id="i18n">).  
User still needs to customize his working environment to his needs.  
This process is called localization.

<sect1 id="locales">Locales
<p>
A locale is a set of language and cultural rules. These
cover aspects such as the language of system messages, different
character sets, spelling conventions, etc. A program
needs to be able to determine its locale and act accordingly 
to be portable to different cultures.  Glibc offers support
to this functionality to the program as a library.
See <manref name="locale" section="7">.

<sect1 id="activate-locales">Activate locale support capability
<p>
&debian; does <strong>not</strong> come with all available
locales pre-compiled. Check <file>/usr/lib/locale</file> to see which
locales (besides the default "C") are compiled for your system. If the one
you need is not present, you have two options:
<list compact>
 <item>Edit <file>/etc/locale.gen</file> to add the desired locale, then
   run <prgn>locale-gen</prgn> as root to compile it. See <manref
   name="locale-gen" section="8"> and the manpages listed in its "SEE ALSO"
   section.
 <item>Run <tt>dpkg-reconfigure locales</tt> to reconfigure the
   <package>locales</package> package.
</list>

<sect1 id="env-locale">Activate a particular <tt>locale</tt>
<p>
The following environment variables are evaluated in this order to provide
particular locale values to programs:
<enumlist>
<item>LANGUAGE: This environment variable consists of a colon-separated 
      list of locale names in order of priority. Used only if the POSIX
      locale is set to a value other than "C" [in woody; the potato version
      always has priority over the POSIX locale]. (GNU extension)
<item>LC_ALL: If this is non-null, the value is used for all locale
      categories. (POSIX.1) Usually "" (null).
<item>LC_*: If this is non-null, the value is used
      for the corresponding category (POSIX.1).  Usually "C".
<p>
      LC_* variables are:
 <list compact>
<item>LC_CTYPE: Character classification and case conversion.
<item>LC_COLLATE: Collation order.
<item>LC_TIME: Date and time formats.
<item>LC_NUMERIC: Non-monetary numeric formats.
<item>LC_MONETARY: Monetary formats.
<item>LC_MESSAGES: Formats of informative and diagnostic messages and
            interactive responses.
<item>LC_PAPER: Paper size.
<item>LC_NAME: Name formats.
<item>LC_ADDRESS: Address formats and location information.
<item>LC_TELEPHONE: Telephone number formats.
<item>LC_MEASUREMENT: Measurement units (Metric or Other).
<item>LC_IDENTIFICATION: Metadata about the locale information.
 </list>
<item>LANG:   If this is non-null and LC_ALL is undefined, the value is used
      for all LC_* locale categories with undefined values. (POSIX.1) Usually
      "C".
</enumlist>
Note that some applications (e.g. Netscape 4) ignore LC_* settings.
<p>
For example, in the case of the Italian-language manual pages,
LC_MESSAGES needs to be set to <tt>it</tt>.  The <prgn/man/ program will
then search for Italian manual pages under <file>/usr/share/man/it/</file>.

<sect1 id="beyond-locale">Beyond <tt>locale</tt>
<p>
Programs may need to be configured beyond <tt>locale</tt> configuration
to enable comfortable working environment.
<p>
<package>language-env</package> package and its command 
<prgn>set-language-env</prgn> is a great helper script 
on &debian; system.
<p>
Also language specific entries in "task" system accessed through 
<prgn>tasksel</prgn> or <prgn>aptitudes</prgn> is another useful
resource.
<P>
For X example, see <ref id="x-cjk">.
<p>
For more information, see <url id="&suse-cjk;" name="Suse pages for CJK">.
Also see the internationalization document, <url id="&intro-i18n;" 
name="Introduction to i18n">. It is aimed at developers but is also 
useful for system administrators.

</sect1>
</sect>
</chapt>
