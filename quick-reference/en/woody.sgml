<!-- CVS revision of this document "$Revision: 1.14 $"  -->
<chapt id="woody">Upgrading a distribution

<![ %f-ref [
<p>
Official release notes for upgrading are located at
<url id="&stable-release;">
and
<url id="&testing-release;"> (work in progress).

<sect>Transition preparation ("stable" to "testing")
<p>
Network upgrade to "testing" can be done as follows (run the script 
<url id="&examples;" 
name="go-woody"> to do this in one command):
<example>
# cd /etc/apt
# cp -f sources.list sources.old 
# :&gt;sources.list  
# cd /
# apt-setup noprobe 
 ... select http or ftp
# cd /etc/apt
# grep -e "^deb " sources.list             &gt;sources.deb
# grep -e "^deb-" sources.list             &gt;sources.src
# sed -e "s/^d/#d/" \
  /usr/share/doc/apt/examples/sources.list &gt;sources.list
# sed -e "s/stable/testing/"  \
  sources.deb &gt;&gt;sources.list
# apt-get update
# apt-get install apt apt-utils
# cat &gt;preferences &lt;&lt;EOF
 Package: *
 Pin: release a=testing
 Pin-Priority: 700
 
 Package: *
 Pin: release a=unstable
 Pin-Priority: 70

 EOF
# sed -e "s/stable/unstable/" sources.deb \
  &gt;&gt;sources.list
# sed -e "s/stable/unstable/" sources.src | \
 sed -e "s/^deb-/#deb-/"  &gt;&gt;sources.list
</example>
A guideline for <file>/etc/apt/preferences</file> (see <manref
name="apt_preferences" section="5">):
<example>
track stable:            change  Pin-Priority of testing  to  80
track testing:           keep as is (install unstable by /unstable)
track testing(unstable): change  Pin-Priority of unstable to 600
track unstable(testing): change  Pin-Priority of unstable to 800
</example>
A guideline for the choice of Pin-Priority is to move from the top to bottom
in the above table as the time moves from a time immediately after a
distribution release to a time of freeze for the next release.
<p>
Examples of <file>/etc/apt/preferences</file> which lock some key
packages to the more mature version while tracking the less mature version
for other nonessential packages are available in the 
<url id="&examples;" name="examples subdirectory"> as
<file>preferences.testing</file> and <file>preferences.unstable</file>.  On
the other hand, <file>preferences.stable</file> forces all packages to be
downgraded to <em>stable</em>.
<p>
Make sure to set up APT to use a proxy, if necessary, by
setting the <tt>http_proxy</tt> environment 
variable or set the http value in <file>/etc/apt/apt.conf</file>.
<p>
The procedure described in this section only upgrades APT 
and a minimum set of packages to avoid dependency-related problems.
</sect>
]]>

<sect>Upgrade to "testing"
<p>
After the above preparation, the system can be upgraded.

<sect1>Best upgrade practice using <prgn>dselect</prgn>
<p>
If a system has many packages which include <tt>-dev</tt> packages, etc., 
the following method using <prgn>dselect</prgn> is recommended for 
fine-grained package control.
<example>
# dselect update # always do this before upgrade
# dselect select # select packages in "suggests" and "recommends"
# dselect install
</example>
<prgn>dselect</prgn> always works :)

<![ %f-ref [
<sect1>Depreciated upgrade practice using <prgn>apt-get</prgn>
<p>
<strong>Use of <prgn>apt-get</prgn> described below is wide spread
but it is <em>not</em> recommended for system upgrades.</strong>
]]>

If you need to upgrade without <prgn>dselect</prgn> after Woody,
consider <prgn>aptitudes</prgn> and other options.

<![ %f-ref [
<p>
If a system does not have many packages or the &debian; archive 
did not have major changes, the following may be sufficient 
(sometime).
<example>
# apt-get update # always do this before upgrade
 ... to upgrade the system with "depends" selections: 
# apt-get upgrade                     # always do this before upgrade
 ... to upgrade the whole system with "depends" selections: 
# apt-get -u dist-upgrade
 ... or to upgrade and stay with current dselect settings (new, better):
# apt-get -u dselect-upgrade         # use dselect setup result
</example>
<p>
Since this upgrade method uses <prgn>apt-get</prgn>, its handling of 
<em>recommends</em> and <em>suggests</em> is limited. 
See <ref id="depends">.
]]>

</sect>

<sect>Woody configuration
<p>
For a freshly installed woody system, edit <file>/etc/apt/sources.list</file>,
<file>/etc/apt/apt.conf</file>, and <file>/etc/apt/preferences</file> 
to achieve the same structure as described in the above section.
<p>
APT in potato did not have the functions described in 
<manref name="apt_preferences" section="5">.
</sect>

<![ %f-ref [
<sect id="spy">Optimized <file>sources.list</file>
<p>
Create <file>sources.list</file> automatically, based on latency
and bandwidth.
<example>
# apt-get install apt-spy
# cd /etc/apt ; mv sources.list sources.list.org
# apt-spy -d testing -l sources.apt
</example>
<prgn>netselect-apt</prgn> is very similar to <prgn>apt-spy</prgn>.
It creates a more complete <file>sources.list</file>, but uses an 
inferior method of choosing the best mirror (ping time comparison).
<prgn>apt-setup</prgn> is the manual method for selecting the 
mirrors in <file>sources.list</file>, but is still the best way
to choose mirrors until <prgn>apt-spy</prgn> improves.
<p>
These optimization efforts did not produce significant improvement
for me.  Just using nearby sites chosen by <prgn>apt-setup</prgn> 
were sufficient.
</sect>

]]>

</chapt>

