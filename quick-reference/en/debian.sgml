<!-- CVS revision of this document "$Revision: 1.57 $"  -->

<!--Line width ruler (ruler uses 78 characters) 34567890123456789012345-->

<chapt id="package">Debian package management

<p>
<prgn>aptitude</prgn> is now the preferred text front end
for APT, the Advanced Package Tool.  It remembers which packages you
deliberately installed and which packages were pulled in through
dependencies; the latter packages are automatically de-installed by
<prgn>aptitude</prgn> when they are no longer needed by any deliberately
installed packages.
It has advanced package-filtering features but these can be
difficult to configure.
<p>
<prgn>synaptic</prgn> is now the preferred Gtk GUI front end for APT.
Its package filtering capability is easier to use
than <prgn>aptitude</prgn>'s.
It also has experimental support for
<url id="&debtags;" name="Debian Package Tags">.
<p>
To reduce the network load on the &debian; repositories
and to speed up your downloads
you should get packages from &debian; mirror sites.
<p>
If you need to install the same package on several machines
on your local network then
you can set up a local HTTP proxy using <prgn>squid</prgn>
for packages downloaded through APT.
If necessary, set the <tt>http_proxy</tt>
environment variable or set the <tt>http</tt> value in
<file>/etc/apt/apt.conf</file>. 
<p>
Although APT's pinning feature, described in
<manref name="apt_preferences" section="5">,
is powerful, its effects can be difficult to understand and
manage.
You should consider it an Advanced Feature.
<p>
<![%f-ref;[
The use of the method described in <ref id="chroot"> is desirable for
]]>
<![%q-ref;[
The use of chroot is desirable for
]]>
simultaneously securing both system stability and access to 
the latest versions of software.
<p>
This chapter is based on a post-Woody system.
Some features may require a Sarge system or later.

<sect id="pkg-intro">Introduction
<p>
If reading all the developer documentation is too much for you, read this 
chapter first and start enjoying the full power of Debian with 
<tt>testing</tt>/<tt>unstable</tt> :-)

<sect1>Main package management tools
<p>
<example>
dpkg      &ndash; &debian; package file installer
apt-get   &ndash; Command line front end for APT
aptitude  &ndash; Advanced text and command line front end for APT
synaptic  &ndash; Gtk GUI front end for APT
dselect   &ndash; Menu-driven package manager
tasksel   &ndash; Task installer
</example>
These tools aren't all alternatives to one another.
For example, <prgn>dselect</prgn> uses both APT and <prgn>dpkg</prgn>.
<p>
APT uses <file>/var/lib/apt/lists/*</file> for tracking available packages
while <prgn>dpkg</prgn> uses <file>/var/lib/dpkg/available</file>.  If you
have installed packages using <prgn>aptitude</prgn> or other APT
front ends and you want to use <prgn>dselect</prgn> to install
packages then the first thing you should do is update
<file>/var/lib/dpkg/available</file> by selecting
<tt>[U]pdate</tt> from <prgn>dselect</prgn>'s menu
(or by running "<tt>dselect update</tt>").
<p>
<prgn>apt-get</prgn> automatically installs all packages
upon which a requested package Depends.
It does not install the packages
that a requested package merely Recommends or Suggests.
<p>
<prgn>aptitude</prgn>, in contrast, can be configured to install packages
that a requested package Recommends or Suggests.
<p>
<prgn>dselect</prgn> presents the user with a list of packages
that a selected package Recommends or Suggests
and allows these to be selected or deselected individually.
<![%f-ref;[
See <ref id="depends">.
]]>
</sect1>

<sect1>Convenience tools
<p>
<example>
dpkg-reconfigure  - reconfigure an already installed package
                    (if it uses debconf)
dpkg-source       - manage source package file
dpkg-buildpackage - automate the building of a package file
apt-cache         - check package archive in local cache
</example>
</sect1>
</sect>

<sect id="apt-install">Beginning &debian; package management
<p>

<sect1 id="setup-apt">Set up APT
<p>
Set up <file>sources.list</file> as described in
<ref id="testing-transition">.
<footnote>
If you track <tt>testing</tt> or <tt>unstable</tt>
you can remove references to <tt>stable</tt>
from <file>/etc/apt/sources.list</file> and
<file>/etc/apt/preferences</file>
because <tt>testing</tt> starts as a copy of <tt>stable</tt>.
</footnote>

<![%f-ref;[
Also refer to
<ref id="install">, <ref id="woody">, and <ref id="bin-editor">.
]]>

<sect1 id="tasksel">Installing tasks
<p>
You can install sets of packages typically required in order to
put a &debian; system to a certain use.
These sets of packages are called "tasks".
<p>
The simplest way to install tasks at the time of initial installation
is to use <prgn>tasksel</prgn>.
Note that you must run
<example>dselect update</example>
before using it.
<p>
<prgn>aptitude</prgn> can also install tasks and is the tool
recommended for this purpose.
It enables you to deselect individual packages within tasks
before proceeding to the installation step.
</sect1>

<sect1 id="aptitude"><prgn>aptitude</prgn>
<p>
<prgn>aptitude</prgn> is a new menu-driven package installer similar to
<prgn>dselect</prgn> but built from scratch on top of APT.
It can be used as an alternative to <prgn>apt-get</prgn> for most
commands.
See <manref name="aptitude" section="1"> and <file>&f-aptitude-readme;</file>.
<p>
Once you start using <prgn>aptitude</prgn> it is best to continue
using it rather than alternative methods of installing packages;
otherwise you lose the advantage of <prgn>aptitude</prgn> keeping track
of which packages you have deliberately installed.
<p>
<prgn>aptitude</prgn> in full screen mode accepts single-key commands 
which are usually lowercase. Notable key strokes are:
<example>
Keystroke   Action
F10         Menu
?           Help for keystroke (complete listing)
u           Update package archive information
+           Mark the package to be upgraded or newly installed
-           Mark the package to be removed (keep config)
_           Mark the package to be purged (remove config)
=           Place the package on hold
U           Mark all upgradable packages to be upgraded
g           Download and install selected packages
q           Quit current screen and save changes
x           Quit current screen and discard changes
Enter       View information about a package
C           View a package's changelog
l           Change the limit for the displayed packages
/           Search for the first match
\           Repeat the last search
</example>
Like <prgn>apt-get</prgn>, <prgn>aptitude</prgn> installs packages
upon which a selected package Depends.
<prgn>aptitude</prgn> also offers the option to pull in packages
that a to-be-installed package Recommends or Suggests. 
You can change the default behavior by choosing
<tt>F10 -> Options -> Dependency handling</tt> in its menu.
<p>
Other advantages of <prgn>aptitude</prgn> are:
<list compact>
<item><prgn>aptitude</prgn> offers access to all versions of a package.
<item><prgn>aptitude</prgn> logs its actions in <file>&f-aptitude-log;</file>.
<item><prgn>aptitude</prgn> makes it easy to keep track of obsolete software
by listing under "Obsolete and Locally Created Packages".
<item><prgn>aptitude</prgn> includes a fairly powerful system for searching
particular packages and limiting the package display.
Users familiar with <prgn>mutt</prgn> will pick up quickly,
as mutt  was the inspiration for the expression syntax.
See "SEARCHING, LIMITING, AND EXPRESSIONS" in 
<file>&f-aptitude-readme;</file>.
<item><prgn>aptitude</prgn> in full screen mode has <prgn>su</prgn> 
functionality embeded and can be run from normal user
until you really need administrative privileges.
</list>
</sect1>

<sect1 id="dselect"><prgn>dselect</prgn>
<p>
In stable releases up to and including Potato,
<prgn>dselect</prgn> was the principal package maintenance tool.
For Sarge, you should consider using <prgn>aptitude</prgn> instead.
<p>
When started, <prgn>dselect</prgn> automatically selects all "Required",
"Important", and "Standard" packages.
<p>
<prgn>dselect</prgn> has a somewhat strange user interface.
Most people get used to it, however.
It has four commands
(Capital means CAPITAL!):
<example>
Key-stroke  Action
Q           Quit. Confirm current selection and quit anyway. 
            (override dependencies)
R           Revert! I did not mean it.
D           Damn it! I do not care what dselect thinks.  Just Do it!
U           Set all to sUggested state
</example>
With <tt>D</tt> and <tt>Q</tt>, you can select conflicting selections at your
own risk.  Handle these commands with care.
<p>
Add a line containing the option "expert" in
<file>/etc/dpkg/dselect.cfg</file> to reduce noise.
<p>
If your machine runs <prgn>dselect</prgn> slowly
then you might consider running <prgn>dselect</prgn>
on another (faster) machine in order to
determine the packages you want to install, then use
<tt>apt-get install</tt> on the slow machine to install them.
</sect1>

<sect1 id="apt-track">Tracking a distribution using APT
<p>
To track the <tt>testing</tt> distribution as it changes, make
your <file>/etc/apt/preferences</file> file look like this:
<example>
Package: *
Pin: release a=testing
Pin-Priority: 800

Package: *
Pin: release a=stable
Pin-Priority: 600
</example>
Note that tracking the <tt>testing</tt> distribution
can have the side effect of delaying the installation
of packages containing security fixes.
Such packages are uploaded to <tt>unstable</tt> and
migrate to <tt>testing</tt> only after a delay.
<p>
See <manref name="apt_preferences" section="5"> for more
complicated examples which will allow you, for example,
to track <tt>testing</tt> while installing selected packages
from <tt>unstable</tt>.
<p>
Examples which lock particular packages at particular versions
while tracking other packages as they are released
are available in the 
<url id="&examples;" name="examples subdirectory"> as
<file>preferences.testing</file> and <file>preferences.unstable</file>.
<p>
If you mix distributions, e.g.,
<tt>testing</tt> with <tt>stable</tt> or
<tt>unstable</tt> with <tt>stable</tt>,
you will eventually pull in core packages
such as <package>libc6</package> from
<tt>testing</tt> or <tt>unstable</tt> and there
is no guarantee that these will not contain bugs.
You have been warned.
<p>
Another example, <file>preferences.stable</file>,
forces all packages to be downgraded to <tt>stable</tt>.
<p>
Downgrading from a later release of a <strong>package</strong>
to an earlier one 
is not officially supported in &debian;.
However, you may find that you have to downgrade a specific package
in order to re-install a version of a package that works
when a new version malfunctions.  You may find these previous
package files locally in <file>/var/cache/apt/archives/</file> or
remotely at <url id="&snapshothome;">.  
See also <ref id="rescue-dpkg">.
<p>
Downgrading from a later release of a <strong>distribution</strong>
to an earlier one
is not officially supported either
and is very likely to cause problems.
However, this may be worth trying as a last resort
if you are desperate.
</sect1>

<sect1 id="apt-commands"><prgn>aptitude</prgn>, <prgn>apt-get</prgn> and <prgn>apt-cache</prgn> commands
<p>
While tracking <tt>testing</tt> as described in the above example
you can manage the system by using the following commands:
<list>
<item><tt>aptitude upgrade</tt> (or
      <tt>apt-get upgrade</tt> or
      <tt>aptitude dist-upgrade</tt> or 
      <tt>apt-get dist-upgrade</tt>)
 <p>These track the <tt>testing</tt> distribution &mdash;
 they upgrade each package on the system,
 after installing versions of packages upon which it Depends,
 from the <tt>testing</tt> distribution.
<footnote>
The difference between <tt>upgrade</tt> and <tt>dist-upgrade</tt>
only appears when new versions of packages stand in different
dependency relationships from old versions of those packages.
See <manref name="apt-get" section="8"> for details.
<p>
<tt>aptitude upgrade</tt> and <tt>aptitude dist-upgrade</tt> start
<prgn>aptitude</prgn> in the commandline mode.  You can switch these
to full screen mode by pressing <tt>e</tt> key.
</footnote>
<item><tt>apt-get dselect-upgrade</tt>
 <p>This tracks the <tt>testing</tt> distribution &mdash;
 it upgrades each package on the system
 according to the selections of <prgn>dselect</prgn>.
<item><tt>aptitude -R -G install <var>package</var></tt> (or
      <tt>apt-get install <var>package</var></tt>)
 <p>This installs <var>package</var> and packages upon which it Depends
 from the <tt>testing</tt> distribution.
<item><tt>aptitude -r -G install <var>package</var></tt>
 <p>This installs <var>package</var> and packages upon which it Depends
 and packages that it Recommends
 from the <tt>testing</tt> distribution.
<item><tt>aptitude -r -g install <var>package</var></tt>
 <p>This installs <var>package</var> and packages upon which it Depends
 and packages that it Recommends or Suggests
 from the <tt>testing</tt> distribution.
<item><tt>aptitude install <var>package</var>/unstable</tt>
 <p>This installs <var>package</var> from the <tt>unstable</tt> distribution
 while installing its dependencies from the <tt>testing</tt> distribution.
<item><tt>aptitude install -t unstable <var>package</var></tt>
 <p>This installs <var>package</var> from the <tt>unstable</tt> distribution while
 installing its dependencies also from the <tt>unstable</tt> distribution
 by setting the Pin-Priority of <tt>unstable</tt> to 990.

<item><tt>apt-cache policy <var>foo bar ...</var></tt>
 <p>This checks the status of packages <var>foo bar ...</var>.
<item><tt>aptitude show <var>foo bar ...</var> | less</tt>
(or <tt>apt-cache show <var>foo bar ...</var> | less</tt>)
 <p>This checks the information for packages <var>foo bar ...</var>.
<item><tt>aptitude install <var>foo=2.2.4-1</var></tt>
 <p>This installs the particular version <var>2.2.4-1</var> of the <var>foo</var> 
 package.
<item><tt>aptitude install <var>foo bar-</var></tt>
 <p>This installs the <var>foo</var> package and removes the <var>bar</var> package
<item><tt>aptitude remove <var>bar</var></tt>
 <p>This removes the <var>bar</var> package
 but not its configuration files.
<item><tt>aptitude purge <var>bar</var></tt>
 <p>This removes the <var>bar</var> package
 together with all its configuration files.
</list>
In the above examples, giving <prgn>apt-get</prgn>
the <tt>-u</tt> option causes it
to print a list of all packages that are to be upgraded
and to prompt the user before taking action.
The following makes <prgn>apt-get</prgn> always do this:
<example>
$ cat &gt;&gt; /etc/apt/apt.conf &lt;&lt; .
// Always show packages to be upgraded (-u)
APT::Get::Show-Upgraded "true";
.
</example>
<p>
Use the <tt>--no-act</tt> option to simulate actions
without actually installing, removing, etc., any packages.

<sect id="survival">Debian survival commands
<p>
With this knowledge you can live the life of eternal upgrade  :-)

<sect1 id="bug-check">Check bugs in Debian and seek help
<P>
If you are experiencing problems with a specific package, make sure
to check out these sites first before you seek help or file a bug
report.
(<prgn>lynx</prgn>, <prgn>links</prgn>, and <prgn>w3m</prgn> work equally well):
<example>
$ lynx &bugs;
$ lynx &bugs;<var>package-name</var>  # if you know package name
$ lynx &bugs;<var>bugnumber</var>     # if you know bug number
</example>
Search Google (www.google.com) with search words including "site:debian.org".
<p>
When in doubt, read the fine manual. Set <tt>CDPATH</tt> as follows:
<example>
export CDPATH=.:/usr/local:/usr/share/doc
</example>
and type
<example>
$ cd <var>packagename</var>
$ pager README.Debian # if this exists
$ mc 
</example>
<![%f-ref;[
More support resources are listed at <ref id="support">.
]]>
</sect1>

<sect1 id="apt-trouble">APT upgrade troubleshooting
<p>
Package dependency problems may occur when upgrading in 
<tt>unstable</tt> or <tt>testing</tt> as described in 
<ref id="upgrade-system">.
Most of the time this is because a package that will be upgraded
Depends on a package that is not yet available.
These problems are fixed by using
<example>
# aptitude dist-upgrade
</example>
If this does not work, then repeat one of the following until the problem
resolves itself:
<example>
# aptitude -f upgrade        # continue upgrade even after error
... or
# aptitude -f dist-upgrade   # continue dist-upgrade even after error
</example>
<p>
Some really broken upgrade scripts may cause persistent trouble.
It is usually better to resolve this type of situation by inspecting the
<file>/var/lib/dpkg/info/<var>packagename</var>.{post,pre}{inst,rm}</file>
scripts of the offending package and then running: 
<example>
# dpkg --configure -a    # configures all partially installed packages
</example>
<p>
If a script complains about a missing configuration file, look in
<file>/etc/</file> for
the corresponding configuration file.  If one exists with an extension of
<tt>.dpkg-new</tt>
(or something similar), <prgn>mv</prgn> it to remove the suffix.
<p>
Package dependency problems may occur when installing in
<tt>unstable</tt> or <tt>testing</tt>.
There are ways to circumvent dependencies.
<example>
# aptitude -f install <var>package</var> # override broken dependencies
</example>
<p>
An alternative method to fix these situations is to use the
<package>equivs</package> package. 
See <file>&f-equivs;</file><![%f-ref;[ and <ref id="equivs">]]>.
</sect1>

<sect1 id="rescue-dpkg">Rescue using <prgn>dpkg</prgn>
<p>
If you reach a dead end using APT you can download package files
from &debian; mirrors and install them using <prgn>dpkg</prgn>.
If you have not access to the network you can look for cached
copies of package files in <file>/var/cache/apt/archives/</file>.
<example>
# dpkg -i fetchmail_6.2.5-4_i386.deb
</example>
If attempting to install a package this way fails due to
dependency violations and you really need to install the
package then you can override dependency checks
using <prgn>dpkg</prgn>'s <tt>--ignore-depends</tt>,
<tt>--force-depends</tt> and other options.
See <manref name="dpkg" section="8"> for details.
</sect1>

<sect1 id="recover-status">Recover package selection data
<p>
If <file>/var/lib/dpkg/status</file> becomes corrupt for any reason, 
the &debian; system loses package selection data and suffers severely.  
Look for the old <file>/var/lib/dpkg/status</file> file
at <file>/var/lib/dpkg/status-old</file> or 
<file>/var/backups/dpkg.status.*</file>.
<p>
Keeping <file>/var/backups/</file> in a separate partition may be a 
good idea since this directory contains lots of important system data.
<p>
If no old <file>/var/lib/dpkg/status</file> file is available,
you can still recover information from directories in 
<file>/usr/share/doc/</file>.
<example>
# ls /usr/share/doc | \
  grep -v [A-Z] | \
  grep -v '^texmf$' | \
  grep -v '^debian$' | \
  awk '{print $1 " install"}' | \
  dpkg --set-selections
# dselect --expert # reinstall system, de-select as needed
</example>

<sect1 id="rescue-var">Rescue system after crashing <file>/var</file>
<p>
Since the <file>/var</file> directory contains regularly updated data such as
mail, it is more susceptible of corruption than, e.g., <file>/usr/</file>.
Putting <file>/var/</file> on a separate partition reduces risks.
If disaster happens, you may have to rebuild the <file>/var</file>
directory to rescue your &debian; system.  
<p>
Obtain the skeleton content of the <file>/var</file> directory from a minimum
working &debian; system based on the same or older &debian; version, for
example <file><url id="&var-tar-gz;" name="var.tar.gz"></file>,
and place it in the root directory of the broken system.  Then
<example>
# cd /
# mv var var-old      # if any useful contents are left
# tar xvzf var.tar.gz # use Woody skeleton file
# aptitude            # or dselect
</example>
This should provide a working system.  You can expedite the recovery of
package selections by using the technique described in 
<ref id="recover-status">.  
([FIXME]: This procedure needs more experiments to verify.)
</sect1>

<sect1 id="un-bootable">Install a package into an unbootable system
<p>
Boot into Linux using a Debian rescue floppy/CD or an alternative
partition in a multiboot Linux system. 
<![%f-ref;[
See <ref id="booting">. 
]]>
Mount the unbootable system on <file>/target</file> and use the chroot install mode of
<prgn>dpkg</prgn>.
<example>
# dpkg --root /target -i <var>packagefile.deb</var>
</example>
Then configure and fix problems.
<p>
By the way, if a broken <prgn>lilo</prgn> is all that prevents booting, you can boot using 
a standard Debian rescue disk. At boot prompt, assuming the root partition of 
your Linux installation is in <file>/dev/hda12</file> and you want runlevel 3, enter:
<example>
boot: rescue root=/dev/<var>hda12</var> 3
</example>
Then you are booted into an almost fully functional system with the kernel on
floppy disk. (There may be minor glitches due to lack of kernel features or modules.) 
</sect1>

<sect1>What to do if the <prgn>dpkg</prgn> command is broken
<p>
A broken <prgn>dpkg</prgn> may make it impossible to install any <tt>.deb</tt>
files.  A procedure like the following will help you recover from this
situation. (In the first line, you can replace "links" with your favorite
browser command.)
<example>
$ links http://<var>http.us.debian.org</var>/debian/pool/main/d/dpkg/
  ... download the good dpkg_<var>version</var>_<var>arch</var>.deb
$ su
password: *****
# ar x dpkg_<var>version</var>_<var>arch</var>.deb
# mv data.tar.gz /data.tar.gz
# cd /
# tar xzfv data.tar.gz
</example>
For <tt>i386</tt>, <tt>http://packages.debian.org/dpkg</tt> may 
also be used as the URL.
</sect1>

</sect>

<sect id="debian-package">Debian nirvana commands
<p>
<strong>Enlightenment</strong> with these commands will save a person from the eternal
karmic struggle of upgrade hell and let him reach Debian <strong>nirvana</strong>. :-)

<sect1 id="info-file">Information on a file
<p>
To find the package to which a particular file belongs:
<example>
$ dpkg {-S|--search} pattern # search for pattern in installed packages
$ zgrep -e pattern <var>/local/copy/of/debian/woody/Contents-i386.gz</var>
             # find filename-pattern of files in the debian archive
</example>
Or use specialized package commands:
<example>
# aptitude install dlocate  
                 # conflicts with slocate (secure version of locate)
$ dlocate <var>filename</var>         # fast alternative to dpkg -L and dpkg -S
...
# aptitude install auto-apt # on-demand package installation tool
# auto-apt update          # create db file for auto-apt
$ auto-apt search <var>pattern</var>  
                # search for pattern in all packages, installed or not
</example>
</sect1>

<sect1 id="info-package">Information on a package
<p>
Search and display information from package archives.  Make sure to
point APT to the proper archive(s) by editing
<file>/etc/apt/sources.list</file>.
If you want to see how packages in <tt>testing</tt>/<tt>unstable</tt> do against the currently 
installed one, use <tt>apt-cache policy</tt>&mdash;quite nice.
<example>
# apt-get   check           # update cache and check for broken packages
$ apt-cache search  <var>pattern</var> # search package from text description
$ apt-cache policy  <var>package</var> # package priority/dists information
$ apt-cache show -a <var>package</var> # show description of package in all dists
$ apt-cache showsrc <var>package</var> # show description of matching source package
$ apt-cache showpkg <var>package</var> # package information for debugging
# dpkg  --audit|-C          # search for partially installed packages
$ dpkg {-s|--status} <var>package</var> ... # description of installed package
$ dpkg -l <var>package</var> ...       # status of installed package (1 line each)
$ dpkg -L <var>package</var> ...       # list filenames installed by the package
</example>
<!-- Erase this when manual page gets fixed.  FIXME -->
<tt>apt-cache showsrc</tt> is not documented as of the Woody release but
works :) 
<p>
You can also find package information in (I use <tt>mc</tt> to browse these):
<example>
/var/lib/apt/lists/*
/var/lib/dpkg/available
</example>
The comparison of the following files provides information on what 
exactly has happened in the last few install sessions.
<example>
/var/lib/dpkg/status
/var/backups/dpkg.status*
</example>

</sect1>

<sect1 id="apt-get-auto">Unattended installation with APT
<p>
For an unattended installation, add the following line in 
<file>/etc/apt/apt.conf</file>:
<example>
Dpkg::Options {"--force-confold";}
</example>
This equivalent to running <tt>aptitude -y install <var>packagename</var></tt>
or <tt>apt-get -q -y install <var>packagename</var></tt>.
Because this automatically answers "yes" to all prompts, it may cause
problems, so use this trick with care. 
See <manref name="apt.conf" section="5"> and <manref name="dpkg" section="1">.
<p>
You can configure any particular packages later by following 
<ref id="reconfigure">.

<sect1 id="reconfigure">Reconfigure installed packages
<p>
Use the following to reconfigure any already-installed package.
<example>
# dpkg-reconfigure --priority=<var>medium</var> <var>package</var> [...]
# dpkg-reconfigure --all   # reconfigure all packages
# dpkg-reconfigure locales # generate any extra locales
# dpkg-reconfigure --p=<var>low</var> xserver-xfree86 # reconfigure X server
</example>
Do this for <prgn>debconf</prgn> if you need to change the
<prgn>debconf</prgn> dialog mode permanently.
<p>
Some programs come with special configuration scripts.
<footnote>
Some <prgn>*config</prgn> scripts are disappearing in the newer Sarge 
releases and the package configuration functionality are moved to
the <prgn>debconf</prgn> system.
</footnote>
<example>
apt-setup     - create /etc/apt/sources.list
install-mbr   - install a Master Boot Record manager
tzconfig      - set the local time zone
gpmconfig     - set gpm mouse daemon
sambaconfig   - configure Samba in Potato (Woody uses debconf)
eximconfig    - configure Exim (MTA)
texconfig     - configure teTeX
apacheconfig  - configure Apache (httpd)
cvsconfig     - configure CVS
sndconfig     - configure sound system
...
update-alternatives - set default command, e.g., vim as vi
update-rc.d         - System-V init script management
update-menus        - Debian menu system
...
</example>
</sect1>

<sect1 id="remove">Remove and purge packages
<p>
Remove a package while maintaining its configuration:
<example>
# aptitude remove <var>package</var> ...
# dpkg   --remove <var>package</var> ...
</example>
Remove a package and all configuration:
<example>
# aptitude purge  <var>package</var> ...
# dpkg   --purge  <var>package</var> ...
</example>
</sect1>

<sect1 id="hold">Holding older packages
<p>
For example, holding of <package>libc6</package> and
<package>libc6-dev</package> for <prgn>dselect</prgn> and 
<tt>aptitude install <var>package</var></tt> can be done as follows:
<example>
# echo -e "libc6 hold\nlibc6-dev hold" | dpkg --set-selections
</example>
<tt>aptitude install <var>package</var></tt> will not be hindered by this "hold".  To
hold a package through forcing automatic downgrade for <tt>aptitude upgrade
<var>package</var></tt> or <tt>aptitude dist-upgrade</tt>, add the following to
<file>/etc/apt/preferences</file>:
<example>
Package: libc6
Pin: release a=stable
Pin-Priority: 2000
</example>
Here the "<tt>Package:</tt>" entry cannot use entries such as "<tt>libc6*</tt>".  
If you need to keep all binary packages related to the <package>glibc</package> 
source package in a synchronized version, you need to list them explicitly.
<p>
The following will list packages on hold:
<example>
dpkg --get-selections "*"|grep -e "hold$"
</example>
</sect1>

<sect1 id="mixedsys">Mixed <tt>stable</tt>/<tt>testing</tt>/<tt>unstable</tt> system
<p>
<prgn>apt-show-versions</prgn> can list available package 
versions by distribution.
<example>
$ apt-show-versions | fgrep /testing | wc
... how many packages you have from testing
$ apt-show-versions -u
... list of upgradeable packages
$ aptitude install `apt-show-versions -u -b | fgrep /unstable`
... upgrade all unstable packages to their newest versions
</example>
</sect1>

<sect1 id="cache">Prune cached package files
<p>
Package installation with APT leaves cached package files in
<file>/var/cache/apt/archives/</file> and these need to be cleaned.
<example>
# aptitude autoclean # removes only useless package files
# aptitude clean     # removes all cached package files
</example>
</sect1>


<sect1 id="record">Record/copy system configuration
<p>
To make a local copy of the package selection states:
<example>
$ dpkg --get-selections "*" &gt;<var>myselections</var>   # or use \*
</example>
<tt>"*"</tt> makes <tt><var>myselections</var></tt> include package entries for "purge" too.
<p>
You can transfer this file to another computer, and install it there with:
<example>
# dselect update
# dpkg --set-selections &lt;<var>myselections</var>
# apt-get -u dselect-upgrade    # <var>or</var> dselect install
</example>
</sect1>

<sect1 id="port">Port a package to the <tt>stable</tt> system
<p>
For partial upgrades of the <tt>stable</tt> system, rebuilding a package within its
environment using the source package is desirable.  This avoids massive
package upgrades due to their dependencies.  First, add the following entries
to <file>/etc/apt/sources.list</file>:
<example>
deb-src &http-us;debian testing \
 main contrib non-free
deb-src &http-non-us;debian-non-US testing/non-US \
 main contrib non-free
deb-src &http-us;debian unstable \
 main contrib non-free
deb-src &http-non-us;debian-non-US unstable/non-US \
 main contrib non-free
</example>
Here each entry for <tt>deb-src</tt> is broken into two lines because of
printing constraints, but the actual entry in <file>sources.list</file> should
consist of a single line.
<p>
Then get the source and make a local package:
<example>
$ apt-get update  # update the source package search list
$ apt-get source <var>package</var>
$ dpkg-source -x <var>package.dsc</var>
$ cd <var>package-version</var>
  ... inspect required packages (Build-Depends in .dsc file) and
      install them too.  You need the "fakeroot" package also.

$ dpkg-buildpackage -rfakeroot 

  ...or (no sig)
$ dpkg-buildpackage -rfakeroot -us -uc # use "debsign" later if needed

  ...Then to install
$ su -c "dpkg -i <var>packagefile.deb</var>"
</example>
Usually, one needs to install a few packages with the "-dev" suffix to satisfy
package dependencies. <prgn>debsign</prgn> is in the
<package>devscripts</package> package.  <prgn>auto-apt</prgn> may
ease satisfying these dependencies. Use of <prgn>fakeroot</prgn>
avoids unnecessary use of the root account.
<p>
In Woody, these dependency issues can be simplified.  
For example, to compile a source-only <package>pine</package> package:
<example>
# apt-get build-dep pine
# apt-get source -b pine
</example>
</sect1>

<sect1 id="local">Local package archive
<p>
In order to create a local package archive which is compatible with
APT and the <prgn>dselect</prgn> system, <file>Packages</file> needs to be created
and package files need to be populated in a particular directory tree.
<p>
A local <tt>deb</tt> repository similar to an official Debian archive can
be made in this way:
<example>
# aptitude install dpkg-dev
# cd <var>/usr/local</var>
# install -d <var>pool</var> # physical packages are located here
# install -d dists/<var>unstable</var>/<var>main</var>/binary-<var>i386</var>
# ls -1 <var>pool</var> | sed 's/_.*$/ <var>priority</var> <var>section</var>/' | uniq &gt; <var>override</var>
# editor <var>override</var> # adjust <var>priority</var> and <var>section</var>
# dpkg-scanpackages <var>pool</var> <var>override</var> <var>/usr/local</var>/ \
   &gt; dists/<var>unstable</var>/<var>main</var>/binary-<var>i386</var>/Packages
# cat &gt; dists/<var>unstable</var>/<var>main</var>/Release &lt;&lt; EOF
Archive: <var>unstable</var>
Version: <var>3.0</var>
Component: <var>main</var>
Origin: <var>Local</var>
Label: <var>Local</var>
Architecture: <var>i386</var>
EOF
# echo "deb file:<var>/usr/local</var> <var>unstable</var> <var>main</var>" \
   &gt;&gt; /etc/apt/sources.list
</example>
<p>
Alternatively, a quick-and-dirty local <tt>deb</tt> repository can be made:
<example>
# aptitude install dpkg-dev
# mkdir <var>/usr/local/debian</var>
# mv <var>/some/where/package.deb</var> <var>/usr/local/debian</var>
# dpkg-scanpackages <var>/usr/local/debian</var> /dev/null | \
  gzip - &gt; <var>/usr/local/debian</var>/Packages.gz
#  echo "deb file:<var>/usr/local/debian</var> ./" &gt;&gt; /etc/apt/sources.list
</example>
<p>
These archives can be remotely accessed by providing access to these 
directories through either HTTP or FTP methods and changing entries in
<file>/etc/apt/sources.list</file> accordingly.

<sect1 id="alien">Convert or install an alien binary package
<p>
<package>alien</package> enables the conversion of binary packages provided in 
Red Hat <tt>rpm</tt>, Stampede <tt>slp</tt>, Slackware <tt>tgz</tt>, and
Solaris <tt>pkg</tt> file formats
into a &debian; <tt>deb</tt> package. If you want to use a package from another
Linux distribution than the one you have installed on your
system, you can use <prgn>alien</prgn> to convert it to your preferred
package format and install it. <package>alien</package> also supports LSB packages.
</sect1>

<sect1 id="auto-apt">Automatically install command
<p>
<prgn>auto-apt</prgn> is an on-demand package installation tool.
<example>
$ sudo auto-apt update
 ... update database
$ auto-apt -x -y run
Entering auto-apt mode: /bin/bash
Exit the command to leave auto-apt mode.
$ less /usr/share/doc/med-bio/copyright # access non-existing file
 ...  Install the package which provide this file.
 ... Also install dependencies
</example>
</sect1>

<sect1 id="debsums">Verify installed package files
<p>
<prgn>debsums</prgn> enables verification of installed package files against
MD5 checksums.  Some packages do not have available MD5 checksums.  A possible
temporary fix for sysadmins:
<example>
# cat >>/etc/apt/apt.conf.d/90debsums
DPkg::Post-Install-Pkgs {"xargs /usr/bin/debsums -sg";};
^D
</example>
per Joerg Wendland <email>joergland@debian.org</email> (untested).

<![%f-ref;[
<sect1 id="spy">Optimized <file>sources.list</file>
<p>
In short, fancy efforts to create an optimized <file>sources.list</file>
did not produce a significant improvement for me from a location in the USA.  I
manually chose a nearby site using <prgn>apt-setup</prgn>.
<p>
<prgn>apt-spy</prgn> creates <file>sources.list</file> automatically,
based on latency and bandwidth. <prgn>netselect-apt</prgn> creates a
more complete <file>sources.list</file>, but uses an inferior method of
choosing the best mirror (ping time comparison).
<example>
# aptitude install apt-spy
# cd /etc/apt ; mv sources.list sources.list.org
# apt-spy -d testing -l sources.apt
</example>
</sect1>

]]>


</sect>

<sect id="pecuriarities">Other Debian peculiarities

<sect1 id="dpkg-divert">The <prgn>dpkg-divert</prgn> command
<p>
<!-- copied from manual page -->
File <strong>diversions</strong> are a way of forcing <prgn>dpkg</prgn> not to
install a file into its default location, but to a <strong>diverted</strong>
location.  Diversions can be used through the &debian;
package scripts to move a file away when it causes a conflict.  System
administrators can also use a diversion to override a package's configuration
file, or whenever some files (which aren't marked as conffiles)
need to be preserved by <prgn>dpkg</prgn>, when
installing a newer version of a package which contains those files<![%f-ref;[
(see <ref id="conffile">)]]>.
<example>
# dpkg-divert [--add]  <var>filename</var> # add "diversion"
# dpkg-divert --remove <var>filename</var> # remove "diversion"
</example>
It's usually a good idea not to use <prgn>dpkg-divert</prgn> unless it is
absolutely necessary.
</sect1>

<sect1 id="equivs">The <package>equivs</package> package
<p>
If you compile a program from source, it is best to make it into a real
local debianized package (<tt>*.deb</tt>).  
Use <tt>equivs</tt> as a last resort.
<example>
Package: equivs
Priority: extra
Section: admin
Description: Circumventing Debian package dependencies
 This is a dummy package which can be used to create Debian
 packages, which only contain dependency information.
</example>
</sect1>

<sect1 id="alternatives">Alternative commands
<p>
To make the command <prgn>vi</prgn> run <prgn>vim</prgn>, use
<prgn>update-alternatives</prgn>:
<example>
# update-alternatives --display vi
...
# update-alternatives --config vi
  Selection    Command
-----------------------------------------------
      1        /usr/bin/elvis-tiny
      2        /usr/bin/vim
*+    3        /usr/bin/nvi

Enter to keep the default[*], or type selection number: 2
</example>
Items in the Debian alternatives system are kept in
<file>/etc/alternatives/</file> as symlinks.
<p>
To set your favorite X Window environment, apply 
<prgn>update-alternatives</prgn> to
<file>/usr/bin/x-session-manager</file> and
<file>/usr/bin/x-window-manager</file>.
<![%f-ref;[
For details, see <ref id="custom-x">.
]]>
<p>
<file>/bin/sh</file> is a direct symlink to <file>/bin/bash</file> or
<file>/bin/dash</file>.  It's safer to
use <file>/bin/bash</file> to be compatible with old Bashism-contaminated scripts but 
better discipline to use <file>/bin/dash</file> to enforce POSIX compliance.
Upgrading to a 2.4 Linux kernel tends to set this to <file>/bin/dash</file>.
</sect1>

<sect1 id="sys-v">Runlevel usage
<p>
When installed, most &debian; packages configure their services
to run in runlevels 2 through 5.
Thus, there are no differences between runlevels 2, 3, 4 and 5
on a &debian; system that has not been customized;
&debian; leaves it up to the local administrator
<![%f-ref;[
to customize runlevels as described in <ref id="custombootscripts">.
]]>
<![%q-ref;[
to customize runlevels.
]]>
This differs from the way runlevels are used by some other popular
GNU/Linux distributions.
One change you may want to make is to disable
<prgn>xdm</prgn> or <prgn>gdm</prgn> in runlevel 2
so that the X display manager is not started
at the end of the boot sequence;
you can then start it by switching to runlevel 3.
<p>
<![%f-ref;[
For more information about runlevels see <ref id="runlevels">.
]]>

<sect1 id="disables">Disabled daemon services
<p>
&debian; developers take system security seriously.
Many daemon services are installed
with the fewest services and features enabled.
<p>
Run <tt>ps aux</tt> or check the contents of <file>/etc/init.d/*</file> and
<file>/etc/inetd.conf</file>, if you have any doubts (about Exim, DHCP, ...).  
Also check <file>/etc/hosts.deny</file><![%f-ref;[ as 
in <ref id="loginctrl">]]>.
The <prgn>pidof</prgn> command is also useful (see
<manref name="pidof" section="8">). 
<p>
X11 doesn't allow TCP/IP (remote) connections by default in recent
versions of &debian;.  
<![%f-ref;[
See <ref id="xtcp">.
]]>
X forwarding in SSH is also disabled.  
<![%f-ref;[
See <ref id="xssh">.
]]>
</sect1>
</sect>

</chapt>

