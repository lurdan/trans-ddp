<!-- CVS revision of this document "$Revision: 1.20 $"  -->

<chapt id="gateway"> Building a gateway with a &debian; system

<p>
&debian; offers an all-purpose gateway machine, which handles NAT,
mail, DHCP, DNS cache, HTTP proxy cache, CVS, NFS, and Samba services
for a home LAN system.  See <url id="&netfilterhome;" name="Netfilter">,
where many network configuration issues are explained.

<sect>Network configuration
<p>

<sect1 id="ip-class">Host configuration for the gateway
<p>
The LAN uses IP addresses for the following private network range to avoid IP
address collision with the Internet.
<example>
Class A: 10.0.0.0                    with mask 255.0.0.0
Class B: 172.16.0.0 - 172.31.0.0     with mask 255.255.0.0
Class C: 192.168.0.0 - 192.168.255.0 with mask 255.255.255.0
</example>
<p>
&debian; uses <file>/etc/network/interfaces</file> for IP configuration.
<p>
For example, if <file>eth0</file> connects to the Internet with a
DHCP-provided IP address and <file>eth1</file> connects to the LAN,
<file>/etc/network/interfaces</file> is set as following (Woody or later):
<example>
auto eth0
iface eth0 inet dhcp

auto eth1
iface eth1 inet static
address 192.168.1.1
network 192.168.1.0
netmask 255.255.255.0
broadcast 192.168.1.255
</example>
Issue the following command to update the networking configuration to the
new <file>/etc/network/interfaces</file>:
<example>
# /etc/init.d/networking restart
</example>
Reminder: The <file>interfaces</file> file in Woody or later releases is
not compatible with Potato.
<p>
If the system uses a PCMCIA NIC, one needs to set up the network through
<file>/etc/pcmcia/network.opts</file> instead in Potato system.
In Woody system, this problem has been solved.
<p>
Check the output of the following if in doubt:
<example>
# ifconfig
# cat /proc/pci
# cat /proc/interrupts
# dmesg|more
</example>
Sometimes, DSL (PPPoE?) has MTU issues.  Refer to the LDP
<url id="&dsl-howto;" name="DSL-HOWTO">.  
If you have problems with certain websites, see <ref id="killecn">.
</sect1>

<sect1 id="ip-check">Network configuration checkpoints
<p>
Typical set of programs:
<example>
# apt-get install nfs samba dhcpd dhcp-client bind squid procmail fetchmail 
# apt-get install ssh cvs
</example>
<p>
Then check the following files:
<example>
/etc/init.d/dhcpd       (edit to serve only LAN = eth1)
/etc/host.allow         (ALL: 192.168.0.0/16 127.0.0.0/8) for NFS
/etc/exports            (Need this for NFS)
/etc/bind/db.192.168.1  (add)
/etc/bind/db.lan        (add)
/etc/bind/named.conf    (edit)
/etc/resolv.conf        (edit)
/etc/hosts
/etc/dhcpd.conf         (edit for LAN = eth1)
/etc/dhclient.conf      (edit to force local DNS)
/etc/samba/smb.conf
/etc/exim/exim.conf
/etc/mailname
/etc/aliases
/etc/squid.conf         (add all LAN host IPs as allowed)
</example>
<prgn>bind</prgn> creates a local cache DNS server and changes DNS to
localhost.  Check <file>/etc/resolv.conf</file>:
<example>
nameserver 127.0.0.1
search lan.aokiconsulting.com
</example>
</sect1>

<sect id="netfilter">Netfilter configuration
<p>
The netfilter/iptables project is a firewalling subsystem for
Linux 2.4 and after.
See <url id="&netfilterhome;" name="Netfilter">,
where many network configuration issues are explained.

<sect1 id="netfilter-basics">Basics of netfilter
<p>
Netfilter process packets use 5 built-in chains: 
PREROUTING, INPUT, FORWARD, OUTPUT, and POSTROUTING.
<example>
                routing
                decision
IN ------> PRE ---> ------> FORWARD -----> ----> POST -----> OUT
interface  ROUTING  \       filter       /       ROUTING     interface
           DNAT     |       tracking     ^       SNAT
           REDIRECT |                    |      MASQUERADE
                    v                    |
                  INPUT                OUTPUT
                    | filter             ^ filter,DNAT 
                    v                    |
                    \--&gt; Local Process --/
                            user-space programs
</example>

<sect1 id="netfilter-table">Netfilter table
<p>
Packets are processed at each built-in chain using the following tables.
<list compact>
<item>filter (packet filter, default)
<list compact>
<item>INPUT (for packets coming into the box itself)
<item>FORWARD (for packets being routed through the box)
<item>OUTPUT (for locally generated packets).
</list>
<item>nat (network address translation )
<list compact>
<item>PREROUTING (for altering packets as soon as they come in)
<item>OUTPUT (for altering locally generated packets before routing)
<item>POSTROUTING (for altering packets as they are about to go out)
</list>
<item>mangle (network address mangling, good only after 2.4.18)
<list compact>
<item>all 5 built-in chains.
</list>
</list>

<sect1 id="netfilter-target">Netfilter target
<p>
Firewall rules have several targets:
<list compact>
<item>4 basic targets:
<list compact>
<item>ACCEPT means to let the packet through.
<item>DROP means to drop the packet.  
<item>QUEUE means to pass the packet to userspace (if supported by the kernel).
<item>RETURN means stop traversing this chain and resume at the next 
  rule in the previous (calling) chain.  
</list>
<item>extended targets:
<list compact>
<item>LOG turns on kernel logging.
<item>REJECT sends back an error packet and drops the packet.
<item>SNAT alters the source address of the packet and is used only 
  in the POSTROUTING chain. (nat table only)
<example compact>
--to-source  ipaddr[-ipaddr][:port-port]
</example>
<item>MASQUERADE is the same as SNAT but for dynamically assigned IP 
  (dialup)  connections. (nat table only)
<example compact>
--to-ports port[-port]
</example>
<item>DNAT alters that the destination address of the packet and used 
  in the PREROUTING and OUTPUT chains, and user-defined chains 
  which are only  called  from  those chains. (nat table only)
<example compact>
--to-destination ipaddr[-ipaddr][:port-port]
</example>
<item>REDIRECT alters the destination IP address to send the packet to the
  machine itself.
<example compact>
--to-ports port[-port]
</example>
</list>
</list>

<sect1 id="netfilter-command">Netfilter command
<p>
The basic commands of <prgn>iptables</prgn> are:
<example compact>
iptables -N <var>chain</var>                   # create a <var>chain</var>

iptables -A <var>chain</var> \                 # add rule to <var>chain</var>
         -t <var>table</var> \                 # use <var>table</var> (filter, nat, mangle)
         -p <var>protocol</var> \              # tcp, udp, icmp, or all,
         -s <var>source-address[/mask]</var> \
         --sport <var>port[:port]</var> \      # source port if -p is tcp or udp
         -d <var>destination-address[/mask]</var> \
         --dport <var>port[:port]</var> \      # dest. port if -p is tcp or udp
         -j <var>target</var> \                # what to do if match
         -i <var>in-interface-name</var> \     # for INPUT,  FORWARD, PREROUTING
         -o <var>out-interface-name</var>      # for FORWARD, OUTPUT, POSTROUTING
</example>

<sect1 id="ip-masq">IP-masquerade
<p>
Machines on the LAN can access Internet resources through a gateway
which runs IP-masquerade (NAT) by sharing a single externally accessible
IP address.
<example>
# apt-get install ipmasq
</example>
Apply example rules to strengthen the <prgn>ipmasq</prgn> protection.
See <file>/usr/share/doc/ipmasq/examples/stronger/README</file>.
For Debian kernel-image-2.4, make sure to load the proper modules.  See
<ref id="kernel-net"> for the necessary configuration.
<p>
For Debian kernel-image-2.2, edit <file>Z92timeouts.rul</file> in
<file>/etc/masq/rules</file> as follows to ensure a longer connection to
remote sites (good for large emails, etc.):
<example>
# tcp, tcp-fin, udp
# 2hr, 10 sec, 160 sec - default
# 1 day, 10 min, 10 min - longer example
$IPCHAINS -M -S 86400 600 600
</example>
Also, if the network is accessed through a PCMCIA NIC, <prgn>ipmasq</prgn>
needs to be started from <file>/etc/pcmcia/network.opts</file>.  Read
<file>/usr/share/doc/ipmasq/ipmasq.txt.gz</file>.
</sect1>


<sect1 id="ip-redirect">Redirect SMTP connection (2.4)
<p>
Suppose you have a notebook PC which is configured to use other LAN 
environments and you want to use your mail user agent on the 
notebook PC without reconfiguring it. 
<p>
Adding the following rules through the 
<prgn>iptables</prgn> command to the gateway machine will redirect 
the SMTP connection to the gateway machine.
<example>
# iptables -t nat -A PREROUTING -s 192.168.1.0/24 -j REDIRECT \
           -p tcp --dport smtp --to-port 25 # smtp=25, INPUT is open
</example>
For a more thorough redirect rule set consider installing 
the <package>ipmasq</package> package and adding 
<url id="&examples;" name="M30redirect.def"> to the 
<file>/etc/ipmasq/rules/</file> directory.

</sect>

<sect>Manage multiple net connections
<p>
[FIXME] Policy routing (by Phil Brutsche
<email>pbrutsch@tux.creighton.edu</email>):
See the <url id="&iproute;" name="iproute manual"> for
details.  Traffic control (tc) may also be interesting.
<p>
Environment:
<example>
eth0: 192.168.1.2/24; gateway 192.168.1.1
eth1: 10.0.0.2/24; gateway 10.0.0.1
No masquerading on this machine.
</example>
Special magic:
<enumlist compact>
<item>ip rule add from 192.168.1.2 lookup 1
<item>ip rule add from 10.0.0.2 lookup 2
<item>ip route add to default via 10.0.0.1 metric 0
<item>ip route add to default via 192.168.1.1 metric 1
<item>ip route add table 1 to 192.168.1.0/24 via eth0
<item>ip route add table 1 to 10.0.0.2/24 via eth1
<item>ip route add table 1 to default via 192.168.1.1
<item>ip route add table 2 to 192.168.1.0/24 via eth0
<item>ip route add table 2 to 10.0.0.2/24 via eth1
<item>ip route add table 2 to default via 10.0.0.2
</enumlist>
<p>
[FIXME] I've never done this.  How to set up dialup as backup to a fast
connection with auto dial-features?  Please send me a patch here :)
</sect>


</chapt>
