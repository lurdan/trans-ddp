<!-- CVS revision of this document "$Revision: 1.2 $"  -->
<!-- CVS revision of original english document "1.26"  -->
<!--Line width ruler (ruler uses 78 characters)     34567890123456789012345-->

<chapt id="vcs">Sistemas de Controle de Versão

<sect id="cvs">CVS
<p>
Confira <file>/usr/share/doc/cvs/html-cvsclient</file>, 
<file>/usr/share/doc/cvs/html-info</file>,
<file>/usr/share/doc/cvsbook</file> com lynx ou rode <tt>info cvs</tt> e
<tt>man cvs</tt> para informações detalhadas.

<sect1 id="cvs-inst">Instalando um servidor CVS
<p>
A configuração a seguir permitirá que apenas membros do grupo "src"
submetam ao repositório CVS e apenas membros do grupo "staff"
administrem o cvs, com isto reduzindo a probabilidade de que alguém 
atire no próprio pé.
<example>
# cd /var/lib; umask 002 ; sudo mkdir cvs # [Woody] FSH
# apt-get install cvs cvs-doc cvsbook
# export CVSROOT=<var>/var/lib/cvs</var>
# cd $CVSROOT
# chown root:src .  # "staff" para maior restrição a projetos novos.
# chmod 3775 .             # Se usou "staff" acima, use 2775 aqui.
# cvs -d <var>/var/lib/cvs</var> init # é mais seguro especificar -d 
explicitamente aqui!
# cd CVSROOT
# chown -R root:staff .
# chmod 2775 .
# touch val-tags 
# chmod 664 history val-tags
# chown root:src history val-tags
</example>
<p>
</sect1>

<sect1 id="cvs-examples">Exemplos de sessão CVS
<p>
O que se segue configurará um ambiente shell para acesso ao repositório
CVS.

<sect2>CVS Anônimo (apenas para baixar)
<p>
Acesso remoto somente-leitura:
<example>
$ export CVSROOT=:pserver:<var>anonymous@cvs.qref.sf.net:/cvsroot/qref</var>
$ cvs login
$ cvs -z3 co <var>qref</var>
</example>
</sect2>

<sect2>Uso de servidor CVS local
<p>
Acessol local a partir de uma shell na mesma máquina:
<example>
$ export CVSROOT=<var>/var/lib/cvs</var>
</example>
</sect2>

<sect2>Uso de servidor CVS remoto pserver
<p>
Acesso remoto sem SSH (uso da implementação do protocolo RSH no 
<prgn>cvs</prgn>):
<example>
$ export CVSROOT=:pserver:<var>account@cvs.foobar.com:/var/lib/cvs</var>
$ cvs login
</example>
Este uso é vulnerável a uma tocaia (eavesdropping attack).
</sect2>

<sect2>Uso do CVS remoto via <prgn>ssh</prgn>
<p>
Acesso remoto com SSH:
<example>
$ export CVSROOT=:ext:<var>account@cvs.foobar.com:/var/lib/cvs</var>
</example>
or for Sourceforge:
<example>
$ export CVSROOT=:ext:<var>account@cvs.qref.sf.net:/cvsroot/qref</var>
</example>
Você pode usar autenticação RSA (<ref id="ssh-rsa">) também. Isto elimina
a espera pela senha (prompt password).
</sect2>

<sect2>Criar um arquivo CVS novo
<p>
Para,
<example>
ITEM              VALUE                    MEANING
source tree:      ~/<var>project-x</var>              Todos os 
códigos-fonte
Project name:     <var>project-x</var>                Nome do projeto
Vendor Tag:       <var>Main-branch</var>              marcador para toda
a ramificação
Release Tag:      <var>Release-original</var>         marcador para um 
lançamento específico
</example>
Faça,
<example>
$ cd ~/<var>project-x</var>                 # acesse o diretório fonte
 ... crie a árvore dos fontes ...
$ cvs import -m <var>"Start project-x" project-x Main-branch Release-initial</var>
$ cd ..; rm -R ~/<var>project-x</var>
</example>
</sect2>

<sect2>Trabalhar com CVS
<p>
Trabalhar com <var>project-x</var> usando o repositório CVS local:
<example>
$ cd                            # acesse a área de trabalho
$ cvs co <var>project-x</var>              # pegue os fontes do CVS para 
local
$ cd <var>project-x</var>
 ... faça mudanças no conteúdo ...
$ cvs diff -u                   # similar ao diff -u repository/ local/
$ cvs ci -m "<var>Describe change</var>"   # salve os fontes locais para
 o CVS
$ vi <var>newfile_added</var>
$ cvs add <var>newfile_added</var>
$ cvs ci -m "<var>Added newfile_added</var>"
$ cvs up                        # mescle a última versão a partir do CVS
 ... atente para linhas que iniciam com "C <var>filename</var>"
 ... código não alterado é movido para `.#<var>filename</var>.version'.
 ... Procure "&lt;&lt;&lt;&lt;&lt;&lt;&lt;" e 
"&gt;&gt;&gt;&gt;&gt;&gt;&gt;" em <var>filename</var>.
$ cvs tag <var>Release-1</var>             # adicione marcador de 
lançamento
 ... edite mais ...
$ cvs tag -d <var>Release-1</var>          # remova marcador de lançamento
$ cvs ci -m "<var>more comments</var>"
$ cvs tag <var>Release-1</var>             # readicione marcador de
lançamento
$ cd                            # volte à área de trabalho
$ cvs co -r <var>Release-initial</var> -d <var>old</var> <var>project-x</var>
 ... get original version to <var>old</var> directory
$ cd old
$ cvs tag -b <var>Release-initial-bugfixes</var> # crie marcador de
ramificação (-b)
 ... Agora você pode trabalhar na versão antiga (Tag=sticky)
$ cvs update
 ... A árvore dos fontes agora tem o marcador de fixação (sticky tag)
"Release-initial-bugfixes"
 ... Trabalhe nesta ramificação
$ cvs up # sincronize com arquivos modificados por outros nesta ramificação
$ cvs ci -m "<var>check into this branch</var>"
$ cvs update -kk -A
 ... Remova o marcador de fixação e esqueça do conteúdo
 ... Atualize a partir do tronco principal sem expnsão de palavra-chave
$ cvs update -kk -j <var>Release-initial-bugfixes</var>
 ... Mescle a ramificação <var>Release-initial-bugfixes</var> com o tronco
 ... principal sem expansão de palavra-chave. Corrija conflitos com o editor
$ cvs ci -m "<var>merge Release-initial-bugfixes</var>"
$ cd
$ tar -cvzf <var>old-project-x.tar.gz</var> <var>old</var>     # arquive,
 -j for bz2
$ cvs release -d <var>old</var>               # remova fonte local 
(opcional)
</example>
Opções legais que convém lembrar (use-a(s) como primeiro(s) argumento(s)
 para <prgn>cvs</prgn>):
<example>
-n      simula as ações, sem executá-las realmente
-t      exibe mensagens que mostram os passos da atividade do CVS
</example>
</sect2>

<sect2>Exportar arquivos a partir do CVS
<p>
Para obter a última versão do CVS, use "tomorrow":
<example>
$ cvs ex -D tomorrow <var>module_name</var>
</example>
</sect2>

<sect2>Administrar o CVS
<p>
Adicione apelidos a um projeto (servidor local):
<example>
$ su - admin           # um membro do staff
$ export CVSROOT=<var>/var/lib/cvs</var>
$ cvs co CVSROOT/modules
$ cd CVSROOT
$ echo "<var>px</var> -a <var>project-x</var>" &gt;&gt;modules
$ cvs ci -m "<var>Now px is an alias for project-x</var>"
$ cvs release -d .
$ exit                 # control-D para voltar a partir de su
$ cvs co -d <var>project</var> <var>px</var> 
 ... examine <var>project-x</var> (alias:<var>px</var>) a partir do CVS 
para o diretório do projeto
$ cd project
 ... faça mudanças no conteúdot ...
</example>
</sect2>

<sect1 id="cvs-trouble">Resolvendo problemas do CVS

<sect2>Permissões de arquivo no repositório
<p>
CVS não sobrescreverá o atual arquivo do repositório, antes o substituirá
por outro. Assim, <em>escrever permissões no diretório do repositório
</em> é algo crítico. Para cada novo repositório criado, se necessário
 rode os seguintes comandos para ter certeza desta condição.
<example>
# cd <var>/var/lib/cvs</var>
# chown -R root:src <var>repository</var>
# chmod -R ug+rwX   <var>repository</var>
# chmod    2775     <var>repository</var>  # se necessário, também o
 subdiretório
</example>
</sect2>

<sect2>Bit de execução
<p>
O bit de execução de um arquivo é mantido quando examinado. Sempre que 
encontrar problemas com permissão de execução em arquivos examinados, mude
 as permissões do arquivo no repositório CVS com o seguinte comando.
<example>
# chmod ugo-x <var>filename</var>
</example>
</sect2>

</sect1>

<sect1 id="cvs-short">Comandos CVS
<p>
Aqui estão os comandos CVS com suas abreviações
<example>
{add|ad|new} [-k kflag] [-m 'message'] files...
{admin|adm|rcs} [rcs-options] files...
{annotate|ann} [options] [files...]
{checkout|co|get} [options] modules...
{commit|ci|com}   [-lnR]  [-m  'log_message'  |  -f  file] \
        [-r revision] [files...]
{diff|di|dif} [-kl] [rcsdiff_options] [[-r rev1 | -D date1] \
        [-r rev2 |  -D date2]] [files...]
{export|ex|exp} [-flNn] -r rev|-D date [-d dir] [-k kflag] module...
{history|hi|his} [-report] [-flags] [-options args] [files...]
{import|im|imp} [-options] repository vendortag releasetag...
{login|logon|lgn}
{log|lo|rlog} [-l] rlog-options [files...]
{rdiff|patch|pa} [-flags] [-V vn] [-r t|-D d [-r t2|-D d2]] modules...
{release|re|rel} [-d] directories...
{remove|rm|delete} [-lR] [files...]
{rtag|rt|rfreeze} [-falnR]  [-b]  [-d]  [-r  tag  |  -D  date] \
         symbolic_tag modules...
{status|st|stat} [-lR] [-v] [files...]
{tag|ta|freeze} [-lR] [-F] [-b] [-d] [-r tag | -D date]  [-f] \
         symbolic_tag [files...]
{update|up|upd} [-AdflPpR] [-d] [-r tag|-D date] files...
</example>
</sect1>

<sect id="svn">Subversion
<p>
Subversion é a próxima geração em sistemas de controle de versão. E
pretende-se que substitua o CVS. Os desenvolvedores o consideram
atualmente em estágio "alpha", embora provavelmente seja estável para
muitos usos. Quando este texto foi escrito, Subversion estava disponível
na Debian unstable apenas.
<sect1 id="svn-inst">Instalando um servidor Subversion
<p>
O meta-pacote <package>subversion-server</package> depende dos pacotes
<package>libapache2-dav-svn</package> e 
<package>subversion-tools</package>) para configurar um servidor.
<sect2>Configurando um repositório
<p>
Atualmente, o pacote <package>subversion</package> não configura
automaticamente um repositório. Isto deve ser feito manualmente. Uma
localização possível para o repositório é em <file>/var/local/repos</file>.
<p>
Crie o diretório:
<example>
# mkdir -p /var/local/repos
</example>
Crie o banco de dados do repositório:
<example>
# svnadmin create /var/local/repos
</example>
Torne o repositório passível de escrita pelo servidor www:
<example>
# chown -R www-data:www-data /var/local/repos
</example>
</sect2>
<sect2>Configurando Apache2
<p>
Para permitir acesso ao repositório via autenticação de usuário, adicione
o seguinte a <file>/etc/apache2/httpd.conf</file>:
<example>
&lt;Location /repos&gt;
  DAV svn
  SVNPath /var/local/repos
  AuthType Basic
  AuthName "Subversion repository"
  AuthUserFile /etc/subversion/passwd
  Require valid-user
&lt/Location&gt
</example>
Então, crie o arquivo de autenticação do usuário com o comando:
<example>
htpasswd2 -c /etc/subversion/passwd some-username
</example>
Reinicie Apache2, e seu novo repositório subversion será acessível através
da URL http://<var>hostname</var>/repos.
</sect2>
</sect1>
<sect1 id="svn-cvs">Movendo um repositório CVS para Subversion
</sect1>
<sect1 id="svn-usage">Exemplos de uso do Subversion
</sect1>
</sect>
</chapt>
