<!-- CVS revision of this document "$Revision: 1.9 $" -->
<!-- CVS revision of original english document "1.82"  -->
<!--Line width ruler (ruler uses 78 characters) 34567890123456789012345-->

<chapt id="package">Gerenciamento de pacotes Debian

<p>
Para reduzir o tráfego de rede nos repositórios &debian;, certifique-se de
configurar um proxy HTTP local usando o <prgn>squid</prgn> para os pacotes
os quais o download tenha sido feito através do APT e, caso necessário,
define a variável de ambiente <tt>http_proxy</tt> ou defina o valor
<tt>http</tt> no arquivo <file>/etc/apt/sources.list</file>. Isso melhora
consideravelmente a performance de atualizações em rede, especialmente em
diversas máquinas Debian em uma LAN (rede local).
<p>
Apesar do recurso de pinagem do <manref name="apt_preferences"
section="5"> ser poderoso, ele não resolve todos os problemas de
dependências uma vez que os requerimentos das dependências tendem a puxar
versões mais novas de pacotes de programas fundamentais.
<p>
+<![%f-ref;[
O uso do método descrito em <ref id="chroot"> é desejável para
]]>
<![%q-ref;[
O uso do método chroot é desejável para
]]>
simultaneamente assegurar ambos a estabilidade do sistema e o acesso as
últimas versões de softwares.
<p>
Este capítulo é baseado em um sistema Woody mas a maioria da informação
também se aplica a um sistema Potato (exceto para o <manref
name="apt_perferences" section="5"> e tópicos relacionados ao arquivo
<file>/etc/apt/preferences</file>).

<sect id="pkg-intro">Introdução
<p>
Se ler toda a documentação para desenvolvedor é muito para você, leia este
capítulo primeiro e comece a desfrutar de toda a capacidade do Debian com
<tt>testing</tt>/<tt>unstable</tt> :-) 

<sect1>Ferramentas principais
<p>
<example>
dselect   &mdash; ferramenta de gerenciamento de pacotes orientada a menu (nível topo) 
dpkg      &mdash; instala pacote (centrado em arquivo-pacote)
apt-get   &mdash; instala pacote (centrado em repositório de pacotes, CLI APT)
tasksel   &mdash; instala tarefa (um conjunto de pacotes)
aptitude  &mdash; instala pacote (pacote &amp; tarefa, APT ncurses)
deity     &mdash; APT ncurses alternativo
synaptic, gsynaptic &mdash; alternativas GUI APT
</example>
Essas não são ferramentas de mesmo nível. O <prgn>dselect</prgn> roda no topo
do APT (os comandos de linha são <prgn>apt-get</prgn>) e <prgn>dpkg</prgn>.
<p>
O APT usa <file>/var/lib/apt/lists/*</file> para rastrear pacotes disponíveis
enquanto que o <prgn>dpkg</prgn> usa <file>/var/lib/dpkg/available</file>. Se
você instalou pacotes diretamente usando <prgn>apt-get</prgn> ou programas
similares como o <prgn>aptitude</prgn>, certifique-se de atualizar o arquivo
<file>/var/lib/dpkg/available</file> a partir do item de menu
<tt>[U]pdate</tt> no <prgn>dselect</prgn> ou a partir da linha de comando
shell "<tt>dselect update</tt>" antes de executar <tt>dselect select</tt>,
<tt>tasksel</tt> ou <tt>dpkg -l</tt>. 
<p>
Como dependências de pacotes, o <prgn>apt-get</prgn> automaticamente
insere pacotes com <strong>depends</strong> mas deixa os pacotes com
<strong>recommends</strong> e <strong>suggests</strong>, enquanto o
<prgn>dselect</prgn> oferece controle guiado por menus sob as opções
desses pacotes e lhe pergunta pela escolha de pacotes baseado em
<strong>suggests</strong>. O <prgn>aptitude</prgn> oferece a opção de
inserir todos os pacotes automaticamente baseado em
<strong>depends</strong>, <strong>recommends</strong> e
<strong>suggests</strong>.
<![%f-ref;[
Veja <ref id="depends">.
]]>
</sect1>

<sect1>Ferramentas úteis
<p>
<example>
apt-cache         - verifica o repositório de pacotes no cache local
dpkg-reconfigure  - reconfigura um pacote já instalado (se ele usar debconf)
dpkg-source       - gerencia arquivo de pacote fonte
dpkg-buildpackage - automatiza a construção de um arquivo de pacote.
...
</example>
</sect1>
</sect>

<sect id="apt-install">Básico do gerenciamento de pacotes &debian;
<p>
Você pode instalar um conjunto de pacotes chamados <em>tarefa</em>
ou instalar pacotes individuais ou atualizar o sistema usando ferramentas
de gerenciamento de pacotes como as ferramentas citadas abaxio.
<p>
<![%f-ref;[
Veja também
<ref id="install">, <ref id="woody"> e <ref id="bin-editor">.
]]>

<sect1 id="tasksel">Instalar <em>tarefa</em> com o <prgn>tasksel</prgn>
ou <prgn>aptitude</prgn>
<p>
O <prgn>tasksel</prgn> é o <strong>Instalador de Tarefas Debian</strong>, que
é oferecido como a opção "<tt>simple</tt>" durante o sistema de instalação.
<p>
Quando se precisa instalar uma função comum que requer vários pacotes, essa é
a melhor maneira de fazê-lo. Execute os comandos como a seguir:
<example>
# dselect update
# tasksel
</example>
<p>
O <prgn>aptitude</prgn> também oferece acesso a tarefas seletivamente
através de menus. Ele não somente lhe permite selecionar <em>tarefas</em>
mas também lhe permite desmarcar para instalação pacotes que fazem parte
de uma <em>tarefa</em> seletivamente atráves de um menu.
</sect1>

<sect1 id="setup-apt">Configure o sistema APT
<p>
Para atualização seletiva seguindo a distribuição <tt>testing</tt>, o
sistema APT (&gt;Woody) pode ser configurado como <ref
id="woody-transition"> para usar o recurso <manref
name="apt_preferences" section="5">.
<p>
Primeiro, adicione os fontes para <tt>stable</tt>, <tt>tyesting</tt> e
<tt>unstable</tt> em seu arquivo <file>/etc/apt/sources.list</file>.
Edite então o arquivo <file>/etc/apt/preferences</file> para definir
o Pin-Priority apropriado.
<example>
Package: *
Pin: release a=stable
Pin-Priority: 500

Package: *
Pin: release a=testing
Pin-Priority: 600

Package: *
Pin: release a=unstable
Pin-Priority: 50
</example>

<sect1 id="dselect"><prgn>dselect</prgn>
<p>
Quando iniciado, o <prgn>dselect</prgn> automaticamente seleciona todos
os pacotes "Requeridos", "Importantes" e "Padrão". No sistema Potato,
alguns programas grandes como o teTeX e o Emacs se encaixavam nessas
categorias e era melhor não instalá-los na instalação inicial manualmente
desmarcando para instalação os mesmos (digitando `_'). No Woody, esses
pacotes foram movidos para a categoria de pacotes "Opcional".
<p>
O <prgn>dselect</prgn> possui uma interface com o usuário de certa forma
estranha. Exisem 4 comandos ambíguos (Maiúsculas siginfica MAIÙSCULAS") :
<example>
Tecla-Chave   Ação
Q             Finalizar. Confirma a seleção atual e finaliza de qualquer forma.
              (sobreescreve dependências)
R             Reverter ! Eu não queria dizer isso.
D             Droga ! Não me importa com o que o dselect acha. Faça isso !
U             Marque todos com o estado sUgerido
</example>
Com <tt>D</tt> e <tt>Q</tt>, você pode selecionar seleções conflitantes
a seu próprio risco. Lide com esses comandos com cuidado. Atualmente, o
<prgn>dselect</prgn> é a ferrementa guiada por menus madura que oferece
um controle refinado sobre as escolhas de <strong>suggests</strong> e
<strong>recommends</strong>.
<p>
Adicione uma linha contendo a opção "expert" no arquivo
<file>/etc/dpkg/dselect.cfg</file> para reduzir o barulho. Para uma
máquina mais lenta, você pode executar o <prgn>dselect</prgn> em uma outra
máquina mais rápida para encontrar os pacotes e pode usar
<tt>apt-get install</tt> para instalá-los.
<p>
O <prgn>dselect</prgn> não fornece acesso a pacotes que não sejam os
preferidos pelo Pin-Priority.
</sect1>

<sect1 id="aptitude"><prgn>aptitude</prgn>
<p>
O <prgn>aptitude</prgn> é um novo instalador de pacotes guiado por menus
similar ao <prgn>dselect</prgn>. Ele pode também ser usado como um comando
alternativo de linha de comando no lugar do <prgn>apt-get</prgn>. Consulte
a página de manual do <manref name="aptitude" section="1">.
<p>
O <prgn>aptitude</prgn> aceita comandos de uma única tecla, geralmente em
letras minúsculas.
<example>
Tecla-Chave     Ação
F10             Menu
?               Ajuda para as teclas de comandos
u               Atualiza informações dos pacotes do repositório
g               Faz o download e instala os pacotes selecionados
q               Finaliza a tela atual e salva as mudanças
x               Finaliza a tela atual e descarta as mudanças
Enter           Visualiza informações sobre um pacote
</example>
O <prgn>aptitude</prgn> oferece a opção de fazer o download de todos os
pacotes automaticamente baseado nos <strong>suggests</strong>. Você pode
mudar esse comportamente escolhendo <tt>F10 -> Opções -> Gerenciamento de
Dependências</tt> nos menus do aptitude.
<p>
O <prgn>aptitude</prgn> oferece acesso a todas as versões de pacotes.
</sect1>

<sect1 id="apt-commands">Comandos <prgn>apt-cache</prgn> e <prgn>apt-get</prgn>
<p>
Usando os exemplos acima da idéia de seguir a <tt>testing</tt>, podemos
gerenciar o sistema usando os seguintes comandos :
 <list>
<item><tt>apt-get -u upgrade</tt>
 <p>Esse comando segue a distribuição <tt>testing</tt> e atualiza todos os
 pacotes no sistema enquanto instala suas dependências da distribuição
 <tt>testing</tt>;
<item><tt>apt-get -u dist-upgrade</tt>
<item><tt>apt-get install <var>pacote</var>/unstable</tt>
 <p>Esse comando segue a distribuição <tt>testing</tt> e atualiza todos
 os pacotes no sistema enquanto instala e resolve suas depedências da
 distribuição <tt>testing</tt>.
<item><tt>apt-get -u dselect-upgrade</tt>
 <p>Esse comando segue a distribuição <tt>testing</tt> e atualiza todos
 os pacotes no sistema pela seleção do <prgn>dselect</prgn>.
<item><tt>apt-get -u install <var>pacote</var></tt>
 <p>Esse comando instala o pacote <var>pacote</var> e suas depedências
 da distribuição <tt>testing</tt>.
<item><tt>apt-get -u install <var>pacote</var>/unstable</tt>
 <p> Esse comando instala o pacote <var>pacote</var> da distribuição
 <tt>unstable</tt> enquanto instala suas dependências da distribuição
 <tt>testing</tt>.
<item><tt>apt-get -u install -t unstable <var>pacote</var></tt>
 <p>Esse comando instala o pacote <var>pacote</var> da distribuição
 <tt>unstable</tt> enquanto instala suas depedências também da
 distribuição <tt>unstable</tt> definindo o Pin-Priority de
 <tt>unstable</tt> para 990.
<item><tt>apt-cache policy <var>foo bar ...</var></tt>
 <p>Esse comando checa o estado dos pacotes <var>foo bar ...</var>.
<item><tt>apt-cache show <var>foo bar ...</var> | less</tt>
 <p>Esse comando checa a informação dos pacotes <var>foo bar ...</var>.
<item><tt>apt-get install <var>foo=2.2.4-1</var></tt>
 <p>Esse comando instala a versão específica <var>2.2.4-1</var> do pacote
 <var>foo</var>.
<item><tt>apt-get -u install <var>foo bar-</var></tt>
 <p>Esse comando instala o pacote <var>foo</var> e remove o pacote
 <var>bar</var>.
<item><tt>apt-get remove <var>bar</var></tt>
 <p>Esse comando remove o pacote <var>bar</var> mas mantém intacttos
 arquivos de configuração que tenham sido modificados/personalizados.
<item><tt>apt-get remove --purge <var>bar</var></tt>
 <p>Esse comando remove totalmente o pacote <var>bar</var> com todos os
 arquivos de configuração modificados/personalizados.
</list>
O uso da opção <tt>-u</tt> acima assegura a exibição e a impressão
na tela de uma lista de todos os pacotes que serão atualizados antes que
a ação da atualização propriamente dita aconteça. O trecho a a seguir
define a opção <tt>-u</tt> como padrão :
<example>
$ cat &gt;&gt; /etc/apt/apt.conf &lt;&lt; .
//Sempre exibe pacotes a serem atualizados (-u)
APT::Get::Show-Upgraded "true";
.
</example>
<p>
Use a opção <tt>-s</tt> para simular um atualização sem na verdade fazê-la.

<sect1 id="apt-tracking">Seguindo um tipo da distribuição &debian;
<p>
Dependendo de suas preferências sobre qual tipo da distribuição &debian;
seguir, você pode mudar o exemplo de <file>/etc/apt/preferences</file> em
<ref id="setup-apt"> para se adequar a suas necessidades :
<example>
seguir a estável:           mude o Pin-Priority da testing para 50
seguir a testing:           mantenha as confgiurações como exibidas acima
seguir a testing(unstable): mude o Pin-Priority da unstable para 50
seguir a unstable(testing): mude o Pin-Priority da unstable para 800
</example>
Uma linha guia para a escolha do Pin-Priority é mover de cima para baixo
na tabela acima conforme o tempo passa de um momento imediatamente após
o lançamento de uma distribução para um momento do congelamento (freeze)
para o próximo lançamento.
<p>
Seguir o tipo <tt>testing</tt> do &debian; possui o efeito colateral de
obter obter atualizações de segurança muito lentamente. Portanto, esteja
avisado sobre esse problema.
<p>
Caso você misture os tipos do &debian; <tt>testing</tt> no <tt>estável</tt>
ou <tt>instável</tt> no <tt>estável</tt> você provavelmente irá obter
também muitos pacotes-chave intencionalmente do <tt>testing</tt> ou
<tt>instável</tt>, os quais poderão conter bugs. Portanto, esteja avisado
também sobre esse problema.
<p>
Exemplos do arquivo <file>/etc/apt/preferences</file> que prendem alguns
pacotes chave para suas versões mais maduras enquanto seguem as versões
menos maduras de outros pacotes não-essenciais estão disponíveis no
<url id="&examples;" name="subdiretórios de exemplos"> com o nome de
<file>preferences.testing</file> e <file>preferences.unstable</file>. Por
outro lado, o arquivo <file>preferences.stable</file> força todos os
pacotes a serem rebaixados para suas versões existentes na distribuição
"estável" (um "downgrade" na verdade).

<sect1 id="apt-stable">Rebaixando todos os pacotes para a <tt>estável</tt>
<p>
Para rebaixar todos os pacotes para <tt>stable</tt>, edite 
<file>/etc/apt/preferences</file> como a seguir:
<example>
Package: *
Pin: release a=stable
Pin-Priority: 1001
</example>
e execute "<tt>apt-get upgrade</tt>", o que força o rebaixamento devido ao 
Pin-priority &gt; 1000.  Fique atento, podem haver alguns pequenos problemas
com dependências.

<sect1 id="apt-preferences">Visão geral do arquivo <file>/etc/apt/preferences</file>
<p>
No arquivo <file>/etc/apt/preferences</file> de exemplo apresentado em
<ref id="setup-apt">, a primeira linha <tt>Package: *</tt> significa que
esta seção se aplica a todos os pacotes. Você pode usar nomes de pacotes
específicos ao invés de * para especificar o Pin-Priority de um pacote
específico.
<p>
A próxima linha <tt>Pin: release a=stable</tt> significa que o
<prgn>apt-get</prgn> obtém o arquivo <file>Packages.gz</file> de um
repositório contendo o arquivo <file>Relese</file> que contenha a
estrofe <tt>Archive: stable</tt>.
<p>
A última linha <tt>Pin-Priority: 500</tt> especifica o Pin-Priority como
500.
Caso existam diversos pacotes com o mesmo nome, normalmente aquele com
o valor de Pin-Priority mais alto é o que será instalado.
<p>
Os significdos de Pin-Priority são :
<list>
<item>1001 e superior: Prioridades de "downgrade" (rebaixamento de versões).
 <p>O "downgrade" (rebaixamento de versão) do pacote é permitido para esta
 faixa de Pin-Priority.
<item>100 a 1000: Prioridades "Standard" (Padrão).
 <p>O "downgrade" do pacote não é permitido. Alguns valores chave de
 Pin-Priority :
<list>
<item>990: a prioridade definida pela opção <tt>--target-release></tt> ou
 <tt>-t</tt> do <manref name="apt-get" section="8">.
<item>500: a prioridade para todos os arquivos de pacotes padrão.
<item>100: a prioridade para os arquivos de pacotes atualmente instalados.
</list>
<item>0 a 99: Prioridades não-automáticas. (Estas são usadas somente caso
              o pacote não esteja instalado e não exista nenhuma outra
	      versão disponível.)
<item>menor que 0: A versão não é selecionada nunca.
</list>
Os mesmos efeitos de <tt>--target-release</tt> podem ser obtidos
configurando o arquivo <file>/etc/apt/apt.conf</file> como abaixo :
<example>
# echo 'APT::Default-Release "testing";' &gt;&gt; /etc/apt/apt.conf
</example>
O opção de linha de comando <tt>--target-release</tt> e a configuração
no arquivo <file>/etc/apt/apt.conf</file> supercedem a configuração no
arquivo <file>/etc/apt/preferences</file>. Seja cuidadoso com essa
interferência quando estiver lidando com o arquivo
<file>/etc/apt/preferences</file>.

<sect id="survival">Comandos de sobrevivência do Debian
<p>
Com esse conhecimento, é possível viver uma vida de "atualizações"
<strong>eternas</strong> :-)

<sect1 id="bug-check">Verificar bugs no Debian e procurar ajuda
<P>
Se você está tendo problemas sobre um pacote específico, tenha certeza de
verificar esses sites antes de pedir ajuda ou antes de enviar um relatório
de bug. 
(<prgn>lynx</prgn>, <prgn>links</prgn> e <prgn>w3m</prgn> funcionam
igualmente bem):
<example>
$ lynx &bugs;
$ lynx &bugs;<var>nome-do-pacote</var>  # se você sabe o nome do pacote
$ lynx &bugs;<var>número-do-bug</var>   # se você sabe o número do bug
</example>
Procure no Google (www.google.com) com palavras de busca incluindo
"site:debian.org". 
<p>
Quando tiver dúvidas, leia o manual. Configure <tt>CDPATH</tt> como a
seguir: 
<example>
export CDPATH=.:/usr/local:/usr/share/doc
</example>
e digite
<example>
$ cd <var>nome-do-pacote</var>
$ pager README.Debian # case esse exista
$ mc 
</example>
<![%f-ref;[
Mais recursos de suporte estão listados em <ref id="support">.
]]>
</sect1>

<sect1 id="apt-trouble">Resolvendo problemas com atualização pelo APT
<p>
Podem ocorrer problemas de dependência ao atualizar na 
<tt>unstable</tt>/<tt>testing</tt>, como descrito em
<ref id="upgrade-system">.
Na maior parte das vezes, isso ocorre porque um pacote que será atualizado
tem uma nova dependência que é desconhecida. Esses problemas são resolvidos
usando 
<example>
# apt-get dist-upgrade
</example>
Se isso não resolver, então repita um dos seguintes até que o problema se
resolva: 
<example>
# apt-get upgrade -f        # continua atualização depois do erro
... ou
# apt-get dist-upgrade -f   # continua atualização distribuição depois do erro 
</example>
<p>
Alguns scripts de atualização realmente quebrados podem causar um problema
persistente. É melhor resolver esse tipo de situação inspecionando os scripts
<file>/var/lib/dpkg/info/nome-do-pacote.<var>{post-,pre-}{install,removal}</var></file>
do pacote problemático e então executar: 
<example>
# dpkg --configure -a    # configura todos os pacotes parcialmente instalados
</example>
<p>
Se um script reclamar de um arquivo de configuração inexistente, procure o
arquivo de configuração correspondente em <file>/etc</file>.  Se existir um
com uma extensão <tt>.new</tt> (ou algo similar), modifique-o
(<prgn>mv</prgn>)  para remover o sufixo. 
<p>
Podem ocorrer problemas de dependência ao instalar em  unstable/testing.
Há maneiras de enganar dependências.
<example>
# apt-get install -f <var>pacote</var> # anula dependências quebradas
</example>
<p>
Um método alternativo para resolver essas situações é usar o pacote
<package>equivs</package>.  
Veja <file>&f-equivs;</file><![%f-ref;[ e <ref id="equivs">]]>.
</sect1>

<sect1 id="rescue-dpkg">Resgate usando o <prgn>dpkg</prgn>
<p>
A recuperação de uma falha no <prgn>dselect</prgn> (APT) pode ser feita em
um sistema realmente quebrado usando apenas o <prgn>dpkg</prgn> sem o APT:
<example>
# cd /var/cache/apt/archives
# dpkg -i libc6* libdb2* perl*
# dpkg -i apt* dpkg* debconf*
# dpkg -i *  # até que não ocorram erros
</example>
Se estiver faltando um pacote, pegue-o a partir dos <url id="&mirror-site;" 
name="sites espelhos"> com: 
<example>
# mc            # use "link FTP" apontando para o servidor FTP Debian 
</example>
Recentemente, os pacotes atuais no servidor HTTP/FTP podem não ser
localizados sob o clássico diretório <file>/dist</file>, mas sob o novo
diretório <file>/pool</file>. 
<![%f-ref;[
(Veja <ref id="pools">.)
]]>
<p>
Então instale com:
<example>
# dpkg -i /var/cache/apt/archives/<var>arquivodepacote.deb</var>
</example>
Para uma dependência quebrada, conserte-a ou use:
<example>
# dpkg --ignore-depends=<var>pacote1</var>,... -i <var>arquivodopacote.deb</var>
# dpkg --force-depends -i <var>arquivodopacote.deb</var>
# dpkg --force-depends --purge <var>pacote</var>
# dpkg --force-confmiss -i <var>arquivodopacote.deb</var>  # Instala arquivo de configuração faltando
</example>
</sect1>

<sect1 id="recover-status">Recuperação dos dados de seleção de pacotes 
<p>
Se o arquivo <file>/var/lib/dpkg/status</file> se corromper por alguma
razão, o sistema &debian; perde os dados de seleção de pacotes e é
severamente prejudicado. Procure pelo antigo arquivo
<file>/var/lib/dpkg/status</file> em
<file>/var/lib/dpkg/status-old</file> ou
<file>/var/backups/dpkg.status.*</file>.
<p>
Manter <file>/var/backups/</file> em uma partição separada pode ser uma boa
idéia já que esse diretório contém muitos dados importantes do sistema.
<p>
Se o arquivo <file>/var/lib/dpkg/status</file> antigo não estiver
disponível, você ainda pode recuperar a informação a partir dos
diretórios em <file>/usr/share/doc</file>.
<example>
# ls /usr/share/doc | \
  grep -v [A-Z] | \
  grep -v '^texmf$' | \
  grep -v '^debian$' | \
  awk '{print $1 " install"}' | \
  dpkg --set-selections
# dselect --expert # reinstalar o sistema, de-selecione conforme necessário
</example>

<sect1 id="rescue-var">Resgate do sistema após quebrar <file>/var</file>
<p>
Como o diretório <file>/var</file> contém dados atualizados regularmente
como correio, ele é propício a ser corrompido. Separá-lo em uma partição
independente limita os riscos. Se acontecer o pior, você pode ter que
recriar o diretório <file>/var</file> para resgatar o sistema &debian;.
<p>
Obtenha um conteúdo esqueleto do diretório <file>/var</file> a partir de
um sistema &debian; mínimo funcional baseado na mesma versão &debian; ou
mais antiga, por exemplo <url id="&var-tar-gz;" name="var.tar.gz">, e
coloque-o no diretório raiz do sistema quebrado. Então
<example>
# cd /
# mv var var-old      # se algum conteúdo útil foi deixado
# tar xvzf var.tar.gz # use o arquivo esqueleto do Woody 
# aptitude            # ou dselect
</example>
Isso deve prover um sistema funcional. Você pode realizar a recuperação
das seleções de pacotes usando a técnica descrita em <ref
id="recover-status">.
([FIXME]: Esse procedimento precisa mais experimentos para verificar.)
</sect1>

<sect1 id="un-bootable">Instalar um pacote em um sistema não iniciável
<p>
Inicie no Linux usando um disquete/CD de resgate do Debian ou uma partição
alternativa em um sistema Linux com multi-inicialização.
<![%f-ref;[
Consulte <ref id="booting">.
]]>
Monte o sistema não iniciável em <file>/target</file> e use o modo de
instalação chroot do <prgn>dpkg</prgn>.
<example>
# dpkg --root /target -i <var>arquivodopacote.deb</var>
</example>
Então configure e resolva os problemas.
<p>
Por outro lado, se a única coisa que impede de iniciar é um <prgn>lilo</prgn>
quebrado, você pode iniciar usando um disco de resgate padrão do Debian. No
prompt de boot, considerando que a partição de sua instalação Linux está em 
<file>/dev/hda12</file> e você quer o nível de execução (runlevel) 3, entre:
<example>
boot: rescue root=/dev/<var>hda12</var> 3
</example>
Então você terá iniciado em um sistema quase totalmente funcional com o 
kernel no disquete. (Podem ocorrer problemas menores devido à falta de 
recursos do kernel ou módulos.) 
</sect1>

<sect1>O que fazer se o comando <prgn>dpkg</prgn> estiver quebrado
<p>
Um <prgn>dpkg</prgn> pode tornar impossível instalar qualquer arquivo 
<tt>.deb</tt>. Um procedimento como o seguinte o ajudará a recuperar-se
dessa situação. (Na primeira linha, você pode substituir "links" com o
comando de seu browser favorito.)
<example>
$ links http://<var>http.us.debian.org</var>/debian/pool/main/d/dpkg/
  ... baixe o dpkg_<var>versão</var>_<var>arquit</var>.deb bom
$ su
password: *****
# ar x dpkg_<var>versão</var>_<var>arquitetura</var>.deb
# mv data.tar.gz /data.tar.gz
# cd /
# tar xzfv data.tar.gz
</example>
Para <tt>i386</tt>, <tt>http://packages.debian.org/dpkg</tt> também pode
usado como a URL.
</sect1>

</sect>

<sect id="debian-package">Comandos de nirvana do Debian
<p>
A <strong>Iluminação</strong> com esses comandos salvará uma pessoa da
eterna agonia cármica do inferno da atualização e a levará a alcançar
o <strong>nirvana</strong> do Debian. :-)

<sect1 id="info-file">Informação sobre um arquivo
<p>
Para encontrar o pacote ao qual um arquivo particular pertence:
<example>
$ dpkg {-S|--search} padrão # procura pelo padrão nos pacotes instalados
$ zgrep -e padrão <var>/cópia/local/do/debian/woody/Contents-i386.gz</var>
             # procura o padrão-nome-de-arquivo no arquivo do debian
</example>
Ou use comandos especializados de pacote:
<example>
# apt-get install dlocate  
                 # conflita com slocate (versão segura de locate)
$ dlocate <var>nome-de-arquivo</var>  # alternativa rápida ao dpkg -L e dpkg -S
...
# apt-get install auto-apt # ferramenta de instalação de pacotes sob demanda
# auto-apt update          # cria arquivo db para o auto-apt
$ auto-apt search <var>padrão</var>  
                # procura pelo padrão em todos os pacotes, instalados ou não
</example>
</sect1>

<sect1 id="info-package">Informação sobre um pacote
<p>
Procura e exibe informação a partir dos arquivos de pacotes. Certifique-se
de apontar o APT para o(s) repositório(s) próprio(s) editando
<file>/etc/apt/sources.list</file>. 
Se você deseja ver como pacotes na testing/unstable estão em
comparação com os atualmente instalados, use <tt>apt-cache
policy</tt>&mdash;muito legal.
<example>
# apt-get   check          # atualiza o cache e verifica pacotes quebrados
$ apt-cache search  <var>padrão</var> # procura pacote pela descrição do texto
$ apt-cache policy  <var>pacote</var> # prioridade de pacote/informação de dists
$ apt-cache show -a <var>pacote</var> # exibe descrição do pacote em todas dists
$ apt-cache showsrc <var>pacote</var> # exibe descrição de pacote fonte determinado
$ apt-cache showpkg <var>pacote</var> # informação do pacote para depuração
# dpkg  --audit|-C         # procura pacotes parcialmente instalados
$ dpkg {-s|--status} <var>pacote</var> ... # descrição de pacote instalado
$ dpkg -l <var>pacote</var> ...       # estado de pacote instalado (1 linha cada)
$ dpkg -L <var>pacote</var> ...       # lista nomes de arquivos instalados pelo pacote
</example>
<!-- Erase this when manual page gets fixed.  FIXME -->
O <tt>apt-cache showsrc</tt> não foi documentado na versão Woody mas
funciona :)  
<p>
Você também pode encontrar informação sobre pacote em (eu uso o <tt>mc</tt>
para navegar entre eles):
<example>
/var/lib/apt/lists/*
/var/lib/dpkg/available
</example>
A comparação dos seguintes arquivos dá informação sobre o que exatamente
aconteceu nas últimas sessões de instalação.
<example>
/var/lib/dpkg/status
/var/backups/dpkg.status*
</example>

</sect1>

<sect1 id="apt-get-auto">Instalação com  APT sem acompanhamento
<p>
Para uma instalação sem acompanhamento, adicione a seguinte linha em
<file>/etc/apt/apt.conf</file>:
<example>
Dpkg::Options {"--force-confold";}
</example>
Isso é equivalente a executar <tt>apt-get -q -y <var>nome-do-pacote</var></tt>.
Isso pode ter sérias implicações negativas. Então use essa dica com cuidado. 
Veja <manref name="apt.conf" section="5"> e <manref name="dpkg" section="1">.
<p>
Você pode configurar quaisquer pacotes particulares mais tarde seguindo 
<ref id="reconfigure">.

<sect1 id="reconfigure">Reconfigurar pacotes instalados
<p>
Use o seguinte para reconfigurar qualquer pacote já instalado.
<example>
# dpkg-reconfigure --priority=<var>medium</var> <var>pacote</var> [...]
# dpkg-reconfigure --all   # reconfigura todos os pacotes
# dpkg-reconfigure locales # gera qualquer locale extra
# dpkg-reconfigure --p=<var>low</var> xserver-xfree86 # reconfigura servidor X
</example>
Faça isso para o <prgn>debconf</prgn> se você quiser mudar o modo de diálogo
do <prgn>debconf</prgn> permanentemente.
<p>
Alguns programas vêm com scripts de configuração especiais.
<example>
apt-setup     - cria /etc/sources.list
install-mbr   - instala um gerenciador de Master Boot Record
tzconfig      - configura o fuso horário local
gpmconfig     - configura o daemon de mouse gpm
sambaconfig   - configura o Samba no Potato (Woody usa o debconf)
eximconfig    - configura o Exim (MTA)
texconfig     - configura o teTeX
apacheconfig  - configura o Apache (httpd)
cvsconfig     - configura o CVS
sndconfig     - configura o sistema de som
...
update-alternatives - define o comando padrão, por exemplo, vim como vi
update-rc.d         - gerenciamento de script de init System-V
update-menus        - sistema de menus Debian
...
</example>
</sect1>

<sect1 id="remove">Remover e eliminar (purge) pacotes
<p>
Remover um pacote mantendo sua configuração:
<example>
# apt-get remove <var>pacote</var> ...
# dpkg  --remove <var>pacote</var> ...
</example>
Remover um pacote e toda sua configuração:
<example>
# apt-get remove --purge <var>pacote</var> ...
# dpkg    --purge        <var>pacote</var> ...
</example>
</sect1>

<sect1 id="hold">Mantendo pacotes antigos
<p>
Por exemplo, o travamento de <package>libc6</package> e
<package>libc6-dev</package> para o <prgn>dselect</prgn> e 
<tt>apt-get -u upgrade <var>pacote</var></tt> pode ser feito como a seguir:
<example>
# echo -e "libc6 hold\nlibc6-dev hold" | dpkg --set-selections
</example>
<tt>apt-get -u install <var>pacote</var></tt> não será impedido por este
"hold". Para manter um pacote forçando um rebaixamento automático para
<tt>apt-get -u upgrade <var>pacote</var></tt> ou <tt>apt-get -u
dist-upgrade</tt>, adicione o seguinte a <file>/etc/apt/preferences</file>:
<example>
Package: libc6
Pin: release a=stable
Pin-Priority: 2000
</example>
Aqui o campo "<tt>Package:</tt>" não pode usar entradas como "<tt>libc6*</tt>".  
Se você precisa manter todos os pacotes binários relacionados ao pacote fonte
<package>glibc</package> em uma versão sincronizada, precisa listá-los
explicitamente. 
<p>
O seguinte listará pacotes em "hold":
<example>
dpkg --get-selections "*"|grep -e "hold$"
</example>
</sect1>

<sect1 id="mixedsys">Sistema híbrido stable/testing/unstable
<p>
<prgn>apt-show-versions</prgn> pode listar versões de pacotes disponíveis
com distribuição.
<example>
$ apt-show-versions | fgrep /testing | wc
... quantos pacotes você tem da testing
$ apt-show-versions -u
... lista de pacotes atualizáveis
$ apt-get install `apt-show-versions -u -b | fgrep /unstable`
... atualiza todos os pacotes unstable para suas versões mais novas
</example>
</sect1>

<sect1 id="cache">Descartar arquivos de pacote em cache
<p>
A instalação de pacotes com o APT deixa pacotes em cache em
<file>/var/cache/apt/archives</file> e esses precisam ser excluídos. 
<example>
# apt-get autoclean # remove apenas os arquivos de pacotes sem uso
# apt-get clean     # remove todos os arquivos de pacotes em cache
</example>
</sect1>


<sect1 id="record">Gravar/copiar a configuração do sistema
<p>
Para fazer uma cópia local dos estados de seleção dos pacotes:
<example>
$ dpkg --get-selections "*" &gt;<var>minhas_seleções</var>   # ou use \*
</example>
<tt>"*"</tt> faz <tt><var>minhas_seleções</var></tt> incluir entradas de
pacotes para "purge" também.
<p>
Você pode transferir esse arquivo para outro computador, e instalá-lo lá com:
<example>
# dselect update
# dpkg --set-selections &lt;<var>minhas_seleções</var>
# apt-get -u dselect-upgrade    # <var>ou</var> dselect install
</example>
</sect1>

<sect1 id="port">Portar um pacote para o sistema <tt>stable</tt>
<p>
Para atualizações parciais do sistema stable, reconstruir um pacote dentro
de seu ambiente usando o pacote fonte é desejável. Isso evita atualizações
 muito grandes de pacotes devido a suas dependências. Primeiro, adicione as
seguintes entradas ao <file>/etc/apt/sources.list</file>: 
<example>
deb-src &http-us;debian testing \
 main contrib non-free
deb-src &http-non-us;debian-non-US testing/non-US \
 main contrib non-free
deb-src &http-us;debian unstable \
 main contrib non-free
deb-src &http-non-us;debian-non-US unstable/non-US \
 main contrib non-free
</example>
Aqui cada entrada para <tt>deb-src</tt> está quebrada em 2 linhas devido a
restrições de impressão, mas a entrada real em <file>sources.list</file>
deve consistir de uma única linha.
<p>
Então pegue a fonte e faça um pacote local:
<example>
$ apt-get source <var>pacote</var>
$ dpkg-source -x <var>pacote.dsc</var>
$ cd <var>pacote-versão</var>
  ... inspecione pacotes necessários (Build-depends no arquivo .dsc) e
      instale-os também.  Você também precisa do pacote "fakeroot".

$ dpkg-buildpackage -rfakeroot 

  ...ou (sem assinatura)
$ dpkg-buildpackage -rfakeroot -us -uc # use "debsign" depois se necessário

  ...Então para instalar
$ su -c "dpkg -i <var>arquivodopacote.deb</var>"
</example>
Geralmente, é necessário instalar uns poucos pacotes com o sufixo "-dev"
para satisfazer dependências de pacotes. O <prgn>debsign</prgn> está no
pacote <package>devscripts</package>. O <prgn>auto-apt</prgn> pode facilitar
a satisfação dessas dependências. O uso de <prgn>fakeroot</prgn> evita o
uso desnecessário da conta root.
<p>
No Woody, esses problemas de dependências podem ser simplificados.  
Por exemplo, para compilar um pacote <package>pine</package> de apenas fonte:
<example>
# apt-get build-dep pine
# apt-get source -b pine
</example>
</sect1>

<sect1 id="local">Repositório local de pacotes
<p>
Para criar um repositório local de pacotes que seja compatível com o APT e o
sistema dselect, é necessário criar o arquivo <file>Packages</file> e os
arquivos de pacotes precisam ser colocados em uma árvore de diretórios
específica.
<p>
Pode-se fazer um repositório deb local como um repositório Debian
oficial:
<example>
# apt-get install dpkg-dev
# cd <var>/usr/local</var>
# install -d <var>pool</var> # os pacotes físicos são localizados aqui
# install -d dists/<var>unstable</var>/<var>main</var>/binary-<var>i386</var>
# ls -1 <var>pool</var> | sed 's/_.*$/ <var>prioridade</var>/ <var>seção</var>/' | uniq &gt; <var>override</var>
# editor <var>override</var> # ajuste <var>prioridade</var> e <var>seção</var>
# dpkg-scanpackages <var>pool</var> <var>override</var> <var>/usr/local</var>/ \
   &gt; dists/<var>unstable</var>/<var>main</var>/binary-<var>i386</var>/Packages
# cat &gt; dists/<var>unstable</var>/<var>main</var>/Release &lt;&lt; EOF
Archive: <var>unstable</var>
Version: <var>3.0</var>
Component: <var>main</var>
Origin: <var>Local</var>
Label: <var>Local</var>
Architecture: <var>i386</var>
EOF
# echo "deb file:<var>/usr/local</var> <var>unstable</var> <var>main</var>" \
   &gt;&gt; /etc/apt/sources.list
</example>
<p>
Alternativamente, pode-se fazer um repositório deb local curto e grosso:
<example>
# apt-get install dpkg-dev
# mkdir <var>/usr/local/debian</var>
# mv <var>/algum/lugar/pacote.deb</var> <var>/usr/local/debian</var>
# dpkg-scanpackages <var>/usr/local/debian</var> /dev/null | \
  gzip - &gt; <var>/usr/local/debian</var>/Packages.gz
#  echo "deb file:<var>/usr/local/debian</var> ./" &gt;&gt; /etc/apt/sources.list
</example>
<p>
Esses repositórios podem ser acessados remotamente disponibilizando
acesso a esses diretórios através de métodos HTTP ou FTP e mudando as
entradas em <file>/etc/apt/sources.list</file> apropriadamente.

<sect1 id="alien">Converter ou instalar um pacote binário alien
<p>
O <package>alien</package> possibilita a conversão de pacotes binários
providos em formatos de arquivo <tt>rpm</tt> da Redhat, <tt>slp</tt> da 
Stampede, <tt>tgz</tt> do Slackware, e <tt>pkg</tt> do Solaris em um pacote
<tt>deb</tt> do &debian;. Se você quiser usar um pacote de outra
distribuição Linux ao invés do que tem instalado em seu sistema, você pode
usar o <prgn>alien</prgn> para convertê-lo para seu formato de pacotes
preferido e instalá-lo. O <package>alien</package> também suporta pacotes
LSB.
</sect1>						 

<sect1 id="debsums">Verificar arquivos de pacotes instalados
<p>
<prgn>debsums</prgn> possibilita a verificação de arquivos de pacotes
instalados com checksums MD5.  Alguns pacotes não têm checksums MD5
disponíveis.  Uma solução temporária para administradores de sistema:
<example>
# cat >>/etc/apt/apt.conf.d/90debsums
DPkg::Post-Install-Pkgs {"xargs /usr/bin/debsums -sg";};
^D
</example>
por Joerg Wendland &lt;joergland@debian.org&gt;  (não testado).

<![%f-ref;[
<sect1 id="spy">Otimizando o arquivo <file>sources.list</file>
<p>
Resumidamente, esforços especiais para criar arquivos
<file>sources.list</file> não produziram melhoramentos significativos para
mim que vivo nos Estados Unidos (<strong>nota do tradutor:</strong> estas
são as palavras do autor desta seção). Eu manualmente escolho um site mais
próximo usando o <prgn>apt-setup</prgn>.
<p>
O <prgn>apt-spy</prgn> cria um arquivo <file>sources.list</file>
automaticamente, baseando-se na latência e largura de banda. O
<prgn>netselect-apt</prgn> cria um arquivo <file>sources.list</file> mais
completo, mas utiliza um método inferior para escolher o melhor espelho
(comparação do tempo de ping).
<example>
# apt-get install apt-spy
# cd /etc/apt ; mv sources.list sources.list.org
# apt-spy -d testing -l sources.apt
</example>
</sect1>

]]>

</sect>

<sect id="pecuriarities">Outras peculiaridades do Debian

<sect1 id="dpkg-divert">O comando <prgn>dpkg-divert</prgn>
<p>
<!-- copied from manual page -->
<strong>Desvios</strong> (divertions) de arquivos são uma maneira de forçar o
<prgn>dpkg</prgn> a não instalar um arquivo em sua localização padrão, mas
em uma localização <strong>desviada</strong>.  Os <strong>desvios</strong>
podem ser usados através dos scripts de pacotes &debian; para desviar de um
arquivo quando ele causa um conflito. Os administradores de sistema também
podem usar um desvio para substituir o arquivo de configuração de um pacote,
ou quando alguns arquivos (que não estão marcados como
<strong>conffiles</strong>) precisam ser preservados pelo <prgn>dpkg</prgn>,
ao instalar uma versão mais nova de um pacote que contém aqueles arquivos <![%f-ref;[
(veja <ref id="conffile">)]]>.
<example>
# dpkg-divert [--add]  <var>nomedoarquivo</var> # adiciona "desvio"
# dpkg-divert --remove <var>nomedoarquivo</var> # remove "desvio"
</example>
Geralmente é uma boa idéia não usar o <prgn>dpkg-divert</prgn> quando ele
não é absolutamente necessário.
</sect1>

<sect1 id="equivs">O pacote <package>equivs</package>
<p>
Se você compilar um programa a partir da fonte, é melhor torná-lo um pacote
local debianizado real (<tt>*.deb</tt>).  
Use <tt>equivs</tt> como último recurso.
<example>
Package: equivs
Priority: extra
Section: admin
Description: Engana dependências de pacote Debian
 Este é um pacote falso que pode ser usado para criar pacotes
 Debian, que contém apenas informação de dependência.
</example>
</sect1>

<sect1 id="alternatives">Comandos alternativos
<p>
Para fazer o comando <prgn>vi</prgn> executar <prgn>vim</prgn>, use
<prgn>update-alternatives</prgn>:
<example>
# update-alternatives --display vi
...
# update-alternatives --config vi
  Selection    Command
-----------------------------------------------
      1        /usr/bin/elvis-tiny
      2        /usr/bin/vim
*+    3        /usr/bin/nvi

Enter to keep the default[*], or type selection number: 2
</example>
Os itens no sistema de alternativas do Debian são mantidos em
<file>/etc/alternatives</file> como ligações simbólicas.
<p>
Para definir seu ambiente X window favorito, aplique  
<prgn>update-alternatives</prgn> para
<file>/usr/bin/x-session-manager</file> e
<file>/usr/bin/x-window-manager</file>.
<![%f-ref;[
Para detalhes, veja <ref id="custom-x">.
]]>
<p>
<file>/bin/sh</file> é uma ligação simbólica direta para <file>/bin/bash</file>
ou <file>/bin/dash</file>.  É mais seguro usar <file>/bin/bash</file> para
ser compatível com scripts contaminados com velho Bashismo, mas é mais
disciplinado usar <file>/bin/dash</file> para reforçar a compatibilidade
POSIX. A atualização para um kernel Linux 2.4 tende a definir isso para
<file>/bin/dash</file>.
</sect1>

<sect1 id="sys-v"><prgn>init</prgn> System-V e níveis de execução (runlevels)
<p>
O nível de execução  padrão em que inicializar pode ser definido em 
<file>/etc/inittab</file>.
<p>
Diferente de outras distribuições, o Debian deixa o gerenciamento de
nível de execução completamente como responsabilidade do administrador
do sistema. O gerenciamento de <prgn>init</prgn> estilo System-V no
Debian deve ser feito através de scripts <prgn>update-rc.d</prgn>.
<p>
Iniciar <file>/etc/init.d/<var>nome</var></file> no nível de execução
1,2,3 e parar em 4,5 com número de prioridade de seqüência 20 (normal)
pode ser feito com:
<example>
# update-rc.d <var>nome</var> start 20 1 2 3 . stop 20 4 5 .
</example>
A remoção de ligações simbólicas enquanto o script em <prgn>init.d</prgn> ainda
existe pode ser feita com:
<example>
# update-rc.d -f <var>nome</var> remove
</example>
Para editar níveis de execução, eu trapaceio.  Eu edito as entradas
manualmente usando o comando <prgn>mv</prgn> no prompt shell do
<prgn>mc</prgn> ao copiar as entradas de ligação usando
<tt>Alt-Enter</tt>. Por exemplo:
<example>
# mv S99xdm K99xdm # desabilita xdm (X display manager)
</example>
Eu também desabilito o daemon inserindo <tt>exit 0</tt> no início de um
script <prgn>init.d</prgn> como um hack rápido.
Esses são os arquivos de configuração depois de tudo.
</sect1>

<sect1 id="disables">Serviços daemon desabilitados
<p>
A distribuição &debian; considera a segurança do sistema seriamente e espera
que o administrador do sistema seja competente.  Assim, algumas vezes a
facilidade de uso aparece como assunto secundário e muitos serviços daemon
vêm com o maior nível de segurança, com os mínimos serviços (ou nenhum)
disponíveis como seu estado de instalação padrão.
<p>
Execute <tt>ps aux</tt> ou verifique os conteúdos de
<file>/etc/init.d/*</file> e <file>/etc/inetd.conf</file>, se tiver qualquer
dúvida (sobre Exim, DHCP, ...). Verifique também
<file>/etc/hosts.deny</file><![%f-ref;[ como em <ref id="loginctrl">]]>.
O comando <prgn>pidof</prgn> também é útil (veja
<manref name="pidof" section="8">). 
<p>
O X11 não permite conexões TCP/IP (remotas) por padrão nas versões recentes
do &debian;.  
<![%f-ref;[
Veja <ref id="xtcp">.
]]>
O redirecionamento do X em SSH também é desabilitado.  
<![%f-ref;[
Veja <ref id="xssh">.
]]>
</sect1>
</sect>

</chapt>

