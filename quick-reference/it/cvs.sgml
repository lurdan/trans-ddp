<!-- CVS revision of this document "$Revision: 1.4 $"  -->
<!-- CVS revision of original english document "1.16"  -->
<chapt id="cvs">CVS
<p>
Leggete <file>/usr/share/doc/cvs/html-cvsclient</file>,
<file>/usr/share/doc/cvs/html-info</file>,
<file>/usr/share/doc/cvsbook</file> con lynx, od eseguite un "info
cvs" e "man cvs" per informazioni dettagliate.

<sect id="cvs-inst">Installare un server CVS
<p>
Le impostazioni seguenti permettono il "commit" solo
da parte di un membro del gruppo "src", e l'amministrazione del cvs
solo da parte di un membro del gruppo "staff", riducendo così le
possibilità di mettersi nei guai.
<example>
# cd /var/lib; umask 002 ; sudo mkdir cvs # [WOODY] FSH
# apt-get install cvs cvs-doc cvsbook
# export CVSROOT=/var/lib/cvs
# cd $CVSROOT
# chown root:src .         # "staff" per aumentare le restrizioni,
                           # in caso di progetti allo stato iniziale.
# chmod 3775 .             # Se si usa "staff", utilizzate 2775
# cvs -d /var/lib/cvs init # è più sicuro specificare 
                           # l'opzione -d esplicitamente!
# cd CVSROOT
# chown -R root:staff .
# chmod 2775 .
# touch val-tags 
# chmod 664 history val-tags
# chown root:src history val-tags
</example>
<p>
</sect>

<sect id="cvs-examples">Esempi di una sessione CVS 

<sect1>CVS anonimo (solo download)
<p>
<example>
$ export CVSROOT=:pserver:anonymous@cvs.qref.sf.net:/cvsroot/qref
$ cvs login
$ cvs -z3 co qref
</example>
</sect1>

<sect1>Uso del server CVS locale
<p>
<example>
$ export CVSROOT=/var/lib/cvs
</example>
</sect1>

<sect1>Uso di un pserver CVS remoto
<p>
Non molto sicuro, ma buono per un CVS anonimo:
<example>
$ export CVSROOT=:pserver:account@cvs.foobar.com:/var/lib/cvs
$ cvs login
</example>
</sect1>

<sect1>Uso di un CVS remoto tramite ssh
<p>
Potete anche utilizzare l'utentificazione RSA (<ref id="ssh-rsa">),
che elimina la necessità della richiesta di password.
<example>
$ export CVSROOT=:ext:account@cvs.foobar.com:/var/lib/cvs
</example>
oppure, per sourceforge:
<example>
$ export CVSROOT=:ext:account@cvs.qref.sf.net:/cvsroot/qref
</example>
</sect1>

<sect1>Creare un nuovo archivio CVS
<p>
Per,
<example>
Oggetto          Valore             Significato
albero sorgente  ~/progetto-x       Tutti i codici sorgente
Nome progetto    progetto-x         Nome per questo progetto
Vendor Tag:      Main-branch        Tag per la branca intera
Release Tag:     Versione-originale Tag per una versione specifica
</example>
Quindi,
<example>
$ cd ~/progetto-x                 # entra nella directory sorgente
 ... crea un albero sorgente ...
$ cvs import -m "Start progetto-x" progetto-x Main-branch \
&gt;   Versione-iniziale
$ cd ..; rm -R ~/progetto-x
</example>
</sect1>

<sect1>Lavorare con CVS
<p>
Per richiamare e lavorare con le versioni locali del progetto-x con
l'archivio CVS:
<example>
$ cd                # muove all'area di lavoro.
$ cvs co progetto-x # copia i sorgenti CVS all'archivio locale
$ cd progetto-x
 ... esegui cambiamenti al contenuto ...
$ cvs diff -u       # simile a diff -u repository/ local/
$ cvs ci -m "Describe change"   # salva i sorgenti locali nel CVS
$ vi newfile_added
$ cvs add newfile_added
$ cvs ci -m "Added newfile_added"
$ cvs up                        # inserisce l'ultima versione da CVS
$ cvs tag Release-1             # aggiunge la tag di versione
... esegui ulteriori modifiche ...
$ cvs tag -d Release-1          # rimuove la tag di versione
$ cvs ci -m "more comments"
$ cvs tag Release-1             # ri-aggiunge la tag di versione
$ cd                            # ritorna all'area di lavoro.
$ cvs co -r Release-initial -d old progetto-x 
 ... riporta la versione originale alla più vecchia
$ cd old
$ cvs tag -b Release-initial-bugfixes # crea la tag di branca (-b)
 ... Ora si può lavorare sulla vecchia versione ...
$ cvs update -r Release-initial-bugfixes 
 ... si fonde con le altre nella branca???
$ cvs update -j Release-initial-bugfixes
 ... si fonde nel tronco principale???
 ... Fissa i conflitti ...
$ cvs ci -m "merge Release-initial-bugfixes"
$ cd
$ tar -cvzf old-progetto-x.tar.gz old 
                         # produce un archivio, -j per bz2
$ cvs release -d old     # rimuove i sorgenti locali (opzionale)
</example>
Alcune opzioni utili da ricordare (da usare subito dopo cvs):
<example>
-n      esecuzione secca, nessun effetto
-t      mostra messaggi sui passi dell'attività di cvs
</example>
</sect1>

<sect1>Esportare i files da CVS
<p>
Per ottenere l'ultimissima versione da CVS, usate "tomorrow":
<example>
$ cvs ex -D tomorrow module_name
</example>
</sect1>

<sect1>Amministrare CVS
<p>
Aggiungere un alias ad un progetto(server locale):
<example>
$ su - admin           # un membro del team
$ export CVSROOT=/var/lib/cvs ; cvs co CVSROOT/modules
$ cd CVSROOT
$ echo "px -a progetto-x" &gt;&gt;modules
$ cvs ci -m "Ora px è un alias per progetto-x"
$ cvs release -d .
$ exit                 # control-D per uscire da su
$ cvs co -d progettot px 
        # progetto-x (alias:px) da CVS alla directory del progetto
$ cd project
 ... modifica il contenuto ...
</example>
</sect1>
</sect>

<sect id="cvs-trouble">Risoluzione dei problemi

<sect1>Permessi dei file nel deposito
<p>
CVS non sovrascriverà il file corrente, ma lo rimpiazzerà con un
altro.  Quindi, <em>il permesso di scrittura nella directory
deposito</em> è critico. Ogni volta che si crea un nuovo deposito, è
bene lanciare i seguenti comandi per assicurarsi se detta condizione è
necessaria.
<example>
# cd /var/lib/cvs
# chown -R root:src deposito
# chmod -R ug+rwX   deposito
# chmod    2775     deposito  
        # se necessario, anche per le sottodirectory
</example>
</sect1>

<sect1>Il bit d'esecuzione
<p>
Il bit d'esecuzione di un file viene mantenuto alla chiusura della
sessione (check-out). Tutte le volte che appaiono problemi di permessi
di esecuzione dei files, cambiate i permessi nel deposito CVS con il
comando seguente.
<example>
# chmod ugo-x filename
</example>
</sect1>

</sect>

<sect id="cvs-short">Comandi CVS
<p>
Ecco i comandi CVS con le scorciatoie corrispondenti.
<example>
{add|ad|new} [-k kflag] [-m 'message'] files...
{admin|adm|rcs} [rcs-options] files...
{annotate|ann} [options] [files...]
{checkout|co|get} [options] modules...
{commit|ci|com}   [-lnR]  [-m  'log_message'  |  -f  file] \
        [-r revision] [files...]
{diff|di|dif} [-kl] [rcsdiff_options] [[-r rev1 | -D date1] \
        [-r rev2 |  -D date2]] [files...]
{export|ex|exp} [-flNn] -r rev|-D date [-d dir] [-k kflag] module...
{history|hi|his} [-report] [-flags] [-options args] [files...]
{import|im|imp} [-options] repository vendortag releasetag...
{login|logon|lgn}
{log|lo|rlog} [-l] rlog-options [files...]
{rdiff|patch|pa} [-flags] [-V vn] [-r t|-D d [-r t2|-D d2]] modules...
{release|re|rel} [-d] directories...
{remove|rm|delete} [-lR] [files...]
{rtag|rt|rfreeze} [-falnR]  [-b]  [-d]  [-r  tag  |  -D  date] \
         sym_bolic_tag modules...
{status|st|stat} [-lR] [-v] [files...]
{tag|ta|freeze} [-lR] [-F] [-b] [-d] [-r tag | -D date]  [-f] \
         sym_bolic_tag [files...]
{update|up|upd} [-AdflPpR] [-d] [-r tag|-D date] files...
</example>
</sect>

</chapt>
