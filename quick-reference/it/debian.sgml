<!-- CVS revision of this document "$Revision: 1.28 $"  -->
<!-- CVS revision of original english document "1.123"  -->
<!--Line width ruler (ruler uses 78 characters) 34567890123456789012345-->

<chapt id="package">Gestione dei pacchetti in Debian 

<p>
<prgn>aptitude</prgn> è attualmente l'interfaccia preferita
per APT, l'Advanced Package Tool.  Ricorda quali pacchetti avete
deliberatamente installato e quali in base alle dipendenze; questi ultimi
vengono disinstallati automaticamente da
<prgn>aptitude</prgn> queo non sono più necessari ai pacchetti installati
deliberatamente.
Ha funzionalità avanzate di filtro sui pacchetti, ma possono
essere difficili da configurare.
<p>
<prgn>synaptic</prgn> è attualmente l'interfaccia grafica Gtk preferita per
APT. Le sue funzionalità di filtro sono più facili da usare rispetto ad
<prgn>aptitude</prgn>.
Ha anche il supporto sperimentale per le
<url id="&debtags;" name="Debian Package Tags">.
<p>
Per ridurre il carico sui depositi &debian e
per velocizzare i vostri download,
dovreste prendere i pacchetti dai mirror &debian;.
<p>
Se dovete installare lo stesso pacchetto su più macchine sulla
vostra rete locale, impostate un
proxy HTTP locale useo <prgn>squid</prgn> per i pacchetti
scaricati con APT.
Impostate, se necessario, la variabile d'ambiente <tt>http_proxy</tt>,
oppure il valore di <tt>http</tt> in
<file>/etc/apt/apt.conf</file>. 
<p>
Sebbene l'a funzionalità di pinning di APT, descritta in
<manref name="apt_preferences" section="5"> sia potente, 
i suoi effetti possono essere difficili da comprendere e
gestire.
Consideratela una Funzione Avanzata.
<p>
<![%f-ref;[
L'uso del metodo descritto in <ref id="chroot"> è preferibile per
]]>
<![%q-ref;[
L'uso di chroot è preferibile per
]]>
assicurare al contempo stabilità del sistema ed accesso alle
versioni più recenti del software.
<p>
Questo capitolo fa riferimento ad un sistema successivo a Woody
Alcune funzionalità potrebbero richiedere un sistema Sarge o successivo.

<sect id="pkg-intro">Introduzione
<p>
Se la lettura di tutta la documentazione per gli sviluppatori è troppo per
voi, leggete questo capitolo per primo ed iniziate a gustare in pieno il
potere della Debian con le distribuzioni <tt>testing</tt>/<tt>unstable</tt> :-)

<sect1>Strumenti principali di gestione dei pacchetti
<p>
<example>
dpkg      &ndash; Installatore dei pacchetti &debian;
apt-get   &ndash; Interfaccia a riga di comeo per APT
aptitude  &ndash; Interfaccia avanzata testo e riga di comeo per APT
synaptic  &ndash; Interfaccia grafica Gtk di APT
dselect   &ndash; installatore &debian; dei pacchetti
tasksel   &ndash; Installatore dei task
</example>
Questi strumenti non non sono tutti alternativi fra loro.
Per esempio, <prgn>dselect</prgn> usa sia APT che <prgn>dpkg</prgn>.
<p>
APT usa <file>/var/lib/apt/lists/*</file> per tenere traccia dei pacchetti disponibili,
mentre <prgn>dpkg</prgn> usa <file>/var/lib/dpkg/available</file>.  Se avete
installato dei pacchetti useo direttamente <prgn>aptitude</prgn> od un'altra
interfaccia ad APT, e volete usare <prgn>dselect</prgn> per installare dei
pacchetti, assicuratevi di aggiornare il file 
<file>/var/lib/dpkg/available</file> tramite la voce 
<tt>[A]ggiorna</tt> del menu di <prgn>dselect</prgn>
(o con il comeo "<tt>dselect update</tt>").
<p>
<prgn>apt-get</prgn> installa automaticamente tutti i pacchetti
dai quali un pacchetto richiesto Dipende.
Non installa i pacchetti
che Raccomea o Suggerisce.
<p>
<prgn>aptitude</prgn>, al contrario, può essere configurato per installare
i pacchetti che un pacchetto richiesto Raccomea o Suggerisce.
<p>
<prgn>dselect</prgn> presenta all'utente una lista di pacchetti
che un pacchetto richiesto Raccomea o Suggerisce
e permette una loro selezione caso per caso.
<![%f-ref;[
Vedere <ref id="depends">.
]]>
</sect1>

<sect1>Strumenti utili
<p>
<example>
dpkg-reconfigure  - riconfigura un pacchetto già installato 
                    (se utilizza debconf)
dpkg-source       - gestisce il pacchetto con il file sorgente
dpkg-buildpackage - automatizza la creazione di un pacchetto
apt-cache         - controlla l'archivio dei pacchetti nella cache locale
</example>
</sect1>
</sect>

<sect id="apt-install">Iniziare la gestione dei pacchetti &debian;
<p>
<sect1 id="setup-apt">Impostare APT
<p>
Impostate <file>sources.list</file> come descritto in
<ref id="testing-transition">.
<footnote>
Se state traccieo <tt>testing</tt> o <tt>unstable</tt>, 
potete rimuovere i riferimenti a <tt>stable</tt> 
da <file>/etc/apt/sources.list</file> e da
<file>/etc/apt/preferences</file>.  
Ciò perchè <tt>testing</tt> origina come una copia di <tt>stable</tt>.
</footnote>
<![%f-ref;[
Fate riferimento anche a
<ref id="install">, <ref id="woody"> e <ref id="bin-editor">.
]]>
<sect1 id="tasksel">Installare i task
<p>
E' possibile installare un gruppo di pacchetti tipicamente richiesto per
un determinato utilizzo del sistema &debian;.
Questo gruppo di pacchetti è chiamato "task".
<p>
Il modo più semplice per installare i task al momento dell'installazione iniziale
è useo <prgn>tasksel</prgn>.
Notate che dovete eseguire
<example>dselect update</example>
prima di utilizzarlo.
<p>
Anche <prgn>aptitude</prgn> può installare i task ed è lo strumento 
racomeato per questo scopo.
Permette di deselzionare singoli pacchetti all'interno dei task
prima di procedere all'installazione.
</sect1>
<sect1 id="aptitude"><prgn>aptitude</prgn>
<p>
<prgn>aptitude</prgn> è un nuovo installatore di pacchetti basato su menu,
simile a <prgn>dselect</prgn>, ma costruito da zero sopra APT.  Può essere utilizzato
in alternativa  ad <prgn>apt-get</prgn> per gran parte
dei comandi.  
Vedere <manref name="aptitude" section="1"> e <file>&f-aptitude-readme;</file>.
<p>
Una volta cominciato ad usare <prgn>aptitude</prgn>, è meglio continuare ad
usarlo invece che come metodo alternativo di installazione dei pacchetti;
altrimenti perdete il vantaggio di avere <prgn>aptitude</prgn> che mantiene 
una traccia di tutti i pacchetti installati deliberatamente.
<p>
<prgn>aptitude</prgn> in modalità a tutto schermo accetta comandi sotto forma singole lettere, di norma in
minuscolo. Tasti degni di nota sono:
<example>
Tasto       Azione
F10         Menu
?           Aiuto per i comandi
u           Aggiorna le informazioni relative all'archivio dei pacchetti
+           Marca il pacchetto nuovo da installare o da aggiornare
-           Marca il pacchetto da rimuovere (mantiene la configurazione)
_           Marca il pacchetto da eliminare (rimuove la configurazione)
=           Pone il pacchetto in attesa
U           Marca tutti i pacchetti aggiornabili da aggiornare
g           Scarica ed installa i pacchetti selezionati
q           Esce dalla schermata corrente e salva le modifiche
x           Esce dalla schermata corrente e non salva le modifiche
Enter       Mostra le informazioni su un pacchetto
C           Mostra il changelog di un pacchetto
l           Cambia i limiti per il pacchetto mostrato
/           Cerca la prima corrispondenza
\           Ripete l'ultima ricerca
</example>
Come <prgn>apt-get</prgn>, <prgn>aptitude</prgn> installa i pacchetti
da cui un pacchetto selezionato Dipende.
<prgn>aptitude</prgn> offre anche l'opzione di prendere tutti i pacchetti
che un dato pacchetto Raccomea o Suggerisce.
Potete modificare questo comportamento tramite 
<tt>F10 -> Options -> Dependency heling</tt> nel suo menu.
<p>
Altri vantaggi di <prgn>aptitude</prgn> sono:
<list compact>
<item><prgn>aptitude</prgn> offre l'accesso a tutte le versioni di un pacchetto.
<item><prgn>aptitude</prgn> registra le azioni in <file>&f-aptitude-log;</file>.
<item><prgn>aptitude</prgn> facilita il tenere traccia di software obsoleto
elenceolo in "Obsolete e Locally Created Packages".
<item><prgn>aptitude</prgn> include un sistema abbastanza potente per la
ricerca di pacchetti particolari e per limitare i pacchetti mostrati.
Gli utenti familiari con <prgn>mutt</prgn> ci si abitueranno rapidamente,
poichè mutt è stata l'ispirazione per la sintassi.
Vedere "SEARCHING, LIMITING, e EXPRESSIONS" in 
<file>&f-aptitude-readme;</file>.
<item><prgn>aptitude</prgn> nella modalità a tutto schermo ha la 
funzione di <prgn>su</prgn> incastonata e può essere fatto girare
da normale utente finchè non si ha realmente bisogno dei privilegi amministrativi.
</list>
</sect1>

<sect1 id="dselect"><prgn>dselect</prgn>
<p>
Nelle versioni stabili da Potato in su,
<prgn>dselect</prgn> era il principale strumento di gestione dei pacchetti.
Per Sarge, considerate invece di usare <prgn>aptitude</prgn>.
<p>
Una volta lanciato, <prgn>dselect</prgn> seleziona automaticamente tutti i pacchetti
"Essenziali", "Importanti", e "Steard".
<p>
<prgn>dselect</prgn> presenta un'interfaccia utente un pò strana. 
Comunque sia, sono in tanti ad essersi abituati.
Quattro sono i comandi
ambigui (Maiuscolo significa MAIUSCOLO!):
<example>
Tasto  Azione
Q      Esci. Conferma la selezione corrente ed esce comunque 
       (prevale sulle dipendenze)
R      Torna indietro. Non intendevo farlo.
D      Dannazione! Non mi interessa cosa ne pensa dselect.  Fallo e basta!
U      Riporta tutto allo stato sUggerito
</example>
Useo <tt>D</tt> e <tt>Q</tt>, potete scegliere delle selezioni che presentano conflitti di
dipendenze a vostro rischio e pericolo. Usate questi comand con cura. 
<p>
Aggiungete una linea con l'opzione "expert" in 
<file>/etc/dpkg/dselect.cfg</file> per ridurne il "rumore".
<p>
Se la vostra macchine è lenta nell'esecuzione di <prgn>dselect</prgn>,
prendete in considerazione di eseguire <prgn>dselect</prgn> 
su un'altra macchina (più veloce) per trovare
i pacchetti che vi servono, poi usate 
<tt>apt-get install</tt> sulla macchina lenta per installarli. 
</sect1>

<sect1 id="apt-track">Tracciare una distribuzione con APT
<p>
Per tracciare la distribuzione <tt>testing</tt> man mano che cambia,
modificate il vostro <file>/etc/apt/preferences</file> in maniera che somigli a quanto segue:
<example>
Package: *
Pin: release a=testing
Pin-Priority: 800

Package: *
Pin: release a=stable
Pin-Priority: 600
</example>
Notate che il tracciamento della distribuzione <tt>testing</tt> 
può avere
come effetto il ritardo nell'installazione degli aggiornamenti per la
sicurezza. Tali pacchetti vengono prima caricati in <tt>unstable</tt> e poi
migrano in <tt>testing</tt> solo dopo un lasso di tempo.
<p>
Vedere <manref name="apt_preferences" section="5"> per esempi
più complessi che permettono, per esempio,
di tracciare <tt>testing</tt> mentre si installano pacchetti selezionati da
<tt>unstable</tt>.
<p>
Esempi di che bloccano alcuni pacchetti a determinate versioni,
mentre si tracciano altri pacchetti via via che vengono rilasciati,
sono disponibili nella 
<url id="&examples;" name="sottodirectory degli esempi"> come
<file>preferences.testing</file> e <file>preferences.unstable</file>.
<p>
Se mischiate le distribuzioni, p.es.
<tt>testing</tt> con <tt>stable</tt> o
<tt>unstable</tt> con <tt>stable</tt>,
vi troverete infine a prendere pacchetti fondamentali,
come <package>libc6</package> da
<tt>testing</tt> o <tt>unstable</tt> e non c'è
garanzia che essi non conterranno bachi.
Siete stati avvertiti.
<p>
Un altro esempio, <file>preferences.stable</file>,
forza tutti i pacchetti ad essere degradati a <tt>stable</tt>.
<p>
Il declassamento di un <strong>pacchetto</strong> da una versione
più recente ad una meno
non è ufficialmente supportato in &debian;.
Tuttavia, potreste aver bisogno di declassare un dato pacchetto per
reinstallarne una versione che sia funzionante, queo quella
più nuova non lo è.  Queste versione precedenti le trovate
localmente in <file>/var/cache/apt/archives/</file> o
remotamente in <url id="&snapshothome;">.  
Vedere anche <ref id="rescue-dpkg">.
<p>
Anche il declassamento di una <strong>distribuzione</strong>
ad una meno recente
non è ufficialmente supportato e quasi sicuramente
causerà problemi.
Tuttavia, se siete disperati, può valer la pena tentarlo
come ultima risorsa.
</sect1>

<sect1 id="apt-commes">I comandi di <prgn>aptitude</prgn>, <prgn>apt-get</prgn> e <prgn>apt-cache</prgn>
<p>
Mentre tracciate <tt>testing</tt>, come descritto sopra,
potete gestire il sistema con i comandi seguenti:
<list>
<item><tt>aptitude upgrade</tt> (o
      <tt>apt-get upgrade</tt> o
      <tt>aptitude dist-upgrade</tt> o 
      <tt>apt-get dist-upgrade</tt>)
 <p>Tracciano la distribuzione <tt>testing</tt> &mdash;
 aggiornano tutti i pacchetti del sistema
 dopo aver installato le versioni dei pacchetti da cui Dipende,
 dalla distribuzione <tt>testing</tt>.
<footnote>
La differenza fra <tt>upgrade</tt> e <tt>dist-upgrade</tt>
è evidente solo queo nuove versioni dei pacchetti hanno relazioni
di dipendenza diverse rispetto alle vecchie versioni.
Vedere <manref name="apt-get" section="8"> per i dettagli.
<p>
<tt>aptitude upgrade</tt> e <tt>aptitude dist-upgrade</tt> lanciano
<prgn>aptitude</prgn> in modalità riga di comando.  Potete passare a
tutto schermo premendo il tasto <tt>e</tt>.
</footnote>
<item><tt>apt-get dselect-upgrade</tt>
 <p>Traccia <tt>testing</tt> &mdash;
 aggiorna tutti i pacchetti in accordo con 
 la selezioni di <prgn>dselect</prgn>.
<item><tt>aptitude install <var>pacchetto</var>/unstable</tt>
 <p>Installa <var>pacchetto</var> da <tt>unstable</tt>, mentre
 installa le sue dipendenze da <tt>testing</tt>.
<item><tt>aptitude install -t unstable <var>pacchetto</var></tt>
 <p>Installa <var>pacchetto</var> da <tt>unstable</tt>, mentre
 installa le sue dipendenze anche da <tt>unstable</tt> impostando la
 Pin-Priority di <tt>unstable</tt> a 990.

<item><tt>apt-cache policy <var>foo bar ...</var></tt>
 <p>Controlla lo stato dei pacchetti <var>foo bar ...</var>.
<item><tt>aptitude show <var>foo bar ...</var> | less</tt>
(o <tt>apt-cache show <var>foo bar ...</var> | less</tt>)
 <p>Controlla le informazioni per i pacchetti <var>foo bar ...</var>.
<item><tt>aptitude install <var>foo=2.2.4-1</var></tt>
 <p>Installa la data versione <var>2.2.4-1</var> del pacchetto
 <var>foo</var>.
<item><tt>aptitude install <var>foo bar-</var></tt>
 <p>Installa il pacchetto <var>foo</var> e rimuove <var>bar</var>
<item><tt>aptitude remove <var>bar</var></tt>
 <p>Rimuove il pacchetto <var>bar</var> ma non i suoi file
 di configurazione.
<item><tt>aptitude purge <var>bar</var></tt>
 <p>Rimuove <var>bar</var> insieme ai suoi file di
 configurazione.
</list>
Nell'esempio sopra, dando ad <prgn>apt-get</prgn>
l'opzione <tt>-u</tt> gli fa scrivere
una lista di tutti i pacchetti da aggiornare e aspettare
l'utente prima di intraprendere le azioni.
Quanto segue gli fa sempre <prgn>apt-get</prgn> fare così:
<example>
$ cat &gt;&gt; /etc/apt/apt.conf &lt;&lt; .
// Mostra sempre i pacchetti che devono essere aggiornati (-u)
APT::Get::Show-Upgraded "true";
.
</example>
<p>
Utilizzare l'opzione <tt>--no-act</tt> per simulare le azioni
senza realmente installare, rimuovere, ecc. alcun pacchetto.

<sect id="survival">Comandi di sopravvivenza Debian
<p>
Conoscendoli, potrete vivere una vita di <strong>eterni</strong> "upgrade" :-)

<sect1 id="bug-check">Controllo dei bachi in Debian e ricerca di aiuto
<P>
Se avete dei problemi con un pacchetto in particolare, controllate prima questi siti e poi,
eventualmente, cercate aiuto o segnalate
un baco.
(<prgn>lynx</prgn>, <prgn>links</prgn> e <prgn>w3m</prgn> funzionano tutti bene):
<example>
$ lynx &bugs;
$ lynx &bugs;<var>nome-pacchetto</var>  # se conoscete il nome del pacchetto
$ lynx &bugs;<var>numerobaco</var>     # se conoscete il numero del baco segnalato
</example>
Cercate su Google (www.google.com) includendo nelle frasi da ricercare "site:debian.org".
<p>
Se avete ancora dubbi, leggete i manuali. Impostate <tt>CDPATH</tt> come segue:
<example>
export CDPATH=.:/usr/local:/usr/share/doc
</example>
e digitate
<example>
$ cd <var>nomepachetto</var>
$ pager README.Debian # se esiste
$ mc
</example>
<![%f-ref;[
Maggiori fonti di supporto sono descritte in <ref id="support">.
]]>
</sect1>

<sect1 id="apt-trouble">Aggiornamento con APT: risoluzione dei problemi
<p>
Problemi di dipendenze possono accadere quando si esegue l'aggiornamento in
<tt>unstable</tt> o <tt>testing</tt>, come descritto in 
<ref id="upgrade-system">.
Molte volte ciò accade poichè un pacchetto da aggiornare
presenta delle nuove dipendenze che non vengono soddisfatte. Problemi del
genere vengono risolti usando
<example>
# apt-get dist-upgrade
</example>
Se questo non funziona, allora ripetete uno dei seguenti comandi finchè il
problema non si risolve da sè:
<example>
# aptitude -f upgrade        # continua l'aggiornamento nonostante l'errore
... oppure
# aptitude -f dist-upgrade   # continua il dist-upgrade nonostante l'errore
</example>
<p>
Alcuni script di aggiornamento realmente difettosi possono causare problemi
ricorrenti. Per risolvere tali situazioni è in genere buona cosa ispezionare
gli script <file>/var/lib/dpkg/info/packagename.<var>{post-,pre-}{inst,rm}</var></file> del
pacchetto responsabile e poi eseguire:
<example>
# dpkg --configure -a    # configura tutti i pacchetti installati parzialmente
</example>
<p>
Se uno script lamenta la mancanza di un file di configurazione, date
un'occhiata in <file>/etc</file> per 
il file di configurazione corrispondente. Se ne esiste
uno con l'estensione <tt>.dpkg-new</tt> 
(o qualcosa di simile), <prgn>mv</prgn> per rimuovere il suffisso.
<p>
Problemi di dipendenze possono accadere installando i pacchetti in
<tt>unstable</tt> o <tt>testing</tt>.  
Esistono dei metodi per aggirare le dipendenze.
<example>
# aptitude -f install <var>pacchetto</var> # ignora le dipendenze difettose
</example>
<p>
Un metodo alternativo consiste nell'utilizzare il pacchetto 
<package>equivs</package>. 
Vedere <file>&f-equivs;</file><![%f-ref;[ e <ref id="equivs">]]>.
</sect1>

<sect1 id="rescue-dpkg">Salvataggio mediante <prgn>dpkg</prgn>
<p>
Se siete in un vicolo cieco con APT, potete scaricare i pacchetti
dai mirror &debian; ed installarli con <prgn>dpkg</prgn>.
Se non avete accesso alla rete, potete cercare le copie dei pacchetti
in <file>/var/cache/apt/archives/</file>.
<example>
# dpkg -i fetchmail_6.2.5-4_i386.deb
</example>
Se l'installazione di un pacchetto fallisce a causa di violazioni
delle dipendenze e avete realmente bisogno di quel pacchetto,
potete scavalcare i controlli sulle dipedenze usando le opzioni di
<prgn>dpkg</prgn> <tt>--ignore-depends</tt>,
<tt>--force-depends</tt> ed altre ancora.
Vedere <manref name="dpkg" section="8"> per i dettagli.
</sect1>

<sect1 id="recover-status">Recuperare i dati sulla selezione dei pacchetti
<p>
Se <file>/var/lib/dpkg/status</file> diventa illeggibile per una qualsivoglia
ragione, il sistema &debian; perde i dati sulla selezione dei pacchetti,
soffrendone in  maniera severa. Cercate il vecchio file
<file>/var/lib/dpkg/status-old</file>, oppure
<file>/var/backups/dpkg.status.*</file>.
<p>
Tenere <file>/var/backups/</file> in una partizione separata può essere una buona idea, 
dato che questa directory contiene molti dei dati fondamentali del sistema.

<p>
Se il vecchio file <file>/var/lib/dpkg/status</file> non è disponibile, 
potete ancora recuperare le informazioni dalle directory
in <file>/usr/share/doc/</file>.
<example>
# ls /usr/share/doc | \
  grep -v [A-Z] | \
  grep -v '^texmf$' | \
  grep -v '^debian$' | \
  awk '{print $1 " install"}' | \
  dpkg --set-selections
# dselect --expert # reinstalla il sistema, deseleziona se necessario
</example>

<sect1 id="rescue-var">Recupero del sistema dopo danneggiamento di <file>/var</file>
<p>
Dato che la directory <file>/var</file> contiene dati che vengono regolarmente
aggiornati, tipo la posta, è più suscettibile di corruzione di, p. es., <file>/usr/</file>
Metterla in una
partizione separata limita i rischi. Se accade l'irreparabile, bisogna
ricostruirla per salvare il sistema &debian;.  
<p>
Procuratevi una directory <file>/var</file> con il contenuto ridotto all'osso,
da un sistema &debian; minimale e funzionante, basato su una versione uguale o
più vecchia, per esempio <file><url id="&var-tar-gz;"
name="var.tar.gz"></file> e piazzatela nella root directory del sistema danneggiato.  Poi,
<example>
# cd /
# mv var var-old      # se vi è rimasto qualcosa di utile
# tar xvzf var.tar.gz # usate il file preso da Woody
# aptitude            # o dselect
</example>
Ciò dovrebbe restituirvi un sistema funzionante.  Potete velocizzare la
procedura di recupero delle selezioni dei pacchetti usando la tecnica
descritta in <ref id="recover-status">.  
([FIXME]: This procedure needs more experiments to verify.)
</sect1>

<sect1 id="un-bootable">Installare un pacchetto su un sistema non bootabile
<p>
Fate il boot in Linux mediante un floppy o CD di salvataggio Debian, o tramite
una partizione alternativa se avete un sistema con multiboot in Linux.  
<![%f-ref;[
Vedere <ref id="booting">. 
]]>
Montate il sistema non bootabile su <file>/target</file> ed usate il modo chroot di installazione
di <prgn>dpkg</prgn>.
<example>
# dpkg --root /target -i <var>packagefile.deb</var>
</example>
Poi configurate il tutto e risolvete i problemi.
<p>
A proposito, se tutto quello che impedisce il boot è un <prgn>lilo</prgn> malfunzionante,
potete fare il boot con un disco di salvataggio Debian standard. Al prompt del boot, ammettendo che la partizione root della vostra installazione è su
<file>/dev/hda12</file> e volete un runlevel 3, digitate:
<example>
boot: rescue root=/dev/<var>hda12</var> 3
</example>
A questo punto avrete accesso ad un sistema pressochè perfettamente funzionante con il kernel su dischetto. (Potranno esserci inconvenienti minori
dovuti alla mancanza di moduli o di funzioni particolari del kernel.)
</sect1>

<sect1>Cosa fare se <prgn>dpkg</prgn> non funziona
<p>
Un <prgn>dpkg</prgn> malfunzionante può rendere impossibile l'installazione di qualsiasi file <tt>.deb</tt>.
Una procedura come la seguente vi aiuterà ad uscire da questa situazione. 
(Nella prima riga,
potete sostituire "links" con il vostro browser da terminale preferito.)
<example>
$ links http://<var>http.us.debian.org</var>/debian/pool/main/d/dpkg/
... scarica un valido dpkg_<var>version</var>_<var>arch</var>.deb
$ su
password: *****
$ ar x dpkg_<var>version</var>_<var>arch</var>.deb
# mv data.tar.gz /data.tar.gz
# cd /
# tar xzfv data.tar.gz
</example>
Per <tt>i386</tt>, <tt>http://packages.debian.org/dpkg</tt> può 
anche essere utilizzata come URL.
</sect1>


</sect>

<sect id="debian-package">Comandi del "paradiso" Debian
<p>
L'<strong>Illuminazione</strong> ottenuta con questi comandi salverà una persona dall'eterno ciclo del karma
dell'inferno degli aggiornamenti, permettendogli di raggiungere il <strong>nirvana</strong> Debian. :-)

<sect1 id="info-file">Informazioni su di un file
<p>
Per scoprire a quale pacchetto un file appartiene:
<example>
$ dpkg {-S|--search} modello # trova i modelli nei pacchetti installati
$ wget http://ftp.us.debian.org/debian/dists/<var>sarge</var>/<var>Contents-i386.gz</var>
$ zgrep -e pattern <var>Contents-i386.gz</var>
	     # trova l'elenco dei file con la stessa radice (o il file) nell'archivio Debian
</example>
Potete utilizzare anche dei comandi specifici per i pacchetti:
<example>
# aptitude install dlocate 
$ dlocate <var>filename</var> # alternativa rapida a dpkg -L e dpkg -S 
...
# aptitude install auto-apt # strumento per l'installazione a richiesta dei pacchetti 
# auto-apt update          # crea un database per auto-apt 
$ auto-apt search <var>modello</var> 
	# effettua una ricerca completa nell'archivio pacchetti
</example>
</sect1>

<sect1 id="info-package">Informazioni su di un pacchetto
<p>
Cerca le informazioni negli archivi dei pacchetti e le visualizza. Accertatevi
che APT sia indirizzato verso l'archivio(i) appropriato(i) modificando
<tt>/etc/apt/sources.list</tt>.  Se volete vedere come si comportano i
pacchetti in <tt>testing</tt>/<tt>unstable</tt> rispetto a quelli correntemente installati utilizzate
<tt>apt-cache policy</tt>&mdash; un comando molto utile.
<example>
# apt-get   check           # aggiorna la cache e controlla le dipendenze 
$ apt-cache search  <var>testo</var> # cerca un pacchetto a partire dalla descrizione
$ apt-cache policy  <var>pacchetto</var> # informazioni su priorità e distribuzione di un pacchetto 
$ apt-cache show -a <var>pacchetto</var> # mostra la descrizione di un pacchetto per ogni distribuzione 
$ apt-cache showsrc <var>pacchetto</var> # mostra la descrizione del pacchetto sorgente corrispondente
$ apt-cache showpkg <var>pacchetto</var> # Informazioni per il debug
# dpkg  --audit|-C          # cerca i pacchetti parzialmente installati
$ dpkg {-s|--status} <var>pacchetto</var>... # descrizione del pacchetto installato 
$ dpkg -l <var>pacchetto</var> ... # stato del pacchetto installato (1 linea)
$ dpkg -L <var>pacchetto</var> ... # elenca i file installati per un dato pacchetto
</example>
<!-- Erase this when manual page gets fixed.  FIXME -->
<tt>apt-cache showsrc</tt> non è documentato al momento del rilascio di Woody, ma   
funziona :)
<p>
E' sempre possibile trovare informazioni sui pacchetti in (Io uso <tt>mc</tt>):
<example>
/var/lib/apt/lists/*
/var/lib/dpkg/available
</example>
Il confronto dei file seguenti fornisce informazioni su cosa è realmente   
accaduto nelle ultime sessioni di installazione.   
<example>
/var/lib/dpkg/status
/var/backups/dpkg.status*
</example
</sect1>

<sect1 id="apt-get-auto">Installazione automatica con APT
<p>
Per una installazione automatica, senza controllo alcuno, aggiungete la seguente riga a 
<file>/etc/apt/apt.conf</file>:
<example>
Dpkg::Options {"--force-confold";}
</example>
Questo è l'equivalente di <tt>aptitude -y install <var>nomepacchetto</var></tt>.
o <tt>apt-get -q-y install <var>nomepacchetto</var></tt>.
Siccome in questo modo si risponde "si" a tutte le domande, 
usate questo trucco con accortezza. 
Vedere <manref name="apt.conf" section="5"> e <manref name="dpkg" section="1">.
<p>
Si può configurare qualsiasi pacchetto in un secondo momento seguendo 
<ref id="reconfigure">.

<sect1 id="reconfigure">Riconfigurare i pacchetti già installati
<p>
Usate i seguenti comandi per riconfigurare un pacchetto già installato.
<example>
# dpkg-reconfigure --priority=<var>medium</var> <var>pacchetto</var> [...]
# dpkg-reconfigure --all  # riconfigura tutti i pacchetti
# dpkg-reconfigure locales # genera qualsiasi locale extra
# dpkg-reconfigure --p=<var>low</var> xserver-xfree86 # riconfigura il server X
</example>
Eseguite questo tramite <prgn>debconf</prgn> se avete la necessità di cambiarne la
configurazione dei messaggi in modo permanente.
<p>
Alcuni programmi hanno degli script speciali di configurazione.
<footnote>
Alcuni script <prgn>*config</prgn> stanno scomparendo nelle nuove versioni
di Sarge e la funzionalità di configurazione dei pacchetti viene trasferita
al sistema <prgn>debconf</prgn>.
</footnote>
<example>
apt-setup     - crea /etc/apt/sources.list
install-mbr   - installa un manager di Master Boot Record 
tzconfig      - imposta il fuso orario locale
gpmconfig     - imposta il demone per mouse gpm
eximconfig    - configura Exim (MTA)
texconfig     - configura teTeX
apacheconfig  - configura Apache (httpd)
cvsconfig     - configura CVS
sndconfig     - configura il sistema audio
...
update-alternatives - imposta i comandi predefiniti, p.e. vim per vi
update-rc.d         - Gstione degli script di inzializzazione del System-V 
update-menus        - Il sistema dei menu Debian 
...
</example>
</sect1>

<sect1 id="remove">Rimozione e purga dei pacchetti
<p>
Rimuove un pacchetto mantenendone la configurazione:
<example>
# aptitude remove <var>pacchetto</var> ...
# dpkg   --remove <var>pacchetto</var> ...
</example>
Rimuove un pacchetto e la sua configurazione:
<example>
# aptitude purge <var>pacchetto</var> ...
# dpkg   --purge        <var>pacchetto</var> ...
</example>
</sect1>

<sect1 id="hold">Mantenere vecchi pacchetti
<p>
Per esempio, per mantenere <package>libc6</package> e 
<package>libc6-dev</package> con <prgn>dselect</prgn>
e <tt>aptitude install <var>pacchetto</var></tt> si può procedere come segue:
<example>
# echo -e "libc6 hold\nlibc6-dev hold" | dpkg --set-selections
</example>
<tt>aptitude install <var>pacchetto</var></tt> non verrà impedito da quell'"hold". Per
mantenere un pacchetto forzandone un declassamento automatico con <tt>aptitude upgrade
<var>pacchetto</var></tt> oppure <tt>aptitude dist-upgrade</tt>, aggiungete le seguenti
linee ad <file>/etc/apt/preferences</file>:
<example>
Package: libc6
Pin: release a=stable
Pin-Priority: 2000
</example>
Qui la voce "<tt>Package:</tt>" non può usare termini tipo "<tt>libc6*</tt>".  
Se dovete mantenere tutti i pacchetti binari correlati al pacchetto sorgente <package>glibc</package> 
in una versione sincronizzata, dovete elencarli esplicitamente.
<p>
Il comando seguente mostra i pacchetti tenuti in sospeso (non aggiornati):
<example>
dpkg --get-selections "*"|grep -e "hold$"
</example>
</sect1>

<sect1 id="mixedsys">Sistema misto <tt>stable</tt>/<tt>testing</tt>/<tt>unstable</tt>
<p>
<prgn>apt-show-versions</prgn> può elencare le versioni dei pacchetti disponibili 
per ciascuna distribuzione.
<example>
$ apt-show-versions | fgrep /testing | wc
... quanti pacchetti avete da testing
$ apt-show-versions -u
... elenco di pacchetti aggiornabili
$ aptitude install `apt-show-versions -u -b | fgrep /unstable`
... aggiorna tutti i pacchetti da unstable alle loro versioni più recenti
</example>
</sect1>

<sect1 id="cache">Potare i file della cache
<p>
L'installazione dei pacchetti tramite APT lascia i loro file archiviati
in <file>/var/cache/apt/archives</file> e questi vanno rimossi.
<example>
# aptitude autoclean # rimuove solo pacchetti inutili
# aptitude clean     # rimuove tutti i pacchetti nella cache
</example>
</sect1>


<sect1 id="record">Salvare/copiare la configurazione del sistema
<p>
Per fare una copia locale dello stato della selezione dei pacchetti:
<example>
# debconf-get-selections &gt; <var>debconfsel.txt</var>
# dpkg --get-selections "*" &gt;<var>lemieselezioni</var>   # oppure usare \*
</example>
<tt>"*"</tt> fa includere anche i nomi dei pacchetti marcati con "elimina".
<p>
Potete poi trasferire questo file su un altro computer ed installarlo con:
<example>
# dselect update
# debconf-set-selections &lt; <var>debconfsel.txt</var>
# dpkg --set-selections &lt;<var>lemieselezioni</var>
# apt-get -u dselect-upgrade # <var>o</var> dselect install 
</example>
</sect1>

<sect1 id="port">Portare un pacchetto nel sistema <tt>stable</tt>
<p>
Se si eseguono degli aggiornamenti parziali di un sistema <tt>stable</tt>, può essere
buona cosa ricreare un pacchetto all'interno del proprio ambiente a partire
dai sorgenti. In tal modo si eviteranno dei massicci aggiornamenti di
pacchetti, dovuti alle loro dipendenze. Per prima cosa, aggiungete le linee seguenti a <file>/etc/apt/sources.list</file>:
<example>
deb-src &http-us;debian testing \
 main contrib non-free
deb-src &http-us;debian unstable \
 main contrib non-free
</example>
Ogni linea che inizia con <tt>deb-src</tt> qui è divisa in due parti per ragioni 
di stampabilità, ma in <file>sources.list</file> dovranno essere ciascuna 
su un'unica riga.
<p>
Poi recuperate i sorgenti e costruite un pacchetto locale:
<example>
$ apt-get update  # aggiorna la lista dei pacchetti sorgente
$ apt-get source <var>pacchetto</var> 
$ dpkg-source -x <var>pacchetto.dsc</var> 
$ cd <var>versione-pacchetto</var> 
  ... controlla i pacchetti necessari (Build-depends nel file
      .dsc) e li installa. Avete bisogno anche del pacchetto "fakeroot".

$ dpkg-buildpackage -rfakeroot 

...oppure (senza "signature") 
$ dpkg-buildpackage -rfakeroot -us -uc utilizzate "debsign" in seguito, se necessario

...poi per installare il pacchetto
$ su -c "dpkg -i <var>pacchetto.deb</var>"
</example>
Normalmente, per soddisfare le dipendenze si ha la necessità di installare
alcuni pacchetti con il suffisso "-dev". <prgn>debsign</prgn> è contenuto nel pacchetto
<package>devscripts</package>. <prgn>auto-apt</prgn> può aiutare nel soddisfare queste dipendenze.
<prgn>fakeroot</prgn> 
evita l'uso non necessario del root account.
<p>
In Woody, questi problemi di dipendenze possono essere semplificati.  
Per esempio per compilare solo il sorgente del pacchetto <package>pine</package>:
<example>
# apt-get build-dep pine
# apt-get source -b pine
</example>
</sect1>

<sect1 id="local">Archivio locale dei pacchetti
<p>
Per creare un archivio locale dei pacchetti che sia compatibile con
APT e <prgn>dselect</prgn>, bisogna creare <file>Packages</file> ed i file dei pacchetti devono  
essere organizzati in un particolare albero directory.
<p>
Si può creare un deposito locale <tt>deb</tt> simile ad un archivio ufficiale
Debian in questo modo:
<example>
# aptitude install dpkg-dev
# cd <var>/usr/local</var>
# install -d <var>pool</var> # i pacchetti sono fisicamente localizzati qui
# install -d dists/<var>unstable</var>/<var>main</var>/binary-<var>i386</var>
# ls -1 <var>pool</var> | sed 's/_.*$/ <var>priority</var> <var>section</var>/' | uniq &gt; <var>override</var>
# editor <var>override</var> # adjust <var>priority</var> e <var>section</var>
# dpkg-scanpackages <var>pool</var> <var>override</var> <var>/usr/local</var>/ \
   &gt; dists/<var>unstable</var>/<var>main</var>/binary-<var>i386</var>/Packages
# cat &gt; dists/<var>unstable</var>/<var>main</var>/Release &lt;&lt; EOF
Archive: <var>unstable</var>
Version: <var>3.0</var>
Component: <var>main</var>
Origin: <var>Local</var>
Label: <var>Local</var>
Architecture: <var>i386</var>
EOF
# echo "deb file:<var>/usr/local</var> <var>unstable</var> <var>main</var>" \
   &gt;&gt; /etc/apt/sources.list
</example>
<p>
In alternativa, un altro metodo per creare un archivio locale <tt>deb</tt>, molto alla bruta:
<example>
# aptitude install dpkg-dev
# mkdir <var>/usr/local/debian</var>
# mv <var>/dove/è/pacchetto.deb</var> <var>/usr/local/debian</var>
# dpkg-scanpackages <var>/usr/local/debian</var> /dev/null | \
  gzip - &gt; <var>/usr/local/debian</var>/Packages.gz
#  echo "deb file:<var>/usr/local/debian</var> ./" &gt;&gt; /etc/apt/sources.list
</example>
<p>
Questi archivi possono essere raggiunti da remoto 
tramite HTTP od FTP, modificeo le voci
in <file>/etc/apt/sources.list</file> di conseguenza.

<sect1 id="alien">Convertire od installare un pacchetto binario di altra distribuzione
<p>
<package>alien</package> permette la conversione dei pacchetti binari nei formati 
Red Hat <tt>rpm</tt>, Stampede <tt>slp</tt>, Slackware <tt>tgz</tt>, e Solaris
<tt>pkg</tt>, in pacchetti &debian; <tt>deb</tt>. Se volete usare un pacchetto
proveniente da un'altra distribuzione di Linux al posto di quello installato
sul vostro sistema, potete utilizzare <prgn>alien</prgn> per convertirlo nel
formato che più preferire. <package>alien</package> supporta anche
pacchetti LSB.
</sect1>

<sect1 id="auto-apt">Comando di installazione automatica
<p>
<prgn>auto-apt</prgn> è uno strumento di installazione dei pacchetti a richiesta
<example>
$ sudo auto-apt update
 ... aggiorna il database
$ auto-apt -x -y run
Entering auto-apt mode: /bin/bash
Exit the command to leave auto-apt mode.
$ less /usr/share/doc/med-bio/copyright # access non-existing file
 ...  Installa il pacchetto che fornisce questo file.
 ... Installa anche le dipendenze
</example>
</sect1>

<sect1 id="debsums">Verificare i file dei pacchetti installati
<p>
<prgn>debsums</prgn> permette la verifica dei file dei pacchetti installati contro gli
MD5 checksums.  Alcuni pacchetti non hanno MD5 checksums.  Una soluzione temporanea per 
gli amministratori di sistema:
<example>
# cat >>/etc/apt/apt.conf.d/90debsums
DPkg::Post-Install-Pkgs {"xargs /usr/bin/debsums -sg";};
^D
</example>
da Joerg Wendle &lt;joergle@debian.org&gt;  (non testata).
<![%f-ref;[
<sect1 id="spy">Ottimizzare <file>sources.list</file>
<p>
In breve, sforzi sovrumani per creare un <file>sources.list</file>
ottimizzato, non hanno prodotto per me miglioramenti, da una località negli .
Ho scelto manualmente un sito vicino usando <prgn>apt-setup</prgn>.
<p>
<prgn>apt-spy</prgn> crea automaticamente <file>sources.list</file>,
basandosi su latenza e larghezza di banda. <prgn>netselect-apt</prgn> crea un
<file>sources.list</file> ancora più completo, ma usa un metodo meno efficace
per la scelta del mirror migliore (comparazione dei tempi di ping).
<example>
# aptitude install apt-spy
# cd /etc/apt ; mv sources.list sources.list.org
# apt-spy -d testing -l sources.apt
</example>
</sect1>

]]>

</sect>

<sect id="pecuriarities">Altre particolarità di Debian

<sect1 id="dpkg-divert">Il comando <prgn>dpkg-divert</prgn>
<p>
<!-- copied from manual page -->
Le <strong>deviazioni</strong> dei files
rappresentano un modo di forzare <prgn>dpkg</prgn> a non installare un file
nella sua posizione predefinita, ma in una posizione <strong>deviata</strong>.
Le <strong>deviazioni</strong> possono essere utilizzate tramite gli script
dei pacchetti &debian; per muovere un file quando causa un conflitto.  Gli amministratori di sistema possono usare una deviazione anche per scavalcare un
file di configurazione di un pacchetto, oppure quando alcuni file (non marcati come conffiles) devono essere salvaguardati da
<prgn>dpkg</prgn>, durante l'installazione di una nuova versione di un dato
file<![%f-ref;[
(vedere <ref id="conffile">)]]>.
<example>
# dpkg-divert [--add]  <var>filename</var> # aggiunge la "deviazione"
# dpkg-divert --remove <var>filename</var> # rimuove la "deviazione"
</example>
Di solito è una buona idea non usare <prgn>dpkg-divert</prgn> a meno che
non sia strettamente necessario.
</sect1>

<sect1 id="equivs">Il pacchetto <package>equivs</package>
<p>
Se compilate un programma dai sorgenti, è meglio debianizzarlo in un
pacchetto (<tt>*.deb</tt>).  
Usate <tt>equivs</tt> solo come ultima risorsa.
<example>
Package: equivs
Priority: extra
Section: admin
Description: Aggira le dipendenze dei pacchetti Debian. E' un pacchetto
 vuoto che può essere usato per creare dei pacchetti Debian contenenti 
 solo le informazioni sulle dipendenze.
</example>
</sect1>

<sect1 id="alternatives">Comandi alternativi
<p>
Per lanciare <prgn>vim</prgn> con il comando <prgn>vi</prgn>, usate 
<prgn>update-alternatives</prgn>:
<example>
# update-alternatives --display vi
...
# update-alternatives --config vi
  Selection    Comme
-----------------------------------------------
      1        /usr/bin/elvis-tiny
      2        /usr/bin/vim
*+    3        /usr/bin/nvi

Enter to keep the default[*], or type selection number: 2
</example>
Le alternative del sistema in Debian sono contenute in <file>/etc/alternatives</file> come
collegamenti simbolici.
<p>
Per impostare il vostro ambiente X Window preferito, usate invece
<prgn>update-alternatives</prgn> su 
<file>/usr/bin/x-session-manager</file> e
<file>/usr/bin/x-window-manager</file>.
<![%f-ref;[
Per i dettagli, vedere <ref id="custom-x">.  
]]>
<p>
<file>/bin/sh</file> è un collegamento simbolico a <file>/bin/bash</file> o
<file>/bin/dash</file>.  E' più sicuro usare <file>/bin/bash</file> per
mantenere la compatibilità con vecchi script in contaminati da bash, ma più
corretto utilizzare <file>/bin/dash</file> per rinforzare la compatibilità POSIX.
L'aggiornamento al kernel 2.4 tende ad impostare il collegamento su <file>/bin/dash</file>
</sect1>

<sect1 id="sys-v">Uso dei runlevel
<p>
Una volta installati, gran parte dei pacchetti &debian; configura i propri
servizi per girare nei runlevel da 2 a 5.
Quindi, non esistono differenze fra i runlevel 2, 3, 4 e 5 su un sistema
&debian; non personalizzato;
&debian; lascia all'amministratore la possibilità di
<![%f-ref;[
personalizzare i runlevel, come descritto in <ref id="custombootscripts">.
]]>
<![%q-ref;[
personalizzare i runlevel.
]]>
Ciò differisce dal modo in cui i runlevel sono usati da altre distribuzioni
popolarin GNU/Linux.
Una modifica che potreste voler fare e disabilitare
<prgn>xdm</prgn> o <prgn>gdm</prgn> nel runlevel 2
in maniera da non lanciare l'X display manager
al termine della sequenza di boot;
potete lanciarlo passando al runlevel 3.
<p>
<![%f-ref;[
Per maggiori informazioni sui runlevel, vedere <ref id="runlevels">.
]]>

<sect1 id="disables">Demoni di servizio disabilitati
<p>
Gli sviluppatori &debian; hanno molto a cuore la sicurezza del sistema.
Molti demoni di servizio sono installati
con il minimo dei servizi abilitati.
<p>
Se avete dei dubbi (su Exim, DHCP, ...) controllate <tt>ps aux</tt> oppure il
contenuto di <file>/etc/init.d/*</file> e di <file>/etc/inetd.conf</file>.
Controllate anche <file>/etc/hosts.deny</file><![%f-ref;[ in 
<ref id="loginctrl">]]>.
Anche il comando <prgn>pidof</prgn> è utile (vedere
<manref name="pidof" section="8">).
<p>
X11 non permette connessioni TCP/IP (remote) predefinite nelle versioni più
recenti di &debian;. 
<![%f-ref;[
Vedere <ref id="xtcp">.
]]>
Anche l'X forwarding in SSH è disabilitato.
<![%f-ref;[
Vedere <ref id="xssh">.
]]>
</sect1>
</sect>

</chapt>
