<!-- CVS revision of this document "$Revision: 1.21 $"  -->
<!-- CVS revision of original english document "1.88"  -->
<!--Line width ruler (ruler uses 78 characters) 34567890123456789012345-->

<chapt id="package">Gestione dei pacchetti in Debian 

<p>
Per ridurre il carico sui repositori &debian, abbiate l'accortezza di organizzare un proxy http locale utilizzando <prgn>squid</prgn>,
per i pacchetti scaricati da APT e, se necessario, impostate la variabile
d'ambiente <tt>http_proxy</tt> od il valore <tt>http</tt> in <file>/etc/apt/apt.conf</file>. Ciò migliora enormemente la performance
degli upgrades via rete, in particolar modo con più macchine Debian su una
LAN.
<p>
Sebbene l'opzione di pinning descritta in <manref name="apt_preferences"
section="5"> sia potente, non risolve tutti i problemi di dipendenze,
poichè le necessità di soddisfare le dipendenze fanno si che si tendano a
scaricare le versioni più recenti di pacchetti fondamentali
<p>
<![%f-ref;[
L'uso del metodo descritto in <ref id="chroot"> è preferibile per
]]>
<![%q-ref;[
L'uso del metodo chroot è preferibile per
]]>
assicurare al contempo stabilità del sistema ed accesso alle
versioni più recenti del software.
<p>
Questo capitolo fa riferimento ad un sistema basato su Woody, ma gran
parte delle informazioni sono applicabili anche a Potato system
(tranne che per <manref name="apt_preferences"
section="5"> ed argomenti correlati a <file>/etc/apt/preferences</file>).

<sect id="pkg-intro">Introduzione
<p>
Se la lettura di tutta la documentazione per gli sviluppatori è troppo per
voi, leggete questo capitolo per primo ed iniziate a gustare in pieno il
potere della Debian con le distribuzioni <tt>testing</tt>/<tt>unstable</tt> :-)

<sect1>Strumenti fondamentali
<p>
<example>
dselect   &ndash; strumento di gestione dei pacchetti basato su menu (livello
superiore) 
dpkg      &ndash; installa i pacchetti (centrato sui file dei pacchetti)
apt-get   &ndash; installa i pacchetti (centrato sull'archivio pacchetti,
CLI APT)
tasksel   &ndash; installa i task (un gruppo di pacchetti)
aptitude  &ndash; installa i pacchetti (paccchetti &amp; task, ncurses APT)
deity     &ndash; alternativa ad APT basata su ncurses
synaptic, gsynaptic &ndash; interfacce alternative di APT
</example>
Questi strumenti non agiscono allo stesso livello. <prgn>dselect</prgn> gira al di sopra
di APT (il comando da terminale è <prgn>apt-get</prgn>) e di <prgn>dpkg</prgn>.
<p>
APT usa <file>/var/lib/apt/lists/*</file> per tenere traccia dei pacchetti disponibili,
mentre <prgn>dpkg</prgn> usa <file>/var/lib/dpkg/available</file>.  Se avete
installato dei pacchetti usando direttamente <prgn>apt-get</prgn> o simili, tipo
<prgn>aptitude</prgn>, assicuratevi di aggiornare il file <file>/var/lib/dpkg/available</file> 
tramite la voce <tt>[U]pdate</tt> del menu di <prgn>dselect</prgn> ([A]ggiorna per la versione italiana)
o tramite la shell con il comando "<tt>dselect update</tt>" prima di eseguire <tt>dselect select</tt>,
<tt>tasksel</tt> o <tt>dpkg -l</tt>.
<p>
Per quanto riguarda le dipendenze, <prgn>apt-get</prgn> sceglie automaticamente
i pacchetti sotto <strong>dipende</strong> ma lascia quelli sotto
<strong>raccomanda</strong> e <strong>suggerisce</strong>, mentre
<prgn>dselect</prgn> offre un controllo più fine
sulla scelta dei pacchetti scegliendo già in partenza quelli sotto <strong>dipende</strong>
e <strong>raccomanda</strong>. <prgn>aptitude</prgn> offre l'opzione di
scegliere automaticamente tutti i pacchetti basandosi su
<strong>dipende</strong>, <strong>raccomanda</strong>, e
<strong>suggerisce</strong>.
<![%f-ref;[
Vedere <ref id="depends">.
]]>
</sect1>

<sect1>Strumenti utili
<p>
<example>
apt-cache         - controlla l'archivio dei pacchetti nella cache locale
dpkg-reconfigure  - riconfigura un pacchetto già installato (se utilizza debconf)
dpkg-source       - gestisce il pacchetto con il file sorgente
dpkg-buildpackage - automatizza la creazione di un pacchetto
...
</example>
</sect1>
</sect>

<sect id="apt-install">Le basi della gestione dei pacchetti &debian;
<p>
E' possibile installare un gruppo di pacchetti, definito <em>task</em>, od un
solo pacchetto, oppure aggiornare il sistema usando gli strumenti di gestione
dei pacchetti descritti più avanti.
<![%f-ref;[
Fate riferimento anche a
<ref id="install">, <ref id="woody"> e <ref id="bin-editor">.
]]>
<sect1 id="tasksel">Installare i <em>task</em> con <prgn>tasksel</prgn> o con
<prgn>aptitude</prgn>
<p>
<prgn>tasksel</prgn> è definito come l'<strong>Installatore Debian per i
Task</strong> che vengono presentati come una "<tt>semplice</tt>" opzione durante
l'installazione del sistema.
<p>
Quando si ha la necessità di installare delle funzionalità comuni che
richiedono più pacchetti, questo è il modo migliore.
Lanciatelo come segue:
<example>
# dselect update
# tasksel
</example>
<p>
Anche <prgn>aptitude</prgn> offre l'accesso ai <em>task</em>. 
Esso non solo permette di scegliere i <em>task</em> ma anche di
deselezionare i pacchetti di un <em>task</em> in maniera
selettiva, mediante un menu.
</sect1>

<sect1 id="setup-apt">Impostazione del sistema APT
<p>
Se si tenta di tracciare distribuzioni diverse, è facile incappare in qualche
conflitto di dipendenza dei pacchetti. E' buona norma non mischiare le
versioni. Quanto segue è per coloro che hanno voglia di sperimentare, essendo
a conoscenza dei rischi.
<!--
Yes. This is sloppy fix but better than nothing.  I saw many newbie
confused.
-->
<p>
Per un aggiornamento selettivo mentre si traccia le distribuzione <tt>testing</tt>,
APT (&gt;Woody) deve essere impostato come in <ref id="woody-transition">
per utilizzare le funzionalità di <manref name="apt_preferences" section="5">.
<p>
Per prima cosa, aggiungete i riferimenti per <tt>stable</tt>, <tt>testing</tt>
ed <tt>unstable</tt> al vostro <file>/etc/apt/sources.list</file>.
Poi, modificate <file>/etc/apt/preferences</file> per impostare la corretta Pin-Priority.
<footnote>
Ho mantenuto la descrizione qui per coerenza con le altre parti. Se si stanno
tracciando veramente <tt>testing</tt> o
<tt>unstable</tt>, si dovrebbe in realtà rimuovere i riferimenti a
<tt>stable</tt> da <file>/etc/apt/sources.list</file> e da
<file>/etc/apt/preferences</file>.  Ciò perchè <tt>testing</tt>
origina come una copia di <tt>stable</tt>.
</footnote>
<example>
Package: *
Pin: release a=stable
Pin-Priority: 500

Package: *
Pin: release a=testing
Pin-Priority: 600

Package: *
Pin: release a=unstable
Pin-Priority: 50
</example>


<sect1 id="dselect"><prgn>dselect</prgn>
<p>
Una volta lanciato, <prgn>dselect</prgn> seleziona automaticamente tutti i pacchetti
"Essenziali", "Importanti", e "Standard". In Potato, alcuni grossi programmi come teTEX ed Emacs,
erano proprio contenuti in queste sezioni, ed era meglio deselezionarli a mano (digitando '_') alla prima installazione.
In Woody sono stati spostati nella categoria "Opzionali"..
<p>
<prgn>dselect</prgn> presenta un'interfaccia utente un pò strana. Quattro sono i comandi
ambigui (Maiuscolo significa MAIUSCOLO!):
<example>
Tasto  Azione
Q      Esci. Conferma la selezione corrente ed esce comunque 
       (prevale sulle dipendenze)
R      Torna indietro. Non intendevo farlo.
D      Dannazione! Non mi interessa cosa ne pensa dselect. 
       Fallo e basta!
U      Riporta tutto allo stato sUggerito
</example>
Usando <tt>D</tt> e <tt>Q</tt>, potete scegliere delle selezioni che presentano conflitti di
dipendenze a vostro rischio e pericolo. Usate questi comandi con cura. Al
momento <prgn>dselect</prgn> 
rappresenta uno strumento maturo, basato su menu in grado di offrire un
controllo fine sulle scelte riferire a <strong>suggerisce</strong> e a
<strong>raccomanda</strong>. 
<p>
Aggiungete una linea con l'opzione "expert" in <file>/etc/dpkg/dselect.cfg</file> per ridurne il
"rumore".Per
macchine lente, lanciate <prgn>dselect</prgn> su un'altra macchina più veloce per trovare
i pacchetti che vi servono ed usate <tt>apt-get install</tt> per
installarli. 
<p>
<prgn>dselect</prgn> non fornisce accesso a pacchetti che non siano stati
definiti dalla the Pin-Priority.
</sect1>

<sect1 id="aptitude"><prgn>aptitude</prgn>
<p>
<prgn>aptitude</prgn> è un nuovo installatore di pacchetti basato su menu,
simile a <prgn>dselect</prgn>.  Può essere utilizzato anche da linea di
comando in alternativa ad <prgn>apt-get</prgn>.  Vedere <manref name="aptitude"
section="1">.
<p>
<prgn>aptitude</prgn> accetta comandi sotto forma singole lettere, di norma in
minuscolo.
<example>
Tasto       Azione
F10         Menu
?           Aiuto per i comandi
u           Aggiorna le informazioni relative all'archivio dei pacchetti
g           Scarica ed installa i pacchetti selezionati
q           Esce dalla schermata corrente e salva le modifiche
x           Esce dalla schermata corrente e non salva le modifiche
Enter       Mostra le informazioni su un pacchetto
</example>
<prgn>aptitude</prgn> offre l'opzione di prendere tutti i pacchetti basandosi
automaticamente su <strong>dipende</strong>,
<strong>raccomanda</strong>, e <strong>suggerisce</strong>. 
Potete modificare questo comportamento tramite <tt>F10 -> Options -> 
Dependency handling</tt> nel suo menu.
<p>
<prgn>aptitude</prgn> offre l'accesso a tutte le versioni di un pacchetto.
</sect1>

<sect1 id="apt-commands">I comandi <prgn>apt-cache</prgn> e <prgn>apt-get</prgn>
<p>
Durante il tracciamento di <tt>testing</tt>, come descritto nell'esempio
sopra, è possibile gestire il sistema attraverso i seguenti comandi:
<list>
<item><tt>apt-get -u upgrade</tt>
 <p>traccia solo la distribuzione <tt>testing</tt> ed aggiorna tutti i 
pacchetti del sistema installando le dipendenze da <<tt>testing</tt>.
<item><tt>apt-get -u dist-upgrade</tt>
<p>Traccia la distribuzione <tt>testing</tt> ed aggiorna tutti i pacchetti
nel sistema, installando e risolvendo le dipendenze da <tt>testing</tt>.
<item><tt>apt-get -u dselect-upgrade</tt>
<p>Traccia la distribuzione <tt>testing</tt> ed aggiorna tutti i pacchetti
nel sistema sula base delle selezioni di <prgn>dselect</prgn>.
<item><tt>apt-get -u install <var>pacchetto</var></tt>
<p>Installa il <var>package</var> e le sue dipendenze dalla distribuzione
<tt>testing</tt>.
<item><tt>apt-get -u install <var>pacchetto</var>/unstable</tt>
<p>Installa il <var>pacchetto</var> dalla distribuzione <tt>unstable</tt>
mentre installa le sue dipendenze da <tt>testing</tt>.
<item><tt>apt-get -u install -t unstable <var>pacchetto</var></tt>
<p>Installa il <var>pacchetto</var> da <tt>unstable</tt> e
ne installa le dipendenze sempre da <tt>unstable</tt>
impostando la Pin-Priority di <tt>unstable</tt> a 990.
<item><tt>apt-cache policy <var>foo bar ...</var></tt>
<p>Controlla lo stato dei pacchetti <var>foo bar ...</var>.
<item><tt>apt-cache show <var>foo bar ...</var> | less</tt>
<p>Controlla le informazioni dei pacchetti <var>foo bar ...</var>.
<item><tt>apt-get install <var>foo=2.2.4-1</var></tt>
<p>Installa la particolare versione <var>2.2.4-1</var> del pacchetto <var>foo</var>.
<item><tt>apt-get -u install <var>foo bar-</var></tt>
<p>Installa il pacchetto <var>foo</var> e rimuove il pacchetto <var>bar</var> package
<item><tt>apt-get remove <var>bar</var></tt>
<p>Rimuove il pacchetto <var>bar</var> ma mantiene i file di configurazione
personalizzati intatti.
<item><tt>apt-get remove --purge <var>bar</var></tt>
<p>Rimuove il pacchetto <var>bar</var> insieme a tutti i file di
configurazione personalizzati.
</list>
Nei precedenti esempi, l'uso dell'opzione <tt>-u</tt> assicura che
<prgn>apt-get</prgn> mostri una lista di tutti i pacchetti da aggiornare e che
attenda un comando dell'utente per agire. Quanto segue imposta l'opzione <tt>-u</tt>
come azione predefinita:
<example>
$ cat &gt;&gt; /etc/apt/apt.conf &lt;&lt; .
// Mostra sempre i pacchetti da aggiornare (-u)
APT::Get::Show-Upgraded "true";
.
</example>
<p>
Usate l'opzione <tt>-s</tt> per simulare l'aggiornamento senza eseguirlo
realmente.

<sect1 id="apt-tracking">Tracciare una distribuzione &debian; specifica
<p>
A seconda delle vostre preferenze in fatto di distribuzioni &debian; da
tracciare, potete modificare il file di esempio <file>/etc/apt/preferences</file> in
<ref id="setup-apt"> in modo da soddisfare le vostre esifenze:
<example>
tracciare stable:            modificare la Pin-Priority di testing  a  50
tracciare testing:           mantenere le impostazioni come mostrato sopra
tracciare testing(unstable): modificare la Pin-Priority di unstable a 500
tracciare unstable(testing): modificare la Pin-Priority di unstable a 800
</example>
Una linea guida per la scelta della Pin-Priority è di muoversi nella tabella
precedente dall'alto verso il basso man mano che il tempo passa, dal momento
immediatamente susseguente al rilascio di una distribuzione fino a quello del
freeze per la nuova.
<p>
Attenzione: il tracciamento della distribuzione <tt>testing</tt> di &debian;
ha come effetto collaterale di avere aggiornamenti per la sicurezza
estremamente lenti.
<p>
Se si mescolano le distribuzioni di &debian;, <tt>testing</tt> con
<tt>stable</tt> oppure <tt>unstable</tt> con <tt>stable</tt>, si rischia con
molta probabilità di prendere pacchetti chiave da <tt>testing</tt> o da <tt>unstable</tt>
che possono essere bacati. Quindi, attenzione.
<p>
Esempi di <file>/etc/apt/preferences</file> che bloccano alcuni pacchetti
chiave a versioni più mature, mentre si tracciano versioni meno mature per
pacchetti non così essenziali, sono disponibili nella 
<url id="&examples;" name="sottodirectory degli esempi"> come
<file>preferences.testing</file> e <file>preferences.unstable</file>.
Dall'altra parte, <file>preferences.stable</file> forza tutti i pacchetti ad
essere degradati a <tt>stable</tt>.

<sect1 id="apt-stable">Downgrading all packages to <tt>stable</tt>
<p>
Per riportare tutti i pacchetti ad un livello inferiore (<tt>stable</tt>), è
necessario modificare /etc/apt/preferences come segue:
<example>
Package: *
Pin: release a=stable
Pin-Priority: 1001
</example>
ed eseguire "<tt>apt-get upgrade</tt>", che forzerà i pacchetti al livello inferiore,
in virtù di Pin-priority &gt; 1000. Attenzione, ci potranno essere alcune imperfezioni
nelle dipendenze.

<sect1 id="apt-preferences">Panoramica di <file>/etc/apt/preferences</file>
<p>
Nel file di esempio <file>/etc/apt/preferences</file> mostrato in
<ref id="setup-apt">, "Package: *" alla prima riga significa che la sezione si
applica a tutti i pacchetti. Potete usare il nome di un pacchetto al posto di
"*" per specificare la Pin-Priority per quello specifico pacchetto.
<p>
Alla seconda riga, "Pin: release a=stable" significa che 
<prgn>apt-get</prgn> prende il file <file>Packages.gz</file> dall'archivio
contenente un file <file>Release</file> con la riga
"Archive: stable".
<p>
All'ultima riga, "Pin-Priority: 500" specifica che la Pin-Priority deve essere 500.
<p>
Se esistono più pacchetti con lo stesso nome, di norma verrà installato quello
con la Pin-Priority più alta.  
<p>
Qui, i significati della Pin-Priority sono:
<list>
<item>1001 ed oltre: Priorità di abbassamento di livello.
 <p>L'abbassamento di livello del pacchetto è ammesso per questo intervallo di Pin-Priority.
<item>Da 100 a 1000: Priorità standard.
 <p>L'abbassamento di livello del pacchetto non è ammesso. Alcune altre
 Pin-Priority chiave:
<list>
<item>990: la priorità impostata dall'opzione <tt>--target-release</tt> 
o <tt>-t</tt> di <manref name="apt-get" section="8">.
<item>500: la priorità di tutti i pacchetti di default.
<item>100: la priorità dei pacchetti attualmente installati.
</list>
<item>Da 0 a 99: Priorità non automatizzate. (Utilizzate solo se il pacchetto
              non è installato e non ne sono disponibili altre versioni.)
<item>Inferiore a 0: La versione non verrà mai selezionata.
</list>
<!--FIXME: updated up to this position! -->
Gli stessi effetti di <tt>--target-release</tt> possono essere ottenuti
impostando <file>/etc/apt/apt.conf</file> come segue:
<example>
# echo 'APT::Default-Release "testing";' &gt;&gt; /etc/apt/apt.conf
</example>
L'opzione da riga di comando <tt>--target-release</tt> e l'impostazione in 
<file>/etc/apt/apt.conf</file> sopravanzano le impostazioni in 
<file>/etc/apt/preferences</file>.  State attenti a queste interferenze quando
giocate con <file>/etc/apt/preferences</file>.

<sect id="survival">Comandi di sopravvivenza Debian
<p>
Conoscendoli, potrete vivere una vita di <strong>eterni</strong> "upgrade" :-)


Lo stesso risultato si ottiene con
<example>
# echo 'APT::Default-Release "testing";' &gt;&gt; /etc/apt/apt.conf
</example>
Viene così strutturato il tracciamento di <tt>testing</tt>:
<list>
<item><tt>apt-get install <var>pacchetto</var></tt>
<p>installa <var>pachetto</var> e le sue dipendenze dalla distribuzione 
<tt>testing</tt>.
<item><tt>apt-get install <var>pacchetto</var>/unstable</tt>
<p>installa <var>pacchetto</var> dalla distibuzione <tt>unstable</tt> mentre installa
le sue dipendenze dalla <tt>testing</tt>.
<item><tt>apt-get install -t unstable <var>pacchetto</var></tt>
<p>installa <var>pacchetto</var> da <tt>unstable</tt> insieme alle sue dipendenze.
</list>
<p>
Se tracciate <tt>stable</tt>, calate la Pin-Priority di 
<tt>testing</tt> a 60 in <file>/etc/apt/preferences</file> dell'esempio
precedente, oppure:
<example>
# echo 'APT::Default-Release "stable";' &gt;&gt; /etc/apt/apt.conf
</example>
<p>
Altri comandi da usare sono:
<example>
# apt-cache policy libc6 libc6-dev locales  # controlla lo stato dei pacchetti
# apt-get install libc6=2.2.4-1 libc6-dev=2.2.4-1 locales=2.2.4-1 
# apt-get -u install nuovo-pacchetto-interessante remove-package- 
# apt-get remove vecchio-pacchetto-inutile
# apt-get remove --purge vecchio-pacchetto-veramente-inutile
</example>


<sect1 id="apt-upgrade">Aggiornare il sistema con APT
<p>
Aggiornamento del sistema con APT:
<example>
# apt-get update 
... poi eseguite uno dei seguenti comandi: 
# apt-get -u upgrade # scarica tutti pacchetti sotto "dipende" 
# apt-get -u dist-upgrade # scarica tutti i pacchetti sotto "dipende" e risolve le dipendenze 
# apt-get -u dselect-upgrade # segue la selezione fatta con dselect
</example>
Il seguente comando imposta l'opzione <tt>-u</tt> come azione di default:
<example>
$ cat &gt;&gt; /etc/apt/apt.conf &lt;&lt; .
// Mostra sempre i pacchetti che devono essere aggiornati (-u)
APT::Get::Show-Upgraded "true";
.
</example>
<p>
Utilizzare l'opzione <tt>-s</tt> per simulare l'aggiornamento senza realmente
effettuarlo.
<p>
<prgn>dselect</prgn> offre un'interfaccia basata su menù per il controllo di APT.
<prgn>deity</prgn> ed <prgn>aptitude</prgn> offriranno delle alternative a <prgn>dselect</prgn>.
</sect1>



<sect1 id="bug-check">Controllo dei bachi in Debian
<P>
Se avete dei problemi con un pacchetto in particolare, controllate prima questi siti e poi,
eventualmente, cercate aiuto o segnalate un baco.
(<prgn>lynx</prgn>, <prgn>links</prgn> e <prgn>w3m</prgn> funzionano tutti bene):
<example>
$ lynx &bugs;
$ lynx &bugs;<var>nome-pacchetto</var>  # se conoscete il nome del pacchetto
$ lynx &bugs;<var>numerobaco</var>     # se conoscete il numero del baco segnalato
</example>
Cercate su Google (www.google.com, oppure www.google.it) includendo nelle
frasi da ricercare "site:debian.org".
<p>
Se avete ancora dubbi, leggete i manuali (RTFM). Impostate <tt>CDPATH</tt> come segue:
<example>
export CDPATH=.:/usr/local:/usr/share/doc
</example>
e digitate
<example>
$ cd <var>nomepachetto</var>
$ mc
</example>
<![%f-ref;[
Maggiori fonti di supporto sono descritte in <ref id="support">.
]]>
</sect1>

<sect1 id="apt-trouble">Aggiornamento con APT: risoluzione dei problemi
<p>
Problemi di dipendenze possono accadere quando si esegue l'aggiornamento in
<tt>unstable</tt>/<tt>testing</tt>. Molte volte ciò accade poichè un pacchetto da aggiornare
presenta delle nuove dipendenze che non vengono soddisfatte. Problemi del
genere vengono risolti usando
<example>
# apt-get dist-upgrade
</example>
Se questo non funziona, allora ripetete uno dei seguenti comandi finchè il
problema non si risolve da sè:
<example>
# apt-get upgrade -f      # continua l'aggiornamento nonostante l'errore
... oppure
# apt-get dist-upgrade -f # continua il dist-upgrade nonostante l'errore
</example>
<p>
Alcuni script di aggiornamento realmente difettosi possono causare problemi
ricorrenti. Per risolvere tali situazioni è in genere buona cosa ispezionare
gli script <file>/var/lib/dpkg/info/packagename.<var>{post-,pre-}{install,removal}</var></file> del
pacchetto responsabile e poi eseguire:
<example>
# dpkg --configure -a    # configura tutti i pacchetti installati parzialmente
</example>
<p>
Se uno script lamenta la mancanza di un file di configurazione, date
un'occhiata in <file>/etc</file> per il file di configurazione corrispondente. Se ne esiste
uno con l'estensione <tt>.new</tt> (o qualcosa di simile), cambiatelo (<prgn>mv</prgn>) per
rimuovere il suffisso.
<p>
Problemi di dipendenze possono accadere installando i pacchetti in
unstable/testing.  Esistono dei metodi per aggirare le dipendenze.
<example>
# apt-get install -f <var>pacchetto</var> # ignora le dipendenze difettose
</example>
<p>
Un metodo alternativo consiste nell'utilizzare il pacchetto <package>equivs</package>. 
Vedere <file>&f-equivs;</file><![%f-ref;[ e <ref id="equivs">]]>.
</sect1>

<sect1 id="rescue-dpkg">Salvataggio mediante dpkg
<p>
Un recupero ad hoc di un <prgn>dselect</prgn> (APT) che non funziona più può essere
effettuato su un sistema pesantemente malfunzionante, semplicemente usando
<prgn>dpkg</prgn> senza APT:
<example>
# cd /var/cache/apt/archives
# dpkg -i libc6* libdb2* perl*
# dpkg -i apt* dpkg* debconf*
# dpkg -i *  # finchè non compaiono più errori
</example>
Se manca un pacchetto, recuperatelo da <url id="&mirror-site;" name="mirror sites"> con:
<example>
# mc    # usate "FTP link" all'indirizzo di un server Debian FTP
</example>
Fino a questo momento, i pacchetti sul server HTTP/FTP potrebbero non essere
contenuti nella directory classica <file>/dist</file>, ma sotto la nuova directory 
<file>/pool</file>.
<![%f-ref;[
(Vedere <ref id="pools">.)   
]]>
<p>
Poi installatelo con:
<example>
# dpkg -i /var/cache/apt/archives/<var>packagefile.deb</var>
</example>
Se vi sono dipendenze non risolte, risolvetele oppure usate:
<example>
# dpkg --ignore-depends=<var>paccchetto1</var>,... -i <var>filepacchetto.deb</var>
# dpkg --force-depends -i <var>filepacchetto.deb</var>
# dpkg --force-depends --purge <var>pacchetto</var>
# dpkg --force-confmiss -i <var>filepacchetto.deb</var> # Installa il file di configurazione mancante
</example>
</sect1>

<sect1 id="recover-status">Recuperare i dati sulla selezione dei pacchetti
<p>
Se <file>/var/lib/dpkg/status</file> diventa illeggibile per una qualsivoglia
ragione, il sistema &debian; perde i dati sulla selezione dei pacchetti,
soffrendone in  maniera severa. cercate il vecchio file
<file>/var/lib/dpkg/status</file> in <file>/var/lib/dpkg/status-old</file>,
oppure
<file>/var/backups/dpkg.status.*</file>.
<p>
Tenere <file>/var/backups/</file> in una partizione separata può essere una buona idea, 
dato che questa directory contiene molti dei dati fondamentali del sistema.

<p>
Se il vecchio file <file>/var/lib/dpkg/status</file> non è disponibile, potete ancora recuperare le informazioni dalle directory
in <file>/usr/share/doc/</file>.
<example>
# ls /usr/share/doc | \
  grep -v [A-Z] | \
  grep -v '^texmf$' | \
  grep -v '^debian$' | \
  awk '{print $1 " install"}' | \
  dpkg --set-selections
# dselect --expert # reinstalla il sistema, deseleziona se necessario
</example>

<sect1 id="rescue-var">Recupero del sistema dopo danneggiamento di <file>/var</file>
<p>
Dato che la directory <file>/var</file> contiene dati che vengono regolarmente
aggiornati, tipo la posta, può tendere ad essere corrotta. Metterla in una
partizione separata limita i rischi. Se accade l'irreparabile, bisogna
ricostruirla per salvare il sistema &debian;.  
<p>
Procuratevi una directory <file>/var</file> con il contenuto ridotto all'osso,
da un sistema &debian; minimale e funzionante, basato su una versione uguale o
più vecchia, per esempio <url id="&var-tar-gz;" name="var.tar.gz"> e
piazzatela nella root directory del sistema danneggiato.  Poi,
<example>
# cd /
# mv var var-old      # se vi è rimasto qualcosa di utile
# tar xvzf var.tar.gz # usate il file preso da Woody
# aptitude            # o dselect
</example>
Ciò dovrebbe restituirvi un sistema funzionante.  Potete velocizzare la
procedura di recupero delle selezioni dei pacchetti usando la tecnica
descritta in <ref id="recover-status">.  
([FIXME]: This procedure needs more experiments to verify.)
</sect1>

<sect1 id="un-bootable">Installare un pacchetto su un sistema non bootabile
<p>
Fate il boot in Linux mediante un floppy o CD di salvataggio Debian, o tramite
una partizione alternativa se avete un sistema con più boot in Linux.  
<![%f-ref;[
Vedere <ref id="booting">. 
]]>
Montate il sistema non bootabile su <file>/target</file> ed usate il modo chroot di installazione
di <prgn>dpkg</prgn>.
<example>
# dpkg --root /target -i <var>packagefile.deb</var>
</example>
Poi configurate il tutto e risolvete i problemi.
<p>
A proposito, se tutto quello che impedisce il boot è un <prgn>lilo</prgn> malfunzionante,
potete fare il boot con un disco di salvataggio Debian standard. Al prompt del
boot, ammettendo che la partizione root della vostra installazione è su
<file>/dev/hda12</file> e volete un runlevel 3, digitate:
<example>
boot: rescue root=/dev/<var>hda12</var> 3
</example>
A questo punto avrete accesso ad un sistema pressochè perfettamente
funzionante con il kernel su dischetto. (Potranno esserci inconvenienti minori
dovuti alla mancanza di moduli o di funzioni particolari del kernel.)
</sect1>

<sect1>Cosa fare se <prgn>dpkg</prgn> non funziona
<p>
Un <prgn>dpkg</prgn> malfunzionante può rendere impossibile l'installazione di qualsiasi file <tt>.deb</tt>.
Una procedura come la seguente vi aiuterà ad uscire da questa situazione. (Nella prima riga,
potete sostituire "links" con il vostro browser da terminale preferito.)
<example>
$ links http://<var>http.us.debian.org</var>/debian/pool/main/d/dpkg/
... scarica un valido dpkg_<var>version</var>_<var>arch</var>.deb
$ su
password: *****
$ ar x dpkg_<var>version</var>_<var>arch</var>.deb
# mv data.tar.gz /data.tar.gz
# cd /
# tar xzfv data.tar.gz
</example>
Per <tt>i386</tt>, <tt>http://packages.debian.org/dpkg</tt> può 
anche essere utilizzata come URL.
</sect1>


</sect>

<sect id="debian-package">Comandi del "paradiso" Debian
<p>
L'<strong>Illuminazione</strong> ottenuta con questi comandi salverà una persona dall'eterno ciclo del karma
dell'inferno degli aggiornamenti, permettendogli di raggiungere il <strong>paradiso</strong> Debian. :-)

<sect1 id="info-file">Informazioni su di un file
<p>
Per scoprire a quale pacchetto un file appartiene:
<example>
$ dpkg {-S|--search} modello # trova i modelli nei pacchetti installati
$ zgrep -e modello <var>/local/copy/of/debian/woody/Contents-i386.gz</var> 
	     # trova l'elenco dei file con la stessa radice (o il file) nell'archivio Debian
</example>
Potete utilizzare anche dei comandi specifici per i pacchetti:
<example>
# apt-get install dlocate 
	 # è in conflitto con slocate (la versione sicura di locate) 
$ dlocate <var>filename</var> # alternativa rapida a dpkg -L e dpkg -S 
...
# apt-get install auto-apt # strumento per l'installazione a richiesta dei pacchetti 
# auto-apt update          # crea un database per auto-apt 
$ auto-apt search <var>modello</var> 
	# effettua una ricerca completa nell'archivio pacchetti
</example>
</sect1>

<sect1 id="info-package">Informazioni su di un pacchetto
<p>
Cerca le informazioni negli archivi dei pacchetti e le visualizza. Accertatevi
che apt sia indirizzato verso l'archivio(i) appropriato(i) modificando
<tt>/etc/apt/sources.list</tt>.  Se volete vedere come si comportano i
pacchetti in <tt>testing</tt>/<tt>unstable</tt> rispetto a quelli correntemente installati utilizzate
<tt>apt-cache policy</tt>&mdash; un comando molto utile.
<example>
# apt-get check # aggiorna la cache e controlla le dipendenze 
$ apt-cache search <var>testo</var> # cerca un pacchetto a partire dalla descrizione
$ apt-cache policy <var>pacchetto</var> # informazioni su priorità e distribuzione di un pacchetto 
$ apt-cache show -a <var>pacchetto</var> # mostra la descrizione di un pacchetto per ogni distribuzione 
$ apt-cache showsrc <var>pacchetto</var> # mostra la descrizione del pacchetto sorgente corrispondente
$ apt-cache showpkg <var>pacchetto</var> # Informazioni per il debug
# dpkg  --audit|-C          # cerca i pacchetti parzialmente installati
$ dpkg {-s|--status} <var>pacchetto</var>... # descrizione del pacchetto installato 
$ dpkg -l <var>pacchetto</var> ... # stato del pacchetto installato (1 linea)
$ dpkg -L <var>pacchetto</var> ... # elenca i file installati per un dato pacchetto
</example>
<!-- Erase this when manual page gets fixed.  FIXME -->
<tt>apt-cache showsrc</tt> non è documentato al momento del rilascio di Woody, ma   
funziona :)
<p>
E' sempre possibile trovare informazioni su pacchetti in (Io uso <tt>mc</tt>):
<example>
/var/lib/apt/lists/*
/var/lib/dpkg/available
</example>
Il confronto dei file seguenti fornisce informazioni su cosa è realmente   
accaduto nelle ultime sessioni di installazione.   
<example>
/var/lib/dpkg/status
/var/backups/dpkg.status*
</example
</sect1>

<sect1 id="apt-get-auto">Installazione automatica con APT
<p>
Per una installazione automatica, senza controllo alcuno, aggiungete la seguente riga a 
<file>/etc/apt/apt.conf</file>:
<example>
Dpkg::Options {"--force-confold";}
</example>
Questo è l'equivalente di <tt>apt-get -q -y <var>nomepacchetto</var></tt>.
Siccome in questo modo si risponde "si" a tutte le domande, usate questo trucco con accortezza. 
Vedere <manref name="apt.conf" section="5"> e <manref name="dpkg" section="1">.
<p>
Si può configurare qualsiasi pacchetto in un secondo momento seguendo 
<ref id="reconfigure">.

<sect1 id="reconfigure">Riconfigurare i pacchetti già installati
<p>
Usate i seguenti comandi per riconfigurare un pacchetto già installato.
<example>
# dpkg-reconfigure --priority=<var>medium</var> <var>pacchetto</var> [...]
# dpkg-reconfigure --all  # riconfigura tutti i pacchetti
# dpkg-reconfigure locales # genera qualsiasi locale extra
# dpkg-reconfigure --p=<var>low</var> xserver-xfree86 # riconfigura il server X
</example>
Eseguite questo tramite <prgn>debconf</prgn> se avete la necessità di cambiarne la
configurazione dei messaggi in modo permanente.
<p>
Alcuni programmi hanno degli script speciali di configurazione.
<example>
apt-setup     - crea /etc/sources.list
install-mbr   - installa un manager di Master Boot Record 
tzconfig      - imposta il fuso orario locale
gpmconfig     - imposta il demone per mouse gpm
sambaconfig   - configura Samba (Woody usa debconf)
eximconfig    - configura Exim (MTA)
texconfig     - configura teTeX
apacheconfig  - configura Apache (httpd)
cvsconfig     - configura CVS
sndconfig     - configura il sistema audio
...
update-alternatives - imposta i comandi predefiniti, p.e. vim per vi
update-rc.d         - Gstione degli script di inzializzazione del System-V 
update-menus        - Il sistema dei menu Debian 
...
</example>
</sect1>

<sect1 id="remove">Rimozione e purga dei pacchetti
<p>
Rimuove un pacchetto mantenendone la configurazione:
<example>
# apt-get remove <var>pacchetto</var> ...
# dpkg  --remove <var>pacchetto</var> ...
</example>
Rimuove un pacchetto e la sua configurazione:
<example>
# apt-get remove --purge <var>pacchetto</var> ...
# dpkg    --purge        <var>pacchetto</var> ...
</example>
</sect1>

<sect1 id="hold">Mantenere vecchi pacchetti
<p>
Per esempio, per mantenere <package>libc6</package> e <package>libc6-dev</package> con <prgn>dselect</prgn>
e <tt>apt-get -u upgrade <var>pacchetto</var></tt> si può procedere come segue:
<example>
# echo -e "libc6 hold\nlibc6-dev hold" | dpkg --set-selections
</example>
<tt>apt-get -u install <var>pacchetto</var></tt> non verrà impedito da quell'"hold". Per
mantenere un pacchetto forzandone un declassamento automatico con <tt>apt-get -u
upgrade <var>pacchetto</var></tt> oppure <tt>apt-get -u dist-upgrade</tt>, aggiungete le seguenti
linee ad /etc/apt/preferences:
<example>
Package: libc6
Pin: release a=stable
Pin-Priority: 2000
</example>
Qui la voce "<tt>Package:</tt>" non può usare termini tipo "<tt>libc6*</tt>".  
Se dovete mantenere tutti i pacchetti binari correlati al pacchetto sorgente <package>glibc</package> 
in una versione sincronizzata, dovete elencarli esplicitamente.
<p>
Il comando seguente mostra i pacchetti tenuti in sospeso (non aggiornati):
<example>
dpkg --get-selections "*"|grep -e "hold$"
</example>
</sect1>

<sect1 id="mixedsys">Sistema misto <tt>stable</tt>/<tt>testing</tt>/<tt>unstable</tt>
<p>
<prgn>apt-show-versions</prgn> può elencare le versioni dei pacchetti disponibili 
per ciascuna distribuzione.
<example>
$ apt-show-versions | fgrep /testing | wc
... quanti pacchetti avete da testing
$ apt-show-versions -u
... elenco di pacchetti aggiornabili
$ apt-get install `apt-show-versions -u -b | fgrep /unstable`
... aggiorna tutti i pacchetti da unstable alle loro versioni più recenti
</example>
</sect1>

<sect1 id="cache">"Potare" i files della cache
<p>
L'installazione dei pacchetti tramite apt lascia i loro files archiviati
in <tt>/var/cache/apt/archives</tt> e questi vanno rimossi.
<example>
# apt-get autoclean # rimuove solo pacchetti inutili
# apt-get clean     # rimuove tutti i pacchetti nella cache
</example>
</sect1>


<sect1 id="record">Salvare/copiare la configurazione del sistema
<p>
Per fare una copia locale dello stato della selezione dei pacchetti:
<example>
$ dpkg --get-selections "*" &gt;<var>lemieselezioni</var>   # oppure usare \*
</example>
<tt>*</tt> fa includere anche i nomi dei pacchetti marcati con "purge".
<p>
Potete poi trasferire questo file su un altro computer ed installarlo con:
<example>
# dselect update
# dpkg --set-selections &lt;<var>lemieselezioni</var>
# apt-get -u dselect-upgrade # <var>o</var> dselect install 
</example>
</sect1>

<sect1 id="port">Portare un pacchetto nel sistema <tt>stable</tt>
<p>
Se si eseguono degli aggiornamenti parziali di un sistema <tt>stable</tt>, può essere
buona cosa ricreare un pacchetto all'interno del proprio ambiente a partire
dai sorgenti. In tal modo si eviteranno dei massicci aggiornamenti di
pacchetti, dovuti alle loro dipendenze. Per prima cosa, aggiungete le linee
seguenti a <file>/etc/apt/sources.list</file>:
<example>
deb-src &http-us;debian testing \
 main contrib non-free
deb-src &http-non-us;debian-non-US testing/non-US \
 main contrib non-free
deb-src &http-us;debian unstable \
 main contrib non-free
deb-src &http-non-us;debian-non-US unstable/non-US \
 main contrib non-free
</example>
Ogni linea che inizia con <tt>deb-src</tt> qui è divisa in due parti per ragioni 
di stampabilità, ma in <file>sources.list</file> dovranno essere ciascuna 
su un'unica riga.
<p>
Poi recuperate i sorgenti e costruite un pacchetto locale:
<example>
$ apt-get update  # aggiorna la lista dei pacchetti sorgente
$ apt-get source <var>pacchetto</var> 
$ dpkg-source -x <var>pacchetto.dsc</var> 
$ cd <var>versione-pacchetto</var> 
  ... controlla i pacchetti necessari (Build-depends nel file
      .dsc) e li installa. Avete bisogno anche del pacchetto "fakeroot".

$ dpkg-buildpackage -rfakeroot 

...oppure (senza "signature") 
$ dpkg-buildpackage -rfakeroot -us -uc utilizzate "debsign" in seguito, se necessario

...poi per installare il pacchetto
$ su -c "dpkg -i <var>pacchetto.deb</var>"
</example>
Normalmente, per soddisfare le dipendenze si ha la necessità di installare
alcuni pacchetti con il suffisso "-dev". <prgn>debsign</prgn> è contenuto nel pacchetto
<package>devscripts</package>. <prgn>auto-apt</prgn> può aiutare nel soddisfare queste dipendenze.
<prgn>fakeroot</prgn> evita l'uso non necessario del root account.
<p>
In woody, questi problemi di dipendenze possono essere semplificati.  
Per esempio per compilare solo il sorgente del pacchetto <package>pine</package>:
<example>
# apt-get build-dep pine
# apt-get source -b pine
</example>
</sect1>

<sect1 id="local">Archivio locale dei pacchetti
<p>
Per creare un archivio locale dei pacchetti che sia compatibile con
APT e <prgn>dselect</prgn>, bisogna creare <file>Packages</file> ed i file dei pacchetti devono  
essere organizzati in un particolare albero directory.
<p>
Si possono creare sia un archivio ufficiale debian, che un repositorio locale,
in questo modo.
<example>
# apt-get install dpkg-dev
# cd <var>/usr/local</var>
# install -d <var>pool</var> # i pacchetti sono fisicamente localizzati qui
# install -d dists/<var>unstable</var>/<var>main</var>/binary-<var>i386</var>
# ls -1 <var>pool</var> | sed 's/_.*$/ <var>priority</var> <var>section</var>/' | uniq &gt; <var>override</var>
# editor <var>override</var> # adjust <var>priority</var> e <var>section</var>
# dpkg-scanpackages <var>pool</var> <var>override</var> <var>/usr/local</var>/ \
   &gt; dists/<var>unstable</var>/<var>main</var>/binary-<var>i386</var>/Packages
# cat &gt; dists/<var>unstable</var>/<var>main</var>/Release &lt;&lt; EOF
Archive: <var>unstable</var>
Version: <var>3.0</var>
Component: <var>main</var>
Origin: <var>Local</var>
Label: <var>Local</var>
Architecture: <var>i386</var>
EOF
# echo "deb file:<var>/usr/local</var> <var>unstable</var> <var>main</var>" \
   &gt;&gt; /etc/apt/sources.list
</example>
<p>
In alternativa, un altro metodo per creare un archivio locale <tt>deb</tt>, molto alla bruta:
<example>
# apt-get install dpkg-dev
# mkdir <var>/usr/local/debian</var>
# mv <var>/dove/è/pacchetto.deb</var> <var>/usr/local/debian</var>
# dpkg-scanpackages <var>/usr/local/debian</var> /dev/null | \
  gzip - &gt; <var>/usr/local/debian</var>/Packages.gz
#  echo "deb file:<var>/usr/local/debian</var> ./" &gt;&gt; /etc/apt/sources.list
</example>
<p>
Questi archivi possono essere raggiunti da remoto tramite HTTP od FTP, modificando le voci
in <file>/etc/apt/sources.list</file> di conseguenza.


<sect1 id="alien">Convertire od installare un pacchetto binario di altra distribuzione
<p>
<package>alien</package> permette la conversione dei pacchetti binari nei formati 
Redhat <tt>rpm</tt>, Stampede <tt>slp</tt>, Slackware <tt>tgz</tt>, e Solaris
<tt>pkg</tt>, in pacchetti &debian; <tt>deb</tt>. Se volete usare un pacchetto
proveniente da un'altra distribuzione di Linux al posto di quello installato
sul vostro sistema, potete utilizzare <prgn>alien</prgn> per convertirlo nel
formato che più preferire. <package>alien</package> supporta anche
pacchetti LSB.
</sect1>                                                 

<sect1 id="debsums">Verificare i file dei pacchetti installati
<p>
<prgn>debsums</prgn> permette la verifica dei file dei pacchetti installati contro gli
MD5 checksums.  Alcuni pacchetti non hanno MD5 checksums.  Una soluzione temporanea per 
gli amministratori di sistema:
<example>
# cat >>/etc/apt/apt.conf.d/90debsums
DPkg::Post-Install-Pkgs {"xargs /usr/bin/debsums -sg";};
^D
</example>
da Joerg Wendland &lt;joergland@debian.org&gt;  (non testata).
<![%f-ref;[
<sect1 id="spy">Ottimizzare <file>sources.list</file>
<p>
In breve, sforzi sovrumani per creare un <file>sources.list</file>
ottimizzato, non hanno prodotto per me miglioramenti, da una località negli .
Ho scelto manualmente un sito vicino usando <prgn>apt-setup</prgn>.
<p>
<prgn>apt-spy</prgn> crea automaticamente <file>sources.list</file>,
basandosi su latenza e larghezza di banda. <prgn>netselect-apt</prgn> crea un
<file>sources.list</file> ancora più completo, ma usa un metodo meno efficace
per la scelta del mirror migliore (comparazione dei tempi di ping).
<example>
# apt-get install apt-spy
# cd /etc/apt ; mv sources.list sources.list.org
# apt-spy -d testing -l sources.apt
</example>
</sect1>

]]>

</sect>

<sect id="pecuriarities">Altre particolarità di Debian

<sect1 id="dpkg-divert">Il comando <prgn>dpkg-divert</prgn>
<p>
<!-- copied from manual page -->
Le <strong>deviazioni</strong> dei files
rappresentano un modo di forzare <prgn>dpkg</prgn> a non installare un file
nella sua posizione di default, ma in una posizione <strong>deviata</strong>.
Le <strong>deviazioni</strong> possono essere utilizzate tramite gli script
dei pacchetti &debian; per muovere un file quando causa un conflitto.  Gli
amministratori di sistema possono usare una deviazione anche per scavalcare un
file di configurazione di un pacchetto, oppure quando alcuni files (non
marcati come <strong>conffiles</strong>) devono essere salvaguardati da
<prgn>dpkg</prgn>, durante l'installazione di una nuova versione di un dato
file<![%f-ref;[
(vedere <ref id="conffile">)]]>.
<example>
# dpkg-divert [--add]  <var>filename</var> # aggiunge la "deviazione"
# dpkg-divert --remove <var>filename</var> # rimuove la "deviazione"
</example>
Di solito è una buona idea non usare <prgn>dpkg-divert</prgn> a meno che
non sia strettamente necessario.
</sect1>

<sect1 id="equivs">Il pacchetto <package>equivs</package>
<p>
Se compilate un programma dai sorgenti, è meglio debianizzarlo in un
pacchetto (<tt>*.deb</tt>).  
Usate <tt>equivs</tt> solo come ultima risorsa.
<example>
Package: equivs
Priority: extra
Section: admin
Description: Aggira le dipendenze dei pacchetti Debian. E' un pacchetto
 vuoto che può essere usato per creare dei pacchetti Debian contenenti 
 solo le informazioni sulle dipendenze.
</example>
</sect1>

<sect1 id="alternatives">Comandi alternativi
<p>
Per lanciare <prgn>vim</prgn> con il comando <prgn>vi</prgn>, usate 
<prgn>update-alternatives</prgn>:
<example>
# update-alternatives --display vi
...
# update-alternatives --config vi
  Selection    Command
-----------------------------------------------
      1        /usr/bin/elvis-tiny
      2        /usr/bin/vim
*+    3        /usr/bin/nvi

Enter to keep the default[*], or type selection number: 2
</example>
Le alternative del sistema in Debian sono contenute in <file>/etc/alternatives</file> come
link simbolici.
<p>
Per impostare il vostro window manager preferito, usate invece
<prgn>update-alternatives</prgn> su 
<file>/usr/bin/x-session-manager</file> e
<file>/usr/bin/x-window-manager</file>.
<![%f-ref;[
Per i dettagli, vedere <ref id="custom-x">.  
]]>
<p>
<file>/bin/sh</file> è un link simbolico a <file>/bin/bash</file> o
<file>/bin/dash</file>.  E' più sicuro usare <file>/bin/bash</file> per
mantenere la compatibilità con vecchi script in bash, ma più
corretto utilizzare <file>/bin/dash</file> per rinforzare la compatibilità POSIX.
L'aggiornamento al kernel 2.4 tende ad impostare il link su <file>/bin/dash</file>
</sect1>

<sect1 id="sys-v">Inizializzazione e livelli (runlevels) del System-V 
<p>
Il runlevel predefinito in cui il sistema esegue il boot può essere impostato in <file>/etc/inittab</file>.
<p>
Diversamente da altre distribuzioni, Debian pone la gestione dei livelli
completamente nelle mani dell'amministratore di sistema. La gestione
dell'inizializzazione del System-V in Debian viene eseguita tramite gli scripts <prgn>update-rc.d</prgn>.
<p>
Lanciare <file>/etc/init.d/<var>nomescript</var></file> nel runlevel 1,2 o 3 e terminarlo nel 4 o 5
con una priorità di sequenza 20 (normale) può essere fatto mediante:
<example>
# update-rc.d <var>nomescript</var> start 20 1 2 3 . stop 20 4 5 .
</example>
I link simbolici possono essere rimossi mentre lo script è ancora presente in 
<prgn>init.d</prgn> tramite:
<example>
# update-rc.d -f <var>nomescript</var> remove
</example>
Per modificare i runlevels, io baro. Ne cambio le voci manualmente usando il
comando <prgn>mv</prgn> allo shell prompt di <prgn>mc</prgn>, copiandone i link con
<tt>Alt-Enter</tt>. Per esempio:
<example>
# mv S99xdm K99xdm # disabilita xdm (X display manager)
</example>
Sono giunto persino a disabilitare un demone inserendo <tt>exit 0</tt>
all'inizio di uno script <prgn>init.d</prgn>. Dopo tutto, questi sono dei semplici
<tt>conffiles</tt>.
</sect1>

<sect1 id="disables">Demoni di servizio disabilitati
<p>
La distribuzione &debian; ha molto a cuore la sicurezza del sistema e si aspetta
che l'amministratore sia uno realmente competente al riguardo. Per questo
motivo, talvolta la facilità d'uso diventa un problema secondario rispetto
alla sicurezza e molti demoni di servizio sono impostati al massimo della
sicurezza - con il minimo, o nessun servizio disponibile di default.
<p>
Se avete dei dubbi (Exim, DHCP, ...) controllate <tt>ps aux</tt> oppure il
contenuto di <file>/etc/init.d/*</file> e di <file>/etc/inetd.conf</file>.
Controllate anche <file>/etc/hosts.deny</file><![%f-ref;[ in <ref id="loginctrl">]]>.
Anche il comando <prgn>pidof</prgn> è utile (vedere
<manref name="pidof" section="8">).
<p>
X11 non permette connessioni TCP/IP (remote) di default nelle versioni più
recenti di &debian;. 
<![%f-ref;[
Vedere <ref id="xtcp">.
]]>
Anche l'X forwarding in SSH è disabilitato.  
<![%f-ref;[
Vedere <ref id="xssh">.
]]>
</sect1>
</sect>

</chapt>
