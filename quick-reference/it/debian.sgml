<!-- CVS revision of original english document "1.19"  -->
<!-- CVS revision of this document "$Revision: 1.3 $"  -->
<chapt id="package">Gestione dei pacchetti in Debian 
<p>
Abbiate l'accortezza di organizzare un proxy http locale utilizzando "squid",
per i pacchetti scaricati da APT. Ciò migliora enormemente la performance
degli upgrades via rete, in particolar modo con più macchine Debian su una
LAN. Il capitolo si applica sia a sistemi Woody che Potato, tranne che per
"man apt_preferences", /etc/preferences ed argomenti correlati.

<sect id="pkg-intro">Introduzione

<sect1>Per cominciare
<p>
<example>
# apt-get install debian-policy developers-reference maint-guide \
       packaging-manual doc-debian doc-linux-text info \
       man-db manpages manpages-dev less mc # per potato

# apt-get install debian-policy developers-reference maint-guide \
       doc-debian doc-linux-text apt-howto info \
       man-db manpages manpages-dev less mc # per woody
</example>
Installate questi pacchetti e leggete la documentazione corrispondente in
/usr/share/doc/&lt;nomepacchetto&gt;/ con "mc", per comprendere la filosofia
Debian. Se questo vi sembra troppo, leggete prima questa guida ed iniziate a
gustare la potenza di Debian con le versioni testing/unstable :-)
</sect1>

<sect1>Strumenti fondamentali
<p>
<example>
dselect - strumento di gestione dei pacchetti basato su menu (livello
superiore) 
apt-get - installa i pacchetti (centrato sull'archivio pacchetti, APT)
dpkg - installa i pacchetti (centrato sui files dei pacchetti) 
aptitude & deity - Rimpiazzi futuri di dselect (Interfacce grafiche
utente per APT)
</example>
Questi strumenti non agiscono allo stesso livello. "dselect" gira al di sopra
di APT(il comando da terminale è "apt-get) e di "dpkg".  Quando usate dselect,
accertatevi di aggiornare il file di stato (mediante [U]pdate)prima di
selezionare i pacchetti, se li avete installati tramite "apt-get".
</sect1>

<sect1>Strumenti utili
<p>
<example>
apt-cache         - controlla l'archivio dei pacchetti nella cache locale
dpkg-reconfigure  - riconfigura un pacchetto già installato
dpkg-source       - gestisce il pacchetto con il file sorgente
dpkg-buildpackage - automatizza la creazione di un pacchetto
...
</example>
</sect1>
</sect>

<sect id="survival">Comandi di sopravvivenza Debian
<p>
Conoscendoli, potrete vivere una vita di eterni "upgrade" :-)
<p>
Fate riferimento anche a <ref id="install"> e  <ref id="woody">.

<sect1 id="tasksel">Installare i <em>task</em> con "<prgn>tasksel</prgn>"
<p>
"<prgn>tasksel</prgn>" è definito come l'"<em>Installatore Debian per i
Task</em>" che viene presentato come una "<tt>semplice</tt>" opzione durante
l'installazione del sistema.
<p>
Quando si ha la necessità di installare delle funzionalità comuni che
richiedono più pacchetti, questo è il modo migliore.
Lanciatelo come segue:
<example>
# dselect update
# tasksel
</example>
</sect1>


<sect1 id="apt-install">Installare il sistema con APT
<p>
Potete installare selettivamente pacchetti provenienti da archivi diversi
utilizzando le ultime versioni di apt-get (&gt;woody). Queste permettono di
utilizzare file provenienti da "unstable" e "stable", mentre si utilizza
"testing".
<example>
# apt-cache policy libc6 libc6-dev locales # controlla lo stato dei pacchetti
# apt-get install libc6=2.2.4-1 libc6-dev=2.2.4-1 locales=2.2.4-1 apt-get
# install libc6/unstable libc6-dev/unstable locales/unstable apt-get install
# -t unstable libc6 libc6-dev locales apt-get -u install
# interesting-new-package remove-package- apt-get remove useless-old-package
# apt-get remove --purge really-useless-old-package
</example>
<p>
Per riportare tutti i pacchetti ad un livello inferiore ("stable"), è
necessario modificare /etc/apt/preferences come segue:
<example>
Package: *
Pin: release a=stable
Pin-Priority: 1001
</example>
ed eseguire "apt-get upgrade", che forzerà i pacchetti al livello inferiore,
in virtù di Pin-priority &gt; 1000.
</sect1>

<sect1 id="apt-upgrade">Aggiornare il sistema con APT
<p>
Aggiornamento del sistema con apt:
<example>
# apt-get update ... poi eseguite uno dei seguenti comandi: 
# apt-get -u upgrade # scarica tutti i pacchetti raccomandati 
# apt-get -u dist-upgrade # scarica tutti i pacchetti raccomandati e
controlla le dipendenze 
# apt-get -u dselect-upgrade # segue la selezione fatta con dselect
</example>
Utilizzare l'opzione "-s" per simulare l'aggiornamento senza realmente
effettuarlo.
<p>
"dselect" offre un'interfaccia basata su menù per il controllo di APT.
"deity" ed "aptitude" offriranno delle alternative a "dselect".
</sect1>

<sect1 id="bug-check">Controllo dei bachi in Debian
<P>
Normalmente gran parte dei problemi sono già stati riconosciuti. Per prima
cosa consultate i seguenti siti:
<example>
$ lynx http://bugs.debian.org/
$ lynx http://bugs.debian.org/&lt;packagename&gt;
</example>
Cercate su Google (www.google.com, oppure www.google.it) includendo nelle
frasi da ricercare "site:debian.org".
<p>
Se avete ancora dubbi, leggete i manuali (RTFM). Impostate CDPATH come segue:
<example>
export CDPATH=.:/usr/local:/usr/share/doc
</example>
e digitate
<example>
$ cd &lt;packagename&gt;
$ mc &lt;packagename&gt;
</example>
</sect1>

<sect1 id="apt-trouble">Aggiornamento con APT: risoluzione dei problemi
<p>
Problemi di dipendenze possono accadere quando si esegue l'aggiornamento in
unstable/testing. Molte volte ciò accade poichè un pacchetto da aggiornare
presenta delle nuove dipendenze che non vengono soddisfatte. Problemi del
genere vengono risolti usando
<example>
# apt-get dist-upgrade
</example>
Se questo non funziona, allora ripetete uno dei seguenti comandi finchè il
problema non si risolve da sè:
<example>
# apt-get upgrade -f         # continua l'aggiornamento nonostante l'errore
... oppure
# apt-get dist-upgrade -f    # continua il dist-upgrade nonostante l'errore
</example>
<p>
Alcuni script di aggiornamento realmente difettosi possono causare problemi
ricorrenti. Per risolvere tali situazioni è in genere buona cosa ispezionare
gli script /var/lib/dpkg/info/packagename.{post-,pre-}{install,removal} del
pacchetto responsabile e poi eseguire:
<example>
# dpkg --configure -a # configura tutti i pacchetti installati parzialmente
</example>
<p>
Se uno script lamenta la mancanza di un file di configurazione, date
un'occhiata in /etc per il file di configurazione corrispondente. Se ne esiste
uno con l'estensione .new (o qualcosa di simile), cambiatelo (mv) per
rimuovere il suffisso.
<p>
Problemi di dipendenze possono accadere installando i pacchetti in
unstable/testing.  Esistono dei metodi per aggirare le dipendenze.
<example>
# apt-get install -f package # ignora le dipendenze difettose
</example>
<p>
Un metodo alternativo consiste nell'utilizzare il pacchetto <tt>equivs</tt>:
<example>
Package: equivs 
Priority: extra 
Section: admin 
Description: Aggira le dipendenze dei pacchetti Debian 
E' un pacchetto vuoto che può essere usato per creare dei pacchetti Debian
contenenti solo le informazioni sulle dipendenze.
</example>
Se compilate un programma dai sorgenti, è meglio farne debianizzarlo in un
pacchetto (*.deb). Usate <tt>equivs</tt> solo come ultima risorsa.
</sect1>
<sect1 id="rescue-dpkg">Salvataggio mediante dpkg
<p>
Un recupero ad hoc di un dselect (APT) che non funziona più può essere
effettuato su un sistema pesantemente malfunzionante, semplicemente usando
dpkg senza APT:
<example>
# cd /var/cache/apt/archives
# dpkg -i libc6* libdb2* perl*
# dpkg -i apt* dpkg* debconf*
# dpkg -i *  (finchè non compaiono più errori)
</example>
Se manca un pacchetto, recuperatelo con:
<example>
# mc            # usate "FTP link" all'indirizzo di un server Debian FTP 
</example>
Fino a questo momento, i pacchetti sul server http/ftp potrebbero non essere
contenuti nella directory classica /dist, ma sotto la nuova directory /pool.
<p>
Poi installatelo con:
<example>
# dpkg -i /var/cache/apt/archives/packagefile.deb
</example>
Se vi sono dipendenze non risolte, risolvetele oppure usate:
<example>
# dpkg --ignore-depends=package1,... -i packagefile.deb
# dpkg --force-depends -i packagefile.deb
# dpkg --force-depends --purge package
</example>
</sect1>

<sect1 id="un-bootable">Installare un pacchetto su un sistema non bootabile
<p>
Fate il boot in Linux mediante un floppy o CD di salvataggio Debian, o tramite
una partizione alternativa se avete un sistema con più boot in Linux.  Montate
il sistema non bootabile su /target ed usate il modo chroot di installazione
di dpkg.
<example>
# dpkg --root /target -i packagefile.deb
</example>
Poi configurate il tutto e risolvete i problemi.
<p>
A proposito, se tutto quello che impedisce il boot è un lilo malfunzionante,
potete fare il boot con un disco di salvataggio Debian standard. Al prompt del
boot, ammettendo che la partizione root della vostra installazione è su
/dev/hda12 e volete un runlevel 3, digitate:
<example>
boot: rescue root=/dev/hda12 3
</example>
A questo punto avrete accesso ad un sistema pressochè perfettamente
funzionante con il kernel su dischetto. (Potranno esserci inconvenienti minori
dovuti alla mancanza di moduli o caratteristiche del kernel.)
</sect1>
</sect>

<sect id="debian-package">Comandi del "paradiso" Debian
<p>
<sect1 id="info-file">Informazioni sui file
<p>
Per scoprire a quale pacchetto un file appartiene:
<example>
$ dpkg {-S|--search} nomefile (o modello) # trova il pacchetto a partire dal
nome del file installato 
$ zgrep -e nomefile (o modello) /local/copy/of/debian/woody/Contents-i386.gz 
# trova l'elenco dei file con la stessa radice (o il file) nell'archivio 
Debian
</example>
Potete utilizzare anche dei comandi specifici per i pacchetti:
<example>
# apt-get install dlocate # è in conflitto con slocate (la versione sicura di
locate) 
$ dlocate filename # alternativa rapida a dpkg -L e dpkg -S 
...  
# apt-get install auto-apt # strumento per l'installazione a richiesta dei
pacchetti 
# auto-apt update # crea un database per auto-apt 
$ auto-apt search nomefile (o modello) # effettua una ricerca completa 
nell'archivio pacchetti
...
</example>
</sect1>

<sect1 id="info-package">Informazioni sui pacchetti
<p>
Cerca le informazioni negli archivi dei pacchetti e le visualizza. Accertatevi
che apt sia indirizzato verso l'archivio(i) appropriato(i) modificando
<tt>/etc/apt/sources.list</tt>.  Se volete vedere le differenze fra i
pacchetti in testing/unstable e quelli correntemente installati utilizzate
"apt-cache policy"&mdash, un comando molto utile.
<example>
# apt-get check # aggiorna la cache e controlla le dipendenze 
$ apt-cache search testo # cerca un pacchetto a partire dalla descrizione 
$ apt-cache policy pacchetto # fornisce informazioni su priorità e 
distribuzione di appartenenza di un pacchetto 
$ apt-cache show -a pacchetto|less # mostra la descrizione di un pacchetto
per ogni distribuzione 
$ apt-cache showpkg pacchetto|less # Informazioni per il debug di 
un pacchetto 
# dpkg --audit|-C # cerca i pacchetti parzialmente installati 
$ dpkg {-s|--status} pacchetto... # stato e descrizione del pacchetto 
installato 
$ dpkg -l pacchetto ...  # stato del pacchetto installato (1 linea) 
$ dpkg -L pacchetto...  # elenca i file installati per un dato pacchetto
</example>
<p>
E' sempre possibile trovare informazioni su pacchetti in (Io uso "mc"):
<example>
/var/lib/apt/lists/*
/var/lib/dpkg/{available|status}
</example>
</sect1>

<sect1 id="reconfigure">Riconfigurare i pacchetti già installati
<p>
Usate i seguenti comandi per riconfigurare un pacchetto già installato.
<example>
# dpkg-reconfigure --priority=medium pacchetto [...]
# dpkg-reconfigure --all  # riconfigura tutti i pacchetti
</example>
Eseguite questo tramite debconf se avete la necessità di cambiarne la
configurazione dei messaggi in modo permanente.
<p>
Alcuni programmo hanno degli script speciali di configurazione.
<example>
apt-setup     - crea /etc/sources.list
install-mbr   - installa un manager di Master Boot Record 
tzconfig      - imposta il fuso orario locale
gpmconfig     - imposta il demone per mouse gpm
smbconfig     - configura Samba
eximconfig    - configura Exim (MTA)
apacheconfig  - configura Apache (httpd)
cvsconfig     - configura CVS
sndconfig     - configura il sistema audio
...
update-alternatives - imposta i comandi predefiniti, p.e. vim per vi
update-rc.d         - Gstione degli script di inzializzazione del System-V 
update-menus        - Il sistema dei menu Debian 
...
</example>
</sect1>

<sect1 id="remove">Rimozione e purga dei pacchetti
<p>
Rimuove un pacchetto mantenendone la configurazione:
<example>
# apt-get remove pacchetto ...
# dpkg  --remove pacchetto ...
</example>
Rimuove un pacchetto e la sua configurazione:
<example>
# apt-get remove --purge pacchetto ...
# dpkg    --purge        pacchetto ...
</example>
</sect1>

<sect1 id="hold">Mantenere vecchi pacchetti
<p>
Per esempio, per mantenere libc6 e libc6-dev con "dselect" e "apt-get -u
upgrade package" si può procedere come segue:
<example>
# echo -e "libc6 hold\nlibc6-dev hold" | dpkg --set-selections
</example>
"apt-get -u installa pacchetto" non verrà impedito da quell'"hold". Per
mantenere un pacchetto forzandone un declassamento automatico con "apt-get -u
upgrade pacchetto"oppure "apt-get -u dist-upgrade", aggiungete le seguenti
linee ad /etc/apt/preferences:
<example>
Package: libc6*
Pin: release a=stable
Pin-Priority: 2000
</example>
<p>
Il comando seguente mostra i pacchetti mantenuti (non aggiornati):
<example>
dpkg --get-selections "*"|grep -e "hold$"
</example>
</sect1>

<sect1 id="dselect">Dselect - configurazione generale
<p>
Aggiungete una linea con "expert" in /etc/dpkg/dselect.cfg per ridurne il
"rumore".
<p>
Una volta lanciato, dselect seleziona automaticamente tutti i pacchetti
"Required", "Important", e "Standard". Alcuni pacchetti come teTEX ed emacs,
sono voluminosi e potrebbero non essere necessari durante la prima
installazione di un sistema, per cui siate accorti.
<p>
Dselect presenta un'interfaccia utente un pò strana. Quattro sono i comandi
ambigui (Maiuscolo significa MAIUSCOLO!):
<example>
Tasto  Azione
Q      Esci. Conferma la selezione corrente ed esce comunque (prevale su dep.s)
R      Torna indietro. Non intendevo farlo.
D      Dannazione! Non mi interessa cosa ne pensa dselect. Fallo e basta!
U      Riporta tutto allo stato sUggerito
</example>
Usando D e Q, potete scegliere delle selezioni che presentano conflitti di
dipendenze a vostro rischio e pericolo. Usate questi comandi con cura. Per
macchine lente, lanciate "dselect" su un'altra macchina più veloce per trovare
i pacchetti che vi servono ed usate "apt-get install" per
installarli. "apt-get dselect-upgrade" è il coamdo che utilizza al meglio la
selezione con dselect.
</sect1>

<sect1 id="cache">Ridurre la dimensione dei files nella cache
<p>
Installazione dei pacchetti tramite apt lascia i file dei pacchetti archiviati
in <tt>/var/cache/apt/archives</tt> e questi vanno rimossi.
<example>
# apt-get autoclean # rimuove solo i file dei pacchetti inutili
# apt-get clean     # rimuove tutti i file dei pacchetti
</example>
</sect1>

<sect1 id="record">Salvare/copiare la configurazione del sistema
<p>
Per fare una copia locale dello stato della selezione dei pacchetti:
<example>
$ dpkg --get-selections "*" &gt;lemieselezioni   # oppure usare \*
</example>
"*" fa includere anche i nomi dei pacchetti marcati con "purge".
<p>
Potete poi trasferire questo file su un altro computer ed installarlo con:
<example>
# apt-get update
# dpkg --set-selections &lt;lemieselezioni
# apt-get -u dselect-upgrade
</example>
</sect1>

<sect1 id="port">Portare un pacchetto nel sistema "stable"
<p>
Se si eseguono degli aggiornamenti parziali di un sistema "stable", può essere
buona cosa ricreare un pacchetto all'interno del proprio ambiente a partire
dai sorgenti. In tal modo si eviteranno dei massicci aggiornamenti di
pacchetti, dovuti alle loro dipendenze. Per prima cosa, aggiungete le linee
seguenti a /etc/apt/sources.list:
<example>
deb-src http://http.us.debian.org/debian testing main contrib non-free 
deb-src http://non-us.debian.org/debian-non-US testing/non-US main contrib 
non-free
deb-src http://http.us.debian.org/debian unstable main contrib non-free
deb-src http://non-us.debian.org/debian-non-US unstable/non-US main contrib
non-free
</example>
Poi recuperate i sorgenti ed costruite un pacchetto locale:
<example>
$ apt-get source package/unstable 
$ dpkg-source -x package.dsc 
$ cd package-version 
  ... controlla i pacchetti necessari (Build-depends nel file
.dsc) e li installa. Avete bisogno anche del pacchetto fakeroot.

$ dpkg-buildpackage -rfakeroot 

  ...oppure (senza "signature") 
$ dpkg-buildpackage -rfakeroot -us -uc 
# utilizzate "debsign" in seguito, se necessario

  ...oppure (senza "signature")
# ./debian/rules binary
# ./debian/rules clean
# cd ..
# dpkg-source -b package-version

  ...Poi per installare il pacchetto
# dpkg -i packagefile.deb
</example>
Normalmente, per soddisfare le dipendenze si ha la necessità di installare
alcuni pacchetti con il suffisso "-dev". "debsign" è contenuto nel pacchetto
"devscripts". "auto-apt" può aiutare nel soddisfare queste dipendenze.
<p>
In woody, this dependancy issues can be simplified.  
For example, to compile source only <package>pine</package> package:
<example>
# apt-get build-dep pine
# apt-get source -b pine
</example>
</sect1>
</sect>

<sect id="pecuriarities">Altre particolarità di Debian

<sect1 id="alternatives">Comandi alternativi
<p>
Per lanciare "vim" con il comando "vi", usate "update-alternatives":
<example>
# update-alternatives --display vi
...
# update-alternatives --config vi
  Selection    Command
-----------------------------------------------
      1        /usr/bin/elvis-tiny
      2        /usr/bin/vim
*+    3        /usr/bin/nvi

Enter to keep the default[*], or type selection number: 2
</example>
Le alternative del sistema in Debian sono contenute in /etc/alternatives come
link simbolici.
<p>
Per impostare il vostro window manager preferito, usate invece
"x-window-manager".
<p>
"/bin/sh" è un link simbolico a "/bin/bash" o "/bin/ash/". E' più sicuro usare
"/bin/bash" per mantenere la compatibilità con vecchi script in bash, ma più
corretto utilizzare "/bin/ash" per imporre la compatibilità POSIX.
</sect1>

<sect1 id="sys-v">Inizializzazione e livelli (runlevels) del System-V 
<p>
Il runlevel predefinito in cui il sistema esegue il boot può essere impostato
in /etc/inittab.
<p>
Diversamente da altre distribuzioni, Debian pone la gestione dei livelli
completamente nelle mani dell'amministratore di sistema. La gestione
dell'inizializzazione del System-V in Debian viene eseguita tramite gli
scripts update-rc.d.
<p>
Iniziare /etc/init.d/nomescript nel runlevel 1,2 o 3 e terminarlo nel 4 o 5
con una priorità di sequenza 20 (normale) può essere fatto mediante:
<example>
# update-rc.d nomescript start 20 1 2 3 . stop 20 4 5 .
</example>
I link simbolici possono essere rimossi mentre lo script è ancora presente in
init.d tramite:
<example>
# update-rc.d -f nomescript remove
</example>
Per editare i runlevels, io baro. Ne edito le voci manualmente usando il
comando "mv" allo shell prompt di "mc", copiandone i link con
"Alt-Enter". Sono giunto persino a disabilitare un demone inserendo "exit 0"
all'inizio di uno script init.d. Dopo tutto, questi sono dei semplici file di
configurazione.
</sect1>
</sect>

</chapt>





















