<!-- CVS revision of this document "$Revision: 1.1 $"  -->

<chapt id="install">Debian System installation hints

<p>
Official documentation for installing Debian is located at
<url id="&stable-info;">, and
<url id="&stable-install;">.
<p>
The development versions are located at
<url id="&testing-info;" >, and
<url id="&testing-install;"> (work in progress, sometimes this may not exist).
<p>
Although "&book-title;" was written during the days of the Potato release,
most of its contents have been updated to &stabledebian; and &testingdebian;.

<sect>General Linux system installation hints
<p>
In order to minimize risks associated with "testing" and
"unstable" packages, it is a good practice to set up your main Linux
system for dual booting along with another small stable Linux system.

<sect1>Hardware compatibility basics
<p>
Linux is compatible with most PC hardware and can be installed to
almost any system. For me it was as easy as installing Windows 95/98/Me.  
The hardware compatibility list just seems to keep growing.
<p>
If you have a laptop PC, check
<url id="&linonlap;" name="Linux on Laptops">
for installation pointers by brand and model.
<p>
My recommendation for desktop PC hardware is "Just be conservative":
<list compact>
<item>SCSI rather than IDE for work, IDE/ATAPI HD for private use.
<item>IDE/ATAPI CD-ROM (or CD-RW).
<item>PCI rather than ISA, especially for the network card (NIC).
<item>Use a cheap NIC.  Tulip for PCI, NE2000 for ISA are good.
<item>Avoid PCMCIA (notebook) as your first Linux install.
<item>No USB keyboard, mouse . . . unless you want a challenge.
</list>
<p>
If you have a slow machine, yanking out the hard drive and plugging it into
another faster machine for installation is a good idea.  
</sect1>

<sect1>Determining a PC's hardware and chip set
<p>
During installation, one will be asked to identify the hardware or chip 
set of the PC. Sometimes that information may not seem easy to find. 
Here is one method:
<enumlist compact>
  <item>Open your PC's case and look inside.
  <item>Record the numbers on the large chips on the graphics card, network card, 
  chip near serial ports, chip near IDE ports.  
  <item>Record card names printed on the back of the PCI and ISA cards.
</enumlist>
</sect1>

<sect1>Determining a PC's hardware via &debian;
<p>
The following commands on a Linux system should give some idea of
actual hardware and configuration.
<example>
$ /sbin/lspci -v |pager
$ pager /proc/pci
$ pager /proc/interrupts
$ pager /proc/ioports
</example>
These commands can be run during the install process from the console screen 
by pressing ALT-F2.
</sect1>

<sect1>Determining a PC's hardware via other OSs
<p>
Hardware information can also be obtained from other OSs.
<p>
Install another commercial Linux distribution.  Hardware detection 
on those tends to be better than on Debian as of now.  This may change 
as Woody evolves.
<p>
Install Windows.  Hardware configuration can be obtained by right-clicking "My
Computer" to get to Properties / Device Manager.  Record all resource
information such as IRQ, I/O port address, and DMA. Some old ISA cards may
need to be configured under DOS and used accordingly.
</sect1>

<sect1>A Lilo myth
<p>
Lilo is limited to 1024 cylinders.  &mdash;WRONG !
<p>
The newer <prgn>lilo</prgn> used after Debian Potato has lba32 support. 
If the BIOS of your motherboard is recent enough to support lba32, 
<prgn>lilo</prgn> should be able to load beyond the old 1024-cylinder 
limitation.
<p>
Just make sure to add a line reading "lba32" somewhere near the beginning 
of your <prgn>lilo.conf</prgn> file if you have kept an old
<prgn>lilo.conf.</prgn>
</sect1>

<sect1 id="bootfloppy">Choice of boot floppies
<p>
For Potato, I liked the IDEPCI disk set for normal install to a desktop. 
For Woody, I like the bf2.4 boot disk set.  They both use a version of 
<package>boot-floppies</package> to create boot floppies.
<p>
If you have a PCMCIA network card, you need to use the standard boot
disk set (largest number of floppies but all driver modules available)
and configure the NIC in the PCMCIA setup; do not try to set up an NIC card 
in the standard network setup dialogue.
<p>
For special systems, you may need to create a custom rescue disk.
This can be done by replacing the kernel 
image named "linux" on the &debian; rescue disk by overwriting it
with another compressed kernel image compiled off-site for the machine.  
Details are documented in <file>readme.txt</file> on the rescue disk.  
The rescue floppy
uses the MS-DOS file system, so you can use any system to read and edit it.
This should make life easier for people with a special network card, etc.
<p>
For Sarge, <package>debian-installer</package> and/or 
<package>pgi</package> is expected to be used for creating boot floppies.
</sect1>

<sect1>Installation
<p>
Follow the official instructions found in 
<url id="&stable-install;">
or
<url id="&testing-install;"> (work in progress, sometimes this may not exist).
<p>
If you are installing a system using boot floppies in the testing distribution, 
you may need to open a console terminal during the install process by pressing 
<tt>ALT-F2</tt> and manually edit <file>/etc/sources.list</file> entries 
from <tt>stable</tt> to <tt>testing</tt> to adjust APT sources.
<p>
I tend to install <prgn>lilo</prgn> into places like <file>/dev/hda3</file>,
while installing <prgn>mbr</prgn> into <file>/dev/hda</file>.  This minimizes 
the risk of overwriting boot information.
<p>
Here is what I choose during the install process.
<list compact>
<item>MD5 passwords "yes"
<item>shadow passwords "yes"
<item>Install "advanced" (dselect **) and select
  <list compact>
    <item>Exclude emacs (if selected), nvi, tex, telnet, talk(d); 
    <item>Include mc, vim, either one of nano-tiny or elvis-tiny.
    <p>
     See <ref id="dselect">. Even if you are an Emacs fan, avoid it now 
     and be content with nano during install.  Also avoid installing 
     other large packages such as TEX (Potato used to do this) at
     this stage.  See <ref id="bin-editor"> for the reason for 
     installing nano-tiny or elvis-tiny here.
  </list>
<item>All configuration questions = "y" (replace current) during 
  each package install dialog.
<item><package>exim</package>: select 2 for machine since I send mail through 
  my ISP's SMTP server.
</list>
<p>
For more information on dselect, see <ref id="dselect">.
</sect1>

<sect1>Hosts and IP to use for LAN
<p>
Example of LAN configuration (C subnet: 192.168.1.0/24):
<example>
Internet
   |
   +--- External ISP provides POP service (accessed by fetchmail)
   | 
  Access point ISP provides DHCP service and SMTP relay service
   |                     :
  Cable modem         (Dial-up)
   |                     :
LAN Gateway machine external port: eth0 (IP given by ISP's DHCP)
 use old notebook PC (IBM Thinkpad, 486 DX2 50 MHz, 20 MB RAM)
 run Linux 2.4 kernel with ext3 file system.
 run "ipmasq" package (with stronger patch, NAT and firewall)
 run "dhcp-client" package configured for eth0 (override DNS setting)
 run "dhcp" package configured for eth1
 run "exim" as the smarthost (mode 2)
 run "fetchmail" with a long interval (fallback)
 run "bind" as the cache nameserver for Internet from LAN
            as authoritative nameserver for LAN domain from LAN
 run "ssh" on port 22 and 8080 (connect from anywhere)
 run "squid" as the cache server for the Debian archive (for APT)
LAN Gateway machine internal port: eth1 (IP = 192.168.1.1, fixed)
                         |
         +--- LAN Switch (10 base T) ---+
         |                              |
Some fixed IP clients on LAN     Some DHCP clients on LAN
(IP = 192.168.1.2-127, fixed)    (IP = 192.168.1.128-200, dynamic)
</example>
See <ref id="gateway"> for the details of configuring the LAN gateway 
server.
</sect1>

<sect1>User accounts
<p>
In order to have a consistent feel across machines, the first few accounts are
always the same in my system.
<p>
I always create a first user account with a name like "admin" (uid=1000).
I forward all root email there.  This account is given membership
in the <tt>adm</tt> group (see <ref id="wheel">), 
which can be given a good amount of root privilege through
<prgn>su</prgn> using PAM or
the <prgn>sudo</prgn> command. See <ref id="newuser"> for details.
</sect1>

<sect1>Creating file systems
<p>
<sect2>Hard disk partition
<p>
I prefer to use different partitions for different directory trees to limit
damage upon system crash. E.g.,
<example>
/          == (/ + /boot + /bin + /sbin)
           == 50MB+
/tmp       == 100MB+
/var       == 100MB+
/home      == 100MB+
/usr       == 700MB+ with X
/usr/local == 100MB
</example>
<p>
The size of the <file>/usr</file> directory is very dependent on X-window
applications and documentation.  
<file>/usr</file> can be 300MB if one runs a console terminal only, whereas
2GB&ndash;3GB is not an unusual size if one has installed many Gnome
applications.  

When <file>/usr</file> grows too big, moving out 
<file>/usr/share/</file> to a different partition is the most effective
cure.  With the new large prepackaged Linux 2.4 kernels, <file>/</file> may 
need more than 200MB.

<p>
For example, the current status of my Internet gateway machine is as follows
(output of the <tt>df -h</tt> command):
<example>
Filesystem            Size  Used Avail Use&percnt; Mounted on
/dev/hda3             300M  106M  179M  38&percnt; /
/dev/hda7             100M   12M   82M  13&percnt; /home
/dev/hda8             596M   53M  513M  10&percnt; /var
/dev/hda6             100M  834k   94M   1&percnt; /var/lib/cvs
/dev/hda9             596M  222M  343M  40&percnt; /usr
/dev/hda10            596M  130M  436M  23&percnt; /var/cache/apt/archives
/dev/hda11            1.5G  204M  1.2G  14&percnt; /var/spool/squid
</example>
(The large area reserved for <file>/var/spool/squid</file> is for a proxy cache for package
downloading.)
<p>
Following is <tt>fdisk -l</tt> output to provide an idea of partition
structure:
<example>
# fdisk -l /dev/hda # comment

/dev/hda1             1        41    309928+   6  FAT16 # DOS
/dev/hda2            42        84    325080   83  Linux # (not used)
/dev/hda3   *        85       126    317520   83  Linux # Main
/dev/hda4           127       629   3802680    5  Extended
/dev/hda5           127       143    128488+  82  Linux swap
/dev/hda6           144       157    105808+  83  Linux
/dev/hda7           158       171    105808+  83  Linux
/dev/hda8           172       253    619888+  83  Linux
/dev/hda9           254       335    619888+  83  Linux
/dev/hda10          336       417    619888+  83  Linux
/dev/hda11          418       629   1602688+  83  Linux
</example>
A few unused partitions exist.  These are for installing a second Linux
distribution or as expansion space for growing directory trees.

<sect2>Mount file systems
<p>
Mounting the above file systems properly is accomplished with the following
<file>/etc/fstab</file>:
<example>

# /etc/fstab: static file system information.
#
# file system	mount point	type	options		       dump pass
/dev/hda3	/		ext2	defaults,errors=remount-ro 0 1
/dev/hda5	none		swap	sw                      0 0
proc		/proc		proc	defaults		0 0
/dev/fd0	/floppy		auto	defaults,user,noauto	0 0
/dev/cdrom	/cdrom		iso9660	defaults,ro,user,noauto	0 0
#
# keep partition separate
/dev/hda7	/home		ext2	rw			0 2
/dev/hda8	/var		ext2	rw			0 2
/dev/hda6	/var/lib/cvs	ext2	rw			0 2
/dev/hda9	/usr		ext2	rw			0 2
/dev/hda10	/var/cache/apt/archives ext2	rw		0 2

# very big partition for proxy cache
/dev/hda11	/var/spool/squid ext2	rw			0 2

# backup bootable DOS
/dev/hda1	/mnt/dos	vfat	rw,noauto		0 0
# backup bootable Linux system (not done)
/dev/hda2	/mnt/linux	ext2	rw,noauto		0 0
#
# nfs mounts
mickey:/	/mnt/mickey	nfs	ro,noauto,intr		0 0
goofy:/		/mnt/goofy	nfs	ro,noauto,intr		0 0
# minnie:/ /mnt/minnie smbfs ro,soft,intr,credentials={filename} 0 2
</example>

For NFS, I use <tt>noauto,intr</tt> combined with the default 
<tt>hard</tt> option.   This 
way, it is possible to recover from a hung process due to a dead connection
using Control-C.
<p>
For a Windows machine connected with Samba (smbfs), <tt>rw,auto,soft,intr</tt> 
may be good idea. See <ref id="samba">.
<p>
For a floppy drive, using <tt>noauto,rw,sync,user,exec</tt> instead prevents file
corruption after accidental disk eject before unmount, but this slows the
write process.

<sect2>Autofs mount
<p>
Key points to auto mount:
<list compact>
<item>Load the <tt>vfat</tt> module to allow <file>/etc/auto.misc</file>
 to contain <tt>-fstype=auto</tt>:
<example>
# modprobe vfat # prior to the floppy access attempt
 ... or to automate this settings,
# cat >>/etc/modules
vfat
^D
 ... and reboot the system.
</example>
<item>Set <file>/etc/auto.misc</file> as follows:
<example>
floppy -fstype=auto,sync,nodev,nosuid,gid=100,umask=000 :/dev/fd0
 ... where gid=100 is "users".
</example>
<item>Create links in <file>/home/<var>user</var></file>, <file>cdrom</file> 
 and <file>floppy</file>, that point to 
 <file>/var/autofs/misc/cdrom</file> and 
 <file>/var/autofs/misc/floppy</file> respectively.
<item>Make <var>user</var> as a member of "users" group.
</list>

<sect2>NFS mount
<p>
The external Linux NFS server (goofy) resides behind a firewall (gateway). I
have a very relaxed security policy on my LAN since I am the only user. To
enable NFS access, the NFS server side needs to add <file>/etc/exports</file> as
follows:
<example>
# /etc/exports: the access control list for file systems which may be
#               exported to NFS clients.  See exports(5).
/       (rw,no_root_squash)
</example>
This is needed to activate the NFS server in addition to installing and
activating the NFS server and client.
<p>
For simplicity, I usually create a single partition of 2GB for an experimental
or secondary lazy Linux install.  I optionally share swap and <file>/tmp</file>
partitions for these installs.  A multi-partition scheme is too involved for
these usages.  If only a simple console system is needed, 500MB may be more
than sufficient.
</sect1>

<sect1>DRAM memory guidelines
<p>
Following are rough guidelines for DRAM.
<example>
  4 MB:  Bare minimum for Linux kernel to function.
 16 MB:  Minimum for reasonable console system.
 32 MB:  Minimum for simple X system.
 64 MB:  Minimum for X system with GNOME/KDE.
128 MB:  Comfortable for X system with GNOME/KDE.
256+MB:  Why not if you can afford it?  DRAM is cheap.
</example>
Using the boot option <tt>mem=4m</tt> (or lilo <tt>append="mem=4m"</tt>) will show how the
system would perform with 4MB of memory installed.  A lilo boot parameter 
is needed for a system containing more than 64MB of memory with an old BIOS.
</sect1>

<sect1>Swap space
<p>
I use the following guidelines for swap space:
<list compact>
<item>Each swap partition is &lt; 128 MB (if old 2.0 kernel), &lt; 2 GB (in recent kernels)
<item>Total = either (1 to 2 times installed RAM) or (128 MB to 2 GB) as a guideline
<item>Spread them on different drives and mount all of them with 
 <tt>sw,pri=1</tt> options in <file>/etc/fstab</file>.  This
 ensures that the kernel does a striping RAID of the swap partitions
 and offers the maximum swap performance.
<item>Use a central portion of the hard disk when possible.
</list>
<p>
Even if you never need it, some swap space (128MB) is desirable so the
system will slow down before it crashes hard with a program which leaks
memory.
</sect1>
</sect>

<sect>Bash configuration
<p>
I modify shell start-up scripts to my taste across the system:
<example>
/etc/bash.bashrc        Replace with private one
/etc/profile            Keep distribution copy ( \w -&gt; \W)
/etc/skel/.bashrc       Replace with private copy
/etc/skel/.profile      Replace with private copy
/etc/skel/.bash_profile Replace with private copy
~/.bashrc               Replace with private copy for all accounts
~/.profile              Replace with private copy for all accounts
~/.bash_profile         Replace with private copy for all accounts
</example>
<url id="examples/" name="See details in my example scripts">. 
I like a transparent system, so I set <prgn>umask</prgn> to 002 or 022.
<p>
<prgn>PATH</prgn> is set by the following configuration files in this order:
<example>
/etc/login.defs  - before the shell sets PATH
/etc/profile     (may call /etc/bash.bashrc)
~/.bash_profile  (may call ~/.bashrc)
</example>
</sect>

<sect>Mouse configuration
<p>
<sect1>PS2 mice
<p>
In the case of a PS/2-connector mouse on an ATX motherboard, the signal 
flow should be:
<example>
mouse -&gt; /dev/psaux -&gt; gpm -&gt; /dev/gpmdata = /dev/mouse -&gt; X
</example>
Here, a symlink <file>/dev/mouse</file> is created and is pointing to
<file>/dev/gpmdata</file> to make some configuration utilities happy and
to make reconfiguration easy. 
<p>
This signal flow allows the keyboard and mouse to be unplugged and
reinitialized by restarting <prgn>gpm</prgn> upon reconnect.  
X will stay alive! 
<p>
The protocol of the signal flow between <prgn>gpm</prgn> output and X input
can be implemented in either of two ways, as "ms3" (use the Microsoft 3-button
serial mouse protocol) or "raw" (use the same protocol as the mouse
connected), and this choice dictates the choice of protocol used in X
configuration.
<p>
I will demonstrate the configuration examples using a Logitech 3-button
(traditional Unix-style mouse) PS/2 mouse as an example in the following.

<sect2 id="gpmms3">The ms3 protocol approach
<p>
<example>
/etc/gpm.conf               /etc/X11/X86Config or X86Config-4
=============================================================
device=/dev/psaux             Section "Pointer"
responsiveness=                 Protocol    "IntelliMouse"
repeat_type=ms3                 Device      "/dev/mouse"
type=autops2
append=""
</example>
If this approach is used, the mouse type adjustment is done only by
editing <file>gpm.conf</file> and X configuration stays constant.
<p>
If a normal 2-button PS2 mouse is used, set the X protocol to
<tt>Microsoft</tt> and enable <tt>Emulate3Buttons</tt>.

<sect2 id="gpmraw">The raw protocol approach
<p>
<example>
/etc/gpm.conf               /etc/X11/X86Config or X86Config-4
=============================================================
device=/dev/psaux             Section "Pointer"
responsiveness=                 Protocol    "IntelliMouse"
repeat_type=raw                 Device      "/dev/mouse"
type=autops2
append=""
</example>
If this approach is used, the mouse type adjustment is done by
editing <file>gpm.conf</file> as well as adjusting X configuration.
<p>
If a normal 2-button PS2 mouse is used, set the X protocol to
<tt>PS/2</tt> and enable <tt>Emulate3Buttons</tt>.
<p>
If you decide not to use the <prgn>gpm</prgn> repeater daemon for X, just
point the symlink <file>/dev/mouse</file> to <file>/dev/psaux</file> after
stopping the <prgn>gpm</prgn> repeater daemon.

<sect2>How to adjust to different mice
<p>
If you are using a pre-Woody version of <prgn>gpm</prgn>, use <tt>ps2</tt> instead of
<tt>autops2</tt> in <file>gpm.conf</file>.  The device type
<tt>autops2</tt> is supposed to autodetect most of the PS/2
mice in the market.  To find out the specific types of mouse available, type
<tt>gpm -t help</tt>.  For some scroll mice on a
PS/2 port, the use of <tt>imps2</tt> in <file>gpm.conf</file> may help.
<p>
For <prgn>gpm</prgn>, the difference of protocol between the 2-button 
mouse and the 3-button mouse is autodetected and adjusted.
<p>
For some recent thin Toshiba notebook PCs, activating <prgn>gpm</prgn>
before PCMCIA in the System-V init script may help prevent system
lock-up.  Weird but true.
<p>
When <ref id="gpmraw"> is used, X configuration must be adjusted to the
actual protocol of the mouse.  For a typical scroll mouse, use
<tt>IMPS/2</tt>.
<p>
<url id="examples/" name="See my example scripts for details"> 
and <manref name="gpm" section="8">.

<sect1>USB mice
<p>
Make sure you have:
<list compact>
<item>"Input Core Support" and "Input Core Support/Mouse Support"
       enabled in the kernel or as modules.
<item>"Support for USB", "Preliminary USB device filesystem",
      "UHCI or OHCI", and "USB HID Support" enabled in the
       kernel or as modules.
</list>
<p>
If you're not using devfs, create a device node <file>/dev/input/mice</file> 
with major 13 and minor 63 as follows:
<example>
# cd /dev
# mkdir input
# mknod input/mice c 13 63
</example>
<p>
For Logitech 3-button <strong>USB</strong> mice, 
configuration combinations should be:
<example>
/etc/gpm.conf                 /etc/X11/X86Config or X86Config-4
===============================================================
device=/dev/input/mice        Section "InputDevice"
responsiveness=                 Option "Protocol" "ImPS/2"
repeat_type=ms3                 Option "Device" "/dev/input/mice"
type=ps2                        Option "ZAxisMapping" "4 5"
append=""                     EndSection
</example>
[This USB mouse section was written by Jan Michael C Alonzo 
<email>jmalonzo@softhome.net</email>.]
<p>
See <url id="&linuxusb;" name="Linux USB Project"> for more information.
</sect>

<sect>NFS configuration
<p>
Set up NFS by setting <file>/etc/exports</file>.
<example>
# echo "/ *.domainname-for-lan-hosts(rw,no_root_squash,nohide)" \
        &gt;&gt; /etc/exports
</example>
<url id="examples/" name="See my example scripts for details">.
</sect>

<sect id="samba">Samba configuration
<p>
References:
<list compact>
<item><url id="&sambahome;">
<item><package>samba-doc</package> package
</list>
<p>
Setting up Samba with "share" mode is much easier since this creates WfW-type
share drives.  But it is preferable to set it up with "user" mode.
<p>
Samba can be configured through <prgn>debconf</prgn> or <prgn>vi</prgn>:
<example>
# dpkg-reconfigure --priority=<var>low</var> samba # in Woody
# vi /etc/samba/smb.conf
</example>
<url id="examples/" name="See my example scripts for details">.
<p>
Adding a new user to the smbpasswd file can be done via <prgn>smbpasswd</prgn>:
<example>
$su -c "smbpasswd -a username"
</example>
Make sure to use encrypted passwords for optimum compatibility.
<p>
Set <tt>os level</tt> according to the following system equivalences (the larger the
number, the higher the priority as server):
<example>
0:      Samba with a loose attitude (will never become a master browser)
1:      Wfw 3.1, Win95, Win98, Win/me?
16:     Win NT WS 3.51
17:     Win NT WS 4.0
32:     Win NT SVR 3.51
33:     Win NT SVR 4.0
255:    Samba with mighty power
</example>
Make sure that users are members of the group owning the directory that gives
shared access and that the directory path has its execution bit set to access.
</sect>

<sect id="printer">Printer configuration
<p>
The traditional method is <prgn>lpr</prgn>/<prgn>lpd</prgn>.  There is a
new CUPS&trade; system (Common UNIX Printing System).  PDQ is another approach.
See the <url id="&printing-howto;" name="Linux Printing HOWTO"> for
more information.

<sect1 id="lprlpd"><prgn>lpr</prgn>/<prgn>lpd</prgn>
<p>
For the <prgn>lpr</prgn>/<prgn>lpd</prgn> type spoolers (<package>lpr</package>, 
<package>lprng</package>, and <package>gnulpr</package>), set up 
<file>/etc/printcap</file> as follows if they are connected to a PostScript 
or text-only printer (the basics):
<example>
<var>lp</var>|<var>alias</var>:\
        :sd=/var/spool/lpd/<var>lp</var>:\
        :mx#0:\
        :sh:\
        :lp=/dev/lp0:
</example>
Meaning of the above lines:
<list compact>
<item>Head line: <var>lp</var> &mdash; name of spool, <var>alias</var> =
 alias
<item>mx#0 &mdash; max file size unlimited
<item>sh &mdash; suppress printing of burst page header
<item>lp=/dev/lp0 &mdash; local printer device, or port@host for remote
</list>
This is a good configuration if you are connected to a PostScript printer.
Also, when printing from a Windows machine through Samba, this is a good
configuration for any Windows-supported printer (no bidirectional
communication is supported).  You have to select the corresponding printer
configuration on the Windows machine.
<p>
If you do not have a PostScript printer, you need to set up a filtering
system using <prgn>gs</prgn>.  
There are many auto-configuration tools provided for setting up 
<file>/etc/printcap</file>.
Any of these combinations is an option:
<list compact>
<item><package>gnulpr</package>, (<package>lpr-ppd</package>) and 
  <package>printtool</package> &mdash; I use this.
<item><package>lpr</package> and <package>apsfilter</package>
<item><package>lpr</package> and <package>magicfilter</package>
<item><package>lprng</package> and <package>lprngtool</package>
<item><package>lprng</package> and <package>apsfilter</package>
<item><package>lprng</package> and <package>magicfilter</package>
<!-- I can think of more combinations but I add them if someone  
  actually report me they got it working with them.  -->
</list>
<p>
In order to run GUI configuration tools such as <prgn>printtool</prgn>,
see <ref id="ss-xsu"> to gain root privilege.  Printer spools created
with <prgn>printtool</prgn> use <prgn>gs</prgn> and act like PostScript
printers.  So when accessing them, use PostScript printer drivers.  On
the Windows side, "Apple LaserWriter" is the standard one.
</sect1>

<sect1 id="cups">CUPS&trade;
<p>
Install the Common UNIX Printing System (or CUPS&trade;):
<example>
# apt-get install cupsys cupsomatic-ppd 
# apt-get install cupsys-bsd cupsys-driver-gimpprint
</example>
<!-- CUPS dependencies: Recommends are installed automatically -->
<p>
Then configure the system using any Web browser:
</p>
<p>
<example>
$ <var>mybrowser</var> http://localhost:631
</example>
</p>
</sect1>
</sect>

<sect>Other host installation hints

<sect1>Install a few more packages after initial install
<p>
Once you have made it this far, you have a small but functioning &debian; 
system. It is a good time to install bigger packages.
<list>
<item>Run <prgn>tasksel</prgn>.  See <ref id="tasksel">.
<p>
You may choose these if you need them:
<list compact>
<item>End-user &mdash; X window system
<item>Development &mdash; C and C++
<item>Development &mdash; Python
<item>Development &mdash; Tcl/Tk
<item>Miscellaneous &mdash; TeX/LaTeX environment
<item>
For others &mdash; I prefer to use <prgn>tasksel</prgn> as a guide by 
looking into their components listed under &lt;Task Info&gt; and 
installing them selectively through <prgn>dselect</prgn>.
</list>

<item>Run <prgn>dselect</prgn>. 
<p>
Here the first thing you may want to do is select your favorite editor and 
any programs you need. You can install many Emacs variants at the same 
time. See <ref id="dselect"> and <ref id="pop-editor">.
<p>
Also you may replace some of the default packages with full-featured ones.
<list compact>
<item>lynx-ssh (instead of lynx)
<item>... <!-- Add list in generic way. -->
</list>
<item>...
</list>

I usually edit <file>/etc/inittab</file> for easy shutdown.
<example>
...
# What to do when CTRL-ALT-DEL is pressed.
ca:12345:ctrlaltdel:/sbin/shutdown -t1 -a -h now
...
</example>
</sect1>

<sect1>Modules
<p>
Modules for the device drivers are configured during the initial 
installation.  <prgn>modconf</prgn> provides menu-driven module 
configuration afterward. This program is quite useful when some 
modules were left out during the initial installation or a new kernel 
was installed after the initial installation.
<p>
All preloading module names need to be listed in
<file>/etc/modules</file>.  I also use <prgn>lsmod</prgn> and
<prgn>depmod</prgn> to control them manually.
<p>
Also make sure to add a few lines in <file>/etc/modules</file> to 
handle ip-masquerading (ftp, etc.) for 2.4 kernels.  See
<ref id="kernel-modules">, specifically <ref id="kernel-net">.

</sect1>

<sect1>CD-RW basic setup
<p>
Edit the following files:
<example>
/etc/lilo.conf  (add append="hdc=ide-scsi ignore=hdc", 
                 run lilo to activate)
/dev/cdrom      (symlink # cd /dev; ln -sf scd0 cdrom)
/etc/modules    (add "ide-scsi" and "sg". If needed "sr" after this.)
</example>
See <ref id="cdrw"> for details.
</sect1>

<sect1 id="apm">Large memory and auto power-off
<p>
Edit <file>/etc/lilo.conf</file> as follows to set boot-prompt parameters for large 
memory (for 2.2 kernels) and auto power-off (for apm):
<example>
append="mem=128M apm=on apm=power-off"
</example>
Run <prgn>lilo</prgn> to install these settings.  <tt>apm=power-off</tt> is needed for an
SMP-kernel.  The same can be done directly by entering options at the boot
prompt. See <ref id="bootprompt">.
<p>
If apm is compiled as a module, as in Debian default 2.4 kernels,
run <tt># insmod apm power_off=1</tt> after boot or set
<file>/etc/modules</file> by:
<example>
# echo "apm power_off=1" &gt;&gt;/etc/modules
</example>
<p>
Alternatively, compiling ACPI support achieves the same goal with newer
kernels and seems to be more SMP-friendly (this requires a newer motherboard).
The 2.4 kernel on newer motherboards should detect large memory correctly.
<example>
CONFIG_PM=y
CONFIG_ACPI=y
...
CONFIG_ACPI_BUSMGR=m
CONFIG_ACPI_SYS=m
</example>
and add the following lines in <file>/etc/modules</file> in this order:
<example>
ospm_busmgr
ospm_system
</example>
Or recompile the kernel with all of the kernel options above set to "y".  In
any case, none of the boot-prompt parameters are needed with ACPI.
</sect1>

<sect1 id="killecn">Strange access problems with some websites
<p>
Recent Linux kernels enable ECN by default, which may cause access
problems with some websites on bad routers. To check ECN status:
<example>
# cat /proc/sys/net/ipv4/tcp_ecn
 ... or
# sysctl net.ipv4.tcp_ecn
</example>
To turn it off, use:
<example>
# echo "0" > /proc/sys/net/ipv4/tcp_ecn
 ... or
# sysctl -w net.ipv4.tcp_ecn=0
</example>
To disable TCP ECN on every boot, edit <file>/etc/sysctl.conf</file> and add:
<example>
net.ipv4.tcp_ecn = 0
</example>
</sect1>

<sect1>Dial-up PPP configuration
<p>
Install the <package>pppconfig</package> package to set up dial-up PPP access.
<example>
# apt-get install pppconfig
# pppconfig
 ... follow the directions to configure dial-up PPP
# adduser <var>user_name</var> dip
 ... allow <var>user_name</var> to access dial-up PPP
</example>
Dial-up PPP access can be initiated by the user 
(<var>user_name</var>):
<example>
$ pon <var>ISP_name</var>   # start PPP access to your ISP
 ... enjoy the Internet
$ poff <var>ISP_name</var> # stop PPP access, <var>ISP_name</var> optional
</example>
See <file>&f-ppp-readme;</file> for more details.
<p>
Alternatively, the <package>wvdial</package> package may be used to set up 
dial-up PPP access.
</sect1>

<sect1>Other configuration files to tweak in <file>/etc</file>
<p>
You may want to add an <file>/etc/cron.deny</file> file, missing from the standard Debian
install (you can copy <file>/etc/at.deny</file>).
</sect1>

</sect>

</chapt>



