<!doctype debiandoc system>

<!--
# TODO list:
# - Shorten overlong lines - there are lots of sections (by jfs?) where
#   lines are routinely longer than 80 characters. Actually it makes sense
#   to author SGML with much shorter lines, because it makes editing simpler
#   (while the internal line length of the SGML source is obviously not
#   visible in any way to the end user).
#   (occur (make-string 80 ?.))   ;  C-x C-e here
# - Remove gratuitous trailing whitespace; M-x occur " +$"
# - add prgn tags
# JFS reminders :)
#   setup is a noun, set up is a verb
-->

<book>

<titlepag>
<!-- Title information -->
<title>Securing Debian Manual
<author>
<name>Javier Fernández-Sanguino Peña</name>
<email>jfs@computer.org</email>
</author>
<author>Per la traduzione si veda l'Appendice
<qref id="traduzione">I</qref>
</author>
<version>2.95
<date>Lunedì, 12 maggio 2003 16:41:44 +0200

<abstract>
Questo documento descrive la sicurezza nel progetto Debian.  Si
partirà dal processo di protezione e irrobustimento dell'installazione
predefinita della distribuzione Debian GNU/Linux. Verranno inoltre
coperti alcuni usuali compiti per installare un ambiente di rete
sicuro utilizzando Debian GNU/Linux, dando inoltre informazioni
addizionali riguardanti gli strumenti di sicurezza disponibili e
di come la sicurezza sia messa in pratica dal Security Team di Debian.
</abstract>

<copyright> 
<copyrightsummary>Copyright &copy;  2002, 2003 Javier Fernández-Sanguino Peña
<p>Copyright &copy;  2001  Alexander Reelsen, Javier Fernández-Sanguino Peña
<p>Copyright &copy;  2000  Alexander Reelsen

<p>
Il permesso di copiare, distribuire e/o modificare questo
documento è concesso sotto i termini della 
<url id="http://www.fsf.org/copyleft/fdl.html"
name="GNU Free Documentation License, Version 1.1">
od ogni successiva versione pubblicata dalla Free Software Foundation.
&Egrave; distribuito nella speranza che sia di aiuto, ma SENZA ALCUNA
GARANZIA.

</copyright>

</titlepag>

<!-- Table of contents -->
<toc>

<!-- Begin the document -->

<chapt>Introduzione
<p>
Una delle cose più difficili nello scrivere documenti riguardanti la
sicurezza è che ogni caso è unico. Due cose a cui va prestata
attenzione sono l'ambiente minaccioso e le necessità di sicurezza del
singolo sito, host, o rete. Per esempio, le necessità di sicurezza di un
utente domestico sono completamente differenti da quelle di una rete
bancaria. Mentre il rischio principale che un utente domestico deve
affrontare sono i cracker tipo «script kiddie», una rete bancaria deve
preoccuparsi degli attacchi diretti. Inoltre, la banca deve
proteggere i dati dei propri clienti con precisione matematica.
In breve, ogni utente deve considerare il compromesso tra usabilità e
sicurezza/paranoia.
<!-- Is this metaphor really appropriate? Sounds like rounding errors to me,
era -->

<p>
Occorre tenere presente che questo manuale copre soltanto argomenti
relativi al software. Il miglior software del mondo non vi può
proteggere se qualcuno ha accesso fisico alla macchina.  Si può
metterla sotto la scrivania, oppure in un bunker protetto da un
esercito.  Tuttavia un desktop computer può essere maggiormente sicuro
(da un punto di vista software) che uno protetto fisicamente se il
desktop computer è configurato correttamente ed il software sulla
macchina protetta è pieno di falle di sicurezza.  Naturalmente, vanno
considerate ambedue le situazioni.

<p>
Questo documento dà soltanto uno sguardo a quanto si può fare per
incrementare la sicurezza del proprio sistema Debian GNU/Linux.  Se
avete letto altri documenti riguardanti la sicurezza in Linux, vedrete
come argomenti comuni possono sovrapporsi a questo documento.
In ogni caso, questo documento non cerca di essere l'ultima risorsa
di informazioni di cui si possa avere bisogno, cerca soltanto di
adattare queste stesse informazioni così che siano utilizzabili in un
sistema Debian GNU/Linux. Distribuzioni diverse 
fanno alcune cose in modi differenti (per esempio l'avvio dei demoni); 
qui troverete materiale appropriato per gli strumenti e le procedure
di Debian.

<!--
# Does this approximate the intent of the original author? (FIXME: check)
# Original text said: "you will find here [sic] a different approach,
# using Debian's tools, regarding security." era
-->
<!-- IMHO yes, jfs -->

<p>
Se avete commenti, aggiunte o suggerimenti, siete pregati di scrivere
a <!-- <url name="Alexander Reelsen" id="mailto:ar@rhwd.de"> and  -->
<url name="Javier Fernández-Sanguino Peña" id="mailto:jfs@computer.org">
(indirizzo alternativo: jfs@debian.org) e questi saranno incorporati in
questo manuale.



<sect>Scaricare il manuale

<p>
Potete scaricare o visionare l'ultima versione del Securing Debian
Manual dal <url name="Debian Documentation Project"
            id="http://www.debian.org/doc/manuals/securing-debian-howto/">.
Potete controllare l'ultima versione attraverso il
<url name="server CVS"
id="http://cvs.debian.org/ddp/manuals.sgml/securing-howto/?cvsroot=debian-doc">
Debian.

<p>
&Egrave; disponibile anche una versione in
<url id="http://www.debian.org/doc/manuals/securing-debian-howto/securing-debian-howto.txt"
     name="puro testo">
dal sito del progetto di documentazione Debian. Altri formati, come il PDF,
non sono (ancora) disponibili. In ogni caso, potete installare il
pacchetto <url id="http://packages.debian.org/harden-doc" name="harden-doc">
che fornisce lo stesso documento nei formati HTML, txt e PDF. Controllate
però che il pacchetto sia aggiornato rispetto al documento fornito
su Internet (potete comunque utilizzare il pacchetto sorgente per
costruirvi una vostra versione aggiornata!).


<!-- 
<p>
Previous (out of date) versions of this HOWTO can be found here:

<list>
<item><url name="Text-only"
id="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.txt">
<item><url name="HTML"
id="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.html">
<item><url name="HTML, tarred and gzipped"
id="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.tar.gz">
<item><url name="SGML"
id="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.sgml">
</list>
-->
<!-- TODO: remove these stale links rather than leave references to -->
<!-- the old versions hanging around? era -->


<sect>Note/Feedback organizzativi

<p>
Ed ora la parte ufficiale. Fino ad ora io (Alexander Reelsen) ho 
scritto la maggioranza dei paragrafi di questo manuale, ma è mia 
opinione che non dovrebbe continuare così.  Sono cresciuto e vivo con 
il software libero, è parte del mio uso quotidiano ed immagino anche 
del vostro. Incoraggio tutti a spedirmi feedback, 
aggiunte od ogni altro tipo di suggerimento che possiate fornirmi.

<p>
Se ritenete di poter mantenere un certo capitolo o meglio una
sezione, allora scrivete al manutentore del documento e sarete i
benvenuti.  Specificatamente, se trovate in una sezione dei contrassegni
come "FIXME", questo significa che l'autore non ha il tempo o
la conoscenza necessaria sull'argomento, inviate una mail immediatamente.

<p>
L'argomento di questo manuale rende abbastanza chiara l'importanza
di mantenerlo aggiornato e ognuno può fare la propria parte. 
Per favore, contribuite.


<sect>Conoscenze preliminari


<p>
L'installazione di Debian GNU/Linux non è molto difficile e 
dovreste essere in grado di eseguirla. Se avete già alcune
conoscenze di Linux o di altri sistemi Unix e un po' di familiarità
con gli aspetti base della sicurezza, risulterà semplice
comprendere questo manuale, dal momento che questo documento non
può entrare in ogni piccolo dettaglio di ogni caratteristica presa 
in considerazione (altrimenti sarebbe stato un libro 
e non un manuale). Se non avete questa
familiarità con la materia, in ogni caso, potete dare uno sguardo in
<ref id="references">, per trovare dove reperire informazioni
più dettagliate.



<sect>Argomenti da scrivere 

<p>
<list>

<item>Aumentare le informazioni sulla "reazione agli incidenti", magari
aggiungendo qualche idea tratta dal RedHat Security Guide
<url id="http://www.redhat.com/docs/manuals/linux/RHL-9-Manual/security-guide/ch-response.html"
     name="capitolo sulla reazione agli incidenti">.

<item>
Scrivere in merito agli strumenti di monitoraggio remoto
(per controllare la disponibilità del sistema)
come monit, daemontools e mon. Vedete
<url 
id="http://linux.oreillynet.com/pub/a/linux/2002/05/09/sysadminguide.html">.

<item>
Considerare l'opportunità di scrivere una sezione riguardante la
costruzione di applicazioni di rete basate su Debian (completa di
informazioni su sistema di base, <package>equivs</package> e FAI).

<item>
Controllare se <url id="http://rr.sans.org/linux/hardening.php">
contiene informazioni rilevanti non ancora trattate qui.

<item>
Aggiungere informazioni su come configurare un laptop con
Debian <url id="http://rr.sans.org/linux/debian_laptop.php">.

<item>
Aggiungere informazioni su come installare un firewall usando
Debian GNU/Linux. La sezione riguardante il firewalling è
attualmente orientata verso un singolo sistema (non
proteggendo gli altri...) ed inoltre scrivere di come testare
l'installazione.

<item>
Aggiungere informazioni su come configurare un proxy firewall
con Debian GNU/Linux partendo specificatamente da pacchetti
che forniscono servizi di proxy (come 
<package>xfwp</package>, <package>xproxy</package>,
<package>ftp-proxy</package>, <package>redir</package>,
<package>smtpd</package>, <package>nntp-cache</package>,
<package>dnrd</package>, <package>jftpgw</package>, <package>oops</package>,
<package>pnsd</package>, <package>perdition</package>,
<package>transproxy</package>, <package>tsocks</package>). 
Si dovrebbe puntare al manuale per ogni altra informazione. Si
noti che <package>zorp</package> è ora disponibile come pacchetto Debian ed
<em>è</em> un proxy firewall (consentono anche l'upstream di pacchetti
Debian).


<item>Informazioni sulla configurazione dei servizi con i file-rc.

<item>Controllare tutte le URL di riferimento e
rimuovere/correggere quelle non più disponibili.

<item>Aggiungere informazioni sui sostituti disponibili (in
Debian) per i server comuni, utili per le limitate funzionalità. 
Per esempio:

	<list>
	<item>lpr locale con cups (pacchetto)?
	<item>lrp remoto con lpr
	<item>bind con dnrd/maradns
	<item>apache con dhttpd/thttpd/wn (tux?)
	<item>exim/sendmail con ssmtpd/smtpd/postfix
	<item>squid con tinyproxy
	<item>ftpd con oftpd/vsftp
	<item>...
	</list>

<item>
Maggiori informazioni riguardanti le patch per il kernel
riguardanti la sicurezza in Debian, incluse quelle mostrate
sopra ed informazioni specifiche su come rendere
attive queste patch in un sistema Debian.

<list>
<item>Linux Intrusion Detection (<package>lids-2.2.19</package>)
<item>Linux Trustees (nel pacchetto <package>trustees</package>)
<item><url name="NSA Enhanced Linux" id="http://www.coker.com.au/selinux/">
<item><url name="kernel-patch-2.2.18-openwall"
id="http://packages.debian.org/kernel-patch-2.2.18-openwall">
<item><package>kernel-patch-2.2.19-harden</package>
<item><package>kernel-patch-freeswan, kernel-patch-int</package>
</list>

<item>
Dettagli su come disattivare servizi di rete non necessari (a
parte <prgn>inetd</prgn>), sono trattati in parte nelle procedure di
irrobustimento ma potrebbero essere estesi un po'.

<item>
Informazioni riguardanti la rotazione delle password che è
strettamente collegato alle policy (convenzioni adottate in Debian).

<item>Politica ed educazione degli utenti al riguardo.

<item>Maggior dettagli per i tcpwrapper ed i wrapper in generale?

<item><file>hosts.equiv</file> ed altri importanti buchi di sicurezza.

<item>Informazioni sui server di condivisione dei file come Samba ed NFS?

<item>suidmanager/dpkg-statoverrides.

<item>lpr e lprng.

<item>Disabilitare le "cose" IP di GNOME

<item>
Scrivere su pam_chroot (vedete in
<url id="http://http://lists.debian.org/debian-security/2002/debian-security-200205/msg00011.html">
e la sua utilità per limitare gli utenti. Introdurre
informazioni relative a 
<url id="http://online.securityfocus.com/infocus/1575">.
<package>Pdmenu</package>, per esempio è disponibile in Debian (mentre
flash non lo è).

<item>
Scrivere sui servizi di chrooting, alcune informazioni sono presso:
<url id="http://www.linuxfocus.org/English/January2002/aritcle225.shtml">,
<url id="http://www.networkdweebs.com/chroot.html"> e
<url id="http://www.linuxsecurity.com/feature_stories/feature_story-99.html">

<item>
Scrivere sui programmi per realizzare gabbie chroot. <package>Compartment</package> e
<package>chrootuid</package> sono in attesa per l'ingresso. Anche alcuni altri
(makejail, jailer) potrebbero essere introdotti.

<item>
Aggiungere le informazioni fornite da Karl Hegbloom al
riguardo di Bind 9 in ambiente chrooted, vedete in
<url id="http://people.pdxlinux.org/~karlheg/Secure_Bind9_uHOWTO/Secure_Bind_9_uHOWTO.xhtml">.

<item>
Aggiungere le informazioni fornite da Pedro Zornenon per il chrooting
con Bind 8 solo per i sistemi potato, vedete in 
<url id="http://people.debian.org/~pzn/howto/chroot-bind.sh.txt"> (includere
l'intero script?).

<item>
Maggiori informazioni al riguardo del software per l'analisi dei
log (per esempio logcheck e logcolorise).

<item>
Routing "avanzato" (le politiche di traffico sono connesse con
la sicurezza).

<item>
Limitare l'accesso con <prgn>ssh</prgn> per eseguire solo alcuni comandi.

<item>
Usare dpkg-statoverride.

<item>
Un modo sicuro per condividere un masterizzatore tra gli
utenti.

<item>
Modi sicuri per fornire suoni sulla rete in aggiunta alle
capacità di display di rete (così che i suoni dei client X
siano eseguiti sull'hardware del server X).

<item>Rendere sicuri i web browser.

<item>Impostare ftp su <prgn>ssh</prgn>.

<item>Usare un loopback file system crittografato.

<item>Crittografare l'intero file system.

<item>Strumenti steganografici.

<item>Impostare un PKA per un'organizzazione.

<item>
Utilizzare LDAP per gestire gli utenti. Esiste un HOWTO di
ldap+kerberos per Debian presso www.bayour.com scritto da Turbo
Fredrikson.

<item>
Come rimuovere le informazioni di scarsa utilità nei sistemi
in produzione come /usr/share/doc, /usr/share/man (sì,
sicurezza tramite riservatezza).

<item>
Maggiori informazioni su lcap basate sul file README dei
pacchetti (bene, non ancora, vedete il
<url id="http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=169465"
     name="Bug #169465">)
e dall'articolo da LWN: <url id="http://lwn.net/1999/1202/kernel.php3"
name="Kernel development">.

<item>
Aggiungere l'articolo di Add Colin's su come configurare un ambiente 
in chroot per un sistema Sid completo
(<url id="http://people.debian.org/~walters/chroot.html">)

<item>
Aggiungere informazioni su come attivare più sensori snort in un 
dato sistema (controllare i rapporti sui bachi spediti da snort)

<item>Aggiungere informazioni su come configurare una 
honeypot (<package>honeyd</package>)

</list>

<sect id="changelog">Changelog/History

<sect1>Version 2.95 (may 2003)
<p>Changes by Javier Fernández-Sanguino Peña
<list>
<item>Added a section on how to contact CERT for incident handling
(<url id="#after-compromise">)
<item>More information on setting up a Squid proxy.
</list>

<sect1>Version 2.94 (april 2003)
<p>Changes by Javier Fernández-Sanguino Peña
<list>
<item>Following Maciej Stachura's suggestions I've expanded the section on
limiting users.
<item>Fixed typo spotted by Wolfgang Nolte.
<item>Fixed links with patch contributed by Ruben Leote Mendes.
<item>Added a link to David Wheeler's excellent document on the footnote
about counting security vulnerabilities.
</list>

<sect1>Version 2.93 (march 2003)
<p>Changes made by  Frédéric Schütz.
<list>
<item>rewrote entirely the section of ext2 attributes
(lsattr/chattr)
</list>

<sect1>Version 2.92 (february 2003)
<p>Changes by Javier Fernández-Sanguino Peña and
Frédéric Schütz.
<list>
<item>Merge section 9.3 ("useful kernel patches") into section 4.13 ("Adding
   kernel patches"), and added some content.
<item>Added a few more TODOs
<item>Added information on how to manually check for updates and also about
cron-apt. That way Tiger is not perceived as the only way to do automatic
update checks.
<item>Slightly rewrite of the section on executing a security updates due
to Jean-Marc Ranger comments.
<item>Added a note on Debian's installation (which will suggest the user
to execute a security update right after installation)
</list>

<sect1>Version 2.91 (january/february 2003)
<p>Changes by Javier Fernández-Sanguino Peña (me).
<list>
<item>Added a patch contributed by Frédéric Schütz.
<item>Added a few more references on capabilities thanks to Frédéric.
<item>Slight changes in the bind section adding a reference to BIND's 9
online documentation and proper references in the first area (Hi Pedro!)
<item>Fixed the changelog date - new year :-)
<item>Added a reference to Colin's articles for the TODOs.
<item>Removed reference to old ssh+chroot patches.
<item>More patches from Carlo Perassi.
<item>Typo fixes (recursive in Bind is recursion), pointed out by
Maik Holtkamp.
</list>

<sect1>Version 2.91 (january 2002)
<p>Changes by Javier Fernández-Sanguino Peña (me).
<list>
<item>Added a patch contributed by Frederic Schutz.
<item>Added a few more references on capabilities thanks to Frederic.
</list>

<sect1>Version 2.9 (december 2002)
<p>Changes by Javier Fernández-Sanguino Peña (me).
<list>
<item>Reorganised the information on chroot (merged two sections, it didn't make much sense to have them separated)
<item>Added the notes on chrooting Apache provided by Alexandre Raitti.
<item>Applied patches contributed by Guillermo Jover.
</list>

<sect1>Version 2.8 (november 2002)
<p>Changes by Javier Fernández-Sanguino Peña (me).
<list>
<item>Applied patches from Carlo Perassi, fixes include: re-wrapping the
lines, url fixes, and fixed some FIXMEs
<item>Updated the contents of the Debian security team FAQ.
<item>Added a link to the Debian security team FAQ and the Debian Developer's
reference, the duplicated sections might (just might) be removed in the future.
<item>Fixed the hand-made auditing section with comments from Michal Zielinski.
<item>Added links to wordlists (contributed by Carlo Perassi)
<item>Fixed some typos (still many around).
<item>Fixed TDP links as suggested by John Summerfield.
</list>

<sect1>Version 2.7 (october 2002)
<p>Changes by Javier Fernández-Sanguino Peña (me).  Note: I still
have a lot of pending changes in my mailbox (which is currently
about 5 Mbs in size).
<list>
<item>Some typo fixes contributed by Tuyen Dinh, Bartek Golenko and 
Daniel K. Gebhart.
<item>Note regarding /dev/kmem rootkits contributed by Laurent Bonnaud 
<item>Fixed typos and FIXMEs contributed by Carlo Perassi.
</list>

<sect1>Version 2.6 (september 2002)
<p>Changes by Chris Tillman, tillman@voicetrak.com. 
<list>
<item>Changed around to improve grammar/spelling.
<item>s/host.deny/hosts.deny/ (1 place)
<item>Applied Larry Holish's patch (quite big, fixes a lot of FIXMEs)
</list>

<sect1>Version 2.5 (september 2002)
<p>Changes by Javier Fernández-Sanguino Peña (me). 
<list>
<item>Fixed minor typos submitted by Thiemo Nagel.
<item>Added a footnote suggested by Thiemo Nagel.
<item>Fixed an URL link.
</list>

<sect1>Version 2.5 (august 2002)

<p>Changes by Javier Fernández-Sanguino Peña (me). There were many
things waiting on my inbox (as far back as February) to be included,
so I'm going to tag this the <em>back from honeymoon</em> release :)

<list>

<item>Applied a patch contributed by Philipe Gaspar regarding the
Squid which also kills a FIXME.

<item>Yet another FAQ item regarding service banners taken from the
debian-security mailing list (thread "Telnet information" started 26th
July 2002).

<item>Added a note regarding use of CVE cross references in the
<em>How much time does the Debian security team...</em> FAQ item.


<item>Added a new section regarding ARP attacks contributed by Arnaud
"Arhuman" Assad.

<item>New FAQ item regarding dmesg and console login by the kernel. 

<item>Small tidbits of information to the signature-checking issues in
packages (it seems to not have gotten past beta release).

<item>New FAQ item regarding vulnerability assessment tools false
positives.

<item>Added new sections to the chapter that contains information on
package signatures and reorganised it as a new <em>Debian Security
Infrastructure</em> chapter.

<item>New FAQ item regarding Debian vs. other Linux distributions.

<item>New section on mail user agents with GPG/PGP functionality in the
security tools chapter.

<item>Clarified how to enable MD5 passwords in woody, added a pointer
to PAM as well as a note regarding the max definition in PAM.

<item>Added a new appendix on how to create chroot environments (after
fiddling a bit with makejail and fixing, as well, some of its bugs),
integrated duplicate information in all the appendix. 

<item>Added some more information regarding <PRGN>SSH</PRGN> chrooting and its
impact on secure file transfers.  Some information has been retrieved
from the debian-security mailing list (June 2002 thread: <em>secure
file transfers</em>).

<item>New sections on how to do automatic updates on Debian systems as
well as the caveats of using testing or unstable regarding security updates.

<item>New section regarding keeping up to date with security patches
in the <em>Before compromise</em> section as well as a new section
about the debian-security-announce mailing list.

<item>Added information on how to automatically generate strong passwords.

<item>New section regarding login of idle users.

<item>Reorganised the securing mail server section based on the
<em>Secure/hardened/minimal Debian (or "Why is the base system the way
it is?")</em> thread on the debian-security mailing list (May 2002).

<item>Reorganised the section on kernel network parameters, with
information provided in the debian-security mailing list (May 2002,
<em>syn flood attacked?</em> thread) and added a new FAQ item as well.

<item>New section on how to check users passwords and which packages
to install for this.

<item>New section on PPTP encryption with Microsoft clients discussed
in the debian-security mailing list (April 2002).

<item>Added a new section describing what problems are there when binding any 
given service to a specific IP address, this information was written based on 
the bugtraq mailing list in the thread: <em>Linux kernel 2.4 "weak end host" 
issue (previously discussed on debian-security as "arp problem")</em> (started 
on May 9th 2002 by Felix von Leitner).

<item>Added information on <prgn>ssh</prgn> protocol version 2.

<item>Added two subsections related to Apache secure configuration
(the things specific to Debian, that is).

<item>Added a new FAQ related to raw sockets, one related to /root, an
item related to users' groups and another one related to log and
configuration files permissions.

<item>Added a pointer to a bug in libpam-cracklib that might still be
open... (need to check)

<item>Added more information regarding forensics analysis (pending more 
information on packet inspection tools such as <prgn>tcpflow</prgn>).

<item>Changed the "what should I do regarding compromise" into a bullet
list and included some more stuff.

<item>Added some information on how to set up the Xscreensaver to lock
the screen automatically after the configured timeout.

<item>Added a note related to the utilities you should not install in
the system. Included a note regarding Perl and why it cannot be
easily removed in Debian. The idea came after reading Intersect's
documents regarding Linux hardening.

<item>Added information on lvm and journalling file systems, ext3
recommended. The information there might be too generic, however. 

<item>Added a link to the online text version (check).

<item>Added some more stuff to the information on firewalling the
local system, triggered by a comment made by Hubert Chan in the mailing list.

<item>Added more information on PAM limits and pointers to Kurt
Seifried's documents (related to a post by him to bugtraq on April 4th
2002 answering a person that had ``discovered'' a vulnerability in
Debian GNU/Linux related to resource starvation).

<item>As suggested by Julián Muñoz, provided more information on the
default Debian umask and what a user can access if he has been given a
shell in the system (scary, huh?)

<item>Included a note in the BIOS password section due to a comment
from Andreas Wohlfeld.

<item>Included patches provided by Alfred E. Heggestad fixing many of
the typos still present in the document.

<item>Added a pointer to the changelog in the Credits section since
most people who contribute are listed here (and not there).

<item>Added a few more notes to the chattr section and a new section
after installation talking about system snapshots. Both ideas were
contributed by Kurt Pomeroy.

<item>Added a new section after installation just to remind users to
change the boot-up sequence.

<item>Added some more TODO items provided by Korn Andras.

<item>Added a pointer to the NIST's guidelines on how to secure DNS
provided by Daniel Quinlan.

<item>Added a small paragraph regarding Debian's SSL certificates
infrastructure.

<item>Added Daniel Quinlan's suggestions regarding <prgn>ssh</prgn> 
authentication and exim's relay configuration.

<item>Added more information regarding securing bind including changes
suggested by Daniel Quinlan and an appendix with a script to make some of the
changes commented on in that section.

<item>Added a pointer to another item regarding Bind chrooting (needs to be 
merged).

<item>Added a one liner contributed by Cristian Ionescu-Idbohrn to
retrieve packages with tcpwrappers support.

<item>Added a little bit more info on Debian's default PAM setup.

<item>Included a FAQ question about using PAM to provide services without
shell accounts.

<item>Moved two FAQ items to another section and added a new FAQ
regarding attack detection (and compromised systems).

<item>Included information on how to set up a bridge firewall
(including a sample Appendix). Thanks go to Francois Bayar who sent
this to me in March.

<item>Added a FAQ regarding the syslogd's <em>MARK</em>
<em>heartbeat</em> from a question answered by Noah Meyerhans and
Alain Tesio in December 2001.

<item>Included information on buffer overflow protection as well as
some information on kernel patches.

<item>Added more information (and reorganised) the firewall
section. Updated the information regarding the iptables package and
the firewall generators available.

<item>Reorganized the information regarding log checking, moved
logcheck information from host intrusion detection to that section.

<item>Added some information on how to prepare a static package for
bind for chrooting (untested).

<item>Added a FAQ item regarding some specific servers/services 
(could be expanded with some of the
recommendations from the debian-security list).

<item>Added some information on RPC services (and when it's necessary).

<item>Added some more information on capabilities (and what lcap does). 
Is there any good documentation on this? I haven't found any documentation on 
my 2.4 kernel.

<item>Fixed some typos.

</list>

<sect1>Version 2.4
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Rewritten part of the BIOS section.
</list>

<sect1>Version 2.3
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Wrapped most file locations with the file tag.
<item>Fixed typo noticed by Edi Stojicevi.
<item>Slightly changed the remote audit tools section.
<item>Added some todo items.
<item>Added more information regarding printers and cups config file
(taken from a thread on debian-security).
<item>Added a patch submitted by Jesus Climent regarding access of
valid system users to Proftpd when configured as anonymous server.
<item>Small change on partition schemes for the special case of mail
servers.
<item>Added Hacking Linux Exposed to the books section.
<item>Fixed directory typo noticed by Eduardo Pérez Ureta.
<item>Fixed /etc/ssh typo in checklist noticed by Edi Stojicevi.
</list>
<sect1>Version 2.3
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Fixed location of dpkg conffile.
<item>Remove Alexander from contact information.
<item>Added alternate mail address.
<item>Fixed Alexander mail address (even if commented out).
<item>Fixed location of release keys (thanks to Pedro Zorzenon for pointing 
this out).
</list>
<sect1>Version 2.2
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Fixed typos, thanks to Jamin W. Collins.
<item>Added a reference to apt-extracttemplate manpage
(documents the APT::ExtractTemplate config).
<item>Added section about restricted SSH. Information based on that
posted by  Mark Janssen, Christian G. Warden and Emmanuel Lacour on
the debian-security mailing list.
<item>Added information on anti-virus software.
<item>Added a FAQ: su logs due to the cron running as root.
</list>
<sect1>Version 2.1
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Changed FIXME from lshell thanks to Oohara Yuuma.
<item>Added package to sXid and removed comment since it *is* available.
<item>Fixed a number of typos discovered by Oohara Yuuma.
<item>ACID is now available in Debian (in the acidlab package)
 thanks to Oohara Yuuma for noticing.
<item>Fixed LinuxSecurity links (thanks to Dave Wreski for telling).
</list>
<sect1>Version 2.0
<p>Changes by Javier Fernández-Sanguino Peña. I wanted to 
change to 2.0 when all the FIXMEs were, er, fixed but I ran out
of 1.9X numbers :(
<list>
<item>Converted the HOWTO into a Manual (now I can properly say RTFM)

<item>Added more information regarding tcp wrappers and Debian (now
many services are compiled with support for them so it's no longer
an <prgn>inetd</prgn> issue).

<item>Clarified the information on disabling services to make it more
consistent (rpc info still referred to update-rc.d)

<item>Added small note on lprng.

<item>Added some more info on compromised servers (still very rough)

<item>Fixed typos reported by Mark Bucciarelli.

<item>Added some more steps in password recovery to cover the cases
when the admin has set paranoid-mode=on.

<item>Added some information to set paranoid-mode=on when login in
console.

<item>New paragraph to introduce service configuration.

<item>Reorganised the <em>After installation</em> section so it is
more broken up into several issues and it's easier to read.

<item>Wrote information on how to set up firewalls with the standard
Debian 3.0 setup (iptables package).

<item>Small paragraph explaining why installing connected to the
Internet is not a good idea and how to avoid this using Debian tools.

<item>Small paragraph on timely patching referencing to IEEE paper.

<item>Appendix on how to set up a Debian snort box, based on what Vladimir
sent to the debian-security mailing list (September 3rd 2001)

<item>Information on how logcheck is set up in Debian and how it can be
used to set up HIDS.

<item>Information on user accounting and profile analysis.

<item>Included apt.conf configuration for read-only /usr copied from Olaf
Meeuwissen's post to the debian-security mailing list

<item>New section on VPN with some pointers and the packages available
in Debian (needs content on how to set up the VPNs and Debian-specific
issues), based on Jaroslaw Tabor's and Samuli Suonpaa's post to
debian-security.

<item>Small note regarding some programs to automatically build chroot jails

<item>New FAQ item regarding identd based on a discussion in the
debian-security mailing list (February 2002, started by Johannes Weiss).

<item>New FAQ item regarding <prgn>inetd</prgn> based on a discussion in the
debian-security mailing list (February 2002).

<item>Introduced note on rcconf in the "disabling services" section.

<item>Varied the approach regarding LKM, thanks to Philipe Gaspar 

<item>Added pointers to CERT documents and Counterpane resources
</list>

<sect1>Version 1.99
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Added a new FAQ item regarding time to fix security vulnerabilities.
<item>Reorganised FAQ sections.
<item>Started writing a section regarding firewalling in Debian GNU/Linux
(could be broadened a bit)
<item>Fixed typos sent by Matt Kraai
<item>Fixed DNS information
<item>Added information on whisker and nbtscan to the auditing section.
<item>Fixed some wrong URLs
</list>
<sect1>Version 1.98
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Added a new section regarding auditing using Debian GNU/Linux.
<item>Added info regarding finger daemon taken from the security mailing list.
</list>
<sect1>Version 1.97
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Fixed link for Linux Trustees
<item>Fixed typos (patches from Oohara Yuuma and Pedro Zorzenon)
</list>

<sect1>Version 1.96
<p>Changes by Javier Fernández-Sanguino Peña.
<list>

<item>Reorganized service installation and removal and added some new notes.

<item>Added some notes regarding using integrity checkers as intrusion
detection tools.

<item>Added a chapter regarding package signatures.

</list>

<sect1>Version 1.95
<p>Changes by Javier Fernández-Sanguino Peña.
<list>

<item>Added notes regarding Squid security sent by Philipe Gaspar.

<item>Fixed rootkit links thanks to Philipe Gaspar.

</list>

<sect1>Version 1.94
<p>Changes by Javier Fernández-Sanguino Peña.
<list>

<item>Added some notes regarding Apache and Lpr/lpng.

<item>Added some information regarding noexec and read-only partitions.

<item>Rewrote how users can help in Debian security issues (FAQ item).
</list>

<sect1>Version 1.93
<p>Changes by Javier Fernández-Sanguino Peña.
<list>

<item>Fixed location of mail program.

<item>Added some new items to the FAQ.
</list>

<sect1>Version 1.92
<p>Changes by Javier Fernández-Sanguino Peña.
<list>

<item>Added a small section on how Debian handles security

<item>Clarified MD5 passwords (thanks to `rocky')

<item>Added some more information regarding harden-X from Stephen van Egmond

<item>Added some new items to the FAQ

</list>

<sect1>Version 1.91
<p>Changes by Javier Fernández-Sanguino Peña.
<list>

<item>Added some forensics information sent by Yotam Rubin.

<item>Added information on how to build a honeynet using Debian GNU/Linux.

<item>Added some more TODOS.

<item>Fixed more typos (thanks Yotam!)

</list>

<sect1>Version 1.9
<p>Changes by Javier Fernández-Sanguino Peña.
<list>

<item>Added patch to fix misspellings and some new information (contributed
by Yotam Rubin)

<item>Added references to other online (and offline) documentation both in a 
section (see <ref id="references">) by itself and inline in some sections.

<item>Added some information on configuring Bind options to restrict
access to the DNS server.

<item>Added information on how to automatically harden a Debian system
(regarding the harden package and bastille).

<item>Removed some done TODOs and added some new ones.

</list>

<sect1>Version 1.8
<p>Changes by Javier Fernández-Sanguino Peña.
<list>

<item>Added the default user/group list provided by Joey Hess to the
debian-security mailing list.

<item>Added information on LKM root-kits (<ref id="LKM">)
 contributed by Philipe Gaspar.

<item>Added information on Proftp contributed by Emmanuel Lacour. 

<item>Recovered the checklist Appendix from Era Eriksson.

<item>Added some new TODO items and removed other fixed ones.

<item>Manually included Era's patches since they were not all included in 
the previous version.

</list>
<sect1>Version 1.7
<p>Changes by Era Eriksson.
<list>
<item>Typo fixes and wording changes
</list>
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Minor changes to tags in order to keep on removing the tt tags
and substitute prgn/package tags for them.
</list>

<sect1>Version 1.6 
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Added pointer to document as published in the DDP (should
supersede the original in the near future) 
<item>Started a mini-FAQ
(should be expanded) with some questions recovered from my mailbox.
<item>Added general information to consider while securing.
<item>Added a paragraph regarding local (incoming) mail delivery.
<item>Added some pointers to more information.  
<item>Added information regarding the printing service.  
<item>Added a security hardening checklist.  
<item>Reorganized NIS and RPC information.
<item>Added some notes taken while reading this document on my new
Visor :) 
<item>Fixed some badly formatted lines.  
<item>Fixed some typos.  
<item>Added a Genius/Paranoia idea contributed by Gaby
Schilders.
</list>
<sect1>Version 1.5 

<p>Changes by Josip Rodin and Javier Fernández-Sanguino Peña.

<list>
<item>Added paragraphs related to BIND and some FIXMEs.  <!-- Removed
this because I found no evidence for it in the diffs. // era Rewrote
style in order to make it more formal.  -->
</list>
<sect1>Version 1.4
    <p>
    <list>
    <item>Small setuid check paragraph <item>Various minor cleanups
    <item>Found out how to use <tt>sgml2txt -f</tt> for the txt
    version</item>
    </list>
<sect1>Version 1.3
    <p>
    <list>
    <item>Added a security update after installation paragraph
    <item>Added a proftpd paragraph 
    <item>This time really wrote something about XDM, sorry for last time
    </list>
<sect1>Version 1.2
    <p>
    <list>
    <item>Lots of grammar corrections by James Treacy, new XDM
    paragraph
    </list>
<sect1>Version 1.1
    <p>
    <list>
    <item>Typo fixes, miscellaneous additions
    </list>
<sect1>Version 1.0
    <p>
    <list>
    <item>Initial release
    </list>



<sect>Crediti e ringraziamenti!



<p>
<list>
<item>Alexander Reelsen ha scritto il documento originale.



<item>
Javier Fernández-Sanguino ha aggiunto maggiori informazioni
al documento originale.

<item>
Robert van der Meulen ha fornito i paragrafi su quota e molte
altre ottime idee.

<item>
Ethan Benson ha corretto il paragrafo su PAM ed ha avuto alcune
buone idee.

<item>
Dariusz Puchalak ha contribuito con informazioni in diversi
capitoli.

<item>
Gaby Schilders ha contribuito con una simpatica idea su
Genius/Paranoia.

<item>
Era Eriksson ha raffinato il linguaggio in un gran numero di
sezioni ed ha contribuito all'appendice checklist.

<item>
Philipe Gaspar ha scritto le informazioni su LKM.

<item>
Yotam Rubin ha contribuito correggendo molti errori di
battitura ed anche fornendo le informazioni riguardanti le
versioni di bind e le password md5.

<item>
Tutte le persone che hanno fornito suggerimenti per
miglioramenti che (eventualmente) sono state incluse qui
(vedete in <ref id="changelog">).

<item>
(Alexander) Tutte le persone che mi hanno incoraggiato a
scrivere questo HOWTO (che successivamente si è trasformato in
un manuale).

<item>L'intero progetto Debian.

</list>



<chapt>Prima di iniziare


<sect>A cosa vi serve questo sistema?

<p>
Proteggere Debian non è molto diverso dal proteggere qualsiasi altro sistema;
per farlo correttamente, bisogna prima decidere che cosa ci si intenda fare, 
dopo di che, se si vuole un sistema sicuro, dovrete considerare la 
necessità di occuparsi dei compiti descritti a seguito.

<p>
Vi accorgerete che questo manuale è scritto partendo dalla fine, cioè
leggerete alcune informazioni sui compiti da svolgere prima, durante e dopo 
l'installazione del vostro sistema Debian. Tali compiti possono essere 
definiti come:

<list>

<item>
Decidere i servizi necessari e fare in modo che il sistema esegua
soltanto quelli. Questo include il disattivare/disinstallare 
servizi superflui e aggiungere filtri come i firewall o i 
tcpwrappers.

<item>Limitare gli utenti e i permessi nel vostro sistema.

<item>Irrobustire i servizi forniti in modo tale che, in caso di un loro
malfunzionamento, l'impatto sul sistema sia ridotto al minimo. 

<item>Utilizzare gli strumenti atti a rilevare l'uso non autorizzato in 
modo da poter prendere le opportune contromisure.

</list>

<sect id="references">Conoscere i problemi generali di sicurezza

<p>
Questo manuale  (per lo più) non  entra nei dettagli  sul perché alcune
richieste siano considerate a  rischio di sicurezza. Tuttavia potreste
desiderare  acquisire   una  migliore  preparazione   sulla  sicurezza
generale in  UNIX e  (specifica) in Linux.   Dedicate un po'  di tempo
alla  lettura  di documenti  riguardanti  la  sicurezza, per  prendere
decisioni informate  di fronte a scelte diverse.   Debian GNU/Linux si
basa sul kernel Linux, quindi  vi si applicano molte delle informazioni 
disponibili su
Linux,  anche di altre  distribuzioni e  sulla sicurezza  in generale
degli UNIX (anche se sono differenti gli strumenti usati o i programmi
disponibili).

<p>Alcuni documenti utili sono:

<list>

<item>Il <url name="Linux Security HOWTO (Come proteggere Linux)"
              id="http://www.tldp.org/HOWTO/Security-HOWTO/"> 
(disponibile presso 
<url id="http://www.linuxsecurity.com/docs/LDP/Security-HOWTO.html" 
     name="LinuxSecurity"> è una delle migliori guide concernenti in generale
la sicurezza su Linux.

<item>
Il <url name="Security Quick-Start HOWTO for Linux 
              (Iniziare subito a proteggere Linux )" 
        id="http://www.tldp.org/HOWTO/Security-Quickstart-HOWTO/">
è anche un ottimo punto di partenza per utenti alle prime armi 
(sia per Linux, sia riguardo la sicurezza).

<item>
Il <url id="http://seifried.org/lasg/" name="Linux Security
Administrator's Guide (Guida alla sicurezza in Linux per 
  l'Amministratore)"> (fornito in Debian con il pacchetto 
<package>lasg</package> ) è una guida completa che tocca tutte le 
esigenze relative alla sicurezza in Linux, da quella del kernel ai 
VPN. N.B.: non viene aggiornata dal 2001, ma alcune informazioni 
sono ancora rilevanti.

<footnote>
Ad un certo punto è stato sostituito da <url id="http://seifried.org/lskb" name="Linux Security Knowledge Base (Nozioni essenziali di sicurezza in Linux)">. 
Anche questa documentazione è fornita in Debian mediante il pacchetto 
<package>lskb</package>. Ora è ritornato nuovamente a chiamarsi <em>Lasg</em>.
</footnote>

<item>
Kurt Seifried's <url
id="http://seifried.org/security/os/linux/20020324-securing-linux-step-by-step.html"
name="Securing Linux Step by Step (Proteggere Linux passo dopo passo)">.

<item>
In <url name="Securing and Optimizing Linux: RedHat Edition 
                    (Proteggere e ottimizzare Linux: Ed. RedHat)"
id="http://www.tldp.org/links/p_books.html#securing_linux"> 
è un documento simile a questo manuale ma riguardante RedHat; alcune 
esigenze non sono specifiche a quella distribuzione e si applicano 
anche a Debian.

<item>
IntersectAlliance ha pubblicato alcuni documenti, reperibili 
<url id="http://www.intersectalliance.com/projects/index.html" 
     name="sul suo sito">, utilizzabili come schede informative 
su come rinforzare i server Linux (e i loro servizi).

<item>
Per gli amministratori di rete, 
<url name="Securing your Domain HOWTO (Come proteggere la vostra rete)"
 id="http://www.linuxsecurity.com/docs/LDP/Securing-Domain-HOWTO/">
è una buona guida per costruire una rete sicura.

<item>
Se volete provare i programmi che state per utilizzare (o se volete 
  elaborarne dei nuovi), dovreste leggere 
<url name="Secure Programs HOWTO (Guida alla sicurezza dei programmi)"
     id="http://www.tldp.org/HOWTO/Secure-Programs-HOWTO/">, 
che include illustrazioni e brani parlati dell'autore, 
David Wheeler, la cui stesura originale è disponibile 
all'indirizzo <url id="http://www.dwheeler.com/secure-programs/">.

<item>
Se pensate di installare delle applicazioni di firewall, dovreste 
leggere 
<url name="Firewall HOWTO (Guida ai Firewall)" 
     id="http://www.tldp.org/HOWTO/Firewall-HOWTO.html"> 
e <url name="IPCHAINS HOWTO (Guida ad IPCHAINS)"
id="http://www.tldp.org/HOWTO/IPCHAINS-HOWTO.html"> 
(per kernel precedenti i 2.4).

<item>
Infine, una buona carta da tenere a portata di mano è la 
<url name="Linux Security ReferenceCard (Manuale di 
           riferimento per la sicurezza in Linux)"
     id="http://www.linuxsecurity.com/docs/QuickRefCard.pdf">.

</list>

<p>
In ogni caso, in molti HOWTO del 
<url name="The Linux Documentation Project (Progetto di documentazione Linux)" 
     id="http://www.tldp.org/">, ci sono maggiori informazioni 
sui servizi spiegati qui (NFS, NIS, SMB ...). Alcuni di questi documenti 
illustrano un dato servizio sotto l'aspetto della sicurezza, perciò
assicuratevi di darci un'occhiata.

<p>
I documenti HOWTO del Linux Documentation Project sono disponibili in 
Debian GNU/Linux tramite l'installazione di <package>doc-linux-text</package> 
(in formato testo) o di <package>doc-linux-html</package> (in formato html).
Dopo l'installazione i documenti saranno disponibili rispettivamente in
<file>/usr/share/doc/HOWTO/en-txt</file> e nelle directory 
<file>/usr/share/doc/HOWTO/en-html</file>.

<p>Altri libri suggeriti su Linux:


<list>

<item>
Maximum Linux Security (Il massimo della sicurezza in Linux): la guida di 
un hacker per proteggere i vostri server e le vostre reti Linux. Anonimo. 
Tascabile - 829 pagine. Sams Publishing.  ISBN: 0672313413.  Luglio 1999.

<item>
Linux Security (Sicurezza in Linux), di John S.  Flowers. New Riders; 
ISBN: 0735700354.  marzo 1999.

<item>
<url id="http://www.linux.org/books/ISBN_0072127732.html" 
name="Hacking Linux Exposed (Come esaminare Linux in profondità)">, di
Brian Hatch. McGraw-Hill Higher Education.  ISBN 0072127732.  aprile 2001.

</list>

<p>
Altri libri (che possono riferirsi a esigenze generali su UNIX e sulla 
sicurezza, non specifiche per Linux):

<list>

<item>
<url id="http://www.ora.com/catalog/puis/noframes.html"
        name="Practical Unix and Internet Security (2nd Edition) (Manuale 
              pratico di Unix e sicurezza in internet - seconda edizione)">
Garfinkel, Simpson, and Spafford, Gene; O'Reilly Associates;
        ISBN 0-56592-148-8; 1004pp; 1996.

<item>
Firewalls and Internet Security (Firewall e sicurezza internet), Cheswick, 
William R. e Bellovin, Steven M.; Addison-Wesley; 1994; 
ISBN 0-201-63357-4; 320pp.

</list>

<p>Alcuni siti web utili per mantenersi aggiornati sulla sicurezza:

<list>

<item>
<url name="NIST Security Guidelines (Linee guida di sicurezza NIST)"
id="http://csrc.nist.gov/fasp/index.html">.

<item>
<url name="Security Focus (Obiettivo sulla sicurezza)" 
     id="http://www.securityfocus.com">
Il server che ospita Bugtraq, database e lista delle vulnerabilità,  
fornisce informazioni sulla sicurezza in generale, notizie e segnalazioni.

<item>
<url name="Linux Security (Sicurezza in Linux)"
	id="http://www.linuxsecurity.com/">. Informazioni generali 
sulla sicurezza in Linux (strumenti, notizie...). &Egrave; utilissima 
la pagina principale della <url name="documentazione"
id="http://www.linuxsecurity.com/resources/documentation-1.html">.

<item>
<url name="Linux firewall and security site (Sito per firewall e sicurezza in Linux)" 
     id="http://www.linux-firewall-tools.com/linux/">.
Informazioni generali sui firewall in Linux e sui loro strumenti di 
controllo e amministrazione.

</list>



<sect>Come gestisce la sicurezza Debian?


<p>
Poiché avete già una vista d'insieme generale della sicurezza in    
Debian GNU/Linux, dovreste prendere nota di come Debian affronta i diversi 
problemi per fornire un sistema completo e sicuro
sotto tutti i punti di vista:

<list>

<item>
I problemi di Debian sono gestiti alla luce del sole, anche 
quelli legati alla sicurezza. I problemi legati alla Sicurezza
sono discussi pubblicamente sulle mailing list Debian appositamente dedicate. 
Gli avvisi di sicurezza di Debian sono 
inviati a mailing list aperte a tutti (sia interne che esterne) e
sono pubblicate su di un server pubblico. Come afferma il 
<url name="Contratto Sociale Debian" 
     id="http://www.debian.org/social_contract">:

<p>
<em>Noi non nasconderemo i problemi</em></p><p><em>
Manterremo il nostro intero database dei rapporti sui bachi sempre
aperto alla consultazione. I rapporti che gli utenti ci 
comunicheranno on-line saranno immediatamente visibili
agli altri.</em></p>

<item>
Debian segue i problemi di sicurezza con grande attenzione. I gruppi dedicati
alla sicurezza controllano molte fonti legate alla sicurezza, le più 
importanti sono 
<url name="Bugtraq" id="http://www.securityfocus.com/cgi-bin/vulns.pl">, 
nella ricerca per i pacchetti con problemi di sicurezza che 
potrebbero essere inclusi in Debian.

<item>
Gli aggiornamenti di sicurezza sono la prima priorità. Quando
sorge  un problema di sicurezza in un pacchetto Debian, 
l'aggiornamento di sicurezza è preparato quanto più velocemente
possibile e distribuito per i nostri rilasci stabili e instabili,
incluse tutte le architetture.

<item>
Le informazioni riguardanti la sicurezza sono centralizzate in
un'unico punto, <url id="http://security.debian.org/">.

<item>
Debian prova sempre a migliorare la sicurezza complessiva della
distribuzione all'avvio di ogni nuovo progetto, come il meccanismo
di verifica automatica della firma dei pacchetti.

<item>
Debian fornisce un certo numero di utili strumenti relativi alla 
sicurezza per l'amministrazione e il monitoraggio del sistema.
Gli sviluppatori tentano di integrare nel miglior modo possibile questi 
strumenti 
con la distribuzione, al fine di renderli uno strumento più efficace per
applicare le politiche di sicurezza locali. Gli strumenti includono:
verificatori d'integrità, strumenti di verifica, strumenti 
d'irrobustimento, strumenti per i firewall, strumenti per 
l'individuazione delle intrusioni, ecc.

<item>
I manutentori dei pacchetti sono avvertiti dei problemi di sicurezza.
Ciò porta a molte installazioni di servizi "sicuri in maniera predefinita", 
cosa 
che può comportare, talvolta, alcuni limiti al loro normale uso. 
Comunque Debian tenta di bilanciare la sicurezza con la facilità 
d'amministrazione, i sistemi non sono installati disattivati, per 
esempio, come nella famiglia di distribuzioni di BSD. In ogni caso,
alcuni problemi particolari di sicurezza, come i programmi con il 
<tt>setuid</tt> attivo, sono parte della 
<url id="http://www.debian.org/doc/debian-policy/" name="Politica Debian">.


</list>

<p>
Questo documento, comunque, prova a realizzare una migliore 
distribuzione, ragionevolmente sicura, pubblicando le informazioni
specifiche sulla sicurezza in Debian, che completano gli 
altri documenti sulla sicurezza delle informazioni relative
agli strumenti usati da Debian o comunque dallo stesso sistema 
operativo (vedete in <ref id="references">).





<chapt>Prima e durante l'installazione

<sect id="bios-passwd">Scegliere una password per il BIOS

<p>
Prima d'installare qualsiasi sistema operativo sul vostro computer, è 
preferibile inserire una password al BIOS.  Dopo l'installazione, non
appena attiverete l'avvio dall'hard disk è preferibile 
impostare la sequenza d'avvio da BIOS disabilitando l'avvio 
da floppy, da cdrom e dalle altre periferiche che non dovrebbero 
avviare il computer.  Altrimenti ad un cracker basterebbe solo avere
l'accesso fisico al computer ed un disco di boot per accedere 
al sistema.

<p>
Disabilitare l'avvio se non viene inserita una password è ancora meglio.
Questo può essere molto efficace se avete un server, visto che
non viene riavviato frequentemente.
Il  lato negativo di questa precauzione è che il riavvio della macchina 
richiede l'intervento umano e può essere problematico se la 
macchina non è facilmente accessibile.

<p>
Nota: molti BIOS hanno una master password (o password universale), 
che può essere facilmente rinvenuta, senza contare che 
inoltre esistono delle applicazioni che sono in grado di recuperare la 
password del BIOS rapidamente.
Corollario: si deduce facilmente  che non dipende, principalmente, da 
queste precauzioni la sicurezza dell'accesso al sistema.




<sect>Partizionare il sistema



<sect1>Scegliere uno schema di partizionamento intelligente


<p>
Scegliere uno schema di partizionamento intelligente dipenderà da come 
sarà usata la macchina.
&Egrave; buona regola creare delle partizioni sufficientemente grandi e 
prestare attenzione ai seguenti fattori:

<list>

<item>
Ogni albero delle directory nel quale un'utente ha il permesso di 
scrittura come ad esempio <file>/home</file> e <file>/tmp</file>, 
deve stare  in una partizione separata.
Questo riduce il rischio di un'attacco DoS 
di riempimento del mount point "/" che può bloccare il sistema
(Nota: questo non è rigorosamente vero, ci sono sempre degli 
spazi riservati a root nei quali gli utenti normali non hanno 
diritto di accesso e quindi non possono riempirli).
<item>
Ogni directory di dimensione variabile es. <file>/var</file> 
(specialmente <file>/var/log</file>) deve stare su una partizione 
separata. Attenzione, su un sistema Debian, si deve creare la 
directory  <file>/var</file> leggermente più
grande di altri sistemi, perché i pacchetti scaricati (nella cache di 
apt) sono conservati in <file>/var/cache/apt/archives</file>.
<item>
Tutte le directory dove si vuole installare del software che non 
appartenga alla distribuzione deve stare in partizioni separate. 
Secondo File Hierarchy Standard (Gerarchia Standard dei File) queste
directory sono <file>/opt</file> oppure <file>/usr/local</file>. 
Se queste directory stanno su partizioni separate, non saranno 
cancellate se si reinstalla di nuovo Debian. 
<item>
Dal punto di vista della sicurezza è importante cercare di mettere i 
dati statici in partizioni proprie, montate in sola lettura. Meglio 
ancora se questi dati vengono messi su supporti di sola lettura.
Vedete più avanti in questo capitolo per maggiori dettagli.


</list>

<p>
Nel caso in cui si gestisca un mail server è importante avere una partizione 
separata per la directory spool della mail.
Gli utenti  remoti (sia consapevolmente che inconsapevolmente) possono 
riempire la directory mail spool (<file>/var/mail</file> o 
<file>/var/spool/mail</file>). Se 
la directory spool è in una partizione separata, questa eventualità
non bloccherà il sistema . Altrimenti, se la directory spool è sulla 
stessa partizione di <file>/var</file>, il sistema avrà  
gravi problemi quali: non 
potrete creare i file di log, non potrete installare pacchetti 
aggiuntivi e dei programmi (se usano la directory 
<file>/var/run</file>) avranno problemi a partire o saranno rallentati.

<p>
Inoltre, per le partizioni per le quali non si è sicuri dello spazio che 
occorre, è preferibile installare Logical 
Volume Manager (<package>lvm-common</package>  
e i pacchetti binari per il vostro kernel, questi possono essere  
<package>lvm10</package>, <package>lvm6</package>, oppure 
<package>lvm5</package>). Usando <tt>lvm</tt> si possono creare gruppi 
di volumi che possono occupare più volumi fisici multipli.



<sect2>Selezionare il file system appropriato


<p>
Durante il partizionamento del sistema si deve anche decidere
quale file system usare. L'installazione di Debian prevede, come 
file system predefinito per le partizioni Linux l'<tt>ext2</tt>.
Tuttavia, nei seguenti
casi, si raccomanda di passare ad un file system journalling,
come <tt>ext3</tt>, <tt>reiserfs</tt>, <tt>jfs</tt> o <tt>xfs</tt>, 
per ridurre al minimo i problemi derivanti da un crash di sistema
nei seguenti casi:



<list>

<item>
Per i computer portatili, in tutti i file system installati.
In questo modo se le  batterie si esaurissero inaspettatamente o se il
sistema si bloccasse per una questione relativa all'hardware (come nel caso 
della configurazione di X, che è piuttosto comune) la perdita di dati
durante un riavvio hardware sarebbe meno probabile.
<item>
Per i sistemi di produzione che registrano grandi quantità di
dati, come i server di posta, i server ftp, i file system di rete ecc.,
si raccomanda un file system journalling sulle partizioni interessate. 
In questo modo, in caso di
crash del sistema, il server impiegherà meno tempo a riavviarsi
e controllare i file system e la perdita di dati sarà meno probabile.

</list>

<p>
Lasciando da parte le discussioni sulle prestazioni dei file
system journalling (visto che talvolta possono trasformarsi in una
guerre di religione), è generalmente meglio usare il file system
<tt>ext3</tt>. 
Il motivo è che questo è compatibile all'indietro con <tt>ext2</tt>,
così se si dovessero presentare problemi con il journalling, è
possibile disabilitarlo e avere comunque un file system funzionante.
Inoltre, in caso si debba ripristinare il sistema con un dischetto di
avvio (o CDROM) non serve un kernel modificato. Se il kernel è un 2.4 il
supporto per <tt>ext3</tt> è già  disponibile, se il kernel è un 2.2, pur
perdendo le caratteristiche del journalling sarete in grado di
avviare il file system. Nel caso steste usando altri file system
journalling potreste non essere in grado di ripristinare, a
meno di non avere un kernel 2.4 con i moduli necessari compilati. Se avete
un dischetto di salvataggio con kernel 2.2 potrebbe essere ancora più 
difficile accedere a <tt>reiserfs</tt> o <tt>xfs</tt>.

<p>
In ogni caso, l'integrità dei dati potrebbe essere meglio
garantita da <tt>ext3</tt> visto che esegue un file-data journalling mentre gli
altri eseguono soltanto il meta-data journalling, vedete in
<url id="http://lwn.net/2001/0802/a/ext3-modes.php3">.



<sect>Non collegarsi ad Internet finché non si è pronti


<p>
Il sistema non dovrebbe essere immediatamente connesso ad
internet durante l'installazione. Questo potrebbe suonare sciocco, ma
l'installazione di rete è un metodo comune. Poiché il sistema,
installandosi, attiva immediatamente dei servizi, se è connesso ad
internet ed i servizi non sono opportunamente configurati, 
sarà esposto a possibili attacchi.

<p>
Si noti inoltre che alcuni servizi potrebbero avere problemi di
sicurezza non ancora corretti nei pacchetti usati per l'installazione.
Questo accade di solito quando si esegue l'installazione con media
vecchi (come i CD-ROM). In questo caso, il sistema potrebbe addirittura
essere compromesso prima che si finisca l'installazione!

<p>
Poiché l'installazione e l'aggiornamento di Debian possono essere
effettuati via internet, si potrebbe pensare che usare questa
caratteristica sia una buona idea. Se il sistema sarà direttamente
connesso a Internet (e non sarà protetto da firewall o NAT), è
preferibile installare senza essere connessi a internet, usando un
mirror locale dei pacchetti sia per i sorgenti dei pacchetti
Debian sia per gli aggiornamenti di sicurezza. Un mirror dei
pacchetti per fornire gli archivi al sistema può essere preparato
usando un altro sistema connesso ad internet con strumenti Debian specifici 
(se è un sistema Debian) come <package>apt-move</package> 
o <package>apt-proxy</package>, o
altri comuni strumenti per il mirroring. Se non è possibile fare
questo, potete attivare regole per il firewall che limitino
l'accesso al sistema durante l'aggiornamento
(vedete in <ref id="fw-security-update">).


<sect>Assegnare una password a root


<p>
Assegnare una buona password a root è il primo requisito
fondamentale per avere un sistema sicuro. Vedete  
<manref section="1" name="passwd"> per alcuni
suggerimenti su come creare una buona password. A questo scopo si
può anche usare un programma per la generazione automatica di password
(vedete in <ref id="user-pwgen">).

<p>FIXME: Aggiungere riferimenti a risorse su buone
password.




<sect>Attivare shadow password e MD5 password



<p>
Alla fine dell'installazione verrà chiesto se abilitare le shadow password.
Rispondere di sì alla domanda e le password saranno conservate in 
<file>/etc/shadow</file>.
Solo l'utente root e il gruppo shadow possono accedere in lettura 
a questo file,
così che nessun altro possa prendere una copia di questo file e poter lanciare 
un password cracker. Potete decidere di scegliere tra password shadow e 
password normali in qualsiasi momento usando <tt>shadowconfig</tt>.

<p>
Per saperne di più sulle password shadow vedete il documento
<url name="Shadow Password" id="http://www.tldp.org/HOWTO/Shadow-Password-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/Shadow-Password.txt.gz</file>).

<p>
Inoltre verrà chiesto durante l'installazione se volete utilizzare le password
MD5. Di solito è una buona idea perché permette di usare password più lunghe 
di 8 caratteri ed ha una migliore cifratura.  
Se usate correttamente, può rendere difficile trovare password 
di sistema con un attacco a forza bruta.
Le password MD5 sono l'opzione predefinita quando si installa il pacchetto 
<package>password</package> più recente. &Egrave; possibile modificarle in 
qualsiasi momento con <prgn>dpkg-reconfigure -plow passwd</prgn>.
Potete riconoscere le password md5 nel file 
<file>/etc/shadow</file> dal prefisso $1$.

<p>
Di conseguenza, vengono modificati tutti i file in <file>/etc/pam.d</file> 
sostituendo la linea delle password ed includendo md5:

<example>
      password required pam_unix.so md5 nullok obscure min=6 max=16
</example>

<p>
Se <tt>max</tt> non è impostato oltre 8 la modifica non avrà 
alcuna utilità. Per maggiori informazioni leggete <ref id="auth-pam">.


<p>
Note: la configurazione predefinita in Debian, anche attivando 
le password MD5, non modifica la precedente impostazione del 
valore <tt>max</tt>.



<sect>Lanciare i servizi strettamente necessari



<p>
I servizi sono programmi come i server ftp e i server web. Poiché restano 
<em>in ascolto</em> (listening) per connessioni in ingresso che richiedono 
il servizio, i computer all'esterno possono collegarvisi. 
A volte i servizi sono vulnerabili (es: possono essere compromessi da un 
determinato attacco) e possono rappresentare un rischio per la sicurezza.

<p>
Non dovreste installare servizi che non sono necessari sulla 
vostra macchina. Ogni servizio installato può introdurre nuovi, 
magari non evidenti (o conosciuti) buchi di sicurezza sul vostro computer.

<p>
Come forse già saprete, quando si installa un determinato servizio, l'opzione 
predefinita è che sia attivo. In un'installazione Debian predefinita, senza 
servizi installati, l'insieme dei servizi attivi è piuttosto basso 
e questo è ancora più vero per quanto riguarda i servizi di rete. 
L'insieme dei servizi attivi in
Debian 2.1 non era rigido come in Debian 2.2 (alcuni servizi 
<prgn>inetd</prgn> erano
attivati di default) e in Debian 2.2 l'rpc portmapper è attivato sin
dall'installazione. Rpc è installato di default perché è necessario per molti
servizi, ad esempio per usare NFS. Può comunque essere facilmente
rimosso, consultate <ref id="disableserv"> per sapere come disabilitarlo.

<p>
Quando installate un nuovo servizio di rete (demone) in 
Debian GNU/Linux può essere attivato in 2 modi: per mezzo 
del superdemone <prgn>inetd</prgn> (una linea sarà
aggiunta a <file>/etc/inetd.conf</file>) o per mezzo di 
un programma standalone che si collega all'interfaccia di 
rete. I programmi standalone sono controllati tramite i 
file <file>/etc/init.d</file>, che sono chiamati 
al momento del boot dal meccanismo SysV (o uno alternativo) 
usando un link simbolico in <file>/etc/rc?.d/*</file> 
(per maggiori informazioni su come farlo leggete
<file>/usr/share/doc/sysvinit/README.runlevels.gz</file>).

<p>
Se volete manteneree alcuni servizi ma usarli raramente, utilizza il comando
update, es: <prgn>update-inetd</prgn> e <prgn>update-rc.d</prgn> per 
rimuoverli dal processo di avvio.



<sect1 id="disableserv">Disabilitare i servizi attivi in modalità demone




<p>
Disabilitare i servizi in modalità demone è piuttosto semplice. Ci sono diversi
metodi:


<list>

<item>
Rimuovere i link da <file>/etc/rc${runlevel}.d/</file> o rinominare i
link (in modo che non comincino con "S").
<item>
Rinominare il file contenente lo script. (per esempio da
<file>/etc/init.d/_service_name_</file> a 
<file>/etc/init.d/OFF._service_name_</file>).
<item>
Togliere il permesso di esecuzione al file
<file>/etc/init.d/_service_name_</file>.
<item>
Modificare lo script <file>/etc/init.d/_service_name_</file> in modo 
che si interrompa immediatamente.

</list>

<p>
Potete rimuovere i link da <file>/etc/rc${runlevel}.d/</file> manualmente
o usando <tt>update-rc.d</tt> (vedete <manref section="8" 
name="update-rc.d">). Per esempio potete disabilitare un servizio nei runlevel 
multiutente con:

<example>
  update-rc.d stop XX 2 3 4 5 .
</example>

<p>
Bisogna notare che se <em>non</em> stiamo utilizzando 
<package>file-rc</package>,
<tt>update-rc.d -f _service_ remove</tt> non funzionerà correttamente,
perché <em>tutti</em> i link vengono rimossi ma dopo una reinstallazione 
o un upgrade del pacchetto i link vengono ricreati (probabilmente
non è quello che si desidera). Chi pensa che questo comportamento
non sia intuitivo non ha torto (vedete il 
<url id="http://bugs.debian.org/67095" name="Bug 67095">). 
Dalla manpage:

<example>
  Se  esistono   già  dei  file   /etc/rcrunlevel.d/[SK]??nome  allora
  update-rc.d non fa nulla. In questo modo l'amministratore di sistema
  può risistemare i link, sempre  che abbiate lasciato almeno un link,
  senza dover sovrascrivere la loro configurazione.
</example>

<p>
Se si usa <package>file-rc</package> tutte le informazioni che riguardano 
l'avvio
dei servizi sono gestite da un file di configurazione comune e sono
conservate anche se i pacchetti vengono disinstallati dal sistema.

<p>
&Egrave; possibile usare la TUI (Text User Interface, cioè interfaccia
utente in modalità testuale) fornita da <package>rcconf</package> 
per apportare queste modifiche facilmente (<package>rcconf</package> 
funziona sia per <package>file-rc</package> 
che per i normali runlevel System V).

<p>
Altri metodi (non raccomandati) per disabilitare i servizi sono:
<tt>chmod 644 /etc/init.d/daemon</tt> (ma così si ottiene un messaggio di
errore al boot) oppure modificare lo script <file>/etc/init.d/daemon</file>
(aggiungendo una linea con <prgn>exit 0</prgn> all'inizio o commentando la
parte <tt>start-stop-daemon</tt> nello script). Dal momento che i file 
contenuti in <file>init.d</file> sono file di configurazione, non vengono
sovrascritti durante gli upgrade.

<p>
Sfortunatamente, al contrario di altri sistemi operativi (UNIX), 
in Debian i servizi non possono essere disabilitati modificando i
file in <file>/etc/default/_servicename_</file>.

<p>
FIXME: Aggiungere informazioni su come gestire i demoni con
file-rc.




<sect1 id="inetd">Disabilitare i servizi gestiti da <prgn>inetd</prgn>



<p>
Sarebbe bene arrestare tutti servizi non necessari nel proprio
sistema, come <prgn>echo, chargen, discard, daytime, time, talk, ntalk</prgn>
e gli r-services (<prgn>rsh, rlogin</prgn> e <prgn>rcp</prgn>) 
che sono considerati MOLTO insicuri (meglio usare <prgn>ssh</prgn> al loro 
posto). Dopo aver disabilitato questi servizi è bene controllare se davvero è
necessario il demone <prgn>inetd</prgn>. Molta gente preferisce usare dei
demoni piuttosto che lanciare i servizi attraverso <prgn>inetd</prgn>.
Attraverso <prgn>inetd</prgn> esiste la possibilità di subire attacchi del 
tipo Denial of Service, che aumentano enormemente il carico di 
lavoro della macchina. Se si vogliono comunque utilizzare dei servizi
gestiti tramite <prgn>inetd</prgn> meglio passare ad un demone inet più 
configurabile, come <prgn>xinetd</prgn> o <prgn>rlinetd</prgn>.

<p>
Potete disabilitare dei servizi modificando direttamente
<file>/etc/inetd.conf</file>, ma Debian fornisce un'alternativa migliore:
<tt>update-inetd</tt> (che commenta i servizi in modo che possano essere
facilmente riattivati). Potete rimuovere il demone <prgn>telnet</prgn>
eseguendo questo comando per cambiare il file di configurazione e
riavviando il demone (in questo caso il servizio <prgn>telnet</prgn> viene
disabilitato):

<example>
  /usr/sbin/update-inetd --disable telnet
</example>
<!-- # /etc/init.d/inetd restart Not needed since the manpage says update-inetd
sends a SIGHUP, commented out as suggested by Dariusz Puchalak -->

<p>
Se davvero desiderate servizi in ascolto, ma non volete che stiano
in ascolto su tutti gli indirizzi IP del proprio host, probabilmente
vorreste utilizzare una funzione non documentata di <prgn>inetd</prgn>.
O intendete utilizzare un demone <prgn>inetd</prgn> alternativo, come 
<prgn>xinetd</prgn>. 
     



<sect>Installare il software strettamente necessario




<p>
Debian include <em>molto software</em>, per esempio Debian 3.0 <em>woody</em> 
include quasi 6 CD-ROM di software e migliaia di pacchetti. 
Con così tanto software, anche se l'installazione del sistema base è 
ridotta 

<footnote>
Per esempio, in Debian woody si aggira attorno ai 40Mb, provate questo:

<example>
  $ size=0
  $ for i in `grep -A 1 -B 1 "^Section: base" /var/lib/dpkg/available |
  grep -A 2 "^Priority: required" |grep "^Installed-Size" |cut -d : -f 2
  `; do size=$(($size+$i)); done
  $ echo $size
  34234
</example>

</footnote>
potreste essere tentati di installare più software di 
quello necessario alle vostre esigenze.

<p>
Poiché sappiamo già a cosa servirà il sistema (o no?), dovreste installare 
solo il software che è realmente necessario per farlo funzionare. Qualsiasi 
tool non necessario potrebbe essere usato da un utente che vuole compromettere 
il sistema o da un intruso esterno che ha ottenuto l'accesso ad una shell (o 
l'esecuzione di codice da remoto attraverso un servizio che lo consenta).

<p>
La presenza, ad esempio, di utility di sviluppo (un compilatore per il 
linguaggio C) o di linguaggi interpretati (come <prgn>perl</prgn> 
- ma vedete sotto -, <prgn>python</prgn>, <prgn>tcl</prgn>...) 
potrebbero aiutare colui che attacca a compromettere il
sistema, in particolare: 

<list>

<item>
Permettendogli di acquisire privilegi. &Egrave; più facile, 
ad esempio, mandare in esecuzione exploits locali nel sistema 
se ci sono un debugger ed un compilatore pronti a compilarli ed a testarli!
<item>
Fornendo strumenti che potrebbero aiutare l'intruso ad usare il sistema 
compromesso come <em>base d'attacco</em> verso altri sistemi

<footnote>
Molte intrusioni sono fatte solo per ottenere l'accesso alle risorse
per compiere attività illegali, (attacchi di tipo denial of service, spam, 
imbrogliare server ftp, inquinare dns ) piuttosto 
che ottenere dati confidenziali dai sistemi compromessi.

</footnote>

</list>

<p>
Ovviamente, un intruso con accesso locale ad una shell può scaricare gli
strumenti che gli servono ed eseguirli, ma anche la shell stessa può
essere usata per scrivere programmi complessi. Rimuovere il software
non necessario non aiuterà a <em>prevenire</em> il problema, ma renderà un po'
più difficile l'azione dell'intruso (ed alcuni potrebbero rinunciare
se si trovano in questa situazione, cercando un bersaglio più facile).
Quindi, lasciando installati detti strumenti su un sistema in
produzione, che può essere usato per attaccare sistemi da remoto (si
veda <ref id="vuln-asses">) è lecito aspettarsi che un intruso 
li utilizzi, se disponibili.




<sect1>Removing Perl




<p>
Rimuovere Perl

<p>
Dovreste tener conto che rimuovere <prgn>perl</prgn> potrebbe non essere troppo
facile (in realtà potrebbe essere anche abbastanza difficile) in un
sistema Debian poiché è usato da molte utility di sistema. Inoltre,
il pacchetto <package>perl-base</package> è <em>Priority: required</em> 
(il che dice tutto).
La rimozione è ancora fattibile, ma non potrete eseguire nessuna
applicazione <prgn>perl</prgn> presente nel sistema. 
Dovrete inoltre ingannare il
sistema di gestione dei pacchetti per fargli credere che il pacchetto
<package>perl-base</package> sia installato anche se non lo è.

<footnote>
&Egrave; possibile creare (su un altro sistema) un finto pacchetto 
con <package>equivs</package>

</footnote>

<p>
Quali sono le utility che usano <prgn>perl</prgn>? Potete scoprirlo da soli:

<example>
  $ for i in /bin/* /sbin/* /usr/bin/* /usr/sbin/*; do [ -f $i ] && {
  type=`file $i | grep -il perl`; [ -n "$type" ] && echo $i; }; done
</example>

<p>
Incluse le seguenti utility contenute in pacchetti con priorità 
<em>required</em> o <em>important</em>:


<list>
<item>
<file>/usr/bin/chkdupexe</file> del pacchetto <package>util-linux</package>.
<item>
<file>/usr/bin/replay</file> del pacchetto
<package>bsdutils</package>.
<item>
<file>/usr/sbin/cleanup-info</file> del pacchetto
<package>dpkg</package>.
<item>
<file>/usr/sbin/dpkg-divert</file> del pacchetto
<package>dpkg</package>.
<item>
<file>/usr/sbin/dpkg-statoverride</file> del pacchetto
<package>dpkg</package>.
<item>
<file>/usr/sbin/install-info</file> del pacchetto
<package>dpkg</package>.
<item>
<file>/usr/sbin/update-alternatives</file> del pacchetto
<package>dpkg</package>.
<item>
<file>/usr/sbin/update-rc.d</file> del pacchetto
<package>sysvinit</package>.
<item>
<file>/usr/bin/grog</file> del pacchetto
<package>groff-base</package>.
<item>
<file>/usr/sbin/adduser</file> del pacchetto
<package>adduser</package>.
<item>
<file>/usr/sbin/debconf-show</file> del pacchetto
<package>debconf</package>.
<item>
<file>/usr/sbin/deluser</file> del pacchetto
<package>adduser</package>.
<item>
<file>/usr/sbin/dpkg-preconfigure</file> del pacchetto
<package>debconf</package>.
<item>
<file>/usr/sbin/dpkg-reconfigure</file> del pacchetto
<package>debconf</package>.
<item>
<file>/usr/sbin/exigrep</file> del pacchetto
<package>exim</package>.
<item>
<file>/usr/sbin/eximconfig</file> del pacchetto
<package>exim</package>.
<item>
<file>/usr/sbin/eximstats</file> del pacchetto
<package>exim</package>.
<item>
<file>/usr/sbin/exim-upgrade-to-r3</file> del pacchetto
<package>exim</package>.
<item>
<file>/usr/sbin/exiqsumm</file> del pacchetto
<package>exim</package>.
<item>
<file>/usr/sbin/keytab-lilo</file> del pacchetto
<package>lilo</package>.
<item>
<file>/usr/sbin/liloconfig</file> del pacchetto
<package>lilo</package>.
<item>
<file>/usr/sbin/lilo_find_mbr</file> del pacchetto
<package>lilo</package>.
<item>
<file>/usr/sbin/syslogd-listfiles</file> del pacchetto
<package>sysklogd</package>.
<item>
<file>/usr/sbin/syslog-facility</file> del pacchetto
<package>sysklogd</package>.
<item>
<file>/usr/sbin/update-inetd</file> del pacchetto
<package>netbase</package>.

</list>

<p>
Quindi, senza Perl e a meno che non riscriviate queste utility come 
script di shell, probabilmente non potrete gestire alcun pacchetto
(quindi neanche aggiornare il sistema, il che <em>non è una buona cosa</em>). 

<p>
Se si è determinati a rimuovere Perl dal sistema base di Debian e si ha 
tempo libero, mandate rapporti sui bachi ai pacchetti sopracitati 
includendo (in forma di patch) sostituti alle utility scritti come script 
di shell. 




<sect>Leggere la mailing list debian security




<p>
Non sarebbe sbagliato dare uno sguardo alla mailing-list 
debian-security-announce, dove vengono annunciate migliorie ai pacchetti
rilasciati da parte del Debian security team, o in
<url id="mailto:debian-security@lists.debian.org">, dove potrete 
partecipare alle discussioni riguardanti la sicurezza in Debian.

<p>
Per ricevere gli avvisi degli aggiornamenti di sicurezza, inviate un'e-mail a 
<url name="debian-security-announce-request@lists.debian.org"
id="mailto:debian-security-announce-request@lists.debian.org">, 
scrivendo la parola "subscribe" nella linea dedicata all'oggetto dell'e-mail.
Potete altresì iscrivervi a questa lista moderata via web dalla pagina:
<url name="http://www.debian.org/MailingLists/subscribe"
id="http://www.debian.org/MailingLists/subscribe">.

<p>
Questa mailing list ha un basso volume e iscrivendosi si è immediatamente
allertati sugli aggiornamenti di sicurezza riguardanti Debian.
Questo permette di scaricare tempestivamente i nuovi pacchetti con le
soluzioni ai bachi di sicurezza, ciò è veramente importante per mantenere
un sistema sicuro. Leggete <ref id="security-update"> 
per trovare dettagli su questo argomento.






<chapt>Dopo l'installazione






<p>
Dopo aver installato il sistema, bisogna renderlo sicuro; molti esempi
descritti in questo capitolo puntano ad ottenere tale risultato.
Questo dipende dal vostro setup ma per la prevenzione dagli accessi 
siete invitati a leggere i seguenti paragrafi:
<ref id="bios-boot">,<ref id="lilo-passwd">,<ref
id="kernel-root-prompt">, <ref id="floppy-boot">, <ref
id="restrict-console-login">, e <ref id="restrict-reboots">.

<p>
Dopo essersi connessi a qualsiasi rete, specialmente se pubblica, effettuate
un aggiornamento di sicurezza (vedete <ref id="security-update">).
Opzionalmente potete fare un backup del vostro sistema (in merito guardate 
<ref id="snapshot">).



<sect id="bios-boot">Modificare il BIOS (ancora)



<p>
Rammentate la <ref id="bios-passwd">? Bene,
fatelo ora, se non avete bisogno che l'avvio della macchina avvenga da un
supporto removibile modificate il BIOS della stessa per renderla avviabile 
<em>solamente</em> dall'hard disk. 
Ponete attenzione a non perdere la password del
BIOS, altrimenti in caso di fallimento non potrete entrare nel BIOS e 
cambiare media, ad esempio per avviare da CD-ROM.

<p>
Un altro piccolo accorgimento potrebbe essere quello di cambiare la 
configurazione del
BIOS, permettendo al sistema di partire dall'hard disk e se questo fallisce
provare con un supporto removibile. Questo perché molte 
persone non usano la password per il BIOS ed è quindi facile dimenticarsene.



<sect id="lilo-passwd">Impostazione della password in LILO o GRUB




<p>
Chiunque può molto facilmente loggarsi come root e cambiare la vostra
password digitando 
<tt>&lt;nome-della-vostra-immagine di avvio&gt; init=/bin/sh</tt>
al prompt di boot.
Dopo aver cambiato la password e aver riavviato il sistema, questa persona
ha un accesso illimitato come root e puo impedire l'accesso al sistema.
Con questa procedura, non avrete più l'accesso al sistema come root, perché
non ne conoscete la password.

<p>
Per essere sicuri di evitare di trovarsi in questa situazione dovete 
impostare una password per il
vostro boot loader. Potete scegliere se impostare la password globalmente,
oppure per un'immagine precisa.

<p>
Per LILO occorre modificare il file <file>/etc/lilo.conf</file> 
ed aggiungere una <tt>password</tt> e la linea <tt>restricted</tt> 
come nell'esempio seguente.

<example>
  image=/boot/2.2.14-vmlinuz
     label=Linux
     read-only
     password=hackme
     restricted
</example>

<p>
Fatto questo, bisogna rieseguire lilo. Omettendo la direttiva 
<tt>restricted</tt> lilo vi inviterà nuovamente ad inserire la password,
nonostante abbiate inserito quella giusta.
I permessi predefiniti per il file <file>/etc/lilo.conf</file> 
garantiscono a root i permessi di scrittura e lettura, mentre danno 
solamente il permesso di lettura di <file>lilo.conf</file> al gruppo root.

<p>
Se al posto di LILO usate GRUB, modificate <file>/boot/grub/menu.lst</file> e
aggiungete le seguenti due linee all'inizio (sostituite <tt>hackme</tt>
con la vostra password). Questo previene che si modifichi la configurazione
di avvio.
La direttiva <tt>timeout 3</tt> istruisce <prgn>grub</prgn> ad attendere 
3 secondi prima di avviare il sistema.

<example>
  timeout 3
  password hackme
</example>

<p>
Per conservare l'integrità delle password, si può generare una password
criptata.Il programma <prgn>grub-md5-crypt</prgn> genera una password 
compatibile con l'algoritmo di criptazione di grub (md5). Per specificare
in <prgn>grub</prgn> che si intende usare il sistema di criptazione md5, 
bisogna usare la seguente direttiva:

<example>
  timeout 3
  password --md5 $1$bw0ez$tljnxxKLfMzmnDVaQWgjP0
</example>

<p>
Il parametro --md5, istruisce <prgn>grub</prgn> ad usare il processo di 
autenticazione
md5. L'esempio riporta la versione criptata con md5 della parola hackme.
Usare il metodo di criptazione delle password md5 è preferibile che lasciare 
il testo pienamente leggibile.
Potete trovare altre informazioni sull'uso delle password con 
<prgn>grub</prgn> nel pacchetto <package>grub-doc</package>.




<sect id="kernel-root-prompt">Rimuovere il prompt root nel kernel




<p>
I kernel Linux della versione 2.4 forniscono la possibilità di accedere
ad una shell da superutente durante il boot di sistema subito dopo il
caricamento del file system cramfs. Apparirà un messaggio che permetterà
all'amministratore di accedere ad una shell con privilegi di superutente,
questa può essere usata per caricare manualmente i moduli qualora
il riconoscimento automatico fallisca. 
Questo è il comportamento predefinito per gli
<prgn>initrd</prgn> e per <file>linuxrc</file>. 
Apparirà il seguente messaggio:

<example>
  Press ENTER to obtain a shell (waits 5 seconds)
</example>

<p>
Per rimuovere questo comportamento dovrete modificare
<file>/etc/mkinitrd/mkinitrd.conf</file> e impostare:

<example>
  # DELAY  The  number  of seconds the linuxrc script should wait to
  # allow the user to interrupt it before the system is brought up
  DELAY=0
</example>

<p>
Quindi rigenerare l'immagine del ramdisk. Lo potete fare con:

<example>
  # cd /boot
  # mkinitrd -o initrd.img-2.4.18-k7 /lib/modules/2.4.18-k7
</example>

<p>
Oppure (preferito):

<example>
  # dpkg-reconfigure -plow kernel-image-2.4.x-yz
</example>

<p>
Notate che Debian 3.0 woody consente agli utenti di installare i kernel
2.4 (selezionare <em>flavors</em>) <em>ma</em> il kernel predefinito è 
il 2.2 (per preservare alcune architetture
su cui il 2.4 non è stato portato). Se lo ritenete un bug prima
di segnalarlo considerate il 
<url id="http://bugs.debian.org/145244" name="Bug 145244">.




<sect id="floppy-boot">Disabilitare il boot da floppy




<p>
L' MBR predefinito di Debian prima della versione 2.2 non si comportava
come un normale master boot record e lasciava aperto un metodo per entrare
abusivamente in un sistema:

<list>

<item>
Premete shift durante il boot, apparirà un prompt MBR.

<item>
Quindi premete F e il vostro sistema effettuerà l'avvio da
floppy disk. Questo sistema può essere usato per avere un 
accesso da root nel sistema.

</list>

<p>Questo comportamento può essere modificato digitando:

<example>
  lilo -b /dev/hda
</example>

<p>
Adesso LILO è stato inserito nell' MBR. Un altro modo per eseguire
la modifica è quello di inserire 
<tt>boot=/dev/hda</tt> in <file>lilo.conf</file>.
Esiste anche un' altra soluzione che disabiliterà completamente 
il prompt MBR:

<example>
  install-mbr -i n /dev/hda
</example>

<p>
D'altro canto, questa "backdoor", di cui molta gente non è a conoscenza,
potrebbe salvarvi la pelle nel caso andaste incontro a grossi problemi
di qualsiasi natura sulla vostra installazione.

<p>
FIXME controllare che sia effettivamente vero sulla 2.2 o era la 2.1?
INFO: I dischi di boot di Debian 2.2 NON installano l'MBR ma solo LILO.



<sect id="restrict-console-login">Circoscrivere l'accesso alla console



<p>
Alcune politiche di sicurezza potrebbero forzare l'amministratore ad
autenticarsi nel sistema tramite console con le proprie username e password
e successivamente diventare super utente (tramite 
<prgn>su</prgn> o <prgn>sudo</prgn>).
Questa politica viene implementata in Debian modificando il file
<file>/etc/login.defs</file> oppure <file>/etc/securetty</file> 
se viene utilizzato PAM:

<list>

<item>
<file>login.defs</file>, modificando la variabile CONSOLE che definisce un 
file o una lista di terminali su cui è consentito l'accesso come superutente.
<item>
<file>securetty</file> aggiungendo/rimuovendo i 
terminali su cui sarà consentito l'accesso come root.

</list>

<p>
Quando viene utilizzato PAM, altre modifiche al processo di
autenticazione, comprese restrizioni a livello utente e gruppo durante
orari prestabiliti, possono essere configurate 
in <file>/etc/pam.d/login</file>.
Un' interessante caratteristica è quella di poter disabilitare
l'autenticazione con password nulle. Questa caratteristica può essere
abilitata rimuovendo <em>nullok</em> dalla linea:

<example>
  auth       required   pam_unix.so nullok
</example>



<sect id="restrict-reboots">Circoscrivere la possibilità di 
riavviare da console



<p>
Se il vostro sistema ha una tastiera, chiunque (si, <em>chiunque</em>) può
riavviare il sistema senza neanche fare il login. Questo potrebbe o non
potrebbe essere conforme alla vostra policy di sicurezza. Se volete evitarlo,
dovete controllare se nel file <file>/etc/inittab</file> la linea che 
include <tt>ctrlaltdel</tt>
chiama <prgn>shutdown</prgn> con lo switch <tt>-a</tt> 
(ricordatevi di lanciare <tt>init q</tt> dopo
aver apportato qualsiasi modifica a questo file). 
In Debian è incluso questo switch in maniera predefinita:

<example>
  ca:12345:ctrlaltdel:/sbin/shutdown -t1 -a -r now
</example>

<p>
Ora, per permettere ad <em>alcuni</em> utenti di spengere 
il sistema, come spiega la
pagina man <manref section="8" name="shutdown">, dovete creare il 
file <file>/etc/shutdown.allow</file> e includere
lì i nomi degli utenti che possono fare un reboot. Quando si fa il <em>saluto
delle tre dita</em> (conosciuto anche come <em>ctrl+alt+del</em>) 
il programma controlla
che sia loggato almeno uno degli utenti della lista. Se non ce n'è nemmeno
uno, <prgn>shutdown</prgn> <em>non</em> eseguirà il riavvio.



<sect>Montare le partizioni nel modo giusto



<p>
Quando si monta una partizione ext2 ci sono diverse opzioni 
aggiuntive che si possono applicare all'invocazione di mount 
o all'<file>/etc/fstab</file>. Per esempio, questa è la riga 
del mio fstab per la partizione <file>/tmp</file>:

<example>
  /dev/hda7    /tmp    ext2    defaults,nosuid,noexec,nodev    0    2
</example>

<p>
Potete vedere le differenze nella sezione delle opzioni. 
L'opzione <tt>nosuid</tt> ignora completamente i bit setuid e setgid, 
mentre <tt>noexec</tt> impedisce l'esecuzione di qualsiasi programma 
su quel mount point e <tt>nodev</tt> ignora i device. Sembra fantastico, ma

<list>

<item>
Si applica solo ai filesystem ext2
<item>
Può essere facilmente aggirato

</list>

<p>
l'opzione <tt>noexec</tt> evita l'esecuzione diretta dei file binari, ma viene 
aggirata facilmente:

<example>
  alex@joker:/tmp# mount | grep tmp
  /dev/hda7 on /tmp type ext2 (rw,noexec,nosuid,nodev)
  alex@joker:/tmp# ./date
  bash: ./date: Permission denied
  alex@joker:/tmp# /lib/ld-linux.so.2 ./date
  Sun Dec  3 17:49:23 CET 2000
</example>

<p>
Comunque, molti script-kiddie hanno exploit che tentano di creare ed eseguire 
file in <file>/tmp</file>. Se non ci riescono, cadranno nel trabocchetto. In altri 
termini, un utente non può essere ingannato perché esegua un binario 
trojanizzato in <file>/tmp</file>, ossia 
quando aggiunge <file>/tmp</file> al suo PATH.

<p>
Siete inoltre avvisati, che l'esecuzione di alcuni script dipende 
dal fatto che <file>/tmp</file> sia eseguibile. In particolare, 
questa cosa riguarda alcuni aspetti di Debconf, per maggiori 
informazioni vedete il Bug 
<url id="http://bugs.debian.org/116448" name="116448">.

<p>
Il seguente è un altro esempio. Una nota: <file>/var</file> può 
essere impostata noexec, ma certo software

<footnote>
Tra questi i programmi Smartlist e <package>dpkg</package>, visto 
che gli script di installazione (post, pre) e di eliminazione (post, 
pre) sono in <file>/var/lib/dpkg/</file>
</footnote>

mette i propri eseguibili in <file>/var</file>. Lo stesso 
si applica all'opzione nosuid.

<example>
/dev/sda6       /usr            ext2    defaults,ro,nodev       0       2
/dev/sda12      /usr/share      ext2    defaults,ro,nodev,nosuid        0       2
/dev/sda7       /var            ext2    defaults,nodev,usrquota,grpquota          0       2
/dev/sda8       /tmp            ext2    defaults,nodev,nosuid,noexec,usrquota,grpquota    0       2
/dev/sda9       /var/tmp        ext2    defaults,nodev,nosuid,noexec,usrquota,grpquota    0       2
/dev/sda10      /var/log        ext2    defaults,nodev,nosuid,noexec    0       2
/dev/sda11      /var/account    ext2    defaults,nodev,nosuid,noexec    0       2
/dev/sda13      /home           ext2    rw,nosuid,nodev,exec,auto,nouser,async,usrquota,grpquota                0       2
/dev/fd0        /mnt/fd0        ext2    defaults,users,nodev,nosuid,noexec      0       0
/dev/fd0        /mnt/floppy     vfat    defaults,users,nodev,nosuid,noexec      0       0
/dev/hda        /mnt/cdrom      iso9660 ro,users,nodev,nosuid,noexec            0       0
</example>




<sect1>Impostare <file>/tmp</file> come noexec




<p>
State attenti a impostare <file>/tmp</file> come noexec quando 
volete installare nuovo software,  poiché alcuni programmi 
potrebbero usarla per l'installazione. 
<package>Apt</package> è uno di questi programmi (vedete
<url id="http://bugs.debian.org/116448">) se non è configurata correttamente 
<tt>APT::ExtractTemplates::TempDir</tt> 
(vedete <manref name="apt-extracttemplates" section="1">). 
Potete impostare questa variabile in <file>/etc/apt/apt.conf</file> 
in modo che punti ad un'altra directory 
diversa da <file>/tmp</file> con privilegi di esecuzione.

<!-- This is a duplicate of the example a few paragraphs up -->

<p>
Riguardo a noexec, fate attenzione poiché potrebbe non 
offrire tutta questa sicurezza. 
Per esempio:

<example>
  $ cp /bin/date /tmp
  $ /tmp/date
  (does not execute due to noexec)
  $/lib/ld-linux.so.2 /tmp/date
  (works since date is not executed directly)
</example>



<sect1>Impostare /usr in sola lettura




<p>
Se si imposta <file>/usr</file> in sola lettura non si potrà 
più installare nuovi pacchetti sul proprio sistema Debian GNU/Linux. 
Si dovrà prima rimontarla in lettura-scrittura, installare i pacchetti e poi
rimontarla in sola lettura. L'ultima versione di <package>apt</package> 
(in Debian 3.0 "woody") può essere configurato per eseguire comandi 
prima e dopo l'installazione, così può essere configurato allo scopo.

<p>
Per farlo modificare <file>/etc/apt/apt.conf</file> e aggiungere:  

<example>
  DPkg
  {
      Pre-Invoke  { "mount /usr -o remount,rw" };
      Post-Invoke { "mount /usr -o remount,ro" };
  };
</example>

<p>
Notate che Post-Invoke può fallire con un messaggio d'errore "/usr
busy". Questo succede principalmente quando si stanno usando alcuni
file durante l'update che vengono aggiornati. &Egrave; fastidioso 
ma non è un vero problema. 
Appena si è sicuri che non si stanno usando più questi file
si esegua manualmente il Post-Invoke.



<sect id="security-update">Eseguire un security update



<p>
Non appena nuovi bug di sicurezza vengono scoperti nei pacchetti, i
manutentori Debian e gli autori degli upstream generalmente li
correggono in pochi giorni o addirittura ore. Dopo che il bug è
risolto, un nuovo package è reso disponibile su 
<url name="http://security.debian.org" id="http://security.debian.org">.

<p>
Se state installando una release Debian bisogna tenere a mente che
potrebbero essere usciti nel frattempo dei security updates da quando
si è scoperto che un dato pacchetto è vulnerabile.  Ci potrebbero essere
comunque delle minor release (ce ne sono state sette in Debian 2.2
<em>potato</em>) che includono questi package updates.

<p>
Si deve poi annotare la data in cui i supporti removibili (se li avete
usati) sono stati preparati e controllare il sito di security per
controllare se ci sono stati aggiornamenti. Se ce sono e non potete
scaricare i package dal sito di security su un altro sistema (non sei
ancora connesso a internet?  o si?) prima di connettersi alla rete potreste
pensare (se non siete protetti da un firewall per esempio) di
aggiungere regole al firewall per fare in modo che il sistema si 
possa connettere
solo a security.debian.org e poi eseguire l'aggiornamento.  Una
configurazione di esempio è mostrata 
in <ref id="fw-security-update">.



<p>
<em>Note:</em> a partire da Debian woody 3.0, dopo 
l'installazione si ha l'opportunità di aggiungere al 
sistema aggiornamenti di sicurezza.
Rispondendo "yes" a questa domanda, il sistema d'installazione
provvederà ad aggiungere ai sorgenti dei pacchetti gli
aggiornamenti di sicurezza del codice sorgente e, se disponete
di un collegamento a internet, a scaricare ed installare gli
aggiornamenti realizzati dopo la creazione del cd
d'installazione. Se state aggiornando una precedente versione
di Debian, o avete chiesto al sistema d'installazione di
non farlo, agite come spiegato più avanti.

<p>
Per aggiornare manualmente il sistema, inserite la seguente 
riga nel vostro <file>sources.list</file> e avrete 
l'aggiornamento dal ramo security updates automaticamente, 
ogni volta che aggiornerete il vostro sistema.

<example>
  deb http://security.debian.org/ stable/updates main contrib non-free
</example>

<p>Fatto ciò, per l'aggiornamento potete usare
<package>apt</package> o <package>dselect</package>:
<list>
<item>
Se volete usare <package>apt</package> date, da root, il comando:

<example>
# apt-get update
# apt-get upgrade
</example>

<item>
Se volete usare <package>dselect</package>, prima date il comando 
[U]pdate (aggiorna), quindi [I]nstall (installa) e infine, [C]onfigure
(configura) i pacchetti installati/aggiornati.
</list>

<p>
Se volete, potete aggiungere anche la riga deb-src a
<file>/etc/apt/sources.list</file>. Vedete in
<manref name="apt" section="8"> per ulteriori dettagli.


<p>Note: Dal momento che security.debian.org è ospitato in una località
non-US e non ha un archivio separato non-US, <em>non</em> c'è bisogno di
aggiungere la seguente linea:

<example>
  deb http://security.debian.org/debian-non-US stable/non-US main contrib non-free
</example>



<sect id="debian-sec-announce">Iscrizione alla mailing list 
Debian Security Announce




<p>
Per ricevere informazioni sugli aggiornamenti di sicurezza disponibili
dovreste iscrivervi alla mailing list debian-security-announce per
ricevere i Debian Security Advisories (DSA). Leggete <ref
id="debian-sec-team"> per maggiori informazioni su come lavora la
squadra di Debian security.  Per informazioni su come iscriversi alle
mailing list Debian leggete <url id="http://lists.debian.org">.

<p>
I DSA sono firmati con la chiave del Team di Debian Security che può
essere ottenuta da <url id="http://security.debian.org">.

<p>
Si dovrebbe considerare anche l'iscrizione alla mailing list
debian-security per discussioni generali su problemi di sicurezza nel
sistema operativo Debian.

<p>
FIXME: aggiungere qui la chiave?



<sect>Fornire un accesso sicuro per gli utenti




<sect1 id="auth-pam">Autenticazione degli utenti: PAM



<p>
PAM (Pluggable Authentication Modules) permette agli amministratori di
sistema di scegliere come le applicazioni autenticano gli utenti. Si
noti che PAM non funziona se un'applicazione non è stata compilata con
il supporto per PAM. Molte delle applicazioni fornite con Debian 2.2
hanno questo supporto integrato. Inoltre Debian non ha il supporto PAM
per versioni precedenti alla 2.2.  L'attuale configurazione predefinita per un
qualsiasi servizio abilitato PAM è di emulare l'autenticazione UNIX
(leggete in
<file>/usr/share/doc/libpam0g/Debian-PAM-MiniPolicy.gz</file> per
ulteriori informazioni su come i servizi PAM <em>dovrebbero</em>
funzionare in Debian).

<p>
Ogni applicazione con supporto PAM ha un file di configurazione
in <file>/etc/pam.d/</file> che può essere usato per modificare 
il suo comportamento:

<list>
<item>
Quale programma sottostante è utilizzato per l'autenticazione.
<item>
Quale programma sottostante è utilizzato per le sessioni.
<item>
Come si comportano i controlli delle password.

</list>

<p>
La seguente descrizione è lontana dall'essere completa, per ulteriori
informazioni potete leggere <url
id="http://www.kernel.org/pub/linux/libs/pam/Linux-PAM-html/pam.html"
name="The Linux-PAM System Administrator's Guide"> (sul
<url id="http://www.kernel.org/pub/linux/libs/pam/" 
     name="sito primario della distribuzione PAM">),
questo documento è fornito anche dal pacchetto <package>libpam-doc</package>.

<p>

PAM offre la possibilità di passare attraverso diversi fasi di
autenticazione in una volta sola, senza conoscenze da parte
dell'utente. Si potrebbe autenticare con un database Berkeley e con un
normale file <file>passwd</file> e l'utente riuscirebbe a loggarsi se
autenticato correttamente da entrambi.  Si possono effettuare molte
restrizioni con PAM, così come spalancare le porte del sistema. Perciò
siate prudenti. 
Una tipica linea di configurazione ha un campo di controllo come secondo
elemento. Generalmente dovrebbe essere impostata a <tt>requisite</tt>, in modo
che ritorni un messaggio di login fallita se un modulo fallisce
nell'autenticazione.

<!-- Second in mine (old Debian v2.0 though), check this! (FIXME) (era) -->
<!-- Lots of fields in mine are "required", please elaborate? (FIXME) (era) -->

<p>
La prima cosa che mi piace fare è aggiungere alle applicazioni PAM il 
supporto MD5, poiché ciò protegge da dictionary cracks (le password
possono essere più lunghe se si usa MD5). Le due linee seguenti dovrebbero
essere aggiunte a tutti i file in <file>/etc/pam.d/</file> che forniscono 
un accesso alla macchina, come <tt>login</tt> e <tt>ssh</tt>.

<example>
  # Siate sicuri di aver già installato libpam-cracklib o non si riuscirà a loggarsi
  password   required     pam_cracklib.so retry=3 minlen=12 difok=3
  password   required     pam_unix.so use_authtok nullok md5
</example>

<p>
Ma cosa fanno queste linee? La prima carica il modulo PAM cracklib,
che fornisce un controllo sulla qualità delle password, chiede una
nuova password con una lunghezza minima di 12 caratteri, con una
differenza di almeno 3 caratteri da quella vecchia e permette un
massimo di 3 tentativi.  La seconda linea inserisce il modulo standard
di autenticazione con password MD5 e permette password di lunghezza
nulla. La direttiva <tt>use_authtok</tt> è necessaria per il passaggio
della password dal modulo precedente.  Il pacchetto dipende da una
lista di parole (come <package>wenglish</package>,
<package>wspanish</package>, <package>wbritish</package>...), accertatevi
che sia installata quella appropriata per la lingua desiderata
(altrimenti potrebbe non essere affatto utile).

<footnote>
Questa dipendenza, tuttavia, non è corretta nel pacchetto in Debian 3.0.
Vedete il <url id="http://bugs.debian.org/112965" name="Bug #112965">.

</footnote>

<p>
Per essere sicuri che l'utente root possa solo loggarsi nel sistema
da terminali locali, si dovrebbe aggiungere in <file>/etc/pam.d/login</file> 
la seguente linea:

<example>
  auth     requisite  pam_securetty.so
</example>

<p>
Poi si dovrebbe aggiungere in <file>/etc/security/access.conf</file> i 
terminali dai quali l'utente root può loggarsi nel sistema. 
Ed infine la seguente linea dovrebbe essere aggiunta se si vogliono 
stabilire dei limiti per gli utenti.

<!-- FIXME: This is pam.d/login you're talking about, still? Elaborate? era -->

<example>
  session  required   pam_limits.so
</example>

<p>
Questa linea riduce le risorse di sistema che gli utenti possono usare
(si guardi oltre in <ref id="user-limits">). 
Per esempio, si potrebbe ridurre il numero
di login concorrenti (di un certo gruppo di utenti, o globalmente)
ammesse, il numero di processi, la dimensione della memoria...

<p>
Ora aprite  <file>/etc/pam.d/passwd</file> e cambiate la prima riga. Dovreste
aggiungere l'opzione "md5" per usare le password MD5, cambiare la 
lunghezza minima delle password da 4 a 6 (o più) e stabilire una lunghezza
massima, se lo desiderate. La linea che ne risulta dovrebbe essere simile a:

<example>
  password   required   pam_unix.so nullok obscure min=6 max=11 md5
</example>

<p>
Se si vuole una protezione per il comando su, in modo che solo alcune
persone possano usarlo per diventare root sul sistema, è necessario
aggiungere un nuovo gruppo "wheel" al sistema (questo è il modo più
pulito, poiché nessun file ha permessi relativi a quel gruppo). Aggiungete
root e  gli altri utenti che dovrebbero poter usare il
comando <prgn>su</prgn> a questo gruppo.  Quindi aggiungete la
seguente linea a <file>/etc/pam.d/su</file>:

<example>
  auth        requisite   pam_wheel.so group=wheel debug
</example>

<p>
Questo garantisce che solo le persone del gruppo "wheel" possano usare
<prgn>su</prgn> per diventare root. Gli altri utenti non saranno in grado di 
diventare root. Infatti otterranno un messaggio di errore se cercheranno
di diventarlo.

<p>
Se si vuole che solo certi utenti siano autenticati da un servizio PAM,
ciò è ottenibile abbastanza facilmente usando file contenenti gli utenti
a cui è permesso loggarsi. Immaginate di volere che solo l'utente "ref" 
possa loggarsi tramite <prgn>ssh</prgn>. Allora dovreste inserirlo in 
<file>/etc/sshusers-allowed</file> e scrivere la linea seguente 
in <file>/etc/pam.d/ssh</file>:

<example>
  auth        required    pam_listfile.so item=user sense=allow file=/etc/sshusers-allowed onerr=fail
</example>

<p>
Infine, create <file>/etc/pam.d/other</file> e inserite le seguenti linee:

<example>
  auth     required       pam_securetty.so
  auth     required       pam_unix_auth.so
  auth     required       pam_warn.so
  auth     required       pam_deny.so
  account  required       pam_unix_acct.so
  account  required       pam_warn.so
  account  required       pam_deny.so
  password required       pam_unix_passwd.so
  password required       pam_warn.so
  password required       pam_deny.so
  session  required       pam_unix_session.so
  session  required       pam_warn.so
  session  required       pam_deny.so
</example>

<p>
Queste linee forniranno una buona configurazione di default per
tutte le applicazioni che supportano PAM (l'accesso è negato
per default).




<sect1 id="user-limits">
Limitare le risorse usate: il file <file>limits.conf</file>



<p>
&Egrave; buona norma verificare questo file. Qui si possono 
definire le risorse che un'utente può occupare.
Se si usa PAM, il file <file>/etc/limits.conf</file> è ignorato 
e si dovrà usare invece <file>/etc/security/limits.conf</file>.

<p>
Se non si danno limitazioni alle risorse in uso, <em>ogni</em> utente
con una shell valida sul sistema (oppure anche un qualsiasi intruso che
voglia compromettere il sistema tramite un servizio) può usare tutta la
CPU, la  memoria e lo stack che il sistema può fornire. Il problema
dell'<em>esaurimento delle risorse</em> può essere risolto con l'uso
di PAM.  Notate che esistono dei modi per aumentare i limiti delle
risorse in alcune shell (per esempio, <prgn>bash</prgn> ha
<prgn>ulimit</prgn>, vedete <manref section="1" name="bash">), ma dal
momento che non tutte le shell forniscono gli stessi limiti e visto
che l'utente può cambiare shell (vedete <manref section="1"
name="chsh">) è meglio porre dei limiti nei moduli PAM.

<p>
Per maggiori informazioni:

<list>
<item><url
id="http://www.samag.com/documents/s=1161/sam0009a/0009a.htm"
name="PAM configuration article">.
<item> <url
id="http://seifried.org/security/os/linux/20020324-securing-linux-step-by-step.html"
name="Seifried's Securing Linux Step by Step (Linux sicuro passo passo"> 
sezione <em>Limiting users overview</em>.
<item><url id="http://seifried.org/lasg/users/" name="LASG"> sezione 
<em>Limiting and monitoring users</em>.

</list>

<p>
&Egrave; consigliabile configurare opportunamente il file 
<file>limits.conf</file> come sopra.




<sect1>Procedura di autenticazione degli utenti: 
modificare <file>/etc/login.defs</file>



<p>
Il prossimo passo è modificare la configurazione di base e le azioni dopo 
l'autenticazione degli utenti.

<example>
  FAIL_DELAY          10
</example>

<p>
Questa variabile è preferibile impostarla con un valore alto in modo da
rendere  difficile  l'uso di  un  terminale  per  autenticarsi con  un
attacco a forza bruta. Se una  password viene digitata in modo errato,
il possibile  attaccante (o l'utente) dovranno attendere  10 secondi per
riavere  un nuovo prompt  di autenticazione, questa pausa  può essere
usata  per testare (manualmente) la password. Attenzione, questa
precauzione  è  inutile  se  si  usano altri  programmi  al  posto  di
<prgn>getty</prgn> come ad esempio <prgn>mingetty</prgn>.

<example>
  FAILLOG_ENAB        yes
</example>

Se si abilita questa variabile, la fallita autenticazione sarà riportata 
nei log. Questo è fondamentale per tenere traccia di chiunque provi degli  
attacchi a forza bruta.

<example>
  LOG_UNKFAIL_ENAB    yes
</example>

<p>
Se si imposta la variabile  <var>FAILLOG_ENAB</var> su yes , allora si
dovete impostare su yes anche questa variabile. Questa registrerà username
sconosciuti  se l'autenticazione  fallisce.  In questo caso, assicuratevi
che i  file di log abbiano gli opportuni  permessi (il 640 ad
esempio,  con un  appropriato gruppo  come l'adm) perché  spesso gli
utenti digitano  casualmente la loro parola d'accesso  come username e
quindi è  consigliabile non permettere  ad altri di  consultare questi
file.

<example>
  SYSLOG_SU_ENAB      yes
</example>

<p>
Questo  abiliterà   il  logging  dei   tentativi  <prgn>su</prgn>
(superuser)  di  accedere   al  <file>syslog</file>.  Questione  molto
importante su una macchina seria ma attenzione che può creare dei
problemi con la privacy.

<example>
  SYSLOG_SG_ENAB      yes
</example>

<p>
&Egrave; la stessa di <var>SYSLOG_SU_ENAB</var> ma si 
applica al programma <prgn>sg</prgn>.

<example>
  MD5_CRYPT_ENAB      yes
</example>

<p>
Come detto in precedenza, le password di tipo MD5 riducono notevolmente 
il problema di attacchi da dizionario, poiché si possono usare password 
più lunghe.  Se state usando slink, si leggete la documentazione di 
MD5 prima di abilitare questa opzione. Altrimenti questa sarà 
regolato in PAM.

<example>
  PASS_MAX_LEN        50
</example>

<p>
Se sono attive le password di tipo MD5 nella configurazione PAM, allora 
questa variabile dovrebbe essere impostata con lo stesso valore di cui sopra.



<sect1>Restrizioni ftp: modificare il file <file>/etc/ftpusers</file>



<p>
Il file <file>/etc/ftpusers</file> contiene  la lista degli utenti che
non  sono  autorizzati ad  autenticarsi  all'host  usando il  servizio
ftp. Solo usando  questo metodo potete autorizzare gli  utenti ad accedere
all'ftp (solitamente questo è  sconsigliato poiché  usa le  password in
chiaro).  Se tra i demoni attivi c'è PAM, si può  anche usare questo metodo
per autorizzare o negare agli utenti l'accesso ai servizi.

<p>
FIXME (BUG): Questo è un bug di Debian, di default <em>non</em> include 
negli <file>ftpusers</file> tutti gli utenti amministratori 
(in <package>base-passwd</package>).



<sect1>Utilizzo di su



<p>
Se veramente gli utenti hanno la necessità di diventare super user
sul vostro sistema, ad esempio per installare dei pacchetti o
aggiungere utenti, potete utilizzare il comando <prgn>su</prgn> per
cambiare la vostra identità. Si dovrebbe tentare  di evitare ogni
accesso   come   utente   root    e   utilizzare   al   suo   posto
<prgn>su</prgn>.  Al  momento, la  soluzione  migliore è  rimuovere
<prgn>su</prgn>   e  passare  a   <prgn>sudo</prgn>,  che   ha  più
possibilità di  <prgn>su</prgn>. Ad ogni modo, <prgn>su</prgn> è più 
comune  visto che è utilizzato su numerosi altri Unix.



<sect1>Utilizzo di sudo



<p>
<prgn>sudo</prgn> permette agli utenti di eseguire determinati comandi
sotto l'identità di un altro  utente, perfino come root. Se l'utente é
aggiunto a <file>/etc/sudoers</file> e si autentica correttamente, é
in   grado  di   eseguire   comandi  che   sono   stati  definiti   in
<file>/etc/sudoers</file>.  Violazioni, come una password non corretta
o il tentativo di eseguire  un programma non permesso, sono registrati
e notificati via mail a root.



<sect1>Non permettere accessi per amministrazione remota



<p>
Si dovrebbe modificare <file>/etc/security/access.conf</file> per
impedire il login remoto per l'amministrazione. In questo modo gli
utenti necessitano di usare <prgn>su</prgn> (o <prgn>sudo</prgn>)
cosicché ci sia sempre modo di verificare ogni volta che un utente
locale vuole usare i privilegi di amministratore.

<p>
Si deve aggiungere la seguente riga a <file>/etc/security/access.conf</file>, 
il file di configurazione di default di Debian ha una riga simile
commentata:

<example>
   -:wheel:ALL EXCEPT LOCAL
</example>




<sect1 id="user-restrict">Restrizioni agli utenti per l'accesso




<p>
A volte si potrebbe pensare di avere la necessità di creare utenti
nel proprio sistema locale per fornire un determinato servizio (pop3
mail o ftp). Prima di fare ciò, ricordate prima che 
l'implementazione di PAM in Debian GNU/Linux permette di validare
utenti con un'ampia varietà di servizi di directory esterni (radius,
ldap, ecc.) forniti dai pacchetti libpam.

<p>
Se gli utenti devono essere creati ed è possibile accedere al sistema
da remoto tenete presente che gli utenti potranno effettuare il
login nel sistema. Potete rimediare a questo assegnando agli utenti una
shell vuota (<file>/dev/null</file>) (dovrebbe essere nella lista di
<file>/etc/shells</file>). Se volete permettere agli utenti di
accedere al sistema limitando i loro movimenti, potete utilizzare
<file>/bin/rbash</file>, equivalente ad aggiungere l'opzione
<tt>-r</tt> a <prgn>bash</prgn> (<em>RESTRICTED SHELL</em>, vedete
<manref name="bash" section="1">). Notate che persino con una
shell ristretta, un utente che accede a un programma interattivo (che
potrebbe permettere l'esecuzione di una sotto shell) potrebbe aggirare
i limiti della shell.

<p>
Debian attualmente fornisce nella versione unstable (e dovrebbe essere
incluso nelle prossime versioni stabili) il modulo
<file>pam_chroot</file> (in <package>libpam-chroot</package>). Un'alternativa 
è usare <prgn>chroot</prgn> sul servizio che fornisce il
login remoto (<prgn>ssh</prgn>, <prgn>telnet</prgn>).

<footnote>
<package>Libpam-chroot</package> non è ancora stato testato in maniera
approfondita, funziona per <prgn>login</prgn> ma potrebbe non essere 
semplice configurare un ambiente per altri programmi.

</footnote>

<p>
Se si desidera limitare il <em>quando</em> gli utenti possono accedere il
sistema si dovrà configurare <file>/etc/security/access.conf</file> per i 
propri bisogni.

<p>
Informazioni su come ingabbiare con <prgn>chroot</prgn> gli utenti che 
accedono al sistema attraverso il servizio <prgn>ssh</prgn> è descritto 
in <ref id="chroot-ssh-env">.



<sect1>Verifica manuale degli utenti



<p>
Se siete paranoici potreste voler aggiungere un <file>/etc/profile</file> di
sistema che imposti l'ambiente in modo che gli utenti non possano
rimuovere le capacità di verifica dalla shell (i comandi sono scritti
in <tt>$HISTFILE</tt>). Il file <file>/etc/profile</file> dovrebbe essere 
impostato come segue:

<example>
  HISTFILE=~/.bash_history
  HISTSIZE=100000000000000000
  HISTFILESIZE=10000000000000000
  readonly HISTFILE
  readonly HISTSIZE
  readonly HISTFILESIZE
  export HISTFILE HISTSIZE HISTFILESIZE
</example>

<p>
Perché questo funzioni, l'utente può solo aggiungere informazioni al
<file>.bash_history</file>. Dovete <em>anche</em> impostare l'opzione 
<em>append-only</em> usando il programma <prgn>chattr</prgn> a 
<file>.bash_history</file> per tutti gli utenti.

<footnote>
Senza il flag append-only gli utenti sarebbero in grado di
svuotare il contenuto del file di history eseguendo 
<prgn> >.bash_history</prgn>.

</footnote>.

<p>
Notate che si potrebbe fare ciò per il <file>.profile</file> di ciascun utente.
Ma poi dovreste impostare i permessi correttamente: con le home
directory degli utenti che <em>non</em> appartengano a loro ma abilitare gli
utenti a leggere la configurazione in <file>.profile</file> e scrivere in
<file>.bash_history</file>. Potrebbe essere buona cosa impostare il flag
<em>inmutable</em> 
(sempre usando <prgn>chattr</prgn>) per <file>.profile</file> 
anche se si procede in questo modo.

<p>
Se siete completamente paranoici e volete controllare ogni comando
dell'utente, potete prendere il codice sorgente di <prgn>bash</prgn> e
modificarlo perché registri tutto ciò che l'utente scrive su un altro
file. O avere <package>ttysnoop</package> che costantemente monitora 
ogni nuova tty e scrive l'output in un file. Un altro programma utile è 
<package>snoopy</package> che è
un programma trasparente all'utente che si insinua come una libreria
fornendo un wrapper per le chiamate <var>execve()</var>, ogni comando eseguito 
é registrato con <prgn>syslogd</prgn> usando la direttiva <tt>authpriv</tt>
(solitamente registrato in <file>/var/log/auth.log</file>). 

<p>
Notate che non si può usare il comando <prgn>script</prgn> per questo poiché
non funzionerà come shell (perfino se lo si aggiunge in
<file>/etc/shells</file>).



<sect1>Esame completo degli utenti



<p>
L'esempio precedente è un modo semplice per configurare l'esame degli
utenti ma potrebbe essere di dubbia utilità nei sistemi complessi. Se
è il vostro caso, dovete dare un'occhiata a <package>acct</package>, 
le utility per
l'accounting.  Queste utility loggheranno tutti i comandi impartiti
dagli utenti a spese dello spazio su disco.

<p>
Quando si attiva l'accounting, tutte le informazioni sui processi e
gli utenti sono mantenute sotto <file>/var/account/</file>, più specificamente
in <file>pacct</file>. Il pacchetto di accounting include degli 
strumenti (<prgn>sa</prgn> e <prgn>ac</prgn>) per analizzare questi dati.



<sect1>Uno sguardo ai profili utente



<p>
Se volete <em>vedere</em> cosa facciano solitamente gli utenti, quando si
connettono potete usare il database <file>wtmp</file> che include tutte le
informazioni di login.  Il file può essere processato con diverse
utility, tra cui <prgn>sac</prgn> che può restituire un profilo per ogni utente
che mostra in quale arco di tempo solitamente si connettono.

<p>
Nel caso in cui abbiate attivato l'accounting, potete anche utilizzare
gli strumenti da esso forniti per determinare quando gli utenti
accedono al sistema e cosa eseguano.



<sect1>Impostare delle umask per gli utenti



<p>
In base alla vostra linea di condotta riguardo agli utenti, potreste
voler cambiare il modo in cui gli utenti si scambiano informazioni,
ossia quali siano i permessi predefiniti dei nuovi file creati dagli
utenti. Questo viene fatto impostando una propria <tt>umask</tt> per
ogni utente. Potete cambiare l'impostazione <var>UMASK</var> in
<file>/etc/limits.conf</file>, <file>/etc/profile</file>,
<file>/etc/csh.cshrc</file>, <file>/etc/csh.login</file>,
<file>/etc/zshrc</file> e probabilmente anche altri (a seconda delle
shell che avete installato sul vostro sistema). Di tutti questi,
l'ultimo ad essere caricato ottiene la precedenza. L'ordine è: il
<file>limits.conf</file> del PAM, la configurazione standard di
sistema per la shell utente, la shell utente (i suoi
<file>~/.profile</file>, <file>~/.bash_profile</file>...)

<p>
L'impostazione predefinita di Debian per l'<tt>umask</tt> è <em>022</em> 
che significa
che i file (e le directory) possono essere letti e visitati dai
membri del gruppo dell'utente e da qualsiasi altro utente nel
sistema. Se questo risultasse troppo permissivo per il vostro sistema,
dovrete cambiare le impostazioni dell'umask per tutte le shell (e per il
PAM). Non dimenticatevi di modificare i file sotto <file>/etc/skel/</file> 
poiché saranno questi i nuovi default degli utenti creati con il comando
<prgn>adduser</prgn>.

<p>
Da notare, comunque, che gli utenti possono modificare la loro <tt>umask</tt>
se lo vogliono, rendendola più permissiva o più restrittiva.



<sect1>Porre limiti a ciò a cui gli utenti possono accedere



<p>
FIXME. Spiegare le conseguenze del cambiare i permessi dei
pacchetti quando si aggiornano (ed un admin paranoico dovrebbe mettere in
<prgn>chroot</prgn> i suoi utenti, comunque).  

<P>
Se dovete dare accesso shell
agli utenti, pensateci bene. Un utente, a meno che non sia in un
ambiente pieno di restrizioni (come una prigione <tt>chroot</tt>), può
carpire molte informazioni sul sistema, tra cui:



<list>

<item>
Alcuni file di configurazione in <file>/etc</file>. 
Comunque i permessi di default per file
contenenti informazioni sensibili, in Debian (per esempio file
contenenti password), prevengono l'accesso a informazioni critiche. Per vedere
quali file sono accessibili solo da root basta un 
<tt>find /etc -type f -a -perm 600 -a -uid 0</tt> eseguito da superuser.
<item>
I pacchetti installati, sia guardando il database dei pacchetti in
<file>/usr/share/doc</file> o tirando a indovinare guardando gli 
eseguibili e le librerie.
<item>
Alcuni file di log in <file>/var/log</file>. Notate inoltre che alcuni file di
log sono accessibili solo da root e dal gruppo <tt>adm</tt> (provate un
<tt>find /var/log -type f -a -perm 640</tt>) e alcuni sono perfino
disponibili solo a root (provate un 
<tt>find /var/log -type f -a -perm 600 -a -uid 0</tt>).

</list>

<p>
Cosa può visualizzare un utente nel vostro sistema? Probabilmente un
sacco di cose, provate questo (fate un respiro profondo):

<example>
  find / -type f -a -perm +006 2>/dev/null  
  find / -type d -a -perm +007 2>/dev/null  
</example>

<p>
L'output è la lista dei file che un utente può <em>vedere</em> e le
directory a cui ha accesso.



<sect2 id="limit-user-perm">Limitare l'accesso alle 
informazioni di altri utenti


<p>
Se permettete l'accesso tramite shell da parte degli utenti potrebbe
essere desiderabile limitare quali informazioni di altri utenti possano
vedere. Gli utenti con accesso alla shell tendono a creare un gran numero
di file nella loro $HOME: caselle di posta, documenti 
personali, configurazioni di applicazioni per X/GNOME/KDE...

<p>
In Debian ogni utente è creato con un gruppo associato e due utenti
non appartengono mai allo stesso gruppo. Questo è il comportamento predefinito:
quando l'utente X viene creato, un gruppo di nome X viene creato e l'utente è
assegnato ad esso. Questo evita il concetto di gruppo di <em>utenti</em>
che renderebbe più difficile per gli utenti nascondere informazioni agli
altri.

<p>
Tuttavia, le directory <var>$HOME</var> degli utenti sono create con permessi
0755 (leggibili dal gruppo e da tutti gli altri). I permessi di gruppo
non sono un problema perché solo l'utente appartiene a quel gruppo,
ma i permessi globali potrebbero (ma anche no) essere un problema,
in relazione alle scelte locali.

<p>
Questo comportamento può essere cambiato in modo che la creazione di
un utente fornisca permessi diversi su <var>$HOME</var>. 
Per cambiare il comportamento
per i <em>nuovi</em> utenti quanto sono creati, nel file di configurazione
<file>/etc/adduser.conf</file> cambiate 
<em>DIR_MODE</em>in 0750 (nessun permesso globale).

<p>
Gli utenti possono ancora condividere informazioni, ma non direttamente
nelle loro directory <var>$HOME</var>, a meno che non cambino i loro permessi.

<p>
Notate che questo impedirà agli utenti di creare la loro 
pagina web personale (<file>~utenteX</file>) se è installato un web server, 
poiché quest'ultimo non sarà in grado di leggere la directory 
<var>$HOME</var> e di conseguenza neanche la directory sottostante 
<file>public_html</file>.
Se volete permettere agli utenti di pubblicare pagine HTML nei loro
<file>~userX/public_html</file>, modificate <em>DIR_MODE</em> per avere
permessi 0751. Questo consentirà al server web di accedere a quella directory
(che dovrebbe avere permessi 0755) e fornire il contenuto pubblicato 
dagli utenti.



<sect1 id="user-pwgen">Generare password per gli utenti



<p>
Ci sono molti casi in cui un amministratore ha necessità di creare
molti account e di fornire password per ognuno di essi. Ovviamente
l'amministratore potrebbe semplicemente scegliere come password il
nome scelto dall'utente per l'account, ma ciò non sarebbe molto furbo
per quanto riguarda la sicurezza. Un approccio migliore consiste nell'usare
un programma per generare password. Debian offre i 
pacchetti <package>makepasswd</package>,
<package>apg</package> e <package>pwgen</package>, 
che forniscono programmi (con nome uguale a quello del
pacchetto) che possono essere usati per questo scopo. <prgn>Makepasswd</prgn>
genererà password totalmente casuali, con enfasi sulla sicurezza piuttosto
che sulla pronunciabilità, mentre <prgn>pwgen</prgn> 
cercherà di creare password senza
senso ma pronunciabili (ovviamente questo dipende dalla lingua madre).
<prgn>Apg</prgn> ha algoritmi per entrambi 
(per questo programma esiste una versione
client/server ma non è inclusa nel pacchetto Debian).

<p>
<prgn>Passwd</prgn> non permette assegnamento non interattivo di password
(poiché usa direttamente l'accesso tty). Se volete cambiare password
mentre state creando un gran numero di utenti, potete creare quest'ultimi
usando <prgn>adduser</prgn> con l'opzione <tt>--disabled-login</tt> e 
poi usando <prgn>chpasswd</prgn>

<footnote>
<prgn>Chpasswd</prgn> non può gestire la generazione 
di password MD5, quindi necessita della password in 
forma crittata prima di usarlo, con l'opzione <tt>-e</tt>.
</footnote>

(incluso nel pacchetto <package>passwd</package>, 
che è già installato). Se si vuole
usare un file contenente tutte le informazioni 
per creare gli utenti come un processo batch può 
essere utile usare <prgn>newusers</prgn>.



<sect1>Controllare le password degli utenti



<p>
Le password degli utenti possono talvolta diventare il <em>componente più
debole</em> nella sicurezza di un sistema. Ciò è dovuto alla scelta da parte
degli utenti di password di scarsa qualità per i loro account (e più utenti
hanno accesso più le possibilità che questo accada crescono). Anche se
sono stati impostati controlli con il modulo PAM cracklib e limiti descritti
nella <ref id="auth-pam"> gli utenti saranno comunque
in grado di usare password deboli. Poiché l'accesso per gli utenti potrebbe
includere accesso da shell remote (si spera tramite <prgn>ssh</prgn>) 
è importante che
una persona che attacchi il sistema da remoto non sia in grado di indovinare
le password degli utenti (dopo aver ottenuto la lista degli utenti con altri
mezzi).

<p>
Un amministratore di sistema deve, ipotizzando un gran numero di utenti,
controllare se le password scelte sono consistenti con le scelte di sicurezza
locali. Come effettuare questo controllo? Provando a forzarle come farebbe
una persona che attacca il sistema se avesse accesso alle password crittate
(il file <file>/etc/shadow</file>).

<p>
Un amministratore di sistema può usare <package>john</package> o
<package>crack</package> (entrambi sono
crackatori di password brute force) insieme ad una appropriata lista
di parole

<footnote>
Provate <prgn>apt-cache search wordlist</prgn> per ottenere 
una lista di pacchetti disponibili che potrebbero fornire 
liste di parole. Queste, inoltre, possono essere scaricate da 
molti siti ftp su Intenet. Vedete
<url id="ftp://ftp.ox.ac.uk/pub/wordlists"> o
<url id="ftp://ftp.cerias.purdue.edu/pub/dict">.
</footnote>

per controllare le password degli utenti e prendere provvedimenti
appropriati quando si trova una password debole.



<sect1 id="idle-logoff">Disconnettere gli utenti inattivi



<p>
Solitamente gli utenti inattivi sono un problema per la sicurezza.
Un utente potrebbe essere inattivo perché è fuori a pranzo o perché
una connessione remota interrotta non è stata ristabilita.
Qualunque sia la ragione, gli utenti inattivi possono essere causa
di problemi:

<list>
<item>
Perché la console dell'utente potrebbe non essere bloccata e
un intruso potrebbe accedervi.
<item>
Perché un attaccante potrebbe riuscire a riconnettersi ad
una connessione di una rete chiusa e eseguire comandi sulla
shell remota (questo è abbastanza facile se la shell
remota non è crittata come nel caso di <prgn>telnet</prgn>).

</list>

<p>
Alcuni sistemi remoti sono stati compromessi attraverso uno
<prgn>screen</prgn> inattivo (distaccato). 

<p>
La disconnessione automatica degli utenti inattivi di solito è una
parte della politica di sicurezza che occorre rafforzare. Ci sono
molti modi per realizzarla:

<list>
<item>
Se la shell degli utenti è <prgn>bash</prgn>, l'amministratore di sistema
può impostare un valore di default per la variabile <tt>TMOUT</tt>
(vedete <manref section="1" name="bash">) che fa sì che la shell disconnetta
automaticamente gli utenti inattivi. Notate che la variabile
va impostata con l'opzione <tt>-o</tt> altrimenti gli utenti saranno
in grado di modificarla o rimuoverla.
<item>
Installare <package>timeoutd</package> e configurare 
<file>/etc/timeouts</file> secondo la
propria politica di sicurezza locale. Il demone controllerà
se ci sono utenti inattivi e manderà in time out le loro shell
secondo la configurazione impostata.
<item>
Installare <package>autolog</package> e configurarlo per disconnettere gli
utenti inattivi.

</list>

<p>
I demoni <prgn>timeoutd</prgn> e <prgn>autolog</prgn> sono i 
metodi consigliati, dal momento che gli utenti possono 
cambiare la loro shell di default o passare ad un'altra 
shell (non controllata) dopo aver avviato la
loro shell predefinita.



<sect>Usare i tcpwrapper



<p>
I TCP wrapper sono stati sviluppati quando ancora non erano
disponibili dei veri filtri di pacchetti ed era necessario
controllare gli accessi. I TCP wrapper permettono di consentire o
negare un servizio ad un host o ad un dominio e di definire una
regola predefinita per consentire o meno l'accesso.
Se desiderate maggiori informazioni al riguardo, date
un'occhiata a <manref name="hosts_access" section="5">.

<p>
Molti servizi installati in Debian sono:

<list>

<item>
Lanciati mediante un servizio tcpwrapper (<file>tcpd</file>)
<item>
Compilati con il supporto a libwrapper integrato.

</list>

<p>
In un caso, per i servizi configurati in <file>/etc/inetd.conf</file>
(inclusi <prgn>telnet</prgn>, <prgn>ftp</prgn>, 
<prgn>netbios</prgn>, <prgn>swat</prgn> e <prgn>finger</prgn>) si può
notare che il file di configurazione esegue prima <prgn>/usr/sbin/tcpd</prgn>.
Nell'altro, anche se il servizio è lanciato dal superdemone
<prgn>inetd</prgn>, il supporto per le regole dei tcp wrapper può essere
compilato al suo interno. In Debian, tra i servizi compilati con il
supporto ai tcp wrapper ci sono 
<prgn>ssh, portmap, in.talk, rpc.statd, rpc.mountd, gdm, oaf</prgn> 
(il demone di attivazione GNOME), <prgn>nessus</prgn> e
molti altri.

<p>
Per vedere quali pacchetti usano i tcpwrapper provate con:

<example>
  $ apt-cache showpkg libwrap0 | egrep '^[[:space:]]' | sort -u | \
        sed 's/,libwrap0$//;s/^[[:space:]]\+//'
</example>

<p>
Occorre tenerne conto quando si usa <prgn>tcpchk</prgn>. 
I servizi compilati col supporto alla libreria wrapper 
possono essere aggiunti ai file <file>hosts.deny</file> e 
<file>hosts.allow</file> ma <prgn>tcpchk</prgn> avviserà che non è in
grado di trovare questi servizi, perché li cerca in
<file>/etc/inetd.conf</file> (la manpage non è molto 
chiara su questo punto).

<p>
Di seguito riportiamo un trucchetto; probabilmente il più piccolo
sistema di rivelazione di intrusione possibile. In generale 
dovreste avere una buona politica di firewall come prima linea di difesa ed i
tcp wrapper come seconda linea. Un trucchetto è quello di
impostare un comando <var>SPAWN</var> 

<footnote>
Assicurarsi di usare il maiuscolo altrimenti <em>spawn</em> 
non funzionerà

</footnote> 

in <file>/etc/hosts.deny</file> che spedisce
una mail all'utente root ogni volta che un servizio viene negato
attraverso i wrapper:

<example>
  ALL: ALL: SPAWN ( \
    echo -e "\n\
    TCP Wrappers\: Connection refused\n\
    By\: $(uname -n)\n\
    Process\: %d (pid %p)\n\
    User\: %u\n\
    Host\: %c\n\
    Date\: $(date)\n\
  " | /usr/bin/mail -s "Connection to %d blocked" root) &
</example>

<p>
<em>Attenzione</em>: L'esempio sopra è esposto a attacchi di tipo DoS
stabilendo molte connessioni in un breve periodo di tempo. Molte
email causano un elevato I/O di file spedendo solo pochi pacchetti.

<!--
# Could this example be more interesting? 
# It also relates to the next section (jfs)
#
# era: cf hosts_access(5) manual page,
# and why are you not using logger(1) here? (FIXME?)
#
#&lt;example&gt;
#ALL: ALL: SPAWN ( \
#  /usr/local/sbin/send_syslog %u %c %d )
#&lt;example&gt;

#  With send_syslog as:
##!/usr/bin/perl -w
#
#use Sys::Syslog qw(:DEFAULT setlogsock);
#
#$user=shift(@ARGV) || 'unknown';
#$host=shift(@ARGV) || 'unknown';
#$service=shift(@ARGV) || 'unknown';
#setlogsock('unix');
#openlog("alert",'', 'user');
#syslog('warning', 'Connection from %s at %s to %s blocked.', ($user, $host, $service) );
#closelog();
#
#exit 0;
-->



<sect id="log-alerts">L'importanza di log e avvisi



<p>
&Egrave; evidente che il modo di trattare log e avvisi è una questione
importante in un sistema sicuro. Supponiamo che un sistema sia
perfettamente configurato e sicuro al 99%. Se viene portato un attacco
al restante 1% e non ci sono misure di sicurezza pronte, innanzitutto a
rilevarlo e poi ad attivare allarmi, il sistema non è per
nulla sicuro.

<p>
Debian GNU/Linux fornisce alcuni strumenti per svolgere l'analisi
dei log, in particolare <package>swatch</package>, 

<footnote>

C'è un ottimo articolo in proposito scritto da
<url id="http://www.enteract.com/~lspitz/swatch.html" name="Lance Spitzner">

</footnote>
<package>logcheck</package> o <package>log-analysis</package>
(tutti questi avranno bisogno di un po' di personalizzazione per
rimuovere le cose superflue dal rapporto). Potrebbe anche essere
utile, se il sistema si trova nelle vicinanze, avere i log di sistema
stampati su una console virtuale. Questo è utile perché si può (da
lontano) vedere se il sistema sta funzionando correttamente. In
Debian, il file <file>/etc/syslog.conf</file> ha già in partenza una
configurazione predefinita commentata; per abilitarla, togliete i
commenti dalle linee e riavviate <prgn>syslogd</prgn> 
(<tt>/etc/init.d/syslogd restart</tt>):

<example>
  daemon,mail.*;\
        news.=crit;news.=err;news.=notice;\
        *.=debug;*.=info;\
        *.=notice;*.=warn       /dev/tty8
</example>

<!-- FIXME: Talk about logcolorise? Is it in Debian? -->

<p>
C'è molto altro a proposito dell'analisi dei log che non può
essere trattato qui, una buona fonte di informazioni sono le 
<url name="Risorse sull'analisi dei log di Counterpane"
id="http://www.counterpane.com/log-analysis.html">.
In ogni caso, anche gli strumenti automatizzati nulla possono 
contro il miglior strumento di analisi: il vostro cervello.

<!-- FIXME: Check information on SHARP, the 'syslog heuristic analysis
and response program'.  The paper is at
http://www.csis.gvsu.edu/sharp/. Is it free-software? packaged? -->



<sect1 id="custom-logcheck">Usare e personalizzare <prgn>logcheck</prgn>



<p>
Il pacchetto <prgn>logcheck</prgn> in Debian è diviso in due parti:
<prgn>logcheck</prgn> (il programma vero e proprio) e 
<package>logcheck-database</package> (un
database di espressioni regolari per il programma). In Debian è
predefinito (in <file>/etc/cron.d/logcheck</file>) che 
<prgn>logcheck</prgn> venga eseguito giornalmente alle 2 AM 
e una volta dopo ogni riavvio.

<p>
Questo strumento, se propriamente configurato, può essere molto utile
per segnalare all'amministratore gli eventi inusuali del sistema.
<prgn>Logcheck</prgn> può essere completamente personalizzato in modo
da mandare mail a proposito di eventi registrati nei log che sembrano
degni di attenzione.  L'installazione predefinita include profili (per
gli eventi da ignorare e le violazioni delle politiche adottate)
per tre diverse configurazioni (workstation, server e paranoide). Il
pacchetto Debian include un file di configurazione
<file>/etc/logcheck/logcheck.conf</file>, generato dal
programma, che definisce a quale utente vengono spedite le
verifiche. Inoltre fornisce, ai pacchetti che offrono servizi, un modo
per implementare nuove politiche nelle cartelle:
<file>/etc/logcheck/hacking.d/_packagename_</file>,
<file>/etc/logcheck/violations.d/_packagename_</file>,
<file>/etc/logcheck/violations.ignore.d/_packagename_</file>,
<file>/etc/logcheck/ignore.d.paranoid/_packagename_</file>,
<file>/etc/logcheck/ignore.d.server/_packagename_</file> e
<file>/etc/logcheck/ignore.d.workstation/_packagename_</file>.
Tuttavia, al momento, non molti pacchetti ne fanno uso. Se avete una
politica che può essere utile ad altri utenti, per favore speditela
come rapporto bug per il pacchetto appropriato (come <em>wishlist</em>
bug).  Per ulteriori informazioni leggere
<file>/usr/share/doc/logcheck/README.Debian</file>.

<p>
Il miglior modo di configurare <prgn>logcheck</prgn> è installarlo
(chiederà a quale utente spedire i rapporti e genererà
<file>/etc/logcheck/logcheck.logfiles</file> dalle voci di syslog). Se
si desidera aggiungere nuovi file di log, aggiungerli in
<file>/etc/logcheck/logcheck.logfiles</file>.  Le dipendenze dei
pacchetti forzeranno anche l'installazione di
<package>logcheck-database</package>; durante l'installazione verrà
chiesto il livello di sicurezza desiderato: workstation, server o
paranoia. Questo farà sì che <file>/etc/logcheck/ignore.d</file> punti
alle cartelle appropriate (per mezzo di collegamenti simbolici). Per
modificare ciò eseguire <tt>dpkg-reconfigure -plow
logcheck-database</tt>.  Poi, creare <file>/etc/ignore.d/local</file>;
questo file conterrà tutte le regole per escludere i messaggi che non
dovrebbero essere riportati. Per il momento, lasciatelo vuoto (un
semplice <tt>cp /dev/null /etc/ignore.d/local</tt> sarà sufficiente).

<p>
Una volta fatto questo, forse vorrete controllare per i primi
giorni/settimane/mesi le mail che vengono spedite. Se vengono spediti
messaggi che non desiderate ricevere, aggiungete le espressioni
regolari (vedete <manref name="regex" section="7">) 
che corrispondono a questi messaggi in
<file>/etc/ignore.d/local</file>. &Egrave; un processo di 
taratura al quale si deve
dedicare il tempo necessario; Quando i messaggi spediti saranno
sempre rilevanti la messa a punto potrà considerarsi conclusa. Notate
che, anche se <prgn>logcheck</prgn> è in esecuzione, se  non trova nulla di
rilevante nel sistema non spedirà mail (così potrete ricevere un solo
messaggio a settimana, con un po' di fortuna).



<sect1>Configurare il file dove vengono spediti gli avvisi



<p>
Debian nasce con una configurazione standard per <tt>syslog</tt> (in 
<file>/etc/syslog.conf</file>) che registra i messaggi in file appropriati a
seconda della configurazione del sistema. Dovreste avere
dimestichezza con questo; date un'occhiata al file <file>syslog.conf</file>
e alla documentazione. Se intendete mantenere un sistema sicuro dovreste
fare attenzione a dove i messaggi di log vengono spediti
cosicché non passino inosservati.

<p>
Per esempio, mandare i messaggi su una console è una configurazione
utile per sistemi di diversi livelli di produzione. Ma per altri
sistemi è ugualmente importante aggiungere una nuova macchina che
faccia da loghost (cioè riceva i log da tutte le altre macchine del
sistema).

<p>
Si dovrebbe considerare anche la posta di root, molti programmi per
il controllo della sicurezza (come <package>snort</package>) mandano 
gli avvisi a root via posta. 
Questa mailbox di solito punta al primo utente creato nel
sistema (controllare <file>/etc/aliases</file>). Preoccupatevi di mandare la
posta di root in qualche posto dove verrà letta (localmente o
remotamente).

<p>
Ci sono altri account di ruolo ed alias nel tuo sistema. In un piccolo
sistema é, probabilmente, più facile far sì che tutti gli alias
puntino a root e che la posta di root venga inoltrata alla casella
personale dell'amministratore di sistema.

<p>
FIXME: sarebbe interessante spiegare come un sistema Debian possa
spedire/ricevere SNMP traps riguardanti problemi di sicurezza (jfs).
Controllare: <package>snmptraglogd</package>, <package>snmp</package> 
e <package>snmpd</package>.



<sect1>Usare un loghost



<p>
Un loghost è un host che raccoglie i dati di syslog remoti dalla
rete. Se una delle vostre macchine viene compromessa, l'intruso non
é in grado di coprire le sue tracce, a meno che non penetri anche
nella macchina loghost. Perciò, il loghost dovrebbe essere
particolarmente sicuro. Rendere una macchina un loghost è semplice.
Basta avviare <prgn>syslogd</prgn> con <tt>syslogd -r</tt> e un 
nuovo loghost è nato.
Perché questa azione sia permanente, in Debian, modificate
<file>/etc/init.d/sysklogd</file> e cambiate la riga

<!-- FIXME: The following could also be interesting -->
<!-- How to hide the logging server on the network i.e. by not giving -->
<!-- it an IP address and adding a static ARP entry on the hosts using -->
<!-- the remote syslog server (only if on the same hub); if the remote -->
<!-- syslog server would be on a separate network, the default gateway -->
<!-- should be configured accordingly -->

<example>
  SYSLOGD=""
</example>
in 
<example>
  SYSLOGD="-r"
</example>

Successivamente, configurate le altre macchine perché spediscano i
dati al loghost. Aggiungete una riga simile alla seguente al file 
<file>/etc/syslog.conf</file>:

<example>
  facility.level            @your_loghost
</example>

<p>
Guardate la documentazione per cosa usare al posto di <em>facility</em> e
<em>level</em> (non dovrebbero contenere queste parole). Se volete
registrare ongi cosa remotamente, scrivete:

<example>
  *.*                       @your_loghost
</example>

nel vostro <file>syslog.conf</file>. La registrazione dei log sia remota che
locale è la migliore soluzione (l'attaccante potrebbe pensare di aver
coperto le sue tracce dopo la cancellazione dei log locali). Vedete
la pagine di manuale di <manref name="syslog" section="3">, 
<manref name="syslogd" section="8"> e <manref name="syslog.conf" section="5"> 
per ulteriori informazioni.



<sect1>Permessi dei file di log



<p>
Non è solo importante decidere come gli avvisi siano usati, ma anche
chi ha accesso in lettura/modifica dei file di log (se non si usa un
loghost remoto). Gli avvisi di sicurezza che l'attaccante può cambiare
o disabilitare non sono il peggiore danno di un'intrusione. Infatti,
dovete tenere a mente che questi file di log possono rivelare molte
informazioni riguardo il proprio sistema ad un attaccante che ne
abbia libera lettura.

<!--  It should be explained why after installation this is not
 already done, jfs -->

<p>
Alcuni permessi sui file di log non sono perfetti dopo una
installazione (ma questo ovviamente dipende dalla propria politica di
sicurezza locale). Per prima cosa <file>/var/log/lastlog</file> e 
<file>/var/log/faillog</file> non necessitano di essere letti dagli utenti
normali. Nel file <file>lastlog</file> potete vedere chi ha effettuato un login
recentemente e in <file>faillog</file> potete vedere un riassunto dei login
falliti. L'autore raccomanda <prgn>chmod 660</prgn> per entrambi. Date una
rapida occhiata ai vostri file di log e decidete molto attentamente
quali rendere leggibili/scrivibili per utenti con UID diversi da 0 e
gruppi che non siano "adm" o "root". Si può facilmente controllare
quanto descritto nel proprio sistema con:

<example>
  #  find /var/log -type f -exec ls -l {} \; | cut -c 17-35 |sort -u
  (see to what users do files in /var/log belong)
  #  find /var/log -type f -exec ls -l {} \; | cut -c 26-34 |sort -u
  (see to what groups do files in /var/log belong)
  # find /var/log -perm +004
  (files which are readable by any user)
  #  find /var/log \! -group root \! -group adm -exec ls -ld {} \;
  (files which belong to groups not root or adm)
</example>

<p>
Per personalizzare come i file di log vengono creati probabilmente si
dovrebbe modificare il programma che li genera. Se i file di log
vengono ruotati (vgs. <prgn>logrotate</prgn>), ad ogni modo, 
dovreste personalizzare il comportamento di creazione e rotazione.


<!-- This is no longer true, check apache's logrotate
<p>
I want to emphasize that the apache log file permissions are really
screwed due to the fact that the apache user owns the apache log
files. If a user gets a shell with a back door in apache, they can
easily remove the log files.
-->



<sect id="kernel-patches">Includere le patches nel kernel
<!-- last edited by Frédéric Schütz <schutz@mathgen.ch> -->



<p>
FIXME: Aggiungere ulteriori contenuti. spiegare come queste specifiche
patch possono essere installate in Debian usando i pacchetti
kernel-2.x.x-patch-XXX.

<!-- Make the entries coherent: should the package names be links to the
relevant package pages ? -->


<p>
Debian GNU/Linux è provvista di molte patches per il Kernel di Linux
per migliorarne la sicurezza. Queste includono:

<list>

<item>
Sistema anti intrusione (nel pacchetto <package>lids-2.2.19</package>),
di Huagang Xie e Philippe Biondi. Questa modifica del kernel 
semplifica il processo di protezione di un sistema Linux, 
permettendo la limitazione, l'occultamento e la protezione di processi
e di determinati file, in modo che nemmeno l'utente root possa 
intervenire su di essi. Per di più, si possono anche impostare 
funzionalità per alcuni processi: imperdibile, per 
l'amministratore di sistema paranoico... Pagina di riferimento:
<url id="http://www.lids.org" name="http://www.lids.org">
<item><em>POSIX Access Control Lists (ACLs) for Linux</em> (nel pacchetto
<package>kernel-patch-acl</package>). Questa modifica del kernel aggiunge
delle liste di controllo degli accessi, un metodo avanzato per limitare e
controllare l'accesso a file ed a cartelle; è stato aggiunto al kernel di
sviluppo 2.5 e sarà incluso in modo predefinito nel futuro kernel 2.6. 
Pagina di riferimento: 
<url name="http://acl.bestbits.at/" id="http://acl.bestbits.at/">
<item>Linux Trustees (nel pacchetto <package>trustees</package>).
Questa modifica del kernel aggiunge un sistema avanzato di 
gestione dei permessi del kernel Linux. Oggetti speciali, chiamati 
trustees (curatori) sono uniti ad ogni file o cartella e riposti 
nella memoria del kernel, questo permette un rapido controllo di
tutti i permessi. Pagina di riferimento: 
<url name="http://trustees.sourceforge.net/" 
     id="http://trustees.sourceforge.net/">
<item>
NSA (nel pacchetto <package>selinux</package> si può anche trovare 
<url id="http://www.coker.com.au/selinux/" name="sul sito degli sviluppatori">)
<item>
<package>kernel-patch-2.2.18-openwall</package>, della Solar Designer,
utile insieme di restrizioni relative al kernel, come restrizioni ai 
collegamenti,
FIFO in <file>/tmp</file>, un file system con cartella <file>/proc</file>
ad accesso ristretto, un approccio speciale nei descrittori dei file, un
divieto di esecuzione nell'area dello stack dell'utente e altro ancora.
Pagina web di riferimento: 
<url name="http://www.openwall.com/linux/"
     id="http://www.openwall.com/linux/">
<item><package>kernel-patch-2.2.19-harden</package>
<item>
IPSEC kernel support (nel pacchetto <package>kernel-patch-freeswan</package>).
Se si vuole usare il protocollo
IPsec con Linux, occorre questa patch, con la quale si possono creare delle
VPN, anche per macchine Windows, in modo molto semplice, dal momento che IPsec
è uno standard comune. Le funzionalità IPSec sono state aggiunte al kernel di
sviluppo 2.5 e questa caratteristica sarà inclusa in modo predefinito 
nel futuro
kernel 2.6. Pagina web di riferimento: <url id="http://www.freeswan.org">
<item>
<package>cryptoapi-core-source</package>. 
Questa patch aggiunge al kernel delle 
funzioni di crittografia, come la cifratura e il sommario delle funzioni.
Gli usi più comuni per queste funzioni sono la codifica dei
filesystem o delle partizioni di swap. Notate che dalla versione 
2.5.45 del kernel sono state agginte delle funzioni simili, talmente
simili che dai kernel 2.6 non avrete bisogno di queste patches.
<em>Nota</em>: questo pacchetto non esiste in versioni di Debian 
precedenti a <url id="http://www.debian.org/releases/sarge/" name="Sarge">.
Sito di riferimento: 
<url name="http://www.kerneli.org/" id="http://www.kerneli.org/">
<item>
<package>cryptoloop-source</package>.  
Queste migliorie permettono di 
usare le funzioni che si trovano nel pacchetto 
<package>crytoapi-core-source</package> per creare dei
filesystem criptati usando il device di loopback.
<item>
<package>kernel-patch-int</package>. 
Questa patch estende le funzioni di criptazione
del kernel e può essere usata dalle versioni Debian fino a Potato.
Woody non è supportata da questo, e se usate sarge o una nuova versione
vi invito ad usare il più recente <package>cryptoapi-core-source</package>.

</list>

<p>
Sebbene molte patches non siano ancora in debian. Se avete bisogno che
siano incluse chiedete di loro al gruppo 
<url name="Work Needing and Prospective Packages"
     id="http://wnpp.debian.org">.
Alcuni di questi sono:

<!-- http://wnpp.debian.org unreachable in the last two days... -->



<list>
<item><url id="http://pageexec.virtualave.net/" name="PaX patch">
<item>
<url name="HAP patch"
id="http://www.theaimsgroup.com/~hlein/hap-linux/">
<item>
<url name="Stealth patch"
id="http://www.energymech.net/madcamel/fm/">
<item>
<em>SubDomain</em>. Estensione del kernel progettata per limitare
al massimo i privilegi per programmi potenzialmente dannosi per la
sicurezza, Subdomain completa ed estende i controlli originari
sugli accessi. Simile all'ambiente <prgn>chroot</prgn>, si propone
come più semplice da configurare e più flessibile.
Pagina principale: <url name="http://www.immunix.org/subdomain.html"
id="http://www.immunix.org/subdomain.html">
<item>
<em>UserIPAcct</em>. Non è propriamente una patch per la sicurezza
ma permette di assegnare ad ogni utente delle quote e di trarre rilievi
statistici sul traffico sul sistema . Pagina principale:
<url id="http://ramses.smeyers.be/useripacct">.

</list>



<sect>Protezione contro i buffer overflows



<p>
Il <em>Buffer overflow</em> è il nome di un comune attacco al software
che approfitta di un controllo insufficiente (un comune errore di 
programmazione) in seguito all'esecuzione di codice da un input.
Questo attacco, contro i server che rimangono in attesa di una
connessione remota e contro il software che gira localmente, ma che 
permette degli alti privilegi agli utenti (grazie ai <tt>setuid</tt>
e <tt>setgid</tt> attivi) può compromettere ogni sistema.

<p>
Esistono quattro metodi principali per proteggersi dai buffer overflows:

<list>

<item>
Aggiungendo delle patches al kernel così da prevenire 
l'esecuzione dello stack..
<!-- FIXME: add a link to libsafe to the main place -->

<item>
Usando una libreria come libsafe, per sovrascrivere le funzioni 
vulnerabili e introdurre i giusti rimedi (trovate le informazioni 
su come installare libsafe leggendo: 
<url id="http://www.Linux-Sec.net/harden/libsafe.uhow2.txt" 
     name="questo documento">).
<item>
Ricompilando il codice per introdurre nuove utilità per prevenire gli
overflows, usando per esempio stackguard.
<item>
Usando dei programmi che cercano e riparano queste vulnerabilità.

</list>

<p>
Debian GNU/Linux, dalla versione 3.0, include programmi che permettono
di implementare il primo e l'ultimo di questi metodi (patches e strumenti
per scovare i possibili buffer overflows). L'uso di questi programmi
richiede una certa esperienza nel riparare (e ricompilare) il codice.
Debian ad esempio mette a disposizione: <package>bfbtester</package> 
(un programma che serve a verificare l'esistenza di buffer overflows) 
e <package>njamd</package>.

<p>
Come per le patches per il kernel (descritte nel paragrafo 
<ref id="kernel-patches">), Openwall si occupa della protezione contro i
buffer overflows per i kernel 2.2. Invece per quanto riguarda i kernel 
della serie 2.4 si deve usare la Grsecurity patch (inclusa nel
pacchetto <package>kernel-patch-2.4-grsecurity</package>, che include 
Openwall e molte
altre <url id="http://www.grsecurity.net/features.php"
name="funzionalità"> (che 
includono ACL per rendere difficoltoso ottenere informazioni
da un sistema operativo remoto) oppure i moduli di sicurezza linux 
(sono presenti nei pacchetti: <package>kernel-patch-2.4-lsm</package> e 
<package>kernel-patch-2.5-lsm</package>).

<p>
In ogni caso questi consigli non prevengono i buffer overflows
poiché esistono dei modi per aggirare queste precauzioni, metodi
descritti nel 
<url name="numero 58"
     id="http://packetstorm.linuxsecurity.com/mag/phrack/phrack58.tar.gz"> 
del phrack's magazine.



<sect>Trasferire file in sicurezza



<p>
Durante la normale amministrazione, solitamente si ha bisogno di 
importare o di esportare dei file dal sistema installato. Si può riuscire a 
copiare i file da un host ad un altro in maniera sicura, usando il pacchetto 
server <package>sshd</package>. Un'altra possibilità è l'impiego di 
<package>ftpd-ssl</package>, un server ftp che adotta il <em>Secure Socket 
Layer</em> per criptare le trasmissioni.

<p>
Naturalmente, tutti questi metodi necessitano di client speciali e Debian ne 
offre alcuni: per esempio, con <package>ssh</package> fornisce 
<prgn>scp</prgn>, che funziona come <prgn>rcp</prgn>
ma è completamente criptato, cosicché i <em>cattivi ragazzi</em> 
non possano nemmeno capire 
CHE COSA si stia copiando. C'è anche un pacchetto cliente 
<package>ftp-ssl</package> per 
il server corrispettivo. Per questi programmi, si trovano client anche di 
altri sistemi operativi (non-UNIX); per copiare in 
sicurezza, <prgn>putty</prgn> e 
<prgn>winscp</prgn> forniscono un'implementazione adatta a qualsiasi 
versione del sistema operativo della Microsoft.

<p>
Notate che usare <prgn>scp</prgn> consente a tutti gli utenti 
l'accesso all'intero file-system, a meno che non sia stato dato 
il comando <prgn>chroot</prgn>, come spiegato nella <ref id="ssh-chroot">. 
Si può configurare l'accesso FTP, attraverso <prgn>chroot</prgn>, 
in modo anche più semplice, a seconda del demone scelto, come illustrato 
nella <ref id="ftp-secure">. Se si teme che gli utenti sfoglino i 
file locali e si vuole avere una comunicazione criptata, si può 
utilizzare un demone ftp con supporto SSL, o abbinare un ftp 
che trasmette testo in chiaro e un'impostazione VPN (cfr. <ref id="vpn">).



<sect>Limitazioni e controllo del File System



<sect1>Usare le quote



<p>
Avere un buon criterio di assegnazione delle quote è importante, poiché evita 
che gli utenti riempiano gli/l'hard-disk.

<p>
Si possono avere due differenti sistemi di quote: la quota d'utente e la 
quota di gruppo. Come si intuisce, la quota per utente limita la quantità di 
spazio di cui un utente può disporre e la quota di gruppo fa lo stesso, ma 
verso i gruppi. Si tenga conto di questo, quando si lavora con la dimensione 
delle quote.

<p>
Nell'impostare un sistema di quote, bisogna tenere conto di alcuni punti 
importanti:

<list>
<item>
Fare in modo che le quote siano abbastanza piccole, in modo che gli 
utenti non divorino lo spazio del disco fisso;
<item>
Fare in modo che siano abbastanza grandi, in modo che gli utenti non 
abbiano a lagnarsene e che la loro quota-email impedisca loro di 
accettare posta per un lungo periodo;
<item>
Usare il sistema quote su tutte le aree scrivibili dagli utenti, su 
<file>/home</file> come su <file>/tmp</file>.

</list>

<p>
Ogni partizione o cartella a cui gli utenti abbiano pieno accesso in scrittura 
dovrebbe essere organizzata in quote. Il calcolo e l'assegnazione di una 
quota su cui si possa lavorare, unisce utilizzabilità e sicurezza.

<p>
Supponiamo che vogliate usare il sistema quote: prima di tutto, bisogna 
controllare che il supporto per le quote sia abilitato nel kernel (se non lo 
è, va ricompilato); dopo di che, controllate se il pacchetto 
<package>quota</package> sia installato (se non lo è, bisogna fare anche 
questo).

<!-- FIXME: how to check for quota support? What to tweak when
recompiling? -->

<p>
Per abilitare le  quote per i rispettivi file  system basta modificare
l'impostazione nel file <file>/etc/fstab</file> da <tt>defaults</tt> a
<tt>defaults,usrquota</tt>. Se c'è bisogno di un gruppo quota, sostituite
<tt>grpquota</tt> a <tt>usrquota</tt>. Si possono
utilizzare entrambe le opzioni. Quindi, basta creare due file vuoti
quota.user e  quota.group nella root del file system dove si vogliono
usare le quote (ad esempio,  per un file system <file>/home</file>, date
il comando <tt>touch /home/quota.user /home/quota.group</tt>).

<p>
Riavviare il sistema quote lanciando: 
<tt>/etc/init.d/quota stop;/etc/init.d/quota start</tt>. 
A questo punto, dovrebbe funzionare e potete impostare 
le dimensioni delle quote.

<p>
Per modificare le quote di un particolare utente (di "giorgio", 
per esempio) basta dare il comando <tt>edquota -u giorgio</tt>; 
per quelle di un gruppo, invece, <tt>edquota -g &lt;gruppo&gt;</tt>. 
Infine impostate il modo quota fissa o variabile e/o le quote inode, a piacere.

<p>
Per maggiori informazioni sulle quote, leggere le relative pagine man ed il 
quota mini-HOWTO (<file>/usr/share/doc/HOWTO/en-html/mini/Quota.html</file>) 
(mini guida su quota).

<p>
Può darsi che <package>lshell</package> non piaccia, dal momento 
che viola il FHS: ebbene, tenete presente che pam_limits.so 
potrebbe svolgere le medesime funzioni e che <package>lshell</package>
è attualmente <url id="http://bugs.debian.org/93894" name="orfana"> 
(senza manutentore).


<sect1 id="ext2attr">Specifici attributi del filesystem ext2 (chattr/lsattr)
<!-- section last edited by Frédéric Schütz <schutz@mathgen.ch> -->


<p>
Oltre ai soliti permessi di tipo Unix, i filesystem ext2 ed ext3 offrono un
insieme di attributi specifici per dare un maggiore controllo sui file del
sistema. A differenza dei permessi di base, questi non vengono mostrati con il
comando <prgn>ls -l</prgn> o modificati mediante <prgn>chmod</prgn>; per
amministrarli, occorrono altre due utilità: <prgn>lsattr</prgn> e
<prgn>chattr</prgn> (nel pacchetto <package>e2fsprogs</package>). Notate che
ciò significa che tali attributi non saranno salvati con la copia di sicurezza
del sistema; così, qualora se ne modifichi uno qualsiasi, sarebbe meglio
salvare in uno script i successivi comandi <prgn>chattr</prgn>, così da
poterli reimpostare in un secondo momento, all'atto di un eventuale ripristino.

<p>
Fra tutti gli attributi disponibili, i due più importanti, nell'aumentare la
sicurezza sono richiamati dalle lettere "i" e "a" e possono essere impostati o
rimossi dal superutente:

<list>
<item>
L'attributo "i" ("immutabile"): un file con questo attributo non può
essere modificato, né cancellato, né rinominato e nemmeno il superutente può
creare collegamenti ad esso.
<item>
L'attributo "a" ("appendici"): questo attributo ha lo stesso effetto
del precedente, salvo che consente di aprire il file per aggiungervi del nuovo
contenuto, pur senza poter modificare quello già esistente (append mode); è
molto utile per i file di log collocati nella cartella <file>/var/log/</file>,
anche se si dovrebbe considerare che, talvolta, questi vengono spostati, per
via degli script di rotazione dei log.

</list>

<p>
Si possono impostare questi attributi anche per le cartelle; in tal caso
nessuno può modificarne i contenuti, rinominando o rimuovendo dei file...
Applicato ad una cartella, l'attributo append permette la sola creazione di
file.

<p>
Si vede bene come l'attributo "a" aumenti la sicurezza, permettendo a
programmi non eseguiti dal superutente l'aggiunta di dati ad un file, senza
poterne modificare il contenuto preesistente. Invece, l'attributo "i" sembra
meno interessante: dopotutto, per limitare l'accesso a un file, il superutente
può già usare i permessi di base di Unix, mentre un intruso che riesca ad
assumere la qualità di superutente potrebbe sempre usare il programma
<prgn>chattr</prgn> per rimuovere l'attributo: inizialmente potrebbe
confondersi, vista l'impossibilità di spostare un file, ma non si può pensare
che sia cieco - in fondo, è pur entrato nel sistema! Per aumentarne la
sicurezza, alcuni manuali (compresa una precedente versione di questo
documento) suggeriscono semplicemente di rimuovere dal sistema i programmi
<prgn>chattr</prgn> e <prgn>lsattr</prgn>, ma questo tipo di strategia, nota
come "sicurezza mediante oscurità" deve essere evitata in assoluto, in quanto
fornisce un falso senso di sicurezza.

<p>
Un modo sicuro di risolvere questo problema è usare una funzionalità del
kernel Linux, chiamata <tt>CAP_LINUX_IMMUTABLE</tt>, come mostrato in <ref
id="proactive">: eliminandola dalle serie delle limitazioni alle funzionalità
(per esempio, col comando <tt>lcap CAP_LINUX_IMMUTABLE</tt>) non sarà più
possibile, nemmeno al superutente, modificare qualunque attributo "a" o "i"!
Un strategia completa potrebbe essere questa:

<enumlist>

  <item> Impostare gli attributi "a" ed "i" sui file desiderati;
  <item> Aggiungere il comando <tt>lcap CAP_LINUX_IMMUTABLE</tt> (o anche,
         come in <ref id="proactive">, <tt>lcap CAP_SYS_MODULE</tt>)
         a uno degli script di avvio;

<!-- Is there anything interesting in :
http://lists.debian.org/debian-security/2001/debian-security-200107/msg00024.html -->

  <item> Impostare l'attributo "i" su tale script e su altri file di avvio, o
         anche sullo stesso binario <prgn>lcap</prgn>;
  <item> Eseguire manualmente detto comando (o riavviare il sistema, per
         assicurarsi che tutto funzioni a dovere).

</enumlist>

<p>
Ora che la funzionalità è stata tolta dal sistema, un intruso non può cambiare
alcun attributo dei file protetti, né, quindi, modificarli o eliminarli. Se
forza il riavvio della macchina (unico modo per ripristinare la serie di
limitazioni alle funzionalità), sarà facilmente scoperto e comunque quella
funzionalità sarà nuovamente rimossa appena il sistema si sarà riavviato. Il
solo sistema di modificare un file protetto sarebbe inizializzare il sistema
nel modo singolo-utente o usando una altro disco di avvio, due operazioni che
richiedono un accesso fisico alla macchina!

<!-- Add a note about the fact that it is not widely used -->


<sect1 id="check-integ">Controllare l'integrità del file system

<p>
Siete sicuri che <file>/bin/login</file> sul disco fisso è ancora 
il binario installato qualche mese fa? 
Cosa accadrebbe se fosse una versione modificata, che registra
le password inserite in un file nascosto o le spedisce in 
chiaro per tutta Internet?

<p>
Il solo modo per avere qualche forma di protezione è controllare i file ogni
ora/giorno/mese (preferibile quotidianamente) confrontando gli md5sums attuali
di un file con quelli vecchi. Due file non possono avere lo stesso md5sums
(l'MD5 digest è 128 bits, quindi le possibilità che due diversi 
file abbiano lo
stesso md5sum sono approssimativamente una su 3.4e3803), perciò è il metodo
più sicuro, a meno che qualcuno non abbia modificato l'algoritmo che crea
l'md5sums sulla macchina che comunque è piuttosto complicato e improbabile.
Bisogna considerare la verifica di questi binari molto importante, poiché è un
modo semplice di riconoscere le modifiche ai binari. 
Strumenti comunemente utilizzati a questo scopo 
sono <package>sXid</package>, <package>AIDE</package> 
(Advanced Intrusion Detection Environment),
<package>TripWire</package> (non libero; la nuova versione sarà GPL), 
<package>integrit</package> e <package>samhain</package>.

<p>
Installare <prgn>debsums</prgn> 
può aiutare a controllare l'integrità del file system,
confrontando l'md5sums di ogni file con quello usato nell'archivio dei 
pacchetti di Debian. Ma attenzione, questi file possono facilmente 
essere modificati.

<p>
Inoltre si può sostituire <package>locate</package> con 
<package>slocate</package>. Slocate è una versione
avanzata per la sicurezza di GNU locate. Quando si usa slocate, l'utente vede
solo i file a cui ha realmente accesso e si può escludere qualsiasi file o
directory del sistema.

<p>
FIXME: inserire riferimenti alle immagini prese dopo l'installazione.

<p>
FIXME: aggiungere una nota relativa ai pacchetti che non forniscono debsums per
tutte le applicazioni installate.


<sect1>Impostare il controllo di setuid


<p>
Debian fornisce un processo <prgn>cron</prgn> che lavora quotidianamente in
<file>/etc/cron.daily/standard</file>. Questo processo <prgn>cron</prgn> 
lancerà lo script <prgn>/usr/sbin/checksecurity</prgn> che registra 
le informazioni su queste modifiche.

<!-- FIXME: What is the default for this in cron package? jfs -->

<p>
Per rendere possibili questi controlli bisogna impostare
<tt>CHECKSECURITY_DISABLE="FALSE"</tt> in 
<file>/etc/checksecurity.conf</file>. Nota: questa è
l'impostazione predefinita, quindi finché non si apportano modifiche, questa
opzione sarà impostata su "FALSE".

<p>
L'impostazione predefinita non invia questa informazione al super utente ma
conserva invece copie giornaliere delle modifiche 
in <file>/var/log/setuid.changes</file>.
Dovreste impostare CHECKSECURITY_EMAIL 
(in <file>/etc/checksecurity.conf</file>) su
"root" per spedirgli questa informazione. Confrontate
<manref name="checksecurity" section="8"> per
maggiori dettagli sulla configurazione.



<sect id="network-secure">Rendere sicuro l'accesso alla rete



<p>
FIXME.  Servono più contenuti (specifici per Debian)


<sect1 id="kernel-conf">Configurare le caratteristiche di rete del kernel


<p>FIXME: Contenuto mancante

<p>
Molte caratteristiche del kernel possono essere cambiate quando 
questo è in esecuzione, effettuando un echo all'interno del filesystem 
<file>/proc</file> o usando <prgn>sysctl</prgn>.
Eseguendo <tt>/sbin/sysctl -A</tt> potete vedere cosa è possibile 
configurare e quali sono le opzioni, è possibile modificarlo eseguendo
<tt>/sbin/sysctl -w variable=value</tt> (vedete 
<manref section="8" name="sysctl">). Solo in rari casi è necessaria questa
modifica ma potete comunque incrementare la sicurezza in questo 
modo. Per esempio:

<!-- FIXME: Should the prefix on all of these be /proc/sys/? era -->

<example>
net/ipv4/icmp_echo_ignore_broadcasts = 1
</example>

<p>
Questo è un <em>emulatore di Windows</em> perché funziona come Windows in
broadcast ping, se questa opzione è impostata ad 1. In pratica, le richieste
ICMP_ECHO vengono ignorate. Altrimenti, non succede nulla.

<p>
Se desiderate bloccare tutte le richieste sul sistema, abilitate questa
opzione di configurazione:

<example>
net/ipv4/icmp_echo_ignore_all = 0
</example>

<p>
Per loggare dei pacchetti destinati ad indirizzi inesistenti 
(errore dovuto ad instradamenti sbagliati) sulla propria rete, 
utilizzate:

<example>
/proc/sys/net/ipv4/conf/all/log_martians = 1
</example>

<p>
Per maggiori informazioni su ciò che può essere fatto con
<file>/proc/sys/net/ipv4/*</file> leggete
<file>/usr/src/linux/Documentation/filesystems/proc.txt</file>.
Tutte le opzioni sono descritte in maniera esauriente in
<file>/usr/src/linux/Documentation/networking/ip-sysctl.txt</file>

<footnote>
In Debian, il pacchetto <package>kernel-source-2.X.X</package> 
installa il sorgente in <file>/usr/src/kernel-souce-2.X.X</file>.
Abbiate perciò cura di sostituire il termine <em>linux</em>
con la versione del kernel installato

</footnote>.



<sect2 id="tcp-syncookies">Configurare Syncookies


<p>
Questa opzione è un'arma a doppio taglio. Da un lato, protegge
il sistema contro il syn flooding, dall'altro viola degli 
standard definiti (le RFC).

<!-- What does this mean? (jfs)
This option is quite dumb as it floods the
other side like it floods you, so the other side is also busy. 
-->

<example>
net/ipv4/tcp_syncookies = 1
</example>

<p>
Se desiderate cambiare questa opzione, ogni volta che il kernel è in
esecuzione, allora dovrete modificare <tt>/etc/network/options</tt> 
impostando <tt>syncookies=yes</tt>. 
Questo cambiamento avrà l'effetto di eseguire ogni volta lo script 
contenuto in <tt>/etc/init.d/networking</tt> (come farlo al boot), mentre 
la seguente opzione avrà effetto solamente con il kernel in esecuzione.

<example>
echo 1 > /proc/sys/net/ipv4/tcp_syncookies 
</example>

<p>
Questa opzione è disponibile solamente se il kernel è stato 
compilato con l'opzione <tt>CONFIG_SYNCOOKIES</tt>. Tutti i 
kernel Debian sono compilati con questa opzione all'interno
del nucleo, potete verificarlo eseguendo:

<example>
$ sysctl -A |grep syncookies
net/ipv4/tcp_syncookies = 1
</example>

<p>
Per maggiori informazioni sui syncookies TCP leggete
<url id="http://cr.yp.to/syncookies.html">.


<sect1 id="net-harden">Rendere sicura la rete al momento del boot


<p>
Quando impostate le opzioni del kernel relative al networking,
dovete configurarle in maniera tale che siano caricate ogni volta che
il sistema viene riavviato. L'esempio seguente abilita molte delle 
precedenti opzioni che avete visto, insieme ad altre utili opzioni.

<p>
Create lo script in <file>/etc/network/interface-secure</file> 
(il nome è dato a titolo di esempio) e chiamatelo da 
<file>/etc/network/interfaces</file>, come segue:

<example>
auto eth0
iface eth0 inet static
        address xxx.xxx.xxx.xxx
        netmask 255.255.255.xxx
        broadcast xxx.xxx.xxx.xxx
        gateway xxx.xxx.xxx.xxx
        pre-up /etc/network/interface-secure

</example>

<example>
# Script-name: /etc/network/interface-secure
# Modifies some default behaviour in order to secure against 
# some TCP/IP spoofing & attacks
#
# Contributed by Dariusz Puchalak  
#
echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts 
                                           # broadcast echo protection enabled
echo 0 > /proc/sys/net/ipv4/ip_forward     # ip forwarding disabled
echo 1 > /proc/sys/net/ipv4/tcp_syncookies # TCP syn cookie protection enabled
echo 1 >/proc/sys/net/ipv4/conf/all/log_martians 
                                           # Log packets with impossible addresses
                         # but be careful with this on heavy loaded web servers
echo 1 > /proc/sys/net/ipv4/ip_always_defrag 
                                           #  defragging protection always enabled
echo 1 > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses 
                                           # bad error message protection enabled

# now ip spoofing protection
for f in /proc/sys/net/ipv4/conf/*/rp_filter; do
        echo 1 > $f
done

# and finally some more things:
# Disable ICMP Redirect Acceptance
for f in /proc/sys/net/ipv4/conf/*/accept_redirects; do
        echo 0 > $f
done

for f in /proc/sys/net/ipv4/conf/*/send_redirects; do
      echo 0 > $f
done

# Disable Source Routed Packets
for f in /proc/sys/net/ipv4/conf/*/accept_source_route; do
        echo 0 > $f
done

# Log Spoofed Packets, Source Routed Packets, Redirect Packets
for f in /proc/sys/net/ipv4/conf/*/log_martians; do
        echo 1 > $f
done
</example>

<p>
&Egrave; anche possibile creare uno script <tt>init.d</tt> e farlo
eseguire all'avvio del sistema (usando <prgn>update-rc.d</prgn> per 
creare i collegamenti <tt>rc.d</tt> appropriati).


<sect1 id="kernel-fw">Configurare le caratteristiche di un firewall


<p>
Per avere un firewall, sia per proteggere il sistema locale o tutto quello
che si trova <em>dietro</em>, dovete compilare nel kernel le funzionalità 
del firewall. 
Il kernel standard per Debian 2.2 (anch'esso
2.2) comprende il packet filter <prgn>ipchains</prgn> 
come firewall, in Debian 3.0 è presente anche il
kernel della serie 2.4 che è invece provvisto 
di <em>stateful</em> packet filter, <prgn>iptables</prgn> (netfilter)
come firewall. Per le vecchie distribuzioni di Debian bisogna
procurarsi le appropriate patches per il kernel (Debian 2.1 adotta
il kernel 2.0.34).

<p>
In tutti i casi è vantaggioso e facile usare un kernel differente
tra quelli che Debian mette a disposizione. Potete cercare dei pacchetti
che contengano il kernel precompilato ed è semplice installarlo in un
sistema Debian. Potete anche scaricare i sorgenti del kernel usando
<package>kernel-source-X</package> e poi realizzare un 
pacchetto usando <package>make-kpkg</package>.

<p>
La configurazione del firewall sarà ampiamente trattata in
<ref id="firewall-setup">.


<sect1 id="limit-bindaddr">Disabilitare weak-end host 


<p>
I sistemi con più di un'interfaccia in differenti reti possono
avere configurati servizi come se avessero solamente un indirizzo IP
convenuto.
Normalmente ciò previene il fatto che vengano richiesti dati servizi da un
indirizzo prestabilito.
Comunque, questo non è un trucco (sebbene sia un normale malinteso), il
servizio si limita a delimitare l'indirizzo <em>hardware</em> 
(scheda ethernet).

<footnote>
Per riprodurre questo (esempio fornito da Felix von Leitner
nella mailing list bugtraq):

<example>
   host a (eth0 connected to eth0 of host b):
     ifconfig eth0 10.0.0.1
     ifconfig eth1 23.0.0.1
     tcpserver -RHl localhost 23.0.0.1 8000 echo fnord

   host b:
     ifconfig eth0 10.0.0.2
     route add 23.0.0.1 gw 10.0.0.1
     telnet 23.0.0.1 8000
</example>
<p>
Comunque, non agite con i servizi impostati per l'indirizzo
127.0.0.1, è consigliato effettuare il test usando le raw sockets.</p>

</footnote>

<p>
Questa non è un problema di ARP e altresì non è una violazione RFC
(è chiamata <em>weak end host</em> dalla
<url id="ftp://ftp.isi.edu/in-notes/rfc1122.txt" name="RFC1122">,
la trovate nel paragrafo 3.3.4.2).
Ricordate, gli indirizzi IP non hanno nulla da spartire con le interfacce
fisiche.

<p>
Nelle versione 2.2 del kernel ed anche nelle precedenti è possibile
porre rimedio con:

<example>
# echo 1 > /proc/sys/net/ipv4/conf/all/hidden
# echo 1 > /proc/sys/net/ipv4/conf/eth0/hidden
# echo 1 > /proc/sys/net/ipv4/conf/eth1/hidden
.....
</example>
<p>
Nei kernel più recenti si può ottenere lo stesso con:

<list>
<item>
Regole per iptable
<item>protocolli di instradamento debitamente configurati.

<footnote>
Il fatto che questo comportamento, possa essere modificato cambiando
l'instradamento, viene descritto da Matthew G. Marsh nei thread
di bugtraq:

<example>
eth0 = 1.1.1.1/24
eth1 = 2.2.2.2/24

ip rule add from 1.1.1.1/32 dev lo table 1 prio 15000
ip rule add from 2.2.2.2/32 dev lo table 2 prio 16000

ip route add default dev eth0 table 1
ip route add default dev eth1 table 2
</example>

</footnote>

<item>
Applicare delle patches al kernel.

<footnote>
Esistono numerose patch disponibili per ottenere questo comportamento
descritte nei thread di bugtraq, potete trovarle ai seguenti indirizzi:
<url id="http://www.linuxvirtualserver.org/~julian/#hidden">
e <url id="http://www.fefe.de/linux-eth-forwarding.diff">.
</footnote>

</list>

<p>
Nel corso di questo documento ci saranno occasioni per configurare
molti servizi (server sshd, apache, servizi di stampa...)
secondo l'ordine in cui si trovano, ascoltano ogni possibile indirizzo,
il lettore può trovare l'account in questo momento, senza sistemare
i servizi, le riparazioni non prevengono l'accesso al sistema dalla
medesima rete.

<footnote>
Un aggressore potrebbe avere molti problemi ad ottenere l'accesso
dopo la configurazione degli indirizzi IP se non si trova
nel medesimo dominio (stessa rete) dell'host sotto attacco.
Se l'attacco è rivolto ad un router è molto difficoltoso per
l'aggressore riprovare.

</footnote>

<p>
FIXME: i commenti tratti da bugtraq sono metodi specifici per proteggere
un data interfaccia in Linux.

<P>
FIXME: sottoporre un bug nei confronti di netbase per come le riparazioni alla
tabella di routing sono il comportamento standard per Debian?


<sect1>Proteggersi dagli attacchi di tipo ARP


<p>
Quando non c'è piena fiducia verso le altre postazioni sulla propria LAN
(dovrebbe essere sempre così, è l'atteggiamento più sicuro), ci si dovrebbe
proteggere dai diversi possibili attacchi di tipo ARP.

<p>
Il protocollo ARP è usato per collegare indirizzi IP a indirizzi MAC - per
tutti i dettagli vedere la 
<url name="RFC826" id="ftp://ftp.isi.edu/in-notes/rfc826.txt">.
Ogni volta che si spedisce un pacchetto a un indirizzo IP si verifica una
risoluzione ARP per trovare l'indirizzo dell'hardware interessato (in primo
luogo, consultando la cache locale di ARP; poi, se l'IP non è presente nella
cache, diffondendo un'interrogazione ARP). Tutti gli attacchi ARP mirano a
far credere ad una postazione che il proprio indirizzo IP sia associato
all'indirizzo MAC di quello dell'intruso.

<p>
Quegli attacchi (Cache poisonning, ARP spoofing - avvelenamento di cache,
falsificazioni ARP) permettono all'attaccante di intercettare il traffico anche
su reti staccate, di dirottare facilmente delle connessioni, di disconnettere
un host qualunque dalla rete... Gli attacchi ARP sono potenti e semplici da
porre in esecuzione, essendovi parecchi strumenti: arpspoof (presente nel
pacchetto <package>dsniff</package>), 
<url name="arpmim" id="http://www.team-teso.net/releases/arpmim-0.2.tar.gz">, 
<url name="arpoison" id="http://web.syr.edu/~sabuer/arpoison/">...

<p>
Tuttavia, una soluzione c'è sempre:

<list>

<item>
Usare una cache ARP statica, nella quale impostare delle voci "statiche":

<example>
arp -s host_name hdwr_addr 
</example> 

<p>
Impostando voci statiche per ciascun host importante presente nella rete,
ci si assicura che nessuno crei/modifichi per detti host una voce (falsa) -
le voci statiche non hanno scadenza e non possono essere modificate -,
cosicché le repliche ARP falsificate saranno ignorate.

<item>
Scoprire un traffico ARP sospetto: si possono usare anche 
<package>arpwatch</package>, <package>karpski</package>
o un più generico IDS che possa anche svolgere tale compito
(introduzione a <package>snort</package>, 
<url id="http://www.mandrakelinux.com/prelude">...).
<item>
Eseguire un filtraggio del traffico IP in grado di convalidare gli
indirizzi MAC.

</list>



<sect id="snapshot">Una fotografia del sistema



<p>
Prima di mettere il sistema in produzione se ne può fotografare l'attuale
stato: il risultato dell'operazione può tornare utile in caso di
compromissione (vedete il <ref id="after-compromise">). Questo procedimento
dovrebbe essere ripetuto ad ogni aggiornamento del sistema, specialmente se
si aggiorna a una nuova versione Debian.

<p>
A tale scopo si può usare un medium scrivibile e rimovibile che possa
essere impostato in sola lettura, come un floppy disk, se protetto da
scrittura dopo l'uso, o un CD aperto da un unità CD-ROM - si può usare un
CD riscrivibile, in modo da poter conservare copie di ripristino di tipo
md5 (md5sums) create in date differenti.

<p>
Il seguente listato consente la fotografia del sistema:

<example>
#!/bin/bash
/bin/mount /dev/fd0 /mnt/floppy
/bin/cp /usr/bin/md5sum /mnt/floppy
echo "Calculating md5 database"
>/mnt/floppy/md5checksums.txt
for dir in /bin/ /sbin/ /usr/bin/ /usr/sbin/ /lib/ /usr/lib/
do
   find $dir -type f | xargs /usr/bin/md5sum >>/mnt/floppy/md5checksums-lib.txt
done
/bin/umout /dev/fd0
echo "post installation md5 database calculated"
</example>

<p>
Notate che il binario md5sum punta alla periferica del floppy, così da
poterlo utilizzare, in seguito, per il controllo dei file binari del
sistema (solo nel caso di un'infezione da virus di tipo trojan).

<p>
La fotografia non comprende i file della cartella 
<file>/var/lib/dpkg/info</file>, che
racchiude le tabelle hash dei file md5, riportanti (in file con estensione
<file>.md5sums</file>) l'elenco dei 
pacchetti installati; si potrebbero copiare anche
queste informazioni, ma bisogna considerare che:

<list>

<item>
I file di tipo md5 forniti dai pacchetti Debian includono tutti i file ad
essi collegati, questo rende più voluminoso il database (5MB contro 600Kb
in un sistema Debian GNU/Linux con interfaccia grafica e circa 2,5 GB di
programmi installati).
<item>
Non tutti i pacchetti Debian forniscono file di tipo md5 che elenchino ciò
che è stato installato, dal momento che (attualmente) questa non è una
linea di condotta obbligata.

</list>

<p>
Una volta fatta la fotografia, accertatevi di impostare il medium in sola
lettura; a quel punto, si può accantonarlo per un futuro ripristino o
inserirlo nella periferica per un controllo periodico 
mediante <prgn>cron</prgn>, che confronti gli attuali file 
md5sum con quelli precedentemente "fotografati".

<sect>Ulteriori raccomandazioni



<sect1>Non usare software che dipende dalle librerie SVGA (svgalib)


<p>
SVGAlib è molto carina per gli amanti della console come me, ma è
stato provato diverse volte, in passato, che è molto insicura.
Sono stati rilasciati exploit contro <prgn>zgv</prgn> ed era semplice
utilizzarli per diventare root. 
&Egrave meglio che evitiate di usare programmi che fanno uso della 
SVGAlib, quando possibile.

<!-- FIXME: move this to policy section if there ever is one? -->





















<chapt id="sec-services">Rendere più sicuri i servizi che girano 
                         sul vostro sistema


<p>
I servizi attivi su un sistema possono essere resi più sicuri 
in due modi:

<list>

<item>
Rendendoli accessibili solo dai punti di accesso (interfacce)
per i quali sono  necessari.
<item>
Configurandoli opportunamente cosicché possano essere usati solo
dagli utenti legittimati con un metodo di autorizzazione.

</list>

<p>
Vincolare i servizi in maniera tale da renderli accessibili solo da un
luogo definito può essere fatto restringendo il loro accesso a
livello di kernel (per es.  i firewall), configurandoli in maniera tale
da ascoltare solo da una data interfaccia (alcuni servizi potrebbero
non fornire questa possibilità) o impiegando qualche altro metodo, per
esempio la patch linux vserver (per il 2.4.16) può essere
usata per obbligare i processi ad usare una sola interfaccia.

<p>
Per quanto riguarda i servizi che vengono eseguiti da 
<prgn>inetd</prgn> (<prgn>telnet</prgn>, <prgn>ftp</prgn>,
<prgn>finger</prgn>, <prgn>pop3</prgn>...), queste 
considerazioni non valgono, in quanto 
i servizi non possono essere configurati in maniera tale 
da rimanere in ascolto su una data interfaccia. 
Comunque il suo sostituto, il meta-demone <prgn>xinetd</prgn>, 
include un <tt>bind</tt> proprio a questo scopo. 
Leggete <manref name="xinetd.conf" section="5">.

<example>
service nntp
{
        socket_type     = stream
        protocol        = tcp
        wait            = no
        user            = news
        group           = news
        server          = /usr/bin/env
        server_args     = POSTING_OK=1 PATH=/usr/sbin/:/usr/bin:/sbin/:/bin
+/usr/sbin/snntpd logger -p news.info
        bind            = 127.0.0.1
} 
</example>

<p>
Le sezioni seguenti forniscono i dettagli su come configurare
opportunamente specifici servizi individuali in funzione dell'uso
previsto.



<sect>Rendere sicuro ssh



<p>
Se state ancora usando telnet invece di ssh, è meglio che passiate
a ssh prima di proseguire con la lettura di questo manuale.
Sarebbe bene utilizzare ssh invece di telnet per tutte le login remote.
In un'epoca in cui è facile intercettare il traffico su Internet e
ottenere le password 
trasmesse in chiaro, bisognerebbe usare solamente protocolli che 
utilizzano la crittografia; per questo motivo meglio eseguire 
subito <tt>apt-get install ssh</tt> sulla propria macchina.

<p>
Incoraggiate tutti gli utenti del vostro sistema ad usare
ssh invece di telnet o, ancora meglio, disinstallare 
telnet/telnetd. Oltre a quanto detto bisognerebbe evitare di autenticarsi
nel sistema come root con ssh e utilizzare invece dei 
metodi alternativi per diventare root, come 
<prgn>su</prgn> o <prgn>sudo</prgn>. Infine
meglio modificare anche il file 
<file>sshd_config</file>, in <file>/etc/ssh</file>, per
aumentare la sicurezza:

<list>
<item><tt>ListenAddress 192.168.0.1</tt> 

<p>
Fa in modo che ssh ascolti solo su una data interfaccia, nel 
caso ne abbiate più di una (e non vogliate che ssh sia disponibile
per le altre) o nel caso prevediate di aggiungere schede di rete
in futuro (e non vogliate connessioni a ssh da quest'ultime).

<item><tt>PermitRootLogin No</tt>
<p>
Cerca di impedire l'autenticazione come root quando possibile.
Se volete diventare root con ssh, ora sono necessarie due 
autenticazioni e la password di root non può essere ottenuta
con un attacco a forza bruta attraverso SSH.

<item><tt>Listen 666</tt>
<p>
Cambia la porta di ascolto, così l'intruso non può essere
del tutto certo che ci sia un demone ssh (bisogna tenere
conto che in questo caso si tratta di 
sicurezza mediante riservatezza 
(security by obscurity)).

<item><tt>PermitEmptyPasswords no</tt>
<p>
Utilizzare password vuote significa prendersi gioco della
sicurezza del sistema.

<item><tt>AllowUsers alex ref me@somewhere</tt>
<p>
Permette solo ad alcuni utenti di avere accesso alla macchina
con ssh. <tt>user@host</tt> può anche essere usato per permettere
l'accesso di un dato utente solo da un determinato host.

<item><tt>AllowGroups wheel admin</tt>
<p>
Permette l'accesso alla macchina con ssh solo ai membri di 
un determinato gruppo. AllowGroups e AllowUser hanno
regole equivalenti per negare l'accesso ad una macchina
chiamante senza sorprese, "DenyUsers" e "DenyGroups".

<item><tt>PasswordAuthentication yes</tt>

<p>
Siete liberi di scegliere come fare. &Egrave; più sicuro permettere
l'accesso alla macchina solo agli utenti le cui chiavi ssh
sono contenute nel file ~/.ssh/authorized_keys. Se questo è il
comportamento desiderato, impostate questa opzione a "no".

<!-- FIXME: what does this mean? Is it "more secure" to set this to
"no"? (era) --> <!-- jfs, IMHO yes since you place the key of the
incoming host in your server and the authentication is done against
the key -->

<item>
Disabilitare ogni forma di autenticazione non necessaria, se
non viene utilizzata; per esempio disabilitando 
<tt>RhostsRSAAuthentication</tt>, <tt>HostbasedAuthentication</tt>, 
<tt>KerberosAuthentication</tt> o <tt>RhostsAuthentication</tt>, anche se lo
sono in maniera predefinita (vedi la pagina man <manref
name="sshd_config" section="5">).

<item><tt>Protocol 2</tt>

<p>
Disabilita il protocollo versione 1, visto che ha dei
difetti di progettazione che rendono più facile corrompere (crack passwords)
le password. Per maggiori informazioni leggete 
<url id="http://paris.cs.berkeley.edu/~dawnson/papers/ssh-timing.pdf"
name="il documento relativo ai problemi del protocollo ssh">
o le <url id="http://xforce.iss.net/static/6449.php" 
          name="raccomandazioni di Xforce">.

<item><tt>Banner /etc/some_file</tt>
<p>
Aggiunge un avviso (contenuto nel file) agli utenti che si connettono a
un server ssh. In alcuni stati, per avere protezione legale,
occorre inviare un avviso prima di accedere a certo sistema 
che avvisi quando l'accesso non è autorizzato o che state
controllando gli accessi degli utenti.

</list>

<p>
Potete restringere l'accesso al server ssh anche utilizzando 
<tt>pam_listfile</tt> o <tt>pam_wheel</tt> nel file di controllo 
PAM per ssh, in
modo da limitare le autenticazioni ssh. Per esempio potreste
escludere tutti gli utenti non elencati in <file>/etc/loginusers</file>
aggiungendo questa linea a <file>/etc/pam.d/ssh</file>:

<example>
auth       required     pam_listfile.so sense=allow onerr=fail item=user file=/etc/loginusers
</example>

<p>
Come ultima osservazione dovreste considerare che queste direttive
si riferiscono ad un file di configurazione di OpenSSH. Al momento
vengono utilizzati comunemente tre demoni SSH: ssh1, ssh2 e l'OpenSSH
degli sviluppatori di OpenBSD. Ssh1 è stato il primo demone ssh
disponibile ed è ancora il più utilizzato (ci sono voci che esista
anche una versione per Windows). Ssh2 ha molti vantaggi rispetto a
ssh1 tranne per il fatto di essere rilasciato con una licenza
closed-source. OpenSSH è un demone ssh rilasciato come software
libero che supporta sia ssh1 che ssh2. OpenSSH è la versione che viene
installata in Debian quando selezionate il pacchetto <package>ssh</package>.

<p>
Potete ottenere più informazioni su come impostare SSH con il
supporto PAM negli <url
id="http://lists.debian.org/debian-security/2001/debian-security-200111/msg00395.html"
name="archivi della mailing list sulla sicurezza">.



<sect1 id="ssh-chroot">Chroot di ssh

<p>
Per ora OpenSSH non fornisce un modo per poter automaticamente
ingabbiare con chroot gli utenti dopo una connessione (la versione
commerciale invece fornisce questa possibilità). Ad ogni modo esiste
un progetto per dare questa funzionalità anche a OpenSSH, vedete
<url id="http://chrootssh.sourceforge.net">, al momento credo non sia 
disponibile il pacchetto per Debian. Potreste usare al suo 
posto il modulo <file>pam_chroot</file> come descritto in
<ref id="user-restrict">.

<p>
In <ref id="chroot-ssh-env"> potete trovare
numerose opzioni per creare un ambiente chroot per SSH.


<sect1>Client ssh

<p>
Se state usando un client SSH verso un server SSH dovreste
assicurarvi che supporti gli stessi protocolli che sono contemplati
dal server. Per esempio, se utilizzate il package <package>mindterm</package>,
supporta solo il protocollo con versione 1. Mentre, il server sshd,
in modo predefinito, è configurato per accettare solo la versione 2 (per
ragioni di sicurezza).


<sect1>Non permettere il trasferimento di file

<p>
Se <em>non</em> volete che gli utenti trasferiscano file da e verso il server
ssh dovete restringere l'accesso all'<prgn>sftp-server</prgn> 
<em>e</em> l'accesso a <prgn>scp</prgn>. 
Potete restringere il <prgn>sftp-server</prgn> configurando il corretto
<tt>Subsystem</tt> in <file>/etc/ssh/sshd_config</file>. 
Ad ogni modo, per restringere l'accesso via <prgn>scp</prgn>, dovete:

<list>

<item>
Non permettere agli utenti il login al server ssh (come
descritto sopra o attraverso il file di configurazione o con la
configurazione di PAM).
<item>
Non fornire shell valide agli utenti che non sono autorizzati a
trasferimenti sicuri. Le shell fornite, infatti, potrebbero
essere programmi che possono connettersi al server ssh che é
<!-- FIXME: What do you mean with "was useful at all" ? -->
abilitato a tutto, così come i programmi menu (tipo BBS). D'altra
parte la prima opzione è preferibile.

</list>

<sect>La sicurezza in Squid

<p>
Squid è uno dei più famosi server proxy/cache e ci sono alcuni
problemi di sicurezza che dovreste tenere presenti. Il file di
configurazione predefinito di Squid nega ogni richiesta degli utenti.
Invece il package Debian permette accessi da "localhost", dovreste
solamente configurare il vostro browser correttamente. Dovreste
configurare Squid per permettere l'accesso a utenti, host o reti
fidate definendo la Access Control List (Lista di Controllo
d'Accesso [ndT]) in <file>/etc/squid.conf</file>, vedete 
<url name="Squid User's Guide" 
     id="http://squid-docs.sourceforge.net/latest/html/book1.htm">
per ulteriori informazioni riguardo la definizione delle regole per le
ACL. Da notare che Debian fornisce una configurazione minima di
Squid, che preverrà su tutto, tranne la connessione al proprio
proxy server (che utilizzerà la porta di default 3128) da
<em>localhost</em>. Sarà necessario personalizzare il vostro
<file>/etc/squid.conf</file> a seconda delle necessità.
La configurazione minima consigliata (fornita con il pacchetto)
è mostrata qui di seguito:

<example>
acl all src 0.0.0.0/0.0.0.0
acl manager proto cache_object
acl localhost src 127.0.0.1/255.255.255.255
acl SSL_ports port 443 563
acl Safe_ports port 80          # http
acl Safe_ports port 21          # ftp
acl Safe_ports port 443 563     # https, snews
acl Safe_ports port 70          # gopher
acl Safe_ports port 210         # wais
acl Safe_ports port 1025-65535  # unregistered ports
acl Safe_ports port 280         # http-mgmt
acl Safe_ports port 488         # gss-http
acl Safe_ports port 591         # filemaker
acl Safe_ports port 777         # multiling http
acl Safe_ports port 901         # SWAT
acl purge method PURGE
acl CONNECT method CONNECT
(...)
# Only allow cachemgr access from localhost
http_access allow manager localhost
http_access deny manager
# Only allow purge requests from localhost
http_access allow purge localhost
http_access deny purge
# Deny requests to unknown ports
http_access deny !Safe_ports
# Deny CONNECT to other than SSL ports
http_access deny CONNECT !SSL_ports
#
# INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS
#
http_access allow localhost
# And finally deny all other access to this proxy
http_access deny all
#Default:
# icp_access deny all
#
#Allow ICP queries from eveyone
icp_access allow all
</example>

<p>Dovreste configurare Squid anche basandovi sulle vostre risorse
di sistema, inclusa la memoria cache (opzione <tt>cache_mem</tt>), la
locazione dei file nella cache e la quantità di spazio che occuperanno
sull'hard disk (opzione <tt>cache_dir</tt>).


<p>
Da notare che, se non correttamente configurato, qualcuno potrebbe
inoltrare un messaggio di posta tramite Squid, poiché i
protocolli HTTP e SMTP sono abbastanza simili. La configurazione predefinita
di Squid nega l'accesso alla porta 25. Se desiderate
permettere connessioni alla porta 25 aggiungetela alla lista delle
Safe_ports. Comunque, questo è <em>NON</em> raccomandato.

<p>
Impostare e configurare correttamente il server proxy/cache è solo
una parte volta a mantenere il vostro sito sicuro. Un altro compito
necessario è l'analisi dei log di squid per assicurarsi che tutto
vada come dovrebbe. Ci sono alcuni pacchetti in Debian GNU/Linux che
potrebbero aiutare un amministratore a farlo. I seguenti sono
disponibili in woody (Debian 3.0):

<list>

<item><package>calamaris</package> - Analizzatore di log per i file di 
                                     Squid e Oops.
<item><package>modlogan</package> - Un analizzatore dei file di log modulare.

<!-- This one is no longer available?
<item><package>sarg</package> - Squid Analysis Report Generator.
-->

<item><package>squidtaild</package> - Un programma per monitorare i log 
                                      di Squid.

</list>

<p>
Quando utilizzate Squid in Accelerator Mode, questo funziona anche
come web server. Utilizzando questa opzione la complessità del codice
aumenta, rendendolo meno leggibile. Di default Squid non é
configurato per funzionare come web server, dunque non vi dovete
preoccupare di ciò. Notate che se desiderate usare questa funzione
dovete essere certi che sia veramente necessaria. Per trovare più informazioni
riguardo l'Accelerator Mode in Squid vedete 
<url name="Squid User's Guide #Chapter9"
     id="http://squid-docs.sourceforge.net/latest/html/c2416.html">.


<sect id="ftp-secure">Rendere sicuro FTP

<p>
Se avete realmente la necessità di usare il servizio FTP (senza
poterlo costringere in un tunnel SSL o SSH o tramite sslwrap), 
dovreste usare chroot per ingabbiare ftp nella directory home
dell'utente ftp, cosicché l'utente non sia in grado di vedere niente
altro se non la sua directory. Altrimenti potrebbero attraversare il
filesystem principale come se avessero una shell nel sistema. Potete
aggiungere la seguente riga nel vostro <file>proftpd.conf</file> 
nella sezione globale per abilitare la funzione chroot:

<example>
DefaultRoot ~
</example>

<p>
Fate ripartire proftpd con <tt>/etc/init.d/proftpd restart</tt> e 
controllate se adesso riuscite ad uscire dalla vostra directory home.

<p>
Per prevenire gli attacchi DoS a Proftp usando ../../.., aggiungete
la seguente riga in <file>/etc/proftpd.conf</file>: <tt>DenyFilter \*.*/</tt>

<p>
Ricordate sempre che FTP spedisce login e password di
autenticazione in chiaro (questo non è un problema se state
fornendo un servizio anonimo pubblico) e ci sono alternative migliori
in Debian per questo. Per esempio, <prgn>sftp</prgn> 
(fornito da <package>ssh</package>). Ci sono
anche implementazioni libere di SSH per altri sistemi operativi:
<url id="http://www.chiark.greenend.org.uk/~sgtatham/putty/" name="putty">
e <url id="http://www.cygwin.com" name="cygwin"> per esempio.

<!-- contributed by Jesus Climent --> 

<p>
Ad ogni modo, se state mantenendo ancora il server FTP mentre
gli utenti accedono via SSH potreste incontrare un tipico
problema. Gli utenti che accedono al server FTP anonimo all'interno
del sistema SSH-sicuro potrebbero tentare di effettuare un login al
<em>server FTP</em>. Mentre l'accesso verrà rifiutato, la password verrà
spedita senza alcun dubbio attraverso la rete, in chiaro. Per
evitare questo, lo sviluppatore di ProFTPd TJ Sanders ha scritto una
patch che previene gli utenti girando al server FTP anonimo un account
SSH valido. Altre informazioni e patch disponibili alla pagina
<url id="http://www.castaglia.org/proftpd/#Patches" name="ProFTPD Patches">. 
Questa patch è stata portata in Debian, vedete il
<url id="http://bugs.debian.org/145669" name="Bug #145669">.





<sect>Rendere sicuro l'accesso al sistema X Window

<p>
Oggi, i terminali X sono usati da numerose e svariate compagnie
così un solo server è necessario per numerose postazioni singole.
Questo potrebbe essere pericoloso perché è necessario permettere al
file server di connettersi ai client (X server dal punto di vista di
X. X scambia le solite definizioni di client e server). Se seguirete il
(pessimo) suggerimento di numerosi documenti, digiterete <tt>xhost +</tt>
sulla vostra macchina. Questo permette ad ogni client X di
connettersi al sistema. Per una piccola miglioria di sicurezza, potrete
invece usare il comando <tt>xhost +hostname</tt> per permettere l'accesso da
specifici host.

<p>
Una soluzione più sicura, credo, è di usare ssh per creare un tunnel
per X e criptare <!-- FIXME: add "and compress" --> 
l'intera sessione. Questo è fatto automaticamente
quando vi connettete via ssh ad un'altra macchina. 
<!-- This has to be enabled in <file>/etc/ssh/ssh_config</file> by -->
<!-- setting <tt>X11Forwarding</tt> to <tt>yes</tt>. -->
Perché questo
funzioni dovete configurare sia il client che il server ssh. Per il
client ssh: bisognerà abilitare <tt>ForwardX11</tt> con un <tt>yes</tt> in
<file>/etc/ssh/ssh_config</file>. Per il server ssh, invece, dovrete mettere un
<tt>yes</tt> in <file>/etc/ssh/sshd_config</file> a fianco di
<tt>X11Forwarding</tt> e il
package <package>xbase-clients</package> dovrebbe essere installato
perché il server ssh usi <file>/usr/X11R6/bin/xauth</file> nel
momento in cui configura un pseudo display X.
<!-- discovered this when setting up two minimally installed boxes -->
A forza di SSH, dovreste aggirare completamente il controllo
dell'accesso con xhost.
<!-- FIXME: check. The text said "has to be disabled" [sic] -->

<p>
Per una migliore sicurezza, se non necessitate di accedere ad X da
altre macchine tagliate il legame alla porta tcp 6000 semplicemente
digitando:

<example>$ startx -- -nolisten tcp</example>

<p>
Questo è il comportamento predefinito in Xfree 4.1.0 (il server X 
fornito da Debian 3.0). Se state eseguendo Xfree 3.3.6 (cioè se si
ha Debian 2.2 installata) potete modificare
<file>/etc/X11/xinit/xserverrcc</file> per avere qualcosa di simile a:

<example>
#!/bin/sh
exec /usr/bin/X11/X -dpi 100 -nolisten tcp
</example>

<p>
Se state usando XDM impostate <file>/etc/X11/xdm/Xservers</file>  a 
<tt>:0 local /usr/bin/X11/X vt7 -dpi 100 -nolisten tcp</tt>. 
Se usate Gdm assicuratevi che l'opzione 
<tt>-nolisten tcp</tt> sia impostata in <file>/etc/gdm/gdm.conf</file>
(che è il default in Debian) così come qui sotto:

<example>
[server-Standard]
name=Standard Server
command=/usr/bin/X11/X -nolisten tcp
</example>

<p>
Potete anche impostare il timeout di sistema di default per il lock dello
<prgn>xscreensaver</prgn>. Perfino se l'utente può sovrascriverla, dovreste
modificare la configurazione 
<file>/etc/X11/app-defaults/XScreenSaver</file> e cambiare la linea di lock:

<example>
*lock:                  False
</example>

<p>
(che è il default di Debian) in:


<example>
*lock:                  True
</example>

<p>
FIXME: aggiungere informazioni su come disabilitare gli screensaver
che mostrano il desktop dell'utente (che potrebbe avere informazioni
sensibili).

<p>
Leggete di più sulla sicurezza di X Window in
<url name="XWindow-User-HOWTO" 
     id="http://www.tldp.org/HOWTO/XWindow-User-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/XWindow-User-HOWTO.txt.gz</file>).

<p>
FIXME: Aggiungere informazioni prese da un thread di debian-security su
come fare a cambiare i file di configurazione di XFree 3.3.6.



<sect1>Controllare il display manager

<p>
Se avete un display manager installato per uso locale (avete cioè un
piacevole login grafico), assicuratevi che XDMCP (Protocollo di controllo
per il Display Manager di X) sia disabilitato. In XDM questo si può
ottenere agendo sulla linea in <tt>/etc/X11/xdm/xdm-config</tt>: 

<example>
DisplayManager.requestPort:     0
</example>

<p>
Normalmente in Debian, in maniera predefinita, tutti i display manager 
sono configurati per non  lanciare i servizi XDMCP.



<sect>Rendere sicuri gli accessi alla stampante (specifico per lpd ed lprng)

<p>
Immaginate  di arrivare  al lavoro  e trovarvi  una montagna  di carta
uscita dalla stampante perché il demone di stampa ha subito un attacco
DoS. Lo trovereste piacevole?

<!-- Info based on Dale Southard's post to debian-security april 11th 2002-->
<p>
In qualsiasi architettura per la stampa in Unix, ci deve essere un modo
per ottenere dal client i dati per il server di stampa. Tradizionalmente,
<prgn>lpr</prgn> ed <prgn>lp</prgn> sono i client che si occupano di
fornire i comandi per copiare o creare dei link simbolici ai dati 
contenuti nella directory spool (che è il motivo per il quale usualmente
questi programmi sono SUID o SGID).

<p>
Per evitare questi problemi, dovreste mantenere il vostro server di stampa
particolarmente sicuro. Questo significa necessariamente, configurare il
vostro servizio di stampa per far sì che consenta connessioni solamente
dai server fidati. In merito a questo, aggiungete i server a cui volete 
consentire la stampa nel vostro <file>/etc/hosts.lpd</file>.

<p>
In ogni caso, il demone <prgn>lpr</prgn> accetta in ingresso 
connessioni sulla porta 515 da qualsiasi interfaccia. Dovreste considerare
la possibilità di usare un firewall per le connessioni  tra la rete e gli 
host a cui non è consentito stampare (così il demone <prgn>lpr</prgn>
può rimanere in attesa solo da determinati indirizzi IP).

<!-- FIXME
<p>Of course, you could also take the lpr/lprng sources
and change them so that the connect function is only done to "127.0.0.1".
apt-get source lpr
and patch the bind (finet) call
-->

<p>
<prgn>Lprng</prgn> dovrebbe essere preferito a <prgn>lpr</prgn>
visto che può essere configurato per avere il controllo sugli 
accessi IP. Potete anche specificare quale interfaccia proteggere
(sebbene piuttosto bizzarro).

<!-- FIXME: ask Craig Small about his post in debian-private 19th october 2001 
-->

<p>
Se state usando nel vostro sistema una stampante locale, probabilmente 
non desiderate condividere questo servizio sulla rete. Considerate allora
l'opportunità di usare un altro sistema di stampa, come quello fornito
da <package>cups</package> o <url name="PDQ" id="http://pdq.sourceforge.net/">
che si basa sui permessi degli utenti sul dispositivo 
<file>/dev/lp0</file>.

<p>
In <package>cups</package>, la stampa dei dati è trasferita al server 
mediante il protocollo http. Questo significa che il client non ha
bisogno di particolari privilegi, ma richiede che il server sia in
ascolto su qualche porta. 

<p>
Tuttavia, se desiderate usare <prgn>cups</prgn> in locale potete 
configurarlo proteggendo l'interfaccia di loopback, modificando il
file <file>/etc/cups/cupsd.conf</file>:

<example>
Listen 127.0.0.1:631
</example>

<p>
Vi sono molte altre opzioni per la sicurezza simili a quelle 
contenute nel file di configurazione hosts, che permettono di 
consentire o negare l'accesso dalla rete. Tuttavia, se non ne 
avete bisogno, una soluzione migliore potrebbe essere quella di 
limitare o escludere le connessioni sulle porte in attesa.
<prgn>Cups</prgn> utilizza la porta di comunicazione HTTP, se
desiderate non rendere note informazioni potenzialmente utili ad
eventuali attaccanti, aggiungete (e chiudete verso l'esterno le 
porte aperte) anche:

<example>
&lt;Location /&gt;
  Order Deny,Allow
   Deny From All
    Allow From 127.0.0.1
&lt;/Locationi&gt;
</example>

<p>
Questo file di configurazione può essere modificato aggiungendo 
ulteriori funzionalità, inclusi certificati e criptatura SSL/TLS.
Il manuale è disponibile all'indirizzo http://localhost:631/ o in
<url id="cups.org">.

<p>
FIXME: Aggiungere ulteriori contenuti (l'articolo su 
<url name="Amateur Fortress Building" id="http://www.rootprompt.org">
fornisce alcuni punti di vista molto interessanti).

<p>
FIXME: Controllare se PDG è disponibile in Debian e se lo fosse,
suggerirlo come sistema di stampa preferito.

<p>
FIXME: Controllare se Farmer/Wietse ha rimpiazzato il demone di stampa 
e se è disponibile in Debian.


<sect>Rendere sicuro il servizio di posta

<p>
Se il vostro server non fornisce servizi di posta, non avete bisogno
di avere un demone di posta in attesa di connessioni.
Potreste aver bisogno solamente di un sistema di trasporto locale, 
per esempio, per ricevere la posta dall'utente root e dagli altri 
allarmi di sistema.

<p>
Se state usando <prgn>exim</prgn> non avete bisogno di configurare
il demone, in quanto, in maniera predefinita, si assume 
<prgn>cron</prgn> il compito di svuotare la coda di posta. Vedete
<ref id="disableserv"> per sapere come questo avviene.



<sect1>Configurare un nullmailer

<p>
Potreste voler avere un demone di posta locale che 
possa ritrasmettere verso un altro sistema i messaggi spediti
localmente. Questa è una cosa comune quando dobbiamo amministrare un
certo numero di sistemi e non desideriamo connetterci ad ognuno di essi
per leggere la posta spedita localmente. Proprio come la scrittura dei
log di ogni singolo sistema può essere centralizzata usando un
server syslog centrale, la posta può essere spedita ad un server di
posta centralizzato.

<p>
Un tale sistema <em>solo-redirezione (relay-only)</em> 
dovrebbe essere propriamente
configurato per svolgere questo compito.
Il demone potrebbe anche essere configurato per rimanere in ascolto
sul solo indirizzo di loopback.

<p>
Per fare ciò in un sistema Debian, dovrete rimuovere il demone smtp
da <prgn>inetd</prgn>:

<example>
$ update-inetd --disable smtp
</example>

<p>
e configurare il demone di posta perché rimanga in ascolto sulla sola
interfaccia di loopback. In <prgn>exim</prgn> (l'MTA predefinito) 
lo potete fare modificando il file 
<file>/etc/exim.conf</file> e aggiungendo la linea seguente:

<example>
local_interfaces = "127.0.0.1"
</example>

<p>
Riavviare entrambi i demoni (inetd e exim); exim sarà in ascolto
sul solo socket 127.0.0.1:25. Fate attenzione e per prima cosa
disabilitate inetd, altrimenti exim non partirà poiché il demone inetd
sta già gestendo le connessioni in arrivo.

<p>
Per <prgn>postfix</prgn> modificate <file>/etc/postfix/main.conf</file>:

<example>
inet_interfaces = localhost
</example>

<p>
Se volete solo posta locale, questo approccio è migliore dell'uso del
tcp-wrapping sul demone di posta o dell'aggiunta di regole per il firewall
per limitarne l'accesso. Tuttavia, se avete bisogno che esso
resti in ascolto su altre interfacce, lo potreste lanciare da inetd
ed aggiungere un tcp wrapper in modo che le connessioni in arrivo
vengano controllate tramite i file <file>/etc/hosts.allow</file> e
<file>/etc/hosts.deny</file>. Inoltre, configurando un'appropriata 
scrittura dei
log per qualunque dei metodi sopra descritti, potrete sapere quando si
verifica un tentativo di accesso non autorizzato al demone di posta.

<p>
In ogni caso, per respingere i tentativi di ritrasmissione della posta
a livello di SMTP, potete cambiare <file>/etc/exim/exim.conf</file> in 
modo che contenga:

<example>
receiver_verify = true
</example>

<p>
Anche se il vostro server di posta non ritrasmetterà il messaggio,
questo tipo di configurazione è necessaria al test di
ritrasmissione che trovate all'indirizzo
<url id="http://www.abuse.net/relay.html"> per determinare che il 
vostro server <em>non</em> sia in grado di ritrasmettere.

<p>
Tuttavia, se desiderate una configurazione solo-ritrasmissione,
potreste cambiare il demone della posta con programmi che possono
<em>solo</em> essere configurati per inoltrare la posta ad un server di posta
remoto. Al momento Debian fornisce <package>ssmtp</package> e 
<package>nullmailer</package> a questo scopo. 
In ogni caso, potrete valutare da soli i vari mail transport agents

<footnote>
Per ottenere la lista dei demoni di posta disponibili in Debian
provare:

<example>
$ apt-cache search mail-transport-agent
</example>
<p>
La lista non includerà <prgn>qmail</prgn>, che è distribuito solamente 
in formato sorgente con il pacchetto <package>qmail-src</package>.
</footnote>

forniti da Debian e scegliere quello che meglio
si adatta agli scopi del sistema.


<sect1>Fornire un accesso sicuro alle mailbox

<p>
Per fornire un accesso remoto alle mailbox ci sono molti demoni
POP3 e IMAP disponibili.

<footnote>
Una lista dei server/demoni che supportano questi protocolli in
Debian la potete ottenere con:

<example>
$ apt-cache search pop3-server
$ apt-cache search imap-server
</example>
</footnote>

Tuttavia, se fornite accesso IMAP, sappiate
che questo è un protocollo di accesso generale ai file e può
diventare l'equivalente di un accesso tramite shell, mediante il
quale si porrebbero gli utenti in condizione tale da permetterne
l'accesso a qualunque file.

<p>
Provate, ad esempio, a configurare <tt>{server.com}/etc/passwd</tt> come
percorso della vostra inbox. Se vi riuscite, il demone IMAP non
è correttamente configurato per impedire questo tipo di accesso.

<p>
Tra i server IMAP disponibili in Debian il server <prgn>cyrus</prgn> (nel
pacchetto <package>cyrus-imapd</package>) risolve il problema,
facendo in modo che tutti gli accessi siano rivolti verso un database 
che risiede in una parte del file system dove l'accesso è ristretto. 
Inoltre, <prgn>uw-imapd</prgn> (installare <prgn>uw-imapd</prgn> o 
meglio, se il vostro client IMAP lo supporta, <package>uw-imapd-ssl</package>)
può essere configurato per ottenere la cartella della
posta degli utenti in chroot, ma questa funzionalità non è abilitata 
nella configurazione predefinita. La documentazione a corredo del programma
fornisce ulteriori informazioni su come configurarlo.

<p>
Inoltre, potreste voler eseguire un server IMAP che non necessiti
di utenti validi creati sul sistema locale (cosa che consentirebbe
anche l'accesso tramite shell); sia <package>courier-imap</package> 
(per IMAP) che
<package>courier-pop</package> <package>teapop</package> (per POP3) e 
<package>cyrus-imapd</package> (per POP3 e IMAP)
forniscono server con metodi di autenticazione non dipendenti dagli
account degli utenti locali. <prgn>Cyrus</prgn> può 
usare qualunque metodo di
autenticazone configurabile per mezzo di PAM, mentre <prgn>teapop</prgn> 
può usare
dei database (come <package>postgresql</package> e <package>mysql</package>) 
per l'autenticazione degli utenti.

<p>
FIXME: Controllare: anche <package>uw-imapd</package> potrebbe essere
configurato per l'autenticazione utenti attraverso PAM.


<sect1>Ricevere posta in sicurezza

<p>
Nella ricezione e lettura della posta viene impiegato il più comune
protocollo con testo in chiaro; usando sia IMAP che POP3, si
invia la propria password in chiaro,  in questo modo, da quel momento in
avanti,  quasi chiunque può leggere la nostra posta; per evitare ciò,
scaricatela usando il protocollo SSL o,  in alternativa, ssh se avete
un'account dotato di shell sulla postazione che funge da server POP o
IMAP.  Ecco un essenziale <file>fetchmailrc</file> esemplificativo:

<example>
poll my-imap-mailserver.org via "localhost"
  with proto IMAP port 1236
      user "ref" there with password "hackme" is alex here warnings 3600
    folders
      .Mail/debian
    preconnect 'ssh -f -P -C -L 1236:my-imap-mailserver.org:143 -l ref
     my-imap-mailserver.org sleep 15 &lt;/dev/null &gt; /dev/null'
</example>

<p>
La linea che inizia con "preconnect" è importante, in quanto dà il via
ad una  sessione ssh e crea il tunnel necessario, che inoltra le
connessioni al port  1236 del localhost verso il server di posta IMAP,
in modo automatico, ma  sottoponendole a cifratura. Un'altra
possibilità sarebbe usare fetchmail con la funzionalità SSL.

<p>
Se volete fornire servizi di posta cifrata, come POP e IMAP, usate
il comando <tt>apt-get install stunnel</tt> e attivate i demoni in
questo modo:

<example>
stunnel -p /etc/ssl/certs/stunnel.pem -d pop3s -l /usr/sbin/popd
</example>

<p>
Quest'ultimo comando collega il demone fornito (-l) alla porta (-d) e
utilizza lo specificato modo di certificazione SSL (-p)


<sect id="sec-bind">Rendere sicuro BIND

<p>
Esistono diversi problemi che devono essere affrontati quando andate a
rendere sicuro il demone del domain server, questi sono simili a quelli
che incontrate normalmente quando vengono resi sicuri altri servizi:

<list>

<item>
Configurare il demone stesso in modo che non possa essere possibile
abusarne dall'esterno. Questo include limitare la possibilità di richieste
da parte dei client: trasferimenti di zona e richieste ricorsive.
<item>
Limitare l'accesso del demone al server stesso di modo che, in caso di
accesso indesiderato tramite il demone, i danni al sistema siano limitati.
Questo include far girare il demone come utente non privilegiato in un
ambiente chrooted.

</list>

<p>
Dovreste limitare alcune delle informazioni che sono servite tramite 
DNS ai client esterni, di modo che non possa essere usato per
reperire informazioni importanti sulla vostra organizzazione che non volete
far sapere. Questo consiste nell'aggiungere le seguenti opzioni:
<em>allow-transfer</em>, <em>allow-query</em>,
<em>allow-recursive</em> e <em>version</em>.
Potete anche limitarli nella sezione globale (in modo che vengano
applicati in tutte le zone servite) oppure per zona. Questa informazione
è documentata nel pacchetto <package>bind-doc</package>, potete 
leggere di più su questo argomento in 
<file>/usr/share/doc/bind/html/index.html</file> una volta che
il pacchetto sarà installato.

<p>
Immaginate che il vostro server sia connesso ad Internet ed alla vostra
rete interna (il vostro IP interno è 192.168.1.2) (un server base con
due connessioni di rete), non volete offrire nessun servizio su Internet
e volete solamente abilitare il DNS Lookup dai vostri host interni.
Potete effettuare quest'operazione includendo le seguenti righe in
<file>/etc/bind/named.conf</file>:

<example>
options {
	    allow-query { 192.168.1/24; } ;
	    allow-transfer { none; } ; 
	    allow-recursive { 192.168.1/24; } ;
	    listen-on { 192.168.1.2; } ;
	    forward { only; } ;
	    forwarders { A.B.C.D; } ;
};
</example>

<p>
L'opzione <em>listen-on</em> vincola il 
DNS sull'interfaccia che ha l'indirizzo
interno e anche se questa interfaccia è la stessa che si
connette ad Internet (ad esempio se state utilizzando NAT), le richieste
saranno accettate solamente se provengono dai vostri host interni. Se
il sistema ha interfacce multiple e non è presente il parametro 
<em>listen-on</em>,
solo gli utenti interni potranno effettuare richieste, anche se, visto che
la porta sarebbe accessibile agli attacchi dall'esterno, qualcuno
potrebbe cercare di farvi mandare in crash (o provando attacchi di tipo
buffer overflow) il DNS server. Potete anche fare in modo che il DNS ascolti
unicamente su 127.0.0.1 se non dovete fornire il servizio ad altri sistemi
tranne che a voi stessi.

<p>
Il record version.bind nella classe chaos contiene la versione del
processo bind che sta girando correntemente. Questa informazione viene
spesso usata da scanner automatici o individui maliziosi con l'intento
di determinare se il bind è vulnerabile o meno ad un dato attacco.
Non fornendo informazioni o fornendole false all'interno del record
version.bind, vengono limitate le probabilità che il server venga attaccato
sulla base della versione pubblicata. Per stabilire la vostra versione
utilizzate la direttiva <em>version</em> nella seguente maniera:

<example> options { ... various options here ...
version "Not available."; }; </example>

<p>
Cambiare il record version.bind non fornisce protezione a fronte di
eventuali attacchi, ma può essere considerata un'utile salvaguardia.

<p>
Un esempio di configurazione di <file>named.conf</file> 
potrebbe essere la seguente:

<example>
acl internal {
        127.0.0.1/32;           // localhost
        10.0.0.0/8;             // internal
        aa.bb.cc.dd;            // eth0 IP
};

acl friendly {
        ee.ff.gg.hh;            // slave DNS
        aa.bb.cc.dd;            // eth0 IP
        127.0.0.1/32;           // localhost
        10.0.0.0/8;             // internal
};

options {
        directory "/var/cache/bind";
        allow-query { internal; };
        allow-recursive { internal; };
        allow-transfer { none; };
};
// From here to the mysite.bogus zone 
// is basically unmodified from the debian default
logging {
        category lame-servers { null; };
        category cname { null; };   
};

zone "." {
        type hint;
        file "/etc/bind/db.root";
};

zone "localhost" {
        type master;
        file "/etc/bind/db.local";
};

zone "127.in-addr.arpa" {
        type master;
        file "/etc/bind/db.127";
};

zone "0.in-addr.arpa" {
        type master;
        file "/etc/bind/db.0";
};

zone "255.in-addr.arpa" {
        type master;
        file "/etc/bind/db.255";
};

// zones I added myself
zone "mysite.bogus" {
        type master;
        file "/etc/bind/named.mysite";
        allow-query { any; };
        allow-transfer { friendly; };
};
</example>

<p>
Controllate il Bug Tracking System riguardo a Bind,
specificatamente il 
<url name="Bug #94760 (riguardo le ACL sui trasferimenti di zona)"
id="http://bugs.debian.org/94760">. 
Sentitevi liberi di riportare informazioni
sui bug se pensate di poter aggiungervi informazioni utili.



<sect1 id="user-bind">Cambiare l'utente di BIND

<p>
Riguardo come limitare i privilegi di BIND dovete sapere che se un utente
normale (quindi non superutente) fa partire BIND, quest'ultimo non potrà
riconoscere le nuove interfacce automaticamente, ad esempio se inserite
una scheda PCMCIA nel vostro portatile. Controllate il file README.Debian
nella vostra documentazione di named 
(<file>/usr/share/doc/bind/README.Debian</file>)
per ulteriori informazioni su questo problema. Ci sono stati recentemente
diversi problemi di sicurezza riguardanti BIND per cui cambiare utente
diviene comodo quando è possibile farlo. Spiegheremo dettagliatamente
i passi da compiere per realizzare questo procedimento, tuttavia, se volete
farlo in modo automatizzato potreste provare lo script inserito in
<ref id="bind-chuser">.

<p>
Per fare girare BIND sotto un altro utente la prima cosa da fare è creare un
utente separato ed un gruppo apposito (<em>non è</em> una buona idea usare
nobody e nogroup per tutti i servizi che non girano come root). In questo
esempio saranno utilizzati l'utente ed il gruppo <tt>named</tt>. 
Potete crearli digitando:

<example>
addgroup named
adduser --system --home /home/named --no-create-home --ingroup named \
      --disabled-password --disabled-login named
</example>

<p>
Notate che l'utente <tt>named</tt> sarà parecchio ristretto. Se volete, per
una qualsiasi ragione, avere un utente con meno limitazioni, utilizzate:

<example>
adduser --system --ingroup named named
</example>

<p>
Adesso modificate il file <tt>/etc/init.d/bind</tt> con il vostro programma
preferito la linea che inizia con

<example>
start-stop-daemon --start
</example>

in

<example>
start-stop-daemon --start --quiet --exec /usr/sbin/named -- -g named -u named
</example>

<p>
Inoltre, per evitare di far girare qualcosa come superutente, modificate
la linea di <tt>reload</tt> in:

<example>
reload)
       /usr/sbin/ndc reload
</example>

<p>e cambiatela in:

<example>
reload)
        $0 stop
        sleep 1
        $0 start
</example>

<p>
Nota: A seconda della versione di Debian che state usando potreste dover
cambiare anche la linea <tt>restart</tt>. 
Questo problema, in Debian, è stato sistemato nella versione 
<tt>1:8.3.1-2</tt> di bind.

<p>
Tutto quello che dovete fare adesso è far ripartire bind con
il comando "/etc/init.d/bind restart" e controllare il vostro syslog
nelle due voci:

<example>
Sep  4 15:11:08 nexus named[13439]: group = named
Sep  4 15:11:08 nexus named[13439]: user = named
</example>

<p>
Voilá! Il vostro named adesso <em>non</em> gira come superutente. 
Se volete leggere altre informazioni sul perché BIND non gira in 
maniera predefinita come utente non root sui sistemi Debian, 
controllate il Bug Tracking System riguardo Bind, specificatamente il 
<url name="Bug #50013: bind non dovrebbe girare come root" 
     id="http://bugs.debian.org/50013"> e il 
<url name="Bug #132582: l'installazione predefinita è potenzialmente insicura"
     id="http://bugs.debian.org/132582">,
<url name="Bug #53550" id="http://bugs.debian.org/53550">, 
<url name="Bug #52745" id="http://bugs.debian.org/52745"> ed il
<url name="Bug #128120" id="http://bugs.debian.org/128129">.
Sentitevi liberi di riportare informazioni
sui bug se pensate di poter aggiungervi informazioni utili.


<sect1 id="chroot-bind">Eseguire il name server in chroot

<p>
Per ottenere la massima sicurezza, si costruirà una gabbia chroot
(vedete in <ref id="chroot">) attorno al proprio demone. Esiste un 
modo semplice per ottenere ciò: l'opzione <tt>-t</tt> (vedete la 
pagina man <manref name="named" section="8">).
Questo farà sì che bind sia in chroot nella directory data, senza
che ci sia bisogno di impostare una gabbia chroot e senza che vi dobbiate
preoccupare delle librerie dinamiche. Gli unici file che devono
essere presenti nella gabbia chroot sono:

<example>
dev/null
etc/bind/       - deve contenere named.conf e tutte le zone dei server
sbin/named-xfer - se si fa il trasferimento dei nomi 
var/run/named/  - deve mantenere il pid e la cache del name server (se
                  presente) e questa directory deve essere accessibile
                  in scrittura dall'utente named
var/log/named   - se è impostato il logging su file, deve essere
                  accessibile in scrittura dall'utente named
dev/log         - syslogd dovrebbe essere in ascolto qui se named è
                  stato configurato per eseguire il log tramite esso
</example>

<p>
Per far sì che il demone Bind funzioni correttamente, necessita dei
permessi sui file named. Questo è un compito semplice, dal momento
che i file di configurazione sono sempre in <tt>/etc/named/</tt>. Tenete
presente che necessita solo dell'accesso in lettura ai file
di zona, a meno che non si tratti di un name server secondario o
di cache. Se questo è il caso, dovrete concedere i permessi di
lettura-scrittura alle zone necessarie (in modo che i trasferimenti 
di zona dal server primario funzionino).

<p>
Inoltre, potete trovare maggiori informazioni riguardo al 
chrooting Bind nel <url name="Chroot-BIND-HOWTO" 
id="http://www.tldp.org/HOWTO/Chroot-BIND-HOWTO.html">
(concernente Bind 9) e nel <url name="Chroot-BIND8-HOWTO" 
id="http://www.tldp.org/HOWTO/Chroot-BIND8-HOWTO.html">
(concernente Bind 8). Questi stessi documenti dovrebbero essere disponibili
attraverso l'installazione di <package>doc-linux-text</package> 
(versione testuale) oppure <package>doc-linux-html</package> 
(versione html). Un altro documento utile è 
<url id="http://www.psionic.com/papers/dns/dns-linux">.

<p>
Se siete interessati a configurare una gabbia chroot completa
(per esempio non semplicemente tramite <tt>-t</tt>) per Bind 8.2.3 
in Debian (potato), assicuratevi che i seguenti file vi 
siano contenuti:

<example>
dev/log - syslogd dovrebbe essere in ascolto qui
dev/null
etc/bind/named.conf
etc/localtime
etc/group - con una singola linea: "named:x:GID:"
etc/ld.so.cache - generata con ldconfig
lib/ld-2.1.3.so
lib/libc-2.1.3.so
lib/ld-linux.so.2 - link simbolico a ld-2.1.3.so
lib/libc.so.6 - link simbolico a libc-2.1.3.so
lib/libc.so.6 - link simbolico a libc-2.1.3.so
sbin/ldconfig - può essere cancellato dopo la configurazione del chroot
sbin/named-xfer - se si esegue il trasferimento di nomi
var/run/
</example>

<p>
Modificate inoltre <prgn>syslogd</prgn>, in ascolto su $CHROOT/dev/log in
modo che il name server possa scrivere gli eventi nel syslog del
sistema locale di log.

<p>
Se volete eliminare i problemi con le librerie dinamiche, 
potete compilare bind staticamente. Potete usare <prgn>apt-get</prgn> 
a questo scopo, con l'opzione <tt>source</tt>. Potete anche scaricare il
pacchetto che si compilerà in modo opportuno. Dovrete eseguire
qualcosa di simile a questo:

<!-- FIXME: Does bind use autoconf? -->
<example>
$ apt-get --download-only source bind build-dep bind
$ cd bind-8.2.5-2
(edit the Makefile.in so CFLAGS includes the '-static' option 
before the @CFLAGS@ definition substituted by autoconf)
$ dpkg-buildpackage -rfakeroot
$ cd ..
$ dpkg  -i bind-8.2.5-2*deb
</example>

<p>
Dopo l'installazione, dovrete spostare i file all'interno della 
gabbia chroot,

<footnote>
A meno che non utiliziate l'opzione <tt>instdir</tt> quando chiamate
<prgn>dpkg</prgn>, ma in questo caso la gabbia chroot potrebbe 
essere leggermente più complessa
</footnote>

potete mantenere gli script <tt>init.d</tt> in 
<file>/etc/init.d</file>, così il sistema avvierà 
automaticamente il name server, però dovrete modificarlo per
aggiungere <tt>--chroot /location_of_chroot</tt> nella chiamata
a <prgn>start-stop-daemon</prgn> in quegli script.

<p>Per maggiori informazioni su come configurare i chroot vedete 
<ref id="chroot">.

<p>
FIXME, integrare con informazioni da:
<url id="http://people.debian.org/~pzn/howto/chroot-bind.sh.txt">,
<url id="http://people.pdxlinux.org/~karlheg/"> (Bind9 su Debian),
<url id="http://www.cryptio.net/~ferlatte/config/"> (Debian-specifico),
<url id="http://www.psionic.com/papers/whitep01.html">,
<url id="http://csrc.nist.gov/fasp/FASPDocs/NISTSecuringDNS.htm"> e
<url id="http://www.acmebw.com/papers/securing.pdf">.



<sect>Proteggere Apache


<p>
FIXME:Aggiungere contenuto: moduli forniti con la normale installazione di
Apache (in /usr/lib/apache/X.X/mod_*) e moduli che possono essere installati
separatamente dai pacchetti libapache-mod-XXX.

<p>
Potete limitare l'accesso al server Apache se volete utilizzarlo solo
internamente, impedendo che vi accedano degli estranei (per eseguire dei
test, per accedere all'archivio <package>doc-central</package>, ecc.). 
A tale proposito, usate in <file>/etc/apache/http.conf</file> le direttive 
<tt>Listen</tt> (ascolto) o
<tt>BindAddress</tt> (indirizzo bloccato).

<p>Se usate Listen:

<example>
Listen 127.0.0.1:80
</example>

<p>Se usate BindAddress:

<example>
BindAddress 127.0.0.1
</example>

<p>
Quindi, riavviate Apache con <tt>/etc/init.d/apache restart</tt> e 
vedrete che ascolterà solamente sull'interfaccia di loopback.

<p>
In ogni caso, se non utilizzate tutte le funzionalità di Apache, si
possono considerare altri server di rete forniti da Debian, come 
<package>dhttpd</package>.

<p>
La <url name="Documentazione di Apache"
id="http://httpd.apache.org/docs/misc/security_tips.html">
informa sulle misure
di sicurezza da adottarsi per un server di rete Apache (Debian dà questa
stessa informazione con il pacchetto <package>apache-doc</package>). 
Può essere utile anche la
lettura di 
<url name="Apache Security Configuration Document (Documento su come
proteggere Apache)"
id="http://www.intersectalliance.com/projects/ApacheConfig/index.html">
fornito da <url name="InterSect Alliance"
id="http://www.intersectalliance.com/">.

<p>
Maggiori informazioni su come limitare ulteriormente l'accesso ad Apache,
impostando una gabbia di tipo chroot, le trovate in 
<ref id="chroot-apache-env">.


<sect1>Impedire agli utenti la divulgazione di contenuti di rete

<p>
L'installazione predefinita di Apache consente agli utenti di pubblicare
contenuti in <file>$HOME/public_html</file>. 
Tali contenuti possono essere raggiunti in
remoto impiegando un'URL come: http://your_apache_server/~user.

<p>
Se volete impedirlo, occorre cambiare la configurazione di
<file>/etc/apache/http.conf</file> inserendo il 
commento (#) davanti alla riga:

<example>
LoadModule userdir_module /usr/lib/apache/1.3/mod_userdir.so
</example>

<p>
Però, se il modulo fosse stato collegato in modo statico (cosa che si
verifica lanciando <tt>apache -l</tt>), dovreste aggiungere :

<example>
Userdir disabled
</example>

<p>
Nota: il lemma <tt>disabled</tt> è disponibile solo a 
partire da Apache 1.3; se utilizzate versioni precedenti, 
dovrete cambiare il file di configurazione ed aggiungere:

<!-- This can be removed since woody provides Apache 1.3 -->

<example>
&lt;Directory /home/*/public_html&gt;
    AllowOverride None
    Order deny,allow
    Deny from all
&lt;/Directory&gt;
</example> 

<p>
Un attaccante, però, può ancora eseguire il conteggio degli utenti, dal
momento che la risposta del server di rete sarà un 
<em>403 Permission Denied</em> e non un <em>404 Not available</em>.



<sect1>Permessi sui file di log

<p>
I file di log di Apache, dalla versione 1.3.22-1, sono proprietà dell'utente
"root" e del gruppo "adm", con permesso 640 - cambiato a rotazione. Senza un
ampliamento dei privilegi, un intruso che abbia avuto accesso al sistema
attraverso il server di rete non potrebbe eliminare voci vecchie dei file di
log.

<!-- FIXME: what do you mean with "this permissions are changed after -->
<!-- rotation -->


<sect1>Pubblicare file web

<p>
I file di Apache sono situati in <file>/var/www</file>. 
Subito dopo l'installazione,
il file predefinito fornisce alcune informazioni sul sistema
(principalmente sul fatto che si tratta di un sistema Debian su cui è attivo
Apache). Le pagine web predefinite sono impostate per definizione come
proprietà dell'utente root e del gruppo root, mentre il processo Apache è
eseguito come utente www-data e gruppo www-data. Questo dovrebbe
rendere più difficile la violazione del sito per chi attacca il sistema
attraverso il server di rete.



<sect>Rendere sicuro finger

<p>
Se avete intenzione di fornire il servizio finger, chiedetevi prima
se serva veramente. In caso affermativo, vi renderete conto che Debian
fornisce molti demoni finger (questo è l'output di 
<prgn>apt-cache search fingerd</prgn>):

<list>

<item>cfingerd - Un demone finger configurabile.
<item>efingerd - Un altro demone finger per unix, consente di configurare accuratamente l'output.
<item>ffingerd - Un demone finger sicuro.
<item>fingerd - Server remoto per informazioni sugli utenti.
<item>xfingerd - Demone finger in stile BSD con supporto per qmail.

</list>

<p>
<package>ffingerd</package> è il servizio finger raccomandato se 
avete intenzione di usarlo come servizio pubblico. In ogni caso 
siete invitati, quando lo configurate tramite inetd, xinetd 
o tcpserver, a: limitare il numero di processi che saranno eseguiti 
contemporaneamente, limitare gli accessi a finger da specifici 
host (usando tcp wrapper) e configurarlo in modo da 
farlo ascoltare solo sulle interfacce desiderate.

<!--
# This is quite personal, IMHO, since this is due to the fact that 
# root privileges are dropped on startup. I prefer an attacker to erase
# a service's log files than to erase all of my system's logs. Anyhow, this
# can be improved by changing user permissions after rotation.
-->


<sect id="chroot">Paranoie generiche riguardo chroot e suid

<p>
<prgn>chroot</prgn> è una delle più potenti alternative per stabilire 
restrizioni per un demone, un utente o un altro servizio. Immaginate 
una gabbia attorno al bersaglio, da cui esso non può uscire (normalmente, 
anche se ci sono comunque molte condizioni che permettono di uscirne). 
Se non vi fidate di un servizio o di un utente, potete creargli un 
ambiente root diverso. Questo ambiente può occupare una buona parte 
di spazio su disco poiché vi dovrete copiare tutti gli eseguibili e le
librerie necessarie. Anche se l'utente fa qualcosa di malizioso, la 
portata del danno è limitata a questa gabbia.

<!-- Consider removing this:
<p>A good example for this case is, if you do not authenticate against
<file>/etc/passwd</file> but use LDAP or MySQL instead. So your
ftp-daemon only needs a binary and perhaps a few libraries. A 
<prgn>chroot</prgn>ed environment would be an excellent security improvement; 
if a new exploit is found for this ftp-daemon, then attackers can only exploit
the UID of the ftp-daemon-user and nothing else. 
-->

<p>
Molti servizi eseguiti come demoni possono beneficiare di questo
genere di soluzione. Tuttavia i demoni installati dalla distribuzione
Debian  non sfrutteranno l'ambiente chroot

<footnote> 
Cercate di eseguirli con i <em>minimi privilegi</em>, cioè avviando
i demoni con il loro relativo utente, invece di eseguirli come root
</footnote> 


in modo predefinito.</p>

<p>
Questi includono: name server (come <prgn>bind</prgn>), server web 
(come <prgn>apache</prgn>), server di posta (come <prgn>sendmail</prgn>) 
e server ftp (come <prgn>wu-ftpd</prgn>).
Probabilmente è giusto dire che la complessità di BIND è il motivo per cui
è stato esposto a molti attacchi in questi anni (vedete in
<ref id="sec-bind">).

<p>
Debian fornisce del software che può aiutarvi a configurare
ambienti <prgn>chroot</prgn> automaticamente. 
Vedete <ref id="auto-chroot">.

<p>
Ad ogni modo se eseguite un qualsiasi servizio su un sistema, 
dovreste farlo nel modo più sicuro possibile. Questo comporta: 
revocare i privilegi di root, eseguirli in un ambiente ristretto 
(come una gabbia creata con chroot) o sostituirli con servizi 
equivalenti più sicuri.

<p>
Tuttavia tenete conto fin d'ora che un ambiente creato con 
<prgn>chroot</prgn> può non essere sicuro se l'utente all'interno è 
il superutente. Perciò è necessario eseguire il servizio come utente 
non privilegiato. Limitando il suo ambiente limitate i file 
leggibili/eseguibili globalmente a cui il servizio può accedere e con 
questo le possibilità di una scalata ai privilegi sfruttando 
vulnerabilità relative alla sicurezza del sistema locale.
Anche in questa situazione non si può essere completamente sicuri che 
non ci siano modi per una persona capace di uscire da questa gabbia in 
qualche modo. Usare solo programmi server che hanno la reputazione di 
essere sicuri è una buona misura precauzionale aggiuntiva. Anche buchi 
minuscoli come file di gestione aperti, possono esser usati da una 
persona capace per intromettersi nel sistema. Dopotutto 
<prgn>chroot</prgn> non è stato progettato come strumento per la 
sicurezza, ma come strumento di test.


<sect1 id="auto-chroot">Creare ambienti chroot automaticamente

<p>
Ci sono diversi programmi per ingabbiare automaticamente server e servizi
in ambienti chroot. Al momento (accettato nel maggio 2002) Debian
fornisce <prgn>chrootuid</prgn> di Wietse Venema nel pacchetto 
<prgn>chrootuid</prgn>, così come <package>compartment</package> e 
<package>makejail</package>. 
Potete usare questi programmi per configurare un ambiente limitato ed
eseguire qualunque programma (<prgn>chrootuid</prgn> permette 
addirittura di eseguirlo come un utente con restrizioni).

<p>
Alcuni di questi strumenti possono essere usati per configurare ambienti
chroot in modo semplice. Il programma <prgn>makejail</prgn>, per esempio,
può creare ed aggiornare una gabbia chroot con brevi file di 
configurazione (ne fornisce alcuni di esempio adatti per 
<prgn>bind</prgn>, <prgn>apache</prgn>, <prgn>postgresql</prgn> e 
<prgn>mysql</prgn>). Cerca di indovinare ed installare dentro la 
gabbia, tutti i file richiesti dal servizio, usando <prgn>strace</prgn>, 
<prgn>stat</prgn> e le dipendenze dei pacchetti Debian.
Ulteriori informazioni presso <url id="http://www.floc.net/makejail/">. 
<prgn>Jailer</prgn> è un programma simile che può essere scaricato 
da <url id="http://www.balabit.hu/downloads/jailer/">.

<p>
FIXME: Ci sono pacchetti pronti per jailer, aggiornare 
questa sezione quando saranno accettati in Debian

<p>
Utile per creare ambienti chroot è <package>deb.pl</package>, uno 
script che analizza le dipendenze di un insieme di file.



<sect>In generale, paranoia per le password in chiaro

<p>
Siete invitati a non mantenere nessun servizio di rete che spedisca e riceva
le password in chiaro usando FTP/Telnet/NIS/RPC. &Egrave; raccomandato
l'uso di ssh invece di telnet o di ftp.

<p>
Ricordate che questa migrazione da telnet a ssh, oppure da qualsiasi
altro protocollo che spedisca testo in chiaro non incrina la sicurezza!
La miglior cosa sarebbe quella di eliminare servizi quali ftp, telnet
pop, imap, http e sostituirli con i rispettivi servizi criptati.
Prendete in considerazione di migrare a servizi che hanno una versione SSL
quali, ad esempio: ftp-ssl, telnet-ssl, pop-ssl, https ...

<p>
La maggior parte degli esempi riportati possono essere applicati su
tutti i sistemi Unix (siete invitati a cercare altri documenti relativi
a Linux e ad altri sistemi Unix).


<sect>Disabilitare NIS

<p>
Non usate NIS, il servizio di informazioni di rete, se possibile,
perché permette la condivisione delle password.  Questo
rende il sistema molto insicuro, se non è configurato in modo ottimale.

<p>
Se avete bisogno di usare la password su più macchine, siete invitati
a considerare altre alternative.
Per esempio, potete configurare un 
server LDAP e configurare PAM nel vostro sistema in modo da fargli 
contattare il server LDAP per l'autenticazione dell'utente.  
Potete trovare una configurazione dettagliata nel 
<url name="LDAP-HOWTO" id="http://www.tldp.org/HOWTO/LDAP-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/LDAP-HOWTO.txt.gz</file>).

<p>
Altre informazioni su NIS potete trovarle nel 
<url name="NIS-HOWTO" id="http://www.tldp.org/HOWTO/NIS-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/NIS-HOWTO.txt.gz</file>).

<p>FIXME (jfs): Aggiungere informazioni su come configurarlo in Debian 


<sect id="rpc">Disabilitare i servizi RPC

<p>
Se non ne avete bisogno si consiglia di disabilitare RPC dove
possibile.

<footnote>
Ne avrete bisogno solamente se usate NFS (Network File System),
NIS (Network Information System) oppure altri servizi basati su RPC.
</footnote>

Molti buchi di sicurezza relativi ai servizi basati su RPC
sono conosciuti e possono essere facilmente sfruttati.
Occorre ricercare il giusto compromesso tra sicurezza ed usabilità
del vostro sistema.
Molti degli attacchi DDoS (rifiuto di fornire un servizio distribuito) 
usano degli exploit per rpc al fine di entrare nel sistema, questo,
è agire come uno agent/handler.  Altre informazioni sulla sicurezza con
NFS possono essere rinvenute nel
<url name="NFS-HOWTO" id="http://www.tldp.org/HOWTO/NFS-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/NFS-HOWTO.txt.gz</file>).

<p>
Disabilitare portmap è molto semplice. Esistono vari metodi.
Il più semplice dei quali in un sistema Debian 3.0 è
disinstallare il pacchetto <package>portmap</package>. 
Se usate un'altra versione potete
disabilitare questo servizio come descritto nella <ref id="disableserv">, 
questo programma è una parte del pacchetto <package>net-base</package>
(una volta disabilitato il servizio bisogna far ripartire il sistema).

<p>
Questo procedimento rimuove tutti i link a portmap presenti in
<tt>/etc/rc${runlevel}.d/</tt>, il tutto si può eseguire anche manualmente.
Un'altra possibilità è quella di cambiare i permessi, 
<tt>chmod 644 /etc/init.d/portmap</tt> ma questo comporterà in fase di 
boot un messaggio di errore. Potete altresì disabilitare lo script di shell
<tt>start-stop-daemon</tt> che si trova in 
<file>/etc/init.d/portmap</file>.



<sect id="firewall-setup">Aggiungere funzionalità al firewall

<p>
Il sistema operativo Debian GNU/Linux possiede delle funzionalità
implementate direttamente nel kernel. Se avete installato un sistema
potato (Debian 2.2) (il kernel di default è il 2.2), potete contare su
<prgn>ipchains</prgn>, sistema di firewall direttamente implementato 
nel kernel.
Se avete invece woody (Debian 3.0) (dispone del kernel 2.4)
avrete <prgn>iptables</prgn> (netfilter) come sistema di firewall.
La maggiore differenza che potete riscontrare tra 
<prgn>ipchains</prgn> e <prgn>iptables</prgn> è
che l'ultimo è basato sullo <em>stateful packet inspection</em> 
che provvede a configurazioni del filtraggio più sicure 
(e facili da realizzare).


<sect1>Proteggere il sistema locale con un firewall

<p>
Potete usare le regole di un firewall per rendere più sicuro 
l'accesso al sistema e anche per limitare le comunicazioni 
in uscita. Le regole del firewall possono anche essere 
utilizzate per proteggere i processi che non possono essere 
adeguatamente configurati per <em>non</em> fornire servizi 
ad alcune reti, indirizzi IP, etc..

<p>
Comunque, questo passaggio è presentato per ultimo in questo manuale
essenzialmente perché è <em>molto</em> meglio non 
dipendere unicamente dalle capacità di un firewall per 
proteggere un determinato sistema. La sicurezza in un sistema
è data da livelli, in cui il firewall è l'ultimo 
da includere, una volta che tutti i processi sono stati 
rinforzati. Potete facilmente immaginare un'installazione 
in cui un sistema è protetto solo dal firewall in esso
incorporato e un amministratore incautamente rimuove 
le regole del firewall per qualche motivo (problemi 
con l'installazione, fastidio, errore umano...), questo 
sistema sarebbe parecchio esposto ad un attacco se non ci 
fosse nessun altro rinforzo a proteggerlo.

<p>
D'altra parte, impostare le regole di un firewall sul sistema 
può anche prevenire il verificarsi di alcuni fatti spiacevoli. 
Anche se i servizi forniti sono configurati in modo sicuro, 
un firewall può proteggere da errate configurazioni o da 
servizi appena installati che non sono ancora stati configurati. 
Inoltre, una configurazione sicura previene il funzionamento
di trojans <em>che chiamano casa</em>, finché il codice del 
firewall non viene rimosso. Notate che un intruso <em>non</em> 
necessita di un accesso superutente per installare un 
trojan locale che possa essere controllato da remoto 
(dato che il binding sulle porte è consentito se non si 
tratta di porte privilegiate e le funzionalità non sono 
state rimosse).

<p>
Quindi, il firewall impostato correttamente dovrebbe 
essere quello con una politica di negazione predefinita, 
secondo cui:

<list>

<item>
Le connessioni in ingresso sono consentite solo ai servizi locali da macchine
autorizzate.
<item>
Le connessioni in uscita sono consentite solo a servizi utilizzati dal vostro
sistema (DNS, navigazione, pop, email...).

<footnote>
A dispetto di firewall personali in altri sistemi operativi, 
Debian GNU/Linux non fornisce (ancora) una generazione di 
interfacce per il firewall che permettano di creare regole 
limitatamente a processi o utenti. Comunque, il codice
di iptables può essere configurato per farlo 
(consultare il modulo relativo alla 
pagina di manuale <manref name="iptables" section="8">)
</footnote>

<item>
La regola di inoltro nega qualsiasi cosa (a meno che non stiate proteggendo
altri sistemi, vedere più in basso).
<item>
Tutte le altre connessioni in ingresso o in uscita sono negate.

</list>

<sect1>Utilizzare un firewall per proteggere altri sistemi

<p>
Un firewall Debian può anche essere installato per 
proteggere, con regole di filtraggio, accessi a sistemi 
<em>dietro</em> ad esso, limitando la loro esposizione su
Internet. Il firewall può essere configurato per proteggere 
i sistemi all'esterno della rete locale d'accesso a servizi 
(porte) che non sono pubblici. Per esempio, su un server 
di posta, solo la porta 25 (che fornisce il servizio di 
posta) ha bisogno di essere accessibile dall'esterno. 
Un firewall può essere configurato, anche se ci sono altri 
servizi oltre a quelli pubblici, per respingere pacchetti 
(questo è conosciuto come <em>filtraggio</em>) diretti verso di sé.

<p>
Potete anche configurare un sistema Debian GNU/Linux come bridge firewall, ad
esempio un firewall filtrante privo di indirizzo IP, completamente trasparente
alla rete e che quindi non può essere attaccato direttamente.
A seconda del kernel che avete installato potreste aver bisogno di installare 
la patch per il bridge firewall; andate quindi su 
<em>802.1d Ethernet Bridging</em> durante la configurazione del kernel e 
abilitate la nuova opzione <em>netfilter (firewalling) support</em>.
Leggete <ref id="bridge-fw"> per ulteriori informazioni 
su come meglio sfruttare questa funzionalità sul vostro sistema 
Debian GNU/Linux.

<sect1>Configurare il firewall

<p>
Naturalmente, la configurazione del firewall dipende sempre dal sistema e dalla
rete. Un amministratore deve conoscere anticipatamente qual'è la struttura di
rete ed i sistemi che vuole proteggere, i servizi che hanno bisogno di fornire
accesso e se tenere presente o meno altre considerazioni di rete (come NAT o
routing). Prestate attenzione durante la configurazione del firewall, come dice
Laurenc J. Lane nel pacchetto <package>iptables</package>:

<p>
<em>&Egrave; facile fare un cattivo uso degli strumenti, causando gravi 
danni e bloccando completamente l'accesso di rete ad un sistema. 
Non è così raro per un amministratore di un sistema remoto restarne
bloccato fuori a centinaia o migliaia di chilometri di distanza.  
Può anche succedere di bloccare l'accesso al computer che si ha sotto 
le dita. Quindi, usate la dovuta cautela.</em>

<p>
Ricordate: la semplice installazione di <package>iptables</package> 
(o di altri programmi per gestire firewall) 
non dà nessuna protezione, fornisce solamente il software. 
Per poter avere un firewall è necessario <em>configurarlo</em>!

<p>
Se non conoscete abbastanza un firewall, leggete il Firewalling-HOWTO che 
trovate nel pacchetto <package>doc-linux-text</package> (sono disponibili 
altri formati del documento). Consultate <ref id="references"> per
indicazioni (generali).


<sect2>Farlo alla Debian

<p>
Se state usando la versione 3.0 di Debian, noterete che il pacchetto
<package>iptables</package> viene installato. &Egrave; il supporto 
per l'implementazione di netfilter per i kernel 2.4.4 e superiori. 
Dal momento che subito dopo l'installazione il sistema 
<em>non può </em> conoscere le regole del firewall (le regole per 
il firewall sono troppo specifiche del sistema), dovete 
esplicitamente abilitare iptables. Tuttavia, gli script sono stati 
configurati per consentire all'amministratore di 
impostare le regole del firewall, in modo che gli script di init 
possano <em>conoscerle</em> ed usarle sempre come impostazione 
per il firewall.

<p>A tale scopo dovete:

<list>

<item>
Configurare il pacchetto in modo che parta con il sistema.
Con le nuove versioni (dalla 1.2.6a-1) questo viene chiesto
in fase di installazione. Potete comunque configurarlo in
seguito con <tt>dpkg-reconfigure -plow iptables</tt>. 
<em>Note</em>: nelle versioni precedenti questo veniva fatto 
modificando <file>/etc/default/iptables</file> in modo tale 
che la variabile <tt>enable_iptables_initd</tt> fosse impostata 
a <em>true</em>.
<item>
Creare un'impostazione del firewall usando iptables, potete
usare programmi a riga di comando (vedete 
<manref name="iptables" section="8">) o
alcuni strumenti forniti dal pacchetto Debian firewall
(vedete in <ref id="firewall-pack">).
Dovete creare un'insieme di regole per il firewall da utilizzare 
quando il firewall è <em>attivo</em> e uno da utilizzare 
quando il firewall è <em>inattivo</em> (queste possono 
semplicemente essere regole vuote).
<item>
Salvare le regole create usando 
<tt>/etc/init.d/iptables save_active</tt> ed
<tt>/etc/init.d/iptables save_active</tt> eseguendo questi script 
con le regole del firewall che desiderate attive.

</list>

<p>
Una volta fatto ciò, le impostazioni per il vostro firewall sono
salvate nella directory <file>/var/lib/iptables/</file> e saranno 
eseguite ad ogni avvio del sistema (o quando vengono eseguiti gli 
script di inizializzazione con gli argomenti <em>start</em> e 
<em>stop</em>). Si noti che le impostazioni predefinite di Debian 
avviano il firewall nei runlevel multiutente (da 2 a 5) molto 
presto (10). Inoltre il firewall viene arrestato quando il sistema 
va in monoutenza (runlevel 1), cambiate questa impostazione se non 
è conforme alla vostra politica locale.

<p>
Se non avete idea su come impostare le vostre regole di firewall
manualmente, consultate il <em>Packet Filtering HOWTO</em> ed il 
<em>NAT HOWTO</em>, forniti con <package>iptables</package> per la 
lettura offline in <file>/usr/share/doc/iptables/html/</file>. 
Anche il file di configurazione <file>/etc/default/iptables</file> 
fornisce ulteriori informazioni sulle problematiche connesse a 
questo pacchetto.


<sect2 id="firewall-pack">Utilizzare il pacchetto Firewall

<p>
Impostare manualmente un firewall può essere complicato per un
amministratore inesperto (e a volte anche per uno esperto). Tuttavia la
comunità del software libero ha creato numerosi strumenti da utilizzare
per la configurazione di un firewall locale. Siete avvertiti che alcuni
strumenti sono molto orientati alla sola protezione locale (altresì nota
come <em>firewall personale</em>), mentre altri sono più versatili 
e possono essere utilizzati per configurare regole complesse in modo 
da proteggere un'intera rete.

<p>
Alcuni software che possono essere utilizzati per impostare 
le regole di firewall su un sistema Debian sono:

<list>

<item>
<package>firestarter</package>, orientato agli utenti finali, 
include una semplice procedura per l'impostazione delle regole 
del firewall
<item><package>knetfilter</package>
<item>
<package>fwbuilder</package>, una GUI orientata agli oggetti, che 
include compilatori di politiche per varie piattaforme di 
firewall, che comprendono iptables, così come le liste di 
accesso per router.
<item>
<package>shorewall</package> fornisce supporto per IPsec, oltre ad
un limitato supporto per la regolazione del traffico, così come la 
definizione delle regole per il firewall.
<item>
<package>mason</package>, che può proporre regole di firewall in base 
al traffico che "vede" il vostro sistema.
<item>
<package>bastille</package> (tra le iniziative più efficaci che possono 
essere inserite nelle nuove versioni di bastille c'è la possibilità di 
aggiungere regole per il firewall da eseguire all'avvio del sistema).
<item><package>ferm</package>
<item><package>fwctl</package>
<item><package>easyfw</package>
<item><package>firewall-easy</package>
<item><package>ipac-ng</package>
<item><package>gfcc</package>
<item><package>lokkit</package> o <package>gnome-lokkit</package>
</list>

<p>
Gli ultimi pacchetti: gfcc, firestarter e knetfilter sono GUI per
l'amministrazione che utilizzano GNOME (i primi due) o KDE (l'ultimo),
molto più orientate all'uso da parte di utenti (amministratori di sistemi
casalinghi), rispetto agli altri pacchetti della lista che possono essere
considerati più orientati all'uso da parte di amministratori.

<p>
Siete avvisati che alcuni pacchetti descritti precedentemente
utilizzeranno script per firewall da eseguire all'avvio del sistema,
questo andrà certamente in conflitto con l'impostazione classica (se
configurata) producendo effetti non desiderati. Di solito lo script per il
firewall che viene eseguito per ultimo sarà quello che configura il
sistema (che potrebbe essere quello che non volete). Consultate la
documentazione del pacchetto ed utilizzate soltanto una di queste
impostazioni. Generalmente, altri programmi che vi aiutano ad impostare
regole per il firewall possono modificare leggermente i file di
configurazione.

<p>FIXME: Aggiungere informazioni riguardanti questi pacchetti

<p>FIXME: Controllare le informazioni sul firewall di Debian e 
cosa/come cambia dalle altre distribuzioni

<p>
FIXME: Dove dovrebbe essere abilitato il codice per il firewall
personalizzato (domanda comune in debian-firewall?)

<p>
FIXME: Aggiungere informazioni su Zorp 
<url id="http://www.balabit.hu/downloads/zorp/debian/" name="Zorp">
in Debian 
(vedete il <url id="http://bugs.debian.org/88347" name="Bug #88347">. 
I pacchetti Debian sono disponibili ma dipendono da libglib1.3 che non è 
ancora disponibile nella distribuzione Debian).




<chapt>Irrobustimento automatico di un sistema Debian



<p>
Dopo aver letto tutte le informazioni dei capitoli precedenti
potreste chiedervi "Devo fare molte cose per rendere sicuro il mio
sistema, non potrebbero essere automatizzate?". La risposta è si, ma
fate attenzione agli strumenti automatizzati. Alcune persone
credono che uno strumento di irrobustimento non elimini il bisogno di
una buona amministrazione. Perciò non pensate stupidamente che si
possa automatizzare l'intero processo e risolvere i problemi
correlati. La sicurezza è un processo continuo al quale
l'amministratore deve partecipare e al quale non può solo assistere e
lasciare che gli strumenti svolgano il loro lavoro. 
Non esiste un solo strumento che possa risolvere problemi per 
tutte le possibili implementazioni delle politiche di sicurezza, 
tutti i tipi di attacchi e tutti gli ambienti.

<p>
Dall'uscita di woody (Debian 3.0) esistono due pacchetti specifici che
sono utili per aumentarne la sicurezza. Il pacchetto
<package>harden</package> che
utilizza un approccio basato sulle dipendenze dei pacchetti per
installare rapidamente i pacchetti relativi alla sicurezza certa e rimuovere
quelli con dei problemi, la configurazione dei pacchetti deve essere
fatta dall'amministratore. Il pacchetto <package>bastille</package> 
che implementa una data politica di sicurezza su un sistema locale,
basata su una precedente configurazione fatta dall'amministratore 
(la configurazione può essere effettuata rispondendo con sì od un 
no a delle semplici domande).


<sect>Harden

<p>
Il pacchetto <package>harden</package> tenta di rendere più semplice 
l'installazione e l'amministrazione degli host che necessitano di una 
buona sicurezza.
Questo pacchetto dovrebbe essere usato da persone che desiderano un
piccolo aiuto per aumentare la sicurezza del sistema. Per fare
questo entra in conflitto con i pacchetti che hanno problemi, includendo
(ma non limitandosi solamente a questo): buchi di sicurezza noti (come buffer
overflow), uso di password in chiaro, mancanza di controllo
d'accesso, etc. Installa anche automaticamente alcuni tool che possono
fornire una sicurezza maggiore in qualche modo: strumenti per il
rilevamento delle intrusioni, strumenti di analisi della sicurezza,
etc. Harden installa i seguenti pacchetti <em>virtuali</em> (cioè non 
hanno contenuto, ma solo dipendenze su altri):

<list>

<item>
<package>harden-tools</package>: strumenti che aumentano la 
sicurezza del sistema (controllo d'integrità, rilevamento delle 
intrusioni, patch al kernel...)
<item>
<package>harden-doc</package>: fornisce questo manuale e altri pacchetti di
documentazione relativi alla sicurezza.
<item>
<package>harden-environment</package>: aiuta a configurare un ambiente 
più robusto (al momento vuoto).
<item>
<package>harden-servers</package>: rimuove i server considerati insicuri 
per qualche ragione.
<item>
<package>harden-clients</package>: rimuove i client considerati insicuri
per qualche ragione.
<item>
<package>harden-remoteflaws</package>: rimuove i pacchetti con 
buchi di sicurezza conosciuti, che possono essere usati da un 
attaccante remoto per compromettere il sistema 
(usa <em>Conflicts:</em> sulle versioni).
<item>
<package>harden-localflaws</package>: rimuove pacchetti con buchi di 
sicurezza noti che possono essere usati da un attaccante locale 
per compromettere il sistema (usa <em>Conflicts:</em> sulle versioni).
<item>
<package>harden-remoteaudit</package>: strumenti per un controllo 
remoto di un sistema.

</list>

<p>
Fate attenzione perché se avete software di cui avete necessità
(e che non volete disinstallare per qualche motivo) che entra in
conflitto con qualcuno dei pacchetti qui sopra, potreste non essere
in grado di usare pienamente <package>harden</package>.
I pacchetti di harden non  fanno nulla (direttamente). 
Ad ogni modo, hanno dei conflitti con dei
pacchetti conosciuti per la non sicurezza. In questo modo, il sistema
di packaging di Debian non approverà l'installazione di questi
pacchetti. Per esempio, quando tenterete di installare un demone
telnet con <package>harden-servers</package>, <package>apt</package> dirà:

<example>
# apt-get install telnetd 
The following packages will be REMOVED:
	harden-servers
The following NEW packages will be installed:
telnetd 
Do you want to continue (Y/n)
</example>

<p>
Questo dovrebbe far nascere qualche dubbio nella testa
dell'amministratore che, a questo punto, dovrebbe 
riconsiderare questa azione.


<sect>Bastille Linux

<p>
<url name="Bastille Linux" id="http://www.bastille-linux.org"> 
è uno strumento automatico per 
migliorare la sicurezza, originariamente pensato per le distribuzioni Red Hat 
e Mandrake; ciononostante, il pacchetto <package>bastille</package> è 
stato riveduto e corretto 
per offrire le identiche funzionalità anche al sistema Debian GNU/Linux (in 
cui è presente a partire dalla distribuzione woody).

<p>
Bastille può essere utilizzato con diversi frontend (sono tutti documentati 
nella rispettiva pagina man inclusa nel pacchetto Debian), ciò permette 
all'amministratore di:

<list>

<item>
Rispondere punto per punto a domande riguardanti il livello di sicurezza 
desiderato (mediante <manref name="InteractiveBastille" section="8">).
<item>
Scegliere una fra le tre impostazioni di sicurezza  predefinite 
(Lax, Moderate o Paranoia - Lassista, Moderata o Paranoica) e lasciare che 
Bastille adotti una linea di condotta conseguente (mediante 
<manref name="BastilleChooser" section="8">), a seconda che la macchina 
funzioni da server o da semplice postazione di lavoro.
<item>
Usufruire di un file di configurazione predefinito (fornito da Bastille o 
creato dall'amministratore) e seguire una data strategia per la sicurezza 
(mediante <manref name="AutomatedBastille" section="8">).

</list>




<chapt>Infrastrutture per la sicurezza in Debian




<sect id="debian-sec-team">Il Security Team in Debian

<p>
L'aspetto sicurezza nella distribuzione <em>stable</em> è trattato da 
un gruppo di 
persone - il Security Team, composto da cinque membri e due segretari - che 
seguono i problemi di vulnerabilità dell'ambiente software, partecipando a 
forum come bugtraq o vuln-dev e stabiliscono se la 
distribuzione <em>stable</em> ne sia interessata.

<p>
Quando i problemi non sono specifici solo di Debian, il Security Team 
è anche un punto di riferimento per quei problemi che potrebbero interessare 
più distributori e la cui disamina sia coordinata da sviluppatori di versioni 
ancora in fase progettuale o da organizzazioni come il 
<url id="http://www.cert.org" name="CERT">. 
Potete contattare il Security Team tramite:

<list>

<item>
<url id="mailto:team@security.debian.org" name="team@security.debian.org">, 
letta solo dai  membri del team stesso;
<item>
<url id="mailto:security@debian.org" name="security@debian.org">
letta da tutti gli sviluppatori di Debian, oltre che dai membri del team. 
Le lettere spedite a questo indirizzo non sono pubblicate in Internet, 
non essendo questa una mailing list pubblica.

</list>

<p>
Le informazioni sensibili vanno spedite al primo indirizzo e in alcuni casi, 
sottoposte a cifratura con la chiave Debian per il contatto sicuro 
(ID della chiave con ID 363CCD95).

<p>
Una volta che la segnalazione di un possibile problema arriva al Security 
Team, questo cercherà di scoprire se la distribuzione <em>stable</em> ne sia
interessata e in tal caso, verrà elaborata una correzione per il codice 
sorgente di base. Questa correzione, a volte, include la rielaborazione di 
qualche adattamento progettuale (creato, di solito, per versioni successive a 
quella attualmente in distribuzione). Dopo un controllo sulla correzione, 
nuovi pacchetti vengono preparati e pubblicati sul sito 
<url id="security.debian.org">, in modo da essere disponibili tramite 
<prgn>apt</prgn> (vedete <ref id="security-update">). 
Allo stesso tempo, viene pubblicato sul sito e spedito alle 
mailing list pubbliche (comprese bugtraq e 
<url id="lists.debian.org/debian-security-announce" name="debian-security-announce">) 
un DSA (<em>Debian Security Advisory</em> - avviso sulla sicurezza in Debian).

<p>
Potete trovare altre "domande frequenti" nella 
<ref id="debian-sec-team-faq">.


<sect id="dsa">Avvisi di sicurezza Debian

<p>
Gli avvisi di sicurezza Debian (Debian Security Advisories)
vengono emessi ogni volta che si scopre una
vulnerabilità di sicurezza relativa ad un pacchetto Debian. Questi avvisi,
firmati da un membro del Security Team, includono informazioni sulla
versione colpita ed indicano dove scaricare gli aggiornamenti ed il loro 
MD5sums. Le informazioni sono:

<list>

<item>Numero di versione della correzione.
<item>Tipo di problema.
<item>Se la vulnerabilità è sfruttabile da remoto e da locale.
<item>Breve descrizione del pacchetto.
<item>Descrizione del problema.
<item>Descrizione dell'exploit.
<item>Descrizione della correzione.

</list>

<p>
Gli avvisi di sicurezza (DSA) sono pubblicati sia sulla pagina 
<url id="http://www.debian.org/" name="principale del sito Debian">
che nelle 
<url id="http://www.debian.org/security/" 
     name="pagine dedicate alla sicurezza in Debian">.
Di solito questo non accade sinché il sito non viene aggiornato 
(una volta al giorno), quindi potrebbero non essere presenti
immediatamente; il canale preferenziale è la mailing list
debian-security-announce.

<p>
Gli utenti interessati possono comunque (e questo viene fatto in alcuni
portali relativi a Debian) utilizzare il canale RDF per scaricare 
automaticamente gli avvisi di sicurezza sul loro desktop. Alcune 
applicazioni, come <prgn>Evolution</prgn> (un client e-mail ed assistente 
per informazioni personali) e <prgn>Multiticker</prgn> (un'applet
di GNOME), possono essere usate per reperire gli avvisi automaticamente. Il
canale RDF è disponibile su <url id="http://www.debian.org/security/dsa.rdf">.

<p>
Gli avvisi di sicurezza pubblicati sul sito potrebbero essere aggiornati dopo
essere stati spediti alle mailing-list pubbliche. Un aggiornamento tipico è
aggiungere riferimenti incrociati ai database delle vulnerabilità di sicurezza
come <url id="http://cve.mitre.org" name="CVE">, 
<url id="http://www.cert.org" name="CERT/CC vulnerability notes">
oppure <url id="http://www.securityfocus.com/bid/" name="Bugtraq">. 
Questa caratteristica è stata aggiunta al sito nel Giugno 2002.

<p>
Uno dei vantaggi dell'aggiungere riferimenti incrociati a questi database di
vulnerabilità è che:


<list>
<item>
Rende agli utenti Debian più facile vedere e tenere traccia di quali avvisi
pubblicati sono già stati coperti da Debian.
<item>
Gli amministratori di sistema possono imparare di più sulle vulnerabilità 
ed il loro impatto seguendo i riferimenti incrociati.
<item>
Queste informazioni possono essere usate per fare controlli incrociati con
l'output degli scanner di vulnerabilità che includono riferimenti a CVE per
rimuovere falsi allarmi (vedete in <ref id="vulnasses-false-positive">).

</list>


<sect>La costruzione dell'infrastruttura di sicurezza in Debian


<p>
Poiché Debian supporta attualmente un grande numero di 
architetture, gli amministratori a volte si sorprendono se una 
determinata architettura impiega più tempo per ricevere gli 
aggiornamenti per la sicurezza rispetto ad un'altra. &Egrave; 
un dato di fatto, tranne in rare circostanze, che gli 
aggiornamenti siano disponibili per tutte le architetture allo 
stesso tempo.

<p>
In precedenza il lavoro di costruzione degli aggiornamenti di sicurezza
veniva fatto a mano, oggi non più (come Anthony Towns descrive in una mail
inviata alla mailing list debian-devel-announce datata 8 giugno 2002).
<p>
FIXME: aggiungere puntatore.

<p>
I pacchetti sono aggiornati dal Security Team (in 
<url id="security.debian.org:/org/security.debian.org/queue/unchecked"> o in
<url id="ftp://security.debian.org/pub/SecurityUploadQueue">,
con una patch appropriata
viene verificata la firma entro quindici minuti dall'aggiornamento, una volta
fatto, vengono aggiunti alla lista degli autobuilder (che non eseguono 
più di un archivio al giorno). 
Comunque, i pacchetti vengono costruiti automaticamente
per <em>tutte</em> le architetture mezz'ora o un'ora circa dopo
l'aggiornamento. In ogni caso, gli aggiornamenti di sicurezza sono un po'
differenti dai normali aggiornamenti inviati dai manutentori dei pacchetti
poiché, in alcuni casi, prima di essere pubblicati devono aspettare di essere
testati più a fondo, o deve essere scritto un avviso, o hanno bisogno di una
settimana o più per evitare di pubblicare i problemi, finché tutti i
distributori non hanno la concreta possibilità di correggerlo.

<p>
L'archivio aggiornamenti di sicurezza funziona con la seguente procedura
(chiamata <em>"Autocostruzione-Accettata"</em>):

<list>

<item>Qualcuno scopre un problema di sicurezza.
<item>
Qualcuno risolve il problema e fa un aggiornamento su 
security.debian.org incoming (questo <em>qualcuno</em> è solitamente 
un membro del Security Team ma può anche essere un manutentore 
di un pacchetto con una correzione appropriata che ha contattato il 
Security Team in precedenza). Il changelog include un 
<em>testing-security</em> o <em>stable-security</em> come
distribuzione finale.
<item>
L'aggiornamento viene controllato e verificato da un sistema 
Debian e spostato in coda/accettato e gli sviluppatori vengono avvisati. 
Ai file che si trovano qui accede il Security Team e 
(a volte indirettamente) gli sviluppatori.
<item>
I buildd con abilitazione alla sicurezza,  prendono il 
pacchetto sorgente (con una priorità maggiore delle normali 
costruzioni di pacchetti), lo costruiscono ed inviano i log al Security Team.
<item>
Il Security Team risponde ai log e i nuovi pacchetti costruiti sono
caricati in coda/non_verificata, dove vengono controllati da un sistema
Debian e spostati in in_coda/accettati.
<item>
Quando il Security Team trova il pacchetto 
sorgente accettabile (ovvero, che è stato correttamente 
costruito per tutte le architetture applicabili e che 
corregge i buchi di sicurezza senza introdurne di nuovi) 
lancia uno script che:

<list>
<item>Installa il pacchetto nell'archivio di sicurezza.
<item>
Aggiorna i file Packages, Sources e Release di security.debian.org 
nel solito modo (<prgn>dpkg-scanpackages</prgn>, 
<prgn>dpkg-scansources</prgn> ...).
<item>
Imposta un template dell'avviso che il Security Team può completare.
<item>
(opzionalmente) inoltra il pacchetto agli appropriati aggiornamenti 
proposed-updates così che possa essere incluso nel vero archivio 
il più presto possibile.

</list>

</list>

<p>
Questa procedura, precedentemente fatta a mano, è stata testata ed 
immessa nello stadio di congelamento di Debian 3.0 woody (luglio 2002). 
Grazie a questa infrastruttura, il Security Team è stato in 
grado di avere pacchetti aggiornati pronti per le uscite di Apache ed 
OpenSSH per tutte le architetture supportate (quasi venti), in meno 
di un giorno.


<sect1>Guida degli sviluppatori agli aggiornamenti sulla sicurezza


<p>
Questa mail è stata inviata da Wichert Akkerman alla
<url 
id="http://lists.debian.org/debian-devel-announce/2002/debian-devel-announce-200206/msg00004.html"
name="mailing list Debian-devel-announce">
per descrivere il comportamento degli sviluppatori Debian in relazione ai
problemi di sicurezza nei loro pacchetti. &Egrave; stata pubblicata qui, 
sia a beneficio degli sviluppatori, che per gli utenti, al fine di 
comprendere meglio come la sicurezza è gestita in Debian.

<p>
Notate che il riferimento aggiornato per queste informazioni è la 
<url id="http://www.debian.org/doc/manuals/developers-reference/ch-pkgs.en.html#s-bug-security" name="Guida per gli sviluppatori Debian">, questa sezione 
sarà rimossa nelle prossime uscite.


<sect2>Coordinarsi con il Security Team


<p>
Se uno sviluppatore viene a conoscenza di un problema di sicurezza, in un suo
pacchetto o in quello di qualcun altro, dovrebbe sempre contattare il 
Security Team (presso team@security.debian.org). &Egrave; loro compito tenere 
traccia dei nuovi problemi di sicurezza, possono aiutare i manutentori 
con i problemi di sicurezza o risolverli, sono responsabili dell'invio degli 
avvisi di sicurezza e della manutenzione di security.debian.org.

<p>
Notate che gli avvisi di sicurezza sono effettuati solo per le distribuzioni di
rilascio, non per quelle di prova, instabili (vedete <ref id="sec-unstable">) 
o per le distribuzioni più datate (vedete <ref id="sec-older">).


<sect2>Venire a conoscenza di un problema di sicurezza


<p>
Ci sono vari modi in cui uno sviluppatore può venire a 
conoscenza di un problema di sicurezza:

<list>
<item>Lo nota su un forum pubblico (mailing list, website, etc.).
<item>
Qualcuno archivia un bugreport (il tag <em>Sicurezza</em> 
dovrebbe essere utilizzato o aggiunto dallo sviluppatore).
<item>Qualcuno lo informa con una mail privata.

</list>

<p>
Nei primi due casi l'informazione è pubblica ed è importante rimediare il più 
presto possibile. Nell'ultimo caso l'informazione potrebbe non essere pubblica
e in quel caso ci sono varie possibilità per trattare il problema:

<list>

<item>
Se si tratta di un problema banale (come file temporanei non sicuri) non c'è
necessità di tenere segreto il problema e potete realizzare una soluzione 
e rilasciarla.
<item>
Se il problema è rilevante, (exploit remoti, possibilità di ottenere privilegi
di root) è consigliabile condividere l'informazione con altri produttori e
coordinare il rilascio. Il Security Team tiene i contatti con varie
organizzazioni ed individui e può occuparsene.

</list>

<p>
In ogni caso, se la persona che riporta il problema chiede di non rilasciare
l'informazione deve essere rispettata la sua decisione, con l'ovvia eccezione 
di informare il Security Team (lo sviluppatore dovrebbe avvertire
il Security Team che l'informazione non può essere resa nota).

<p>
Notate che se è necessaria la segretezza, lo sviluppatore può anche non
fornire un rimedio alle instabili (o altro), poiché il log di
informazione delle modifiche per le instabili è di dominio pubblico.

<p>
Ci sono due ragioni per rilasciare informazioni anche se la segretezza è
richiesta/necessaria: il problema è noto da troppo tempo, o l'informazione
diventa pubblica.


<sect2>Creare un pacchetto


<p>
Il codice di comportamento più importante quando si crea un nuovo 
pacchetto che corregge un problema di sicurezza è di apportare il 
minor numero di modifiche possibili.
La gente fa affidamento su un determinato comportamento di un 
programma, una volta rilasciato, quindi ogni modifica fatta può
compromettere un sistema. Questo è vero soprattutto per le librerie: 
lo sviluppatore deve accertarsi di non aver cambiato l'API o l'ABI
con qualunque modifica, per quanto minima, possa aver apportato.

<p>
Questo significa che passare ad una versione più recente non è
una buona soluzione; invece sarebbe bene introdurre le modifiche
nella vecchia. Di solito i manutentori della versione recente sono 
disponibili se serve aiuto, altrimenti il Security Team di
Debian potrebbe dare una mano.

<p>
Talvolta non è possibile introdurre aggiornamenti per la sicurezza 
in versioni precedenti, per esempio quando sarebbe necessario 
modificare o riscrivere gran parte del codice. In questo caso 
sarebbe necessario passare ad una nuova versione, ma questo
passaggio va coordinato prima con il Security Team.

<p>
In relazione a questo c'è un altro aspetto da considerare: gli
sviluppatori devono testare le vostre modifiche. Se esiste un 
exploit, lo sviluppatore deve provare se effettivamente la versione
originale è vulnerabile e se quella modificata non lo è. 
Lo sviluppatore deve anche testare il pacchetto nell'uso normale, 
visto che a volte una correzione per la sicurezza può portare a 
malfunzionamenti nell'uso ordinario.

<p>Per finire, gli sviluppatori devono ricordare alcuni dettagli tecnici:

<list>
<item>
Ricordare di riferirsi alla distribuzione giusta nel file
debian/changelog. Nel caso di stable si fa riferimento
a stable-security mentre per testing a testing-security.
Non bisogna riferirsi a &lt;codename&gt;-proposed-updates.
<item>
Controllare che il numero di versione sia giusto. Deve essere
maggiore di quello del pacchetto corrente ma minore di quello
relativo a distribuzioni successive. Nel caso di testing questo
vuol dire che il numero di versione dello stesso pacchetto in
sid deve essere maggiore. Se non esiste ancora il pacchetto
(magari perché testing e sid hanno la stessa versione) occorre
prima caricare la nuova versione in unstable.
<item>
Non caricare solo il sorgente se il pacchetto si trova
in binary-all, altrimenti l'infrastruttura build non 
costruirà questi pacchetti.
<item>
Quando si compila un pacchetto ci si deve accertare di aver compilato su
di un sistema "pulito", cioè che abbia installati solo i pacchetti 
della distribuzione per cui si sta costruendo il pacchetto. 
Se non si ha un sistema "pulito" si può provare ad usare una 
macchina di debian.org (vedete http://db.debian.org/machines.cgi)
o impostare un chroot (i pacchetti <package>pbuilder</package> 
e <package>debootstrap</package> possono essere utili in questo caso).

</list>


<sect2>Caricare in archivio gli aggiornamenti di sicurezza

<p>
Dopo che uno sviluppatore ha creato e testato il nuovo pacchetto,
questo deve essere caricato in modo da poter essere disponibile
negli archivi. Gli aggiornamenti di sicurezza vanno caricati in
ftp://security.debian.org/pub/SecurityUploadQueue/.

<p>
Una volta che l'aggiornamento di sicurezza è stato accettato, il
pacchetto viene automaticamente costruito per tutte le architetture
e conservato in modo che possa essere verificato dal Security Team.

<p>
Solo il Security Team può accedere agli aggiornamenti in
attesa di essere accettati o verificati. Questa procedura è
necessaria perché ci potrebbero essere delle correzioni a problemi
di sicurezza che non possono ancora essere rese note.

<p>
Se un membro del Security Team accetta un pacchetto, questo
viene reso disponibile in security.debian.org, così come in
&lt;codename&gt;-proposed-updates, in ftp-master o nell'archivio non-US.


<sect2>Gli annunci sulla sicurezza

<p>
Gli annunci sulla sicurezza sono scritti e pubblicati dal Security Team. 
Tuttavia i manutentori possono contribuire fornendo
il testo da pubblicare (o una sua parte). Le informazioni
che devono essere contenute in un annuncio sulla sicurezza sono
descritte in <ref id="dsa">.


<sect id="deb-pack-sign">Firma dei pacchetti in Debian

<p>
Questa sezione poteva anche essere intitolata "come aggiornare 
in sicurezza il proprio sistema Debian GNU/Linux" e fondamentalmente 
merita una propria sezione perché è una parte importante della 
"infrastruttura di sicurezza". La firma dei pacchetti è una cosa da tenere
in considerazione, dal momento che impedisce la manomissione dei pacchetti 
distribuiti sui mirror e gli attacchi di tipo man-in-the-middle
sui download. L'aggiornamento automatico del software è una
caratteristica importante ma è altrettanto importante 
anche eliminare i rischi che quest'operazione possa permettere 
la distribuzione di trojan e la compromissione del sistema 
durante gli aggiornamenti.

<footnote>
Alcuni sistemi operativi sono stati affetti da problemi di
aggiornamento automatico, per esempio la 
<url name="vulnerabilità del Software Update di Mac OS X"
id="http://www.cunap.com/~hardingr/projects/osx/exploit.html">.

<p>
FIXME: probabilmente la vulnerabilità relativa alla gestione
delle catene di certificati di Internet Explorer ha un impatto
sugli aggiornamenti di sicurezza in Microsoft Windows.
</footnote>.

<p>
Ad oggi (dicembre 2001) Debian non fornisce pacchetti firmati per la 
propria distribuzione e il rilascio di <em>woody</em> (3.0) non
integra questa caratteristica. Esiste una soluzione per la firma dei
pacchetti che sarà implementata, se possibile, nel prossimo rilascio 
(<em>sarge</em>).

<p>
Questo problema è discusso più approfonditamente nello 
<url id="http://www.cryptnet.net/fdp/crypto/strong_distro.html" name="Strong
Distribution HOWTO"> di V. Alex Brennen.


<sect1>Lo schema proposto per il controllo della firma dei pacchetti


<p>
L'attuale (non implementato) schema di controllo della firma dei
pacchetti usando <prgn>apt</prgn> è il seguente:

<list>
<item>
Il file Release include l'md5sum di Packages.gz (che contiene 
l'md5sum dei pacchetti) e verrà firmato. La firma è una delle 
fonti certe.
<item>
Questo file Release firmato è scaricato con "apt-get update" e
conservato insieme a Packages.gz.
<item>
Quando un pacchetto sta per essere installato, viene prima 
scaricato, successivamente viene generato l'md5sum.
<item>
Il file Release firmato è controllato (la firma è ok) e viene
estratto da questo l'md5sum per il file Packages.gz, il checksum di
Packages.gz viene generato e (se ok) l'md5sum del pacchetto scaricato 
viene estratto da sé stesso.
<item>
Se l'md5sum del pacchetto scaricato è lo stesso di quello nel
file Packages.gz allora verrà installato, altrimenti
l'amministratore  verrà avvisato ed il pacchetto verrà lasciato
in cache (così l'amministratore potrà decidere se installare o
meno). Se il pacchetto non è in Packages.gz e l'amministratore ha
configurato il sistema per installare solo pacchetti firmati non
sarà nemmeno installabile.

</list>

<p>
Seguendo la catena delle firme MD5 <prgn>apt</prgn> è in grado 
di verificare che un pacchetto sia originario di una determinata 
release. Questo è meno flessibile che firmare ogni singolo 
pacchetto, uno ad uno, ma può essere combinato anche con questo 
schema (vedete più sotto).

<p>
La firma dei pacchetti è stata discussa in debian per molto
tempo, per altre informazioni leggete:
<url id="http://www.debian.org/News/weekly/2001/8/"> e
<url id="http://www.debian.org/News/weekly/2000/11/">.


<sect1>Uno schema alternativo di firma per ciascun pacchetto

<p>
Lo schema addizionale di firmare ogni pacchetto permette di
controllarli quando questi non hanno più referenze in un file
Packages già esistente e anche pacchetti di terze parti, 
dove nessun Packages è mai esistito per loro, possono 
comunque essere usati in Debian, ma non con lo schema predefinito.

<p>
Questo schema di firma dei pacchetti può essere implementato usando
<package>debsig-verify</package> e <package>debsigs</package>.
Questi due pacchetti possono firmare e verificare firme all'interno 
dello stesso pacchetto. Debian ha già la capacità di farlo ma 
l'implementazione delle politiche e gli strumenti, non saranno 
usati fino a dopo l'uscita della versione woody.

<p>
Le ultime versioni di dpkg (dalla 1.9.21) incorporano una
<url 
id="http://lists.debian.org/debian-dpkg/2001/debian-dpkg-200103/msg00024.html"
name="patch"> che fornisce questa funzionalità non appena 
<package>debsig-verify</package> viene installato.

<p>
NOTE: Attualmente <file>/etc/dpkg/dpkg.cfg</file> nasce con 
"no-debsig" come valore predefinito.

<p>
NOTE2: Le firme dagli sviluppatori sono attualmente eliminate quando
depositano il pacchetto nell'archivio poiché lo stile attualmente
in voga consiste nel controllare la release come descritto sopra.


<sect1 id="check-releases">Controllare i rilasci della distribuzione

<p>
Nel caso vogliate aggiungere il controllo aggiuntivo di sicurezza, 
potete usare il seguente script, fornito da Anthony Towns. Lo script 
può fare automaticamente dei nuovi controlli di sicurezza permettendo 
all'utente di avere la certezza che il software che sta scaricando 
corrisponda a quello distribuito da Debian. Questo evita agli 
sviluppatori Debian di entrare nel sistema di qualcuno senza i 
permessi concessi dall'uploading dell'archivio principale, o ai 
mirror di copiare qualcosa che non ha a che fare con Debian, o ai 
mirror di fornire copie datate di versioni instabili con noti 
problemi di sicurezza.

<p>
Questo semplice codice, rinominato come <prgn>apt-check-sigs</prgn>, 
dovrebbe essere usato nel modo seguente:

<example>
# apt-get update
# apt-check-sigs
(...results...)
# apt-get dist-upgrade
</example>

<p>Per prima cosa avete bisogno di:

<list>

<item>
Ottenere le chiavi che l'archivio software utilizza per firmare i file dei
rilasci, <url id="http://ftp-master.debian.org/ziyi_key_2003.asc"> e 
aggiungerli a <file>~/.gnupg/trustedkeys.gpg</file> (che è quello che 
<prgn>gpg</prgn> usa in maniera predefinita).

<example>
  gpg --no-default-keyring --keyring trustedkeys.gpg --import ziyi_key_2003.asc
</example>

<item>
Rimuovere tutte le linee di <file>/etc/apt/sources.list</file> che non 
usano la normale struttura "dists" o modificare lo script in modo che 
funzioni con esse.
<item>
Essere preparati ad ignorare il fatto che gli aggiornamenti di 
sicurezza di Debian non hanno file Release firmati e che i file 
sorgenti non hanno (ancora) un checksum appropriato nel file Release.
<item>
Essere pronti a verificare che i sorgenti siano firmati da chiavi
appropriate.

</list>

<p>
Questo è il codice di esempio per <prgn>apt-check-sigs</prgn>, la versione 
più recente è reperibile presso 
<url id="http://people.debian.org/~ajt/apt-check-sigs">.
Questo codice è attualmente in beta, per maggiori informazioni leggete 
<url id="http://lists.debian.org/debian-devel/2002/debian-devel-200207/msg00421.html">.

<example>
#!/bin/bash
# This script is copyright (c) 2001, Anthony Towns
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

rm -rf /tmp/apt-release-check
mkdir /tmp/apt-release-check || exit 1
cd /tmp/apt-release-check

>OK
>MISSING
>NOCHECK
>BAD

arch=`dpkg --print-installation-architecture`

am_root () {
        [ `id -u` -eq 0 ]
}

get_md5sumsize () {
        cat "$1" | awk '/^MD5Sum:/,/^SHA1:/' | 
          MYARG="$2" perl -ne '@f = split /\s+/; if ($f[3] eq $ENV{"MYARG"}) { print "$f[1] $f[2]\n"; exit(0); }'
}
checkit () {
        local FILE="$1"
        local LOOKUP="$2"

        Y="`get_md5sumsize Release "$LOOKUP"`"
        Y="`echo "$Y" | sed 's/^ *//;s/  */ /g'`"

        if [ ! -e "/var/lib/apt/lists/$FILE" ]; then
                if [ "$Y" = "" ]; then
                        # No file, but not needed anyway
                        echo "OK"
                        return
                fi
                echo "$FILE" >>MISSING
                echo "MISSING $Y"
                return
        fi
        if [ "$Y" = "" ]; then
                echo "$FILE" >>NOCHECK
                echo "NOCHECK"
                return
        fi
        X="`md5sum < /var/lib/apt/lists/$FILE` `wc -c < /var/lib/apt/lists/$FILE`"
        X="`echo "$X" | sed 's/^ *//;s/  */ /g'`"
        if [ "$X" != "$Y" ]; then
                echo "$FILE" >>BAD
                echo "BAD"
                return
        fi
        echo "$FILE" >>OK
        echo "OK"
}

echo
echo "Checking sources in /etc/apt/sources.list:"
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo
(echo "You should take care to ensure that the distributions you're downloading"
echo "are the ones you think you are downloading, and that they are as up to"
echo "date as you would expect (testing and unstable should be no more than"
echo "two or three days out of date, stable-updates no more than a few weeks"
echo "or a month)."
) | fmt
echo

cat /etc/apt/sources.list | 
  sed 's/^ *//' | grep '^[^#]' |
  while read ty url dist comps; do
        if [ "${url%%:*}" = "http" -o "${url%%:*}" = "ftp" ]; then
                baseurl="${url#*://}"
        else
                continue
        fi
        echo "Source: ${ty} ${url} ${dist} ${comps}"
        
        rm -f Release Release.gpg
        wget -q -O Release "${url}/dists/${dist}/Release"

        if ! grep -q '^' Release; then
                echo "  * NO TOP-LEVEL Release FILE"
        else
                origline=`sed -n 's/^Origin: *//p' Release | head -1`
                lablline=`sed -n 's/^Label: *//p' Release | head -1`
                suitline=`sed -n 's/^Suite: *//p' Release | head -1`
                codeline=`sed -n 's/^Codename: *//p' Release | head -1`
                dateline=`grep "^Date:" Release | head -1`
                dscrline=`grep "^Description:" Release | head -1`
                echo "  o Origin: $origline/$lablline"
                echo "  o Suite: $suitline/$codeline"
                echo "  o $dateline"
                echo "  o $dscrline"

                if [ "${dist%%/*}" != "$suitline" -a "${dist%%/*}" != "$codeline" ]; then
                        echo "  * WARNING: asked for $dist, got $suitline/$codeline"
                fi

                wget -q -O Release.gpg "${url}/dists/${dist}/Release.gpg"
                sigline="`gpgv --status-fd 3 Release.gpg Release 3>&1 >/dev/null 2>&1 | sed -n "s/^\[GNUPG:\] GOODSIG [0-9A-Fa-f]* //p"`"
                if [ "$sigline" ]; then
                        echo "  o Signed by: $sigline"
                else
                        echo "  * NO VALID SIGNATURE"
                        >Release
                fi
        fi
        okaycomps=""
        for comp in $comps; do
                if [ "$ty" = "deb" ]; then
                        X=$(checkit "`echo "${baseurl}/dists/${dist}/${comp}/binary-${arch}/Release" | sed 's,//*,_,g'`" "${comp}/binary-${arch}/Release")
                        Y=$(checkit "`echo "${baseurl}/dists/${dist}/${comp}/binary-${arch}/Packages" | sed 's,//*,_,g'`" "${comp}/binary-${arch}/Packages")
                        if [ "$X $Y" = "OK OK" ]; then
                                okaycomps="$okaycomps $comp"
                        else
                                echo "  * PROBLEMS WITH $comp ($X, $Y)"
                        fi
                elif [ "$ty" = "deb-src" ]; then
                        X=$(checkit "`echo "${baseurl}/dists/${dist}/${comp}/source/Release" | sed 's,//*,_,g'`" "${comp}/source/Release")
                        Y=$(checkit "`echo "${baseurl}/dists/${dist}/${comp}/source/Sources" | sed 's,//*,_,g'`" "${comp}/source/Sources")
                        if [ "$X $Y" = "OK OK" ]; then
                                okaycomps="$okaycomps $comp"
                        else
                                echo "  * PROBLEMS WITH component $comp ($X, $Y)"
                        fi
                fi
        done
        [ "$okaycomps" = "" ] || echo "  o Okay:$okaycomps"
        echo
  done

echo "Results"
echo "~~~~~~~"
echo

allokay=true

cd /tmp/apt-release-check
diff <(cat BAD MISSING NOCHECK OK | sort) <(cd /var/lib/apt/lists && find . -type f -maxdepth 1 | sed 's,^\./,,g' | grep '_' | sort) | sed -n 's/^> //p' >UNVALIDATED

cd /tmp/apt-release-check
if grep -q ^ UNVALIDATED; then
    allokay=false
    (echo "The following files in /var/lib/apt/lists have not been validated."
    echo "This could turn out to be a harmless indication that this script"
    echo "is buggy or out of date, or it could let trojaned packages get onto"
    echo "your system."
    ) | fmt
    echo
    sed 's/^/    /' < UNVALIDATED
    echo
fi

if grep -q ^ BAD; then
    allokay=false
    (echo "The contents of the following files in /var/lib/apt/lists does not"
    echo "match what was expected. This may mean these sources are out of date,"
    echo "that the archive is having problems, or that someone is actively"
    echo "using your mirror to distribute trojans."
    if am_root; then 
        echo "The files have been renamed to have the extension .FAILED and"
        echo "will be ignored by apt."
        cat BAD | while read a; do
            mv /var/lib/apt/lists/$a /var/lib/apt/lists/${a}.FAILED
        done
    fi) | fmt
    echo
    sed 's/^/    /' < BAD
    echo
fi

if grep -q ^ MISSING; then
    allokay=false
    (echo "The following files from /var/lib/apt/lists were missing. This"
    echo "may cause you to miss out on updates to some vulnerable packages."
    ) | fmt
    echo
    sed 's/^/    /' < MISSING
    echo
fi

if grep -q ^ NOCHECK; then
    allokay=false
    (echo "The contents of the following files in /var/lib/apt/lists could not"
    echo "be validated due to the lack of a signed Release file, or the lack"
    echo "of an appropriate entry in a signed Release file. This probably"
    echo "means that the maintainers of these sources are slack, but may mean"
    echo "these sources are being actively used to distribute trojans."
    if am_root; then 
        echo "The files have been renamed to have the extension .FAILED and"
        echo "will be ignored by apt."
        cat NOCHECK | while read a; do
            mv /var/lib/apt/lists/$a /var/lib/apt/lists/${a}.FAILED
        done
    fi) | fmt
    echo
    sed 's/^/    /' < NOCHECK
    echo
fi

if $allokay; then
    echo 'Everything seems okay!'
    echo
fi

rm -rf /tmp/apt-release-check
</example>

<p>
Potrebbe essere necessario applicare questa patch per <em>sid</em>
perché <prgn>md5sum</prgn> aggiunge un "-" quando l'input è stdin:

<example>
@@ -37,7 +37,7 @@
        local LOOKUP="$2"

        Y="`get_md5sumsize Release "$LOOKUP"`"
-       Y="`echo "$Y" | sed 's/^ *//;s/  */ /g'`"
+       Y="`echo "$Y" | sed 's/-//;s/^ *//;s/  */ /g'`"

        if [ ! -e "/var/lib/apt/lists/$FILE" ]; then
                if [ "$Y" = "" ]; then
@@ -55,7 +55,7 @@
                return
        fi
        X="`md5sum < /var/lib/apt/lists/$FILE` `wc -c < /var/lib/apt/lists/$FILE`"
-       X="`echo "$X" | sed 's/^ *//;s/  */ /g'`"
+       X="`echo "$X" | sed 's/-//;s/^ *//;s/  */ /g'`"
        if [ "$X" != "$Y" ]; then
                echo "$FILE" >>BAD
                echo "BAD"
</example>






<chapt id="sec-tools">Strumenti per la sicurezza in Debian


<p>FIXME: Trattazione da integrare

<p>
Debian offre anche molti di strumenti per la sicurezza, tali da
garantire una configurazione ottimale della postazione.
Questi comprendono la protezione dei sistemi di informazione mediante firewall
(a livello sia di pacchetti, sia di applicazioni), la ricerca delle
intrusioni (basata sia su rete, sia su singoli host), la valutazione dei
punti deboli e poi, antivirus, reti private, ecc..

<p>
A partire da Debian 3.0 (<em>woody</em>), la distribuzione è caratterizzata
da software specifico per la crittografia integrato nella distribuzione 
principale.
OpenSSH e GNU Privacy Guard sono inclusi nell'installazione predefinita e
già adesso i browsers, i server di rete, i database e via dicendo,
presentano un potente sistema di cifratura. Per le future versioni è già 
pianificata un'ulteriore integrazione della crittografia. 
Questo tipo di software, per essere esportato, viste alcune limitazioni negli 
Stati Uniti, non è stato diffuso con la distribuzione principale, ma 
è stato incluso nei siti non-US.


<sect id="vuln-asses">Strumenti per la valutazione delle 
                      vulnerabilità da remoto

<p>
Gli strumenti forniti da Debian per valutare le vulnerabilità da remoto sono:

<footnote>
Alcuni fra questi sono forniti tramite installazione del pacchetto
<package>harden-remoteaudit</package>.
</footnote>

<list>
<item>nessus
<item>raccess
<item>whisker 
<item>nikto (sostituto di whisker's)
<item>bass (non-free)
<item>satan (non-free)
<!-- currently uploaded but not included
<item>saint (non-free)
<item>sara (non-free)
-->
</list>

<p>
<package>nessus</package> - composto da un client 
(<package>nessus</package>), usato come interfaccia GUI e da
un server (<package>nessusd</package>), che lancia gli attacchi 
programmati è, di gran lunga, il più completo e aggiornato.
Conosce i punti deboli di un numero consistente di sistemi 
contenenti applicazioni di rete, server ftp, server www, ecc.. 
Le ultime versioni sono in grado di analizzare un sito web e
provare a scoprire quali, fra le pagine disponibili, potrebbero essere
attaccate. Ci sono anche dei client Java e Win32 (non inclusi in Debian),
utilizzabili per contattare il server dell'organizzazione aziendale.

<p>
<package>Whisker</package>, scansionatore per la valutazione di 
vulnerabilità dedicato solo al web, presenta tattiche anti-IDS 
(la maggior parte delle quali non è più solamente <em>anti-IDS</em>) ed è 
uno dei migliori scansionatori cgi: può scoprire un server WWW e lanciarvi 
contro solo una determinata tipologia di attacchi. Il database 
usato per  la scansione è facilmente modificabile, al fine di ottenere 
nuove informazioni.

<p>
<package>Bass</package> (Bulk Auditing Security Scanner -
Scansionatore per verifiche di sicurezza) e
<package>Satan</package> (Security Auditing Tool for Analysing
Networks - Strumento di verifica della sicurezza per l'analisi di
reti) devono essere considerati come programmi dimostrativi di un
concetto, piuttosto che veri e propri strumenti di verifica; entrambi
sono alquanto datati e non aggiornati (SATAN, però, è stato il primo
strumento semplice (GUI) per il controllo delle vulnerabilità e Bass
dà ancora prestazioni molto elevate).


<sect>Strumenti per effettuare scansioni di rete

<p>
Debian fornisce alcuni mezzi dedicati alla scansione di host da remoto (ma
non anche della verifica delle vulnerabilità) che, in certi casi,
possono essere usati come scansionatori per un primo tipo di "attacco", 
volto a determinare i servizi dell'host remoto disponibili. 
Al momento Debian fornisce:

<list>

<item>nmap
<item>xprobe
<item>queso
<item>knocker
<item>hping2
<item>isic
<item>icmpush
<item>nbtscan (per verifiche su NetBIOS)
<item>fragrouter
<item>strobe (dal pacchetto <package>netdiag</package>)

</list>

<p>
Mentre <package>queso</package> e <package>xprobe</package> offrono
solo l'esame da remoto del sistema operativo (usando TCP/IP
fingerprinting), <package>nmap</package> e <package>knocker</package>
svolgono sia l'esame del sistema operativo, sia la scansione delle
porte dell'host remoto. D'altra parte, per le tecniche di attacco basate
su ICMP da remoto si possono usare <package>hping2</package> e
<package>icmpush</package>.

<p>
Progettato specificamente per reti di tipo Netbios, <package>nbtscan</package>
viene impiegato per scansionare le reti IP e per recuperare informazioni 
riguardo ai nomi (fra cui: nomi degli utenti, nomi della rete, indirizzi 
di tipo MAC...) dai server su cui sia abilitato SMB.

<p>
Infine, per rilevare intrusioni nella rete e verificare se i
NIDS possano essere aggirati da attacchi mediante frammentazione, si può
usare <package>fragrouter</package>.

<p>
FIXME: Controllare se il 
<url id="http://bugs.debian.org/153117" 
     name="Bug #153117"> (ITP fragrouter) sia incluso.

<p>
FIXME: aggiungere informazioni basate su 
<url id="http://rr.sans.org/linux/debian_laptop.php"
     name="Debian Linux Laptop for Road Warriors">, che descrive come
usare Debian ed un portatile per scansionare 
reti wireless (senza fili) (803.1).



<sect>Controlli interni

<p>
Al momento solamente il tool chiamato <package>tiger</package> può 
essere usato per effettuare un controllo interno (chiamato anche 
cassetta bianca) degli hosts per controllare se il file System è 
configurato in modo appropriato, quali processi sono in ascolto 
nell'host, etc.


<sect>Revisione del codice sorgente

<p>
Debian mette a disposizione tre pacchetti che possono essere 
usati nella revisione dei sorgenti C/C++ e nella ricerca di 
errori di programmazione che potenzialmente possono essere 
considerati problemi per la sicurezza:


<list>

<item>flawfinder
<item>rats
<item>splint

</list>



<sect id="vpn">Rete privata virtuale (VPN)

<p>
Un network privato virtuale (VPN) è un gruppo di due o più computer
che hanno tra di loro una connessione privata con un limitato accesso
pubblico, VPN permette la connessione tra un singolo computer e una 
rete privata (client-server), oppure tra una LAN remota ad una rete 
privata (sever-server). VPN include la possibilità di criptare e
autenticare in modalità sicura utenti remoti, oppure hosts e metodi 
per nascondere la configurazione della rete.

<p>
Debian mette a disposizione alcuni pacchetti per configurare 
correttamente una rete privata criptata:

<list>

<item><package>vtun</package>
<item><package>tunnelv</package>
<item><package>cipe</package>
<item><package>vpnd</package>
<item><package>tinc</package>
<item><package>secvpn</package>
<item><package>pptpd</package>
<item><package>freeswan</package>

</list>

<p>
Il pacchetto FreeSWAN probabilmente è la miglior scelta tra tutte 
quelle proposte, può essere usato da chiunque usi il protocollo di 
sicurezza IPsec (RFC 2411). Comunque gli altri pacchetti presenti 
nella lista possono aiutare a creare facilmente un tunnel.
Il protocollo punto punto tunneling (PPTP) è un protocollo per 
VPN di proprietà della Microsoft. Viene supportato da Linux, ma 
sono noti seri problemi riguardanti la sicurezza.

<p>
Per ulteriori informazioni leggete il 
<url id="http://www.tldp.org/HOWTO/VPN-Masquerade-HOWTO.html"
name="VPN-Masquerade HOWTO"> (copre sia IPsec che PPTP), il
<url id="http://www.tldp.org/HOWTO/VPN-HOWTO.html" name="VPN HOWTO">
(copre PPP su SSH) il 
<url id="http://www.tldp.org/HOWTO/mini/Cipe+Masq.html" 
name="Cipe mini-HOWTO"> ed il
<url id="http://www.tldp.org/HOWTO/mini/ppp-ssh/index.html" 
name="PPP and SSH mini-HOWTO">.



<sect1>Tunneling punto punto

<p>
Se volete avere un tunnel sicuro tra sistemi operativi differenti
(nello stesso tempo sistema operativo Microsoft e clienti LINUX) e
che IPsec non sia un opzione (è il solo fornito per Windows 2000 e
Windows XP), dovrete usare <em>PoPToP</em> (Punto Punto tunneling 
server), presente nel pacchetto <package>pptpd</package>.

<p>
Se volete usare l'autenticazione e criptazione di Microsoft
messa a disposizione dal pacchetto <package>ppp</package>, 
leggete questo estratto tratto dalle FAQ:

<example>
&Egrave; necessario l'uso di PPP 2.3.8 se volete una completa
compatibilità con il protocollo di autenticazione e criptazione
MSCHAPv2/MPPE. La ragione di questo è che la patch MSCHAPv2/MPPE
atualmente disponibile (19990813) ha dei conflitti con versioni diverse
dalla 2.3.8. Se non avete bisogno di avere completa compatibilità 
con i protocolli di autenticazione e criptazione, qualsiasi 
versione della serie 2.3 di PPP va bene.
</example>

<p>
Comunque, dovete anche applicare una patch al kernel, presente nel 
pacchetto <package>kernel-patch-mppe</package>, che mette a 
disposizione il modulo pp-mppe per pppd.

<p>
Avere un account criptato con ppptp vi obbliga a conservare le 
passwords in chiaro, senza criptatura e nel protocollo 
MS_CHAPv2 sono presenti
<url id="http://mopo.informatik.uni-freiburg.de/pptp_mschapv2/"
name="buchi di sicurezza conosciuti">.



<sect>Infrastruttura a chiave pubblica (PKI)

<p>
L'infrastruttura a chiave pubblica (PKI) è un'architettura di sicurezza
introdotta per fornire un maggior livello di confidenza nello scambiarsi
informazioni tramite una rete insicura. Fa uso del concetto di chiavi
pubbliche e private per verificare l'identità del mittente (firma) e per
assicurare la privacy (crittografia).

<p>
Nel prendere in considerazione una PKI ci si trova davanti a una serie di
punti:

<list>

<item>
Un'Autorità Certificatrice (CA) che possa creare e verificare certificazioni
e che funzioni sotto una determinata gerarchia
<item>una directory che contenga le certificazioni pubbliche degli utenti
<item>
Un database (?) per mantenere le Liste di Revoca della Certificazione (CRL)
<item>
device che interoperino con la CA al fine di produrre smart 
card/memorie-USB/qualsiasi altra cosa in cui poter 
racchiudere certificazioni con sicurezza
<item>
Applicazioni che individuino le certificazioni, che possano usare
quelle prodotte da una CA nell'ambito di una comunicazione crittata e
che controllino le certificazioni ricevute rispetto ad una CRL
(per l'autenticazione e le soluzioni Single Sign On)
<item>Un'authority che segni la data per la firma digitale dei documenti
<item>
Una console dalla quale possa essere utilizzato tutto ciò (generazione
delle certificazioni, controllo delle liste di revoca, ecc ...)

</list>

<p>
Debian GNU/Linux ha pacchetti che aiutano alcuni di questi compiti PKI. 
Includono <prgn>OpenSSL</prgn> (per la generazione delle certificazioni), 
<prgn>OpenLDAP</prgn> (come directory in cui tenere le certificazioni), 
<prgn>gnupg</prgn> e <prgn>freeswan</prgn> (con il supporto per lo 
standard X.509). Comunque, con il rilascio di Woody (Debian 3.0), 
Debian non supporta nessuna delle Autorità Certificatrici disponibili 
liberamente, come pyCA, <url id="http://www.openca.org" name="OpenCA"> 
o esempi di CA da OpenSSL. Per maggiori informazioni leggete il libro 
sull'<url id="http://ospkibook.sourceforge.net/" name="Open PKI">.



<sect>Infrastruttura SSL

<p>
Debian fornisce alcune certificazioni SSL con la propria distribuzione, 
così che possano essere installate localmente. Si trovano nel 
pacchetto <package>ca-certificates</package>. Questo pacchetto 
fornisce un deposito locale di certificazioni che sono state inviate 
a Debian e approvate (ossia verificate) dal manutentore del pacchetto, 
utili per applicazioni OpenSSL che verifichino le connessioni SSL.

<p>FIXME: leggere debian-devel per vedere se ci sono aggiunte.


<sect>Anti-virus

<p>
Non ci sono molti anti-virus in Debian GNU/Linux, probabilmente perché 
gli utenti GNU/Linux non sono danneggiati dai virus. Il modello di 
sicurezza degli UN*X fa distinzione tra i processi privilegiati (root) 
ed i processi utente, quindi un eseguibile "ostile" che un utente 
non-root riceve o crea ed esegue non può infettare o manipolare
l'intero sistema. Comunque, i worms per GNU/Linux ed i virus esistono, 
anche se non ce n'è nessuno (beh, speriamo) che si sia diffuso a 
macchia d'olio in una distribuzione Debian. In ogni caso, gli 
amministratori potrebbero voler mettere su dei gateway anti-virus che 
proteggano dai virus altri sistemi più vulnerabili che fanno parte 
della loro rete.

<p>
Attualmente Debian GNU/Linux fornisce i seguenti strumenti per 
realizzare ambienti anti-virus:

<list>

<item>
<url id="http://packages.debian.org/sanitizer" name="sanitizer">, uno 
strumento che usa ilpacchetto <package>procmail</package>, che può 
esaminare gli allegati delle email, bloccare allegati in base al 
loro nome ed altro.
<item>
<url id="http://packages.debian.org/amavis-postfix" name="amavis-postfix">, 
uno script che fornisce un'interfaccia da un mail transport agent ad 
uno o più anti-virus commerciali (questo pacchetto viene fornito con
il solo supporto per l'MTA <prgn>postfix</prgn>).
<item>
<package>scannerdaemon</package>, un demone scritto in Java che 
accetta richieste in ingresso di scansione di virus sui file.

</list>

<p>
Come si può vedere, Debian non fornisce attualmente nessun software 
anti-virus nella distribuzione principale. Comunque, ci sono 
progetti anti-virus liberi che potrebbero essere inclusi nelle future 
versioni di Debian GNU/Linux:

<list>
<item><url id="http://sourceforge.net/projects/openantivirus/" 
           name="Open Antivirus"> 
(vedete <url id="http://bugs.debian.org/150698" 
             name="Bug #150698 (ITP oav-scannerdaemon"> 
ed il <url id="http://bugs.debian.org/150695" 
           name="Bug #150695 (ITP oav-update">).
<item><url id="http://clamav.elektrapro.com/" name="Clam Antivirus">
<item><url id="http://sourceforge.net/projects/jvirus/" name="jvirus">.
<item>
<url id="http://www.sourceforge.net/projects/amavis"
     name="Amavis Next Generation">, un mail virus scanner 
che si integra con il vostro MTA e supporta virus scanning
multipli ( vedete il <url id="http://bugs.debian.org/154294" 
                          name="Bug #154294">).

</list>

<p><!-- FIXME: Not finding this package in Debian, maybe oav-update
replaced it? -->
C'è anche un pacchetto <package>virussignatures</package> che 
fornisce le signature di tutti i pacchetti e uno script per 
scaricare le ultime signature dei virus da 
<url id="http://www.openantivirus.org/latest.php">.

<p>
FIXME: Controllare se adesso sono disponibili pacchetti antivirus.
Clamav è disponibile? (Vedere se ne è stato fatto un pacchetto Debian).

<p>
FIXME: Controllare se scannerdaemon non sia in realtà lo scannerdaemon
dell'open antivirus (leggere ITPs).

<p>
Comunque Debian non fornirà <em>mai</em> antivirus commerciali 
come ad esempio 
<url id="http://www.pandasoftware.com/com/linux/linux.asp" 
     name="Panda Antivirus">, 
<url id="http://www.nai.com/naicommon/buy-try/try/products-evals.asp"
     name="NAI Netshield (uvscan)">, 
<url id="http://www.sophos.com/" name="Sophos Sweep">, 
<url id="http://www.antivirus.com/products/" name="TrendMicro Interscan">, 
o <url id="http://www.ravantivirus.com" name="RAV">. 
Per indicazioni maggiori, vedete la 
<url id="http://www.computer-networking.de/~link/security/av-linux_e.txt"
     name="Linux anti-virus software mini-FAQ">.
Questo non significa che questo software non possa 
essere installato opportunamente su un sistema Debian.

<p>
Per maggiori informazioni su come realizzare un sistema di 
individuazione dei virus, leggete l'articolo di Dave Jones 
<url id="http://www.linuxjournal.com/article.php?sid=4882" 
     name="Building an E-mail Virus Detection System for Your Network">.



<sect id="gpg-agent">GPG

<p>
Oggigiorno la firma digitale e a volte, la cifratura delle e-mail, sono 
molto diffuse: per esempio, molte persone che partecipano a mailing 
list (gruppi di discussione a mezzo e-mail) firmano le proprie mail 
verso la lista. Le firme a chiave pubblica sono gli unici mezzi per 
verificare che un'e-mail sia stata spedita proprio dal mittente e non 
da qualcun altro.

<p>
Debian GNU/Linux offre un certo numero di clienti, dotati di 
funzioni incorporate per la firma delle e-mail, che interagiscono 
sia con <package>gnupg</package>, sia con <package>pgp</package>:

<list>

<item><package>Evolution</package>.
<item><package>mutt</package>.
<item><package>kmail</package>.
<item>
<package>sylpheed</package>: a seconda di come si evolve la versione 
stabile di questo pacchetto, potrebbe essere necessario usare 
<package>sylpheed-claws</package>, ovvero la sua 
"versione in sviluppo".
<item>
<package>gnus</package>, che, se installato con il pacchetto 
<package>mailcrypt</package>, è una interfaccia di <prgn>emacs</prgn>
per <prgn>gnupg</prgn>.
<item>
<package>kuvert</package>, che offre questa funzionalità, 
indipendentemente dall'agente di posta dell'utente (MUA), mediante 
l'interazione con l'agente di trasporto della posta (MTA).

</list>

<p>
I Key server (server delle chiavi) permettono di scaricare chiavi 
pubbliche conclamate, in modo da poter verificare le firme. 
Uno di questi è <url id="http://wwwkeys.pgp.net">.
<package>gnupg</package> può rilevare automaticamente le chiavi
pubbliche non ancora comprese nel proprio "portachiavi". 
Ad esempio, per configurare <prgn>gnupg</prgn> affinché utilizzi 
il server di chiave menzionato, dovrete modificare il file 
<file>~/.gnupg/options</file> ed aggiungere la seguente riga:

<footnote>
Per ulteriori esempi sulle modalità di configurazione di <prgn>gnupg</prgn>,
vedete <file>/usr/share/doc/mutt/examples/gpg.rc</file>.
</footnote>

<example>
keyserver wwwkeys.pgp.net
</example>

<p>
La maggior parte dei server di chiavi è collegata, in modo che 
quando viene aggiunta su uno di essi una chiave pubblica, tale 
aggiunta è riprodotta su tutti gli altri. C'è anche un pacchetto 
Debian GNU/Linux, <package>debian-keyring</package>, che fornisce 
tutte le chiavi pubbliche degli sviluppatori Debian. I portachiavi 
di <prgn>gnupg</prgn> sono installati nella cartella 
<file>/usr/share/keyrings/</file>.

<p>Per maggiori informazioni:

<list>

<item><url ID="http://www.gnupg.org/faq.html" name="GnuPG FAQ">.
<item><url ID="http://www.gnupg.org/gph/en/manual.html" name="GnuPG
Handbook">.
<item><url
ID="http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto.html"
name="GnuPG Mini Howto (in inglese)">.
<item><url ID="http://www.uk.pgp.net/pgpnet/pgp-faq/"
name="comp.security.pgp FAQ">.
<item><url ID="http://www.cryptnet.net/fdp/crypto/gpg-party.html"
name="Keysigning Party HOWTO">.

</list>




<chapt>Prima della compromissione



<sect id="keep-up-to-date">Aggiornare continuamente il sistema

<p>
Bisognerebbe eseguire spesso gli aggiornamenti per la sicurezza.
La maggior parte degli exploit deriva da vulnerabilità conosciute
cui non sia stato posto un rimedio tempestivo, come spiega il
<url id="http://www.cs.umd.edu/~waa/vulnerability.html"
name="saggio di Bill Arbaugh"> presentato al Simposio sulla
sicurezza e la riservatezza dell'IEEE nel 2001. Gli aggiornamenti sono
descritti in <ref id="security-update">.



<sect1>Controllo manuale degli aggiornamenti di sicurezza disponibili

<p>
Debian ha uno strumento specifico per controllare se occorra
aggiornare un sistema (si veda più sotto Tiger), anche se molti
utenti preferiranno il controllo manuale degli aggiornamenti di
sicurezza disponibili per il loro sistema.

<p>
Se avrete configurato il sistema come mostrato in 
<ref id="security-update">, basterà dare il comando:

<example>
# apt-get update
# apt-get upgrade -s
</example>

<p>
La prima linea scaricherà la lista dei pacchetti disponibili tra quelli 
presenti sul sistema e configurati;
l'opzione <tt>-s</tt> simulerà l'esecuzione, cioè
<em>non</em> scaricherà o installerà i pacchetti, ma, piuttosto, comunicherà
quali sarebbero scaricati/installati.
Dal risultato, si potrà dedurre quali pacchetti siano stati corretti da Debian
e siano disponibili come aggiornamento di sicurezza. Per esempio:

<example>
# apt-get upgrade -s
Reading Package Lists... Done
Building Dependency Tree... Done
2 packages upgraded, 0 newly installed, 0 to remove and 0  not upgraded.
Inst cvs (1.11.1p1debian-8.1 Debian-Security:3.0/stable)
Inst libcupsys2 (1.1.14-4.4 Debian-Security:3.0/stable)
Conf cvs (1.11.1p1debian-8.1 Debian-Security:3.0/stable)
Conf libcupsys2 (1.1.14-4.4 Debian-Security:3.0/stable)
</example>

<p>
In questo esempio, si vede come il sistema necessiti di essere aggiornato
con i nuovi pacchetti cvs e cupsys trovati nell'archivio della sicurezza di
<em>woody</em>; se si vuole capire perché tali pacchetti siano necessari,
puntate il vostro browser presso <url id="http://security.debian.org">
e controllate i più recenti Avvisi sulla Sicurezza di Debian relativi a
questo argomento, presso:
<url id="http://www.debian.org/security/2003/dsa-233" name="DSA-233"> 
(per cvs) e
<url id="http://www.debian.org/security/2003/dsa-232" name="DSA-232">
(per cupsys).


<sect1 id="cron-apt">Controllo automatico degli aggiornamenti con cron-apt

<p>
Un altro metodo per l'aggiornamento automatico per la sicurezza è l'uso di
<package>cron-apt</package>, strumento per aggiornare il sistema a intervalli
regolari (con l'impiego di cron), che, in modo predefinito, aggiornerà la lista
dei pacchetti e scaricherà i nuovi; può essere configurato anche per inviare
messaggi all'amministratore di sistema.

<p>
Se si vuole aggiornare automaticamente il proprio sistema (anche solo
scaricando dei pacchetti), prendete in considerazione l'opportunità 
di controllare la versione della distribuzione, come descritto in 
<ref id="check-releases">; in mancanza di questo controllo, 
non potrete essere sicuri che i pacchetti provengano da fonte fidata.


<sect1>Usare Tiger per controllare automaticamente 
       gli aggiornamenti per la sicurezza

<p>
Se state cercando uno strumento per un controllo veloce e che riporti
le vulnerabilità di sicurezza del sistema, provate il pacchetto
<package>tiger</package>. Questo pacchetto è un insieme di script 
di shell Bourne, programmi C e file di dati usati per eseguire dei 
controlli di sicurezza. Il pacchetto di Debian GNU/Linux ha degli 
accorgimenti addizionali orientati fortemente alla distribuzione 
Debian, che forniscono più funzionalità che gli script di Tiger 
forniti da TAMU (o persino TARA, una versione di Tiger distribuita 
da ARSC). Leggete il file README.Debian e la pagina di manuale di 
<manref section="8" name="tiger"> per più informazioni.

<p>
Una di queste aggiunte è lo script <tt>deb_checkadvisories</tt>. 
Questo script prende una lista di DSA e controlla i pacchetti 
installati, riportando alla versione precedente tutti i pacchetti 
che sono vulnerabili, in accordo con il Debian Security Team. 
Ciò è leggermente differente, un approccio più generale è 
implementato dallo script <tt>check_signatures</tt> di Tiger, che 
controlla l'MD5sum di pacchetti dalle vulnerabilità note.

<p>
Poiché Debian attualmente non possiede una lista con gli MD5sum dei
pacchetti dalle vulnerabilità note (utilizzata da altri sistemi
operativi come Sun Solaris), è utilizzato il metodo
<em>controllo-contro-DSA (check-against-DSA)</em>. 
L'approccio del DSA e quello MD5sum soffrono entrambi del problema 
che la firma deve essere aggiornata frequentemente.

<p>
Ciò è attualmente risolto facendo una nuova versione del pacchetto
Tiger, ma il manutentore del pacchetto potrebbe non creare una nuova
versione ogni volta che un DSA viene annunciato. Un'aggiunta
interessante, che non è ancora implementata, dovrebbe essere di fare
quest'operazione prima delle altre. Cioè, scaricare il DSA via web, 
produrre la lista e poi eseguire il controllo. Il DSA è attualmente 
aggiornato con l'aggiornamento del codice WML usato per la costruzione 
di <url id="http://security.debian.org">  (il web server, proprio così) 
dal locale CVS del manutentore.

<p>
Sarebbe necessario un programma che analizzi i DSA pubblicati, 
sia ricevuti via mail
che disponibili in security.debia.org e che poi generi il file usato
da "deb_checkadvisories" per confermare che le vulnerabilità siano
state notate. Speditelo come un bug per <package>tiger</package>.

<p>
Il controllo menzionato dovrebbe essere  eseguito attraverso la 
configurazione standard del programma una volta installato (vedete
<file>/etc/tiger/cronrc</file>):

<example>
# Check for Debian security measures every day at 1 AM
#
1 * *   deb_checkmd5sums deb_nopackfiles deb_checkadvisories
#
</example>

<p>
C'è un controllo ulteriore che si potrebbe voler aggiungere, che non è
ancora parte degli standard degli script di <prgn>cron</prgn>. 
Questo controllo è lo script <tt>check_patches</tt>, che funziona nel 
seguente modo:

<list>

<item>Esegue <tt># apt-get update</tt>
<item>Controlla se ci sono nuovi pacchetti disponibili

</list>

<p>
Se state utilizzando un sistema <em>stable</em> e avete 
aggiunto la sorgente security.debian.org per <prgn>apt</prgn> al vostro
<file>/etc/apt/sources.list</file> (come descritto in
<ref id="security-update">), questo script sarà in grado di avvisarvi 
se ci sono nuovi pacchetti che avete bisogno di installare. Poiché 
gli unici pacchetti che cambiano in questa configurazione sono gli 
aggiornamenti di sicurezza, allora avrete proprio ciò che desiderate.

<p>
Naturalmente, questo non funzionerà se state utilizzando 
<em>testing</em> o <em>sid/unstable</em>, poiché attualmente, i 
nuovi pacchetti sono probabilmente più numerosi di quelli di 
sicurezza.

<p>
Potete aggiungere questo script ai controlli eseguiti da 
<prgn>cron</prgn> (nel file di configurazione precedentemente indicato) 
e <prgn>tigercron</prgn> spedirà una mail (a qualunque 
<tt>Tiger_Mail_RCPT</tt> sia stato configurato in 
<file>/etc/tiger/tigerrc</file>) con i nomi dei nuovi pacchetti:

<example>
# Check for Debian security measures every day at 1 am
#
1 * *   deb_checkmd5sums deb_nopackfiles check_patches
#
</example>


<sect1>Altri metodi per effettuare aggiornamenti per la sicurezza

<p>
Potete anche considerare un programma non ufficiale, scritto da Fruhwirth
Clemens, per aggiornamenti di sicurezza dal sito security.debian.org con firma
controllata: <url id="http://therapy.endorphin.org/secpack/" name="secpack">.


<sect1>Evitare di usare il ramo instabile

<p>
A meno che non vogliate dedicare tempo a riparare i pacchetti da soli
quando sorge una vulnerabilità, dovreste  <em>non</em> usare il ramo
instabile di Debian per sistemi di produzione. La principale ragione
per questo è che non ci sono aggiornamenti di sicurezza per
<em>unstable</em> (Vedete <ref id="sec-unstable">).

<p>
Il fatto è che alcuni problemi di sicurezza potrebbero apparire nella
distribuzione <em>unstable</em> e <em>non</em> nella <em>stable</em>. 
Questo è dovuto alle nuove funzionalità costantemente aggiunte alle 
applicazioni lì fornite, come anche nuove applicazioni che vengono 
incluse e non hanno avuto ancora un test approfondito.

<p>
Allo scopo di eseguire aggiornamenti di sicurezza nel ramo
<em>unstable</em>, dovreste aggiornare interamente alle nuove 
versioni (che vengono aggiornate più che i pacchetti in questione). 
Sebbene ci siano alcune eccezioni, le patch di sicurezza vengono 
solitamente riportate nel ramo <em>stable</em>. L'idea primaria è che 
tra gli aggiornamenti non venga aggiunto <em>nuovo codice</em>, ma 
che vengano solamente risolti i problemi importanti.


<sect1>Evitare di usare la distribuzione testing

<p>
Se utilizzate la distribuzione <em>testing</em>, ci sono dei problemi che
occorre considerare circa la disponibilità di aggiornamenti di
sicurezza:

<list>

<item>
Quando viene realizzato un aggiornamento di sicurezza
vengono preparati i pacchetti per <em>unstable</em> e le stesse
modifiche vengono reimplementate in <em>stable</em> 
(visto che la versione dei pacchetti di stable hanno una versione
minore). I pacchetti della distribuzione <em>stable</em> 
sono testati più a fondo di quelli di <em>unstable</em>, dal 
momento che quest'ultima potrebbe disporre direttamente 
dell'ultimo rilascio dei sorgenti originali.
<item>
Gli aggiornamenti di sicurezza sono immediatamente disponibili
per entrambe le distribuzioni (ma non per il ramo <em>testing</em>).
<item>
Se non vengono scoperti (nuovi) bug nella versione di
<em>unstable</em> del pacchetto, questo viene inserito in 
<em>testing</em> dopo alcuni giorni (di solito più di una settimana). 
Tuttavia questo dipende dallo stato di rilascio della distribuzione.

</list>


<sect1>Aggiornamento automatico in un sistema Debian GNU/Linux

<p>
Per cominciare gli aggiornamenti automatici non sono del tutto
consigliabili, visto che gli amministratori dovrebbero leggere gli
annunci del DSA e comprendere l'impatto di ogni aggiornamento di
sicurezza.

<p>Se volete aggiornare automaticamente il vostro sistema occorre:

<list>

<item>
Configurare <prgn>apt</prgn> in modo che i pacchetti che non volete
aggiornare rimangano alla versione corrente o con la funzione
<em>pinning</em> di <prgn>apt</prgn> o marcandoli con 
<em>hold</em> con <prgn>dpkg</prgn> o <prgn>dselect</prgn>.

<p>
Per mettere un pin a una determinata versione sui pacchetti
dovete modificare <file>/etc/apt/preferences</file> (vedete
<manref section="5" name="apt_preferences"> aggiungendo:

<example>
  Package: *
  Pin: release a=stable
  Pin-Priority: 100
</example>

<p>FIXME: verificare se questa configurazione è corretta.

<item>Usate cron-apt, come in <ref id="cron-apt">,
abilitandolo ad installare i pacchetti scaricati,
o aggiungete una riga in <prgn>cron</prgn>,
cosicché l'aggiornamento sia eseguito
quotidianamente; per esempio:

<example>
  apt-get update && apt-get -y upgrade
</example>

<p>
L'opzione <tt>-y</tt> farà in modo che <prgn>apt</prgn> 
risponda automaticamente "yes" a tutte le domande che 
possono essere poste durante l'aggiornamento. 
In alcuni casi può essere preferibile usare
l'opzione <tt>--trivial-only</tt> invece di quella 
<tt>--assume-yes</tt> (equivalente a <tt>-y</tt>).

<footnote>
Potreste anche utilizzare l'opzione <tt>--quiet</tt> (<tt>-q</tt>) 
per ridurre l'output di <prgn>apt-get</prgn>, in modo da non 
mostrare alcun output se non vengono installati pacchetti.
</footnote>

<item>
Configurate <prgn>cron</prgn> in modo che <prgn>debconf</prgn> 
non ponga nessuna domanda durante l'aggiornamento; in questo modo
l'aggiornamento non è interattivo.

<footnote>
Bisogna ricordare che alcuni pacchetti potrebbero <em>non</em> 
utilizzare <prgn>debconf</prgn> e l'aggiornamento potrebbe 
bloccarsi a causa dei pacchetti che richiedono un input da 
parte dell'utente durante la configurazione.
</footnote>

<item>
Controllare i risultati dell'esecuzione di <prgn>cron</prgn>, 
che saranno spediti al superutente (a meno che <prgn>cron</prgn> 
non sia stato configurato diversamente con la variabile 
<tt>MAILTO</tt> nello script).

</list>

<p>
Un'alternativa più sicura potrebbe essere usare l'opzione 
<tt>-d</tt> (o <tt>--download-only</tt>), che scaricherà 
ma non installerà i pacchetti necessari. L'aggiornamento si 
farà manualmente se l'esecuzione di <prgn>cron</prgn>
mostra che il sistema deve essere aggiornato.

<p>
Per eseguire questi compiti il sistema deve essere propriamente
configurato per scaricare gli aggiornamenti di sicurezza come
visto in <ref id="security-update">.

<p>
Ad ogni modo questo procedimento non è consigliabile per 
<em>unstable</em> senza prima un'accurata analisi, perché 
potreste rendere il vostro sistema inusabile se qualche bug 
pericoloso si insinuasse in un pacchetto importante e venisse 
installato nel sistema.
<em>Testing</em> è un po' più <em>sicura</em> da questo punto 
di vista, dal momento che le possibilità di scoprire i bug più 
gravi prima che il pacchetto sia inserito in testing sono 
maggiori (tuttavia potreste <em>non</em> avere alcun 
aggiornamento di sicurezza disponibile in questo caso).

<p>
Se avete una distribuzione mista, cioè una distribuzione 
<em>stable</em> con alcuni pacchetti presi da 
<em>testing</em> o <em>unstable</em>, potete utilizzare i pinning 
o l'opzione <tt>--target-release</tt> di <prgn>apt-get</prgn> per
aggiornare <em>solo</em> quei pacchetti.

<footnote>
Questo è un problema comune visto che molti utenti vogliono
utilizzare un sistema stable e prendere solo alcuni pacchetti da
<em>unstable</em> per disporre di funzionalità più recenti. 
Questo bisogno nasce dal fatto che alcuni progetti evolvono 
più rapidamente del tempo che passa tra due release 
<em>stable</em> di Debian.
</footnote>


<sect id="intrusion-detect">Pianificare la ricerca di intrusi

<p>
In Debian GNU/Linux sono presenti molti programmi che servono ad
individuare intrusi nel sistema, essi possono scovare  delle attività
malevole sul vostro sistema personale, oppure negli altri sistemi della
vostra rete. Questo tipo di difesa è importante sia che nel sistema siano
residenti informazioni riservate sia che voi siate veramente paranoici
in fatto di sicurezza.
I più comuni metodi per individuare degli intrusi sono: l'individuazione
di anomalie e la ricerca mediante l'uso di espressioni regolari.

<p>
Si deve essere consapevoli che la sicurezza del sistema viene migliorata      
con l'introduzione di questi programmi, avrete bisogno di 
avere un meccanismo di allerta e risposta configurato correttamente.
La ricerca di intrusi senza un valido sistema di allerta diviene 
completamente inutile.

<p>
Quando viene scoperto un particolare attacco, molti di questi programmi
sono configurati per inviare un log con <prgn>syslogd</prgn> 
oppure per inviare un e-mail all'amministratore (le intestazioni delle 
e-mail sono solitamente configurabili).
L'amministratore ha la facoltà di configurare questi strumenti.
I sistemi di avviso di attacco avvenuto possono essere inutili se 
vengono generati un giorno dopo che l'attacco è avvenuto.
Siamo sicuri che questa sia la politica di sicurezza migliore, è
però importante che gli strumenti per migliorare questa politica 
siano implementati.

<p>
Un'interessante fonte di informazioni è il 
<url id="http://www.cert.org/tech_tips/intruder_detection_checklist.html"
name="CERT lista delle intrusioni accertate (CERT's Intrusion Detection 
Checklist)">.



<sect1>Individuazione delle intrusioni sulla rete

<p>
Gli strumenti che controllano le intrusioni lo fanno sul traffico
di un segmento di rete e usano le informazioni come un database.
Specificatamente, vengono esaminati i pacchetti in rete e si controlla
che essi abbiano un certificato valido.

<p>
<package>Snort</package> è uno sniffer che scova gli attacchi 
usando un dizionario di "firme" di precedenti attacchi.
Può controllare una gran varietà di attacchi e scansioni, come:
i buffer overflow, la scansione delle porte, attacchi CGI,
indagini SMB e molti altri.
Tra le altre cose <prgn>Snort</prgn> possiede la qualità 
di avvisare l'amministratore in tempo reale.
Potete usare <prgn>Snort</prgn> per  testare una serie di 
computer che si trovano nella vostra rete, come se si 
trattasse di uno solo.
Basta installare pacchetto con il comando 
<tt>apt-get install snort</tt>, è importante rispondere alle 
domande e guardare il log.

<p>
Il pacchetto <package>snort</package> presente in Debian possiede 
molte opzioni di sicurezza attivate in maniera predefinita.
Ma potete anche configurare a piacimento il setup aggiungendo 
semplicemente un servizio attivo sulla propria macchina.
Potete altresì ricercare pacchetti addizionali specifici
per un particolare servizio.

<p>
Esistono altri semplici programmi che possono venire usati
per ricercare attacchi provenienti dalla rete. 
Ad esempio <package>portsentry</package> è un interessante 
pacchetto che permette di chiudere le porte sottoposte 
a scansione sul vostro computer. Altri programmi come 
<package>ippl</package> oppure <package>iplogger</package> 
scovano attacchi portati mediante il protocollo IP
(TCP e ICMP), anche se non sono provvisti di molte delle 
tecniche avanzate presenti in <prgn>snort</prgn>.

<p>
Potete testare questi tools usando <package>idswakeup</package> presente 
in Debian, esso è uno script di shell che genera dei falsi allarmi ed 
include molti comuni attacchi.



<sect1>Sistemi per individuare gli intrusi

<p>
I sistemi per individuare gli intrusi controllano chi usa i 
file di log e/o i sistemi di verifica come se fossero una 
sorgente dati. Controllano i processi sospetti, l'accesso 
al sistema e possono riportare dei cambiamenti ai file 
fondamentali per il sistema.

<p>
<package>Tiger</package> è un vecchio strumento per scoprire
gli intrusi ed è ben integrato in debian sin da Woody. 
<package>Tiger</package> si prende cura di verificare i 
classici problemi che riguardano la sicurezza, come la 
sicurezza delle password, possibili problemi ai file system, 
processi di comunicazione e qualsiasi altro possibile 
compromesso. Sono presenti in questo pacchetto nuove 
verifiche di sicurezza specifiche per Debian come: verifica MD5sums 
dei file installati, localizzazione dei file che non 
appartengono ai pacchetti e analisi dei processi in ascolto.
L'installazione normale di <prgn>tiger</prgn> è attiva ogni 
giorno e genera un rapporto che viene spedito all'amministratore 
concernente i possibili file compromessi del sistema.

<p>
I programmi di controllo dei log come ad esempio 
<package>logcheck</package> possono essere usati 
per scovare dei tentativi di intrusione. Al riguardo 
potete leggere in <ref id="custom-logcheck">.

<p>
In più esistono programmi che controllano l'integrita dei file
systems (leggete in <ref id="check-integ">) che sono
abbastanza utili nella ricerca di anomalie in un sistema sicuro.
&Egrave; molto probabile che un vero intruso modifichi alcuni
file nel file system locale allo scopo di aggirare la politica
di sicurezza, installare dei cavalli di Troia, oppure creare
utenti. Questi eventi vengono ricercati dai programmi atti
a controllare l'integrità dei file system.


<sect>Evitare i root-kit

<sect1 id="LKM">Moduli del kernel caricabili (LKM)

<p>
I moduli caricabili del kernel sono file che contengono
componenti del kernel per espanderne le funzionalità,
caricabili in modo dinamico.
Il principale vantaggio nel loro impego sta nella
possibilità di aggiungere apparecchi addizionali, come
una scheda sonora o una Ethernet, senza apportare
correzioni al sorgente del kernel e senza ricompilarlo
interamente. Però, al momento, i cracker li sfruttano
per i loro root- kit (usurpando l'account di root (knark
e adore)) e aprire porte segrete (le cosiddette
"back door") nei sistemi GNU/Linux.

<p>
Le porte segrete aperte tramite LKM sono più sofisticate e meno rilevabili
rispetto ai tradizionali tentativi di usurpare gli strumenti di root. Possono
nascondere processi, file, cartelle e perfino connessioni, senza modificare
il codice sorgente dei binari. Per esempio, un LKM maligno può obbligare il
kernel a nascondere processi specifici da <file>procfs</file>, cosicché 
una copia del binario <prgn>ps</prgn>, ritenuta fedele, non fornirebbe, 
invece, informazioni precise sugli attuali processi in atto nel sistema.



<sect1>Scoprire i root-kit

<p>
Ci sono due approcci per difendere il sistema contro i root-kit a mezzo LKM:
la difesa preventiva e quella reattiva. Il lavoro di ricerca può essere
semplice e indolore, o difficile e faticoso, a seconda dell'approccio.


<sect2 id="proactive">Difesa proattiva

<p>
Il vantaggio di questo tipo di difesa è che in primo luogo
previene danni al sistema. Una siffatta strategia consiste nel
motto <em>arrivateci per primi</em>, cioè, caricare un LKM atta a 
proteggere il sistema da altri LKM maliziosi. Una seconda 
strategia è quella di rimuovere completamente la possibilità dei 
moduli del kernel caricabili. Si noti, comunque, che esistono 
rootkit che potrebbero funzionare anche in questo caso, ce ne sono 
alcuni che manomettono direttamente <file>/dev/kmem</file>
(la memoria del kernel) per non essere scoperti.

<p>
Debian GNU/Linux ha alcuni pacchetti che possono essere utilizzati
per creare una difesa proattiva:

<list>

<item>
<package>kernel-patch-2.4-lsm</package> - LSM è il framework Linux 
Security Modules.
<item>
<package>lcap</package> - una interfaccia user friendly per rimuovere la
<em>possibilità</em> (il controllo degli accessi a livello kernel) nel
kernel, rendendo il sistema più sicuro. Per esempio, eseguendo 
<tt>lcap CAP_SYS_MODULE</tt>

<footnote>
Ci sono oltre 28 possibilità, incluse:


<tt>CAP_BSET</tt>,
<tt>CAP_CHOWN</tt>,
<tt>CAP_FOWNER</tt>,
<tt>CAP_FSETID</tt>,
<tt>CAP_FS_MASK</tt>,
<tt>CAP_FULL_SET</tt>,
<tt>CAP_INIT_EFF_SET</tt>,
<tt>CAP_INIT_INH_SET</tt>,
<tt>CAP_IPC_LOCK</tt>,
<tt>CAP_IPC_OWNER</tt>,
<tt>CAP_KILL</tt>,
<tt>CAP_LEASE</tt>,
<tt>CAP_LINUX_IMMUTABLE</tt>,
<tt>CAP_MKNOD</tt>,
<tt>CAP_NET_ADMIN</tt>,
<tt>CAP_NET_BIND_SERVICE</tt>,
<tt>CAP_NET_RAW</tt>,
<tt>CAP_SETGID</tt>, 
<tt>CAP_SETPCAP</tt>,
<tt>CAP_SETUID</tt>,
<tt>CAP_SYS_ADMIN</tt>,
<tt>CAP_SYS_BOOT</tt>,
<tt>CAP_SYS_CHROOT</tt>,
<tt>CAP_SYS_MODULE</tt>,
<tt>CAP_SYS_NICE</tt>,
<tt>CAP_SYS_PACCT</tt>,
<tt>CAP_SYS_PTRACE</tt>,
<tt>CAP_SYS_RAWIO</tt>,
<tt>CAP_SYS_RESOURCE</tt>,
<tt>CAP_SYS_TIME</tt> e
<tt>CAP_SYS_TTY_CONFIG</tt>. 

Tutte queste possono essere disattivate per irrobustire il kernel.
</footnote>

si rimuoverà la possibilità di caricare moduli (anche per l'utente root).

<footnote>
Non si ha bisogno di installare <package>lcap</package> per fare 
questo, ma risulta più semplice che impostare 
<file>/proc/sys/kernel/cap-bound</file> manualmente.
</footnote>

Per maggiori informazioni sulle varie possibilità potete
controllare una sezione dello sviluppo del kernel di Jon Corbet's
<url id="http://lwn.net/1999/1202/kernel.php3" name="Kernel development">
sezione in LWN (dicembre 1999).

</list>

<p>
Se non si hanno affatto bisogno di molte caratteristiche del
kernel sul proprio sistema GNU/Linux, si può disabilitare il
supporto ai moduli caricabili durante la fase di configurazione 
del kernel. Per disabilitare questo supporto, impostate 
CONFIG_MODULES=n durante la fase di configurazione per la creazione 
del vostro kernel, oppure nel file <file>.config</file>. 
Questo annullerà i tentativi dei rootkit LKM, ma si perderà 
questa potente caratteristica del kernel Linux. Inoltre, 
disabilitare il supporto per i moduli caricabili a volte potrebbe 
appesantire il kernel, rendendo il supporto ai moduli necessario.


<sect2>Difesa reattiva

<p>
Il vantaggio di una difesa reattiva è che non sovraccarica le
risorse del sistema. Funziona confrontando la tabella delle
chiamate di sistema con una copia sicura in un file del disco,
<file>System.map</file>. Ovviamente, una difesa reattiva si limiterà ad
avvisare l'amministratore di sistema dopo che il sistema è già
stato compromesso.

<p>
Il controllo contro alcuni rootkit in Debian può essere realizzato
con il pacchetto <package>chkrootkit</package>. Il programma 
<url name="Chkrootkit" id="http://www.chkrootkit.org"> ricerca 
le firme di svariati rootkit noti sul sistema ma non è certo un 
test definitivo.

<p>
Un altro tool d'aiuto è 
<url name="KSTAT" id="http://www.s0ftpj.org/en/site.html">
(Kernel Security Therapy Anti Trolls) del gruppo S0ftproject.
KSTAT controlla l'area di memoria del kernel (<file>/dev/kmem</file>) alla
ricerca di informazioni che riguardano l'host obiettivo, in modo da
assistere l'amministratore di sistema a trovare e rimuovere LKM
maliziosi.


<sect>Si può fare... &mdash; idee geniali/paranoiche

<p>
Probabilmente questa è la sezione più instabile e bizzarra, ma si spera che
alcune di queste idee, volte ad aumentare la sicurezza, possano essere
realizzate &mdash; nonostante possano sembrare, a seconda dei punti di vista,
geniali, paranoiche, pazzesche o... profetiche.

<list>

<item>
Divertirsi con i Pluggable Authentication Modules (PAM - moduli per
l'autenticazione inseribili): come riportato nell'articolo su PAM, in
Phrack 56, il loro aspetto più simpatico è che "l'unico limite è ciò che 
si riesce a pensare". Ed è vero! S'immagini un'autenticazione di root
possibile solo mediante impronta digitale o scansione oculare o tessera
magnetica cifrata (ma perché usare la congiunzione "O", invece che la "E"?)

<item>
Registrazione dei log "fascista" - per contrasto verso tutte le precedenti
discussioni sulla "registrazione di log leggera": se si vuole una
registrazione di log degna di tal nome, basta spedire tutti i log ad una
stampante con carta a modulo continuo. Sembra un espediente buffo, ma è
sicuro e al riparo da manomissioni e cancellazioni.

<item>
Distribuzione su CD: idea davvero semplicissima a realizzarsi, dà una
sicurezza abbastanza buona; basta creare una distribuzione Debian ben
corazzata, con regole di firewall appropriate, convertirla in immagine ISO
inizializzabile e schiaffarla su un CD-Rom, così da avere una distribuzione
di sola lettura, con circa 600 MB di spazio per i vari servizi. Per gli
intrusi è impossibile ottenere l'accesso al sistema in lettura e scrittura
e qualsiasi cambiamento essi riescano a operare può essere annullato con la
reinizializzazione del sistema.

<item>
Disabilitare le funzionalità tramite modulo: come già visto, quando, 
durante la sua compilazione, si impedisce l'uso dei moduli del kernel, 
molte porte segrete basate su di esso non possono essere sfruttate, 
perché, nella maggioranza dei casi, si fondano sull'installazione 
di moduli del kernel modificati.

<item>
Registrazione dei log tramite cavo seriale (collaborazione di Gaby
Schilders): finché i server avranno porte seriali, si potrà dedicare un
sistema alla registrazione dei log di un certo numero di server. Tale
sistema sarà fuori dalla rete, ma connesso ai server per mezzo di una
multipresa per porte seriali (Cyclades o simili). Ora che tutti i server
registreranno verso le loro porte seriali, in sola scrittura, basterà
connettere un masterizzatore di CD/DVD, sul quale trasferire i file di
registrazione, appena essi giungano a riempire la capacità del supporto.
Se solo facessero dei masterizzatori con autocommutatori...! Non è un modo
di fare copie "dure" come la registrazione diretta a mezzo stampante, ma
può gestirne volumi più consistenti - e stoccare CD-Rom richede meno spazio.

<item>
Cambiare gli attributi dei file usando <prgn>chattr</prgn> 
(tratto da Tips-HOWTO, di Jim Dennis): dopo una semplice installazione 
e una configurazione iniziale, potete usare il programma <prgn>chattr</prgn> 
con l'attributo <tt>+i</tt>, per far si che i file non possano essere 
modificati (ossia, cancellati, rinominati, collegati o riscritti). 
&Egrave; bene impostare questo attributo su tutti i file delle
cartelle <file>/bin</file>, <file>/sbin/</file>,
<file>/usr/bin</file>, <file>/usr/sbin</file>, <file>/usr/lib</file>
e sui file del kernel in root. Si possono anche copiare i tutti file 
di <file>/etc/</file>, con <prgn>tar</prgn> o altro programma
simile e classificare l'archivio come immutabile.

<p>
Questa strategia aiuta a limitare i danni che si possono fare quando si
opera come root, così da non sovrascrivere file per una erronea redirezione
dell'operatore e non rendere inutilizzabile il sistema per uno spazio di
troppo nel comando <prgn>rm -fr</prgn>; si può fare comunque ancora 
molto danno ai propri dati &mdash; ma le librerie e i binari 
saranno PIU' SICURI!

<p>
Per di più, essa rende impossibile o, per lo meno, più difficile una serie
di attacchi alla sicurezza tramite denial of service (DoS - rifiuto di
fornire servizi), miranti a sovrascrivere un file attraverso 
l'azione di qualche programma di SETUID che 
<em>non fornisca comandi arbitrari di shell</em>.

<p>
Un inconveniente di questa strategia sorge in fase di costruzione e
installazione di vari binari di sistema, dal momento che impedisce al
comando <prgn>make install</prgn> la sovrascrittura dei file. 
Quando ci si scorda di leggere il Makefile e di cambiare con 
<prgn>chattr -i</prgn> i file da sovrascrivere (e le cartelle in cui 
si desidera aggiungerli), il comando make fallisce; bisogna lanciare 
<prgn>chattr</prgn> e poi farlo ripartire. Si può anche approfittare
dell'occasione per sbarazzarsi di binari e librerie vecchi, spostandoli 
in una cartella .old/ o in un archivio tar, per esempio.

<p>
Si noti che questa strategia impedisce anche di aggiornare i pacchetti del
proprio sistema, dal momento che i file forniti dai pacchetti dell'ultima
versione non possono essere sovrascritti. A questo proposito, si potrebbe
creare uno script o un altro meccanismo per disabilitare il
flag "immutabile" su tutti i binari giusto prima di fare un
<prgn>apt-get update</prgn>.

</list>


<sect1>Costruirsi una honeypot ("trappola al miele")

<p>FIXME: Serve maggiore materiale specifico per Debian

<p>
Una honeypot ("trappola al miele") è un sistema progettato per 
insegnare agli amministratori come i cracker sondano e sfruttano 
il sistema; è un modo di impostare un sistema con l'aspettativa 
e l'obiettivo che sia sondato, attaccato e potenzialmente, 
sfruttato. Conoscendo gli strumenti e le metodiche dei cracker, 
un amministratore di sistema impara a proteggere meglio i 
sistemi e le reti di cui si occupa.

<p>
Un sistema Debian GNU/Linux può essere agevolmente configurato come "trappola
al miele", dedicando un po' di tempo ad attuazione e controllo: basta
impostare il falso server con un firewall e un qualsiasi rilevatore di
intrusioni nella rete, collegarlo a Internet e aspettare. In caso di
sfruttamento del sistema, occorre essere ben certi di essere avvisati per
tempo (vedete <ref id="log-alerts">), sì da poter assumere le 
opportune contromisure e terminare il danneggiamento quando se ne
conosca abbastanza. Questo è un elenco di pacchetti e di aspetti 
da valutare durante l'impostazione di una honeypot:

<list>

<item>
La tecnologia di firewall che si impiegherà (fornita dal kernel Linux).
<item>
<package>syslog-ng</package>, utile per mandare log dalla trappola ad
un server remoto di syslog.
<item>
<package>snort</package>, per impostare la cattura dell'intero traffico 
in entrata nella trappola e rilevare gli attacchi.
<item><package>osh</package>, una shell di root, di tipo SETUID, 
con limitazioni, migliorata sotto il profilo della sicurezza e con 
un sistema di registrazione dei log (vedete, più oltre, l'articolo di 
Lance Spitzner).
<item>
Ovviamente, tutti i demoni che si useranno per il server-trappola
(ricordarsi di <em>non proteggerlo</em>).
<item>
Il Deception Toolkit (equipaggiamento per la frode), che usa 
l'inganno per respingere gli attacchi.
Homepage: <url id="http://www.all.net/dtk/" name="Deception Toolkit">
<item>
Verificatori di integrità (vedete <ref id="check-integ">) ed 
il Coroner's Toolkit (<package>tct</package> - gli "Strumenti del 
Patologo"), per fare i controlli post-attacco.

</list>

<p>
Maggiori informazioni sulla costruzione di honeypot si possono
trovare nell'eccellente articolo di Lanze Spitzner 
<url id="http://www.net-security.org/text/articles/spitzner/honeypot.shtml"
name="To Build a Honeypot">, (costruire una honeypot), - della serie "conosci i tuoi nemici" o in <url 
id="http://www.zdnetindia.com/techzone/resources/security/stories/7601.htm"
name="Building your own honeypot"> (costruirsi la propria honeypot), 
di David Raikow.
Inoltre, l'<url id="http://project.honeynet.org/" name="Honeynet Project">
offre informazioni preziose sul modo di costruire queste trappole e 
controllare gli attacchi rivolti contro di esse.




<chapt id="after-compromise">Dopo la compromissione (reazione agli incidenti)




<sect>Come comportarsi, in generale

<p>
Se si è fisicamente presenti durante l'attacco, la prima risposta 
dovrebbe essere rimuovere la macchina dalla rete, estraendo la 
scheda di rete (sempre che ciò non danneggi transazioni commerciali
in atto). Disabilitare la rete a basso livello è l'unico vero modo 
di allontanare l'attaccante dalla postazione presa di mira (saggio 
consiglio di Philip Hofmeister).

<p>
Tuttavia, alcuni strumenti di root e porte segrete possono rilevare 
questo fatto e reagire: vedere l'esecuzione di un <tt>rm -rf /</tt> 
mentre si estrae la scheda di rete dal sistema non è molto piacevole. 
Se non si volete correre questo rischio e siete sicuri del 
danneggiamento del sistema, dovreste <em>staccare la spina della 
corrente</em> (tutte le spine, se sono più di una) e incrociare le 
dita; può sembrare un rimedio estremo, ma, di fatto, evita l'azione 
di qualsiasi bomba-logica programmata dall'intruso. In questo caso,
il sistema <em>non deve essere reinizializzato</em>, ma si 
dovrebbero spostare i dischi fissi su un altro sistema, per 
analizzarli ed usare un altro supporto (un CD-Rom) per inizializzare 
il sistema ed esaminarlo. <em>Evitare</em> l'uso di un disco di 
ripristino Debian per far ripartire il sistema: se si vuole fare
l'analisi del sistema, <em>usare</em> la shell fornita dai dischi 
di installazione (premendo Alt+F2).

<footnote>
Se amate l'avventura, potete salvare informazioni su tutti 
i processi attivi (se ne ricavano molti da /proc/nnn/): potete 
ricavare dalla memoria l'intero codice eseguibile, anche se 
l'attaccante ha cancellato dal disco i file eseguibili, dopodiché... 
staccare la spina della corrente!
</footnote>

<p>
L'uso di un file system attivo da CD-Rom, con tutti gli strumenti (e i moduli
del kernel) che possano servire per accedere al sistema danneggiato è il
metodo più consigliabile per tentarne il recupero. Per ottenere tale CD-Rom,
si può usare il pacchetto <package>mkinitrd-cd</package>.

<footnote>
In effetti, questo è lo strumento usato per i CD-Rom del Progetto
<url id="http://www.gibraltar.at/" name="Gibraltar">, un firewall 
su CD-Rom attivo basato sulla distribuzione Debian.
</footnote>. 

Potrebbe essere utile anche il Cd-Rom di 
<url id="http://biatchux.dmzs.com/" name="Biatchux">, visto che è un Cd-Rom
attivo e dotato di strumenti diagnostici utili per questi casi. Non ci sono
ancora né uno strumento come questo basato su Debian, né un modo semplice per
allestire un simile Cd-Rom: per farlo, usando una propria selezione di 
pacchetti Debian e <package>mkinitrd-cd</package>, sarà necessario leggere 
tutta la documentazione fornita con esso.

<p>
Se si vuole aggiustare il danno in tempi brevi, si deve rimuovere dalla
propria rete la postazione danneggiata e reinstallare da zero il sistema
operativo. Naturalmente, questa potrebbe essere una scelta inefficace, dal
momento che non rivela come l'intruso sia riuscito ad assumere lo status di
root; per capirlo, bisogna controllare tutto: il firewall, l'integrità dei
file, la postazione dedicata alla registrazione dei log, gli stessi file di
log e via dicendo. Per maggiori informazioni sul da farsi mentre si segue
un'irruzione, vedete 
<url name="Sans' Incident Handling Guide (la Guida di Sans su come
           affrontare un incidente)"
     id="http://www.sans.org/y2k/DDoS.htm"> o 
<url id="http://www.cert.org/tech_tips/root_compromise.html" 
     name="CERT's Steps for Recovering from a UNIX or NT System Compromise
           (Regole del CERT per rimediare a un danno a sistemi UNIX o NT)">.

<p>
Alcune questioni comuni, su come trattare un sistema Debian GNU/Linux
danneggiato, sono affrontate in <ref id="vulnerable-system">.


<sect>Fare una copia di ripristino del sistema

<p>
Si tenga presente che, se si è sicuri che il sistema sia stato danneggiato,
non si può fare affidamento sui programmi installati né sulle informazioni
restituite: le applicazioni potrebbero essere state infettate da virus
trojan, alcuni moduli del kernel poterebbero essere stati installati, ecc.

<p>
La miglior cosa da farsi è una copia completa del file system (mediante 
<prgn>dd</prgn>), dopo la reinizializzazione da un supporto sicuro. 
A tal fine, possono risultare comodi i CD-Rom di Debian GNU/Linux, 
dal momento che, iniziata l'installazione, forniscono, nella console 
2, una shell raggiungibile con Alt+F2 e Invio. Da questa, si salvano 
le informazioni su un altra postazione, se possibile (magari un 
server di file di rete, tramite NFS/FTP), sì da potere svolgere,
a sistema interessato non in linea, l'analisi del danno o la 
reinstallazione.

<p>
Se siete sicuri che la compromissione è avvenuta tramite un 
trojano installato in un modulo del kernel, potete avviare 
tramite l'immagine del kernel denominata <em>rescue</em>.
Assicuratevi di avviare in modalità <em>single user</em>, per 
evitare che altri processi trojanizzati si avviino dopo il kernel.


<sect>Contattate il vostro CERT locale
<p>Il CERT (Computer and Emergency Response Team) è un'organizzazione
che vi può aiutare a recuperare un sistema compromesso. Ci sono CERT
in tutto il mondo

<footnote>
Questa è una lista di alcuni CERT, per una completa consultare

<url id="http://www.first.org/team-info/" name="FIRST Member Team
information"> (FIRST è il Forum delle reazioni agli incidenti e Security Team):
<url id="http://www.auscert.org.au" name="AusCERT"> (Australia),
<url id="http://www.unam-cert.unam.mx/" name="UNAM-CERT"> (Messico)
<url id="http://www.cert.funet.fi" name="CERT-Funet"> (Finlandia),
<url id="http://ww.dfn-cert.de" name="DFN-CERT"> (Germania),
<url id="http://cert.uni-stuttgart.de/" name="RUS-CERT"> (Germania),
<url id="http://idea.sec.dsi.unim.it" name="CERT-IT"> (Italia),
<url id="http://www.jpcert.or.jp/" name="JPCERT/CC"> (Giappone),
<url id="http://cert.uninett.no" name="UNINETT CERT"> (Norvegia),
<url id="http://www.cert.pl" name="CERT Polskay"> (Polonia),
<url id="http://www.cert.ru" name="RU-CERT"> (Russia),
<url id="http://www.arnes.si/si-cert/" name="Sl-CERT"> (Slovenia)
<url id="http://www.rediris.es/cert/" name="IRIS-CERT"> (Spagna),
<url id="http://www.switch.ch/cert/" name="SWITCH-CERT"> (Svizzera),
<url id="http://www.cert.org.tw" name="TWCERT/CC"> (Taiwan),
e
<url id="http://ww.cert.org" name="CERT/CC"> (USA).
</footnote>

e dovreste contattare il vostro CERT nel caso vi capitasse un
incidente di sicurezza che compromettesse un sistema.
Le persone del vostro CERT vi potranno aiutare a recuperarlo.

<p>Fornendo al vostro CERT (o al CERT coordination center) informazioni
sulla compromissione, anche se non state cercando assistenza, potrete
aiutare gli altri, giacché l'insieme delle informazioni sugli incidenti
riportati al CERT è utilizzata per determinare se una data
vulnerabilità è di uso comune, se c'è un nuovo worm in giro e quali
nuovi strumenti di attacco sono utilizzati.
Queste informazioni sono usate per fornire alla comunità di internet
le informazioni sulla
<url id="http://www.cert.org/current/"
     name="attuale attività sugli incidenti di sicurezza">, per
pubblicare <url id="http://www.cert.org/incident_notes/"
                name="le note sugli incidenti"> e anche gli
<url id="http://www.cert.org/advisories/" name="avvisi">.
Per informazioni più dettagliate leggete come (e perché) fare il
rapporto di un incidente nelle
<url id="http://www.cert.org/tech_tips/incident_reporting.html"
     name="Linee guida sul rapporto di un incidente">.

<p>Potete anche usare meccanismi meno formali se avete bisogno di
recuperare una compromissione, o se volete discutere sulle informazioni
di un'incidente. Ciò include la
<url id="http://marc.theaimsgroup.com/?l=incidents"
     name="mailing list degli incidenti"> e la
<url id="http://marc.theaimsgroup.com/?l=intrusions"
     name="mailing list delle intrusioni">.


<sect>Analisi "patologica"

<p>
Se si desiderano maggiori informazioni, il pacchetto 
<package>tct</package> ("Gli strumenti del patologo", di Dan Farmer 
e Wientse Venema), oltre a contenere accessori che fanno l'autopsia 
del sistema, permette all'utente di raccogliere dati sui file
cancellati, processi in atto e quant'altro 
(cfr. documentazione acclusa).

<p>
Altri strumenti forniti dalla distribuzione Debian per l'analisi 
"patologica" sono:

<list>

<item><package>Fenris</package>.
<item><package>Strace</package>.
<item><package>Ltrace</package>.

</list>

<p>
Questi pacchetti possono analizzare i "binari-canaglia" (come le porte
segrete), per stabilire come funzionino e che cosa facciano al sistema. 
Altri strumenti comuni comprendono 
<prgn>ldd</prgn> (in <package>libc6</package>), <prgn>strings</prgn> e
<prgn>objdump</prgn> (entrambi in <package>binutils</package>).

<p>
Un'analisi patologica su porte segrete o binari sospetti scoperti su sistemi
danneggiati, dovrebbe essere condotta in ambiente sicuro (per esempio,
un'immagine di tipo <package>bochs</package>, <package>flex86</package>
o un sistema sottoposto a <prgn>chroot</prgn> con un utente con 
privilegi minimi), altrimenti il sistema può essere a rischio di
porte segrete o, peggio, usurpazione di root.

<p>
Inoltre, condurre sempre l'analisi patologica sulla copia di ripristino dei
dati, <em>mai</em> direttamente sui dati stessi: in caso di alterazione 
durante l'analisi, ogni tipo di prova verrebbe perso!

<p>
FIXME: Se tutto va bene, in futuro questo paragrafo possa contenere maggiori
informazioni sui metodi di diagnosi in un sistema Debian.

<p>
FIXME: Bisognerebbe parlare di come creare un archivio di tipo debsums su un
sistema stabile, salvando i file MD5sums su CD e ripristinando su una
partizione distinta il sistema recuperato.

<p>
FIXME: aggiungere indicazioni su scritti riguardanti l'analisi "patologica",
come "the Honeynet's reverse challenge" (La controsfida della Honeynet) o i
<url id="http://staff.washington.edu/dittrich/"
     name="saggi di David Dittirch's">.







<chapt>Domande frequenti (FAQ)

<p>
Questo capitolo introduce alcune delle domande più frequenti nella lista di
discussione Debian sulla sicurezza (Debian security mailing list): bisogna
leggerle, prima di spedire domande e rischiare la risposta, 
RTFM ("leggiti il fottuto manuale!").



<sect>La sicurezza nel sistema operativo Debian



<sect1>Debian è più sicura di quella X?

<p>
Un sistema è sicuro in proporzione alla capacità del suo 
amministratore di renderlo tale. L'installazione predefinita di 
Debian mira alla <em>sicurezza</em>, ma può non essere paranoica
come quelle di altri sistemi operativi che installano tutti i
servizi <em>predefinitamente esclusi</em>. In ogni caso, ogni
amministratore deve adattare la sicurezza del sistema alla politica
di sicurezza di dov'è impiegato.

<p>
Per una raccolta di dati sulle vulnerabilità della sicurezza in molti
sistemi operativi, vedete
<url id="http://securityfocus.com/vulns/stats.shtml">, sito che elenca
parecchi fattori di cui tenere conto nell'interpretazione dei dati;
notate che i medesimi dati non possono essere usati per confrontare
le vulnerabilità di sistemi operativi diversi.

<footnote>
Per esempio, stando ai dati di Securityfocus, sembrerebbe che Windows
NT sia più sicuro di Linux; affermazione discutibile: in fondo, le
distribuzioni Linux offrono molti più applicativi rispetto a Windows NT.
Questo problema del <em>conteggio delle vulnerabilità</em>
è meglio descritto nel
<url id="http://www.dwheeler.com/oss_fs_why.html#security"
     name="Why Open Source Software / Free Software (OSS/FS)? Look at the Numbers!">
di David A. Wheeler
</footnote>.

Inoltre ricordate che alcune vulnerabilità di Debian scoperte da
Bugtraq riguardano solamente la distribuzione <em>unstable</em>.


<sect2>
Debian è più sicura di altre distribuzioni Linux (Red Hat, SuSe...)?

<p>
Non ci sono davvero molte differenze fra le varie distribuzioni Linux, al
di là dell'installazione di base e del sistema di gestione dei pacchetti; in
genere, esse hanno in comune molti applicativi (ad esempio, il kernel, Bind,
Apache, OpenSSH, XFree, gcc, zlib, ecc.), che si differenziano principalmente
per la versione inclusa nella distribuzione stabile.

<p>
RedHat è stata sfortunata nel rilasciare una versione contenente l'allora
attuale foo 1.2.3., che aveva un difetto nella sicurezza, come si scoprì in un
secondo momento; invece, Debian ha avuto miglior sorte nel rilasciare la
propria con foo 1.2.4.,in cui quel difetto era stato eliminato. L'identico
caso si ripeté con 
<url id="http://www.cert.org/advisories/CA-2000-17.html" name="rpc.statd">,
un paio di anni fa.

<p>
Fra i gruppi della sicurezza delle maggiori distribuzioni Linux c'è molta
collaborazione: raramente un distributore trascura di sistemare gli
aggiornamenti in materia di sicurezza e le cognizioni sulla sua vulnerabilità
non vengono mai nascoste agli altri, dato che le correzioni sono coordinate
già in fase di sviluppo, oppure dal <url id="http://cert.org" name="CERT">. 
Ne consegue che
gli aggiornamenti necessari sono diffusi nello stesso momento e la relativa
sicurezza delle diverse distribuzioni è molto simile.

<p>
Riguardo ad essa, uno dei maggiori vantaggi di Debian è il 
semplice sistema di aggiornamento mediante l'uso di 
<prgn>apt</prgn>; ma ecco altri aspetti da considerare:

<list>

<item>
Rispetto ad altre distribuzioni, Debian offre maggiori strumenti per la
sicurezza, vedete in <ref id="sec-tools">.
<item>
L'installazione standard di Debian è più leggera (minori funzionalità), ma
più sicura. Altre distribuzioni, in nome dell'usabilità, tendono
all'installazione predefinita di molti servizi, talvolta non perfettamente
configurati - da ricordare i worm 
<url id="http://www.sans.org/y2k/lion.htm" name="Ramen o Lion ">. 
Non è un'installazione restrittiva come quella di Openbsd (nessun 
demone in modo predefinito attivo), ma è un buon compromesso. 

<footnote>
Senza sminuire il fatto che alcune distribuzioni, come RedHat e Mandrake,
tengono conto della sicurezza nelle loro installazioni standard, facendo
scegliere all'utente i <em>profili di sicurezza</em>, o usando programmi di
configurazione guidata di <em>firewall personali</em>.
</footnote>
<item>
Debian documenta al meglio le pratiche di sicurezza, in scritti come questo.

</list>


<sect1>Bugtraq cita molti difetti di Debian: è forse molto vulnerabile?

<p>
La distribuzione Debian vanta un grande e crescente numero di pacchetti
software, probabilmente più di quelli offerti da molti sistemi operativi
proprietari. Maggiore è il numero dei pacchetti installati, maggiore il
rischio di problemi di sicurezza in qualunque dato sistema.

<p>
Aumenta il numero di esaminatori del codice sorgente per cercare imperfezioni.
Ci sono molti resoconti circa i controlli sul codice sorgente dei principali
componenti software inclusi in Debian: qualora un controllo riveli dei difetti
per la sicurezza, vi si ovvia e se ne manda un resoconto a liste come Bugtraq.

<p>
Di solito, i difetti presenti in Debian affliggono anche le altre
distribuzioni. Controllate la sezione "Specifico di Debian: sì/no" 
all'inizio di ogni resoconto DSA (Debian Specific Advisory).


<sect1>Debian ha certificazioni di sicurezza?

<p>Risposta concisa: no.

<p>
Risposta prolissa: le certificazioni costano e nessuno ha destinato risorse alla
certificazione di Debian/GNU Linux nemmeno a livello di Criteri Comuni.
Se siete interessati alla sua certificazione, fornite le risorse
necessarie (grazie!).


<sect1>Ci sono programmi per rendere Debian più sicura?

<p>
Sì. <url name="Bastille Linux" id="http://www.bastille-linux.org">, 
diretto, all'origine, ad
altre distribuzioni Linux (RedHat e Mandrake), oggi funziona su Debian. Si
sta procedendo a integrare i cambiamenti apportati sulla versione di sviluppo
nel pacchetto Debian chiamato <package>bastille</package>.

<p>
Alcuni, tuttavia, ritengono che gli strumenti per avere maggiore sicurezza 
non possano eliminare l'esigenza di una buona amministrazione.


<sect1>Ho necessità di rendere disponibile il servizio XYZ, come sceglierlo?

<p>
Un punto di forza di Debian è l'ampia varietà di scelta fra pacchetti che
forniscono le stesse funzionalità (serventi di tipo DNS, ftp, di posta, di
rete, ecc.). Questo può confondere un amministratore inesperto nel 
determinare il pacchetto più adatto per un utente. La soluzione 
migliore dipende da un compromesso fra le esigenze dell'utenza e 
quelle della sicurezza. Per decidere fra pacchetti simili, bisogna 
rispondere ad alcune domande, come:

<list>

<item>
Il software continua a essere sviluppato? Quand'è uscita l'ultima
versione?
<item>
Il pacchetto è obsoleto? Il numero di versione <em>non</em> ne indica 
l'età: cercate di tracciarne la storia.
<item>
Il programma è esente da difetti? Ci sono avvisi sulla sua sicurezza?
<item>
Il programma ha tutte le funzionalità cercate, o più di quelle 
necessarie?

</list>


<sect1>Come rendere il servizio XYZ più sicuro in Debian?
<!-- Changed to XYZ in order to avoid confusion :) jfs -->

<p>
In questo documento si troveranno informazioni sul modo 
di rendere alcuni servizi (FTP, Bind) più sicuri in Debian GNU/Linux 
(per quelli non trattati qui, vedete la documentazione del programma 
o le informazioni generali su Linux). La maggior parte delle linee 
guida per la sicurezza di Unix si applicano anche a Debian.
Proteggere un servizio in Debian è come farlo in qualunque 
altra distribuzione Linux (o Un*x, per quell'argomento).


<sect1>Come posso rimuovere tutte le etichette per i servizi?

<p>
Se non si vuole che gli utenti si connettano ad un servizio ed ottengano
informazioni sul sistema, probabilmente vorrete rimuovere o cambiare
l'etichetta che quel servizio mostra all'utente

<footnote>
N.B.: ciò significa "sicurezza tramite offuscamento" e a lungo 
termine, non paga.
</footnote> 

a seconda del software eseguito. Per esempio, in <prgn>postfix</prgn> 
si può impostare l'etichetta SMTP della cartella 
<file>/etc/postfix/main.cf</file>:

<example> 
  smtpd_banner = $myhostname ESMTP $mail_name (Debian/GNU) 
</example>

<p>
Altro software non è così semplice a modificarsi. 
<package>OpenSSH</package> richiederà una ricompilazione per 
mutare la versione mostrata; fate attenzione a non rimuovere la
prima parte dell'etichetta (<tt>SSH-2.0</tt>), usata dai clienti 
per identificare il protocollo, ovvero i protocolli, che il 
pacchetto supporta.


<sect1>Sono sicuri tutti i pacchetti Debian?

<p>
Il Security Team di Debian non può analizzare i potenziali punti
deboli di tutti i pacchetti, perché mancano le risorse per i controlli
dell'intero codice sorgente; Debian beneficia, però, di quelli svolti dagli
sviluppatori, in fase progettuale o da altri progetti come 
<url name="Linux Kernel Security Audit Project (progetto di controllo 
           della sicurezza del kernel Linux)"
     id="http://kernel-audit.sourceforge.net/">, o 
<url name="Linux Security-Audit Project (progetto di controllo della 
           sicurezza di Linux)" 
     id="http://www.lsap.org/">.

<p>
In effetti, uno sviluppatore Debian potrebbe benissimo distribuire un virus di
tipo trojan in un pacchetto, senza che venga scoperto: anche se esperti in un
ramo di Debian, sarebbe impossibile trattare tutte le possibili situazioni in
cui il trojan potrebbe agire. 
Perciò, Debian ha una licenza <em>"no guarantees"</em>.

<p>
Tuttavia, gli utenti Debian possono fidare nel fatto che il codice stabile
abbia un vasto pubblico: la maggior parte dei problemi si manifesterebbe con
l'uso. In un sistema molto importante, non è indicato installare software, in
mancanza del necessario controllo del codice. In ogni caso, quand'anche nella
distribuzione sia introdotta una vulnerabilità della sicurezza, il processo di
inclusione dei pacchetti assicura la riconducibilità finale allo sviluppatore
(mediante le firme digitali). Il progetto Debian non sottovaluta il problema.


<sect1>Chiunque può leggere certi file di log/configurazione: non è insicuro?

<p>
Naturalmente, nel proprio sistema, ognuno può cambiare i permessi predefiniti
di Debian. Con l'attuale linea di condotta sui file di log e configurazione,
ognuno li può leggere, <em>salvo che</em> contengano informazioni sensibili.

<p>Si raccomanda prudenza, nel fare cambiamenti, dal momento che:

<list>

<item>
Se si limitano i permessi, certi processi potrebbero non 
riuscire a scrivere sui file di log.
<item>
Alcune applicazioni potrebbero non funzionare se non fosse leggibile il
file di configurazione da cui dipendono. Per esempio, se si rimuove il
permesso di libera leggibilità per <file>/etc/samba/smb.conf</file>, 
il programma <prgn>smbclient</prgn> non funzionerà, se attivato 
da un utente normale.

</list>

<p>
FIXME: Controllare se questo sia scritto nella Policy: Alcuni pacchetti 
(cioè i demoni ftp) sembrano imporre permessi differenti.


<sect1>Perché /root/ (o User X) ha i permessi impostati a 755?

<p>
In effetti, l'identico problema riguarda qualunque altro utente. 
Siccome l'installazione di Debian non mette <em>alcun</em> file in 
quella cartella, non vi sono informazioni importanti da proteggere; 
se si ritiene che tali permessi siano troppo ampi per il sistema, 
li potete restringere a 750. Per gli utenti, leggete in 
<ref id="limit-user-perm">.

<p>
Questo tema è trattato più ampiamente nella Debian security mailing list,
gruppo di discussione sulla sicurezza, in questo
<url id="http://lists.debian.org/debian-devel/2000/debian-devel-200011/msg00783.html" name= "thread">.


<sect1>
Rimozione dei messaggi che arrivano in consolle dopo l'installazione
di un grsec/firewall

<p>
Se si ricevono messaggi in consolle e si è configurato 
<file>/etc/syslog.conf</file>, in modo da trasmetterli a dei file 
o ad uno speciale TTY, potreste assistere alla spedizione di 
messaggi sulla console.

<p>
Per ogni kernel, il livello predefinito per la trasmissione dei messaggi di log
è 7 (quindi, quelli con priorità inferiore appariranno in console). Di solito
i firewall (il regno dei LOG) e altri accessori di sicurezza registrano log
con priorità inferiore, che, quindi, sono spediti direttamente in console.

<p>
Per ridurre il numero di tali messaggi, si può usare <prgn>dmesg</prgn> 
[con l'opzione <tt>-n</tt>, vedete <manref section="8" name="dmesg">]), 
che esamina e <em>controlla</em> il kernel ring buffer. Per regolarlo 
dal prossimo riavvio, cambiate <file>/etc/init.d/klogd</file> da:

<example>
  KLOGD=""
</example>

<p>a:

<example>
  KLOGD="-c 4"
</example>

<p>
Usate un numero inferiore con <tt>-c</tt>, se continuate a vederli; 
una descrizione dei vari livelli dei messaggi di log si trova in 
<file>/usr/include/sys/syslog.h</file>:

<example>
  #define LOG_EMERG       0       /* sistema fuori uso */
  #define LOG_ALERT       1       /* agire immediatamente */
  #define LOG_CRIT        2       /* condizioni critiche */
  #define LOG_ERR         3       /* condizioni di errore */
  #define LOG_WARNING     4       /* condizioni di allerta */
  #define LOG_NOTICE      5       /* condizioni normali ma importanti */
  #define LOG_INFO        6       /* semplice informativa */
  #define LOG_DEBUG       7       /* messaggio a livello-debug */
</example>


<sect1>Utenti e gruppi del sistema operativo


<sect2>Tutti gli utenti di sistema sono necessari?

<p>
Sì e no: Debian arriva con alcuni utenti predefiniti (user id - (UID)
&lt; 99 come descritto in <url name="Debian Policy (Linee guida di Debian)"
     id="http://www.debian.org/doc/debian-policy/"> o
<file>/usr/share/doc/base-passwd/README</file>) per semplificare 
l'installazione di servizi che richiedano l'attivazione con un appropriato
utente/UID. Se non si intende installare nuovi servizi, si possono 
rimuovere in sicurezza quegli utenti che non possiedano file nel 
sistema e non attivino nessun servizio. In ogni caso, per assetto 
predefinito le UID da 0 a 99 sono riservate a Debian, quelle da 
100 a 999 sono create dai pacchetti all'atto dell'installazione 
(e cancellate quando il pacchetto viene "epurato").

<p>
Per scoprire facilmente gli utenti che non possiedono file, è possibile 
eseguire (da root, dato che agli utenti comuni potrebbero mancare i 
permessi necessari per potere esaminare alcune cartelle "delicate") 
il seguente comando:

<!-- Took the liberty to make this script more secure ... >:^) // era -->

<example>
  cut -f 1 -d : /etc/passwd | \
  while read i; do find / -user "$i" | grep -q . && echo "$i"; done
</example>

<p>
Tali utenti sono forniti da <package>base-passwd</package>; per maggiori 
informazioni sulla loro gestione in Debian, consultate la documentazione 
del pacchetto. Gli utenti predefiniti (con gruppo corrispondente) sono:


<list>

<item>root: Root è (tipicamente) il Superutente.
<item>
daemon: Alcuni demoni sprovvisti di privilegi di sorta che devono scrivere
su file sono attivi come daemon.daemon (per esempio, 
<prgn>portmap</prgn>, <prgn>atd</prgn> e probabilmente, altri), invece, 
i demoni che non hanno bisogno di possedere file possono attivarsi 
come nobody.nogroup, mentre altri, più rispettosi della sicurezza, lo
fanno come utenti dedicati. Il demone utente è utile anche per i demoni 
installati localmente.
<item>bin: Mantenuto per ragioni storiche.
<item>
sys: Idem come sopra; /dev/vcs* e <file>/var/spool/cups</file>, però,  
sono di proprietà del gruppo sys.
<item>
sync: La shell dell'utente sync è <file>/bin/sync</file>, così, se la 
sua parola d'ordine è semplice da indovinare (una cosa tipo ""), 
chiunque può sincronizzare il sistema da console, anche senza avere un 
account.
<item>
games: Molti giochi sono impostati per il gruppo (SETGID) games , sì da
poter scrivere file coi migliori punteggi. Spiegazione nelle Linee Guida.
<item>
man: Il programma man (a volte) è attivo come utente man, in modo da poter
scrivere pagine in <file>/var/cache/man</file>.
<item>lp: Usato dai demoni di stampa.
<item>
mail: Le caselle in <file>/var/mail</file> appartengono al guppo mail, 
come esposto nelle Linee Guida. Utente e gruppo sono usati, ad 
altri fini, anche da vari MTA.
<item>
news: Diversi serventi di news ed altri programmi associati 
(come <prgn>suck</prgn>) impiegano l'utente e il gruppo in vari 
modi: spesso, i file nello spool news appartengono ad entrambi. 
Programmi come <prgn>inews</prgn>, usati per spedire news,
sono tipicamente impostati per il gruppo (SETGID) news.
<item>
uucp: L'utente e il gruppo UUCP sono usati dal sottosistema UUCP, cui
appartengono i file di spool e di configurazione. Gli utenti del gruppo 
uucp possono eseguire uucico.
<item>
proxy: Come demone, questo utente e gruppo possono essere usati da demoni
(di tipo proxy, in particolare) sprovvisti di utente dedicato ma
che debbono essere proprietari di quei file. Per esempio, il gruppo 
proxy è usato da <prgn>pdnsd</prgn>, mentre <prgn>squid</prgn> è 
attivo come utente proxy.
<item>
majordom: Nei sistemi Debian, <prgn>Majordomo</prgn> aveva un UID 
allocato in modo statico, per ragioni storiche: non è installato nei nuovi.
<item>
postgres: I database <prgn>Postgresql</prgn> appartengono a questo 
utente e gruppo. Tutti i file di <file>/var/lib/postgresql</file> 
appartengono a questo utente per rafforzare la sicurezza.
<item>
www-data: Alcuni serventi di rete sono attivi come www-data. Il contenuto
di rete *non* dovrebbe essere posseduto da questo utente, o un server
danneggiato potrebbe riscrivere un sito web. I dati restituiti da un
server web, file di log compresi, appartengono a www-data.
<item>
backup: così, le responsabilità del ripristino/recupero possono essere
date, localmente, ad una persona che non abbia i pieni permessi di root.
<item>
operator: Storicamente (e praticamente) operator è il solo accredito "user"
che possa autenticarsi da remoto senza dipendere da NIS/NFS.
<item>
list: Gli archivi dei gruppi di discussione (mailing list) appartengono a
questo utente e gruppo; alcuni appositi programmi girano come utente list.
<item>
irc: Usato dai demoni irc. Un utente allocato staticamente occorre solo per
via di un baco in <prgn>ircd</prgn>, che all'avvio si imposta su 
di un dato utente.
<item>gnats.
<item>
nobody.nogroup: Demoni cui non occorre nessun file si eseguono come utente e
gruppo nobody; in tal modo, nessun file nel sistema è di loro proprietà.

</list>

<p>Altri gruppi senza utenti associati:

<list>

<item>
adm: Gruppo usato per compiti di monitoraggio del sistema, i suoi membri
possono leggere i file di log della cartella <file>/var/log</file> e 
usare xconsole. In passato, <file>/var/log</file> era <file>/usr/adm</file> 
(e poi, <file>/var/adm</file>), da cui il nome.
<item>
tty: Gruppo titolare dei dispositivi TTY (TeleTYpe, telescrivente), usati
come strumento di comunicazione per scrivere verso TTY altrui.
<item>
disk: Accesso "grezzo" ai dischi, per lo più equivalente all'accesso come root.
<item>
kmem: Questo gruppo legge /dev/kmem e file similari: è principalmente una
reliquia di BSD, ma si possono impostare per esso (SETGID) quei programmi
che richiedano un accesso diretto, in lettura, alla memoria di sistema.
<item>
dialout: I suoi membri hanno pieno e diretto accesso alle porte seriali e
possono riconfigurare il modem, fare chiamate verso qualunque posto, ecc. ...
<item>
dip: Acronimo di "Dial-up IP", i suoi membri possono usare strumenti come
<prgn>ppp</prgn>, <prgn>dip</prgn>, <prgn>wvdial</prgn>, ecc. per 
avviare una connessione ed eseguire i programmi che utilizzano il 
modem, ma non possono configurarlo.
<item>fax: Consente ai membri l'uso del fax in emissione/ricezione.
<item>
voice: Posta vocale, utile per sistemi che usano il modem come segreteria.
<item>
cdrom: Usato localmente per dare agli utenti un accesso all'unità CDROM.
<item>
floppy: Usato localmente per dare agli utenti un accesso all'unità floppy.
<item>
tape: Usato localmente per dare agli utenti un accesso alle unità nastro.
<item>
sudo: I membri di questo gruppo non devono digitare la password per usare
<prgn>sudo</prgn>. Vedete in <file>/usr/share/doc/sudo/OPTIONS</file>.
<item>
audio: Usato localmente per dare agli utenti l'accesso ai dispositivi audio.
<item>
src: Proprietario di codice sorgente, file in <file>/usr/src</file> compresi, 
è usato per dare agli utenti la facoltà di gestire il codice sorgente 
presente sul sistema.
<item>
shadow: I programmi che necessitano di accedere al file 
<file>/etc/shadow</file>, devono avere impostato il SETGID per 
il gruppo shadow, che può leggerlo.
<item>
utmp: Può scrivere sul file <file>/var/run/utmp</file> e simili: 
programmi che devono poter scrivere su di esso, devono avere impostato il 
SETGID per il gruppo utmp.
<item>
video: Usato localmente per dare agli utenti l'accesso ai dispositivi video.
<item>
staff: Consente agli utenti modifiche locali del sistema (in 
<file>/usr/local</file>, <file>/home</file>) anche senza i privilegi 
di root. Lo si confronti con il gruppo "adm",  volto maggiormente a 
compiti di monitoraggio e sicurezza.
<item>
users: Mentre i sistemi Debian usano il sistema predefinito di creare un
gruppo personale per ogni utente, alcuni preferiscono un sistema di gruppi
più tradizionale, in cui ogni utente sia membro del gruppo "users".

</list>


<sect2>Qual è la differenza fra i gruppi adm e staff?

<p>
Gli appartenenti al gruppo "adm" sono, di solito, amministratori ai quali i
permessi del gruppo consentono la lettura dei log senza dare il comando 
<prgn>su</prgn>.
Al gruppo "staff", invece, appartengono i coadiutori/amministratori novizi,
cui è permesso di lavorare in <file>/usr/local</file> e di creare cartelle 
in <file>/home</file>.


<sect1>
Perché c'è un nuovo gruppo per ogni nuovo utente? (Ovvero: perché Debian 
dà un gruppo ad ogni utente?)

<p>
La linea di condotta di Debian assegna ad ogni utente un proprio gruppo.
Il tradizionale schema UN*X assegna tutti gli utenti al gruppo <em>users</em>.
Ulteriori gruppi sono creati e utilizzati per limitare l'accesso a 
file condivisi associati a cartelle di progetti diverse. 
Siccome, all'atto della creazione, i file sono associati al 
gruppo di prima appartenenza dell'autore, la loro gestione diventa 
difficile, se l'utente lavora su più progetti.

<p>
Lo schema Debian risolve questo problema, assegnando ad ogni utente un gruppo
personale, sicché, con una corretta umask (0002) e con il bit per
l'assegnazione del gruppo (SETGID) impostato su una data cartella di progetto,
il gruppo viene assegnato automaticamente ed i file vengono creati in quella
cartella. Ciò agevola chi lavora su più progetti, evitandogli di cambiare
gruppo o umask quando lavora su file condivisi.

<p>
Tuttavia, dando il valore "no" alla variabile <em>USERGROUPS</em>, nel file
<file>/etc/adduser.conf</file>, si può cambiare questa condotta: 
in tal modo, quando si crea un nuovo utente, non si crea anche un nuovo 
gruppo. Le stesse considerazioni valgono per l'impostazione di 
<em>USERS_GID</em> al GID cui tutti gli utenti appartengono.


<sect1>Domande riguardanti i servizi e le porte aperte


<sect2>Perché in installazione vengono attivati tutti i servizi?

<p>
&Egrave; soltanto un compromesso tra l'essere da un lato 
attenti alla sicurezza e dall'altro user-friendly. Diversamente 
da OpenBSD, che disabilita tutti i servizi a meno che non siano 
esplicitamente attivati dall'amministratore, Debian GNU/Linux 
attiva tutti i servizi installati a meno che non vengano
disattivati (vedete in <ref id="disableserv"> per maggiori
informazioni).
Dopo tutto siete stati voi ad installare il servizio, o no?

<p>
Ci sono state molte discussioni sulle mailing list Debian (sia su debian-devel
che su debian-security) riguardo a quale sia il miglior compromesso per
un'installazione standard. Comunque, al momento della stesura (marzo 2002)
non si è ancora arrivati ad un accordo.


<sect2>Posso rimuovere <prgn>inetd</prgn>?

<p>
<prgn>Inetd</prgn> non è semplice da rimuovere poiché 
<package>netbase</package> dipende dal pacchetto che lo fornisce 
(<package>netkit-inetd</package>). Se lo volete rimuovere, potete o
disabilitarlo (vedete in <ref id="disableserv">) o rimuovere il
pacchetto utilizzando il pacchetto <package>equivs</package>.


<sect2>Perché ho la porta 111 aperta?

<p>
La porta 111 è quella del sunrpc portmapper e viene installata in 
maniera predefinita come parte dell'installazione Debian poiché 
non c'è bisogno di sapere quando un programma utente potrebbe 
aver bisogno di RPC che funzionino correttamente.
In ogni caso, si usa principalmente per l'NFS. Se non vi serve, 
rimuovetelo come e' spiegato in <ref id="rpc">.


<sect2>A cosa serve <prgn>identd</prgn> (porta 113) ?

<p>
Il servizio identd serve per l'autenticazione che identifica il proprietario
di una specifica connessione TCP/IP al server remoto che accetta la
connessione. Tipicamente, quando un utente si connette a un host remoto,
l'<prgn>inetd</prgn> dell'host remoto manda una query alla porta 113 per 
ottenere informazioni sull'utente. Spesso viene usato per la posta, i 
server FTP e IRC e può essere usato anche per tracciare chi, degli 
utenti del vostro sistema, stia tentando di attaccare un sistema remoto.

<p>
C'è stata lunga polemica sulla sicurezza di <prgn>identd</prgn> (vedete 
gli  <url
          id="http://lists.debian.org/debian-security/2001/debian-security-200108/msg00297.html"
          name="archivi della mailing list">).
In generale, <prgn>identd</prgn> è più utile su un sistema 
multiutente che sulla workstation di un singolo utente. Se non lo 
utilizzate, disabilitatelo, in modo da non lasciare aperto un servizio 
verso l'esterno. Se decidete di filtrare con un firewall la porta 
identd, <em>per favore</em> utilizzate una politica di reject
e non di deny, altrimenti una connessione al server che utilizzi 
<prgn>identd</prgn> si bloccherà finché non scade il timeout.
Per consultare questioni riguardanti 
<url id="http://logi.cc/linux/reject_or_deny.php3" name="reject or deny">.


<sect2>Ho dei servizi che usano le porte 1 e 6, cosa sono e come posso
rimuoverli?


<p>Se avete lanciato <tt>netstat -an</tt> e vi ha restituito:

<example>
  Active Internet connections (servers and established)
  Proto Recv-Q Send-Q Local Address           Foreign Address         State
  PID/Program name
  raw        0      0 0.0.0.0:1               0.0.0.0:*               7
  -
  raw        0      0 0.0.0.0:6               0.0.0.0:*               7
  -
</example>

<p>
<em>Non</em> significa che stiate vedendo processi in ascolto 
sulle porte TCP/UDP 1 e 6. Infatti, state vedendo processi che 
ascoltano su un socket <em>raw</em> i  protocolli 1 (ICMP) e 6 
(TPC). Un tale comportamento è comune sia ai trojan che a certi 
IDS come <package>iipl</package>, <package>iplogger</package> e 
<package>portsentry</package>. Se avete questi pacchetti, 
rimuoveteli. Se no, provate un netsta <tt>-p</tt> (processo) 
per vedere quale processo stia facendo girare questi demoni in 
attesa di connessione.


<sect2>Ho trovato la porta XYZ aperta, posso chiuderla?

<p>
Si, naturalmente. Le porte  che lasciate aperte debbono essere concordi con le
linee guida del vostro sito riguardanti i servizi pubblici disponibili per 
le altre reti. Controllate se vengono avviati da <prgn>inetd</prgn> 
(vedete in <ref id="inetd">), o da altri pacchetti installati e
prendete le misure appropriate (es., configurate inetd, rimuovete il
pacchetto, evitate di lanciarlo al boot).


<sect2>
Rimuovere dei servizi da <file>/etc/services</file> può aiutarmi a rendere
sicura la mia macchina?

<p>
<em>No</em>, <file>/etc/services</file> fornisce solo una mappatura 
tra un nome virtuale ed un dato numero di porta. Rimuovere nomi da 
questo file (solitamente) non eviterà che questi servizi vengano 
lanciati. Alcuni demoni potrebbero non partire se <file>/etc/services</file> 
viene modificato, ma non è la norma. Per disabilitare
correttamente il servizio, vedete in <ref id="disableserv">.


<sect1>Problemi comuni di sicurezza


<sect2>Ho dimenticato la password e non posso accedere al sistema!

<p>
I passi che dovete fare per sistemare questo dipende se avete o meno
applicato quanto suggerito per limitare l'accesso a <prgn>lilo</prgn> 
e al BIOS del vostro sistema.

<p>
Se avete limitato entrambi, dovete disabilitare l'impostazione del
BIOS che permette il boot solo dal disco rigido prima di procedere.
Se avete dimenticato anche la password del BIOS, dovrete annullare il
BIOS aprendo la macchina e rimuovendo la batteria del BIOS.

<p>
Una volta che avete abilitato il boot da CD-ROM o da dischetto,
tentate i passi seguenti:

<list>

<item>Eseguite il boot da un disco di salvataggio e fate partire il kernel
<item>Passate sulla console virtuale (Alt+F2)
<item>Montate il disco dove risiede la partizione /root
<item>
Modificate (il disco di rescue di Debian 2.2 contiene l'editor
<prgn>ae</prgn> e Debian 3.0 con <prgn>nano-tiny</prgn> che è simile a 
<prgn>vi</prgn>) <file>/etc/shadow</file> e cambiate la linea:

<example>
  root:asdfjl290341274075:XXXX:X:XXXX:X::: (X=any number)
</example>

<p>in:

<example>
  root::XXXX:X:XXXX:X:::
</example>

</list>

<p>
Questo eliminerà la password di root dimenticata, contenuta nel primo
campo separato dai due punti dopo il nome dell'utente. Salvate il
file, riavviate il sistema e effettuate il login di root usando una
password vuota. Ricordate di annullare la password. Questo funzionerà,
a meno che non abbiate configurato il sistema in maniera più attenta,
cioè se non permettete agli utenti di avere password vuote o root di
effettuare il login dalla console.

<p>
Se avete introdotto queste funzionalità, dovrete entrare nel sistema
in modalità utente singolo. Se LILO è stato ristretto, dovrete
eseguire <prgn>lilo</prgn> subito dopo il reset di root di sopra. 
Questo è abbastanza furbo poiché il vostro 
<file>/etc/lilo.conf</file> dovrà essere aggiustato alla 
directory radice (/) del sistema essendo un ramdisk e non un 
disco rigido reale.

<p>Una volta che LILO è senza restrizioni, provate i seguenti:

<list>

<item>
Premete i tasti Alt, Shift o Control appena prima che il vostro
BIOS finisca, e dovreste ottenere un prompt di LILO.
<item>
Digitate <tt>linux single</tt>, <tt>linux init=/bin/sh</tt> o 
<tt>linux 1</tt> al prompt.
<item>
Questo vi darà un prompt di shell in modalità utente singolo, vi
chiederà una password, ma la conoscete già
<item>
Rimontate in lettura/scrittura la partizione di root (/), usando
il comando mount.

<example>
  # mount -o remount,rw / 
</example>

<item>
Cambiate la password del superuser con <prgn>passwd</prgn> (poiché 
siete il superuser non vi chiederà la precedente).

</list>


<sect1>Come configurare un servizio per i miei utenti senza dare loro
una shell?

<p>
Per esempio, se voleste configurare un servizio di POP, non è
necessario creare un utente per ogni user che dovrà accedervi. Sarebbe
meglio configurare un sistema di autenticazione basato su directory,
attraverso un sistema esterno (come Radius, LDAP o un database SQL).
Appena installate l'appropriata liberia per PAM 
(<package>libpam-radius-auth</package>, <package>libpam-ldap</package>,
<package>libpam-pgsql</package> o <package>libpam-mysql</package>),
leggete la documentazione (per chi inizia, vedete in <ref id="auth-pam">) 
e configurate il servizio PAM-abilitato affinché usi il sistema da 
voi scelto. Questo viene fatto modificando i file in 
<file>/etc/pam.d/</file> per il vostro servizio e modificando la

<example> 
  auth   required    pam_unix_auth.so shadow nullok use_first_pass 
</example> 
in, per esempio, ldap: 
<example>
  auth   required    pam_ldap.so 
</example>

<!-- FIXME: check if this i right (jfs) -->

<p>
In caso di directory LDAP, alcuni servizi forniscono uno schema LDAP
da includere nella directory allo scopo di usare l'autenticazione
via LDAP. Se state usando un database relazionale, un trucco utile è
di usare l'espressione <em>where</em> quando si configura il modulo PAM. 
Per esempio, se avete un database con i seguenti campi:

<example>
  (user_id, user_name, realname, shell, password, UID, GID, homedir, sys, pop, imap, ftp)
</example>

<p>
Prendendo i campi degli attributi dei servizi booleani, potrete
usarli per abilitare o disabilitare i diversi servizi solamente
inserendo la riga appropriata nei seguenti file:

<list>

<item><file>/etc/pam.d/imap</file>:<tt>where=imap=1</tt>.
<item><file>/etc/pam.d/qpopper</file>:<tt>where=pop=1</tt>.
<item><file>/etc/nss-mysql*.conf</file>:<tt>users.where_clause =
user.sys = 1;</tt>.
<item><file>/etc/proftpd.conf</file>:<tt> SQLWhereClause "ftp=1"</tt>.

</list>

<sect id="vulnerable-system">Il mio sistema è vulnerabile! (Ne sei sicuro?)


<sect1 id="vulnasses-false-positive">Una scansione per la ricerca 
delle vulnerabilità mi dice che il mio sistema Debian è vulnerabile!

<p>
Molti scanner per ricercare vulnerabilità trovano falsi positivi,
quando vengono usati in sistemi Debian, usano solamente il controllo
di versione per determinare se un dato pacchetto sia vulnerabile, ma non
ne testano la vulnerabilità. Poiché Debian non cambia
la versione del software quando corregge un pacchetto (molte volte
una correzione rilasciata recentemente pare una vecchia versione)
molti programmi tendono a "pensare" che un sistema Debian aggiornato
sia vulnerabile, invece è vero il contrario.

<p>
Se pensate che il vostro sistema sia sicuro usando le patches di sicurezza,
vi invito ad incrociare i vostri riferimenti con il database sulla sicurezza
pubblicato con il DSAs (leggete in <ref id="dsa">) per eliminare false 
sicurezze, sempre se il tool che usate includa i riferimenti per CVE.


<sect1>Ho notato traccia di un attacco nei miei log di sistema. Il mio
sistema è compromesso?

<p>
Un traccia di attacco non significa necessariamente che il sistema
sia stato compromesso, dovreste compiere i comuni passaggi per
determinare se il sistema è stato realmente compromesso (leggete in
<ref id="after-compromise">).
Altresì, se avete visto dai log che un attacco è avvenuto, è possibile
che il nostro sistema sia vulnerabile allo stesso tipo di attacco
(un attaccante molto determinato può aver sfruttato molte altre
falle di sicurezza).


<sect1>Nei miei log ho trovato una strana linea "MARK": sono stato
attaccato?

<p>Dovete ricercare le seguenti linee nei vostri log di sistema:

<example>
  Dec 30 07:33:36 debian -- MARK --
  Dec 30 07:53:36 debian -- MARK --
  Dec 30 08:13:36 debian -- MARK --
</example>

<p>
Questo non indica tutti i tipi di compromissione ed i cambi di utenze
tra le release di Debian, cercando anche eventuali stranezze.
Se il vostro sistema non supporta alti carichi di lavoro (oppure molti
servizi attivi) queste linee possono apparire nei vostri log.
Questo è un sintomo che il vostro demone <prgn>syslogd</prgn> 
funziona perfettamente. Da <manref section="8" name="syslogd">:

<example>
       -m intervallo
         I log  vengono  stampati da  syslogd  ad intervalli regolari.
	 Il tempo di attesa tra due -- MARK -- è di 20 minuti.  Questo
	 comportamento  può  essere  cambiato usando  questa  opzione.
	 Impostando l'intervallo a zero syslogd viene disattivato.

</example>

<sect1>Ho trovato nei miei log un utente che può usare il comando
"su": sono compromesso?

<p>Dovete ricercare delle linee simili alle seguenti nei vostri log:

<example>
  Apr  1 09:25:01 server su[30315]: + ??? root-nobody
  Apr  1 09:25:01 server PAM_unix[30315]: (su) session opened for user nobody by (UID=0)
</example>

<p>
Non preoccupatevi. Controllate se queste linee sono presenti nei 
jobs di <prgn>cron</prgn> (solitamente si trovano in 
<file>/etc/cron.daily/find</file> oppure <prgn>logrotate</prgn>):

<example>
  $ grep 25 /etc/crontab
  25 6    * * *   root    test -e /usr/sbin/anacron || run-parts --report
  /etc/cron.daily
  $ grep nobody /etc/cron.daily/*
  find:cd / && updatedb --localuser=nobody 2>/dev/null
</example>

<sect1>Nei miei log ho trovato un possibile "SYN flooding":sono sotto attacco?

<p>Se nei vostri log trovate delle linee come le seguenti:

<example>
  May 1 12:35:25 linux kernel: possible SYN flooding on port X. Sending cookies.
  May 1 12:36:25 linux kernel: possible SYN flooding on port X. Sending cookies.
  May 1 12:37:25 linux kernel: possible SYN flooding on port X. Sending cookies.
  May 1 13:43:11 linux kernel: possible SYN flooding on port X. Sending cookies.
</example>

<p>
Controllate se sono presenti molte connessioni attive sul server
usando <prgn>netstat</prgn>, ad esempio:

<example>
  linux:~# netstat -ant | grep SYN_RECV | wc -l
     9000
</example>

<p>
Questo è un indice certo di un attacco denial of service (DoS) contro
la porta X (molto spesso avvengono contro dei servizi pubblici
come i server web od i server di posta).
Vi invito ad attivate nel vostro kernel l'opzione TCD syncookies, leggete
in <ref id="tcp-syncookies">.
Attenzione,  comunque, come un attacco DoS può saturare la vostra rete
voi potete fermarlo mandando in crash il sistema (saturando i file
descrittori, il sistema rimane inerte finché la connessione TCP non
viene interrotta).
Il solo modo efficace per fermare questo tipo di attacco è quello
di contattare il vostro provider.


<sect1>Ho trovato strane sessioni di root nei miei log: sono compromesso?

<p>
Potreste vedere questo tipo di immissioni nel vostro file
<file>/var/log/auth.log</file>:

<example>
  May 2 11:55:02 linux PAM_unix[1477]: (cron) session closed for user root
  May 2 11:55:02 linux PAM_unix[1476]: (cron) session closed for user root
  May 2 12:00:01 linux PAM_unix[1536]: (cron) session opened for user root by
  (UID=0)
  May 2 12:00:02 linux PAM_unix[1536]: (cron) session closed for user root
</example>

<p>
Sono dovuti all'esecuzione di un processo <prgn>cron</prgn> 
(nell'esempio, ogni cinque minuti). Per stabilire quale 
programma è responsabile dei processi, controllare le immissioni sotto: 
<file>/etc/crontab</file>, <file>/etc/cron.d</file>,
<file>/etc/crond.daily</file> ed il <file>crontab</file> di root 
sotto <file>/var/spool/cron/crontabs</file>.


<sect1>Ho subito un'intrusione, cosa devo fare?

<p>Esistono diversi passaggi che potreste seguire in caso di intrusione:

<list>

<item>
Controllare che il vostro sistema sia aggiornato con patches di sicurezza per
le vulnerabilità pubbliche. Se il sistema è vulnerabile, le possibilità che 
sia di fatto compromesso sono incrementate. Le possibilità aumentano ancora 
se la vulnerabilità è nota da tempo, dato che esiste solitamente più 
attività relativa alle vulnerabilità datate. Qui c'è un link alle 
<url id="http://www.sans.org/top20.htm" 
     name="20 maggiori vulnerabilità di sicurezza della SAN">.
<item>Leggere questo documento, specialmente il <ref id="after-compromise">.
<item>
Chiedere assistenza. Potete usare la mailing list debian-security e 
chiedere consigli su come ripristinare/riparare il vostro sistema.
<item>
Segnalare al <url id="http://www.cert.org" name="CERT"> locale 
(se esiste, altrimenti potreste contattare il CERT direttamente). 
Questo potrebbe o non potrebbe aiutarvi ma, almeno, informa il 
CERT di attacchi in corso. Questa informazione è preziosa per
determinare quali strumenti e attacchi vengono utilizzati dalla 
comunità <em>blackhat</em>.

</list>

<sect1>Come posso tracciare un attacco?

<p>
Osservando i log (se non sono stati alterati), utilizzando sistemi di
rilevamento intrusioni (vedete in <ref id="intrusion-detect">),
<prgn>traceroute</prgn>, <prgn>whois</prgn> e strumenti simili 
(inclusa analisi forense), potreste essere in grado di tracciare 
un attacco alla fonte. Il modo in cui reagite a questa informazione 
dipende unicamente dalla vostra politica di sicurezza, e da cosa <em>voi</em>
considerate un attacco. Uno scan remoto è un attacco? Un rilevamento di
vulnerabilità è un attacco?


<sect1>Il programma X in Debian è vulnerabile, cosa devo fare?

<p>
Per prima cosa, controllate se la vulnerabilità è stata resa pubblica sulle
mailing list di sicurezza (come Bugtraq) o altri forum. Il Security Team
di Debian si tiene in contatto con queste liste, quindi potrebbero essere a
conoscenza del problema. Non procedete in nessun altro modo se vedete un
annuncio su <url id="http://security.debian.org">.

<p>
Se l'informazione non è stata resa nota, per favore, spedite un'e-mail
per il pacchetto affetto dalla vulnerabilità, descrivendola 
dettagliatamente (mostrando il concetto di come dovrebbe essere il codice 
giusto) al 
<url id="mailto:team@security.debian.org" name="team@security.debian.org">.
Il Security Team analizzerà la vostra segnalazione.
 

<sect1>Il numero di versione di un pacchetto indica che sta girando una
versione vulnerabile!

<p>
Invece di aggiornare ad un nuovo rilascio, Debian riporta gli aggiornamenti di
sicurezza alla versione che è stata distribuita con la versione stabile.
Il motivo è assicurarsi che i rilasci stabili cambino il meno possibile, così
che le cose non cambino o si interrompano inaspettatamente a causa di un
aggiornamento di sicurezza. Potete controllare se sta girando una versione
sicura di un pacchetto dal changelog package, o confrontando il numero
di versione (versione corrente -slash- rilascio Debian) con la versione 
indicata nel Debian Security Advisory.


<sect1>Software specifico

<sect2><package>proftpd</package> è vulnerabile ad attacchi Denial of Service.

<p>
Aggiungere <tt>DenyFilter \*.*/</tt> al vostro file di configurazione 
e per ulteriori informazioni vedete 
<url id="http://www.proftpd.org/critbugs.html">.


<sect2>Dopo l'installazione di <package>portsentry</package> ci 
sono molte porte aperte.

<p>
&Egrave; solo il modo in cui funziona <prgn>portsentry</prgn>.
Apre circa venti porte inutilizzate per rilevare i port scan.


<sect id="debian-sec-team-faq">Domande sul Security Team di Debian

<p>
Queste informazioni derivano dalla 
<url id="http://www.debian.org/security/faq.en.html" 
     name="Debian Security FAQ">. 
Includono informazioni fino al 19 novembre e rispondono ad alcune 
altre comuni domande fatte sulla mailing list debian-security.

<!-- FIXME: should this be included in the FAQ? -->


<sect1>Cos'è un Debian Security Advisory (DSA)?

<p>
Sono informazioni spedite dal Security Team di Debian
(vedere sotto) riguardo alla scoperta e soluzione di una 
vulnerabilità trovata in un pacchetto disponibile con Debian 
GNU/Linux. I DSA firmati vengono spediti alle mailing list 
pubbliche (debian-security-announce) e postati sul sito Debian 
(sia in prima pagina che 
nell'<url id="http://www.debian.org/security/" name="area sicurezza">.

<p>
I DSA includono informazioni sul pacchetto interessato, la 
falla di sicurezza scoperta e dove trovare il pacchetto 
aggiornato (e il suo MD5 sum).

<!-- FIXME: update from web page automatically -->



<sect1>La firma degli advisory Debian non viene verificata come corretta!

<p>
Molto probabilmente è un vostro problema. La lista 
<url id="http://www.debian.org/security/faq.en.html" 
     name="debian-security-announce"> ha un filtro che permette 
ai soli messaggi con la firma corretta e provenienti da uno dei 
membri del Security Team di essere postati.

<p>
Probabilmente, qualche parte del vostro software di posta 
lo cambia lievemente, infrangendo così la firma. Assicuratevi 
che il vostro software non faccia nessuna codifica o 
decodifica MIME, o conversione dei tab in spazi.

<p>
Si conoscono software che si comportano così e sono fetchmail 
(con l'opzione mimedecode abilitata), formail (solo quello proveniente 
da procmail 3.14) ed evolution.


<sect1>Com'è gestita la sicurezza in Debian?

<p>
Ogni volta che il Security Team riceve notifica di un 
incidente, uno o più membri controllano e valutano il suo 
impatto sulla release stabile di Debian (ossia se la rende 
vulnerabile o no). Se il nostro sistema è reso vulnerabile, 
lavoriamo per chiudere la falla. Il manutentore del pacchetto 
viene contattato, se non avesse già contattato lui il Security Team. 
Infine, il fix viene testato e vengono preparati 
nuovi pacchetti, che poi vengono ricompilati su tutte le 
architetture stabili e successivamente caricati sul sito. 
Dopo tutto ciò, viene pubblicato un advisory.



<sect1>Perché rimaneggiate una vecchia versione di un dato pacchetto?

<p>
La più importante linea guida nel fare un nuovo pacchetto che 
risolva un problema di sicurezza è di fare quanti meno cambiamenti 
possibili. I nostri utenti e sviluppatori si dedicano a controllare 
l'esatto funzionamento di una release una volta che viene fatta e 
così qualsiasi cambiamento facciamo potrebbe teoricamente sconvolgere 
il sistema di qualcun'altro. Ciò è particolarmente vero nel caso 
delle librerie: vi assicuriamo di non farvi mai cambiare l'Application 
Program Interface (API) o Application Binary Interface (ABI), 
non importa quanto piccolo sia il cambiamento.

<p>
Questo significa che spostarsi verso una nuova versione non è 
una buona soluzione e che invece i cambiamenti rilevanti 
saranno implementati anche nelle vecchie versioni. 
Generalmente i manutentori delle nuove versioni sono lieti di 
aiutarvi, se ne aveste bisogno, altrimenti potrebbe essere d'aiuto 
anche il Security Team di Debian.

<p>
In alcuni casi non è possibile implementare un backport dei fix 
di sicurezza, per esempio quando grosse quantità di codice devono 
essere modificate o riscritte. Se succedesse, potrebbe essere 
necessario spostarci su una nuova versione ma questo non ha bisogno 
di un preventivo coordinamento con il Security Team.


<sect1>Qual'è il codice di condotta secondo il quale un pacchetto corretto 
appare in security.debian.org?

<p>
Falle di sicurezza nella distribuzione stabile fanno sì che 
sicuramente appaia un pacchetto su security.debian.org. Altre cose no. 
Il problema, qui, non è la dimensione della falla. Di solito il 
Security Team prepara pacchetti insieme ai relativi manutentori. 
Posto che qualcuno (di fidato) tracci il problema e ricompili tutti i 
pacchetti necessari mandandoli al Security Team, anche delle correzioni 
di base delle falle di sicurezza finiranno su security.debian.org. 
Leggete oltre.


<sect1>Il numero di versione di un pacchetto indica che ho ancora una 
versione vulnerabile!

<p>
Invece di aggiornare ad una nuova release, riportiamo le correzioni 
nella versione distribuita con la release stabile. Il motivo è 
quello di  assicurarci che  una release cambi il meno possibile e 
quindi le cose non cambino o smettano di funzionare improvvisamente 
come risultato di un security fix. Potete controllare se state usando 
una versione sicura del pacchetto guardando il changelog del pacchetto 
stesso, o confrontando il suo esatto numero di versione con quello 
indicato sul Debian Security Advisory.


<sect1 id="sec-unstable">Come viene gestita la sicurezza in 
<tt>testing</tt> ed <tt>unstable</tt>?

<p>
La risposta corta è: non lo è. Testing e Unstable cambiano
rapidamente obbiettivi e il Security Team non ha le 
risorse necessarie per supportarli adeguatamente. Se desiderate 
avere un server sicuro (e stabile) siete vivamente incoraggiati 
ad utilizzare la stable. In ogni caso, gli addetti alla sicurezza 
cercheranno di risolvere i problemi di sicurezza nelle versioni 
testing e unstable dopo averli risulti nella versione stable.

<!-- Note: the following paragraph is not in the FAQ (jfs) -->

<p>
In qualche caso, comunque, il ramo unstable mette le correzioni di
sicurezza abbastanza velocemente, dal momento che queste correzioni
sono disponibili più velocemente nelle nuove versioni (in quelle vecchie,
come quelle del ramo stable, solitamente è necessario un aggiornamento 
di una versione meno recente).

<!-- The following section is not on the FAQ -->


<sect1 id="sec-older">Utilizzo una vecchia versione di Debian, 
                      è supportata dal Security Team di Debian?

<p>
No. Sfortunatamente, il Security Team di Debian non può 
prendersi cura sia della release stable (e non ufficialmente, 
anche della unstable) che delle release più vecchie. Comunque, ci 
si può aspettare aggiornamenti di sicurezza per un limitato 
periodo di tempo (usualmente diversi mesi) immediatamente dopo 
il rilascio di una nuova distribuzione Debian.


<sect1>Perché non ci sono mirror ufficiali per security.debian.org?

<p>
Il proposito di security.debian.org è quello di rendere disponibili 
gli aggiornamenti di sicurezza il più velocemente e facilmente possibile.
Mirror aggiungerebbero ulteriori, inutili complessità e potrebbero 
causare frustrazione se non fossero aggiornati.

<sect1>Ho visto DSA 100 e DSA 102, che è successo a DSA 101?

<p>
Diversi venditori (principalmente di GNU/Linux, ma anche di eredi
BSD) si coordinano gli avvisi di sicurezza per alcuni incidenti e
concordano per un particolare momento in modo che tutti i
venditori siano in grado di rilasciare un avviso nello stesso momento.
Questo è stato deciso per non discriminare alcuni venditori che
necessitano di più tempo (per esempio quando il venditore deve
passare i pacchetti attraverso lenti test "QA" (accertamenti qualitativi)
o devono fornire supporto a diverse architetture o distribuzioni
di binari). Il nostro Security Team prepara l'avviso in
anticipo. Ogni tanto, altri problemi di sicurezza devono essere
trattati prima che l'avviso in attesa possa essere rilasciato, è
per questo che vengono temporaneamente tralasciati uno o più
numeri di avvisi.

<!--
<p>In some cases, the Debian Security Team prepares advisories in
advance, and holds the advisory number until the advisory can be
released. Hence, the gaps in DSA numbers.
-->

<sect1>Come si può contattare il Security Team?

<p>
Informazioni sulla sicurezza possono essere mandate a
<url id="mailto:security@debian.org" name="security@debian.org"> e sarà 
letta da ogni sviluppatore Debian. Se disponete di informazioni sensibili 
siete pregati di utilizzare 
<url id="mailto:team@security.debian.org" name="team@security.debian.org">
in modo che solo i membri la leggano. Se volete, la email può essere
crittografata con la Debian Security Contact key (key ID 
<url id="http://blackhole.pca.dfn.de:11371/pks/lookup?op=get&amp;exact=on&amp;search=0x363CCD95" 
     name="0x363CCD95">).


<sect1>Quali sono le differenze tra security@debian.org e
debian-security@lists.debian.org?

<p>
Quando si mandano messaggi a security@debian.org, questi sono
inviati alla mailing list degli sviluppatori (debian-private).  Tutti
gli sviluppatori Debian sono iscritti a questa lista e gli interventi
sono mantenuti privati (cioè non sono accessibili dal sito web pubblico).
La mailing list pubblica, debian-security@lists.debian.org, è aperta a
tutti coloro che si vogliono 
<url id="http://www.debian.org/MailingLists/" name="iscrivere"> ed 
esistono archivi per ricerche disponibili 
<url id="http://lists.debian.org/search.html" name="qui">.

<!-- The following items are not included in the Debian Security Team FAQ -->


<sect1>Come si può contribuire al Security Team di Debian?

<p>
<list>

<item>
Cotribuendo a questo documento, correggendo i vari FIXME o
fornendo nuovi contenuti. La documentazione è importante e riduce il
sovraccarico di rispondere a domande comuni. La traduzione di questa
documentazione in altre lingue è di grande aiuto.
<item>
Pacchettizzando applicazioni che sono utili per testare o
migliorare la sicurezza in un sistema  Debian GNU/Linux. Se siete
sviluppatori, riempite un 
<url name="WNPP bug" id="http://www.debian.org/devel/wnpp/">
richiedendo software che ritenete possa essere utile, ma che
attualmente non è disponibile in Debian.
<item>
Verificando le applicazioni in Debian, aiutando a risolvere
bug di sicurezza e riportando i problemi a security@debian.org. Il
lavoro di altri progetti come il 
<url name="Linux Kernel Security Audit Project" 
     id="http://kernel-audit.sourceforge.net/"> o il 
<url name="Linux Security-Audit Project" id="http://www.lsap.org/">
incrementano la sicurezza di Debian GNU/Linux,
dal momento che i loro contributi aiuteranno probabilmente anche Debian.

</list>

<p>
In ogni caso, siete pregati di controllare ogni problema prima di
riportarlo a ecurity@debian.org. Se ne siete in grado, fornite patch che
aiutino ad accelerare la risoluzione del processo. 
Non inoltrate semplicemente le mail di Bugtraq, visto che vengono 
già ricevute. Fornire ulteriori informazioni, comunque, è sempre 
una buona idea.


<sect1>Da chi e' composto il Security Team di Debian?

<p>
Il Security Team di Debian attualmente è composto da cinque 
membri e due segretari. Lo stesso Security Team incoraggia 
ad unirsi a loro.


<sect1>Il Security Team di Debian controlla ogni nuovo pacchetto 
di Debian?

<p>
No, il Security Team di Debian non controlla ogni nuovo 
pacchetto e non c'è un controllo automatico (lintian) per 
scovare nuovi pacchetti maliziosi, poiché è pressoché impossibile 
effettuare questi controlli automaticamente. Comunque, i 
manutentori sono pienamente responsabili dei pacchetti che 
introducono in Debian e tutti i pacchetti vengono preventivamente 
firmati da uno o più sviluppatori autorizzati. Lo sviluppatore 
ha il compito di analizzare la sicurezza di tutti i pacchetti 
che mantiene.


<sect1>Quanto occorrerà a Debian per correggere la vulnerabilità XXXX?

<p>
Il Security Team di Debian lavora velocemente per spedire 
advisories e produrre pacchetti corretti per il ramo stabile, una 
volta che una vulnerabilità è stata scoperta. Un rapporto 
<url
         id="http://lists.debian.org/debian-security/2001/debian-security-200112/msg00257.html"
         name="pubblicato sulla mailing list debian-security">
ha mostrato come, nell'anno 2001, ci sia voluto al Security Team di Debian 
una media di 35 giorni per correggere vulnerabilità 
relative alla sicurezza. Comunque, più del 50% delle vulnerabilità 
sono state corrette nell'arco di 10 giorni e più del 15% di 
queste sono state corrette <em>lo stesso giorno</em> in cui è 
stato rilasciato l'advisory.

<p>Comunque, nel porre la domanda, la gente tende a dimenticare che:

<list>
<item>I DSA non vengono mandati finché:

<list>

<item>
Sono disponibili pacchetti per <em>tutte</em> le architetture 
supportate da Debian (il che implica un po' di tempo per i 
pacchetti che sono parte del cuore del sistema, considerato poi 
il numero delle architetture supportate nella release stabile).
<item>
I nuovi pacchetti siano stati testati più e più volte, per 
assicurarsi che non siano stati introdotti dei nuovi bug.

</list>

<item>
I pacchetti potrebbero essere disponibili prima che sia 
mandato il DSA (in incoming o sui mirror).
<item>Debian è un progetto basato sui volontari.
<item>Debian viene distribuita con una clausola "senza garanzie".

</list>

<p>
Se desideraste un'analisi più approfondita del tempo che ci 
vuole al Security Team per lavorare sulle 
vulnerabilità, dovreste prendere in considerazione il fatto che i 
nuovi DSA (vedete in <ref id="dsa">) pubblicati sul sito web relativo 
alla <url id="http://security.debian.org" name="sicurezza"> e i 
metadata utilizzati per generarli, includono link a dei database 
di vulnerabilità. Potreste scaricare i sorgenti dal server web 
(dal <url id="http://cvs.debian.org" name="CVS">) o usare le pagine 
HTML per determinare il tempo che ci vuole a Debian per correggere 
vulnerabilità e sincronizzare questi dati con i database pubblici.





<appendix id="harden-step">Il processo di blindatura passo-passo


<!--
# I took the liberty to change this from "checklist" to
# "process step by step" because this doesn't really have the
# form of a checklist, and I had added a different sort of
# checklist. The renaming is more to avoid confusion than
# anything else. // era
-->

<p>
Di seguito è riportata una procedure passo-passo, post-installazione,
per blindare un sistema Debian GNU/linux 2.2. Questo è un possibile
approccio a tale procedura ed è orientato a blindare i servizi di rete.
&Egrave; incluso al fine di mostrare l'intero processo che potrebbe essere
usato durante la configurazione. Vedete in <ref id="checklist">.

<list>

<item>
Installate il sistema, tenendo in considerazione le informazioni
che riguardano il partizionamento incluse precedentemente in questo
documento. Dopo l'installazione di base, andate alla configurazione
personalizzata. Non selezionate i pacchetti dei servizi.
Selezionate le password shadow.
<item>
Utilizzando <prgn>dselect</prgn>, rimuovete tutti i pacchetti selezionati
ma non necessari prima di effettuare l'installazione con il comando
[I]nstall. Mantenete il minimo numero di pacchetti per il sistema.
<item>
Aggiornate tutti i programmi dal più recente pacchetto disponibile
da security.debian.org come spiegato precedentemente in
<ref id="security-update">.
<item>
Applicate i suggerimenti presentati in questo manuale al riguardo
delle quote utente, definizioni di login e <prgn>lilo</prgn>.
<item>Compilate una lista di servizi attivi al momento sul sistema.
Eseguite:

<example>
  $ ps -aux
  $ netstat -pn -l -A inet 
  # /usr/sbin/lsof -i | grep LISTEN
</example>

<p>
In questo caso è necessario installare <package>lsof-2.2</package> 
per avere a disposizione il comando (che lavorerà da root).
Dovreste fare attenzione che <prgn>lsof</prgn> potrebbe tradurre
il termine LISTEN secondo le vostre impostazioni locali.

<item>
Per rimuovere i servizi non necessari, determinate inizialmente
quale pacchetto fornisca il servizio e come si avvii. Questo può
essere ottenuto controllando quali programmi ascoltano
su di un socket. Il seguente script di shell, che utilizza i 
programmi <prgn>lsof</prgn> e <prgn>dpkg</prgn>, fa proprio questo:

<example>
  #!/bin/sh
  # FIXME: this is quick and dirty; replace with a more robust script snippet
  for i in `sudo lsof -i | grep LISTEN | cut -d " " -f 1 |sort -u` ; do
	  pack=`dpkg -S $i |grep bin |cut -f 1 -d : | uniq`
	  echo "Service $i is installed by $pack";
	  init=`dpkg -L $pack |grep init.d/ `
	  if [ ! -z "$init" ]; then
		   echo "and is run by $init"
	  fi
  done
</example>

<item>
Una volta avete individuato un qualsiasi servizio che non volete fornire,
rimuovete il pacchetto che lo genera (con <prgn>dpkg --purge</prgn>), o 
disabilitate la partenza automatica del servizio all'avvio del
sistema utilizzando <prgn>update-rc.d</prgn> 
(vedete in <ref id="disableserv">).
<item>
Per i servizi avviati da inetd (lanciati tramite il superdemone), 
verificate che i servizi siano abilitati in 
<file>/etc/inetd.conf</file>, utilizzando:

<example>
  $ grep -v "^#" /etc/inetd.conf | sort -u
</example>

Per disabilitare quei servizi che non desiderate, è necessario
commentare le linee che li avviano in <file>/etc/inetd.conf</file>, 
altrimenti, rimuovere il pacchetto che fornisce il servizio, o 
utilizzare <prgn>update-inetd</prgn>.

<item>
Se avete servizi wrapped (quelli che usano
<prgn>/usr/sbin/tcpd</prgn>), verificate che i file 
<file>/etc/hosts.allow</file> e <file>/etc/hosts.deny</file> siano 
configurati in accordo con la vostra politica di sicurezza.
<item>
Se il server usa più di una interfaccia con l'esterno, in funzione
del servizio, potreste voler limitare il servizio all'ascolto su
una specifica interfaccia. Per esempio, se si volesse un accesso FTP
esclusivamente dall'interno, fate in modo che il demone FTP
sia in ascolto solo sull'interfaccia di gestione e non su tutte le
interfacce (p.e. 0.0.0.0:21).
<item>
Riavviate la macchina, o commutate sulla modalità monoutente e
quindi tornate a quella multiutente, utilizzando i comandi:

<example>
  $ init 1
  (....)
  $ init 2
</example>

<item>
Controllate i servizi adesso disponibili e se necessario, ripetete
i passi appena esposti.
<item>
Ora installate i servizi che ritenete necessari, se non avete già 
agito così e configurateli appropriatamente.
<item>
Usate il seguente comando da shell, per determinare con quale 
identità ogni servizio disponibile sta girando:

<example>
  $ for i in `/usr/sbin/lsof -i |grep LISTEN |cut -d " " -f 1 |sort -u`; \
  > do user=`ps -ef |grep $i |grep -v grep |cut -f 1 -d " "` ; \
  > echo "Service $i is running as user $user"; done
</example>

<p>
Valutate l'opportunità di modificare questi servizi associandoli a specifici
utenti/gruppi mediante gabbie <prgn>chroot</prgn> per avere maggior sicurezza.
Potete farlo modificando lo script <file>/etc/init.d</file> che avvia il 
servizio. La maggior parte dei servizi in Debian usano 
<prgn>start-stop-daemon</prgn> che ha l'opzione 
(<tt>--change-uid</tt> e <tt>--chroot</tt>) per apportare le modifiche 
di cui sopra. Alcuni avvertimenti al riguardo dei servizi in 
<prgn>chroot</prgn>: potrebbe essere necessario mettere tutti i file
installati dal pacchetto (usando dpkg -L) che fornisce il servizio, così come
tutti i pacchetti da cui esso dipende, in un ambiente di tipo 
<prgn>chroot</prgn>.
Le informazioni per configurare un ambiente <prgn>chroot</prgn> per 
il programma <prgn>ssh</prgn> possono essere trovate in 
<ref id="chroot-ssh-env">.
<item>
Ripetete i passi summenzionati al fine di verificare che girino
i soli servizi desiderati e che essi stiano girando con la desiderata
combinazione utente/gruppo.
<item>
Verificate i servizi installati per controllare che funzionino come 
avete previsto.
<item>
Controllate il sistema con un rilevatore di vulnerabilità
(come <package>nessus</package>), al fine di determinare le 
vulnerabilità nel sistema (p.e. errate configurazioni, servizi
vecchi o non necessari).
<item>
Installate rilevatori di intrusioni su macchine e su reti come
<package>snort</package> e <package>logsentry</package>.
<item>
Ripetete la sequenza dell'esame della rete e verificate che i
sistemi di rilevamento delle intrusioni stiano funzionando
correttamente.

</list>

<p>Le persone realmente paranoiche dovrebbero valutare anche quanto segue:

<list>

<item>
Aggiungete funzionalità di "firewall" al sistema, accettando connessioni
in ingresso solo per servizi offerti e limitando le connessioni uscenti
alle sole autorizzate.
<item>
Ricontrollare l'installazione con una nuova verifica di vulnerabilità
usando uno "scanner" di rete.
<item>
Usando un rilevatore di rete, controllate le connessioni uscenti
dal sistema verso una macchina esterna e verificate che nessuna
connessione trovi il modo di uscire.

</list>

<p>
FIXME: questa procedura si occupa della blindatura dei servizi, non
della blindatura di sistemi a livello utente, includendo le informazioni
per controllare i permessi utente, i file SETUID e il congelamento dei
cambiamenti del sistema utilizzando il filesystem ext2.


<appendix id="checklist">Verifica della configurazione

<p>
Quest'appendice riporta brevemente estratti dalle altre sezioni
di questo manuale, condensati in un elenco (in seguito "checklist" N.d.T. ). 
La funzione di questa  checklist è di fornire un rapido sommario per 
chi ha già letto il manuale. Ci sono altre buone checklist 
disponibili, incluso il Kurt Seifried's <url
        id="http://seifried.org/security/os/linux/20020324-securing-linux-step-by-step.html"
        name="Securing Linux Step by Step"> e il
<url id="http://www.cert.org/tech_tips/usc20_full.html" 
     name="CERT's Unix Security Checklist">.

<!-- Order is slightly different from body text. Consider changing text? -->
<!-- (FIXME) -->


<p>FIXME: Questa checklist è basata sulla versione 1.4 del manuale e 
potrebbe aver bisogno di essere aggiornata.

<list>
	  <item>Limitate le capacità di avvio e di accesso fisico


	      <list>
		<item>Abilitate la password del BIOS
		<item>Disabilitate l'avvio da floppy/cdrom/ ...
		<item>
		Impostate una password per GRUB o LILO 
		(<file>/etc/lilo.conf</file> o 
		<file>/boot/grub/menu.lst</file>, rispettivamente); 
		verificate che i file di configurazione di LILO o GRUB 
		siano protetti da scrittura.
		<item>
		Disabilitate l'avvio del MBR da floppy, sovrascrivendo 
		l'MBR. (o forse no?)

	      </list>
	      
	  <item>Partizionamento


	      <list>
		
		<item>
		Separate i dati scrivibili dagli utenti, i dati non di 
		sistema e i dati run-time che cambiano velocemente, in 
		partizioni distinte.
		<item>
		Impostate le opzioni di mount 
		<tt>nosuid,noexec,nodev</tt> in <file>/etc/fstab</file>
                per le partizioni ext2 come <file>/tmp</file>.

	      </list>
	      
	  <item>Accuratezza delle password e sicurezza in login
	      
	      <list>

		<item>Impostate una buona password di root
		<item>Abilitate il password shadowing e l'MD5
		<item>Installate ed utilizzare PAM
		    
		    <list>
		      
		      <item>
		     Aggiungete il supporto per MD5 a PAM e assicuratevi
                     che (in generale) le voci nel file 
		     <file>/etc/pam.d/</file>, che garantiscono 
		     l'accesso alla macchina, abbiano 
		     il secondo campo nel file pam.d impostato a
		     <tt>requisite</tt> or
                          <tt>required</tt>.
			  <!-- or is it third? (FIXME: check) -->
		      <item>
		      Modificate <file>/etc/pam.d/login</file>
		      in modo che permetta solamente login root locali.
		      <item>
		      Inoltre segnate le tty:s autorizzate nel file
		      <file>/etc/security/access.conf</file> e 
		      configurate in modo generale il file affinché 
		      le login da root siano limitate il più possibile.
		      <item>
		      Aggiungete pam_limits.so se volete impostare un 
		      limite per ciascun utente
		      <item>
		      Modificate <file>/etc/pam.d/passwd</file>: aumentate 
		      la lunghezza minima delle passwords (6 
		      caratteri probabilmente) e abilitate l'MD5
		      <item>
		      Aggiungete il gruppo wheel a <file>/etc/group</file>
		      se lo desiderate; aggiungete la voce pam_wheel.so
		      group=wheel in <file>/etc/pam.d/su</file>
		      <item>
		      Per personalizzare i controlli relativi a ciascun utente,
		      usate un'apposita voce pam_listfile.so dove appropriato
		      <item>
		      Create un file <file>/etc/pam.d/other</file> e 
		      configuratelo con un'alta sicurezza 
		      (N.d.r. tight security)

		    </list>
		    
		<item>
		Impostate i limiti <file>/etc/security/limits.conf</file> 
		(notate che <file>/etc/limits</file> non viene utilizzato 
		se si usa PAM)
		<item>
		Limitate i permessi al file <file>/etc/login.defs</file>; 
		inoltre, se avete abilitato MD5 e/o PAM, assicuratevi di 
		fare i cambiamenti corrispondenti
		<item>
		Disabilitate l'accesso root via ftp in 
		<file>/etc/ftpusers</file>
		<item>
		Disabilitate l'accesso root alla rete; usate
		<manref name="su" section="1"> oppure 
		<manref name="sudo" section="1">. Considerate 
		l'opportunità di installare <package>sudo</package>
		<item>Usate PAM per rendere più sicuri gli accessi con login?

	      </list>

	  <item>Altri suggerimenti sulla sicurezza locale

	      <list>
		<item>
		Adattamenti del kernel (vedete in <ref id="kernel-conf">)
		<item>
		Patch per il kernel (vedete in <ref id="kernel-patches">)
		<item>
		Rendete più restrittivi i permessi ai file di log
		(<file>/var/log/{last,fail}log</file>, i log di Apache)
		<item>
		Verificate che il controllo SETUID sia abilitato in 
		<file>/etc/checksecurity.conf</file>
		<item>
		Considerate la possibilità di rendere alcuni file di log
		append-only e alcuni file di configurazione immutabili con
		il comando chattr (solo per il file system ext2)
		<item>
		Configurate il controllo sull'integrità dei file 
		(vedete in <ref id="check-integ">).
		Installate <package>debsums</package>
		<item>
		Considerate la possibilità di sostituire locate con slocate
		<item>Loggare tutto su una stampante locale?
		<item>
		Scrivere su un CD avviabile la propria configurazione 
		e fare il boot da CD?
		<item>Disabilitare i moduli del kernel?

	      </list>
	      
	  <item>Limitate l'accesso alla rete

	      <list>

		<item>
		Installate e configurate <prgn>ssh</prgn> (si suggerisce 
		di impostare a No le voci PermitRootLogin e 
		PermitEmptyPasswords nel file 
		<file>/etc/ssh/sshd_config</file>; 
		notate anche gli altri suggerimenti nel testo) 
		<item>
		Considerate la possibilità di disabilitare o rimuovere
		<prgn>in.telnetd</prgn>
		<item>
		In linea di massima, disabilitate i servizi inutili in
		<file>/etc/inetd.conf</file> usando 
		<prgn>update-inetd --disable</prgn> (oppure disabilitate 
		<prgn>inetd</prgn> completamente, o ancora usate un 
		sostituto come ad esempio <prgn>xinetd</prgn> o 
		<prgn>rlinetd</prgn>)
		<item>
		Disabilitate altri servizi di rete inutili; mail, ftp, DNS, 
		WWW ecc. non dovrebbero essere eseguiti  se non sono 
		necessari e peraltro, tenuti regolarmente sotto controllo
		<item>
		Per i servizi di cui avete bisogno, non vi limitate ad usare
		i programmi più comuni ma cercatene versioni più sicure
		contenute all'interno di Debian (o di altre fonti).
		Qualsiasi cosa finiate per eseguire, assicuratevi di
		capirne i rischi
		<item>
		Impostate gabbie <prgn>chroot</prgn> per utenti 
		e demoni esterni
		<item>
		Configurate firewall e tcpwrappers
		(per esempio <manref name="hosts_access" section="5">); 
		notate il trucco per <file>/etc/hosts.deny</file> nel testo
		<item>
		Se eseguite ftp, impostate il server ftpd per essere eseguito
		sempre in <prgn>chroot</prgn> alla home directory dell'utente
		<item>
		Se usate X, disabilitate l'autenticazione xhost ed usate
		<prgn>ssh</prgn> come sostituto; ancora meglio, disabilitate,
		se possibile, la possibilità di loggarsi in X da remoto
		(aggiungete -nolisten tcp alla riga di comando di X
		e disabilitate XDMPC nel file 
		<file>/etc/X11/xdm/xdm-config</file> impostando a 0 
		la requestPort)
		<item>Disabilitate l'accesso dall'esterno alle stampanti
		<item>
		Effettuate il tunneling di qualsiasi sezione POP o IMAP
		attraverso SSL o <prgn>ssh</prgn>; installate stunnel 
		se volete fornire questo servizio agli utenti remoti 
		del servizio e-mail
		<item>
		Impostate un log host e configurate tutti gli altri 
		host a mandare i log a questo host 
		(<file>/etc/syslog.conf</file>)
		<item>
		Rendete sicuri BIND, Sendmail e altri demoni complessi
		(eseguiteli in una gabbia <prgn>chroot</prgn>;
		eseguiteli come pseudo-utente non-root)
		<item>Installate snort o un simile strumento di logging
		<item>
		Se possibile, fate a meno di NIS ed RPC (disabilitate portmap)
		    
	      </list>

	  <item>Documenti sulle politiche adottate

	      <list>
		
		    <item>
		    Educate gli utenti a comprendere i perché ed i come delle
		    vostre politiche. Quando proibite qualcosa che è
		    regolarmente disponibile su altri sistemi, fornite
		    documentazione che spieghi come raggiungere i risultati
		    voluti utilizzando altri mezzi più sicuri
		<item>
		Proibite l'uso di protocolli che usano password in chiaro
		(<prgn>telnet</prgn>, <prgn>rsh</prgn> e simili; ftp, imap, 
		http, ...)
		<item>Proibite i programmi che usano SVGAlib
		<item>Usate la gestione delle quote disco

	      </list>
	      
	  <item>Tenetevi informati circa le notizie riguardanti la sicurezza

	      <list>
		
		<item>Iscrivetevi a mailing list di sicurezza
		<item>
		Configurate <package>apt</package> per gli aggiornamenti 
		di sicurezza; aggiungete al file 
		<file>/etc/apt/sources.list</file>
		una riga per http://security.debian.org/debian-security
		<item>
		Ricordatevi di eseguire periodicamente
		<prgn>apt-get update ; apt-get upgrade</prgn> (potreste 
		farlo eseguire a <prgn>cron</prgn>) come spiegato in
		<ref id="security-update">

	      </list>

	</list>

<appendix id="snort-box">Configurazione ed installazione di un 
                         sistema autonomo IDS

<p>
Potete installare facilmente un sistema dedicato Debian come un
autonomo sistema di rilevazione di intrusione (IDS) usando 
il pacchetto <package>snort</package>.

<p>I punti fondamentali:

<list>

<item>Installare un sistema di base Debian senza selezionare pacchetti
aggiuntivi.
<item>
Scaricare (con dpkg) ed installare manualmente i pacchetti necessari (vedete
l'elenco dei pacchetti installati sotto).
<item>
Scaricare ed installare ACID  (Analysis Console for Intrusion
Databases).

</list>

<p>
ACID è attualmente pacchettizzato per Debian come 
<package>acidlab</package>. &Egrave; provvisto di un'interfaccia grafica 
WWW per l'output di snort. Anche questo pacchetto può essere scaricato 
da <url id="http://www.cert.org/kb/acid/">, 
<url id="http://acidlab.sourceforge.net"> oppure
<url id="http://www.andrew.cmu.edu/~rdanyliw/snort/">.
Potete anche leggere lo  
<url id="http://www.tldp.org/HOWTO/Snort-Statistics-HOWTO/index.html"
     name="Snort Statistics HOWTO">.

<p>
Questo sistema dovrebbe essere installato con almeno 
due interfacce di rete: un'interfaccia collegata alla LAN di
amministrazione (per l'accesso ai  risultati e per la
manutenzione del sistema) ed un'interfaccia senza indirizzo
IP fissata al segmento della rete che deve essere  analizzato.

<p>
Il file standard di Debian <file>/etc/network/interfaces</file> ,
usato solitamente per configurare le schede di rete non può 
essere usato, dato che i programmi <prgn>ifup</prgn> e 
<prgn>ifdown</prgn>  si aspettano un'indirizzo IP. Quindi si
deve usare <tt>ifconfig eth0 up</tt>.

<p>
Oltre all'installazione di base, <package>acidlab</package> dipende,
tra gli altri, anche dai pacchetti <package>php4</package> e 
<package>apache</package>. Scaricate  i seguenti
pacchetti (Nota: le versioni potrebbero variare secondo quale
distribuzione  Debian state usando, questa lista è riferita alla
versione Debian <em>woody</em> del settembre 2001):



<example>
ACID-0.9.5b9.tar.gz
adduser_3.39_all.deb
apache-common_1.3.20-1_i386.deb
apache_1.3.20-1_i386.deb
debconf_0.9.77_all.deb
dialog_0.9a-20010527-1_i386.deb
fileutils_4.1-2_i386.deb
klogd_1.4.1-2_i386.deb
libbz2-1.0_1.0.1-10_i386.deb
libc6_2.2.3-6_i386.deb
libdb2_2.7.7-8_i386.deb
libdbd-mysql-perl_1.2216-2_i386.deb
libdbi-perl_1.18-1_i386.deb
libexpat1_1.95.1-5_i386.deb
libgdbmg1_1.7.3-27_i386.deb
libmm11_1.1.3-4_i386.deb
libmysqlclient10_3.23.39-3_i386.deb
libncurses5_5.2.20010318-2_i386.deb
libpcap0_0.6.2-1_i386.deb
libpcre3_3.4-1_i386.deb
libreadline4_4.2-3_i386.deb 
libstdc++2.10-glibc2.2_2.95.4-0.010703_i386.deb
logrotate_3.5.4-2_i386.deb
mime-support_3.11-1_all.deb
mysql-client_3.23.39-3_i386.deb
mysql-common_3.23.39-3.1_all.deb
mysql-server_3.23.39-3_i386.deb
perl-base_5.6.1-5_i386.deb
perl-modules_5.6.1-5_all.deb
perl_5.6.1-5_i386.deb
php4-mysql_4.0.6-4_i386.deb
php4_4.0.6-1_i386.deb
php4_4.0.6-4_i386.deb
snort_1.7-9_i386.deb
sysklogd_1.4.1-2_i386.deb
zlib1g_1.1.3-15_i386.deb
</example>

<p>Pacchetti installati (dpkg -l):

<example>
ii  adduser        3.39
ii  ae             962-26
ii  apache         1.3.20-1
ii  apache-common  1.3.20-1
ii  apt            0.3.19
ii  base-config    0.33.2
ii  base-files     2.2.0
ii  base-passwd    3.1.10
ii  bash           2.03-6
ii  bsdutils       2.10f-5.1
ii  console-data   1999.08.29-11.
ii  console-tools  0.2.3-10.3
ii  console-tools- 0.2.3-10.3
ii  cron           3.0pl1-57.2
ii  debconf        0.9.77
ii  debianutils    1.13.3
ii  dialog         0.9a-20010527-
ii  diff           2.7-21
ii  dpkg           1.6.15
ii  e2fsprogs      1.18-3.0
ii  elvis-tiny     1.4-11
ii  fbset          2.1-6
ii  fdflush        1.0.1-5
ii  fdutils        5.3-3   
ii  fileutils      4.1-2   
ii  findutils      4.1-40
ii  ftp            0.10-3.1
ii  gettext-base   0.10.35-13
ii  grep           2.4.2-1
ii  gzip           1.2.4-33
ii  hostname       2.07
ii  isapnptools    1.21-2
ii  joe            2.8-15.2  
ii  klogd          1.4.1-2   
ii  ldso           1.9.11-9   
ii  libbz2-1.0     1.0.1-10
ii  libc6          2.2.3-6
ii  libdb2         2.7.7-8
ii  libdbd-mysql-p 1.2216-2
ii  libdbi-perl    1.18-1
ii  libexpat1      1.95.1-5
ii  libgdbmg1      1.7.3-27
ii  libmm11        1.1.3-4
ii  libmysqlclient 3.23.39-3
ii  libncurses5    5.2.20010318-2
ii  libnewt0       0.50-7  
ii  libpam-modules 0.72-9
ii  libpam-runtime 0.72-9  
ii  libpam0g       0.72-9
ii  libpcap0       0.6.2-1
ii  libpcre3       3.4-1   
ii  libpopt0       1.4-1.1
ii  libreadline4   4.2-3 
ii  libssl09       0.9.4-5   
ii  libstdc++2.10  2.95.2-13 
ii  libstdc++2.10- 2.95.4-0.01070
ii  libwrap0       7.6-4   
ii  lilo           21.4.3-2
ii  locales        2.1.3-18
ii  login          19990827-20
ii  makedev        2.3.1-46.2
ii  mawk           1.3.3-5
ii  mbr            1.1.2-1 
ii  mime-support   3.11-1 
ii  modutils       2.3.11-13.1
ii  mount          2.10f-5.1
ii  mysql-client   3.23.39-3
ii  mysql-common   3.23.39-3.1
ii  mysql-server   3.23.39-3
ii  ncurses-base   5.0-6.0potato1
ii  ncurses-bin    5.0-6.0potato1
ii  netbase        3.18-4  
ii  passwd         19990827-20
ii  pciutils       2.1.2-2
ii  perl           5.6.1-5   
ii  perl-base      5.6.1-5   
ii  perl-modules   5.6.1-5
ii  php4           4.0.6-4   
ii  php4-mysql     4.0.6-4 
ii  ppp            2.3.11-1.4
ii  pppconfig      2.0.5
ii  procps         2.0.6-5   
ii  psmisc         19-2   
ii  pump           0.7.3-2 
ii  sed            3.02-5 
ii  setserial      2.17-16
ii  shellutils     2.0-7
ii  slang1         1.3.9-1  
ii  snort          1.7-9
ii  ssh            1.2.3-9.3
ii  sysklogd       1.4.1-2
ii  syslinux       1.48-2
ii  sysvinit       2.78-4  
ii  tar            1.13.17-2  
ii  tasksel        1.0-10 
ii  tcpd           7.6-4     
ii  telnet         0.16-4potato.1
ii  textutils      2.0-2  
ii  update         2.11-1    
ii  util-linux     2.10f-5.1
ii  zlib1g         1.1.3-15  
</example>




<appendix id="bridge-fw">Impostare un bridge firewall

<p>
Queste informazioni sono il contributo di Francois Bayart 
per aiutare gli utenti ad impostare un bridge/firewall Linux con il 
kernel 2.4.x ed <package>iptables</package>.
L'unico requisito necessario è la patch per il bridge firewall 
disponibile presso la <url name="pagine web di Sourceforge"
id="http://bridge.sourceforge.net/download.html">.

<p>
Ad esempio, se state usando il kernel 2.4.18, per prima cosa 
installate il pacchetto sorgente del kernel, quindi scaricate la 
<url name="patch" id="http://bridge.sourceforge.net/devel/bridge-nf/bridge-nf-0.0.6-against-2.4.18.diff"> e applicatela, come mostrato nell'esempio:

<example>
Zipowz:/usr/src# apt-get install kernel-source-2.4.18
Zipowz:/usr/src# cd kernel-source-2.4.18
Zipowz:/usr/src/kernel-source-2.4.18# patch -p1 < ../bridge-nf-0.0.6-against-2.4.18.diff 
patching file include/linux/netfilter.h
patching file include/linux/netfilter_ipv4.h
patching file include/linux/skbuff.h
patching file net/bridge/br.c
patching file net/bridge/br_forward.c
patching file net/bridge/br_input.c
patching file net/bridge/br_netfilter.c
patching file net/bridge/br_private.h
patching file net/bridge/Makefile
patching file net/Config.in
patching file net/core/netfilter.c
patching file net/core/skbuff.c
patching file net/ipv4/ip_output.c
patching file net/ipv4/netfilter/ip_tables.c
patching file net/ipv4/netfilter/ipt_LOG.c
</example>

<p>
Ora configurate il kernel (cioè: <tt>make menuconfig</tt>, 
<tt>make xconfig</tt>). Nella sezione <em>Networking options</em>, 
abilitate le seguenti opzioni:

<example>
[*] Network packet filtering (replaces ipchains)
[ ]   Network packet filtering debugging (NEW)
<*> 802.1d Ethernet Bridging
[*]   netfilter (firewalling) support (NEW)
</example>

<p>
Attenzione: dovete disabilitare questa opzione se 
volete applicare delle regole di firewall altrimenti 
<prgn>iptables</prgn> non funzionerà.

<example>
[ ]   Network packet filtering debugging (NEW)
</example>

<p>
Dopodiché, aggiungete le opzioni corrette nella sezione 
<em>IP: Netfilter Configuration</em>. Quindi, compilate ed installate 
il kernel. Se volete farlo alla <em>maniera Debian</em>, installate 
<package>kernel-package</package> e lanciate <prgn>make-kpkg</prgn> 
per creare un pacchetto del kernel Debian personalizzato 
installabile sul server utilizzando dpkg. Una volta che il nuovo 
kernel è compilato ed installato, installate il pacchetto 
<package>bridge-utils</package>.

<p>
Una volta completati questi passaggi, potete completare la 
configurazione del vostro bridge. La sezione successiva mostra 
due diverse possibili configurazioni per il bridge, ognuna con 
un ipotetica mappa di rete e i comandi necessari.


<sect>Un bridge con funzionalità NAT e firewall

<p>
La prima configurazione utilizza il bridge come un firewall con
traduzione degli indirizzi di rete (NAT) che protegge un server 
ed i clients della LAN interna. Un diagramma della configurazione 
di rete è mostrato qui sotto:



<example>
Internet ---- router ( 62.3.3.25 ) ---- bridge (62.3.3.26 gw 62.3.3.25 / 192.168.0.1)
                                          |
                                          |
                                          |---- WWW Server (62.3.3.27 gw 62.3.3.25)
                                          |
                                          |
                                         LAN --- Zipowz (192.168.0.2 gw 192.168.0.1)
</example>

<p>I seguenti comandi mostrano come il bridge può essere configurato:

<example>
# Crea l'interfaccia br0
/usr/sbin/brctl addbr br0

# Aggiunge l'interfaccia Ethernet da utilizzare con il bridge
/usr/sbin/brctl addif br0 eth0
/usr/sbin/brctl addif br0 eth1

# Lancia l'interfaccia Ethernet
/sbin/ifconfig eth0 0.0.0.0
/sbin/ifconfig eth1 0.0.0.0

# Configurare il bridge ethernet.
# Il bridge sarà corretto ed invisibile (firewall trasparente).
# Non figura in un traceroute e conserva il vero gateway sugli altri 
# computer. Ora se volete potete configurare un gateway sul bridge e 
# sceglierlo come nuovo gateway per altri computer.



/sbin/ifconfig br0 62.3.3.26 netmask 255.255.255.248 broadcast 62.3.3.32

# Ho aggiunto questo IP interno per creare il nostro NAT 
ip addr add 192.168.0.1/24 dev br0
/sbin/route add default gw 62.3.3.25
</example>




<sect>Bridge con funzionalità di firewall

<p>
Una seconda configurazione possibile è un sistema configurato
come un firewall trasparente per una LAN con spazio di 
indirizzi IP pubblici.

<example>
Internet ---- router (62.3.3.25) ---- bridge (62.3.3.26)
                                        |
                                        |
                                        |---- WWW Server (62.3.3.28 gw 62.3.3.25)
                                        |
                                        |
                                        |---- Mail Server (62.3.3.27 gw 62.3.3.25)
</example>

<p>Le seguenti istruzioni mostrano come sia possibile configurare
questo bridge.

<example>
# Crea l'interfaccia br0
/usr/sbin/brctl addbr br0

# Aggiunge l'interfaccia Ethernet da utilizzare con il bridge
/usr/sbin/brctl addif br0 eth0
/usr/sbin/brctl addif br0 eth1

# Inizializza l'interfaccia Ethernet
/sbin/ifconfig eth0 0.0.0.0
/sbin/ifconfig eth1 0.0.0.0

# Configurazione del bridge Ethernet.
# Il bridge sarà invisibile e impostato correttamente (firewall trasparente).
# Non figura in un traceroute e mantiene il vostro vero gateway sugli altri 
# computer. Ora, se vorrete, potrete configurare un gateway sul vostro bridge 
# a sceglierlo come il nuovo gateway per gli altri computer.



/sbin/ifconfig br0 62.3.3.26 netmask 255.255.255.248 broadcast 62.3.3.32
</example>

<p>
Se eseguite un traceroute verso il Linux Mail Server, non vedrete
il bridge. Se volete accedere al bridge con <prgn>ssh</prgn>, dovete 
avere un gateway, altrimenti dovreste prima connettervi a un altro 
server, come il "Mail Server" e in seguito connettervi al bridge 
tramite la scheda di rete interna.



<sect>Regole base di IPtables

<p>Questo è un esempio delle regole base che si potrebbero usare per queste 
due configurazioni indistintamente.

<example>
  iptables -F FORWARD
  iptables -P FORWARD DROP
  iptables -A FORWARD -s 0.0.0.0/0.0.0.0 -d 0.0.0.0/0.0.0.0 -m state --state INVALID -j DROP
  iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT

  # Alcune regole interessanti ma non presenti in una configurazione
  # classica di Iptables...
  # Limit ICMP
  # iptables -A FORWARD -p icmp -m limit --limit 4/s -j ACCEPT
  # Confronta la stringa, un buon metodo, semplice, per bloccare molto 
  # velocemente alcuni VIRUS
  # iptables -I FORWARD -j DROP -p tcp -s 0.0.0.0/0 -m string --string "cmd.exe"

  # Blocca tutte le connessioni di MySQL tanto per essere sicuri
  iptables -A FORWARD -p tcp -s 0/0 -d 62.3.3.0/24 --dport 3306 -j DROP

  # Regole per Linux Mail Server

  # Autorizza FTP-DATA ( 20 ) , FTP ( 21 ) , SSH ( 22 ) 
  iptables -A FORWARD -p tcp -s 0.0.0.0/0 -d 62.3.3.27/32 --dport 20:22 -j ACCEPT

  # Autorizza il Mail Server a connettersi con l'esterno
  # Da notare: ciò *non* è necessario per le connessioni precedenti
  # (ricorda: stateful filtering) e quindi può essere rimosso.
  iptables -A FORWARD -p tcp -s 62.3.3.27/32 -d 0/0 -j ACCEPT

  # WWW Server Rules

  # Autorizza connessioni HTTP ( 80 ) con il server WWW
  iptables -A FORWARD -p tcp -s 0.0.0.0/0 -d 62.3.3.28/32 --dport 80 -j ACCEPT

  # Autorizza connessioni HTTPS ( 443 ) con il server WWW
  iptables -A FORWARD -p tcp -s 0.0.0.0/0 -d 62.3.3.28/32 --dport 443 -j ACCEPT

  # Autorizza il server WWW a connettersi con l'esterno
  # Da notare: ciò *non* è necessario per le connessioni precedenti
  # (ricorda: stateful filtering) e quindi può essere rimosso.
  iptables -A FORWARD -p tcp -s 62.3.3.28/32 -d 0/0 -j ACCEPT
</example>

<appendix id="bind-chuser">Script di esempio per modificare 
                           l'installazione predefinita di Bind.

<p>
Questo script automatizza la procedura per la modifica dell'installazione
predefinita del server dei nomi <prgn>bind</prgn> in modo che <em>non</em> 
giri come super utente. 
Creerà l'utente e i gruppi usati per il server dei nomi. Da utilizzare con
cautela poiché non è stato testato approfonditamente.

<example>
  #!/bin/sh
  # Change the default Debian bind configuration to have it run
  # with a non-root user and group.
  #
  # WARN: This script has not been tested throughly, please
  # verify the changes made to the INITD script

  # (c) 2002 Javier Fernández-Sanguino Peña
  #
  #    This program is free software; you can redistribute it and/or modify
  #    it under the terms of the GNU General Public License as published by
  #    the Free Software Foundation; either version 1, or (at your option)
  #    any later version.
  #
  #    This program is distributed in the hope that it will be useful,
  #    but WITHOUT ANY WARRANTY; without even the implied warranty of
  #    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  #    GNU General Public License for more details.
  #
  #     Please see the file `COPYING' for the complete copyright notice.
  #

  restore() {
  # Just in case, restore the system if the changes fail
	  echo "WARN: Restoring to the previous setup since I'm unable to properly change it."
	  echo "WARN: Please check the $INITDERR script."
	  mv $INITD $INITDERR
	  cp $INITDBAK $INITD
  }


  USER=named
  GROUP=named
  INITD=/etc/init.d/bind
  INITDBAK=$INITD.preuserchange
  INITDERR=$INITD.changeerror
  START="start-stop-daemon --start --quiet --exec /usr/sbin/named -- -g $GROUP -u $USER"
  AWKS="awk ' /start-stop-daemon --start/ { print \"$START\"; noprint = 1; }; /\/usr\/sbin\/ndc reload/ { print \"stop; sleep 2; start;\"; noprint = 1; } /\\\\$/ { if ( noprint != 0 ) { noprint = noprint + 1;} } /^.*$/ { if ( noprint != 0 ) { noprint = noprint - 1; } else { print \$0; } } '"

  [ `id -u` -ne 0 ] && {
	  echo "This program must be run by the root user"
	  exit 1
  }

  RUNUSER=`ps -eo user,fname |grep named |cut -f 1 -d " "`

  if [ "$RUNUSER" = "$USER" ] 
  then
	  echo "WARN: The name server running daemon is already running as $USER"
	  echo "ERR:  This script will not many any changes to your setup."
	  exit 1
  fi
  if [ ! -f $INITD ]
  then
	  echo "ERR:  This system does not have $INITD (which this script tries to change)"
	  RUNNING=`ps -eo fname |grep named`
	   [ -z "$RUNNING" ] && \
	      echo "ERR:  In fact the name server daemon is not even running (is it installed?)"
	   echo "ERR:  No changes will be made to your system"
	  exit 1
  fi

  # Check if named group exists
  if [ -z "`grep $GROUP /etc/group`" ] 
  then
	  echo "Creating group $GROUP:"
	  addgroup $GROUP
  else
	  echo "WARN: Group $GROUP already exists. Will not create it"
  fi
  # Same for the user
  if [ -z "`grep $USER /etc/passwd`" ] 
  then
	  echo "Creating user $USER:"
	  adduser --system --home /home/$USER \
	  --no-create-home --ingroup $GROUP \
	  --disabled-password --disabled-login $USER
  else
	  echo "WARN: The user $USER already exists. Will not create it"
  fi

  # Change the init.d script

  # First make a backup (check that there is not already
  # one there first)
  if [ ! -f $INITDBAK ] 
  then
	  cp $INITD $INITDBAK
  fi

  # Then use it to change it
  cat $INITDBAK |
  eval $AWKS > $INITD

  echo "WARN: The script $INITD has been changed, trying to test the changes."
  echo "Restarting the named daemon (check for errors here)."

  $INITD restart
  if [ $? -ne 0 ] 
  then
	  echo "ERR:  Failed to restart the daemon."
	  restore
	  exit 1
  fi

  RUNNING=`ps -eo fname |grep named`
  if [ -z "$RUNNING" ] 
  then
	  echo "ERR:  Named is not running, probably due to a problem with the changes."
	  restore
	  exit 1
  fi

  # Check if it's running as expected
  RUNUSER=`ps -eo user,fname |grep named |cut -f 1 -d " "`

  if [ "$RUNUSER" = "$USER" ] 
  then
	  echo "All has gone well, named seems to be running now as $USER."
  else
	  echo "ERR:  The script failed to automatically change the system."
	  echo "ERR:  Named is currently running as $RUNUSER."
	  restore
	  exit 1
  fi

  exit 0
</example>

<p>
Lo script precedente gira su Woody (Debian 3.0), personalizza
<prgn>bind</prgn>, che userete con il seguente file initd
dopo aver creato l'utente ed il gruppo "named":

<example>
  #!/bin/sh

  PATH=/sbin:/bin:/usr/sbin:/usr/bin

  test -x /usr/sbin/named || exit 0

  start () {
	  echo -n "Starting domain name service: named"
	  start-stop-daemon --start --quiet \
	      --pidfile /var/run/named.pid --exec /usr/sbin/named 
	  echo "."	
  }

  stop () {
	  echo -n "Stopping domain name service: named"
	  # --exec doesn't catch daemons running deleted instances of named,
	  # as in an upgrade.  Fortunately, --pidfile is only going to hit
	  # things from the pidfile.
	  start-stop-daemon --stop --quiet  \
	      --pidfile /var/run/named.pid --name named
	  echo "."	
  }

  case "$1" in
      start)
	  start
      ;;

      stop)
	  stop
      ;;

      restart|force-reload)
	  stop
	  sleep 2
	  start
      ;;

      reload)
	  /usr/sbin/ndc reload
      ;;

      *)
	  echo "Usage: /etc/init.d/bind {start|stop|reload|restart|force-reload}" >&2
	  exit 1
      ;;
  esac

  exit 0
</example>




<appendix id="fw-security-update">Aggiornamenti di sicurezza protetti 
                                  da un firewall

<p>
Dopo un'installazione standard, la sicurezza di un sistema potrebbe
avere ancora delle vulnerabilità. A meno che voi non scarichiate
gli aggiornamenti da un altro sistema (o abbiate fatto il mirror di
security.debian.org per un uso locale), il sistema dovrà essere
collegato a Internet per i download.

<p>
Non appena vi collegate a Internet, però, esponete il sistema
a dei rischi. Se uno dei vostri servizi locali ha una vulnerabilità,
potreste essere compromessi ancor prima che l'aggiornamento termini!
Può sembrare paranoico, ma, di fatto, analisi 
dell'<url id="http://www.honeynet.org" name="Honeynet Project">, 
hanno mostrato che i sistemi possono essere compromessi in meno di tre 
giorni, anche se non sono noti pubblicamente (cioè non siano 
riportati nei registri DNS).

<p>
Quando si esegue un aggiornamento, su di un sistema non protetto da
un altro sistema esterno, come un firewall, è possibile configurare 
adeguatamente il vostro firewall locale per limitare le connessioni 
alle sole riguardanti gli aggiornamenti di sicurezza.
L'esempio qui di seguito, mostra come configurare un tale firewall,
per autorizzare solo le connessioni da security.debian.org, e 
registrare tutte le altre.

<p>FIXME: aggiungere l'indirizzo IP di security.debian.org (altrimenti 
dovreste avere il servizio DNS avviato per funzionare).

<p>FIXME: provare questa configurazione per verificare che funzioni
correttamente.

<p>FIXME: ciò funzionerà solo con le URL HTTP poiché ftp potrebbe
richiedere il modulo ip_conntrack_ftp module, oppure utilizzare
la modalità passiva.

<!-- FIXME: this is probably not needed, after all it is a packet inspection 
     fw: -->
<!-- # iptables -A INPUT -s security.debian.org -p 80 -j ACCEPT -->

<example>
  # iptables -F
  # iptables -L
  Chain INPUT (policy ACCEPT)
  target     prot opt source               destination

  Chain FORWARD (policy ACCEPT)
  target     prot opt source               destination

  Chain OUTPUT (policy ACCEPT)
  target     prot opt source               destination
  # iptables -P INPUT DROP
  # iptables -P FORWARD DROP
  # iptables -P OUTPUT DROP
  # iptables -A OUTPUT -d security.debian.org -p 80 -j ACCEPT
  # iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
  # iptables -A INPUT -p icmp -j ACCEPT
  # iptables -A INPUT -j LOG
  # iptables -A OUTPUT -j LOG
  # iptables -L
  Chain INPUT (policy DROP)
  target     prot opt source               destination
  ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0          state RELATED,ESTABLISHED
  ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0
  LOG        all  --  anywhere             anywhere           LOG level warning

  Chain FORWARD (policy DROP)
  target     prot opt source               destination

  Chain OUTPUT (policy DROP)
  target     prot opt source               destination
  ACCEPT     80   --  anywhere             security.debian.org
  LOG        all  --  anywhere             anywhere           LOG level warning
</example>




<appendix id="chroot-ssh-env">Ambiente <Prgn>Chroot</Prgn> per <PRGN>SSH</PRGN>

<p>
Creare un ambiente con restrizioni per `SSH' è un lavoro duro, a causa
delle sue dipendenze e per il fatto che, a differenza degli altri
server, <PRGN>SSH</PRGN> fornisce una shell remota agli utenti. Perciò, 
dovrete anche tenere conto di quali applicazioni saranno "permesse" agli
utenti. Se, per esempio, create questa struttura di file in
<file>/var/chroot/ssh</file>, potete avviare il server <prgn>ssh</prgn> 
in ambiente <prgn>chroot</prgn> con questo comando:

<example>
  # chroot /var/chroot/ssh /sbin/sshd -f /etc/sshd_config
</example>



<sect>Realizzare automaticamente l'ambiente (modo semplice)

<p>
Potete facilmente creare un ambiente con restrizioni con il pacchetto
<package>makejail</package>. Infatti esso si prende automaticamente cura 
di tracciare il demone del server (con <prgn>strace</prgn>) e lo fa 
girare all'interno dell'ambiente riservato.

<p>
Il vantaggio dei programmi che generano automaticamente ambienti
<prgn>chroot</prgn>, consiste nella loro capacità di copiare qualunque 
pacchetto nell'ambiente <prgn>chroot</prgn> (perfino tenendo conto delle 
dipendenze del pacchetto e assicurandosi che esso sia completo). 
Pertanto, fornire applicazioni per l'utente è più semplice.

<p>
Per realizzare quest'ambiente utilizzando <prgn>makejail</prgn> con gli 
esempi forniti, utilizzate il comando:

<example>
  # makejail /usr/share/doc/makejail/examples/sshd.py
</example>

<p>
Per vedere quali altri cambiamenti è necessario apportare 
all'ambiente, leggete il file di esempio. Alcuni di questi cambiamenti,
come, ad esempio, copiare le directory home degli utenti, non 
possono essere effettuati automaticamente. Inoltre, limitate 
l'esposizione di informazioni sensibili copiando solamente i dati da un
certo numero di utenti, dai file <file>/etc/shadow</file> o 
<file>/etc/group</file>.

<p>
Il seguente ambiente d'esempio e' stato (superficialmente) testato,
ed è stato costruito con il file di configurazione fornito nel 
pacchetto; esso include i seguenti pacchetti <package>fileutils</package>:

<example>
.
|-- bin
|   |-- ash
|   |-- bash
|   |-- chgrp
|   |-- chmod
|   |-- chown
|   |-- cp
|   |-- csh -> /etc/alternatives/csh
|   |-- dd
|   |-- df
|   |-- dir
|   |-- fdflush
|   |-- ksh
|   |-- ln
|   |-- ls
|   |-- mkdir
|   |-- mknod
|   |-- mv
|   |-- rbash -> bash
|   |-- rm
|   |-- rmdir
|   |-- sh -> bash
|   |-- sync
|   |-- tcsh
|   |-- touch
|   |-- vdir
|   |-- zsh -> /etc/alternatives/zsh
|   `-- zsh4
|-- dev
|   |-- null
|   |-- ptmx
|   |-- pts
|   |-- ptya0
(...)
|   |-- tty
|   |-- tty0
(...)
|   `-- urandom
|-- etc
|   |-- alternatives
|   |   |-- csh -> /bin/tcsh
|   |   `-- zsh -> /bin/zsh4
|   |-- environment
|   |-- hosts
|   |-- hosts.allow
|   |-- hosts.deny
|   |-- ld.so.conf
|   |-- localtime -> /usr/share/zoneinfo/Europe/Madrid
|   |-- motd
|   |-- nsswitch.conf
|   |-- pam.conf
|   |-- pam.d
|   |   |-- other
|   |   `-- ssh
|   |-- passwd
|   |-- resolv.conf
|   |-- security
|   |   |-- access.conf
|   |   |-- chroot.conf
|   |   |-- group.conf
|   |   |-- limits.conf
|   |   |-- pam_env.conf
|   |   `-- time.conf
|   |-- shadow
|   |-- shells
|   `-- ssh
|       |-- moduli
|       |-- ssh_host_dsa_key
|       |-- ssh_host_dsa_key.pub
|       |-- ssh_host_rsa_key
|       |-- ssh_host_rsa_key.pub
|       `-- sshd_config
|-- home
|   `-- userX
|-- lib
|   |-- ld-2.2.5.so
|   |-- ld-linux.so.2 -> ld-2.2.5.so
|   |-- libc-2.2.5.so
|   |-- libc.so.6 -> libc-2.2.5.so
|   |-- libcap.so.1 -> libcap.so.1.10
|   |-- libcap.so.1.10
|   |-- libcrypt-2.2.5.so
|   |-- libcrypt.so.1 -> libcrypt-2.2.5.so
|   |-- libdl-2.2.5.so
|   |-- libdl.so.2 -> libdl-2.2.5.so
|   |-- libm-2.2.5.so
|   |-- libm.so.6 -> libm-2.2.5.so
|   |-- libncurses.so.5 -> libncurses.so.5.2
|   |-- libncurses.so.5.2
|   |-- libnsl-2.2.5.so
|   |-- libnsl.so.1 -> libnsl-2.2.5.so
|   |-- libnss_compat-2.2.5.so
|   |-- libnss_compat.so.2 -> libnss_compat-2.2.5.so
|   |-- libnss_db-2.2.so
|   |-- libnss_db.so.2 -> libnss_db-2.2.so
|   |-- libnss_dns-2.2.5.so
|   |-- libnss_dns.so.2 -> libnss_dns-2.2.5.so
|   |-- libnss_files-2.2.5.so
|   |-- libnss_files.so.2 -> libnss_files-2.2.5.so
|   |-- libnss_hesiod-2.2.5.so
|   |-- libnss_hesiod.so.2 -> libnss_hesiod-2.2.5.so
|   |-- libnss_nis-2.2.5.so
|   |-- libnss_nis.so.2 -> libnss_nis-2.2.5.so
|   |-- libnss_nisplus-2.2.5.so
|   |-- libnss_nisplus.so.2 -> libnss_nisplus-2.2.5.so
|   |-- libpam.so.0 -> libpam.so.0.72
|   |-- libpam.so.0.72
|   |-- libpthread-0.9.so
|   |-- libpthread.so.0 -> libpthread-0.9.so
|   |-- libresolv-2.2.5.so
|   |-- libresolv.so.2 -> libresolv-2.2.5.so
|   |-- librt-2.2.5.so
|   |-- librt.so.1 -> librt-2.2.5.so
|   |-- libutil-2.2.5.so
|   |-- libutil.so.1 -> libutil-2.2.5.so
|   |-- libwrap.so.0 -> libwrap.so.0.7.6
|   |-- libwrap.so.0.7.6
|   `-- security
|       |-- pam_access.so
|       |-- pam_chroot.so
|       |-- pam_deny.so
|       |-- pam_env.so
|       |-- pam_filter.so
|       |-- pam_ftp.so
|       |-- pam_group.so
|       |-- pam_issue.so
|       |-- pam_lastlog.so
|       |-- pam_limits.so
|       |-- pam_listfile.so
|       |-- pam_mail.so
|       |-- pam_mkhomedir.so
|       |-- pam_motd.so
|       |-- pam_nologin.so
|       |-- pam_permit.so
|       |-- pam_rhosts_auth.so
|       |-- pam_rootok.so
|       |-- pam_securetty.so
|       |-- pam_shells.so
|       |-- pam_stress.so
|       |-- pam_tally.so
|       |-- pam_time.so
|       |-- pam_unix.so
|       |-- pam_unix_acct.so -> pam_unix.so
|       |-- pam_unix_auth.so -> pam_unix.so
|       |-- pam_unix_passwd.so -> pam_unix.so
|       |-- pam_unix_session.so -> pam_unix.so
|       |-- pam_userdb.so
|       |-- pam_warn.so
|       `-- pam_wheel.so
|-- sbin
|   `-- start-stop-daemon
|-- usr
|   |-- bin
|   |   |-- dircolors
|   |   |-- du
|   |   |-- install
|   |   |-- link
|   |   |-- mkfifo
|   |   |-- shred
|   |   |-- touch -> /bin/touch
|   |   `-- unlink
|   |-- lib
|   |   |-- libcrypto.so.0.9.6
|   |   |-- libdb3.so.3 -> libdb3.so.3.0.2
|   |   |-- libdb3.so.3.0.2
|   |   |-- libz.so.1 -> libz.so.1.1.4
|   |   `-- libz.so.1.1.4
|   |-- sbin
|   |   `-- sshd
|   `-- share
|       |-- locale
|       |   `-- es
|       |       |-- LC_MESSAGES
|       |       |   |-- fileutils.mo
|       |       |   |-- libc.mo
|       |       |   `-- sh-utils.mo
|       |       `-- LC_TIME -> LC_MESSAGES
|       `-- zoneinfo
|           `-- Europe
|               `-- Madrid
`-- var
    `-- run
        |-- sshd
        `-- sshd.pid

27 directories, 733 files
</example>

<sect>Applicare una patch ad <PRGN>SSH</PRGN> per abilitare funzionalità in 
<prgn>chroot</prgn>

<p>
Il pacchetto <prgn>sshd</prgn> disponibile in Debian non permette di
restringere i movimenti di un utente che accede al server,
perché non dispone della funzione <prgn>chroot</prgn> che è invece 
inclusa nel programma commerciale <prgn>sshd2</prgn> 
(mediante "ChrootGroups" o "ChrootUsers", vedete 
<manref name="sshd2_config" section="5">). Tuttavia è disponibile una
patch per aggiungere questa funzionalità dal 
<url id="http://bugs.debian.org/139047" name="Bug report 139047">
oppure <url id="http://www.cag.lcs.mit.edu/~raoul/">.
La patch potrebbe essere inclusa nelle prossime versioni del 
pacchetto OpenSSH. Emanuel Lacour dispone di pacchetti deb di 
<prgn>ssh</prgn> con questa funzione: 
<url id="http://debian.home-dn.net/woody/ssh/">.
Tuttavia è consigliabile compilare il programma. 

<p>
All'indirizzo <url id="http://mail.incredimail.com/howto/openssh/"> 
sono descritti di tutti i passi necessari per avere la funzionalità
chroot (nonostante sia dedicata agli utenti di RedHat 7.2, quasi
tutto è applicabile anche a Debian). Dopo aver applicato la patch
occorre modificare <file>/etc/passwd</file> cambiando la home 
path degli utenti (con la speciale sequenza <tt>/./</tt>):

<example>
  joeuser:x:1099:1099:Joe Random User:/home/joe/./:/bin/bash
</example>

<p>
In questo modo viene limitato sia <em>l'accesso</em> remoto alla shell 
che la copia remota attraverso il canale <prgn>ssh</prgn>.

<p>
Bisogna accertarsi di avere tutti i binari e le librerie necessarie
nel path soggetto a <prgn>chroot</prgn> per gli utenti. 
Questi file dovrebbero essere di proprietà di root per evitare che 
gli utenti li manomettano (in modo da evitare la gabbia chroot). 
Un esempio potrebbe comprendere:

<example>
./bin:
total 660
drwxr-xr-x    2 root     root         4096 Mar 18 13:36 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
-r-xr-xr-x    1 root     root       531160 Feb  6 22:36 bash
-r-xr-xr-x    1 root     root        43916 Nov 29 13:19 ls
-r-xr-xr-x    1 root     root        16684 Nov 29 13:19 mkdir
-rwxr-xr-x    1 root     root        23960 Mar 18 13:36 more
-r-xr-xr-x    1 root     root         9916 Jul 26  2001 pwd
-r-xr-xr-x    1 root     root        24780 Nov 29 13:19 rm
lrwxrwxrwx    1 root     root            4 Mar 30 16:29 sh -> bash

./etc:
total 24
drwxr-xr-x    2 root     root         4096 Mar 15 16:13 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
-rw-r--r--    1 root     root           54 Mar 15 13:23 group
-rw-r--r--    1 root     root          428 Mar 15 15:56 hosts
-rw-r--r--    1 root     root           44 Mar 15 15:53 passwd
-rw-r--r--    1 root     root           52 Mar 15 13:23 shells

./lib:
total 1848
drwxr-xr-x    2 root     root         4096 Mar 18 13:37 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
-rwxr-xr-x    1 root     root        92511 Mar 15 12:49 ld-linux.so.2
-rwxr-xr-x    1 root     root      1170812 Mar 15 12:49 libc.so.6
-rw-r--r--    1 root     root        20900 Mar 15 13:01 libcrypt.so.1
-rw-r--r--    1 root     root         9436 Mar 15 12:49 libdl.so.2
-rw-r--r--    1 root     root       248132 Mar 15 12:48 libncurses.so.5
-rw-r--r--    1 root     root        71332 Mar 15 13:00 libnsl.so.1
-rw-r--r--    1 root     root        34144 Mar 15 16:10 libnss_files.so.2
-rw-r--r--    1 root     root        29420 Mar 15 12:57 libpam.so.0
-rw-r--r--    1 root     root       105498 Mar 15 12:51 libpthread.so.0
-rw-r--r--    1 root     root        25596 Mar 15 12:51 librt.so.1
-rw-r--r--    1 root     root         7760 Mar 15 12:59 libutil.so.1
-rw-r--r--    1 root     root        24328 Mar 15 12:57 libwrap.so.0

./usr:
total 16
drwxr-xr-x    4 root     root         4096 Mar 15 13:00 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
drwxr-xr-x    2 root     root         4096 Mar 15 15:55 bin
drwxr-xr-x    2 root     root         4096 Mar 15 15:37 lib

./usr/bin:
total 340
drwxr-xr-x    2 root     root         4096 Mar 15 15:55 .
drwxr-xr-x    4 root     root         4096 Mar 15 13:00 ..
-rwxr-xr-x    1 root     root        10332 Mar 15 15:55 env
-rwxr-xr-x    1 root     root        13052 Mar 15 13:13 id
-r-xr-xr-x    1 root     root        25432 Mar 15 12:40 scp
-rwxr-xr-x    1 root     root        43768 Mar 15 15:15 sftp
-r-sr-xr-x    1 root     root       218456 Mar 15 12:40 ssh
-rwxr-xr-x    1 root     root         9692 Mar 15 13:17 tty

./usr/lib:
total 852
drwxr-xr-x    2 root     root         4096 Mar 15 15:37 .
drwxr-xr-x    4 root     root         4096 Mar 15 13:00 ..
-rw-r--r--    1 root     root       771088 Mar 15 13:01
libcrypto.so.0.9.6
-rw-r--r--    1 root     root        54548 Mar 15 13:00 libz.so.1
-rwxr-xr-x    1 root     root        23096 Mar 15 15:37 sftp-server
</example>


<sect>Ambiente fatto a mano (nella modo più brutale)

<p>
&Egrave; possibile creare un ambiente usando un metodo per tentativo ed
errori, monitorando i tracciati e i file di log del server <prgn>sshd</prgn>
in modo da determinare i file necessari. L'ambiente seguente, fornito da 
José Luis Ledesma, è una lista di file di esempio in un ambiente 
<prgn>chroot</prgn> per <prgn>ssh</prgn>:


<footnote>
Notate che non ci sono file SETUID. Questo rende più difficile
uscire dall'ambiente <prgn>chroot</prgn> agli utenti remoti. Tuttavia
impedisce anche agli utenti di cambiare le loro password visto che
il programma <prgn>passwd</prgn> non può modificare i file 
<file>/etc/passwd</file> o <file>/etc/shadow</file>.
</footnote>

<example>
.:
total 36
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ./
drwxr-xr-x 11 root root 4096 Jun 3 13:43 ../
drwxr-xr-x 2 root root 4096 Jun 4 12:13 bin/
drwxr-xr-x 2 root root 4096 Jun 4 12:16 dev/
drwxr-xr-x 4 root root 4096 Jun 4 12:35 etc/
drwxr-xr-x 3 root root 4096 Jun 4 12:13 lib/
drwxr-xr-x 2 root root 4096 Jun 4 12:35 sbin/
drwxr-xr-x 2 root root 4096 Jun 4 12:32 tmp/
drwxr-xr-x 2 root root 4096 Jun 4 12:16 usr/
./bin:
total 8368
drwxr-xr-x 2 root root 4096 Jun 4 12:13 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
-rwxr-xr-x 1 root root 109855 Jun 3 13:45 a2p*
-rwxr-xr-x 1 root root 387764 Jun 3 13:45 bash*
-rwxr-xr-x 1 root root 36365 Jun 3 13:45 c2ph*
-rwxr-xr-x 1 root root 20629 Jun 3 13:45 dprofpp*
-rwxr-xr-x 1 root root 6956 Jun 3 13:46 env*
-rwxr-xr-x 1 root root 158116 Jun 3 13:45 fax2ps*
-rwxr-xr-x 1 root root 104008 Jun 3 13:45 faxalter*
-rwxr-xr-x 1 root root 89340 Jun 3 13:45 faxcover*
-rwxr-xr-x 1 root root 441584 Jun 3 13:45 faxmail*
-rwxr-xr-x 1 root root 96036 Jun 3 13:45 faxrm*
-rwxr-xr-x 1 root root 107000 Jun 3 13:45 faxstat*
-rwxr-xr-x 1 root root 77832 Jun 4 11:46 grep*
-rwxr-xr-x 1 root root 19597 Jun 3 13:45 h2ph*
-rwxr-xr-x 1 root root 46979 Jun 3 13:45 h2xs*
-rwxr-xr-x 1 root root 10420 Jun 3 13:46 id*
-rwxr-xr-x 1 root root 4528 Jun 3 13:46 ldd*
-rwxr-xr-x 1 root root 111386 Jun 4 11:46 less*
-r-xr-xr-x 1 root root 26168 Jun 3 13:45 login*
-rwxr-xr-x 1 root root 49164 Jun 3 13:45 ls*
-rwxr-xr-x 1 root root 11600 Jun 3 13:45 mkdir*
-rwxr-xr-x 1 root root 24780 Jun 3 13:45 more*
-rwxr-xr-x 1 root root 154980 Jun 3 13:45 pal2rgb*
-rwxr-xr-x 1 root root 27920 Jun 3 13:46 passwd*
-rwxr-xr-x 1 root root 4241 Jun 3 13:45 pl2pm*
-rwxr-xr-x 1 root root 2350 Jun 3 13:45 pod2html*
-rwxr-xr-x 1 root root 7875 Jun 3 13:45 pod2latex*
-rwxr-xr-x 1 root root 17587 Jun 3 13:45 pod2man*
-rwxr-xr-x 1 root root 6877 Jun 3 13:45 pod2text*
-rwxr-xr-x 1 root root 3300 Jun 3 13:45 pod2usage*
-rwxr-xr-x 1 root root 3341 Jun 3 13:45 podchecker*
-rwxr-xr-x 1 root root 2483 Jun 3 13:45 podselect*
-r-xr-xr-x 1 root root 82412 Jun 4 11:46 ps*
-rwxr-xr-x 1 root root 36365 Jun 3 13:45 pstruct*
-rwxr-xr-x 1 root root 7120 Jun 3 13:45 pwd*
-rwxr-xr-x 1 root root 179884 Jun 3 13:45 rgb2ycbcr*
-rwxr-xr-x 1 root root 20532 Jun 3 13:45 rm*
-rwxr-xr-x 1 root root 6720 Jun 4 10:15 rmdir*
-rwxr-xr-x 1 root root 14705 Jun 3 13:45 s2p*
-rwxr-xr-x 1 root root 28764 Jun 3 13:46 scp*
-rwxr-xr-x 1 root root 385000 Jun 3 13:45 sendfax*
-rwxr-xr-x 1 root root 67548 Jun 3 13:45 sendpage*
-rwxr-xr-x 1 root root 88632 Jun 3 13:46 sftp*
-rwxr-xr-x 1 root root 387764 Jun 3 13:45 sh*
-rws--x--x 1 root root 744500 Jun 3 13:46 slogin*
-rwxr-xr-x 1 root root 14523 Jun 3 13:46 splain*
-rws--x--x 1 root root 744500 Jun 3 13:46 ssh*
-rwxr-xr-x 1 root root 570960 Jun 3 13:46 ssh-add*
-rwxr-xr-x 1 root root 502952 Jun 3 13:46 ssh-agent*
-rwxr-xr-x 1 root root 575740 Jun 3 13:46 ssh-keygen*
-rwxr-xr-x 1 root root 383480 Jun 3 13:46 ssh-keyscan*
-rwxr-xr-x 1 root root 39 Jun 3 13:46 ssh_europa*
-rwxr-xr-x 1 root root 107252 Jun 4 10:14 strace*
-rwxr-xr-x 1 root root 8323 Jun 4 10:14 strace-graph*
-rwxr-xr-x 1 root root 158088 Jun 3 13:46 thumbnail*
-rwxr-xr-x 1 root root 6312 Jun 3 13:46 tty*
-rwxr-xr-x 1 root root 55904 Jun 4 11:46 useradd*
-rwxr-xr-x 1 root root 585656 Jun 4 11:47 vi*
-rwxr-xr-x 1 root root 6444 Jun 4 11:45 whoami*
./dev:
total 8
drwxr-xr-x 2 root root 4096 Jun 4 12:16 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
crw-r--r-- 1 root root 1, 9 Jun 3 13:43 urandom
./etc:
total 208
drwxr-xr-x 4 root root 4096 Jun 4 12:35 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
-rw------- 1 root root 0 Jun 4 11:46 .pwd.lock
-rw-r--r-- 1 root root 653 Jun 3 13:46 group
-rw-r--r-- 1 root root 242 Jun 4 11:33 host.conf
-rw-r--r-- 1 root root 857 Jun 4 12:04 hosts
-rw-r--r-- 1 root root 1050 Jun 4 11:29 ld.so.cache
-rw-r--r-- 1 root root 304 Jun 4 11:28 ld.so.conf
-rw-r--r-- 1 root root 235 Jun 4 11:27 ld.so.conf~
-rw-r--r-- 1 root root 88039 Jun 3 13:46 moduli
-rw-r--r-- 1 root root 1342 Jun 4 11:34 nsswitch.conf
drwxr-xr-x 2 root root 4096 Jun 4 12:02 pam.d/
-rw-r--r-- 1 root root 28 Jun 4 12:00 pam_smb.conf
-rw-r--r-- 1 root root 2520 Jun 4 11:57 passwd
-rw-r--r-- 1 root root 7228 Jun 3 13:48 profile
-rw-r--r-- 1 root root 1339 Jun 4 11:33 protocols
-rw-r--r-- 1 root root 274 Jun 4 11:44 resolv.conf
drwxr-xr-x 2 root root 4096 Jun 3 13:43 security/
-rw-r----- 1 root root 1178 Jun 4 11:51 shadow
-rw------- 1 root root 80 Jun 4 11:45 shadow-
-rw-r----- 1 root root 1178 Jun 4 11:48 shadow.old
-rw-r--r-- 1 root root 161 Jun 3 13:46 shells
-rw-r--r-- 1 root root 1144 Jun 3 13:46 ssh_config
-rw------- 1 root root 668 Jun 3 13:46 ssh_host_dsa_key
-rw-r--r-- 1 root root 602 Jun 3 13:46 ssh_host_dsa_key.pub
-rw------- 1 root root 527 Jun 3 13:46 ssh_host_key
-rw-r--r-- 1 root root 331 Jun 3 13:46 ssh_host_key.pub
-rw------- 1 root root 883 Jun 3 13:46 ssh_host_rsa_key
-rw-r--r-- 1 root root 222 Jun 3 13:46 ssh_host_rsa_key.pub
-rw-r--r-- 1 root root 2471 Jun 4 12:15 sshd_config
./etc/pam.d:
total 24
drwxr-xr-x 2 root root 4096 Jun 4 12:02 ./
drwxr-xr-x 4 root root 4096 Jun 4 12:35 ../
lrwxrwxrwx 1 root root 4 Jun 4 12:02 other -> sshd
-rw-r--r-- 1 root root 318 Jun 3 13:46 passwd
-rw-r--r-- 1 root root 546 Jun 4 11:36 ssh
-rw-r--r-- 1 root root 479 Jun 4 12:02 sshd
-rw-r--r-- 1 root root 370 Jun 3 13:46 su
./etc/security:
total 32
drwxr-xr-x 2 root root 4096 Jun 3 13:43 ./
drwxr-xr-x 4 root root 4096 Jun 4 12:35 ../
-rw-r--r-- 1 root root 1971 Jun 3 13:46 access.conf
-rw-r--r-- 1 root root 184 Jun 3 13:46 chroot.conf
-rw-r--r-- 1 root root 2145 Jun 3 13:46 group.conf
-rw-r--r-- 1 root root 1356 Jun 3 13:46 limits.conf
-rw-r--r-- 1 root root 2858 Jun 3 13:46 pam_env.conf
-rw-r--r-- 1 root root 2154 Jun 3 13:46 time.conf
./lib:
total 8316
drwxr-xr-x 3 root root 4096 Jun 4 12:13 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
-rw-r--r-- 1 root root 1024 Jun 4 11:51 cracklib_dict.hwm
-rw-r--r-- 1 root root 214324 Jun 4 11:51 cracklib_dict.pwd
-rw-r--r-- 1 root root 11360 Jun 4 11:51 cracklib_dict.pwi
-rwxr-xr-x 1 root root 342427 Jun 3 13:46 ld-linux.so.2*
-rwxr-xr-x 1 root root 4061504 Jun 3 13:46 libc.so.6*
lrwxrwxrwx 1 root root 15 Jun 4 12:11 libcrack.so -> libcrack.so.2.7*
lrwxrwxrwx 1 root root 15 Jun 4 12:11 libcrack.so.2 -> libcrack.so.2.7*
-rwxr-xr-x 1 root root 33291 Jun 4 11:39 libcrack.so.2.7*
-rwxr-xr-x 1 root root 60988 Jun 3 13:46 libcrypt.so.1*
-rwxr-xr-x 1 root root 71846 Jun 3 13:46 libdl.so.2*
-rwxr-xr-x 1 root root 27762 Jun 3 13:46 libhistory.so.4.0*
lrwxrwxrwx 1 root root 17 Jun 4 12:12 libncurses.so.4 -> libncurses.so.4.2*
-rwxr-xr-x 1 root root 503903 Jun 3 13:46 libncurses.so.4.2*
lrwxrwxrwx 1 root root 17 Jun 4 12:12 libncurses.so.5 -> libncurses.so.5.0*
-rwxr-xr-x 1 root root 549429 Jun 3 13:46 libncurses.so.5.0*
-rwxr-xr-x 1 root root 369801 Jun 3 13:46 libnsl.so.1*
-rwxr-xr-x 1 root root 142563 Jun 4 11:49 libnss_compat.so.1*
-rwxr-xr-x 1 root root 215569 Jun 4 11:49 libnss_compat.so.2*
-rwxr-xr-x 1 root root 61648 Jun 4 11:34 libnss_dns.so.1*
-rwxr-xr-x 1 root root 63453 Jun 4 11:34 libnss_dns.so.2*
-rwxr-xr-x 1 root root 63782 Jun 4 11:34 libnss_dns6.so.2*
-rwxr-xr-x 1 root root 205715 Jun 3 13:46 libnss_files.so.1*
-rwxr-xr-x 1 root root 235932 Jun 3 13:49 libnss_files.so.2*
-rwxr-xr-x 1 root root 204383 Jun 4 11:33 libnss_nis.so.1*
-rwxr-xr-x 1 root root 254023 Jun 4 11:33 libnss_nis.so.2*
-rwxr-xr-x 1 root root 256465 Jun 4 11:33 libnss_nisplus.so.2*
lrwxrwxrwx 1 root root 14 Jun 4 12:12 libpam.so.0 -> libpam.so.0.72*
-rwxr-xr-x 1 root root 31449 Jun 3 13:46 libpam.so.0.72*
lrwxrwxrwx 1 root root 19 Jun 4 12:12 libpam_misc.so.0 ->
libpam_misc.so.0.72*
-rwxr-xr-x 1 root root 8125 Jun 3 13:46 libpam_misc.so.0.72*
lrwxrwxrwx 1 root root 15 Jun 4 12:12 libpamc.so.0 -> libpamc.so.0.72*
-rwxr-xr-x 1 root root 10499 Jun 3 13:46 libpamc.so.0.72*
-rwxr-xr-x 1 root root 176427 Jun 3 13:46 libreadline.so.4.0*
-rwxr-xr-x 1 root root 44729 Jun 3 13:46 libutil.so.1*
-rwxr-xr-x 1 root root 70254 Jun 3 13:46 libz.a*
lrwxrwxrwx 1 root root 13 Jun 4 12:13 libz.so -> libz.so.1.1.3*
lrwxrwxrwx 1 root root 13 Jun 4 12:13 libz.so.1 -> libz.so.1.1.3*
-rwxr-xr-x 1 root root 63312 Jun 3 13:46 libz.so.1.1.3*
drwxr-xr-x 2 root root 4096 Jun 4 12:00 security/
./lib/security:
total 668
drwxr-xr-x 2 root root 4096 Jun 4 12:00 ./
drwxr-xr-x 3 root root 4096 Jun 4 12:13 ../
-rwxr-xr-x 1 root root 10067 Jun 3 13:46 pam_access.so*
-rwxr-xr-x 1 root root 8300 Jun 3 13:46 pam_chroot.so*
-rwxr-xr-x 1 root root 14397 Jun 3 13:46 pam_cracklib.so*
-rwxr-xr-x 1 root root 5082 Jun 3 13:46 pam_deny.so*
-rwxr-xr-x 1 root root 13153 Jun 3 13:46 pam_env.so*
-rwxr-xr-x 1 root root 13371 Jun 3 13:46 pam_filter.so*
-rwxr-xr-x 1 root root 7957 Jun 3 13:46 pam_ftp.so*
-rwxr-xr-x 1 root root 12771 Jun 3 13:46 pam_group.so*
-rwxr-xr-x 1 root root 10174 Jun 3 13:46 pam_issue.so*
-rwxr-xr-x 1 root root 9774 Jun 3 13:46 pam_lastlog.so*
-rwxr-xr-x 1 root root 13591 Jun 3 13:46 pam_limits.so*
-rwxr-xr-x 1 root root 11268 Jun 3 13:46 pam_listfile.so*
-rwxr-xr-x 1 root root 11182 Jun 3 13:46 pam_mail.so*
-rwxr-xr-x 1 root root 5923 Jun 3 13:46 pam_nologin.so*
-rwxr-xr-x 1 root root 5460 Jun 3 13:46 pam_permit.so*
-rwxr-xr-x 1 root root 18226 Jun 3 13:46 pam_pwcheck.so*
-rwxr-xr-x 1 root root 12590 Jun 3 13:46 pam_rhosts_auth.so*
-rwxr-xr-x 1 root root 5551 Jun 3 13:46 pam_rootok.so*
-rwxr-xr-x 1 root root 7239 Jun 3 13:46 pam_securetty.so*
-rwxr-xr-x 1 root root 6551 Jun 3 13:46 pam_shells.so*
-rwxr-xr-x 1 root root 55925 Jun 4 12:00 pam_smb_auth.so*
-rwxr-xr-x 1 root root 12678 Jun 3 13:46 pam_stress.so*
-rwxr-xr-x 1 root root 11170 Jun 3 13:46 pam_tally.so*
-rwxr-xr-x 1 root root 11124 Jun 3 13:46 pam_time.so*
-rwxr-xr-x 1 root root 45703 Jun 3 13:46 pam_unix.so*
-rwxr-xr-x 1 root root 45703 Jun 3 13:46 pam_unix2.so*
-rwxr-xr-x 1 root root 45386 Jun 3 13:46 pam_unix_acct.so*
-rwxr-xr-x 1 root root 45386 Jun 3 13:46 pam_unix_auth.so*
-rwxr-xr-x 1 root root 45386 Jun 3 13:46 pam_unix_passwd.so*
-rwxr-xr-x 1 root root 45386 Jun 3 13:46 pam_unix_session.so*
-rwxr-xr-x 1 root root 9726 Jun 3 13:46 pam_userdb.so*
-rwxr-xr-x 1 root root 6424 Jun 3 13:46 pam_warn.so*
-rwxr-xr-x 1 root root 7460 Jun 3 13:46 pam_wheel.so*
./sbin:
total 3132
drwxr-xr-x 2 root root 4096 Jun 4 12:35 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
-rwxr-xr-x 1 root root 178256 Jun 3 13:46 choptest*
-rwxr-xr-x 1 root root 184032 Jun 3 13:46 cqtest*
-rwxr-xr-x 1 root root 81096 Jun 3 13:46 dialtest*
-rwxr-xr-x 1 root root 1142128 Jun 4 11:28 ldconfig*
-rwxr-xr-x 1 root root 2868 Jun 3 13:46 lockname*
-rwxr-xr-x 1 root root 3340 Jun 3 13:46 ondelay*
-rwxr-xr-x 1 root root 376796 Jun 3 13:46 pagesend*
-rwxr-xr-x 1 root root 13950 Jun 3 13:46 probemodem*
-rwxr-xr-x 1 root root 9234 Jun 3 13:46 recvstats*
-rwxr-xr-x 1 root root 64480 Jun 3 13:46 sftp-server*
-rwxr-xr-x 1 root root 744412 Jun 3 13:46 sshd*
-rwxr-xr-x 1 root root 30750 Jun 4 11:46 su*
-rwxr-xr-x 1 root root 194632 Jun 3 13:46 tagtest*
-rwxr-xr-x 1 root root 69892 Jun 3 13:46 tsitest*
-rwxr-xr-x 1 root root 43792 Jun 3 13:46 typetest*
./tmp:
total 8
drwxr-xr-x 2 root root 4096 Jun 4 12:32 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
./usr:
total 8
drwxr-xr-x 2 root root 4096 Jun 4 12:16 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
lrwxrwxrwx 1 root root 7 Jun 4 12:14 bin -> ../bin//
lrwxrwxrwx 1 root root 7 Jun 4 11:33 lib -> ../lib//
lrwxrwxrwx 1 root root 8 Jun 4 12:13 sbin -> ../sbin//
</example>



<appendix id="chroot-apache-env">Ambiente <Prgn>Chroot</Prgn>
                                 per <PRGN>Apache</PRGN>


<sect>Introduzione

<p>
L'utilità <prgn>chroot</prgn> è usata spesso per imprigionare un
demone in un settore
sottoposto a limitazioni, per isolare reciprocamente dei servizi, in modo
che problemi di sicurezza in un pacchetto software non mettano in pericolo
l'intero server. Usando lo script <prgn>makejail</prgn>, impostare ed
aggiornare la zona sottoposta a chroot è più facile.


<sect1>Licenza

<p>
Questo documento è sottoposto a diritto d'autore di Alexandre Ratti,
è stato rilasciato sotto la GNU-FDL 1.2 (GNU Free Documentation
Licence - Licenza sulla libera documentazione GNU) ed è incluso
in questo manuale per espresso consenso.

</sect1>
</sect>

<sect>Installare il server

<p>
Questa procedura è stata provata su Debian GNU/Linux&nbsp;3.0 (Woody) con
<prgn>makejail</prgn> 0.0.4-1 (in Debian/testing).

<list>

<item><p>Autenticatevi come <prgn>root</prgn> e creare una nuova
         cartella-gabbia:

<example>
$ mkdir -p /var/chroot/apache
</example>

 </item>

<item>
Create un nuovo utente ed un nuovo gruppo. Il server Apache sottoposto a
"chroot" sarà attivo in qualità di nuovo utente/gruppo, usato, nel sistema,
solo a questo fine. In questo esempio, entrambi sono chiamati 
<prgn>chrapach</prgn>.


 <example> 
 $ adduser --home /var/chroot/apache --shell /bin/false \
 --no-create-home --system --group chrapach
 </example>

<p>FIXME: Occorre un nuovo utente? (Apache è già attivo come utente Apache).

  </item>

<item>
Installate Apache come d'uso, su Debian: <tt>apt-get install apache</tt>.
<item>
Impostare Apache (definire i propri sottodomini, ecc.) e, nel file di
configurazione <file>/etc/apache/httpd.conf</file>, impostare 
<em>Group</em> e <em>User</em> come <tt>chrapach</tt>. 
Riavviate Apache ed assicuratevi che funzioni correttamente.
A questo punto, fermate il demone Apache.
<item>
Installate <prgn>makejail</prgn> (disponibile, per ora, in
Debian/testing) e anche <prgn>wget</prgn> e <prgn>lynx</prgn>, 
giacché sono usati da <prgn>makejail</prgn> per provare il server
sottoposto a "chroot": <tt>apt-get install makejail wget lynx</tt>.
<item>Copiate il file della configurazione esemplificativa per Apache nella
cartella <file>/etc/makejail</file>:

 <example> 
 # cp/usr/share/doc/makejail/examples/apache.py /etc/makejail/ 
 </example>

</item>
 
<item>Modificate <file>/etc/makejail/apache.py</file>, cambiando le opzioni
di <em>chroot</em>, <em>users</em> e <em>groups</em>. Per eseguire 
questa versione di <prgn>makejail</prgn>, potete aggiungere anche 
l'opzione <prgn>packages</prgn>. Vedete in <url
id="http://www.floc.net/makejail/current/doc/" name="makejail
documentation">. Ecco un esempio:

<example>
chroot=&quot;/var/chroot/apache&quot;
testCommandsInsideJail=[&quot;/usr/sbin/apachectl start&quot;]
processNames=[&quot;apache&quot;]
testCommandsOutsideJail=[&quot;wget -r --spider http://localhost/&quot;,
                         &quot;lynx --source https://localhost/&quot;]
preserve=[&quot;/var/www&quot;,
          &quot;/var/log/apache&quot;,
          &quot;/dev/log&quot;]
users=[&quot;chrapach&quot;]
groups=[&quot;chrapach&quot;]
packages=[&quot;apache&quot;, &quot;apache-common&quot;]
userFiles=[&quot;/etc/password&quot;,
           &quot;/etc/shadow&quot;]
groupFiles=[&quot;/etc/group&quot;,
            &quot;/etc/gshadow&quot;]
forceCopy=[&quot;/etc/hosts&quot;,
           &quot;/etc/mime.types&quot;]
</example>

<p>
<em>FIXME:</em> pare che alcune opzioni non funzionino correttamente.
Per esempio, <file>/etc/shadow</file> e <file>/etc/gshadow</file>
non sono copiate, mentre <file>/etc/password</file> e
<file>/etc/group</file> sono state copiate completamente, invece 
di essere filtrate.

 </item>
 
<item>Create il sottoalbero sottoposto a chroot:
<tt>makejail /etc/makejail/apache.py</tt>
<item>Qualora <file>/etc/password</file> ed <file>/etc/group</file> 
siano stati copiati completamente, per sostituirli con copie filtrate,
digitate:

      <example>
      $ grep chrapach /etc/passwd &gt; /var/chroot/apache/etc/passwd
      $ grep chrapach /etc/group &gt; /var/chroot/apache/etc/group
      </example>

<p>
Copiate le pagine del sito web e i file di log nella "gabbia"; quei file
non vengono copiati completamente (vedete l'opzione <em>preserve</em>
nel file di configurazione di <prgn>makejail</prgn>).

      <example>
      # cp -Rp /var/www /var/chroot/apache/var
      # cp -Rp /var/log/apache/*.log /var/chroot/apache/var/log/apache
      </example>
  </item>

<item>
Modificate lo script di avvio per il demone incaricato della registrazione
dei log di sistema, in modo che ascolti anche 
<file>/var/chroot/apache/dev/log</file>.
In <file>/etc/init.d/sysklogd</file>, sostituite <tt>SYSLOGD=&quot;&quot;</tt>
con <tt>SYSLOGD=&quot; -a /var/chroot/apache/dev/log&quot;</tt> e 
riavviate il demone con il comando <tt>/etc/init.d/sysklogd restart</tt>.

<item>
Modificate lo script di avvio di Apache (<file>/etc/init.d/apache</file>), 
per il cui corretto funzionamento potrebbero occorrere alcuni 
cambiamenti, come:

    <list>
      <item>Impostare una nuova variabile <em>CHRDIR</em> all'inizio del file;
      <item>Modificare le sezioni <em>start</em>, 
            <em>stop</em>, <em>reload</em>, etc.
      <item>Aggiungere una linea per montare e smontare il 
            filesystem <file>/proc</file> all'interno della "gabbia".

    </list>
<example>
#! /bin/bash
#
# apache	Start the apache HTTP server.
#

CHRDIR=/var/chroot/apache

NAME=apache
PATH=/bin:/usr/bin:/sbin:/usr/sbin
DAEMON=/usr/sbin/apache
SUEXEC=/usr/lib/apache/suexec
PIDFILE=/var/run/$NAME.pid
CONF=/etc/apache/httpd.conf
APACHECTL=/usr/sbin/apachectl 

trap "" 1
export LANG=C
export PATH

test -f $DAEMON || exit 0
test -f $APACHECTL || exit 0

# ensure we don't leak environment vars into apachectl
APACHECTL="env -i LANG=${LANG} PATH=${PATH} $APACHECTL"

if egrep -q -i "^[[:space:]]*ServerType[[:space:]]+inet" $CONF
then
    exit 0
fi

case "$1" in
  start)
    echo -n "Starting web server: $NAME"
    mount -t proc proc /var/chroot/apache/proc
    start-stop-daemon --start --pidfile $PIDFILE --exec $DAEMON \
	--chroot $CHRDIR
    ;;

  stop)
    echo -n "Stopping web server: $NAME"
    start-stop-daemon --stop --pidfile "$CHRDIR/$PIDFILE" --oknodo
    umount /var/chroot/apache/proc
    ;;

  reload)
    echo -n "Reloading $NAME configuration"
    start-stop-daemon --stop --pidfile "$CHRDIR/$PIDFILE" \
	--signal USR1 --startas $DAEMON --chroot $CHRDIR
    ;;

  reload-modules)
    echo -n "Reloading $NAME modules"
    start-stop-daemon --stop --pidfile "$CHRDIR/$PIDFILE" --oknodo \
	--retry 30
    start-stop-daemon --start --pidfile $PIDFILE \
	--exec $DAEMON --chroot $CHRDIR
    ;;

  restart)
    $0 reload-modules
    exit $?
    ;;

  force-reload)
    $0 reload-modules
    exit $?
    ;;

  *)
    echo "Usage: /etc/init.d/$NAME {start|stop|reload|reload-modules|force-reload|restart}"
    exit 1
    ;;
esac

if [ $? == 0 ]; then
	echo .
	exit 0
else
	echo failed
	exit 1
fi
</example>

<p>
<em>FIXME</em>: Il primo processo di Apache
dovrebbe essere lanciato da un utente
diverso da root( ossia add --chuid chrapach:chrapach)? 
Cons: chrapach non avrà bisogno di accesso in scrittura ai log.

  </item>

<item>
In <file>/etc/logrotate.d/apache</file> sostituite
<tt>/var/log/apache/*.log</tt> con 
<tt>/var/chroot/apache/var/log/apache/*.log</tt>
<item>
Lanciate Apache (<prgn>/etc/init.d/apache start</prgn>) e
controllare cosa viene riportato nel jail log 
(<file>/var/chroot/apache/var/log/apache/error.log</file>). Se
il vostro setup fosse più complesso, (ossia usate anche PHP e MySQL),
probabilmente mancheranno dei file. Se alcuni file non vengono copiati
automaticamente da <prgn>makejail</prgn>, potete elencarli nell'opzione 
<em>forceCopy</em> (per copiarli direttamente) o <em>packages</em> 
(per copiare interi pacchetti con le loro dipendenze) nel file di 
configurazione <file>/etc/makejail/apache.py</file>.
<item>
Scrivete <tt>ps aux | grep apache</tt> per assicurarvi che Apache stia girando.
Dovreste vedere qualcosa tipo:

      <example>
      root 180 0.0 1.1 2936 1436 ? S 04:03 0:00 /usr/sbin/apache
      chrapach 189 0.0 1.1 2960 1456 ? S 04:03 0:00 /usr/sbin/apache
      chrapach 190 0.0 1.1 2960 1456 ? S 04:03 0:00 /usr/sbin/apache
      chrapach 191 0.0 1.1 2960 1456 ? S 04:03 0:00 /usr/sbin/apache
      chrapach 192 0.0 1.1 2960 1456 ? S 04:03 0:00 /usr/sbin/apache
      chrapach 193 0.0 1.1 2960 1456 ? S 04:03 0:00 /usr/sbin/apache
      </example>
  </item>

<item>
Assicuratevi che i processi di Apache stiano girando chrooted guardando nel
filesystem <file>/proc</file>: 
<tt>ls -la /proc/<em>process_number</em>/root/.</tt> dove 
<em>process</em> è uno dei PID elencati sopra (seconda colonna; 
189 per esempio). Dovrebbero esserci elencate le direcory di un tree 
ristretto: 

   <example>
    drwxr-sr-x 10 root staff 240 Dec 2 16:06 .
    drwxrwsr-x 4 root staff 72 Dec 2 08:07 ..
    drwxr-xr-x 2 root root 144 Dec 2 16:05 bin
    drwxr-xr-x 2 root root 120 Dec 3 04:03 dev
    drwxr-xr-x 5 root root 408 Dec 3 04:03 etc
    drwxr-xr-x 2 root root 800 Dec 2 16:06 lib
    dr-xr-xr-x 43 root root 0 Dec 3 05:03 proc
    drwxr-xr-x 2 root root 48 Dec 2 16:06 sbin
    drwxr-xr-x 6 root root 144 Dec 2 16:04 usr
    drwxr-xr-x 7 root root 168 Dec 2 16:06 var
    </example>
<p>
Per automatizzare questo test, potete scrivere: 
<tt>ls -la /proc/`cat /var/chroot/apache/var/run/apache.pid`/root/.</tt>.
<p>
<em>FIXME</em>: Aggiungere altri test da far girare per assicurarsi che 
la gabbia sia chiusa?

	</item>
</list>

<p>
Il motivo per cui mi piace è perché impostare la gabbia non è poi così
difficile ed il server può essere aggiornato con due sole righe:

<example> 
apt-get update &amp;&amp; apt-get install apache
makejail /etc/makejail/apache.py
</example>

</sect>




<sect>Vedete anche

<p>
Se cercate maggiori informazioni potete provare anche queste fonti:

<list>

<item>
<url id="http://www.floc.net/makejail/" name="makejail homepage">, 
questo programma è stato scritto da Alan Tesio)

<!-- Not appropiate for this section 


  <item><a href="http://www.easter-eggs.org/article242.html">Bind9 chroot&eacute; 
    con <prgn>makejail</prgn></a>, Pascal Brugier, easter-eggs.org, 21/03/2002</item>
-->

<item>
<url id="http://www.networkdweebs.com/chroot.html"
     name="Chrooting daemons and system processes"> di Jonathan, Network
Dweebs, 21/10/2002
<item>
<url id="http://www.digitaltoad.net/docs/guide/secure_rh/chap29sec254.html"
     name="Apache in una gabbia chroot"> in 
<em>Securing and Optimizing Linux (Rendere sicuro ed ottimizzare Linux</em> 
scritto da Gerhard Mourani, 2000

</list>
</sect>
</appendix>




<appendix id="traduzione">Traduzione
<p>

Il coordinamento della traduzione è stato effettuato da
Ferdinando Ferranti <email/zappagalattica@inwind.it/, hanno
tradotto e revisionato il documento: 
CarloS <email/enne.enne@tiscalinet.it/,
Stefano Canepa <email/sc@linux.it/,
Morpheus <email/matrixhasu@libero.it/,
Spooky,
Leonardo Canducci <email/lcanducci@libero.it/,
Alessandro Melillo <email/alemelo@fastmail.fm/, 
Davide Alessio <email/dalessio@softhome.net/,
Luigi Bonanno <email/hsaybo@tin.it/,
Gavrila <email/gavrilus@tiscalinet.it/,
Giacinto Lorusso <email/giacintolorusso@yahoo.it/,
Giuseppe Palmieri <email/gpalm@iol.it/,
Riccardo Corso <email/rixx@inwind.it/,
Stefano Mioli <email/stevie@e4a.it/,
Pengz  <email/pengol[at]inwind.it/,
Fabio Rapposelli <email/frapposelli@hi-net.it/.

</appendix>

</book>
