<!doctype linuxdoc system>

<article>

<!-- Title information -->
<title>Securing Debian HOWTO
<author>Alexander Reelsen &lt;ar@rhwd.net&gt;
<date>v1.4  Sun, 18 Feb 2001 13:44:34 +0100
<abstract>
Este documento descreve o processo de fortificar a instalação Debian padrão 
</abstract>

<!-- Table of contents -->
<toc>

<!-- Begin the document -->

<sect>Introdução
<p>
Uma das maiores dificuldades sobre escrever documentos sobre segurança é que cada caso é único. Duas coisas a prestar atenção são o ambiente envolvido e a
necessidade de segurança do site, host ou rede. Por exemplo, a segurança necessária para um usuário em casa é complketamente diferente da segurança necessária
em uma rede bancária. Enquanto o primeiro tem que enfrentar o script-kiddie, uma rede bancária deve se preocupar com ataques diretos. Adicionalmente o banco
deve proteger os dados de seus usuários com precisão aritmética. Resumindo, cada usuário deve considerar o ponto de equilíbrio entre usabilidade e
segurança/paranóia.
<p>
Preste atenção que este HOWTO somente cobre informações relativas a software. O melhor software do mundo não pode protegê-lo se alguem acessar a máquina
fisicamente. Você pode colocá-la embaixo de sua mesa ou em um bunker com o exército em frente a ela. Ao mesmo tempo, em matéria de software a máquina
embaixo da mesa pode ser mais segura do que a mãquina fisicamente protegida caso tenha sido bem configurada. Obviamente, você deve considerar ambas
situações, física e lógica. Em adição este documento lhe fornece uma visão geral do que fazer para aumentar a segurança de sua instalação Debian GNU/Linux.
Muitas partes deste HOWTO podem ser utilizadas em outras distribuições. 
<p>
Se você tiver comentários, acréscimos ou sugestões, mande-as por email para <url
name="o autor" url="mailto:ar@rhwd.net"> e elas serão incorporadas neste HOWTO. 


<sect1>Disclaimer &amp; Licença 
<p>
Este documento é distribuído na esperança de ser útil, mas SEM GARANTIAS.
<p>
Copyright 2000 por Alexander Reelsen, distribuído sob os termos da Licença de documentação livre da GNU.


<sect1>Faça download do HOWTO
<p>
Você pode baixar ou ver a versão mais recente do Securing Debian HOWTO nos seguintes formatos: 
<itemize>
<item><url name="HTML" url="http://www.softwarelivre.rs.gov.br/debian/Securing-Debian-HOWTO-pt.html">
<item><url name="HTML, compactado (.tar.gz)" url="http://www.softwarelivre.rs.gov.br/debian/Securing-Debian-HOWTO-pt.tar.gz">
<item><url name="SGML" url="http://www.softwarelivre.rs.gov.br/debian/Securing-Debian-HOWTO-pt.sgml">
</itemize>
ou baixe a versão original em inglês nos seguintes formatos.
<itemize>
<item><url name="Somente texto" url="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.txt">
<item><url name="HTML" url="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.html">
<item><url name="HTML, compactado (.tar.gz)" url="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.tar.gz">
<item><url name="SGML" url="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.sgml">
</itemize>

<sect1>Notas Organizacionais/Feedback
<p>
Agora a parte oficial. Até o momento, eu escrevi todos os parágrafos deste HOWTO, mas em minha opnião não deve ser desta forma. Eu cresci com o software
livre, é parte de meu dia-a-dia, e eu acredito que seja parte do seu também. Encorajo todos a me enviarem sua opinião, dicas, adições e qualquer sugestão que
possam ter.

Se você acha que pode manter uma certa seção ou parágrafo melhor do que eu, escreva-me e você será bemvindo a fazer isso. Especialmente se você achar uma
seção marcada como: FIX-ME, o que significa que eu não tive tempo ainda ou o conhecimento necessário sobre o tópico, mande-me um email
imediatamente. 

O tópico deste HOWTO é claro, o que aumenta a importância de mantê-lo atualizado, e você pode ajudar a manter a qualidade deste HOWTO, então faça! 

<sect1>Conhecimento necessário
<p>
A instalação da Debian GNU/Linux não é muito difícil e você deve saber fazê-la. Se você tiver algum conhecimento de Linux ou outros *nix e for um pouyco
familiar com segurança básica, será mais fácil entender este HOWTO, pois é impossível explicar cada pequeno detalhe envolvido (ou istoi não seria um HOWTO e
sim um livro).


<sect1>A fazer
<p>
<itemize>
<item>suidmanager/dpkg-statoverrides
<item>lpr e lprng
<item>Desativando detalhes de IP do gnome
<item>LKM, modulos do kernel do linux, os bons e os maus
<item>Sistemas de arquivo encriptados
</itemize>


<sect1>Changelog
<p>
<sect2>1.4
    <p>
    <itemize>
    <item>Small setuid check paragraph
    <item>Various minor cleanups
	<item>Descoberto como usar o <tt>sgml2txt -f</tt>  para a versão em txt</item>
    </itemize>
<sect2>1.3
    <p>
    <itemize>
    <item>Acrescentada uma atualização de securança após o parágrafo de instalação
    <item>Acrescentado um parágrafo sobre o proftpd 
    <item>Desta vez realmente escrevi  algo sobre o XDM, desculpas pela última vez. 
    </itemize>
<sect2>1.2
    <p>
    <itemize>
    <item>Muitas correções de gramática por James Treacy, novo parágrafo sobre o XDM 
    </itemize>
<sect2>1.1
    <p>
    <itemize>
    <item>Correções de typo, acréscimos diversos
    </itemize>
<sect2>1.0
    <p>
    <itemize>
    <item>Primeira versão 
    </itemize>


<sect1>Créditos
<p>
<itemize>
<item>Robert van der Meulen com o parágrafo de quota e muitas boas idéias 
<item>Ethan Benson corrigiu o parágrafo de PAM e deu muitas boas idéias
<item><url name="Alex Risicato Fagundes" url="mailto:arf@kapa.procergs.com.br"> pela tradução para o português
<item>Todos os amigos que me encorajaram a escrever este HOWTO 
<item>O projeto Debian por inteiro 
</itemize>



<sect>Antes e durante a instalação

<sect1>Escolha uma senha de BIOS
<p>
Antes de instalar qualquer sistema operacional em seu computador, defina uma senha de BIOS e mude a sequencia de inicialização para desabilitar a iniciualização
por disquete. De outra maneira um cracker somente precisa de um disquete de boot para acessar seu sistema inteiro. 
<p>
Desabilitar a inicialização sem senha é até melhor. Isso pode ser bem efetivo se você fala de servidor, pois ele não é reinicializado seguidamente.O lado ruim desta
última tática é que ela requer intervenção humana que pode causar problemas se a máquina não for facilmente acessável. 


<sect1>Escolha um esquema de partições inteligente 
<p>
Um esquema de partições inteligente depende de como a máquina é utilizada. Uma boa regra é ser bem generoso com as partições e prestar atenção aos seguintes
fatores: 

<itemize>
<item>Qualquer partição que um usuário tiver permissão de escrita, deve ser uma partição separada, ex. /home ou /tmp. Isso reduz o risco de um DoS de usuário,
     lotando seu "/' e deixando o sustema inutilizável para outros usuários (sempre existirá espaço reservado ao root, que um usuário normal não pode encher,
     você pode trocar isso com <tt>tune2fs</tt>.

<item>Qualquer partição que possa flutuar, ex /var (especialmente /var/log). No contexto do Debian, você deve criar a /var um pouco maior do qure o normal,
     porque os pacotes baixados (o cache do apt) são armazenados em /var/apt/cache/archives. 

<item>Qualquer partição onde você queira instalar software que não acompanha a distribuição. De acordo com o Padrão de Hierarquia de Arquivos, são os
     diretórios /opt e /usr/local. Se eles estiverem em partições separadas, não vão ser apagados se seu sistema for reinstalado. 
</itemize>


<sect1>Defina uma senha para o usuário root 
<p>
Definir uma boa senha ao usuário root é o mais básico pré-requisito para ter um sistema seguro.


<sect1>Ative senhas shadow e MD5
<p>
Ao final da instalação, você será questionado  se as shadow passwords devem ser habilitadas. Responda sim a esta questão, assim as senhas serão gravadas no
arquivo /etc/shadow. Somente o usuário root e o grupo shadow tem acesso de leitura ao arquivo, então nenhum usuário será capaz de copiar o arquivo e rodar
algum programa de crack de senha nele. Você pode alternar entre senhas shadow e senhas normais a qualquer momento usando o programa shadowconfig .
Após, você é questionado sobre usar ou não senhas criptografadas com MD5. Esta é geralmente uma boa idéia desde que permite senhas mais longas e melhor
encriptação. 


<sect1>Execute o menor número de serviços necessário 
<p>
Você não deve instalar serviços desnecessários em sua máquina. Cada serviço instalado introduz novos, talvez nem tão óbvios mas existentes, furos de segurança
em sua maquina. Se você ainda quer ter alguns serviços mas raramente utiliza os mesmos, use os comandos de atualização (update-commands), como por exemplo:
'update-inetd' para remove-los do processo de inicialização do sistema. Esta seção necessita uma lista de serviços, o que cada um faz e o nível de risco envolvido
com cada um, pois os novatos não tem pistas, o que é considerado um risco de segurança em potencial. 


<sect1>Leia as listas de segurança Debian
<p>
Nunca é demais dar uma olhada na lista debian-security-announce mailinglist, onde avisos e correções para pacotes lançados são divulgados pelo time de
segurança da Debian ou em debian-security@lists.debian.org, onde você pode participar das discussões sobre assuntos ligados a segurança em Debian. 

Para receber alertas importantes de segurança, envie um email para
<url name="debian-security-announce-request@lists.debian.org" url="mailto:debian-security-announce-request@lists.debian.org"> com a palavra "subscribe" na linha de
subject. Você também pode inscrever-se para esta lista moderada através da página
<url name="http://www.debian.org/MailingLists/subscribe" url="http://www.debian.org/MailingLists/subscribe">

Esta lista tem um volume muito baixo e ao inscrever-se nela você será imediatamente alertado de atualizações de segurança para a distribuição Debian. Isto permite
que você rapidamente baixe novos pacotes com correções de segurança, o que é muito importante para manter um sistema seguro (Veja a seção 5.1 para detalhes
sobre como fazer isto).


<sect>Após a instalação

<sect1>Defina uma senha para o LILO ou para o GRUB
<p>
Qualquer um pode facilmente ganhar uma shell de root e trocar a senha simplesmente digitando: "&lt;nome-de-sua-imagem-de-boot&gt; init=/bin/sh" no prompt de
inicialização. Após trocar as senhas e reinicializar o sistema, a pessoa tem acesso de root ilimitado e pode fazer tudo que quiser no sistema. Após este procedimento
você não terá acesso de root ao sistema se não conhecer sua senha de root. 
<p>
Para ter certeza que isso não acontecerá, você deve definir uma senha para o gerenciador de inicialização. Você pode escolher entre uma senha global ou uma
senha para alguma imagem específica. 
<p>
Para o LILO você deve editar o arquivo de configuração /etc/lilo.conf e acrescentar uma linha "password" e uma "restricted" como no exemplo a seguir

<tscreen><verb>
image=/boot/2.2.14-vmlinuz
   label=Linux
   read-only
   password=hackme
   restricted
</verb></tscreen>

<p>
Quando terminado, execute o lilo novamente. Omitindo a linha "restricted", fará o lilo sempre pedir uma senha, a respeito do LILO ter passado parâmetros.Quando
adicionar uma senha, tenha certeza que somente o root pode ler o arquivo de configuração do lilo, usando o comando: chmod 600 /etc/lilo.conf. 
<p>
Se você usa o GRUB ao invés do LILO, edite o arquivo /boot/grub/menu.lst e adicione as linhas a seguir no início. Isto tanto define uma senha de inicialização como
inicia a opção padrão após 3 segundos de espera. 

<tscreen><verb>
timeout 3
password hackme
</verb></tscreen>


<sect1>Desabilite a inicialização por disquete
<p>
O MBR padrão no Debian antes da versão 2.2 não age como um MBR usual e deixa um método aberto para facilmente furar o sistema. 
<itemize>
<item>Pressione shift na inicialização e o prompt do MBR aparecerá 
<item>Pressione F e seu sistema iniciará a partir do disquete que pode ser usado para ganhar acesso de root no sistema. 
</itemize>

Esta opção pode ser mudada com o seguinte comando: 

<tt>lilo -b /dev/hda</tt>

Agora o LILO é colocado dentro do MBR. Isso pode ser feito também colocando a linha "boot=/dev/hda" no arquivo lilo.conf. Há outra maneira de solucionar isso
que desabilita o MBR completamente.

<tt>install-mbr -i n /dev/hda</tt>

Por outro lado, esta "backdoor", que muita gente não conhece, pode salvar sua pele caso você tenha algum problema grave com sua instalação por qualquer
motivo. 

INFO: Os discos de inicialização do Debian 2.2 NÂO instalam o mbr, apenas o LILO 


<sect1>Montando partições da maneira correta
<p>
Quando você monta uma partição ext2 você tem várias opções adicionais que você pode aplicar a chamada de montagem ou ao arquivo /etc/fstab. Por exemplo,
esta é minha entrada no fstab para a partição /tmp: 
<tscreen><verb>/dev/hda7    /tmp    ext2    defaults,nosuid,noexec,nodev    0    2</verb></tscreen>
<p>
Você vê a diferença na seção de opções. A opção nosuid ignora o setuid e o setgid bits completamente, enquanto noexec proibe a execução de qualquer
programa naquele ponto de montagem e o no0dev ignora os devices. Isto soa ótimo mas 
<itemize>
<item>somente se aplica aos sistemas de arquivos ext2 
<item>pode ser facilmente contornado
</itemize>
A opção <tt>noexec</tt> previne binários de serem executados diretamente, mas é facilmente burlada: 

<tscreen><verb>
alex@joker:/tmp# mount | grep tmp
/dev/hda7 on /tmp type ext2 (rw,noexec,nosuid,nodev)
alex@joker:/tmp# ./date
bash: ./date: Permission denied
alex@joker:/tmp# /lib/ld-linux.so.2 ./date
Sun Dec  3 17:49:23 CET 2000
</verb></tscreen>
<p>
De qualquer maneira, muitos script kiddies tem exploits que tentam criar e executar arquivos no /tmp. Se eles não tiverem uma pista, eles vão cair nesta opção. Em
outras palavras, o usuário inocente não executará um binário trojan no /tmp, quando ele sem querer adicionar o /tmp ao seu PATH.


<sect1>Execute uma atualização de segurança
<p>

Tão cedo quanto um furo de segurança é descoberto, os mantenedores Debian e os autores do software que contém o bug geralmente atualizam o mesmo em
questão de dias, ou mesmo horas. Após o bug ser consertado, um novo pacote é disponibilizado em <url name="http://security.debian.org"
url="http://security.debian.org">. Adicione a seguinte linha em seu sources.list e você terá atualizações de segurança automaticos, a cada vez que você atualize seu sistema. 
<p>
<tt>deb http://security.debian.org/debian-security stable/updates main contrib non-free</tt>

A maioria das pessoas que não vivem em um país que proibe a importação ou utilização de criptografia forte deve adicionar esta linha também: 

<tt>deb http://security.debian.org/debian-non-US stable/non-US main contrib non-free</tt>

Se você quiser, você pode adicionar as linhas deb-src ao apt também.Veja a página de manual do apt para maiores detalhes. Tudo que você precisa fazer agora é: <tt>apt-get update
; apt-get upgrade</tt>.


<sect1>PAM - Módulos de Autenticação Plugáveis
<p>
O PAM permite ao administrador de sistemas escolher como as aplicações autenticam os usuários. Note que o PAM não pdoe fazer nada a menos que a aplicação
seja compilada com suporte a  PAM. A maioria das aplicações que são empacotadas com o Debain 2.2 tem este suporte incluído. Debian não tinha suporte a
PAM até a versão 2.2. Para cada applicação existe um arquivo de configuração em /etc/pam.d/. 

PAM oferece a possibilidade de ir através de vários métodos de autenticação de uma só vez, sem o conhecimento do usuário. Você pode autenticar em uma Base
de dados Berkeley e no passwd e o usuário somente fará login caso as duas autenticações estejam corretas.Você pode restringir muito com PAM, assim como
você pode deixar as portas do seu sistema muito abertas. Então, seja cuidadoso. Uma linha de configuração típica tem um campo de controle como terceiro
elemento. Geralmente isto deve ser definido como "requisite", o que retorna uma falha de login caso algum módulo falhe. 


A primeira coisa a fazer, é acrescentar suporte MD5 as aplicações PAM, desde que isso ajuda a proteger contra ataques de dicionário. As duas linhas a seguir
devem ser adicionadas a todos os arquivos em /etc/pam.d/ que garantem acesso a maquina, como <tt>login</tt> or <tt>ssh</tt>.

<tscreen><verb>
password   required     pam_cracklib.so retry=3 minlen=12 difok=3
password   required     pam_unix.so use_authtok nullok md5
</verb></tscreen>

Então, o que isso faz? A primeira linha carrega um módulo PAM de biblioteca de cracks, o que provê senhas verificadas fortemente, solicita uma nova senha com
no mínimo 12 caracteres, uma diferença de no mínimo 3 caracteres da senha antiga e permite 3 tentativas. A segunda linha introduz um módulo de autenticação
padrão com senhas md5 e permite uma senha de tamanho zero. A diretiva use_authtok necessária para lidar com a senha do módulo anterior. 

Para ter certeza que o usuário root pode logar no sistema apenas em terminais locais, a seguinte linha deve ser habilitada em  /etc/pam.d/login: 

<tt>auth     requisite  pam_securetty.so</tt>

Você deve então adicionar no arquivo /etc/security/access.conf os terminais de onde o usuário root pode efetuar login no sistema Por último, mas não menos
importante a seguinte linha deve ser habilitada se você quiser impor limites aos usuários. 

<tt>session  required   pam_limits.so</tt>

Isto restringe os recursos de sistema que os usuários são autorizados. Por exemplo você pode restringir o número de sessões simultâneas a que os usuários tem
direito. 

Agora edite o arquivo /etc/pam.d/passwd e mude a primeira linha. Você deve adicionar a opção "md5" para usar senhas md5, mude o tamanho mínimo de senhas de
4 para 6 ou mais e defina um tamanho máximo se desejar. A linha resultante deve parecer com algo assim: 

<tt>password   required   pam_unix.so nullok obscure min=6 max=11 md5</tt>

Se nós quisermos proteger o su, assim somente algumas pessoas poderão se tornar root no seu sistema. Nós temos que adicionar um novo grupo chamado "wheel"
ao seu sistema (esta é a maneira mais limpa, já que nenhum arquivo tem permissões de grupo ainda). Acrescente o root e os usuários que podem fazer "su" para
root a este grupo. Então adicione a seguinte linha ao arquivo /etc/pam.d/su: 

<tt>auth        requisite   pam_wheel.so group=wheel debug</tt>

Isto garante que somente os usuários do grupo wheel podem usar o su para tornarem-se root. De fato, eles receberão uma mensagem de acesso negado quando tentarem. 

Se você quiser que somente alguns usuários se autentiquem com um serviço PAM, isto é relativamente simples para fazer usando arquivos, onde os usuários que
são habilitados a logar no sistema (ou não) são guardados. Imagine que você só quer permitir ao usuário 'ref' para logar por ssh. Então coloque-o em
/etc/sshusers-allowed e escreva o seguinte no arquivo /etc/pam.d/ssh 

<tt>auth        required    pam_listfile.so item=user sense=allow file=/etc/sshusers-allowed onerr=fail</tt>

Por último, crie o arquivo /etc/pam.d/other e adicione as seguintes linhas: 

<tscreen><verb>
auth     required       pam_securetty.so
auth     required       pam_unix_auth.so
auth     required       pam_warn.so
auth     required       pam_deny.so
account  required       pam_unix_acct.so
account  required       pam_warn.so
account  required       pam_deny.so
password required       pam_unix_passwd.so
password required       pam_warn.so
password required       pam_deny.so
session  required       pam_unix_session.so
session  required       pam_warn.so
session  required       pam_deny.so
</verb></tscreen>

Estas linhas vão prover uma boa configuração padrão para todas as aplicações que suportem PAM (acesso negado por padrão).


<sect1>O arquivo limits.conf
<p>
Você deve realmente dar uma boa olhada neste arquivo. Aqui você pode definir os limites de recurso para os usuários. Se você usa PAM, este arquivo não é válido
e você deve usar /etc/security/limits.conf ao invés deste.. 

<tt>FIXME: Colocar um bom limits.conf aqui </tt>


<sect1>Customize o arquivo /etc/inetd.conf
<p>
Você deve parar qualquer serviço que não seja necessário em seu sistema, como echo, charges, discard, daytime, time, talk, ntalk, e os ALTAMENTE inseguros serviços-r
(rsh, rlogin e rcp. use ssh no lugar deles). Após desabilitá-los vocÊ deve verificar se você realmente precisa do daemon inetd. Muitas pessoas preferem usar
daemons ao invés de chamar os serviços através do inetd. Possibilidades de DoS contra o inetd existem, o que pode aumentar a carga da máquina tremendamente.
Se você ainda quiser rodar algum tipo de serviço inetd, troque para um daemon inet mais configurável como xinetd ou rlinetd. 
<p>
Você pode editar o inetd.conf diretamente, mas Debian provê uma alternativa simples para fazer isto: update-inetd. Você pode remover o daemon de telnet
executando estes comandos para mudar o arquivo de configuração e reiniciar o daemon (neste caso o serviço de telnet está desabilitado): 
<tscreen><verb>
/usr/sbin/update-inetd --disable telnet
/etc/init.d/inetd restart
</verb></tscreen>



<sect1>Edite o arquivo /etc/login.defs
<p>
O próximo passo é editar a configuração básica e ações sobre o login do usuário. 

<tt>FAIL_DELAY          10</tt>

Esta variável deve ser setada para um valor elevado para dificultar o uso do terminal para um login usando o estilo força bruta.
Se uma senha incorreta for digitada, deve-se esperar 10 segundos para receber um novo prompt de login, o que consome um bom tempo quando você testa senhas.
Preste atenção ao fato de que esta opção é inútil se você utilizar um programa diferente do getty, mingetty por exemplo. 

<tt>FAILLOG_ENAB        yes</tt>

Se esta variável for habilitada, logins falhos serão logados. Isto é importante para seguir a triçlha de alguêm que tente um ataque de força bruta. 

<tt>LOG_UNKFAIL_ENAB    yes</tt>

Se você ativou a variável "FAILLOG_ENAB", então você deve ativar também esta variável. Isto vai gravar nomes de usuário desconhecidos que tenham tentado
logar-se. Se você fizer isso, tenha certeza que os logs tem a permidssão correta (640 por exemplo, com um grupo apropriado tal como adm), because users as
vezes acidentalmente entram sua senha como nome de usuário e você não quer que os outros vejam isto. 

<tt>SYSLOG_SU_ENAB      yes</tt>

Esta opção grava as tentativas de su no syslop. Tão importantes em máquinas sérias mas note que isto pode criar edições de privacidade também. 

<tt>SYSLOG_SG_ENAB      yes</tt>

O mesmo que SYSLOG_SU_ENAB mas aplica-se a chamada<tt>sg</tt>.

<tt>MD5_CRYPT_ENAB      yes</tt>

Como explicado acima, senhas encriptadas com md5 reduzem o problema de ataques por dicionário enormemente, pois é muito difícil fazer um ataque contra
senhas encriptadas por md5. Ao menos é dificil fazer com sucesso. Se você estiver usando slink, leia os documentos sobre MD5 antes de habilitar esta opção. De
outra forma isto é setado na PAM. 

<tt>PASS_MAX_LEN        50</tt>

Se senhas MD5 estiverem ativadas em sua configuração de PAM, então esta variável deve ser configurada para o mesmo valor que estiver configurado lá.


<sect1>Editando o arquivo /etc/ftpusers
<p>
Este arquivo contem uma lista de usuários que não tem permissão de fazer ftp ao sistema. Somente use este arquivo se você realmente quiser liberar o ftp (o que
não é recomendado geralmente, poius ele usa senhas em texto plano). Se o daemon suporta serviços PAM, você pode também utiliza-lo para permitir ou negar o
acesso aos usuários para certos serviços. 


<sect1>Usando tcp wrappers
<p>
Os TCP wrappers foram desenvolvidos quando não haviam filtros de pacotes reais e o controle de acesso era necessário. Os TCP Wrappers permitem que você
permita ou negue um serviço para um host ou domínio e defina uma regra padrão de negação ou permissão! Se você quiser mais informações olhe a página de
manual, hosts_access(5). 

Agora, aqui vem um pequeno truque e provavelmente a menor sistema de detecção de invasão disponível. Normalmente você deve ter uma regra de firewall
decente na primeira linha de defesa e os tcp wrappers na segunda linha. Um pequeno truque é habilitar um comando no arquivo /etc/hosts.deny que envia email para
o root sempre que uma negação de serviço ative os wrappers:

<tscreen><verb>
ALL: ALL: spawn ( \
  echo -e "\n\
  TCP Wrappers\: Connection refused\n\
  By\: $(uname -n)\n\
  Process\: %d (pid %p)\n\
  User\: %u\n\
  Host\: %c\n\
  Date\: $(date)\n\
" | /bin/mail -s "Connection to %d blocked" root)
</verb></tscreen>

<em>Cuidado</em>: O exemplo acima pode facilmente ser vitima de um DoS que faça milhares de conexões em um curto período de tempo. Muitos emails representam muito
IO de arquivo com apenas alguns pacotes.


<sect1>Usando o su
<p>
Se você realmente precisar tornar-se o superusuário em seu sistema, ou seja, instalar pacotes ou adicionar usuários, você pode usar o comando su para mudar sua
identidade.Você deve evitar todo e qualquer login como root, ao invés disso utilize o su. Atualmente, a melhor solução é remover o su e alternar para sudo, que tem
mais opções do que o su. De qualquer forma, su é mais comum e é usado em muitos outros unixes. 


<sect1>Usando o sudo
<p>
sudo permite ao usuário executar comandos sob a identidade de outro usuário, mesmo como root. Se o usuário estiver acrescentado no arquivo /etc/sudoers e
autenticar a si mesmo corretamente, ele conseguirá executar comandos que foram definidos em /etc/sudoers. Violações, como senhas incorretas ou tentativas de
executar um programa que não se tem permissão, são logadas e informadas ao root por email. 


<sect1>Usando o chroot
<p>
chroot é uma das mais restrições mais poderosas a um daemon, usuário ou outro serviço.Imagine uma jaula em volta de seu alvo, de onde o alvo não pode escapar
(normalmente, mas existem n condições que permitem a alguem escapar da jaula).Se você não confia em um usuário, você pode criar um ambiente "change root"
para ele. Isto pode usar uma certa quantidade de espaço em disco, pois você precisará copiar todos os executáveise bibliotecas necessárias para dentro da prisão.
Um bom exemplo para este vcaso é, se você não autentica no arquivo  /etc/passwd  mas sim no LDAP ou MySQL. Então seu daemon de ftp precisa de um binário
e provavelmente umas poucas bibliotecas. Um ambiente com chroot é um incremento de segurança excelente, se um novo exploit é conhecidpo para este daemon
de ftp, será apenas possível explorar este ?UID do daemon de ftp do usuário que o utiliza e nada mais. Claro que outros daemons podem se beneficiar disto
também. 
<p>
Como uma nota adicional, o BIND padrão do Debian não é empacotado com chroot por padrão, de fato, nenhum daemon vem com chroot por padrão. Eu espero
que isto mude na versão woody. 


<sect1>Configurando algumas opções do kernel
<p>
Muitas opções do kernel podem ser modificadas sem rebootar a máquina dando-se um echo de algo para dentro do  /proc ou usando o sysctl. Usando o comando <tt>sysctl -A</tt> você pode ver o que você pdoe reconfigurar e quais são as opções. Somente em casos raros você precisa editar algo aqui, mas você pode aumentar a
segurança desta maneira.

<tt>net/ipv4/icmp_echo_ignore_broadcasts = 0</tt>

Isto é um 'Emulador de windows' porque ele age como o windows em pings de broadcast, se estiver ajustado para 1. De outra maneira não faz nada. 

<tt>net/ipv4/icmp_echo_ignore_all = 0</tt>

Se você não quiser bloquear ICMP na sua firewall, habilite isto. 

<tt>net/ipv4/tcp_syncookies = 1</tt>

Esta opção é uma faca de dois gumes. De um lado protege contra floods syn, de outro, viola os RFCs. Ela é completamente estranha, pois ela ataca o outro lado
cada vez que ele o ataca, então o outro lado está também ocupado. Se você quiser alterar esta opção você também pode alterar em <tt>/etc/network/options</tt> definindo <tt>syncookies=yes</tt>.

<tt>/proc/sys/net/ipv4/conf/all/log_martians = 1</tt>

Pacotes com endereços impossíveis (poir roteamentos errados) em sua rede são logados. 


<sect1>Não use software que dependa da svgalib
<p>
SVGAlib é muito boa para amantes do console como eu, mas no passado ela provou várias vezes  que é estremamente insegura. Exploits contra o zgv foram
lançados, e era muito simples tornar-se root. Tente evitar usar programas que utilizam SVGAlib sempre que possível. 


<sect1>Tranferências de arquivo seguras
<p>
Copiar arquivos de uma maneira segura de um host a outro pode ser feita utilizando o comando 'scp' que está incluído no pacote ssh. Ele trabalha como o rcp mas é
encriptado completamente, então os maus elementos não podem nem saber o que você está fazendo... 


<sect1>Usando quotas
<p>
Ter uma boa política de quotas é importante, desde que ele impede os usuários de encherem seu disco rígido. Você pode utilizar dois diferentes sistemas de quota -
quota de usuário e quota por grupos. Como você provavelmente viu, quota de usuário limita o espaço que um usuário pode utilizar, quota de grupo faz o mesmo
por grupos. Tenha isso em mente quando estiver trabalhando com tamanho de quotas. <p>

Existem alguns pontos principais a pensar quando estiver definindo um sistema de quotas: &nl;
<itemize>
<item>Mantenha as quotas suficientemente pequenas, então os usuários não poderão comer seu espaço em disco.
<item>Mantenha as quotas suficientemente grandes, para os usuários não se quixem e nem suas quotas de email os deixem sem receber email por um bom tempo. 
<item>Use quotas em todas as áreas possíveis de escrita por usuários, tanto no /home quanto no /tmp. 
</itemize>
<p>
Cada diretório/partição em que os usuários tiverem acesso de escrita total deve ter quotas habilitadas. Então ache estas partições e diretório e calcule um tamanho
de quota aceitável, que alie usabilidade e segurança. 

Então, agora você quer usar quotas. Primeiro de tudo você precisa verificar se você habilitou controle de quotas no kernel. Se não, você precisará recompilá-lo.
Depois disto, certifique-se que o pacote quota está instalado. Se não estiver, você precisará dele também. 

Habilitar quotas para os sistemas de arqivos é tão fácil quanto modificar as configurações <tt>padrão</tt> para 'defaults,usrquota' no arquivo /etc/fstab. 
Se você precisa de quota de grupo, substitua  'usrquota' para 'grpquota'. Você também pode usar os dois. Então crie os arquivos vazios quota.user e quota.group 
na raiz dos sistemas de arquivos em que você quer usar quotas (ex. <tt>touch
/home/quota.user</tt>, <tt>touch /home/quota.group</tt> para o sistema de arquivos no /home).

Reinicie a quota com o comando <tt>/etc/init.d/quota stop;/etc/init.d/quota
start</tt>. Agora a quota deve estar sendo executada, e os tamanhos de quota podem ser definidos.

Editar as quotas para um usuário específico (digo 'ref') pode ser feito com o comando <tt>edquota -u ref</tt>. 
Quotas de grupo podem ser modificadas com o comando <tt>edquota -g &lt;group&gt;</tt>. 
Então configure a quota leve e a pesada e/ou quotas de inodo como necessário.

Para mais informações sobre quotas, leia a página de manual sobre quota e o mini-howto de quota.


<sect1>Permissões do arquivo de log
<p>
Algumas permissões do arquivo de log não são perfeitas após a instalação.
Primeiro, os arquivos /var/log/lastlog e /var/log/faillog não necessitam ser lidos por usuários normais.
No arquivo lastlog você pode ver quem logou no sistema ultimamente e no faillog você pode ver um resumo de logins falhos.
O autor recomenda fazer um chmod em ambos para 660. Dê uma boa olhada em seus arquivos de log e decidir com cuidado quais arquivos você 
deixa com permissão de leitura/escrita para um usuário com UID diferente de 0 e um grupo diferente de 'adm' ou 'root'&nl;
Eu gostaria de enfatizar que as permissões do arquivo de log do apache são realmente alteradas pois o usuário do apache assume os arquivos de log do mesmo.
Se um usuário consegue uma shell com uma backdoor no apache, ele pode facilmente remover os logfiles.


<sect1>Habilitando a verificação de setuid
<p>
Debian provê um job no cron que roda diariamente em <tt>/etc/cron.daily/standard</tt>.
Esta job vai rodar o script <tt>/usr/sbin/checksecurity</tt>que guarda informação de alteração nas flags setuid em seu sistema.

<p>Em ordem para esta checagem ser feita você deve setar <tt>CHECKSECURITY_DISABLE="FALSE"</tt> no arquivo <tt>/etc/checksecurity.conf</tt>.
Note, isto é o padrão, então a menos que você tenha alterado algo, este script será executado.


<sect1>chattr/lsattr
<p>
Estes dois comandos são muito úteis, mas funcionam somente no sistema de arquivos ext2.
Com o 'lsattr' você pdoe listar os atributos de um arquivo e com o 'chattr' você pode alterá-los. 
Note que atributos não são o mesmo que permissões. Existem muitos atributos, mas somente os mais 
importantes para aumentar a segurança são menciponados aqui. 
Existem também duas flags que só podem ser setadas pelo suprusuário.

Primeiro existe a flag 'a'. Se estiver habilitada, ele só pode ser aberto para acréscimo (append). 
Este atributo é útil para alguns arquivos no /var/log/, penso que você deve considerar que eles 
são movidos algumas vezes, pelos scrips de rotação de logs.

A segunda flag é a flag 'i', que significa imutável. Se setada em um arquivo, 
ele não pode ser modificado, deletado ou renomeado e nenhum link pode ser criado para ele. 
Se você não quiser que os usuários olhem seus arquivos de configuração, você deve setar esta flag e remover a permissão de leitura. 
Além de tudo, isto deve dar a você um pouco mais de segurança contra intrusos, porque o cracker pdoe ficar confuso por não ter permissão para remover o arquivo. 
Mas a respeito disso, você nunca deve supor que o cracker é cego. Antes de mais nada, ele entrou em seu sistema.


<sect1>A integridade de seu sistema de arquivos
<p>
Você tem certeza que o programa /bin/login que está em seu disco é o mesmo binário que 
você instalou alguns meses atrás? E se isto é uma versão hackeada, que guarda cada senha 
digitada em um arquivo escondido ou envia por email numa versão em texto puro através da internet?&nl;
O único método para ter este tipo de proteção é checar seus arquivos cada dia/hora/mês (eu prefiro diariamente) 
comparando a soma de verificação (md5sum) do arquivo. Dois arquivos não podem ter a mesma md5sum, então 
você está num site seguro aqui, exceto se alguêm hackear o algoritmo que cria md5sums na máquina, o que é, bem, praticamente impossível. 
Você deve considerar que a auditoria de seus binários é muito importante, desde que é uma maneira fácil de descobrir mudanças nos arquivos binários. 
Ferramentas comuns para fazer isso são a sXid, AIDE (Advanced Intrusion Detection Environment) e o TripWire (comercial, a nova versão será GPL).
<p>
Instalando <tt>debsums</tt> ajudará a verificar a integridade do sistema de arquivos, comparando as MD5sums de cada arquivo com as MD5sums usadas 
pelo arquivo no pacote Debian. Mas tome cuidado, estes arquivos podem ser facilmente trocados.


<sect1>Troque o locate
<p>
Além disso, você pdoe trocar seu pacote 'locale' pelo 'slocate'. slocate 
é uma versão melhorada na questão de segurançado GNU locale. Quando você usar slocale, o usuário somente vê os arquivos que ele realmente tem acesso 
e você pode excluir qualquer arquivo ou diretório que você quiser.


<sect>Protegendo serviços executados em seu sistema

<sect1>Protegendo o ssh
<p>
Se você ainda roda o telnet ao invés do ssh, você deve dar um tempo neste manual e mudar isto. Ssh deve ser usado para todos os logins remotos ao invés de
telnet. Em uma época onde é fácil sniffar o tráfego internet e obter senhas em texto plano, você deve usar somente protocolos que usem criptografia.Então, faça um <tt>apt-get install ssh</tt> em seu sistema agora.
Encorage os usuários de seu sistema a usarem o ssh ao invés de telnet, ou ainda melhor, desistale o telnet. Em adição você
deve evitar logar no sistema usando ssh como root, ao invés disso, use um método alternativo para tornar-se root, como <tt>su</tt> or <tt>sudo</tt>. Finalmente, o arquivo
sshd_config em /etc/ssh deve ser modificado para aumentar a segurança do sistema: 

<tt>PermitRootLogin No</tt>

Tente não permitir o login do root tanto quanto possível. Se alguêm quiser tornar-se root através de ssh, agora são necessários dois logins e a senha de root não
pode ser descoberta por força bruta através de ssh. 

<tt>Listen 666</tt>

Troque a porta de acesso, assim o intruso não pode ficar completamente seguro sobre o serviço de ssh estar rodando. 

<tt>PermitEmptyPasswords no</tt>

Senhas vazias criam um rombo na segurança do sistema

<tt>AllowUsers alex ref</tt>

Permite que apenas alguns usuários tenham acesso por ssh a esta máquina 

<tt>AllowGroups wheel admin</tt>

Permite que apenas os membros de um grupo tenham acesso via ssh a esta máquina.
AllowGroups e AllowUsers tem diretivas equivalentes para negar acesso a uma máquina. Não fique surpreso se eles forem 
chamados de "DenyUsers" e "DenyGroups".

<tt>PasswordAuthentication yes</tt>

A escolha é toda sua se você vai querer fazer isto. É mais seguro somente permitir acesso a máquina 
para usuários que tenham suas chaves ssh depositadas no arquivo ~/.ssh/authorized_keys. Se você quiser fazer, defina esta variável para não.

Como nota final tome nota que estas diretivas são para um arquivo de configuração do OpenSSH. Atualmente, existem três daemons de SSH, ssh1, ssh2 
e o OpenSSH da turma do OpenBSD. SSH1 foi o primeiro daemon de ssh disponível e ainda é o mais utilizado (existem rumores que existe uma versão para windows. 
SSH2 tem muitas vantagens sobre o SSH1 exceto que foi lançado sob uma licença de código não-aberto. O OpenSSH é completamente livre e suporta ambos SSH1 e SSH2. 
OpenSSH é a versão instalada no Debian quando o pacote 'ssh' é escolhido.


<sect1>Protegendo o FTP
<p>
Se você realmente tem que utilizar FTP (sem utilizar um tunel por SSL), você deve chroot cada usuário para dentro de seus diretório home, que eles serão
impedidos de ver qualquer coisa além de seu próprio diret´rio. De outra maneira eles podem navegar pelo sistema de arquivoscomo se eles tivessem uma shell.
Você pode adicionar a seguinte linha em seu arquivo proftpd.conf na seção global para habilitar esta opção de chroot: 
<p>
<tt>DefaultRoot ~</tt>
<p>
Reinicie o profftpd com: <tt>/etc/init.d/proftpd restart</tt> e veja que você pode fugir de seu diretório padrão agora.


<sect1>Tenha em mente a insegurança do X em rede.
<p>
Hoje em dia terminais com X estão sendo usados por mais e mais companhias onde apenas um servidor é necessário para centenas de estações. Isto pode ser
perigoso, pois você precisa permitir ao servidor de arquivos  a coneção aos clientes (servidor X do ponto de vista do X. Opções no X de definição de cliente e
servidor). Se você seguir a (péssima) sugestão de muitas documentações, você digita <tt>xhost +</tt> na sua máquina. Isto permite a qualquer cliente X conectar em seu
sistema. Para alguma segurança extra, você deveria digitar a linha de comando <tt>xhost +hostname</tt> para liberar o acesso a somente alguns hosts específicos. 

Uma solução muito mais segura. penso eu, é usar o ssh para fazer um tunel para o X e encriptar toda a sessão. Isto é feito automaticamente quando você faz uma
conexão ssh com outra máquina. Isto deve ser habilitado no arquivo /etc/ssh/ssh_config alterando o valor da opção <tt>X11Forwarding</tt> para <tt>yes</tt>. Nos tempos do
SSH, você deve esquecer completamente os acessos baseados no xhost. 

Para melhor segurança, se você não precisar acesso ao X de outras máquinas, desative o binding da porta tcp 6000 simplesmente digitando: 


<tt>startx -- -nolisten tcp</tt>


<sect1>Verifique seu gerenciador de exibição
<p>
Se você somente precisa de uma interface gráfica instalada apenas para uso local (tendo um bom login grafico), tenha certeza que o XDMCP (Protocolo de
Controle da Interface Gráfica X) está desabilitado. Com o XDM você pdoe fazer isso com esta linha no <tt>/etc/X11/xdm/xdm-config</tt>.:
<p>
<tt>DisplayManager.requestPort:     0</tt>
<p>
Normalmente, todas as interfaces gráficas são configuradas para não iniciarem o os serviços XDMCP no debian por padrão. 


<sect1>The lpd and lprng issue
<p>
Imagine a cena, você chega no serviço, e a impressora está imprimindo folhas sem fim pois alguêm está atacando (por Dos) seu daemon de impressora.
Interessante, não acha? Então mantenha seus servidores de impressão seguros.

<tt>FIXME. Conteúdo ausente. (Sem experiência em lpr) </tt>


<sect1>Usando mail de forma segura
<p>
Ler ou receber email é o protocolo em texto plano mais comum. Se você usa POP3 ou IMAP para pegar seu correio você envia sua senha em texto puro através
da rede, então quase qualquer um pode ler sua correspondência de agora em diante.  Ao invés disso use o SSL (Secure Socket Layer) para receber seus emails. A
outra alternativa é o ssh, mas se você tiver uma shell na máquina destino.

Aqui está um exemplo de arquivo fetchmailrc: 

<tscreen><verb>
poll my-imap-mailserver.org via "localhost"
  with proto IMAP port 1236
      user "ref" there with password "hackme" is alex here warnings 3600
    folders
      .Mail/debian
    preconnect 'ssh -f -P -C -L 1236:my-imap-mailserver.org:143 -l ref
     my-imap-mailserver.org sleep 15 &lt;/dev/null &gt; /dev/null'
</verb></tscreen>

A linha preconnect é a linha importante. Ela dispara uma sessão ss e cria o túnel necessário, o que automaticamente envia as conexões do localhost na porta 1236
para o servidor imap, mas encriptadas. Outra possibilidade é usar o fetchmail com ssl. 
<p>
Se você quiser serviços de email encriptados como POP ou IMAP, <tt>apt-get install stunnel</tt> e comece seus daemons assim:&nl; stunnel -p
<tt>/etc/ssl/certs/stunnel.pem -d pop3s -l /usr/sbin/popd</tt> Este comando redireciona o daemon existente (-l) a porta (-d) e usa o cer ssl especificado
(-p). 


<sect1>Usando um loghost
<p>
Um loghost é um host que coleta os dados dos syslogs remotamente pela rede.Se uma de suas máquinas for violada por um intruso, ele não conseguirá cobrir seu
rastro, a menos que ele hackeie o loghost também. Então, o loghost deve ser especialmente seguro. Criar um loghost é realmente simples. Apenas inicie o syslogd
com o comando 'syslogd -r' e um novo loghost nasceu. Agora você deve configurar as outras máquinas para enviarem dados ao loghost. Acrescente uma entrada
como esta no arquivo <tt>/etc/syslog.conf</tt>:<p>

<tscreen><verb>facility.level            @your_loghost</verb></tscreen>

facility deve ser um destes: authpriv, cron, daemon, kern, lpr, mail, news, syslog, user, uucp e local1 ao local7. level deve ser alert, crit, err, warning, notice, info
debug. Se você quiser logar tudo remotamente, apenas escreva: 

<tscreen><verb>*.*                       @your_loghost</verb></tscreen>

em seu arquivo syslog.conf. Logar remotamente tanto quanto localmente é a melhor solução (o atacante pode presumir que cobriu seus rastros após deletar os
arquivos de log locais.) Veja as manpages syslog(3), syslogd(8) and syslog.conf(5) para informação adicional 


<sect1>Protegendo o BIND
<p>
Em uma instalação padrão do Debian, o daemon de serviço de nomes, BIND, executa como usuário e grupos root.
É muito fácil executar o BIND sob outro ID de usuário (UID).Entretanto, se outro usuário que não o root executar o BIND, o BIND não será capaz de detectar novas interfaces
automaticamente. Por exemplo, se você colocar um carttão PCMCIA em seu laptop.
Veja no arquivo README.Debian no diretório da documentação de seu named para mais informação sobre este tópico.
Existem vários problemas de segurança recentes em relação ao BIND, então, trocar o usuário é útil quando possível.
<p>
Para executar BIND sob outro usuário, primeiro crie um usuário e grupo separados
para isto (não é uma boa idéia usar o usuário nobody ou nogroup para cada serviço rodando como root).
Neste exemplo, o usuário e grupo <tt>named</tt> será usado. Você pode fazer isto digitando o seguinte:
<tscreen><verb>
addgroup named
adduser --system --ingroup named named
</verb></tscreen>

<p>
Agora edite o arquivo <tt>/etc/init.d/bind</tt> com seu editor favorito e mude a linha que inicia com
<p>
<tt>start-stop-daemon --start</tt>
&nl;para&nl;
<tt>start-stop-daemon --start --quiet --exec /usr/sbin/named -- -g named -u
named</tt>
<p>
Tudo que você precisa fazer agora é reiniciar o bind através do comando '/etc/init.d/bind
restart', e verificar seu syslog por duas entradas como estas:
<p>
<tscreen><verb>
Sep  4 15:11:08 nexus named[13439]: group = named
Sep  4 15:11:08 nexus named[13439]: user = named
</verb></tscreen>
<p>
Voila! Seu named agora não executa como root. Para obter a máxima segurança do BIND, 
construa agora uma jaula chroot (See 3.13) em volta de seu daemon.


<sect1>Usando o snort
<p>
snort é um sniffer e logger de pacotes que detecta ataques através de um dicionário de assinaturas de ataques.
Ele detecta uma variedade de outros ataques e tentativas, como buffer overflows, stealth port scans, ataques de CGI, tentativas  It detects a variety of other attacks and
probes, such as buffer overflows, stealth port scans, CGI attacks, SMB
probes, and much more. Snort has a real-time alerting capability. This is
a tool which should be installed on every router to keep an eye on your
network. Just install it via <tt>apt-get install snort</tt>, follow the
questions, and watch it log.



<sect>Antes de um ataque

<sect1>Siga as atualizações de segurança da Debian 
<p>
É de longe insuficiente fazer uma atualização de segurança após a instalação apenas. Você deve faze-las com uma certa regularidade para não correr o risco de ter
software inseguro instalado em seu sistema. 


<sect1>Troque seu software 
<p>
Você deve evitar ter qualquer serviço de rede que envie e receba senhas em texto plano, como por exemplo o FTP, telnet, NIS ou RPC. O autor recomenda o uso
de ssh ao invés de telnet e ftp a todos. 

Além disso, você não deve usar NIS, o Sistema de Informação de Rede, se for possível, poque ele permite troca de senhas. Isto pode ser altamente inseguro caso
sua configuração esteja quebrada. 

Por último, mas não menos importante, desabilite o RPC sempre que possível. Muitos furos de segurança para este serviço são conhecidos e podem ser facilmente
explorados. Por outro lado, serviços NFS são muito importantes em algumas redes, então ache um meio termo de segurança e usabilidade na rede. A maioria dos
ataques DoS (negação de serviço distribuída) usam exploits rpc para entrarem no sistema e atuar como um chamado agente/handler. 

Desabilitar o portmap é relativamente simples. Existem diferentes métodos. O mais simples em um sistema Debian é usar o comando: <tt>update-rc.d portmap remove</tt>.
Isto em fato remove qualquer link simbólico relativo ao portmap em <tt>/etc/rc$(nível de execução).d/</tt>, o que também pode ser feito
manualmente.Outra maneira é usar o comando: <tt>chmod 644 /etc/init.d/portmap</tt>, mas ele dá uma mensagem de erro durante a inicialização do sistema. Você
também pode retirar a parte de <tt>start-stop-daemon</tt>  no arquivo de script /etc/init.d/portmap. Tenha em mente que migrar do telnet patra o sshmas usar outros
protocolos em texto plano não aumenta a segurança de maneira alguma! O melhor seria remover ftp, telnet, pop, imap, http e supersede por seus respectivos
serviços criptografados. Você deve considerar a migração destes serviços para suas versões SSL, ftp-ssl, telnet-ssl,. pop-ssl, https... 


A maioria das dicas acima aplicam-se a qualquer sistema unix. 


<sect1>Adições úteis ao kernel
<p>
Algumas adições ao kernel existem, o que aumenta significativamente a segurança doi sistema. Aqui estão alhguns exemplos:
<p>
<itemize>
<item>OpenWall patch by Solar Designer&nl;
É um conjunto útil de instruções do kernel, como links restritos, FIFOs em /tmp, restrição ao /proc, manuseio de descritores de arquivo especial, area de pilha de usuário não-executável e mais alguns.&nl;
Homepage: <url name="http://www.openwall.com/linux/" url="http://www.openwall.com/linux/">

<item><em>LIDS - Linux intrusion detection system by Huagang Xie &amp; Philippe Biondi</em>&nl;
Esta adição faz o processo de criar um linux mais forte ser facilitado.Você pode restringir cada processo, dar a ele direitos de escrita ou leitura de arquivos, ou remover por padrão a habilidade de ler arquivos. Mais a fundo, você pode definir as capacidades de determinados processos. Apesar de estar na fase beta. é quase uma necessidade para o administrador de sistemas paranóico.&nl;
Homepage: <url name="http://www.lids.org" url="http://www.lids.org">

<item><em>POSIX Access Control Lists (ACLs) for Linux</em>&nl;
Acrescenta listas de controle de acesso, um método avançado para restringir o acesso a arquivos através do kernel.&nl;
Homepage: <url name="http://acl.bestbits.at/" url="http://acl.bestbits.at/">

<item><em>Linux trustees</em>&nl;
Acrescenta um sistema de permissões avançadas decente ao kernel de seu linux. Todos os objetos são armazenados em memória, o que permite um rápido acesso a todas as permissões.&nl;
Homepage: <url name="http://www.braysystems.com/linux/trustees.html" url="http://www.braysystems.com/linux/trustees.html">

<item><em>International kernel patch</em>&nl;
Esta é uma adição de orientação criptográfica, você deve prestar atenção a suas leis locais de uso da criptografia. Ele basicamente acrescenta o uso de sistemas de arquivos criptografados.&nl;
Homepage: <url name="http://www.kerneli.org" url="http://www.kerneli.org">

<item><em>SubDomain</em>&nl;
Uma extensão do kernel para criar um ambiente de chroot mais seguro e simples. VocÊ deve especificar os arquivos necessários ao serviço manualmente e não tem que compilar os serviços estaticamente.&nl;
Homepage: <url name="http://www.immunix.org/subdomain.html" url="http://www.imm
unix.org/subdomain.html">

<item><em>UserIPAcct</em>&nl;
Este não é verdadeirsamente uma adição relacionada a segurança, mas permite criar quotas para o tráfego no servidor por usuário. E você pode visualizar as estatísticas sobre o tráfego por usuário.&nl;
Homepage: <url name="http://rsmeyers.3ti.org/useripacct" url="http://rsmeyers.3ti.org/useripacct">

<item><em>FreeS/WAN</em>&nl;
Se você quiser usar o IPSec com linux, você precisa desta adição. Você pode criar VPN´s com ele muito facilmente, até mesmo para máquinas windows, já que o IPSec é um padrão comum atualmente.
Homepage: <url name="http://www.freeswan.org" url="http://www.freeswan.org">
</itemize>


<sect1>Idéias de genio/paranóicas, o que você pode fazer
<p>
Esta é provavelmente a mais instável e doivertida seção, desde que eu espero que alguns "hmmm, isso me soa como loucura"-idéias podem ser realizadas. Na
sequencia você vai achar algumas - dependendo do ponto de vista você dirá que são geniais, paranóicas, loucas ou seguras - idéias para aumentar a segurança
rapidamente.

<itemize>
<item>Brincando com o PAM&nl;
Como eu disse em um artigo sobre PAM na phrack número 56, o bom do PAM é que: "Você é limitado apenas no que você pode imaginar". Isso é verdade. Imagine o login do usuário root somente possível com impressão digital ou scan de retina ou cartão criptográfico (por que diabos usei a conjunção "OU" e não a conjunção "E" aqui?). 

<item>Fascist Logging&nl;
Eu gosto de dizer que tudo que falamos sobre logs são "logs suaves". Se você quer fazer um log real, consiga uma impressora com formulário contínuo
e faça um log impresso de tudo. Soa engraçado, mas é confiável e não pode ser removido.

<item>CD distribution&nl;
Esta idéia é bem simples de realizar e oferece uma grande segurança. Crie uma distribuição Debian fortificada, com um ótimo firewall, faça um iso dela e queime 
um CD. Faça-o bootável. Faça tudo isto em uma distribuição read only com aproximadamente 600M de espaço utilizado para serviços e de fato você terá tornado impossível 
para intrusos ganharem acesso de leitura e escrita em seu sistema. Somente tenha ceryteza que todos os dados que deve ser gravado, seja gravado através dos cabos.  
De qualquer maneira, o intruso não pdoe alterar regras de firewall, entradas de roteamento ou iniciar seus próprios daemons (ele pode, mas reinicialize 
o sistema e ele tem que hackear seu sistema de novo para alterá-los).

<item>Desabilite os módulos&nl;
Quando você desabilita o uso de módulos durante a compilação do kernel muitos backdoors baseados no kernal ficam impossibilitados de implementar, desde que a maioria deles
são baseados na instalação de módulos modificados.
</itemize>


<sect>Após a invasão

<sect1>Considerações gerais
<p>
Se você realmente quiser limpar resíduos, você deve remover o sistema comprometido de sua rede e reinstalar o SO do zero. Isto pode não ter efeito algum caso
você não saiba comop o intruso conseguiu acesso de root. Neste caso, você deve verificar tudo, firewall/integridade de arquivos/log de hosts que o acessaram e os
arquivos de log para descobrir a maior quantidade de informação antes de reinstalar. 


</article>
