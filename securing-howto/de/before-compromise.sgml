<chapt>Vor einer Kompromittierung

<sect id="intrusion-detect">Aufsetzen einer Eindringlings-Erkennung

<p>Debian enthält verschiedene Tools zur Erkennung von
Eindringlingen, die Sie vielleicht dazu benutzen wollen, Ihr lokales
System zu verteidigen (wenn Sie wirklich paranoid sind oder Ihr System
wirklich kritische ist) oder um andere Systeme im gleichen Netzwerk zu
verteidigen.

<p>Beachten Sie immer, dass Sie, um Ihre System-Sicherheit mit einer
dieser Tools wirklich zu verbessern, einen Alarm-und-Antwort-Mechanismus
brauchen Benutzen Sie also keinen Eindringlings-Erkennung, wenn sie
niemanden alarmieren werden (d.h. verschwenden Sie nicht Ihre Zeit damit,
Dinge zu konfigurieren, die Sie später nicht benutzen werden).

<p>Die meisten Eindringlings Erkennungs Tools werden entweder auf Syslog
protokollieren oder E-Mails, über einen bestimmten erkannten Angriff,
an den Root-User senden (die meisten können umkonfiguriert werden,
um stattdessen einem anderen User E-Mails zu schicken). Ein Administrator
muss sie passend konfigurieren, so dass falsche Positivmeldungen keinen
Alarme auslösen, und so diesen Alarmen die notwendige Aufmerksamkeit
geschenkt wird. Alarme können auf einen laufenden Angriff hindeuten
und wären - sagen wir mal einen Tag - später nicht mehr
nützlich, da der Angriff dann bereits erfolgreich beendet worden
sein kann. Stellen Sie also sicher, dass es eine passende Regelung
über die Behandlung von Alarmen gibt, und das technische Maßnahmen
zur Handhabung statt finden.

<p>Eine Interessante Quelle für Information ist
<url id="http://www.cert.org/tech_tips/intruder_detection_checklist.html"
name="CERT's Intrusion Detection Checklist">

<sect1>Netzwerk basierende Eindringlings Erkennung

<p><package>Snort</package> ist ein flexibler Packet Schnüffler oder
logger, der Angriffe durch Nutzen einer Angriffs-Signatur-Bibliothek
erkennt. Es erkennt eine breite Palette von Angriffen und Tests, wie zum
Beispiel Speicher-Überläufe, stealth Port scans, CGI Angriffe,
SMB Tests und vieles mehr. Dies ist in Tool, das auf jedem Router
installiert werden sollte, um ein Auge auf Ihrem Netzwerk zu haben.
Installieren Sie es einfach mit <tt>apt-get install snort</tt>, folgen
Sie den Fragen und beobachten Sie die logs.

<p>Debians Snort kommt mit vielen eingeschalteten Sicherheits Checks, die
Sie vielleicht haben möchten, jedoch sollten Sie das Setup anpassen,
um bestimmte Dienste auf Ihrem System zu berücksichtigen. Sie
möchten vielleicht auch zusätzliche Tests speziell für
Ihre Dienste nutzen.

<p>Sie können <prgn>snort</prgn> sowohl dazu benutzen, eine
Netzwerk-Eindringlings-Erkennung für viele Hosts in Ihrem Netzwerk
zu etablieren, als auch um Angriffe gegen Ihren eigenen Host zu erkennen.

<p>Es gibt noch andere Tools, die dazu benutzt werden können,
Netzwerk Angriffe zu erkennen (sogar einfacherere).
<package>Portsentry</package> ist ein anderes interessantes Paket, dass
Sie warnen kann, wenn jemand Ihre Seite scannt. Andere Tools, wie
<package>ippl</package> oder <package>iplogger</package> erkennen
außerdem bestimmte IP (TCP und ICMP) Angriffe, auch wenn Sie keine
fortgeschrittenen Techniken zur Erkennung von Netzwerk Angriffen haben
(was snort kann).

<p>Sie können jedes dieser Tools mit dem <prgn>idswakeup</prgn>
Programm testen. Hierbei handelt es sich um einen Falsch-Positiv
Generator, der NIDS mit einer Auswahl der üblichen unter Debian
verfügbaren Angriffs-Signaturen alarmiert.

<sect1>Host basierende Erkennung 

<p><package>Tiger</package> ist ein bewährtes Eindringlings
Erkennungs Tools, dass seit der Woody Distribution auf Debian portiert
wurde. Tiger bietet Tests von allgemein üblichen Dingen, in Bezug
auf Einbrüche, Tests der Passwort-Stärke, Dateisystem Probleme,
kommunizierende Prozesse.... Die Debian Version umfasst neue, Debian
spezifische Tests: md5-Summen von vorhandenen binaries, und Test auf
installierte und verwundbare Pakete. Die standard Installation lässt
<prgn>tiger</prgn> jeden Tag einmal laufen und einen Report erstellen,
der an den Superuser geschickt wird. Die erstellten Reports können
Informationen zu einer geglückten Kompromittierung geben.

<p>Protokoll-Analyse Tools, wie zum Beispiel <package>logcheck</package>
können zusätzliche benutzt werden, wenn Sie angepasst wurden,
um Eindring-Versuche zu erkennen. Siehe <ref id="custom-logcheck">.

<p>Außerdem kann jeder der Dateisystem-Integritäts-Checker (siehe
<ref id="check-integ">) können sehr nützlich sein, um Anomalien
in einer abgesicherten Umgebung zu erkennen. Ein erfolgreicher
Eindringling wird mit höchster Sicherheit Dateien auf dem lokalen


Dateisystem verändern, um die lokalen Sicherheits Regelungen zu
umgehen, Trojaner zu installieren, eigene User zu erstellen... solche
Sachen können mit ihnen erkannt werden.


<sect id="kernel-patches">nützliche Kernel-Patches

<p>FIXME: This section needs to cover how these specific patches
can be installed in Debian using the kernel-2.x.x-patch-XXX packages.
</p>

<p>Es gibt einige Kernel-Patches, die die System-Sicherheit signifikant
erhöhen. Hier sind einige davon aufgezählt:

<list>

<item>OpenWall Patch von Solar Designer. Sinnvoll für
Einschränkungen auf Kernel-Ebene, zum Beispiel bei Links, FIFOs in
<file>/tmp</file>, Einschränkungen von <file>/proc</file>, die
Behandlung spezieller Datei Deskriptoren, nicht-ausführbarer
Teil des User-Stack und noch mehr.

Homepage: <url name="http://www.openwall.com/linux/" id="http://www.openwall.com/linux/">

<item><em>LIDS &mdash; Linux intrusion detection system von Huagang Xie &amp;
Philippe Biondi</em>.  Dieser Patch macht es einfacher, ein sicheres
Linux System zu erstellen. Sie können jeden Prozess
einschränken, ihm bestimmte Rechte zum lesen und Schreiben von
Dateien gewähren, oder die Fähigkeit Dateien zu lesen ganz
entfernen. Weiterhin können Sie bestimmte einem Prozess auf
Ressourcen beschränken. Auch wenn er sich noch in der Beta-Phase
befindet, ist er fast schon ein Muss für den paranoiden
System-Administrator.

Homepage: <url name="http://www.lids.org" id="http://www.lids.org">

<item><em>POSIX Access Control Lists (ACLs) for Linux</em> Dieser Patch
führt Listen zur Zugangs Kontrolle (Access Control Lists (ACLs)),
eine fortgeschrittene Methoden die Zugriffe auf Dateien zu
beschränken, in den Linux Kernel ein.

Homepage: <url name="http://acl.bestbits.at/" id="http://acl.bestbits.at/">

<item><em>Linux trustees</em> Dieser Patch bringt ein anständig
erweitertes Rechte-System für Ihrem Linux Kernel. All die Objekte
werden im Kernel-Speicher abgelegt, was eine schnelles nachschlagen aller
Zugriffsrechte erlaubt.

Homepage:  <url name="http://trustees.sourceforge.net/" id="http://trustees.sourceforge.net/">

<item><em>International kernel patch</em>  Dies ist ein
Kryptographie-Patch für den Kernel, demzufolge müssen Sie die
jeweiligen Richtlinien des Landes über Verschlüsselung
beachten. Er stellt die grundlegenden Funktionen für
verschlüsselte Dateisysteme zur Verfügung.

Homepage: <url name="http://www.kerneli.org" id="http://www.kerneli.org">

<item><em>SubDomain</em> Eine Kernel Erweiterung um sicherere und
einfacher bedienbare Chroot-Umgebungen aufzusetzen. Sie können alle
Dateien, die ein Dienst in einer chroot-Umgebung benötigt, manuell angeben,
und müssen so die Dienste nicht statisch compilieren.

Homepage: <url name="http://www.immunix.org/subdomain.html" id="http://www.immunix.org/subdomain.html">

<item><em>UserIPAcct</em> Eigentlich nicht wirklich Sicherheits relevant
erlaubt dieser Patch es Ihnen, Quotas für den Traffic auf Ihrem
Server pro User einzuführen. Zusätzlich können Sie
Statistiken über den Traffic eines Users erstellen.

Homepage: <url id="http://ramses.smeyers.be/useripacct">.

<item><em>FreeS/WAN</em> Wenn Sie unter Linux IPSec benutzen wollen,
benötigen Sie diesen Patch. Sie können dann leicht VPNs
erstellen, sogar zu Windows-Maschinen, da IPSec ein gemeinsamer Standard
ist.

Homepage: <url id="http://www.freeswan.org">

</list>

<sect>Vermeiden von Root-Kits
<p>

<sect1 id="LKM">LKM - Ladbare Kernel-Module

<p>LKM (Loadable Kernel Modules) sind Dateien, die nachladbare Teile des
Kernels enthalten. Sie werden dynamisch in den Kernel geladen und
führen bestimmte Aufgaben aus. Unter GNU/Linux werden sie dazu
benutzt, die Funktionalität des Kernels zu erweitern. Wenn Sie LKMs
benutzen, genießen Sie einige Vorteile. Wie wir gesehen haben, können
Sie dynamisch nachgeladen werden, ohne dass der Kernel neu kompiliert
werden muss. Sie können bestimmte Geräte-Treiber (oder
Dateisysteme) und Treiber für andere Hardware, wie Sound- oder
Netzwerk-Karten, enthalten. Aber manche Cracker können LKMs für
Root-Kits (knark oder adore) benutzen, um auf GNU/Linux Systemen
Hinter-Türen zu installieren.

<p>LKM Root-Kits können Prozesse, Dateien, Verzeichnisse und sogar
Verbindungen verstecken, ohne den Quellcode irgendeines Binaries
verändern zu müssen. Zum Beispiel kann <prgn>ps</prgn> Prozess
Informationen aus <file>/proc</file> beziehen, ein bösartiges LKW
kann den Kernel untergraben, so dass er einen bestimmten Prozess vor dem
procfs verheimlicht. So kann noch nicht einmal eine selbst erstellte,
unangetastete Kopie des <prgn>ps</prgn> Binary alle Prozess Informationen
korrekt auflisten.

<sect1>Erkennen von Root-Kits

<p>Die Sucharbeit kann einfach und schmerzlos sein, oder schwierig und
ermüdend, ganz abhängig von der Maßnahme, die Sie benutzen. Es
gibt zwei Verteidigungs-Maßnahme zur Sicherheit bei LKMs, die pro-aktive,
und die reaktive.

<sect2>Pro-aktive Verteidigung

<p>Der Vorteil dieser Verteidigung ist, dass hier verhindert wird, dass
einige LKM Root-Kits dem System schaden. Die meist genutzte pro-aktive
Verteidigung ist es, <em>das Ziel zuerst zu erreichen</em>, also ein LKM
zu laden, das dazu da ist, das System vor Schaden durch ein
böswilliges LKM zu schützen. Eine andere Maßnahme ist es, dem
Kernel Fähigkeiten zu entziehen, und so das System sicherer zu
machen. Zum Beispiel können Sie dem Kernel die Fähigkeit
entziehen, Kernel-Module zu laden oder zu entfernen.

<p>Sie können auf Debian Systeme einige Pakete finden, die
Pro-aktive-Tools enthalten:

<list>
<item> <package>kernel-patch-2.4-lsm</package> - LSM ist das Linux Security
Modules framework

<item> <package>lcap</package> - Eine benutzerfreundliche Schnittstelle,
um dem Kernel <em>Fähigkeiten</em> zu entziehen (Kernel-basierte
Zugriffs-Kontrolle), um das System sicherer zu machen. Führen Sie
<tt>lcap CAP_SYS_MODULE</tt> 
<footnote>
Es gibt über 28 Fähigkeiten einschließlich:
<tt>CAP_BSET</tt>,
<tt>CAP_CHOWN</tt>,
<tt>CAP_FOWNER</tt>,
<tt>CAP_FSETID</tt>,
<tt>CAP_FS_MASK</tt>,
<tt>CAP_FULL_SET</tt>,
<tt>CAP_INIT_EFF_SET</tt>,
<tt>CAP_INIT_INH_SET</tt>,
<tt>CAP_IPC_LOCK</tt>,
<tt>CAP_IPC_OWNER</tt>,
<tt>CAP_KILL</tt>,
<tt>CAP_LEASE</tt>,
<tt>CAP_LINUX_IMMUTABLE</tt>,
<tt>CAP_MKNOD</tt>,
<tt>CAP_NET_ADMIN</tt>,
<tt>CAP_NET_BIND_SERVICE</tt>,
<tt>CAP_NET_RAW</tt>,
<tt>CAP_SETGID</tt>, 
<tt>CAP_SETPCAP</tt>,
<tt>CAP_SETUID</tt>,
<tt>CAP_SYS_ADMIN</tt>,
<tt>CAP_SYS_BOOT</tt>,
<tt>CAP_SYS_CHROOT</tt>,
<tt>CAP_SYS_MODULE</tt>,
<tt>CAP_SYS_NICE</tt>,
<tt>CAP_SYS_PACCT</tt>,
<tt>CAP_SYS_PTRACE</tt>,
<tt>CAP_SYS_RAWIO</tt>,
<tt>CAP_SYS_RESOURCE</tt>,
<tt>CAP_SYS_TIME</tt>, and
<tt>CAP_SYS_TTY_CONFIG</tt>. Alle können aktiviert oder deaktiviert
werden, um Ihren Kernel abzusichern.
</footnote>
aus, um sogar als Root-User keine Module mehr laden zu können.
<footnote>
Um dies tun zu können, müssen Sie nicht <package>lcap</package>
installieren, aber es ist so einfacher, als mit der Hand
<file>/proc/sys/kernel/cap-bound</file> anzupassen.
</footnote>
</list>

<p>Wenn Sie diese vielen Möglichkeiten auf Ihrem GNU/Linux System
nicht brauchen, möchten Sie vielleicht die Unterstützung
für ladbare Module während der Kernel Konfiguration abschalten.
So werden LKM Root-Kits vermieden, aber Sie können keinen
modulare Kernel benutzen. Beachten Sie auch, dass durch das Abschalten
der nachladbaren Module der Kernel überladen werden kann. Manchmal
ist dies nicht notwendig.

<p>Um die Unterstützung für nachladbare Module abzuschalten,
setzen Sie einfach CONFIG_MODULES=n in <file>.config</file>.

<sect2>Reaktive Verteidigung

<p>Der Vorteil reaktiver Verteidigung ist, dass das die System Ressourcen
weniger überlädt. Sie funktioniert durch das Vergleichen von einer Tabelle
für System-Aufrufe mit einer bekanntermaßen sauberen Kopie 
(System.map). Der augenscheinliche Nachteil ist, dass der
Systemadministrator erst davon erfährt, wenn das System bereits
kompromittiert wurde.

<p>Die Entdeckung von Root-Kits vollbringt unter Debian
<package>chkrootkit</package>. Das Programm <url name="Chkrootkit"
id="http://www.chkrootkit.org"> prüft Anzeichen von Root-Kits auf
dem lokalen System und stellt fest, ob der Computer mit einem Root-Kit
infiziert ist.

<p>Sie können auch <url name="KSTAT"
id="http://www.s0ftpj.org/en/site.html"> (Kernel Security Therapy Anti
Trolls) von S0ftproject group benutzen. KSTAT prüft den Bereich des
Kernel-Speichers (<file>/dev/kmem</file>) auf Informationen über den
Ziel Host, einschließlich der Installation von ladbaren
Kernel-Modulen.

<P>FIXME: Add info on how to compile the kernel w/o lkm support?


<sect>geniale/paranoide Ideen &mdash; was Sie tun können

<p>Dies ist wahrscheinlich der instabilste und lustigste Abschnitt, da
ich hoffe, dass manche der "Wow, das klingt verrückt" Ideen
realisiert werden. Nachfolgend einer Liste von ein paar Ideen &mdash;
abhängig von Ihrem Standpunkt aus können Sie sie für
genial, paranoid, verrückt oder sicher halten &mdash; um Ihre
Sicherheit schnell zu erhöhen. Unbeschädigt werden Sie sie aber
nicht überstehen.

<list>
<item>Mit PAM herum spielen. Wie in einem phrack 56 Artikel geschrieben:
Das schöne an PAM ist, dass "Ihrer Fantasie keine Grenzen
gesetzt sind." Das stimmt. Stellen Sie sich vor, Root kann sich nur mit
einen Fingerabdruck, oder Augen-Scan oder einer Kryptocard einloggen
(Warum habe ich hier nur "oder" und nicht "und" gesagt?).

<item>Faschistisches Logging. Ich würde sagen, dass alles, was wir
bisher über Logging besprochen haben, unter "weiches Loggen"
fällt. Wenn Sie echtes Logging betreiben wollen, besorgen Sie sich
einen Drucker mit Endlos-Papier, und loggen Sie alles dauerhaft, indem
Sie es drucken. Hört sich lustig an, ist aber zuverlässig und
kann nicht entfernt werden.

<item>CD Distribution. Diese Idee ist sehr leicht zu realisieren und
bewirkt ganz gute Sicherheit. Erstellen Sie eine abgesicherte Debian
Distribution, mit passenden Firewall-Regeln, erstellen Sie ein ISO-Image
und brennen Sie es auf CD. Machen Sie die CD bootbar. Dies ist eine nur
lesbare Distribution mit etwa 600 MB Platz für Dienste, und es ist
unmöglich für einen Eindringling Schreibzugriff auf dieses
System zu erhalten. Stellen Sie lediglich sicher, dass alle Daten, die
geschrieben werden sollen, über Netz gesichert werden. So kann der
Eindringling jedenfalls nicht die Firewall-Regeln oder
Routing-Einträge ändern, oder eigene Daemonen starten
(natürlich kann er es, aber wenn Sie neu booten, muss er sich erneut
in Ihr System hacken, um die Änderungen vorzunehmen).

<item>Schalten Sie die Modul-Fähigkeiten des Kernels ab. Wenn Sie
die Nutzung von Kernel-Modulen während der Kernel-Kompilierung
abschalten, werden viele Kernel basierende Hinter-Türen nicht
einsetzbar, da die meisten von ihnen darauf basieren, ein modifiziertes
Kernel Modul zu installieren.

<item>Loggen über ein serielles Kabel (von Gaby Schilders). So lange
Server immer noch serielle Schnittstellen haben: Stellen Sie sich vor, Sie
hätten eine Maschine als Log-Maschine, vom Netz abgeschnitten. In
der Mitte einen Multiplexer für serielle Schnittstellen (zyklisch
oder so). Jetzt sollen alle Ihre Server über Ihre seriellen
Schnittstellen loggen. Einfach nur hinschreiben. Die Log-Maschine
akzeptiert nur einfachen Text als Eingabe auf seiner seriellen
Schnittstelle und schreibt es lediglich in eine Log-Datei. Schließen Sie
einen CD- oder DVD-Brenner an. Wenn die Log-Datei 600MB erreicht wird sie
auf CD-ROM geschrieben. Wenn es jetzt nur noch CD-Brenner mit
automatischem Medien-Wechsel gäbe... Nicht so dauerhaft gespeichert
wie ein Ausdruck, aber man kann größere Mengen handhaben, und die
CDs nehmen nicht so viel Platz weg.

<item>Setzen Sie den ganzen Kram auf "immutable" (dem Tips-HOWTO von Jim
Dennis entnommen). Gerade nachdem Sie Ihr System installiert und
konfiguriert haben, gehen Sie durch <file>/bin</file>, <file>/sbin/</file>,
<file>/usr/bin</file>, <file>/usr/sbin</file> und <file>/usr/lib</file>
(und ein paar andere von den üblichen Verdächtigen) und gehen
Sie freizügig mit <prgn>chattr +i command</prgn> um. Machen Sie dies
auch mit den Kernel Dateien. Nun <prgn>mkdir /etc/.dist/</prgn>, und
kopieren Sie alles von <file>/etc/</file> an abwärts dort hinein
(ich mach das in zwei Schritten, indem ich ein
<file>/tmp/etcdist.tar</file> benutze, um Rekursionen zu vermeiden).
(Optional können Sie auch einfach nur ein
<file>/etc/.dist.tar.gz</file> erstellen) -- und markieren Sie alles als
"immutable".

<p>Der Grund für all dies ist, den Schaden zu begrenzen, den Sie
anrichten können, wenn Sie als root eingeloggt sind. Sie können
keine Dateien mit einer fehlgeleiteten Umleitung überschreiben, und
Sie werden Ihr System nicht durch ein fehl-platziertes Leerzeichen im
<prgn>rm -fr</prgn> Kommando unbenutzbar machen (Sie können aber
Ihren Daten immer noch einigen Schaden zufügen &mdash; aber Ihre
Bibliotheken und Programme sind sicherer).

<p>Dies macht auch verschiedene Sicherheits- und Denial-of-Service
Exploits entweder unmöglich oder weitaus schwieriger (da viele von
ihnen darauf beruhen, Dateien durch die Aktionen von SUID Programmen, die
<em>isn't providing an arbitrary shell command</em><!--todo:
uebersetzen-->, zu überschreiben).

<p>Die einzige Unbequemlichkeit dabei ist es, wenn Sie irgendetwas bauen
und ein <prgn>make install</prgn> auf verschiedene System-Binaries
machen. Auf der anderen Seite verhindert dies auch, dass <prgn>make
install</prgn> Dateien überschreibt. Wenn Sie vergessen, das
Makefile zu lesen und die Dateien, die überschrieben werden sollen
mit chattr -i zu behandeln (und die Verzeichnisse, in denen Sie neue
Dateien erstellen wollen) &dash; schlägt das make fehl, Sie
müssen nur das chattr Kommando ausführen und make neu aufrufen.
Sie können diese Gelegenheit gleich dazu benutzen, Ihre alten bin's,
libs oder was-auch-immer in ein .old-Verzeichnis zu sichern, oder
umzubenennen, oder sie zu tarnen, oder sowas.

<p>Beachten Sie, dass dies Sie auch daran hindert, die Pakete Ihres
Systems zu aktualisieren, da die Dateien aus den Paketen nicht
überschrieben werden können. Also möchten Sie vielleicht
einen Mechanismus, der das immutable-Flag auf allen Dateien deaktiviert,
bevor Sie ein <prgn>apt-get update</prgn> ausführen.


</list>


<sect1>Aufstellen eines Honigtopfes (honeypot)

<p>FIXME: More Content specific to Debian needed.

<p>Wenn Sie wollen (und es implementieren können und ihm Zeit widmen
können), können Sie einen vollen Honeypot mit einem Debian
GNU/Linux System aufsetzen. Sie haben alle benötigten Werkzeuge, um
einen allumfassendes Honeynet aufzubauen (d.h. das Netzwerk, der Honeypot
ist lediglich ein falsche Server): Die Firewall, das Netzwerk
Eindringlings-Erkennungs-System, und den falschen Server. Seien Sie aber
vorsichtig, Sie müssen ziemlich sicher sein, dass Sie rechtzeitig
alarmiert werden (siehe <ref id="log-alerts">), so dass Sie geeignete
Maßnahmen einleiten können und die Kompromittierung, sobald Sie
genug gesehen haben, beenden können.

<list>

<item>Die Notwendige Firewall-Technologie (durch den Linux-Kernel
verfügbar)

<item><package>syslog-ng</package> um die Logs des Honeypot zu dem
fern-Syslog einer Server-Maschine zu schicken.

<item><package>snort</package> um allen eingehenden Netzwerk Verkehr auf
den Honeypot mit zuschneiden und Angriffe zu erkennen

<item><package>osh</package> das Sie dazu benutzen können, um eine
eingeschränkte Shell mit Protokoll zu bauen (siehe den Artikel von
Lance Spitzner weiter unten)

<item>Natürlich alle Server, die Ihnen einfallen für die
falschen Server des Honeypots (aber sichern Sie <em>nicht</em> den
Honeypot).

<item>und falsche Dienste, verfügbar durch <package>dtk</package>,
wenn Sie das Honeynet auch als Eindringlings-Erkennungs-Dienst benutzen
wollen.

<item>Integritäts Prüfer (siehe <ref id="check-integ">) und The
Coroner's Toolkit (<package>tct</package>), um nach dem Angriff eine
Analyse durchzuführen.

</list>

<p>Sie können mehr über das Aufstellen von Honeypots in Lanze
Spitzners exzellentem Artikel <url
id="http://www.net-security.org/text/articles/spitzner/honeypot.shtml"
name="To Build a Honeypot"> (aus der Know your Enemy Serie) oder
David Raikow's <url
id="http://www.zdnetindia.com/techzone/resources/security/stories/7601.htm"
name="Building your own honeypot"> lesen.
Außerdem ist das <url id="http://project.honeynet.org/" name="Honeynet
Project"> dem Aufstellen von Honeypots und der Analyse von Angriffen auf
sie gewidmet. Dort gibt es wertvolle Informationen über das
aufsetzen von Honeypots und die Analyse der Resultate eines Angriffs
(sehen Sie sich den Contest an).
