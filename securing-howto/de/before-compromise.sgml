<!-- CVS revision of original english document "1.5" -->

<chapt>Vor der Kompromittierung

<sect id="keep-up-to-date">Fortlaufende Aktualisierung des Systems

<p>Sie sollten regelmäßig Sicherheitsaktualisierungen durchführen. Der ganz
überwiegende Anteil der Exploits nutzt bekannte Sicherheitslücken aus, die
nicht rechtzeitig ausgebessert wurden. Dies wird in der <url
id="http://www.cs.umd.edu/~waa/vulnerability.html" name="Veröffentlichung von
Bill Arbaugh"> dargestellt, die 2001 auf dem IEEE Symposium on Security and
Privacy vorgestellt wurde. Das Durchführen einer Aktualisierung wird unter <ref
id="security-update"> beschrieben.


<sect1>Überprüfung von Hand, welche Sicherheitsaktualisierungen verfügbar sind

<p>Debian besitzt ein Werkzeug, um zu überprüfen, ob ein System aktualisiert
werden muss (siehe Tiger unten). Viele Nutzer wollen aber einfach von Hand
überprüfen, ob Sicherheitsaktualisierungen für ihr System zur Verfügung stehen.

<p>Wenn Sie Ihr System nach der Beschreibung unter <ref id="security-update">
eingerichtet haben, müssen Sie nur folgenden tun:

<example>
# apt-get update
# apt-get upgrade -s
</example>

<p>Die erste Zeile wird die Liste der verfügbaren Pakete von den festgelegten
Paketquellen herunterladen. Die Option <tt>-s</tt> wird eine Simulation
durchführen, d.h. es werden <em>keine</em> Pakete heruntergeladen oder
installiert. Vielmehr teilt es Ihnen mit, welche heruntergeladen und
installiert werden sollen. Durch dieses Ergebnis könnten Sie erfahren, welche
Pakete von Debian ausgebessert wurden und als Sicherheitsaktualisierung
verfügbar sind. Zum Beispiel:

<example>
# apt-get upgrade -s
Reading Package Lists... Done
Building Dependency Tree... Done
2 packages upgraded, 0 newly installed, 0 to remove and 0  not upgraded.
Inst cvs (1.11.1p1debian-8.1 Debian-Security:3.0/stable)
Inst libcupsys2 (1.1.14-4.4 Debian-Security:3.0/stable)
Conf cvs (1.11.1p1debian-8.1 Debian-Security:3.0/stable)
Conf libcupsys2 (1.1.14-4.4 Debian-Security:3.0/stable)
</example>

<p>In diesem Beispiel können Sie erkennen, dass auf dem System cvs und cupsys
mit neuen Versionen aus <em>Woodys</em> Sicherheitsarchiv aktualisiert werden
müssen. Um herauszufinden, warum eine Aktualisierung notwendig ist, sollten Sie
<url id="http://security.debian.org"> besuchen und sich ansehen, welche
aktuellen Debian-Sicherheitshinweise (Debian Security Advisories) zu diesen
Paketen veröffentlicht wurden. In unserem Fall sind die zugehörigen DSAs <url
id="http://www.debian.org/security/2003/dsa-233" name="DSA-233"> (für cvs) und
<url id="http://www.debian.org/security/2003/dsa-232" name="DSA-232"> (für
cupsys).


<sect1 id="cron-apt">Automatisches Überprüfung von Aktualisierungen mit
cron-apt

<p>Eine andere Methode für automatische Sicherheitsaktualisierungen ist die
Verwendung von <package>cron-apt</package>. Dieses Paket stellt ein Werkzeug
zur Verfügung, mit dem das System in regelmäßigen Abständen (mit einem Cronjob)
aktualisiert wird. Standardmäßig wird es die Paketliste aktualisieren und neue
Pakete herunterladen. Es kann auch so konfiguriert werden, dass es Mails an den
Systemadministrator schickt.

<p>Hinweis: Wenn Sie vorhaben, Ihr System automatisch zu aktualisieren (auch
wenn Sie sich nur die Pakete herunterladen), sollten Sie sich vielleicht die
Distributionsversion ansehen, wie in <ref id="check-releases"> beschrieben
wird. Anderenfalls können Sie sich nicht sicher sein, dass die
heruntergeladenen Pakete wirklich aus einer vertrauenswürdigen Quelle stammen.


<sect1>Verwendung von Tiger, um automatisch Sicherheitsaktualisierungen
überprüfen 

<p>Wenn Sie nach einem Programm suchen, das schnell die Verwundbarkeit des
Systems überprüft und gefundene Sicherheitslücken meldet, sollten Sie das Paket
<package>tiger</package> ausprobieren. Das Paket besteht aus einer Anzahl von
Skripten für die Bourne-Shell, C-Programmen und Datendateien, die dazu
verwendet werden, um Sicherheitsaudits durchzuführen. Das Paket in Debian
GNU/Linux beinhaltet zusätzliche Erweiterungen, die auf die Debian Distribution
abgestimmt sind. Damit stehen mehr Funktionen zur Verfügung als in den
Tigerskripten von TAMU (oder sogar von TARA, eine Tigerversion, die von ARSC
vertrieben wird). Lesen Sie für weitere Informationen die Datei
<file>README.Debian</file> und das Handbuch <manref section="8" name="tiger">.

<p>Eine dieser Verbesserungen ist das Skript
<tt>deb_checkadvisories</tt>. Diese Skript verwendet eine Liste von DSAs und
gleicht sie mit den installierten Paketen ab. Es meldete dann alle Pakete, die
laut dem Debian Security Team verwundbar sind. Dies ist eine etwas andere,
allgemeinere Herangehensweise als im Tigerskript <tt>check_signatures</tt>, das
die MD5-Summen von Programmen mit bekannten Lücken testet.

<p>Da Debian im Moment keine Liste der MD5-Summen von Programmen mit bekannten
Lücken liefert (wie sie von anderen Betriebssystemen wie Sun Solaris verwendet
wird), wird die <em>Überprüfung-der-DSAs-Herangehensweise</em> verwendet. Das
Problem sowohl der Herangehensweise mit DSAs als auch der mit MD5-Summen ist,
dass die Signaturen regelmäßig aktualisiert werden müssen.

<p>Im Moment wird das dadurch gelöst, indem einen neue Version des Tigerpakets
erstellt wird. Aber es steht nicht fest, dass der Paketbetreuer jedesmal eine
neue Version erstellt, wenn ein DSA bekannt gegeben wird. Eine nette
Erweiterung, die aber noch nicht implementiert ist, wäre es, wenn das
eigenständig durchgeführt wird. Das umfasst, dass die DSAs aus dem Netz
heruntergeladen werden, eine Liste erstellt wird und dann die Prüfung
durchgeführt wird. Die DSAs werden im Moment aus der lokalen CVS-Aktualisierung
der WML-Quellen des Betreuers aktualisiert, die dazu verwendet werden, <url
id="http://security.debian.org"> (der Webserver) zu erstellen .

<p>Ein Programm wäre wünschenswert, das die DSAs, die per E-Mail empfangen
wurden oder auf security.debian.org verfügbar sind, analysiert und dann die
Datei erstellt, die von <tt>deb_checkadvisories</tt> verwendet wird, um
Verwundbarkeiten zu bestätigen. Schicken Sie es als einen Fehlerbericht von
<package>tiger</package>.

<p>Die erwähnte Überprüfung wird über die Standardkonfiguration des Programms
ausgeführt, wenn sie einmal eingerichtet wurde (siehe
<file>/etc/tiger/cronrc</file>):

<example>
# Check for Debian security measures every day at 1 AM
#
1 * *   deb_checkmd5sums deb_nopackfiles deb_checkadvisories
#
</example>

<p>Es gibt noch eine zusätzliche Überprüfung, die Sie vielleicht hinzufügen
sollten, und welche noch kein Bestandteil des
Standard-<prgn>Cron</prgn>-Skripts ist. Diese Überprüfung ist das Skript
<tt>check_patches</tt>, das auf folgende Art und Weise funktioniert:

<list>

<item>führt <tt># apt-get update</tt> aus.

<item>überprüft, ob neue Pakete verfügbar sind.

</list>

<p>Wenn Sie ein <em>Stable</em>-System betreiben und Sie die
<prgn>Apt</prgn>-Quellen security.debian.org in Ihre
<file>/etc/apt/sources.list</file> eingetragen haben (wie in <ref
id="security-update"> beschrieben), wird dieses Skript Ihnen mitteilen können,
ob neue Pakete verfügbar sind, die Sie installieren sollten. Da die einzigen
Pakete, die sich bei dieser Einstellung verändern, Sicherheitsaktualisierungen
sind, bekommen Sie genau das, was Sie wollen.

<p>Das funktioniert natürlich nicht, wenn Sie <em>testing</em> oder
<em>sid/unstable</em> am Laufen haben, da zurzeit die neuen Pakete zahlreicher
sind als die Sicherheitsaktualisierungen.

<p>Sie können dieses Skript den Überprüfungen hinzufügen, die vom
<prgn>Cron</prgn>-Job durchgeführt werden (in der obigen
Konfigurationsdatei). Dadurch würde <prgn>tigercron</prgn> Mails mit neuen
Paketen verschicken (an denjenigen, der von <tt>Tiger_Mail_RCPT</tt> in
<file>/etc/tiger/tigerrc</file> bezeichnet wurde).

<example>
# Check for Debian security measures every day at 1 am
#
1 * *   deb_checkmd5sums deb_nopackfiles check_patches
#
</example>


<sect1>Andere Methoden für Sicherheitsaktualisierungen

<p>Sie sollten auch einen Blick auf <url
id="http://therapy.endorphin.org/secpack/" name="secpack"> werfen. Es ist ein
inoffizielles Programm, um Sicherheitsaktualisierungen von security.debian.org
mit Prüfung der Signatur durchzuführen. Es wurde von Fruhwirth Clemens
geschrieben.


<sect1>Vermeiden Sie den Unstable-Zweig

<p>Falls Sie nicht Zeit darauf verwenden wollen, selbst Pakete zu patchen, wenn
Verwundbarkeiten entdeckt werden, sollten Sie auf produktiven Systemen
<em>nicht</em> Debians Unstable-Zweig verwenden. Der Hauptgrund dafür ist, dass
es für <em>Unstable</em> keine Sicherheitsaktualisierungen gibt (siehe <ref
id="sec-unstable">).

<p>Es ist eine Tatsache, dass manche Sicherheitsprobleme nur in Unstable
auftreten und <em>nicht</em> in <em>Stable</em>. Das rührt daher, dass dort
ständig neue Funktionen zu den Anwendungen hinzugefügt werden und auch neue
Anwendungen aufgenommen werden, die unter Umständen noch nicht vollständig
getestet wurden.

<p>Um im <em>Unstable</em>-Zweig Sicherheitsaktualisierungen durchzuführen,
müssen Sie vielleicht eine vollständige Aktualisierung mit einer neuen Version
durchführen (was viel mehr als nur das betroffene Pakete aktualisieren
könnte). Sicherheitsaktualisierungen wurden - mit Ausnahmen - nur in den
<em>Stable</em>-Zweig zurückportiert. Die Grundidee ist, dass zwischen den
Aktualisierungen <em>kein neuer Code</em> hinzugefügt werden sollte, sondern
nur Beseitigungen von wichtigen Problemen.


<sect1>Vermeiden Sie den Testing-Zweig

<p>Wenn Sie den <em>Testing</em>-Zweig verwenden, müssen Sie einige
Problemkreise hinsichtlich der Verfügbarkeit von Sicherheitsaktualisierugen in
Betracht ziehen:

<list>

<item>Wenn eine Sicherheitslücke geschlossen wurde, portiert das Security Team
den Patch nach <em>Stable</em> zurück (da Stable normalerweise einige Minor-
oder Majorversionen zurückliegt). Die Paketbetreuer sind dafür verantwortlich,
Pakete für den <em>Unstable</em>-Zweig vorzubereiten. Grundlage dafür ist
normalerweise eine neue Veröffentlichung des Originalprogramms. Manchmal
ereignen sich die Änderungen fast zur selben Zeit, und manchmal enthält eine
der Veröffentlichungen eine Ausbesserung einer Sicherheitslücke vor einer
anderen. Pakete in <em>Stable</em> werden gründlicher getestet als die in
<em>Unstable</em>, da letztere in den meisten Fällen die neueste
Veröffentlichung des Originalprogramms enthält (welches neue, unbekannte Fehler
enthalten könnte).

<item>Gewöhnlich sind Sicherheitsaktualisierungen für den
<em>Unstable</em>-Zweig verfügbar, wenn der Paketbetreuer ein neues Paket
baut, und für den <em>Stable</em>-Zweig, wenn das Security Team eine neue
Version hochlädt und ein DSA veröffentlicht. Beachten Sie, dass beides nicht
des <em>Testing</em>-Zweig verändert.

<item>Wenn keine (neuen) Fehler in der <em>Unstable</em>-Version des Pakets
entdeckt werden, wandert es nach ein paar Tagen nach <em>Testing</em>. Das
dauert normalerweise zehn Tage. Es hängt allerdings von der Priorität des
Hochladens der Veränderung ab und davon, ob das Paket am Eingehen in Testing
gehindert ist, da Abhängigkeiten nicht aufgelöst werden können. Beachten Sie,
dass wenn das Paket daran gehindert ist, nach Testing zu wandern, auch die
Priorität des Hochladens daran nichts ändern kann.

</list>

<p>Dieses Verhalten könnte sich je nach dem Status der Veröffentlichung der
Distribution verändern. Wenn eine Veröffentlichung unmittelbar bevorsteht,
werden auch das Security Team oder die Paketbetreuer direkt Aktualisierungen
für Testing zur Verfügung stellen.


<sect1>Automatische Aktualisierungen in einem Debian GNU/Linux System

<p>Es sei vorweggeschickt, dass automatische Aktualisierungen nicht vollständig
empfohlen werden, da Administratoren die DSAs durchsehen und die Bedeutung
einer bestimmten Sicherheitsaktualisierung verstehen sollten.

<p>Wenn Sie Ihr System automatisch aktualisieren wollen, sollten Sie folgendes durchführen:

<list>

<item>Konfigurieren Sie <prgn>apt</prgn> so, dass Pakete, die Sie nicht
aktualisieren wollen, ihrer momentane Version beibehalten. Das können Sie
entweder mit einer Eigenschaft von <prgn>apt</prgn>, dem <em>pinning</em>
(festheften), erreichen, oder Sie kennenzeichnen sie mit <prgn>dpkg</prgn> oder
<prgn>dselect</prgn> als <em>hold</em> (festgehalten).

<p>Um Pakete einer bestimmten Veröffentlichung mit pinning festzuheften, müssen
Sie <file>/etc/apt/preferences</file> bearbeiten (siehe <manref section="5"
name="apt_preferences">) und folgendes hinzufügen:

<example>
  Package: *
  Pin: release a=stable
  Pin-Priority: 100
</example>
<p>FIXME: verify if this configuration is OK.

<item>Entweder setzen Sie cron-apt ein, wie in <ref id="cron-apt"> beschrieben
wird, und erlauben ihm, heruntergeladene Pakete zu installieren. Oder Sie fügen
selbst einen Eintrag für <prgn>cron</prgn> hinzu, damit die Aktualisierung
täglich ausgeführt wird. Ein Beispiel:

<example>
  apt-get update && apt-get -y upgrade
</example>

<p>Die Option <tt>-y</tt> veranlasst <prgn>apt</prgn>, für alle Fragen, die
während der Aktualisierung auftreten können, 'yes' anzunehmen. In manchen
Fällen sollten Sie die Option <tt>--trivial-only</tt> (nur Bagatellen) der
Option <tt>--assume-yes</tt> (ist gleichbedeutend mit <tt>-y</tt>).
<footnote>
Sie können auch die Option <tt>--quiet</tt> (<tt>-q</tt>) verwenden. Sie
verringert die Ausgabe von <prgn>apt-get</prgn> und wird keine Ausgabe
produzieren, wenn keine Pakete installiert werden.
</footnote>

<item>Richten Sie <prgn>cron</prgn> so ein, dass <prgn>debconf</prgn> während
der Aktualisierung keine Eingabe verlangt. Auf diese Weise können
Aktualisierungen nicht-interaktiv durchgeführt werden.
<footnote>
Beachten Sie, dass einige Pakete <em>nicht</em> <prgn>debconf</prgn> verwenden
könnten. Die Aktualisierung könnte dann hängen bleiben, da Pakete während
ihrer Konfiguration Eingaben des Nutzers verlangen.
</footnote>

<item>Überprüfen Sie die Ergebnisse der Ausführung von <prgn>cron</prgn>, die
an den Superuser gemailt werden (sofern nicht die Umgebungsvariable
<tt>MAILTO</tt> im Skript geändert wurde).

</list>

<p>Eine sichere Alternative könnte es sein, die Option <tt>-d</tt> (oder
<tt>--download-only</tt>) zu verwenden. Das hat zur Folge, dass die benötigten
Pakete nur heruntergeladen, aber nicht installiert werden. Und wenn dann die
Ausführung von <prgn>cron</prgn> zeigt, dass das System aktualisiert werden
muss, kann das von Hand vorgenommen werden.

<p>Um diese Aufgaben zu erfüllen, muss das System korrekt konfiguriert sein, um
Sicherheitsaktualisierungen herunterzuladen. Dies wurde in <ref
id="security-update"> diskutiert.

<p>Allerdings wird dieses Vorgehen ohne eine genaue Analyse nicht für
<em>Unstable</em> empfohlen, da Sie Ihr System in einen unbrauchbaren Zustand
bringen können, wenn sich ein gravierender Fehler in ein wichtiges Paket
eingeschlichen hat und auf Ihrem System installiert wird. <em>Testing</em> ist
vor diesem Problem etwas besser <em>geschützt</em>, da gravierende Fehler eine
bessere Chance haben entdeckt zu werden, bevor das Paket in den Testing-Zweig
wandert (obwohl Ihnen trotzdem <em>keine</em> Sicherheitsaktualisierungen zur
Verfügung stehen).

<p>Wenn Sie eine gemischte Distribution haben, also eine Installation von
<em>Stable</em> mit einige Pakete aus <em>Testing</em> oder <em>Unstable</em>,
können Sie mit den Pinning-Eigenschaften oder der Option
<tt>--target-release</tt> von <prgn>apt-get</prgn> herumspielen, um
<em>nur</em> die Pakete zu aktualisieren, die Sie früher aktualisiert haben.
<footnote>
Dies ist ein verbreitest Problem, da viele Nutzer ein stabiles System
betreiben wollen, aber einige Pakete aus <em>Unstable</em> einsetzen, um die
neusten Funktionen zu haben. Das kommt daher, dass sich manche Projekte
schneller entwickeln als die Veröffentlichungen von Debians <em>Stable</em>.
</footnote>


<sect id="periodic-integrity">Periodische Überprüfung der Integrität

<p>Mit Hilfe der Basisinformationen, die Sie nach der Installation erstellt
haben (also mit dem Schnappschuss, der in <ref id="snapshot"> beschrieben wird,
sollte es Ihnen möglich sein, von Zeit zu Zeit die Integrität des Systems zu
überprüfen. Eine Integritätsprüfung kann Veränderungen am Dateisystem entdecken,
die durch einen Eindringling oder einen Fehler des Systemadministrators
entstanden sind.

<p>Überprüfungen der Integrität sollen, wenn möglich, von außerhalb
durchgeführt werden
<footnote>
Ein leichter Weg, das ist tun, ist die Verwendung einer Live-CD wie <url
id="http://www.knoppix-std.org/" name="Knoppix Std">, die sowohl die Programme
zur Integritätsprüfung als auch die dazugehörige Datenbank enthält.
</footnote>
. Das bedeutet, dass das Betriebssystem des überprüften Systems nicht verwendet
wird, um den falschen Eindruck von Sicherheit (also falsche Negative) zu
verhindern, der z.B. durch installierte Rootkits entstehen könnte. Die
Datenbank, mit der das System verglichen wird, sollte sich daher auf einem
nur-lesbaren Medium befinden.

<p>Falls der Einsatz eines außenstehenden Systems keine Möglichkeit ist,
sollten Sie in Betracht ziehen, die Integritätsprüfung mit den verfügbaren
Werkzeugen zur Prüfung der Integrität des Dateisystem durchzuführen. Allerdings
sollten Vorsichtsmaßnahmen getroffen werden: Die Datenbank für die
Integritätsprüfung sollte nur-lesbar sein, und Sie sollten auch sicherstellen,
dass das Programm, das die Integrität überprüft, (und der Kernel des
Betriebssystems) nicht manipuliert wurde.

<p>Einige Werkzeuge, die im Abschnitt über Programme zur Integritätsprüfung
beschrieben wurden, wie z.B. <prgn>aide</prgn>, <prgn>integrit</prgn> und
<prgn>samhain</prgn>, sind schon so eingerichtet, dass sie regelmäßige
Nachprüfungen durchführen (mittels crontab in den ersten beiden Fällen und
mittels eines eigenständigen Daemons bei <prgn>samhain</prgn>). Sie können den
Administrator auf verschiedenen Wegen warnen (normalerweise E-Mail, aber
<prgn>samhain</prgn> kann auch Seiten, SNMP-Traps oder einen Alarm an syslog
schicken), wenn sich das Dateisystem verändert.

<p>Wenn Sie eine Sicherheitsaktualiserung des System vorgenommen haben, müssen
Sie natürlich den Schnappschuss des Systems neu aufzeichnen, um ihn an die
Änderungen durch die Sicherheitsaktualisierung anzupassen.

</sect>


<sect id="intrusion-detect">Aufsetzen einer Eindringlingserkennung

<p>Debian GNU/Linux enthält Programme zur Erkennung von
Eindringlingen. Das sind Programme, die unpassende oder bösartige Aktivitäten
auf Ihrem lokalen System oder auf anderen System in Ihrem lokalen Netzwerk
entdecken. Diese Art von Verteidigung ist wichtig, wenn das System sehr
entscheidend ist oder Sie wirklich unter Verfolgungswahn leiden. Die
gebräuchlichsten Herangehensweisen sind die statistische Entdeckung von
Unregelmäßigkeiten und die Entdeckung bestimmter Muster.

<p>Beachten Sie immer, dass Sie einen Alarm-und-Antwort-Mechanismus brauchen,
um Ihre Systemsicherheit mit einer dieser Werkzeuge wirklich zu
verbessern. Eindrinlingserkennung ist Zeitverwendung, wenn Sie niemanden
alarmieren werden.

<p>Wenn ein bestimmter Angriff entdeckt worden ist, werden die meisten
Programme zur Eindringlingserkennung entweder den Vorfall mit
<prgn>syslog</prgn> protokollieren oder E-Mails an Root schicken (der Empfänger
der E-Mails kann normalerweise eingestellt werden). Ein Administrator muss die
Programme passend konfigurieren, so dass falsche Positivmeldungen keinen Alarm
auslösen. Alarme können auf einen laufenden Angriff hindeuten und wären später
- sagen wir mal am nächsten Tag - nicht mehr
nützlich, da der Angriff dann bereits erfolgreich beendet worden
sein könnte. Stellen Sie also sicher, dass es eine passende Regelung
über die Handhabung von Alarmen gibt, und dass technische Maßnahmen zur
Umsetzung dieser Regelung vorhanden sind.

<p>Eine interessante Quelle für Information ist
<url id="http://www.cert.org/tech_tips/intruder_detection_checklist.html"
name="CERT's Intrusion Detection Checklist">


<sect1>Netzwerk basierende Eindringlingserkennung

<p>Programme, die der Netzwerk basierende Eindringlingserkennung dienen,
überwachen den Verkehr eines Netzwerkabschnitts und arbeiten auf Grundlage
dieser Daten. Genauer ausgedrückt, es werden die Pakete im Netzwerk untersucht,
um festzustellen, ob sie mit bestimmten Merkmalen übereinstimmen.

<p><package>Snort</package> ist ein vielseitiger Paketschnüffler oder logger,
der Angriffe mit einer Bibliothek von Angriffssignaturen erkennt. Es erkennt
eine breite Palette von Angriffen und Tests, wie zum Beispiel Pufferüberläufe,
verdecktes Abtasten von Ports (stealth port scans), CGI Angriffe, SMB Tests und
vieles mehr. <prgn>Snort</prgn> hat auch die Fähigkeit, einen zeitnahen Alarm
auszulösen. Dies ist in Werkzeug, das auf jedem Router installiert werden
sollte, um ein Auge auf Ihr Netzwerk zu haben.  Installieren Sie es einfach mit
<tt>apt-get install snort</tt>, beantworten Sie den Fragen und beobachten Sie
die logs. Für einen etwas breiteren Sicherheitsrahmen sollten Sie sich <url
id="http://www.prelude-ids.org" name="Prelude"> ansehen.

<p>Debians Paket <package>Snort</package> hat viele Sicherheitstests
standardmäßig eingeschaltet. Jedoch sollten Sie die Konfiguration anpassen, um
die Dienste, die auf Ihrem System laufen, zu berücksichtigen. Sie möchten
vielleicht auch zusätzliche Tests speziell für diese Dienste nutzen.

<p><em>Achtung:</em> Das Paket snort aus Woody ist ziemlich veraltet und könnte
sogar <url
id="http://lists.debian.org/debian-devel/2003/debian-devel-200308/msg02105.html"
name="fehlerhaft"> sein. Sie erhalten zurückportierte (und signierte)
Snort-Pakete, die vom Paketbetreuer angeboten werden, unter <url
id="http://people.debian.org/~ssmeenk/snort-stable-i386/">.

<p>Es gibt noch andere, einfachere Werkzeuge, die dazu benutzt werden können,
Angriffe auf das Netzwerk zu erkennen. <package>Portsentry</package> ist ein
interessantes Paket, dass Sie warnen kann, wenn jemand Ihre Rechner scannt.
Auch andere Programme wie <package>ippl</package> oder
<package>iplogger</package> erkennen bestimmte IP (TCP und ICMP) Angriffe, auch
wenn sie nicht so fortgeschrittenen Techniken zur Erkennung von
Netzwerkangriffen wie <prgn>snort</prgn> haben.

<p>Sie können jedes dieser Werkzeuge mit dem Paket <prgn>idswakeup</prgn>
testen. Das ist ein Shell-Skript, das falsche Alarme verursacht und Signaturen
vieler gebräuchlicher Angriffe enthält.


<sect1>Host basierende Eindringlingserkennung 

<p>Eine Eindringlingserkennung, die auf einem Host basiert, beruht darauf,
Software auf dem zu überwachenden System zu laden, die Log-Dateien und die
Auditing-Programme des Systems als Datengrundlage verwendet. Sie sucht nach
verdächtigen Prozessen, kontrolliert den Zugang zum Host und überwacht
u.U. auch Änderungen an kritischen Systemdateien.

<p><package>Tiger</package> ist ein älteres Programm zur
Eindringlingserkennung, dass seit der Woody-Distribution auf Debian portiert
wurde. <prgn>Tiger</prgn> bietet Tests von verbreiteten Problemen in
Zusammenhang mit Einbrüchen, wie der Stärke von Passwörtern, Problemen mit dem
Dateisystem, kommunizierenden Prozessen und anderen Möglichkeiten, mit denen
Root kompromittiert werden könnte. Dieses Paket umfasst neue, debianspezifische
Sicherheitstests, einschließlich der MD5-Summen von installierten Programmen,
des Orts von Dateien, die zu keinem Paket gehören und einer Analyse von
lokalen, lauschenden Prozessen. Die Standardinstallation lässt
<prgn>tiger</prgn> einmal am Tag laufen und einen Bericht erstellen, der an den
Superuser geschickt wird und Informationen zu möglichen Kompromittierungen
enthält.

<p>Programme zur Protokollanalyse, wie zum Beispiel <package>logcheck</package>
können zusätzliche benutzt werden, um Einbruchsversuche zu erkennen. Siehe <ref
id="custom-logcheck">.

<p>Daneben können Pakete, die die Integrität des Dateisystems überwachen (siehe
<ref id="check-integ">), sehr nützlich sein, um Anomalien in einer
abgesicherten Umgebung zu erkennen. Ein erfolgreicher Einbruch wird
höchstwahrscheinlich Dateien auf dem lokalen Dateisystem verändern, um die
lokalen Sicherheitsregelungen zu umgehen, Trojaner zu installieren oder Nutzer
zu erstellen. Solche Ereignisse können mit Prüfwerkzeugen der
Dateisystemintegrität erkannt werden.


<sect>Vermeiden von Root-Kits

<sect1 id="LKM">Ladbare Kernel-Module (LKM)

<p>Ladbare Kernel-Module sind Dateien, die nachladbare Teile des Kernels
enthalten. Sie werden dazu verwendet, die Funktionalität des Kernel zu
erweitern. Der Hauptnutzen des Einsatzes von Modulen liegt darin, dass Sie
zusätzliche Geräte wie eine Ethernet- oder Soundkarte hinzuzufügen können, ohne
dass die Kernelquelle gepatcht und der gesamte Kernel neu übersetzt werden
müsste. Allerdings können Cracker LKMs für Root-Kits (knark und adore)
benutzen, um auf GNU/Linux Systemen Hintertüren zu öffnen.

<p>LKM-Hintertüren sind ausgeklügelter und schwere zu entdecken als
traditionelle Root-Kits. Sie können Prozesse, Dateien, Verzeichnisse und sogar
Verbindungen verstecken, ohne den Quellcode der Programme verändern zu
müssen. Zum Beispiel kann ein bösartiges LKM den Kernel dazu zwingen, bestimmte
Prozesses vor <file>procfs</file> zu verstecken, so dass nicht einmal eine
bekanntermaßen gute Kopie des Programms <prgn>ps</prgn> alle Informationen über
die aktuellen Prozesse korrekt auflisten.


<sect1>Erkennen von Root-Kits

<p>Es gibt zwei Herangehensweisen, um Ihr System gegen LKM-Root-Kits zu
verteidigen: die aktive Verteidigung und die reaktive Verteidigung.  Die
Sucharbeit kann einfach und schmerzlos sein, oder schwierig und ermüdend, ganz
abhängig von der Maßnahme, die Sie ergreifen.


<sect2 id="proactive">Aktive Verteidigung

<p>Der Vorteil dieser Art der Verteidigung ist, dass schon verhindert wird,
dass das System Schaden nimmt. Eine mögliche Strategie ist <em>das Ziel zuerst
zu erreichen</em>, also ein LKM zu laden, das dazu da ist, das System vor
anderen böswilligen LKMs zu schützen. Eine andere Maßnahme ist es, dem Kernel
Fähigkeiten zu entziehen. Zum Beispiel können Sie aus dem Kernel vollständig
die Fähigkeit von ladbaren Kernel-Modulen entfernen. Beachten Sie allerdings,
dass es Root-Kits gibt, die selbst in diesen Fällen funktionieren. Es gibt auch
welche, die direkt <file>/dev/kmem</file> (Kernelspeicher) manipulieren, um
sich zu verstecken.

<p>Debian GNU/Linux hat ein paar Pakete, die dazu verwendet werden können, eine
aktive Verteidigung aufzusetzen:

<list>

<item><package>kernel-patch-2.4-lsm</package> - LSM ist der Rahmen der Linux
Security Modules.

<item><package>lcap</package> - eine benutzerfreundliche Schnittstelle, um dem
Kernel <em>Fähigkeiten</em> zu entziehen (kernelbasierte Zugriffskontrolle), um
das System sicherer zu machen. Beispielsweise wird das Ausführen von
<tt>lcap CAP_SYS_MODULE</tt> 
<footnote>
Es gibt über 28 Fähigkeiten einschließlich
<tt>CAP_BSET</tt>,
<tt>CAP_CHOWN</tt>,
<tt>CAP_FOWNER</tt>,
<tt>CAP_FSETID</tt>,
<tt>CAP_FS_MASK</tt>,
<tt>CAP_FULL_SET</tt>,
<tt>CAP_INIT_EFF_SET</tt>,
<tt>CAP_INIT_INH_SET</tt>,
<tt>CAP_IPC_LOCK</tt>,
<tt>CAP_IPC_OWNER</tt>,
<tt>CAP_KILL</tt>,
<tt>CAP_LEASE</tt>,
<tt>CAP_LINUX_IMMUTABLE</tt>,
<tt>CAP_MKNOD</tt>,
<tt>CAP_NET_ADMIN</tt>,
<tt>CAP_NET_BIND_SERVICE</tt>,
<tt>CAP_NET_RAW</tt>,
<tt>CAP_SETGID</tt>, 
<tt>CAP_SETPCAP</tt>,
<tt>CAP_SETUID</tt>,
<tt>CAP_SYS_ADMIN</tt>,
<tt>CAP_SYS_BOOT</tt>,
<tt>CAP_SYS_CHROOT</tt>,
<tt>CAP_SYS_MODULE</tt>,
<tt>CAP_SYS_NICE</tt>,
<tt>CAP_SYS_PACCT</tt>,
<tt>CAP_SYS_PTRACE</tt>,
<tt>CAP_SYS_RAWIO</tt>,
<tt>CAP_SYS_RESOURCE</tt>,
<tt>CAP_SYS_TIME</tt> und
<tt>CAP_SYS_TTY_CONFIG</tt>. Alle können deaktiviert werden, um Ihren Kernel
abzuhärten.
</footnote>
die Fähigkeit der ladbaren Module entfernen (sogar für Root).
<footnote>
Um dies tun zu können, müssen Sie nicht <package>lcap</package>
installieren, aber damit ist es einfacher, als von Hand
<file>/proc/sys/kernel/cap-bound</file> anzupassen.
</footnote>
Für weitere Informationen zu Kernelfähigkeiten sollten Sie sich Jon Corbets
Abschnitt <url id="http://lwn.net/1999/1202/kernel.php3" name="Kernel
development"> auf LWN vom Dezember 1999 ansehen.

</list>

<p>Wenn Sie diese vielen Möglichkeiten auf Ihrem GNU/Linux System nicht
wirklich brauchen, sollten Sie die Unterstützung für ladbare Module während der
Konfiguration des Kernels abschalten. Das erreichen Sie, indem Sie einfach
CONFIG_MODULES=n während des Konfiguration Ihres Kernels oder in der Datei
<file>.config</file> festsetzen. So werden LKM Root-Kits vermieden, aber Sie
verlieren eine leistungsfähige Eigenschaft des Linux-Kernels. Außerdem kann das
Abschalten der nachladbaren Module den Kernel überladen, so dass die
Unterstützung ladbarer Module notwendig wird.


<sect2>Reaktive Verteidigung

<p>Der Vorteil reaktiver Verteidigung ist, dass sie die Systemressourcen nicht
überlädt. Sie funktioniert durch das Vergleichen von einer Tabelle der
Systemaufrufe mit einer bekanntermaßen sauberen Kopie
(<file>System.map</file>). Eine reaktive Verteidigung kann den
Systemadministrator natürlich nur benachrichtigen, wenn das System bereits
kompromittiert wurde.

<p>Die Entdeckung von Root-Kits vollbringt unter Debian
<package>chkrootkit</package>. Das Programm <url name="Chkrootkit"
id="http://www.chkrootkit.org"> prüft Anzeichen von bekannten Root-Kits auf
dem Zielsystem. Es ist aber kein völlig sicherer Test.

<p>Ein weiteres nützliches Programm ist <url name="KSTAT"
id="http://www.s0ftpj.org/en/site.html"> (Kernel Security Therapy Anti
Trolls) der Gruppe S0ftproject. KSTAT prüft den Bereich des
Kernelspeichers (<file>/dev/kmem</file>) auf Informationen über den
Zielhost, um den Systemadministrator bei der Suche und dem Entfernen von
bösartigen LKMs zu unterstützen.


<sect>Geniale/paranoide Ideen &mdash; was Sie tun können

<p>Dies ist wahrscheinlich der unsicherste und lustigste Abschnitt, da ich
hoffe, dass manche der "Wow, das klingt verrückt"-Ideen umgesetzt werden. Im
folgenden werden nur ein paar Ideen vorgestellt, wie Sie Ihre Sicherheit
erhöhen können &mdash;
abhängig von Ihrem Standpunkt aus können Sie sie für
genial, paranoid, verrückt oder sicher halten,

<list>

<item>Mit Pluggable Authentication Modules (PAM) herum spielen. Wie in einem
phrack 56 Artikel geschrieben wurde, ist
das schöne an PAM, dass "Ihrer Fantasie keine Grenzen
gesetzt sind." Das stimmt. Stellen Sie sich vor, Root kann sich nur mit
einen Fingerabdruck oder Abtastung des Auges oder einer Kryptokarte einloggen
(Warum habe ich hier nur "oder" und nicht "und" gesagt?).

<item>Faschistisches Logging. Ich würde sagen, dass alles, was wir
bisher über Logging besprochen haben, unter "weiches Loggen"
fällt. Wenn Sie echtes Logging betreiben wollen, besorgen Sie sich
einen Drucker mit Endlos-Papier und schicken ihm alle Logs. Hört sich lustig
an, ist aber zuverlässig und kann nicht manipuliert oder entfernt werden.

<item>CD-Distribution. Diese Idee ist sehr leicht zu realisieren und
bewirkt ganz gute Sicherheit. Erstellen Sie eine abgesicherte Debian
Distribution mit passenden Firewall-Regeln. Erstellen Sie davon ein bootbares
ISO-Image und brennen Sie es auf eine CDROM. Jetzt haben Sie eine nur lesbare
Distribution mit etwa 600 MB Speicherplatz für Dienste.  Stellen Sie lediglich
sicher, dass alle Daten, die geschrieben werden sollen, übers Netz geschrieben
werden. Für einem Eindringling ist es unmöglich, Schreibzugriff auf diesem
System zu erhalten. Alle Änderungen, die ein Eindringling vornimmt, werden mit
einem Reboot des Systems rückgängig gemacht.

<item>Schalten Sie die Modul-Fähigkeiten des Kernels ab. Wenn Sie
die Nutzung von Kernel-Modulen während der Kernel-Kompilierung
abschalten, werden viele Kernel basierende Hintertüren nicht
einsetzbar, da die meisten von ihnen darauf basieren, modifizierte
Kernel-Module zu installieren (siehe oben).

<item>Loggen über ein serielles Kabel (von Gaby Schilders). So lange
Server immer noch serielle Schnittstellen haben: Stellen Sie sich vor, Sie
ein Log-System für eine Anzahl von Servern. Es ist vom Netz abgeschnitten und
mit den Servern über einen Multiplexer für serielle Schnittstellen (Cyclades
oder ähnliches) verbunden. Jetzt sollen alle Ihre Server über ihre serielle
Schnittstelle loggen. Einfach nur hinschreiben. Die Log-Maschine
akzeptiert nur einfachen Text als Eingabe auf ihrer seriellen
Schnittstelle und schreibt ihn lediglich in eine Log-Datei. Schließen Sie
einen CD- oder DVD-Brenner an. Brennen Sie die Log-Datei, wenn sie die Größe
des Mediums erreicht hat. Wenn es jetzt nur noch CD-Brenner mit
automatischem Medien-Wechsel gäbe... Nicht so dauerhaft gespeichert
wie ein Ausdruck, aber mit dieser Methode kann man größere Mengen handhaben,
und die CDROMs nehmen nicht so viel Platz weg.

<item>Ändern Sie die Dateiattribute mit <prgn>chattr</prgn> (dem Tipps-HOWTO
von Jim Dennis entnommen). Nachdem Sie Ihr System sauber installiert und
konfiguriert haben, verwenden Sie das Programm <prgn>chattr</prgn> mit dem
Attribut <tt>+i</tt>, um Dateien unveränderbar zu machen (die Datei kann nicht
gelöscht, umbenannt, verlinkt oder beschrieben werden). Sie sollten dieses
Attribut für alle Dateien in <file>/bin</file>, <file>/sbin/</file>,
<file>/usr/bin</file>, <file>/usr/sbin</file>, <file>/usr/lib</file> und den
Kerneldateien in root. Sie können auch eine Kopie aller Dateien in
<file>/etc/</file> mit <prgn>tar</prgn> oder dergleichen erstellen und das
Archiv als unveränderbar kennzeichnen.

<p>Mit dieser Vorgehensweise können Sie den Schaden zu begrenzen, den Sie
anrichten können, wenn Sie als Root eingeloggt sind. Sie können
keine Dateien mit einer fehlgeleiteten Umleitung überschreiben, und
Sie werden Ihr System nicht durch ein fehlplatziertes Leerzeichen im Kommando
<prgn>rm -fr</prgn> unbenutzbar machen (Sie können aber
Ihren Daten immer noch einigen Schaden zufügen &mdash; aber Ihre
Bibliotheken und Programme sind sicherer).

<p>Dies macht auch verschiedene Sicherheits- und Denial-of-Service (DoS)
Exploits entweder unmöglich oder weitaus schwieriger (da viele von
ihnen darauf beruhen, Dateien durch Aktionen eines SETUID-Programms zu
überschreiben, das <em>keinen frei wählbaren Shellbefehl zur Verfügung
stellt</em>.
<!-- SB (20050313): Was will uns das sagen? "that <em>isn't providing an
arbitrary shell command</em>" -->

<p>Eine Unbequemlichkeit dieser Vorgehensweise macht sich bemerkbar, wenn Sie
verschiedene Systemprogramme bauen und installieren. Auf der anderen Seite
verhindert dies auch, dass <prgn>make install</prgn> die Dateien
überschreibt. Wenn Sie vergessen, das Makefile zu lesen, und die Dateien, die
überschrieben werden sollen, mit chattr -i behandelt haben (und die
Verzeichnisse, in denen Sie neue Dateien erstellen wollen), schlägt der
make-Befehl fehl. Sie müssen nur das Kommando <prgn>chattr</prgn> ausführen und
make neu aufrufen.  Sie können diese Gelegenheit gleich dazu benutzen, Ihre
alten bin's und libs auszumisten und sie z.B. in ein .old/-Verzeichnis oder
Tar-Archiv zu verschieben.

<p>Beachten Sie, dass dies Sie auch daran hindert, die Pakete Ihres
Systems zu aktualisieren, da die Dateien aus den Paketen nicht
überschrieben werden können. Also sollten Sie vielleicht ein Skript oder
einen anderen Mechanismus haben, der das immutable-Flag auf allen Dateien
deaktiviert,
bevor Sie ein <prgn>apt-get update</prgn> ausführen.

<p>Spielen Sie mit der UTP-Verkabelung herum. Schneiden Sie dazu zwei oder vier
Kabel durch und stellen ein Kabel her, das nur Verkehr in eine Richtung
zulässt. Verwenden Sie dann UDP-Pakete, um Informationen an die Zielmaschine zu
schicken, die ein sicherer Log-Server oder ein System zur Speicherung von
Kreditkartennummern sein kann.

</list>


<sect1>Aufstellen eines Honigtopfes (honeypot)

<p>FIXME: More Content specific to Debian needed.

<p>Ein Honigtopf ist ein System, das darauf ausgelegt ist,
Systemadministratoren beizubringen, wie Cracker ein System abtasten und darin
einbrechen. Es ist eine Systemeinstellung mit der Erwartung und dem Zweck, dass
das System abgetastet und angegriffen und möglicherweise darin eingebrochen
wird. Wenn Systemadministratoren erfahren, welche Werkzeuge und Methoden
Cracker anwenden, können sie daraus lernen, wie sie ihr System und Netzwerk
besser schützen.

<p>Ein Debian GNU/Linux-System kann leicht als Honigtopf eingerichtet werden,
wenn Sie Zeit opfern, es aufzusetzen und zu überwachen. Richten Sie einfach den
gefälschten Server mit einer Firewall und einem Programm, das Eindringling ins
Netzwerk entdecken kann, ein, verbinden Sie ihn mit dem Internet und warten Sie
ab. Stellen Sie sicher, dass Sie rechtzeitig alarmiert werden (siehe <ref
id="log-alerts">), wenn in das System eingedrungen wird, damit Sie die
notwendigen Schritte einleiten können und den Angriff beenden können, wenn Sie
genug gesehen haben. Hier folgen eine Pakete und Probleme, die Sie in Betracht
ziehen sollten, wenn Sie einen Honigtopf einrichten:

<list>

<item>Die Firewall-Technologie, die Sie verwenden (verfügbar durch den
Linux-Kernel).

<item><package>syslog-ng</package>. Nützlich, um Logs des Honigtopfs zu einem
entfernen Syslog-Server zu schicken.

<item><package>snort</package>, um allen eingehenden Netzwerkverkehr auf
den Honigtopf mitzuschneiden und die Angriffe zu erkennen.

<item><package>osh</package>, eine eingeschränkte Shell mit Logging, die unter
SETUID-Root läuft und verbesserte Sicherheit hat (siehe den Artikel von Lance
Spitzner weiter unten).

<item>Natürlich alle Daemons, die Ihnen für die falschen Honigtopfserver
einfallen (aber härten Sie den Honigtopf <em>nicht</em> ab).

<item>Das Deception Toolkit, das Irreführung dazu verwendet, Angriffe
abzuwehren. Homepage: <url id="http://www.all.net/dtk/" name="Deception
Toolkit">.

<item>Integritätsprüfer (siehe <ref id="check-integ">) und das
Coroner's Toolkit (<package>tct</package>), um nach dem Angriff eine
Analyse durchzuführen.

</list>

<p>Sie können mehr über das Aufstellen eines Honigtopfs in Lanze
Spitzners exzellentem Artikel <url
id="http://www.net-security.org/text/articles/spitzner/honeypot.shtml"
name="To Build a Honeypot"> (aus der Know your Enemy Serie) oder
in David Raikows <url
id="http://www.zdnetindia.com/techzone/resources/security/stories/7601.htm"
name="Building your own honeypot"> lesen.
Außerdem stellt das <url id="http://project.honeynet.org/" name="Honeynet
Project"> wertvolle Informationen über das Aufstellen von Honigtöpfen und der
Analyse von Angriffen zur Verfügung.
