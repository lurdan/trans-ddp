
<chapt>Nach der Installation

<p>Wenn das System installiert ist, können Sie es noch weiter absichern,
indem Sie einige der in diesem Kapitel beschriebenen Schritte ausführen.
Natürlich hängt dies vor allem von Ihrem Setup ab, aber um
physischen Zugriff zu verhindern, sollten Sie <ref id="bios-boot">, 
<ref id="lilo-passwd">, <ref id="kernel-root-prompt">, <ref id="floppy-boot">,
<ref id="restrict-console-login">, und <ref id="restrict-reboots"> lesen.

<p>Bevor Sie sich mit einem Netzwerk verbinden, insbesondere wenn es sich um ein
öffentliches Netzwerk handelt, sollten Sie wenigstens ein security update
(siehe <ref id="update">) durchführen. Optional können Sie sich
einen Snapshot Ihres Systems machen (siehe <ref id="snapshot">).

<sect id="bios-boot">Änderungen im BIOS (noch einmal)

<p>Erinnern Sie sich an <ref id="bios-passwd">? Nun, jetzt sollten sie, nachdem
Sie nicht mehr von austauschbaren Datenträgern booten müssen, die
Standard-BIOS-Einstellung so umändern, dass es <em>auschließlich</em> von
der Festplatte bootet. Gehen Sie sicher, dass Sie Ihr BIOS Passwort nicht
verlieren, oder Sie werden, im Falle eines Festplattenfehlers, nicht mehr ins
BIOS zurückkehren können, um die Einstellung wieder zu ändern, so
dass Sie Ihr System wiederherstellen können, indem Sie zum Beispiel eine
CD-ROM benutzen.

<p>Eine andere, weniger sicher, aber bequemere Möglichkeit ist es, das BIOS
so einzustellen, dass es von von der Festplatte bootet, und nur falls dies
fehlschlägt versucht von austauschbaren Datenträgern zu booten.
Übrigens wird dies oft so gemacht, weil viele Leute ihr BIOS Passwort
so selten benutzen, dass sie es zu leicht vergessen.

<sect id="lilo-passwd">Ein Passwort für LILO oder GRUB einstellen
<p>
Jeder kann sehr einfach eine root Shell auf Ihrem System bekommen, indem er
einfach "&lt;Name-Ihres-Bootimages&gt; init=/bin/sh" am Bootprompt eingibt.
Nachdem die Passwörter geändert und das System neu gestartet
wurde, hat die Person uneingeschränkten Root Zugang and kann alles auf
Ihrem System machen, das Sie will. Nach dieser Prozedur haben Sie keinen
Root Zugang mehr zu Ihrem System, weil Sie das Root Passwort nicht kennen.

<p>
Um sicher zu stellen, dass dies nicht passieren kann, sollten Sie den boot
loader mit einem Passwort schützen. Sie können zwischem einem
globalen Passwort und Passwörtern für bestimmte Images
wählen.
<p>
Für LILO müssen Sie die Konfigurationsdatei
<file>/etc/lilo.conf</file> editieren und eine "password" und "restricted"
Zeile, wie im folgenden Beispiel, einfügen:

<example>
image=/boot/2.2.14-vmlinuz
   label=Linux
   read-only
   password=hackmich
   restricted
</example>

<p>
Haben Sie dies getan, rufen Sie lilo auf. Wenn Sie die "restricted" Zeile
weglassen, wird lilo immmer nach dem Passwort fragen, egal ob LILO
Parameter übergeben wurden oder nicht. Die Standard-Zugriffsrechte auf
<file>/etc/lilo.conf</file> erlauben root das Lesen und Schreiben, und der
Gruppe von lilo.conf, ebenfalls root, das Lesen.

<p>
Wenn Sie GRUB anstelle von LILO verwenden, editieren Sie
<file>/boot/grub/menu.lst</file> und fügen die folgenden zwei Zeilen
am Anfang an (dabei ersetzen Sie natürlich 'hackmich' mit dem
vorgesehenen Passwort). Dies verhindert, dass Benutzer die
Booteinträge verändern können. 'timeout 3' legt eine
Wartedauer von 3 Sekunden fest, bevor grub den Standard Eintrag bootet.

<example>
timeout 3
password hackmich
</example>

Um die Integrität Ihres Passwortes zusätzlich abzusichern,
sollten <!-- AS 20020903 : Das eigentliche 'may' = duerfen, passte hier
nicht so gut --> Sie Ihr Passwort verschlüsselt ablegen. Das Utility
grub-md5-crypt generiert ein gehashtes Passwort, das kompatibel mit grubs
Verschlüsselungsalgorithmus (md5) ist.
Um grub mitzuteilen, dass verschlüsselte Passwörter benutzt
werden, benutzen Sie die folgende Anweisung:
<example>
timeout 3
password --md5 $1$arPydhOM$bIgEKjMW5kxeEuvE1Rah4/
</example>

Der --md5 Parameter wurde hinzugefügt, um bei grub einen md5
Authentifizierungsprozess zu erzwingen. Das angegeben Passwort ist die
md5 verschlüsselte Version von &quot;hackmich&quot;. Es ist vorzuziehen md5-
statt Klartext-Passwörter zu verwenden. Weitere Informationen über
grub Passwörter können Sie im grub-doc Paket finden.

<sect id="kernel-root-prompt">Entfernen des root Promptes aus dem Kernel

<p>
Linux 2.4 Kernel bieten kurz nach dem Laden des cramfs einen Weg Zugriff
auf eine Root Shell zu bekommen, also während das System bootet. Es
erscheint eine Meldung, die dem Administrator erlaubt, eine
auszuführende Shell mit Root Privilegien zu betreten, diese Shell kann
dazu benutzt werden, manuell Module zu laden, falls die automatische
Erkennung fehlschlägt. Dies ist das Standard-Verhalten bei initrd's
Linuxrc. Die folgende Meldung wird erscheinen:
<example>
Press ENTER to obtain a shell (waits 5 seconds)
</example>

<p>
Um dieses Verhalten zu entfernen, müssen sie
<file>/etc/mkinitrd/mkinitrd.conf</file> editieren und den Eintrag
<example>
# DELAY  Anzahl Sekunden, die das linuxrc Skript warten soll,
# um den Nutzer eingriffe zu erlauben, bevor das System hochgefahren 
# wird
DELAY=0
</example>
setzen.

<p>Generieren Sie Ihr Ramdisk-Image anschließend neu. Dies können sie
zum Beispiel so tun:
<example>
# cd /boot
# mkinitrd -o initrd.img-2.4.18-k7 /lib/modules/2.4.18-k7
</example>
<p>oder machen Sie (vorzugsweise):
<example>
# dpkg-reconfigure kernel-image-2.4.x-yz
</example>
<p>Beachten Sie, dass Debian 3.0 woody den Benutzern erlaubt, 2.4er Kernel
zu installieren (indem Sie <em>flavors</em> wählen), <em>aber</em> der
Standard-Kernel ist 2.2 (von einigen Architekturen abgesehen, auf die der
Kernel 2.2 nicht portiert wurde). Wenn Sie dies als Bug ansehen, beachten
Sie <url id="http://bugs.debian.org/145244" name="Bug 145244">, bevor Sie
ihn einsenden.

<sect id="floppy-boot">Booten von Diskette verbieten
<p>
Der Standard-MBR von Debian vor Version 2.2 verhielt sich nicht wie ein
normaler Master Boot Record und ließ eine Methode offen, einfach in ein
System einzubrechen:

<list>
<item>Drücken Sie während des Starts shift, und der MBR prompt
erscheint

<item>Drücken Sie dann F, und Ihr System wird von Diskette booten.
Dies kann man ausnutzen, um root Privilegien auf dem System zu erlangen.
</list>

<p>Dieses Verhalten können Sie ändern, indem Sie
<example>
lilo -b /dev/hda
</example>
eingeben.

<p>Nun ist LILO in den MBR geschoben worden. Dies können Sie auch
erreichen, indem Sie "boot=/dev/hda" zu lilo.conf hinzufügen. Es gibt
noch eine Möglichkeit, die den MBR komplett abschalten wird:
<example>
install-mbr -i n /dev/hda
</example>

<p>Auf der anderen Seite könnte diese "Hintertür", die viele
Leute nicht kennen, Ihnen einmal die Haut retten, wenn Sie aus irgendwelchen Gründen in große
Schwierigkeiten mit Ihrer Installation geraten.

<p>FIXME überprüfen, ob das für 2.2 wirklich stimmt, oder
war es 2.1?
INFO: Die Boot Disketten von Debian 2.2 installieren KEINEN mbr, sondern
nur LILO

<sect id="restrict-console-login">einschränkender Konsolen-Zugang

<p>Manche Sicherheits-Regelwerke könnten Administratoren dazu zwingen,
sich erst als User mit Ihrem Passwort auf dem System einzuloggen, und
dann Superuser zu werden (mit <prgn>su</prgn> oder <prgn>sudo</prgn>).
Solche eine Policy ist in Debian in der Datei
<file>/etc/login.defs</file> oder <file>/etc/securetty</file> (falls sie
PAM verwenden) implementiert. In:

<list>

<item><file>login.defs</file>, ändern Sie die CONSOLE Variable,
die eine Datei oder eine Liste von Terminals definiert, an denen sich
root einloggen darf

<item><file>securetty</file> entfernen Sie oder fügen Sie Terminals
hinzu, bei denen Root Zugriff erhalten darf

</list>

<p>Wenn Sie PAM benutzen können Sie auch andere Änderungen am
Login Prozess, die auch Einschränkungen für einzelne Benutzer
oder Gruppen zu bestimmten Zeiten enthalten können, durch
konfigurieren der Datei <file>/etc/pam.d/login</file> vornehmen. Eine
interessante Eigenschaft, die man auch abschalten kann, ist die
Möglichkeit, sich mit einem leeren Passwort (Null Passwort)
einzuloggen. Diese Eigenschaft kann eingeschränkt werden, indem sie
<em>nullok</em> aus der Zeile
<example>
auth       required   pam_unix.so nullok
</example>
entfernen.

<sect id="restrict-reboots">System-Neustart auf der Konsole einschränken

<p>Wenn an Ihr System eine Tastatur angeschlossen ist, kann jeder (ja
wirklich <em>jeder</em>) Ihr System neu starten, ohne sich in Ihr System
einloggen zu müssen. Dies könnte oder könnte nicht gegen
Ihre Sicherheitsrichtlinien verstoßen. Wenn Sie dies
einschränken wollen, müssen Sie in <file>/etc/inittab</file>
prüfen, ob die Zeile, die enthält, dass <tt>ctrlaltdel</tt>
<prgn>shutdown</prgn> aufruft, den <tt>-a</tt> Schalter enthält
(vergessen Sie nicht, <tt>init q</tt> auszuführen, nachdem sie
diese Datei irgendwie verändert haben). Standardmäßig
enthält Debian diesen Schalter:
<example>
ca:12345:ctrlaltdel:/sbin/shutdown -t1 -a -r now
</example>

<p>Jetzt müssen Sie, um es <em>manchen</em> Benutzern zu erlauben,
Ihr System neu zu starten, eine Datei <file>/etc/shutdown.allow</file>
erstellen, wie es in der Manualseite <manref section="8"
name="shutdown"> beschreibt. Dort müssen die Namen der Benutzer, die
das System neu booten dürfen, aufgeführt sein. Wenn der
<em>drei Finger Salut</em> (auch bekannt als <em>Strg+Alt+Entf</em>)
ausgeführt wird, wird geprüft, ob irgendeiner der Benutzer, die
in der Datei aufgelistet sind, eingeloggt sind. Wenn es keiner von ihnen
ist, wird <prgn>shutdown</prgn> das System <em>nicht</em> neu starten.

<sect>Partitionen auf die richtige Art einbinden
<p>
Wenn Sie eine ext2 Partition einbinden, können Sie verschiedene
Optionen mit dem mount-Befehl oder in <file>/etc/fstab</file> verwenden.
Dies zum Beispiel, ist mein fstab Eintrag für meine
<file>/tmp</file> Partition:
<example>
/dev/hda7    /tmp    ext2    defaults,nosuid,noexec,nodev    0    2
</example>

<p>
Sie sehen den Unterschied in der Spalte mit den Optionen. Die Option
<tt>nosuid</tt> ignoriert alle setuid und setgid Bits komplett,
während <tt>noexec</tt> das ausführen irgendwelcher Programme
unterhalb des Einhängepunkt (mount point) verbietet und <tt>nodev</tt> Geräte ignoriert. Das
hört sich toll an, aber es
<list>
<item>ist nur auf ext2 Dateisysteme anwendbar
<item>kann leicht umgangen werden
</list>

<p>Die <tt>noexec</tt> Option, die verhindert, dass Binaries
ausgeführt werden können, lässt sich leicht umgehen:
<example>
alex@joker:/tmp# mount | grep tmp
/dev/hda7 on /tmp type ext2 (rw,noexec,nosuid,nodev)
alex@joker:/tmp# ./date
bash: ./date: Permission denied
alex@joker:/tmp# /lib/ld-linux.so.2 ./date
Sun Dec  3 17:49:23 CET 2000
</example>

<p>
Wie auch immer, viele Skript-Kiddies haben Exploits, die versuchen eine
ausführbare Datei in <file>/tmp</file> zu erstellen. Wenn sie keine
Ahnung haben, werden sie in dieser Grube hängen bleiben. Mit anderen
Worten: Ein Benutzer kann nicht dazu getrickst werden, einen
ausführbaren Trojaner in <file>/tmp</file> auszuführen, zum
Beispiel indem er zufällig <file>/tmp</file> in seinen Such-Pfad
aufnimmt.

<p>Seien Sie auch gewarnt, dass manche Skripts darauf aufbauen, dass
<file>/tmp</file> ausführbare Rechte hat. Bemerkenswerterweise
hatte (oder hat?) Debconf Probleme bei dieser Sache, weitere
Informationen enthält Bug <url id="http://bugs.debian.org/116448"
name="116448">.

<p>
Nachfolgend ist ein gründlichereres Beispiel. Dazu:
<file>/var</file> könnte auch noexec enthalten, aber manche
Software, wie zum Beispiel Smartlist, behält seine Programme
unterhalb von /var. Das selbe gilt für die nosuid Option.

<example>
/dev/sda6       /usr            ext2    defaults,ro,nodev       0       2
/dev/sda12      /usr/share      ext2    defaults,ro,nodev,nosuid        0       2
/dev/sda7       /var            ext2    defaults,nodev,usrquota,grpquota          0       2
/dev/sda8       /tmp            ext2    defaults,nodev,nosuid,noexec,usrquota,grpquota    0       2
/dev/sda9       /var/tmp        ext2    defaults,nodev,nosuid,noexec,usrquota,grpquota    0       2
/dev/sda10      /var/log        ext2    defaults,nodev,nosuid,noexec    0       2
/dev/sda11      /var/account    ext2    defaults,nodev,nosuid,noexec    0       2
/dev/sda13      /home           ext2    rw,nosuid,nodev,exec,auto,nouser,async,usrquota,grpquota                0       2
/dev/fd0        /mnt/fd0        ext2    defaults,users,nodev,nosuid,noexec      0       0
/dev/fd0        /mnt/floppy     vfat    defaults,users,nodev.nosuid,noexec      0       0
/dev/hda        /mnt/cdrom      iso9660 ro,users,nodev.nosuid,noexec            0       0
</example>

<sect1>/tmp noexec setzen
<p>
Seien Sie vorsichtig, wenn Sie <file>/tmp</file> noexec setzen und neue
Software installieren wollen, da manche Software es während der
Installation benutzt. Apt ist ein solches Programm (siehe <url
id="http://bugs.debian.org/116448">), wenn nicht
<tt>APT::ExtractTemplates::TempDir</tt> (siehe <manref
name="apt-extracttemplates" section="1">) passend konfiguriert wurde. Sie
können diese Variable in <file>/etc/apt/apt.conf</file> auf ein
anderes Verzeichnis als <file>/tmp</file> mit exec Privilegien setzen.

<p>Was noexec betrifft, seien Sie sich bitte bewusst, dass es Ihnen nicht
sehr viel Sicherheit bietet. 
Beachten Sie folgendes:
<example>
$ cp /bin/date /tmp
$ /tmp/date
(wird aufgrund des noexec nicht ausgeführt)
$/lib/ld-linux.so.2 /tmp/date
(funktioniert, da date nicht direkt ausgeführt wird)
</example>

<sect1>Setzen von /usr auf nur-lesen
<p>
Wenn Sie auf <file>/usr</file> nur lesenden Zugriff erlauben, werden Sie
nicht in der Lage sein, neue Pakete auf Ihrem Debian GNU/Linux System
installieren können. Sie werden es erst wieder mit Schreibzugriff
erneut mounten müssen, die Pakete installieren, und dann wieder
read-only mounten. Die neuste Version von apt (in Debian 3.0 'woody')
kann konfiguriert werden, Befehle vor und nach dem Installieren von Paketen
auszuführen, also möchten Sie es vielleicht passend
konfigurieren.

<p>Um dies zu machen öffnen Sie <file>/etc/apt/apt.conf</file> und fügen Sie ein:
<example>
  DPkg
  {
      Pre-Invoke  { "mount /usr -o remount,rw" };
      Post-Invoke { "mount /usr -o remount,ro" };
  };
</example>

<p>Beachten Sie, dass das Post-Invoke mit einer "/usr busy"
Fehlermeldung scheitern wird. Dies passiert vorwiegend, wenn Sie eine
Datei während des Updates benutzen. Ärgerlich, aber kein
grosses Problem. Gehen Sie einfach sicher, dass sie nicht länger
benutzt werden, und führen Sie das Post-Invoke manuell aus.

<sect id="update">Ausführen von Sicherheitsupdates

<p>Sobald neue Sicherheitslöcher in einem Paket entdeckt wurden,
reparieren sie Debian Paket-Betreuer und ursprüngliche Autoren im
allgemein innerhalb von Tagen oder sogar Stunden. Nachdem das Loch
gestopft wurde, werden neue Pakete unter <url
name="http://security.debian.org" id="http://security.debian.org"> bereit
gestellt.

<p>Wenn Sie eine Debian Release installieren, müssen Sie
berücksichtigen, dass es seitdem der Releas gemacht wurde,
Sicherheitsupdates geben könnte, nachdem entdeckt wurde, dass ein
bestimmtes Paket verwundbar ist. Ebenso könnte es kleinere Releases
gegeben haben (es gab acht kleinere Releases von Debian 2.2
<em>potato</em>), die Paket-Updates enthalten.

<p>Sie müssen sich das Erstellungsdatum Ihres CD Sets (wenn Sie ein solches benutzen) notieren,
und auf der Sicherheitsseite prüfen, ob es Sicherheits-Updates
gegeben hat. Wenn es solche gibt, und Sie die Pakete nicht von der
Sicherheits-Seite herunterladen können (Ihr System ist noch nicht
mit dem Internet verbunden, oder?), könnten Sie es in Erwähgung
ziehen (falls Sie nicht, beispielsweise durch eine Firewall,
geschützt sind), Firewall-Regeln zu aktivieren, so dass Ihr System
ausschließlich mit security.debian.org Verbindung aufnehmen kann und
dann ein Update Ausführen. Eine Beispiel-Konfiguration finden sie
unter <ref id="fw-security-update">.

<p>Um Ihr System upzudaten, fügen Sie die folgende Zeile in Ihre
<file>/etc/apt/sources.list</file>, und Sie werden Sicherheits-Updates
automatisch erhalten, wann immer Sie Ihr System updaten.

<example>
deb http://security.debian.org/debian-security stable/updates main contrib non-free
</example>

<p>Die meisten Leute, die nicht in einem Land leben, das den Import oder
die Nutzung starker Kryptographie verbietet, sollten auch diese Zeile
hinzufügen:

<example>
deb http://security.debian.org/debian-non-US stable/non-US main contrib non-free
</example>

<p>Wenn Sie möchten, können Sie ebenfalls eine deb-src Zeile
hinzufügen. Weitere Details finden Sie unter <manref name="apt"
section="8">.

<p>Sie sollten regelmässig Sicherheits-Updates durchführen; die
meisten Sicherheitsprobleme resultieren aus bekannten
Sicherheitslücken, die nicht rechtzeitig gestopft wurden, wie
auch <url id="http://www.cs.umd.edu/~waa/vulnerability.html"> name="paper
by Bill Arbaugh"> (vorgetrafen auf dem 2001 IEEE Symposium on Security
and Privacy) erklärt.

<p>FIXME: Add info on how the signature of packages is done so that this
can be done automatically through a cron job (big warning: DNS spoofing).

<sect>Den Benutzern einen Sicheren Zugang bereitstellen

<sect1 id="auth-pam">User Authentifizierung: PAM

<p>PAM (Pluggable Authentication Modules) erlauben dem Systemadministrator
auszuwählen, wie eine Anwendung Benutzer
authentifiziert. Beachten Sie, dass PAM nichts machen kann, solange die
Anwendung nicht mit Unterstützung für PAM kompiliert wurde. Die
meisten Anwendungen, die mit Debian 2.2 geliefert werden, haben diese
Unterstützung eingebaut. Weiterhin hatte Debian keine
Unterstützung für PAM vor Version 2.2. Die derzeitige
Standard-Konfiguration für jedweden PAM benutzenden Dienst ist es, 
UNIX Authentifizierung zu emulieren (lessen sie
<file>/usr/share/doc/libpam0g/Debian-PAM-MiniPolicy.gz</file> um mehr
darüber zu erfahren, wie PAM-Dienste unter Debian arbeiten
<em>sollten</em>).


<p>Jede Anwendung mit PAM Unterstützung bietet eine Konfigurationsdatei
unter <file>/etc/pam.d/</file> in welcher Sie ihr Verhalten
einstellen können:

<list>
<item>welches Verfahren zur Authentifizierung benutzt wird.
<item>welches Verfahren innerhalb einer Sitzung benutzt wird.
<item>wie Passwörter überprüft werden.
</list>

<p>
Die folgende Beschreibung ist weit davon entfernt komplett zu sein,
für weitere Informationen möchten Sie vielleicht <url
id="http://www.kernel.org/pub/linux/libs/pam/Linux-PAM-html/pam.html"
name="The Linux-PAM System Administrator's Guide"> (auf der <url
id="http://www.kernel.org/pub/linux/libs/pam/" name="PAM Hauptseite">),
diese Dokumentation ist auch in dem Paket <package>libpam-doc</package>
enthalten.

<p>PAM bieten Ihnen die Möglichkeit, durch mehrere Authentifizierungsschritte
auf einmal zu gehen, ohne das der Benutzer es weiß. Sie
können gegen eine Berkeley Datenbank und gegen die normale passwd
Datei authentifizieren, und der Benutzer kann sich nur einloggen, wenn er
beide Male korrekt authentifiziert wurde. Sie können viel
einschränken mit PAM, genauso wie Sie Ihr System weit öffnen
können. Seien Sie also vorsichtig. Eine typische Konfigurationszeile
hat ein Kontrollfeld als zweites Element.
<!-- Second in mine (old Debian v2.0 though), check this! (FIXME) (era) -->
Generell sollte es auch "requisite" gesetzt werden, so wird ein Loginfehler
erzeugt, wenn eines der Module versagt.
<!-- Lots of fields in mine are "required", please elaborate? (FIXME) (era) -->

<p>Die erste Sache, die ich gerne mache ist, MD5 Unterstützung
zu den PAM Anwendungen hinzuzufügen, da dies gegen lexikalische
Attacken hilft (da Passwörter länger sein können, wenn sie
MD5 benutzen). Die folgenden zwei Zeilen sollten Sie in allen Dateien
unterhalb von <file>/etc/pam.d/</file> hinzufügen, die Zugriff auf Ihre
Maschine gewähren, wie zum Beispiel <tt>login</tt> und <tt>ssh</tt>.

<example>
# Gehen Sie sicher, dass Sie libpam-cracklib zuerst installiert haben,
# sonst werden Sie sich nicht einloggen koennen
password   required     pam_cracklib.so retry=3 minlen=12 difok=3
password   required     pam_unix.so use_authtok nullok md5
</example>

<p>Also, was macht diese Beschwörungsformel nun genau? Die erste
Zeile lädt das cracklib PAM Modul, welches einen
Passwort-Sicherheits-check bereitstellt; es fragt nach einem neuen
Passwort mit einem Minimum von 12 Zeichen, einer Differenz von mindestens
3 Zeichen zum alten Passwort, und erlaubt 3 Versuche. Die zweite Zeile
führt das Standardauthentifizierungsmodul mit MD5 Passwörtern
aus und erlaubt Passwörter mit einer Länge von Null. Die
use_authtok Direktive ist notwendig, um das Passwort von dem vorherigen
Modul übergeben zu bekommen.

<p>Um sicher zu stellen, dass sich der Benutzer root nur von lokalen
Terminals einloggen kann, sollten Sie die folgende Zeile in
<file>/etc/pam.d/login</file> eingefügt werden:

<example>
auth     requisite  pam_securetty.so
</example>

<p>Nun sollten Sie alle Terminals, von denen sich der Benutzer Root
einloggen können sollte, in <file>/etc/security/access.conf</file>
eintragen. Nicht zuletzt sollten Sie die folgende Zeile aktivieren, wenn
Sie Ihren Benutzern Limits setzen wollen:
<!-- FIXME: This is pam.d/login you're talking about, still? Elaborate? era -->
<example>
session  required   pam_limits.so
</example>

<p>Dies schränkt die System die ein User nutzen darf ein (siehe
unter in <ref id="user-limits">). Sie können zum Beispiel die Anzahl
der Logins, die man haben kann, einschränken (für eine Gruppe
von Nutzern oder System weit), die Anzahl der Prozesse, den belegten
Speicher...

<p>Editieren Sie nun <file>/etc/pam.d/passwd</file> und ändern Sie
die erste Zeile. Sie sollten die Option "md5" zufügen, um
MD5-Passwörter zu benutzen, ändern Sie die minimale
Passwort-Länge von 4 auf 6 (oder mehr) und setzen Sie eine
Maximallänge, wenn Sie möchten. Die resultierende Zeile wird in
etwa so aussehen:

<example>
password   required   pam_unix.so nullok obscure min=6 max=11 md5
</example>

<p>Wenn Sie su schützen möchten, so dass nur manche Leute es
benutzen können, um root auf Ihrem System zu werden, müssen sie
eine neue Gruppe "wheel" zu Ihrem System hinzufügen (das ist der
sauberste Weg, da keine Datei solche Gruppenrechte bisher benutzt).
Fügen Sie root und die anderen Benutzer, die zu root
<prgn>su</prgn>en können sollen, zu dieser Gruppe. Fügen Sie
anschließend die folgende Zeile zu <file>/etc/pam.d/su/</file> hinzu:

<example>
auth        requisite   pam_wheel.so group=wheel debug
</example>

<p>Dies stellt sicher, dass nur Personen aus der Gruppe wheel
<prgn>su</prgn> benutzen können, um root zu werden. Andere Benutzer
wird es nicht möglich sein, root zu werden. Tatsächlich werden
Sie eine ablehnende Nachricht bekommen, wenn Sie versuchen root zu
werden.

<p>Wenn Sie es nur bestimmten Nutzern erlauben wollen, sich bei einem
PAM-Dienst zu authentifizieren, ist dies sehr leicht zu erreichen, indem Sie
Dateien benutzen, in denen die Nutzer, denen es erlaubt ist, sich
einzuloggen (oder nicht), gespeichert sind. Stellen Sie sich vor, Sie
möchten lediglich dem Nutzer 'ref' erlauben, sich via ssh
einzuloggen. Sie schreiben in also in eine Datei
<file>/etc/ssh-users-allowed</file> und schreiben das folgende in
<file>/ect/pam.d/ssh</file>:

<example>
auth        required    pam_listfile.so item=user sense=allow file=/etc/sshusers-allowed onerr=fail
</example>

<p>Zuletzt, aber nicht am unwichtigsten, erstellen sie
<file>/etc/pam.d/other</file> mit den folgenden Zeilen:

<example>
auth     required       pam_securetty.so
auth     required       pam_unix_auth.so
auth     required       pam_warn.so
auth     required       pam_deny.so
account  required       pam_unix_acct.so
account  required       pam_warn.so
account  required       pam_deny.so
password required       pam_unix_passwd.so
password required       pam_warn.so
password required       pam_deny.so
session  required       pam_unix_session.so
session  required       pam_warn.so
session  required       pam_deny.so
</example>

<p>Diese Zeilen stellen für alle Anwendungen, die PAM
unterstützen, eine gute Standard-Konfiguration dar (Zugriff wird
standardmäßig verweigert).


<sect1 id="user-limits">Ressourcen-Nutzung limitieren: Die limits.conf
Datei

<p>
Sie sollten sich wirklich ernsthaft mit dieser Datei beschäftigen.
Hier können Sie Ihren Benutzern Ressourcen-Limits definieren. Wenn
Sie PAM benutzen, wird die Datei <file>/etc/limits.conf</file> ignoriert,
und Sie sollten <file>/etc/security/limits.conf</file> stattdessen
benutzen.

<p>Wenn Sie die Ressourcen Nutzung nicht einschränken, kann
<em>jeder</em> Nutzer mit einem einer gültigen Shell auf Ihrem
System (oder sogar ein Einbrecher, der das System durch einen Dienst
kompromittierte) so viel CPU, Speicher, Stack etc. benutzen, wie das System
zur Verfügung stellen kann. Dieses Problem der <em>Ressourcen
Überbeanspruchung</em> kann nur mit der Nutzung von PAM gelöst
werden. Beachten Sie, dass es einen Weg gibt, Ressourcen Limits zu manchen
Shells hinzuzufügen (zum Beispiel hat bash <prgn>ulimit</prgn>,
siehe <manref section="1" name="bash">), aber da nicht alle die gleichen
Limits zur Verfügung stellen, und da der Nutzer seine Shell
ändern kann (siehe <manref section="1" name="chsh">), ist es besser,
die Limits in den PAM Modulen zu platzieren.

<p>Für mehr Informationen hierzu lesen Sie:
<list>

<item><url
id="http://www.samag.com/documents/s=1161/sam0009a/0009a.htm"
name="PAM configuration article">.

<item> <url
id="http://seifried.org/security/os/linux/20020324-securing-linux-step-by-step.html"
name="Seifried's Securing Linux Step by Step"> in dem <em>Limiting
users overview</em> Abschnitt.

<item><url id="http://seifried.org/lasg/users/" name="LASG"> in dem 
<em>Limiting and monitoring users</em> Abschnitt.

</list>

<p>FIXME: Get a good limits.conf up here

<sect1>User Login Aktionen: Editieren von /etc/login.defs
<p>
Der nächste Schritt ist es, die grundlegende Konfiguration und die
Aktionen bei User Login zu editieren.

<example>
FAIL_DELAY          10
</example>

Diese Variable sollte auf einen höheren Wert gesetzt werden, um es
schwerer zu machen, mittels Brute Force (roher Gewalt, stures
Durchprobieren, Anm. d. Übers.) auf einem Terminal einzuloggen. Wenn
ein falsches Passwort eingegeben wird, muss der potentielle Angreifer
(aber auch der normale Benutzer!) 10 Sekunden warten, um einen neuen
login Prompt zu bekommen, was auf die Dauer viel Zeit kostet, wenn sie
Passwörter durch testen. Beachten Sie jedoch die Tatsache, dass diese
Einstellung nutzlos ist, wenn Sie ein anderes Programm als getty
benutzen, wie zum Beispiel mingetty.

<example>
FAILLOG_ENAB        yes
</example>

Wenn Sie diese Variable einschalten, werden fehlgeschlagene Logins
protokolliert. Es ist wichtig, hier auf dem Laufendem zu bleiben, um
jemanden zu fassen, der eine Brute Force Attacke versucht.

<example>
LOG_UNKFAIL_ENAB    yes
</example>

Wenn Sie die Variable "FAILLOG_ENAB" auf yes gesetzt haben, dann sollten
Sie auch diese Variable auf yes setzen. Dies wird auch unbekannte
Nutzernamen protokollieren. Wenn Sie dies tun, gehen Sie auch sicher, dass
die Protokolle sinnvolle Zugriffsrechte haben (Zum Beispiel 640, mit
einer angemessenen Gruppen-ZugehÃ¶rigkeit, wie adm), weil Nutzer oft
versehentlich ihr Passwort als Usernamen eingeben und dies anderen nicht
zugänglich machen wollen.

<example>
SYSLOG_SU_ENAB      yes
</example>

<p>Dies schaltet das Mitprotokollieren von <prgn>su</prgn> Versuchen im
Syslog ein. Sehr wichtig auf ernsthaften Maschinen, aber beachten Sie,
dass dies auch die Privatsphäre verletzen kann.

<example>
SYSLOG_SG_ENAB      yes
</example>

<p>Das gleiche wie bei SYSLOG_SU_ENAB, jedoch für das Programm
<prgn>sg</prgn>.

<example>
MD5_CRYPT_ENAB      yes
</example>

<p>Wie bereits erklärt, reduzieren MD5-Summen-Passwörter
großartig das Problem lexikalischer Attacken, da Sie längere
Passwörter benutzen können. Wenn Sie slink benutzen, lesen Sie
die Dokumentation zu MD5 bevor Sie diese Option einschalten. Ansonsten
wird dies in PAM gesetzt.
<!-- AS 20020909 Was will der Autor mit dem letzten Satz sagen?? -->

<example>
PASS_MAX_LEN        50
</example>

<p>Wenn Sie MD5-Passwörter in Ihrer PAM Konfiguration aktiviert
haben, dann sollten Sie diese Variable auf denselben Wert setzen, den Sie
dort benutzt haben.

<sect1>ftp Einschränken: Editieren von /etc/ftpusers
<p>
Die Datei <file>/etc/ftpusers</file> enthält eine Liste von allen
Nutzern, denen es nicht erlaubt ist, sich auf dem host mit ftp
einzuloggen. Benutzen Sie diese Datei nur, wenn Sie wirklich ftp
erlauben wollen (wozu im allgemeinen nicht geraten wird, da es Klartext
Passwörter benutzt). Wenn Ihr ftp Daemon PAM unterstützt,
können Sie dies ebenfalls benutzen, um Nutzern bestimmte Dienste zu
erlauben oder zu verbieten.

<p>FIXME (BUG): Is it a bug that the default ftpusers in Debian does
<em>not</em> include all the administrative users (in
<package>base-passwd</package>).

<sect1>su benutzen

<p>Wenn es wirklich benötigt wird, dass Nutzer Super User auf Ihrem
System werden, zum Beispiel um Pakete zu installieren oder neue Benutzer
anzulegen, können Sie das Programm <prgn>su</prgn> benutzen, um
Ihre Identität zu wechseln. Sie sollten jeden Login als Nutzer Root
vermeiden und stattdessen das Programm <prgn>su</prgn> benutzen.
Eigentlich ist die beste Lösung, su zu entfernen, und zu
<prgn>sudo</prgn> zu wechseln, da es mehr Möglichkeiten bietet als
<prgn>su</prgn>. Wie auch immer, <prgn>su</prgn> ist allgemeiner und wird
auf vielen Unices benutzt.

<sect1>sudo benutzen

<p>
Das <prgn>sudo</prgn> erlaubt es dem Benutzer, ein definiertes Kommando
unter einer anderen Nutzer-Identität auszuführen, sogar als
Root. Wenn der Nutzer zu <file>/etc/sudoers</file> hinzugefügt ist
und sich korrekt authentifiziert, ist er in der Lage, Kommandos, die in
<file>/etc/sudoers</file> definiert wurden, auszuführen.
Sicherheitsverletzungen, wie
ein inkorrektes Passwort oder der Versuch ein Programm auszuführen,
für das Ihre Rechte nicht ausreichen, werden protokolliert und an
root gemailt.

<sect1>verweigern von administrativen Fernzugriff
<p>Sie sollten <file>/etc/security/access.conf</file> ebenfalls so
modifizieren, dass ein administrativer Login aus der Ferne nicht erlaubt
ist. Auf diese Weise müssen die Nutzer das Programm <prgn>su</prgn>
(oder <prgn>sudo</prgn>) benutzen, so dass es immer eine prüfbare
Spur gibt, wann immer ein Nutzer administrative Möglichkeiten nutzen
möchte.

<p>Sie müssen die folgende Zeile zu Ihrer
<file>/etc/security/access.conf</file> hinzufügen, die
Debians Standard-Konfigurations Datei hat ein Beispiel auskommentiert:
<example>
   -:wheel:ALL EXCEPT LOCAL
</example>


<sect1 id="user-restrict">Nutzer einschränken

<p>Manchmal werden Sie vielleicht denken, dass Sie einen Nutzer auf Ihrem
System erstellen müssen, um einen bestimmten Dienst (pop3 E-Mail
Server oder ftp) anzubieten. Bevor Sie dies tun, erinnern Sie sich zuerst
daran, dass die PAM Implementierung in Debian GNU/Linux Ihnen erlaubt,
Nutzer mit einer breiten Auswahl von externen Verzeichnisdiensten
(radius, ldap, etc.) zu bestätigen. Dies wird vom libpam Paket
bewerkstelligt.

<p>Wenn Sie einen Nutzer anlegen müssen, und auf Ihr System aus der
Ferne zugegriffen werden kann, beachten Sie, dass es Nutzern
möglich sein wird, sich einzuloggen. Sie können dies beheben,
indem Sie diesen Nutzer eine Null (<file>/dev/null</file>) als Shell (sie
müsste in <file>/etc/shells</file> gelistet sein) zuweisen. Wenn Sie
den Nutzern erlauben wollen, auf das System zuzugreifen, aber ihre
Bewegungen einschränken wollen, können Sie
<file>/bin/rbash</file> benutzen, als ob Sie die <tt>-r</tt> Option der
Bash (<em>RESTRICTED SHELL</em>, siehe <manref name="bash"
section="1">) verwendet hätten. Beachten Sie bitte, dass sogar mit
einer restricted Shell ein Nutzer,  der auf ein interaktives
Programm zugreifen kann (das es ihm erlauben würde, eine subshell
auszuführen), diese Limitierung der Shell umgehen kann.

<p>Debian bietet zur Zeit in seiner unstable Release (und wird es
vielleicht der nächste stable Release hinzufügen) das
<file>pam_chroot</file> Modul. Eine Alternative hierzu ist es, den
Dienst, der einen Fern-Login anbietet (ssh, telnet), in einer
chroot-Umgebung laufen zu lassen.

<p>Wenn Sie einschränken wollen, <em>wann</em> ein Nutzer auf das
System zugreifen kann, müssen sie
<file>/etc/security/access.conf</file> an Ihre Bedürfnisse anpassen.

<sect2>SSH für Nutzer einschränken

<p>Debian's sshd wird ihnen nicht erlauben, die Bewegungen eines Nutzer
durch den Server einzuschränken, da er die Chroot
Funktionalität, die das kommerzielle Programm (sshd2) hat (benutzen
Sie 'ChrootGroups' oder 'ChrootUsers', siehe dazu <manref
name="sshd2_config" section="5">). Wie auch immer, es gibt einen Patch,
der ihnen erlaubt dies zu tun, den Patch erhalten Sie von <url
id="http://bugs.debian.org/139047" name="Bug Report 139047"> oder von
<url id="http://www.cag.lcs.mit.edu/~raoul/"> (und er wird wohl in der
Zukunft auf das OpenSSH Paket angewendet werden). Emanuel Lacour hat SSH
Pakete mit diesen Fähigkeiten unter <url
id="http://debian.home-dn.net/woody/ssh/">, allerdings wird empfohlen
durch die Compilierungs-Schritte zu gehen. Eine Beschreibung von den
notwendigen Schritten finden Sie unter <url
id="http://mail.incredimail.com/howto/openssh/"> (so ziemlich alles
trifft dort auch auf Debian zu, auch wenn von RedHat 7.2 die rede ist).
Nachdem Sie den Patch angewendet haben, müssen Sie die
<file>/etc/passwd</file> anpassen, indem Sie das Heimat-Verzeichnis des
Nutzers ändern (in den speziellen <tt>/./</tt> Token).

<example>
joeuser:x:1099:1099:Joe Random User:/home/joe/./:/bin/bash
</example>

<p>Dies wird <em>beides</em> einschränken, sowohl fern Zugriff
auf die Shell als auch Fernkopien   über einen ssh Kanal.

<p>Gehen Sie sicher, dass Sie alle benötigten Binaries in den
Chroot-Pfaden für den Nutzer haben. Diese Dateien sollte Root
besitzen, um Einmischungen durch den Nutzer zu verhindern (zum Beispiel
die chrooted Sandbox zu verlassen).
Ein Beispiel könnte so aussehen:

<example>
./bin:
total 660
drwxr-xr-x    2 root     root         4096 Mar 18 13:36 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
-r-xr-xr-x    1 root     root       531160 Feb  6 22:36 bash
-r-xr-xr-x    1 root     root        43916 Nov 29 13:19 ls
-r-xr-xr-x    1 root     root        16684 Nov 29 13:19 mkdir
-rwxr-xr-x    1 root     root        23960 Mar 18 13:36 more
-r-xr-xr-x    1 root     root         9916 Jul 26  2001 pwd
-r-xr-xr-x    1 root     root        24780 Nov 29 13:19 rm
lrwxrwxrwx    1 root     root            4 Mar 30 16:29 sh -> bash

./etc:
total 24
drwxr-xr-x    2 root     root         4096 Mar 15 16:13 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
-rw-r--r--    1 root     root           54 Mar 15 13:23 group
-rw-r--r--    1 root     root          428 Mar 15 15:56 hosts
-rw-r--r--    1 root     root           44 Mar 15 15:53 passwd
-rw-r--r--    1 root     root           52 Mar 15 13:23 shells

./lib:
total 1848
drwxr-xr-x    2 root     root         4096 Mar 18 13:37 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
-rwxr-xr-x    1 root     root        92511 Mar 15 12:49 ld-linux.so.2
-rwxr-xr-x    1 root     root      1170812 Mar 15 12:49 libc.so.6
-rw-r--r--    1 root     root        20900 Mar 15 13:01 libcrypt.so.1
-rw-r--r--    1 root     root         9436 Mar 15 12:49 libdl.so.2
-rw-r--r--    1 root     root       248132 Mar 15 12:48 libncurses.so.5
-rw-r--r--    1 root     root        71332 Mar 15 13:00 libnsl.so.1
-rw-r--r--    1 root     root        34144 Mar 15 16:10
libnss_files.so.2
-rw-r--r--    1 root     root        29420 Mar 15 12:57 libpam.so.0
-rw-r--r--    1 root     root       105498 Mar 15 12:51 libpthread.so.0
-rw-r--r--    1 root     root        25596 Mar 15 12:51 librt.so.1
-rw-r--r--    1 root     root         7760 Mar 15 12:59 libutil.so.1
-rw-r--r--    1 root     root        24328 Mar 15 12:57 libwrap.so.0

./usr:
total 16
drwxr-xr-x    4 root     root         4096 Mar 15 13:00 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
drwxr-xr-x    2 root     root         4096 Mar 15 15:55 bin
drwxr-xr-x    2 root     root         4096 Mar 15 15:37 lib

./usr/bin:
total 340
drwxr-xr-x    2 root     root         4096 Mar 15 15:55 .
drwxr-xr-x    4 root     root         4096 Mar 15 13:00 ..
-rwxr-xr-x    1 root     root        10332 Mar 15 15:55 env
-rwxr-xr-x    1 root     root        13052 Mar 15 13:13 id
-r-xr-xr-x    1 root     root        25432 Mar 15 12:40 scp
-rwxr-xr-x    1 root     root        43768 Mar 15 15:15 sftp
-r-sr-xr-x    1 root     root       218456 Mar 15 12:40 ssh
-rwxr-xr-x    1 root     root         9692 Mar 15 13:17 tty

./usr/lib:
total 852
drwxr-xr-x    2 root     root         4096 Mar 15 15:37 .
drwxr-xr-x    4 root     root         4096 Mar 15 13:00 ..
-rw-r--r--    1 root     root       771088 Mar 15 13:01
libcrypto.so.0.9.6
-rw-r--r--    1 root     root        54548 Mar 15 13:00 libz.so.1
-rwxr-xr-x    1 root     root        23096 Mar 15 15:37 sftp-server
</example>


<sect1>prüfen der Nutzer von Hand

<p>Wenn Sie paranoid sind, dann möchten Sie den Nutzern vielleicht
eine definierte <file>.profile</file> aufzwingen, das die Environments
so setzt, dass Sie die Überwachungsmöglichkeiten der Shell
nicht entfernen können (Kommandos werden auf <tt>$HISTFILE</tt>
ausgegeben). Die <file>.profile</file> könnte so gesetzt werden:

<example>
HISTFILE=/home/_user_/.bash_history
HISTSIZE=100000000000000000
HISTFILESIZE=10000000000000000
set -o HISTFILE
set -o HISTSIZE
set -o HISTFILESIZE
export HISTFILE HISTSIZE HISTFILESIZE
</example>

<p>Beachten sie: Das <tt>-o</tt>-Attribut erlaubt nur lesenden Zugriff
auf die Variable.

<p>Damit dies funktioniert, darf der Nutzer <file>.profile</file> oder
<file>.bash_history</file> nicht modifizieren, aber er muss ersteres
lesen und letzteres schreiben können. Sie können dies leicht
tun, indem Sie die Dateien und das Verzeichnis, indem sich diese Dateien
befinden, so dass Sie einem anderen Benutzer gehören (root), und 
der Gruppe des Nutzers auf die History-Datei Schreibzugriff
gewähren. Eine andere Möglichkeit ist es, dass Programm
<prgn>chattr</prgn> zu benutzen.
     
<p>Wenn Sie wirklich paranoid sind und jedes Kommando des Nutzers
protokollieren wollen, könnten Sie den Quellcode der Bash so 
ändern, dass sie alles, das der Nutzer eingibt in einer anderen
Datei ausgibt. Oder Sie lassen <package>ttysnoop</package> konstant jedes
neue tty überwachen und die Ausgaben in einer Datei ausgeben. Ein
anderes nützliches Programm ist <url name="Snoopy"
id="http://sourceforge.net/project/?group_id=2091">. Dies ist ein
für den Nutzer transparentes Programm, das sich als eine Bibliothek
dazwischen hängt und eine Hülle um execve() Aufrufe bildet.
Jedes ausgeführte Kommando wird im syslogd aufgezeichnet, indem die
<tt>authpriv</tt>-Möglichkeit benutzt wird (üblicherweise wird
dies unter <file>/var/log/auth.log</file> gespeichert).
<!-- FIXME: Debian package for snoopy??? 
SB 20030905: Yes, in woody.-->

<p>Beachten Sie, dass Sie hierfür nicht das <prgn>script</prgn>
Kommando benutzen können, da dies nicht als Shell funktioniert (auch
nicht, wenn Sie es zu <file>/etc/shells</file> hinzufügen).

<sect1>Komplettieren von Nutzer Überwachung

<p>Die vorherigen Beispiele sind ein einfacher Weg, um Nutzer
Überwachung zu konfigurieren, eignet sich aber nicht unbedingt
für komplexe Systeme. Sollte dies der Fall sein, schauen Sie sich
das Paket <package>acct</package>, die accounting Utilities, an. Diese
werden alle Kommandos, die ein Nutzer oder ein Prozess auf dem System
ausführt, auf die Kosten von Plattenplatz aufzeichnen.

<p>Wenn Sie diese 'Buchführung' aktivieren, werden alle
Informationen über Prozesse und Nutzer unter
<file>/var/account/</file> gehalten. Das Accounting-Paket schließt
Werkzeuge (<prgn>sa</prgn> und <prgn>ac</prgn>) zur Analyse dieser Daten
ein.

<sect1>Nutzer Profil nachprüfen

<p>Wenn Sie <em>sehen</em> wollen, was Nutzer normalerweise tun, wenn
sie sich verbinden, können Sie die <file>wtmp</file> Datenbank
benutzen, die alle Login-Informationen enthält. Diese Datei kann mit
verschiedenen Werkzeugen weiterverarbeitet werden, unter ihnen
<prgn>sac</prgn>, das ein Profil für jeden Nutzer ausgeben kann
und zeigt, in welchem Zeitfenster sie sich für gewöhnlich
auf dem System einloggen.

<p>Für den Fall, dass Sie accounting aktiviert haben, können
Sie auch die mitgelieferten Werkzeuge verwenden, um festzustellen, wann
Nutzer auf das System zugreifen und was sie ausführen.

<sect1>umasks der Nutzer einstellen

<p>Abhängig von Ihren Richtlinien möchten Sie vielleicht
ändern, wie Nutzer Informationen teilen können, was die
Standardrechte von neu erstellten Dateien sind. Dies ändern Sie,
indem Sie eine passende <tt>umask</tt> für alle Nutzer einstellen.
Sie können die UMASK-Einstellung in <file>/etc/limits.conf</file>,
<file>/etc/profile</file>, <file>/etc/csh.cshrc</file>,
<file>/etc/csh.login</file>, <file>/etc/zshrc</file> und wahrscheinlich
auch noch andere (abhängig von den Shells, die Sie auf Ihrem System
installiert haben) ändern. Von all diesen hat die zuletzt geladene 
Vorrang:
PAM's limits.conf, die Standard-System-Konfiguration für die Shell
des Nutzers, die Shell des Nutzers (sein <file>~/.profile</file>),
<file>~/.bash_profile</file>...)

<p>Debians default <tt>umask</tt> Einstellung ist <em>022</em>, d.h.,
dass Dateien (und Verzeichnisse) von Nutzer aus der Gruppe und jedem
anderen Nutzer des Systems lesbar und zugreifbar sind. Wenn dies zu
großzügig für Ihr System ist, müssen Sie die umask
Einstellung für alle Shells (und für PAM) ändern.
Vergessen Sie nicht die Dateien unter <file>/etc/skel/</file>
anzupassen, da dort die Standards für Nutzer werden, wenn sie
mit dem <prgn>adduser</prgn> Kommando erstellt werden.

<p>Beachten sie, dass ein Nutzer immer noch seine umask Einstellung
abändern kann, wenn er es möchten, um sie großzügiger
oder einschränkender zu machen.

<sect1>Nutzer Sicht/Zugriff limitieren

<P>FIXME: Content needed. Tell of consequences of changing packages
permissiones when upgrading (and admin this paranoid should chroot his
users BTW).

<p>Wenn Sie einem Nutzer Zugriff auf das System mit einer Shell
gewähren müssen, sollten Sie vorsichtig sein. Ein Nutzer kann
normalerweise, wenn er nicht in eine streng abgeschirmte Umgebung (wie
<tt>chroot</tt>) gesetzt wird, ziemlich viel Informationen von Ihrem
System sammeln, darunter:

<list>

<item>Ein paar Konfigurationsdateien unter <file>/etc</file>. Jedoch
werden Debians Standard Rechte auf sensitive Dateien (die zum Beispiel
Passwörter enthalten könnten) den Zugriff auf kritische
Informationen verhindern. Um zu sehen, auf welche Dateien nur der root
Nutzer zugreifen kann, führen Sie zum Beispiel <tt>find /etc -type f -a
-perm 600 -a -uid 0</tt> als superuser aus.

<item>Ihre installierten Pakete, entweder durch ansehen der
Paket-Datenbank, des <file>/usr/share/doc</file> Verzeichnisses oder
durch raten, indem man die Binaries und Bibliotheken durch sieht, die auf
Ihrem System installiert sind.

<item>Ein paar Protokolle unter <file>/var/log</file>. Beachten Sie, dass
auf einige Protokolle nur root und die <tt>adm</tt> Gruppe zugreifen kann
(versuchen Sie <tt>find /var/log -type f -a -perm 640</tt>), und manche
sind sogar ausschließlich für root verfügbar (Probieren Sie 
einige Protokolle unter <file>/var/log</file> aus. Sehen Sie sich auch 
<tt>find /var/log -type f -a -perm 600 -a -uid 0</tt>) an.

</list>


<p>Was kann ein Nutzer von Ihrem System sehen? Wahrscheinlich ziemlich
viele Sachen, versuchen Sie mal folgendes (und jetzt tief durch atmen):
<example>
find / -type f -a -perm +006 2>/dev/null  
find / -type d -a -perm +007 2>/dev/null  
</example>

<p>Was Sie sehen ist eine Liste von allen Dateien, die ein Nutzer
<em>einsehen</em> kann, und die Verzeichnisse, auf die er Zugriff hat.

<sect>Die Nutzung von tcpwrappers 

<p>TCP-Wrapper (Schutzumschläge für TCP) wurden entwickelt,
als es noch keine echten Paket-Filter gab, aber Zugangs-Kontrollen
notwendig waren. Ein TCP-Wrapper erlaubt Ihnen, einem Host oder einer
Domain einen Dienst anzubieten oder zu verweigern und
standardmäßig Zugriff zu erlauben oder zu verweigern. Wenn Sie mehr
Informationen haben möchten, sehen Sie sich <manref
name="hosts_access" section="5"> an.

<p>Viele der unter Debian installierten Dienste

<list>
<item>werden entweder durch den TCP-Wrapper Service (<file>tcpd</file>)
aufgerufen
<item>oder wurden mit libwrapper (Bibliothek für TCP-Wrapper)
Unterstützung kompiliert
</list>

<p>Einerseits werde manche Dienste, einschließlich telnet, ftp,
netbios, swat und finger in <file>/etc/inetd.conf</file> konfiguriert.
Sie sehen es daran, dass die Konfigurationsdatei zuerst
<prgn>/usr/sbin/tcpd</prgn> aufruft. Andererseits, selbst wenn ein
Dienst nicht über den <prgn>inetd</prgn>-Superdaemon
ausgeführt wird, kann es in jedem Fall, den TCP-Wrapper-Regeln
unterworfen werden, indem man die Unterstützung dafür
einkompiliert. Dienste, die unter Debian mit TCP-Wrappern compiliert
wurden, schließen ssh, portmap, in.talk, roc.statd, rpc.mountd, gdm, oaf
(der GNOME-Aktivierungs Daemon), nessus und viele andere ein.

<p>Um herauszufinden, welche Pakete TCP-Wrapper benutzen, versuchen sie
folgendes:

<example>
$ apt-cache showpkg libwrap0 | egrep '^[[:space:]]' | sort -u | \
        sed 's/,libwrap0$//;s/^[[:space:]]\+//'
</example>


<p>Beachten Sie bitte folgendes, wenn Sie <prgn>tcpchk</prgn> laufen
lassen: Sie können Dienste, die gegen die Wrapper-Bibliothek
kompiliert wurden, der <file>host.deny</file> oder
<file>host.allow</file> Datei hinzufügen, aber 
<prgn>tcpchk</prgn> wird Sie warnen, dass er sie nicht finden kann, da er
sie in <file>/etc/inetd.conf</file> sucht (die Manual-Seite ist an dieser
Stelle nicht sehr genau).

<p>Jetzt kommt ein kleiner Trick und vielleicht die kleinste Alarmanlage
zur Erkennung von Eindringlingen: Im allgemeinen sollten Sie eine
anständige Firewall als erste und TCP-Wrapper als zweite
Verteidigungslinie haben. Der Trick besteht nun darin ein SPAWN
<footnote>Beachten Sie hier die Schreibweise, da <em>spawn</em> nicht
funktionieren wird.</footnote> Kommando in <file>/etc/hosts.deny</file>
einzutragen, das immer dann eine Mail an root schickt, wenn der Wrapper
eines abgewiesenen Dienstes ausgelöst wurde:

<example>
ALL: ALL: SPAWN ( \
  echo -e "\n\
  TCP Wrappers\: Verbindungsaufbau abgelehnt\n\
  By\: $(uname -n)\n\
  Prozess\: %d (pid %p)\n\
  Nutzer\: %u\n\
  Host\: %c\n\
  Datum\: $(date)\n\
" | /usr/bin/mail -s "Verbindung zu %d blockiert" root) &
</example>

<p><em>Beachten Sie</em>: Das obige Beispiel kann sehr leicht zu DoS
(Denial of Service, Verbindungsaufbau abgelehnt) führen, indem man
versucht, sehr viele Verbindungen in kurzer Zeit aufzubauen. Viele E-Mails
bedeuten viel Datei-Aktivität, die lediglich durch das Senden
von ein paar Paketen erreicht wird.

<!--
# Could this example be more interesting? 
# It also relates to the next section (jfs)
#
# era: cf hosts_access(5) manual page,
# and why are you not using logger(1) here? (FIXME?)
#
#&lt;example&gt;
#ALL: ALL: SPAWN ( \
#  /usr/local/sbin/send_syslog %u %c %d )
#&lt;example&gt;

#  With send_syslog as:
##!/usr/bin/perl -w
#
#use Sys::Syslog qw(:DEFAULT setlogsock);
#
#$user=shift(@ARGV) || 'unkown';
#$host=shift(@ARGV) || 'unkown';
#$service=shift(@ARGV) || 'unkown';
#setlogsock('unix');
#openlog("alert",'', 'user');
#syslog('warning', 'Connection from %s at %s to %s blocked.', ($user, $host, $service) );
#closelog();
#
#exit 0;
-->

<sect id="log-alerts">Die Wichtigkeit von Logs und Alarmen

<p>Wie Logs (Protokolldateien) und Alarme in einem sicheren System
behandelt werden, ist eine wichtige Angelegenheit. Es ist leicht zu
verstehen, dass selbst wenn ein System angeblich perfekt konfiguriert und
zu 99% sicher ist, es immer noch 1% Rest-Risiko gibt, für die keine
Sicherheitsmaßnahmen greifen. Als erstes gilt es, Angriffe auf
dieses 1% zu erkennen und als zweites Alarm auszulösen, oder
das System ist in keinster Weise sicher.

<p>Debian GNU/Linux stellt Tools zur Verfügung, die die Analyse von
Log-Dateien übernehmen. Am beachtenswertesten sind
<package>logcheck</package> oder <package>loganalysis</package> (beide
Pakete werden ein wenig Anpassung benötigen, um unnötige Dinge
aus den Reports zu entfernen). Wenn sich das System in der Nähe
befindet, könnte es nützlich sein, das System-Log auf einer
virtuellen Konsole auszugeben. Die ist nützlich, da Sie so (auch von
weiter weg oder im vorbeigehen) sehen können, ob sich das System
richtig verhält. Debians <file>/etc/syslog.conf</file> kommt mit
einer kommentierten Standard-Konfiguration. Um diese Ausgabe
einzuschalten, unkommentieren <!-- Hoert sich schief an, aber was
besseres faellt mir nicht ein --> Sie die entsprechenden Zeilen und
starten syslog neu (<tt>/etc/init.d/syslogd restart</tt>):

<example>
daemon,mail.*;\
        news.=crit;news.=err;news.=notice;\
        *.=debug;*.=info;\
        *.=notice;*.=warn       /dev/tty8
</example>


<!-- FIXME: Talk about logcolorise? Is it in Debian? -->

<p>Es gibt da noch einiges über Log-Analyse, das hier nicht
behandelt werden kann. Eine gute Quelle für weiter Informationen ist
<url name="Counterpane's Log Analysis Resources"
id="http://www.counterpane.com/log-analysis.html">. In jedem Fall sind
selbst automatische Tools dem besten Tool nicht gewachsen: Ihrem Gehirn.

<!-- FIXME: Check information on SHARP, the 'syslog heuristic analysis
and response program'.  The paper is at
http://www.csis.gvsu.edu/sharp/. Is it free-software? packaged? -->

<sect1 id="custom-logcheck">Nutzen und anpassen von logcheck

<p>Das Programm <prgn>logcheck</prgn> ist in Debian in zwei Pakete
aufgeteilt: <package>logcheck</package> (das Haupt-Programm) und
<package>logcheck-database</package> (eine Datenbank regulärer
Ausdrücke für das Programm). Der Standard unter Debian (unter
<file>/etc/cron.d/logcheck</file>) ist, dass <prgn>logcheck</prgn>
jeweils um 14:00 Uhr und nach jedem Neustart ausgeführt wird.

<p>Dieses Tool kann sehr nützlich sein, wenn es geeignet angepasst
wurde, um den Administrator zu alarmieren, wenn etwas ungewöhnliches
auf dem System passiert. <prgn>Logcheck</prgn> kann vollständig
angepasst werden, so dass es Mails über Ereignisse aus den Logs
sendet, die Ihrer Aufmerksamkeit bedürfen. Die Standard-Installation
umfasst Profile zum ignorieren von Ereignissen und Rechtswidrigkeiten
für drei unterschiedliche Setups (Workstation, Server und paranoid).
Das Debian-Paket umfasst eine Konfigurationsdatei
<file>/etc/logcheck/logcheck.conf</file>, die vom Programm eingelesen
wird, die definiert, an welchen Nutzer die Testergebnisse geschickt
werden sollen. Es stellt außerdem einen Weg für Pakete zur
Verfügung, um neue Regeln in den Verzeichnissen zu realisieren:
<file>/etc/logcheck/hacking.d/_packagename_</file>,
<file>/etc/logcheck/violations.d/_packagename_</file>,
<file>/etc/logcheck/violations.ignore.d/_packagename_</file>,
<file>/etc/logcheck/ignore.d.paranoid/_packagename_</file>,
<file>/etc/logcheck/ignore.d.server/_packagename_</file>, und
<file>/etc/logcheck/ignore.d.workstation/_packagename_</file>.
Leider benutzen das noch nicht viele Pakete. Wenn Sie ein Regelwerk
entwickelt haben, dass für andere Nutzer nützlich sein
könnte, senden Sie bitte einen Bug-Report für das entsprechende
Paket (als ein <em>wishlist</em>-Bug). Mehr Informationen finden Sie
unter <file>/usr/share/doc/logcheck/README.Debian</file>.

<p>Der beste Weg <prgn>logcheck</prgn> zu konfigurieren ist es, es
einfach zu installieren (Sie werden gefragt werden, an welchen Nutzer die
Mail-Reports geschickt werden soll, und ob aus den Einträgen im Syslog
ein <file>/etc/logcheck/logcheck.logfiles</file> generiert werden
soll). Wenn Sie andere Logfiles hinzufügen möchten, ändern
Sie einfach <file>/etc/logcheck/logcheck.logfiles</file> indem Sie sie
hinzufügen. Die Paket-Abhängigkeiten werden dafür sorgen,
dass <package>logcheck-database</package> auch installiert wird.
Während der Installation werden Sie gefragt, welches
Sicherheits-Niveau benötigt wird:  Workstation, Server oder
paranoid. Dadurch wird <file>/etc/logcheck/ignore.d</file> (durch
einen symbolischen Link) auf die richtigen Verzeichnisse zeigen. Um dies
zu ändern, führen Sie <tt>dpkg-reconfigure -plow
logcheck-database</tt> aus. Erstellen Sie dann eine Datei
<file>/etc/ignore.d/local</file>; diese Datei enthält alle Regeln,
Meldungen auszuschließen, die nicht gemeldet werden sollen. Lassen Sie
es für den Anfang leer (ein einfaches <tt>cp /dev/null
/etc/ignore.d/local</tt> sollte reichen).

<p>Wenn Sie dies einmal geschafft haben, sollten Sie die nächsten
Tage/Wochen/Monate die verschickten Mails prüfen, ob Sie Meldungen
geschickt bekommen, die Sie nicht erhalten wollen. Fügen Sie dann
einen entsprechenden regulären Ausdruck (siehe <manref name="regex"
section="7">) zu <file>/etc/ignore.d/local</file>. Die ist ein
andauernder Tuning-Prozess. Wenn nur noch relevante Meldungen verschickt
werden, können Sie davon ausgehen, dass dieser Prozess beendet ist.
Beachten Sie, dass Logcheck Ihnen keine Mail schickt, wenn es nichts
relevantes auf Ihrem System findet, selbst wenn es läuft (so
bekommen Sie höchstens eine Mail pro Woche, wenn Sie Glück
haben).


<sect1>Konfigurieren, wohin Alarmmeldungen geschickt werden sollen

<p>Debian kommt mit einer Standard-Konfiguration für Syslog (in
/etc/syslog.conf), so dass Meldungen je nach System in die passenden
Dateien geschrieben werden.
<!-- Debian comes with a standard syslog configuration (in
/etc/syslog.conf) that logs messages to the appropriate files depending
on the system facility. -->
Das sollte Ihnen bereits bekannt sein, falls nicht, werfen Sie einen 
Blick auf die
Datei <file>syslog.conf</file> und deren Dokumentation. Wenn
Sie ein sicheres System pflegen wollen, sollten Ihnen bekannt sein, wohin
Log-Meldungen geschickt werden, so dass Sie nicht unbeachtet bleiben.

<p>Zum Beispiel ist es für viele produktiv Systeme sinnvoll,
Meldungen auch auf der Konsole auszugeben, aber bei vielen solcher
Systeme ist es sehr wichtig, auch eine neue Maschine zu nehmen, die
für die anderen als ein Loghost fungieren wird (d.h. sie
empfängt die Logs aller anderen Systeme).

<p>Sie sollten auch an Mails für Root denken, da viele
Sicherheits-Kontrollen (wie <package>snort</package>) ihre Alarme an die
Mailbox von root senden. Diese Mailbox zeigt normalerweise an den ersten
Nutzer, der auf dem System erstellt wurde (prüfen Sie dazu
<file>/etc/aliases</file>). Sorgen Sie dafür, dass roots Mails
irgendwo hin geschickt wird, wo sie auch gelesen werden (entweder lokal
oder ferngesteuert).

<p>Es gibt noch andere Accounts mit besonderer Funktion und andere Aliase auf
Ihrem System. Auf einem kleinen System ist es wohl am einfachsten,
sicherzustellen, dass alle Aliase auf den Root-Account zeigen, und dass
Mails an root in das persönliche Postfach des System-Administrator
weiter geleitet werden.

<p>FIXME: it would be interesting to tell how a Debian system can
send/receive SNMP traps related to security problems (jfs). Check:
<package>snmptraglogd</package>, <package>snmp</package> and
<package>snmpd</package>.


<sect1>Nutzen eines loghosts

<p>Ein Loghost ist ein Host der die syslog-Daten über ein Netzwerk
sammelt. Wenn eine Ihrer Maschinen geknackt wird, kann der Eindringling
seine Spuren nicht verwischen, solange er den Loghost nicht ebenfalls
geknackt hat. Demzufolge muss der Loghost also besonders sicher sein.
Aus einer Maschinen einen Loghost zu machen ist relativ einfach: Starten
Sie den syslogd einfach mit 'syslogd -r', und ein neuer Loghost ist
geboren. Um dies unter Debian permanent zu machen, editieren Sie
<file>/etc/init.d/sysklogd</file> und ändern Sie die Zeile

<example>
SYSLOGD=""
</example>
in 
<example>
SYSLOGD="-r"
</example>

Als nächstes konfigurieren Sie die anderen Maschinen, Ihre Daten an
den Loghost zu senden. Fügen Sie einen Eintrag, ähnlich dem
folgenden zu der <file>/etc/syslog.conf</file> hinzu:

<example>
facility.level            @Ihr_Loghost
</example>

Schauen Sie in die Dokumentation um zu erfahren, wodurch Sie
<em>facility</em> und <em>level</em> ersetzen können (Sie sollten
nicht wörtlich übernommen werden). Wenn Sie alles fern
mit loggen wollen, schreiben Sie einfach:

<example>
*.*                       @Ihr_Loghost
</example>

in Ihre <file>syslog.conf</file>. Sowohl lokal als auch entfernt
mit zu loggen ist die beste Lösung (ein Angreifer könnte davon
ausgehen, dass er seine Spuren verwischt hat, nachdem er die lokale
Log-Datei gelöscht hat). Sehen Sie für weitere Informationen die
Handbuch-Seiten <manref name="syslog" section="3">, <manref
name="syslogd" section="8"> und <manref name="syslog.conf" section="5">.


<sect1>Zugriffsrechte auf Log-Dateien

<p>Es ist nicht nur wichtig zu entscheiden, wie Warnungen genutzt werden,
sondern auch, wer hierauf Zugriff hat, d.h. wer Log-Dateien (falls Sie
nicht einen Log-Host verwenden) lesen oder verändern kann.
Sichereheits-Alarme, die ein Angreifer verändern oder abschalten
kann, sind im Falle eines Eindringens nicht viel wert. Außerdem sollten
Sie berücksichtigen, dass Log-Dateien einem Eindringling sehr viel
Informationen über Ihr System enthüllen kann und welche
normalen (und anormalen) Operationen er ausführen kann, wenn er
darauf Zugriff hat.

<!--  It should be explained why after installation this is not
 already done, jfs -->

<p>Ein paar Zugriffsrechte auf Log-Dateien sind nach der Installation
nicht gerade perfekt (aber das hängt natürlich von Ihrer
lokalen Sicherheits-Policy ab). Zuerst einmal müssen
<file>/var/log/lastlog</file> und <file>/var/log/faillog</file> nicht
für normalen Nutzer lesbar sein. In der lastlog-Datei können
Sie sehen, wer sich zuletzt eingeloggt hat, und in faillog eine
Zusammenfassung fehlgeschlagener Logins. Der Autor empfiehlt beides auf
660 zu chmod'en. Werfen Sie einen kurzen Blick auf Ihre Log-Dateien, und
entscheiden Sie sehr vorsichtig, welche Log-Dateien Sie les- oder
schreibbar für einen Nutzer mit einer anderen UID als 0 und einer
anderen Gruppe als 'adm' oder 'root' machen. Sie können dies sehr
leicht auf Ihrem System überprüfen:

<example>
#  find /var/log -type f -exec ls -l {} \; | cut -c 17-35 |sort -u
(zeigt zu welchen Nutzern /var/log gehört)
#  find /var/log -type f -exec ls -l {} \; | cut -c 26-34 |sort -u
(zeigt zu welchen Gruppen /var/log gehört)
# find /var/log -perm +004
(zeigt, welche Dateien von jedem Nutzer gelesen werden können)
#  find /var/log \! -group root \! -group adm -exec ls -ld {} \;
(zeigt, welche Dateien zu anderen Gruppen als root oder adm gehört)
</example>

<p>Um anzupassen, wie neue Log-Dateien erstellt werden, müssen Sie
wahrscheinlich das Programm anpassen, dass Sie erstellt. Wenn die
Log-Dateien rotiert werden, können Sie das Verhalten bei der
Erstellung und Rotation anpassen.

<!-- This is no longer true, check apache's logrotate
<p>
I want to emphasize that the apache logfile permissions are really
screwed due to the fact that the apache user owns the apache log
files. If a user gets a shell with a back door in apache, they can
easily remove the logfiles.
-->

<!--
# This is quite personal, IMHO, since this is due to the fact that 
# root priviledges are dropped on startup. I prefer an attacker to erase
# a service's logfiles than to erase all of my system's logs. Anyhow, this
# can be improved by changing user permissions after rotation
-->


<sect id="chroot">Benutzen von chroot

<p><prgn>chroot</prgn> ist eine der mächtigsten Möglichkeiten
einen Daemon, einen Nutzer oder einen anderen Dienst
einzuschränken. Stellen Sie sich einfach ein Gefängnis um Ihr
Ziel vor, aus dem Ihr Ziel nicht ausbrechen kann (Normalerweise, aber es
gibt immernoch ein paar Bedinungen, unter denen es erlaubt es, aus einem
solchen Gefängnis auszubrechen). Wenn Sie einem Nutzer nicht trauen,
können Sie ihm eine Change-Root-Umgebung erstellen. Dies kann zwar
einiges an Platten-Platz verbrauchen, da Sie alles benötigte
Ausführbare in das Gefängnis kopieren müssen, ebenso
alle Bibliotheken. Sogar wenn der Nutzer etwas boshaftes anstellt, ist
der Schadensrahmen auf das Gefängnis beschränkt.  

<p>Ein gutes Beispiel für diesen Fall ist es, wenn Sie nicht mit
<file>/etc/passwd</file> authentifizieren, sondern stattdessen LDAP oder
MySQL verwenden. So benötigt Ihr ftp-Daemon lediglich ein Binary und
vielleicht ein paar Bibliotheken. Ein ge-chroot-ete Umgebung wäre
eine exzellente Sicherheits-Umgegung; wenn ein neuer Exploit für
diesen ftp-Daemon bekannt wird kann ein Angreifer nur die Nutzer-ID
(User-ID, UID) des internen ftp-Daemon-Nutzers ausnutzen und nichts
anderes. 

<p>Natürlich kann auch die Sicherheit ander Daemonen von einem
solchen Arrangement profitieren.

<p>Seien Sie jedoch vorgewarnt, dass man auch aus einem
<prgn>chroot</prgn>-Gefängnis ausbrechen kann, wenn der Nutzer, der
es laufen lässt, der Superuser ist. Also ist es notwendig, dass Sie
den Dienst als nicht privilegierter Nutzer laufen lassen. Indem Sie die
Umgebung einschränken, schränken Sie die für alle les- /
ausführbaren Dateien, auf die das System Zugriff hat, und so
verkleinern Sie die Möglichkeit einer Ausweitung der
System-Privilegien, indem lokale Verwundbarkeiten der Systemsicherheit
ausgenutzt werden. Aber sogar in dieser Situation können Sie nicht
wirklich sicher sein, dass es für einen cleveren Angreifer keinen
Weg gibt, irgendwie aus dem Gefängnis auszubrechen. Es ist eine
zusätzliche Sicherheitsmaßnahme, nur Server-Programme zu benutzen,
die einen gewisse Reputation in Sachen Sicherheit haben. Sogar die
kleinste Lücke, wie eine offene Behandlung von Dateien, kann von
einem geschickten Angreifer genutzt werden, um in das System
einzubrechen. Schließlich wurde <prgn>chroot</prgn> nicht als
Sicherheits-Werkzeug designed, sondern als Test-Werkzeug.

<!-- FIXME: this information should be checked when woody gets released -->

<p>Eine zusätzliche Anmerkung: BIND (Berkeley Internet Name Domain)
ist standardmässig unter Debian nicht ge-chroot-et. Tatsächlich
ist dies bei keinem Daemon der Fall.
<!-- FIXME: Is this true? This might change in the woody (3.0) release. -->
<!-- jfs: this is still true for woody -->

<p>Es gibt übrigens Software (derzeit nicht unter Debian, aber in
der Zukunft sollte sie paketiert sein), die helfen kann, eine
chroot-Umgebung einzurichten. Zum Beispiel kann <prgn>makejail</prgn>
mit sehr kleinen Konfigurationsdateien chroot-Gefängnisse erstellen
und aktualisieren. Es versucht ausßerdem alle für den Daemon
benötigten Dateien zu erraten und in dem Gefängis zu
installieren. Mehr Informationen finden Sie unter <url
id="http://www.floc.net/makejail/">. <prgn>Jailer</prgn> ist ein
ähnliches Werkzeug, dass Sie unter <url
id="http://www.balabit.hu/downloads/jailer/"> erhalten.

<!-- FIXME: I have packages ready for makejail, update this when they
get accepted -->
<!-- SB20030906: They got accepted. -->

<p>Für das Erstellen von chroots (oder Gefänsnissen) ist
außerdem <package>deb.pl</package>, ein Skript das die
Abhängigkeiten ein oder mehrerer Dateien analysiert.
<sect1>Kernel configuration

<sect1 id="kernel-conf">Konfigurieren der Netzwerk-Fähigkeiten des
Kernels

<p>FIXME: Content missing

<p>Viele Fähigkeiten des Kernels können im laufenden Betrieb
verändert werden, indem man etwas in das
<file>/proc</file>-Datei-System echo-t, oder indem man sysctl benutzt.
Geben Sie <tt>sysctl -A</tt> ein, um zu sehen, was Sie konfigurieren
können und wie die Optionen hierfür sind. Nur in selten
Fällen müssen Sie hier etwas verstellen, aber Sie können
auf diese Art auch die Sicherheit erhöhen.

 
<!-- FIXME: Should the prefix on all of these be /proc/sys/? era -->

<example>
net/ipv4/icmp_echo_ignore_broadcasts = 1
</example>

Dies ist ein «Windows Emulator», weil es sich wie Windows bei Rundrufen
(Broadcast-Ping) verhält, wenn es auf 1 gesetzt wird.
<!-- Which means what exactly? Simply that it ignores broadcasts? FIXME -->
Anderenfalls macht es gar nichts.

<example>
net/ipv4/icmp_echo_ignore_all = 0
</example>

<p>Wenn Sie kein ICMP auf Ihrer Firewall blockieren wollen, schalten Sie
dies ein.
<!--
Does this mean, if you want to block ICMP but not in your firewall? FIXME
-->

<example>
net/ipv4/tcp_syncookies = 1
</example>

<p>Diese Option ist ein zweischneidiges Schwert. Auf der einen Seite
schützt es Ihr System gegen überfluten von syn-Paketen, auf der
anderen Seite verletzt es definierte Standards (RFCs). Diese Option ist
recht dumm <!-- eigentlich dumb=taub, passt aber so nicht -->, da es die
Gegenseite ebenso flutet wie Sie, so dass die Gegenseite auch
beschäfftigt ist. Wenn Sie diese Option ändern wollen,
können Sie es auch in <file>/etc/network/options</file> ändern,
indem Sie <tt>syncookies=yes</tt> setzten.

<example>
/proc/sys/net/ipv4/conf/all/log_martians = 1
</example>

<p>Packete mit unmöglichen Adressen (erzeugt durch falsche Routen)
in Ihrem Netzwerk werden protokolliert.

<p>Hier ist ein Beispiel wie man dies und andere nützliche Sachen
setzen kann. Sie sollten diese Informationen zu einem Skript
<file>/etc/network/interface-secure</file> (der Name kommt aus einem
Beispiel) hinzufügen , und es durch
<file>/etc/network/interfaces</file> wie nachfolgend gezeigt aufrufen
lassen:

<example>
auto eth0
iface eth0 inet static
        address xxx.xxx.xxx.xxx
        netmask 255.255.255.xxx
        broadcast xxx.xxx.xxx.xxx
        gateway xxx.xxx.xxx.xxx
        pre-up /etc/network/interface-secure

</example>

<example>
# Skript-Name: /etc/network/interface-secure
# Modifiziert das normale Verhalten, um uns gegen manche TCP/IP Attacken
# und Manipulationen zu schützen
#
# beigetragen von Dariusz Puchalak  
#
echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts 
                                           # Rundruf-Antwort-Schutz
					   # einscahlten
echo 0 > /proc/sys/net/ipv4/ip_forward     # ip-Weiterleutung abschalten
echo 1 > /proc/sys/net/ipv4/tcp_syncookies # TCP-Syn-Cookie Schutz einschalten
echo 1 >/proc/sys/net/ipv4/conf/all/log_martians 
                                           # Packete mit unmöglichen
					   # Adressen logen, seien Sie
					   # hiermit auf ausgelasteten
					   # Webservern vorsichtig
echo 1 > /proc/sys/net/ipv4/ip_always_defrag 
                                           # Defragmentierungs-Schutz
					   # immer einschalten
echo 1 > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses 
                                           # Schutz vor schlechten
					   # Fehlermeldungen einschalten

# Jetzt kommt Schutz vor ip-Spoofing
for f in /proc/sys/net/ipv4/conf/*/rp_filter; do
        echo 1 > $f
done

# und schließlich noch ein paar andere Sachen:
# Akzeptieren von umgeleiteten ICMP abschalten
for f in /proc/sys/net/ipv4/conf/*/accept_redirects; do
        echo 0 > $f
done

for f in /proc/sys/net/ipv4/conf/*/send_redirects; do
      echo 0 > $f
done

# Abschalten von Source Routed Packets
for f in /proc/sys/net/ipv4/conf/*/accept_source_route; do
        echo 0 > $f
done

# Logen von gespooften Paketen, Source Routed Paketen und Redirect
# Paketen
for f in /proc/sys/net/ipv4/conf/*/log_martians; do
        echo 1 > $f
done
</example>

<sect1 id="kernel-fw">Konfigurieren der Firewall

<p>Um die Möglichkeiten einer Firewall zu haben, um entweder das
lokale System oder andere <em>dahinter</em> zu beschützen, muss der
Kernel mit Firewall-Unterstützung kompiliert worden sein. Der
Debian 2.2 Standard-Kernel (also der Kernel-Version 2.2) stellt die
Paket-Filter-Firewall <prgn>ipchains</prgn> zur Verfügung, der
Debian 3.0 Standard-Kernel (Version 2.4) stellt die <em>stateful</em>
Paket-Filter <prgn>iptables</prgn> (netfilter) Firewall zur
Verfügung. Ältere Debian Distributionen würden einen
passenden Kernel-Patch (Debian 2.1 nutzte Kernel 2.0.34) benötigen.

<p>In jedem Fall ist es recht einfach, einen anderen als den von Debian
installierten Kernel zu benutzen. Sie finden vor-kompilierte Kernel als
Pakete, die Sie leicht auf Ihrem Debian System installieren können.
Sie können auch die Kernel-Quellen downloaden, indem Sie das Paket
<package>kernel-source-X</package> installieren, und Ihren eigens
angepassten Kernel kompilieren, indem Sie <package>make-kpkg</package>
benutzen.

<p>Auf das  Aufsetzen einer Firewall unter Debian wird unter <ref
id="firewall-setup"> ausführlich eingegangen.

<sect id="kernel-patch">Den Kernel patchen
<p>FIXME: More content

<p>Debian GNU/Linux stell verschiedene Patches für den Linux-Kernel,
die die Sicherheit erhöhen, zur Verfügung:

<list>

<item>Linux Eindringling-Erkennung (Linux Intrusion Detection, im Paket
  <package>lids-2.2.19</package>)

<item>Linux Capabilities (im Paket <package>lcap</package>)

<item>Linux Trustees (im Paket <package>trustees</package>)

<item>NSA Enhanced Linux (im Paket <package>selinux</package>, auch
verfügbar von <url id="http://www.coker.com.au/selinux/" name="der
Seite des Paket-Betreuers">)

<item><url name="kernel-patch-2.2.18-openwall"
id="http://packages.debian.org/kernel-patch-2.2.18-openwall">.

<item><package>kernel-patch-2.2.19-harden</package>

<item>Kernel-Unterstützung von IPSEC (im Paket <package>kernel-patch-freeswan</package>)

<item><package>kernel-patch-int</package>

</list>

<p>Wie auch immer, einige Patches werden von Debian noch nicht zur
Verfügung gestellt. Wenn Sie denken, dass manche von ihnen
hinzugefügt werden sollten, fragen Sie auf <url name="Work Needing
and Prospective Packages" id="http://wnpp.debian.org"> nach ihnen. Ein
paar von ihnen sind:


<list>

<item><url id="http://pageexec.virtualave.net/" name="PaX patch">

<item>
<url name="HAP patch" id="http://www.theaimsgroup.com/~hlein/hap-linux/">

<item>
<url name="Stealth patch" id="http://www.energymech.net/madcamel/fm/">

</list>


<sect>Schutz vor Speicher-Überläufen

<p><em>Speicher-Überlauf</em> werde die Attacken über Software
genannt, die unzureichende Überprüfung von Eingabe-Grenzen (ein
häufiger Programmierfehler) ausnutzen, um durch Programm-Eingaben
Befehle auf der Maschine auszuführen. Diese Attacken über
Server, die auf Verbindungen warten, oder über lokal installierte
Software, die einem Nutzer größere Privilegien gewährt (setuid
oder setgid) kann zu einem kompromittierten System führen.

<p>Es gibt hauptsächlich vier Methoden, um sich gegen
Speicher-Überläufe zu schützen:

<list>

<item>patchen des Kernels, um Ausführen des Stapel-Speichers zu
verhindern

<!-- FIXME: add a link to libsafe to the main place -->

<item>Nutzung einer Bibliothek wie libsafe, um verwundbare Funktionen
zu überschreiben und ordentliche Prüfungen einzuführen
(Informationen wie man libsafe installiert finden Sie <url
id="http://www.Linux-Sec.net/harden/libsafe.uhow2.txt" name="hier">).

<item>Neucompilieren des Quellcodes, um vernünftige Prüfungen
einzuführen, um Überläufe zu verhindern, in dem man zum
Beispiel stackguard benutzt.

<item>Nutzen von Werkzeugen um Stellen im Quellcode zu finden, die derart
verwundbar sind, und reparieren derselben.

</list>

<p>Debian GNU/Linux liefert bis einschließlich der Release 3.0 lediglich
Software, um die erste und die letzte dieser Methoden zu implementieren
(Kernel-Patch und Werkzeuge um mögliche Speicher-Überläufe
zu finden). Zur Nutzung dieser Werkzeuge zum Aufspühren von
Speicher-Überläufen benötigen Sie in jedem Fall
Programmier-Erfahrung, um den Quellcode zu reparieren (und neu zu
compilieren). Debian stell beispielsweise <package>bfbtester</package>
(einen Überlauf-Tester, der Programme per brute-force (durch Testen
aller Möglichkeiten) auf Kommando-Zeile und Umgebungs-Variablen
durchtestet) und <package>njamd</package> zur Verfügung.

<p>Was Kernel-Patches (beschrieben im Abschnitt <ref
id="kernel-patch">) betrifft, so stellt der Openwall-Patch Schutz gegen
Speicher-Überläufe in 2.2er Linux-Kerneln zur Verfügung,
während Sie für 2.4er Kernel den Grsecureity-Patch (im Paket <package>
kernel-patch-2.4-grsecurity</package> enthält neben vielen anderen
Sachen (ACLs, Zufälligkeiten im Netzwerk, um es zu erschweren, das
Betriebssystem zu erraten) auch den Openwall-Patch, siehe <url
id="http://www.grsecurity.net/features.htm" name="features">) oder die
Linux-Sicherheits-Module (in den Paketen
<package>kernel-patch-2.4-lsm</package> und
<package>kernel-patch-2.5-lsm</package>) benutzen müssen.

<p>Seien Sie in jedem Fall gewarnt, dass selbst diese Problem-Umgehungen
nicht vor Speicher-Überläufen schützen können, da
es wiederum Möglichkeiten gibt diese zu umgehen, wie es in <url
name="Ausgabe 58"
id="http://packetstorm.linuxsecurity.com/mag/phrack/phrack58.tar.gz"> des
phrack-Magazins beschrieben wurde.


<sect>sichere Datei-Übertragungen

<p>Während der normalen System-Administration müssen Sie immer
mal wieder Dateien auf Ihr System spielen oder von diesem holen. Auf
sichere Art und Weise Dateien von einem Host zu einem anderen zu kopieren, wird
durch die Benutzung des Paketes <package>sshd</package> erreicht. Eine
andere Möglichkeit ist die Nutzung von <package>ftpd-ssl</package>,
einem ftp-Server der <em>Secure Socket Layer</em> benutzt, um
Transmissionen zu verschlüsseln.

<p>Jede dieser Methoden benötigt natürlich einen speziellen
Client. Debian stellt Ihnen solche zur Verfügung, zum Beispiel
enthält das Paket <package>ssh</package> das Programm
<prgn>scp</prgn>. Es arbeitet wie <prgn>rcp</prgn> aber komplett
verschlüsselt, so dass die <em>bösen Jungs</em> noch nicht
einmal herausbekommen können, WAS Sie kopieren. Wie es den Server
gibt, so gibt es natürlich auch ein <package>ftp-ssl</package>
Client-Paket. Sie können Clients für diese Software sogar
für andere (nicht-UNIXoide) Betriebssysteme finden.
<prgn>putty</prgn> und <prgn>winscp</prgn> stellen eine
secure-copy-Implementierung für jede Version von
Microsoft-Betriebssystemen zur Verfügung.

<sect>Dateisystem Einschränken und konrollieren

<sect1>Benutzung von Quotas

<p>Es ist wichtig, eine gute Quota-Regelung zu haben, da es die Nutzer
daran hindert, die Festplatten zu füllen.

<p>Sie können zwei Arten von Quota-Systemen benutzen: Nutzer-Quota
und Gruppen-Quota. Wie Sie sicher denken können, limitiert
User-Quota den Plattenplatz, den ein Nutzer belegen kann, und
Gruppen-Quota macht dasselbe für ganze Gruppen. Beachten Sie dies,
wenn Sie die Größen der Quotas festlegen.

<p>Es ein paar wichtige Punkte, über die Sie nachdenken sollten,
wenn Sie ein Quota-System aufsetzen:

<list>
<item>Halten Sie die Quotas klein genug, so dass die Nutzer Ihre
Festplatte nicht aufzehren können.

<item>Halten Sie die Quotas groß genug, so dass Nutzer sich nicht
beschweren oder dass Ihr Mail-Quota Sie daran hindert nach eine Weile
Mails anzunehmen.

<item>Nutzen Sie Quotas auf allen Bereichen, die Nutzer beschreiben
können, auf <file>/home</file> ebenso wie auf <file>/tmp</file>.

</list>

<p>Auf jeder Partition/jedem Verzeichnis, auf dass Nutzer
Schreibzugriff haben, sollten quotiert sein. Finden Sie diese Partitionen
und Verzeichnisse und schätzen Sie eine sinnvolle Quota-Größe,
die Nutzbarkeit und Sicherheit kombiniert.

<p>So, nun wollen Sie Quotas benutzen. Zuerst müssen Sie
prüfen, ob Ihr Kernel Quota unterstützt. Wenn nicht müssen
Sie ihn neu compilieren. Prüfen Sie anschließen, ob das Paket
<package>quota</package> installiert ist. Wenn nicht, installieren Sie
es.

<!-- FIXME: how to check for quota support? What to tweak when
recompiling? -->

<p>Um Quota für die entsprechenden Dateisysteme einzuschalten
müssen Sie nur die Einstellung <tt>defaults</tt> in Ihrer Datei
<file>/etc/fstab</file> zu <tt>defaults,usrquota</tt> ändern. Wenn
Sie Gruppen-Quotas benötigen, ersetzen Sie <tt>usrquota</tt> durch
<tt>grpquota</tt>. Sie können auch beides verwenden. Erstellen Sie
dann leere Dateien <file>quota.user</file> und <file>quota.group</file> in
den Hauptverzeichnissen der Dateisysteme, auf denen Sie quotas
einführen möchten (d.h. <tt>touch /home/quota.user
/home/quota.group</tt> für das Dateisystem <file>/home</file>).

<p>Starten Sie quota neu, indem Sie ein <tt>/etc/init.d/quota
stop;/etc/init.d/quota start</tt> ausführen. Nun sollte quota
laufen, und die Größen können festgelegt werden.

<p>Bearbeiten der Quotas eines bestimmten Nutzer (sagen wir mal
"ref") wir mit <tt>edquota -u ref</tt> gemacht. Gruppen-Quotas
können mit <tt>edquota -g &lt;group&gt;</tt> geändert werden.
Setzen Sie dann die weiche und die harte Grenze und/oder inode-Quotas,
wenn Sie es benötigen.

<p>Mehr Informationen über Quotas finden Sie in der Manual-Seite von
quota, und dem quota Mini-Howto
(<file>/usr/share/doc/HOWTO/en-html/mini/Quota.html</file>).
<!-- TODO: Link zur deutschen Version -->

<p>Sie könnten auch <package>lshell</package> mögen, oder auch
nicht, da es den FHS verletzt. Beachten Sie außerdem, dass pam_limits.so
die gleiche Funktionalität zur Verfügung stellen kann und das
<package>lshell</package> Paket zur Zeit <url
id="http://bugs.debian.org/93894" name="verwaist"> ist.
<!-- Duplicated section "Logfile permissions" removed (era) -->
<!-- Duplicated section "Setting up setuid check" removed (era) -->

<sect1>chattr/lsattr

<p>Diesen beiden Befehle sind sehr nützlich, aber Sie arbeiten nur
auf ext2 Dateisystemen. Mit 'lsattr' können Sie die Attributen einer
Datei anzeigen lassen und mit 'chattr' können Sie Sie ändern.
Beachten Sie, dass Attribute nicht dasselbe sind, wie Zugriffsrechte. Es
gibt viele Attribute, aber nur die wichtigsten, die die Sicherheit
erhöhen, werden hier erwähnt. Es gibt zwei Kennzeichnungen
(flags), die nur der Superuser setzen kann.

<p>Zunächst gibt es das 'a' Flag. Wenn dieses bei einer Datei
gesetzt ist, dann kann an diese Datei nur angehängt werden. Dieses
Attribut ist für einige Dateien in <file>/var/log/</file>
nützlich, beachten Sie aber, dass durch Log-Rotations-Skripte
Dateien manchmal verschoben werden.

<p>Das zweite Flag ist das 'i'-Flag, kurz für immutable also
unveränderlich. Wenn Sie eine Datei so behandeln, kann Sie weder
modifiziert, noch gelöscht, noch umbenannt werden,  oder verlinkt
werden. Wenn Sie nicht möchten, dass Nutzer einen Blick auf Ihre
Konfigurationsdateien werfen können, setzen Sie dieses Flag, und
entfernen Sie die Lesbarkeit. Zusätzlich bietet es Ihnen etwas mehr
Sicherheit gegen Eindringlinge, da ein Cracker dadurch verwirrt werden
könnte, wenn er eine Datei nicht verschieben kann. Dennoch sollten
Sie nicht davon ausgehen, dass ein Cracker von Blindheit geschlagen ist,
immerhin ist er in Ihr System eingedrungen.

<p>Zusätzlich können Sie die Programme <prgn>chattr</prgn> und
<prgn>lsattr</prgn> von Ihrem System entfernen, so dass ein Eindringling
mit root-Zugang diese Attribute nicht verändern (oder auflisten)
kann. Da Sie Teil von <package>e2fsprogs</package> sind und dieses die
Priorität <em>required</em> hat, können Sie das Paket nicht
einfach entfernen. Sie können jedoch diese beiden Applikationen (und
wahrscheinlich noch andere) einfach löschen. Kopieren Sie Sie vorher
auf einen auswechselbaren Datenträger (Diskette?) zusammen mit Ihrem
md5-Summen.

<p>Ein Eindringling auf Ihrem System müsste so erst eigene Kopien
dieser Programme herunterladen (wahrscheinlich sogar selbst kompilieren),
so dass Sie etwas mehr Zeit bekommen, den Angriff zu erkennen und die
Kompromittierung rückgängig zu machen, bevor das gesamte
System überrannt wird.

<p>FIXME: This is a bug that could be reported, are any of the binaries
provided by the program useful in production systems? If not, and
since the libraries are needed by many packages a new package
<package>e2fsprogs-utils</package> could be included with less than
<em>Required</em> priority.

<p>Vergessen Sie nicht: <prgn>chattr</prgn> und <prgn>lsattr</prgn> sind
nur für das Dateisystem ext verfügbar.

<sect1 id="check-integ">Prüfen der Integrität des Dateisystems

<p>Sind Sie sicher, dass <file>/bin/login</file> auf Ihrer Festplatte
immer noch dasselbe Programm ist, dass Sie vor ein paar Monaten
installiert haben? Was wenn es sich um eine gehackte Version handelt, die
eingegebene Passwörter in einer versteckten Datei ablegt oder sie
als Klartext im ganzen Internet herummailt?

<p>Die einzige Methode einen gewissen Schutz dafür zu haben ist es,
die Dateien jede(n) Stunde/Tag/Monat (ich ziehe täglich vor) zu
prüfen, indem man deren aktuelle und alte md5-Summe vergleicht. Zwei
unterschiedliche Dateien können keine gleichen md5-Summen haben (Die
md5-Summe umfasst 128 Bits, so ist die Wahrscheinlichkeit, dass zwei
unterschiedliche Dateien eine gleiche md5-Summe haben etwa 1 zu 3,4e3803).
So sind Sie sicher, solange niemand den Algorithmus gehackt hat, der die
md5-Summen auf Ihrer Maschine erstellt. Dies ist, nun ja, extrem schwer
und sehr unwahrscheinlich. Sie sollten diese Überprüfung Ihrer
Programme als sehr wichtig ansehen. Weit verbreitete Tools hierfür
sind <package>sXid</package>, <package>AIDE</package> (Advanced Intrusion
Detection Environment, fortgeschrittene Eindringlings Erkennungs
Umgebung), <package>TripWire</package> (non-free; die neue Version wird
GPL lizenziert), <package>integrit</package> und
<package>samhain</package>.

<p>Das installieren von <prgn>debsums</prgn> wird Ihnen helfen, die
Integrität des Dateisystems zu überprüfen, indem Sie die
md5-Summen jeder Datei gegen die md5-Summe aus dem Debian-Archiv-Paket
vergleichen. Seien Sie aber gewarnt, dass diese Dateien sehr leicht
geändert werden können.

<p>Weiterhin können Sie <package>locate</package> durch
<package>slocate</package> ersetzen. slocate ist eine um Sicherheit
erweiterte Version von GNU locate. Wenn Sie slocate benutzen, sieht ein
Benutzer nur Dateien, auf die er auch Zugriff hat, während Sie alle
Dateien und Verzeichnisse des gesamten Systems ausschließen können.

<p>FIXME: put references to the snapshot taken after installation.
<p>FIXME: Add a note regarding packages not providing debsums for all
apps installed (not mandatory).

<sect1>Aufsetzen von setuid-Check

<p>Debian liefert einen täglich ausgeführten Cron-Job
<file>/etc/cron.daily/standard</file>. Dieser Cron-Job führt das
Skript <prgn>/usr/sbin/checksecurity</prgn>, das Informationen über
Änderungen sichert.

<!-- FIXME: What is the defaul for this in cron package? jfs -->

<p>Damit dieser Check ausgeführt wird, müssen Sie in
<file>/etc/checksecurity.conf</file>
<tt>CHECKSECURITY_DISABLE="FALSE"</tt> setzen. Dies ist bereits der
Standardwert, so dass diese Option bereits aktiviert sein sollte, solange
Sie nichts geändert haben.

<p>Das Standard-Verhalten sendet diese Informationen nicht an den
Superuser. Stattdessen erstellt es eine tägliche Kopie dieser
Änderungen unter <file>/var/log/setuid.changes</file>. Sie sollten
CHECKSECURITY_EMAIL (in <file>/etc/checksecurity.conf</file>) auf 'root'
setzen, damit diese Informationen an ihn gemailt werden. Sehen Sie sich auch
<manref name="checksecurity" section="8"> für weitere
Konfigurations-Informationen an.


<sect id="snapshot">Einen Schnappschuss des Systems erstellen

<p>Bevor Sie das System in eine produktive Umgebung stellen, können
Sie einen Schnappschuss des gesamten Systems machen. Diesen
Schnappschuss können Sie im Falle einer Kompromittierung (siehe <ref
id="after-compromise">) benutzen. Sie sollten so einen Schnappschuss
immer dann erneuern, wenn Sie das System aktualisieren, insbesondere wenn Sie
auf eine neue Debian Release upgraden.

<p>Hierfür können Sie beschreibbare, austauschbare
Datenträger benutzen, die Sie schreibschützen können. Dies
kann eine Diskette sein (die nach der Benutzung schreibgeschützt
wird) oder eine CD in einem CD-ROM Laufwerk (Sie können auch wieder
beschreibbare CD-ROMs benutzen, so können Sie sogar alte
Sicherheitskopien Ihrer md5-Summen behalten).

<p>Das folgende Skript erstellt einen solchen Schnappschuss:

<example>
#!/bin/bash
/bin/mount /dev/fd0 /mnt/floppy
/bin/cp /usr/bin/md5sum /mnt/floppy
echo "Erstelle md5 Datenbank"
>/mnt/floppy/md5checksums.txt
for dir in /bin/ /sbin/ /usr/bin/ /usr/sbin/ /lib/ /usr/lib/
do
   find $dir -type f | xargs /usr/bin/md5sum >>/mnt/floppy/md5checksums-lib.txt
done
/bin/umout /dev/fd0
echo "md5 Datenbank (nach der Installation) erstellt"
</example>

<p>Beachten Sie, dass das Programm md5sum auch auf der Diskette gesichert
wird, so dass Sie es später benutzen können, um die anderen
Programme Ihres Systems zu prüfen (gesetz dem Fall das md5sum einen
Trojaner enthält).

<p>Dieser Schnappschuss enthält nicht die Dateien unterhalb von
<file>/var/lib/dpkg/info</file>, wo md5-Summen installierter Pakete
enthalten sind (die Dateien enden mit <file>.md5sums</file>). Sie
können diese Informationen zusätzlich kopieren, aber Sie
sollten folgendes beachten:

<list>
<item>die md5sums der Debian Pakete enthalten alle md5-Summen der
Dateien, die ein Paket enthält, so dass die Datenbank viel
grösser wird (5 MB statt 600 KB auf einem Debian GNU/Linux System
mit graphischen Subsystem und etwa 2.5 GB Software installiert).

<item>nicht alle Debian Pakete stellen md5-Summen der installierten
Dateien zur Verfügung, da es (derzeit) nicht der Policy nicht
verlangt wird.

</list>

<p>Sobald der Schnappschuss erstellt wurde, sollten Sie sicherstellen,
dass das entsprechende Medium schreibgeschützt ist. Sie können
dann eine Sicherheitskopie erstellen oder es jede Nacht benutzen, um die
md5-Summen Ihres Systems gegen Ihren Schnappschuss vergleichen.

<sect>Andere Empfehlungen

<sect1>Benutzen Sie keine Software, die von svgalib abhängt

<p>SVGAlib ist ganz nett für Konsolen-Liebhaber wie mich, aber in
der Vergangenheit wurde mehrfach gezeigt, dass es ziemlich unsicher ist.
Exploits durch <prgn>zgv</prgn> wurden veröffentlicht, und es war
einfach root zu werden. Versuchen Sie die Nutzung von SVGAlib Programmen
wann immer nur möglich zu verhindern.

<!-- FIXME: move this to policy section if there ever is one? -->

<chapt id="sec-services">Absichern von Diensten die auf Ihrem System
laufen

<p>Dienste können auf zwei Arten abgesichert werden:

<list>

<item>sie so einstellen, dass auf sie nur von Zugangspunkten (Interfaces)
zugegriffen werden kann, von denen es nötig ist.

<item>sie so konfigurieren, dass sie nur von legitimierten Nutzer auf
autorisierte Art und Weise benutzt werden können.

</list>

<p>Einschränken der Dienste, so dass auf sie nur von bestimmten
Orten zugegriffen werden kann, kann durch Zugriffs-Beschränkungen
auf Kernel-Ebene (durch eine Firewall) passieren. Konfigurieren Sie sie,
so dass sie nur auf ein bestimmtes Interface horchen (einige Dienste
bieten diese Fähigkeiten vielleicht nicht), oder durch eine andere
Methode. Zum Beispiel kann der Linux vserver Patch (für 2.4.16) dazu
benutzt werden, Prozesse auf ein bestimmtes Interface zu binden.

<p>Was die Dienste angeht, die von <prgn>inetd</prgn> aufgerufen werden
(telnet, ftp, finger, pop3...), so ist es wertlos, dass inetd nicht
so konfiguriert werden kann, dass er nur auf ein bestimmtes Interface
reagiert. Wie auch immer, sein Ersatz, der <prgn>xinetd</prgn>
Meta-Daemon kennt ein <tt>bind</tt> für diesen Zweck. Lesen Sie dazu
bitte <manref name="xinetd.conf" section="5">.

<example>
service nntp
{
        socket_type     = stream
        protocol        = tcp
        wait            = no
        user            = news
        group           = news
        server          = /usr/bin/env
        server_args     = POSTING_OK=1 PATH=/usr/sbin/:/usr/bin:/sbin/:/bin
+/usr/sbin/snntpd logger -p news.info
        bind            = 127.0.0.1
} 
</example>

<p>Die folgenden Abschnitte gehen detaillierter darauf ein, wie bestimmte
Dienste abhängig von der beabsichtigten Benutzung passend
konfiguriert werden.


<sect>Absichern der Secure-Shell (ssh)
<p>Wenn Sie immernoch telnet statt ssh benutzen, sollten Sie dieses
Handbuch kurz beiseite legen, und dies ändern.  Ssh sollte anstelle
von telnet für alle Fern-Logins benutzt werden. In einer Zeit, in
der es leicht ist, Internet-Verkehr mit zu schnüffeln und an
Klartext-Passwörter heranzukommen, sollten Sie lediglich Protokolle
verwenden, die Kryptographie benutzen. Also führen Sie sofort ein
<tt>apt-get install ssh</tt> auf Ihrem System aus.

<p>Ermuntern Sie alle Nutzer Ihres Systems, ssh anstelle von telnet zu
benutzen, oder noch bessern: Deinstallieren Sie telnet/telnetd.
Zusätzlich sollten Sie es vermeiden, sich mit ssh als root
einzuloggen und lieber andere Methoden benutzen, um root zu werden. Wie
zum Beispiel <prgn>su</prgn> oder <prgn>sudo</prgn>. Schließlich sollten
Sie noch die Datei <file>/etc/ssh/sshd_config</file> für mehr
Sicherheit modifizieren:

<list>
<item><tt>ListenAddress 192.168.0.1</tt>
<p>Lassen Sie ssh nur auf ein bestimmtes Interface hören, falls Sie
mehrere Netzwerkkarten haben (und ssh nicht auf allen verfügbar sein
soll) oder Sie in Zukunft eine neue Netzwerkkarte einbauen werden (und
keine ssh-Verbindungen auf Ihr erlauben wollen).

<item><tt>PermitRootLogin No</tt>
<p>Versuchen Sie so wenige Logins als Root wie möglich zu erlauben.
Wenn nun jemand Root werden will, benötigt er zwei Logins. So kann das
Root-Passwort nicht so leicht ausgetestet werden.

<item><tt>Listen 666</tt>
<p>Verändern Sie den Listen-Port, so dass ein Eindringling nicht
wirklich sicher sein kann, ob ein sshd-Daemon läuft (aber beachten
Sie, dass dies lediglich "Sicherheit durch Verschleierung" ist).

<item><tt>PermitEmptyPasswords no</tt>
<p>Nicht gesetzte Passwörter verspotten jegliche System-Sicherheit.

<item><tt>AllowUsers alex ref</tt>
<p>Erlauben Sie nur bestimmten Usern sich via ssh auf der Maschine
einzuloggen.

<item><tt>AllowGroups wheel admin</tt>
<p>Erlauben Sie nur bestimmten Gruppenmitgliedern sich via ssh auf der
Maschine einzuloggen. AllowGroups und AllowUsers haben entsprechende
Direktiven um den Zugang zu der Maschine zu verwehren. Es wird nicht
überraschen, dass es sich hierbei um "DenyUsers" und "DenyGroups"
handelt.

<item><tt>PasswordAuthentication yes</tt>
<p>Es ist Ihre Wahl, was Sie hier eintragen. Es ist sicherer Zugriff nur
Nutzern zu erlauben, die ssh-Schlüssel in der ~/.ssh/authorized_keys
haben. Wenn Sie dies wollen, setzen Sie es auf "no".

<item>Schalten Sie jedwede Art der Authentifizierung ab, die Sie nicht
wirklich benötigen, zum Beispiel <tt>RhostsRSAAuthentication</tt>,
<tt>HostbasedAuthenticatio</tt>, <tt>KerberosAuthentication</tt> oder
<tt>RhostsAuthentication</tt>. Sie sollten sie abschalten, auch wenn sie
es standardmässig bereits sind (Siehe dazu die Handbuch-Seite
<manref name="sshd_config" section="5">).

</list>

<p>Abschließend beachten Sie bitte, dass diese Direktiven von einer
OpenSSH Konfigurationsdatei sind. Derzeit gibt es drei weitverbreitete
ssh-Daemonen: ssh1, ssh2 und OpenSSH von den OpenBSD Leuten. Ssh1 war der
erste verfügbare ssh-Daemon und er ist noch der weit verbreitetste
(Gerüchten zufolge gibt es sogar eine Windows-Version). Ssh2 hat
gegenüber ssh1 Vorteile, abgesehen davon, dass er unter einer
unfreien Lizens veröffentlicht wurde. OpenSSH ist ein wirklich
freier ssh-Daemon, der sowohl ssh1 als auch ssh2 unterstützt.
OpenSSH ist die Version, die installiert wird, wenn Sie auf Debian das
Paket 'ssh' auswählen.

<p>Mehr Informationen, wie Sie SSH mit Unterstützung für PAM
aufsetzen, finden Sie hier: <url
id="http://lists.debian.org/debian-security/2001/debian-security-200111/msg00395.html"
name="security mailing list archives">.

<sect>Absichern von Squid

<p>Squid ist eine der verbreitesten Proxy/Cache Server, und es gibt ein
paar Sicherheitsaspekte, die Sie beachten sollten. Squid's standard
Konfiguration lehnt alle Abfragen von Nutzern ab. Sie sollten Squid so
konfigurieren, dass er Zugriffe von vertrauenswürdigen Nutzern,
Computern oder Netzwerken erlaubt, indem Sie eine Zugriffs-Kontroll-Liste
(ACL, Acces Control List) in <file>/etc/squid.conf</file> definieren. Mehr
Informationen, wie Sie ACLs definieren, finden Sie in der <url
name="Squid User's Guide"
id="http://squid-docs.sourceforge.net/latest/html/book1.htm">.
<!-- Todo: Deutsche Squid Guide raussuchen -->

<p>Ebenso kann bei ungeeigneter Konfiguration vorkommen, dass jemand eine
Mail über Squid weiterleitet, da die Protokolle HTTP und SMTP
ein ähnliches Design haben. Squid's Standard Konfiguration
verweigert Zugriffe auf Port 25. Wenn Sie Verbindungen an Port 25
erlauben wollen, fügen Sie ihn einfach in der Safe_ports-Liste
hinzu. Aber dies ist <em>NICHT</em> empfohlen.

<p>Passendes Aufsetzen und Konfigurieren  des Proxy/Cache-Servers ist nur
ein Teil der Absicherung Ihrer Seite. Eine andere notwendige Aufgabe ist
es, Squid's Log-Dateien zu analysieren, um sicher zu gehen, dass alles so
arbeitet, wie es sollte. Es gibt ein paar Pakete in Debian GNU/Linux, die
einem Administrator hierbei helfen können.
Die folgenden Pakete sind in Woody (Debian 3.0) verfügbar:

<list>
<item><package>calamaris</package> - Log-Datei-Analysator für Squid oder Oops Proxy-Log-Dateien.
<item><package>modlogan</package>  - Ein modularer Log-Datei-Analysator.
<item><package>sarg</package> - Squid Analysis Report Generator.
</list>

<p>FIXME: Add more information about security on Squid Accelerator Mode

<sect>Absichern von FTP

<p>Wenn Sie wirklich FTP benutzen müssen (ohne ihn mit sslwrap zu
umhüllen oder innerhalb eines SSL- oder SSH-Tunnels), sollten Sie
ftp in das Home-Verzeichnis des FTP-Nutzers chrooten, so dass ein Nutzer
nichts anderes sehen kann, als sein eigenes Verzeichnis. Andernfalls können
Sie Ihr Dateisystem durchlaufen, als hätten Sie Shell-Zugriff. Sie
können die folgende Zeile in Ihre <file>proftpd.conf</file> im
globalen Abschnitt hinzufügen, um die chroot-Fähigkeiten zu
nutzen:

<example>
DefaultRoot ~
</example>

<p>Starten Sie proftpd neu, indem Sie <tt>/etc/init.d/proftpd
restart</tt> eingeben, und prüfen Sie, ob Sie noch aus Ihrem
Home-Verzeichnis heraus kommen können.

<p>Um Proftp-DoS Attacken durch ../../../ zu verhindern, fügen Sie
die folgende Zeile Ihrer <file>/etc/proftpd.conf</file> hinzu:

<tt>DenyFilter \*.*/</tt>

<p>Vergessen Sie nicht, dass FTP Logind und Authentifizierung Passwort
als Klartext sendet (dies ist kein Problem, wenn Sie einen anonymen,
öffentlichen Dienst anbieten) und es gibt bessere Alternativen in
Debian hierzu. Zum Beispiel <prgn>sftp</prgn> (aus dem Paket
<package>ssh</package>). Es gibt natürlich auch freue
Implementierungen von SSH für andere Betriebssysteme, zum Beispiel
<url id="http://www.chiark.greenend.org.uk/~sgtatham/putty/"
name="putty"> oder <url id="http://www.cygwin.com" name="cygwin">.

<!-- contributed by Jesus Climent -->
<p>Wenn Sie dennoch einen FTP Server verwalten wollen, während Sie
den Nutzern Zugriff via SSH gewähren, könnten Sie auf ein
typisches Problem stoßen. Nutzer die innerhalb eines mit SSH
abgesicherten Systems auf einen anonymen FTP-Server zugreifen wollen,
können versuchen Sich auf dem <em>FTP Server</em> einzuloggen.
Während der Zugriff verweigert werden wird, wird das Passwort
trotzdem als Klartext über das Netz gesendet. Um dies zu verhindern
hat der ProFTPd Entwickler TJ Saunders einen Patch erstellt, der
verhindert, dass Nutzer den anonymen FTP-Server mit gültigen
SSH-Zugangsdaten füttern. Mehr Informationen und den Patch finden
Sie unter; <url id="http://www.castaglia.org/proftpd/#Patches"
name="ProFTPD Patches">.

<sect>Zugriff auf das X-Window-System absichern

<p>Heutzutage werden X-Terminals bei mehr und mehr Firmen benutzt, so
dass ein Server für viele Arbeitsplätze zuständig ist.
Dies kann gefährlich sein, weil Sie dem Datei-Server erlauben
müssen, sich mit den X-Clients zu verbinden (X Server aus Sicht von
X. X vertauscht die Definition von Client und Server). Wenn Sie dem (sehr
schlechten) Vorschlag von vielen Dokumentationen folgen, geben Sie auf
Ihrer Maschine <tt>xhost +</tt> ein. Dies erlaubt jedem X-Client sich mit
Ihrem System zu verbinden. Für etwas bessere Sicherheit, sollten Sie
stattdessen das Kommando <tt>xhost +Rechnername</tt> verwenden, um den
Zugriff auf bestimmte Rechner zu begrenzen.

<p>Allerdings ist es eine viel sicherere Lösung, ssh zu benutzen, um
X zu tunneln und die gesamte Sitzung zu verschlüsseln. Dies
kann automatisch geschehen, wenn Sie sich auf eine andere Maschine
via ssh einloggen. Sie müssen es nur in der <file>/etc/ssh/ssh_config</file>
einschalten, indem Sie <tt>X11Forwarding</tt> auf <tt>yes</tt> setzen. In
den Zeiten von SSH sollten Sie die xhost-basierte Zugriffskontrolle
komplett über Bord werfen. <!-- FIXME: check. The text said "has to
be disabled" [sic] -->

<p>Zur besten Sicherheit, wenn Sie keinen X-Zugriff von anderen Maschinen
benötigen, ist es, die Bindung auf Port 6000 abzuschalten, indem Sie
einfach folgendes eingeben:

<example>$ startx -- -nolisten tcp</example>


<p>Dies ist das Standard-Verhalten unter XFree 4.1.0 (der Xserver aus
Debian 3.0). Wenn Sie XFree 3.3.6 laufen lassen (d.h. wenn Sie Debian 2.2
benutzen) können Sie <file>/etc/X11/xinit/xserverrcc</file>
editieren, damit Sie etwas erhalten wie:

<example>
#!/bin/sh
exec /usr/bin/X11/X -dpi 100 -nolisten tcp
</example>

<p>Wenn Sie XDM benutzen, setzen Sie in
<file>/etc/X11/xdm/Xservers</file> auf <tt>:0 local /usr/bin/X11/X vt7
-dpi 100 -nolisten tcp</tt>. Wenn Sie GDM benutzen, stellen Sie sicher,
dass die Option <tt>-nolisten tcp</tt> in der
<file>/etc/gdm/gdm.conf</file> gesetzt ist (was standardmäßig 
unter Debian der Fall ist), wie hier:

<example>
[server-Standard]
name=Standard Server
command=/usr/bin/X11/X -nolisten tcp
</example>

<p>Sie können außerdem die standardmäßige Zeitgrenze für
die <prgn>xscreensaver</prgn> Bildschirmsperre setzen. Auch wenn der Nutzern sie
aufheben kann, sollten Sie Konfigurationsdatei
<file>/etc/X11/app-defaults/XScreenSaver</file> editieren, und die
lock-Zeile von
<example>
*lock:                  False
</example>
<p>(das ist der Standardwert unter Debian) auf
<example>
*lock:                  True
</example>
<p>ändern.

<p>FIXME: add information on how to disable the screensavers which
show the user desktop (which might have sensitive information).

<p>Lesen Sie mehr zur Sicherheit von X Window in <url
name="XWindow-User-HOWTO"
id="http://www.linuxdoc.org/HOWTO/XWindow-User-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/XWindow-User-HOWTO.txt.gz</file>).
<!-- TODO: Link zur deutschen Uebersetzung -->


<p>FIXME: Add info on thread of debian-security on how to change config files
of XFree 3.3.6 to do this.  

<sect1>Überprüfen Ihres Display-Managers

<p>Wenn Sie einen Display-Manager lediglich zur lokalen Nutzung
(um einen schönen graphischen Login zu haben) haben wollen, gehen
Sie sicher, dass der XDMCP (X Display Manager Control Protocol) Krempel
abgeschaltet ist. Unter XDM können Sie dies mit der folgenden Zeile
in <tt>/etc/X11/xdm/xdm-config</tt>:

<example>
DisplayManager.requestPort:     0
</example>

<p>Normalerweise sind unter Debian alle Display-Manager so konfiguriert,
dass sie standardmäßig keine XDMCP-Dienste starten.

<sect>Absichern des Drucker-Zugriffs (Die lpd und lprng Problematik)

<p>Stellen Sie sich vor, Sie kommen zur Arbeit, und der Drucker spuckt
endlose Mengen von Papier aus, weil jemand eine DoS-Attacke gegen Ihren Drucker-Daemon 
durchführt. Unangenehm, oder?

<!-- Info based on Dale Southard's post to debian-security april 11th 2002-->
<p>In jeder Unix Druck-Architektur muss es einen Weg geben, um die Daten
des Client auf den Druck-Server zu bekommen. Traditionell machen dies
<prgn>lpr</prgn> und <prgn>lp</prgn> so, dass das Client-Kommando die
Daten in das Spool-Verzeichnis kopiert oder symbolisch verlinkt (weshalb diese
Programme normalerweise SUID oder SGID sind).

<p>Um jede Gefahr zu vermeiden, sollen Sie Ihren Druck-Server besonders
sicher halten. Dies heißt, dass Sie Ihren Druck-Dienst so konfigurieren
müssen, dass er nur Aufträge von vertrauenswürdigen
Rechnern annimmt. Hierzu müssen Sie die Rechner, von denen Sie
Druckaufträge entgegennehmen möchten in die Datei
<file>/etc/hosts.lpd</file> eintragen.

<p>Allerdings akzeptiert der <prgn>lpr</prgn>-Daemon auch wenn Sie dies
getan haben Verbindungen auf Port 515 auf jeder Schnittstelle. Sie
sollten sich überlegen, ob Sie Verbindungen von Netzwerken/Rechner,
die nicht drucken dürfen, mittels Firewall abblocken wollen (Der
<prgn>lpr</prgn>-Daemon kann nicht so konfiguriert werden, dass er nur
auf eine bestimmte IP-Adresse hört.)

<!-- FIXME
<p>Of course, you could also take the lpr/lprng sources
and change them so that the connect function is only done to "127.0.0.1".
apt-get source lpr
and patch the bind (finet) call
-->

<p>Sie sollten <prgn>Lprng</prgn>  gegenüber <prgn>lpr</prgn>
vorziehen, da er so konfiguriert werden kann, dass er Zugang-Kontrolle
über IP kann. Und Sie können spezifizieren, auf welche
Schnittstelle er sich binden soll (wenn auch etwas sonderbar).

<!-- FIXME: ask Craig Small about his post in debian-private 19th october 2001 -->

<p>Wenn Sie Ihren Drucker nur lokal auf Ihrem System benutzen, werden Sie
diesen Dienst nicht über ein Netzwerk teilen wollen. Sie sollten dann
überlegen ein anderes Druck-System, wie zum Beispiel das aus dem
Paket <package>cups</package> oder <url name="PDQ"
id="http://pdq.sourceforge.net/">, das auf den Zugriffsrechten des
Gerätes <file>/dev/lp0</file> beruht, einzusetzen.

<p>Bei <package>cups</package> werden die Druckaufträge mit dem
http-Protokoll zum Server übertragen. Dadurch muss der Client nicht
über spezielle Privilegien verfügen, aber der Server muss auf
irgendeinem Port hören.

<p>Wie auch immer: Wenn Sie <prgn>cups</prgn> nur lokal benutzen
möchten, können Sie es so konfigurieren, dass er nur auf die
lokale Schleife (loopback interface) hört, indem Sie folgendes in
Ihrer <file>/etc/cups/cupsd.conf</file> ändern:

<example>
Listen 127.0.0.1:631
</example>

<p>Es gibt noch andere Sicherheits-Optionen in diese
Konfigurations-Datei, wie zum Beispiel das Erlauben oder Verweigern von
Netzwerken oder Rechnern. Wenn Sie sie allerdings nicht benötigen,
belassen Sie es am besten dabei, einfach nur den Port, auf den
gehört wird, einzuschränken. <prgn>Cups</prgn> liefert auch
Dokumentation über den HTTP-Port. Wenn Sie diese potentiell
nützlichen Informationen einem Angreifer von außerhalb nicht
enthüllen wollen (und der Port offen ist), fügen Sie
außerdem folgendes hinzu:

<example>
&lt;Location /&gt;
  Order Deny,Allow
   Deny From All
    Allow From 127.0.0.1
&lt;/Locationi&gt;
</example>

<p>Die Konfigurationsdatei kann auch so angepasst werden, dass
zusätzliche Fähigkeiten einschließlich SSL- und
TLS-Zertifikate oder Verschlüsselung möglich werden. Die
Handbücher finden Sie unter http://localhost:631/ oder
http://cups.org.

<P>FIXME: Add more content (the article on <url name="Amateur Fortress
Building" id="http://www.rootprompt.org"> provides some very
interesting views).  

<p>FIXME: Check if PDG is available in Debian, and if so,
suggest this as the preferred printing system.

<p>FIXME: Check if Farmer/Wietse has a replacement for printer daemon
and if it's available in Debian.

<sect>Absichern des Mail-Daemon

<p>Wenn Ihr Server kein Mail-System ist, müssen Sie wirklich keinen
Mail-Daemon haben, der auf eingehende Verbindungen reagiert. Aber Sie
wollen lokale Mails ausliefern, um beispielsweise Mails an den
Root-User von irgendwelchen Alarm-System zu erhalten.

<p>Um dies auf einem Debian-System zu erreichen, entfernen Sie den
SMTP-Daemon auf dem inetd:

<example>
$ update-inetd --disable smtp
</example>
<p>und konfigurieren Sie den Mailer-Daemon so, dass er nur auf die lokale
Schleife achtet. In exim (dem Standard Mail Transport Agent (MTA) unter
Debian) tun Sie dies, indem Sie die in der Datei
<file>/etc/exim.conf</file> die Zeile

<example>
local_interfaces = "127.0.0.1"
</example>

<p> hinzufügen.

<p>Starten Sie beide Daemonen neu (inetd und exim) und exim wird
lediglich auf den Socket 127.0.0.1:25 reagieren. Seien Sie vorsichtig und
deaktivieren Sie erst inetd, oder exim wird nicht neu starten, da der
inetd bereits eingehende Verbindungen behandelt.

<p>Bei <prgn>postfix</prgn> editieren Sie <file>/etc/postfix/main.conf</file>:

<example>
inet_interfaces = localhost
</example>


<p>Wenn Sie Mails lediglich lokal entgegennehmen wollen ist dieses Herangehen
besser als den Mailer-Daemon in einen tcp-Wrapper zu hüllen oder
Firewall-Regeln einzufügen, die den Zugang für alle limitieren
sollen. Wenn Sie jedoch auch auf andere Schnittstellen reagieren
müssen, sollten Sie überlegen, ihn vom inetd aufrufen zu lassen
und einen tcp-Wrapper einzusetzen, so dass eingehende Verbindungen gegen 
<file>/etc/hosts.allow</file> und <file>/etc/hosts.deny</file>
geprüft werden. Außerdem werden Sie von unautorisierte
Zugriffsversuche gegen Ihren Mail-Daemon durch angemessenes
Protokollieren gewarnt werden wollen.

<p>In jedem Fall können Sie Mail-Relais-Versuche auf dem SMTP-Level
ablehnen, indem Sie die <file>/etc/exim/exim.conf</file> abändern,
damit Sie folgendes enthält:

<example>
receiver_verify = true
</example>

<p>Auch wenn Ihr Mail-Server keine Mails relayen wird ist diese
Konfiguration für den Relay-Test auf <url
id="http://www.abuse.net/relay.html"> nötig, um festzustellen, dass
Ihr Server <em>nicht</em> relaisfähig ist.

<sect>Sicherer Empfang von Mails
<p>
Das Lesen und Empfangen von Mails ist das gebräuchlichste
Klartext-Protokoll. Wenn Sie POP3 oder IMAP benutzen, um Ihre Mails zu
erhalten, senden Sie ein Klartext-Passwort über das gesamte Netz, so
dass ziemlich jeder Ihre Mails von nun an lesen kann. Benutzen Sie
statt-
dessen SSL (Secure Sockets Layer) um Ihre Mails zu empfangen. Wenn Sie
einen Shell-Account auf dem Rechner, der als POP oder IMAP-Server agiert,
haben, ist die andere Alternative ssh. Hier ist eine beispielhafte
fetchmailrc um dies zu zeigen:

<example>
poll mein-imap-mailserver.org via "localhost"
  with proto IMAP port 1236
      user "ref" there with password "hackmich" is alex here warnings 3600
    folders
      .Mail/debian
    preconnect 'ssh -f -P -C -L 1236:my-imap-mailserver.org:143 -l ref
     mein-imap-mailserver.org sleep 15 &lt;/dev/null &gt; /dev/null'
</example>

<p>Die wichtige Zeile ist die preconnect-Zeile. Sie startet eine
ssh-Verbindung und erstellt den notwendigen Tunnel, durch den automatisch
alle Verbindungen zum lokalen Port 1236 verschlüsselt an den
IMAP-Mail-Server weitergeleitet werden. Eine andere Möglichkeit
wäre es, fetchmail mit SSL-Unterstützung zu benutzen.

<p>Wenn Sie verschlüsselte Mail-Dienste wie POP oder IMAP anbieten
möchten, <tt>apt-get install stunnel</tt> und starten Sie Ihren
Daemon auf diese Weise:

<example>
stunnel -p /etc/ssl/certs/stunnel.pem -d pop3s -l /usr/sbin/popd
</example>


<p>Dieses Kommando umhüllt den angegeben Daemon (-l) an den Port
(-d) und nutzt ein bestimmtes Zertifikat (-p).



<sect id="sec-bind">Sichern von BIND

<p>Es gibt verschiedene Dinge mit denen Sie sich auseinander setzen
sollten, um einen Domain-Server-Daemon abzusichern, die ähnlich zu
den Überlegungen sind, wie man einen anderen Dienst absichert:

<list>

<item>Konfigurieren Sie den Daemon selbst so dass er von außen nicht
missbraucht werden kann. Dies schließt das einschränken von
Abfragen durch Clients ein: Zonen-Transfers und rekursive Abfragen.

<item>Einschränken des Zugriffs des Daemon auf den Server
selbst, so dass dem Schaden für das System im Falle eines Einbruchs
Grenzen gesetzt sind. Hierzu gehört auch, den Daemon als
nicht-privilegierten User laufen zu lassen und ihn zu chrooten.

</list>

<p>Sie sollten einige Informationen, die von außen abgefragt werden
können, zurückhalten, so dass man nicht wertvolle Informationen
über Ihre Organisation, die Sie nicht herausgeben wollen, abfragen
kann. Dies schließt die folgenden Optionen mit ein:
<em>allow-transfer</em>, <em>allow-query</em>, <em>allow-recursive</em>
und <em>Version</em>. Sie können dies in dem global Abschnitt tun
(so wird es auf alle Zonen angewandt) oder jeweils pro Zone. Dies ist im
Paket <package>bind-doc</package> dokumentiert, sobald das Paket
installiert ist können Sie hierzu mehr in
<file>/usr/share/doc/bind/html/index.html</file> lesen.

<p>Stellen Sie sich vor, Ihr Server ist mit dem Internet und Ihrem
internen Netzwerk (Ihre interne IP ist 192.168.1.2) verbunden - ein
einfacher Server im heimischen Netzwerk. Sie möchten keinen Dienst
im Internet anbieten und DNS-Abfragen lediglich Ihrem internen Host
erlauben. Sie sollten dies einschränken, indem Sie folgendes in Ihre
<file>/etc/bind/named.conf</file> aufnehmen:

<example>
options {
	    allow-query { 192.168.1/24; } ;
	    allow-transfer { none; } ; 
	    allow-recursive { 192.168.1/24; } ;
	    listen-on { 192.168.1.2; } ;
	    forward { only; } ;
	    forwarders { A.B.C.D; } ;
};
</example>

<p>Die <em>listen-on</em> Option bewirkt, dass sich DNS nur auf die
Schnittstelle bindet, die die interne Adresse hat, aber sogar wenn diese
Schnittstelle Verbindung zum Internet hat (zum Beispiel weil Sie NAT
benutzen), werden Abfragen nur akzeptiert, wenn sie von internen Hosts
kommen. Wenn das System mehrere Schnittstellen hat und Sie kein
<em>listen-on</em> gesetzt haben, könnten zwar nur interne Nutzer
Abfragen starten, aber, da der Port für Angreifer von außen
ansprechbar ist, könnten Sie versuchen den DNS abzustürzen
(oder durch Speicher-Überlauf-Attacken auszunutzen). Sie
könnten ihn sogar dazu bringen, lediglich auf 127.0.0.1 zu
hören, wenn Sie den DNS-Service nicht für ein anderes System
anbieten wollen.
</p>

<p>Der version.bind Eintrag in der chaos class enthält die Version
des derzeit laufenden Bind-Prozesses. Diese Information wird oft von
automatischen Scannern und bösartigen Individuen dazu verwendet,
heraus zu finden, ob ein Bind für eine bestimmt Attacke verwundbar
ist. Indem Sie falsche oder gar keine Informationen im version.bind
Eintrag zur Verfügung stellen, minimieren Sie die
Wahrscheinlichkeit, dass jemand Ihren Server aufgrund der publizierten
Version attackieren wird. Um Ihre eigene Version anzugeben, benutzen Sie
die <em>Version</em> Direktive in der folgenden Art:
<example>
options {
	... verschiedene andere Optionen ...
	version "Nicht verfuegbar.";
};
</example>

<p>Das Ändern des version.bind Eintrags schützt eigentlich
nicht gegen Attacken, aber Sie können es als sinnvolle
Schutzvorrichtung ansehen.
</p>

<p>Eine beispielhafte <file>named.conf</file> Konfigurationsdatei
könnte so aussehen:

<example>
acl internal {
        127.0.0.1/32;           // localhost
        10.0.0.0/8;             // intern
        aa.bb.cc.dd;            // eth0 IP
};

acl friendly {
        ee.ff.gg.hh;            // slave DNS
        aa.bb.cc.dd;            // eth0 IP
        127.0.0.1/32;           // localhost
        10.0.0.0/8;             // intern
};

options {
        directory "/var/cache/bind";
        allow-query { internal; };
        allow-recursive { internal; };
        allow-transfer { none; };
};
// Ab hier bis zur meineseite.bogus Zone 
// ist alles im Grunde die unveränderte Debian Standard Einstellung
logging {
        category lame-servers { null; };
        category cname { null; };   
};

zone "." {
        type hint;
        file "/etc/bind/db.root";
};

zone "localhost" {
        type master;
        file "/etc/bind/db.local";
};

zone "127.in-addr.arpa" {
        type master;
        file "/etc/bind/db.127";
};

zone "0.in-addr.arpa" {
        type master;
        file "/etc/bind/db.0";
};

zone "255.in-addr.arpa" {
        type master;
        file "/etc/bind/db.255";
};

// Zone, die ich selbst hinzugefuegt habe
zone "meineseite.bogus" {
        type master;
        file "/etc/bind/named.meineseite";
        allow-query { any; };
        allow-transfer { friendly; };
};
</example>

<P>Bitte prüfen Sie (erneut) die Debian-Fehler-Datenbank (BTS)
bezüglich Bind, insbesondere <url name="Bug #94760 (regarding ACLs
on zone transfers)" id="http://bugs.debian.org/94760">.  Fühlen Sie
sich ruhig dazu ermutigt zu diesem Bugreport beizutragen, wenn Sie glauben, 
nützliche Informationen hinzufügen zu können.

<sect1 id="user-bind">Ändern des BIND Users

<p>Bezüglich der Beschränkung von BINDs Privilegien müssen
Sie beachten, dass wenn Sie BIND als nicht-root User laufen lassen, BIND
neue Netzwerk-Schnittstellen nicht automatisch entdecken kann. Zum Beispiel,
wenn Sie eine PCMCIA-Karte in Ihr Notebook stecken. Lesen Sie README.Debian in Ihrer
Dokumentation (<file>/usr/share/doc/bind/README.Debian</file>) für
mehr Informationen hierzu. Es gab in letzter Zeit Sicherheitsprobleme
mit BIND, so dass es nützlich ist, den User zu wechseln, wenn es
möglich ist. Wir werden die Schritte, die dazu nötig sind,
detailliert aufführen. Wenn Sie dies automatisch machen lassen wollen,
probieren Sie das Skript in <ref id="bind-chuser"> aus.

<p>Um BIND unter einem anderen User laufen zu lassen müssen Sie
zunächst einen separaten User und eine separate Gruppe dafür
erstellen (es ist <em>keine</em> gute Idee für alle Dienste, die
Sie nicht als root laufen lassen, den User nobody und die Gruppe nogroup
zu benutzen). In diesem Beispiel wird der User und die Gruppe
<tt>named</tt> benutzt. Sie können diese anlegen, indem Sie die
folgenden Kommandos eingeben:
<example>
addgroup named
adduser --system --home /home/named --no-create-home --ingroup named \
      --disabled-password --disabled-login named
</example>

<p>Beachten Sie, dass der User <tt>named</tt> sehr eingeschränkt
ist. Wenn Sie - aus welchen Gründen auch immer - ein weniger
eingeschränktes Setup haben möchten, benutzen Sie:
<example>
adduser --system --ingroup named named
</example>

<p>Editieren Sie nun <tt>/etc/init.d/bind</tt> mit Ihrem Lieblings-Editor
und ändern Sie die Zeile, die mit 
<example>
start-stop-daemon --start
</example>

anfängt zu:
<example>
start-stop-daemon --start --quiet --exec /usr/sbin/named -- -g named -u named
</example>

<p>Außerdem müssen Sie, um zu verhindern, dass irgendetwas als root
läuft, die <tt>reload</tt>-Zeile auskommentieren:

<example>
reload)
       /usr/sbin/ndc reload
</example>

<p>und in folgendes ändern:
<example>
reload)
        $0 stop
        sleep 1
        $0 start
</example>

<p>Beachten Sie: Abhängig von Ihrer Debian-Version, müssen Sie
vielleicht auch die <tt>restart</tt>-Zeile ändern. Dies wurde in der
Version <tt>1:8.3.1-2</tt> von Debians BIND-Paket repariert.

<p>Alles was Sie jetzt noch tun müssen, ist bind durch
'/etc/init.d/bind restart' neu zu starten, und dann Ihr Syslog auf zwei
Einträge. wie die folgenden, prüfen:
<p>
<example>
Sep  4 15:11:08 nexus named[13439]: group = named
Sep  4 15:11:08 nexus named[13439]: user = named
</example>


<p>Voilà! Ihr named läuft <em>nicht mehr</em> als root. Wenn Sie mehr
Informationen darüber lesen wollen, warum BIND normalerweise nicht
als nicht-root User auf Debian Systemen läuft, sehen Sie bitte in
der Fehlerdatenbank zu Bind nach, insbesondere <url name="Bug #50013:
bind should not run as root" id="http://bugs.debian.org/50013"> und
<url name="Bug #132582: Default install is potentially insecure"
id="http://bugs.debian.org/132582">,
<url name="Bug #53550" id="http://bugs.debian.org/53550">, 
<url name="Bug #128120" id="http://bugs.debian.org/52745">, und
<url name="Bug #128120" id="http://bugs.debian.org/128129">. 
Fühlen Sie sich ruhig dazu ermuntert, etwas zu den Fehlermeldungen
beizutragen, wenn Sie denken, nützliche Informationen beitragen zu 
können.


<sect1 id="chroot-bind">Chrooten des Name-Servers

<p>Um die größtmögliche BIND Sicherheit zu erreichen,
müssen Sie nun ein Chroot-Gefängnis (siehe <ref id="chroot">)
um Ihren Daemon herum bauen. Es gibt da einen sehr einfachen Weg dies zu
erreichen: Die <tt>-t</tt> Option (siehe die Handbuchseite <manref
name="named" section="8">). Dies wird Bind selbst in ein bestimmtes
Verzeichnis chrooten lassen, ohne dass Sie einen eigenes
Chroot-Gefängnis aufsetzen müssen, oder sich Sorgen um dynamische
Bibliotheken machen müssen. Die einzigen Dateien, die Sie in diesem
Chroot-Gefängnis benötigen, sind:

<example>
dev/null
etc/bind/       - sollte die named.conf und alle Server-Zonen enthalten
sbin/named-xfer - wenn Sie Namen transferieren
var/run/named/  - sollte die pid und den Cache des Name-Server (falls es
                  ihn gibt) enthalten. Dieses Verzeichniss muss für
		  den named-User schreibbar sein.
var/log/named   - Wenn Sie in einer Datei protokollieren, muss dies
                  für den named-User schreibbar sein.
dev/log         - syslogd sollte hierauf hören, wenn named so
                  konfiguriert ist, dass er darüber protokolliert.
</example>


<p>Damit Ihr Bind Daemon vernünftig läuft, braucht er bestimmt
Zugriffsrechte auch die named-Dateien. Dies ist eine einfache
Angelegenheit, da die Konfigurations-Dateien immer in <tt>/etc/named/</tt>
liegen. Beachten Sie, dass er lediglich lese-Zugriff benötigt, es
sei denn, es handelt sich um einen sekundären oder
zwischen speichernden Name-Server. Wenn dies der Fall ist, müssen Sie
ihm lese- und Schreibzugriff auf die notwendigen Zonen gewähren (so
dass Zonen-Transfers vom primären Server funktionieren).

<p>Mehr Informationen über das Chrooten von Bind finden Sie unter
<url name="Chroot-BIND-HOWTO"
id="http://www.linuxdoc.org/HOWTO/Chroot-BIND-HOWTO.html"> (betrifft Bind
9) und <url name="Chroot-BIND8-HOWTO"
id="http://www.linuxdoc.org/HOWTO/Chroot-BIND8-HOWTO.html"> (betrifft
Bind 8).  Diese Dokumente sollten auch nach der Installation des Paketes 
<package>doc-linux-text</package> (Text-Version) oder
<package>doc-linux-html</package> (HTML-Version) verfügbar sein. Ein
anderes nützliches Dokument ist <url
id="http://www.psionic.com/papers/dns/dns-linux">.

<p>Wenn Sie für Bind 8.2.3 (aus Debian potato) ein komplettes
Chroot-Gefängnis aufsetzen (d.h. Sie benutzen nicht nur <tt>-t</tt>) ,
stellen Sie sicher, dass Sie die folgenden Dateien darin haben:

<example>
dev/log -  syslogd sollte hierauf hören
dev/null
etc/bind/named.conf 
etc/localtime
etc/group - mit einer einzigen Zeile: "named:x:GID:"
etc/ld.so.cache - mit ldconfig erstellt   
lib/ld-2.1.3.so
lib/libc-2.1.3.so
lib/ld-linux.so.2 - symbolischer Link auf ld-2.1.3.so
lib/libc.so.6 - symbolischer Link auf libc-2.1.3.so
sbin/ldconfig - kann gelöscht werden, nachdem Chroot aufgesetzt wurde
sbin/named-xfer - wenn Sie Namen transferieren
var/run/
</example>

<p>Sorgen Sie auch dafür, dass <prgn>syslogd</prgn> auf
$CHROOT/dev/log achtet, so dass der Name-Server seine
syslog-Einträge in das lokale System-Protokoll schreiben lassen
kann.

<p>Wenn Sie Probleme mit dynamischen Bibliotheken vermeiden wollen,
können Sie Bind statisch compilieren. Sie können hierzu
<prgn>apt-get</prgn> mit der <tt>source</tt> Option benutzen. Es kann
sogar die Pakete herunterladen, die Sie zum Compilieren benötigen.
Sie müssten etwas ähnliches wie das hier tun:

<!-- FIXME: Does bind use autoconf? -->
<example>
$ apt-get --download-only source bind build-dep bind
$ cd bind-8.2.5-2
(ändern Sie das Makefile.in , so dass CFLAGS die Option '-static'
beinhaltet bevor die @CFLOAGS@ Definition von autoconf verwendet wird)
$ dpkg-buildpackage -rfakeroot
$ cd ..
$ dpkg  -i bind-8.2.5-2*deb
</example>

<p>Nach der Installation werden Sie die Dateien in das Chroot-Gefängnis
verschieben müssen <footnote>es sei denn, Sie benutzen die
<tt>instdir</tt> Option, wenn Sie <prgn>dpkg</prgn> aufrufen, aber dann
wird das chroot-Gefängnis etwas komplizierter </footnote>. Sie
können die <tt>init.d</tt> Skripten in <file>/etc/init.d</file>
lassen, so dass das System automatisch den Name-Server starten wird, aber
editieren Sie sie in dem Sie bei den <prgn>start-stop-daemon</prgn>
Aufrufen in diesen Skripten <tt>--chroot /location_of_chroot</tt>
hinzufügen.

<p>FIXME, merge info from
<url id="http://people.debian.org/~pzn/howto/chroot-bind.sh.txt">,
<url id="http://people.pdxlinux.org/~karlheg/"> (Bind9 in Debian),
<url id="http://www.cryptio.net/~ferlatte/config/"> (Debian-spezifisch),
<url id="http://www.psionic.com/papers/whitep01.html">, 
<url id="http://csrc.nist.gov/fasp/FASPDocs/NISTSecuringDNS.htm">
und
<url id="http://www.acmebw.com/papers/securing.pdf">.

<sect>Absichern von Apache

<p>FIXME: Add content.

<p>Sie können den Zugriff auf Ihren Apache Server einschränken,
wenn Sie ihn nur intern benutzen wollen (zum Beispiel zu Testzwecken,
oder um auf die <package>doc-central</package> Archive zuzugreifen, etc.)
und nicht wollen, dass von Außen auf ihn zugegriffen werden kann. Um
dies zu tun benutzen Sie die <tt>Listen</tt> oder <tt>BindAddress</tt>
Direktiven in der Datei <file>/etc/apache/http.conf</file>.

<p>Benutzen von Listen:
<example>
Listen 127.0.0.1:80
</example>
<p>Benutzen von BindAddress:
<example>
BindAddress 127.0.0.1
</example>

<p>Starten Sie anschließend den Apache mit <tt>/etc/init.d/apache
restart</tt> neu, und Sie werden sehen, dass er nur auf die lokale
Schleife achtet.

<p>In jedem Fall sollten Sie, wenn Sie nicht die ganze Funktionalität
die Apache zur Verfügung stellt benutzen wollen, mal einen Blick auf
die anderen Web-Server aus Debian werfen, zum Beispiel
<package>dhttpd</package>.

<p>Die <url name="Apache Documentation"
id="http://httpd.apache.org/docs/misc/security_tips.html"> stellt viele
Informationen zu Sicherheitsmaßnahmen, die Sie auf einem Apache
Web-Server anwenden können, bereit (die gleichen Informationen
erhalten Sie unter Debian auch durch das Paket
<package>apache-doc</package>).

<sect>Absichern von finger

<p>Wenn Sie einen finger-Dienst laufen lassen wollen, fragen Sie sich
bitte zuerst, ob Sie das auch tun müssen. Wenn Sie müssen,
werden Sie feststellen, dass Debian viele finger-Daemonen zur
Verfügung stellt (hier die Ausgabe von <prgn>apt-cache search
fingerd</prgn>):

<list>
<item>cfingerd - Konfigurierbarer finger-Daemon
<item>efingerd - Ein weiterer Unix-finger-Dämon mit anpassbarer Ausgabe
<item>ffingerd - Ein sicherer finger-Daemon
<item>fingerd - Remote-User Informationsserver
<item>xfingerd - BSD-ähnlicher finger-Daemon mit qmail Unterstützung
</list>
<p><package>ffingerd</package> ist der empfohlene finger-Daemon, wenn Sie
vorhaben, einen öffentlichen Dienst anzubieten. In jedem Fall sind
Sie dazu angespornt, ihn über inetd, xinetd oder tcpserver laufend
aufzusetzen: Schränken Sie die Anzahl der Prozesse die gleichzeitig
laufen dürfen ein. Schränken Sie den Zugriff auf den
Finger-Daemon von bestimmten Hosts ein (indem Sie tcp-wrapper benutzen)
und lassen Sie ihn nur auf die Schnittstellen achten, auf die er achten
muss.


<sect>Allgemeine chroot und suid Paranoia

<p>Wahrscheinlich ist es nur fair zu sagen, dass die Komplexität von
BIND der Grund dafür ist, warum er in den letzten Jahren so oft
für Attacken verwundbar war.

<p>Dies trifft auch auf andere Programme mit komplexen Funktionen und
größerer Nutzergemeinde zu, einschließlich sendmail und einige
ftp-Daemonen (z.B. wu-ftpd). (Natürlich kann auch ein Programm ohne
viele Funktionen, das seine Nutzer nicht zufrieden stellt, unsicher sein,
abgesehen davon, dass es nutzlos ist.)

<p>In jedem Fall sollten Sie, wenn Sie diese laufen lassen, ähnliche
Arrangements für sie in Erwägung ziehen &mdash; entziehen von
root-Privilegien, einsperren in ein chroot-Gefängnis &mdash; oder
ersetzen durch ein sichereres Äquivalent.


<sect>Allgemeine Klartextpasswort Paranoia
<p>
Sie sollten versuchen, jeden Netzwerk-Dienst, der seine Passworte als
Klartext über das Netz sendet oder empfängt, wie zum Beispiel
FTP/Telnet/NIS/RPC, vermeiden. Der Autor empfiehlt jedem ssh anstelle von
telnet und ftp zu verwenden.

<p>Vergessen Sie jedoch nicht, dass die Migration von telnet zu ssh die
Sicherheit in keinster Weise erhöht, wenn Sie weiterhin Klartext-
Protokolle verwenden. Am besten wäre es ftp, telnet, pop, imap und
http zu entfernen und durch ihre entsprechenden verschlüsselten
Dienste zu ersetzen. Sie sollten in Erwägung ziehen von diesen
Diensten zu deren SSL-Versionen zu wechseln: ftp-ssl, telnet-ssl,
pop-ssl, https ...

<p>Die meisten der oben aufgelisteten Tipps gelten für jedes
unixoide System (Sie werden sie in jedem anderen sicherheitsrelevanten
Dokument, das Sie jemals lesen, wiederfinden, wenn es sich auf Linux und
andere Unices bezieht).

<sect>NIS deaktivieren

<p>Sie sollten, wenn möglich, nicht NIS, den Network Information
Service, benutzen, da er das gemeinsame Nutzen von Passworten erlaubt. Dies kann
sehr unsicher sein, wenn Ihr Setup kaputt geht.

<p>Wenn Sie Passwörter zwischen verschiedenen Maschinen teilen
müssen, sollten Sie andere alternativen in Erwägung ziehen. Zum
Beispiel können Sie einen LDAP Server aufsetzen, und PAM auf Ihren
System so konfigurieren, dass es den LDAP Server zur User
Authentifizierung kontaktiert. Sie finden ein detailliertes Setup in dem
<url name="LDAP-HOWTO"
id="http://www.linuxdoc.org/HOWTO/LDAP-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/LDAP-HOWTO.txt.gz</file>).

<p>Lesen Sie mehr zu Sicherheit und NIS in dem 
<url name="NIS-HOWTO" id="http://www.linuxdoc.org/HOWTO/NIS-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/NIS-HOWTO.txt.gz</file>).


<p>FIXME (jfs): Add info on how to setup this in Debian

<sect id="rpc">Abschalten von RPC-Diensten

<p>Sie sollten RPC wann immer nur möglich abschalten, dass ist dann
der Fall, wenn Sie ihn nicht benötigen.
<footnote>
Sie werden es wahrscheinlich brauchen, wenn Sie NFS (Network FileSystem)
oder NIS (Network Information System) oder andere RPC-basierende Dienste
benutzen.
</footnote>
Es sind viele Sicherheitslöcher sowohl für den
Portmapper, als auch für RPC-basierende Dienste bekannt und
könnten sehr leicht ausgenutzt werden. Andererseits können
NFS-Dienste in manchen Netzwerken sehr wichtig sein, also versuchen Sie
in Ihrem Netzwerk die Balance zwischen Sicherheit und Nutzbarkeit zu
wahren. Einige DDoS (distributed denial of service) Angriffe benutzen
RPC-Löcher, um in das System einzudringen und als so genannter
Agent/Handler zu fungieren. Lesen Sie mehr zu Sicherheit in NFS im <url
name="NFS-HOWTO" id="http://www.linuxdoc.org/HOWTO/NFS-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/NFS-HOWTO.txt.gz</file>).

<p>Das Abschalten von portmap ist relativ einfach. Es gibt aber
verschiedene Methoden. Die einfachste ist es auf einem Debian 3.0 System
einfach das Paket <package>portmap</package> zu deinstallieren. Wenn Sie
eine andere Version laufen haben, werden Sie den Dienst, wie in
<ref id="disableserv"> beschrieben, abschalten müssen, dies liegt
daran, dass das Programm Teil des Pakets <package>net-base</package> (das
nicht deinstalliert werden kann, ohne das System kaputt zu machen) ist.

<p>Dies entfernt in der Tat jeden symbolischen Link der etwas mit portmap
zu tun hat unterhalb von <tt>/etc/rc${runlevel}.d/</tt>, was Sie auch
manuell erledigen können. Eine andere Möglichkeit ist <tt>chmod
644 /etc/init.d/portmap</tt>, das erzeugt aber eine Fehlermeldung
während des Bootvorgang. Sie können auch den
<tt>start-stop-daemon</tt> Teil im <file>/etc/init.d/portmap</file>
Shell-Skript auskommentieren.

<sect id="firewall-setup">Hinzufügen von Firewall-Fähigkeiten

<p>Das Debian GNU/Linux Betriebssystem hat die eingebauten
Fähigkeiten des Linux Kernels. Dies heißt, dass Sie, wenn Sie ein
Potato (Debian 2.2) System installiert haben (mit dem standardmäßigen Kernel 2.2)
werden Sie <prgn>ipchains</prgn> Firewall-Unterstützung im Kernel
haben. Sie müssen dann das Paket <package>ipchains</package>
installieren, was (durch seine Priorität) sicherlich bereits der
Fall ist. Wenn Sie ein Woody-System (Debian 3.0) installiert haben (mit
dem standardmäßigen 2.4er Kernel) unterstützt der Kernel Ihr
<prgn>iptables</prgn> (neftfilter). Der Hauptunterschied zwischen
<prgn>ipchains</prgn> und <prgn>iptables</prgn> ist, dass letzteres auf
<em>stateful packet inspection</em> (zustandsbehaftete Paket-
untersuchung), so dass Ihnen sicherere (und einfacher zu erstellende)
Filterkonfigurationen zur Verfügung stehen.

<sect1>Firewallen des lokalen Systems

<p>Sie können eine Firewall dazu benutzen, den Zugriff auf Ihr
lokales System und sogar die Kommunikation von ihm nach Außen absichern.
Firewall-Regeln können dazu benutzt werden, Prozesse, die nicht
vernünftig konfiguriert werden können, zu schützen, aber
<em>nicht</em>, um Dienste für Netzwerke, IP-Adressen, etc. zur
Verfügung zu stellen.

<p>Dieser Schritt ist aber hauptsächlich deshalb als letztes in
dieser Anleitung, weil es <em>viel</em> besser ist, sich nicht alleine
auf die Fähigkeiten der Firewall zu verlassen, um ein System zu
schützen. Die Sicherheit eines Systems setzt sich aus mehreren
Ebenen zusammen; eine Firewall sollte die letzte sein, wenn alle Dienste
abgehärtet worden sind. Sie können sich sicherlich leicht eine
Konfiguration vorstellen, bei der ein System lediglich von einer
eingebauten Firewall geschützt, und der Administrator glückselig
die Firewall-Regeln aus irgendwelchen Gründen
(Probleme mit dem Setup, Verdruss, Denkfehler) entfernt. Dieses System
wäre weit geöffnet für Angriffe, wenn es keine andere
Schutzmaßnahmen auf dem System gibt.

<p>Andererseits können Firewall-Regeln auf dem lokalen System
dafür sorgen, dass böse Dinge nicht passieren. Sogar wenn die
bereitgestellten Dienste sicher konfiguriert sind, kann eine Firewall
vor Mißkonfigurationen oder frisch installierten Diensten, die noch
nicht passend konfiguriert sind, schützen. Außerdem wird eine enge
Konfiguration <em>nach Hause telefonierende</em> Trojaner am
Funktionieren hindern, es sei denn, der Firewall-Code wurde entfernt.
Beachten Sie, dass ein Eindringling <em>keinen</em> Superuser-Zugriff
benötigt, um ferngesteuerte Trojaner zu installieren (da es
erlaubt ist, sich an Ports zu binden, wenn es sich nicht um einen
privilegierten Port handelt und die Fähigkeiten noch vorhanden
sind).

<p>Demzufolge wäre ein passendes Firewall-Setup, eines mit einer
standardmäßigen deny policy (also alles ablehnt, dass nicht ausdrücklich
erlaubt ist), und weiterhin:

<list>

<item>eingehende Verbindungen werden nur zu lokalen Diensten von
erlaubten Maschinen gestatten

<item>ausgehende Verbindungen werden nur von Diensten erlaubt, die auf
Ihrem System benutzt werden (DNS, Web-Surfen, pop, email, ...)
<footnote>Im Gegensatz zu anderen persönlichen Firewalls für
andere Betriebssysteme, stellt Debian GNU/Linux (noch) nicht eine
Firewall-Erstellungs-Schnittstelle zur Verfügung, die Regeln
erstellen können, die einzelne Prozesse oder User einschränken.
Jedoch kann der iptables-Code so konfiguriert werden, dass er dies kann
(siehe dazu das "owner" Modul in der Manual-Seite <manref name="iptables"
section="8"> manpage)</footnote>

<item>die forward-Regel verbietet alles (es sei denn, Sie beschützen
andere System, siehe unten)

<item>alle anderen eingehenden und ausgehenden Verbindungen werden
abgelehnt.

</list>

<sect1>Schützen anderer Systeme durch eine Firewall

<p>Eine Debian-Firewall kann auch so installiert werden, dass Sie, mit
Firewall-Regeln, Systeme <em>hinter</em> ihr beschützt, indem es die
Angriffsfläche zum Internet hin einschränkt. Die Firewall kann
so konfiguriert werden, dass Sie verhindert dass System von Außerhalb
des lokalen Netzwerks Zugriff auf nicht öffentliche Dienste (Ports)
bekommen. Zum Beispiel muss auf einem Mail-Server lediglich Port 25
(auf den der Mail-Dienst aufsetzt) von Außen zugänglich sein. Eine
Firewall kann so konfiguriert werden, dass sogar wenn es neben den öffentlich
zugänglichen noch andere Dienste gibt, direkt an diese gesendete Pakete verwirft (dies
nennt man <em>filtern</em>).

<p>Sie können eine Debian GNU/Linux Maschine sogar so konfigurieren,
dass sie als Bridge-Firewall (überbrückender Schutzwall)
fungiert, d.h. eine filternde Firewall, die komplett transparent zum
gesamten Netzwerk erscheint, ohne IP-Adresse auskommt, und daher
nicht direkt attackiert werden kann. Abhängig von dem installierten
Kernel müssen Sie vielleicht den Bridge-Firewall Patch installieren,
und dann <em>802.1d Ethernet Bridging</em> in der Kernel Konfiguration
und der neuen Option <em>netfilter ( firewalling ) Support</em>
auswählen. Sehen Sie dazu <ref id="bridge-fw">, um zu erfahren, wie
man dies auf einem Debian GNU/Linux System aufsetzt.

<sect1>Konfigurieren der Firewall

<p>Natürlich ist die Konfiguration einer Firewall immer vom
System und dem Netzwerk abhängig. Ein Administrator muss vorher
das Netzwerklayout und die Systeme, die er beschützen will, kennen,
und ob andere netzwerkspezifischen Erwägungen (wie NAT oder Routing)
berücksichtigt werden müssen. Seien Sie vorsichtig, wenn Sie Ihre
Firewall konfigurieren. Wie Laurence J. Lane im
<package>iptables</package> Paket sagt:

<p><em>Die Werkzeuge können leicht falsch verwendet werden und eine
Menge Ärger verursachen, indem sie den gesamten Zugang zu einem 
Computernetzwerk stilllegen. Es ist nicht völlig ungewöhnlich, 
dass sich ein Systemadministrator, der ein System verwaltet, das Hunderte 
von Kilometer entfernt ist, irrtümlicherweise selbst davon ausgeschlossen 
hat. Man kann es sogar schaffen, sich von dem Computer aus zu sperren, dessen
Tastatur unter seinen Fingern liegt. Lassen Sie daher die gebotene Vorsicht
walten.</em> 


<p>Vergessen Sie nicht: Das einfache Installieren von
<package>iptables</package> (oder dem älterem Firewallcode) gibt Ihnen
keine Sicherheit, es stellt lediglich die Software zur Verfügung. Um
eine Firewall zu haben, müssen Sie sie konfigurieren.

<p>Wenn Sie nicht viel über Firewalls wissen, lesen Sie das
Firewalling-HOWTO, das Sie im Paket <package>doc-linux-text</package>
finden (andere Formate gibt es auch). Sehen Sie auch <ref
id="references"> für weitere (allgemeinere) Verweise.

<sect2>Machen Sie es auf die Debian Art

<p>Wenn Sie Debian 3.0 benutzen, werden Sie feststellen, dass Sie bereits
das Paket <package>iptables</package> installiert haben. Dies ist die
Unterstützung für die Netfilter-Implementation in 2.4.4+
Kerneln. Da das System nach der Installation aber keine Firewall-Regeln
kennen kann (Firewall-Regeln sind zu systemspezifisch), müssen Sie
iptables einschalten. Wie auch immer: Die Skripten wurden so
konfiguriert, dass der Administrator Firewall-Regeln aufsetzen kann und
die init-Skripte sie dann <em>lernen</em> können und so immer als
das Setup der Firewall fungieren.

<p>Hierzu müssen Sie folgendes tun:

<list>

<item>Konfigurieren Sie das Paket so, dass es mit dem System gestartet
wird. Bei neueren Versionen (seit 1.2.6a-1) werden Sie während der
Installation hiernach gefragt. Sie können es hinterher wieder mit
<tt>dpkg-reconfigure -plow iptables</tt> ändern. <em>Wichtig</em>:
Bei älteren Versionen geschah dies noch durch Editieren von
<file>/etc/default/iptables</file>, so dass die Variable
<tt>enable_iptables_initd</tt> auf <em>true</em> gesetzt wurde.

<item>Erstellen Sie Ihr Firewall-Setup mit iptables, benutzen Sie
dazu die Kommandozeile (siehe <manref name="iptables" section="8">) oder
andere der Tools aus Debians Firewall-Paketen (siehe <ref
id="firewall-pack">). Sie müssen einen Satz von Firewall-Regeln
erstellen, die benutzt werden sollen wenn die Firewall <em>aktiv</em> ist,
und einen anderen wenn die Firewall <em>inaktiv</em> (dies können
auch nur leere Regeln sein) ist.

<item>Sichern Sie die erstellten Regeln mit den Skripten
<tt>/etc/init.d/iptables save_active</tt> und <tt>/etc/init.d/iptables
save_inactive</tt>.

</list>

<p>Sobald dies geschehen ist, ist Ihr Firewall-Setup im Verzeichnis
<file>/var/lib/iptables/</file> gespeichert und wird beim System-Boot
ausgeführt (oder wenn das initd Skript mit <em>start</em> und
<em>stop</em> gestartet wird). Beachten Sie, dass die standardmäßigen
Einstellungen unter Debian vorsehen, den Firewall-Code in den Multiuser-Runleveln 
(2 bis 5) sehr früh (10) zu starten. Außerdem wird er im singleuser-
Runlevel (1) gestoppt. Ändern Sie dies, wenn es nicht Ihren lokalen
Richtlinien entspricht.

<p>Wenn Sie keine Ahnung haben, wie Sie Ihre Firewall-Regeln manuell
aufsetzen sollen, sehen Sie in dem <em>Packet Filtering HOWTO</em> und
<em>NAT HOWTO</em> aus dem Paket <package>iptables</package>, zu finden
unter  <file>/usr/share/doc/iptables/html/</file> nach. Zudem stellt die
Konfigurationsdatei <file>/etc/default/iptables</file> noch weitere
Informationen zu diesem Paket zur Verfügung.


<sect2 id="firewall-pack">Nutzen von Firewall-Paketen

<p>Das manuelle Aufsetzen einer Firewall kann für neue (und
manchmal auch für erfahrene) Administratoren kompliziert sein.
Hierfür hat die Freie-Software Gemeinschaft eine große Zahl von
Tools erstellt, die zur einfachen Konfiguration einer Lokalen Firewall
benutzt werden können. Seien Sie vor gewarnt, dass einige dieser
Tools sich mehr auf lokalen Schutz konzentrieren (auch <em>personal
firewall</em> genannt), während andere vielseitiger sind, und dazu 
benutzt werden können, komplexere Regelwerke zum Schutz ganzer Netzwerke zu
erstellen.

<p>Einige Programme, die unter Debian zum Aufsetzen von Firewall-Regeln
benutzt werden können, sind:

<list>
<item><package>firestarter</package>
<item><package>knetfilter</package>
<item><package>fwbuilder</package>
<item><package>shorewall</package>
<item><package>mason</package>, das basierend auf dem Netzwerkverkehr,
denn Ihr System "sieht", Firewall-Regeln vorschlagen kann
<item><package>bastille</package> (unter anderem besitzt diese neue Version
von bastille unter den Abhärtungsstufen die Möglichkeit,
Firewall-Regeln während des Starts auszuführen)
<item><package>ferm</package>
<item><package>fwctl</package>
<item><package>easyfw</package>
<item><package>firewall-easy</package>
<item><package>ipac-ng</package>
<item><package>gfcc</package>
<item><package>lokkit</package> oder <package>gnome-lokkit</package>
</list>

<p>Die Pakete gfcc, firestarter und knetfilter sind graphische
Administrations-Schnittstellen, die entweder GNOME (die ersten beiden)
oder KDE (das letzte) benutzen und die eher benutzerorientiert sind (z.B.
für Heimanwender) als die anderen Pakete in der Liste, die sich eher
an Administratoren richten.

<p>Seien Sie vor gewarnt, dass manche der zuvor skizzierten Pakete eigene
Firewall-Skripten einführen, die beim Systemstart ausgeführt
werden sollen, dies wird zweifellos mit dem allgemeinen Setup (wenn 
konfiguriert) kollidieren und dürfte zu unerwünschten Nebeneffekten führen. 
Das Firewall-Skript, das zuletzt ausgeführt wird, wird das System
konfigurieren (was Sie so vielleicht nicht vorhatten). Sehen Sie hierzu
in der Paket-Dokumentation nach und benutzen Sie nur eines dieser Setups.
Allgemeiner: Andere Programme, die helfen die Firewall-Regeln
aufzusetzen, können in den Konfigurationsdateien anderer
rum pfuschen.

<p>FIXME: Add more info regarding this packages

<p>FIXME: Check Information on Debian firewalling and what/how does it
change from other distributions.

<p>FIXME: Where should the custom firewalling code be enabled (common
FAQ in debian-firewall?)
