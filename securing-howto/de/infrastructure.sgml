<!-- CVS revision of original english document "1.8" -->

<chapt>Die Infrastruktur für Sicherheit in Debian

<sect id="debian-sec-team">Das Sicherheitsteam von Debian

<p>Debian hat ein Sicherheitsteam, das aus fünf Mitgliedern und zwei Sekretären
besteht. Es ist für die Sicherheit in der <em>Stable</em>-Veröffentlichung
verantwortlich. Das bedeutet, dass es Sicherheitslücken nachgeht, die in
Software auftauchen (indem es Foren wie bugtraq oder vuln-dev beobachtet), und
ermittelt, ob davon die <em>Stable</em>-Veröffentlichung betroffen ist.

<p>Das Sicherheitsteam von Debian ist auf der Ansprechpartner für Probleme, die
von den Programmautoren oder Organisationen wie <url id="http://www.cert.org"
name="CERT"> behandelt werden und die mehrere Linuxanbieter betreffen
können. Das gilt für alle Probleme, die nicht debianspezifisch sind. Es gibt
zwei Möglichkeiten, um mit dem Sicherheitsteam in Verbindung zu treten:

<list>

<item><url id="mailto:team@security.debian.org"
name="team@security.debian.org">, die nur die Mitglieder des Sicherheitsteams
lesen.

<item><url id="mailto:security@debian.org" name="security@debian.org">, die von
allen Debianentwicklern gelesen wird (einschließlich des
Sicherheitsteams). E-Mails, die an diese Liste geschickt werden, werden nicht
im Internet veröffentlicht (es handelt sich also nicht um eine öffentliche
Mailingliste).

</list>

<p>Heikle Informationen sollten an die erste Adresse geschickt werden und unter
Umständen mit dem Schlüssel von Debian Security Contact (Schlüssel-ID 363CCD95)
verschlüsselt werden.

<p>Wenn das Sicherheitsteam ein mögliches Problem erhält, wird es untersuchen,
ob die <em>Stable</em>-Veröffentlichung davon betroffen ist. Wenn dies der Fall
ist, wird eine Ausbesserungen des Quellcodes vorgenommen. Diese Ausbesserung
schließt manchmal ein, dass Patches der Programmautoren zurückportiert werden
(da das Originalprogramm gewöhnlich eine Versionen weiter ist als das in
Debian). Nachdem die Ausbesserung getestet wurde, werden neue Pakete
vorbereitet und auf der Seite <url id="security.debian.org"> veröffentlicht,
damit sie mit <prgn>apt</prgn> abgerufen werden können (siehe <ref
id="security-update">). Zur gleichen Zeit wird eine
<em>Debian-Sicherheitsanweisung</em> (DSA) auf der Webseite veröffentlicht und
an öffentliche Mailinglisten einschließlich <url
id="lists.debian.org/debian-security-announce" name="debian-security-announce">
und bugtraq geschickt.

<p>Einige andere häufige Fragen zum Sicherheitteam von Debian können unter <ref
id="debian-sec-team-faq"> gefunden werden.


<sect id="dsa">Debian-Sicherheitsanweisungen

<p>Debian-Sicherheitsanweisungen werden erstellt, sobald eine Sicherheitslücke
entdeckt wird, die ein Debianpaket berührt. Diese Anweisungen, die von einem
Mitglied des Sicherheitsteams signiert sind, enthalten Informationen zu den
betroffenen Versionen und den Orten der Aktualisierungen und ihrer
MD5-Summen. Die Informationen sind:

<list>
<item>Versionsnummer der Ausbesserung.
<item>Art des Problems.
<item>Ob es aus der Ferne oder lokal ausnutzbar ist.
<item>Kurze Beschreibung des Pakets.
<item>Beschreibung des Problems.
<item>Beschreibung des Exploits.
<item>Beschreibung der Ausbesserung.
</list>

<p>DSAs werden sowohl auf der <url id="http://www.de.debian.org/"
name="Hauptseite von Debian"> als auch auf den <url
id="http://www.debian.org/security/" name="Sicherheitsseiten von Debian">
veröffentlicht. Das passiert normalerweise nicht, bis die Webseite neu erstellt
wurde (einmal am Tag). Daher könnten sie nicht sofort vorhanden sein. Somit ist
die vorzugswürdige Informationsquelle die Mailingliste
debian-security-announce.

<p>DSAs, die auf der Webseite veröffentlicht wurden, können aktualisiert
werden, nachdem sie an öffentliche Mailinglisten verschickt wurden. Eine
typische Aktualisierung ist, einen Querverweis auf Datenbanken mit
Sicherheitslücken hinzuzufügen. Auch Übersetzungen der DSAs
<footnote>
Übersetzungen sind in bis zu zehn verschiedenen Sprachen verfügbar.
</footnote>
werden nicht an die Sicherheitsmailinglisten geschickt, sondern sind direkt auf
der Webseite enthalten.


<sect1 id="crossreference">Querverweise der Verwundbarkeiten

<p>Debian stellt eine vollständige <url
id="http://www.de.debian.org/security/crossreferences" name="Tabelle mit
Querverweisen"> zur Verfügung, die alle verfügbaren Verweise für die
Anweisungen seit 1998 enthält. Diese Tabelle soll die <url
id="http://cve.mitre.org/cve/refs/refmap/source-DEBIAN.html"
name="Verweisübersicht von CVE"> ergänzen.

<p>Sie werden bemerkt haben, dass die Tabelle Verweise auf
Sicherheitsdatenbanken wie <url id="http://www.securityfocus.com/bid"
name="Bugtraq">,
<url id="http://www.cert.org/advisories/" name="CERT/CC Anweisungen">
und <url id="http://www.kb.cert.org/vuls" name="US-CERT Vulnerability Notes
Database"> und auf die CVE-Bezeichnungen (siehe unten) enthält. Diese Verweise
werden zur Nutzerfreundlichkeit angeboten, aber nur der CVE-Verweise werden
regelmäßig überprüft und eingefügt. Dieses Feature wurde im Juni 2002 der
Webseite hinzugefügt.

<p>Das Hinzufügen von Querverweisen auf dieses Sicherheitsdatenbanken hat
folgende Vorteile:

<list>

<item>Es erleichtert Nutzern von Debian zu erkennen und nachzuvollziehen,
welche allgemeinen (veröffentlichten) Anweisungen schon von Debian abgedeckt
wurden.

<item>Systemadministratoren können mehr über die Verwundbarkeit und ihre
Auswirkungen lernen, wenn sie den Querverweisen folgen.

<item>Diese Informationen können benutzt werden, um Ausgaben von
Verwundbarkeitsscannern, die Verweise auf CVE enthalten, zu überprüfen, um
falsche Positivmeldungen auszusortieren (vergleichen Sie <ref
id="vulnasses-false-positive">).

</list>
</sect1>


<sect1 id="cve-compatible">CVE-Kompatibilität

<p>Debians Sicherheitsanweisungen wurden am 24. Februar 2004 <url
id="http://www.de.debian.org/security/CVE-certificate.jpg" name="
CVE-kompatibel erklärt">
<footnote>
Der vollständige <url
id="http://cve.mitre.org/compatible/phase2/SPI_Debian.html"
name="Fragebogen zur Kompatibilität"> ist bei CVE erhältlich.
</footnote>.

<p>Die Entwickler von Debian verstehen die Notwendigkeit, genaue und aktuelle
Informationen über den Lage der Sicherheit in der Debian-Distribution zur
Verfügung zu stellen. Dies ermöglicht es den Benutzern, mit den Risiken durch
neue Sicherheitslücken umzugehen. CVE versetzt uns in die Lage, standardisierte
Verweise anzubieten, die es Nutzern ermöglicht, einen <url
id="http://www.cve.mitre.org/compatible/enterprise.html" name="Prozess zur
Verwaltung der Sicherheit auf Grundlage von CVE"> zu entwickeln.

<p>Das Projekt <url id="http://cve.mitre.org" name="Common Vulnerabilities and
Exposures (CVE)"> wird von der MITRE Corporation betreut und stellt eine Liste
von standardisierten Bezeichnungen für Verwundbarkeiten und Sicherheitslücken
zur Verfügung.

<p>Debian ist überzeugt, dass es außerordentlich wichtig ist, die Nutzer mit
zusätzlichen Informationen im Zusammenhang mit Sicherheitsproblemen, die die
Debian-Distribution betreffen, zu versorgen. Indem CVE-Bezeichnungen in den
Anweisungen enthalten sind, können Nutzer leichter allgemeine Verwundbarkeiten
mit bestimmten Aktualisierungen von Debian in Verbindung bringen. Dies
verringert die Zeit, die benötigt wird, um Verwundbarkeiten, die unsere Nutzer
betreffen, abzuarbeiten. Außerdem vereinfacht es die Organisation der
Sicherheit in einer Umgebung, in der schon Sicherheitswerkzeuge, die CVE
verwenden, wie Erkennungssysteme von Eindringlingen in Netzwerk oder Host oder
Werkzeuge zur Bewertung der Sicherheit eingesetzt werden, unabhängig davon, ob
sie auf der Debian-Distribution beruhen.

<p>Debian begann im Juni 2002, CVE-Bezeichnung zu den DSAs hinzuzufügen. Jetzt
sind CVE-Bezeichnungen in allen DSAs seit September 1998 enthalten, nachdem die
Nachprüfungsphase im August 2002 begonnen wurde. Alle Anweisungen können auf
der Webseite von Debian abgerufen werden. Auch Ankündigungen von neuen
Verwundbarkeiten enthalten CVE-Bezeichnungen, wenn sie zum Zeitpunkt ihrer
Veröffentlichung verfügbar waren. Anweisungen, die mit einer bestimmten
CVE-Bezeichnung verbunden sind, können direkt über die <url
id="http://search.debian.org/" name="Suchmaschine"> gesucht werden.

<p>Benutzer, die nach einer bestimmten CVE-Bezeichnung suchen wollen, können
auch die Suchmaschine verwenden, die auf debian.org verfügbar ist, um die
verfügbaren Anweisungen (auf englisch und Übersetzungen in andere Sprachen),
die mit den CVE-Bezeichnungen verbunden sind, abzurufen. Eine Suche kann nach
einem bestimmten Begriff (z.B. nach der Anweisung <url
id="http://search.debian.org/?q=advisory+%22CAN-2002-0001%22&amp;ps=50&amp;o=1&amp;m=all"
name="CAN-2002-0001">) oder nach einem Teilbegriff (z.B. alle Kandidaten von
2002, die in Anweisungen enthalten sind, finden Sie mit der Suche nach <url
id="http://search.debian.org/?q=advisory+%22CAN-2002%22&amp;ps=50&amp;o=1&amp;m=all"
name="CAN-2002"> ) durchgeführt werden. Beachten Sie, dass Sie das Wort
"advisory" zusammen mit der CVE-Bezeichnung eingeben müssen, um nur die
Sicherheitsanweisungen zu erhalten.

<p>In einige Fällen finden Sie eine bestimmte CVE-Bezeichnung in
veröffentlichten Anweisungen nicht:

<list>
<item>Keine Produkte von Debian sind von der Verwundbarkeit betroffen.

<item>Es gibt noch keine Anweisung, die die Verwundbarkeit abdeckt (das
Sicherheitsproblem wurde vielleicht als <url
id="http://bugs.debian.org/cgi-bin/pkgreport.cgi?tag=security"
name="Sicherheitsfehler"> gemeldet, aber eine Ausbesserung wurde noch nicht
getestet und hochgeladen).

<item>Eine Anweisung wurde veröffentlicht, bevor eine CVE-Bezeichung einer
bestimmten Verwundbarkeit zugewiesen wurde (sehen Sie auf der Webseite nach
einer Aktualisierung nach).

</list>
</sect1>

</sect>


<sect>Die Infrastruktur der Sicherheit bei der Paketerstellung in Debian
<!-- SB (20050426): auf englisch "Debian Security Build Infrastructure" -->

<p>Da Debian im Moment eine große Anzahl von Architekturen unterstützt, fragen
Administratoren manchmal, ob es bei einer bestimmten Architektur bis zu einer
Sicherheitsaktualisierung länger dauert als bei einer anderen. Tatsächlich sind
Aktualisierungen auf allen Architekturen zur selben Zeit verfügbar, abgesehen
von seltenen Umständen.

<p>Während früher die Sicherheitsaktualisierungen von Hand erstellt wurden, so
gilt das heute nicht mehr, wie Anthony Towns in <url
id="http://lists.debian.org/debian-devel-announce/2002/debian-devel-announce-200206/msg00002.html"
name="einer Mail"> beschreibt, die am 8. Juni 2002 an die Mailingliste
debian-devel-announce geschickt wurde.

<p>Pakete, die vom Sicherheitsteam mit einem passenden Patch (auf <url
id="security.debian.org:/org/security.debian.org/queue/unchecked"> oder <url
id="ftp://security.debian.org/pub/SecurityUploadQueue">) hochgeladen werden,
werden innerhalb von 15 Minuten nach dem Hochladen auf Signaturen
überprüft. Danach werden sie zu der Liste der Autobuilder hinzugefügt (diese
führen nicht mehr einen tägliche Durchgang durch das Archiv durch). Dadurch
können die Pakete automatisch für <em>alle</em> Architekturen 30 Minuten oder
eine Stunde oder so nach dem Hochladen erstellt werden. Allerdings werden
Sicherheitsaktualisierungen etwas anderes behandelt als normale
Aktualisierungen, die von den Paketbetreuern vorgenommen werden, da in manchen
Fällen vor einer Veröffentlichung die Aktualisierungen nochmals getestet werden
müssen, eine Anweisung geschrieben werden muss oder eine Woche oder mehr
gewartet werden muss, um zu verhindern, dass der Fehler veröffentlicht wird,
bevor nicht alle Linuxanbieter eine vernünftige Chance hatten, ihn zu beheben.

<p>Folglich arbeitet das Archiv der Sicherheitsuploads nach dem folgenden
Ablauf (dieser wird <em>"Accepted-Autobuilding"</em> genannt):

<list>

<item>Jemand findet ein Sicherheitsproblem.

<item>Jemand löst das Problem und lädt die Lösung in den Eingang von
security.debian.org hoch (dieser <em>jemand</em> ist normalerweise ein Mitglied
des Sicherheitsteams, kann aber auch ein Paketbetreuer mit einer passenden
Verbesserung sein, der sich zuvor mit dem Sicherheitsteam in Verbindung gesetzt
hat). Die Änderungsübersicht (changelog) beinhaltet ein
<em>testing-security</em> oder <em>stable-security</em> als Zieldistribution.

<item>Die hochgeladenen Dateien werden von einem Debiansystem überprüft,
verarbeitet und in die Warteschleife der angenommenen Dateien
<!-- SB (20050426): "and moved into queue/accepted" -->
weitergeleitet. Danach werden die Buildds benachrichtigt. Auf die Dateien in
der Warteschleife kann das Sicherheitsteam und (auf indirektem Wege) die
Buildds zugreifen.

<item>Buildds, die Sicherheit unterstützen, holen sich das Quellpaket (mit
einer höheren Priorität als normale Paketerstellungen), erstellen Pakete und
schicken die Logs ans Sicherheitsteam.

<item>Das Sicherheitsteam antwortet auf die Logs und die neu erstellten Pakete
werden in die Warteschleife der ungeprüften Dateien hochgeladen, wo sie von
einem Debiansystem verarbeitet und in die Warteschleife der angenommenen
Dateien verschoben werden.

<item>Wenn das Sicherheitsteam ein Quellpaket akzeptiert (d.h. dass es für alle
Architekturen korrekt Pakete erstellt, und dass es die Sicherheitslücke
schließt und keine neuen Probleme hervorruft), führen sie ein Skript aus, das

<list>
<item>das Paket im Sicherheitsarchiv installiert,

<item>die Paket-, Quell- und Veröffentlichungsdateien von security.debian.org
auf dem gewöhnlichen Weg aktualisiert (<prgn>dpkg-scanpackages</prgn>,
<prgn>dpkg-scansources</prgn> ...),

<item>eine Vorlage einer Anweisung erstellt, die das Sicherheitsteam fertig
stellen kann und

<item>(wahlweise) die Pakete zu den vorgeschlagenen Aktualisierungen
weiterleitet, so dass sie sobald wie möglich in die echten Archive eingefügt
werden können.

</list>

</list>

<p>Dieser Ablauf, der früher per Hand durchgeführt wurde, wurde während des
Freezing-Abschnitts von Debian 3.0 Woody (Juli 2002) getestet und
umgesetzt. Dank dieser Infrastruktur war es dem Sicherheitsteam möglich,
aktualisierte Pakete für Apache- und OpenSSH-Probleme für alle unterstützen
Architekturen (fast 20) in weniger als einem Tag bereitzustellen.


<sect1>Leitfaden über Sicherheitsaktualisierungen für Entwickler

<p>Diese Mail wurde von Wichert Akkerman an die <url
id="http://lists.debian.org/debian-devel-announce/2002/debian-devel-announce-200206/msg00004.html"
name="Mailingliste debian-devel-announce"> geschickt, um beschreiben, wie
Entwickler von Debian Sicherheitsprobleme in ihren Paketen handhaben. Sie wird
hier veröffentlicht, sowohl um Entwicklern zu helfen als auch um Nutzern zu
verdeutlichen, wie mit Sicherheit in Debian umgegangen wird.

<p>Beachten Sie, dass die aktuelle Referenz für diese Informationen die <url
id="http://www.debian.org/doc/manuals/developers-reference/ch-pkgs#s-bug-security"
name="Debian Entwicklerreferenz"> und dieser Abschnitt demnächst entfernt
wird.
<!-- SB (20050426): Dies steht hier schon seit dem 11.08.2001. Außerdem gibt es
für die Entwicklerreferenz keine deutsche Übersetzung. -->


<sect2>Zusammenarbeit mit dem Sicherheitsteam

<p>Wenn ein Entwickler von einem Sicherheitsproblem erfährt, egal ob in seinem
Paket oder in einem anderen, sollte er das immer dem Sicherheitsteam melden
(unter team@security.debian.org). Sie gehen ungelösten Sicherheitsproblemen
nach, können Paketbetreuern mit Sicherheitsproblemen helfen oder sie selber
lösen, sind für den Versand von Sicherheitsanweisungen verantwortlich und
betreuen security.debian.org.

<p>Beachten Sie bitte, dass Sicherheitsanweisungen nur für veröffentlichte
Distributionen erteilt werden, nicht für Testing, Unstable (siehe <ref
id="sec-unstable">) und ältere Distributionen (siehe <ref id="sec-older">).


<sect2>Erfahren von Sicherheitsproblemen

<p>Es gibt einige Möglichkeiten, wie ein Entwickler von Sicherheitsproblemen
erfahren kann:

<list>

<item>Er bemerkt sie in einem öffentlichem Forum (Mailingliste, Webseite,
etc.).

<item>Jemand reicht einen Fehlerbericht ein (es sollte das
<em>Security</em>-Tag verwendet oder vom Entwickler hinzugefügt werden).

<item>Jemand informiert ihn in einer privaten E-Mail.

</list>

<p>In den ersten beiden Fällen ist die Information öffentlich verfügbar und es
ist daher wichtig, dass eine Ausbesserung zu schnell wie möglich vorhanden
ist. Im letzten Fall könnte keine öffentliche Information vorliegen. In diesem
Fall gibt es ein paar Möglichkeiten, wie mit dem Problem umzugehen ist:

<list>

<item>Wenn es ein triviales Problem ist (wie unsicherer temporäre Dateien),
gibt es keine Notwendigkeit, das Problem geheim zu halten, und eine
Ausbesserung sollte erstellt und veröffentlicht werden.

<item>Wenn es sich um ein ernst zunehmendes Problem handelt (aus der Ferne
ausnutzbar, Möglichkeit, Root-Rechte zu bekommen), ist es vorzugwürdig, die
Information mit anderen Linuxanbietern zu teilen und eine Veröffentlichung zu
koordinieren. Das Sicherheitsteam hat Kontakte zu verschiedenen
Organisationen und Individuen und kann das erledigen.

</list>

<p>Wenn die Person, die das Problem gemeldet hat, darum bittet, die
Informationen nicht bekanntzugeben, sollte das respektiert werden, mit der
offensichtlichen Ausnahme der Mitteilung an das Sicherheitsteam (der Entwickler
sollte sichergehen, dass er dem Sicherheitsteam mitteilt, dass die
Informationen nicht bekanntgegeben werden sollen).

<p>Beachten Sie, dass in Fällen der Geheimhalten der Entwickler auch keinen
Ausbesserung nach Unstable (oder sonst irgendwo hin) hochladen darf, da die
Änderungsübersicht für Unstable öffentlich zugänglich ist.

<p>Es gibt zwei Gründe, um Informationen zu veröffentlichen, selbst von um
Geheimhalten gebeten wurde oder diese notwendig ist: Das Problem ist schon zu
lange bekannt oder es wurde öffentlich bekannt.


<sect2>Erstellen eines Pakets

<p>Wenn ein neues Paket erstellt wird, das ein Sicherheitsproblem löst, ist die
wichtigste Richtlinie, so wenige Änderung wie möglich vorzunehmen. Menschen
hängen von demselben Verhalten einer Veröffentlichung ab. Jede Veränderung
könnte also das System von jemanden unbenutzbar machen. Dies gilt besonders für
Bibliotheken: Der Entwickler muss sichergehen, dass er niemals die API oder ABI
verändern, egal wie klein die Änderungen sind.

<p>Das bedeutet, dass das Verwenden einer neuen Version des Originalprogramms
keine gute Lösung ist. Stattdessen sollten die relevanten Veränderung
zurückportiert werden. Gewöhnlich werden die Programmautoren dabei
gegebenenfalls behilflich sein, wenn Debians Sicherheitsteam nicht helfen kann.

<p>In einigen Fällen ist es nicht möglich, Sicherheitsverbesserung
zurückportieren, z.B. wenn große Mengen des Quellcodes verändert oder neu
geschrieben werden müssten. Wenn das eintritt, kann es notwendig werden, eine
neue Version des Originalprogramms zu verwenden. Das sollte aber immer im
Voraus mit dem Sicherheitsteam abgestimmt werden.

<p>Damit hängt ein anderer wichtiger Punkt zusammen: Entwickler müssen immer
ihre Änderungen testen. Wenn es einen Exploit gibt, sollte der Entwickler
versuchen, ob er tatsächlich mit dem ungepatchten Paket gelingt und im
ausgebesserten Paket scheitert. Der Entwickler sollte auch den gewöhnlichen
Gebrauch ausprobierten, da manchmal eine Sicherheitsausbesserung fast
unmerklich den normalen Gebrauch beeinträchtigt.

<p>Zu guter Letzt ein paar technische Dinge, die Entwickler bedenken sollten:

<list>

<item>Stellen Sie sicher, dass Sie sich in Ihrer Debian-Änderungsübersicht auf
die richtige Distribution beziehen. Für Stable ist das stable-security und für
Testing testing-security. Beziehen Sie sich nicht auf
&lt;codename&gt;-proposed-updates.

<item>Stellen Sie sicher, dass die Versionsnummer korrekt ist. Sie muss größer
als die des aktuellen Pakets sein, aber niedriger als die Paketversionen in
späteren Distributionen. Für Testing bedeutet das, dass es eine höhere Version
als in Unstable sein muss. Falls es dort nicht keine gibt (Testing und Unstable
haben z.B. die gleichen Versionen), laden Sie zuerst die neue Version nach
Unstable hoch.

<item>Laden Sie nicht nur die Quellen hoch (source-only upload), wenn Ihr Paket
nur binäre Pakete enthält (binary-all). Die Buildd-Infrastruktur wird diese
nicht erstellen.

<item>Wenn Sie ein Paket kompilieren, stellen Sie sicher, dass Sie es auf einem
reinen System kompilieren, auf dem nur Pakete aus der Distribution installiert
sind, für die Sie das Paket erstellen. Wenn Sie selbst ein solches System nicht
haben, können Sie es mit einer Maschine von debian.org versuchen (siehe
http://db.debian.org/machines.cgi) oder setzten Sie chroot ein (die Pakete
<package>pbuilder</package> und <package>debootstrap</package> können dafür
hilfreich sein).

</list>


<sect2>Hochladen von Sicherheitsausbesserungen

<p>Nachdem der Entwickler ein neues Paket erstellt und getestet hat, muss es
hochgeladen werden, damit es in den Archiven installiert werden
kann. Sicherheitsrelevante Dateien werden nach
ftp://security.debian.org/pub/SecurityUploadQueue/ hochgeladen.

<p>Wenn eine in die Sicherheitswarteschleife hochgeladene Datei akzeptiert
wurde, wird das Paket automatisch für alle Architekturen neu erstellt und zur
Überprüfung durch das Sicherheitsteam abgelegt.

<p>Nur das Sicherheitsteam kann auf hochgeladene Dateien, die auf Annahme oder
Überprüfung warten, zugreifen. Das ist notwendig, da es Ausbesserungen für
Sicherheitsprobleme geben könnte, die noch nicht offengelegt werden dürfen.

<p>Wenn ein Mitglied des Sicherheitsteams ein Paket akzeptiert, wird es auf
security.debian.org und als passendes &lt;codename&gt;-proposed-updates auf
ftp-master oder im Non-US-Archiv installiert.


<sect2>Die Sicherheitsanweisung

<p>Sicherheitsanweisungen werden vom Sicherheitsteam geschrieben und
veröffentlicht. Allerdings macht es ihnen gewiss nichts aus, wenn ein
Paketbetreuer den Text (teilweise) für sie erstellt. Informationen, die in
einer Anweisung enthalten seien sollten, wird in <ref id="dsa"> beschrieben.


<sect id="deb-pack-sign">Paketsignierung in Debian

<p>Dieser Abschnitt könnte auch mit "Wie man sein Debian GNU/Linux
System sicher upgraded/aktualisiert" überschrieben werden. Es
verdient hauptsächlich deshalb einen eigenen Abschnitt, weil es einen wichtigen
Teil der Infrastruktur der Sicherheit darstellt. Die Signierung von Paketen ist
ein wichtiges Thema, da es die Manipulation von Paketen in Spiegel und von
heruntergeladenen Dateien durch Man-in-the-Middle-Angriffen verhindert. Die
automatische Aktualisierung von Software ist eine wichtige Fähigkeit, aber es
ist auch wichtig, Gefahren für die Sicherheit zu entfernen, die die Verbreitung
von Trojanern und den Einbruch ins System während der Aktualisierung fördern
können
<footnote>
Einige Betriebssystem wurden schon von Problemen mit automatischen
Aktualisierungen heimgesucht, wie z.B. die <url
id="http://www.cunap.com/~hardingr/projects/osx/exploit.html" name="Mac OS X
Software-Update-Verwundbarkeit">.
<p>FIXME: probably the Internet Explorer vulnerability handling
certificate chains has an impact on security updates on Microsoft Windows.
</footnote>.

<p>Derzeit (Stand Februar 2004) stellt Debian keine signierten Pakete
für die Distribution zur Verfügung, und die <em>Woody</em>-Veröffentlichung (3.0)
wird diese Fähigkeiten nicht integrieren. Es gibt eine Lösung
für signierte Pakete, die - hoffentlich - in der nächsten
Veröffentlichung (<em>Sarge</em>) enthalten seien wird.

<p>Dieses Problem wird besser im <url
id="http://www.cryptnet.net/fdp/crypto/strong_distro.html"
name="Strong-Distribution-Howto"> von V. Alex Brennen beschrieben.


<sect1>Der vorgeschlagene Plan zur Prüfung von Paketsignaturen

<p>Der derzeitige Plan zur Prüfung von Paketsignaturen mit <prgn>apt</prgn>
ist:

<list>

<item>Die Release-Datei enthält die MD5-Summe von Packages.gz (die
die MD5-Summen der Pakete enthält) und wird signiert. Die Signatur
stammt aus einer vertrauenswürdigen Quelle.

<item>Diese signierte Release-Datei wird beim "apt-get update" herunter
geladen und zusammen mit Packages.gz gespeichert.

<item>Wenn ein Paket installiert werden soll, wird es zuerst herunter
geladen, und dann wird die MD5-Summe erstellt.

<item>Die signierte Release-Datei wird überprüft (ob die
Signatur in Ordnung ist) und die MD5-Summe der Packages.gz-Datei extrahiert.
Die MD5-Summe der Packages.gz-Datei wird erstellt und geprüft, und -
wenn sie übereinstimmt - wird die MD5-Summe des heruntergeladenen
Paketes aus ihr extrahiert.

<item>Wenn die MD5-Summe des heruntergeladenen Paketes die gleiche ist
wie in der Packages.gz-Datei, wird das Paket installiert. Andernfalls
wird der Administrator alarmiert, und das Paket wird im Zwischenspeicher
gehalten (so dass der Administrator entscheiden kann, ob es installiert
werden soll oder nicht). Wenn das Paket nicht in Packages.gz enthalten
ist, und der Administrator das System so konfiguriert hat, dass nur
geprüfte Pakete installiert werden können, wird das Paket
ebenfalls nicht installiert.
</list>

<p>Durch diese Kette von MD5-Summen ist <prgn>apt</prgn> in der Lage, zu
verifizieren, dass ein Paket aus einer bestimmten Veröffentlichung stammt. Dies
ist zwar unflexibler als jedes Paket einzeln zu signieren, kann aber auch
mit den unten aufgeführten Plänen kombiniert werden.

<p>Im Moment ist diese Vorgehensweise vollständig in apt 0.6 <url
id="http://lists.debian.org/debian-devel/2003/debian-devel-200312/msg01986.html"
name="enthalten">, das in der <em>Experimental</em>-Distribution enthalten
ist. Diese Veränderungen basieren auf dem Patch für <prgn>apt</prgn> (verfügbar
in <url id="http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=203741"
name="Fehler #203741">), der dieser Erweiterung zur Verfügung stellt. Sehen Sie
es sich doch an und versorgen Sie das BTS mit Informationen, um zu helfen, dass
dies in die Hauptveröffentlichung gelangt, da es immer noch extensives Testen
benötigt.

<p>Beachten Sie, dass wenn Sie diese experimentelle Version von apt einsetzen,
kein zusätzlicher Aufwand auf Ihrer Seite notwendig seien sollte, wenn Sie
keine debianfremden Quellen verwenden. In diesen Fällen wird eine zusätzliche
Bestätigung von apt-get erfordert. Dies wird verhindert, wenn Release- und
Release.gpg-Dateien in den debianfremden Quellen zur Verfügung stehen. Die
Release-Datei kann mit <prgn>apt-ftparchive</prgn> (ist in apt-utils 0.5.0 und
später enthalten) erstellt werden, die Release.gpg ist nur die abgetrennte
Signatur. Beide können mit folgender einfacher Prozedur erstellt werden:

<example>
  $ rm -f dists/unstable/Release
  $ apt-ftparchive release dists/unstable > dists/unstable/Release
  $ gpg --sign -ba -o dists/unstable/Release.gpg dists/unstable/Release
</example>

<p>Mit <prgn>apt-key</prgn> können neue Schlüssel zum Schlüsselbund von apt
hinzugefügt werden, der standardmäßig nur den aktuellen Signierungsschlüssel
des Debian-Archivs enthält.

<p>Die Signierung von Paketen wurde innerhalb des Debian Projektes
ausführlich diskutiert. Mehr Informationen hierzu finden Sie unter 
<url id="http://www.debian.org/News/weekly/2001/8/"> und
<url id="http://www.debian.org/News/weekly/2000/11/">.


<sect1 id="check-releases">Überprüfung der Distributionsveröffentlichungen

<p>Für den Fall dass Sie nun zusätzliche Sicherheitsprüfungen einführen wollen,
aber nicht die experimentelle Version von apt einsetzen wollen (obwohl wir
wirklich das Testen schätzen würden), können Sie das folgende Skript von
Anthony Towns benutzen. Dieses Skript führt automatisch neue
Sicherheitsüberprüfungen durch, damit ein Nutzer sicher gehen kann, dass die
Software, die er herunterlädt, die gleiche ist wie die, die von Debian
bereitgestellt wird.  Das verhindert, dass sich Debian-Entwickler in ein
fremdes System einhacken können, ohne dass eine Zurechnung und Rückverfolgung
möglich wären, die durch das Hochladen eines Pakets auf das Hauptarchiv
gewährleistet werden. Es kann auch verhindern, dass ein Spiegel etwas fast
genau abbildet, das aber eben doch nicht ganz wie in Debian, oder dass
veraltete Versionen von instabilen Paketen mit bekannten Sicherheitslücken zur
Verfügung gestellt werden.

<p>Dieser Beispielscode, umbenannt nach <prgn>apt-check sigs</prgn>,
sollte auf die folgende Art benutzt werden:
<example>
# apt-get update
# apt-check-sigs
(... Ergebnisse ...)
# apt-get dist-upgrade
</example>

<p>Zuerst müssen Sie jedoch Folgendes tun:

<list>

<item>Holen Sie sich den Schlüssel, den die Archiv-Software
verwendet, um Release-Dateien zu signieren, <url
id="http://ftp-master.debian.org/ziyi_key_2003.asc">
und fügen Sie ihn <file>~/.gnupg/trustedkeys.gpg</file> hinzu (was
standardmäßig von <prgn>gpgv</prgn> benutzt wird).
<example>
  gpg --no-default-keyring --keyring trustedkeys.gpg --import ziyi_key_2003.asc
</example>

<item>Entfernen Sie alle Zeilen aus <file>/etc/apt/sources.list</file>,
die nicht die normale "dists"-Struktur benutzen, oder ändern Sie das Skript,
so dass es auch mit denen funktioniert.

<item>Ignorieren Sie die Tatsache, dass Sicherheitsaktualisierungen von Debian
keine signierten Release-Dateien haben, und das Quelldateien (noch)
keine richtigen Prüfsummen in der Release-Datei haben.

<item>Bereiten Sie sich darauf vor, zu prüfen, dass die richtigen
Quellen durch den richtigen Schlüssel signiert wurden.

</list>

<p>Dies ist der Beispielscode für <prgn>apt-check-sigs</prgn>. Die neuste
Fassung ist unter <url id="http://people.debian.org/~ajt/apt-check-sigs">
erhältlich. Dieser Code befindet sich im Moment noch im Beta-Stadium. Für
weitere Informationen sollten Sie <url
id="http://lists.debian.org/debian-devel/2002/debian-devel-200207/msg00421.html">
lesen.

<example>
#!/bin/bash

# Copyright (c) 2001 Anthony Towns &lt;ajt@debian.org&gt;
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

rm -rf /tmp/apt-release-check
mkdir /tmp/apt-release-check || exit 1
cd /tmp/apt-release-check

>OK
>MISSING
>NOCHECK
>BAD

arch=`dpkg --print-installation-architecture`

am_root () {
        [ `id -u` -eq 0 ]
}

get_md5sumsize () {
        cat "$1" | awk '/^MD5Sum:/,/^SHA1:/' | 
          MYARG="$2" perl -ne '@f = split /\s+/; if ($f[3] eq $ENV{"MYARG"}) { 
print "$f[1] $f[2]\n"; exit(0); }'
}

checkit () {
        local FILE="$1"
        local LOOKUP="$2"

        Y="`get_md5sumsize Release "$LOOKUP"`"
        Y="`echo "$Y" | sed 's/^ *//;s/  */ /g'`"

        if [ ! -e "/var/lib/apt/lists/$FILE" ]; then
                if [ "$Y" = "" ]; then
                        # No file, but not needed anyway
                        echo "OK"
                        return
                fi
                echo "$FILE" >>MISSING
                echo "MISSING $Y"
                return
        fi
        if [ "$Y" = "" ]; then
                echo "$FILE" >>NOCHECK
                echo "NOCHECK"
                return
        fi
        X="`md5sum < /var/lib/apt/lists/$FILE | cut -d\  -f1` `wc -c < /var/lib
/apt/lists/$FILE`"
        X="`echo "$X" | sed 's/^ *//;s/  */ /g'`"
        if [ "$X" != "$Y" ]; then
                echo "$FILE" >>BAD
                echo "BAD"
                return
        fi
        echo "$FILE" >>OK
        echo "OK"
}

echo
echo "Checking sources in /etc/apt/sources.list:"
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo
(echo "You should take care to ensure that the distributions you're downloading
"
echo "are the ones you think you are downloading, and that they are as up to"
echo "date as you would expect (testing and unstable should be no more than"
echo "two or three days out of date, stable-updates no more than a few weeks"
echo "or a month)."
) | fmt
echo

cat /etc/apt/sources.list | 
  sed 's/^ *//' | grep '^[^#]' |
  while read ty url dist comps; do
        if [ "${url%%:*}" = "http" -o "${url%%:*}" = "ftp" ]; then
                baseurl="${url#*://}"
        else
                continue
        fi

        echo "Source: ${ty} ${url} ${dist} ${comps}"

        rm -f Release Release.gpg
        lynx -reload -dump "${url}/dists/${dist}/Release" >/dev/null 2>&1
        wget -q -O Release "${url}/dists/${dist}/Release"

        if ! grep -q '^' Release; then
                echo "  * NO TOP-LEVEL Release FILE"
                >Release
        else
                origline=`sed -n 's/^Origin: *//p' Release | head -1`
                lablline=`sed -n 's/^Label: *//p' Release | head -1`
                suitline=`sed -n 's/^Suite: *//p' Release | head -1`
                codeline=`sed -n 's/^Codename: *//p' Release | head -1`
                dateline=`grep "^Date:" Release | head -1`
                dscrline=`grep "^Description:" Release | head -1`
                echo "  o Origin: $origline/$lablline"
                echo "  o Suite: $suitline/$codeline"
                echo "  o $dateline"
                echo "  o $dscrline"

                if [ "${dist%%/*}" != "$suitline" -a "${dist%%/*}" != "$codelin
e" ]; then
                        echo "  * WARNING: asked for $dist, got $suitline/$code
line"
                fi

                lynx -reload -dump "${url}/dists/${dist}/Release.gpg" >/dev/nul
l 2>&1
                wget -q -O Release.gpg "${url}/dists/${dist}/Release.gpg"

                gpgv --status-fd 3 Release.gpg Release 3>&1 >/dev/null 2>&1 | s
ed -n "s/^\[GNUPG:\] //p" | (okay=0; err=""; while read gpgcode rest; do
                        if [ "$gpgcode" = "GOODSIG" ]; then
                            if [ "$err" != "" ]; then
                                echo "  * Signed by ${err# } key: ${rest#* }"
                            else
                                echo "  o Signed by: ${rest#* }"
                                okay=1
                            fi
                            err=""
                        elif [ "$gpgcode" = "BADSIG" ]; then
                            echo "  * BAD SIGNATURE BY: ${rest#* }"
                            err=""
                        elif [ "$gpgcode" = "ERRSIG" ]; then
                            echo "  * COULDN'T CHECK SIGNATURE BY KEYID: ${rest
%% *}"
                            err=""
                        elif [ "$gpgcode" = "SIGREVOKED" ]; then
                            err="$err REVOKED"
                        elif [ "$gpgcode" = "SIGEXPIRED" ]; then
                            err="$err EXPIRED"
                        fi
                    done
                    if [ "$okay" != 1 ]; then
                        echo "  * NO VALID SIGNATURE"
                        >Release
                    fi)
        fi
        okaycomps=""
        for comp in $comps; do
                if [ "$ty" = "deb" ]; then
                        X=$(checkit "`echo "${baseurl}/dists/${dist}/${comp}/bi
nary-${arch}/Release" | sed 's,//*,_,g'`" "${comp}/binary-${arch}/Release")
                        Y=$(checkit "`echo "${baseurl}/dists/${dist}/${comp}/bi
nary-${arch}/Packages" | sed 's,//*,_,g'`" "${comp}/binary-${arch}/Packages")
                        if [ "$X $Y" = "OK OK" ]; then
                                okaycomps="$okaycomps $comp"
                        else
                                echo "  * PROBLEMS WITH $comp ($X, $Y)"
                        fi
                elif [ "$ty" = "deb-src" ]; then
                        X=$(checkit "`echo "${baseurl}/dists/${dist}/${comp}/so
urce/Release" | sed 's,//*,_,g'`" "${comp}/source/Release")
                        Y=$(checkit "`echo "${baseurl}/dists/${dist}/${comp}/so
urce/Sources" | sed 's,//*,_,g'`" "${comp}/source/Sources")
                        if [ "$X $Y" = "OK OK" ]; then
                                okaycomps="$okaycomps $comp"
                        else
                                echo "  * PROBLEMS WITH component $comp ($X, $Y
)"
                        fi
                fi
        done
        [ "$okaycomps" = "" ] || echo "  o Okay:$okaycomps"
        echo
  done

echo "Results"
echo "~~~~~~~"
echo

allokay=true

cd /tmp/apt-release-check
diff <(cat BAD MISSING NOCHECK OK | sort) <(cd /var/lib/apt/lists && find . -ty
pe f -maxdepth 1 | sed 's,^\./,,g' | grep '_' | sort) | sed -n 's/^> //p' >UNVA
LIDATED

cd /tmp/apt-release-check
if grep -q ^ UNVALIDATED; then
    allokay=false
    (echo "The following files in /var/lib/apt/lists have not been validated."
    echo "This could turn out to be a harmless indication that this script"
    echo "is buggy or out of date, or it could let trojaned packages get onto"
    echo "your system."
    ) | fmt
    echo
    sed 's/^/    /' < UNVALIDATED
    echo
fi

if grep -q ^ BAD; then
    allokay=false
    (echo "The contents of the following files in /var/lib/apt/lists does not"
    echo "match what was expected. This may mean these sources are out of date,
"
    echo "that the archive is having problems, or that someone is actively"
    echo "using your mirror to distribute trojans."
    if am_root; then 
        echo "The files have been renamed to have the extension .FAILED and"
        echo "will be ignored by apt."
        cat BAD | while read a; do
            mv /var/lib/apt/lists/$a /var/lib/apt/lists/${a}.FAILED
        done
    fi) | fmt
    echo
    sed 's/^/    /' < BAD
    echo
fi

if grep -q ^ MISSING; then
    allokay=false
    (echo "The following files from /var/lib/apt/lists were missing. This"
    echo "may cause you to miss out on updates to some vulnerable packages."
    ) | fmt
    echo
    sed 's/^/    /' < MISSING
    echo
fi

if grep -q ^ NOCHECK; then
    allokay=false
    (echo "The contents of the following files in /var/lib/apt/lists could not"
    echo "be validated due to the lack of a signed Release file, or the lack"
    echo "of an appropriate entry in a signed Release file. This probably"
    echo "means that the maintainers of these sources are slack, but may mean"
    echo "these sources are being actively used to distribute trojans."
    if am_root; then 
        echo "The files have been renamed to have the extension .FAILED and"
        echo "will be ignored by apt."
        cat NOCHECK | while read a; do
            mv /var/lib/apt/lists/$a /var/lib/apt/lists/${a}.FAILED
        done
    fi) | fmt
    echo
    sed 's/^/    /' < NOCHECK
    echo
fi

if $allokay; then
    echo 'Everything seems okay!'
    echo
fi

rm -rf /tmp/apt-release-check
</example>

<p>Sie müssen vielleicht bei <em>Sid</em> diesen Patch verwenden, da
<prgn>md5sum</prgn> ein '-' an die Summe anfügt, wenn die Ausgabe auf stdin
erfolgt:

<example>
@@ -37,7 +37,7 @@
        local LOOKUP="$2"

        Y="`get_md5sumsize Release "$LOOKUP"`"
-       Y="`echo "$Y" | sed 's/^ *//;s/  */ /g'`"
+       Y="`echo "$Y" | sed 's/-//;s/^ *//;s/  */ /g'`"

        if [ ! -e "/var/lib/apt/lists/$FILE" ]; then
                if [ "$Y" = "" ]; then
@@ -55,7 +55,7 @@
                return
        fi
        X="`md5sum < /var/lib/apt/lists/$FILE` `wc -c < /var/lib/apt/lists/$FILE`"
-       X="`echo "$X" | sed 's/^ *//;s/  */ /g'`"
+       X="`echo "$X" | sed 's/-//;s/^ *//;s/  */ /g'`"
        if [ "$X" != "$Y" ]; then
                echo "$FILE" >>BAD
                echo "BAD"
</example>


<sect1>Alternativer Entwurf zur Einzelsignierung von Paketen

<p>Dieser zusätzliche Entwurf, jedes Paket einzeln zu signieren, erlaubt es,
Pakete zu prüfen, selbst wenn sie nicht mehr in irgendeiner Packages-Datei
erwähnt werden. Und so können auch Pakete von Dritten, für die es nie eine
Packages-Datei gab, unter Debian installiert werden. Dies wird aber kein
Standard werden.

<p>Dieser Entwurf zur Paketsignierung kann mit <package>debsig-verify</package>
und <package>debsigs</package> umgesetzt werden. Diese beiden Pakete können in
einer .deb-Datei eingebettete Signaturen erstellen und prüfen. Debian hat
bereits jetzt die Möglichkeiten, dies zu tun. Aber das Regelwerk und die
Werkzeuge hierfür werden erst nach der Woody-Veröffentlichung eingeführt.

<p>Die aktuellen Versionen von dpkg (seit 1.9.21) beinhalten einen <url
id="http://lists.debian.org/debian-dpkg/2001/debian-dpkg-200103/msg00024.html"
name="Patch">, der diese Funktionen zur Verfügung stellt, sobald
<package>debsig-verify</package> installiert ist.

<p>HINWEIS: Derzeit wird <file>/etc/dpkg/dpkg.cfg</file> standardmäßig mit der
Option "no-debsig" ausgeliefert.

<p>HINWEIS2: Signaturen von Entwicklern werden im Moment entfernt, wenn in das
Paketarchiv gelangen, da die derzeit vorzugswürdige Methode die Überprüfung der
Release-Datei ist, wie es oben beschrieben wurde.
