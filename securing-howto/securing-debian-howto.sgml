<!doctype debiandoc system>

<!--
# TODO list:
# - There was a 'useful software section' why was it removed? jfs
# - Shorten overlong lines - there are lots of sections (by jfs?) where
#   lines are routinely longer than 80 characters. Actually it makes sense
#   to author SGML with much shorter lines, because it makes editing simpler
#   (while the internal line length of the SGML source is obviously not
#   visible in any way to the end user).
#   (occur (make-string 80 ?.))   ;  C-x C-e here
# - Remove gratuitous trailing whitespace; M-x occur " +$"
# - Consider changing order of subsections so as to match the order in
#   the checklist appendix
-->

<book>

<titlepag>
<!-- Title information -->
<title>Securing Debian HOWTO
<author>
<name>Javier Fernández-Sanguino Peña</name>
<email>jfs@computer.org</email>
<version>v1.94
<date>Tue, 20 Nov 2001 14:58:24 +0100




<abstract>
This document describes the process of securing and hardening the default
Debian installation. It covers some of the common taks to setup
a secure network environment using Debian GNU/Linux.
</abstract>

<copyright> 
<copyrightsummary>
Copyright &copy;  2001  Alexander Reelsen, Javier Fernández-Sanguino Peña
Copyright &copy;  2000  Alexander Reelsen
however it is distributed under the terms of the GNU
free documentation license.
This document is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY.
</copyrightsummary>

</titlepag>

<!-- Table of contents -->
<toc>

<!-- Begin the document -->

<chapt>Introduction
<p>
One of the hardest things about writing security documents is that every case
is unique. Two things you have to pay attention to are the threat environment
and the security needs of the individual site, host, or network. For instance,
the security needs of a home user are completely different from a network in a
bank. While the primary threat a home user needs to face is the script kiddie
type of cracker, a bank network has to worry about directed attacks. 
Additionally, the bank has to protect their customer's data with arithmetic 
precision. In short, every user has to consider the tradeoff between
usability and security/paranoia.
<!-- Is this metaphor really appropriate? Sounds like rounding errors to me, era -->
<p>
Note that this HOWTO only covers issues relating to software. 
The best software in the world can't protect you if someone can physically
access the machine. You can place it under your desk, or you can place
it in a hardened bunker with an army in front of it. Nevertheless the
desktop computer can be much more secure (from a software point of view)
than a physically protected one if the desktop is configured properly and
the software on the protected machine is full of security holes.
Obviously, you must consider both issues.

<p>This document just gives an overview of what you can do 
to increase the security of your Debian GNU/Linux
system. If you have read other documents regarding Linux security, you
will find that there are common issues which might overlap with this
document. However, this document does not try to be the ultimate source
of information you will be using, it only tries to adapt this same
information so that it is meaningful to a Debian GNU/Linux system.
Different distributions do some things in different ways (startup of
daemons is an usual example); here, you will find material which is
appropriate for Debian's procedures and tools.
<!-- 
# Does this approximate the intent of the original author? (TODO: check)
# Original text said: "you will find here [sic] a different approach,
# using Debian's tools, regarding security." era
-->
<!-- IMHO yes, jfs -->

<p>If you have comments, additions or suggestions, please mail them to 
<url name="Alexander Reelsen" id="mailto:alex@rhwd.owl.de"> and 
<url name="Javier Fernández-Sanguino" id="mailto:jfs@computer.org">
and they will be incorporated into this HOWTO.

<sect>Download the HOWTO
<p>
You can download or view the newest version of the Securing Debian
HOWTO from the <url name="Debian Documentation Project"
id="http://www.debian.org/doc/manuals/securing-debian-howto/">.  Feel
free to check out the version control system through its <url
name="CVS server"
id="http://cvs.debian.org/ddp/manuals.sgml/securing-howto/?cvsroot=debian-doc">.

<!-- 
<p>
Previous (out of date) versions of this HOWTO can be found here:

<list>
<item><url name="Text-only"
id="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.txt">
<item><url name="HTML"
id="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.html">
<item><url name="HTML, tarred and gzipped"
id="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.tar.gz">
<item><url name="SGML"
id="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.sgml">
</list>
-->
<!-- TODO: remove these stale links rather than leave references to -->
<!-- the old versions hanging around? era -->


<sect>Organizational Notes/Feedback
<p>
Now to the official part. At the moment I (Alexander Reelsen) wrote
most paragraphs of this HOWTO, but in my opinion this should not stay
the case. I grew up and live with free software, it is part of my
everyday use and I guess yours, too. I encourage everybody to send me
feedback, hints additions or any other suggestions, you might have.

<p>
If you think, you can maintain a certain section or paragraph better,
then write to the document maintainer and you are welcome to do it.
Especially if you find a section marked as FIXME, that means the
authors did not have the time yet or the needed knowledge about the
topic, drop them a mail immediately.

<p>
The topic of this HOWTO makes it quite clear that it is important to
keep it up to date, and you can do your part.  Please contribute.

<sect>Prior knowledge
<p>
The installation of Debian GNU/Linux is not very difficult and you
should have been able to install it. If you already have some
knowledge about Linux or other Unices and you are a bit familiar with
basic security, it will be easier to understand this HOWTO, as this
document cannot explain every little detail of a feature (otherwise
this would have been a book instead of a HOWTO). If you are not that
familiar, however, you might want to take a look at <ref
id="references"> for where to find more in-depth information.


<sect>Things that need to be written (TODO)
<p>
<list>

<item>Add information on setting up a proxy firewall with
Debian GNU/Linux stating specifically which packages provide
proxy services
(like <package>xfwp</package>,
<package>xproxy</package>, <package>ftp-proxy</package>, 
<package>redir</package>,
<package>smtpd</package>, <package>nntp-cache</package>, <package>dnrd</package>,
<package>jftpgw</package>,<package>oops</package>,<package>pnsd</package>,
<package>perdition</package>,<package>transproxy</package>,
<package>tsocks</package>). Should point to the HOWTO for any
other info.

<item>Check all the reference URLs and remove/fix those no longer available.

<item>Add information on available replacements (in Debian) for common
servers which are useful for limited functionality. Examples: 

	<list>
	<item>local lpr with cups (package)?

	<item>remote lrp with lpr

	<item>bind with dnrd/maradns

	<item>apache with dhttpd/thttpd/wn (tux?)

	<item>exim/sendmail with ssmtpd/smtpd/postfix

	<item>squid with tinyproxy

	<item>ftpd with oftpd/vsftp

	<item>...

	</list>

<item>Information on Debian firewalling and what/how does it change
from other distributions. Specifically, could mention firewalling
script creators available in Debian (<package>mason</package>,
<package>easyfw</package>...) and where should the firewalling code
be enabled (common FAQ in debian-firewall?)

<item>More information regarding security-related kernel patches in
Debian, including the ones show above and talking
specifically on how to enable these patches in a Debian system.

<list>

<item>Linux Intrusion Detection (<package>lids-2.2.19</package>)

<item><url name="NSA Enhanced Linux"
id="http://www.coker.com.au/lsm/">

<item><url name="kernel-patch-2.2.18-openwall"
id="http://packages.debian.org/kernel-patch-2.2.18-openwall">

<item><package>kernel-patch-2.2.19-harden</package>

<item>Linux capabilities (in package <package>lcap</package>

<item><package>kernel-patch-freeswan,kernel-patch-int</package>

</list>

<!-- DONE
<item>Add info on how the <url name="Security Team"
id="http://security.debian.org"> works in Debian. For example:
security bugs are backported to the stable distribution if possible
(even if the version has not changed), alerts are sent to mailing
lists (including bugtraq)...  
-->

<item>Details of turning off unnecessary network services (besides
inetd), it is partly in the hardening procedure but could be broadened
a bit.

<item>Information regarding password rotation which is closely related
to policy.

<item>Policy, and educating users about policy.

<item>More about tcpwrappers, and wrappers in general?

<item><file>hosts.equiv</file> and other major security holes.

<item>Issues with file sharing servers such as Samba and NFS? 

<item>suidmanager/dpkg-statoverrides.

<item>lpr and lprng.

<item>Switching off the gnome IP things.

</list>

<sect>Changelog
 <p>
<sect1>Version 1.94
<p>Changes by Javier Fernández-Sanguino Peña.
<list>

<item>Added some notes regarding Apache and Lpr/lpng.

<item>Added some information regarding noexec and readonly partitions.

<item>Rewritten how can users help in Debian security issues (FAQ item).
</list>

<sect1>Version 1.93
<p>Changes by Javier Fernández-Sanguino Peña.
<list>

<item>Fixed location of mail program.

<item>Added some new items to the FAQ.
</list>

<sect1>Version 1.92
<p>Changes by Javier Fernández-Sanguino Peña.
<list>

<item>Added a small section on how Debian handles security

<item>Clarified MD5 passwords (thanks to `rocky')

<item>Added some more information regarding harden-X from Stephen van Egmond

<item>Added some new items to the FAQ

</list>

<sect1>Version 1.91
<p>Changes by Javier Fernández-Sanguino Peña.
<list>

<item>Added some forensics information sent by Yotam Rubin.

<item>Added information on how to build a honeynet using Debian GNU/Linux.

<item>Added some more TODOS.

<item>Fixed more typos (thanks Yotam!)

</list>

<sect1>Version 1.9
<p>Changes by Javier Fernández-Sanguino Peña.
<list>

<item>Added patch to fix mispellings and some new information (contributed
by Yotam Rubin)

<item>Added references to other online (and offline) documentation both in a section (see <ref id="references">) by itself and inline in some sections.

<item>Added some information on configuring Bind options to restrict
access to the DNS server.

<item>Added information on how to automatically harden a Debian system
(regarding the harden package and bastille).

<item>Removed some done TODOs and added some new ones.

</list>

<sect1>Version 1.8
<p>Changes by Javier Fernández-Sanguino Peña.
<list>

<item>Added the default user/group list provided by Joey Hess to the
debian-security mailing list.

<item>Added information on  LKM  rootkits (<ref id="LKM">)
 contributed by Philipe Gaspar.

<item>Added information on Proftp contributed by Emmanuel Lacour. 

<item>Recovered the checklist Appendix from Era Eriksson.

<item>Added some new TODO items and removed other fixed ones.

<item>Manually included Era's patches since they were not all included in 
the previous version.

</list>
<sect1>Version 1.7
<p>Changes by Era Eriksson.
<list>
<item>Typo fixes and wording changes <!-- FIXME: new checklist has not
been included yet, era, please send it back -->
</list>
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Minor changes to tags in order to keep on removing the tt tags
and substitute them for prgn/package tags.
</list>

<sect1>Version 1.6 
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Added pointer to document as published in the DDP (should
supersede the original in the near future) 
<item>Started a mini-FAQ
(should be expanded) with some questions recovered from my mailbox.
<item>Added general information to consider while securing.
<item>Added a paragraph regarding local (incoming) mail delivery.
<item>Added some pointers to more information.  
<item>Added information regarding the printing service.  
<item>Added a security hardening checklist.  
<item>Reorganized NIS and RPC information.
<item>Added some notes taken while reading this document on my new
Visor :) 
<item>Fixed some badly formatted lines.  
<item>Fixed some typos.  
<item>Added a Genius/Paranoia idea contributed by Gaby
Schilders.
</list>
<sect1>Version 1.5 

<p>Changes by Josip Rodin and Javier Fernández-Sanguino Peña.

<list>
<item>Added paragraphs related to BIND and some FIXMEs.  <!-- Removed
this because I found no evidence for it in the diffs. // era Rewrote
style in order to make it more formal.  -->
</list>
<sect1>Version 1.4
    <p>
    <list>
    <item>Small setuid check paragraph <item>Various minor cleanups
    <item>Found out how to use <tt>sgml2txt -f</tt> for the txt
    version</item>
    </list>
<sect1>Version 1.3
    <p>
    <list>
    <item>Added a security update after installation paragraph
    <item>Added a proftpd paragraph <item>This time really wrote
    something about XDM, sorry for last time
    </list>
<sect1>Version 1.2
    <p>
    <list>
    <item>Lots of grammar corrections by James Treacy, new XDM
    paragraph
    </list>
<sect1>Version 1.1
    <p>
    <list>
    <item>Typo fixes, miscellaneous additions
    </list>
<sect1>Version 1.0
    <p>
    <list>
    <item>Initial release
    </list>



<sect>Credits
<p>
<list>
<item>Alexander Reelsen wrote the original document. 

<item>Javier Fernández-Sanguino added more info to the original doc.

<item>Robert van der Meulen with the quota paragraphs and many good ideas

<item>Ethan Benson corrected the PAM paragraph and had some good ideas.

<item>Dariusz Puchalak contributed some information to several
chapters.

<item>Gaby Schilders contributed a nice Genius/Paranoia idea.

<item>Era Eriksson smoothed out the language in a lot of
places and contributed the checklist appendix.

<item>Philipe Gaspar wrote the LKM information.

<item>Yotam Rubin contributed fixes for many typos as well
as information regarding bind versions and md5 passwords.

<item>All the people who made suggestions for improvement that
(eventually) got included here.

<item>All the folks who encouraged me (Alexander) to write this HOWTO.

<item>The whole Debian project.
</list>



<chapt>Before you begin 


<sect>What do you want this system for?

<p>Securing Debian is not very different from securing any other
system; in order to do it properly, you must first decide what do you
intend to do with it. After this, you will have to consider that the
following tasks need to be taken care of if you want a really secure
system.  

<p>You will find that this manual is written from the bottom
up, that is, you will read some information on tasks to do before,
during and after the installation of your Debian system is made. The
tasks can also be though of as:

<list>

<item>Decide which services you need and limit your system to those.
This includes deactivating/uninstalling unneeded services, and adding
firewall-like filters, or tcpwrappers.  

<item>Limit users and permissions in your system. 

<item>Harden offered services so that, in
the event of a service compromise, the impact to your system is
minimized.  

<item>Use appropriate tools to guarantee that unauthorized
use is detected so that you can take appropriate measures.

</list>

<sect id="references">Be aware of general security problems

<p>The following manual does not (usually) go into the details on why
some issues are considered security risks. However, you might want to
have a better background regarding general UNIX and (specific) Linux
security. Take some time to read over security related documents in
order to take informed decisions when you are encountered with
different choices. Debian GNU/Linux is based on the Linux kernel, so
many of the information regarding Linux, as well as from other
distributions and general UNIX security also apply to it (even if the
tools used, or the programs available, differ).

<p>Some useful documents include:

<list>

<item>The <url name="Linux Security HOWTO"
id="http://www.linuxdoc.org/HOWTO/Security-HOWTO.html"> is one of the
best references regarding general Linux Security.

<item>
The <url id="http://www.seifried.org/lasg" name="Linux Security
  Administrator's Guide"> (provided in Debian through the
  <package>lasg</package> package) is a complete guide that touches
  all the issues related to security in Linux, from kernel security to
  VPNs. It is somewhat obsolete (not updated since 1999) and has been
  superseded by the Linux Security Knowledge Base (currently not
  available online, used to be at <url
  id="http://www.securityportal.com/lskb/"> which is also provided in
  Debian through the <package>lksb</package> package.

<item>In <url name="Securing and Optimizing Linux: RedHat Edition"
id="http://www.linuxdoc.org/links/p_books.html#securing_linux"> you
can find a similar document to this manual but related to RedHat, some
of the issues are not distribution-specific and also apply to Debian.

<item>For network administrators, a good reference for building a
 secure network is the <url name="Securing your Domain HOWTO"
 id="http://www.linuxsecurity.com/docs/HOWTO/Securing-Domain-HOWTO/Securing-Domain-HOWTO.html">.

<item>If you want to evaluate the programs you are going to use (or want to build up some new ones) you 
should read the <url name="Secure Programs HOWTO"
id="http://www.linuxdoc.org/HOWTO/Secure-Programs-HOWTO.html">.

<!-- TODO: check URLs --> 

<item>If you are considering installing Firewall capabilities, you
should read the <url name="Firewall HOWTO"
id="http://www.linuxdoc.org/HOWTO/Firewall-HOWTO.html"> and the <url
name="IPCHAINS HOWTO"
id="http://www.linuxdoc.org/HOWTO/IPCHAINS-HOWTO.html">.

</list>

<p>In any case, you have more information regarding the services here
explained (NFS, NIS, SMB...) in many of the HOWTOs of the <url
name="Linuxdoc Project" id="http://www.linuxdoc.org/">, some of these
documents speak on the security side of a given service, so be sure to
take a look there too.

<p>The HOWTO documents from the Linux Documentation Proyect are
available in Debian GNU/Linux through the installation of the
<package>doc-linux-text</package> (text version) or
<package>doc-linux-html</package> (html version). After installation
these documents will be available at the
<file>/usr/share/doc/HOWTO/en-txt</file> and
<file>/usr/share/doc/HOWTO/en-html</file> directories, respectively.

<p>Other recommended Linux books:

<list>

<item>Maximum Linux Security : A Hacker's Guide to Protecting Your Linux
  Server and Network.  Anonymous. Paperback - 829 pages. Sams Publishing.
  ISBN: 0672313413.July 1999.

<item> Linux Security By John S. Flowers. New Riders; ISBN: 0735700354
March 1999

</list>

<p>Other books (which might be related to general issues
regarding UNIX and security and not Linux specific):

<list>

<item><url id="http://www.ora.com/catalog/puis/noframes.html"
        name="Practical Unix and Internet Security (2nd Edition)">
        Garfinkel, Simpson, and Spafford, Gene; O'Reilly Associates;
        ISBN 0-56592-148-8; 1004pp; 1996.

<item>Firewalls and Internet Security Cheswick, William R. and Bellovin,
        Steven M.; Addison-Wesley; 1994; ISBN 0-201-63357-4; 320pp.

</list>

<p>Some useful Web sites to keep uptodate regarding security:

<list>

<item><url name="Security Focus" id="http://www.securityfocus.com">
	the server that hosts the Bugtraq vulnerability database and
	list, and provides general security information, news and
	reports.

<item> <url name="Linux Security"
	id="http://www.linuxsecurity.com/">. General information
	regarding Linux security (tools, news...).

<item> <url name="Linux firewall and security site" id="
	http://www.linux-firewall-tools.com/linux/">. General
	information regarding Linux firewalls and tools to control and
	administrate them.

</list>

<sect>How does Debian handle security?
<p>Just so you have a general overview of security in Debian GNU/Linux
you should take note of the different issues that Debian tackles in
order to provide an overall secure system:

<list>

<item>Debian problems are always handled openly, even security related.
As the <url name="Debian Social Contract" id="http://www.debian.org/social_conract"> states:
<em>
We Won't Hide Problems                                                          
We  will  keep our entire bug-report database open for public view
at  all  times.  Reports  that users file on-line will immediately
become visible to others.
</em>
Security issues are discussed
openly on the debian-security mailing list. Debian Security
Advisories are sent to public mailing lists (both internal an external)
and published on the public server.

<item>Debian follows security issues closely. The security team 
checks many security related sources, the most important being
<url name="Bugtraq" id="http://www.securityfocus.com/cgi-bin/vulns.pl">,
on the lookout for packages with security issues that might be
included in Debian.

<item>Security updates are the first priority. When a security problem
arises in a Debian package, the security update is prepared as fast
as possible and distributed for our stable and unstable releases, including
all arquitectures.

<item>Information regarding security is centralized in a single point,
<url id="http://security.debian.org/"> is it.

<item>Debian is always trying to improve the overall security of the
distribution starting out new projects, like automatic package signature 
verification mechanisms.

<item>Debian tries to provide a useful number of security related tools
for system administration and monitoring. Developers try to tightly
integrate this tools with the distribution in order to make them better
suite to enforce local security policies. Tools include: integrity checkers, 
auditing tools, hardening tools, firewall tools, intrusion detection tools,
etc..

<item>Package maintainers are aware of security issues. This leads
to many "secure by default" service installations which might put some
limits, sometimes, to its normal use. However, Debian does try to balance
security issues and ease of administration, systems are not installed
de-activated, for example, like on the BSD family distributions. In any
case, some special security issues, like setuid programs, are part of
the <url id="http://www.debian.org/doc/debian-policy" name="Debian Policy">.

</list>

<p>This same document tries to enforce, as well a better 
distribution security-wise, by publishing 
security information specific to Debian which complements other 
information-security documents related to the tools used by Debian
or the operating system itself (see <ref id="references">.


<chapt>Before and during the installation


<sect>Choose a BIOS password
<p>
Before you install any operating system on your computer, set up a
BIOS password and change the boot sequence to disable booting from a
floppy.  Otherwise a cracker only needs physical access and a boot
disk to access your entire system.
<p>
Disabling booting without a password is even better. This can be very
effective if you run a server, because it is not rebooted very often.
The downside to this tactic is that rebooting requires human
intervention which can cause problems if the machine is not easily
accessible.


<sect>Choose an intelligent partition scheme
<p>
An intelligent partition scheme depends on the how the machine is
used.  A good rule of thumb is to be fairly liberal with your
partitions and to pay attention to the following factors:

<list>
<item>Any directory tree which a user has write permissions to, such
as e.g. /home and /tmp, should be on a separate partition.  This
reduces the risk of a user DoS by filling up your "/" mount point and
rendering the system unusable. (Note: this is not strictly true, since
there is always some space reserved for root which a normal user cannot fill)

<item>Any partition which can fluctuate, e.g. /var (especially
/var/log) should also be on a separate partition. On a Debian system,
you should create /var a little bit bigger than normal, because
downloaded packages (the apt cache) are stored in
/var/apt/cache/archives.

<item>Any partition where you want to install non-distribution
software should be on a separate partition.  According to the File
Hierarchy Standard, this is /opt or /usr/local. If these are separate
partitions, they will not be erased if you (have to) reinstall Debian
itself.

<item>From a security point of view, it makes sense to try to move
static data to its own partition, and then mount that partition
read-only. Better yet, put the data on read-only media. See below for
an elaboration.
</list>


<sect>Set a root password
<p>
Setting a good root password is the most basic requirement for having
a secure system.


<sect>Activate shadow passwords and MD5 passwords
<p>
At the end of the installation, you will be asked if shadow passwords
should be enabled. Answer yes to this question, so passwords will be
kept in the file <file>/etc/shadow</file>. Only the root user and the
group shadow have read access to this file, so no users will be able
to grab a copy of this file in order to run a password cracker against
it. You can switch between shadow passwords and normal passwords at
any time by using <tt>shadowconfig</tt>. Furthermore you are queried
during installation whether you want to use MD5 hashed passwords. This
is generally a very good idea since it allows longer passwords and
better encryption.

<p>Read more on Shadow passwords in
<url
name="Shadow Password"
id="http://www.linuxdoc.org/HOWTO/Shadow-Password-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/Shadow-Password.txt.gz</file>).


<sect>Run the minimum number of services required
<p>
You should not install services which are not needed on your
machine. Every installed service introduces new, perhaps not obvious,
but real security holes on your machine. If you still want to have
some services but you use these rarely, use the update-commands,
e.g. 'update-inetd' for removing them from the startup process.

<p>FIXME: This section needs a list of services, and information about
what they do and the security risk level involved, for newbies who
don't have a clue.


<sect>Read the debian security mailing lists

<p>It is never wrong to take a look at either the
debian-security-announce mailing list, where advisories and fixes to
released packages are announced by the Debian security team, or at
debian-security@lists.debian.org, where you can participate in
discussions about things related to Debian security.

<p>In order to receive important security update alerts, send an email
to <url name="debian-security-announce-request@lists.debian.org"
id="mailto:debian-security-announce-request@lists.debian.org"> with
the word "subscribe" in the subject line.  You can also subscribe to
this moderated email list via the web page at
<url name="http://www.debian.org/MailingLists/subscribe"
id="http://www.debian.org/MailingLists/subscribe">

<p>This mailing list has very low volume, and by subscribing to it you
will be immediately alerted of security updates for the Debian
distribution.  This allows you to quickly download new packages with
security bug fixes, which is very important in maintaining a secure
system.  (See <ref id="update"> for details on how to do this.)




<chapt>After Installation

<sect>Set a LILO or GRUB password
<p>
Anybody can easily get a root-shell and change your passwords by
entering "&lt;name-of-your-bootimage&gt; init=/bin/sh" at the boot
prompt. After changing the passwords and rebooting the system, the
person has unlimited root-access and can do anything they want to the
system.  After this procedure you will not have root access to your
system, as you do not know the root password.
<p>
To make sure that this can not happen, you should set a password for
the boot loader. You can choose between a global password or a
password for a certain image.
<p>
For LILO you need to edit the config file /etc/lilo.conf and add a
"password" and "restricted" line as in the example below.

<example>
image=/boot/2.2.14-vmlinuz
   label=Linux
   read-only
   password=hackme
   restricted
</example>

<p>
When done, rerun lilo.  Omitting the "restricted" line causes lilo to
always prompt for a password, regardless of whether LILO was passed
parameters. The default permissions for /etc/lilo.conf grant root read and
write permissions, and enable read-only access for lilo.conf's group, root.

<p>
If you use GRUB instead of LILO, edit <file>/boot/grub/menu.lst</file>
and add the following two lines at the top (substituting, of course
'hackme' with the desired password). This prevents users from editing
the boot items. 'timeout 3' specifies a 3 second delay before grub boots
the default item.

<example>
timeout 3
password hackme
</example>

To further harden the integrity of the password, you may store the password
in a crypted form. The utility grub-md5-crypt generates a hashed password
which is compatible with grub's crypted password algorithm (md5).
To specify in grub that md5 format password will be used, use the following 
directive:
<example>
timeout 3
password --md5 $1$bw0ez$tljnxxKLfMzmnDVaQWgjP0
</example>

The --md5 paramater was added to instruct grub to perform the md5 
authentication process. The provided password is the md5 crypted version of 
hackme. Using the md5 password method is preferable to choosing its 
cleartext counterpart. More information about grub passwords may be
found in the grub-doc package.


<sect>Disallow floppy booting
<p>
The default MBR in Debian before version 2.2 did not act as a usual
master boot record and left open a method to easily break into a
system:

<list>
<item>Press shift at boot time, and an MBR prompt appears 

<item>Then press F, and your system will boot from floppy disk. This
can be used get root access to the system.
</list>

This behavior can be changed by entering:

<example>
lilo -b /dev/hda
</example>

Now LILO is put into the MBR. This can also be achieved by adding
"boot=/dev/hda" to lilo.conf. There is another solution which will
disable the MBR prompt completely:

<example>
install-mbr -i n /dev/hda
</example>

On the other hand, this "back door", of which many people are just not
aware, may save your skin as well if you run into deep trouble with your
installation for whatever reasons.

<p>FIXME check whether this really is true as of 2.2 or was it 2.1?
INFO: The bootdisks as of Debian 2.2 do NOT install the mbr, but only LILO


<sect>Mounting partitions the right way
<p>
When mounting an ext2 partition, you have several additional options
you apply to the mount call or to <file>/etc/fstab</file>. For
instance, this my fstab entry for the /tmp partition:

<example>
/dev/hda7    /tmp    ext2    defaults,nosuid,noexec,nodev    0    2
</example>

<p>
You see the difference in the options sections. The option
<tt>nosuid</tt> ignores the setuid and setgid bits completely, while
<tt>noexec</tt> forbids execution of any program on that mount point,
and <tt>nodev</tt>, ignores devices. This sounds great, but it
<list>
<item>only applies to ext2 filesystems
<item>can be circumvented easily
</list>

<p>The <tt>noexec</tt> option prevents binaries from being executed
directly, but is easily circumvented:

<example>
alex@joker:/tmp# mount | grep tmp
/dev/hda7 on /tmp type ext2 (rw,noexec,nosuid,nodev)
alex@joker:/tmp# ./date
bash: ./date: Permission denied
alex@joker:/tmp# /lib/ld-linux.so.2 ./date
Sun Dec  3 17:49:23 CET 2000
</example>

<p>
However, many script kiddies have exploits which try to create and
execute files in /tmp. If they do not have a clue, they will fall into
this pit. In other words, a user cannot be tricked into executing a
trojanized binary in /tmp e.g. when he incidentally adds /tmp into his
PATH.

<p>
The following is a more thorough example. A note, though: /var could
be set noexec, but some software like Smartlist keeps its programs in
/var. The same applies to the nosuid option.

<example>
/dev/sda6       /usr            ext2    defaults,ro,nodev       0       2
/dev/sda12      /usr/share      ext2    defaults,ro,nodev,nosuid        0       2
/dev/sda7       /var            ext2    defaults,nodev,usrquota,grpquota          0       2
/dev/sda8       /tmp            ext2    defaults,nodev,nosuid,noexec,usrquota,grpquota    0       2
/dev/sda9       /var/tmp        ext2    defaults,nodev,nosuid,noexec,usrquota,grpquota    0       2
/dev/sda10      /var/log        ext2    defaults,nodev,nosuid,noexec    0       2
/dev/sda11      /var/account    ext2    defaults,nodev,nosuid,noexec    0       2
/dev/sda13      /home           ext2    rw,nosuid,nodev,exec,auto,nouser,async,usrquota,grpquota                0       2
/dev/fd0        /mnt/fd0        ext2    defaults,users,nodev,nosuid,noexec      0       0
/dev/fd0        /mnt/floppy     vfat    defaults,users,nodev.nosuid,noexec      0       0
/dev/hda        /mnt/cdrom      iso9660 ro,users,nodev.nosuid,noexec            0       0
</example>

<sect1>Setting /tmp noexec
<p>
Be careful if setting <file>/tmp</file> noexec and you want to install new software, since 
some might use it for installation. Apt is one such program
(see <url id="http://bugs.debian.org/116448">) if not configured properly
<tt>APT::ExtractTemplates::TempDir</tt>. You can set this variable in 
<file>/etc/apt/apt.conf</file> to another directory with exec privileges other
than <file>/tmp</file>

<p>Regarding noexec, please be aware that it might not offer you that much security. 
Consider this:
<example>
$ cp /bin/date /tmp
$ /tmp/date
(does not execute due to noexec)
$/lib/ld-linux.so.2 /tmp/date
(works since date is not executed directly)
</example>

<sect1>Setting /usr read-only
<p>
If you set /usr read-only you will not be able to install new packages on your
Debian GNU/Linux system. You will have, first to remount it rewad-write, install
the packages and then remount it read-only. The latest apt version (in Debian 3.0
'woody') can be configured to run commands before and after installing packages,
so you might want to configure it properly.

<sect id="update">Execute a security update
<p>
As soon as new security bugs are revealed in packages, debian maintainers and
upstream authors generally patch them within days or even hours. After the bug
is fixed, a new package is provided on <url name="http://security.debian.org"
id="http://security.debian.org">. Put the following line in your sources.list
and you will get security updates automatically, whenever you update your
system.

<example>
deb http://security.debian.org/debian-security stable/updates main contrib non-free
</example>

<p>
Most people, who don't live in a country which prohibits importing
or using strong cryptography, should add this line as well:

<example>
deb http://security.debian.org/debian-non-US stable/non-US main contrib non-free
</example>

<p>
If you like, you can add the deb-src lines to apt as well. See <manref
name="apt" section="8"> for further details.

<p>FIXME: Add info on how the signature of packages is done so that this
can be done automatically through a cron job (big warning: DNS spoofing).

<sect>PAM &mdash; Pluggable Authentication Modules
<p>PAM allows system administrators to choose how applications authenticate
users. Note that PAM can do nothing unless an application is compiled with
support for PAM. Most of the applications that are shipped with Debian 2.2
have this support built in. Furthermore Debian did not have PAM support
before 2.2. For each application there is a configuration file in
<file>/etc/pam.d/</file>.

<p>
PAM offers you the possibility to go through several authentication steps at
once, without the user's knowledge. You could authenticate against a Berkeley
database and against the normal passwd file,
and the user only logs in if he authenticates correct in both.
You can restrict a lot with PAM, just as you can open your system
doors very wide. So be careful. A typical configuration line has a control
field as its second element. 
<!-- Second in mine (old Debian v2.0 though), check this! (TODO) (era) -->
Generally it should be set to "requisite", which
returns a login failure if one module fails.
<!-- Lots of fields in mine are "required", please elaborate? (TODO) (era) -->

<p>
The first thing I like to do, is to add MD5 support to PAM applications,
since this helps protects against dictionary cracks. The following two
lines should be added to all files in /etc/pam.d/ that grant access to the 
machine, like <tt>login</tt> and <tt>ssh</tt>.

<example>
# Be sure to install libpam-cracklib first or you will not be able to log in
password   required     pam_cracklib.so retry=3 minlen=12 difok=3
password   required     pam_unix.so use_authtok nullok md5
</example>

<p>So, what does this incantation do? The first line loads the
cracklib PAM module, which provides password strength-checking,
prompts for a new password with a minimum length of 12 characters, a
difference of at least 3 characters from the old password, and allows
3 retries. The second line introduces the standard authentication
module with MD5 passwords and allows a zero length password.  The
use_authtok directive is necessary to hand over the password from the
previous module.

<p>
To make sure that the user root can only log into the system from
local terminals, the following line should be enabled in
<file>/etc/pam.d/login</file>:

<example>
auth     requisite  pam_securetty.so
</example>

<p>Then you should add the terminals from which the user root can log
into the system into <file>/etc/security/access.conf</file>.  Last but not
least the following line should be enabled if you want to set up user
limits.

<!-- TODO: This is pam.d/login you're talking about, still? Elaborate? era -->
<example>
session  required   pam_limits.so
</example>

<p>This restricts the system resources that users are allowed.  For
example, you could restrict the number of concurrent logins users may
have.

<p>Now edit <file>/etc/pam.d/passwd</file> and change the first line. You
should add the option "md5" to use MD5 passwords, change the minimum
length of password from 4 to 6 (or more) and set a maximum length, if
you desire. The resulting line will look something like:

<example>
password   required   pam_unix.so nullok obscure min=6 max=11 md5
</example>

<p>If we want to protect su, so that only some people can use it to
become root on your system, we need to add a new group "wheel" to your
system (that is the cleanest way, since no file has such a group
permission yet). Add root and the other users that should be able to
"su" to the root user to this group.  Then add the following line to
/etc/pam.d/su:

<example>
auth        requisite   pam_wheel.so group=wheel debug
</example>

<p>This makes sure that only people from the group wheel can use
<prgn>su</prgn> to become root. Other users will not be able to become
root. In fact they will get a denied message if they try to become
root.

<p>If you want only certain users to authenticate at a PAM service,
this is quite easy to achieve by using files where the users who are
allowed to login (or not) are stored. Imagine you only want to allow
user 'ref' to login via ssh. So you put him into
<file>/etc/sshusers-allowed</file> and write the following into
<file>/etc/pam.d/ssh</file>:

<example>
auth        required    pam_listfile.so item=user sense=allow file=/etc/sshusers-allowed onerr=fail
</example>

<p>Last, but not least, create /etc/pam.d/other and enter the following lines:

<example>
auth     required       pam_securetty.so
auth     required       pam_unix_auth.so
auth     required       pam_warn.so
auth     required       pam_deny.so
account  required       pam_unix_acct.so
account  required       pam_warn.so
account  required       pam_deny.so
password required       pam_unix_passwd.so
password required       pam_warn.so
password required       pam_deny.so
session  required       pam_unix_session.so
session  required       pam_warn.so
session  required       pam_deny.so
</example>

<p>These lines will provide a good default configuration for all
applications that support PAM (access is denied per default).


<sect>The limits.conf file

<p>
You should really take a serious look into this file. Here you can
define user resource limits. If you use PAM, the file
<file>/etc/limits.conf</file> is ignored and you should use
<file>/etc/security/limits.conf</file> instead.

<p>FIXME: Get a good limits.conf up here


<sect id="inetd">Customize /etc/inetd.conf
<p>
You should stop all unneeded services on your system, like
echo, chargen, discard, daytime, time, talk, ntalk and the HIGHLY
insecure considered r-services (rsh, rlogin and rcp. Use ssh
instead). After disabling those, you should check if you really need
the inetd daemon.  Many people prefer to use daemons instead of
calling services via inetd. Denial of Service possibilities exist
against inetd, which can increase the machine's load tremendously. If
you still want to run some kind of inetd service, switch to a more
configurable inet daemon like xinetd or rlinetd.

<p>
You can disable services by editing <file>/etc/inetd.conf</file>
directly, but Debian provides an alternative to this:
<tt>update-inetd</tt>. You could remove the telnet daemon by executing
this commands to change the config file and to restart the daemon (in
this case the telnet service is disabled):

<example>
/usr/sbin/update-inetd --disable telnet
</example>
<!-- # /etc/init.d/inetd restart Not needed since the manpage says update-inetd
sends a SIGHUP, commented out as suggested by Dariusz Puchalak -->

<p>If you do want services listening, but do not want to have them
listen on all IP addresses of your host, you might want to use some
undocumented feature on inetd. <!-- FIXME write the information sent
by Alexander to the debian-security mailing list -->. Or use an
alternate inetd daemon like <prgn>xinetd</prgn>.

<sect>Edit /etc/login.defs
<p>
The next step is to edit the basic configuration and action upon user login.

<example>
FAIL_DELAY          10
</example>

This variable should be set to a higher value to make it harder to use
the terminal to log in using brute force. If a wrong password is typed
in, the possible attacker (or normal user!) has to wait for 10 seconds
to get a new login prompt, which is quite time consuming when you test
passwords. Pay attention to the fact that this setting is useless if
using program other than getty, such as mingetty for example.

<example>
FAILLOG_ENAB        yes
</example>

If you enable this variable, failed logins will be logged. It is important to
keep track of them to catch someone who tries a brute force attack.

<example>
LOG_UNKFAIL_ENAB    yes
</example>

If you set the variable "FAILLOG_ENAB" to yes, then you should also
set this variable to yes. This will record unknown usernames if the
login failed. If you do this, make sure the logs have to the proper
permissions (640 for example, with an appropriate group setting such
as adm), because users often accidentally enter their password as the
username and you do not want others to see it.

<example>
SYSLOG_SU_ENAB      yes
</example>

<p>This one enables logging of <tt>su</tt> attempts to syslog. Quite
important on serious machines but note that this can create privacy
issues as well.

<example>
SYSLOG_SG_ENAB      yes
</example>

<p>The same as SYSLOG_SU_ENAB but applies to the <prgn>sg</prgn> program.

<example>
MD5_CRYPT_ENAB      yes
</example>

<p>As stated above, MD5 sum passwords greatly reduce the problem of
dictionary attacks, since you can use longer passwords.
If you are using slink, read the docs about MD5 before enabling this
option.  Otherwise this is set in PAM.

<example>
PASS_MAX_LEN        50
</example>

<p>If MD5 passwords are activated in your PAM configuration, then this
variable should be set to the same value as used there.


<sect>Editing /etc/ftpusers
<p>
This file contains a list of users who are not allowed to log into the
host using ftp. Only use this file if you really want to allow ftp
(which is not recommended in general, because it uses cleartext
passwords). If your daemon supports PAM, you can also use that to
allow and deny users for certain services.


<sect>Using tcpwrappers 

<p>TCP wrappers were developed when there were no real packet filters
available and access control was needed. The TCP wrappers allow you to
allow or deny a service for a host or a domain and define a default
allow or deny rule.  If you want more informations take a look at
<manref name="hosts_access" section="5">.

<p>Now, here comes a small trick, and probably the smallest intrusion
detection system available. In general, you should have a decent
firewall policy as a first line, and tcp wrappers as the second line
of defense.  One little trick is to set up a SPAWN <footnote>beware of
the case here since <em>spawn</em> will not work</footnote> command in
/etc/hosts.deny that sends mail to root whenever a denied service
triggers wrappers:

<example>
ALL: ALL: SPAWN ( \
  echo -e "\n\
  TCP Wrappers\: Connection refused\n\
  By\: $(uname -n)\n\
  Process\: %d (pid %p)\n\
  User\: %u\n\
  Host\: %c\n\
  Date\: $(date)\n\
" | /usr/bin/mail -s "Connection to %d blocked" root) &
</example>

<p><em>Beware</em>: The above printed example can easily be DoSed by
doing lots of connections in a short period of time. Many emails mean
a lot of file I/O by sending only a few packets.

<!--
# Could this example be more interesting? 
# It also relates to the next section (jfs)
#
# era: cf hosts_access(5) manual page,
# and why are you not using logger(1) here? (FIXME?)
#
#&lt;example&gt;
#ALL: ALL: SPAWN ( \
#  /usr/local/sbin/send_syslog %u %c %d )
#&lt;example&gt;

#  With send_syslog as:
##!/usr/bin/perl -w
#
#use Sys::Syslog qw(:DEFAULT setlogsock);
#
#$user=shift(@ARGV) || 'unkown';
#$host=shift(@ARGV) || 'unkown';
#$service=shift(@ARGV) || 'unkown';
#setlogsock('unix');
#openlog("alert",'', 'user');
#syslog('warning', 'Connection from %s at %s to %s blocked.', ($user, $host, $service) );
#closelog();
#
#exit 0;
-->

<sect id="log-alerts">The importance of logs and alerts

<p>How log and alerts are treated is an important issue in a secure
system.  It is easily to see that, even if the system is perfectly
configured and, supposedly, 99% secure. If the 1% comes to happen, and
there are no security measures in place to, first, detect this and,
second, raise alarms, the system is not secure at all.

<sect1>Configuring where alerts are sent

<p>Debian comes with a standard syslog configuration (in
/etc/syslog.conf) that logs messages to the appropriate files depending
on the system facility.  You should be familiar with this; have a look
at the <file>syslog.conf</file> file and the documentation if not.  If
you intend to maintain a secure system you should be wary of where log
messages are sent so they do not go unnoticed.  

<p>For example, sending messages to the console also is an interesting
setup useful for many production-level systems. But for many such
systems it is important to also add a new machine that will serve as
loghost (i.e. it receives logs from all other systems).

<p>Root's mail should be considered also, many security controls (like
<package>snort</package>) send alerts to root's mailbox. This 
mailbox usually points to
the first user created in the system (check /etc/aliases). Take care
to send root's mail to some place where it will be read (either
locally or remotely).

<p>There are other role accounts and aliases on your system.  On a
small system, it's probably simplest to make sure that all such
aliases point to the root account, and that mail to root is forwarded
to the system administrator's personal mailbox.

<p>FIXME: it would be interesting to tell how a Debian system can send
SNMP traps  related to security problems (jfs). Check: 
<package>snmptraglogd</package>,
<package>snmp</package> and <package>snmpd</package>.


<sect1>Using a loghost

<p>A loghost is a host which collects syslog data remotely over the
network. If one of your machines is cracked, the intruder is not able
to cover his tracks, unless he hacks the loghost as well.  So, the
loghost should be especially secure.  Making a machine a loghost is
simple. Just start the syslogd with 'syslogd -r' and a new loghost is
born. In order to do this permanently in Debian, edit
<file>/etc/init.d/sysklogd</file> and change the line

<example>
SYSLOGD=""
</example>
to 
<example>
SYSLOGD="-r"
</example>

Next, configure the other machines to send data to the loghost.  Add
an entry like the following to <file>/etc/syslog.conf</file>:

<example>
facility.level            @your_loghost
</example>

See the documentation for what to use in place of <em>facility</em>
and <em>level</em> (they should not be entered verbatim like this).
If you want to log everything remotely, just write:

<example>
*.*                       @your_loghost
</example>

into your syslog.conf. Logging remotely as well as locally is the best
solution (the attacker might presume to have covered his tracks after
deleting the local log files). See the <manref name="syslog"
section="3">, <manref name="syslogd" section="8"> and <manref
name="syslog.conf" section="5"> manpages for additional information.


<sect1>Logfile permissions

<p>It is not only important to decide how alerts are used, but also
who has access to them, i.e. can read or modify the logfiles (if not
using a remote loghost).  Security alerts which the attacker can
change or disable are not much worth in the event of an intrusion.

<!--  It should be explained why after installation this is not
 already done, jfs -->

<p>
Some logfile permissions are not perfect after the installation. First
<file>/var/log/lastlog</file> and <file>/var/log/faillog</file> do not
need to be readable by normal users. In the lastlog file you can see
who logged recently, and in the faillog you see a summary of failed
logins. The author recommends chmod'ing both to 660. Take a brief look
over your log files and decide very carefully which logfiles you make
readable/writeable for a user with another UID than 0 and a group
other than 'adm' or 'root'.

<p>
I want to emphasize that the apache logfile permissions are really
screwed due to the fact that the apache user owns the apache log
files. If a user gets a shell with a back door in apache, they can
easily remove the logfiles.

<!--
# This is quite personal, IMHO, since this is due to the fact that 
# root priviledges are dropped on startup. I prefer an attacker to erase
# a service's logfiles than to erase all of my system's logs. Anyhow, this
# can be improved by changing user permissions after rotation
-->

<sect>Setting up setuid check

<p>
Debian provides a cron job that runs daily in
<file>/etc/cron.daily/standard</file> this cron job will run the
<prgn>/usr/sbin/checksecurity</prgn> script that will store
information of this changes.

<!-- TODO What is the defaul for this in cron package? jfs -->

<p>In order for this check to be made you must set
<tt>CHECKSECURITY_DISABLE="FALSE"</tt> in
<file>/etc/checksecurity.conf</file>. Note, this is the default, so
unless you have changed something, this option will already be set to
"FALSE".

<p>The default behavior does not send this information to the superuser
but, instead keeps daily copies of the changes in
<file>/var/log/setuid.changes</file>. You should set the
CHECKSECURITY_EMAIL (in <file>/etc/checksecurity.conf</file>) to 'root' to
have this information mailed to him.  .  See <manref
name="checksecurity" section="8"> for more configuration info.

<sect>Using su

<p>
If you really need to become the super user on your system, e.g. for
installing packages or adding users, you can use the command
<prgn>su</prgn> to change your identity. You should try to avoid any
login as user root and instead use su.  Actually, the best solution is
to remove su and switch to <prgn>sudo</prgn>, as it has more features
than su. However, su is more common as is used on many other Unixes.


<sect>Using sudo

<p>
<prgn>sudo</prgn> allows the user to execute defined commands under
another user's identity, even as root. If the user is added to
<file>/etc/sudoers</file> and authenticates himself correctly, he is
able to run commands which have been defined in
<file>/etc/sudoers</file>. Violations, such as incorrect passwords or
trying to run a program you don't have permission for, are logged and
mailed to root.


<sect id="chroot">Using chroot

<p><prgn>chroot</prgn> is one of the most powerful possibilities to
restrict a daemon or a user or another service. Just imagine a jail
around your target, which the target cannot escape from (normally, but
there are still a lot of conditions that allow one to escape out of
such a jail). If you do not trust a user, you can create a change root
environment for him. This can use quite a bit of disk space as you
need to copy all needed executables, as well as libraries, into the
jail. Even if the user does something malicious, the scope of the
damage is limited to the jail.  

<p>A good example for this case is, if you do not authenticate against
<file>/etc/passwd</file> but use LDAP or MySQL instead. So your
ftp-daemon only needs a binary and perhaps a few libraries. A chrooted
environment would be an excellent security improvement; if a new
exploit is known for this ftp-daemon, then attackers can only exploit
the UID of the ftp-daemon-user and nothing else. Of course, many other
daemons could benefit from this as well.

<p>Of course, many other daemons could benefit from this sort of
arrangement as well.



<p>However, be forewarned that a <prgn>chroot</prgn> jail can be
broken if the user running in it is the superuser. So, you need to
make the service run as a non-privileged user. By limiting its
environment you are limiting the world readable/executable files the
service can access, thus, you limit the possibilities of a privilege
escalation by use of local system security vulnerabilities.  Even in
this situation you cannot be completely sure that there is no way for
a clever attacker to somehow break out of the jail.  Using only server
programs which have a reputation for being secure is a good additional
safety measure.  Even minuscule holes like open file handles can be
used by a skilled attacker for breaking into the system. After all,
<prgn>chroot</prgn> was not designed as a security tool but as a
testing tool.


<!-- FIXME: this information should be checked when woody gets released -->
<p>
As an additional note, the Debian default BIND (the Internet name
service) is not shipped chrooted per default; in fact, no daemons come
chrooted. This might change in the woody (3.0) release.


<sect id="kernel-conf">Configuring some kernel features
<p>FIXME: Content missing

<p>Many features of the kernel can be modified while running by
echoing something into the /proc file system or by using sysctl. By
entering <tt>sysctl -A</tt> you can see what you can configure and
what the options are. Only in rare cases do you need to edit something
here, but you can increase security that way as well.

 
<!-- TODO: Should the prefix on all of these be /proc/sys/? era -->

<example>
net/ipv4/icmp_echo_ignore_broadcasts = 1
</example>

This is a 'windows emulator' because it acts like windows on broadcast
ping if this one is set to 1.
<!-- Which means what exactly? Simply that it ignores broadcasts? FIXME -->
Otherwise, it does nothing.

<example>
net/ipv4/icmp_echo_ignore_all = 0
</example>

<p>If you don't want to block ICMP on your firewall, enable this.
<!--
Does this mean, if you want to block ICMP but not in your firewall? FIXME
-->

<example>
net/ipv4/tcp_syncookies = 1
</example>

<p>This option is a double-edged sword. On the one hand it protects
your system against syn flooding; on the other hand it violates
defined standards (RFCs). This option is quite dumb as it floods the
other side like it floods you, so the other side is also busy. If you
want to change this option you also can change it in
<tt>/etc/network/options</tt> by setting <tt>syncookies=yes</tt>.

<example>
/proc/sys/net/ipv4/conf/all/log_martians = 1
</example>

<p>Packets with impossible addresses (due to wrong routes) on your
network get logged.

<p>
Here is an example to set up this and other useful stuff. You should
add this information to a script in
<file>/etc/network/interface-secure</file> (the name is given as an
example) and call it from <file>/etc/network/interfaces</file> like
this:

<example>
auto eth0
iface eth0 inet static
        address xxx.xxx.xxx.xxx
        netmask 255.255.255.xxx
        broadcast xxx.xxx.xxx.xxx
        gateway xxx.xxx.xxx.xxx
        pre-up /etc/network/interface-secure

</example>

<example>
# Script-name: /etc/network/interface-secure
# Modifies some default behaviour in order to secure against 
# some TCP/IP spoofing & attacks
#
# Contributed by Dariusz Puchalak  
#
echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts 
                                           # broadcast echo protection enabled
echo 0 > /proc/sys/net/ipv4/ip_forward     # ip forwarding disabled
echo 1 > /proc/sys/net/ipv4/tcp_syncookies # TCP syn cookie protection enabled
echo 1 >/proc/sys/net/ipv4/conf/all/log_martians 
                                           # Log packets with impossible addresses
                         # but be careful with this on heavy loaded web servers
echo 1 > /proc/sys/net/ipv4/ip_always_defrag 
                                           #  defragging protection always enabled
echo 1 > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses 
                                           # bad error message protection enabled

# now ip spoofing protection
for f in /proc/sys/net/ipv4/conf/*/rp_filter; do
        echo 1 > $f
done

# and finally some more things:
# Disable ICMP Redirect Acceptance
for f in /proc/sys/net/ipv4/conf/*/accept_redirects; do
        echo 0 > $f
done

for f in /proc/sys/net/ipv4/conf/*/send_redirects; do
      echo 0 > $f
done

# Disable Source Routed Packets
for f in /proc/sys/net/ipv4/conf/*/accept_source_route; do
        echo 0 > $f
done

# Log Spoofed Packets, Source Routed Packets, Redirect Packets
for f in /proc/sys/net/ipv4/conf/*/log_martians; do
        echo 1 > $f
done
</example>

<p>Some users might want to set up firewalling rules in this script as
well. However, check what firewalling programs/features you might be
using since they can tweak other files and change the definitions you
add on startup. For example, firewalk, for one, will use another
configuration file for firewall setup.

<p>FIXME: I remember a thread about this in debian-security, should
add the information posted there here (jfs).



<sect>Do not use software depending on svgalib

<p>
SVGAlib is very nice for console lovers like me, but in the past it
has been proven several times that it is very insecure. Exploits
against <prgn>zgv</prgn> were released, and it was simple to become
root. Try to prevent using SVGAlib programs wherever possible.  <!--
TODO: move this to policy section if there ever is one? -->


<sect>Secure file transfers

<p>
Copying files in a secure manner from a host to another can be
achieved by using 'scp' which is included in the ssh package. It works
like rcp but is encrypted completely, so the bad guys cannot even find
out WHAT you copy.


<sect>Using quotas

<p>
Having a good quota policy is important, as it keeps users from
filling up the hard disk(s).
<p>
You can use two different quota systems: user quota and group
quota. As you probably figured out, user quota limits the amount of
space a user can take up, group quota does the equivalent for
groups. Keep this in mind when you're working out quota sizes.

<p>There are a few important points to think about in setting up a
quota system:

<list>
<item>Keep the quotas small enough, so users do not eat up your disk space
<item>Keep the quotas big enough, so users do not complain or their mail quota
keeps them from accepting mail over a longer period
<item>Use quotas on all user-writable areas, on /home as well as on /tmp.
</list>

<p>Every partition/directory which users have full write access should
be quota enabled.  Find out those partitions and directories and
calculate a workable quota size, which combines usability and
security.

<p>So, now you want to use quotas. First of all you need to check whether
you enabled quota support in your kernel. If not, you will need to
recompile it.  <!-- TODO: how to check for quota support? What to
tweak when recompiling? --> After this, control whether the package
'quota' is installed. If not you will need this one as well.

<p>
Enabling quota for the respective filesystems is as easy as modifying
the <tt>defaults</tt> setting to <tt>defaults,usrquota</tt> in your
<file>/etc/fstab</file> file. If you need group quota, substitute
<tt>usrquota</tt> to <tt>grpquota</tt>.  You can also use them both.
Then create empty quota.user and quota.group files in the roots of the
filesystems you want to use quotas on (e.g.  <tt>touch
/home/quota.user /home/quota.group</tt> for a /home filesystem).

<p>
Restart quota by doing <tt>/etc/init.d/quota stop;/etc/init.d/quota
start</tt>. Now quota should be running, and quota sizes can be set.

<p>
Editing quotas for a specific user (say 'ref') can be done by
<tt>edquota -u ref</tt>. Group quotas can be modified with<tt>edquota -g
&lt;group&gt;</tt>. Then set the soft and hard quota and/or inode quotas 
as needed.

<p>
For more information about quotas, read the quota man page, and the quota
mini-howto(<file>/usr/share/doc/HOWTO/en-html/mini/Quota.html</file>).

<p>FIXME. Should we add some comments regarding <package>lshell</package>
here. Is it useful? (jfs)
<!-- Duplicated section "Logfile permissions" removed (era) -->
<!-- Duplicated section "Setting up setuid check" removed (era) -->

<sect>chattr/lsattr

<p>
These two commands are very useful, but they only work for the ext2
filesystem.  With 'lsattr' you can list the attributes of a file and
with 'chattr' you can change them. Note that attributes are not the
same thing as permissions.  There are many attributes, but only the
most important for increasing security are mentioned here. There are
two flags which can only be set by the superuser.

<p>
First there is the 'a' flag. If set on a file, this file can only be
opened for appending. This attribute is useful for some of the files
in /var/log/, though you should consider they get moved sometimes due
to the log rotation scripts.

<p>
The second flag is the 'i' flag, short for immutable. If set on a
file, it can neither be modified nor deleted or renamed and no link be
created to it.  If you do not want users to look into your config
files you could set this flag and remove readability. Furthermore it
can give you a little bit more security against intruders, because the
cracker might be confused by not being able to remove a
file. Nevertheless, you should never assume that the cracker is
blind. After all, he got into your system.

 <p>Note that lsattr and chattr are only available on ext2 filesystems.

<sect id="check-integ">Checking filesystem integrity

<p>Are you sure /bin/login on your hard drive is still the binary you
installed there some months ago? What if it is a hacked version, which
stores the entered password in a hidden file or mails it in cleartext
version all over the internet?

<p>
The only method to have some kind of protection is to check your files
every day/hour/month (I prefer daily) by comparing the actual and the
old md5sum of this file. Two files cannot have the same md5sum (the
MD5 digest is 128 bits, so the chance that two different files will
have the same md5sum is roughly one in 3.4e3803), , so you're on the
safe site here, except  someone hacked the algorithm to create
md5sums on that machine, what is, well, pathological. You really
should consider this auditing of your binaries as very important,
since it is an easy way to recognize changes at your binaries. Common
tools used for this are sXid, <package>AIDE</package> (Advanced
Intrusion Detection Environment), <package>TripWire</package>
(non-free; the new version will be GPL), <package>integrit</package>
and <package>samhain</package>.

<p>Installing <tt>debsums</tt> will help to check the filesystem
integrity, by comparing the md5sums of every file against the md5sums
used in the Debian package archive. But beware, those files can easily
be changed.

<p>Furthermore you can replace <package>locate</package> with
<package>slocate</package>. slocate is a security enhanced version of
GNU locate. When using slocate, the user only sees the files he really
has access to and you can exclude any files or directories on the
system.

<!-- TODO: is sXid in Debian ? --> 

<chapt id="sec-services">Securing services running on your system

<sect>Securing ssh
<p>
If you are still running telnet instead of ssh, you should take a
break from this manual and change this. Ssh should be used for all
remote logins instead of telnet. In an age where it is easy to sniff
internet traffic and get cleartext passwords, you should use only
protocols which use cryptography. So, perform an <tt>apt-get install
ssh</tt> on your system now.  

<p>Encourage all the users on your system to use ssh instead of
telnet, or even better, uninstall telnet. In addition you should avoid
logging into the system using ssh as root and use alternative methods
to become root instead, like <tt>su</tt> or <tt>sudo</tt>. Finally,
the sshd_config file, in /etc/ssh, should be modified to increase
security as well:

<tt>PermitRootLogin No</tt>

<p>Try not to permit Root Login wherever possible. If anyone wants to
become root via ssh, now two logins are needed and the root password
cannot be brute forced via SSH.

<tt>Listen 666</tt>

Change the listen port, so the intruder cannot be completely sure whether a
sshd daemon runs.

<tt>PermitEmptyPasswords no</tt>

Empty passwords make a mockery of system security.

<tt>AllowUsers alex ref</tt>

Allow only certain users to have access via ssh to this machine.

<tt>AllowGroups wheel admin</tt>

Allow only certain group members to have access via ssh to this
machine.  AllowGroups and AllowUsers have equivalent directives for
denying access to a machine. Not surprisingly they are called
"DenyUsers" and "DenyGroups".

<tt>PasswordAuthentication yes</tt>

<p>
It is completely your choice what you want to do. It is more secure
only to allow access to machine from users with ssh-keys placed in the
~/.ssh/authorized_keys file. If you want so, set this one to "no".
<!-- FIXME: what does this mean? Is it "more secure" to set this to
"no"? (era) --> <!-- jfs, IMHO yes since you place the key of the
incoming host in your server and the authentication is done against
the key -->

<p>
As a final note, be aware that these directives are from a OpenSSH
configuration file. Right now, there are three commonly used SSH
daemons, ssh1, ssh2, and OpenSSH by the OpenBSD people. Ssh1 was the
first ssh daemon available and it is still the most commonly used
(there are rumors that there is even a windows port). Ssh2 has many
advantages over ssh1 except it is released under an closed-source
license. OpenSSH is completely free ssh daemon, which supports both
ssh1 and ssh2. OpenSSH is the version installed on Debian when the
package 'ssh' is chosen.

<sect>Securing FTP

<p>
If you really have to use FTP (without wrapping it inside a SSL
tunnel), you should chroot ftp into the ftp users' home directory, so
that the user is unable to see anything else than their own
directory. Otherwise they could traverse your root filesystem just
like if they had a shell. You can add the following line in your
proftpd.conf in your global section to enable this chroot feature:

<example>
DefaultRoot ~
</example>

<p>Restart proftpd by <tt>/etc/init.d/proftpd restart</tt> and check
whether you can escape from your homedir now.

<P>To prevent Proftp DoS attacks using ../../.., add the following line in /etc/proftpd.conf 

<tt>DenyFilter \*.*/</tt>

<sect>Securing access to the X Window System
<p>
Today, X terminals are used by more and more companies where one
server is needed for a lot of workstations. This can be dangerous,
because you need to allow the file server to connect to the the
clients (X server from the X point of view. X switches the definition
of client and server).  If you follow the (very bad) suggestion of
many docs, you type <tt>xhost +</tt> on your machine. This allows any
X client to connect to your system. For slightly better security, you
can use the command <tt>xhost +hostname</tt> instead to only allow
access from specific hosts.

<p>
A much more secure solution, though, is to use ssh to tunnel X and
encrypt the whole session. This is done automatically when you ssh to
another machine. This has to be enabled in /etc/ssh/ssh_config by
setting <tt>X11Forwarding</tt> to <tt>yes</tt>. In times of SSH, you
should drop the xhost based access control completely.  <!-- TODO:
check. The text said "has to be disabled" [sic] -->

<p>
For best security, if you do not need X access from other machines, is
to switch off the binding on tcp port 6000 simply by typing:

<tt>startx -- -nolisten tcp</tt>

<p>NOTE: This is the default behavior in Xfree 4.0.

<p>Read more on X Window security in
<url
name="XWindow-User-HOWTO"
id="http://www.linuxdoc.org/HOWTO/XWindow-User-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/XWindow-User-HOWTO.txt.gz</file>).


<p>FIXME: Add info on thread of debian-security on how to change config files
of XFree 3.3.6 to do this.  This is done for XDM by setting
<file>/etc/X11/xdm/Xservers</file> to:
<tt>:0 local /usr/bin/X11/X vt7 -dpi 100 -nolisten tcp        </tt>

<sect1>Check your display manager
<p>
If you only want to have a display manager installed for local usage
(having a nice graphical login, that is), make sure the XDMCP (X
Display Manager Control Protocol) stuff is disabled. In XDM you can do
this with this line in <tt>/etc/X11/xdm/xdm-config</tt>:

<example>
DisplayManager.requestPort:     0
</example>

<p>Normally, all display managers are configured not to start XDMCP services
per default in Debian.


<sect>The lpd and lprng issue 

<p>Imagine, you arrive at work, and the printer is spitting out
endless amounts of paper because someone is DoSing your line printer
daemon. Nasty, isn't it?  So keep your printer servers specially
secure. This means you need to configure your printer service so it
will only allow connections from a set of trusted servers.  In order
to do this, add the servers you want to allow printing to your
<file>/etc/hosts.lpd</file>.

<p>However, even if you do this, the lpr daemon accepts incoming
connections on port 515 of any interface. You should consider
firewalling connections from networks/hosts which are not allowed
printing (the lpr daemon cannot be limited to listen only on a given
IP address). 

<!-- TODO
<p>Of course, you could also take the lpr/lprn sources
and change them so that the connect function is only done to "127.0.0.1".
apt-get source lpr
and patch the bind (finet) call
-->


<p>If you are using a printer in your system, but only locally, you 
will not want to share this service over a network. You can consider
using other printing systems, like the one provided by <package>cups</package>
or <url name="PDQ"
id="http://feynman.tam.uiuc.edu/pdq"> which is based on user
permissions of the <file>/dev/lp0</file> device.


<P>FIXME: Add more content (the article on <url name="Amateur Fortress
Building" id="http://www.rootprompt.org"> provides some very
interesting views).  

<p>FIXME: Check if PDG is available in Debian, and if so,
suggest this as the preferred printing system.

<p>FIXME: Check if Farmer/Wietse has a replacement for printer daemon
and if it's available in Debian.

<sect>Securing the mail daemon

<p>If your server is not a mailing system, you do not really need to
have a mail daemon listening for incoming connections, but you might
want local mail delivered in order, for example, to receive mail for
the root user from any alert systems you have in place.

<p>To do this in a Debian system, you will have to remove the smtp
daemon from inetd:
<example>
$ update-inetd --disable smtp
</example>
<p>and configure the mailer daemon to only listen on the loopback interface.
In exim (the default MTA) you can do this by editing the file
<file>/etc/exim.conf</file>
and adding the following line:

<example>
local_interfaces = "127.0.0.1"
</example>

<p>Restart both daemons (inetd and exim) and you will have exim
listening on the 127.0.0.1:25 socket only. Be careful, and first
disable inetd, otherwise, exim will not start since the inetd daemon
is already handling incoming connections.

<p>If you only want local mail, this approach is better than
tcp-wrapping the mailer daemon or adding firewalling rules to limit
anybody accessing it.  However, if you do need it to listen on other
interfaces, you might consider launching it from inetd and adding a
tcp wrapper so incoming connections are checked against
<file>/etc/hosts.allow</file> and <file>/etc/hosts.deny</file>.  Also,
you will be aware of when an unauthorized access is attempted against
your mailer daemon, if you set up proper logging for any of the
methods above.


<sect>Receiving mail securely
<p>
Reading/receiving mail is the most common cleartext protocol. If you
use either POP3 or IMAP to get your mail, you send your cleartext
password across the net, so almost anyone can read your mail from now
on. Instead, use SSL (Secure Sockets Layer) to receive your mail. The
other alternative is ssh, if you have a shell account on the box which
acts as your POP or IMAP server.  Here is a basic fetchmailrc to
demonstrate this:

<example>
poll my-imap-mailserver.org via "localhost"
  with proto IMAP port 1236
      user "ref" there with password "hackme" is alex here warnings 3600
    folders
      .Mail/debian
    preconnect 'ssh -f -P -C -L 1236:my-imap-mailserver.org:143 -l ref
     my-imap-mailserver.org sleep 15 &lt;/dev/null &gt; /dev/null'
</example>

The preconnect is the important line. It fires up a ssh session and
creates the necessary tunnel, which automatically forwards connections
to localhost port 1236 to the IMAP mail server, but encrypted. Another
possibility would be to use fetchmail with the ssl feature.

<p>If you want to provide encrypted mail services like POP and IMAP,
<tt>apt-get install stunnel</tt> and start your daemons this way:

<example>
stunnel -p /etc/ssl/certs/stunnel.pem -d pop3s -l /usr/sbin/popd
</example>


<p>This command wraps the provided daemon (-l) to the port (-d) and uses the
specified ssl cert (-p).



<sect id="sec-bind">Securing BIND

<p>There are different issues that can be tackled in order to secure the 
Domain server daemon, which are similar to the ones considered when securing any given service:

<list>

<item>configure the daemon itself properly so it cannot be misused
from the outside. This includes limiting possible queries from
clients: zone transfers and recursive queries.

<item>limit the access of the daemon to the server itself so if it is
used to break into the damage to the system is limited. This includes
running the daemon as a non-privileged user and chrooting it.

</list>

<p>You should restrict some of the information that is server from the
DNS server to outside clients so that it cannot be used to retrieve
valuable information from your organization that you do not want to
give away. This includes adding the following options:
<em>allow-transfer</em>, <em>allow-query</em>,
<em>allow-recursive</em> and <em>version</em>. You can either limit this on 
the global section (so it applies to all the zones served) or on a per-zone
basis. This information is documented on the
<package>bind-doc</package> package, read more on this on
<file>/usr/share/doc/bind/html/index.html</file> once the package is
installed.

<p>Imagine that your server is connected to the Internet and to your
internal (your internal IP is 192.168.1.2) network (a basic
multi-homed server), you do not want to give any service to the
Internet and you just want to enable DNS lookups from your internal
hosts. You could restrict it by including in
<file>/etc/bind/named.conf</file>:

<example>
options {
	    allow-query { 192.168.1/24; }
	    allow-transfer { none; }
	    allow-recursive { 192.168.1/24; }
	    listen-on { 192.168.1.2; }
	    forward { only; } 
	    forwarders { A.B.C.D; }
};
</example>

<p>The <em>listen-on</em> option makes the DNS bind to only the
interface that has the internal address, but, even if this interface
is the same as the interface that connects to the Internet (if you are
using NAT, for example), queries will only be accepted if coming from
your internal hosts. If the system has multiple interfaces and the
<em>listen-on</em> is not present, only internal users could query,
but, since the port would be accessible to outside attackers, they
could try to crash (or exploit buffer overflow attacks) on the DNS
server. You could even make it listen only on 127.0.0.1 if you are not
giving DNS service for any other systems than yourself.
</p>

<p>
The version.bind record in the chaos class contains the version of the 
of the currently running bind process. This information is often used
by automated scanners and malicious individuals who wish to determine if
one's bind is vulnerable to a specific attack. By providing false or
no information in the version.bind record, one limits the probability
that one's server will be attacked based on its publicized version.
To provide your own version, use the <em>version</em> directive in the 
following manner:
<example>
options {
	... various options here ...
	version "Not available.";
};
</example>
Changing the version.bind record does not provide actual protection
against attacks, but it should be considered a useful safeguard.
</p>


<p>Regarding limiting BIND's privileges you must be aware that
if a non-root user runs BIND, then BIND cannot detect new interfaces
automatically. For example, if you stick a PCMCIA card into your
laptop.  Check the README.Debian file in your named documentation
(<file>/usr/share/doc/bind/README.Debian</file>) directory for more
information about this issue.  There have been many recent security
problems concerning BIND, so switching the user is useful when
possible.
<p>
To run BIND under a different user, first create a separate user and
group for it (it is <em>not</em> a good idea to use nobody or nogroup
for every service not running as root). In this example, the user and
group <tt>named</tt> will be used. You can do this by entering:
<example>
addgroup named
adduser --system --ingroup named named
</example>

<p>Now edit <tt>/etc/init.d/bind</tt> with your favorite editor and change the
line beginning with
<example>
start-stop-daemon --start
</example>

to

<example>
start-stop-daemon --start --quiet --exec /usr/sbin/named -- -g named -u named
</example>

<p>
All you need to do now is to restart bind via '/etc/init.d/bind
restart', and then check your syslog for two entries like this:
<p>
<example>
Sep  4 15:11:08 nexus named[13439]: group = named
Sep  4 15:11:08 nexus named[13439]: user = named
</example>
<p>
Voilá! Your named now does not run as root. To achieve maximum BIND
security, now build a chroot jail (see <ref id="chroot">) around your daemon.


<p>If you want to read more information on why BIND does not run as
non-root user on Debian systems, please check the Bug Tracking System
regarding Bind, specifically <url name="Bug #50013: bind should not
run as root" id="http://bugs.debian.org/50013">.

<p>Also, you can find more information regarding Bind chrooting in the
<url name="Chroot-Bind-HOWTO"
id="http://www.linuxdoc.org/HOWTO/Chroot-Bind-HOWTO.html"> (regarding
Bind 9) and <url name="Chroot-Bind8-HOWTO"
id="http://www.linuxdoc.org/HOWTO/Chroot-Bind8-HOWTO.html"> (regarding
Bind 8). This same documents should be available through the
installation of the <package>doc-linux-text</package> (text version)
or <package>doc-linux-html</package> (html version).

<p>FIXME (jfs): I'm not sure about this, shouldn't bind files be
chown'ed to the groups created? Some files might need rw permissions
in order for bind to work correctly; for example: if the name server
is being used as a cache the cache files need to be written on hard
disk. Also, if the DNS server is secondary, it might need to transfer
zones from the primary and write them on hard disk too. This should be
clarified.

<sect>Securing Apache

<p>FIXME. Add content.

<p>You can limit access to the Apache server if you only want to use
it internally (for testing purposes, to access the <package>doc-central</package>
archive, etc..) and do not want outsiders to access it. To do this use the 
<tt>Listen</tt> or <tt>BindAddress</tt> directivdes in <file>/etc/apache/http.conf</file>.

<p>Using Listen:
<example>
Listen 127.0.0.1:80
</example>
<p>Using BindAddress:
<example>
BindAddress 127.0.0.1
</example>

<p>Then restart apache with <tt>/etc/init.d/apache restart</tt> and you will see
that it is only listening on the loopback interface. 

<p>In any case, if you are not using all the functionality provided by 
Apache, you might want to take a look at other web servers provided in Debian
like <package>dhttpd</package>.

<p>The <url name="Apache Documentation"
id="http://www.apache.org/docs/mics/security_tips.html"> provides
information regarding security measures to be taken on Apache webserver
(this same information is provided in Debian by the
<package>apache-doc</package> package).

<sect>General chroot and suid paranoia

<p>It is probably fair to say that the complexity of BIND is the
reason why it has been exposed to a lot of attacks in recent years.
(see <ref id="sec-bind">)

<p>Other programs with complex features and a large installed user
base include Sendmail and some ftp daemons (e.g. WUftpd).  (Of course,
a program with no features and no satisfied users can be just as
insecure, besides being useless.)

<p>Anyway, if you run any of these, consider similar arrangements for
them &mdash; revoking root privileges, running in a chroot jail
&mdash; or replacing them with a more secure equivalent.


<sect>General cleartext password paranoia
<p>
You should try to avoid any network service which sends and receives
passwords in cleartext over a net like FTP/Telnet/NIS/RPC. The author
recommends the use of ssh instead of telnet and ftp to everybody.

<p>Keep in mind that migrating from telnet to ssh, but using other
cleartext protocols does not increase your security in ANY way! Best
would be to remove ftp, telnet, pop, imap, http and to supersede them
with their respective encrypted services.  You should consider moving
from these services to their SSL versions, ftp-ssl, telnet-ssl,
pop-ssl, https ...

<p>Most of these above listed hints apply to every Unix system (you
will find them if reading any other hardening-related document related
to Linux and other Unixes).

<sect>Disabling NIS 

<p>You should not use NIS, the Network Information Service, if it is
possible, because it allows password sharing. This can be highly
insecure if your setup is broken.

<p>If you need password sharing between machines, you might want to
consider using other alternatives. For example, you can set a LDAP
server and configure PAM on your system in order to contact the LDAP
server for user authentication. You can find a detailed setup in the
<url
name="LDAP-HOWTO" id="http://www.linuxdoc.org/HOWTO/LDAP-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/LDAP-HOWTO.txt.gz</file>).

<p>Read more on NIS security in
<url
name="NIS-HOWTO" id="http://www.linuxdoc.org/HOWTO/NIS-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/NIS-HOWTO.txt.gz</file>).


<p>FIXME (jfs): Add info on how to setup this in Debian

<sect id="rpc">Disabling RPC services

<p>Last, but not least, disable RPC wherever possible.  <!-- TODO:
explain when RPC is necessary. --> Many security holes for this
service are known and can be easily exploited.  On the other hand NFS
services are quite important in some networks, so find a balance of
security and usability in your network. Most of the DDoS (distributed
denial of service) attacks use rpc exploits to get into the system and
act as a so called agent/handler. Read more on NFS security in
<url
name="NFS-HOWTO" id="http://www.linuxdoc.org/HOWTO/NFS-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/NFS-HOWTO.txt.gz</file>).

<p>Disabling portmap is quite simple. There are different methods. The
simplest one in a Debian system is to do <tt>update-rc.d portmap
remove</tt>.

<p>This in fact removes every symlink relating to portmap in
<tt>/etc/rc${runlevel}.d/</tt>, which is something you could also do
manually.  Another possibility is to <tt>chmod 644
/etc/init.d/portmap</tt>, but that gives an error message when
booting. You can also strip off the <tt>start-stop-daemon</tt> part in
<file>/etc/init.d/portmap</file> shell script.

<sect>Automatic hardening of Debian systems

<p>After reading through all the information in the following chapters
you might be wondering "I have to do quite a lot of things in order to
harden my system, couldn't this things be automated?". The question is
yes, but be careful with automated tools. Some people believe, that a
hardening tool does not eliminate the need for good administration. So
do not be fooled to think that you can automate all the process and
will fix all the related issues. Security is an ever-ongoing process
in which the administrator must participate and cannot just stand away
and let the tools do all the work since no single tool can cope: with
all the possible security policy implementations, all the attacks and
all the environments.

<p>Since woody (Debian 3.0) there are two specific packages that are
useful for security hardening. The <package>harden</package> which
takes an approach based on the package dependencies to quickly install
valuable security packages and remove those with flaws, configuration
of the packages must be done by the administrator. The
<package>bastille</package> that implements a given security policy on
the local system based on previous configuration by the administrator
(the building of the configuration can be a guided process done with
siple yes/no questions).

<sect1>Harden

<p>The <package>harden</package> package tries to make it more easy to
install and administer hosts that need good security . This package
should be used by people that want some quick help to enhance the
security of the system. To do this it conflicts with packages with
known flaws, including (but not limited to): known security bugs (like
buffer overflows), use of plaintext passwords, lack of access control,
etc. It also automatically installs some tools that should enhance
security in some way: intrusion detection tools, security analysis
tools, etc. Harden installs the following <em>virtual</em> packages
(i.e. no contents, just dependencies on others):

<list>

<item><package>harden-tools</package>: tools to enhance system
security (integrity checkers, intrusion detection, kernel patches...)

<item><package>harden-doc</package>: provides this same manual and
other security-related documentation packages.

<item><package>harden-environment</package>: helps configure a
hardened environment (currently empty).

<item><package>harden-servers</package>: removes servers considered
insecure for some reason.

<item><package>harden-clients</package>: removes clients considered
insecure for some reason.

<item><package>harden-remoteflaws</package>: removes packages with
know security holes that could be used by a remote attacker to
compromise the system (uses versioned <em>Conflicts:</em>).

<item><package>harden-localflaws</package>: removes packages with know
security holes that could be used by a local attacker to compromise
the system (uses versioned <em>Conflicts:</em>).

<item><package>harden-remoteaudit</package>: tools to remotely audit a
system.

</list>

<p>Be careful because if you have software you need (and which you do
not wish to uninstall for some reason) and conflicts with some of the
packages above you might not be able to fully use
<package>harden</package>.

The harden packages do not (directly) do a thing. They do have,
however, intentional package conflicts with known non-secure packages.
This way, the Debian packaging system will not approve the installation
of these packages. For example, when you try to install a telnet daemon
with <package>harden-servers</package>, apt will say:

<example>
# apt-get install telnetd 
The following packages will be REMOVED:
	harden-servers
The following NEW packages will be installed:
telnetd 
Do you want to continue (Y/n)
</example>

<p>This should set off some warnings in the administrator head, who should
reconsider his actions.

<sect1>Bastille Linux

<p><url name="Bastille Linux" id="http://www.bastille-linux.org"> is
an automatic hardening tool originally oriented towards the RedHat and
Mandrake Linux distributions. However, the <package>bastille</package>
package provided in Debian (since woody) is patched in order to
provide the same functionality for the Debian GNU/Linux system.

<p>Bastille can be used with different frontends (all are documented
in their own manpage in the Debian package) which enables the
administrator to:

<list>

<item>Answer questions step by step regarding the desired security of
your system (using <manref name="InteractiveBastille" section="8">)

<item>Use a default setting for security (amongst three: Lax, Moderate
or Paranoia) in a given setup (server or workstation) and let Bastille
decide which security policy to implement (using <manref
name="BastilleChooser" section="8">)

<item>Take a predefined configuration file (could be provided by
Bastille or made by the administrator) and implement a given security
policy (using <manref name="AutomatedBastille" section="8">)

</list>

<chapt>Before the compromise

<sect>Set up Intrusion Detection.

<p>FIXME: Write more about this.

<p>Debian includes some tools for Intrusion Detection which you might
want to setup (if truly paranoid of if your system is really critical).

<p>Always be aware that in order really improve the system's security
with the introduction of any of these tools, you need to have an
alert+response mechanism, so don't use Intrusion Detection if you are
not going to alert anyone (i.e. don't waste your time configuring
things you will not use later on).

<sect1>Network based intrusion detection: Using snort

<p><package>snort</package> is a flexible packet sniffer or logger
that detects attacks using an attack signature dictionary. It detects
a variety of attacks and probes, such as buffer overflows, stealth
port scans, CGI attacks, SMB probes, and much more. Snort has a
real-time alerting capability. This is a tool which should be
installed on every router to keep an eye on your network. Just install
it via <tt>apt-get install snort</tt>, follow the questions  and watch
it log.

<p> Snort in Debian is enabled with
many security checks which you might want, ; however, you should
customize the setup to take into account the particular services you
run on your system. You might also want to retrieve additional checks
specific to these services


<sect1>Host based detection

<p><package>Tiger</package> is an old intrusion detection tool which
has been ported to Debian since woody. Tiger provides check of common
issues related to security breakins, checks passwords strength,
filesystem problems, communicating processes... The Debian version
includes new security checks Debian-specific: MD5sums of provided
binaries, and checks of installed and vulnerable packages. The default
installation makes tiger run each day and generate a report that is
sent to the superuser. The generated reports can give away information
of a successful compromise of the system.

<p>Other audit tools, on-site, like <package>logcheck</package>,
<package>portsentry</package> or any of the filesystem integrity
checkers (see <ref id="check-integ">) can be quite useful in order to
set up detection of anomalies in a secured environment.


<sect id="kernel-patches">Useful kernel patches

<p>FIXME: This section needs to cover how these specific patches
can be installed in Debian using the kernel-2.x.x-patch-XXX packages.
</p>

<p>There are some kernel patches, which significantly enhance system
security. Here are a few of them:
<p>
<list>

<item>OpenWall patch by Solar Designer.  This is a useful set of
kernel restrictions, like restricted links, FIFOs in /tmp, restricted
/proc, special file descriptor handling, non-executable user stack
area and some more.  Homepage:
<url name="http://www.openwall.com/linux/" id="http://www.openwall.com/linux/">

<item><em>LIDS &mdash; Linux intrusion detection system by Huagang Xie &amp;
Philippe Biondi</em>.  This patch makes the process of creating a
hardened Linux system easier. You can restrict every process, give it
rights to write or read files, or remove, by default, the ability to
read files. Furthermore you can also set capabilities for certain
processes. Even though it is still in the beta phase, it is almost a
must for the paranoid system administrator.  Homepage: <url
name="http://www.lids.org" id="http://www.lids.org">

<item><em>POSIX Access Control Lists (ACLs) for Linux</em> This patch
adds access control lists, an advanced method for restricting access
to files, to the linux kernel.  Homepage: <url
name="http://acl.bestbits.at/" id="http://acl.bestbits.at/">

<item><em>Linux trustees</em>.  This patch adds a decent advanced
permissions system to your Linux kernel. All the objects are stored in
the kernel memory, which allows fast lookup of all permissions.
Homepage: <url name="http://www.braysystems.com/linux/trustees.html"
id="http://www.braysystems.com/linux/trustees.html">

<item><em>International kernel patch</em>.  This is a crypt-oriented
kernel patch, therefore you have to pay attention to your local laws
regarding the use of cryptography.  It basically adds the possibility
of using encrypted file systems.  Homepage: <url
name="http://www.kerneli.org" id="http://www.kerneli.org">

<item><em>SubDomain</em>.  A kernel extension to create a more secure
and easier to setup chroot environment. You can specify the files
needed for the chrooted service manually and do not have to compile
the services statically.  Homepage: <url
name="http://www.immunix.org/subdomain.html"
id="http://www.immunix.org/subdomain.html">

<item><em>UserIPAcct</em>.  This is not really a security related
patch, but it allows you to create quotas for the traffic on your
server per user. And you can fetch statistics about the user traffic.
Homepage: <url name="http://rsmeyers.3ti.org/useripacct"
id="http://rsmeyers.3ti.org/useripacct">

<item><em>FreeS/WAN</em>. If you want to use IPSec with Linux, you need
this patch. You can create VPNs with this quite easily, even to
Windows machines, as IPSec is a common standard.  Homepage: <url
name="http://www.freeswan.org" id="http://www.freeswan.org">

</list>

<sect>Avoiding rootkits
<p>

<sect1 id="LKM">LKM - Loadable Kernel Modules

<p>LKM (Loadable Kernel Modules) are files containing dynamically 
loadable kernel components. They are dynamically loadable in 
kernel to run assigned tasks. On the GNU/Linux they are used to
expand the functionality of kernel. Several advantages can be 
taken using LKMs, as we saw, they can dynamically be loadabled 
without recompiling the entire kernel, can be used to specify 
devices drivers (or filesystems) and other hardware drivers like
soundcards, networkcards. But some crackers might use LKMs for 
rootkits (knark and adore) to install backdoors  for
GNU/Linux systems.

<p>LKM rootkits can hide processes, files, directories and even 
connections without modifying the source code of binaries.

<sect2>The adore rootkit

<p>You can find it at 
<url id="http://packetstorm.securify.com/groups/teso/adore-0.38.tar.gz">.
See the README for compiling and configuring adore. Once you have already ran
<prgn>./startadore</prgn> you can run 
<prgn>./ava</prgn>. The startadore script load the lkm rootkit and
make it invisible on <prgn>lsmod</prgn> command. 
Now you are free to use adore, the usage 
of ava is very easy to understand. Just take a look at the output from ./ava.

<example>
Usage: ./ava {h,u,r,R,i,v,U} [file, PID or dummy (for U)]

	h hide file
	u unhide file
	r execute as root
	R remove PID forever
	U uninstall adore
	i make PID invisible
	v make PID visible
</example>
	
	
<sect2>The knark rootkit

<p>You can find it at 
<url id="http://packetstorm.securify.com/UNIX/penetration/rootkits/knark-0.59.tar.gz">
Get the source code from the address above, then compile it typing "make". 
So you are ready
to load the lkm rootkits, use 
<example>insmod knark.o</example>

<p>A hidden directory /proc/knark is created, which includes some files 
that will define what things will be hidden from the system, 
strings in /proc/net, files, pids, redirects..

<sect2>The rkit toolkit

<p>You can find it at
<url id="http://packetstorm.securify.com/UNIX/penetration/rootkits/Rkit-1.01.tgz">
Put your UID in the rkit.c "#define magik_UID" statement as in: 
<example>#define magik_UID 500</example>

<p>Compile the rkit.c and load the 
kernel module. All the processes made by the defined UID will be hidden
from the system.

<sect1>Detecting rootkits


<p>Detection of rootkits in Debian can be accomplished with 
<package>chkrootkit</package>, which  can detect 
some of them.

<p>You can also use 
<url name="SKAT" id="http://s0ftpj.org/en/site.html">. 
SKAT checks the kernel memory area (<file>/dev/kmem</file>) for
information about the target host, this information includes the 
installation of Loadable Kernel Modules.

<P>FIXME: Add info on how to compile the kernel w/o lkm support?


<sect>Genius/Paranoia Ideas &mdash; what you could do

<p>
This is probably the most unstable and funny section, since I hope
that some of the "duh. that sounds crazy" ideas might be
realized. Following here you will find some ideas &mdash; it depends
on the point of view whether you say they are genius, paranoid, crazy
or secure &mdash; to increase your security rapidly but you will not
come unscathed out of it.

<list>
<item>Playing around with PAM.
As said in the phrack 56 PAM article, the nice thing with PAM is that "You are
limited only by what you can think of." It is true. Imagine root login only
possible with fingerprint or eyescan or cryptocard (why did I do an OR
conjunction and not AND here).

<item>Fascist Logging.  I would say everything we talked about logging
above is "soft logging". If you want to perform real logging, get a
printer with fanfold paper and log everything hard by printing on
it. Sounds funny, but it's reliable and it cannot be removed.

<item>CD distribution.  This idea is very easy to realize and offers
pretty good security.  Create a hardened Debian distribution, with
proper firewall rules, make an ISO image of it and burn it on CD.
Make it bootable. This is  a read-only distribution with
about 600 MB space for services, and it is impossible for
intruders to get read/write access on this system. Just make sure
every data which should get written, gets written over the
wires. Anyway, the intruder cannot change firewall rules, routing
entries or start own daemons (he can, but reboot and he has to hack
into your system again to change them).

<item>Switch module capability off.  When you disable the usage of
kernel modules at kernel compile time, many kernel based back doors are
impossible to implement, since most of them are based on installing
modified kernel modules.

<item>Logging through serial cable (contributed by Gaby Schilders).
As long as servers still have serial ports, imagine having one
dedicated log-machine disconnected from the net in the middle with a
serial-port multiplexer (cyclades or the like). Now have all your
servers log to their serial ports. Write only. The log-machine only
accepts plain text as input on its serial ports and only writes it to
a log-file. Hook up a cd/dvd-writer. When the log file nears 600MB
it writes it to cd-rom. Now if only they would make writers with
auto-changers... Not as hard-copy as the printer, but it can handle
larger volumes and the cd's don't take as much storage-space.

<item>Set all stuff to immutable (taken from the Tips-HOWTO, written
by Jim Dennis).  Right after you install and configure your system go
through the <file>/bin</file>, <file>/sbin/</file>,
<file>/usr/bin</file>, <file>/usr/sbin</file> and
<file>/usr/lib</file> (and a few of the other usual suspects and make
liberal use of the <prgn>chattr +i command</prgn>.  Also add that to
the the kernel files in root.  Now <prgn>mkdir /etc/.dist/</prgn> copy
everything from <file>/etc/</file> on down (I do this in two steps
using /tmp/etcdist.tar to avoid recursion) into that directory.
(Optionally you can just create /etc/.dist.tar.gz) -- and mark that as
immutable.

<p>The reason for all of this is to limit the damage that you can do
  when logged in as root.  You won't overwrite files with a stray
  redirection operator, and you won't make the system unusable with a
  stray space in an <prgn>rm -fr</prgn> command (you might still do
  plenty of damage to your data &mdash; but your libs and bins will be
  safer.

<p>This also makes a variety of security and denial of service
  exploits either impossible or more difficult (since many of them
  rely on overwriting a file through the actions of some SUID program
  that <em>isn't providing an arbitrary shell command</em>).

<p>The only inconvenience of this is when building and doing your
  <prgn>make install</prgn> on various sorts of system binaries.  On
  the other hand it also prevents the <prgn>make install</prgn> from
  over-writing the files.  When you forget to read the Makefile and
  chattr -i the files that are to be overwritten (and the directories
  to which you want to add files) &dash; the make fails, you just use
  the chattr command and rerun it.  You can also take that opportunity
  to move your old bin's, libs, or whatever into a .old/ directory or
  rename or tar them or whatever.

<p>Note that this also prevents you from upgrading your system's
packages. Since the files that they provide cannot be overwritten, so
you might want to have a mechanism to disable the immutable flag on
all binaries right before doing an <prgn>apt-get update</prgn>.


</list>


<sect1>Building a honeypot

<p>FIXME. More Content specific to Debian needed.

<p>If you wish (and can also implement it and dedicate time to it) you can
set a full honeypot using a Debian GNU/Linux system. You have all the
tools needed in order to setup all the honeynet: the firewall, 
the network intrusion detector and the fake server. Be careful,
however, you have to be pretty sure that you will be alerted in time
(see <ref id="log-alerts">) so that you can take appropiate measures
and terminate the compromise as soon as you fill you've seen enough.

<list>

<item>the firewalling technology you will need (provided by the Linux
kernel).

<item><package>syslog-ng</package> to send the logs from the honeypot
to a remote syslog server machine.

<item><package>snort</package> to setup capture of all the incoming
network traffic to the honeypot and detect the attacks.


<item><package>osh</package> which could be used to setup a restricted
shell with logging (see Lance Spitzner's article below). 

<item>of course, all the servers for your fake server honeypot
 you can imagine of (but do <em>not</em> harden the honeypot)).

<item>and also fake services, provided by <package>dtk</package> if you
want to use the honeynet also as an intrusion detection service.

<item>Integrity checkers (see <ref id="check-integ">) and 
The Coroner's Toolkit (<package>tct</package>) to do post-attack
audits.

</list>

<p>You can read more about building honeypots in Lanze Spitzner's excellent
article
<url id="http://www.net-security.org/text/articles/spitzner/honeypot.shtml"
name="To Build a Honeypot"> (from the Know your Enemy series), or
David Raikow's
<url id="http://www.zdnetindia.com/techzone/resources/security/stories/7601.htm"
name="Building your own honeypot">.
Also, the <url id="http://project.honeynet.org/" name="Honeynet Proyect">
is dedicated to building honeypots and auditing attacks made to them,
there is valuable information there on howto setup a honeypot and howto
audit the results of an attack (check out the contest).

<chapt>After the compromise

<sect>General behavior

<p>
If you really want to clean up residual waste, you should remove the
compromised host from your network and re-install the OS from scratch.
This might not have any effect if you do not know how the intruder got
root.  In this case you must check everything: firewall/file
integrity/loghost logfiles and so on. For more information on what to do
following a breakin, see <url name="Sans' Incident Handling Guide"
id="http://www.sans.org/y2k/DDoS.htm">

<p>
If you wish to gather more information, the <package>tct</package> 
(The Coroner's Toolkit from Dan Farmer and Wietse Venema) package
contains utilities which perform a 'post mortum' of a system. 
<package>tct</package> allows the user to collect
information about deleted files, running processes and more. See the
included documentation for more information. 

<p>FIXME.This paragraph will hopefully provide
more information about forensics in a Debian system in the coming future.

<p>FIXME: continue the list, maybe?.


<chapt>Frequently asked Questions
<p> FIXME: write them, extract from mailing list

<sect>Is Debian more secure than X?
<p>A system is as secure as its administrator is capable of making it.

<sect>Is there are hardening program for Debian?

<p>Yes. <url name="Bastille Linux"
id="http://www.bastille-linux.org">, originally oriented towards some
Linux distributions (RedHat and Mandrake) currently works for
Debian. Steps are being taken to integrate the changes made to the
upstream version, in any case the package in Debian is, of course,
name <package>bastille</package>.

<p>Some people believe, however, that a hardening tool does not
eliminate the need for good administration.


<sect>How can I make service XYZ more secure?
<!-- Changed to XYZ in order to avoid confusion :) jfs -->

<p>You will find information in this document to make some services
(FTP, Bind) more secure in Debian GNU/Linux. For services not covered
here, however, check the program's documentation, or general Linux
information. Most of the security guidelines for Unix systems apply
also to Debian so securing service X in Debian is, most of the time,
like securing the service for any other Linux distribution (or Unix,
for that matter).

<sect>My system is vulnerable!

<sect1>I have suffered a break-in what do I do?
<p>Read this document and take the appropiate measures outlined here.
If you need assistance you might use the debian-security@lists.debian.org
to ask for advice on how to recover/patch your system.

<sect1>Program X in Debian is vulnerable, what do I do?
<p>Take a moment, first, to see if the vulnerability has been announced
in public security mailing lists (like Bugtraq) or other forums, the
Debian Security Team keeps up to date with this lists, so they might already
be aware of the problem. Do not take any further actions if you see an 
announcement already at <url id="http://security.debian.org">.
<p>If you do not see any of this, please send mail on the affected packages 
as well as a description of the vulnerability as detailed as possible 
(proof of concept code is also ok) to security@debian.org which will get 
you in touch with the security team.

<sect1>The version number for a package indicates that I am still running a vulnerable version!
<p>Instead of upgrading to a new release we backport security fixes to
the version that was shipped in the stable release. The reason we do                           
this is to make sure that a release changes as little as possible                              
so things will not change or break unexpectedly as a result of a                               
security fix. You can check if you are running a secure version of                             
a package by looking at the package changelog, or comparing its                                
exact (upstream version -slash- debian release) version number with the 
version indicated in the Debian Security Advisory.              

<sect>Questions regarding users and groups

<sect1>Are all system users necessary?

<p>Yes and no. Debian comes with some predefined users (id &lt; 99 as
described in <url name="Debian Policy"
id="http://www.debian.org/doc/manuals/debian-policy">) for some
services so that installing new services is easy (they are already run
by the appropriate user). If you do not intend to install new services,
you can safely remove those users who do not own any files in your
system and do not run any services.  <p>You can easily find users not
owning any files by executing the following command (be sure to run it
as root, since a common user might not have enough permissions to go
through some sensitive directories):


<!-- Took the liberty to make this script more secure ... >:^) // era -->
<example>
cut -f 1 -d : /etc/passwd |
while read i; do find / -user "$i" | grep -q . && echo "$i"; done
</example>

<p>These users are provided by <package>base-passwd</package>. You
will find in its documentation more information on how these users are
handled in Debian.

<p>The list of default users (with a corresponding group) follows:

<list>

<item>root:
	Root is (typically) the superuser.

<item>daemon:
	Some unprivileged daemons that need to be able to write to some
	files on disk run as daemon.daemon (portmap, atd, probably others).
	Daemons that don't need to own any files can run as nobody.nogroup
	instead, and more complex or security conscious daemons run as
	dedicated users. The daemon user is also handy for locally
	installed daemons, probably.

<item>bin: 
	   maintained for historic reasons.

<item>sys:
	   same as with bin.
              However, /dev/vcs* and /var/spool/cups are owned by
	      group sys.

<item>sync:
	The shell of user sync is /bin/sync. Thus, if its password is set
	to something easy to guess (such as ""), anyone can sync the system 
	at the console even if they have no account on the system.
<item>games:
	Many games are sgid to games so they can write their high score
	files. This is explained in policy.
<item>man:
	The man program (sometimes) runs as user man, so it can write cat
	pages to <file>/var/cache/man</file>

<item>lp:
	Used by printer daemons.

<item>mail:
	Mailboxes in <file>/var/mail</file> are owned by group mail, as is explained in
	policy. The user and group is used for other purposes as well by
	various MTA's.

<item>news:
	Various news servers and other associated programs (such as suck)
	use user and group news in various ways. Files in the news spool
	are often owned by user and group news. Programs such as inews that
	can be used to post news are typically sgid news.

<item>uucp:
	The uucp user and group is used by the UUCP subsystem. It owns
	spool and configuration files. Users in the uucp group may run
	uucico.

<item>proxy:
	Like daemon, this user and group is used by some daemons
	(specifically, proxy daemons) that don't have dedicated user id's
	and that need to own files. For example, group proxy is used by
	pdnsd, and squid runs as user proxy.

<item>majordom:
	Majordomo has a statically allocated uid on Debian systems for
	historical reasons. It is not installed on new systems.

<item>postgres:
	Postgresql databases are owned by this user and group. All
	files in <file>/var/lib/postgresql</file> are owned by this user to
	enforce proper security.

<item>www-data:
	Some web browsers run as www-data. Web content should *not* be
	owned by this user, or a compromised web server would be able to
	rewrite a web site. Data written out by web servers, including
	log files, will be owned by www-data.

<item>backup:
	So backup/restore responsibilities can be locally 
	delegated to someone without full root permissions.
<item>operator:
	Operator is historically (and practically) the only 'user' account
	that can login remotely, and doesn't depend on NIS/NFS.
<item>list:
	Mailing list archives and data are owned by this user and group.
	Some mailing list programs may run as this user as well.
<item>irc:
	Used by irc daemons. A statically allocated user is needed only
	because of a bug in ircd -- it setuid()s itself to a given UID on
	startup.

<item>gnats.

<item>nobody, nogroup:
	Daemons that need not own any files run as user nobody and group
	nogroup. Thus, no files on a system should be owned by this user or
	group.

</list>

<p>Other groups which have no associated user:

<list>

<item>adm:
	Group adm is used for system monitoring tasks. Members of this
	group can read many log files in /var/log, and can use xconsole.
	Historically, /var/log was /usr/adm (and later /var/adm), thus the
	name of the group.

<item>tty:
	Tty devices are owned by this group. This is used by write and wall
	to enable them to write to other people's tty's.

<item>disk:

	Raw access to disks. Mostly equivalent to root access.

<item>kmem:
	/dev/kmem and similar files are readably by this group. This is
	mostly a BSD relic, but any programs that need direct read access
	to the system's memory can thus be made sgid kmem.

<item>dialout:
	Full and direct access to serial ports. Members of this group can
	reconfigure the modem, dial anywhere, etc.

<item>dip: THe group's man stands for "Dialup IP". Being in group dip
	allows you to use a tool such as <prgn>ppp</prgn>,
	<prgn>dip</prgn>, <prgn>wvdial</prgn>, etc. to dial up a
	connection. The users in this group cannot configure the
	modem, they can just run the programs that make use of it.

<item>fax:
	Allows members to use fax software to send / receive faxes.

<item>voice:
	Voicemail, useful for systems that use modems as answering
	machines.

<item>cdrom:
	This group can be used locally to give a set of users access to a
	cdrom drive.

<item>floppy:
	This group can be used locally to give a set of users access to a
	floppy drive.

<item>tape:
	This group can be used locally to give a set of users access to a
	tape drive.

<item>sudo:
	Members of this group do not need to type their password when using
	sudo. See <file>/usr/share/doc/sudo/OPTIONS</file>.

<item>audio:
	This group can be used locally to give a set of users access to an
	audio device.

<item>src: This group owns source code, including files in
	<file>/usr/src</file>. It can be used locally to give a user
	the ability to manage system source code.

<item>shadow: <file>/etc/shadow</file> is readable by this group. Some
	programs that need to be able to access the file are set gid
	shadow.

<item>utmp: This group can write to <file>/var/run/utmp</file> and
	similar files. Programs that need to be able to write to it
	are sgid utmp.

<item>video:
        This group can be used locally to give a set of users access to an
	video device.

<item>staff: Allows users to add local modifications to the system
	(<file>/usr/local</file>, <file>/home</file>) without needing
	root privileges. Compare with group "adm", which is more
	related to monitoring/security.

<item>users:

	While Debian systems use the user group system by default (each
	user has their own group), some prefer to use a more traditional
	group system. In that system, each user is a member of the 'users'
	group.

</list>

<sect1>What is the difference between the adm and the staff group?
<p>

<p>'adm' are administrators and is mostly useful to allow them to read
logfiles without having to <prgn>su</prgn>. 'staff' is useful for more
helpdesk/junior sysadmins type of people and gives them the ability to
do things in <file>/usr/local</file> and create directories in
<file>/home</file>.


<sect>Question regarding open ports

<sect1>Why do I have port 111 open?

<p>Port 111 is sunrpc's portmapper, it is installed by default in all
base installations of a Debian system since there is no need to know
when a user's program might need RPC to work out correctly. In any
case, it is used mostly for NFS. If you do not need it, remove it as
explained in <ref id="rpc">.


<sect1>I have checked I have the following port (XYZ) open, can I close it?

<p>Of course you can, the ports you are leaving open should adhere to
your site's policy regarding public services available to other
systems. Check if they are open by inetd (see <ref id="inetd">) or by
other installed packages and take appropriate measures (configure
inetd, remove the package, avoid it running on bootup...)

<sect>I have lost my password and cannot access the system!!

<p>The steps you need to take in order to recover from this depends on
whether or not you have applied the suggested procedure for limiting
access to Lilo and BIOS.

<p>If you have limited both. You need to disable the BIOS features
(only boot from hard disk) before proceeding, if you also forgot your
BIOS password, you will have to open your system and manually remove
the BIOS battery.

<p>If you have bootup of CD-ROM or diskette enable, you can:
<list>

<item>bootup from a rescue disk and start the kernel

<item>go to the virtual console (Alt+F2)

<item>mount the hard disk where your /root is

<item>edit (Debian rescue disk comes with <prgn>ae</prgn>)
<file>/etc/shadow</file> and change the line:

<example>
root:asdfjl290341274075:XXXX:X:XXXX:X::: (X=any number)
</example>

to:

<example>
root::XXXX:X:XXXX:X:::
</example>

</list>

<p>If you are using LILO and have not restricted it. You can:

<list>

<item>Press the Alt, shift or Control key just before the system BIOS
finishes, you should get the LILO prompt.

<item>Type 'linux single', 'linux init=/bin/sh' or 'linux 1' in the prompt.

<item>you should get to a shell prompt in singleuser mode

<item>remount read/write the / partition
<example>
mount -o remount,rw /
</example>

<item>change the superuser password with <prgn>passwd</prgn> (since
you are superuser it will not ask for the previous password).

</list>

<sect>Questions regarding the Debian security team


<sect1>The signature on Debian advisories does not verify correctly!

<p>This is most likely a problem on your end. The
   debian-security-announce list has a filter that only allows
   messages with a correct signature from one of the security team
   members to be posted.

<p>Most likely some piece of mail software on your end slightly
   changes the message that breaks the signature. Make sure your
   software does not do any MIME encoding or decoding, or tab/space
   conversions.

<p>Known culprits are fetchmail (with the mimedecode option enabled)
  and formail (from procmail 3.14 only).

<sect1>How is security handled for <tt>testing</tt> and <tt>unstable</tt>?
<p>The short answer is: it's not. Testing and unstable are rapidly moving
   targets and the security team does not have the resources needed to
   properly support those. If you want to have a secure (and stable) server
   you are strongly encouraged to stay with stable.

<sect1>Why are there no official mirrors for security.debian.org?
<p>A: The purpose of security.debian.org is to make security updates available
   as quickly and easily as possible. Mirrors would add extra complexity
   that is not needed and can cause frustration if they are not up to
   date.

<sect1>How can I reach the security team?
<p>A: Security information can be sent to security@debian.org, which is read
   by all Debian developers. If you have sensitive information please
   use team@security.debian.org which only the members of the security
   team read. If desired email can be encrypted with the Debian Security
   Contact key (key ID 363CCD95).

<sect1>How can I contribute with the Debian security team?
<list>
<item>By contributing to this document, fixing FIXMEs or providing new content.
Documentation is important and reduces the overload of answering common
oissues. Translation of this documentation into other languages is also of great
help.

<item>By packaging applications that are useful for providing/checking security
in/using a Debian system. If you are not a developer, file a <url name="WNPP bug"
id="http://www.debian.org/devel/wnpp"> and ask for software you think might
be useful and is not currently provided.

<item>Audit applications in Debian or help solve security bugs and report 
issues to security@debian.org. Other projects' work like the 
<url name="Linux Kernel Security Audit Project" id="http://kernel-audit.sourceforge.net/">
or the <url name="Linux Security-Audit Project" id="http://www.linuxhelp.org/lsap.shtml">
increase the security of Debian GNU/Linux since contributions will eventually help
here too.

</list>

<p>In any case, please review each problem before reporting it to
security@debian.org.  If you are able to provide patches, that
would speed up the process.  Do not simply forward bugtraq mails,
since they are received already.  Providing additional information,
however, is always a good idea.

<sect1>How are security incidents handled in Debian?
<p>Once the Security Team receives a notification of an incident,
one or more members review it and consider Debian/stable vulnerable
or not.  If our system is vulnerable, it is worked on a fix for the
problem.  The package maintainer is contacted as well, if he didn't
contact the Security Team already.  Finally the fix is tested and
new packages are prepared, which then are compiled on all stable
architectures and uploaded afterwards.  After all this tasks are
done a Debian Security Advisory (DSA) is sent to public mailing lists.

<sect1>Who is the Security Team composed of?
<p>The Debian Security Team currently consists of five members and
two secretaries.  The Security Team itself appoints people to join
the team.

<sect1>Does the Debian Security team check every new package in Debian?
<p>No, the Debian security team does not check every new package and neither
is there an automatic (lintian) check in order to detect malicious new
packages, since those checks are rather impossible to detect automatically.
Maintainers, however, are fully responsible for the software that is
introduced in Debian and no software is introduced that is not first
signed by an authorised developers. They are in charge of analysing the
software they maintain and are security-aware.

<appendix>The hardening process step by step

<!--
# I took the liberty to change this from "checklist" to
# "process step by step" because this doesn't really have the
# form of a checklist, and I had added a different sort of
# checklist. The renaming is more to avoid confusion than
# anything else. // era
-->

<p>A procedure is always useful, since it allows you to see the entire
process of hardening the system and enables you to take decisions. A
possible approach for such a procedure Debian 2.2 GNU/Linux is shown
below. This is a post-installation procedure, for a checklist of
measures to be taken, step by step, during configuration see <ref
id="checklist">. Also, this procedure is (for the moment) more
oriented towards hardening of network services.

<list>

<item>Do an installation of the system (take into account information
in this howto regarding partitioning). After base installation go into
custom install, do not select task packages but select shadow
passwords.

<item>go through <prgn>dselect</prgn> and remove unneeded but selected
packages before doing [I]nstall. Leave the bare minimum software in
the server.

<item>Update all software from latest packages available at
security.debian.org as explained previously in <ref id="update">.

<item>implement the suggested issues presented in this manual
regarding user quotas, login definitions and lilo

<item>in order to do a service hardening, make a list of services
currently awake in your system.
<example>
$ ps -aux
$ netstat -pn -l -A inet 
$ /usr/sbin/lsof -i |grep LISTEN
</example>

You will need to install <package>lsof-2.2</package> for the second
command to work (run it as root).

<item>in order to remove unnecessary services, first determine how is
it started and which package provides it. You can do this easily by
checking the program that listens in the socket, the following example
will tell you using this tools and <prgn>dpkg</prgn>

<example>
#!/bin/sh
# FIXME: this is quick and dirty; replace with a more robust script snippet
for i in `sudo lsof -i | grep LISTEN | cut -d " " -f 1 |sort -u` ; do
        pack=`dpkg -S $i |grep bin |cut -f 1 -d : | uniq`
        echo "Service $i is installed by $pack";
        init=`dpkg -L $pack |grep init.d/ `
        if [ ! -z "$init" ]; then
                 echo "and is run by $init"
        fi
done
</example>

<item>Once you find unwanted services, remove the package (with
<prgn>dpkg --purge</prgn>) or, if useful but should not be enabled on
startup, use <prgn>update-rc.d</prgn> in order to remove them from the
system startup.

<item>For inetd services (launched by the superdaemon) you can just
check the enabled services, for example with:

<example>
$ grep -v "^#" /etc/inetd.conf | sort -u
</example>

and disable those not needed by commenting the line that includes
them, removing the package, or using <prgn>update-inetd</prgn>

<item>If you have wrapped services (those using
<prgn>/usr/sbin/tcpd</prgn>) check that the
<file>/etc/hosts.allow</file> and <file>/etc/hosts.deny</file> are
configured according to your service policy.

<item>If possible, and depending on each service, you might want to
limit services when using more than one external interface to listen
only on one of them. For example, if you want internal FTP access make
the FTP daemon listen only on your management interface, not on all
interfaces (i.e, 0.0.0.0:21).

<item>Reboot the machine, or switch it to single user and back to multiuser with 
<example>
$ init 0
(....)
$ init 2
</example>
<item>Check the services now available, and, if necessary, repeat steps above.
<item>Install now the needed services if you have not done so already, and configure
them properly.
<item>Check what users are being used to run available services for example with:
<example>
$ for i in `/usr/sbin/lsof -i |grep LISTEN |cut -d " " -f 1 |sort -u`; do user=`ps -ef |grep $i |grep -v grep |cut -f 1 -d " "` ; echo "Service $i is running as user $user"; done
</example>

and consider changing these services to a give user/group and maybe
also chrooting them for increased security. You can do this by
changing the <file>/etc/init.d</file> scripts, where the service
starts. Most services in Debian use <prgn>start-stop-daemon</prgn> so
you can use the --change-uid option and the --chroot option to setup
those services. Chrooting services is beyond the scope of this
document but a word of warning is necessary: you might need to put all
the files installed by the service package using dpkg -L and the
packages it depends on in the chrooted environment.

<item>Repeat steps above in order to check that only desired services are 
running and that they are run as the desired user/group combination.

<item>Test the installed services in order to see if they work as expected.

<item>Check the system using a vulnerability assessment scanner 
(like <package>nessus</package>) in order to determine vulnerabilities in the 
system (misconfigurations, old services or unneeded services).

<item>Install network intrusion measures and host intrusion measures (like 
<package>snort</package> and <package>logsentry</package>).

<item>Repeat the network scanner step and verify that the intrusion 
detection systems work fine.

</list>

For the truly paranoid, consider also the following:

<list>

<item>Add firewalling capabilities to the system, accepting 
incoming connections only to offered services and limiting 
outgoing connections to those authorized. 

<item>Recheck the installation with a new vulnerability assessment with a network scanner.

<item>Check outgoing connections using a network scanner from the system to a host
outside and verify that unwanted connections do not find their way out.

</list>

<p>FIXME: this procedure considers service hardening but not system
hardening at the user level, include information regarding checking
user permissions, setuid files and freezing changes in the system
using the ext2 filesystem.

<appendix id="checklist">Configuration checklist

<p>This appendix briefly reiterates points from the other sections of
this HOWTO in a condensed checklist format.  This is intended as a
quick summary for someone who has already read the HOWTO.

<!-- Order is slightly different from body text. Consider changing text? -->
<!-- (TODO) -->

<p>FIXME: This is based on v1.4 of the HOWTO and might need to be updated.

<list>
	  <item>Limit physical access and booting capabilities
	      <list>
		<item>Enable BIOS password
		<item>Disable floppy booting
		    
		<item>Set a LILO or GRUB password (<file>/etc/lilo.conf</file>
			or <file>/boot/grub/menu.lst</file>, respectively);
			check that the LILO or GRUB configuration file is
			read-protected.

		<item>Disallow MBR floppy booting back door by
		    overwriting the MBR (maybe not?)

	      </list>
	      
	  <item>Partitioning
	      <list>
		
		<item>Separate user-writable data, non-system data, and
		    rapidly changing run-time data to their own partitions
		    
		<item>Set <tt>nosuid,noexec,nodev</tt> mount options in
		    <file>/etc/fstab</file> on ext2 partitions such as
		    /tmp
	      </list>
	      
	  <item>Password hygiene and login security
	      
	      <list>
		<item>Set a good root password
		<item>Enable password shadowing and MD5
		<item>Install and use PAM
		    
		    <list>
		      
		      <item>Add MD5 support to PAM and make sure that
			  (generally speaking) entries in
			<file>/etc/pam.d/</filE> files which grant
			  access to the machine have the second field in
			  the pam.d file <!-- or is it third? (TODO:
			  check) --> set to "requisite" or "required".
			  
		      <item>Tweak <file>/etc/pam.d/login</file> so as to
			  only permit local root logins.

		      <item>Also mark authorized tty:s in
			  <file>/etc/security/access.conf</file> and
			  generally set up this file to limit root
			  logins as much as possible.
			  
		      <item>Add pam_limits.so if you want to set
		      per-user limits
			  
		      <item>Tweak <file>/etc/pam.d/passwd</file>: set
			  minimum length of passwords higher (6
			  characters maybe) and enable md5

		      <item>Add group wheel to <file>/etc/group</file> if
			  desired; add pam_wheel.so group=wheel entry to
			  <file>/etc/pam.d/su</file>
			  
		      <item>For custom per-user controls, use
			  pam_listfile.so entries where appropriate
			  
		      <item>Have an <file>/etc/pam.d/other</file> file and
			  set it up with tight security

		    </list>
		    
		<item>Set up limits in <file>/etc/security/limits.conf</file>
		    (note that <file>/etc/limits</file> is not used
		    if you are using PAM)

		<item>Tighten up <file>/etc/login.defs</file>; also, if you
		    enabled MD5 and/or PAM, make sure you make the
		    corresponding changes here, too
		    
		<item>Disable root ftp access in <file>/etc/ftpusers</file>
		    
		<item>Disable network root login; use <manref
		    name="su" section="1"> or <manref name="sudo"
		    section="1">.  (consider installing
		    <package>sudo</package>)
		    
		<item>Use PAM to enforce additional constraints on logins?

	      </list>

	  <item>Other local security issues
	      <list>
		<item>Kernel tweaks
		    (see <ref id="kernel-conf">)
		    
		<item>Kernel patches
		    (see <ref id="kernel-patches">)
		    
		<item>Tighten up logfile permissions
		    (<file>/var/log/{last,fail}log</file>, Apache logs)
		    
		<item>Verify that setuid checking is enabled
		    in <file>/etc/checksecurity.conf</file>
		    
		<item>Consider making some log files append-only
		    and configuration files immutable
		    using chattr (ext2 filesystems only)



		<item>Set up file integrity (see  <ref
		id="check-integ">).  Install
		<package>debsums</package>
		    
		<item>Consider replacing locate with slocate
		    
		<item>Log everything to a local printer?
		    
		<item>Burn your configuration on a bootable CD and
		boot off that?
		    
		<item>Disable kernel modules?

	      </list>
	      
	  <item>Limit network access
	      <list>

		<item>Install and configure <prgn>ssh</prgn>
		    (suggest PermitRootLogin No in <file>/etc/ssh</file>,
		    PermitEmptyPasswords No;
		    note other suggestions in text also)
		    
		<item>Consider disabling or removing in.telnetd
		    
		<item>Generally, disable gratuitous services in
		<file>/etc/inetd.conf</file> using <tt>update-inetd
		      --disable</tt> (or disable inetd altogether, or use a
		    replacement such as xinetd or rlinetd)
		    
		<item>Disable other gratuitous network services;
		    mail, ftp, DNS, www etc should not be running
		    if you do not need them and monitor them regularly.

		<item>For those services which you do need, do not
		    just use the most common programs, look for more
		    secure versions shipped with Debian (or from other
		    sources).  Whatever you end up running, make sure
		    you understand the risks.

		<item>Set up chroot jails for outside users and daemons.

		<item>Configure firewall and tcpwrappers
		    (i.e. <manref name="hosts_access" section="5">);
		    note trick for /etc/hosts.deny in text
		    
		<item>If you run ftp, set up your ftpd server
		    to always run chrooted to the user's home directory
		    
		<item>If you run X, disable xhost authentication and
		    go with ssh instead; better yet, disable remote X
		    if you can (add -nolisten tcp to the X command
		    line and turn off XDMCP in
		    <file>/etc/X11/xdm/xdm-config</file> by setting
		    the requestPort to 0)
		    
		<item>Disable outside access to printers
		    
		<item>Tunnel any IMAP or POP sessions through SSL or ssh;
		    install stunnel if you want to provide this service
		    to remote mail users
		    
		<item>Set up a loghost and configure other machines
		    to send logs to this host (<file>/etc/syslog.conf</file>)
		    
		<item>Secure BIND, Sendmail, and other complex daemons
		    (run in a chroot jail; run as a non-root pseudo-user)

		<item>Install snort or a similar logging tool.
		    
		<item>Do without NIS and RPC if you can (disable portmap).
		    
	      </list>

	  <item>Policy issues
	      <list>
		
		<item>Educate users about the whys and hows of your policies.
		    When you have prohibited something which is regularly
		    available on other systems, provide documentation
		    which explains how to accomplish similar results using
		    other, more secure means.

		<item>Prohibit use of protocols which use cleartext passwords
		    (telnet, rsh and friends; ftp, imap, http, ...).
		    
		<item>Prohibit programs which use SVGAlib.
		    
		<item>Use disk quotas.

	      </list>
	      
	  <item>Keep informed about security issues
	      <list>
		
		<item>Subscribe to security mailing lists
		    
		<item>Subscribe to security updates -- add to
		    <file>/etc/apt/sources.list</file> an entry (or
		    entries) for
		    http://security.debian.org/debian-security
		    
		<item>Also remember to periodically run
		<prgn>apt-get update ; apt-get upgrade</prgn>
		(perhaps install as a cron job?) as explained in <ref
		id="update">.

	      </list>

	</list>


</book>
