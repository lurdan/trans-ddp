<!doctype debiandoc system>

<!--
# TODO list:
# - Shorten overlong lines - there are lots of sections (by jfs?) where
#   lines are routinely longer than 80 characters. Actually it makes sense
#   to author SGML with much shorter lines, because it makes editing simpler
#   (while the internal line length of the SGML source is obviously not
#   visible in any way to the end user).
#   (occur (make-string 80 ?.))   ;  C-x C-e here
# - Remove gratuitous trailing whitespace; M-x occur " +$"
# - add prgn tags
# JFS reminders :) 
#   setup is a noun, set up is a verb
-->

<book>

<titlepag>
<!-- Title information -->
<title>Securing Debian Manual
<author>
<name>Javier Fernández-Sanguino Peña</name>
<email>jfs@computer.org</email>
</author>
<version>2.95
<date>Thu, 26 Jun 2003 01:48:37 +0200

<abstract>
This document describes security in the Debian project. 
Starting with the process of securing and hardening the
default Debian GNU/Linux distribution installation. 
It also covers some of the common tasks to set up a secure
network environment using Debian GNU/Linux, 
gives additional information on the security tools available
and talks about how security is enforced in Debian by 
the security team.
</abstract>

<copyright> 
<copyrightsummary>Copyright &copy;  2002, 2003 Javier Fernández-Sanguino Peña
<p>Copyright &copy;  2001  Alexander Reelsen, Javier Fernández-Sanguino Peña
<p>Copyright &copy;  2000  Alexander Reelsen

<p>Permission is granted to copy, distribute and/or modify this document 
under the terms of the <url id="http://www.fsf.org/copyleft/fdl.html" 
name="GNU Free Documentation License, Version 1.1"> or any later 
version published by the Free Software Foundation. It is distributed 
in the hope that it will be useful, but WITHOUT ANY WARRANTY.
</copyright>

</titlepag>

<!-- Table of contents -->
<toc>

<!-- Begin the document -->

<chapt>Introduction
<p>
One of the hardest things about writing security documents is that every case
is unique. Two things you have to pay attention to are the threat environment
and the security needs of the individual site, host, or network. For instance,
the security needs of a home user are completely different from a network in a
bank. While the primary threat a home user needs to face is the script kiddie
type of cracker, a bank network has to worry about directed attacks. 
Additionally, the bank has to protect their customer's data with arithmetic 
precision. In short, every user has to consider the tradeoff between
usability and security/paranoia.
<!-- Is this metaphor really appropriate? Sounds like rounding errors to me, 
era -->
<p>
Note that this manual only covers issues relating to software. 
The best software in the world can't protect you if someone can physically
access the machine. You can place it under your desk, or you can place
it in a hardened bunker with an army in front of it. Nevertheless the
desktop computer can be much more secure (from a software point of view)
than a physically protected one if the desktop is configured properly and
the software on the protected machine is full of security holes.
Obviously, you must consider both issues.

<p>This document just gives an overview of what you can do 
to increase the security of your Debian GNU/Linux
system. If you have read other documents regarding Linux security, you
will find that there are common issues which might overlap with this
document. However, this document does not try to be the ultimate source
of information you will be using, it only tries to adapt this same
information so that it is meaningful to a Debian GNU/Linux system.
Different distributions do some things in different ways (startup of
daemons is one example); here, you will find material which is
appropriate for Debian's procedures and tools.
<!-- 
# Does this approximate the intent of the original author? (FIXME: check)
# Original text said: "you will find here [sic] a different approach,
# using Debian's tools, regarding security." era
-->
<!-- IMHO yes, jfs -->

<p>If you have comments, additions or suggestions, please mail them to 
<!-- <url name="Alexander Reelsen" id="mailto:ar@rhwd.de"> and  -->
<url name="Javier Fernández-Sanguino" id="mailto:jfs@computer.org">
(alternate address: jfs@debian.org)
and it will be incorporated into this manual.

<sect>Download the manual
<p>
You can download or view the newest version of the Securing Debian
Manual from the <url name="Debian Documentation Project"
id="http://www.debian.org/doc/manuals/securing-debian-howto/">.  Feel
free to check out the version control system through its <url
name="CVS server"
id="http://cvs.debian.org/ddp/manuals.sgml/securing-howto/?cvsroot=debian-doc">.

<p>You can download also a <url
id="http://www.debian.org/doc/manuals/securing-debian-howto/securing-debian-howto.txt"
name="text version"> from the Debian Documentation's Project site.
Other formats, like PDF, are not (yet) provided.  However, you can
download or install the <url
id="http://packages.debian.org/harden-doc" name="harden-doc"> package
which provides this same document in HTML, txt and PDF formats. Notice,
however, that the package maybe not be completely up to date with the
document provided on the Internet (but you can always use the source
package to build an updated version yourself!)

<!-- 
<p>
Previous (out of date) versions of this HOWTO can be found here:

<list>
<item><url name="Text-only"
id="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.txt">
<item><url name="HTML"
id="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.html">
<item><url name="HTML, tarred and gzipped"
id="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.tar.gz">
<item><url name="SGML"
id="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.sgml">
</list>
-->
<!-- TODO: remove these stale links rather than leave references to -->
<!-- the old versions hanging around? era -->


<sect>Organizational Notes/Feedback
<p>
Now to the official part. At the moment I (Alexander Reelsen) wrote
most paragraphs of this manual, but in my opinion this should not stay
the case. I grew up and live with free software, it is part of my
everyday use and I guess yours, too. I encourage everybody to send me
feedback, hints additions or any other suggestions, you might have.

<p>
If you think, you can maintain a certain section or paragraph better,
then write to the document maintainer and you are welcome to do it.
Especially if you find a section marked as FIXME, that means the
authors did not have the time yet or the needed knowledge about the
topic, drop them a mail immediately.

<p>
The topic of this manual makes it quite clear that it is important to
keep it up to date, and you can do your part.  Please contribute.

<sect>Prior knowledge
<p>
The installation of Debian GNU/Linux is not very difficult and you
should have been able to install it. If you already have some
knowledge about Linux or other Unices and you are a bit familiar with
basic security, it will be easier to understand this manual, as this
document cannot explain every little detail of a feature (otherwise
this would have been a book instead of a manual). If you are not that
familiar, however, you might want to take a look at <ref
id="references"> for where to find more in-depth information.


<sect>Things that need to be written (FIXME/TODO)
<p>
<list>

<item>Expand the incident response information, maybe add some ideas
derived from RedHat's Security Guide's
<url id="http://www.redhat.com/docs/manuals/linux/RHL-9-Manual/security-guide/ch-response.html" name="chapter on incident response">.

<item>Write about remote monitoring tools (to check for system
availability) such as monit, daemontools and mon. See <url
id="http://linux.oreillynet.com/pub/a/linux/2002/05/09/sysadminguide.html">.

<item>Consider writting a section on how to build Debian-based network
appliances (with information such as the base system,
<package>equivs</package> and FAI).

<item>Check if <url id="http://rr.sans.org/linux/hardening.php"> has
relevant info not yet covered here.

<item>Add Information on how to set up a laptop with Debian
<url id="http://rr.sans.org/linux/debian_laptop.php">.

<item>Add information on how to set up a firewall using Debian
GNU/Linux. The section regarding firewalling is oriented currently
towards a single system (not protecting others...) also talk on how
to test the setup.

<item>Add information on setting up a proxy firewall with Debian GNU/Linux 
stating specifically which packages provide proxy services (like 
<package>xfwp</package>, <package>xproxy</package>, 
<package>ftp-proxy</package>, <package>redir</package>, 
<package>smtpd</package>, <package>nntp-cache</package>, 
<package>dnrd</package>, <package>jftpgw</package>, <package>oops</package>, 
<package>pnsd</package>, <package>perdition</package>, 
<package>transproxy</package>, <package>tsocks</package>). Should point to the 
manual for any other info. Note that <package>zorp</package> is now 
available as a Debian package and <em>is</em> a proxy firewall 
(they also provide Debian packages upstream).

<item>Information on service configuration with file-rc

<item>Check all the reference URLs and remove/fix those no longer available.

<item>Add information on available replacements (in Debian) for common
servers which are useful for limited functionality. Examples: 

	<list>
	<item>local lpr with cups (package)?

	<item>remote lrp with lpr

	<item>bind with dnrd/maradns

	<item>apache with dhttpd/thttpd/wn (tux?)

	<item>exim/sendmail with ssmtpd/smtpd/postfix

	<item>squid with tinyproxy

	<item>ftpd with oftpd/vsftp

	<item>...

	</list>


<item>More information regarding security-related kernel patches in
Debian, including the ones shown above and
specific information on how to enable these patches in a Debian system.

<list>

<item>Linux Intrusion Detection (<package>lids-2.2.19</package>)

<item>Linux Trustees (in package <package>trustees</package>)

<item><url name="NSA Enhanced Linux"
id="http://www.coker.com.au/selinux/">

<item><url name="kernel-patch-2.2.18-openwall"
id="http://packages.debian.org/kernel-patch-2.2.18-openwall">

<item><package>kernel-patch-2.2.19-harden</package>

<item><package>kernel-patch-freeswan, kernel-patch-int</package>

</list>

<item>Details of turning off unnecessary network services (besides 
<prgn>inetd</prgn>), it is partly in the hardening procedure but could be 
broadened a bit.

<item>Information regarding password rotation which is closely related
to policy.

<item>Policy, and educating users about policy.

<item>More about tcpwrappers, and wrappers in general?

<item><file>hosts.equiv</file> and other major security holes.

<item>Issues with file sharing servers such as Samba and NFS? 

<item>suidmanager/dpkg-statoverrides.

<item>lpr and lprng.

<item>Switching off the gnome IP things.

<item>Talk about pam_chroot (see <url id="http://http://lists.debian.org/debian-security/2002/debian-security-200205/msg00011.html">)
and its usefulness to limit users.  Introduce information related to
<url id="http://online.securityfocus.com/infocus/1575">.
<package>Pdmenu</package>, for example is available in Debian (while as
flash is not).

<item>Talk about chrooting services, some more info on
<url id="http://www.linuxfocus.org/English/January2002/aritcle225.shtml">,
<url id="http://www.networkdweebs.com/chroot.html"> and
<url id="http://www.linuxsecurity.com/feature_stories/feature_story-99.html">

<item>Talk about programs to make chroot jails. <package>Compartment</package>
and <package>chrootuid</package> are waiting in incoming. Some others
(makejail, jailer) could also be introduced.

<item>Add information provided by Karl Hegbloom regarding chrooting 
Bind 9, see <url id="http://people.pdxlinux.org/~karlheg/Secure_Bind9_uHOWTO/Secure_Bind_9_uHOWTO.xhtml">.

<item>Add information provided by Pedro Zornenon to chrooting Bind 8 only for 
potato though :(, see 
<url id="http://people.debian.org/~pzn/howto/chroot-bind.sh.txt"> (include the 
whole script?).

<item>More information regarding log analysis software (i.e. logcheck
and logcolorise).

<item>'advanced' routing (traffic policing is security related)

<item>limiting <prgn>ssh</prgn> access to running certain commands.

<item>using dpkg-statoverride.

<item>secure ways to share a CD burner among users.

<item>secure ways of providing networked sound in addition to network
  display capabilities (so that X clients' sounds are played on the X
  server's sound hardware)

<item>securing web browsers.

<item>setting up ftp over <prgn>ssh</prgn>.

<item>using crypto loopback file systems.

<item>encrypting the entire file system.

<item>steganographic tools.

<item>setting up a PKA for an organization.

<item>using LDAP to manage users. There is a HOWTO of ldap+kerberos
for Debian at www.bayour.com written by Turbo Fredrikson.

<item>How to remove information of reduced utility in production systems
such as /usr/share/doc, /usr/share/man (yes, security by obscurity).

<item>More information on lcap based on the packages README file
(well, not there yet, see
<url id="http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=169465"
name="Bug #169465">) and from the article from LWN:
<url id="http://lwn.net/1999/1202/kernel.php3"
name="Kernel development">.

<item>Add Colin's article on how to setup a chroot environment for a full 
Sid system (<url id="http://people.debian.org/~walters/chroot.html">)

<item>Add information on running multiple snort sensors in a given
system (check bug reports sent to snort)

<item>Add information on setting up a honeypot (<package>honeyd</package>)

</list>

<sect id="changelog">Changelog/History

<sect1>Version 2.95 (june 2003)
<p>Changes by Javier Fernández-Sanguino Peña
<list>
<item>Added a section on how to contact CERT for incident handling
(<url id="#after-compromise">)
<item>More information on setting up a Squid proxy.
<item>Added a pointer and removed a FIXME thanks to Helge H. F.
<item>Fixed a typo (save_inactive) spotted by  Philippe Faes.
<item>Fixed several typos spotted by Jaime Robles.
</list>

<sect1>Version 2.94 (april 2003)
<p>Changes by Javier Fernández-Sanguino Peña
<list>
<item>Following Maciej Stachura's suggestions I've expanded the section on
limiting users.
<item>Fixed typo spotted by Wolfgang Nolte.
<item>Fixed links with patch contributed by Ruben Leote Mendes.
<item>Added a link to David Wheeler's excellent document on the footnote
about counting security vulnerabilities.
</list>

<sect1>Version 2.93 (march 2003)
<p>Changes made by  Frédéric Schütz.
<list>
<item>rewrote entirely the section of ext2 attributes
(lsattr/chattr)
</list>

<sect1>Version 2.92 (february 2003)
<p>Changes by Javier Fernández-Sanguino Peña and
Frédéric Schütz.
<list>
<item>Merge section 9.3 ("useful kernel patches") into section 4.13 ("Adding
   kernel patches"), and added some content.
<item>Added a few more TODOs
<item>Added information on how to manually check for updates and also about
cron-apt. That way Tiger is not perceived as the only way to do automatic
update checks.
<item>Slightly rewrite of the section on executing a security updates due
to Jean-Marc Ranger comments.
<item>Added a note on Debian's installation (which will suggest the user
to execute a security update right after installation)
</list>

<sect1>Version 2.91 (january/february 2003)
<p>Changes by Javier Fernández-Sanguino Peña (me).
<list>
<item>Added a patch contributed by Frédéric Schütz.
<item>Added a few more references on capabilities thanks to Frédéric.
<item>Slight changes in the bind section adding a reference to BIND's 9
online documentation and proper references in the first area (Hi Pedro!)
<item>Fixed the changelog date - new year :-)
<item>Added a reference to Colin's articles for the TODOs.
<item>Removed reference to old ssh+chroot patches.
<item>More patches from Carlo Perassi.
<item>Typo fixes (recursive in Bind is recursion), pointed out by 
Maik Holtkamp.
</list>

<sect1>Version 2.9 (december 2002)
<p>Changes by Javier Fernández-Sanguino Peña (me).
<list>
<item>Reorganised the information on chroot (merged two sections, it didn't make much sense to have them separated)
<item>Added the notes on chrooting Apache provided by Alexandre Raitti.
<item>Applied patches contributed by Guillermo Jover.
</list>

<sect1>Version 2.8 (november 2002)
<p>Changes by Javier Fernández-Sanguino Peña (me).
<list>
<item>Applied patches from Carlo Perassi, fixes include: re-wrapping the
lines, url fixes, and fixed some FIXMEs
<item>Updated the contents of the Debian security team FAQ.
<item>Added a link to the Debian security team FAQ and the Debian Developer's
reference, the duplicated sections might (just might) be removed in the future.
<item>Fixed the hand-made auditing section with comments from Michal Zielinski.
<item>Added links to wordlists (contributed by Carlo Perassi)
<item>Fixed some typos (still many around).
<item>Fixed TDP links as suggested by John Summerfield.
</list>

<sect1>Version 2.7 (october 2002)
<p>Changes by Javier Fernández-Sanguino Peña (me).  Note: I still
have a lot of pending changes in my mailbox (which is currently
about 5 Mbs in size).
<list>
<item>Some typo fixes contributed by Tuyen Dinh, Bartek Golenko and 
Daniel K. Gebhart.
<item>Note regarding /dev/kmem rootkits contributed by Laurent Bonnaud 
<item>Fixed typos and FIXMEs contributed by Carlo Perassi.
</list>

<sect1>Version 2.6 (september 2002)
<p>Changes by Chris Tillman, tillman@voicetrak.com. 
<list>
<item>Changed around to improve grammar/spelling.
<item>s/host.deny/hosts.deny/ (1 place)
<item>Applied Larry Holish's patch (quite big, fixes a lot of FIXMEs)
</list>

<sect1>Version 2.5 (september 2002)
<p>Changes by Javier Fernández-Sanguino Peña (me). 
<list>
<item>Fixed minor typos submitted by Thiemo Nagel.
<item>Added a footnote suggested by Thiemo Nagel.
<item>Fixed an URL link.
</list>

<sect1>Version 2.5 (august 2002)

<p>Changes by Javier Fernández-Sanguino Peña (me). There were many
things waiting on my inbox (as far back as February) to be included,
so I'm going to tag this the <em>back from honeymoon</em> release :)

<list>

<item>Applied a patch contributed by Philipe Gaspar regarding the
Squid which also kills a FIXME.

<item>Yet another FAQ item regarding service banners taken from the
debian-security mailing list (thread "Telnet information" started 26th
July 2002).

<item>Added a note regarding use of CVE cross references in the
<em>How much time does the Debian security team...</em> FAQ item.


<item>Added a new section regarding ARP attacks contributed by Arnaud
"Arhuman" Assad.

<item>New FAQ item regarding dmesg and console login by the kernel. 

<item>Small tidbits of information to the signature-checking issues in
packages (it seems to not have gotten past beta release).

<item>New FAQ item regarding vulnerability assessment tools false
positives.

<item>Added new sections to the chapter that contains information on
package signatures and reorganised it as a new <em>Debian Security
Infrastructure</em> chapter.

<item>New FAQ item regarding Debian vs. other Linux distributions.

<item>New section on mail user agents with GPG/PGP functionality in the
security tools chapter.

<item>Clarified how to enable MD5 passwords in woody, added a pointer
to PAM as well as a note regarding the max definition in PAM.

<item>Added a new appendix on how to create chroot environments (after
fiddling a bit with makejail and fixing, as well, some of its bugs),
integrated duplicate information in all the appendix. 

<item>Added some more information regarding <PRGN>SSH</PRGN> chrooting and its
impact on secure file transfers.  Some information has been retrieved
from the debian-security mailing list (June 2002 thread: <em>secure
file transfers</em>).

<item>New sections on how to do automatic updates on Debian systems as
well as the caveats of using testing or unstable regarding security updates.

<item>New section regarding keeping up to date with security patches
in the <em>Before compromise</em> section as well as a new section
about the debian-security-announce mailing list.

<item>Added information on how to automatically generate strong passwords.

<item>New section regarding login of idle users.

<item>Reorganised the securing mail server section based on the
<em>Secure/hardened/minimal Debian (or "Why is the base system the way
it is?")</em> thread on the debian-security mailing list (May 2002).

<item>Reorganised the section on kernel network parameters, with
information provided in the debian-security mailing list (May 2002,
<em>syn flood attacked?</em> thread) and added a new FAQ item as well.

<item>New section on how to check users passwords and which packages
to install for this.

<item>New section on PPTP encryption with Microsoft clients discussed
in the debian-security mailing list (April 2002).

<item>Added a new section describing what problems are there when binding any 
given service to a specific IP address, this information was written based on 
the bugtraq mailing list in the thread: <em>Linux kernel 2.4 "weak end host" 
issue (previously discussed on debian-security as "arp problem")</em> (started 
on May 9th 2002 by Felix von Leitner).

<item>Added information on <prgn>ssh</prgn> protocol version 2.

<item>Added two subsections related to Apache secure configuration
(the things specific to Debian, that is).

<item>Added a new FAQ related to raw sockets, one related to /root, an
item related to users' groups and another one related to log and
configuration files permissions.

<item>Added a pointer to a bug in libpam-cracklib that might still be
open... (need to check)

<item>Added more information regarding forensics analysis (pending more 
information on packet inspection tools such as <prgn>tcpflow</prgn>).

<item>Changed the "what should I do regarding compromise" into a bullet
list and included some more stuff.

<item>Added some information on how to set up the Xscreensaver to lock
the screen automatically after the configured timeout.

<item>Added a note related to the utilities you should not install in
the system. Included a note regarding Perl and why it cannot be
easily removed in Debian. The idea came after reading Intersect's
documents regarding Linux hardening.

<item>Added information on lvm and journalling file systems, ext3
recommended. The information there might be too generic, however. 

<item>Added a link to the online text version (check).

<item>Added some more stuff to the information on firewalling the
local system, triggered by a comment made by Hubert Chan in the mailing list.

<item>Added more information on PAM limits and pointers to Kurt
Seifried's documents (related to a post by him to bugtraq on April 4th
2002 answering a person that had ``discovered'' a vulnerability in
Debian GNU/Linux related to resource starvation).

<item>As suggested by Julián Muñoz, provided more information on the
default Debian umask and what a user can access if he has been given a
shell in the system (scary, huh?)

<item>Included a note in the BIOS password section due to a comment
from Andreas Wohlfeld.

<item>Included patches provided by Alfred E. Heggestad fixing many of
the typos still present in the document.

<item>Added a pointer to the changelog in the Credits section since
most people who contribute are listed here (and not there).

<item>Added a few more notes to the chattr section and a new section
after installation talking about system snapshots. Both ideas were
contributed by Kurt Pomeroy.

<item>Added a new section after installation just to remind users to
change the boot-up sequence.

<item>Added some more TODO items provided by Korn Andras.

<item>Added a pointer to the NIST's guidelines on how to secure DNS
provided by Daniel Quinlan.

<item>Added a small paragraph regarding Debian's SSL certificates
infrastructure.

<item>Added Daniel Quinlan's suggestions regarding <prgn>ssh</prgn> 
authentication and exim's relay configuration.

<item>Added more information regarding securing bind including changes
suggested by Daniel Quinlan and an appendix with a script to make some of the
changes commented on in that section.

<item>Added a pointer to another item regarding Bind chrooting (needs to be 
merged).

<item>Added a one liner contributed by Cristian Ionescu-Idbohrn to
retrieve packages with tcpwrappers support.

<item>Added a little bit more info on Debian's default PAM setup.

<item>Included a FAQ question about using PAM to provide services without
shell accounts.

<item>Moved two FAQ items to another section and added a new FAQ
regarding attack detection (and compromised systems).

<item>Included information on how to set up a bridge firewall
(including a sample Appendix). Thanks go to Francois Bayar who sent
this to me in March.

<item>Added a FAQ regarding the syslogd's <em>MARK</em>
<em>heartbeat</em> from a question answered by Noah Meyerhans and
Alain Tesio in December 2001.

<item>Included information on buffer overflow protection as well as
some information on kernel patches.

<item>Added more information (and reorganised) the firewall
section. Updated the information regarding the iptables package and
the firewall generators available.

<item>Reorganized the information regarding log checking, moved
logcheck information from host intrusion detection to that section.

<item>Added some information on how to prepare a static package for
bind for chrooting (untested).

<item>Added a FAQ item regarding some specific servers/services 
(could be expanded with some of the
recommendations from the debian-security list).

<item>Added some information on RPC services (and when it's necessary).

<item>Added some more information on capabilities (and what lcap does). 
Is there any good documentation on this? I haven't found any documentation on 
my 2.4 kernel.

<item>Fixed some typos.

</list>

<sect1>Version 2.4
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Rewritten part of the BIOS section.
</list>

<sect1>Version 2.3
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Wrapped most file locations with the file tag.
<item>Fixed typo noticed by Edi Stojicevi.
<item>Slightly changed the remote audit tools section.
<item>Added some todo items.
<item>Added more information regarding printers and cups config file
(taken from a thread on debian-security).
<item>Added a patch submitted by Jesus Climent regarding access of
valid system users to Proftpd when configured as anonymous server.
<item>Small change on partition schemes for the special case of mail
servers.
<item>Added Hacking Linux Exposed to the books section.
<item>Fixed directory typo noticed by Eduardo Pérez Ureta.
<item>Fixed /etc/ssh typo in checklist noticed by Edi Stojicevi.
</list>
<sect1>Version 2.3
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Fixed location of dpkg conffile.
<item>Remove Alexander from contact information.
<item>Added alternate mail address.
<item>Fixed Alexander mail address (even if commented out).
<item>Fixed location of release keys (thanks to Pedro Zorzenon for pointing 
this out).
</list>
<sect1>Version 2.2
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Fixed typos, thanks to Jamin W. Collins.
<item>Added a reference to apt-extracttemplate manpage
(documents the APT::ExtractTemplate config).
<item>Added section about restricted SSH. Information based on that
posted by  Mark Janssen, Christian G. Warden and Emmanuel Lacour on
the debian-security mailing list.
<item>Added information on anti-virus software.
<item>Added a FAQ: su logs due to the cron running as root.
</list>
<sect1>Version 2.1
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Changed FIXME from lshell thanks to Oohara Yuuma.
<item>Added package to sXid and removed comment since it *is* available.
<item>Fixed a number of typos discovered by Oohara Yuuma.
<item>ACID is now available in Debian (in the acidlab package)
 thanks to Oohara Yuuma for noticing.
<item>Fixed LinuxSecurity links (thanks to Dave Wreski for telling).
</list>
<sect1>Version 2.0
<p>Changes by Javier Fernández-Sanguino Peña. I wanted to 
change to 2.0 when all the FIXMEs were, er, fixed but I ran out
of 1.9X numbers :(
<list>
<item>Converted the HOWTO into a Manual (now I can properly say RTFM)

<item>Added more information regarding tcp wrappers and Debian (now
many services are compiled with support for them so it's no longer
an <prgn>inetd</prgn> issue).

<item>Clarified the information on disabling services to make it more
consistent (rpc info still referred to update-rc.d)

<item>Added small note on lprng.

<item>Added some more info on compromised servers (still very rough)

<item>Fixed typos reported by Mark Bucciarelli.

<item>Added some more steps in password recovery to cover the cases
when the admin has set paranoid-mode=on.

<item>Added some information to set paranoid-mode=on when login in
console.

<item>New paragraph to introduce service configuration.

<item>Reorganised the <em>After installation</em> section so it is
more broken up into several issues and it's easier to read.

<item>Wrote information on how to set up firewalls with the standard
Debian 3.0 setup (iptables package).

<item>Small paragraph explaining why installing connected to the
Internet is not a good idea and how to avoid this using Debian tools.

<item>Small paragraph on timely patching referencing to IEEE paper.

<item>Appendix on how to set up a Debian snort box, based on what Vladimir
sent to the debian-security mailing list (September 3rd 2001)

<item>Information on how logcheck is set up in Debian and how it can be
used to set up HIDS.

<item>Information on user accounting and profile analysis.

<item>Included apt.conf configuration for read-only /usr copied from Olaf
Meeuwissen's post to the debian-security mailing list

<item>New section on VPN with some pointers and the packages available
in Debian (needs content on how to set up the VPNs and Debian-specific
issues), based on Jaroslaw Tabor's and Samuli Suonpaa's post to
debian-security.

<item>Small note regarding some programs to automatically build chroot jails

<item>New FAQ item regarding identd based on a discussion in the
debian-security mailing list (February 2002, started by Johannes Weiss).

<item>New FAQ item regarding <prgn>inetd</prgn> based on a discussion in the
debian-security mailing list (February 2002).

<item>Introduced note on rcconf in the "disabling services" section.

<item>Varied the approach regarding LKM, thanks to Philipe Gaspar 

<item>Added pointers to CERT documents and Counterpane resources
</list>

<sect1>Version 1.99
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Added a new FAQ item regarding time to fix security vulnerabilities.
<item>Reorganised FAQ sections.
<item>Started writing a section regarding firewalling in Debian GNU/Linux
(could be broadened a bit)
<item>Fixed typos sent by Matt Kraai
<item>Fixed DNS information
<item>Added information on whisker and nbtscan to the auditing section.
<item>Fixed some wrong URLs
</list>
<sect1>Version 1.98
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Added a new section regarding auditing using Debian GNU/Linux.
<item>Added info regarding finger daemon taken from the security mailing list.
</list>
<sect1>Version 1.97
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Fixed link for Linux Trustees
<item>Fixed typos (patches from Oohara Yuuma and Pedro Zorzenon)
</list>

<sect1>Version 1.96
<p>Changes by Javier Fernández-Sanguino Peña.
<list>

<item>Reorganized service installation and removal and added some new notes.

<item>Added some notes regarding using integrity checkers as intrusion
detection tools.

<item>Added a chapter regarding package signatures.

</list>

<sect1>Version 1.95
<p>Changes by Javier Fernández-Sanguino Peña.
<list>

<item>Added notes regarding Squid security sent by Philipe Gaspar.

<item>Fixed rootkit links thanks to Philipe Gaspar.

</list>

<sect1>Version 1.94
<p>Changes by Javier Fernández-Sanguino Peña.
<list>

<item>Added some notes regarding Apache and Lpr/lpng.

<item>Added some information regarding noexec and read-only partitions.

<item>Rewrote how users can help in Debian security issues (FAQ item).
</list>

<sect1>Version 1.93
<p>Changes by Javier Fernández-Sanguino Peña.
<list>

<item>Fixed location of mail program.

<item>Added some new items to the FAQ.
</list>

<sect1>Version 1.92
<p>Changes by Javier Fernández-Sanguino Peña.
<list>

<item>Added a small section on how Debian handles security

<item>Clarified MD5 passwords (thanks to `rocky')

<item>Added some more information regarding harden-X from Stephen van Egmond

<item>Added some new items to the FAQ

</list>

<sect1>Version 1.91
<p>Changes by Javier Fernández-Sanguino Peña.
<list>

<item>Added some forensics information sent by Yotam Rubin.

<item>Added information on how to build a honeynet using Debian GNU/Linux.

<item>Added some more TODOS.

<item>Fixed more typos (thanks Yotam!)

</list>

<sect1>Version 1.9
<p>Changes by Javier Fernández-Sanguino Peña.
<list>

<item>Added patch to fix misspellings and some new information (contributed
by Yotam Rubin)

<item>Added references to other online (and offline) documentation both in a 
section (see <ref id="references">) by itself and inline in some sections.

<item>Added some information on configuring Bind options to restrict
access to the DNS server.

<item>Added information on how to automatically harden a Debian system
(regarding the harden package and bastille).

<item>Removed some done TODOs and added some new ones.

</list>

<sect1>Version 1.8
<p>Changes by Javier Fernández-Sanguino Peña.
<list>

<item>Added the default user/group list provided by Joey Hess to the
debian-security mailing list.

<item>Added information on LKM root-kits (<ref id="LKM">)
 contributed by Philipe Gaspar.

<item>Added information on Proftp contributed by Emmanuel Lacour. 

<item>Recovered the checklist Appendix from Era Eriksson.

<item>Added some new TODO items and removed other fixed ones.

<item>Manually included Era's patches since they were not all included in 
the previous version.

</list>
<sect1>Version 1.7
<p>Changes by Era Eriksson.
<list>
<item>Typo fixes and wording changes
</list>
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Minor changes to tags in order to keep on removing the tt tags
and substitute prgn/package tags for them.
</list>

<sect1>Version 1.6 
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Added pointer to document as published in the DDP (should
supersede the original in the near future) 
<item>Started a mini-FAQ
(should be expanded) with some questions recovered from my mailbox.
<item>Added general information to consider while securing.
<item>Added a paragraph regarding local (incoming) mail delivery.
<item>Added some pointers to more information.  
<item>Added information regarding the printing service.  
<item>Added a security hardening checklist.  
<item>Reorganized NIS and RPC information.
<item>Added some notes taken while reading this document on my new
Visor :) 
<item>Fixed some badly formatted lines.  
<item>Fixed some typos.  
<item>Added a Genius/Paranoia idea contributed by Gaby
Schilders.
</list>
<sect1>Version 1.5 

<p>Changes by Josip Rodin and Javier Fernández-Sanguino Peña.

<list>
<item>Added paragraphs related to BIND and some FIXMEs.  <!-- Removed
this because I found no evidence for it in the diffs. // era Rewrote
style in order to make it more formal.  -->
</list>
<sect1>Version 1.4
    <p>
    <list>
    <item>Small setuid check paragraph <item>Various minor cleanups
    <item>Found out how to use <tt>sgml2txt -f</tt> for the txt
    version</item>
    </list>
<sect1>Version 1.3
    <p>
    <list>
    <item>Added a security update after installation paragraph
    <item>Added a proftpd paragraph 
    <item>This time really wrote something about XDM, sorry for last time
    </list>
<sect1>Version 1.2
    <p>
    <list>
    <item>Lots of grammar corrections by James Treacy, new XDM
    paragraph
    </list>
<sect1>Version 1.1
    <p>
    <list>
    <item>Typo fixes, miscellaneous additions
    </list>
<sect1>Version 1.0
    <p>
    <list>
    <item>Initial release
    </list>



<sect>Credits and Thanks!
<p>
<list>
<item>Alexander Reelsen wrote the original document. 

<item>Javier Fernández-Sanguino added more info to the original doc.

<item>Robert van der Meulen provided the quota paragraphs and many good ideas.

<item>Ethan Benson corrected the PAM paragraph and had some good ideas.

<item>Dariusz Puchalak contributed some information to several
chapters.

<item>Gaby Schilders contributed a nice Genius/Paranoia idea.

<item>Era Eriksson smoothed out the language in a lot of
places and contributed the checklist appendix.

<item>Philipe Gaspar wrote the LKM information.

<item>Yotam Rubin contributed fixes for many typos as well
as information regarding bind versions and md5 passwords.

<item>All the people who made suggestions for improvement that
(eventually) got included here (see <ref id="changelog">)

<item>(Alexander) All the folks who encouraged me to write this HOWTO
(which was later turned into a Manual).

<item>The whole Debian project.
</list>



<chapt>Before you begin 


<sect>What do you want this system for?

<p>Securing Debian is not very different from securing any other
system; in order to do it properly, you must first decide what you
intend to do with it. After this, you will have to consider that the
following tasks need to be taken care of if you want a really secure
system.  

<p>You will find that this manual is written from the bottom
up, that is, you will read some information on tasks to do before,
during and after you install your Debian system. The
tasks can also be thought of as:

<list>

<item>Decide which services you need and limit your system to those.
This includes deactivating/uninstalling unneeded services, and adding
firewall-like filters, or tcpwrappers.  

<item>Limit users and permissions in your system. 

<item>Harden offered services so that, in
the event of a service compromise, the impact to your system is
minimized.  

<item>Use appropriate tools to guarantee that unauthorized
use is detected so that you can take appropriate measures.

</list>

<sect id="references">Be aware of general security problems

<p>The following manual does not (usually) go into the details on why
some issues are considered security risks. However, you might want to
have a better background regarding general UNIX and (specific) Linux
security. Take some time to read over security related documents in
order to make informed decisions when you are encountered with
different choices. Debian GNU/Linux is based on the Linux kernel, so
much of the information regarding Linux, as well as from other
distributions and general UNIX security also apply to it (even if the
tools used, or the programs available, differ).

<p>Some useful documents include:

<list>

<item>The <url name="Linux Security HOWTO"
id="http://www.tldp.org/HOWTO/Security-HOWTO/">
(also available at <url id="http://www.linuxsecurity.com/docs/LDP/Security-HOWTO.html" name="LinuxSecurity">) is one of the
best references regarding general Linux Security.

<item>The <url name="Security Quick-Start HOWTO for Linux" 
id="http://www.tldp.org/HOWTO/Security-Quickstart-HOWTO/">
is also a very good starting point for novice users (both to Linux
and security).

<item>The <url id="http://seifried.org/lasg/" name="Linux Security
Administrator's Guide"> (provided in Debian through the
<package>lasg</package> package) is a complete guide that touches
all the issues related to security in Linux, from kernel security to
VPNs. Note that it has not been updated since 2001, but some information
is still relevant.
<footnote>
At a given time it was superseded by the 
<url id="http://seifried.org/lskb" name="Linux Security Knowledge Base">. 
This documentation is also provided in
Debian through the <package>lskb</package> package. Now it's back
as the <em>Lasg</em> again.
</footnote>

<item> Kurt Seifried's <url
id="http://seifried.org/security/os/linux/20020324-securing-linux-step-by-step.html"
name="Securing Linux Step by Step">.

<item>In <url name="Securing and Optimizing Linux: RedHat Edition"
id="http://www.tldp.org/links/p_books.html#securing_linux"> you
can find a similar document to this manual but related to RedHat, some
of the issues are not distribution-specific and also apply to Debian.

<item>IntersectAlliance has published some documents that can be used
as reference cards on how to harden linux servers (and their
services), the documents are available at <url
id="http://www.intersectalliance.com/projects/index.html" name="their
site">.

<item>For network administrators, a good reference for building a
 secure network is the <url name="Securing your Domain HOWTO"
 id="http://www.linuxsecurity.com/docs/LDP/Securing-Domain-HOWTO/">.


<item>If you want to evaluate the programs you are 
going to use (or want to build up some new ones) you 
should read the <url name="Secure Programs HOWTO"
id="http://www.tldp.org/HOWTO/Secure-Programs-HOWTO/"> (master copy
is available at 
<url id="http://www.dwheeler.com/secure-programs/">, it includes slides
and talks from the author, David Wheeler)

<item>If you are considering installing Firewall capabilities, you
should read the <url name="Firewall HOWTO"
id="http://www.tldp.org/HOWTO/Firewall-HOWTO.html"> and the <url
name="IPCHAINS HOWTO"
id="http://www.tldp.org/HOWTO/IPCHAINS-HOWTO.html"> (for kernels
previous to 2.4).

<item>Finally, a good card to keep handy is the
<url name="Linux Security ReferenceCard"
 id="http://www.linuxsecurity.com/docs/QuickRefCard.pdf">

</list>

<p>In any case, there is more information regarding the services
explained here (NFS, NIS, SMB...) in many of the HOWTOs of the <url
name="The Linux Documentation Project" id="http://www.tldp.org/">. Some of 
these documents speak on the security side of a given service, so be sure to
take a look there too.

<p>The HOWTO documents from the Linux Documentation Project are
available in Debian GNU/Linux through the installation of the
<package>doc-linux-text</package> (text version) or
<package>doc-linux-html</package> (html version). After installation
these documents will be available at the
<file>/usr/share/doc/HOWTO/en-txt</file> and
<file>/usr/share/doc/HOWTO/en-html</file> directories, respectively.

<p>Other recommended Linux books:

<list>

<item>Maximum Linux Security : A Hacker's Guide to Protecting Your Linux
  Server and Network.  Anonymous. Paperback - 829 pages. Sams Publishing.
  ISBN: 0672313413. July 1999.

<item>Linux Security By John S. Flowers. New Riders; ISBN: 0735700354.
March 1999

<item><url id="http://www.linux.org/books/ISBN_0072127732.html" 
name="Hacking Linux Exposed"> By Brian Hatch. McGraw-Hill Higher Education.
ISBN 0072127732. April, 2001

</list>

<p>Other books (which might be related to general issues
regarding UNIX and security and not Linux specific):

<list>

<item><url id="http://www.ora.com/catalog/puis/noframes.html"
        name="Practical Unix and Internet Security (2nd Edition)">
        Garfinkel, Simpson, and Spafford, Gene; O'Reilly Associates;
        ISBN 0-56592-148-8; 1004pp; 1996.

<item>Firewalls and Internet Security Cheswick, William R. and Bellovin,
        Steven M.; Addison-Wesley; 1994; ISBN 0-201-63357-4; 320pp.

</list>

<p>Some useful Web sites to keep up to date regarding security:

<list>

<item><url name="NIST Security Guidelines"
id="http://csrc.nist.gov/fasp/index.html">.

<item><url name="Security Focus" id="http://www.securityfocus.com">
	the server that hosts the Bugtraq vulnerability database and
	list, and provides general security information, news and
	reports.

<item> <url name="Linux Security"
	id="http://www.linuxsecurity.com/">. General information
	regarding Linux security (tools, news...). Most useful is the
	<url name="main documentation"
	id="http://www.linuxsecurity.com/resources/documentation-1.html">
	page.

<item> <url name="Linux firewall and security site" id="
	http://www.linux-firewall-tools.com/linux/">. General
	information regarding Linux firewalls and tools to control and
	administrate them.

</list>

<sect>How does Debian handle security?
<p>Just so you have a general overview of security in Debian GNU/Linux
you should take note of the different issues that Debian tackles in
order to provide an overall secure system:

<list>

<item>Debian problems are always handled openly, even security
related. Security issues are discussed openly on the debian-security
mailing list. Debian Security Advisories are sent to public mailing
lists (both internal and external) and are published on the public
server. As the <url name="Debian Social Contract"
id="http://www.debian.org/social_contract"> states:

<p><em>
We Won't Hide Problems
</em></p><p><em>
We  will  keep our entire bug-report database open for public view
at  all  times.  Reports  that users file on-line will immediately
become visible to others.
</em></p>

<item>Debian follows security issues closely. The security team 
checks many security related sources, the most important being
<url name="Bugtraq" id="http://www.securityfocus.com/cgi-bin/vulns.pl">,
on the lookout for packages with security issues that might be
included in Debian.

<item>Security updates are the first priority. When a security problem
arises in a Debian package, the security update is prepared as fast
as possible and distributed for our stable and unstable releases, including
all architectures.

<item>Information regarding security is centralized in a single point,
<url id="http://security.debian.org/">.

<item>Debian is always trying to improve the overall security of the
distribution for starting new projects, like automatic package signature 
verification mechanisms.

<item>Debian provides a number of useful security related tools
for system administration and monitoring. Developers try to tightly
integrate these tools with the distribution in order to make them a better
suite to enforce local security policies. Tools include: integrity checkers, 
auditing tools, hardening tools, firewall tools, intrusion detection tools,
etc.

<item>Package maintainers are aware of security issues. This leads
to many "secure by default" service installations which might put some
limits, sometimes, on its normal use. However, Debian does try to balance
security issues and ease of administration, systems are not installed
de-activated, for example, like the BSD family distributions. In any
case, some special security issues, like <tt>setuid</tt> programs, are part of
the <url id="http://www.debian.org/doc/debian-policy/" name="Debian Policy">.

</list>

<p>This document as well, tries to enforce a better 
distribution security-wise, by publishing 
security information specific to Debian which complements other 
information-security documents related to the tools used by Debian
or the operating system itself (see <ref id="references">.


<chapt>Before and during the installation


<sect id="bios-passwd">Choose a BIOS password
<p>
Before you install any operating system on your computer, set up a
BIOS password. After installation (once you have enabled bootup
from the hard disk) you should go back to the BIOS and change the 
boot sequence to disable booting from floppy, cdrom and other 
devices that shouldn't boot.  Otherwise a cracker only needs 
physical access and a boot disk to access your entire system.

<p>Disabling booting unless a password is supplied is even better. This can be 
very effective if you run a server, because it is not rebooted very often. The 
downside to this tactic is that rebooting requires human intervention which 
can cause problems if the machine is not easily accessible.

<p>Note: many BIOSes have well known default master passwords, and
applications also exist to retrieve the passwords from the
BIOS. Corollary: don't depend on this measure to secure console access
to system.

<sect>Partitioning the system

<sect1>Choose an intelligent partition scheme
<p>
An intelligent partition scheme depends on how the machine is
used.  A good rule of thumb is to be fairly liberal with your
partitions and to pay attention to the following factors:

<list>
<item>Any directory tree which a user has write permissions to, such
as e.g. <file>/home</file> and <file>/tmp</file>, should be on
a separate partition.  This reduces the risk of a user DoS by 
filling up your "/" mount point and
rendering the system unusable. (Note: this is not strictly true, since
there is always some space reserved for root which a normal user cannot fill.)

<item>Any partition which can fluctuate, e.g. <file>/var</file>
(especially <file>/var/log</file>) should also be on a separate
partition.  On a Debian system, you should create <file>/var</file> a
little bit bigger than on other systems, because downloaded packages (the apt
cache) are stored in <file>/var/cache/apt/archives</file>. 

<item>Any partition where you want to install non-distribution
software should be on a separate partition.  According to the File
Hierarchy Standard, this is <file>/opt</file> or <file>/usr/local</file>.
If these are separate partitions, they will not be erased if you 
(have to) reinstall Debian itself.

<item>From a security point of view, it makes sense to try to move
static data to its own partition, and then mount that partition
read-only. Better yet, put the data on read-only media. See below for
more details.
</list>

<p>In the case of a mail server it is important to have a separate
partition for the mail spool. Remote users (either knowingly or
unknowingly) can fill the mail spool (<file>/var/mail</file> and/or
<file>/var/spool/mail</file>). If the spool is on a separate
partition, this situation will not render the system
unusable. Otherwise (if the spool directory is on the same
partition as <file>/var</file>) the system might have important
problems: log entries will not be created, packages can not be
installed, and some programs might even have problems starting up (if
they use <file>/var/run</file>).

<p>Also, for partitions in which you cannot be sure of the needed
space, installing Logical Volume Manager
(<package>lvm-common</package> and the needed binaries for your
kernel, this might be either <package>lvm10</package>,
<package>lvm6</package>, or <package>lvm5</package>). Using
<tt>lvm</tt>, you can create volume groups that expand multiple
physical volumes.

<sect2>Selecting the appropriate file systems

<p>During the system partitioning you also have to decide which
file system you want to use. The default file system selected in the
Debian installation for Linux partitions is <tt>ext2</tt>. However, it
is recommended you switch to a journalling file system, such as
<tt>ext3</tt>, <tt>reiserfs</tt>, <tt>jfs</tt> or <tt>xfs</tt>, to
minimize the problems derived from a system crash in the following
cases:

<list>

<item>for laptops in all the file systems installed. That way if you
run out of battery unexpectedly or the system freezes due to a
hardware issue (such as X configuration which is somewhat common) you
will be less likely to lose data during a hardware reboot.

<item>for production systems which store large amounts of data (like
mail servers, ftp servers, network file systems...) it is recommended
on these partitions. That way, in the event of a system crash, the
server will take less time to recover and check the file systems, and
data loss will be less likely.

</list>

<p>Leaving aside the performance issues regarding journalling
file systems (since this sometimes can turn into a religious war), it
is usually better to use the <tt>ext3</tt> file system. The reason for
this is that it is backwards compatible with <tt>ext2</tt>, so if
there are any issues with the journalling you can disable it and still
have a working file system. Also, if you need to recover the system
with a bootdisk (or CDROM) you do not need a custom kernel. If the
kernel is 2.4 <tt>ext3</tt> support is already available, if it
is a 2.2 kernel you will be able to boot the file system even if you
lose journalling capabilities.  If you are using other journalling
file systems you will find that you might not be able to recover unless
you have a 2.4 kernel with the needed modules built-in.
If you are stuck with a 2.2 kernel in the rescue disk it might even be
more difficult to have it access <tt>reiserfs</tt> or <tt>xfs</tt>.

<p>In any case, data integrity might be better under <tt>ext3</tt> since it 
does file-data journalling while others do only meta-data journalling, see
<url id="http://lwn.net/2001/0802/a/ext3-modes.php3">.


<sect>Do not plug to the Internet until ready

<p>The system should not be immediately connected to the Internet
during installation. This could sound stupid but network installation
is a common method. Since the system will install and activate
services immediately, if the system is connected to the Internet and
the services are not properly configured you are opening it to attack.

<p>Also note that some services might have security
vulnerabilities not fixed in the packages you are using for
installation. This is usually true if you are installing from old
media (like CD-ROMs). In this case, the system could even be compromised
before you finish installation!

<p>Since Debian installation and upgrades can be done over the
Internet you might think it is a good idea to use this feature on
installation. If the system is going to be directly connected to the
Internet (and not protected by a firewall or NAT), it is best to
install without connection to the Internet, using a local packages
mirror for both the Debian package sources and the security
updates. You can set up package mirrors by using another system
connected to the Internet with Debian-specific tools (if it's a Debian
system) like <package>apt-move</package> or
<package>apt-proxy</package>, or other common mirroring tools, to
provide the archive to the installed system. If you cannot do this,
you can set up firewall rules to limit access to the system while doing
the update (see <ref id="fw-security-update">).

<sect>Set a root password
<p>
Setting a good root password is the most basic requirement for having
a secure system. See <manref section="1" name="passwd"> for some hints
on how to create good passwords. You can also use an automatic
password generation program to do this for you (see <ref
id="user-pwgen">).

<p>FIXME: Add pointers to information about good passwords.


<sect>Activate shadow passwords and MD5 passwords
<p>
At the end of the installation, you will be asked if shadow passwords
should be enabled. Answer yes to this question, so passwords will be
kept in the file <file>/etc/shadow</file>. Only the root user and the
group shadow have read access to this file, so no users will be able
to grab a copy of this file in order to run a password cracker against
it. You can switch between shadow passwords and normal passwords at
any time by using <tt>shadowconfig</tt>.


<p>Read more on Shadow passwords in
<url
name="Shadow Password"
id="http://www.tldp.org/HOWTO/Shadow-Password-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/Shadow-Password.txt.gz</file>).

<p>Furthermore, you are queried during installation whether you want
to use MD5 hashed passwords. This is generally a very good idea since
it allows longer passwords and better encryption. MD5 allows for
passwords longer than 8 characters. This, if used wisely, can make it
more difficult for attackers to brute-force the system's
passwords. Regarding MD5 passwords, this is the default option when
installing the latest <package>password</package> package. You can change this
anytime after installation by doing <prgn>dpkg-reconfigure -plow
passwd</prgn>. You can recognize md5 passwords in the
<file>/etc/shadow</file> file by their $1$ prefix.

<p>This, as a matter of fact, modifies all files under
<file>/etc/pam.d</file> by substituting the password line and include
md5 in it:
<example>
      password required pam_unix.so md5 nullok obscure min=6 max=16
</example>
<p>If <tt>max</tt> is not set over 8 the change will not be useful at
all. For more information on this read <ref id="auth-pam">.

<p>Note: the default configuration in Debian, even when activating MD5
passwords, does not modify the previously set <tt>max</tt> value.

<sect>Run the minimum number of services required

<p>Services are programmes such as ftp servers and web servers. Since
they have to be <em>listening</em> for incoming connections that
request the service, external computers can connect to yours. Services
are sometimes vulnerable (i.e. can be compromised under a given
attack) and are hence a security risk.

<p>You should not install services which are not needed on your
machine. Every installed service might introduce new, perhaps not
obvious (or known), security holes on your computer.

<p>As you may already know, when you install a given service the default 
behavior is to activate it. In a default Debian installation, with no services 
installed, the footprint of running services is quite low and it's even lower 
when talking about services offered to the network. The footprint in Debian 
2.1 wasn't as tight as in Debian 2.2 (some <prgn>inetd</prgn> services were 
enabled by default) and in Debian 2.2 the rpc portmapper is enabled upon 
installation. Rpc is installed by default because it is needed for many 
services, for example NFS, to run on a given system. It can be easily 
removed, however, see <ref id="disableserv"> on how to disable it.

<p>When you install a new network-related service (daemon) in your
Debian GNU/Linux system it can be enabled in two ways: through the
<prgn>inetd</prgn> superdaemon (i.e. a line will be added to
<file>/etc/inetd.conf</file>) or through a standalone program that
binds itself to your network interfaces. Standalone programs are
controlled through the <file>/etc/init.d</file> files, which are
called at boot time through the SysV mechanism (or an alternative one)
by using symlinks in <file>/etc/rc?.d/*</file> (for more information
on how this is done read
<file>/usr/share/doc/sysvinit/README.runlevels.gz</file>).

<p>If you want to keep some services but use them rarely,
use the update-commands, e.g. <prgn>update-inetd</prgn> and 
<prgn>update-rc.d</prgn> to remove them from the startup process.


<sect1 id="disableserv">Disabling daemon services

<p>Disabling a daemon service is quite simple. There are different
methods:
<list>

<item>remove links from <file>/etc/rc${runlevel}.d/</file> or rename
the links (so that they do not begin with 'S')

<item>move the script file (<file>/etc/init.d/_service_name_</file>)
to another name (for example <file>/etc/init.d/OFF._service_name_</file>)

<item>remove the execute permission from the
<file>/etc/init.d/_service_name_</file> file.


<item>edit the <file>/etc/init.d/_service_name_</file> script to
have it stop immediately.

</list>

<p>You can remove the links from <file>/etc/rc${runlevel}.d/</file> manually or
using <tt>update-rc.d</tt> (see <manref section="8"
name="update-rc.d">). For example, you can disable a service from
executing in the multi-user runlevels by doing:

<example>
  update-rc.d stop XX 2 3 4 5 .
</example>

<p>Please note that, if you are <em>not</em> using
<package>file-rc</package>, <tt>update-rc.d -f _service_ remove</tt>
will not work properly, since <em>all</em> links are removed, upon
re-installation or upgrade of the package these links will be
re-generated (probably not what you wanted). If you think this is not
intuitive you are probably right (see <url
id="http://bugs.debian.org/67095" name="Bug 67095">). From the
manpage:

<example>
  If any files /etc/rcrunlevel.d/[SK]??name already exist then
  update-rc.d does nothing.  This is so that the system administrator 
  can rearrange the  links,  provided that  they  leave  at  least one
  link remaining, without having their configuration overwritten.
</example>

<p>If you are using <package>file-rc</package> all the information
regarding services bootup is handled by a common configuration file
and is maintained even if packages are removed from the system.

<p>You can use the TUI (Text User Interface) provided by
<package>rcconf</package> to do all these changes easily
(<prgn>rcconf</prgn> works both for <package>file-rc</package> 
and normal System V runlevels).

<p>Other (not recommended) methods of disabling services are: 
<tt>chmod 644 /etc/init.d/daemon</tt> (but that gives an error message when 
booting), or modifying the <file>/etc/init.d/daemon</file> script (by adding 
an <prgn>exit 0</prgn> line at the beginning or commenting out the 
<tt>start-stop-daemon</tt> part in it). Since <file>init.d</file> files are 
config files, they will not get overwritten upon upgrade.

<p>Unfortunately, unlike other (UNIX) operating systems, services in
Debian cannot be disabled by modifying files in
<file>/etc/default/_servicename_</file>.

<p>FIXME: Add more information on handling daemons using file-rc

<sect1 id="inetd">Disabling <prgn>inetd</prgn> services
<p>
You should stop all unneeded services on your system, like
<prgn>echo, chargen, discard, daytime, time, talk, ntalk</prgn> and 
r-services (<prgn>rsh, rlogin</prgn> and <prgn>rcp</prgn>) which are
considered HIGHLY insecure (use <prgn>ssh</prgn> instead). 
After disabling those, you should check if you really need
the <prgn>inetd</prgn> daemon.  Many people prefer to use daemons instead of
calling services via <prgn>inetd</prgn>. Denial of Service possibilities exist
against <prgn>inetd</prgn>, which can increase the machine's load tremendously. If
you still want to run some kind of <prgn>inetd</prgn> service, switch to a more
configurable inet daemon like <prgn>xinetd</prgn> or <prgn>rlinetd</prgn>.

<p>You can disable services by editing <file>/etc/inetd.conf</file> 
directly, but Debian provides a better alternative: <tt>update-inetd</tt> 
(which comments the services in a way that it can easily be turned on again). 
You could remove the <prgn>telnet</prgn> daemon by executing this commands to 
change the config file and to restart the daemon (in this case the 
<prgn>telnet</prgn> service is disabled):

<example>
  /usr/sbin/update-inetd --disable telnet
</example>
<!-- # /etc/init.d/inetd restart Not needed since the manpage says update-inetd
sends a SIGHUP, commented out as suggested by Dariusz Puchalak -->

<p>If you do want services listening, but do not want to have them listen on 
all IP addresses of your host, you might want to use an undocumented feature 
on <prgn>inetd</prgn>. <!-- FIXME write the information sent by Alexander to 
the debian-security mailing list -->. Or use an alternate <prgn>inetd</prgn> 
daemon like <prgn>xinetd</prgn>.

<sect>Install the minimum amount of software required

<p>Debian comes with <em>a lot</em> of software, for example the
Debian 3.0 <em>woody</em> release includes almost 6 CD-ROMs of
software and thousands of packages. With so much software, and even if
the base system installation is quite reduced
<footnote>For example, in Debian woody it is around 40Mbs, try this:
<example>
  $ size=0
  $ for i in `grep -A 1 -B 1 "^Section: base" /var/lib/dpkg/available |
  grep -A 2 "^Priority: required" |grep "^Installed-Size" |cut -d : -f 2
  `; do size=$(($size+$i)); done
  $ echo $size
  34234
</example>
</footnote>
you might get carried away and install more than is really needed
for your system.

<p>Since you already know what the system is for (don't you?) you
should only install software that is really needed for it to work. Any
unnecessary tool that is installed might be used by a user that wants
to compromise the system or by an external intruder that has gotten
shell access (or remote code execution through an exploitable
service).

<p>The presence, for example, of development utilities (a C compiler) or 
interpreted languages (such as <prgn>perl</prgn> - but see below -, 
<prgn>python</prgn>, <prgn>tcl</prgn>...) may help an attacker compromise the 
system even further:

<list>
<item>allowing him to do privilege escalation. It's easier, for
example, to run local exploits in the system if there is a debugger
and compiler ready to compile and test them!

<item>providing tools that could help the attacker to use the
compromised system as a <em>base of attack</em> against other systems
<footnote>
Many intrusions are made just to get access to resources to do
illegitimate activity (denial of service attacks, spam, rogue ftp
servers, dns pollution...) rather than to obtain confidential
data from the compromised system.
</footnote>

</list>

<p>Of course, an intruder with local shell access can download his own
set of tools and execute them, and even the shell itself can be used
to make complex programs. Removing unnecesary software will not help
<em>prevent</em> the problem but will make it slightly more difficult
for an attacker to proceed (and some might give up in this situation
looking for easier targets). So, if you leave tools in a production
system that could be used to remotely attack systems (see <ref
id="vuln-asses">) you can expect an intruder to use them too if
available.

<sect1>Removing Perl

<p>You must take into account that removing <prgn>perl</prgn> might not be too 
easy (as a matter of fact it can be quite difficult) in a Debian system since 
it is used by many system utilities. Also, the <package>perl-base</package> is 
<em>Priority: required</em> (that about says it all). It's still doable, but 
you will not be able to run any <prgn>perl</prgn> application in the system; 
you will also have to fool the package management system to think that the
<package>perl-base</package> is installed even if it's not. <footnote>You can 
make (on another system) a dummy package with <package>equivs</package>
</footnote>

<p>Which utilities use <prgn>perl</prgn>? You can see for yourself:

<example>
  $ for i in /bin/* /sbin/* /usr/bin/* /usr/sbin/*; do [ -f $i ] && {
  type=`file $i | grep -il perl`; [ -n "$type" ] && echo $i; }; done
</example>

<p>These include the following utilities in packages with priority
<em>required</em> or <em>important</em>:

<list>
<item><file>/usr/bin/chkdupexe</file> of package
<package>util-linux</package>.

<item><file>/usr/bin/replay</file> of package
<package>bsdutils</package>.

<item><file>/usr/sbin/cleanup-info</file> of package
<package>dpkg</package>.

<item><file>/usr/sbin/dpkg-divert</file> of package
<package>dpkg</package>.

<item><file>/usr/sbin/dpkg-statoverride</file> of package
<package>dpkg</package>.

<item><file>/usr/sbin/install-info</file> of package
<package>dpkg</package>.

<item><file>/usr/sbin/update-alternatives</file> of package
<package>dpkg</package>.

<item><file>/usr/sbin/update-rc.d</file> of package
<package>sysvinit</package>.

<item><file>/usr/bin/grog</file> of package
<package>groff-base</package>.

<item><file>/usr/sbin/adduser</file> of package
<package>adduser</package>.

<item><file>/usr/sbin/debconf-show</file> of package
<package>debconf</package>.

<item><file>/usr/sbin/deluser</file> of package
<package>adduser</package>.

<item><file>/usr/sbin/dpkg-preconfigure</file> of package
<package>debconf</package>.

<item><file>/usr/sbin/dpkg-reconfigure</file> of package
<package>debconf</package>.

<item><file>/usr/sbin/exigrep</file> of package
<package>exim</package>.

<item><file>/usr/sbin/eximconfig</file> of package
<package>exim</package>.

<item><file>/usr/sbin/eximstats</file> of package
<package>exim</package>.

<item><file>/usr/sbin/exim-upgrade-to-r3</file> of package
<package>exim</package>.

<item><file>/usr/sbin/exiqsumm</file> of package
<package>exim</package>.

<item><file>/usr/sbin/keytab-lilo</file> of package
<package>lilo</package>.

<item><file>/usr/sbin/liloconfig</file> of package
<package>lilo</package>.

<item><file>/usr/sbin/lilo_find_mbr</file> of package
<package>lilo</package>.

<item><file>/usr/sbin/syslogd-listfiles</file> of package
<package>sysklogd</package>.

<item><file>/usr/sbin/syslog-facility</file> of package
<package>sysklogd</package>.

<item><file>/usr/sbin/update-inetd</file> of package
<package>netbase</package>.

</list>

<p>So, without Perl and, unless you remake these utilities in shell
script, you will probably not be able to manage any packages (so you
will not be able to upgrade the system, which is <em>not a Good
Thing</em>).

<p>If you are determined to remove Perl from the Debian base system,
and you have spare time, submit bug reports to the previous packages
including (as a patch) replacements for the utilities above written in
shell script.

<sect>Read the debian security mailing lists

<p>It is never wrong to take a look at either the debian-security-announce 
mailing list, where advisories and fixes to released packages are announced by 
the Debian security team, or at 
<url id="mailto:debian-security@lists.debian.org">, where you can participate 
in discussions about things related to Debian security.

<p>In order to receive important security update alerts, send an email
to <url name="debian-security-announce-request@lists.debian.org"
id="mailto:debian-security-announce-request@lists.debian.org"> with
the word "subscribe" in the subject line.  You can also subscribe to
this moderated email list via the web page at
<url name="http://www.debian.org/MailingLists/subscribe"
id="http://www.debian.org/MailingLists/subscribe">

<p>This mailing list has very low volume, and by subscribing to it you
will be immediately alerted of security updates for the Debian
distribution.  This allows you to quickly download new packages with
security bug fixes, which is very important in maintaining a secure
system.  (See <ref id="security-update"> for details on how to do this.)




<chapt>After Installation

<p>Once the system is installed you can still do more to secure the system;
some of the steps described in this chapter can be taken. Of course
this really depends on your setup but for physical access prevention
you should read <ref id="bios-boot">,<ref id="lilo-passwd">,<ref
id="kernel-root-prompt">, <ref id="floppy-boot">, <ref
id="restrict-console-login">, and <ref id="restrict-reboots">.

<p>Before connecting to any network, especially if it's a public one
you should, at the very least, execute a security update (see 
<ref id="security-update">). Optionally, you could take a snapshot of your
system (see <ref id="snapshot">).

<sect id="bios-boot">Change the BIOS (again)

<p>Remember <ref id="bios-passwd">? Well, then you should now, once
you do not need to boot from removable media, to change the default
BIOS setup so that it <em>only</em> boots from the hard drive. Make
sure you will not lose the BIOS password, otherwise, in the event of a
hard disk failure you will not be able to return to the BIOS and
change the setup so you can recover it using, for example, a CD-ROM.

<p>Another less secure but more convenient way is to change the
setup to have the system boot up from the hard disk and, if it fails,
try removable media. By the way, this is often done because
most people don't use the BIOS password that often; it's easily forgotten.

<sect id="lilo-passwd">Set a LILO or GRUB password
<p>
Anybody can easily get a root-shell and change your passwords by
entering <tt>&lt;name-of-your-bootimage&gt; init=/bin/sh</tt> at the boot
prompt. After changing the passwords and rebooting the system, the
person has unlimited root-access and can do anything he/she wants to the
system.  After this procedure you will not have root access to your
system, as you do not know the root password.
<p>
To make sure that this cannot happen, you should set a password for
the boot loader. You can choose between a global password or a
password for a certain image.
<p>
For LILO you need to edit the config file <file>/etc/lilo.conf</file> and add a
<tt>password</tt> and <tt>restricted</tt> line as in the example below.

<example>
  image=/boot/2.2.14-vmlinuz
     label=Linux
     read-only
     password=hackme
     restricted
</example>

<p>
When done, rerun lilo.  Omitting the <tt>restricted</tt> line causes lilo to
always prompt for a password, regardless of whether LILO was passed
parameters. The default permissions for <file>/etc/lilo.conf</file>
grant read and write permissions to root, and enable read-only access
for <file>lilo.conf</file>'s group, root.

<p>
If you use GRUB instead of LILO, edit <file>/boot/grub/menu.lst</file>
and add the following two lines at the top (substituting, of course
<tt>hackme</tt> with the desired password). This prevents users from editing
the boot items. <tt>timeout 3</tt> specifies a 3 second delay before 
<prgn>grub</prgn> boots the default item.

<example>
  timeout 3
  password hackme
</example>

<p>To further harden the integrity of the password, you may store the password
in an encrypted form. The utility <prgn>grub-md5-crypt</prgn> generates a 
hashed password which is compatible with grub's encrypted password algorithm 
(md5).
To specify in <prgn>grub</prgn> that an md5 format password will be used, use 
the following directive:
<example>
  timeout 3
  password --md5 $1$bw0ez$tljnxxKLfMzmnDVaQWgjP0
</example>

The --md5 parameter was added to instruct <prgn>grub</prgn> to perform the md5 
authentication process. The provided password is the md5 encrypted version of 
hackme. Using the md5 password method is preferable to choosing its cleartext 
counterpart. More information about <prgn>grub</prgn> passwords may be found 
in the <package>grub-doc</package> package.

<sect id="kernel-root-prompt">Remove root prompt on the kernel

<p>Linux 2.4 kernels provide a way to access a root shell while booting which 
will be presented just after loading the cramfs file system. A message will 
appear to permit the administrator to enter an executable shell with root 
permissions, this shell can be used to manually load modules when 
autodetection fails. This behavior is the default for <prgn>initrd</prgn>'s 
<file>linuxrc</file>. The following message will appear:
<example>
  Press ENTER to obtain a shell (waits 5 seconds)
</example>

<p>In order to remove this behavior you need to change 
<file>/etc/mkinitrd/mkinitrd.conf</file> and set:
<example>
  # DELAY  The  number  of seconds the linuxrc script should wait to
  # allow the user to interrupt it before the system is brought up
  DELAY=0
</example>
<p>Then regenerate your ramdisk image. You can do this for example with:
<example>
  # cd /boot
  # mkinitrd -o initrd.img-2.4.18-k7 /lib/modules/2.4.18-k7
</example>
<p>or (preferred):
<example>
  # dpkg-reconfigure -plow kernel-image-2.4.x-yz
</example>
<p>Note that Debian 3.0 woody allows users to install 2.4 kernels
(selecting <em>flavors</em>), <em>however</em> the default kernel
is 2.2 (save for some architectures for which kernel 2.2 was not
ported). If you consider this a bug consider
<url id="http://bugs.debian.org/145244" name="Bug 145244"> before sending it.

<sect id="floppy-boot">Disallow floppy booting
<p>
The default MBR in Debian before version 2.2 did not act as a usual
master boot record and left open a method to easily break into a
system:

<list>
<item>Press shift at boot time, and an MBR prompt appears 

<item>Then press F, and your system will boot from floppy disk. This
can be used to get root access to the system.
</list>

<p>This behavior can be changed by entering:

<example>
  lilo -b /dev/hda
</example>

<p>Now LILO is put into the MBR. This can also be achieved by adding
<tt>boot=/dev/hda</tt> to <file>lilo.conf</file>. There is another 
solution which will disable the MBR prompt completely:

<example>
  install-mbr -i n /dev/hda
</example>

<p>On the other hand, this "back door", of which many people are just not
aware, may save your skin as well if you run into deep trouble with your
installation for whatever reasons.

<p>FIXME check whether this really is true as of 2.2 or was it 2.1?
INFO: The bootdisks as of Debian 2.2 do NOT install the mbr, but only LILO.


<sect id="restrict-console-login">Restricting console login access 

<p>Some security policies might force administrators to log in to
the system through the console with their user/password and then
become superuser (with <prgn>su</prgn> or <prgn>sudo</prgn>). This
policy is implemented in Debian by editing the
<file>/etc/login.defs</file> file or <file>/etc/securetty</file> when
using PAM. In:

<list>

<item><file>login.defs</file>, editing the CONSOLE variable which
defines a file or list of terminals on which root logins are allowed

<item><file>securetty</file> by adding/removing the terminals to which
root access will be allowed.

</list>

<p>When using PAM, other changes to the login process, which might
include restrictions to users and groups at given times, can be
configured in <file>/etc/pam.d/login</file>. An interesting feature
that can be disabled is the possibility to login with null (blank)
passwords. This feature can be limited by removing <em>nullok</em>
from the line:

<example>
  auth       required   pam_unix.so nullok
</example>

<sect id="restrict-reboots">Restricting system reboots through the console

<p>If your system has a keyboard attached to it anyone (yes
<em>anyone</em>) can reboot the system through it without login to the
system. This might, or might not, adhere to your security policy. If
you want to restrict this, you must check the
<file>/etc/inittab</file> so that the line that includes
<tt>ctrlaltdel</tt> calls <prgn>shutdown</prgn> with the <tt>-a</tt>
switch (remember to run <tt>init q</tt> after making any changes to
this file). The default in Debian includes this switch:

<example>
  ca:12345:ctrlaltdel:/sbin/shutdown -t1 -a -r now
</example>

<p>Now, in order to allow <em>some</em> users to shutdown the system,
as the manpage <manref section="8" name="shutdown"> describes, you must
create the file <file>/etc/shutdown.allow</file> and include there the
name of users which can boot the system. When the <em>three finger
salute</em> (a.k.a. <em>ctrl+alt+del</em>) is given the program will
check if any of the users listed in the file are logged in. If none of
them is, <prgn>shutdown</prgn> will <em>not</em> reboot the system.
 

<sect>Mounting partitions the right way
<p>
When mounting an ext2 partition, there are several additional options
you can apply to the mount call or to <file>/etc/fstab</file>. For
instance, this is my fstab entry for the <file>/tmp</file> partition:

<example>
  /dev/hda7    /tmp    ext2    defaults,nosuid,noexec,nodev    0    2
</example>

<p>
You see the difference in the options sections. The option
<tt>nosuid</tt> ignores the setuid and setgid bits completely, while
<tt>noexec</tt> forbids execution of any program on that mount point,
and <tt>nodev</tt>, ignores devices. This sounds great, but it
<list>
<item>only applies to ext2 file systems
<item>can be circumvented easily
</list>

<p>The <tt>noexec</tt> option prevents binaries from being executed
directly, but is easily circumvented:

<example>
  alex@joker:/tmp# mount | grep tmp
  /dev/hda7 on /tmp type ext2 (rw,noexec,nosuid,nodev)
  alex@joker:/tmp# ./date
  bash: ./date: Permission denied
  alex@joker:/tmp# /lib/ld-linux.so.2 ./date
  Sun Dec  3 17:49:23 CET 2000
</example>

<p>However, many script kiddies have exploits which try to create and execute 
files in <file>/tmp</file>. If they do not have a clue, they will fall into
this pit. In other words, a user cannot be tricked into executing a trojanized 
binary in <file>/tmp</file> e.g. when he incidentally adds <file>/tmp</file> 
into his PATH.

<p>Also be forewarned, some script might depend on <file>/tmp</file> being
executable. Most notably, Debconf has (had?) some issues regarding
this, for more information see Bug <url
id="http://bugs.debian.org/116448" name="116448">.

<p>
The following is a more thorough example. A note, though: 
<file>/var</file> could be set noexec, but some software 
<footnote>Some of this includes the package manager <package>dpkg</package>
since the installation (post,pre) and removal (post,pre) scripts are
at <file>/var/lib/dpkg/</file> and Smartlist</footnote>
keeps its programs under in <file>/var</file>. 
The same applies to the nosuid option.

<example>
/dev/sda6       /usr            ext2    defaults,ro,nodev       0       2
/dev/sda12      /usr/share      ext2    defaults,ro,nodev,nosuid        0       2
/dev/sda7       /var            ext2    defaults,nodev,usrquota,grpquota          0       2
/dev/sda8       /tmp            ext2    defaults,nodev,nosuid,noexec,usrquota,grpquota    0       2
/dev/sda9       /var/tmp        ext2    defaults,nodev,nosuid,noexec,usrquota,grpquota    0       2
/dev/sda10      /var/log        ext2    defaults,nodev,nosuid,noexec    0       2
/dev/sda11      /var/account    ext2    defaults,nodev,nosuid,noexec    0       2
/dev/sda13      /home           ext2    rw,nosuid,nodev,exec,auto,nouser,async,usrquota,grpquota                0       2
/dev/fd0        /mnt/fd0        ext2    defaults,users,nodev,nosuid,noexec      0       0
/dev/fd0        /mnt/floppy     vfat    defaults,users,nodev,nosuid,noexec      0       0
/dev/hda        /mnt/cdrom      iso9660 ro,users,nodev,nosuid,noexec            0       0
</example>

<sect1>Setting <file>/tmp</file> noexec
<p>Be careful if setting <file>/tmp</file> noexec when you want to install new 
software, since some programs might use it for installation. 
<package>Apt</package> is one such program (see 
<url id="http://bugs.debian.org/116448">) if not configured properly
<tt>APT::ExtractTemplates::TempDir</tt> (see 
<manref name="apt-extracttemplates" section="1">). 
You can set this variable in <file>/etc/apt/apt.conf</file> to another 
directory with exec privileges other than <file>/tmp</file>.

<!-- This is a duplicate of the example a few paragraphs up -->
<p>Regarding noexec, please be aware that it might not offer you that much 
security. 
Consider this:
<example>
  $ cp /bin/date /tmp
  $ /tmp/date
  (does not execute due to noexec)
  $/lib/ld-linux.so.2 /tmp/date
  (works since date is not executed directly)
</example>

<sect1>Setting /usr read-only
<p>If you set <file>/usr</file> read-only you will not be able to install new 
packages on your Debian GNU/Linux system. You will have to first remount it 
read-write, install the packages and then remount it read-only. The latest 
<package>apt</package> version (in Debian 3.0 'woody') can be configured to 
run commands before and after installing packages, so you might want to 
configure it properly.

<p>To do this modify <file>/etc/apt/apt.conf</file> and add:
<example>
  DPkg
  {
      Pre-Invoke  { "mount /usr -o remount,rw" };
      Post-Invoke { "mount /usr -o remount,ro" };
  };
</example>

<p>Note that the Post-Invoke may fail with a "/usr busy" error message.
This happens mainly when you are using files during the update that
got updated.  Annoying but not really a big deal.  Just make sure
these are no longer used and run the Post-Invoke manually.

<sect id="security-update">Execute a security update

<p>As soon as new security bugs are detected in packages, Debian
maintainers and upstream authors generally patch them within days or
even hours. After the bug is fixed, a new package is provided on <url
name="http://security.debian.org" id="http://security.debian.org">.

<p>If you are installing a Debian release you must take into account
that since the release was made there might have been security updates
after it has been determined that a given package is vulnerable. Also,
there might have been minor releases (there were seven in Debian
2.2 <em>potato</em> release) which include these package updates. 

<p>You need to note down the date the removable media (if you are
using it) was made and check the security site in order to see if
there are security updates. If there are and you cannot download the
packages from the security site on another system (you are not
connected to the Internet yet? are you?) before connecting to the
network you could consider (if not protected by a firewall for
example) adding firewall rules so that your system could only connect
to security.debian.org and then run the update. A sample configuration
is shown in <ref id="fw-security-update">.

<p><em>Note:</em>Since Debian woody 3.0, after installation you are given the
opportunity to add security updates to the system. If you say 'yes' to this,
the installation system will take the appropiate steps to add the
source for security updates to your package sources and your system, if
you have an Internet connection, will download and install any security
updates that might have been produced after your media was created.
If you are upgrading a previous version of Debian, or you asked 
the installation system not to do this, you should take the steps 
described here.

<p>To manually update the system, put the following line in your
<file>sources.list</file> and you will get security updates
automatically, whenever you update your system.

<example>
  deb http://security.debian.org/ stable/updates main contrib non-free
</example>

<p>Once you've done this you can either use <package>apt</package> or
<package>dselect</package> to upgrade:

<list>
<item>If you want to use <package>apt</package> just do (as root):
<example>
# apt-get update
# apt-get upgrade
</example>
<item>If you want to use <package>dselect</package> then first [U]pdate,
then [I]nstall and finally, [C]onfigure the installed/upgraded packages.
</list>

<p>If you like, you can add the deb-src lines to 
<file>/etc/apt/sources.list</file> as well. See 
<manref name="apt" section="8"> for further details.

<p>Note: You do <em>not</em> need to add the following line:

<example>
  deb http://security.debian.org/debian-non-US stable/non-US main contrib non-free
</example>
<p>this is because security.debian.org is is hosted in a non-US location and 
doesn't have a seperate non-US archive.

<sect id="debian-sec-announce">Subscribe to the Debian Security Announce mailing List

<p>In order to receive information on available security updates you
should subscribe yourself to the debian-security-announce mailing list
in order to receive the Debian Security Advisories (DSAs). See <ref
id="debian-sec-team"> for more information on how the Debian security
team works. For information on how to subscribe to the Debian mailing
lists read <url id="http://lists.debian.org">.

<p>DSAs are signed with the Debian Security Team's signature which can
be retrieved from <url id="http://security.debian.org">.

<p>You should consider, also, subscribing to the debian-security
mailing list for general discussion on security issues in the Debian
operating system.

<p>FIXME: add the key here too?

<sect>Providing secure user access

<sect1 id="auth-pam">User authentication: PAM

<p>PAM (Pluggable Authentication Modules) allows system administrators
to choose how applications authenticate users. Note that PAM can do
nothing unless an application is compiled with support for PAM. Most
of the applications that are shipped with Debian 2.2 have this support
built in. Furthermore, Debian did not have PAM support before 2.2. The
current default configuration for any PAM-enabled service is to
emulate UNIX authentication (read
<file>/usr/share/doc/libpam0g/Debian-PAM-MiniPolicy.gz</file> for more
information on how PAM services <em>should</em> work in Debian).


<p>Each application with PAM support provides a configuration file
in <file>/etc/pam.d/</file> which can be used to modify its behavior:

<list>
<item>what backend is used for authentication.
<item>what backend is used for sessions.
<item>how do password checks behave.
</list>

<p>
The following description is far from complete, for more information
you might want to read the <url
id="http://www.kernel.org/pub/linux/libs/pam/Linux-PAM-html/pam.html"
name="The Linux-PAM System Administrator's Guide"> (at the <url
id="http://www.kernel.org/pub/linux/libs/pam/" name="primary PAM
distribution site">), this document is also provided in the
<package>libpam-doc</package>.

<p>PAM offers you the possibility to go through several authentication steps at
once, without the user's knowledge. You could authenticate against a Berkeley
database and against the normal <file>passwd</file> file,
and the user only logs in if he authenticates correct in both.
You can restrict a lot with PAM, just as you can open your system
doors very wide. So be careful. A typical configuration line has a control
field as its second element. 
<!-- Second in mine (old Debian v2.0 though), check this! (FIXME) (era) -->
Generally it should be set to <tt>requisite</tt>, which
returns a login failure if one module fails.
<!-- Lots of fields in mine are "required", please elaborate? (FIXME) (era) -->

<p>The first thing I like to do, is to add MD5 support to PAM 
applications, since this helps protect against dictionary cracks (passwords 
can be longer if using MD5). The following two lines should be added to all 
files in <file>/etc/pam.d/</file> that grant access to the machine, like 
<tt>login</tt> and <tt>ssh</tt>.

<example>
  # Be sure to install libpam-cracklib first or you will not be able to log in
  password   required     pam_cracklib.so retry=3 minlen=12 difok=3
  password   required     pam_unix.so use_authtok nullok md5
</example>


<p>So, what does this incantation do? The first line loads the
cracklib PAM module, which provides password strength-checking,
prompts for a new password with a minimum length of 12 characters, a
difference of at least 3 characters from the old password, and allows
3 retries. The second line introduces the standard authentication
module with MD5 passwords and allows a zero length password.  The
<tt>use_authtok</tt> directive is necessary to hand over the password from the
previous module. The package depends in a wordlist (such as
<package>wenglish</package>, <package>wspanish</package>, 
<package>wbritish</package>...), make sure that you install the one 
appropiate to your language (otherwise it might not be useful at all).
<footnote>
This dependancy is not fixed, however, in the Debian 3.0 package. Please
see <url id="http://bugs.debian.org/112965" name="Bug #112965">.
</footnote>

<p>To make sure that the user root can only log into the system from
local terminals, the following line should be enabled in
<file>/etc/pam.d/login</file>:

<example>
  auth     requisite  pam_securetty.so
</example>

<p>Then you should add the terminals from which the user root can log
into the system, in <file>/etc/security/access.conf</file>.  Last but not
least the following line should be enabled if you want to set up user
limits.

<!-- FIXME: This is pam.d/login you're talking about, still? Elaborate? era -->
<example>
  session  required   pam_limits.so
</example>

<p>This restricts the system resources that users are allowed (see
below in <ref id="user-limits"> ).  For example, you could restrict the
number of concurrent logins (of a given group of users, or
system-wide) you may have, the number of processes, the memory size...

<p>Now edit <file>/etc/pam.d/passwd</file> and change the first line. You
should add the option "md5" to use MD5 passwords, change the minimum
length of password from 4 to 6 (or more) and set a maximum length, if
you desire. The resulting line will look something like:

<example>
  password   required   pam_unix.so nullok obscure min=6 max=11 md5
</example>

<p>If you want to protect su, so that only some people can use it to
become root on your system, you need to add a new group "wheel" to your
system (that is the cleanest way, since no file has such a group
permission yet). Add root and the other users that should be able to
<prgn>su</prgn> to the root user to this group.  Then add the following line to
<file>/etc/pam.d/su</file>:

<example>
  auth        requisite   pam_wheel.so group=wheel debug
</example>

<p>This makes sure that only people from the group "wheel" can use
<prgn>su</prgn> to become root. Other users will not be able to become
root. In fact they will get a denied message if they try to become
root.

<p>If you want only certain users to authenticate at a PAM service,
this is quite easy to achieve by using files where the users who are
allowed to login (or not) are stored. Imagine you only want to allow
user 'ref' to log in via <prgn>ssh</prgn>. So you put him into
<file>/etc/sshusers-allowed</file> and write the following into
<file>/etc/pam.d/ssh</file>:

<example>
  auth        required    pam_listfile.so item=user sense=allow file=/etc/sshusers-allowed onerr=fail
</example>

<p>Last, but not least, create <file>/etc/pam.d/other</file> and enter
the following lines:

<example>
  auth     required       pam_securetty.so
  auth     required       pam_unix_auth.so
  auth     required       pam_warn.so
  auth     required       pam_deny.so
  account  required       pam_unix_acct.so
  account  required       pam_warn.so
  account  required       pam_deny.so
  password required       pam_unix_passwd.so
  password required       pam_warn.so
  password required       pam_deny.so
  session  required       pam_unix_session.so
  session  required       pam_warn.so
  session  required       pam_deny.so
</example>

<p>These lines will provide a good default configuration for all
applications that support PAM (access is denied by default).


<sect1 id="user-limits">Limiting resource usage: the <file>limits.conf</file> file

<p>
You should really take a serious look into this file. Here you can
define user resource limits. If you use PAM, the file
<file>/etc/limits.conf</file> is ignored and you should use
<file>/etc/security/limits.conf</file> instead.

<p>If you do not restrict resource usage, <em>any</em> user with a
valid shell in your system (or even an intruder who compromised the
system through a service) can use up as much CPU, memory, stack,
etc. as the system can provide. This <em>resource exhaustion</em>
problem can only be fixed by the use of PAM. Note that there is a way
to add resource limits to some shells (for example, <prgn>bash</prgn> has
<prgn>ulimit</prgn>, see <manref section="1" name="bash">), but since not
all of them provide the same limits and since the user can change
shells (see <manref section="1" name="chsh">) it is better to place
the limits on the PAM modules.

<p>For more information read:
<list>

<item><url
id="http://www.samag.com/documents/s=1161/sam0009a/0009a.htm"
name="PAM configuration article">.

<item> <url
id="http://seifried.org/security/os/linux/20020324-securing-linux-step-by-step.html"
name="Seifried's Securing Linux Step by Step"> on the <em>Limiting
users overview</em> section.

<item><url id="http://seifried.org/lasg/users/" name="LASG"> in the 
<em>Limiting and monitoring users</em> section.

</list>

<p>FIXME: Get a good <file>limits.conf</file> up here

<sect1>User Login actions: edit <file>/etc/login.defs</file>
<p>
The next step is to edit the basic configuration and action upon user login.

<example>
  FAIL_DELAY          10
</example>

<p>This variable should be set to a higher value to make it harder to
use the terminal to log in using brute force. If a wrong password is
typed in, the possible attacker (or normal user!) has to wait for 10
seconds to get a new login prompt, which is quite time consuming when
you test passwords (manually). Pay attention to the fact that this
setting is useless if using a program other than <prgn>getty</prgn>, 
such as <prgn>mingetty</prgn> for example.

<example>
  FAILLOG_ENAB        yes
</example>

If you enable this variable, failed logins will be logged. It is important to
keep track of them to catch someone who tries a brute force attack.

<example>
  LOG_UNKFAIL_ENAB    yes
</example>

<p>If you set the variable <var>FAILLOG_ENAB</var> to yes, then you should also
set this variable to yes. This will record unknown usernames if the
login failed. If you do this, make sure the logs have the proper
permissions (640 for example, with an appropriate group setting such
as adm), because users often accidentally enter their password as the
username and you do not want others to see it.

<example>
  SYSLOG_SU_ENAB      yes
</example>

<p>This one enables logging of <prgn>su</prgn> attempts to <file>syslog</file>. Quite
important on serious machines but note that this can create privacy
issues as well.

<example>
  SYSLOG_SG_ENAB      yes
</example>

<p>The same as <var>SYSLOG_SU_ENAB</var> but applies to the <prgn>sg</prgn> 
program.

<example>
  MD5_CRYPT_ENAB      yes
</example>

<p>As stated above, MD5 sum passwords greatly reduce the problem of
dictionary attacks, since you can use longer passwords.
If you are using slink, read the docs about MD5 before enabling this
option.  Otherwise this is set in PAM.

<example>
  PASS_MAX_LEN        50
</example>

<p>If MD5 passwords are activated in your PAM configuration, then this
variable should be set to the same value as used there.


<sect1>Restricting ftp: editing <file>/etc/ftpusers</file>
<p>
The <file>/etc/ftpusers</file> file contains a list of users who are
not allowed to log into the host using ftp. Only use this file if you
really want to allow ftp (which is not recommended in general, because
it uses cleartext passwords). If your daemon supports PAM, you can
also use that to allow and deny users for certain services.

<p>FIXME (BUG): Is it a bug that the default <file>ftpusers</file> in Debian 
does <em>not</em> include all the administrative users (in 
<package>base-passwd</package>).

<sect1>Using su

<p>
If you really need users to become the super user on your system, e.g. for 
installing packages or adding users, you can use the command <prgn>su</prgn> 
to change your identity. You should try to avoid any login as user root and 
instead use <prgn>su</prgn>.  Actually, the best solution is to remove 
<prgn>su</prgn> and switch to <prgn>sudo</prgn>, as it has more features than 
<prgn>su</prgn>. However, <prgn>su</prgn> is more common as it is used on many 
other Unices.


<sect1>Using sudo

<p>
<prgn>sudo</prgn> allows the user to execute defined commands under
another user's identity, even as root. If the user is added to
<file>/etc/sudoers</file> and authenticates himself correctly, he is
able to run commands which have been defined in
<file>/etc/sudoers</file>. Violations, such as incorrect passwords or
trying to run a program you don't have permission for, are logged and
mailed to root.

<sect1>Disallow remote adminitrative access
<p>You should modify <file>/etc/security/access.conf</file> also so
that remote administrative login is disallowed. This way the users
need to use <prgn>su</prgn> (or <prgn>sudo</prgn>) so that there is
always an audit trace whenever a local user wants to use
administrative powers. 

<p>You need to add the following line to
<file>/etc/security/access.conf</file>, the default Debian
configuration file has a sample line commented out:
<example>
   -:wheel:ALL EXCEPT LOCAL
</example>


<sect1 id="user-restrict">Restricting users's access

<p>Sometimes you might think you need to have users created in your
local system in order to provide a given service (pop3 mail service or
ftp). Before doing so, first remember that the PAM implementation in
Debian GNU/Linux allows you to validate users with a wide variety of
external directory services (radius, ldap, etc.) provided by the
libpam packages.

<p>If users need to be created and the system can be accessed remotely
take into account that users will be able to log in to the system. You
can fix this by giving users a null (<file>/dev/null</file>) shell (it
would need to be listed in <file>/etc/shells</file>). If you want to
allow users to access the system but limit their movements, you can
use the <file>/bin/rbash</file>, equivalent to adding the <tt>-r</tt>
option in <prgn>bash</prgn> (<em>RESTRICTED SHELL</em> see <manref name="bash"
section="1">). Please note that even with restricted shell, a user
that access an interactive program (that might allow execution of a
subshell) could be able to bypass the limits of the shell.

<p>Debian currently provides in the unstable release (and might be included in 
the next stable releases) the <file>pam_chroot</file> module (in the <package>
libpam-chroot</package>). An alternative to it is to <prgn>chroot</prgn> the 
service that provides remote logging (<prgn>ssh</prgn>, <prgn>telnet</prgn>).
<footnote><package>Libpam-chroot</package> has not been yet thoroughly
tested, it does work for <prgn>login</prgn> but it might not be easy to set up 
the environment for other programs</footnote>

<p>If you wish to restrict <em>when</em> users can access the system you will
have to customize <file>/etc/security/access.conf</file> for your
needs.

<p>Information on how to <prgn>chroot</prgn> users accessing the
system through the <prgn>ssh</prgn> service is described in <ref
id="chroot-ssh-env">.

<sect1>Hand-made user auditing

<p>If you are paranoid you might want to add a system-wide
<file>/etc/profile</file> that sets the
environment in a way such that they cannot remove audit capabilities
from the shell (commands are dumped to <tt>$HISTFILE</tt>. The
<file>/etc/profile</file> could be set as follows:

<example>
  HISTFILE=~/.bash_history
  HISTSIZE=100000000000000000
  HISTFILESIZE=10000000000000000
  readonly HISTFILE
  readonly HISTSIZE
  readonly HISTFILESIZE
  export HISTFILE HISTSIZE HISTFILESIZE
</example>

<p>For this to work the user can only append information to
<file>.bash_history</file>. You need <em>also</em> to set the 
<em>append-only</em> option using <prgn>chattr</prgn> program 
for <file>.bash_history</file> for all users.
<footnote>
Without the append-only flag users would be able to empty the 
contents of the history file running <prgn> >.bash_history</prgn>
</footnote>.

<p>Note that you could do that per user's <file>.profile</file>. But
then you would need to setup permissions properly: having the user's
home directories <em>not</em> belong to the users but enable them
to read the configuration <file>.profile</file> and write on the
<file>.bash_history</file>. It would be good to set
the <em>inmutable</em> flag (also using <prgn>chattr</prgn>)
for <file>.profile</file> too if you do it this way.

<p>If you are completely paranoid and want to audit every user's command, you 
could take <prgn>bash</prgn> source code, edit it and have it send all that 
the user typed into another file. Or have <package>ttysnoop</package> 
constantly monitor any new ttys and dump the output into a file. Other useful 
program is <package>snoopy</package> which is a user-transparent program that 
hooks in as a library providing a wrapper around <var>execve()</var> 
calls, any command executed is logged to <prgn>syslogd</prgn> using the 
<tt>authpriv</tt> facility (usually stored at <file>/var/log/auth.log</file>).

<p>Note that you cannot use the <prgn>script</prgn> command for this since it 
will not work as a shell (even if you add it to <file>/etc/shells</file>).

<sect1>Complete user audit

<p>The previous example is a simple way to configure user auditing
which might be not useful for complex systems. If this is your case,
you need to look at <package>acct</package>, the accounting
utilities. These will log all the commands run by users or processes
in the system, at the expense of disk space.

<p>When activating accounting, all the information on processes and
users is kept under <file>/var/account/</file>, more specifically in
the <file>pacct</file>. The accounting package includes some tools
(<prgn>sa</prgn> and <prgn>ac</prgn>) to analyse this data.

<sect1>Reviewing user profiles

<p>If you want to <em>see</em> what users are usually doing, when they are
connecting you can use the <file>wtmp</file> database that
includes all login information. This file can be processed with
several utilities, amongst them <prgn>sac</prgn> which can output a
profile on each user showing in which timeframe they usually log on to
the system.

<p>In case you have accounting activated, you can also use the tools
provided by it in order to determine when the users access the
system and what they execute. 

<sect1>Setting users umasks

<p>Depending on your user policy you might want to change how
information is shared between users, that is, what the default
permissions of new files created by users are. This change is set by
defining a proper <tt>umask</tt> setting for all users. You can change
the <var>UMASK</var> setting in <file>/etc/limits.conf</file>,
<file>/etc/profile</file>, <file>/etc/csh.cshrc</file>,
<file>/etc/csh.login</file>, <file>/etc/zshrc</file> and probably some
others (depending on the shells you have installed on your system). Of
all of these the last one that gets loaded takes precedence. The order
is: PAM's <file>limits.conf</file>, the default system configuration 
for the user's shell, the user's shell (his <file>~/.profile</file>,
<file>~/.bash_profile</file>...)

<p>Debian's default <tt>umask</tt> setting is <em>022</em> this means
that files (and directories) can be read and accessed by the user's
group and by any other users in the system. If this is too permissive
for your system you will have to change the umask setting for all the
shells (and for PAM). Don't forget to modify the files under
<file>/etc/skel/</file> since these will be new user's defaults when
created with the <prgn>adduser</prgn> command.

<p>Note, however that users can modify their own <tt>umask</tt> setting if they
want too, making it more permissive or more restricted.

<sect1>Limiting what users can see/access

<P>FIXME: Content needed. Tell of consequences of changing packages 
permissions when upgrading (and admin this paranoid should <prgn>chroot</prgn> 
his users BTW).

<p>If you need to grant users access to the system with a shell think
about it very carefully. A user can, by default unless in a severely
restricted environment (like a <tt>chroot</tt> jail), retrieve
quite a lot of information from your system including:

<list>

<item>some configuration files in <file>/etc</file>. However, Debian's default
permissions for some sensitive files (which might, for example,
contain passwords), will prevent access to critical information. To
see which files are only accessible by the root user
for example <tt>find /etc -type f -a -perm 600 -a -uid 0</tt> as
superuser.

<item>your installed packages, either by looking at the package
database, at the <file>/usr/share/doc</file> directory or by guessing
by looking at the binaries and libraries installed in your system.

<item>some log files at <file>/var/log</file>. Note also that some
log files are only accessible to root and the <tt>adm</tt> group (try
<tt>find /var/log -type f -a -perm 640</tt>) and some are even only
available to the root user (try <tt>find /var/log -type f -a -perm
600 -a -uid 0</tt>).

</list>


<p>What can a user see in your system? Probably quite a lot of things,
try this (take a deep breath):
<example>
  find / -type f -a -perm +006 2>/dev/null  
  find / -type d -a -perm +007 2>/dev/null  
</example>

<p>The output is the list of files that a user can <em>see</em> and
the directories to which he has access.

<sect2 id="limit-user-perm">Limiting access to other user's information

<p>If you still grant shell access to users you might want to limit
what information they can view from other users. Users with shell
access have a tendency to create quite a number of files under their
$HOMEs: mailboxes, personal documents, configuration of X/GNOME/KDE
applications... 

<p>In Debian each user is created with one associated group, and
no two users belong to the same group. This is the default behavior:
when the userX is created a group with name userX is created and the
user is assigned to it. This avoids the concept of a <em>users</em>
group which might make it more difficult for users to hide information
from other users.

<p>However, users' <var>$HOME</var> directories are created with 0755 
permissions (group-readable and world-readable). The group permissions is not 
an issue since only the user belongs to the group, however the world 
permissions might (or might not) be an issue depending on your local policy.

<p>You can change this behaviour so that user creation provides different 
<var>$HOME</var> permissions. To change the behaviour for <em>new</em> users 
when they get created, change <em>DIR_MODE</em> in the configuration file 
<file>/etc/adduser.conf</file> to 0750 (no world-readable access).

<p>Users can still share information, but not directly in their 
<var>$HOME</var> directories unless they change its permissions.

<p>Note that this will prevent users from being able to set up
personal pages (<file>~userX</file>) if a web server is present, since the web
server will not be able to read the <var>$HOME</var> directory and thus, the
<file>public_html</file> directory under it. If you want to permit
users to publish HTML pages in their <file>~userX/public_html</file>
then change  <em>DIR_MODE</em> to 0751. This will allow the webserver
to access that directory (which should be mode 0755) and provide the content
published by users.

<sect1 id="user-pwgen">Generating user passwords

<p>There are many cases when an administrator needs to create many
user accounts and provide passwords for all of them. Of course, the
administrator could easily just set the password to be the same as the
user's account name, but that would not be very sensitive
security-wise. A better approach is to use a password generating
program. Debian provides <package>makepasswd</package>,
<package>apg</package> and <package>pwgen</package> packages which
provide programs (the name is the same as the package) that can be
used for this purpose. <prgn>Makepasswd</prgn> will generate true
random passwords with an emphasis on security over pronounceability
while <prgn>pwgen</prgn> will try to make meaningless but
pronounceable passwords (of course this might depend on your mother
language). <prgn>Apg</prgn> has algorithms to provide for both (there
is a client/server version for this program but it is not included in
the Debian package).

<p><prgn>Passwd</prgn> does not allow non-interactive assignation of
passwords (since it uses direct tty access). If you want to change
passwords when creating a large number of users you can create them
using <prgn>adduser</prgn> with the <tt>--disabled-login</tt> option
and then use <prgn>chpasswd</prgn>
<footnote>
<prgn>Chpasswd</prgn> cannot handle MD5 password generation so it needs to be 
given the password in encrypted form before using it, with the <tt>-e</tt>
option.
</footnote>
(in the <package>passwd</package> package so you already have it
installed). If you want to use a file with all the information to make
users as a batch process you might be better off using
<prgn>newusers</prgn>.

<sect1>Checking user passwords

<p>User passwords can sometimes become the <em>weakest link</em> in the 
security of a given system. This is due to some users choosing weak passwords 
for their accounts (and the more of them that have access to it the greater 
the chances of this happening). Even if you established checks with the 
cracklib PAM module and password limits as described in <ref id="auth-pam"> 
users will still be able to use weak passwords. Since user access might 
include remote shell access (over <prgn>ssh</prgn>, hopefully) it's important 
that a remote attacker is not able to guess user passwords (after he has been 
able to do user enumeration by other means).

<p>A system administrator must, given a big number of users, check if
the passwords they have are consistent with the local security
policy. How to check? Try to crack them as an attacker would if he had
access to the hashed passwords (the <file>/etc/shadow</file> file). 

<p>An administrator can use <package>john</package> or <package>crack</package>
(both are brute force password crackers) together with an appropriate wordlist 
<footnote>Try <prgn>apt-cache search wordlist</prgn> for a list of
available packages which might provide wordlists. You can also
retrieve wordlists from many ftp sites over the Internet. See
<url id="ftp://ftp.ox.ac.uk/pub/wordlists"> or
<url id="ftp://ftp.cerias.purdue.edu/pub/dict">.</footnote>
to check users' passwords and take appropriate action when a weak
password is detected.

<sect1 id="idle-logoff">Logging off idle users

<p>Idle users are usually a security problem, a user might be idle
maybe because he's out to lunch or because a remote connection was
broken and not re-established. For whatever the reason, idle users
might lead to a compromise:

<list>
<item>because the user's console might not be locked and can be
accessed by an intruder.  

<item>because an attacker might be able to re-attach himself to a
closed network connection and send commands to the remote shell (this
is fairly easy if the remote shell is not encrypted as in the case of
<prgn>telnet</prgn>).
</list>

<p>Some remote systems have even been compromised
through an idle (detached) <prgn>screen</prgn>.

<p>Automatic disconnection of idle users is usually a part of the local 
security policy that must be enforced. There are several ways to do this:

<list>
<item>If <prgn>bash</prgn> is the user shell, a system administrator 
can set a default <tt>TMOUT</tt> value (see <manref section="1" name="bash">) 
which will make the shell automatically remote idle users. Note that it 
must be set with the <tt>-o</tt> option or users will be able to 
change (or unset) it.

<item>Install <package>timeoutd</package> and configure
<file>/etc/timeouts</file> according to your local security
policy. The daemon will watch for idle users and time out their shells
accordingly.

<item>Install <package>autolog</package> and configure it to remove idle users.

</list>

<p>The <prgn>timeoutd</prgn> or <prgn>autolog</prgn> daemons are the
preferred method since, after all, users can change their default shell
or can, after running their default shell, switch to another
(uncontrolled) shell.


<sect>Using tcpwrappers 

<p>TCP wrappers were developed when there were no real packet filters
available and access control was needed. The TCP wrappers allow you to
allow or deny a service for a host or a domain and define a default
allow or deny rule.  If you want more information take a look at
<manref name="hosts_access" section="5">.

<p>Many services installed in Debian are either:

<list>
<item>launched through the tcpwrapper service (<file>tcpd</file>)
<item>compiled with libwrapper support built-in.
</list>

<p>On the one hand, for services configured in
<file>/etc/inetd.conf</file> (this includes <prgn>telnet</prgn>, 
<prgn>ftp</prgn>, <prgn>netbios</prgn>, <prgn>swat</prgn>
and <prgn>finger</prgn>) you will see that the configuration file executes
<prgn>/usr/sbin/tcpd</prgn> first. On the other hand, even if a
service is not launched by the <prgn>inetd</prgn> superdaemon,
support for the tcp wrappers rules can be compiled
into it. Services compiled with tcp wrappers in Debian include
<prgn>ssh, portmap, in.talk, rpc.statd, rpc.mountd, gdm, oaf</prgn> (the GNOME
activator daemon), <prgn>nessus</prgn> and many others. 

<p>To see which packages use tcpwrappers try:

<example>
  $ apt-cache showpkg libwrap0 | egrep '^[[:space:]]' | sort -u | \
        sed 's/,libwrap0$//;s/^[[:space:]]\+//'
</example>


<p>Take this into account when running <prgn>tcpchk</prgn>.
You can add services that are linked to the wrapper library into
the <file>hosts.deny</file> and <file>hosts.allow</file> files but
<prgn>tcpchk</prgn> will warn that it is not able to find
those services since it looks for them in <file>/etc/inetd.conf</file>
(the manpage is not totally accurate here).

<p>Now, here comes a small trick, and probably the smallest intrusion 
detection system available. In general, you should have a decent firewall 
policy as a first line, and tcp wrappers as the second line of defense. One 
little trick is to set up a <var>SPAWN</var> <footnote>be sure to use 
uppercase here since <em>spawn</em> will not work</footnote> command in 
<file>/etc/hosts.deny</file> that sends mail to root whenever a denied service
triggers wrappers:

<example>
  ALL: ALL: SPAWN ( \
    echo -e "\n\
    TCP Wrappers\: Connection refused\n\
    By\: $(uname -n)\n\
    Process\: %d (pid %p)\n\
    User\: %u\n\
    Host\: %c\n\
    Date\: $(date)\n\
  " | /usr/bin/mail -s "Connection to %d blocked" root) &
</example>

<p><em>Beware</em>: The above printed example is open to a DoS attack by
making many connections in a short period of time. Many emails mean
a lot of file I/O by sending only a few packets.

<!--
# Could this example be more interesting? 
# It also relates to the next section (jfs)
#
# era: cf hosts_access(5) manual page,
# and why are you not using logger(1) here? (FIXME?)
#
#&lt;example&gt;
#ALL: ALL: SPAWN ( \
#  /usr/local/sbin/send_syslog %u %c %d )
#&lt;example&gt;

#  With send_syslog as:
##!/usr/bin/perl -w
#
#use Sys::Syslog qw(:DEFAULT setlogsock);
#
#$user=shift(@ARGV) || 'unknown';
#$host=shift(@ARGV) || 'unknown';
#$service=shift(@ARGV) || 'unknown';
#setlogsock('unix');
#openlog("alert",'', 'user');
#syslog('warning', 'Connection from %s at %s to %s blocked.', ($user, $host, $service) );
#closelog();
#
#exit 0;
-->

<sect id="log-alerts">The importance of logs and alerts

<p>It is easy to see that the treatment of logs and alerts is an
important issue in a secure system. Suppose a system is perfectly
configured and 99% secure. If the 1% attack occurs, and there are no
security measures in place to, first, detect this and, second, raise
alarms, the system is not secure at all.

<p>Debian GNU/Linux provides some tools to perform log analysis, most notably 
<package>swatch</package>, <footnote>there's a very good article on it written 
by <url id="http://www.enteract.com/~lspitz/swatch.html" name="Lance Spitzner">
</footnote> <package>logcheck</package> or <package>log-analysis</package> 
(all will need some customisation to remove unnecessary things from the 
report). It might also be useful, if the system is nearby, to have the system 
logs printed on a virtual console. This is useful since you can (from a 
distance) see if the system is behaving properly. Debian's 
<file>/etc/syslog.conf</file> comes with a commented default configuration; to 
enable it uncomment the lines and restart <prgn>syslogd</prgn> (
<tt>/etc/init.d/syslogd restart</tt>):

<example>
  daemon,mail.*;\
        news.=crit;news.=err;news.=notice;\
        *.=debug;*.=info;\
        *.=notice;*.=warn       /dev/tty8
</example>


<!-- FIXME: Talk about logcolorise? Is it in Debian? -->
<p>There is a lot regarding log analysis that cannot be fully covered
here, a good resource for information is <url name="Counterpane's Log
Analysis Resources"
id="http://www.counterpane.com/log-analysis.html">.
In any case, even automated tools are no match for the best
analysis tool: your brain. 

<!-- FIXME: Check information on SHARP, the 'syslog heuristic analysis
and response program'.  The paper is at
http://www.csis.gvsu.edu/sharp/. Is it free-software? packaged? -->

<sect1 id="custom-logcheck">Using and customising <prgn>logcheck</prgn>

<p>The <prgn>logcheck</prgn> package in Debian is divided into two
packages <package>logcheck</package> (the main program) and
<package>logcheck-database</package> (a database of regular
expressions for the program). The Debian default (in
<file>/etc/cron.d/logcheck</file>) is that <prgn>logcheck</prgn> is run
daily at 2 AM and once after each reboot.

<p>This tool can be quite useful if properly customised to alert the
administrator to unusual events in the system. <prgn>Logcheck</prgn>
can be fully customised so that it can send mails from events
recovered from the logs that are worthy of attention. The default
installation includes profiles for ignored events and policy
violations for three different setups (workstation, server and
paranoid). The Debian package includes a configuration file
<file>/etc/logcheck/logcheck.conf</file>, sourced by the program, that
defines which user the checks are sent to. It also provides a way for
packages that provide services to implement new policies in the
directories: <file>/etc/logcheck/hacking.d/_packagename_</file>,
<file>/etc/logcheck/violations.d/_packagename_</file>,
<file>/etc/logcheck/violations.ignore.d/_packagename_</file>,
<file>/etc/logcheck/ignore.d.paranoid/_packagename_</file>,
<file>/etc/logcheck/ignore.d.server/_packagename_</file>, and
<file>/etc/logcheck/ignore.d.workstation/_packagename_</file>. However,
not many packages currently do so. If you have a policy that can be
useful for other users, please send it as a bug report for the
appropriate package (as a <em>wishlist</em> bug). For more information read
<file>/usr/share/doc/logcheck/README.Debian</file>

<p>The best way to configure <prgn>logcheck</prgn> is to install it
(it will ask for the user to which reports should be mailed and generate
<file>/etc/logcheck/logcheck.logfiles</file> from syslog entries). If
you wish to add new log files just add them to
<file>/etc/logcheck/logcheck.logfiles</file>. The
package dependency will also force the installation of 
<package>logcheck-database</package>; during installation it will ask which
security level is desired: workstation, server or paranoid. This will
make <file>/etc/logcheck/ignore.d</file> point to the appropriate
directories (through symbolic links). To change this run
<tt>dpkg-reconfigure -plow logcheck-database</tt>.  Then create the
<file>/etc/ignore.d/local</file>, this file will hold all the rules to
exclude messages that should not be reported. Leave it empty for the
moment (a simple <tt>cp /dev/null /etc/ignore.d/local</tt> will
work). 

<p>Once this is done you might want to check the mails that are sent, for the 
first few days/weeks/months. If you find you are sent messages you do not wish 
to receive, just add the regular expressions (see 
<manref name="regex" section="7">) that correspond to these messages to the
<file>/etc/ignore.d/local</file>. It's an ongoing tuning process; once the 
messages that are sent are always relevant you can consider the tuning 
finished. Note that if <prgn>logcheck</prgn> does not find anything relevant 
in your system it will not mail you even if it does run (so you might get a 
mail only once a week, if you are lucky).


<sect1>Configuring where alerts are sent

<p>Debian comes with a standard <tt>syslog</tt> configuration (in 
<file>/etc/syslog.conf</file>) that logs messages to the appropriate files 
depending on the system facility.  You should be familiar with this; have a 
look at the <file>syslog.conf</file> file and the documentation if not. If you 
intend to maintain a secure system you should be aware of where log messages 
are sent so they do not go unnoticed.

<p>For example, sending messages to the console also is an interesting
setup useful for many production-level systems. But for many such
systems it is also important to add a new machine that will serve as
loghost (i.e. it receives logs from all other systems).

<p>Root's mail should be considered also, many security controls (like
<package>snort</package>) send alerts to root's mailbox. This 
mailbox usually points to
the first user created in the system (check <file>/etc/aliases</file>).
Take care to send root's mail to some place where it will be read (either
locally or remotely).

<p>There are other role accounts and aliases on your system.  On a
small system, it's probably simplest to make sure that all such
aliases point to the root account, and that mail to root is forwarded
to the system administrator's personal mailbox.

<p>FIXME: it would be interesting to tell how a Debian system can
send/receive SNMP traps related to security problems (jfs). Check:
<package>snmptraglogd</package>, <package>snmp</package> and
<package>snmpd</package>.


<sect1>Using a loghost

<p>A loghost is a host which collects syslog data remotely over the
network. If one of your machines is cracked, the intruder is not able
to cover his tracks, unless he hacks the loghost as well.  So, the
loghost should be especially secure.  Making a machine a loghost is
simple. Just start the <prgn>syslogd</prgn> with <tt>syslogd -r</tt> 
and a new loghost is born. In order to do this permanently in Debian, edit
<file>/etc/init.d/sysklogd</file> and change the line

<!-- FIXME: The following could also be interesting -->
<!-- How to hide the logging server on the network i.e. by not giving -->
<!-- it an IP address and adding a static ARP entry on the hosts using -->
<!-- the remote syslog server (only if on the same hub); if the remote -->
<!-- syslog server would be on a separate network, the default gateway -->
<!-- should be configured accordingly -->

<example>
  SYSLOGD=""
</example>
to 
<example>
  SYSLOGD="-r"
</example>

Next, configure the other machines to send data to the loghost. Add
an entry like the following to <file>/etc/syslog.conf</file>:

<example>
  facility.level            @your_loghost
</example>

See the documentation for what to use in place of <em>facility</em>
and <em>level</em> (they should not be entered verbatim like this).
If you want to log everything remotely, just write:

<example>
  *.*                       @your_loghost
</example>

into your <file>syslog.conf</file>. Logging remotely as well as locally 
is the best solution (the attacker might presume to have covered 
his tracks after deleting the local log files). See the <manref name="syslog"
section="3">, <manref name="syslogd" section="8"> and <manref
name="syslog.conf" section="5"> manpages for additional information.


<sect1>Log file permissions

<p>It is not only important to decide how alerts are used, but also
who has read/modify access to the log files (if not
using a remote loghost).  Security alerts which the attacker can
change or disable are not worth much in the event of an intrusion.
Also, you have to take into account that log files might reveal
quite a lot of information about your system to an intruder 
if he has access to them.

<!--  It should be explained why after installation this is not
 already done, jfs -->

<p>Some log file permissions are not perfect after the installation (but of 
course this really depends on your local security policy). First 
<file>/var/log/lastlog</file> and <file>/var/log/faillog</file> do not need to 
be readable by normal users. In the <file>lastlog</file> file you can see who 
logged in recently, and in the <file>faillog</file> you see a summary of failed
logins. The author recommends <prgn>chmod 660</prgn> for both. Take a brief 
look at your log files and decide very carefully which log files to make 
readable/writeable for a user with a UID other than 0 and a group other than 
'adm' or 'root'. You can easily check this in your system with:

<example>
  #  find /var/log -type f -exec ls -l {} \; | cut -c 17-35 |sort -u
  (see to what users do files in /var/log belong)
  #  find /var/log -type f -exec ls -l {} \; | cut -c 26-34 |sort -u
  (see to what groups do files in /var/log belong)
  # find /var/log -perm +004
  (files which are readable by any user)
  #  find /var/log \! -group root \! -group adm -exec ls -ld {} \;
  (files which belong to groups not root or adm)
</example>

<p>To customize how log files are created you will probably have to
customize the program that generates them. If the log file gets
rotated, however, you can customize the behavior of creation and rotation.

<!-- This is no longer true, check apache's logrotate
<p>
I want to emphasize that the apache log file permissions are really
screwed due to the fact that the apache user owns the apache log
files. If a user gets a shell with a back door in apache, they can
easily remove the log files.
-->

<sect id="kernel-patches">Adding kernel patches
<!-- last edited by Frédéric Schütz <schutz@mathgen.ch> -->

<p>FIXME: add more content, explain how these specific patches
can be installed in Debian using the kernel-2.x.x-patch-XXX packages.
</p>

<!-- Make the entries coherent: should the package names be links to the
relevant package pages ? -->

<p>Debian GNU/Linux provides some of the patches for the Linux kernel
that enhance its security. These include:

<list>

<item>Linux Intrusion Detection (in package <package>lids-2.2.19</package>),
by Huagang Xie and Philippe Biondi. This kernel patch makes the
process of hardening your Linux system easier by allowing you to
restrict, hide and protect processes, even from root. It also allows
you to protect or hide certain files so that even root cannot modify
them. Furthermore, you can also set capabilities for certain
processes. A must for the paranoid system administrator. Homepage:
<url id="http://www.lids.org" name="http://www.lids.org">

<item><em>POSIX Access Control Lists (ACLs) for Linux</em> (in package
<package>kernel-patch-acl</package>). This kernel patch adds access
control lists, an advanced method for restricting access to files. It
allows you to control fine-grain access to files and directory. This
patch has been added to the 2.5 development kernel and will be
included by default in the future 2.6 Kernel. Homepage: <url
name="http://acl.bestbits.at/" id="http://acl.bestbits.at/">

<item>Linux Trustees (in package <package>trustees</package>). This patch
adds a decent advanced permissions management system to your Linux kernel.
Special objects (called trustees) are bound to every file or directory, and
are stored in kernel memory, which allows fast lookup of all permissions.
Homepage: <url name="http://trustees.sourceforge.net/"
id="http://trustees.sourceforge.net/">

<item>NSA Enhanced Linux (in package <package>selinux</package> also 
available from 
<url id="http://www.coker.com.au/selinux/" name="the developer's website">)

<item><package>kernel-patch-2.2.18-openwall</package>, by Solar
Designer. This is a useful set of kernel restrictions, like restricted
links, FIFOs in <file>/tmp</file>, a restricted <file>/proc</file>
file system, special file descriptor handling, non-executable user
stack area and other. Homepage: <url
name="http://www.openwall.com/linux/"
id="http://www.openwall.com/linux/">

<item><package>kernel-patch-2.2.19-harden</package>

<item>IPSEC kernel support (in package
<package>kernel-patch-freeswan</package>). If you want to use the
IPsec protocol with Linux, you need this patch. You can create VPNs
with this quite easily, even to Windows machines, as IPsec is a common
standard. IPSec capabilities have been added to the 2.5 development
kernel, so this feature will be present by default in the future Linux
Kernel 2.6. Homepage: <url id="http://www.freeswan.org">

<item><package>cryptoapi-core-source</package>. This patch adds
cryptographic capabilities to the Linux kernel, like ciphers and
digests functions. Common uses of these functions are filesystem or
swap encryption. Note that as of version 2.5.45, similar capabilities
have been added to the official Linux kernel source, so it is likely
that you won't need this patch anymore with the future 2.6 kernel.
<em>Note</em>: this package does not exist in Debian releases prior to 
<url id="http://www.debian.org/releases/sarge/" name="Sarge">.
Homepage: <url name="http://www.kerneli.org/" id="http://www.kerneli.org/">

<item><package>cryptoloop-source</package>. This patches allows you to
use the functions of the <package>crytoapi-core-source</package> package
to create encrypted filesystems using the loopback device.

<item><package>kernel-patch-int</package>. This patch also adds
cryptographic capabilities to the Linux kernel, and was useful with
Debian releases up to Potato. It doesn't work with Woody, and if you
are using Sarge or a newer version, you should use the more recent
<package>cryptoapi-core-source</package>.


</list>

<p>However, some patches have not been provided in Debian yet. If you
feel that some of these should be included please ask for it at the
<url name="Work Needing and Prospective Packages"
id="http://wnpp.debian.org">.  Some of these are:
<!-- http://wnpp.debian.org unreachable in the last two days... -->

<list>

<item><url id="http://pageexec.virtualave.net/" name="
PaX patch">

<item>
<url name="HAP patch"
id="http://www.theaimsgroup.com/~hlein/hap-linux/">

<item>
<url name="Stealth patch"
id="http://www.energymech.net/madcamel/fm/">

<item><em>SubDomain</em>. A kernel extension designed to provide least
privilege confinement to possibly insecure programs. SubDomain
complements and extends native access controls. While similar to a
<prgn>chroot</prgn> environment, it claims to be easier to construct
and more flexible than a <prgn>chroot</prgn> environment. Homepage:
<url name="http://www.immunix.org/subdomain.html"
id="http://www.immunix.org/subdomain.html">

<item><em>UserIPAcct</em>. This is not really a security related
patch, but it does allow you to create per user quotas for the traffic
on your system. You can also fetch statistics about the user traffic.
Homepage: <url id="http://ramses.smeyers.be/useripacct">.

</list>


<sect>Protecting against buffer overflows

<p><em>Buffer overflow</em> is the name of a common attack to software
which makes use of insufficient boundary checking (a common
programming error) in order to execute machine code through a
program's inputs. These attacks, against server software which listens
to connections remotely and against local software which grant higher
privileges to users (<tt>setuid</tt> or <tt>setgid</tt>) can result in the 
compromise of any given system.

<p>There are mainly four methods to protect against buffer overflows:

<list>

<item>patch the kernel to prevent stack execution.

<!-- FIXME: add a link to libsafe to the main place -->

<item>using a library, such as libsafe, to overwrite vulnerable
functions and introduce proper checking (for information 
on how to install libsafe read 
<url id="http://www.Linux-Sec.net/harden/libsafe.uhow2.txt" name="this">).

<item>recompile code to introduce proper checks that prevent
overflows, using, for example, stackguard.

<item>use tools to find and fix code that might introduce this
vulnerability.

</list>

<p>Debian GNU/Linux, as of the 3.0 release, only provides software to
implement the first and last of these methods (kernel patches and
tools to detect possible buffer overflows). The use of tools to detect
buffer overflows requires, in any case, of programming experience in
order to fix (and recompile) the code. Debian provides, for example:
<package>bfbtester</package> (a buffer overflow tester that
brute-forces binaries through command line and environment overflows)
and <package>njamd</package>.

<p>As for kernel patches (described in the section <ref
id="kernel-patches">), the Openwall patch provides protection against
buffer overflows in 2.2 linux kernels. However, for 2.4 kernels, you
need to use the Grsecurity patch (in the <package>
kernel-patch-2.4-grsecurity</package>) which includes the Openwall
patch and many more <url id="http://www.grsecurity.net/features.php"
name="features"> (including ACLs and network randomness to make it
more difficult to remote OS fingerprinting), or the Linux Security
Modules (in the <package>kernel-patch-2.4-lsm</package> and
<package>kernel-patch-2.5-lsm</package> packages).

<p>In any case, be aware, that even these workarounds might not
prevent buffer overflows since there are ways to circumvent these, as
described in phrack's magazine <url name="issue 58"
id="http://packetstorm.linuxsecurity.com/mag/phrack/phrack58.tar.gz">.


<sect>Secure file transfers 

<p>During normal system administration one usually needs to transfer
files in and out from the installed system. Copying files in a secure
manner from a host to another can be achieved by using the
<package>sshd</package> server package. Another possibility is the use
of <package>ftpd-ssl</package>, a ftp server which uses the <em>Secure
Socket Layer</em> to encrypt the transmissions.

<p>Any of these methods needs, of course, special clients. Debian
provides clients, for example the <package>ssh</package> provides
<prgn>scp</prgn>.  It works like <prgn>rcp</prgn> but is encrypted
completely, so the <em>bad guys</em> cannot even find out WHAT you
copy. There is also a <package>ftp-ssl</package> client package for
the equivalent server. You can find clients for these software even
for other operating systems (non-UNIX), <prgn>putty</prgn> and
<prgn>winscp</prgn> provide secure copy implementations for any
version of Microsoft's operating system.

<p>Note that using <prgn>scp</prgn> provides access to the users to
all the file system unless <prgn>chroot</prgn>'ed as described in <ref
id="ssh-chroot">. FTP access can be <prgn>chroot</prgn>'ed, probably easier
depending on you chosen daemon, as described in <ref
id="ftp-secure">. If you are worried about users browsing your local
files and want to have encrypted communication you can either use an
ftp daemon with SSL support or combine cleartext ftp and a VPN setup
(see <ref id="vpn">).

<sect>File System limits and control

<sect1>Using quotas

<p>
Having a good quota policy is important, as it keeps users from
filling up the hard disk(s).
<p>
You can use two different quota systems: user quota and group
quota. As you probably figured out, user quota limits the amount of
space a user can take up, group quota does the equivalent for
groups. Keep this in mind when you're working out quota sizes.

<p>There are a few important points to think about in setting up a
quota system:

<list>
<item>Keep the quotas small enough, so users do not eat up your disk
space.

<item>Keep the quotas big enough, so users do not complain or their mail quota
keeps them from accepting mail over a longer period.

<item>Use quotas on all user-writable areas, on <file>/home</file> as well 
as on <file>/tmp</file>.
</list>

<p>Every partition or directory which users have full write access should
be quota enabled. Calculate and assign a workable quota size for those 
partitions and directories which combines usability and security.

<p>So, now you want to use quotas. First of all you need to check
whether you enabled quota support in your kernel. If not, you will
need to recompile it. After this, control whether the package 
<package>quota</package> is installed. If not you will need this one as well.

<!-- FIXME: how to check for quota support? What to tweak when
recompiling? -->

<p>
Enabling quota for the respective file systems is as easy as modifying
the <tt>defaults</tt> setting to <tt>defaults,usrquota</tt> in your
<file>/etc/fstab</file> file. If you need group quota, substitute
<tt>usrquota</tt> to <tt>grpquota</tt>.  You can also use them both.
Then create empty quota.user and quota.group files in the roots of the
file systems you want to use quotas on (e.g.  <tt>touch
/home/quota.user /home/quota.group</tt> for a <file>/home</file> file system).

<p>
Restart quota by doing <tt>/etc/init.d/quota stop;/etc/init.d/quota
start</tt>. Now quota should be running, and quota sizes can be set.

<p>
Editing quotas for a specific user (say 'ref') can be done by
<tt>edquota -u ref</tt>. Group quotas can be modified with <tt>edquota -g
&lt;group&gt;</tt>. Then set the soft and hard quota and/or inode quotas 
as needed.

<p>
For more information about quotas, read the quota man page, and the quota
mini-howto(<file>/usr/share/doc/HOWTO/en-html/mini/Quota.html</file>).

<p>You might or might not like <package>lshell</package>, since it
violates the FHS. Also take into account that pam_limits.so might
provide the same functionality and <package>lshell</package>
is currently <url id="http://bugs.debian.org/93894" name="orphaned">

<sect1 id="ext2attr">The ext2 filesystem specific attributes (chattr/lsattr) 
<!-- section last edited by Frédéric Schütz <schutz@mathgen.ch> -->

<p>
In addition to the usual Unix permissions, the ext2 and ext3
filesystems offer a set of specific attributes that give you more
control over the files on your system. Unlike the basic permissions,
these attributes are not displayed by the usual <prgn>ls -l</prgn>
command or changed using <prgn>chmod</prgn>, and you need two other
utilities, <prgn>lsattr</prgn> and <prgn>chattr</prgn> (in package
<package>e2fsprogs</package>) to manage them. Note that this means
that these attributes will usually not be saved when you backup
your system, so if you change any of them, it may be worth
saving the successive <prgn>chattr</prgn> commands in a script so that
you can set them again later if you have to restore a backup.

<p>
Among all available attributes, the two that are most important for
increasing security are referenced by the letters 'i' and 'a', and
they can only be set (or removed) by the superuser:

<list>
<item>The 'i' attribute ('immutable'): a file with this attribute can
neither be modified nor deleted or renamed and no link can be created
to it, even by the superuser.

<item>The 'a' attribute ('append'): this attribute has the same effect
that the immutable attribute, except that you can still open the file
in append mode. This means that you can still add more content to it
but it is impossible to modify previous content. This attribute is
especially useful for the log files stored in <file>/var/log/</file>,
though you should consider that they get moved sometimes due to the
log rotation scripts.
</list>

<p>
These attributes can also be set for directories, in which case
everyone is denied the right to modify the contents of a directory
list (eg. rename or remove a file, ...). When applied to a directory,
the append attribute only allows file creation.

<p>
It is easy to see how the 'a' attribute improves security, by giving
to programs that are not running as the superuser the ability to add
data to a file without modifying its previous content. On the other
hand, the 'i' attribute seems less interesting: after all, the
superuser can already use the basic Unix permissions to restrict
access to a file, and an intruder that would get access to the
superuser account could always use the <prgn>chattr</prgn> program to
remove the attribute. Such an intruder may first be confused when he
sees that he is not able to remove a file, but you should not assume
that he is blind - after all, he got into your system ! Some manuals
(including a previous version of this document) suggest to simply
remove the <prgn>chattr</prgn> and <prgn>lsattr</prgn> programs from
the system to increase security, but this kind of strategy, also known
as "security by obscurity", is to be absolutely avoided, since it
provides a false sense of security.

<p>
A secure way to solve this problem is to use the capabilities of the Linux
kernel, as described in <ref id="proactive">. The capability of
interest here is called <tt>CAP_LINUX_IMMUTABLE</tt>: if you remove it
from the capabilities bounding set (using for example the command
<tt>lcap CAP_LINUX_IMMUTABLE</tt>) it won't be possible to change any
'a' or 'i' attribute on your system anymore, even by the superuser ! A
complete strategy could be as follows:

<enumlist>
  <item> Set the attributes 'a' and 'i' on any file you want;
  <item> Add the command <tt>lcap CAP_LINUX_IMMUTABLE</tt> (as well as
         <tt>lcap CAP_SYS_MODULE</tt>, as suggested in <ref id="proactive">)
         to one of the startup scripts;
<!-- Is there anything interesting in :
http://lists.debian.org/debian-security/2001/debian-security-200107/msg00024.html -->
  <item> Set the 'i' attribute on this script and other startup files, as
         well as on the <prgn>lcap</prgn> binary itself;
  <item> Execute the above command manually (or reboot your system to
         make sure everything works as planned).
</enumlist>

<p>
Now that the capability has been removed from the system, an intruder
can not change any attribute on the protected files, and thus can not
change or remove the files. If he forces the machine to reboot (which
is the only way to restore the capabilities bounding set), it will
easily be detected, and the capability will be removed again as soon
as the system restarts anyway. The only way to change a protected file
would be to boot the system in single-user mode or using another
bootdisk, two operations that require physical access to the machine !

<!-- Add a note about the fact that it is not widely used -->

<sect1 id="check-integ">Checking file system integrity

<p>Are you sure <file>/bin/login</file> on your hard drive is still the binary 
you installed there some months ago? What if it is a hacked version, which
stores the entered password in a hidden file or mails it in cleartext version 
all over the Internet?

<p>
The only method to have some kind of protection is to check your files
every hour/day/month (I prefer daily) by comparing the actual and the
old md5sum of this file. Two files cannot have the same md5sum (the
MD5 digest is 128 bits, so the chance that two different files will
have the same md5sum is roughly one in 3.4e3803), so you're on the
safe site here, unless someone has also hacked the algorithm that
creates md5sums on that machine. This is, well, extremely difficult
and very unlikely. You really should consider this auditing of your
binaries as very important, since it is an easy way to recognize
changes at your binaries. Common tools used for this are 
<package>sXid</package>, <package>AIDE</package> (Advanced Intrusion Detection 
Environment), <package>TripWire</package> (non-free; the new version will be 
GPL), <package>integrit</package> and <package>samhain</package>.

<p>Installing <prgn>debsums</prgn> will help to check the file system
integrity, by comparing the md5sums of every file against the md5sums
used in the Debian package archive. But beware, those files can easily
be changed.

<p>Furthermore you can replace <package>locate</package> with
<package>slocate</package>. slocate is a security enhanced version of
GNU locate. When using slocate, the user only sees the files he really
has access to and you can exclude any files or directories on the
system.

<p>FIXME: put references to the snapshot taken after installation.
<p>FIXME: Add a note regarding packages not providing debsums for all
apps installed (not mandatory).

<sect1>Setting up setuid check

<p>
Debian provides a <prgn>cron</prgn> job that runs daily in
<file>/etc/cron.daily/standard</file>. This <prgn>cron</prgn> job will run the
<prgn>/usr/sbin/checksecurity</prgn> script that will store
information of this changes.

<!-- FIXME: What is the default for this in cron package? jfs -->

<p>In order for this check to be made you must set
<tt>CHECKSECURITY_DISABLE="FALSE"</tt> in
<file>/etc/checksecurity.conf</file>. Note, this is the default, so
unless you have changed something, this option will already be set to
"FALSE".

<p>The default behavior does not send this information to the superuser
but, instead keeps daily copies of the changes in
<file>/var/log/setuid.changes</file>. You should set the
CHECKSECURITY_EMAIL (in <file>/etc/checksecurity.conf</file>) to 'root' to
have this information mailed to him.  .  See <manref
name="checksecurity" section="8"> for more configuration info.

<sect id="network-secure">Securing network access

<p>FIXME. More (Debian-specific) content needed


<sect1 id="kernel-conf">Configuring kernel network features

<p>FIXME: Content missing

<p>Many features of the kernel can be modified while running by
echoing something into the <file>/proc</file> file system or by using
<prgn>sysctl</prgn>. By entering <tt>/sbin/sysctl -A</tt> you can see
what you can configure and what the options are, and it can be
modified running <tt>/sbin/sysctl -w variable=value</tt> (see <manref
section="8" name="sysctl">). Only in rare cases do you need to edit
something here, but you can increase security that way as well. For
example:

<!-- FIXME: Should the prefix on all of these be /proc/sys/? era -->

<example>
net/ipv4/icmp_echo_ignore_broadcasts = 1
</example>

<p>This is a <em>Windows emulator</em> because it acts like Windows on
broadcast ping if this option is set to 1. That is, ICMP_ECHO request
sent to the broadcast address will be ignored. Otherwise, it does
nothing.

<p>If you want to block any ICMP echo requests on your system, enable this
configuration option:

<example>
net/ipv4/icmp_echo_ignore_all = 0
</example>

<p>To log packets with impossible addresses (due to wrong routes) on your
network use:

<example>
/proc/sys/net/ipv4/conf/all/log_martians = 1
</example>

<p>For more information on what things can be done with
<file>/proc/sys/net/ipv4/*</file> read
<file>/usr/src/linux/Documentation/filesystems/proc.txt</file>. All
the options are describe thoroughly under
<file>/usr/src/linux/Documentation/networking/ip-sysctl.txt</file>
<footnote>In Debian the <package>kernel-image</package> package
installs the sources under <file>/usr/src/kernel-souce-2.X.X</file>,
just substitute <em>linux</em> to whatever kernel is
installed</footnote>.

<sect2 id="tcp-syncookies">Configuring Syncookies


<p>This option is a double-edged sword. On the one hand it protects
your system against syn flooding; on the other hand it violates
defined standards (RFCs).

<!-- What does this mean? (jfs)
This option is quite dumb as it floods the
other side like it floods you, so the other side is also busy. 
-->

<example>
net/ipv4/tcp_syncookies = 1
</example>

<p>If you want to change this option you each time the kernel is
working you need to change it in <tt>/etc/network/options</tt> by
setting <tt>syncookies=yes</tt>. This will take effect whener
<tt>/etc/init.d/networking</tt> is run (which is done at boot time)
whileas this will only work with the current running kernel:

<example>
echo 1 > /proc/sys/net/ipv4/tcp_syncookies 
</example>

<p>This option will only be available if the kernel is compiled with
the <tt>CONFIG_SYNCOOKIES</tt>. All Debian kernels are compiled with
this option builtin but you can verify it running:

<example>
$ sysctl -A |grep syncookies
net/ipv4/tcp_syncookies = 1
</example>

<p>For more information  on TCP syncookies read
<url id="http://cr.yp.to/syncookies.html">.

<sect1 id="net-harden">Securing the network on boot-time

<p>When setting configuration options for the kernel networking you need 
configure it so that it's loaded every time the system is restarted. The 
following example enables many of the previous options as well as other useful 
options.

<p>Create the script in <file>/etc/network/interface-secure</file>
(the name is given as an example) and call it from
<file>/etc/network/interfaces</file> like this:

<example>
auto eth0
iface eth0 inet static
        address xxx.xxx.xxx.xxx
        netmask 255.255.255.xxx
        broadcast xxx.xxx.xxx.xxx
        gateway xxx.xxx.xxx.xxx
        pre-up /etc/network/interface-secure

</example>

<example>
# Script-name: /etc/network/interface-secure
# Modifies some default behaviour in order to secure against 
# some TCP/IP spoofing & attacks
#
# Contributed by Dariusz Puchalak  
#
echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts 
                                           # broadcast echo protection enabled
echo 0 > /proc/sys/net/ipv4/ip_forward     # ip forwarding disabled
echo 1 > /proc/sys/net/ipv4/tcp_syncookies # TCP syn cookie protection enabled
echo 1 >/proc/sys/net/ipv4/conf/all/log_martians 
                                           # Log packets with impossible addresses
                         # but be careful with this on heavy loaded web servers
echo 1 > /proc/sys/net/ipv4/ip_always_defrag 
                                           #  defragging protection always enabled
echo 1 > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses 
                                           # bad error message protection enabled

# now ip spoofing protection
for f in /proc/sys/net/ipv4/conf/*/rp_filter; do
        echo 1 > $f
done

# and finally some more things:
# Disable ICMP Redirect Acceptance
for f in /proc/sys/net/ipv4/conf/*/accept_redirects; do
        echo 0 > $f
done

for f in /proc/sys/net/ipv4/conf/*/send_redirects; do
      echo 0 > $f
done

# Disable Source Routed Packets
for f in /proc/sys/net/ipv4/conf/*/accept_source_route; do
        echo 0 > $f
done

# Log Spoofed Packets, Source Routed Packets, Redirect Packets
for f in /proc/sys/net/ipv4/conf/*/log_martians; do
        echo 1 > $f
done
</example>

<p>You can also create a <tt>init.d</tt> script and have it run on
bootup (using <prgn>update-rc.d</prgn> to create the appropriate
<tt>rc.d</tt> links).

<sect1 id="kernel-fw">Configuring firewall features 

<p>In order to have firewall capabilities, either to protect the local
system or others <em>behind</em> it, the kernel needs to be compiled
with firewall capabilities. The standard Debian 2.2 kernel (also 2.2)
provides the packet filter <prgn>ipchains</prgn> firewall, Debian 3.0
standard kernel (kernel 2.4) provides the <em>stateful</em> packet
filter <prgn>iptables</prgn> (netfilter) firewall. Older Debian
distributions would need the appropriate kernel patch (Debian 2.1 uses
kernel 2.0.34).

<p>In any case, it is pretty easy to use a kernel different from the
one provided by Debian. You can find pre-compiled kernels as packages
you can easily install in the Debian system. You can also download the
kernel sources using the <package>kernel-source-X</package> and build
custom kernel packages using <package>make-kpkg</package>.

<p>Setting up firewalls in Debian is discussed more thoroughly in <ref
id="firewall-setup">.


<sect1 id="limit-bindaddr">Disabling weak-end hosts issues

<p>Systems with more than one interface on different networks
can have services configured so that they will bind only to 
a given IP address. This usually prevents services when requested
through a given address. However, this does not mean (although
it's a common misconception even I had) that the service is
bound to a given <em>hardware</em> address (interface card).
<footnote>
To reproduce this (example provided by Felix von Leitner on the
bugtraq mailing list):
<example>
   host a (eth0 connected to eth0 of host b):
     ifconfig eth0 10.0.0.1
     ifconfig eth1 23.0.0.1
     tcpserver -RHl localhost 23.0.0.1 8000 echo fnord

   host b:
     ifconfig eth0 10.0.0.2
     route add 23.0.0.1 gw 10.0.0.1
     telnet 23.0.0.1 8000
</example>
<p>It seems, however, not to work with services bound to
127.0.0.1, you might need to write the tests using raw sockets.</p>
</footnote>

<p>This is not an ARP issue and it's not an RFC violation (it's 
called <em>weak end host</em> in 
<url id="ftp://ftp.isi.edu/in-notes/rfc1122.txt" name="RFC1122">, 
section 3.3.4.2). 
Remember, IP addresses have nothing to do with physical interfaces.

<p>On 2.2 (and previous) kernels this can be fixed with:
<example>
# echo 1 > /proc/sys/net/ipv4/conf/all/hidden
# echo 1 > /proc/sys/net/ipv4/conf/eth0/hidden
# echo 1 > /proc/sys/net/ipv4/conf/eth1/hidden
.....
</example>
<p>On later kernels this can be fixed either with:
<list>
<item>iptables rules.
<item>properly configured routing.
<footnote>
The fact that this behaviour can be changed through routing
was described by Matthew G. Marsh in the bugtraq thread:
<example>
eth0 = 1.1.1.1/24
eth1 = 2.2.2.2/24

ip rule add from 1.1.1.1/32 dev lo table 1 prio 15000
ip rule add from 2.2.2.2/32 dev lo table 2 prio 16000

ip route add default dev eth0 table 1
ip route add default dev eth1 table 2
</example>
</footnote>
<item>kernel patching.
<footnote>
There are some patches available for this behaviour as
described in bugtraq's thread at
<url id="http://www.linuxvirtualserver.org/~julian/#hidden">
and <url id="http://www.fefe.de/linux-eth-forwarding.diff">.
</footnote>
</list>
<p>Along this text there will be many ocasions in which it
is shown how to configure some services (sshd server, apache, printer
service...) in order to have them listening on any given
address, the reader should take into account that, without 
the fixes given here, the fix would not prevent accesses from 
within the same (local) network.
<footnote>
An attacker might have many problems pulling the access through
after configuring the IP-address binding if he is not on the same
broadcast domain (same network) as the attacked host. If the attack
goes through a router it might be quite difficult for the answers
to return somewhere.
</footnote>

<p>FIXME: comments on bugtraq indicate there is a Linux
specific method to bind to a given interface.

<p>FIXME: Submit a bug against netbase so that the routing fix
is standard behaviour in Debian?


<sect1>Protecting against ARP attacks

<p>When you don't trust the other boxes on your LAN (which should
always be the case, because it's the safest attitude) you should
protect yourself from the various existing ARP attacks.

<p>As you know the ARP protocol is used to link IP addresses to MAC
addresses.  (see <url name="RFC826"
id="ftp://ftp.isi.edu/in-notes/rfc826.txt"> for all the
details). Every time you send a packet to an IP address an arp
resolution is done (first by looking into the local ARP cache then if
the IP isn't present in the cache by broadcasting an arp query) to
find the target's hardware address.  All the ARP attacks aim to fool
your box into thinking that box B's IP address is associated to the
intruder's box's MAC address; Then every packet that you want to send
to the IP associated to box B will be send to the intruder's box...

<p>
Those Attacks (Cache poisonning, ARP spoofing...) allow the attacker
to sniff the traffic even on switched networks, to easily hijack
connections, to disconnect any host from the network... Arp attacks
are powerful and simple to implement, several tools exists : arpspoof
(present in package <package>dsniff</package>), <url name="arpmim"
id="http://www.team-teso.net/releases/arpmim-0.2.tar.gz">, <url
name="arpoison" id="http://web.syr.edu/~sabuer/arpoison/">...
<!-- ~sabuer broken and unavailable in the new web site provided -->

<p>However, there is always a solution:

<list>

<item>Use a static arp cache.  You can set up "static" entries in your
arp cache :

<example>
arp -s host_name hdwr_addr 
</example> 

<p>By setting static entries for each important host in your network
you ensure that nobody will create/modify a (fake) entry for these
hosts (static entries don't expire and can't be modified) and spoofed
arp replies will be ignored.


<item>Detect suspicious ARP traffic. You can use
<package>arpwatch</package>, <package>karpski</package> or more
general IDS that can also detect suspicious arp traffic
(<package>snort</package>, <url name="prelude"
id="http://www.mandrakelinux.com/prelude">...).

<item>Implement IP traffic filtering validating the the MAC address.
</list>


<sect id="snapshot">Taking a snapshot of the system

<p>Before putting the system into production system you culd take a
snapshot of the whole system. This snapshot could be used in the event
of a compromise (see <ref id="after-compromise">). You should remake
this upgrade whenever the system is upgraded, specially if you upgrade
to a new Debian release.

<p>For this you can use a writable removable-media that can be set up
read-only, this could be a floppy disk (read protected after use) or a
CD on a CD-ROM unit (you could use a rewriteable CD-ROM so you could
even keep backups of md5sums in different dates).

<p>The following script creates such a snapshot:

<example>
#!/bin/bash
/bin/mount /dev/fd0 /mnt/floppy
/bin/cp /usr/bin/md5sum /mnt/floppy
echo "Calculating md5 database"
>/mnt/floppy/md5checksums.txt
for dir in /bin/ /sbin/ /usr/bin/ /usr/sbin/ /lib/ /usr/lib/
do
   find $dir -type f | xargs /usr/bin/md5sum >>/mnt/floppy/md5checksums-lib.txt
done
/bin/umout /dev/fd0
echo "post installation md5 database calculated"
</example>

<p>Note that the md5sum binary is placed on the floppy drive so it can
be used later on to check the binaries of the system (just in case it
gets trojaned). 

<p>The snapshot does not include the files under
<file>/var/lib/dpkg/info</file> which includes the md5 hashes of
installed packages (in files ended with <file>.md5sums</file>). You
could copy this information along too, however you should notice:

<list>
<item>the md5sums provided by the Debian packages include all the
files provided by them, which makes the database bigger (5 Mbs versus
600kbs in a Debian GNU/Linux system with graphical system and around
2.5 Gbs of software installed)

<item>not all Debian packages provide md5sums for the files installed
since it is not (currently) mandated policy.

</list>

<p>Once the snapshot is done you should make sure to set the medium
read-only. You can then store it for backup or place it in the drive
and use it to drive a <prgn>cron</prgn> check nightly comparing the original
md5sums against those on the snapshot.


<sect>Other recommendations
<sect1>Do not use software depending on svgalib

<p>
SVGAlib is very nice for console lovers like me, but in the past it
has been proven several times that it is very insecure. Exploits
against <prgn>zgv</prgn> were released, and it was simple to become
root. Try to prevent using SVGAlib programs wherever possible.  

<!-- FIXME: move this to policy section if there ever is one? -->



<chapt id="sec-services">Securing services running on your system

<p>Services can be secured in a running system in two ways:

<list>

<item>Making them only accessible in the access points (interfaces)
they need to be in.

<item>Configuring them properly so that they can only be used by
legitimate users in an authorised manner.

</list>

<p>Restricting services so that they can only be accessed from a given
place can be done by restricting access to them at the kernel
(i.e. firewall) level, configure them to listen only on a given
interface (some services might not provide this feature) or using some
other methods, for example the linux vserver patch (for 2.4.16) can be
used to force processes to use only one interface.

<p>Regarding the services running from <prgn>inetd</prgn> (<prgn>telnet</prgn>,
<prgn>ftp</prgn>, <prgn>finger</prgn>, <prgn>pop3</prgn>...) it is 
worth noting that <prgn>inetd</prgn> cannot be
configured so that services only listen on a given interface. However,
its substitute, the <prgn>xinetd</prgn> meta-daemon includes a
<tt>bind</tt> just for this matter. See <manref name="xinetd.conf"
section="5">.


<example>
service nntp
{
        socket_type     = stream
        protocol        = tcp
        wait            = no
        user            = news
        group           = news
        server          = /usr/bin/env
        server_args     = POSTING_OK=1 PATH=/usr/sbin/:/usr/bin:/sbin/:/bin
+/usr/sbin/snntpd logger -p news.info
        bind            = 127.0.0.1
} 
</example>

<p>The following sections detail how specific individual services can
be configured properly depending on their intended use.


<sect>Securing ssh
<p>
If you are still running telnet instead of ssh, you should take a
break from this manual and change this. Ssh should be used for all
remote logins instead of telnet. In an age where it is easy to sniff
internet traffic and get cleartext passwords, you should use only
protocols which use cryptography. So, perform an <tt>apt-get install
ssh</tt> on your system now.  

<p>Encourage all the users on your system to use ssh instead of
telnet, or even better, uninstall telnet/telnetd. In addition you
should avoid logging into the system using ssh as root and use
alternative methods to become root instead, like <prgn>su</prgn> or
<prgn>sudo</prgn>. Finally, the <file>sshd_config</file> file, in
<file>/etc/ssh</file>, should be modified to increase security as
well:

<list>
<item><tt>ListenAddress 192.168.0.1</tt> <p>Have ssh listen only on a
given interface, just in case you have more than one (and do not want
ssh available on it) or in the future add a new network card (and
don't want ssh connections from it).

<item><tt>PermitRootLogin No</tt>

<p>Try not to permit Root Login wherever possible. If anyone wants to
become root via ssh, now two logins are needed and the root password
cannot be brute forced via SSH.

<item><tt>Listen 666</tt>

<p>Change the listen port, so the intruder cannot be completely sure
whether a sshd daemon runs (be forewarned, this is security by
obscurity).

<item><tt>PermitEmptyPasswords no</tt>
<p>Empty passwords make a mockery of system security.

<item><tt>AllowUsers alex ref me@somewhere</tt>
<p>Allow only certain users to have access via ssh to this
machine. <tt>user@host</tt> can also be used to restrict a given user
from accessing only at a given host.

<item><tt>AllowGroups wheel admin</tt>
<p>Allow only certain group members to have access via ssh to this
machine.  AllowGroups and AllowUsers have equivalent directives for
denying access to a machine. Not surprisingly they are called
"DenyUsers" and "DenyGroups".

<item><tt>PasswordAuthentication yes</tt>

<p>It is completely your choice what you want to do. It is more secure
to only allow access to the machine from users with ssh-keys placed in
the ~/.ssh/authorized_keys file. If you want so, set this one to "no".
<!-- FIXME: what does this mean? Is it "more secure" to set this to
"no"? (era) --> <!-- jfs, IMHO yes since you place the key of the
incoming host in your server and the authentication is done against
the key -->

<item>Disable any forms of authentication you do not really need, if
you do not use, for example <tt>RhostsRSAAuthentication</tt>,
<tt>HostbasedAuthentication</tt>, <tt>KerberosAuthentication</tt> or
<tt>RhostsAuthentication</tt> (for example) you should disable them,
even if they are already by default (see the manpage <manref
name="sshd_config" section="5">).

<item><tt>Protocol 2</tt>
<p>Disable the protocol version 1, since it has some design
flaws that make it easier to crack passwords. For more information
read <url id="http://paris.cs.berkeley.edu/~dawnson/papers/ssh-timing.pdf"
name="a paper regarding ssh protocol problems"> or the 
<url id="http://xforce.iss.net/static/6449.php" name="Xforce advisory">.

<item><tt>Banner /etc/some_file</tt>
<p>Add a banner (it will retrieved from the file) to users connecting
to the ssh server, in some countries sending a warning before access
to a given system warning about unauthorised access or user monitoring
should be added to have legal protection.

</list>

<p>You can also restrict access to the ssh server using
<tt>pam_listfile</tt> or <tt>pam_wheel</tt> in the PAM control file
for ssh to restrict ssh logins. For example, you could keep anyone not
listed in <file>/etc/loginusers</file> by adding this line to
<file>/etc/pam.d/ssh</file>:

<example>
auth       required     pam_listfile.so sense=allow onerr=fail item=user file=/etc/loginusers
</example>

<p>As a final note, be aware that these directives are from a OpenSSH
configuration file. Right now, there are three commonly used SSH
daemons, ssh1, ssh2, and OpenSSH by the OpenBSD people. Ssh1 was the
first ssh daemon available and it is still the most commonly used
(there are rumors that there is even a Windows port). Ssh2 has many
advantages over ssh1 except it is released under a closed-source
license. OpenSSH is completely free ssh daemon, which supports both
ssh1 and ssh2. OpenSSH is the version installed on Debian when the
package <package>ssh</package> is chosen.

<p>You can read more information on how to set up SSH with PAM support
in the <url
id="http://lists.debian.org/debian-security/2001/debian-security-200111/msg00395.html"
name="security mailing list archives">.

<sect1 id="ssh-chroot">Chrooting ssh
<p>

<p>Currently OpenSSH does not provide a way to chroot automatically
users upon connection (the commercial version does provide this
functionality). However there is a project to provide this
functionality for OpenSSH too, see <url
id="http://chrootssh.sourceforge.net">, it is not currently packaged
for Debian, though. You could use, however, the
<file>pam_chroot</file> module as described in <ref
id="user-restrict">.

<p>In <ref id="chroot-ssh-env"> you can several options to make
chroot environment for SSH.

<sect1>Ssh clients

<p>If you are using an SSH client against the SSH server you must make sure 
that it supports the same protocols that are enforced on the server.
For example, if you use the <package>mindterm</package> package, it
only supports protocol version 1. However, the sshd server is, by 
default, configured to only accept version 2 (for security reasons).

<sect1>Disallowing file transfers

<p>If you do <em>not</em> want users to transfer files to and from the
ssh server you need to restrict access to the <prgn>sftp-server</prgn>
<em>and</em> the <prgn>scp</prgn> access. You can restrict
<prgn>sftp-server</prgn> by configuring the proper <tt>Subsystem</tt>
in the <file>/etc/ssh/sshd_config</file>. However, to restrict
<prgn>scp</prgn> access, however, you must either:

<list>

<item>disallow users from login to the ssh server (as described
above either through the configuration file or PAM configuration).

<item>do not give valid shells to users which are not allowed secure
transfers. The shells provided, however, should be programs that would
make connecting to the ssh server was useful at all, such as menu
<!-- FIXME: What do you mean with "was useful at all" ? -->
programs (ala BBS). Otherwise the previous option is preferred.

</list>

<sect>Securing Squid

<p>
Squid is one of the most popular proxy/cache server, and there are
some security issues that should be taken into account.  Squid's
default configuration file denies all users requests.  However the
Debian package allows access from 'localhost', you just need to
configure your browser properly.  You should configure Squid to allow
access to trusted users, hosts or networks defining an Access Control
List on <file>/etc/squid.conf</file>, see the <url name="Squid User's
Guide" id="http://squid-docs.sourceforge.net/latest/html/book1.html">
for more information about defining ACLs rules. Notice that Debian
provides a minimum configuration for Squid that will prevent anything,
except from <em>localhost</em> to connect to your proxy server (which
will run in the default port 3128)
You will need to customise your  <file>/etc/squid.conf</file> as needed.
The recommended minimum configuration (provided with the package)
is shown below:

<example>
acl all src 0.0.0.0/0.0.0.0
acl manager proto cache_object
acl localhost src 127.0.0.1/255.255.255.255
acl SSL_ports port 443 563
acl Safe_ports port 80          # http
acl Safe_ports port 21          # ftp
acl Safe_ports port 443 563     # https, snews
acl Safe_ports port 70          # gopher
acl Safe_ports port 210         # wais
acl Safe_ports port 1025-65535  # unregistered ports
acl Safe_ports port 280         # http-mgmt
acl Safe_ports port 488         # gss-http
acl Safe_ports port 591         # filemaker
acl Safe_ports port 777         # multiling http
acl Safe_ports port 901         # SWAT
acl purge method PURGE
acl CONNECT method CONNECT
(...)
# Only allow cachemgr access from localhost
http_access allow manager localhost
http_access deny manager
# Only allow purge requests from localhost
http_access allow purge localhost
http_access deny purge
# Deny requests to unknown ports
http_access deny !Safe_ports
# Deny CONNECT to other than SSL ports
http_access deny CONNECT !SSL_ports
#
# INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS
#
http_access allow localhost
# And finally deny all other access to this proxy
http_access deny all
#Default:
# icp_access deny all
#
#Allow ICP queries from eveyone
icp_access allow all
</example>

<p>You should also configure Squid based on your system resources, including
cache memory (option <tt>cache_mem</tt>), location of the cached files
and the amount of space they will take up on disk (option <tt>cache_dir</tt>).

<p>Notice that, if not properly configured, someone may relay a mail message 
through Squid, since the HTTP and SMTP protocols are designed similarly.
Squid's default configuration file denies access to port 25. If you wish 
to allow connections to port 25 just add it to Safe_ports
lists. However, this is <em>NOT</em> recommended.

<p>Setting and configuring the proxy/cache server properly is only part
of keeping your site secure. Another necessary task is to 
analyse Squid's logs to assure that all things are working as they should 
be working. There are some packages in Debian GNU/Linux that can help
an administrator to do this.
The following packages are available in woody (Debian 3.0):

<list>
<item><package>calamaris</package> - Log analyzer for Squid or Oops proxy log 
files.
<item><package>modlogan</package>  - A modular logfile analyzer.
<!-- This one is no longer available?
<item><package>sarg</package> - Squid Analysis Report Generator.
-->
<item><package>squidtaild</package> - Squid log monitoring program.
</list>

<p>When using Squid in Accelerator Mode it acts as a web server
too. Turning on this option code complexity increases, making it less
reliable. By default Squid is not configured to act as a web server,
so you don't need to worry about this. Note that if you want to use
this feature be sure that it is really necessary. Too find more
information about Accelerator Mode on Squid see the <url name="Squid
User's Guide #Chapter9"
id="http://squid-docs.sourceforge.net/latest/html/c2416.html">.

<sect id="ftp-secure">Securing FTP

<p>
If you really have to use FTP (without wrapping it with sslwrap or
inside a SSL or SSH tunnel), you should chroot ftp into the ftp users'
home directory, so that the user is unable to see anything else than
their own directory. Otherwise they could traverse your root
file system just like if they had a shell in it. You can add the
following line in your <file>proftpd.conf</file> in your global
section to enable this chroot feature:

<example>
DefaultRoot ~
</example>

<p>Restart proftpd by <tt>/etc/init.d/proftpd restart</tt> and check
whether you can escape from your homedir now.

<P>To prevent Proftp DoS attacks using ../../.., add the following line in 
<file>/etc/proftpd.conf</file>:

<tt>DenyFilter \*.*/</tt>

<p>Always remember that FTP sends login and authentication passwords
in clear text (this is not an issue if you are providing an anonymous
public service) and there are better alternatives in Debian for
this. For example, <prgn>sftp</prgn> (provided by
<package>ssh</package>). There are also free implementations of SSH
for other operating systems: <url
id="http://www.chiark.greenend.org.uk/~sgtatham/putty/" name="putty">
and <url id="http://www.cygwin.com" name="cygwin"> for example.

<!-- contributed by Jesus Climent --> 
<p>However, if you still maintain the FTP server while making users
access through SSH you migh encounter a typical problem.  Users
accessing Anonymous FTP servers inside SSH-secured systems might try
to log in the <em>FTP server</em>. While the access will be refused,
the password will nevertheless be sent through the net in clear
form. To avoid that, ProFTPd developer TJ Saunders has created a patch
that prevents users feeding the anonymous FTP server with valid SSH
acounts.  More information and patch available at: <url
id="http://www.castaglia.org/proftpd/#Patches" name="ProFTPD
Patches">. This patch has been reported to Debian too, see
<url id="http://bugs.debian.org/145669" name="Bug #145669">.

<sect>Securing access to the X Window System
<p>
Today, X terminals are used by more and more companies where one
server is needed for a lot of workstations. This can be dangerous,
because you need to allow the file server to connect to the clients (X
server from the X point of view. X switches the definition of client
and server).  If you follow the (very bad) suggestion of many docs,
you type <tt>xhost +</tt> on your machine. This allows any X client to
connect to your system. For slightly better security, you can use the
command <tt>xhost +hostname</tt> instead to only allow access from
specific hosts.

<p>
A much more secure solution, though, is to use ssh to tunnel X and
encrypt <!-- FIXME: add "and compress" --> the whole session. This is
done automatically when you ssh to another machine. 

<!-- This has to be enabled in <file>/etc/ssh/ssh_config</file> by -->
<!-- setting <tt>X11Forwarding</tt> to <tt>yes</tt>. -->

For this to work, you have to configure both the ssh client and the
ssh server. On the ssh client, <tt>ForwardX11</tt> should be set to
<tt>yes</tt> in <file>/etc/ssh/ssh_config</file>. On the ssh server,
<tt>X11Forwarding</tt> should be set to <tt>yes</tt> in
<file>/etc/ssh/sshd_config</file> and the package
<package>xbase-clients</package> should be installed because the ssh
server uses <file>/usr/X11R6/bin/xauth</file> when setting up the
pseudo X display.
<!-- discovered this when setting up two minimally installed boxes -->

In times of SSH, you should drop the xhost based access control
completely. 
<!-- FIXME: check. The text said "has to be disabled" [sic] -->

<p>
For best security, if you do not need X access from other machines, is
to switch off the binding on tcp port 6000 simply by typing:

<example>$ startx -- -nolisten tcp</example>


<p>This is the default behavior in Xfree 4.1.0 (the Xserver provided in
Debian 3.0). If you are running Xfree 3.3.6 (i.e. you have Debian 2.2
installed) you can edit <file>/etc/X11/xinit/xserverrcc</file> to have
it something along the lines of:

<example>
#!/bin/sh
exec /usr/bin/X11/X -dpi 100 -nolisten tcp
</example>

<p>If you are using XDM set <file>/etc/X11/xdm/Xservers</file> to:
<tt>:0 local /usr/bin/X11/X vt7 -dpi 100 -nolisten tcp</tt>. If you
are using Gdm make sure that the <tt>-nolisten tcp</tt> option is set
in the <file>/etc/gdm/gdm.conf</file> (which is the default in Debian)
such as this:

<example>
[server-Standard]
name=Standard Server
command=/usr/bin/X11/X -nolisten tcp
</example>

<p>You can also set the default's system timeout for
<prgn>xscreensaver</prgn> locks. Even if the user can override it, you
should edit the <file>/etc/X11/app-defaults/XScreenSaver</file>
configuration file and change the lock line:
<example>
*lock:                  False
</example>
<p>(which is the default in Debian) to:
<example>
*lock:                  True
</example>

<p>FIXME: add information on how to disable the screensavers which
show the user desktop (which might have sensitive information).

<p>Read more on X Window security in
<url
name="XWindow-User-HOWTO"
id="http://www.tldp.org/HOWTO/XWindow-User-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/XWindow-User-HOWTO.txt.gz</file>).


<p>FIXME: Add info on thread of debian-security on how to change config files
of XFree 3.3.6 to do this.  

<sect1>Check your display manager
<p>
If you only want to have a display manager installed for local usage
(having a nice graphical login, that is), make sure the XDMCP (X
Display Manager Control Protocol) stuff is disabled. In XDM you can do
this with this line in <tt>/etc/X11/xdm/xdm-config</tt>:

<example>
DisplayManager.requestPort:     0
</example>

<p>Normally, all display managers are configured not to start XDMCP services
per default in Debian.


<sect>Securing printing access (The lpd and lprng issue)

<p>Imagine, you arrive at work, and the printer is spitting out
endless amounts of paper because someone is DoSing your line printer
daemon. Nasty, isn't it?  

<!-- Info based on Dale Southard's post to debian-security april 11th 2002-->
<p>In any unix printing architecture, there has to be a way to get the
client's data to the host's print server.  In traditional <prgn>lpr</prgn> 
and <prgn>lp</prgn>, the client command copies or symlinks the data 
into the spool directory (which is why these programs is usually SUID or SGID).

<p>In order to avoid any issues you should keep your printer servers specially
secure. This means you need to configure your printer service so it
will only allow connections from a set of trusted servers.  In order
to do this, add the servers you want to allow printing to your
<file>/etc/hosts.lpd</file>.

<p>However, even if you do this, the <prgn>lpr</prgn> daemon accepts incoming
connections on port 515 of any interface. You should consider
firewalling connections from networks/hosts which are not allowed
printing (the <prgn>lpr</prgn> daemon cannot be limited to listen only on 
a given IP address). 

<!-- FIXME
<p>Of course, you could also take the lpr/lprng sources
and change them so that the connect function is only done to "127.0.0.1".
apt-get source lpr
and patch the bind (finet) call
-->

<p><prgn>Lprng</prgn> should be preferred over <prgn>lpr</prgn>
since it can be configured to do IP access control. And you 
can specify which interface to bind to (although somewhat weirdly).

<!-- FIXME: ask Craig Small about his post in debian-private 19th october 2001 
-->

<p>If you are using a printer in your system, but only locally, you 
will not want to share this service over a network. You can consider
using other printing systems, like the one provided by <package>cups</package>
or <url name="PDQ"
id="http://pdq.sourceforge.net/"> which is based on user
permissions of the <file>/dev/lp0</file> device.

<p>In <package>cups</package>, the print data is transferred to the server 
via the http protocol.  This means the client program doesn't need any special
privileges, but does require that the server be listening on a port
somewhere.

<p>However, if you want to use <prgn>cups</prgn>, but only locally,
you can configure it to bind to the
loopback interface by changing <file>/etc/cups/cupsd.conf</file>:

<example>
Listen 127.0.0.1:631
</example>

<P>There are many other security options like allowing or denying 
networks and hosts in this config file. However, if you do not need
them you might be better off just limiting the listening port.
<prgn>Cups</prgn> also serves documentation through the HTTP port,
if you do not want to disclose potential useful information to
outside attackers (and the port is open) add also:

<example>
&lt;Location /&gt;
  Order Deny,Allow
   Deny From All
    Allow From 127.0.0.1
&lt;/Locationi&gt;
</example>

<p>This configuration file can be modified to add some more features
including SSL/TLS certificates and crypto.  The manuals are available 
at http://localhost:631/ or at <url id="cups.org">.  

<P>FIXME: Add more content (the article on <url name="Amateur Fortress
Building" id="http://www.rootprompt.org"> provides some very
interesting views).  

<p>FIXME: Check if PDG is available in Debian, and if so,
suggest this as the preferred printing system.

<p>FIXME: Check if Farmer/Wietse has a replacement for printer daemon
and if it's available in Debian.

<sect>Securing the mail service

<p>If your server is not a mailing system, you do not really need to
have a mail daemon listening for incoming connections, but you might
want local mail delivered in order, for example, to receive mail for
the root user from any alert systems you have in place.

<p>If you have <prgn>exim</prgn> you do not need the daemon to be
working in order to do this since the standard <prgn>cron</prgn> job flushes 
the mail queue. See <ref id="disableserv"> on how to do this.

<sect1>Configuring a Nullmailer

<p>You might want to have a local mailer daemon so that it can relay
the mails sent locally to another system. This is common when you have
to administer a number of systems and do not want to connect to each
of them to read the mail sent locally. Just as all logging of each
individual system can be centralised by using a central syslog server,
mail can be sent to a central mailserver.

<p>Such a <em>relay-only</em> system should be configured properly for
this. The daemon could, as well, be configured to only listen on the
loopback address.

<p>To do this in a Debian system, you will have to remove the smtp
daemon from <prgn>inetd</prgn>:
<example>
$ update-inetd --disable smtp
</example>

<p>and configure the mailer daemon to only listen on the loopback
interface.  In <prgn>exim</prgn> (the default MTA) you can do this by
editing the file <file>/etc/exim.conf</file> and adding the following
line:

<example>
local_interfaces = "127.0.0.1"
</example>

<p>Restart both daemons (inetd and exim) and you will have exim
listening on the 127.0.0.1:25 socket only. Be careful, and first
disable inetd, otherwise, exim will not start since the inetd daemon
is already handling incoming connections.

<p>For <prgn>postfix</prgn> edit <file>/etc/postfix/main.conf</file>:

<example>
inet_interfaces = localhost
</example>

<p>If you only want local mail, this approach is better than
tcp-wrapping the mailer daemon or adding firewalling rules to limit
anybody accessing it.  However, if you do need it to listen on other
interfaces, you might consider launching it from inetd and adding a
tcp wrapper so incoming connections are checked against
<file>/etc/hosts.allow</file> and <file>/etc/hosts.deny</file>.  Also,
you will be aware of when an unauthorized access is attempted against
your mailer daemon, if you set up proper logging for any of the
methods above.

<p>In any case, to reject mail relay attempts at the SMTP level, you
can change <file>/etc/exim/exim.conf</file> to include:

<example>
receiver_verify = true
</example>

<p>Even if your mail server will not relay the message, this kind of
configuration is needed for the relay tester at <url
id="http://www.abuse.net/relay.html"> to determine that your server is
<em>not</em> relay capable.

<p>If you want a relay-only setup, however, you can consider changing
the mailer daemon to programs that can <em>only</em> be configured to
forward the mail to a remote mail server. Debian provides currently
both <package>ssmtp</package> and <package>nullmailer</package> for
this purpose. In any case, you can evaluate for yourself any of the
mail transport agents 
<footnote>
To retrieve the list of mailer daemons available in Debian try:
<example>
$ apt-cache search mail-transport-agent
</example>
<p>The list will not include <prgn>qmail</prgn>, which is distributed
only as source code in the <package>qmail-src</package> package.
</footnote>
provided by Debian and see which one suits best to the system's
purposes.

<sect1>Providing secure access to mailboxes

<p>If you want to give remote access to mailboxes there are a number
of POP3 and IMAP daemons available
<footnote>A list of servers/daemons which support these
protocols in Debian can be retrieved with:
<example>
$ apt-cache search pop3-server
$ apt-cache search imap-server
</example>
</footnote>
. However, if you provide IMAP access note that it is a general file
access protocol, it can become the equivalent of a shell access
because users might be able to retrieve any file that they can
through it.

<p>Try, for example, to configure as your inbox path
<tt>{server.com}/etc/passwd</tt> if it succeeds your IMAP daemon is
not properly configured to prevent this kind of access.

<p>Of the IMAP servers in Debian the <prgn>cyrus</prgn> server (in the
<package>cyrus-imapd</package> package) gets around this by having all
access be to a database in a restricted part of the file system. Also,
<prgn>uw-imapd</prgn> (either install the <package>uw-imapd</package>
or better, if your IMAP clients support it,
<package>uw-imapd-ssl</package>) can be configured to chroot the users
mail directory but this is not enabled by default. The documentation
provided gives more information on how to configure it.

<p>Also, you might want to run an IMAP server that does not need valid
users to be created on the local system (which would grant shell
access too), both <package>courier-imap</package> (for IMAP) and
<package>courier-pop</package> <package>teapop</package> (for POP3)
and <package>cyrus-imapd</package> (for both POP3 and IMAP) provide
servers with authentication methods beside the local user
accounts. <prgn>cyrus</prgn> can use any authentication method that
can be configured through PAM whileas <prgn>teapop</prgn> might use
databases (such as <package>postgresql</package> and
<package>mysql</package>) for user authentication.


<p>FIXME: Check: <package>uw-imapd</package> might be configured with
user authentication through PAM too..

<sect1>Receiving mail securely
<p>
Reading/receiving mail is the most common cleartext protocol. If you
use either POP3 or IMAP to get your mail, you send your cleartext
password across the net, so almost anyone can read your mail from now
on. Instead, use SSL (Secure Sockets Layer) to receive your mail. The
other alternative is ssh, if you have a shell account on the box which
acts as your POP or IMAP server.  Here is a basic <file>fetchmailrc</file> to
demonstrate this:

<example>
poll my-imap-mailserver.org via "localhost"
  with proto IMAP port 1236
      user "ref" there with password "hackme" is alex here warnings 3600
    folders
      .Mail/debian
    preconnect 'ssh -f -P -C -L 1236:my-imap-mailserver.org:143 -l ref
     my-imap-mailserver.org sleep 15 &lt;/dev/null &gt; /dev/null'
</example>

<p>The preconnect is the important line. It fires up a ssh session and
creates the necessary tunnel, which automatically forwards connections
to localhost port 1236 to the IMAP mail server, but encrypted. Another
possibility would be to use fetchmail with the ssl feature.

<p>If you want to provide encrypted mail services like POP and IMAP,
<tt>apt-get install stunnel</tt> and start your daemons this way:

<example>
stunnel -p /etc/ssl/certs/stunnel.pem -d pop3s -l /usr/sbin/popd
</example>


<p>This command wraps the provided daemon (-l) to the port (-d) and uses the
specified ssl cert (-p).



<sect id="sec-bind">Securing BIND

<p>There are different issues that can be tackled in order to secure the 
Domain server daemon, which are similar to the ones considered when securing 
any given service:

<list>

<item>configuring the daemon itself properly so it cannot be misused
from the outside (see <ref id="configure-bind">) 
This includes limiting possible queries from
clients: zone transfers and recursive queries.

<item>limit the access of the daemon to the server itself so if it is
used to break in, the damage to the system is limited. This includes
running the daemon as a non-privileged user (see <ref id="user-bind">)
and chrooting it (see <ref id="chroot-bind">)

</list>

<sect1 id="configure-bind">Bind configuration to avoid misuse 

<p>You should restrict some of the information that is served from the
DNS server to outside clients so that it cannot be used to retrieve
valuable information from your organization that you do not want to
give away. This includes adding the following options:
<em>allow-transfer</em>, <em>allow-query</em>,
<em>allow-recursion</em> and <em>version</em>. You can either limit this on 
the global section (so it applies to all the zones served) or on a per-zone
basis. This information is documented on the
<package>bind-doc</package> package, read more on this on
<file>/usr/share/doc/bind/html/index.html</file> once the package is
installed.

<p>Imagine that your server is connected to the Internet and to your
internal (your internal IP is 192.168.1.2) network (a basic
multi-homed server), you do not want to give any service to the
Internet and you just want to enable DNS lookups from your internal
hosts. You could restrict it by including in
<file>/etc/bind/named.conf</file>:

<example>
options {
	    allow-query { 192.168.1/24; } ;
	    allow-transfer { none; } ; 
	    allow-recursion { 192.168.1/24; } ;
	    listen-on { 192.168.1.2; } ;
	    forward { only; } ;
	    forwarders { A.B.C.D; } ;
};
</example>

<p>The <em>listen-on</em> option makes the DNS bind to only the
interface that has the internal address, but, even if this interface
is the same as the interface that connects to the Internet (if you are
using NAT, for example), queries will only be accepted if coming from
your internal hosts. If the system has multiple interfaces and the
<em>listen-on</em> is not present, only internal users could query,
but, since the port would be accessible to outside attackers, they
could try to crash (or exploit buffer overflow attacks) on the DNS
server. You could even make it listen only on 127.0.0.1 if you are not
giving DNS service for any other systems than yourself.
</p>

<p>
The version.bind record in the chaos class contains the version of the
currently running bind process. This information is often used by
automated scanners and malicious individuals who wish to determine if
one's bind is vulnerable to a specific attack. By providing false or
no information in the version.bind record, one limits the probability
that one's server will be attacked based on its published version.
To provide your own version, use the <em>version</em> directive in the
following manner: <example> options { ... various options here ...
version "Not available."; }; </example>

<p>Changing the version.bind record does not provide actual protection
against attacks, but it might be considered a useful safeguard.
</p>

<p>A sample <file>named.conf</file> configuration file might be the
following:

<example>
acl internal {
        127.0.0.1/32;           // localhost
        10.0.0.0/8;             // internal
        aa.bb.cc.dd;            // eth0 IP
};

acl friendly {
        ee.ff.gg.hh;            // slave DNS
        aa.bb.cc.dd;            // eth0 IP
        127.0.0.1/32;           // localhost
        10.0.0.0/8;             // internal
};

options {
        directory "/var/cache/bind";
        allow-query { internal; };
        allow-recursion { internal; };
        allow-transfer { none; };
};
// From here to the mysite.bogus zone 
// is basically unmodified from the debian default
logging {
        category lame-servers { null; };
        category cname { null; };   
};

zone "." {
        type hint;
        file "/etc/bind/db.root";
};

zone "localhost" {
        type master;
        file "/etc/bind/db.local";
};

zone "127.in-addr.arpa" {
        type master;
        file "/etc/bind/db.127";
};

zone "0.in-addr.arpa" {
        type master;
        file "/etc/bind/db.0";
};

zone "255.in-addr.arpa" {
        type master;
        file "/etc/bind/db.255";
};

// zones I added myself
zone "mysite.bogus" {
        type master;
        file "/etc/bind/named.mysite";
        allow-query { any; };
        allow-transfer { friendly; };
};
</example>

<P>Please (again) check the Bug Tracking System regarding Bind,
specifically <url name="Bug #94760 (regarding ACLs on zone transfers)"
id="http://bugs.debian.org/94760">. Feel free to contribute to the bug
report if you think you can add useful information.

<sect1 id="user-bind">Changing BIND's user

<p>Regarding limiting BIND's privileges you must be aware that if a
non-root user runs BIND, then BIND cannot detect new interfaces
automatically, for example when you put a PCMCIA card into your
laptop.  Check the README.Debian file in your named documentation
(<file>/usr/share/doc/bind/README.Debian</file>) directory for more
information about this issue.  There have been many recent security
problems concerning BIND, so switching the user is useful when
possible. We will detail here the steps needed in order to do this,
however, if you want to do this in an automatic way you might try the
script provided in <ref id="bind-chuser">.

<p>To run BIND under a different user, first create a separate user and
group for it (it is <em>not</em> a good idea to use nobody or nogroup
for every service not running as root). In this example, the user and
group <tt>named</tt> will be used. You can do this by entering:
<example>
addgroup named
adduser --system --home /home/named --no-create-home --ingroup named \
      --disabled-password --disabled-login named
</example>

<p>Notice that the user <tt>named</tt> will be quite restricted. If you 
want, for whatever reason, to have a less restrictive setup use:
<example>
adduser --system --ingroup named named
</example>


<p>Now edit <tt>/etc/init.d/bind</tt> with your favorite editor and change the
line beginning with
<example>
start-stop-daemon --start
</example>

to

<example>
start-stop-daemon --start --quiet --exec /usr/sbin/named -- -g named -u named
</example>

<p>Also, in order to avoid running anything as root, change the
<tt>reload</tt> line commenting out:

<example>
reload)
       /usr/sbin/ndc reload
</example>

<p>And change it to:
<example>
reload)
        $0 stop
        sleep 1
        $0 start
</example>

<p>Note: Depending on your Debian version you might have to change the
<tt>restart</tt> line too. This was fixed in Debian's bind version
<tt>1:8.3.1-2</tt>.

<p>
All you need to do now is to restart bind via '/etc/init.d/bind
restart', and then check your syslog for two entries like this:
<p>
<example>
Sep  4 15:11:08 nexus named[13439]: group = named
Sep  4 15:11:08 nexus named[13439]: user = named
</example>


<p>Voilá! Your named now <em>does not</em> run as root.  If you want
to read more information on why BIND does not run as non-root user on
Debian systems, please check the Bug Tracking System regarding Bind,
specifically <url name="Bug #50013: bind should not run as root"
id="http://bugs.debian.org/50013"> and
<url name="Bug #132582: Default install is potentially insecure"
id="http://bugs.debian.org/132582">, 
<url name="Bug #53550" id="http://bugs.debian.org/53550">, 
<url name="Bug #128120" id="http://bugs.debian.org/52745">, and
<url name="Bug #128120" id="http://bugs.debian.org/128129">. 
Feel free to contribute to the bug
reports if you think you can add useful information.


<sect1 id="chroot-bind">Chrooting the name server

<p>To achieve maximum BIND security, now build a chroot jail (see <ref
id="chroot">) around your daemon.  There is an easy way to do this:
the <tt>-t</tt> option (see the <manref name="named" section="8"> 
manpage or page 100 of 
<url id="http://www.nominum.com/content/documents/bind9arm.pdf"
name="Bind's 9 documentation (PDF)">). This will make Bind chroot itself into the given directory
without you needing to set up a chroot jail and worry about dynamic
libraries. The only files that need to be in the chroot jail are:

<example>
dev/null
etc/bind/       - should hold named.conf and all the server zones
sbin/named-xfer - if you do name transfers
var/run/named/  - should hold the pid and the name server cache (if
                 any) this directory needs to be writable by named
                  user
var/log/named   - if you set up logging to a file, needs to be writable
                  for the named user
dev/log         - syslogd should be listening here if named is configure to
                  log through it
</example>


<p>In order for your Bind daemon to work properly it needs permission
in the named files. This is an easy task since the configuration
files are always at <tt>/etc/named/</tt>. Take into account that
it only needs read-only access to the zone files, unless it is
a secondary or cache name server. If this is your case you will have
to give read-write permissions to the necessary zones (so that
zone transfers from the primary server work).

<p>Also, you can find more information regarding Bind chrooting in the
<url name="Chroot-BIND-HOWTO"
id="http://www.tldp.org/HOWTO/Chroot-BIND-HOWTO.html"> (regarding
Bind 9) and <url name="Chroot-BIND8-HOWTO"
id="http://www.tldp.org/HOWTO/Chroot-BIND8-HOWTO.html"> (regarding
Bind 8). This same documents should be available through the
installation of the <package>doc-linux-text</package> (text version)
or <package>doc-linux-html</package> (html version). Another useful
document is <url id="http://www.psionic.com/papers/dns/dns-linux">.

<p>If you are setting up a full chroot jail (i.e. not just
<tt>-t</tt>) for Bind 8.2.3 in Debian (potato), make sure you have the
following files in it:

<example>
dev/log - syslogd should be listening here
dev/null
etc/bind/named.conf 
etc/localtime
etc/group - with only a single line: "named:x:GID:"
etc/ld.so.cache - generated with ldconfig   
lib/ld-2.1.3.so
lib/libc-2.1.3.so
lib/ld-linux.so.2 - symlinked to ld-2.1.3.so  
lib/libc.so.6 - symlinked to libc-2.1.3.so
sbin/ldconfig - may be deleted after setting up the chroot
sbin/named-xfer - if you do name transfers
var/run/
</example>

<p>And modify also <prgn>syslogd</prgn> listen on $CHROOT/dev/log so
the named server can write syslog entries into the local system log.

<p>If you want to avoid problems with dynamic libraries, you can
compile bind statically. You can use <prgn>apt-get</prgn> for this,
with the <tt>source</tt> option. It can even download the packages you
need to properly compile it. You would need to do someting similar to:

<!-- FIXME: Does bind use autoconf? -->
<example>
$ apt-get --download-only source bind build-dep bind
$ cd bind-8.2.5-2
(edit the Makefile.in so CFLAGS includes the '-static' option 
before the @CFLAGS@ definition substituted by autoconf)
$ dpkg-buildpackage -rfakeroot
$ cd ..
$ dpkg  -i bind-8.2.5-2*deb
</example>

<p>After installation, you will need to move around the files to the
chroot jail 
<footnote>unless you use the <tt>instdir</tt> option when calling
<prgn>dpkg</prgn> but then the chroot jail might be a little more
complex</footnote>
you can keep the <tt>init.d</tt> scripts in <file>/etc/init.d</file>
so that the system will automatically start the name server, but edit
them to add <tt>--chroot /location_of_chroot</tt> in the calls to
<prgn>start-stop-daemon</prgn> in those scripts.

<p>For more information on how to set up chroots see <ref id="chroot">.

<p>FIXME, merge info from
<url id="http://people.debian.org/~pzn/howto/chroot-bind.sh.txt">,
<url id="http://people.pdxlinux.org/~karlheg/"> (Bind9 on Debian),
<url id="http://www.cryptio.net/~ferlatte/config/"> (Debian-specific),
<url id="http://www.psionic.com/papers/whitep01.html">, 
<url id="http://csrc.nist.gov/fasp/FASPDocs/NISTSecuringDNS.htm">
and
<url id="http://www.acmebw.com/papers/securing.pdf">.

<sect>Securing Apache

<p>FIXME: Add content: modules provided with the normal Apache installation
(under /usr/lib/apache/X.X/mod_*) and modules that can be installed 
separately in libapache-mod-XXX packages.

<p>You can limit access to the Apache server if you only want to use
it internally (for testing purposes, to access the 
<package>doc-central</package>
archive, etc..) and do not want outsiders to access it. To do this use the 
<tt>Listen</tt> or <tt>BindAddress</tt> directives in 
<file>/etc/apache/http.conf</file>.

<p>Using Listen:
<example>
Listen 127.0.0.1:80
</example>
<p>Using BindAddress:
<example>
BindAddress 127.0.0.1
</example>

<p>Then restart apache with <tt>/etc/init.d/apache restart</tt> and you will 
see that it is only listening on the loopback interface. 

<p>In any case, if you are not using all the functionality provided by 
Apache, you might want to take a look at other web servers provided in Debian
like <package>dhttpd</package>.

<p>The <url name="Apache Documentation"
id="http://httpd.apache.org/docs/misc/security_tips.html"> provides
information regarding security measures to be taken on Apache webserver
(this same information is provided in Debian by the
<package>apache-doc</package> package). It can also be useful to read the 
<url name="Apache Security Configuration Document" 
id="http://www.intersectalliance.com/projects/ApacheConfig/index.html"> 
provided by <url name="InterSect Alliance" 
id="http://www.intersectalliance.com/">.

<p>More information on further restricting Apache by setting up a
chroot jail is provided in <ref id="chroot-apache-env">.

<sect1>Disabling users from publishing web contents

<p>The default Apache installation in Debian permits users to publish
content under the <file>$HOME/public_html</file>. This content can
be retrieved remotely using an URL such as:
http://your_apache_server/~user.

<p>If you do not want to permit this you must change the
<file>/etc/apache/http.conf</file> configuration file commenting out:

<example>
LoadModule userdir_module /usr/lib/apache/1.3/mod_userdir.so
</example>

But if the module was linked statically (you can check this running
<tt>apache -l</tt>) you must add the following instead:

<example>
Userdir disabled
</example>

<p>Note: The <tt>disabled</tt> keyword is only available in Apache 1.3
and above. In you are using older versions of apache, you need to change 
the configuration file and add:

<!-- This can be removed since woody provides Apache 1.3 -->

<example>
&lt;Directory /home/*/public_html&gt;
    AllowOverride None
    Order deny,allow
    Deny from all
&lt;/Directory&gt;
</example> 

<p>An attacker might still do user enumeration, since the answer
of the web server will be a <em>403 Permission Denied</em> and not a
<em>404 Not available</em>.

<sect1>Logfiles permissions

<p>Apache logfiles, since 1.3.22-1, are owned by user 'root' and group
'adm' with permissions 640 this permissions are changed after
rotation. An intruder that accesed the system through the web server
would not be able (without priviledge escalation) to remove old log
file entries.

<!-- FIXME: what do you mean with "this permissions are changed after -->
<!-- rotation -->

<sect1>Published web files

<p>Apache files are located under <file>/var/www</file>. Just after
installation the default file provides some information on the system
(mainly that it's a Debian system running Apache).  The default
webpages are owned by user root and group root by default, whileas the
Apache process runs as user www-data and group www-data. This should
make attackers that compromise the system through the web server
harder to deface the site. You should, of course, substitute the
default web pages (which might provide information you do not want to
show to outsiders) with your own.


<p>


<sect>Securing finger
<p>If you want to run the finger service first ask
yourself if you need to do so. If you do, you will find out that
Debian provides many finger daemons 
(output from <prgn>apt-cache search fingerd</prgn>): 
<list>
<item>cfingerd - Configurable finger daemon
<item>efingerd - Another finger daemon for unix, capable of fine-tuning your 
output.
<item>ffingerd - a secure finger daemon
<item>fingerd - Remote user information server.
<item>BSD-like finger daemon with qmail support.
</list>
<p><package>ffingerd</package> is the recommended finger daemon if you are
going to use it for a public service. In any case, you are encouraged to,
when setting it up through inetd, xinetd or tcpserver to: limit the number of 
processes that will be running at the same time, limit access to the finger
daemon from a given number of hosts (using tcp wrappers) and having it
only listening to the interface you need it to be in.


<!--
# This is quite personal, IMHO, since this is due to the fact that 
# root privileges are dropped on startup. I prefer an attacker to erase
# a service's log files than to erase all of my system's logs. Anyhow, this
# can be improved by changing user permissions after rotation.
-->



<sect id="chroot">General chroot and suid paranoia

<p><prgn>chroot</prgn> is one of the most powerful possibilities to
restrict a daemon or a user or another service. Just imagine a jail
around your target, which the target cannot escape from (normally, but
there are still a lot of conditions that allow one to escape out of
such a jail). If you do not trust a user or a service, you can create
a change root environment for him. This can use quite a bit of disk
space as you need to copy all needed executables, as well as
libraries, into the jail. Even if the user does something malicious,
the scope of the damage is limited to the jail.

<!-- Consider removing this:
<p>A good example for this case is, if you do not authenticate against
<file>/etc/passwd</file> but use LDAP or MySQL instead. So your
ftp-daemon only needs a binary and perhaps a few libraries. A 
<prgn>chroot</prgn>ed environment would be an excellent security improvement; 
if a new exploit is found for this ftp-daemon, then attackers can only exploit
the UID of the ftp-daemon-user and nothing else. 
-->

<p>Many services running as daemons could benefit from this sort of
arrangement as. The daemons that you install with your Debian
distribution will not come, however, chrooted <footnote> It does try
to run them under <em>minimum priviledge</em> which include running
daemons with their own users instead of having them run as root
</footnote> per default.</p>

<p>This includes: name servers (such as <prgn>bind</prgn>), web
servers (such as <prgn>apache</prgn>), mail servers (such as
<prgn>sendmail</prgn> and ftp servers (such as
<prgn>wu-ftpd</prgn>). It is probably fair to say that the complexity
of BIND is the reason why it has been exposed to a lot of attacks in
recent years (see <ref id="sec-bind">).

<p>However, Debian does provide some software that can help set up
<prgn>chroot</prgn> environments. See <ref id="auto-chroot">.


<p>Anyway, if you run any service on your system, you should consider
running them as secure as possible. This includes: revoking root
privileges, running in a restricted environment (such as a chroot
jail) or replacing them with a more secure equivalent.</p>

<p>However, be forewarned that a <prgn>chroot</prgn> jail can be
broken if the user running in it is the superuser. So, you need to
make the service run as a non-privileged user. By limiting its
environment you are limiting the world readable/executable files the
service can access, thus, you limit the possibilities of a privilege
escalation by use of local system security vulnerabilities.  Even in
this situation you cannot be completely sure that there is no way for
a clever attacker to somehow break out of the jail.  Using only server
programs which have a reputation for being secure is a good additional
safety measure. Even minuscule holes like open file handles can be
used by a skilled attacker for breaking into the system. After all,
<prgn>chroot</prgn> was not designed as a security tool but as a
testing tool.</p>

<sect1 id="auto-chroot">Making chrooted environments automatically

<p>There are several programs to chroot automatically servers and
services. Debian currently (accepted in may 2002) provides Wietse
Venema's <prgn>chrootuid</prgn> in the <package>chrootuid</package>
package, as well as <package>compartment</package> and
<package>makejail</package>. These programs can be used to set up a
restricted environment for executing any program
(<prgn>chrootuid</prgn> enables you to even run it as a restricted
user). 

<p>Some of these tools can be used to set up the chroot environment
easily. The <prgn>makejail</prgn> program for example, can create and
update a chroot jail with short configuration files (it provides
sample configuration files for <prgn>bind</prgn>, <prgn>apache</prgn>,
<prgn>postgresql</prgn> and <prgn>mysql</prgn>). It attempts to guess
and install into the jail all files required by the daemon using
<prgn>strace</prgn>, <prgn>stat</prgn> and Debian's package
dependancies. More information at <url
id="http://www.floc.net/makejail/">. <prgn>Jailer</prgn> is a similar
tool which can be retrieved from <url
id="http://www.balabit.hu/downloads/jailer/">.

<p>FIXME: I have packages ready for jailer, update this
when they get accepted.

<p>Also useful to create chroots (or jails) is
<package>deb.pl</package>, a script that analyses dependencies of a
set of files.

<sect>General cleartext password paranoia
<p>
You should try to avoid any network service which sends and receives
passwords in cleartext over a net like FTP/Telnet/NIS/RPC. The author
recommends the use of ssh instead of telnet and ftp to everybody.

<p>Keep in mind that migrating from telnet to ssh, but using other
cleartext protocols does not increase your security in ANY way! Best
would be to remove ftp, telnet, pop, imap, http and to supersede them
with their respective encrypted services.  You should consider moving
from these services to their SSL versions, ftp-ssl, telnet-ssl,
pop-ssl, https ...

<p>Most of these above listed hints apply to every Unix system (you
will find them if reading any other hardening-related document related
to Linux and other Unices).

<sect>Disabling NIS 

<p>You should not use NIS, the Network Information Service, if it is
possible, because it allows password sharing. This can be highly
insecure if your setup is broken.

<p>If you need password sharing between machines, you might want to
consider using other alternatives. For example, you can setup an LDAP
server and configure PAM on your system in order to contact the LDAP
server for user authentication. You can find a detailed setup in the
<url
name="LDAP-HOWTO" id="http://www.tldp.org/HOWTO/LDAP-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/LDAP-HOWTO.txt.gz</file>).

<p>Read more on NIS security in
<url
name="NIS-HOWTO" id="http://www.tldp.org/HOWTO/NIS-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/NIS-HOWTO.txt.gz</file>).


<p>FIXME (jfs): Add info on how to set this up in Debian

<sect id="rpc">Disabling RPC services

<p>You should disable RPC wherever possible, that is, when you do not need it.
<footnote>
You only probably need it if using NFS (Network File System), NIS
(Network Information System) or some other RPC-based service.
</footnote>
Many security holes for both the portmapper service and RPC-based
services are known and could easily be exploited. On the other hand NFS
services are quite important in some networks, so find a balance of
security and usability in your network. Some of the DDoS (distributed
denial of service) attacks use rpc exploits to get into the system and
act as a so called agent/handler. Read more on NFS security in
<url
name="NFS-HOWTO" id="http://www.tldp.org/HOWTO/NFS-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/NFS-HOWTO.txt.gz</file>).

<p>Disabling portmap is quite simple. There are different methods. The
simplest one in a Debian 3.0 system is to uninstall the
<package>portmap</package> package. If you are running another version
you will have to disable the service as seen in <ref
id="disableserv">, this is due to the program being a part of the
<package>net-base</package> package (which cannot be de-installed
without breaking the system).

<p>This in fact removes every symlink relating to portmap in
<tt>/etc/rc${runlevel}.d/</tt>, which is something you could also do
manually.  Another possibility is to <tt>chmod 644
/etc/init.d/portmap</tt>, but that gives an error message when
booting. You can also strip off the <tt>start-stop-daemon</tt> part in
<file>/etc/init.d/portmap</file> shell script.

<sect id="firewall-setup">Adding firewall capabilities

<p>The Debian GNU/Linux operating system has the built-in capabilities
provided by the Linux kernel. This means that if you install a potato
(Debian 2.2 release) system (default kernel is 2.2) you will have
<prgn>ipchains</prgn> firewalling available in the kernel, you need to
have the <package>ipchains</package> package, which should, due to
its priority, already be installed. If you install a woody (Debian 3.0
release) system (default kernel is 2.4) you will have
<prgn>iptables</prgn> (netfilter) firewalling available. The main 
difference between <prgn>ipchains</prgn> and <prgn>iptables</prgn> is
that the later is based on <em>stateful packet inspection</em> which
provides for more secure (and easier to build) filtering configurations.

<sect1>Firewalling the local system

<p>You can use firewall rules as a way to secure the access to your
local system and, even, to limit the outbound communications made by
it. Firewall rules can also be used to protect processes that cannot
be properly configured <em>not</em> to provide services to some
networks, IP addresses, etc..

<p>However, this step is presented last in this manual basically
because it is <em>much</em> better not to depend solely on firewalling
capabilities in order to protect a given system. Security in a system
is made up of layers, firewalling should be the last to include, once
all services have been hardened. You can easily imagine a setup in
which the system is solely protected by a built-in firewall and an
administrator blissfully removes the firewall rules for whatever
reason (problems with the setup, annoyance, human error...), this
system would be wide open to an attack if there were no other
hardening in the system to protect from it.

<p>On the other hand, having firewall rules on the local system also
prevents some bad things from happening. Even if the services provided
are configured securely, a firewall can protect from misconfigurations
or from fresh installed services that have not yet been properly
configured. Also, a tight configuration will prevent trojans
<em>calling home</em> from working unless the firewalling code is
removed. Note that an intruder does <em>not</em> need superuser access
to install a trojan locally that could be remotely controlled (since
binding on ports is allowed if they are not priviledged ports and
capabilities have not been removed).

<p>Thus, a proper firewall setup would be one with a default deny
policy, that is:

<list>

<item>incoming connections are allowed only to local services by allowed
machines.

<item>outgoing connections are only allowed to services used by your
system (DNS, web browsing, pop, email....)  
<footnote>Unlike personal firewalls in other operating systems, Debian
GNU/Linux does not (yet) provide firewall generation interfaces that
can make rules limiting them per process or user. However, the
iptables code can be configured to do this (see the owner module in
the <manref name="iptables" section="8"> manpage)</footnote>

<item>the forward rule denies everything (unless you are protecting
other systems, see below).

<item>all other incoming or outgoing connections are denied.

</list>

<sect1>Using a firewall to protect other systems

<p>A Debian firewall can also be installed in order to protect, with
filtering rules, access to systems <em>behind</em> it, limiting their
exposure to the Internet. The firewall can be configured to prevent
systems outside the local network to access services (ports) that are
not public. For example, on a mail server, only port 25 (where the
mail service is being given) needs to be accesible from the outside. A
firewall can be configured to, even if there are other services
besides the public ones, throw away packets (this is known as
<em>filtering</em>) directed towards them.

<p>You can even set up a Debian GNU/Linux box as a bridge firewall,
i.e. a filtering firewall completely transparent to the network that
lacks an IP address and thus cannot be attacked directly. Depending on
the kernel you have installed, you might need to might to install the
bridge firewall patch and then go to <em>802.1d Ethernet Bridging</em> when
configuring the kernel and a new option <em>netfilter ( firewalling )
suport</em>. See the <ref id="bridge-fw"> for more information on
how to set this up in a Debian GNU/Linux system).

<sect1>Configuring the firewall

<p>Of course, the configuration of the firewall is always system and
network dependant. An administrator must know beforehand what is the
network layout and the systems he wants to protect, the services that
need to be accessed, and wether or not other network considerations
(like NAT or routing) need to be taken into account. Be careful when
configuring your firewall, as Laurence J. Lane says in the
<package>iptables</package> package:

<p><em>The tools can easily be misused, causing enormous amounts of
grief by completely cripple network access to a computer system. It is
not terribly uncommon for a remote system administrator to
accidentally lock himself out of a system hundreds or thousands of
miles away. One can even manage to lock himself out of a computer
who's keyboard is under his fingers. Please, use due caution.</em>

<p>Remember this: just installing the <package>iptables</package> (or
the older firewalling code) does not give you any protection, just
provides the software. In order to have a firewall you need to
<em>configure</em> it!

<p>If you do not know much about firewalling, read the
Firewalling-HOWTO that can be found in
<package>doc-linux-text</package> package (other document formats also
available). See <ref id="references"> for more (general) pointers.

<sect2>Doing it the Debian way 

<p>If you are using Debian 3.0, you will notice that you have the
<package>iptables</package> package installed. This is the support for
the 2.4.4+ kernels netfilter implementation. Since just after
installation the system cannot <em>know</em> any firewall rules
(firewall rules are too system-specific) you have to enable iptables.
However, the scripts have been configured so that the administrator
can set up firewall rules and then have the init scripts <em>learn</em>
them and use them always as the setup for the firewall. 

<p>In order to do so you must:

<list>

<item>Configure the package so that it starts with the system. On
newer versions (since 1.2.6a-1) this is asked for when the package is
installed. You can configure it afterwards with <tt>dpkg-reconfigure
-plow iptables</tt>. <em>Note</em>: on older versions this was done by
editing <file>/etc/default/iptables</file> so that the variable
<tt>enable_iptables_initd</tt> was set to <em>true</em>.

<item>create a firewall setup using iptables, you can use the command
line (see <manref name="iptables" section="8">) or some of the tools
provided by the Debian firewall packages (see <ref
id="firewall-pack">). You need to create one set of firewall rules to
be used when the firewall is in <em>active</em> state and another to
be used when the firewall is in <em>inactive</em> state (these can be
just empty rules).

<item>save the rules you created using <tt>/etc/init.d/iptables
save_active</tt> and <tt>/etc/init.d/iptables save_inactive</tt> by
running these scripts with the firewall rules you want enabled.

</list>

<p>Once this is done your firewall setup is saved in the
<file>/var/lib/iptables/</file> directory and will be executed when
the system boots (or when running the initd script with <em>start</em>
and <em>stop</em> arguments). Please notice that the default Debian
setups starts the firewalling code in the multiuser runlevels (2 to 5)
pretty soon (10). Also, it is stopped in singleuser runlevel (1),
change this if it does not mach your local policy.

<p>If you do not have a clue on how to set up your firewall rules
manually consult the <em>Packet Filtering HOWTO</em> and <em>NAT
HOWTO</em> provided by <package>iptables</package> for offline reading
at <file>/usr/share/doc/iptables/html/</file>. Also, the configuration
file <file>/etc/default/iptables</file> provides some more information
about the issues regarding this package.

<sect2 id="firewall-pack">Using Firewall packages

<p>Setting up manually a firewall can be complicated for novice (and
sometimes even expert) administrators. However, the free software
community has created a number of tools that can be used to easily
configure a local firewall. Be forewarned that some of this tools are
oriented more towards local-only protection (also known as
<em>personal firewall</em>) and some are more versatile and can be
used to configure complex rules to protect whole networks.

<p>Some software that can be used to set up firewall
rules in a Debian system is:

<list>
<item><package>firestarter</package>, oriented towards end-users
including a wizard to quickly defined the firewall rules.
<item><package>knetfilter</package>
<item><package>fwbuilder</package>, an object oriented GUI which
includes policy compilers for various firewall platforms including
iptables as well as router's access-lists.
<item><package>shorewall</package> which provides support for IPsec as
well as limited support for traffic shaping as well as the definition
of the firewall rules.
<item><package>mason</package>, which can propose firewall rules based on
the network traffic your system "sees".
<item><package>bastille</package> (among the hardening steps that can make
new versions of bastille is the possibility of adding firewall rules to
the system to be executed on startup)
<item><package>ferm</package>
<item><package>fwctl</package>
<item><package>easyfw</package>
<item><package>firewall-easy</package>
<item><package>ipac-ng</package>
<item><package>gfcc</package>
<item><package>lokkit</package> or <package>gnome-lokkit</package>
</list>

<p>The last packages: gfcc,firestarter and knetfilter are
administration GUIs using either GNOME (first two) or KDE (last one)
which are much more user-oriented (i.e. for home users) than the other
packages in the list which might be more administrator-oriented.

<p>Be forewarned that some of the packages outlined previousline will
probably introduce firewalling scripts to be run when the system
boots, this will undoubtedly conflict with the common setup (if
configured) and you might undesireds effects. Usually, the firewalling
script that runs last will be the one that configures the system
(which might not be what you pretend). Consult the package
documentation and use either one of these setups. Generally, other
programs that help you set up the firewalling rules can tweak othe
conriguration files.

<p>FIXME: Add more info regarding this packages

<p>FIXME: Check Information on Debian firewalling and what/how does it
change from other distributions.

<p>FIXME: Where should the custom firewalling code be enabled (common
FAQ in debian-firewall?)

<p>FIXME: Add information on <url
id="http://www.balabit.hu/downloads/zorp/debian/" name="Zorp"> in
Debian (see <url id="http://bugs.debian.org/88347" name="Bug
#88347">. Debian packages are provided but they depend on libglib1.3
which is not yet available in Debian distribution.

<chapt>Automatic hardening of Debian systems

<p>After reading through all the information in the previous chapters
you might be wondering "I have to do quite a lot of things in order to
harden my system, couldn't these things be automated?". The answer is
yes, but be careful with automated tools. Some people believe, that a
hardening tool does not eliminate the need for good administration. So
do not be fooled to think that you can automate the whole process and
will fix all the related issues. Security is an ever-ongoing process
in which the administrator must participate and cannot just stand away
and let the tools do all the work since no single tool can cope: with
all the possible security policy implementations, all the attacks and
all the environments.

<p>Since woody (Debian 3.0) there are two specific packages that are
useful for security hardening. The <package>harden</package> package
which takes an approach based on the package dependencies to quickly
install valuable security packages and remove those with flaws,
configuration of the packages must be done by the administrator. The
<package>bastille</package> package that implements a given security
policy on the local system based on previous configuration by the
administrator (the building of the configuration can be a guided
process done with simple yes/no questions).

<sect>Harden

<p>The <package>harden</package> package tries to make it more easy to
install and administer hosts that need good security . This package
should be used by people that want some quick help to enhance the
security of the system. To do this it conflicts with packages with
known flaws, including (but not limited to): known security bugs (like
buffer overflows), use of plaintext passwords, lack of access control,
etc. It also automatically installs some tools that should enhance
security in some way: intrusion detection tools, security analysis
tools, etc. Harden installs the following <em>virtual</em> packages
(i.e. no contents, just dependencies on others):

<list>

<item><package>harden-tools</package>: tools to enhance system
security (integrity checkers, intrusion detection, kernel patches...)

<item><package>harden-doc</package>: provides this same manual and
other security-related documentation packages.

<item><package>harden-environment</package>: helps configure a
hardened environment (currently empty).

<item><package>harden-servers</package>: removes servers considered
insecure for some reason.

<item><package>harden-clients</package>: removes clients considered
insecure for some reason.

<item><package>harden-remoteflaws</package>: removes packages with
known security holes that could be used by a remote attacker to
compromise the system (uses versioned <em>Conflicts:</em>).

<item><package>harden-localflaws</package>: removes packages with known
security holes that could be used by a local attacker to compromise
the system (uses versioned <em>Conflicts:</em>).

<item><package>harden-remoteaudit</package>: tools to remotely audit a
system.

</list>

<p>Be careful because if you have software you need (and which you do
not wish to uninstall for some reason) and it conflicts with some of the
packages above you might not be able to fully use
<package>harden</package>.

The harden packages do not (directly) do a thing. They do have,
however, intentional package conflicts with known non-secure packages.
This way, the Debian packaging system will not approve the installation
of these packages. For example, when you try to install a telnet daemon
with <package>harden-servers</package>, <package>apt</package> will say:

<example>
# apt-get install telnetd 
The following packages will be REMOVED:
	harden-servers
The following NEW packages will be installed:
telnetd 
Do you want to continue (Y/n)
</example>

<p>This should set off some warnings in the administrator head, who should
reconsider his actions.

<sect>Bastille Linux

<p><url name="Bastille Linux" id="http://www.bastille-linux.org"> is
an automatic hardening tool originally oriented towards the RedHat and
Mandrake Linux distributions. However, the <package>bastille</package>
package provided in Debian (since woody) is patched in order to
provide the same functionality for the Debian GNU/Linux system.

<p>Bastille can be used with different frontends (all are documented
in their own manpage in the Debian package) which enables the
administrator to:

<list>

<item>Answer questions step by step regarding the desired security of
your system (using <manref name="InteractiveBastille" section="8">)

<item>Use a default setting for security (amongst three: Lax, Moderate
or Paranoia) in a given setup (server or workstation) and let Bastille
decide which security policy to implement (using <manref
name="BastilleChooser" section="8">)

<item>Take a predefined configuration file (could be provided by
Bastille or made by the administrator) and implement a given security
policy (using <manref name="AutomatedBastille" section="8">)

</list>

<chapt>Debian Security Infrastructure

<sect id="debian-sec-team">The Debian Security Team

<p>Debian has a Security Team, made up of five members and two
secretaries who handle security in the <em>stable</em>
distribution. Handling security means they keep track of
vulnerabilities that arise in software (watching forums such as
bugtraq, or vuln-dev) and determine if the <em>stable</em>
distribution is affected by it.

<p>Also, the Debian Security Team, is the contact point for problems
that are coordinated by upstream developers or organisations such as
<url id="http://www.cert.org" name="CERT"> which might affect multiple
vendors. That is, when problems are not Debian-specific. There are two
contact points with the Security Team:

<list>

<item><url id="mailto:team@security.debian.org"
name="team@security.debian.org"> which only the members of the
security team read. 

<item><url id="mailto:security@debian.org" name="security@debian.org">
which is read by all Debian developers (including the security
team). Mails sent to this list are not published in the Internet (it's
not a public mailing list).

</list>

<p>Sensitive information should be sent to the first address and, in
some cases, should be encrypted with the Debian Security Contact key
(key ID 363CCD95).

<p>Once a probable problem is received by the Security Team it will
investigate if the <em>stable</em> distribution is affected and if it
is, a fix is made for the source code base. This fix will sometimes
include backporting the patch made upstream (which usually is some
versions ahead of the one distributed by Debian). After testing of the
fix is done, new packages are prepared and published in the <url
id="security.debian.org"> site so they can be retrieved through
<prgn>apt</prgn> (see <ref id="security-update">). At the same time a
<em>Debian Security Advisory</em> (DSA) is published on the web site
and sent to public mailing lists including <url
id="lists.debian.org/debian-security-announce"
name="debian-security-announce"> and bugtraq.

<p>Some other frequently asked questions on the Debian Security Team can be
found at <ref id="debian-sec-team-faq">.


<sect id="dsa">Debian Security Advisories

<p>Debian Security Advisories are made whenever a security
vulnerability is discovered that affects a Debian package. These
advisories, signed by one of the Security Team members, include
information of the versions affected as well as the location of the
updates and their MD5sums. This information is:

<list>
<item>version number for the fix.
<item>problem type.
<item>wether it is remote or locally exploitable.
<item>short description of the package.
<item>description of the problem.
<item>description of the exploit.
<item>description of the fix.
</list>


<p>DSAs are published both in <url id="http://www.debian.org/"
name="Debian's mainserver frontpage"> and in the <url
id="http://www.debian.org/security/" name="Debian security
pages">. Usually this does not happen until the website is rebuilt
(once daily) so they might not be present inmediately, the preferred
channel is the debian-security-announce mailing list.

<p>Interested users can, however (and this is done in some
Debian-related portals) use the RDF channel to download automatically
the DSAs to their desktop. Some applications, such as
<prgn>Evolution</prgn> (an email client and personal information
assistant) and <prgn>Multiticker</prgn> (a GNOME applet), can be used
to retrieve the advisories automatically. The RDF channel is available
at <url id="http://www.debian.org/security/dsa.rdf">.

<p>DSAs published on the website might be updated after being sent to
the public-mailing lists. A common update is adding cross references
to security vulnerability databases such as <url
id="http://cve.mitre.org" name="CVE">, <url id="http://www.cert.org"
name="CERT/CC vulnerability notes"> or <url
id="http://www.securityfocus.com/bid/" name="Bugtraq">. This feature was added 
to the website on June 2002.

<p>One of the advantages of adding cross references to these
vulnerability databases is that:

<list>
<item>it makes Debian users easier to see and track which
general (published) advisories have already been covered by Debian. 

<item>system administrators can learn more of the vulnerability and
its impact by following the cross references.

<item>this information can be used to cross-check output from
vulnerability scanners that include references to CVE to remove false
positives (see <ref id="vulnasses-false-positive">).

</list>

<sect>Debian Security Build Infrastructure

<p>Since Debian is currently supported in a large number of
architectures, administrators sometimes wonder if a given arquitecture
might take more time to receive security updates than another. As a
matter of fact, except for rare circumstances, updates are available
to all arquitectures at the same time.

<p>While previously the task to build security updates was done by
hand, it is currently not (as Anthony Towns describes in 
<url id="http://lists.debian.org/debian-devel-announce/2002/debian-devel-announce-20+0206/msg00002.html" name="a mail">
sent to the debian-devel-announce mailing list dated 8th june
2002.)

<p>Packages uploaded by the security team (to <url
id="security.debian.org:/org/security.debian.org/queue/unchecked"> or
<url id="ftp://security.debian.org/pub/SecurityUploadQueue">
with an appropriate patch are checked for signatures withing fifteen
minutes of being uploaded, once this is done they get added to the
list of the autobuilders (which no longer do a daily archive
run). Thus, packages can get automatically built for <em>all</em>
arquitectures thirty minutes or an hour or so after they're uploaded.
However, security updates are a little more different than normal
uploads sent by package maintainers since, in some cases, before being
published they need to wait until they can be tested further, an
advisory written, or need to wait for a week or more to avoid
publicising the flaw until all vendors have had a reasonable chance to
fix it. 

<p>Thus, the security upload archive works with the following
procedure (called <em>"Accepted-Autobuilding"</em>):

<list>

<item>Someone finds a security problem.
     
<item>Someone fixes the problem, and makes an upload to
      security.debian.org's incoming (this <em>someone</em> is usually
      a Security Team member but can be also a package maintainer with
      an appropriate fix that has contacted the Security Team
      previously). The Changelog includes a <em>testing-security</em>
      or <em>stable-security</em> as target distribution.

<item>The upload gets checked and processed by a Debian system and moved
       into queue/accepted, and the buildds are notified. Files in here
       can be accessed by the security team and (somewhat indirectly) by 
       the buildds.

<item>Security-enabled buildds pick up the source package
       (prioritized over normal builds), build it, and send the logs to
       the security team.

<item>The security team reply to the logs, and the newly built
       packages are uploaded to queue/unchecked, where they're processed
       by a Debian system, and moved into queue/accepted.

<item>When the security team find the source package acceptable (i.e.,
       that it's been correctly built for all applicable architectures
       and that it fixes the security hole and doesn't introduce new
       problems of its own) they run a script which:

<list>
<item>installs the package into the security archive.

<item>updates the Packages, Sources and Release files of
security.debian.org in the usual way (<prgn>dpkg-scanpackages</prgn>,
<prgn>dpkg-scansources</prgn>...)

<item>sets up a template advisory that the security team can finish
off.

<item>(optionally) forwards the packages to the appropriate
proposed-updates so that it can be included in the real archive as
soon as possible.

</list>

</list>

<p>This procedure, previously done by hand, was tested and put through
during the freezing stage of Debian 3.0 woody (july 2002). Thanks to this
infrastructure the Security Team was able to have updated packages
ready for the apache and OpenSSH issues for all the supported (almost
twenty) arquitectures in less than a day.

<sect1>Developer's guide to security updates

<p>This mail was sent by Wichert Akkerman to the <url
id="http://lists.debian.org/debian-devel-announce/2002/debian-devel-announce-200206/msg00004.html"
name="Debian-devel-announce mailing list"> in order to describe Debian
developer's behaviour for handling security problems in their
packages. It is published here both for the benefit of developers as
well as for users to understand better how security is handled in Debian.
<p>Please note that the uptodate reference for this information is
the <url id="http://www.debian.org/doc/manuals/developers-reference/ch-pkgs.en.html#s-bug-security" name="Debian Developer's Reference">, this section will be
removed in the near future.

<sect2>Coordinating with the security team

<p>If a developer learns of a security problem, either in his package
or someone else's he should always contact the security team (at
team@security.debian.org). They keep track of outstanding security
problems, can help maintainers with security problems or fix them
themselves, are responsible for sending security advisories and
maintaining security.debian.org.

<p>Please note that security advisories are only done for release
distributions, not for testing, unstable (see <ref id="sec-unstable">)
or older distributions (see <ref id="sec-older">).

<sect2>Learning of security problems

<p>There are a few ways a developer can learn of a security problem:

<list>
<item>he notices it on a public forum (mailing list, website, etc.):
<item>someone files a bugreport (the <em>Security</em> tag should be
used, or added by the developer)
<item>someone informs him via private email.
</list>

<p>In the first two cases the information is public and it is important
to have a fix as soon as possible. In the last case however it might
not be public information. In that case there are a few possible options
for dealing with the problem:

<list>

<item>if it is a trivial problem (like insecure temporary files) there is no
  need to keep the problem a secret and a fix should be made and
  released.

<item>if the problem is severe (remote exploitable, possibility to gain root
  privileges) it is preferable to share the information with other
  vendors and coordinate a release. The security team keeps contacts
  with the various organizations and individuals and can take care of
  that.

</list>

<p>In all cases if the person who reports the problem asks to not
disclose the information that should be respected, with the obvious
exception of informing the security team (the developer should make
sure he tells the security team that the information can not be
disclosed).

<p>Please note that if secrecy is needed the developer can also not
upload a fix to unstable (or anywhere else), since the changelog
information for unstable is public information.

<p>There are two reasons for releasing information even though secrecy
is requested/required: the problem has been known for too long, or
the information becomes public.

<sect2>Building a package

<p>The most important guideline when making a new package that fixes a
security problem is to make as few changes as possible. People are
relying on the exact behaviour of a release once it is made, so any
change made to it can possibly break someone's system. This is
especially true of libraries: the developer must make sure he never
changes the API or ABI, no matter how small the change.

<p>This means that moving to a new upstream version is not a good solution,
instead the relevant changes should be backported. Generally upstream
maintainers are willing to help if needed, if not the Debian security
team might be able to help.

<p>In some cases it is not possible to backport a security fix, for
example when large amounts of sourcecode need to be modified or
rewritten. If that happens it might be necessary to move to a new
upstream version, but it should always be coordinated with the security team
beforehand.

<p>Related to this is another import aspect: developers must always
test your change. If their is an exploit the developer should try if
it indeed succeeds on the unpatched package and fails on the fixed
package. The developer should try normal usage as well, sometimes a
security fix can break normal use subtly.

<p>Finally a few technical things for developers to keep in mind:

<list>
<item>Make sure you target the right distribution in your debian/changelog.
  For stable this is stable-security and for testing this is
  testing-security. Do not target &lt;codename&gt;-proposed-updates.

<item>Make sure the version number is proper. It has to be higher than the
  current package, but lower than package versions in later
  distributions. For testing this means there has to be a higher version
  in unstable. If there is none yet (testing and unstable have the same
  version for example) upload a new version to unstable first.

<item>Do not make source-only uploads if your package has any binary-all
  packages. The buildd infrastructure will not build those.

<item>Make sure when compiling a package you compile on a clean system
  which only has package installed from the distribution you are
  building for. If you do not have such a system yourself yourself you
  can try a debian.org machine (see http://db.debian.org/machines.cgi
  or set up a chroot (the <package>pbuilder</package> and
  <package>debootstrap</package> packages can be helpful in that
  case).)

</list>

<sect2>Uploading security fixes

<p>After the developer has created and tested the new package it needs to be
uploaded so it can be installed in the archives. For security uploads
the place to upload to is
ftp://security.debian.org/pub/SecurityUploadQueue/ .

<p>Once an upload to the security queue has been accepted the package will
automatically be rebuilt for all architectures and stored for
verification by the security team.

<p>Uploads waiting for acceptance or verification are only accessible by
the security team. This is necessary since there might be fixes for
security problems that can not be disclosed yet.

<p>If a member of the security team accepts a package it will be installed
on security.debian.org as well as the proper &lt;codename&gt;-proposed-updates
in ftp-master or non-US archive.

<sect2>The security advisory

<p>Security advisories are written and posted by the security team. However
they certainly do not mind if a maintainer can supply (part of) the text
for them. Information that should be in an advisory is described in
<ref id="dsa">.

<sect id="deb-pack-sign">Package signing in Debian

<p>This section could also be titled "how to upgrade/update safely
your Debian GNU/Linux system" and it deserves its own section
basically because it is an important part of the Security
Infrastructure. Package signing is an important issue since it avoids
tampering of packages distributed in mirrors and of downloads with
man-in-the-middle attacks. Automatic software update is an important
feature but it's also important to remove security threats that could
help the distribution of trojans and the compromise of systems during
updates
<footnote>
<p>Some operating systems have already been plagued with
automatic-updates problems such as the
<url name="Mac OS X Software Update vulnerabity"
id="http://www.cunap.com/~hardingr/projects/osx/exploit.html">.
<p>FIXME: probably the Internet Explorer vulnerability handling
certificate chains has an impact on security updates on Microsoft Windows.
</footnote>


<p>As of today (february 2003) Debian does not provide signed packages for
the distribution and the <em>woody</em> release (3.0) does not integrate that
feature. There is a solution for signed packages which will
be, hopefully, provided in the next release (<em>sarge</em>).

<p>This issue is better described in the
<url id="http://www.cryptnet.net/fdp/crypto/strong_distro.html" name="Strong
Distribution HOWTO"> by V. Alex Brennen.

<sect1>The proposed scheme for package signature checks

<p>The current (unimplemented) scheme for package signature checking
using <prgn>apt</prgn> is:

<list>
<item>the Release file includes the md5sum of Packages.gz 
(which contains the md5sums of packages) and will be signed.
The signature is one of a trusted source.

<item>This signed Release file is downloaded by 'apt-get update'
and stored along with Packages.gz.

<item>When a package is going to be installed, it is first downloaded,
then the md5sum is generated.

<item>The signed Release file is checked (signature ok) and it extracts from
it the md5sum for the Packages.gz file, the Packages.gz checksum is generated
and (if ok) the md5sum of the downloaded package is extracted from it.

<item>If the md5sum from the downloaded package is the same as the one in the
Packages.gz file the package will be 
installed otherwise the administrator will be alerted and the package will
be left in cache (so the administrator can decide wether to install it or not
). If the package is not in the Packages.gz and the administrator has 
configured the system to only install checked packages it will not be 
installed either.
</list>

<p>By following the chain of MD5 sums <prgn>apt</prgn> is capable of verifying
that a package originates from a a specific release. This is less
flexible than signing each package one by one, but can be combined with
that scheme too (see below).

<p>Package signing has been discussed in Debian for quite some time, for
more information you can read:
<url id="http://www.debian.org/News/weekly/2001/8/"> and
<url id="http://www.debian.org/News/weekly/2000/11/">.

<sect1>Alternative per-package signing scheme

<p>The additional scheme of signing each and every packages allows
packages to be checked when they are no longer referenced by an
existing Packages file, and also third-party packages where no
Packages ever existed for them can be also used in Debian but will not
be default scheme.

<p>This package signing scheme can be implemented using
<package>debsig-verify</package>and <package>debsigs</package>.
These two packages can sign and verify
embeded signatures in the .deb itself. Debian already has the
capability to do this now, but implementing the policy and tools 
won't be started until after woody releases.

<p>Latest dpkg versions (since 1.9.21) incorporate a 
<url
id="http://lists.debian.org/debian-dpkg/2001/debian-dpkg-200103/msg00024.html"
name="patch"> that provides this functionality as soon as 
<package>debsig-verify</package> is installed.

<p>NOTE: Currently <file>/etc/dpkg/dpkg.cfg</file> ships with
"no-debsig" as per default.

<p>NOTE2: Signatures from developers are currently stripped when they
enter off the package archive since the currently preferred method is
release checks as described previously.

<sect1 id="check-releases">Checking distribution releases

<p>In case you want to add now the additional security checks you can
use the script below, provided by Anthony Towns. This script can
automatically do some new security checks to allow the user to be sure
that the software s/he's downloading matches the software Debian's
distributing.  This stops Debian developers from hacking into
someone's system without the accountability provided by uploading to
the main archive, or mirrors mirroring something almost, but not quite
like Debian, or mirrors providing out of date copies of unstable with
known security problems.

<p>This sample code, renamed as <prgn>apt-check-sigs</prgn>, should be 
used in the following way:
<example>
# apt-get update
# apt-check-sigs
(...results...)
# apt-get dist-upgrade
</example>

<p>First you need to:

<list>

<item>get the keys the archive software uses to to sign Release files,
<url id="http://ftp-master.debian.org/ziyi_key_2003.asc"> and add them
to <file>~/.gnupg/trustedkeys.gpg</file> (which is what
<prgn>gpgv</prgn> uses by default).
<example>
  gpg --no-default-keyring --keyring trustedkeys.gpg --import ziyi_key_2003.asc
</example>

<item>remove any <file>/etc/apt/sources.list</file> lines that don't
 use the normal "dists" structure, or change the script so that it
 works with them.

<item>be prepared to ignore the fact that Debian security updates don't
have signed Release files, and that Sources files don't have
appropriate checksums in the Release file (yet).

<item>be prepared to check that the appropriate sources are signed by
the appropriate keys.

</list>

<p>This is the example code for <prgn>apt-check-sigs</prgn>, the
latest version can be retrieved from <url
id="http://people.debian.org/~ajt/apt-check-sigs">.
This code is currently in beta, for more information read
<url id="http://lists.debian.org/debian-devel/2002/debian-devel-200207/msg00421.html">.

<example>
#!/bin/bash
# This script is copyright (c) 2001, Anthony Towns
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

rm -rf /tmp/apt-release-check
mkdir /tmp/apt-release-check || exit 1
cd /tmp/apt-release-check

>OK
>MISSING
>NOCHECK
>BAD

arch=`dpkg --print-installation-architecture`

am_root () {
        [ `id -u` -eq 0 ]
}

get_md5sumsize () {
        cat "$1" | awk '/^MD5Sum:/,/^SHA1:/' | 
          MYARG="$2" perl -ne '@f = split /\s+/; if ($f[3] eq $ENV{"MYARG"}) { print "$f[1] $f[2]\n"; exit(0); }'
}
checkit () {
        local FILE="$1"
        local LOOKUP="$2"

        Y="`get_md5sumsize Release "$LOOKUP"`"
        Y="`echo "$Y" | sed 's/^ *//;s/  */ /g'`"

        if [ ! -e "/var/lib/apt/lists/$FILE" ]; then
                if [ "$Y" = "" ]; then
                        # No file, but not needed anyway
                        echo "OK"
                        return
                fi
                echo "$FILE" >>MISSING
                echo "MISSING $Y"
                return
        fi
        if [ "$Y" = "" ]; then
                echo "$FILE" >>NOCHECK
                echo "NOCHECK"
                return
        fi
        X="`md5sum < /var/lib/apt/lists/$FILE` `wc -c < /var/lib/apt/lists/$FILE`"
        X="`echo "$X" | sed 's/^ *//;s/  */ /g'`"
        if [ "$X" != "$Y" ]; then
                echo "$FILE" >>BAD
                echo "BAD"
                return
        fi
        echo "$FILE" >>OK
        echo "OK"
}

echo
echo "Checking sources in /etc/apt/sources.list:"
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo
(echo "You should take care to ensure that the distributions you're downloading"
echo "are the ones you think you are downloading, and that they are as up to"
echo "date as you would expect (testing and unstable should be no more than"
echo "two or three days out of date, stable-updates no more than a few weeks"
echo "or a month)."
) | fmt
echo

cat /etc/apt/sources.list | 
  sed 's/^ *//' | grep '^[^#]' |
  while read ty url dist comps; do
        if [ "${url%%:*}" = "http" -o "${url%%:*}" = "ftp" ]; then
                baseurl="${url#*://}"
        else
                continue
        fi
        echo "Source: ${ty} ${url} ${dist} ${comps}"
        
        rm -f Release Release.gpg
        wget -q -O Release "${url}/dists/${dist}/Release"

        if ! grep -q '^' Release; then
                echo "  * NO TOP-LEVEL Release FILE"
        else
                origline=`sed -n 's/^Origin: *//p' Release | head -1`
                lablline=`sed -n 's/^Label: *//p' Release | head -1`
                suitline=`sed -n 's/^Suite: *//p' Release | head -1`
                codeline=`sed -n 's/^Codename: *//p' Release | head -1`
                dateline=`grep "^Date:" Release | head -1`
                dscrline=`grep "^Description:" Release | head -1`
                echo "  o Origin: $origline/$lablline"
                echo "  o Suite: $suitline/$codeline"
                echo "  o $dateline"
                echo "  o $dscrline"

                if [ "${dist%%/*}" != "$suitline" -a "${dist%%/*}" != "$codeline" ]; then
                        echo "  * WARNING: asked for $dist, got $suitline/$codeline"
                fi

                wget -q -O Release.gpg "${url}/dists/${dist}/Release.gpg"
                sigline="`gpgv --status-fd 3 Release.gpg Release 3>&1 >/dev/null 2>&1 | sed -n "s/^\[GNUPG:\] GOODSIG [0-9A-Fa-f]* //p"`"
                if [ "$sigline" ]; then
                        echo "  o Signed by: $sigline"
                else
                        echo "  * NO VALID SIGNATURE"
                        >Release
                fi
        fi
        okaycomps=""
        for comp in $comps; do
                if [ "$ty" = "deb" ]; then
                        X=$(checkit "`echo "${baseurl}/dists/${dist}/${comp}/binary-${arch}/Release" | sed 's,//*,_,g'`" "${comp}/binary-${arch}/Release")
                        Y=$(checkit "`echo "${baseurl}/dists/${dist}/${comp}/binary-${arch}/Packages" | sed 's,//*,_,g'`" "${comp}/binary-${arch}/Packages")
                        if [ "$X $Y" = "OK OK" ]; then
                                okaycomps="$okaycomps $comp"
                        else
                                echo "  * PROBLEMS WITH $comp ($X, $Y)"
                        fi
                elif [ "$ty" = "deb-src" ]; then
                        X=$(checkit "`echo "${baseurl}/dists/${dist}/${comp}/source/Release" | sed 's,//*,_,g'`" "${comp}/source/Release")
                        Y=$(checkit "`echo "${baseurl}/dists/${dist}/${comp}/source/Sources" | sed 's,//*,_,g'`" "${comp}/source/Sources")
                        if [ "$X $Y" = "OK OK" ]; then
                                okaycomps="$okaycomps $comp"
                        else
                                echo "  * PROBLEMS WITH component $comp ($X, $Y)"
                        fi
                fi
        done
        [ "$okaycomps" = "" ] || echo "  o Okay:$okaycomps"
        echo
  done

echo "Results"
echo "~~~~~~~"
echo

allokay=true

cd /tmp/apt-release-check
diff <(cat BAD MISSING NOCHECK OK | sort) <(cd /var/lib/apt/lists && find . -type f -maxdepth 1 | sed 's,^\./,,g' | grep '_' | sort) | sed -n 's/^> //p' >UNVALIDATED

cd /tmp/apt-release-check
if grep -q ^ UNVALIDATED; then
    allokay=false
    (echo "The following files in /var/lib/apt/lists have not been validated."
    echo "This could turn out to be a harmless indication that this script"
    echo "is buggy or out of date, or it could let trojaned packages get onto"
    echo "your system."
    ) | fmt
    echo
    sed 's/^/    /' < UNVALIDATED
    echo
fi

if grep -q ^ BAD; then
    allokay=false
    (echo "The contents of the following files in /var/lib/apt/lists does not"
    echo "match what was expected. This may mean these sources are out of date,"
    echo "that the archive is having problems, or that someone is actively"
    echo "using your mirror to distribute trojans."
    if am_root; then 
        echo "The files have been renamed to have the extension .FAILED and"
        echo "will be ignored by apt."
        cat BAD | while read a; do
            mv /var/lib/apt/lists/$a /var/lib/apt/lists/${a}.FAILED
        done
    fi) | fmt
    echo
    sed 's/^/    /' < BAD
    echo
fi

if grep -q ^ MISSING; then
    allokay=false
    (echo "The following files from /var/lib/apt/lists were missing. This"
    echo "may cause you to miss out on updates to some vulnerable packages."
    ) | fmt
    echo
    sed 's/^/    /' < MISSING
    echo
fi

if grep -q ^ NOCHECK; then
    allokay=false
    (echo "The contents of the following files in /var/lib/apt/lists could not"
    echo "be validated due to the lack of a signed Release file, or the lack"
    echo "of an appropriate entry in a signed Release file. This probably"
    echo "means that the maintainers of these sources are slack, but may mean"
    echo "these sources are being actively used to distribute trojans."
    if am_root; then 
        echo "The files have been renamed to have the extension .FAILED and"
        echo "will be ignored by apt."
        cat NOCHECK | while read a; do
            mv /var/lib/apt/lists/$a /var/lib/apt/lists/${a}.FAILED
        done
    fi) | fmt
    echo
    sed 's/^/    /' < NOCHECK
    echo
fi

if $allokay; then
    echo 'Everything seems okay!'
    echo
fi

rm -rf /tmp/apt-release-check
</example>

<p>You might need to apply the following patch for <em>sid</em> since
<prgn>md5sum</prgn> adds an '-' after the sum when the input is stdin:

<example>
@@ -37,7 +37,7 @@
        local LOOKUP="$2"

        Y="`get_md5sumsize Release "$LOOKUP"`"
-       Y="`echo "$Y" | sed 's/^ *//;s/  */ /g'`"
+       Y="`echo "$Y" | sed 's/-//;s/^ *//;s/  */ /g'`"

        if [ ! -e "/var/lib/apt/lists/$FILE" ]; then
                if [ "$Y" = "" ]; then
@@ -55,7 +55,7 @@
                return
        fi
        X="`md5sum < /var/lib/apt/lists/$FILE` `wc -c < /var/lib/apt/lists/$FILE`"
-       X="`echo "$X" | sed 's/^ *//;s/  */ /g'`"
+       X="`echo "$X" | sed 's/-//;s/^ *//;s/  */ /g'`"
        if [ "$X" != "$Y" ]; then
                echo "$FILE" >>BAD
                echo "BAD"
</example>

<chapt id="sec-tools">Security tools in Debian

<p>FIXME: More content needed.

<p>Debian provides also a number of security tools that can make a
Debian box suited for security purposes. This purposes include
protection of information systems through firewalls (either packet or
application-level), intrusion detection (both network and host based),
vulnerability assesment, antivirus, private networks, etc.

<p>Since Debian 3.0 (<em>woody</em>), the distribution features
cryptographic software integrated into the main distribution. OpenSSH
and GNU Privacy Guard are included in the default install, and strong
encryption is now present in web browsers and web servers, databases,
and so forth. Further integration of cryptography is planned for
future releases. This software, due to export restrictions in the US,
was not distributed along with the main distribution but included only
in non-US sites.

<sect id="vuln-asses">Remote vulnerability assesment tools
<p>The tools provided by Debian to perform remote vulnerability assesment
are:
<footnote>
Some of them are provided
when installing the <package>harden-remoteaudit</package> package.
</footnote>
<list>
<item>nessus
<item>raccess
<item>whisker 
<item>nikto (whisker's replacement)
<item>bass (non-free)
<item>satan (non-free)
<!-- currently uploaded but not included
<item>saint (non-free)
<item>sara (non-free)
-->
</list>

<p>By far, the most complete and up-to-date tools is <package>nessus</package>
which is composed of a client (<package>nessus</package>) used as a GUI
and a server (<package>nessusd</package>) which launches the programmed
attacks. Nessus includes remote vulnerabilities for quite a number of 
systems including network appliances, ftp servers, www servers, etc. The
latest releases are able even to parse a web site and try to discover
which interactive pages are available which could be attacked. There are
also Java and Win32 clients (not included in Debian) which can be used
to contact the management server.

<p><package>Whisker</package> is a web-only vulnerability assessment scanner
including anti-IDS tactics (most of which are not <em>anti-IDS</em> anymore).
It is one of the best cgi-scanners available, being able to detect 
WWW servers and launch only a given set of attacks against it. The database
used for scanning can be easily modified to provide for new information.

<p><package>Bass</package> (Bulk Auditing Security Scanner) 
and <package>Satan</package> (Security Auditing Tool for Analysing Networks)
must be thought of more like "proof of concept" programs than 
as tools to be used
while performing audits. Both are quite ancient and are not kept up-to-date.
However, SATAN was the first tool to provide vulnerability assesment in
a simple (GUI) way and Bass is still a very high-perfomance assesment tool.

<sect>Network scanner tools
<p>Debian does provide some tools used for remote scanning of hosts 
(but not vulnerability assesment). These tools are, in some cases,
used by vulnerability assesment scanners as the first type of 
"attack" run against remote hosts in an attempt to 
determine remote services available. Currently Debian provides:
<list>
<item>nmap
<item>xprobe
<item>queso
<item>knocker
<item>isic
<item>icmpush
<item>nbtscan (for NetBIOS audits)
<item>fragrouter
<item>strobe (from the <package>netdiag</package> package)
<item>hping2 (<em>Note:</em> out of date)
</list>

<!--
Etter cap is not included since its a sniffing tool not a remote probe 
-->

<p>Whileas <package>queso</package> and <package>xprobe</package> provide
only remote operating system detection (using TCP/IP fingerprinting),
<package>nmap</package> and <package>knocker</package> do both operating
system detection and port scanning of the remote hosts. On the other
hand, <package>hping2</package> and <package>icmpush</package> can be
used for remote ICMP attack techniques.

<p>Designed specifically for Netbios networks, <package>nbtscan</package>
can be used to scan IP networks and retrieve name information from 
SMB-enabled servers, including: usernames, network names, MAC
addresses...

<p>On the other hand, <package>fragrouter</package> can be used to
test network intrusion detection systems and see if the NIDS can be
eluded by fragmentation attacks.

<p>FIXME: Check <url id="http://bugs.debian.org/153117" name="Bug
#153117"> (ITP fragrouter) to see if it's included.


<p>FIXME add information based on
<url id="http://rr.sans.org/linux/debian_laptop.php"
name="Debian Linux Laptop for Road Warriors"> which describes how to
use Debian and a laptop to scan for wireless (803.1) networks.

<sect>Internal audits
<p>Currently, only the <package>tiger</package> tool used in Debian can
be used to perform internal (also called white box) audit of hosts in
order to determine if the file system is properly set up, which processes
are listening on the host, etc.

<sect>Auditing source code
<p>Debian provides three packages that can be used to audit C/C++ source code
programs and find programming errors that might lead to potential security
flaws:
<list>
<item>flawfinder
<item>rats
<item>splint
</list>

<sect id="vpn">Virtual Private Networks

<p>A virtual private network (VPN) is a group of two or more computer
systems, typically connected to a private network with limited public
network access, that communicate securely over a public network. VPNs
may connect a single computer to a private network (client-server), or
a remote LAN to a private network (server-server). VPNs often include
the use of encryption, strong authentication of remote users or hosts,
and methods for hiding the private network's topology.

<p>Debian provides quite a few packages to set up encrypted virtual
private networks:

<list>

<item><package>vtun</package>
<item><package>tunnelv</package>
<item><package>cipe</package>
<item><package>vpnd</package>
<item><package>tinc</package>
<item><package>secvpn</package>
<item><package>pptpd</package>
<item><package>freeswan</package>

</list>

<p>The FreeSWAN package is probably the best choice overall, since it
promises to interoperate with almost anything that uses the IP
security protocol, IPsec (RFC 2411). However, the other packages
listed above can also help you get a secure tunnel up in a hurry. The
point to point tunneling protocol (PPTP) is a proprietary Microsoft
protocol for VPN. It is supported under Linux, but is known to have
serious security issues.

<p>For more information see the <url
id="http://www.tldp.org/HOWTO/VPN-Masquerade-HOWTO.html"
name="VPN-Masquerade HOWTO"> (covers IPsec and PPTP), <url
id="http://www.tldp.org/HOWTO/VPN-HOWTO.html" name="VPN HOWTO">
(covers PPP over SSH), and <url
id="http://www.tldp.org/HOWTO/mini/Cipe+Masq.html" name="Cipe
mini-HOWTO">, and <url
id="http://www.tldp.org/HOWTO/mini/ppp-ssh/index.html" name="PPP
and SSH mini-HOWTO">.

<sect1>Point to Point tunneling

<p>If you want to provide a tunneling server for a mixed environment
(both Microsoft operating systems and Linux clients) and IPsec is not
an option (since it's only provided for Windows 2000 and Windows XP),
you can use <em>PoPToP</em> (Point to Point Tunneling Server),
provided in the <package>pptpd</package> package.

<p>If you want to use Microsoft's authentication and encryption with
the server provided in the <package>ppp</package> package, note the
following from the FAQ:

<example>
It is only necessary to use PPP 2.3.8 if you want Microsoft compatible
MSCHAPv2/MPPE authentication and encryption. The reason for this is that
the MSCHAPv2/MPPE patch currently supplied (19990813) is against PPP
2.3.8. If you don't need Microsoft compatible authentication/encryption
any 2.3.x PPP source will be fine.
</example>

<p>However, you also have to apply the kernel patch provided by the
<package>kernel-patch-mppe</package> package, which provides the
pp_mppe module for pppd.

<p>Take into account that the encryption in ppptp forces you to store
user passwords in clear text, and that the MS-CHAPv2 protocol contains
<url id="http://mopo.informatik.uni-freiburg.de/pptp_mschapv2/"
name="known security holes">.

<sect>Public Key Infrastructure (PKI)

<p>Public Key Infrastructure (PKI) is a security architecture
introduced to provide an increased level of confidence for exchanging
information over insecure networks. It makes use of the concept of
public and private cryptographic keys to verify the identity of the
sender (signing) and to ensure privacy (encryption).

<p>When considering a PKI, you are confronted with a wide variety of
issues:

<list>

<item>a Certificate Authority (CA) that can issue and verify
certificates, and that can work under a given hierarchy

<item>a Directory to hold user's public certificates

<item>a Database (?) to maintain Certificate Revocation Lists (CRL)

<item>devices that interoperate with the CA in order to print out
smart cards/USB tokens/whatever to securely store certificates

<item>certificate-aware applications that can use certificates issued
by a CA to enroll in encrypted communication and check given
certificates against CRL (for authentication and full Single Sign On
solutions)

<item>a Time stamping authority to digitally sign documents

<item>a management console from which all of this can be properly used
(certificate generation, revocation list control, etc...)

</list>

<p> Debian GNU/Linux has software packages to help you with some of
these PKI issues. They include <prgn>OpenSSL</prgn> (for certificate
generation), <prgn>OpenLDAP</prgn> (as a directory to hold the
certificates), <prgn>gnupg</prgn> and <prgn>freeswan</prgn> (with
X.509 standard support). However, as of the Woody release (Debian
3.0), Debian does not have any of the freely available Certificate
Authorities such as pyCA, <url id="http://www.openca.org"
name="OpenCA"> or the CA samples from OpenSSL. For more information
read the <url id="http://ospkibook.sourceforge.net/" name="Open PKI
book">.

<sect>SSL Infrastructure

<p>Debian does provide some SSL certificates with the distribution so
that they can be installed locally. They are found in the
<package>ca-certificates</package> package. This package provides a
central repository of certificates that have been submitted to Debian
and approved (that is, verified) by the package maintainer, useful for
any OpenSSL applications which verify SSL connections.

<p>FIXME: read debian-devel to see if there was something added to this.

<sect>Anti-virus tools

<p>There are not many anti-virus tools included with Debian GNU/Linux,
probably because GNU/Linux users are not plagued by viruses. The UN*X
security model makes a distinction between privileged (root) processes
and user-owned processes, therefore a "hostile" executable that a
non-root user receives or creates and then executes cannot "infect" or
otherwise manipulate the whole system. However, GNU/Linux worms and
viruses do exist, although there has not (yet, hopefully) been any
that has spread in the wild over any Debian distribution. In any case,
administrators might want to build up anti-virus gateways that protect
against viruses arising on other, more vulnerable systems in their
network.

<p>Debian GNU/Linux currently provides the following tools for
building anti-virus environments:

<list>

<item><url id="http://packages.debian.org/sanitizer"
name="sanitizer">, a tool that uses the <package>procmail</package>
package, which can scan email attachments for viruses, block
attachments based on their filenames, and more.

<item><url id="http://packages.debian.org/amavis-postfix"
name="amavis-postfix">, a script that provides an interface from a
mail transport agent to one or more commercial virus scanners (this
package is built with support for the <prgn>postfix</prgn> MTA only).

<item><package>scannerdaemon</package>, a daemon written in Java that
accepts incoming requests to scan files for viruses.

</list>

<p>As you can see, Debian does not currently provide any anti-virus
software in the main distribution. There are, however, free software
anti-virus projects which might be included in future Debian GNU/Linux
releases:

<list>

<item><url id="http://sourceforge.net/projects/openantivirus/" name="Open
Antivirus"> (see 
<url
id="http://bugs.debian.org/150698" name="Bug #150698 (ITP oav-scannerdaemon"> 
and <url id="http://bugs.debian.org/150695" name="Bug #150695 (ITP oav-update">
).

<item><url id="http://clamav.elektrapro.com/" name="Clam
Antivirus">

<item><url id="http://sourceforge.net/projects/jvirus/"
name="jvirus">.

<item><url id="http://www.sourceforge.net/projects/amavis"
name="Amavis Next Generation">, a mail virus scanner which integrates
with your MTA and supports multiple virus scanning engines (see <url
id="http://bugs.debian.org/154294" name="Bug #154294">).

</list>

<p><!-- FIXME: Not finding this package in Debian, maybe oav-update
replaced it? -->There is also a <package>virussignatures</package>
package, which provides signatures for all packages, this package
provides a script to download the latest virus signatures from <url
id="http://www.openantivirus.org/latest.php">.

<p>FIXME: Check to determine which packages are available for
antivirus. Is clamav available? (there seem to be Debian packages for it).
<p>FIXME: check if scannerdaemon is the same as the open antivirus scanner 
daemon (read ITPs).

<p>However, Debian will <em>never</em> provide commercial anti-virus
software such as: <url
id="http://www.pandasoftware.com/com/linux/linux.asp" name="Panda
Antivirus">, <url
id="http://www.nai.com/naicommon/buy-try/try/products-evals.asp"
name="NAI Netshield (uvscan)">, <url id="http://www.sophos.com/"
name="Sophos Sweep">, <url id="http://www.antivirus.com/products/"
name="TrendMicro Interscan">, or <url id="http://www.ravantivirus.com"
name="RAV">. For more pointers see the <url
id="http://www.computer-networking.de/~link/security/av-linux_e.txt"
name="Linux anti-virus software mini-FAQ">. This does not mean that
this software can be installed properly in a Debian system.

<p>For more information on how to set up an a virus detection system
read Dave Jones' article <url
id="http://www.linuxjournal.com/article.php?sid=4882" name="Building
an E-mail Virus Detection System for Your Network">.

<sect id="gpg-agent">GPG agent

<p>It is very common nowadays to digitally sign (and sometimes
encrypt) e-mail. You might, for example, find that many people
participating on mailing lists sign their list e-mail. Public key
signatures are currently the only means to verify that an e-mail was
sent by the sender and not by some other person.

<p>Debian GNU/Linux provides a number of e-mail clients with built-in
e-mail signing capabilities that interoperate either with
<package>gnupg</package> or <package>pgp</package>:

<list>
<item><package>Evolution</package>.
<item><package>mutt</package>.
<item><package>kmail</package>.

<item><package>sylpheed</package>. Depending on how the stable version
of this package evolves, you may need to use the <em>bleeding edge
version</em>, <package>sylpheed-claws</package>.

<item><package>gnus</package>, which when installed with the
<package>mailcrypt</package> package, is an <prgn>emacs</prgn>
interface to <prgn>gnupg</prgn>.

<item><package>kuvert</package>, which provides this functionality
independently of your chosen mail user agent (MUA) by interacting with
the mail transport agent (MTA).

</list>

<p>Key servers allow you to download published public keys so that you
may verify signatures. One such key server is <url
id="http://wwwkeys.pgp.net">. <package>gnupg</package> can
automatically fetch public keys that are not already in your public
keyring. For example, to configure <prgn>gnupg</prgn> to use the above
key server, edit the file <file>~/.gnupg/options</file> and add the
following line:

<footnote>
For more examples of how to configure <prgn>gnupg</prgn> check
<file>/usr/share/doc/mutt/examples/gpg.rc</file>.
</footnote>
<example>
keyserver wwwkeys.pgp.net
</example>

<p>Most key servers are linked, so that when your public key is added
to one server, the addition is propagated to all the other public key
servers. There is also a Debian GNU/Linux package
<package>debian-keyring</package>, that provides all the public keys
of the Debian developers. The <prgn>gnupg</prgn> keyrings are
installed in <file>/usr/share/keyrings/</file>.

<p>For more information:

<list>

<item><url ID="http://www.gnupg.org/faq.html" name="GnuPG FAQ">.

<item><url ID="http://www.gnupg.org/gph/en/manual.html" name="GnuPG
Handbook">.

<item><url
ID="http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto.html"
name="GnuPG Mini Howto (English)">.

<item><url ID="http://www.uk.pgp.net/pgpnet/pgp-faq/"
name="comp.security.pgp FAQ">.

<item><url ID="http://www.cryptnet.net/fdp/crypto/gpg-party.html"
name="Keysigning Party HOWTO">.

</list>

<chapt>Before the compromise

<sect id="keep-up-to-date">Continuously update the system

<p>You should conduct security updates frequently. The vast majority
of exploits result from known vulnerabilities that have not been
patched in time, as this <url
id="http://www.cs.umd.edu/~waa/vulnerability.html" name="paper by
Bill Arbaugh"> (presented at the 2001 IEEE Symposium on Security and
Privacy) explains. Updates are described under <ref
id="security-update">.

<sect1>Manually checking which security updates are available
<p>Debian does have an specific tool to check if a system needs to
be updated (see Tiger below) but many users will just want to manually
check if any security updates are available for their system. 

<p>If you have configured your system as described in 
<ref id="security-update"> you just need to do:

<example>
# apt-get update
# apt-get upgrade -s
</example>

<p>The first line will download the list of packages available from your
configured package sources. The <tt>-s</tt> will do a simulation run, 
that is, it will <em>not</em> download or install the packages but rather 
tell you which ones should be downloaded/installed.
From the output you can derive which packages have been fixed by
Debian and are available as a security update. Sample:
<example>
# apt-get upgrade -s
Reading Package Lists... Done
Building Dependency Tree... Done
2 packages upgraded, 0 newly installed, 0 to remove and 0  not upgraded.
Inst cvs (1.11.1p1debian-8.1 Debian-Security:3.0/stable)
Inst libcupsys2 (1.1.14-4.4 Debian-Security:3.0/stable)
Conf cvs (1.11.1p1debian-8.1 Debian-Security:3.0/stable)
Conf libcupsys2 (1.1.14-4.4 Debian-Security:3.0/stable)
</example>
<p>In this example, you can see that the system needs to be updated
with new cvs and cupsys packages which are being retrieved from
<em>woody's</em> security update archive. If you want to understand
why this packages are needed, you should go to 
<url id="http://security.debian.org"> and check which recent Debian Security
Advisories have been published related to these packages. In this case,
the related DSAs are
<url id="http://www.debian.org/security/2003/dsa-233" name="DSA-233"> (for cvs)
and
<url id="http://www.debian.org/security/2003/dsa-232" name="DSA-232"> (for cupsys)

<sect1 id="cron-apt">Automatically checking for updates with cron-apt
<p>Another method for automatic security updates is the use of 
<package>cron-apt</package>. This package provides a tool to update
the system at regular intervals (using a cron job). It will just 
update the package list and download new packages by default. I
can also be configured to send mails to the system administrator.
<p>Notice that you might want to check the distribution release,
as described in <ref id="check-releases">, if you intend to 
automatically updated your system (even if only downloading
the packages). Otherwise, you cannot be sured that the downloaded
packages really come from a trusted source.

<sect1>Using Tiger to automatically check for security updates 

<p> If you're looking for a tool to quickly check and report system
security vulnerabilities, try the <package>tiger</package> package.
This package is a set of Bourne shell scripts, C programs and data
files used to perform security audits. The Debian GNU/Linux package
has additional enhancements oriented toward the Debian distribution,
providing more functionality than the Tiger scripts provided by TAMU
(or even TARA, a tiger version distributed by ARSC). See the
README.Debian file and the man page <manref section="8" name="tiger">
for more information.

<p>One of these enhancements is the <tt>deb_checkadvisories</tt>
script. This script takes a list of DSA's and checks against the
installed package base, reporting back any packages that are
vulnerable according to the Debian Security Team. This is a slightly
different, more general approach than is implemented by the Tiger
<tt>check_signatures</tt> script, which checks MD5sums of known
vulnerable programs.

<p>Since Debian currently does not ship a list of MD5sums of known
vulnerable programs (utilized by some other operating systems like Sun
Solaris), the <em>check-against-DSA</em> approach is used. The DSA
approach and the MD5sums approach both suffer from the problem that
signatures have to be updated regularly.

<p>This is currently solved by making new versions of the Tiger
package, but the package maintainer might not make a new version every
time a DSA is announced. A nice addition, which is not yet
implemented, might be to do this proactively. That is, download the
DSAs from the web, make the list and then run the check. The DSAs are
currently updated from the maintainer's local CVS update of the WML
sources used to build <url id="http://security.debian.org"> (the web
server, that is).

<p>A program to parse published DSAs, either received through e-mail
or available in security.debian.org, and then generate the file used
by 'deb_checkadvisories' to confirm vulnerabilities would be
appreciated. Send it as a bug report for <package>tiger</package>.

<p>The mentioned check is run through the standard program
configuration once installed (see <file>/etc/tiger/cronrc</file>):

<example>
# Check for Debian security measures every day at 1 AM
#
1 * *   deb_checkmd5sums deb_nopackfiles deb_checkadvisories
#
</example>

<p>There is an additional check that you might want to add, which is
not yet part of the standard <prgn>cron</prgn> scripts. That check is
the script <tt>check_patches</tt>, which works in the following way:

<list>

<item>run <tt># apt-get update</tt>

<item>checks if there are new packages available

</list>

<p>If you are running a <em>stable</em> system and add the
security.debian.org <prgn>apt</prgn> source line to your
<file>/etc/apt/sources.list</file> (as described in <ref
id="security-update">), this script will be able to tell you if there
are new packages that you need to install. Since the only packages
changing in this setup are security updates, then you have just what
you wanted.

<p>Of course, this will not work if you are running <em>testing</em>
or <em>sid/unstable</em>, since currently, the new packages are
probably much more than security updates.

<p>You can add this script to the checks done by the <prgn>cron</prgn>
job (in the above configuration file) and <prgn>tigercron</prgn> would
mail (to whomever <tt>Tiger_Mail_RCPT</tt> was set to in
<file>/etc/tiger/tigerrc</file>) the new packages:

<example>
# Check for Debian security measures every day at 1 am
#
1 * *   deb_checkmd5sums deb_nopackfiles check_patches
#
</example>

<sect1>Other methods for security updates.

<P>You might also want to take a look at 
<url id="http://therapy.endorphin.org/secpack/" name="secpack"> which
is an unofficial program to do security updates from security.debian.org
with signature checking written by Fruhwirth Clemens.

<sect1>Avoid using the unstable branch

<p>Unless you want to dedicate time to patch packages yourself when a
vulnerability arises, you should <em>not</em> use Debian's unstable
branch for production-level systems. The main reason for this is that
there are no security updates for <em>unstable</em> (see <ref
id="sec-unstable">).

<p>The fact is that some security issues might appear in unstable and
<em>not</em> in the <em>stable</em> distribution. This is due to new
functionality constantly being added to the applications provided
there, as well as new applications being included which might not yet
have been throughly tested.

<p>In order to do security upgrades in the <em>unstable</em> branch,
you might have to do full upgrades to new versions (which might update
much more than just the affected package). Although there have been
some exceptions, security patches are usually only back ported into
the <em>stable</em> branch. The main idea being that between updates,
<em>no new code</em> should be added, just fixes for important issues.

<sect1>Avoid using the testing branch

<p>If you are using the <em>testing</em> branch, there are some issues
that you must take into account regarding the availability of security
updates:

<list>

<item>When a security fix is prepared, packages are prepared for
<em>unstable</em> and the patch is back ported to <em>stable</em>
(since stable is usually some minor or major versions
behind). Packages for the <em>stable</em> distribution are more
thoroughly tested than <em>unstable</em>, since the latter might just
provide the latest upstream release.

<item>Security updates are available immediately for both branches
(but not yet for the testing branch).

<item>If no (new) bugs are detected in the <em>unstable</em> version
of the package, it moves to <em>testing</em> after several days
(usually over a week). However, this does depend on the release state
of the distribution.

</list>

<sect1>Automatic updates in a Debian GNU/Linux system

<p>First of all, automatic updates are not fully recommended, since
administrators should review the DSAs and understand the impact of any
given security update.

<p>If you want to update your system automatically you should:

<list>

<item>Configure <prgn>apt</prgn> so that those packages that you do
not want to update stay at their current version, either with
<prgn>apt</prgn>'s <em>pinning</em> feature or marking them as
<em>hold</em> with <prgn>dpkg</prgn> or <prgn>dselect</prgn>.

<p>To pin the packages under a given release, you must edit
<file>/etc/apt/preferences</file> (see <manref section="5"
name="apt_preferences">) and add:

<example>
  Package: *
  Pin: release a=stable
  Pin-Priority: 100
</example>
<p>FIXME: verify if this configuration is OK.

<item>Either use cron-apt as describe in <ref id="cron-apt"> and enable
it to install downloaded packages or add a <prgn>cron</prgn> entry
yourself so that the update is run daily, for example:

<example>
  apt-get update && apt-get -y upgrade
</example>

The <tt>-y</tt> option will have <prgn>apt</prgn> assume 'yes' for all
the prompts that might arise during the update. In some cases, you
might want to use the <tt>--trivial-only</tt> option instead of the
<tt>--assume-yes</tt> (equivalent to <tt>-y</tt>).

<footnote>You may also want to use the <tt>--quiet</tt> (<tt>-q</tt>)
option to reduce the output of <prgn>apt-get</prgn>, which will stop
the generation of any output if no packages are installed.</footnote>

<item>Configure <prgn>cron</prgn> so that <prgn>debconf</prgn> will
not ask for any input during upgrades, that way they are done
non-interactively. <footnote>Note that some packages might
<em>not</em> use <prgn>debconf</prgn> and updates will stall due to
packages asking for user input during configuration.</footnote>

<item>Check the results of the <prgn>cron</prgn> execution, which will
be mailed to the superuser (unless changed with <tt>MAILTO</tt>
environment variable in the script).

</list>

<p>A safer alternative might be to use the <tt>-d</tt> (or
<tt>--download-only</tt>) option, which will download but not install
the necessary packages. Then if the <prgn>cron</prgn> execution shows
that the system needs to be updated, it can be done manually.

<p>In order to accomplish any of these tasks, the system must be
properly configured to download security updates as discussed in <ref
id="security-update">.

<p>However, this is not recommended for <em>unstable</em> without
careful analysis, since you might bring your system into an unusable
state if some serious bug creeps into an important package and gets
installed in your system. <em>Testing</em> is slightly more
<em>secure</em> with regard to this issue, since serious bugs have a
better chance of being detected before the package is moved into the
testing branch (although, you may have <em>no</em> security updates
available whatsoever).

<p>If you have a mixed distribution, that is, a <em>stable</em>
installation with some packages updated to <em>testing</em> or
<em>unstable</em>, you can fiddle with the pinning preferences as well
as the <tt>--target-release</tt> option in <prgn>apt-get</prgn> to
update <em>only</em> those packages that you have updated.
<footnote>This is a common issue since many users want to maintain a
stable system while updating some packages to <em>unstable</em> to
gain the latest functionality. This need arises due to some projects
evolving faster than the time between Debian's <em>stable</em>
releases.</footnote>

<sect id="intrusion-detect">Set up Intrusion Detection

<p>Debian GNU/Linux includes tools for intrusion detection, which is
the practice of detecting inappropriate or malicious activity on your
local system, or other systems in your private network. This kind of
defense is important if if the system is very critical or you are
truly paranoid. The most common approaches to intrusion detection are
statistical anomaly detection and pattern-matching detection.

<p>Always be aware that in order to really improve the system's
security with the introduction of any of these tools, you need to have
an alert+response mechanism in place. Intrusion detection is a waste
of time if you are not going to alert anyone.

<p>When a particular attack has been detected, most intrusion
detection tools will either log the event with <prgn>syslogd</prgn> or
send e-mail to the root user (the mail recipient is usually
configurable). An administrator has to properly configure the tools so
that false positives do not trigger alerts. Alerts may also indicate
an ongoing attack and might not be useful, say, one day later, since
the attack might have already succeeded. So be sure that there is a
proper policy on handling alerts and that the technical mechanisms to
implement this policy are in place.

<p>An interesting source of information is
<url id="http://www.cert.org/tech_tips/intruder_detection_checklist.html"
name="CERT's Intrusion Detection Checklist">

<sect1>Network based intrusion detection

<p>Network based intrusion detection tools monitor the traffic on a
network segment and use this information as a data source.
Specifically, the packets on the network are examined, and they are
checked to see if they match a certain signature.

<p><package>Snort</package> is a flexible packet sniffer or logger
that detects attacks using an attack signature dictionary. It detects
a variety of attacks and probes, such as buffer overflows, stealth
port scans, CGI attacks, SMB probes, and much more. <prgn>Snort</prgn>
also has real-time alerting capability. You can use <prgn>snort</prgn>
for a range of hosts on your network as well as for your own
host. This is a tool which should be installed on every router to keep
an eye on your network. Just install it with <tt>apt-get install
snort</tt>, follow the questions, and watch it log.

<p>Debian's <package>snort</package> package has many security checks
enabled by default. However, you should customize the setup to take
into account the particular services you run on your system. You may
also want to seek additional checks specific to these services.

<p>There are other, simpler tools that can be used to detect network
attacks. <package>portsentry</package> is an interesting package that
can tip you off to port scans against your hosts. Other tools like
<package>ippl</package> or <package>iplogger</package> will also
detect some IP (TCP and ICMP) attacks, even if they do not provide the
kind of advanced techniques <prgn>snort</prgn> does.

<p>You can test any of these tools with the Debian package
<package>idswakeup</package>, a shell script which generates false
alarms, and includes many common attack signatures.

<sect1>Host based intrusion detection 

<p>Host based intrusion detection involves loading software on the
system to be monitored which uses log files and/or the systems
auditing programs as a data source. It looks for suspicious processes,
monitors host access, and may even monitor changes to critical system
files.

<p><package>Tiger</package> is an older intrusion detection tool which
has been ported to Debian since the Woody branch. <prgn>Tiger</prgn>
provides checks of common issues related to security break-ins, like
password strength, file system problems, communicating processes, and
other ways root might be compromised. This package includes new
Debian-specific security checks including: MD5sums checks of installed
files, locations of files not belonging to packages, and analysis of
local listening processes. The default installation sets up
<prgn>tiger</prgn> to run each day, generating a report that is sent
to the superuser about possible compromises of the system.

<p>Log analysis tools, such as <package>logcheck</package> can also be
used to detect intrusion attempts. See <ref id="custom-logcheck">.

<p>In addition, packages which monitor file system integrity (see <ref
id="check-integ">) can be quite useful in detecting anomalies in a
secured environment. It is most likely that an effective intrusion
will modify some files in the local file system in order to circumvent
local security policy, install Trojans, or create users. Such events
can be detected with file system integrity checkers.

<sect>Avoiding root-kits

<sect1 id="LKM">Loadable Kernel Modules (LKM)

<p>Loadable kernel modules are files containing dynamically loadable
kernel components used to expand the functionality of the kernel. The
main benefit of using modules is the ability to add additional
devices, like an Ethernet or sound card, without patching the kernel
source and recompiling the entire kernel. However, crackers are now
using LKMs for root-kits (knark and adore), opening up back doors in
GNU/Linux systems.

<p>LKM back doors are more sophisticated and less detectable than
traditional root-kits. They can hide processes, files, directories and
even connections without modifying the source code of binaries.  For
example, a malicious LKM can force the kernel into hiding specific
processes from <file>procfs</file>, so that even a known good copy of
the binary <prgn>ps</prgn> would not list accurate information about
the current processes on the system.

<sect1>Detecting root-kits

<p>There are two approaches to defending your system against LKM
root-kits, a proactive defense and a reactive defense. The detection
work can be simple and painless, or difficult and tiring, depending on
the approach taken.

<sect2 id="proactive">Proactive defense

<p>The advantage of this kind of defense is that it prevents damage to
the system in the first place. One such strategy is <em>getting there
first</em>, that is, loading a LKM designed to protect the system from
other malicious LKMs. A second strategy is to remove capabilities from
the kernel itself. For example, you can remove the capability of
loadable kernel modules entirely. Note, however, that there are 
rootkits which might work even in this case, there are some that
tamper with <file>/dev/kmem</file> (kernel memory) directly to make
themselves undetectable.

<p>Debian GNU/Linux has a few packages that can be used to mount a
proactive defense:

<list>

<item><package>kernel-patch-2.4-lsm</package> - LSM is the Linux
Security Modules framework.

<item><package>lcap</package> - A user friendly interface to remove
<em>capabilities</em> (kernel-based access control) in the kernel,
making the system more secure. For example, executing <tt>lcap
CAP_SYS_MODULE</tt>
<footnote>
There are over 28 capabilities including:
<tt>CAP_BSET</tt>,
<tt>CAP_CHOWN</tt>,
<tt>CAP_FOWNER</tt>,
<tt>CAP_FSETID</tt>,
<tt>CAP_FS_MASK</tt>,
<tt>CAP_FULL_SET</tt>,
<tt>CAP_INIT_EFF_SET</tt>,
<tt>CAP_INIT_INH_SET</tt>,
<tt>CAP_IPC_LOCK</tt>,
<tt>CAP_IPC_OWNER</tt>,
<tt>CAP_KILL</tt>,
<tt>CAP_LEASE</tt>,
<tt>CAP_LINUX_IMMUTABLE</tt>,
<tt>CAP_MKNOD</tt>,
<tt>CAP_NET_ADMIN</tt>,
<tt>CAP_NET_BIND_SERVICE</tt>,
<tt>CAP_NET_RAW</tt>,
<tt>CAP_SETGID</tt>, 
<tt>CAP_SETPCAP</tt>,
<tt>CAP_SETUID</tt>,
<tt>CAP_SYS_ADMIN</tt>,
<tt>CAP_SYS_BOOT</tt>,
<tt>CAP_SYS_CHROOT</tt>,
<tt>CAP_SYS_MODULE</tt>,
<tt>CAP_SYS_NICE</tt>,
<tt>CAP_SYS_PACCT</tt>,
<tt>CAP_SYS_PTRACE</tt>,
<tt>CAP_SYS_RAWIO</tt>,
<tt>CAP_SYS_RESOURCE</tt>,
<tt>CAP_SYS_TIME</tt>, and
<tt>CAP_SYS_TTY_CONFIG</tt>. All of them can be de-activated to harden your
kernel.
</footnote>
will remove module loading capabilities (even for the root user).
<footnote>
You don't need to install <package>lcap</package> to do this, but it's
easier than setting <file>/proc/sys/kernel/cap-bound</file> by hand.
</footnote>
For more information on capabilities you might want to check out an
Jon Corbet's <url id="http://lwn.net/1999/1202/kernel.php3" 
name="Kernel development">  section on LWN (december 1999) 

</list>

<p>If you don't really need many kernel features on your GNU/Linux
system, you may want to disable loadable modules support during kernel
configuration. To disable loadable module support, just set
CONFIG_MODULES=n during the configuration stage of building your
kernel, or in the <file>.config</file> file. This will prevent LKM
root-kits, but you lose this powerful feature of the Linux kernel.
Also, disabling loadable modules can sometimes overload the kernel,
making loadable support necessary.

<sect2>Reactive defense

<p>The advantage of a reactive defense is that it does not overload
system resources. It works by comparing the system call table with a
known clean copy in a disk file, <file>System.map</file>. Of course, a
reactive defense will only notify the system administrator after the
system has already been compromised.

<p>Detection of some root-kits in Debian can be accomplished with the
<package>chkrootkit</package> package. The <url name="Chkrootkit"
id="http://www.chkrootkit.org"> program checks for signs of several
known root-kits on the target system, but is not a definitive test.

<p>Another helpful tool is <url name="KSTAT"
id="http://www.s0ftpj.org/en/site.html"> (Kernel Security Therapy Anti
Trolls) by the S0ftproject group. KSTAT checks the kernel memory area
(<file>/dev/kmem</file>) for information about the target host to
assist the system administrator in finding and removing malicious
LKMs.

<sect>Genius/Paranoia Ideas &mdash; what you could do

<p>This is probably the most unstable and funny section, since I hope
that some of the "duh, that sounds crazy" ideas might be realized. The
following are just some ideas for increasing security &mdash; maybe
genius, paranoid, crazy or inspired depending on your point of view.

<list>

<item>Playing around with Pluggable Authentication Modules (PAM). As
quoted in the Phrack 56 PAM article, the nice thing about PAM is that
"You are limited only by what you can think of." It is true. Imagine
root login only being possible with fingerprint or eye scan or
cryptocard (why did I use an OR conjunction instead of AND?).

<item>Fascist Logging. I would refer to all the previous logging
discussion above as "soft logging". If you want to perform real
logging, get a printer with fanfold paper, and send all logs to
it. Sounds funny, but it's reliable and it cannot be tampered with or
removed.

<item>CD distribution. This idea is very easy to realize and offers
pretty good security. Create a hardened Debian distribution, with
proper firewall rules. Turn it into a boot-able ISO image, and burn it
on a CDROM. Now you have a read-only distribution, with about 600 MB
space for services. Just make sure all data that should get written is
done over the network. It is impossible for intruders to get
read/write access on this system, and any changes an intruder does
make can be disabled with a reboot of the system.

<item>Switch module capability off. As discussed earlier, when you
disable the usage of kernel modules at kernel compile time, many
kernel based back doors are impossible to implement because most are
based on installing modified kernel modules.

<item>Logging through serial cable. (contributed by Gaby Schilders) As
long as servers still have serial ports, imagine having one dedicated
logging system for a number of servers. The logging system is
disconnected from the network, and connected to the servers via a
serial-port multiplexer (Cyclades or the like). Now have all your
servers log to their serial ports, write only. The log-machine only
accepts plain text as input on its serial ports and only writes to a
log file. Connect a CD/DVD-writer, and transfer the log file to it
when the log file reaches the capacity of the media. Now if only they
would make CD writers with auto-changers... Not as hard copy as direct
logging to a printer, but this method can handle larger volumes and
CDROMs use less storage space.

<item>Change file attributes using <prgn>chattr</prgn>. (taken from
the Tips-HOWTO, written by Jim Dennis). After a clean install and
initial configuration, use the <prgn>chattr</prgn> program with the
<tt>+i</tt> attribute to make files unmodifiable (the file cannot be
deleted, renamed, linked or written to). Consider setting this
attribute on all the files in <file>/bin</file>, <file>/sbin/</file>,
<file>/usr/bin</file>, <file>/usr/sbin</file>, <file>/usr/lib</file>
and the kernel files in root. You can also make a copy of all files in
<file>/etc/</file>, using <prgn>tar</prgn> or the like, and mark the
archive as immutable.

<p>This strategy will help limit the damage that you can do when
logged in as root. You won't overwrite files with a stray redirection
operator, and you won't make the system unusable with a stray space in
a <prgn>rm -fr</prgn> command (you might still do plenty of damage to
your data &mdash; but your libraries and binaries will be safer.)

<p>This strategy also makes a variety of security and denial of
service (DoS) exploits either impossible or more difficult (since many
of them rely on overwriting a file through the actions of some SETUID
program that <em>isn't providing an arbitrary shell command</em>).

<p>One inconvenience of this strategy arises during building and
installing various system binaries. On the other hand, it prevents the
<prgn>make install</prgn> from over-writing the files. When you forget
to read the Makefile and <prgn>chattr -i</prgn> the files that are to
be overwritten, (and the directories to which you want to add files)
&dash; the make command fails, and you just use the
<prgn>chattr</prgn> command and rerun it. You can also take that
opportunity to move your old bin's and libs out of the way, into a
.old/ directory or tar archive for example.

<p>Note that this strategy also prevents you from upgrading your
system's packages, since the files updated packages provide cannot be
overwritten. You might want to have a script or other mechanism to
disable the immutable flag on all binaries right before doing an
<prgn>apt-get update</prgn>.

</list>

<sect1>Building a honeypot

<p>FIXME: More Content specific to Debian needed.

<p>A honeypot is a system designed to teach system administrators how
crackers probe for and exploit a system. It is a system setup with the
expectation and goal that the system will be probed, attacked and
potentially exploited. By learning the tools and methods employed by
the cracker, a system administrator can learn to better protect their
own systems and network.

<p>A Debian GNU/Linux system can easily be setup as a honeypot, if you
dedicate the time to implement and monitor it. Simply setup the fake
server with a firewall and some sort of network intrusion detector,
put it on the Internet, and wait. Do take care that if the system is
exploited, you are alerted in time (see <ref id="log-alerts">) so that
you can take appropriate measures and terminate the compromise when
you've seen enough. Here are some of the packages and issues to
consider when setting up your honeypot:

<list>

<item>The firewall technology you will use (provided by the Linux
kernel).

<item><package>syslog-ng</package>, useful for sending logs from the
honeypot to a remote syslog server.

<item><package>snort</package>, to set up capture of all the incoming
network traffic to the honeypot and detect the attacks.

<item><package>osh</package>, a SETUID root, security enhanced,
restricted shell with logging (see Lance Spitzner's article below).

<item>Of course, all the daemons you will be using for your fake
server honeypot (but do <em>not</em> harden the honeypot).

<item>The Deception Toolkit, which uses deception to counter attacks.
Homepage: <url id="http://www.all.net/dtk/" name="Deception Toolkit">

<item>Integrity checkers (see <ref id="check-integ">) and The
Coroner's Toolkit (<package>tct</package>) to do post-attack audits.

</list>

<p>You can read more about building honeypots in Lanze Spitzner's
excellent article <url
id="http://www.net-security.org/text/articles/spitzner/honeypot.shtml"
name="To Build a Honeypot"> (from the Know your Enemy series), or
David Raikow's <url
id="http://www.zdnetindia.com/techzone/resources/security/stories/7601.htm"
name="Building your own honeypot">. Also, the <url
id="http://project.honeynet.org/" name="Honeynet Project"> provides
valuable information about building honeypots and auditing the attacks
made on them.

<chapt id="after-compromise">After the compromise (incident response)

<sect>General behavior

<p>If you are physically present when an attack is happening, your
first response should be to remove the machine from the network by
unplugging the network card (if this will not adversely affect any
business transactions). Disabling the network at layer 1 is the only
true way to keep the attacker out of the compromised box (Phillip
Hofmeister's wise advice).

<p>However, some rootkits or back doors are able to detect this event
and react to it. Seeing a <tt>rm -rf /</tt> executed when you unplug
the network from the system is not really much fun. If you are
unwilling to take the risk, and you are sure that the system is
compromised, you should <em>unplug the power cable</em> (all of them
if more than one) and cross your fingers. This may be extreme but, in
fact, will avoid any logic-bomb that the intruder might have
programmed. In this case, the compromised system <em>should not be
re-booted</em>. Either the hard disks should be moved to another
system for analysis, or you should use other media (a CD-ROM) to boot
the system and analyze it. You should <em>not</em> use Debian's rescue
disks to boot the system, but you <em>can</em> use the shell provided
by the installation disks (remember, Alt+F2 will take you to it) to
analyze the system.

<footnote>
If you are adventurous, you can login to the system and save
information on all running processes (you'll get a lot from
/proc/nnn/). It is possible to get the whole executable code from
memory, even if the attacker has deleted the executable files from
disk. Then pull the power cord. </footnote>

<p>The most recommended method for recovering a compromised system is
to use a live-filesystem on CDROM with all the tools (and kernel
modules) you might need to access the compromised system. You can use
the <package>mkinitrd-cd</package> package to build such a
CDROM<footnote>In fact, this is the tool used to build the CDROMs for
the <url id="http://www.gibraltar.at/" name="Gibraltar"> project (a
firewall on a live CDROM based on the Debian
distribution).</footnote>. You might find the <url
id="http://biatchux.dmzs.com/" name="FIRE"> (previously called Biatchux)
CDROM useful here too,
since it's also a live CDROM with forensic tools useful in these
situations. There is not (yet) a Debian-based tool such as this, nor
an easy way to build the CDROM using your own selection of Debian
packages and <package>mkinitrd-cd</package> (so you'll have to read
the documentation provided with it to make your own CDROMs).

<p>If you really want to fix the compromise quickly, you should remove
the compromised host from your network and re-install the operating
system from scratch. Of course, this may not be effective because you
will not learn how the intruder got root in the first place. For that
case, you must check everything: firewall, file integrity, log host,
log files and so on. For more information on what to do following a
break-in, see <url name="Sans' Incident Handling Guide"
id="http://www.sans.org/y2k/DDoS.htm"> or <url
id="http://www.cert.org/tech_tips/root_compromise.html" name="CERT's
Steps for Recovering from a UNIX or NT System Compromise">.

<p>Some common questions on how to handle a compromised Debian
GNU/Linux system are also available in <ref id="vulnerable-system">.

<sect>Backing up the system

<p>Remember that if you are sure the system has been compromised you
cannot trust the installed software or any information that it gives
back to you. Applications might have been Trojanized, kernel modules
might be installed, etc.

<p>The best thing to do is a complete file system backup copy (using
<prgn>dd</prgn>) after booting from a safe medium. Debian GNU/Linux
CDROMs can be handy for this since they provide a shell in console 2
when the installation is started (jump to it using Alt+2 and pressing
Enter). From this shell, backup the information to another host if
possible (maybe a network file server through NFS/FTP). Then any
analysis of the compromise or re-installation can be performed while
the affected system is offline.

<p>If you are sure that the only compromise is a Trojan kernel module,
you can try to run the kernel image from the Debian CDROM in
<em>rescue</em> mode. Make sure to startup in <em>single user</em>
mode, so no other Trojan processes run after the kernel.

<sect>Contact your local CERT
<p>The CERT (Computer and Emergency Response Team) is an organisation
that can help you recover from a system compromise. There are CERTs
worldwide
<footnote>
This is a list of some CERTS, for a full list look at the 
<url id="http://www.first.org/team-info/" name="FIRST Member Team
information"> (FIRST is the Forum of Incident Response and Security Teams):
<url id="http://www.auscert.org.au" name="AusCERT"> (Australia),
<url id="http://www.unam-cert.unam.mx/" name="UNAM-CERT"> (Mexico)
<url id="http://www.cert.funet.fi" name="CERT-Funet"> (Finland),
<url id="http://ww.dfn-cert.de" name="DFN-CERT"> (Germany), 
<url id="http://cert.uni-stuttgart.de/" name="RUS-CERT"> (Germany),
<url id="http://idea.sec.dsi.unim.it" name="CERT-IT"> (Italy),
<url id="http://www.jpcert.or.jp/" name="JPCERT/CC"> (Japan),
<url id="http://cert.uninett.no" name="UNINETT CERT"> (Norway),
<url id="http://www.cert.pl" name="CERT Polskay"> (Poland),
<url id="http://www.cert.ru" name="RU-CERT"> (Russia),
<url id="http://www.arnes.si/si-cert/" name="Sl-CERT"> (Slovenia)
<url id="http://www.rediris.es/cert/" name="IRIS-CERT"> (Spain),
<url id="http://www.switch.ch/cert/" name="SWITCH-CERT"> (Switzerland),
<url id="http://www.cert.org.tw" name="TWCERT/CC"> (Taiwan), 
and
<url id="http://ww.cert.org" name="CERT/CC"> (US).
</footnote>
and you should contact your local CERT in the event of a security incident
which has lead to a system compromise. The people at your local CERT
can help you recover from it.

<p>Providing your local CERT (or the CERT coordination center) with information
on the compromise even if you do not seek assistance can also help
others since the aggregate information of reported incidents is used
in order to determine if a given vulnerability is in wide spread use,
if their is a new worm aloft, which new attack tools are being used.
This information is used in order to provide the Internet community
with information on the <url id="http://www.cert.org/current/" name="current 
security incidents activity">, and to publish 
<url id="http://www.cert.org/incident_notes/" name="incident notes"> and
even <url id="http://www.cert.org/advisories/" name="advisories">. 
For more detailed information read on how (and why) to report an
incident read <url id="http://www.cert.org/tech_tips/incident_reporting.html"
name="CERT's Incident Reporting Guidelines">.

<p>You can also use less formal mechanisms if you need help for recovering
from a compromise or want to discuss incident information. This includes
the
<url id="http://marc.theaimsgroup.com/?l=incidents" name="incidents
mailing list"> and the 
<url id="http://marc.theaimsgroup.com/?l=intrusions" name="Intrusions
mailing list">.


<sect>Forensic analysis

<p>If you wish to gather more information, the <package>tct</package>
(The Coroner's Toolkit from Dan Farmer and Wietse Venema) package
contains utilities which perform a 'post mortem' of a system.
<package>tct</package> allows the user to collect information about
deleted files, running processes and more. See the included
documentation for more information.

<p>Some other tools that can be used for forensic analysis provided
in the Debian distribution are:

<list>
<item><package>Fenris</package>.
<item><package>Strace</package>.
<item><package>Ltrace</package>.
</list>

<p>Any of these packages can be used to analyze rogue binaries (such
as back doors), in order to determine how they work and what they do
to the system. Some other common tools include <prgn>ldd</prgn> (in
<package>libc6</package>), <prgn>strings</prgn> and
<prgn>objdump</prgn> (both in <package>binutils</package>).

<p>If you try to do forensic analysis with back doors or suspected
binaries retrieved from compromised systems, you should do so in a
secure environment (for example in a <package>bochs</package> or
<package>flex86</package> image or a <prgn>chroot</prgn>'ed
environment using a user with low privileges). Otherwise your own
system can be back doored/r00ted too!

<p>Also, remember that forensics analysis should be done always on the
backup copy of the data, <em>never</em> on the data itself, in case
the data is altered during analysis and the evidence is lost.

<p>FIXME: This paragraph will hopefully provide more information about
forensics in a Debian system in the coming future.

<p>FIXME: talk on how to do a debsums on a stable system with the
MD5sums on CD and with the recovered file system restored on a
separate partition.

<p>FIXME add pointers to forensic analysis papers (like the Honeynet's
reverse challenge or <url id="http://staff.washington.edu/dittrich/"
name="David Dittirch's papers">.

<chapt>Frequently asked Questions (FAQ)

<p>This chapter introduces some of the most common questions from the
Debian security mailing list. You should read them before posting
there or else people might tell you to RTFM.

<sect>Security in the Debian operating system

<sect1>Is Debian more secure than X?

<p>A system is only as secure as its administrator is capable of
making it. Debian's default installation of services aims to be
<em>secure</em>, but may not be as paranoid as some other operating
systems which install all services <em>disabled by default</em>. In
any case, the system administrator needs to adapt the security of the
system to his local security policy.

<p>For a collection of data regarding security vulnerabilities for
many operating systems, see <url
id="http://securityfocus.com/vulns/stats.shtml">. Is this data useful?
The site lists several factors to consider when interpreting the data,
and warns that the data cannot be used to compare the vulnerabilities
of one operating system versus another.<footnote>For example, based on
the Securityfocus data, it might seem that Windows NT is more secure
than Linux, which is a questionable assertion. After all, Linux
distributions usually provide many more applications compared to
Microsoft's Windows NT. This <em>counting vulnerabilities</em>
issues are better described in 
<url id="http://www.dwheeler.com/oss_fs_why.html#security" 
name="Why Open Source Software / Free Software (OSS/FS)? Look at the Numbers!">
by David A. Wheeler</footnote> Also, keep in mind that some
Bugtraq vulnerabilities regarding Debian apply only to the
<em>unstable</em> branch.

<sect2>Is Debian more secure than other Linux distributions (such as
RedHat, SuSE...)?

<p>There are not really many differences between Linux distributions,
with exceptions to the base installation and package management
system. Most distributions share many of the same applications, with
differences mainly in the versions of these applications that are
shipped with the distribution's stable release. For example, the
kernel, Bind, Apache, OpenSSH, XFree, gcc, zlib, etc. are all common
across Linux distributions.

<p>For example, RedHat was unlucky and shipped when foo 1.2.3 was
current, which was then later found to have a security hole. Debian,
on the other hand, was lucky enough to ship foo 1.2.4, which
incorporated the bug fix. That was the case in the big <url
id="http://www.cert.org/advisories/CA-2000-17.html" name="rpc.statd">
problem from a couple years ago.

<p>There is a lot of collaboration between the respective security
teams for the major Linux distributions. Known security updates are
rarely, if ever, left unfixed by a distribution vendor. Knowledge of a
security vulnerability is never kept from another distribution vendor,
as fixes are usually coordinated upstream, or by <url
id="http://cert.org" name="CERT">. As a result, necessary security
updates are usually released at the same time, and the relative
security of the different distributions is very similar.

<p>One of Debian's main advantages with regards to security is the
ease of system updates through the use of <prgn>apt</prgn>. Here are
some other aspects of security in Debian to consider:

<list>

<item>Debian provides more security tools than other distributions,
see <ref id="sec-tools">.

<item>Debian's standard installation is smaller (less functionality),
and thus more secure. Other distributions, in the name of usability,
tend to install many services by default, and sometimes they are not
properly configured (remember the <url
id="http://www.sans.org/y2k/lion.htm" name="Ramen or Lion
worms">). Debian's installation is not as limited as OpenBSD (no
daemons are active per default), but it's a good compromise.

<footnote>Without diminishing the fact that some distributions, such
as RedHat or Mandrake, are also taking into account security in their
standard installations by having the user select <em>security
profiles</em>, or using wizards to help with configuration of
<em>personal firewalls</em>.</footnote>

<item>Debian documents best security practices in documents like this
one.

</list>

<sect1>There are many Debian bugs in Bugtraq. Does this mean that it
is very vulnerable?

<p>The Debian distribution boasts a large and growing number of
software packages, probably more than provided by many proprietary
operating systems. The more packages installed, the greater the
potential for security issues in any given system.

<p>More and more people are examining source code for flaws. There are
many advisories related to source code audits of the major software
components included in Debian. Whenever such source code audits turn
up security flaws, they are fixed and an advisory is sent to lists
such as Bugtraq.

<p>Bugs that are present in the Debian distribution usually affect
other vendors and distributions as well. Check the "Debian specific:
yes/no" section at the top of each advisory (DSA).

<sect1>Does Debian have any certification related to security?

<p>Short answer: no. 

<p>Long answer: certification costs money and nobody has dedicated the
resources in order to certify Debian GNU/Linux to any level of, for
example, the Common Criteria. If you are interested in having a
certified GNU/Linux distribution, try to provide the resources needed
to make it possible.

<sect1>Are there any hardening programs for Debian?

<p>Yes. <url name="Bastille Linux"
id="http://www.bastille-linux.org">, originally oriented toward other
Linux distributions (RedHat and Mandrake), currently works for
Debian. Steps are being taken to integrate the changes made to the
upstream version into the Debian package, named
<package>bastille</package>.

<p>Some people believe, however, that a hardening tool does not
eliminate the need for good administration.

<sect1>I want to run XYZ service, which one should I choose?

<p>One of Debian's great strengths is the wide variety of choice
available between packages that provide the same functionality (DNS
servers, mail servers, ftp servers, web servers, etc.). This can be
confusing to the novice administrator when trying to determine which
package is right for you. The best match for a given situation depends
on a balance between your feature and security needs. Here are some
questions to ask yourself when deciding between similar packages:

<list>

<item>Is the software maintained upstream? When was the last release?

<item>Is the package mature? The version number really does
<em>not</em> tell you about its maturity. Try to trace the software's
history.

<item>Is the software bug-ridden? Have there been security advisories
related to it?

<item>Does the software provide all the functionality you need? Does
it provide more than you really need?

</list>

<sect1>How can I make service XYZ more secure in Debian?
<!-- Changed to XYZ in order to avoid confusion :) jfs -->

<p>You will find information in this document to make some services
(FTP, Bind) more secure in Debian GNU/Linux. For services not covered
here, check the program's documentation, or general Linux
information. Most of the security guidelines for Unix systems also
apply to Debian. In most cases, securing service X in Debian is like
securing that service in any other Linux distribution (or Un*x, for
that matter).

<sect1>How can I remove all the banners for services?

<p>If you do not like users connecting to your POP3 daemon, for
example, and retrieving information about your system, you might want
to remove (or change) the banner the service shows to users.
<footnote>Note that this is 'security by obscurity', and will probably
not be worth the effort in the long term.</footnote> Doing so depends
on the software you are running for a given service. For example, in
<prgn>postfix</prgn>, you can set your SMTP banner in
<file>/etc/postfix/main.cf</file>: 
<example> 
  smtpd_banner = $myhostname ESMTP $mail_name (Debian/GNU) 
</example>

<p>Other software is not as easy to change. <package>OpenSSH</package>
will need to be recompiled in order to change the version that it
prints. Take care not to remove the first part (<tt>SSH-2.0</tt>) of
the banner, which clients use to identify which protocol(s) is
supported by your package.

<sect1>Are all Debian packages safe?

<p>The Debian security team cannot possibly analyze all the packages
included in Debian for potential security vulnerabilities, since there
are just not enough resources to source code audit the whole
project. However, Debian does benefit from the source code audits made
by upstream developers or by other projects like the <url name="Linux
Kernel Security Audit Project"
id="http://kernel-audit.sourceforge.net/">, or the <url name="Linux
Security-Audit Project" id="http://www.lsap.org/">.

<p>As a matter of fact, a Debian developer could distribute a Trojan
in a package, and there is no possible way to check it out. Even if
introduced into a Debian branch, it would be impossible to cover all
the possible situations in which the Trojan would execute. This is why
Debian has a <em>"no guarantees"</em> license clause.

<p>However, Debian users can take confidence in the fact that the
stable code has a wide audience and most problems would be uncovered
through use. Installing untested software is not recommended in a
critical system (if you cannot provide the necessary code audit). In
any case, if there were a security vulnerability introduced into the
distribution, the process used to include packages (using digital
signatures) ensures that the problem can be ultimately traced back to
the developer. The Debian project has not taken this issue lightly.

<sect1>Why are some log files/configuration files world-readable, isn't
this insecure?

<p>Of course, you can change the default Debian permissions on your
system. The current policy regarding log files and configuration files
is that they are world readable <em>unless</em> they provide sensitive
information.

<p>Be careful if you do make changes since:

<list>

<item>Processes might not be able to write to log files if you
restrict their permissions.

<item>Some applications may not work if the configuration file they
depend on cannot be read. For example, if you remove the
world-readable permission from <file>/etc/samba/smb.conf</file>, the
<prgn>smbclient</prgn> program will not work when run by a normal
user.

</list>

<p>FIXME: Check if this is written in the Policy. Some packages
(i.e. ftp daemons) seem to enforce different permissions.

<sect1>Why does /root/ (or UserX) have 755 permissions?

<p>As a matter of fact, the same questions stand for any other
user. Since Debian's installation does not place <em>any</em> file
under that directory, there's no sensitive information to protect
there. If you feel these permissions are too broad for your system,
consider tightening them to 750. For users, read <ref
id="limit-user-perm">.

<p>This Debian security mailing list <url
id="http://lists.debian.org/debian-devel/2000/debian-devel-200011/msg00783.html"
name= "thread"> has more on this issue.

<sect1>After installing a grsec/firewall, I started receiving many
console messages! How do I remove them?

<p>If you are receiving console messages, and have configured
<file>/etc/syslog.conf</file> to redirect them to either files or a
special TTY, you might be seeing messages sent directly to the
console.

<p>The default console log level for any given kernel is 7, which
means that any message with lower priority will appear in the
console. Usually, firewalls (the LOG rule) and some other security
tools log lower that this priority, and thus, are sent directly to the
console.

<p>To reduce messages sent to the console, you can use
<prgn>dmesg</prgn> (<tt>-n</tt> option, see <manref section="8"
name="dmesg">), which examines and <em>controls</em> the kernel ring
buffer. To fix this after the next reboot, change
<file>/etc/init.d/klogd</file> from:

<example>
  KLOGD=""
</example>

<p>to:

<example>
  KLOGD="-c 4"
</example>

<p>Use a lower number for <tt>-c</tt> if you are still seeing them. A
description of the different log levels can be found in
<file>/usr/include/sys/syslog.h</file>:

<example>
  #define LOG_EMERG       0       /* system is unusable */
  #define LOG_ALERT       1       /* action must be taken immediately */
  #define LOG_CRIT        2       /* critical conditions */
  #define LOG_ERR         3       /* error conditions */
  #define LOG_WARNING     4       /* warning conditions */
  #define LOG_NOTICE      5       /* normal but significant condition */
  #define LOG_INFO        6       /* informational */
  #define LOG_DEBUG       7       /* debug-level messages */
</example>

<sect1>Operating system users and groups

<sect2>Are all system users necessary?

<p>Yes and no. Debian comes with some predefined users (user id (UID)
&lt; 99 as described in <url name="Debian Policy"
id="http://www.debian.org/doc/debian-policy/"> or
<file>/usr/share/doc/base-passwd/README</file>) to ease the
installation of some services that require that they run under an
appropriate user/UID. If you do not intend to install new services,
you can safely remove those users who do not own any files in your
system and do not run any services. In any case, the default behavior
is that UID's from 0 to 99 are reserved in Debian, and UID's from 100
to 999 are created by packages on install (and deleted when the
package is purged).

<p>To easily find users who don't own any files, execute the following
command (run it as root, since a common user might not have enough
permissions to go through some sensitive directories):

<!-- Took the liberty to make this script more secure ... >:^) // era -->
<example>
  cut -f 1 -d : /etc/passwd | \
  while read i; do find / -user "$i" | grep -q . && echo "$i"; done
</example>

<p>These users are provided by <package>base-passwd</package>. Look in
its documentation for more information on how these users are handled
in Debian. The list of default users (with a corresponding group)
follows:

<list>

<item>root: Root is (typically) the superuser.

<item>daemon: Some unprivileged daemons that need to write to files on
disk run as daemon.daemon (e.g., <prgn>portmap</prgn>,
<prgn>atd</prgn>, probably others). Daemons that don't need to own any
files can run as nobody.nogroup instead, and more complex or security
conscious daemons run as dedicated users. The daemon user is also
handy for locally installed daemons.

<item>bin: maintained for historic reasons.

<item>sys: same as with bin. However, /dev/vcs* and
<file>/var/spool/cups</file> are owned by group sys.

<item>sync: The shell of user sync is <file>/bin/sync</file>. Thus, if
its password is set to something easy to guess (such as ""), anyone
can sync the system at the console even if they have don't have an
account.

<item>games: Many games are SETGID to games so they can write their
high score files. This is explained in policy.

<item>man: The man program (sometimes) runs as user man, so it can
write cat pages to <file>/var/cache/man</file>

<item>lp: Used by printer daemons.

<item>mail: Mailboxes in <file>/var/mail</file> are owned by group
mail, as explained in policy. The user and group are used for other
purposes by various MTA's as well.

<item>news: Various news servers and other associated programs (such
as <prgn>suck</prgn>) use user and group news in various ways. Files
in the news spool are often owned by user and group news. Programs
such as <prgn>inews</prgn> that can be used to post news are typically
SETGID news.

<item>uucp: The uucp user and group is used by the UUCP subsystem. It
owns spool and configuration files. Users in the uucp group may run
uucico.

<item>proxy: Like daemon, this user and group is used by some daemons
(specifically, proxy daemons) that don't have dedicated user id's and
that need to own files. For example, group proxy is used by
<prgn>pdnsd</prgn>, and <prgn>squid</prgn> runs as user proxy.

<item>majordom: <prgn>Majordomo</prgn> has a statically allocated UID
on Debian systems for historical reasons. It is not installed on new
systems.

<item>postgres: <prgn>Postgresql</prgn> databases are owned by this
user and group. All files in <file>/var/lib/postgresql</file> are
owned by this user to enforce proper security.

<item>www-data: Some web servers run as www-data. Web content should
*not* be owned by this user, or a compromised web server would be able
to rewrite a web site. Data written out by web servers, including log
files, will be owned by www-data.

<item>backup: So backup/restore responsibilities can be locally
delegated to someone without full root permissions.

<item>operator: Operator is historically (and practically) the only
'user' account that can login remotely, and doesn't depend on NIS/NFS.

<item>list: Mailing list archives and data are owned by this user and
group. Some mailing list programs may run as this user as well.

<item>irc: Used by irc daemons. A statically allocated user is needed
only because of a bug in <prgn>ircd</prgn>, which SETUID()s itself to
a given UID on startup.

<item>gnats.

<item>nobody, nogroup: Daemons that need not own any files run as user
nobody and group nogroup. Thus, no files on a system should be owned
by this user or group.

</list>

<p>Other groups which have no associated user:

<list>

<item>adm: Group adm is used for system monitoring tasks. Members of
this group can read many log files in <file>/var/log</file>, and can
use xconsole. Historically, <file>/var/log</file> was
<file>/usr/adm</file> (and later <file>/var/adm</file>), thus the name
of the group.

<item>tty: TTY devices are owned by this group. This is used by write
and wall to enable them to write to other people's TTYs.

<item>disk: Raw access to disks. Mostly equivalent to root access.

<item>kmem: /dev/kmem and similar files are readable by this
group. This is mostly a BSD relic, but any programs that need direct
read access to the system's memory can thus be made SETGID kmem.

<item>dialout: Full and direct access to serial ports. Members of this
group can reconfigure the modem, dial anywhere, etc.

<item>dip: The group's name stands for "Dial-up IP", and membership in
dip allows you to use tools like <prgn>ppp</prgn>, <prgn>dip</prgn>,
<prgn>wvdial</prgn>, etc. to dial up a connection. The users in this
group cannot configure the modem, but may run the programs that make
use of it.

<item>fax: Allows members to use fax software to send / receive faxes.

<item>voice: Voicemail, useful for systems that use modems as
answering machines.

<item>cdrom: This group can be used locally to give a set of users
access to a CDROM drive.

<item>floppy: This group can be used locally to give a set of users
access to a floppy drive.

<item>tape: This group can be used locally to give a set of users
access to a tape drive.

<item>sudo: Members of this group don't need to type their password
when using <prgn>sudo</prgn>. See
<file>/usr/share/doc/sudo/OPTIONS</file>.

<item>audio: This group can be used locally to give a set of users
access to an audio device.
<item>src: This group owns source code, including files in
<file>/usr/src</file>. It can be used locally to give a user the
ability to manage system source code.

<item>shadow: <file>/etc/shadow</file> is readable by this group. Some
programs that need to be able to access the file are SETGID shadow.

<item>utmp: This group can write to <file>/var/run/utmp</file> and
similar files. Programs that need to be able to write to it are SETGID
utmp.

<item>video: This group can be used locally to give a set of users
access to an video device.

<item>staff: Allows users to add local modifications to the system
(<file>/usr/local</file>, <file>/home</file>) without needing root
privileges. Compare with group "adm", which is more related to
monitoring/security.

<item>users: While Debian systems use the private user group system by
default (each user has their own group), some prefer to use a more
traditional group system, in which each user is a member of this
group.

</list>

<sect2>What is the difference between the adm and the staff group?

<p>The 'adm' group are usually administrators, and this group
permission allows them to read log files without having to
<prgn>su</prgn>. The 'staff' group are usually help-desk/junior
sysadmins, allowing them to work in <file>/usr/local</file> and create
directories in <file>/home</file>.

<sect1>Why is there a new group when I add a new user? (or Why does
Debian give each user one group?)

<p>The default behavior in Debian is that each user has its own,
private group. The traditional UN*X scheme assigned all users to the
<em>users</em> group. Additional groups were created and used to
restrict access to shared files associated with different project
directories. Managing files became difficult when a single user worked
on multiple projects because when someone created a file, it was
associated with the primary group to which they belong (e.g. 'users').

<p>Debian's scheme solves this problem by assigning each user to their
own group; so that with a proper umask (0002) and the SETGID bit set
on a given project directory, the correct group is automatically
assigned to files created in that directory. This makes it easier for
people who work on multiple projects, because they will not have to
change groups or umasks when working on shared files.

<p>You can, however, change this behavior by modifying
<file>/etc/adduser.conf</file>. Change the <em>USERGROUPS</em>
variable to 'no', so that a new group is not created when a new user
is created. Also, set <em>USERS_GID</em> to the GID of the users group
which all users will belong to.

<sect1>Question regarding services and open ports

<sect2>Why are all services activated upon installation?

<p>That's just an approach to the problem of being, on one side,
security conscious and on the other side user friendly. Unlike
OpenBSD, which disables all services unless activated by the
administrator, Debian GNU/Linux will activate all installed services
unless deactivated (see <ref id="disableserv"> for more
information). After all you installed the service, didn't you?

<p>There has been much discussion on Debian mailing lists (both at
debian-devel and at debian-security) regarding which is the better
approach for a standard installation. However, as of this writing
(March 2002), there still isn't a consensus.

<sect2>Can I remove <prgn>inetd</prgn>?

<p><prgn>Inetd</prgn> is not easy to remove since
<package>netbase</package> depends on the package that provides it
(<package>netkit-inetd</package>). If you want to remove it, you can
either disable it (see <ref id="disableserv">) or remove the package by
using the <package>equivs</package> package.

<sect2>Why do I have port 111 open?

<p>Port 111 is sunrpc's portmapper, and it is installed by default as
part of Debian's base installation since there is no need to know when
a user's program might need RPC to work correctly. In any case, it is
used mostly for NFS. If you do not need it, remove it as explained in
<ref id="rpc">.

<sect2>What use is <prgn>identd</prgn> (port 113) for?

<p>Identd service is an authentication service that identifies the
owner of a specific TCP/IP connection to the remote server accepting
the connection. Typically, when a user connects to a remote host,
<prgn>inetd</prgn> on the remote host sends back a query to port 113
to find the owner information. It is often used by mail, FTP and IRC
servers, and can also be used to track down which user in your local
system is attacking a remote system.

<p>There has been extensive discussion on the security of
<prgn>identd</prgn> (See <url
id="http://lists.debian.org/debian-security/2001/debian-security-200108/msg00297.html"
name="mailing list archives">). In general, <prgn>identd</prgn> is
more helpful on a multi-user system than on a single user
workstation. If you don't have a use for it, disable it, so that you
are not leaving a service open to the outside world. If you decide to
firewall the identd port, <em>please</em> use a reject policy and not
a deny policy, otherwise a connection to a server utilizing
<prgn>identd</prgn> will hang until a timeout expires (see <url
id="http://logi.cc/linux/reject_or_deny.php3" name="reject or deny
issues">).

<sect2>I have services using port 1 and 6, what are they and how can I
remove them?

<p>If you have run the command <tt>netstat -an</tt> and receive:

<example>
  Active Internet connections (servers and established)
  Proto Recv-Q Send-Q Local Address           Foreign Address         State
  PID/Program name
  raw        0      0 0.0.0.0:1               0.0.0.0:*               7
  -
  raw        0      0 0.0.0.0:6               0.0.0.0:*               7
  -
</example>

<p>You are <em>not</em> seeing processes listening on TCP/UDP port 1
and 6. In fact, you are seeing a process listening on a <em>raw</em>
socket for protocols 1 (ICMP) and 6 (TCP). Such behavior is common to
both Trojans and some intrusion detection systems such as
<package>iipl</package>, <package>iplogger</package> and
<package>portsentry</package>. If you have these packages simply
remove them. If you do not, try netstat's <tt>-p</tt> (process)
option to see which process is running these listeners.

<sect2>I found the port XYZ open, can I close it?

<p>Yes, of course. The ports you are leaving open should adhere to
your individual site's policy regarding public services available to
other networks. Check if they are being opened by <prgn>inetd</prgn>
(see <ref id="inetd">), or by other installed packages and take the
appropriate measures (i.e, configure inetd, remove the package, avoid
it running on boot-up).

<sect2>Will removing services from <file>/etc/services</file> help
secure my box?

<p><em>No</em>, <file>/etc/services</file> only provides a mapping
between a virtual name and a given port number. Removing names from
this file will not (usually) prevent services from being started. Some
daemons may not run if <file>/etc/services</file> is modified, but
that's not the norm. To properly disable the service, see <ref
id="disableserv">.

<sect1>Common security issues

<sect2>I have lost my password and cannot access the system!

<p>The steps you need to take in order to recover from this depend on
whether or not you have applied the suggested procedure for limiting
access to <prgn>lilo</prgn> and your system's BIOS.

<p>If you have limited both, you need to disable the BIOS setting that
only allows booting from the hard disk before proceeding. If you have
also forgotten your BIOS password, you will have to reset your BIOS by
opening the system and manually removing the BIOS battery.

<p>Once you have enabled booting from a CD-ROM or diskette enable, try
the following:

<list>

<item>Boot-up from a rescue disk and start the kernel

<item>Go to the virtual console (Alt+F2)

<item>Mount the hard disk where your /root is

<item>Edit (Debian 2.2 rescue disk comes with the editor
<prgn>ae</prgn>, and Debian 3.0 comes with <prgn>nano-tiny</prgn>
which is similar to <prgn>vi</prgn>) <file>/etc/shadow</file> and
change the line:

<example>
  root:asdfjl290341274075:XXXX:X:XXXX:X::: (X=any number)
</example>

<p>to:

<example>
  root::XXXX:X:XXXX:X:::
</example>

</list>

<p>This will remove the forgotten root password, contained in the
first colon separated field after the user name. Save the file, reboot
the system and login with root using an empty password. Remember to
reset the password. This will work unless you have configured the
system more tightly, i.e. if you have not allowed users to have null
passwords or not allowed root to login from the console.

<p>If you have introduced these features, you will need to enter into
single user mode. If LILO has been restricted, you will need to rerun
<prgn>lilo</prgn> just after the root reset above. This is quite
tricky since your <file>/etc/lilo.conf</file> will need to be tweaked
due to the root (/) file system being a ramdisk and not the real
hard disk.

<p>Once LILO is unrestricted, try the following:

<list>

<item>Press the Alt, shift or Control key just before the system BIOS
finishes, and you should get the LILO prompt.

<item>Type <tt>linux single</tt>, <tt>linux init=/bin/sh</tt> or 
<tt>linux 1</tt> at the prompt.

<item>This will give you a shell prompt in single-user mode (it will
ask for a password, but you already know it)

<item>Re-mount read/write the root (/) partition, using the mount
command. 
<example>
  # mount -o remount,rw / 
</example>

<item>Change the superuser password with <prgn>passwd</prgn> (since
you are superuser it will not ask for the previous password).

</list>

<sect1>How do I accomplish setting up a service for my users without
giving out shell accounts?

<p>For example, if you want to set up a POP service, you don't need to
set up a user account for each user accessing it. It's best to set up
directory-based authentication through an external service (like
Radius, LDAP or an SQL database). Just install the appropriate PAM
library (<package>libpam-radius-auth</package>,
<package>libpam-ldap</package>, <package>libpam-pgsql</package> or
<package>libpam-mysql</package>), read the documentation (for
starters, see <ref id="auth-pam">) and configure the PAM-enabled
service to use the back end you have chosen. This is done by editing
the files under <file>/etc/pam.d/</file> for your service and
modifying the 
<example> 
  auth   required    pam_unix_auth.so shadow nullok use_first_pass 
</example> 
to, for example, ldap: 
<example>
  auth   required    pam_ldap.so 
</example>

<!-- FIXME: check if this i right (jfs) -->

<p>In the case of LDAP directories, some services provide LDAP schemas
to be included in your directory that are required in order to use
LDAP authentication. If you are using a relational database, a useful
trick is to use the <em>where</em> clause when configuring the PAM
modules. For example, if you have a database with the following table
attributes:

<example>
  (user_id, user_name, realname, shell, password, UID, GID, homedir, sys, pop, imap, ftp)
</example>

<p>By making the services attributes boolean fields, you can use them
to enable or disable access to the different services just by
inserting the appropriate lines in the following files:

<list>

<item><file>/etc/pam.d/imap</file>:<tt>where=imap=1</tt>.

<item><file>/etc/pam.d/qpopper</file>:<tt>where=pop=1</tt>.

<item><file>/etc/nss-mysql*.conf</file>:<tt>users.where_clause =
user.sys = 1;</tt>.

<item><file>/etc/proftpd.conf</file>:<tt> SQLWhereClause "ftp=1"</tt>.

</list>

<sect id="vulnerable-system">My system is vulnerable! (Are you sure?)

<sect1 id="vulnasses-false-positive">Vulnerability assessment scanner X
says my Debian system is vulnerable!

<p>Many vulnerability assessment scanners give false positives when
used on Debian systems, since they only use version checks to
determine if a given software package is vulnerable, but do not really
test the security vulnerability itself. Since Debian does not change
software versions when fixing a package (many times the fix made for
newer releases is back ported), some tools tend to think that an
updated Debian system is vulnerable when it is not.

<p>If you think your system is up to date with security patches, you
might want to use the cross references to security vulnerability
databases published with the DSAs (see <ref id="dsa">) to weed out
false positives, if the tool you are using includes CVE references.

<sect1>I've seen an attack in my system's logs. Is my system
compromised?

<p>A trace of an attack does not always mean that your system has been
compromised, and you should take the usual steps to determine if the
system is indeed compromised (see <ref id="after-compromise">). Also,
notice that the fact that you see the attacks in the log might mean
your system is already vulnerable to it (a determined attacker might
have used some other vulnerability besides the ones you have seen,
however).

<sect1>I have found strange 'MARK' lines in my logs: Am I compromised?

<p>You might find the following lines in your system logs:

<example>
  Dec 30 07:33:36 debian -- MARK --
  Dec 30 07:53:36 debian -- MARK --
  Dec 30 08:13:36 debian -- MARK --
</example>

<p>This does not indicate any kind of compromise, and users changing
between Debian releases might find it strange. If your system does not
have high loads (or many active services), these lines might appear
throughout your logs. This is an indication that your
<prgn>syslogd</prgn> daemon is running properly. From <manref
section="8" name="syslogd">:

<example>
       -m interval
              The syslogd logs a mark timestamp  regularly.   The
              default interval between two -- MARK -- lines is 20
              minutes.  This can be  changed  with  this  option.
              Setting the interval to zero turns it off entirely.
</example>

<sect1>I found users using 'su' in my logs: Am I compromised?

<p>You might find lines in your logs like:
<example>
  Apr  1 09:25:01 server su[30315]: + ??? root-nobody
  Apr  1 09:25:01 server PAM_unix[30315]: (su) session opened for user nobody by (UID=0)
</example>

<p>Don't worry too much. Check to see if these entries are due to
<prgn>cron</prgn> jobs (usually <file>/etc/cron.daily/find</file> or
<prgn>logrotate</prgn>):

<example>
  $ grep 25 /etc/crontab
  25 6    * * *   root    test -e /usr/sbin/anacron || run-parts --report
  /etc/cron.daily
  $ grep nobody /etc/cron.daily/*
  find:cd / && updatedb --localuser=nobody 2>/dev/null
</example>

<sect1>I have found possible 'SYN flooding' in my logs: Am I under
attack?

<p>If you see entries like these in your logs:

<example>
  May 1 12:35:25 linux kernel: possible SYN flooding on port X. Sending cookies.
  May 1 12:36:25 linux kernel: possible SYN flooding on port X. Sending cookies.
  May 1 12:37:25 linux kernel: possible SYN flooding on port X. Sending cookies.
  May 1 13:43:11 linux kernel: possible SYN flooding on port X. Sending cookies.
</example>

<p>Check if there is a high number of connections to the server using
<prgn>netstat</prgn>, for example:

<example>
  linux:~# netstat -ant | grep SYN_RECV | wc -l
     9000
</example>

<p>This is an indication of a denial of service (DoS) attack against
your system's X port (most likely against a public service such as a
web server or mail server). You should activate TCP syncookies in your
kernel, see <ref id="tcp-syncookies">. Note, however, that a DoS
attack might flood your network even if you can stop it from crashing
your systems (due to file descriptors being depleted, the system might
become unresponsive until the TCP connections timeout). The only
effective way to stop this attack is to contact your network provider.

<sect1>I have found strange root sessions in my logs: Am I
compromised?

<p>You might see these kind of entries in your
<file>/var/log/auth.log</file> file:

<example>
  May 2 11:55:02 linux PAM_unix[1477]: (cron) session closed for user root
  May 2 11:55:02 linux PAM_unix[1476]: (cron) session closed for user root
  May 2 12:00:01 linux PAM_unix[1536]: (cron) session opened for user root by
  (UID=0)
  May 2 12:00:02 linux PAM_unix[1536]: (cron) session closed for user root
</example>

<p>These are due to a <prgn>cron</prgn> job being executed (in this
example, every five minutes). To determine which program is
responsible for these jobs, check entries under:
<file>/etc/crontab</file>, <file>/etc/cron.d</file>,
<file>/etc/crond.daily</file> and root's <file>crontab</file> under
<file>/var/spool/cron/crontabs</file>.

<sect1>I have suffered a break-in, what do I do?

<p>There are several steps you might want to take in case of a
break-in:

<list>

<item>Check if your system is up to date with security patches for
published vulnerabilities. If your system is vulnerable, the chances
that the system is in fact compromised are increased. The chances
increase further if the vulnerability has been known for a while,
since there is usually more activity related to older
vulnerabilities. Here is a link to <url
id="http://www.sans.org/top20.htm" name="SANS Top 20 Security
Vulnerabilities">.

<item>Read this document, especially the <ref id="after-compromise">
section.

<item>Ask for assistance. You might use the debian-security mailing
list and ask for advice on how to recover/patch your system.

<item>Notify your local <url id="http://www.cert.org" name="CERT"> (if
it exists, otherwise you may want to consider contacting CERT
directly). This might or might not help you, but, at the very least,
it will inform CERT of ongoing attacks. This information is very
valuable in determining which tools and attacks are being used by the
<em>blackhat</em> community.

</list>

<sect1>How can I trace an attack?

<p>By watching the logs (if they have not been tampered with), using
intrusion detection systems (see <ref id="intrusion-detect">),
<prgn>traceroute</prgn>, <prgn>whois</prgn> and similar tools
(including forensic analysis), you may be able to trace an attack to
the source. The way you should react to this information depends
solely on your security policy, and what <em>you</em> consider is an
attack. Is a remote scan an attack? Is a vulnerability probe an
attack?

<sect1>Program X in Debian is vulnerable, what do I do?

<p>First, take a moment to see if the vulnerability has been announced
in public security mailing lists (like Bugtraq) or other forums. The
Debian Security Team keeps up to date with these lists, so they are
may also be aware of the problem. Do not take any further actions if
you see an announcement at <url id="http://security.debian.org">.

<p>If no information seems to be published, please send e-mail about
the affected package(s), as well as a detailed description of the
vulnerability (proof of concept code is also OK), to
<url id="mailto:team@security.debian.org" name="team@security.debian.org">.
This will get you in touch with Debian's security team.

<sect1>The version number for a package indicates that I am still
running a vulnerable version!

<p>Instead of upgrading to a new release, Debian back ports security
fixes to the version that was shipped in the stable release. The
reason for this is to make sure that the stable release changes as
little as possible, so that things will not change or break
unexpectedly as a result of a security fix. You can check if you are
running a secure version of a package by looking at the package
changelog, or comparing its exact (upstream version -slash- debian
release) version number with the version indicated in the Debian
Security Advisory.

<sect1>Specific software

<sect2><package>proftpd</package> is vulnerable to a Denial of Service
attack.

<p>Add <tt>DenyFilter \*.*/</tt> to your configuration file, and for
more information see <url id="http://www.proftpd.org/critbugs.html">.

<sect2>After installing <package>portsentry</package>, there are a lot
of ports open.

<p>That's just the way <prgn>portsentry</prgn> works. It opens about
twenty unused ports to try to detect port scans.

<sect id="debian-sec-team-faq">Questions regarding the Debian security team

<p>This information is derived from the 
<url id="http://www.debian.org/security/faq.en.html" 
name="Debian Security FAQ">. It includes the information as of the 
november 19th and provides some other common questions asked in the 
debian-security mailing list.


<!-- FIXME: should this be included in the FAQ? -->
<sect1>What is a Debian Security Advisory (DSA)?

<p>It is information sent by the Debian Security Team (see below)
regarding the discovery and fix for a security related vulnerability
in a package available in Debian GNU/Linux. Signed DSAs are sent to
public mailing lists (debian-security-announce) and posted on Debian's
web site (both in the front page and in the <url
id="http://www.debian.org/security/" name="security area">).

<p>DSAs include information on the affected package(s), the security
flaw that was discovered and where to retrieve the updated packages
(and their MD5 sums).

<!-- FIXME: update from web page automatically -->

<sect1>The signature on Debian advisories does not verify correctly!

<p>This is most likely a problem on your end. The
<url id="http://www.debian.org/security/faq.en.html" 
name="debian-security-announce"> list has a filter that only allows messages
with a correct signature from one of the security team members to be
posted.

<p>Most likely some piece of mail software on your end slightly
changes the message, thus breaking the signature. Make sure your
software does not do any MIME encoding or decoding, or tab/space
conversions. 

<p>Known culprits fetchmail (with the mimedecode option enabled), 
formail (from procmail 3.14 only) and evolution.

<sect1>How is security handled in Debian?

<p>Once the Security Team receives a notification of an incident, one
or more members review it and consider its impact on the stabe release
of Debian (i.e. if it's vulnerable or not). If our system is vulnerable, 
we work on a fix for the problem. The package maintainer is 
contacted as well, if he didn't contact the Security Team already. 
Finally, the fix is tested and new packages are prepared, which 
then are compiled on all stable architectures and uploaded afterwards .
After all of that is done, an advisory is published.

<sect1>Why are you fiddling with an old version of that package?

<p>The most important guideline when making a new package that fixes a 
security problem is to make as few changes as possible. Our users 
and developers are relying on the exact behaviour of a release once 
it is made, so any change we make can possibly break someone's system. 
This is especially true in case of libraries: make sure you never change 
the Application Program Interface (API) or Application Binary Interface 
(ABI), no matter how small the change is.

<p>This means that moving to a new upstream version is not a good solution, 
instead the relevant changes should be backported. Generally upstream 
maintainers are willing to help if needed, if not the Debian security team 
might be able to help.

<p>In some cases it is not possible to backport a security fix, for example 
when large amounts of source code need to be modified or rewritten. If 
that happens it might be necessary to move to a new upstream version, but 
this has to be coordinated with the security team beforehand.

<sect1>What is the policy for a fixed package to appear in security.debian.org?

<p>Security breakage in the stable distribution warrants a package on 
security.debian.org. Anything else does not. The size of a breakage is 
not the real problem here. Usually the security team will prepare packages 
together with the package maintainer. Provided someone (trusted) tracks the 
problem and gets all the needed packages compiled and submit them to the 
security team, even very trivial security problem fixes will make it to 
security.debian.org. Please see below.

<sect1>The version number for a package indicates that I am still running a vulnerable version!

<p>Instead of upgrading to a new release we backport security fixes to the 
version that was shipped in the stable release. The reason we do this is to 
make sure that a release changes as little as possible so things will not 
change or break unexpectedly as a result of a security fix. You can check if 
you are running a secure version of a package by looking at the package changelog,
or comparing its exact version number with the version indicated in the Debian 
Security Advisory.


<sect1 id="sec-unstable">How is security handled for <tt>testing</tt> and <tt>unstable</tt>?

<p>The short answer is: it's not. Testing and unstable are rapidly
moving targets and the security team does not have the resources
needed to properly support those. If you want to have a secure 
(and stable) server you are strongly encouraged to stay with
stable.  However, the security secretaries will try to fix problems in 
testing and unstable after they are fixed in the stable release.

<!-- Note: the following paragraph is not in the FAQ (jfs) -->
<p>In some cases, however, the unstable branch usually gets security fixes
quite quickly, because those fixes are usually available upstream
faster (other versions, like those in the stable branch, usually need
to be back ported).

<!-- The following section is not on the FAQ -->
<sect1 id="sec-older">I use an older version of Debian, is it supported by the Debian Security Team?

<p>No. Unfortunately, the Debian Security Team cannot handle both the
stable release (unofficially, also the unstable) and other older
releases. However, you can expect security updates for a limited
period of time (usually several months) immediately following the
release of a new Debian distribution.

<sect1>Why are there no official mirrors for security.debian.org?

<p>The purpose of security.debian.org is to make security updates
available as quickly and easily as possible. Mirrors would add extra
complexity that is not needed and can cause frustration if they are
not up to date.

<sect1>I've seen DSA 100 and DSA 102, what happened to DSA 101?

<p>Several vendors (mostly of GNU/Linux, but also of BSD derivatives)
coordinate security advisories for some incidents and agree to a
particular timeline so that all vendors are able to release an
advisory at the same time. This was decided in order to not
discriminate against some vendors that need more time (e.g. when the 
vendor has to pass packages through lengthy QA tests or has to support 
several architectures or binary distributions). Our own security team 
also prepares advisories in advance. Every now and then, other security 
issues have to be dealt with before the parked advisory could be released,
and hence temporarily leaving out one or more advisories by number.

<!--
<p>In some cases, the Debian Security Team prepares advisories in
advance, and holds the advisory number until the advisory can be
released. Hence, the gaps in DSA numbers.
-->

<sect1>How can I reach the security team?

<p>Security information can be sent to
can be sent to <url id="mailto:security@debian.org" name="security@debian.org">,
which is read by all Debian developers. If you have sensitive information
please use <url id="mailto:team@security.debian.org"
name="team@security.debian.org"> which only the members of the
read. If desired email can be encrypted with the Debian
Security Contact key (key ID 
<url id="http://blackhole.pca.dfn.de:11371/pks/lookup?op=get&amp;exact=on&amp;search=0x363CCD95" name="0x363CCD95">). 

<sect1>What difference is there between security@debian.org and
debian-security@lists.debian.org?

<p>When you send messages to security@debian.org, they are sent to the
developers mailing list (debian-private). All Debian developers are
subscribed to this list and posts are kept private (i.e. are not
archived at the public website). The public mailing list,
debian-security@lists.debian.org, is open to anyone that wants to <url
id="http://www.debian.org/MailingLists/" name="subscribe">, and there
are searchable archives available
<url id="http://lists.debian.org/search.html" name="here">.

<!-- The following items are not included in the Debian Security Team FAQ -->
<sect1>How can I contribute to the Debian security team?
<p>
<list>

<item>By contributing to this document, fixing FIXMEs or providing new
content. Documentation is important and reduces the overhead of
answering common issues. Translation of this documentation into other
languages is also of great help.

<item>By packaging applications that are useful for checking or
enhancing security in a Debian GNU/Linux system. If you are not a
developer, file a <url name="WNPP bug"
id="http://www.debian.org/devel/wnpp/"> and ask for software you think
would be useful, but is not currently provided.

<item>Audit applications in Debian or help solve security bugs and
report issues to security@debian.org. Other projects' work like the
<url name="Linux Kernel Security Audit Project"
id="http://kernel-audit.sourceforge.net/"> or the <url name="Linux
Security-Audit Project" id="http://www.lsap.org/"> increase the
security of Debian GNU/Linux, since contributions will eventually help
here, too.

</list>

<p>In all cases, please review each problem before reporting it to
security@debian.org. If you are able to provide patches, that would
speed up the process. Do not simply forward Bugtraq mails, since they
are already received. Providing additional information, however, is
always a good idea.

<sect1>Who is the Security Team composed of?

<p>The Debian Security Team currently consists of five members and two
secretaries. The Security Team itself appoints people to join the
team.

<sect1>Does the Debian Security team check every new package in
Debian?

<p>No, the Debian security team does not check every new package and
there is no automatic (lintian) check to detect malicious new
packages, since those checks are rather impossible to detect
automatically. Maintainers, however, are fully responsible for the
packages they introduce into Debian, and all packages are first signed
by an authorized developer(s). The developer is in charge of analyzing
the security of all packages that they maintain.

<sect1>How much time will it take Debian to fix vulnerability XXXX?

<p>The Debian security team works quickly to send advisories and
produce fixed packages for the stable branch once a vulnerability is
discovered. A report <url
id="http://lists.debian.org/debian-security/2001/debian-security-200112/msg00257.html"
name="published in the debian-security mailing list"> showed that in
the year 2001, it took the Debian Security Team an average of 35 days
to fix security-related vulnerabilities. However, over 50% of the
vulnerabilities where fixed in a 10-day time frame, and over 15% of
them where fixed the <em>same day</em> the advisory was released.

<p>However, when asking this question people tend to forget that:

<list>

<item>DSAs are not sent until:

<list>

<item>packages are available for <em>all</em> architectures supported
by Debian (which takes some time for packages that are part of the
system core, especially considering the number of architectures
supported in the stable release).

<item>new packages are thoroughly tested in order to ensure that no
new bugs are introduced

</list>

<item>Packages might be available before the DSA is sent (in the
incoming queue or on the mirrors).

<item>Debian is a volunteer-based project.

<item>Debian is licensed with a "no guarantees" clause.

</list>

<p>If you want more in-depth analysis on the time it takes for the
Security Team to work on vulnerabilities, you should consider that new
DSAs (see <ref id="dsa">) published on the <url
id="http://security.debian.org" name="security website">, and the
metadata used to generate them, include links to vulnerability
databases. You could download the sources from the web server (from
the <url id="http://cvs.debian.org" name="CVS">) or use the HTML pages
to determine the time that it takes for Debian to fix vulnerabilities
and correlate this data with public databases.
<appendix id="harden-step">The hardening process step by step

<!--
# I took the liberty to change this from "checklist" to
# "process step by step" because this doesn't really have the
# form of a checklist, and I had added a different sort of
# checklist. The renaming is more to avoid confusion than
# anything else. // era
-->

<p>Below is a post-installation, step-by-step procedure for hardening
a Debian 2.2 GNU/Linux system. This is one possible approach to such a
procedure and is oriented toward the hardening of network services.
It is included to show the entire process you might use during
configuration. Also, see <ref id="checklist">.

<list>

<item>Install the system, taking into account the information
regarding partitioning included earlier in this document. After base
installation, go into custom install. Do not select task
packages. Select shadow passwords.

<item>Using <prgn>dselect</prgn>, remove all unneeded but selected
packages before doing [I]nstall. Keep the bare minimum of packages for
the system.

<item>Update all software from the latest packages available at
security.debian.org as explained previously in <ref
id="security-update">.

<item>Implement the suggestions presented in this manual regarding
user quotas, login definitions and <prgn>lilo</prgn>

<item>Make a list of services currently running on your system. Try:

<example>
  $ ps -aux
  $ netstat -pn -l -A inet 
  # /usr/sbin/lsof -i | grep LISTEN
</example>

You will need to install <package>lsof-2.2</package> for the third
command to work (run it as root). You should be aware that
<prgn>lsof</prgn> can translate the word LISTEN to your locale
settings.

<item>In order to remove unnecessary services, first determine what
package provides the service and how it is started. This can be
accomplished by checking the program that listens in the socket. The
following shell script, which uses the programs <prgn>lsof</prgn> and
<prgn>dpkg</prgn>, does just that:

<example>
  #!/bin/sh
  # FIXME: this is quick and dirty; replace with a more robust script snippet
  for i in `sudo lsof -i | grep LISTEN | cut -d " " -f 1 |sort -u` ; do
	  pack=`dpkg -S $i |grep bin |cut -f 1 -d : | uniq`
	  echo "Service $i is installed by $pack";
	  init=`dpkg -L $pack |grep init.d/ `
	  if [ ! -z "$init" ]; then
		   echo "and is run by $init"
	  fi
  done
</example>

<item>Once you find any unwanted services, remove the associated
package (with <prgn>dpkg --purge</prgn>), or disable the service from
starting automatically at boot time using <prgn>update-rc.d</prgn>
(see <ref id="disableserv">).

<item>For inetd services (launched by the superdaemon), check which
services are enabled in <file>/etc/inetd.conf</file> using:

<example>
  $ grep -v "^#" /etc/inetd.conf | sort -u
</example>

Then disable those services that are not needed by commenting out the
line that includes them in <file>/etc/inetd.conf</file>, removing the
package, or using <prgn>update-inetd</prgn>.

<item>If you have wrapped services (those using
<prgn>/usr/sbin/tcpd</prgn>), check that the files
<file>/etc/hosts.allow</file> and <file>/etc/hosts.deny</file> are
configured according to your service policy.

<item>If the server uses more than one external interface, depending
on the service, you may want to limit the service to listen on a
specific interface. For example, if you want internal FTP access only,
make the FTP daemon listen only on your management interface, not on
all interfaces (i.e, 0.0.0.0:21).

<item>Re-boot the machine, or switch from single user user and then
back to multiuser using the commands:

<example>
  $ init 1
  (....)
  $ init 2
</example>

<item>Check the services now available, and, if necessary, repeat the
steps above.

<item>Now install the needed services, if you have not done so
already, and configure them properly.

<item>Use the following shell command to determine what user each
available service is running as:

<example>
  $ for i in `/usr/sbin/lsof -i |grep LISTEN |cut -d " " -f 1 |sort -u`; \
  > do user=`ps -ef |grep $i |grep -v grep |cut -f 1 -d " "` ; \
  > echo "Service $i is running as user $user"; done
</example>

Consider changing these services to a specific user/group and maybe
<prgn>chroot</prgn>'ing them for increased security. You can do this by 
changing the <file>/etc/init.d</file> scripts which start the service. Most
services in Debian use <prgn>start-stop-daemon</prgn>, which has options 
(<tt>--change-uid</tt> and <tt>--chroot</tt>) for accomplishing this. A word
of warning regarding the <prgn>chroot</prgn>'ing of services: you may need to 
put all the files installed by the package (use dpkg -L) providing the 
service, as well as any packages it depends on, in the <prgn>chroot</prgn>'ed
environment. Information about setting up a <prgn>chroot</prgn> environment 
for the <prgn>ssh</prgn> program can be found in <ref id="chroot-ssh-env">.

<item>Repeat the steps above in order to check that only desired
services are running and that they are running as the desired
user/group combination.

<item>Test the installed services in order to see if they work as
expected.

<item>Check the system using a vulnerability assessment scanner (like
<package>nessus</package>), in order to determine vulnerabilities in
the system (i.e., misconfigurations, old services or unneeded
services).

<item>Install network and host intrusion measures like
<package>snort</package> and <package>logsentry</package>.

<item>Repeat the network scanner step and verify that the intrusion
detection systems are working correctly.

</list>

<p>For the truly paranoid, also consider the following:

<list>

<item>Add firewalling capabilities to the system, accepting incoming
connections only to offered services and limiting outgoing connections
only to those that are authorized.

<item>Re-check the installation with a new vulnerability assessment
using a network scanner.

<item>Using a network scanner, check outbound connections from the
system to an outside host and verify that unwanted connections do not
find their way out.

</list>

<p>FIXME: this procedure considers service hardening but not system
hardening at the user level, include information regarding checking
user permissions, SETUID files and freezing changes in the system
using the ext2 file system.

<appendix id="checklist">Configuration checklist

<p>This appendix briefly reiterates points from other sections in this
manual in a condensed checklist format. This is intended as a quick
summary for someone who has already read the manual. There are other
good checklists available, including Kurt Seifried's <url
id="http://seifried.org/security/os/linux/20020324-securing-linux-step-by-step.html"
name="Securing Linux Step by Step"> and <url
id="http://www.cert.org/tech_tips/usc20_full.html" name="CERT's Unix
Security Checklist">.

<!-- Order is slightly different from body text. Consider changing text? -->
<!-- (FIXME) -->

<p>FIXME: This is based on v1.4 of the manual and might need to be updated.

<list>
	  <item>Limit physical access and booting capabilities
	      <list>
		<item>Enable BIOS password
		<item>Disable floppy/cdrom/... booting
		<item>Set a LILO or GRUB password (<file>/etc/lilo.conf</file>
			or <file>/boot/grub/menu.lst</file>, respectively);
			check that the LILO or GRUB configuration file is
			read-protected.
		<item>Disallow MBR floppy booting back door by
		    overwriting the MBR (maybe not?)
	      </list>
	      
	  <item>Partitioning
	      <list>
		
		<item>Separate user-writable data, non-system data, and
		    rapidly changing run-time data to their own partitions
		    
		<item>Set <tt>nosuid,noexec,nodev</tt> mount options in
		    <file>/etc/fstab</file> on ext2 partitions such as
		    <file>/tmp</file>.
	      </list>
	      
	  <item>Password hygiene and login security
	      
	      <list>
		<item>Set a good root password
		<item>Enable password shadowing and MD5
		<item>Install and use PAM
		    
		    <list>
		      
		      <item>Add MD5 support to PAM and make sure that
			  (generally speaking) entries in
			<file>/etc/pam.d/</file> files which grant
			  access to the machine have the second field in
			  the pam.d file set to <tt>requisite</tt> or
			  <tt>required</tt>.
			  <!-- or is it third? (FIXME: check) -->
			  
		      <item>Tweak <file>/etc/pam.d/login</file> so as to
			  only permit local root logins.

		      <item>Also mark authorized tty:s in
			  <file>/etc/security/access.conf</file> and
			  generally set up this file to limit root
			  logins as much as possible.
			  
		      <item>Add pam_limits.so if you want to set
		      per-user limits
			  
		      <item>Tweak <file>/etc/pam.d/passwd</file>: set
			  minimum length of passwords higher (6
			  characters maybe) and enable MD5

		      <item>Add group wheel to <file>/etc/group</file> if
			  desired; add pam_wheel.so group=wheel entry to
			  <file>/etc/pam.d/su</file>
			  
		      <item>For custom per-user controls, use
			  pam_listfile.so entries where appropriate
			  
		      <item>Have an <file>/etc/pam.d/other</file> file and
			  set it up with tight security

		    </list>
		    
		<item>Set up limits in <file>/etc/security/limits.conf</file>
		    (note that <file>/etc/limits</file> is not used
		    if you are using PAM)

		<item>Tighten up <file>/etc/login.defs</file>; also, if you
		    enabled MD5 and/or PAM, make sure you make the
		    corresponding changes here, too
		    
		<item>Disable root ftp access in <file>/etc/ftpusers</file>
		    
		<item>Disable network root login; use <manref
		    name="su" section="1"> or <manref name="sudo"
		    section="1">.  (consider installing
		    <package>sudo</package>)
		    
		<item>Use PAM to enforce additional constraints on logins?

	      </list>

	  <item>Other local security issues
	      <list>
		<item>Kernel tweaks
		    (see <ref id="kernel-conf">)
		    
		<item>Kernel patches
		    (see <ref id="kernel-patches">)
		    
		<item>Tighten up log file permissions
		    (<file>/var/log/{last,fail}log</file>, Apache logs)
		    
		<item>Verify that SETUID checking is enabled
		    in <file>/etc/checksecurity.conf</file>
		    
		<item>Consider making some log files append-only
		    and configuration files immutable
		    using chattr (ext2 file systems only)

		<item>Set up file integrity (see  <ref
		id="check-integ">).  Install
		<package>debsums</package>
		    
		<item>Consider replacing locate with slocate
		    
		<item>Log everything to a local printer?
		    
		<item>Burn your configuration on a boot-able CD and
		boot off that?
		    
		<item>Disable kernel modules?

	      </list>
	      
	  <item>Limit network access
	      <list>

		<item>Install and configure <prgn>ssh</prgn>
		    (suggest PermitRootLogin No in <file>/etc/ssh/sshd_config</file>,
		    PermitEmptyPasswords No;
		    note other suggestions in text also)
		    
		<item>Consider disabling or removing <prgn>in.telnetd</prgn>
		    
		<item>Generally, disable gratuitous services in
		<file>/etc/inetd.conf</file> using <prgn>update-inetd --disable</prgn>
		    (or disable <prgn>inetd</prgn> altogether, or use a
		    replacement such as <prgn>xinetd</prgn> or <prgn>rlinetd</prgn>)
		    
		<item>Disable other gratuitous network services;
		    mail, ftp, DNS, WWW etc should not be running
		    if you do not need them and monitor them regularly.

		<item>For those services which you do need, do not
		    just use the most common programs, look for more
		    secure versions shipped with Debian (or from other
		    sources).  Whatever you end up running, make sure
		    you understand the risks.

		<item>Set up <prgn>chroot</prgn> jails for outside users and daemons.

		<item>Configure firewall and tcpwrappers
		    (i.e. <manref name="hosts_access" section="5">);
		    note trick for <file>/etc/hosts.deny</file> in text.
		    
		<item>If you run ftp, set up your ftpd server
		    to always run <prgn>chroot</prgn>'ed to the user's home directory
		    
		<item>If you run X, disable xhost authentication and
		    go with <prgn>ssh</prgn> instead; better yet, disable remote X
		    if you can (add -nolisten tcp to the X command
		    line and turn off XDMCP in
		    <file>/etc/X11/xdm/xdm-config</file> by setting
		    the requestPort to 0)
		    
		<item>Disable outside access to printers
		    
		<item>Tunnel any IMAP or POP sessions through SSL or <prgn>ssh</prgn>;
		    install stunnel if you want to provide this service
		    to remote mail users
		    
		<item>Set up a log host and configure other machines
		    to send logs to this host (<file>/etc/syslog.conf</file>)
		    
		<item>Secure BIND, Sendmail, and other complex daemons
		    (run in a <prgn>chroot</prgn> jail; run as a non-root pseudo-user)

		<item>Install snort or a similar logging tool.
		    
		<item>Do without NIS and RPC if you can (disable portmap).
		    
	      </list>

	  <item>Policy issues
	      <list>
		
		<item>Educate users about the whys and hows of your policies.
		    When you have prohibited something which is regularly
		    available on other systems, provide documentation
		    which explains how to accomplish similar results using
		    other, more secure means.

		<item>Prohibit use of protocols which use clear-text passwords
		    (<prgn>telnet</prgn>, <prgn>rsh</prgn> and friends; ftp, imap, 
			http, ...).
		    
		<item>Prohibit programs which use SVGAlib.
		    
		<item>Use disk quotas.

	      </list>
	      
	  <item>Keep informed about security issues
	      <list>
		
		<item>Subscribe to security mailing lists
		    
		<item>Configure <package>apt</package> for security updates -- add to
		    <file>/etc/apt/sources.list</file> an entry (or
		    entries) for
		    http://security.debian.org/debian-security
		    
		<item>Also remember to periodically run
		<prgn>apt-get update ; apt-get upgrade</prgn>
		(perhaps install as a <prgn>cron</prgn> job?) as explained in <ref
		id="security-update">.

	      </list>

	</list>

<appendix id="snort-box">Setting up a stand-alone IDS

<p>You can easily set up a dedicated Debian system as a stand-alone
Intrusion Detection System using <package>snort</package>.

<p>Some guidelines:

<list>

<item>Install a base Debian system and select no additional packages.

<item>Download and manually (with dpkg) install necessary packages
(see installed packages list below).

<item>Download and install ACID (Analysis Console for Intrusion
Databases).

</list>

<p>ACID is currently packaged for Debian as
<package>acidlab</package>. It provides a graphical WWW interface to
snort's output. It can also be downloaded from <url
id="http://www.cert.org/kb/acid/">, <url
id="http://acidlab.sourceforge.net"> or <url
id="http://www.andrew.cmu.edu/~rdanyliw/snort/">. You might also want
to read the <url
id="http://www.tldp.org/HOWTO/Snort-Statistics-HOWTO/index.html"
name="Snort Statistics HOWTO">.

<p>This system should be set up with at least two interfaces: one
interface connected to a management LAN (for accessing the results and
maintaining the system), and one interface with no IP address attached
to the network segment being analyzed.

<p>The standard Debian <file>/etc/network/interfaces</file> file
normally used to configure network cards cannot be used, since the
<prgn>ifup</prgn> and <prgn>ifdown</prgn> programs expect an IP
address. Instead, simply use <tt>ifconfig eth0 up</tt>.

<p>Besides the base installation, <package>acidlab</package> also
depends on the packages <package>php4</package> and
<package>apache</package> among others. Download the following
packages (Note: the versions might vary depending on which Debian
distribution you are using, this list is from Debian <em>woody</em>
September 2001):

<example>
ACID-0.9.5b9.tar.gz
adduser_3.39_all.deb
apache-common_1.3.20-1_i386.deb
apache_1.3.20-1_i386.deb
debconf_0.9.77_all.deb
dialog_0.9a-20010527-1_i386.deb
fileutils_4.1-2_i386.deb
klogd_1.4.1-2_i386.deb
libbz2-1.0_1.0.1-10_i386.deb
libc6_2.2.3-6_i386.deb
libdb2_2.7.7-8_i386.deb
libdbd-mysql-perl_1.2216-2_i386.deb
libdbi-perl_1.18-1_i386.deb
libexpat1_1.95.1-5_i386.deb
libgdbmg1_1.7.3-27_i386.deb
libmm11_1.1.3-4_i386.deb
libmysqlclient10_3.23.39-3_i386.deb
libncurses5_5.2.20010318-2_i386.deb
libpcap0_0.6.2-1_i386.deb
libpcre3_3.4-1_i386.deb
libreadline4_4.2-3_i386.deb 
libstdc++2.10-glibc2.2_2.95.4-0.010703_i386.deb
logrotate_3.5.4-2_i386.deb
mime-support_3.11-1_all.deb
mysql-client_3.23.39-3_i386.deb
mysql-common_3.23.39-3.1_all.deb
mysql-server_3.23.39-3_i386.deb
perl-base_5.6.1-5_i386.deb
perl-modules_5.6.1-5_all.deb
perl_5.6.1-5_i386.deb
php4-mysql_4.0.6-4_i386.deb
php4_4.0.6-1_i386.deb
php4_4.0.6-4_i386.deb
snort_1.7-9_i386.deb
sysklogd_1.4.1-2_i386.deb
zlib1g_1.1.3-15_i386.deb
</example>

<p>Installed packages (dpkg -l):
<example>
ii  adduser        3.39
ii  ae             962-26
ii  apache         1.3.20-1
ii  apache-common  1.3.20-1
ii  apt            0.3.19
ii  base-config    0.33.2
ii  base-files     2.2.0
ii  base-passwd    3.1.10
ii  bash           2.03-6
ii  bsdutils       2.10f-5.1
ii  console-data   1999.08.29-11.
ii  console-tools  0.2.3-10.3
ii  console-tools- 0.2.3-10.3
ii  cron           3.0pl1-57.2
ii  debconf        0.9.77
ii  debianutils    1.13.3
ii  dialog         0.9a-20010527-
ii  diff           2.7-21
ii  dpkg           1.6.15
ii  e2fsprogs      1.18-3.0
ii  elvis-tiny     1.4-11
ii  fbset          2.1-6
ii  fdflush        1.0.1-5
ii  fdutils        5.3-3   
ii  fileutils      4.1-2   
ii  findutils      4.1-40
ii  ftp            0.10-3.1
ii  gettext-base   0.10.35-13
ii  grep           2.4.2-1
ii  gzip           1.2.4-33
ii  hostname       2.07
ii  isapnptools    1.21-2
ii  joe            2.8-15.2  
ii  klogd          1.4.1-2   
ii  ldso           1.9.11-9   
ii  libbz2-1.0     1.0.1-10
ii  libc6          2.2.3-6
ii  libdb2         2.7.7-8
ii  libdbd-mysql-p 1.2216-2
ii  libdbi-perl    1.18-1
ii  libexpat1      1.95.1-5
ii  libgdbmg1      1.7.3-27
ii  libmm11        1.1.3-4
ii  libmysqlclient 3.23.39-3
ii  libncurses5    5.2.20010318-2
ii  libnewt0       0.50-7  
ii  libpam-modules 0.72-9
ii  libpam-runtime 0.72-9  
ii  libpam0g       0.72-9
ii  libpcap0       0.6.2-1
ii  libpcre3       3.4-1   
ii  libpopt0       1.4-1.1
ii  libreadline4   4.2-3 
ii  libssl09       0.9.4-5   
ii  libstdc++2.10  2.95.2-13 
ii  libstdc++2.10- 2.95.4-0.01070
ii  libwrap0       7.6-4   
ii  lilo           21.4.3-2
ii  locales        2.1.3-18
ii  login          19990827-20
ii  makedev        2.3.1-46.2
ii  mawk           1.3.3-5
ii  mbr            1.1.2-1 
ii  mime-support   3.11-1 
ii  modutils       2.3.11-13.1
ii  mount          2.10f-5.1
ii  mysql-client   3.23.39-3
ii  mysql-common   3.23.39-3.1
ii  mysql-server   3.23.39-3
ii  ncurses-base   5.0-6.0potato1
ii  ncurses-bin    5.0-6.0potato1
ii  netbase        3.18-4  
ii  passwd         19990827-20
ii  pciutils       2.1.2-2
ii  perl           5.6.1-5   
ii  perl-base      5.6.1-5   
ii  perl-modules   5.6.1-5
ii  php4           4.0.6-4   
ii  php4-mysql     4.0.6-4 
ii  ppp            2.3.11-1.4
ii  pppconfig      2.0.5
ii  procps         2.0.6-5   
ii  psmisc         19-2   
ii  pump           0.7.3-2 
ii  sed            3.02-5 
ii  setserial      2.17-16
ii  shellutils     2.0-7
ii  slang1         1.3.9-1  
ii  snort          1.7-9
ii  ssh            1.2.3-9.3
ii  sysklogd       1.4.1-2
ii  syslinux       1.48-2
ii  sysvinit       2.78-4  
ii  tar            1.13.17-2  
ii  tasksel        1.0-10 
ii  tcpd           7.6-4     
ii  telnet         0.16-4potato.1
ii  textutils      2.0-2  
ii  update         2.11-1    
ii  util-linux     2.10f-5.1
ii  zlib1g         1.1.3-15  
</example>

<appendix id="bridge-fw">Setting up a bridge firewall 

<p>This information was contributed by Francois Bayart in order to
help users set up a Linux bridge/firewall with the 2.4.x kernel and
<package>iptables</package>. The only features needed are the bridge
firewall patch, available at <url name="sourceforge download page"
id="http://bridge.sourceforge.net/download.html">.

<p>For example, if you are using a 2.4.18 kernel, first install the
kernel source package, then download the <url name="patch"
id="http://bridge.sourceforge.net/devel/bridge-nf/bridge-nf-0.0.6-against-2.4.18.diff">
and apply it, as shown in this example:

<example>
Zipowz:/usr/src# apt-get install kernel-source-2.4.18
Zipowz:/usr/src# cd kernel-source-2.4.18
Zipowz:/usr/src/kernel-source-2.4.18# patch -p1 < ../bridge-nf-0.0.6-against-2.4.18.diff 
patching file include/linux/netfilter.h
patching file include/linux/netfilter_ipv4.h
patching file include/linux/skbuff.h
patching file net/bridge/br.c
patching file net/bridge/br_forward.c
patching file net/bridge/br_input.c
patching file net/bridge/br_netfilter.c
patching file net/bridge/br_private.h
patching file net/bridge/Makefile
patching file net/Config.in
patching file net/core/netfilter.c
patching file net/core/skbuff.c
patching file net/ipv4/ip_output.c
patching file net/ipv4/netfilter/ip_tables.c
patching file net/ipv4/netfilter/ipt_LOG.c
</example>

<p>Now, configure the kernel (i.e., <tt>make menuconfig</tt>, 
<tt>make xconfig</tt>). In the section <em>Networking options</em>, enable the 
following options:

<example>
[*] Network packet filtering (replaces ipchains)
[ ]   Network packet filtering debugging (NEW)
<*> 802.1d Ethernet Bridging
[*]   netfilter (firewalling) support (NEW)
</example>

<p>Caution: you must disable this if you want to apply some
firewalling rules or else <prgn>iptables</prgn> will not work.

<example>
[ ]   Network packet filtering debugging (NEW)
</example>

<p>Next, add the correct options in the section <em>IP: Netfilter
Configuration</em>. Then, compile and install the kernel. If you want
to do it the <em>Debian way</em>, install
<package>kernel-package</package> and run <prgn>make-kpkg</prgn> to
create a custom Debian kernel package you can install on your server
using dpkg. Once the new kernel is compiled and installed, install the
<package>bridge-utils</package> package.

<p>Once these steps are complete, you can complete the configuration
of your bridge. The next section presents two different possible
configurations for the bridge, each with a hypothetical network map
and the necessary commands.

<sect>A bridge providing NAT and firewall capabilities

<p>The first configuration uses the bridge as a firewall with network
address translation (NAT) that protects a server and internal LAN
clients. A diagram of the network configuration is shown below:

<example>
Internet ---- router ( 62.3.3.25 ) ---- bridge (62.3.3.26 gw 62.3.3.25 / 192.168.0.1)
                                          |
                                          |
                                          |---- WWW Server (62.3.3.27 gw 62.3.3.25)
                                          |
                                          |
                                         LAN --- Zipowz (192.168.0.2 gw 192.168.0.1)
</example>

<p>The following commands show how this bridge can be configured.

<example>
# Create the interface br0
/usr/sbin/brctl addbr br0

# Add the Ethernet interface to use with the bridge
/usr/sbin/brctl addif br0 eth0
/usr/sbin/brctl addif br0 eth1

# Start up the Ethernet interface
/sbin/ifconfig eth0 0.0.0.0
/sbin/ifconfig eth1 0.0.0.0

# Configure the bridge ethernet
# The bridge will be correct and invisible ( transparent firewall ).
# It's hidden in a traceroute and you keep your real gateway on the 
# other computers. Now if you want you can config a gateway on your 
# bridge and choose it as your new gateway for the other computers.

/sbin/ifconfig br0 62.3.3.26 netmask 255.255.255.248 broadcast 62.3.3.32

# I have added this internal IP to create my NAT 
ip addr add 192.168.0.1/24 dev br0
/sbin/route add default gw 62.3.3.25
</example>

<sect>A bridge providing firewall capabilities

<p>A second possible configuration is a system that is set up as a
transparent firewall for a LAN with a public IP address space.

<example>
Internet ---- router (62.3.3.25) ---- bridge (62.3.3.26)
                                        |
                                        |
                                        |---- WWW Server (62.3.3.28 gw 62.3.3.25)
                                        |
                                        |
                                        |---- Mail Server (62.3.3.27 gw 62.3.3.25)
</example>

<p>The following commands show how this bridge can be configured.

<example>
# Create the interface br0
/usr/sbin/brctl addbr br0

# Add the Ethernet interface to use with the bridge
/usr/sbin/brctl addif br0 eth0
/usr/sbin/brctl addif br0 eth1

# Start up the Ethernet interface
/sbin/ifconfig eth0 0.0.0.0
/sbin/ifconfig eth1 0.0.0.0

# Configure the bridge Ethernet
# The bridge will be correct and invisible ( transparent firewall ).
# It's hidden in a traceroute and you keep your real gateway on the 
# other computers. Now if you want you can config a gateway on your
# bridge and choose it as your new gateway for the other computers.

/sbin/ifconfig br0 62.3.3.26 netmask 255.255.255.248 broadcast 62.3.3.32
</example>

<p>If you traceroute the Linux Mail Server, you won't see the bridge.
If you want access to the bridge with <prgn>ssh</prgn>, you must have
a gateway or you must first connect to another server, such as the
"Mail Server", and then connect to the bridge through the internal
network card.</p>

<sect>Basic IPtables rules

<p>This is an example of the basic rules that could be used for either of these
setups.

<example>
  iptables -F FORWARD
  iptables -P FORWARD DROP
  iptables -A FORWARD -s 0.0.0.0/0.0.0.0 -d 0.0.0.0/0.0.0.0 -m state --state INVALID -j DROP
  iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT

  # Some funny rules but not in a classic Iptables sorry ...
  # Limit ICMP 
  # iptables -A FORWARD -p icmp -m limit --limit 4/s -j ACCEPT
  # Match string, a good simple method to block some VIRUS very quickly
  # iptables -I FORWARD -j DROP -p tcp -s 0.0.0.0/0 -m string --string "cmd.exe"

  # Block all MySQL connection just to be sure
  iptables -A FORWARD -p tcp -s 0/0 -d 62.3.3.0/24 --dport 3306 -j DROP

  # Linux Mail Server Rules

  # Allow FTP-DATA ( 20 ) , FTP ( 21 ) , SSH ( 22 ) 
  iptables -A FORWARD -p tcp -s 0.0.0.0/0 -d 62.3.3.27/32 --dport 20:22 -j ACCEPT

  # Allow the Mail Server to connect to the outside
  # Note: This is *not* needed for the previous connections 
  # (remember: stateful filtering) and could be removed.
  iptables -A FORWARD -p tcp -s 62.3.3.27/32 -d 0/0 -j ACCEPT

  # WWW Server Rules

  # Allow HTTP ( 80 ) connections with the WWW server
  iptables -A FORWARD -p tcp -s 0.0.0.0/0 -d 62.3.3.28/32 --dport 80 -j ACCEPT

  # Allow HTTPS ( 443 ) connections with the WWW server
  iptables -A FORWARD -p tcp -s 0.0.0.0/0 -d 62.3.3.28/32 --dport 443 -j ACCEPT

  # Allow the WWW server to go out
  # Note: This is *not* needed for the previous connections 
  # (remember: stateful filtering) and could be removed.
  iptables -A FORWARD -p tcp -s 62.3.3.28/32 -d 0/0 -j ACCEPT
</example>

<appendix id="bind-chuser">Sample script to change the default Bind installation.

<p>This script automates the procedure for changing the
<prgn>bind</prgn> name server's default installation so that it does
<em>not</em> run as the superuser. It will create the user and groups
to be used for the name server. Use with extreme care since it has not
been tested thoroughly.

<example>
  #!/bin/sh
  # Change the default Debian bind configuration to have it run
  # with a non-root user and group.
  #
  # WARN: This script has not been tested throughly, please
  # verify the changes made to the INITD script

  # (c) 2002 Javier Fernandez-Sanguino Peña
  #
  #    This program is free software; you can redistribute it and/or modify
  #    it under the terms of the GNU General Public License as published by
  #    the Free Software Foundation; either version 1, or (at your option)
  #    any later version.
  #
  #    This program is distributed in the hope that it will be useful,
  #    but WITHOUT ANY WARRANTY; without even the implied warranty of
  #    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  #    GNU General Public License for more details.
  #
  #     Please see the file `COPYING' for the complete copyright notice.
  #

  restore() {
  # Just in case, restore the system if the changes fail
	  echo "WARN: Restoring to the previous setup since I'm unable to properly change it."
	  echo "WARN: Please check the $INITDERR script."
	  mv $INITD $INITDERR
	  cp $INITDBAK $INITD
  }


  USER=named
  GROUP=named
  INITD=/etc/init.d/bind
  INITDBAK=$INITD.preuserchange
  INITDERR=$INITD.changeerror
  START="start-stop-daemon --start --quiet --exec /usr/sbin/named -- -g $GROUP -u $USER"
  AWKS="awk ' /start-stop-daemon --start/ { print \"$START\"; noprint = 1; }; /\/usr\/sbin\/ndc reload/ { print \"stop; sleep 2; start;\"; noprint = 1; } /\\\\$/ { if ( noprint != 0 ) { noprint = noprint + 1;} } /^.*$/ { if ( noprint != 0 ) { noprint = noprint - 1; } else { print \$0; } } '"

  [ `id -u` -ne 0 ] && {
	  echo "This program must be run by the root user"
	  exit 1
  }

  RUNUSER=`ps -eo user,fname |grep named |cut -f 1 -d " "`

  if [ "$RUNUSER" = "$USER" ] 
  then
	  echo "WARN: The name server running daemon is already running as $USER"
	  echo "ERR:  This script will not many any changes to your setup."
	  exit 1
  fi
  if [ ! -f $INITD ]
  then
	  echo "ERR:  This system does not have $INITD (which this script tries to change)"
	  RUNNING=`ps -eo fname |grep named`
	   [ -z "$RUNNING" ] && \
	      echo "ERR:  In fact the name server daemon is not even running (is it installed?)"
	   echo "ERR:  No changes will be made to your system"
	  exit 1
  fi

  # Check if named group exists
  if [ -z "`grep $GROUP /etc/group`" ] 
  then
	  echo "Creating group $GROUP:"
	  addgroup $GROUP
  else
	  echo "WARN: Group $GROUP already exists. Will not create it"
  fi
  # Same for the user
  if [ -z "`grep $USER /etc/passwd`" ] 
  then
	  echo "Creating user $USER:"
	  adduser --system --home /home/$USER \
	  --no-create-home --ingroup $GROUP \
	  --disabled-password --disabled-login $USER
  else
	  echo "WARN: The user $USER already exists. Will not create it"
  fi

  # Change the init.d script

  # First make a backup (check that there is not already
  # one there first)
  if [ ! -f $INITDBAK ] 
  then
	  cp $INITD $INITDBAK
  fi

  # Then use it to change it
  cat $INITDBAK |
  eval $AWKS > $INITD

  echo "WARN: The script $INITD has been changed, trying to test the changes."
  echo "Restarting the named daemon (check for errors here)."

  $INITD restart
  if [ $? -ne 0 ] 
  then
	  echo "ERR:  Failed to restart the daemon."
	  restore
	  exit 1
  fi

  RUNNING=`ps -eo fname |grep named`
  if [ -z "$RUNNING" ] 
  then
	  echo "ERR:  Named is not running, probably due to a problem with the changes."
	  restore
	  exit 1
  fi

  # Check if it's running as expected
  RUNUSER=`ps -eo user,fname |grep named |cut -f 1 -d " "`

  if [ "$RUNUSER" = "$USER" ] 
  then
	  echo "All has gone well, named seems to be running now as $USER."
  else
	  echo "ERR:  The script failed to automatically change the system."
	  echo "ERR:  Named is currently running as $RUNUSER."
	  restore
	  exit 1
  fi

  exit 0
</example>

<p>The previous script, run on Woody's (Debian 3.0) custom
<prgn>bind</prgn>, will produce the following initd file after
creating the 'named' user and group:

<example>
  #!/bin/sh

  PATH=/sbin:/bin:/usr/sbin:/usr/bin

  test -x /usr/sbin/named || exit 0

  start () {
	  echo -n "Starting domain name service: named"
	  start-stop-daemon --start --quiet \
	      --pidfile /var/run/named.pid --exec /usr/sbin/named 
	  echo "."	
  }

  stop () {
	  echo -n "Stopping domain name service: named"
	  # --exec doesn't catch daemons running deleted instances of named,
	  # as in an upgrade.  Fortunately, --pidfile is only going to hit
	  # things from the pidfile.
	  start-stop-daemon --stop --quiet  \
	      --pidfile /var/run/named.pid --name named
	  echo "."	
  }

  case "$1" in
      start)
	  start
      ;;

      stop)
	  stop
      ;;

      restart|force-reload)
	  stop
	  sleep 2
	  start
      ;;

      reload)
	  /usr/sbin/ndc reload
      ;;

      *)
	  echo "Usage: /etc/init.d/bind {start|stop|reload|restart|force-reload}" >&2
	  exit 1
      ;;
  esac

  exit 0
</example>

<appendix id="fw-security-update">Security update protected by a firewall

<p>After a standard installation, a system may still have some
security vulnerabilities. Unless you can download updates for the
vulnerable packages on another system (or you have mirrored
security.debian.org for local use), the system will have to be
connected to the Internet for the downloads.

<p>However, as soon as you connect to the Internet you are exposing
this system. If one of your local services is vulnerable, you might be
compromised even before the update is finished! This may seem paranoid
but, in fact, analysis from the <url id="http://www.honeynet.org"
name="Honeynet Project"> has shown that systems can be compromised in
less than three days, even if the system is not publicly known (i.e.,
not published in DNS records).

<p>When doing an update on a system not protected by an external
system like a firewall, it is possible to properly configure your
local firewall to restrict connections involving only the security
update itself. The example below shows how to set up such local
firewall capabilities, which allow connections from
security.debian.org only, logging all others.

<p>FIXME: add IP address for security.debian.org (since otherwise you
need DNS up to work) on /etc/hosts.

<p>FIXME: test this setup to see if it works properly

<p>FIXME: this will only work with HTTP URLs since ftp might need 
the ip_conntrack_ftp module, or use passive mode.

<!-- FIXME: this is probably not needed, after all it is a packet inspection 
     fw: -->
<!-- # iptables -A INPUT -s security.debian.org -p 80 -j ACCEPT -->

<example>
  # iptables -F
  # iptables -L
  Chain INPUT (policy ACCEPT)
  target     prot opt source               destination

  Chain FORWARD (policy ACCEPT)
  target     prot opt source               destination

  Chain OUTPUT (policy ACCEPT)
  target     prot opt source               destination
  # iptables -P INPUT DROP
  # iptables -P FORWARD DROP
  # iptables -P OUTPUT DROP
  # iptables -A OUTPUT -d security.debian.org -p 80 -j ACCEPT
  # iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
  # iptables -A INPUT -p icmp -j ACCEPT
  # iptables -A INPUT -j LOG
  # iptables -A OUTPUT -j LOG
  # iptables -L
  Chain INPUT (policy DROP)
  target     prot opt source               destination
  ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0          state RELATED,ESTABLISHED
  ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0
  LOG        all  --  anywhere             anywhere           LOG level warning

  Chain FORWARD (policy DROP)
  target     prot opt source               destination

  Chain OUTPUT (policy DROP)
  target     prot opt source               destination
  ACCEPT     80   --  anywhere             security.debian.org
  LOG        all  --  anywhere             anywhere           LOG level warning
</example>

<appendix id="chroot-ssh-env"><Prgn>Chroot</Prgn> environment for <PRGN>SSH</PRGN>

<p>Creating a restricted environment for <PRGN>SSH</PRGN> is a tough job due 
to its dependencies and the fact that, unlike other servers, <PRGN>SSH</PRGN> 
provides a remote shell to users. Thus, you will also have to consider the
applications users will be allowed to use in the environment. If you create 
this file structure in, for example <file>/var/chroot/ssh</file>, you could 
start the <prgn>ssh</prgn> server <prgn>chroot</prgn>'ed with this command:

<example>
  # chroot /var/chroot/ssh /sbin/sshd -f /etc/sshd_config
</example>

<sect>Automatically making the environment (the easy way)

<p>You can easily create a restricted environment with the
<package>makejail</package> package, since it automatically takes care
of tracing the server daemon (with <prgn>strace</prgn>), and makes it
run under the restricted environment.

<p>The advantage of programs that automatically generate <prgn>chroot</prgn>
environments is that they are capable of copying any package to the
<prgn>chroot</prgn> environment (even following the package's dependencies and
making sure it's complete). Thus, providing user applications is easier.

<p>To set up the environment using <prgn>makejail</prgn>'s provided
examples, just use the command:

<example>
  # makejail /usr/share/doc/makejail/examples/sshd.py
</example>

<p>Read the sample file to see what other changes need to be made to
the environment. Some of these changes, such as copying user's home
directories, cannot be done automatically. Also, limit the exposure of
sensitive information by only copying the data from a given number of
users from the files <file>/etc/shadow</file> or
<file>/etc/group</file>.

<p>The following sample environment has been (slightly) tested and is
built with the configuration file provided in the package and includes
the <package>fileutils</package> package:

<example>
.
|-- bin
|   |-- ash
|   |-- bash
|   |-- chgrp
|   |-- chmod
|   |-- chown
|   |-- cp
|   |-- csh -> /etc/alternatives/csh
|   |-- dd
|   |-- df
|   |-- dir
|   |-- fdflush
|   |-- ksh
|   |-- ln
|   |-- ls
|   |-- mkdir
|   |-- mknod
|   |-- mv
|   |-- rbash -> bash
|   |-- rm
|   |-- rmdir
|   |-- sh -> bash
|   |-- sync
|   |-- tcsh
|   |-- touch
|   |-- vdir
|   |-- zsh -> /etc/alternatives/zsh
|   `-- zsh4
|-- dev
|   |-- null
|   |-- ptmx
|   |-- pts
|   |-- ptya0
(...)
|   |-- tty
|   |-- tty0
(...)
|   `-- urandom
|-- etc
|   |-- alternatives
|   |   |-- csh -> /bin/tcsh
|   |   `-- zsh -> /bin/zsh4
|   |-- environment
|   |-- hosts
|   |-- hosts.allow
|   |-- hosts.deny
|   |-- ld.so.conf
|   |-- localtime -> /usr/share/zoneinfo/Europe/Madrid
|   |-- motd
|   |-- nsswitch.conf
|   |-- pam.conf
|   |-- pam.d
|   |   |-- other
|   |   `-- ssh
|   |-- passwd
|   |-- resolv.conf
|   |-- security
|   |   |-- access.conf
|   |   |-- chroot.conf
|   |   |-- group.conf
|   |   |-- limits.conf
|   |   |-- pam_env.conf
|   |   `-- time.conf
|   |-- shadow
|   |-- shells
|   `-- ssh
|       |-- moduli
|       |-- ssh_host_dsa_key
|       |-- ssh_host_dsa_key.pub
|       |-- ssh_host_rsa_key
|       |-- ssh_host_rsa_key.pub
|       `-- sshd_config
|-- home
|   `-- userX
|-- lib
|   |-- ld-2.2.5.so
|   |-- ld-linux.so.2 -> ld-2.2.5.so
|   |-- libc-2.2.5.so
|   |-- libc.so.6 -> libc-2.2.5.so
|   |-- libcap.so.1 -> libcap.so.1.10
|   |-- libcap.so.1.10
|   |-- libcrypt-2.2.5.so
|   |-- libcrypt.so.1 -> libcrypt-2.2.5.so
|   |-- libdl-2.2.5.so
|   |-- libdl.so.2 -> libdl-2.2.5.so
|   |-- libm-2.2.5.so
|   |-- libm.so.6 -> libm-2.2.5.so
|   |-- libncurses.so.5 -> libncurses.so.5.2
|   |-- libncurses.so.5.2
|   |-- libnsl-2.2.5.so
|   |-- libnsl.so.1 -> libnsl-2.2.5.so
|   |-- libnss_compat-2.2.5.so
|   |-- libnss_compat.so.2 -> libnss_compat-2.2.5.so
|   |-- libnss_db-2.2.so
|   |-- libnss_db.so.2 -> libnss_db-2.2.so
|   |-- libnss_dns-2.2.5.so
|   |-- libnss_dns.so.2 -> libnss_dns-2.2.5.so
|   |-- libnss_files-2.2.5.so
|   |-- libnss_files.so.2 -> libnss_files-2.2.5.so
|   |-- libnss_hesiod-2.2.5.so
|   |-- libnss_hesiod.so.2 -> libnss_hesiod-2.2.5.so
|   |-- libnss_nis-2.2.5.so
|   |-- libnss_nis.so.2 -> libnss_nis-2.2.5.so
|   |-- libnss_nisplus-2.2.5.so
|   |-- libnss_nisplus.so.2 -> libnss_nisplus-2.2.5.so
|   |-- libpam.so.0 -> libpam.so.0.72
|   |-- libpam.so.0.72
|   |-- libpthread-0.9.so
|   |-- libpthread.so.0 -> libpthread-0.9.so
|   |-- libresolv-2.2.5.so
|   |-- libresolv.so.2 -> libresolv-2.2.5.so
|   |-- librt-2.2.5.so
|   |-- librt.so.1 -> librt-2.2.5.so
|   |-- libutil-2.2.5.so
|   |-- libutil.so.1 -> libutil-2.2.5.so
|   |-- libwrap.so.0 -> libwrap.so.0.7.6
|   |-- libwrap.so.0.7.6
|   `-- security
|       |-- pam_access.so
|       |-- pam_chroot.so
|       |-- pam_deny.so
|       |-- pam_env.so
|       |-- pam_filter.so
|       |-- pam_ftp.so
|       |-- pam_group.so
|       |-- pam_issue.so
|       |-- pam_lastlog.so
|       |-- pam_limits.so
|       |-- pam_listfile.so
|       |-- pam_mail.so
|       |-- pam_mkhomedir.so
|       |-- pam_motd.so
|       |-- pam_nologin.so
|       |-- pam_permit.so
|       |-- pam_rhosts_auth.so
|       |-- pam_rootok.so
|       |-- pam_securetty.so
|       |-- pam_shells.so
|       |-- pam_stress.so
|       |-- pam_tally.so
|       |-- pam_time.so
|       |-- pam_unix.so
|       |-- pam_unix_acct.so -> pam_unix.so
|       |-- pam_unix_auth.so -> pam_unix.so
|       |-- pam_unix_passwd.so -> pam_unix.so
|       |-- pam_unix_session.so -> pam_unix.so
|       |-- pam_userdb.so
|       |-- pam_warn.so
|       `-- pam_wheel.so
|-- sbin
|   `-- start-stop-daemon
|-- usr
|   |-- bin
|   |   |-- dircolors
|   |   |-- du
|   |   |-- install
|   |   |-- link
|   |   |-- mkfifo
|   |   |-- shred
|   |   |-- touch -> /bin/touch
|   |   `-- unlink
|   |-- lib
|   |   |-- libcrypto.so.0.9.6
|   |   |-- libdb3.so.3 -> libdb3.so.3.0.2
|   |   |-- libdb3.so.3.0.2
|   |   |-- libz.so.1 -> libz.so.1.1.4
|   |   `-- libz.so.1.1.4
|   |-- sbin
|   |   `-- sshd
|   `-- share
|       |-- locale
|       |   `-- es
|       |       |-- LC_MESSAGES
|       |       |   |-- fileutils.mo
|       |       |   |-- libc.mo
|       |       |   `-- sh-utils.mo
|       |       `-- LC_TIME -> LC_MESSAGES
|       `-- zoneinfo
|           `-- Europe
|               `-- Madrid
`-- var
    `-- run
        |-- sshd
        `-- sshd.pid

27 directories, 733 files
</example>

<sect>Patching <PRGN>SSH</PRGN> to enable <prgn>chroot</prgn> functionality

<p>Debian's <prgn>sshd</prgn> does not allow restriction of a user's movement 
through the server, since it lacks the <prgn>chroot</prgn> function that the 
commercial program <prgn>sshd2</prgn> includes (using 'ChrootGroups' or 
'ChrootUsers', see <manref name="sshd2_config" section="5">). However, there 
is a patch available to add this functionality available from 
<url id="http://bugs.debian.org/139047" name="Bug report 139047">
The patch may be included in future releases of the OpenSSH package.
Emanuel Lacour has <prgn>ssh</prgn> deb
packages with this feature at <url id="http://debian.home-dn.net/woody/ssh/">. 
Completing the compilation step is recommended, though.

<p>A description of all the necessary steps can be found at <url
id="http://mail.incredimail.com/howto/openssh/"> (though it is aimed
at RedHat 7.2 users, almost all of them are applicable to
Debian). After applying the patch, modify <file>/etc/passwd</file> by
changing the home path of the users (with the special <tt>/./</tt>
token):

<example>
  joeuser:x:1099:1099:Joe Random User:/home/joe/./:/bin/bash
</example>

<p>This will restrict <em>both</em> remote shell access, as well as
remote copy through the <prgn>ssh</prgn> channel.

<p>Make sure to have all the needed binaries and libraries in the
<prgn>chroot</prgn>'ed path for users. These files should be owned by root to 
avoid tampering by the user (so as to exit the <prgn>chroot</prgn>'ed jailed). 
A sample might include:

<example>
./bin:
total 660
drwxr-xr-x    2 root     root         4096 Mar 18 13:36 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
-r-xr-xr-x    1 root     root       531160 Feb  6 22:36 bash
-r-xr-xr-x    1 root     root        43916 Nov 29 13:19 ls
-r-xr-xr-x    1 root     root        16684 Nov 29 13:19 mkdir
-rwxr-xr-x    1 root     root        23960 Mar 18 13:36 more
-r-xr-xr-x    1 root     root         9916 Jul 26  2001 pwd
-r-xr-xr-x    1 root     root        24780 Nov 29 13:19 rm
lrwxrwxrwx    1 root     root            4 Mar 30 16:29 sh -> bash

./etc:
total 24
drwxr-xr-x    2 root     root         4096 Mar 15 16:13 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
-rw-r--r--    1 root     root           54 Mar 15 13:23 group
-rw-r--r--    1 root     root          428 Mar 15 15:56 hosts
-rw-r--r--    1 root     root           44 Mar 15 15:53 passwd
-rw-r--r--    1 root     root           52 Mar 15 13:23 shells

./lib:
total 1848
drwxr-xr-x    2 root     root         4096 Mar 18 13:37 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
-rwxr-xr-x    1 root     root        92511 Mar 15 12:49 ld-linux.so.2
-rwxr-xr-x    1 root     root      1170812 Mar 15 12:49 libc.so.6
-rw-r--r--    1 root     root        20900 Mar 15 13:01 libcrypt.so.1
-rw-r--r--    1 root     root         9436 Mar 15 12:49 libdl.so.2
-rw-r--r--    1 root     root       248132 Mar 15 12:48 libncurses.so.5
-rw-r--r--    1 root     root        71332 Mar 15 13:00 libnsl.so.1
-rw-r--r--    1 root     root        34144 Mar 15 16:10
libnss_files.so.2
-rw-r--r--    1 root     root        29420 Mar 15 12:57 libpam.so.0
-rw-r--r--    1 root     root       105498 Mar 15 12:51 libpthread.so.0
-rw-r--r--    1 root     root        25596 Mar 15 12:51 librt.so.1
-rw-r--r--    1 root     root         7760 Mar 15 12:59 libutil.so.1
-rw-r--r--    1 root     root        24328 Mar 15 12:57 libwrap.so.0

./usr:
total 16
drwxr-xr-x    4 root     root         4096 Mar 15 13:00 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
drwxr-xr-x    2 root     root         4096 Mar 15 15:55 bin
drwxr-xr-x    2 root     root         4096 Mar 15 15:37 lib

./usr/bin:
total 340
drwxr-xr-x    2 root     root         4096 Mar 15 15:55 .
drwxr-xr-x    4 root     root         4096 Mar 15 13:00 ..
-rwxr-xr-x    1 root     root        10332 Mar 15 15:55 env
-rwxr-xr-x    1 root     root        13052 Mar 15 13:13 id
-r-xr-xr-x    1 root     root        25432 Mar 15 12:40 scp
-rwxr-xr-x    1 root     root        43768 Mar 15 15:15 sftp
-r-sr-xr-x    1 root     root       218456 Mar 15 12:40 ssh
-rwxr-xr-x    1 root     root         9692 Mar 15 13:17 tty

./usr/lib:
total 852
drwxr-xr-x    2 root     root         4096 Mar 15 15:37 .
drwxr-xr-x    4 root     root         4096 Mar 15 13:00 ..
-rw-r--r--    1 root     root       771088 Mar 15 13:01
libcrypto.so.0.9.6
-rw-r--r--    1 root     root        54548 Mar 15 13:00 libz.so.1
-rwxr-xr-x    1 root     root        23096 Mar 15 15:37 sftp-server
</example>

<sect>Handmade environment (the hard way)

<p>It is possible to create an environment, using a trial-and-error
method, by monitoring the <prgn>sshd</prgn> server traces and log
files in order to determine the necessary files. The following
environment, contributed by José Luis Ledesma, is a sample listing of
files in a <prgn>chroot</prgn> environment for <prgn>ssh</prgn>:

<footnote>
Notice that there are no SETUID files. This makes it more difficult
for remote users to escape the <prgn>chroot</prgn>
environment. However, it also prevents users from changing their
passwords, since the <prgn>passwd</prgn> program cannot modify the
files <file>/etc/passwd</file> or <file>/etc/shadow</file>.
</footnote>

<example>
.:
total 36
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ./
drwxr-xr-x 11 root root 4096 Jun 3 13:43 ../
drwxr-xr-x 2 root root 4096 Jun 4 12:13 bin/
drwxr-xr-x 2 root root 4096 Jun 4 12:16 dev/
drwxr-xr-x 4 root root 4096 Jun 4 12:35 etc/
drwxr-xr-x 3 root root 4096 Jun 4 12:13 lib/
drwxr-xr-x 2 root root 4096 Jun 4 12:35 sbin/
drwxr-xr-x 2 root root 4096 Jun 4 12:32 tmp/
drwxr-xr-x 2 root root 4096 Jun 4 12:16 usr/
./bin:
total 8368
drwxr-xr-x 2 root root 4096 Jun 4 12:13 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
-rwxr-xr-x 1 root root 109855 Jun 3 13:45 a2p*
-rwxr-xr-x 1 root root 387764 Jun 3 13:45 bash*
-rwxr-xr-x 1 root root 36365 Jun 3 13:45 c2ph*
-rwxr-xr-x 1 root root 20629 Jun 3 13:45 dprofpp*
-rwxr-xr-x 1 root root 6956 Jun 3 13:46 env*
-rwxr-xr-x 1 root root 158116 Jun 3 13:45 fax2ps*
-rwxr-xr-x 1 root root 104008 Jun 3 13:45 faxalter*
-rwxr-xr-x 1 root root 89340 Jun 3 13:45 faxcover*
-rwxr-xr-x 1 root root 441584 Jun 3 13:45 faxmail*
-rwxr-xr-x 1 root root 96036 Jun 3 13:45 faxrm*
-rwxr-xr-x 1 root root 107000 Jun 3 13:45 faxstat*
-rwxr-xr-x 1 root root 77832 Jun 4 11:46 grep*
-rwxr-xr-x 1 root root 19597 Jun 3 13:45 h2ph*
-rwxr-xr-x 1 root root 46979 Jun 3 13:45 h2xs*
-rwxr-xr-x 1 root root 10420 Jun 3 13:46 id*
-rwxr-xr-x 1 root root 4528 Jun 3 13:46 ldd*
-rwxr-xr-x 1 root root 111386 Jun 4 11:46 less*
-r-xr-xr-x 1 root root 26168 Jun 3 13:45 login*
-rwxr-xr-x 1 root root 49164 Jun 3 13:45 ls*
-rwxr-xr-x 1 root root 11600 Jun 3 13:45 mkdir*
-rwxr-xr-x 1 root root 24780 Jun 3 13:45 more*
-rwxr-xr-x 1 root root 154980 Jun 3 13:45 pal2rgb*
-rwxr-xr-x 1 root root 27920 Jun 3 13:46 passwd*
-rwxr-xr-x 1 root root 4241 Jun 3 13:45 pl2pm*
-rwxr-xr-x 1 root root 2350 Jun 3 13:45 pod2html*
-rwxr-xr-x 1 root root 7875 Jun 3 13:45 pod2latex*
-rwxr-xr-x 1 root root 17587 Jun 3 13:45 pod2man*
-rwxr-xr-x 1 root root 6877 Jun 3 13:45 pod2text*
-rwxr-xr-x 1 root root 3300 Jun 3 13:45 pod2usage*
-rwxr-xr-x 1 root root 3341 Jun 3 13:45 podchecker*
-rwxr-xr-x 1 root root 2483 Jun 3 13:45 podselect*
-r-xr-xr-x 1 root root 82412 Jun 4 11:46 ps*
-rwxr-xr-x 1 root root 36365 Jun 3 13:45 pstruct*
-rwxr-xr-x 1 root root 7120 Jun 3 13:45 pwd*
-rwxr-xr-x 1 root root 179884 Jun 3 13:45 rgb2ycbcr*
-rwxr-xr-x 1 root root 20532 Jun 3 13:45 rm*
-rwxr-xr-x 1 root root 6720 Jun 4 10:15 rmdir*
-rwxr-xr-x 1 root root 14705 Jun 3 13:45 s2p*
-rwxr-xr-x 1 root root 28764 Jun 3 13:46 scp*
-rwxr-xr-x 1 root root 385000 Jun 3 13:45 sendfax*
-rwxr-xr-x 1 root root 67548 Jun 3 13:45 sendpage*
-rwxr-xr-x 1 root root 88632 Jun 3 13:46 sftp*
-rwxr-xr-x 1 root root 387764 Jun 3 13:45 sh*
-rws--x--x 1 root root 744500 Jun 3 13:46 slogin*
-rwxr-xr-x 1 root root 14523 Jun 3 13:46 splain*
-rws--x--x 1 root root 744500 Jun 3 13:46 ssh*
-rwxr-xr-x 1 root root 570960 Jun 3 13:46 ssh-add*
-rwxr-xr-x 1 root root 502952 Jun 3 13:46 ssh-agent*
-rwxr-xr-x 1 root root 575740 Jun 3 13:46 ssh-keygen*
-rwxr-xr-x 1 root root 383480 Jun 3 13:46 ssh-keyscan*
-rwxr-xr-x 1 root root 39 Jun 3 13:46 ssh_europa*
-rwxr-xr-x 1 root root 107252 Jun 4 10:14 strace*
-rwxr-xr-x 1 root root 8323 Jun 4 10:14 strace-graph*
-rwxr-xr-x 1 root root 158088 Jun 3 13:46 thumbnail*
-rwxr-xr-x 1 root root 6312 Jun 3 13:46 tty*
-rwxr-xr-x 1 root root 55904 Jun 4 11:46 useradd*
-rwxr-xr-x 1 root root 585656 Jun 4 11:47 vi*
-rwxr-xr-x 1 root root 6444 Jun 4 11:45 whoami*
./dev:
total 8
drwxr-xr-x 2 root root 4096 Jun 4 12:16 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
crw-r--r-- 1 root root 1, 9 Jun 3 13:43 urandom
./etc:
total 208
drwxr-xr-x 4 root root 4096 Jun 4 12:35 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
-rw------- 1 root root 0 Jun 4 11:46 .pwd.lock
-rw-r--r-- 1 root root 653 Jun 3 13:46 group
-rw-r--r-- 1 root root 242 Jun 4 11:33 host.conf
-rw-r--r-- 1 root root 857 Jun 4 12:04 hosts
-rw-r--r-- 1 root root 1050 Jun 4 11:29 ld.so.cache
-rw-r--r-- 1 root root 304 Jun 4 11:28 ld.so.conf
-rw-r--r-- 1 root root 235 Jun 4 11:27 ld.so.conf~
-rw-r--r-- 1 root root 88039 Jun 3 13:46 moduli
-rw-r--r-- 1 root root 1342 Jun 4 11:34 nsswitch.conf
drwxr-xr-x 2 root root 4096 Jun 4 12:02 pam.d/
-rw-r--r-- 1 root root 28 Jun 4 12:00 pam_smb.conf
-rw-r--r-- 1 root root 2520 Jun 4 11:57 passwd
-rw-r--r-- 1 root root 7228 Jun 3 13:48 profile
-rw-r--r-- 1 root root 1339 Jun 4 11:33 protocols
-rw-r--r-- 1 root root 274 Jun 4 11:44 resolv.conf
drwxr-xr-x 2 root root 4096 Jun 3 13:43 security/
-rw-r----- 1 root root 1178 Jun 4 11:51 shadow
-rw------- 1 root root 80 Jun 4 11:45 shadow-
-rw-r----- 1 root root 1178 Jun 4 11:48 shadow.old
-rw-r--r-- 1 root root 161 Jun 3 13:46 shells
-rw-r--r-- 1 root root 1144 Jun 3 13:46 ssh_config
-rw------- 1 root root 668 Jun 3 13:46 ssh_host_dsa_key
-rw-r--r-- 1 root root 602 Jun 3 13:46 ssh_host_dsa_key.pub
-rw------- 1 root root 527 Jun 3 13:46 ssh_host_key
-rw-r--r-- 1 root root 331 Jun 3 13:46 ssh_host_key.pub
-rw------- 1 root root 883 Jun 3 13:46 ssh_host_rsa_key
-rw-r--r-- 1 root root 222 Jun 3 13:46 ssh_host_rsa_key.pub
-rw-r--r-- 1 root root 2471 Jun 4 12:15 sshd_config
./etc/pam.d:
total 24
drwxr-xr-x 2 root root 4096 Jun 4 12:02 ./
drwxr-xr-x 4 root root 4096 Jun 4 12:35 ../
lrwxrwxrwx 1 root root 4 Jun 4 12:02 other -> sshd
-rw-r--r-- 1 root root 318 Jun 3 13:46 passwd
-rw-r--r-- 1 root root 546 Jun 4 11:36 ssh
-rw-r--r-- 1 root root 479 Jun 4 12:02 sshd
-rw-r--r-- 1 root root 370 Jun 3 13:46 su
./etc/security:
total 32
drwxr-xr-x 2 root root 4096 Jun 3 13:43 ./
drwxr-xr-x 4 root root 4096 Jun 4 12:35 ../
-rw-r--r-- 1 root root 1971 Jun 3 13:46 access.conf
-rw-r--r-- 1 root root 184 Jun 3 13:46 chroot.conf
-rw-r--r-- 1 root root 2145 Jun 3 13:46 group.conf
-rw-r--r-- 1 root root 1356 Jun 3 13:46 limits.conf
-rw-r--r-- 1 root root 2858 Jun 3 13:46 pam_env.conf
-rw-r--r-- 1 root root 2154 Jun 3 13:46 time.conf
./lib:
total 8316
drwxr-xr-x 3 root root 4096 Jun 4 12:13 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
-rw-r--r-- 1 root root 1024 Jun 4 11:51 cracklib_dict.hwm
-rw-r--r-- 1 root root 214324 Jun 4 11:51 cracklib_dict.pwd
-rw-r--r-- 1 root root 11360 Jun 4 11:51 cracklib_dict.pwi
-rwxr-xr-x 1 root root 342427 Jun 3 13:46 ld-linux.so.2*
-rwxr-xr-x 1 root root 4061504 Jun 3 13:46 libc.so.6*
lrwxrwxrwx 1 root root 15 Jun 4 12:11 libcrack.so -> libcrack.so.2.7*
lrwxrwxrwx 1 root root 15 Jun 4 12:11 libcrack.so.2 -> libcrack.so.2.7*
-rwxr-xr-x 1 root root 33291 Jun 4 11:39 libcrack.so.2.7*
-rwxr-xr-x 1 root root 60988 Jun 3 13:46 libcrypt.so.1*
-rwxr-xr-x 1 root root 71846 Jun 3 13:46 libdl.so.2*
-rwxr-xr-x 1 root root 27762 Jun 3 13:46 libhistory.so.4.0*
lrwxrwxrwx 1 root root 17 Jun 4 12:12 libncurses.so.4 -> libncurses.so.4.2*
-rwxr-xr-x 1 root root 503903 Jun 3 13:46 libncurses.so.4.2*
lrwxrwxrwx 1 root root 17 Jun 4 12:12 libncurses.so.5 -> libncurses.so.5.0*
-rwxr-xr-x 1 root root 549429 Jun 3 13:46 libncurses.so.5.0*
-rwxr-xr-x 1 root root 369801 Jun 3 13:46 libnsl.so.1*
-rwxr-xr-x 1 root root 142563 Jun 4 11:49 libnss_compat.so.1*
-rwxr-xr-x 1 root root 215569 Jun 4 11:49 libnss_compat.so.2*
-rwxr-xr-x 1 root root 61648 Jun 4 11:34 libnss_dns.so.1*
-rwxr-xr-x 1 root root 63453 Jun 4 11:34 libnss_dns.so.2*
-rwxr-xr-x 1 root root 63782 Jun 4 11:34 libnss_dns6.so.2*
-rwxr-xr-x 1 root root 205715 Jun 3 13:46 libnss_files.so.1*
-rwxr-xr-x 1 root root 235932 Jun 3 13:49 libnss_files.so.2*
-rwxr-xr-x 1 root root 204383 Jun 4 11:33 libnss_nis.so.1*
-rwxr-xr-x 1 root root 254023 Jun 4 11:33 libnss_nis.so.2*
-rwxr-xr-x 1 root root 256465 Jun 4 11:33 libnss_nisplus.so.2*
lrwxrwxrwx 1 root root 14 Jun 4 12:12 libpam.so.0 -> libpam.so.0.72*
-rwxr-xr-x 1 root root 31449 Jun 3 13:46 libpam.so.0.72*
lrwxrwxrwx 1 root root 19 Jun 4 12:12 libpam_misc.so.0 ->
libpam_misc.so.0.72*
-rwxr-xr-x 1 root root 8125 Jun 3 13:46 libpam_misc.so.0.72*
lrwxrwxrwx 1 root root 15 Jun 4 12:12 libpamc.so.0 -> libpamc.so.0.72*
-rwxr-xr-x 1 root root 10499 Jun 3 13:46 libpamc.so.0.72*
-rwxr-xr-x 1 root root 176427 Jun 3 13:46 libreadline.so.4.0*
-rwxr-xr-x 1 root root 44729 Jun 3 13:46 libutil.so.1*
-rwxr-xr-x 1 root root 70254 Jun 3 13:46 libz.a*
lrwxrwxrwx 1 root root 13 Jun 4 12:13 libz.so -> libz.so.1.1.3*
lrwxrwxrwx 1 root root 13 Jun 4 12:13 libz.so.1 -> libz.so.1.1.3*
-rwxr-xr-x 1 root root 63312 Jun 3 13:46 libz.so.1.1.3*
drwxr-xr-x 2 root root 4096 Jun 4 12:00 security/
./lib/security:
total 668
drwxr-xr-x 2 root root 4096 Jun 4 12:00 ./
drwxr-xr-x 3 root root 4096 Jun 4 12:13 ../
-rwxr-xr-x 1 root root 10067 Jun 3 13:46 pam_access.so*
-rwxr-xr-x 1 root root 8300 Jun 3 13:46 pam_chroot.so*
-rwxr-xr-x 1 root root 14397 Jun 3 13:46 pam_cracklib.so*
-rwxr-xr-x 1 root root 5082 Jun 3 13:46 pam_deny.so*
-rwxr-xr-x 1 root root 13153 Jun 3 13:46 pam_env.so*
-rwxr-xr-x 1 root root 13371 Jun 3 13:46 pam_filter.so*
-rwxr-xr-x 1 root root 7957 Jun 3 13:46 pam_ftp.so*
-rwxr-xr-x 1 root root 12771 Jun 3 13:46 pam_group.so*
-rwxr-xr-x 1 root root 10174 Jun 3 13:46 pam_issue.so*
-rwxr-xr-x 1 root root 9774 Jun 3 13:46 pam_lastlog.so*
-rwxr-xr-x 1 root root 13591 Jun 3 13:46 pam_limits.so*
-rwxr-xr-x 1 root root 11268 Jun 3 13:46 pam_listfile.so*
-rwxr-xr-x 1 root root 11182 Jun 3 13:46 pam_mail.so*
-rwxr-xr-x 1 root root 5923 Jun 3 13:46 pam_nologin.so*
-rwxr-xr-x 1 root root 5460 Jun 3 13:46 pam_permit.so*
-rwxr-xr-x 1 root root 18226 Jun 3 13:46 pam_pwcheck.so*
-rwxr-xr-x 1 root root 12590 Jun 3 13:46 pam_rhosts_auth.so*
-rwxr-xr-x 1 root root 5551 Jun 3 13:46 pam_rootok.so*
-rwxr-xr-x 1 root root 7239 Jun 3 13:46 pam_securetty.so*
-rwxr-xr-x 1 root root 6551 Jun 3 13:46 pam_shells.so*
-rwxr-xr-x 1 root root 55925 Jun 4 12:00 pam_smb_auth.so*
-rwxr-xr-x 1 root root 12678 Jun 3 13:46 pam_stress.so*
-rwxr-xr-x 1 root root 11170 Jun 3 13:46 pam_tally.so*
-rwxr-xr-x 1 root root 11124 Jun 3 13:46 pam_time.so*
-rwxr-xr-x 1 root root 45703 Jun 3 13:46 pam_unix.so*
-rwxr-xr-x 1 root root 45703 Jun 3 13:46 pam_unix2.so*
-rwxr-xr-x 1 root root 45386 Jun 3 13:46 pam_unix_acct.so*
-rwxr-xr-x 1 root root 45386 Jun 3 13:46 pam_unix_auth.so*
-rwxr-xr-x 1 root root 45386 Jun 3 13:46 pam_unix_passwd.so*
-rwxr-xr-x 1 root root 45386 Jun 3 13:46 pam_unix_session.so*
-rwxr-xr-x 1 root root 9726 Jun 3 13:46 pam_userdb.so*
-rwxr-xr-x 1 root root 6424 Jun 3 13:46 pam_warn.so*
-rwxr-xr-x 1 root root 7460 Jun 3 13:46 pam_wheel.so*
./sbin:
total 3132
drwxr-xr-x 2 root root 4096 Jun 4 12:35 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
-rwxr-xr-x 1 root root 178256 Jun 3 13:46 choptest*
-rwxr-xr-x 1 root root 184032 Jun 3 13:46 cqtest*
-rwxr-xr-x 1 root root 81096 Jun 3 13:46 dialtest*
-rwxr-xr-x 1 root root 1142128 Jun 4 11:28 ldconfig*
-rwxr-xr-x 1 root root 2868 Jun 3 13:46 lockname*
-rwxr-xr-x 1 root root 3340 Jun 3 13:46 ondelay*
-rwxr-xr-x 1 root root 376796 Jun 3 13:46 pagesend*
-rwxr-xr-x 1 root root 13950 Jun 3 13:46 probemodem*
-rwxr-xr-x 1 root root 9234 Jun 3 13:46 recvstats*
-rwxr-xr-x 1 root root 64480 Jun 3 13:46 sftp-server*
-rwxr-xr-x 1 root root 744412 Jun 3 13:46 sshd*
-rwxr-xr-x 1 root root 30750 Jun 4 11:46 su*
-rwxr-xr-x 1 root root 194632 Jun 3 13:46 tagtest*
-rwxr-xr-x 1 root root 69892 Jun 3 13:46 tsitest*
-rwxr-xr-x 1 root root 43792 Jun 3 13:46 typetest*
./tmp:
total 8
drwxr-xr-x 2 root root 4096 Jun 4 12:32 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
./usr:
total 8
drwxr-xr-x 2 root root 4096 Jun 4 12:16 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
lrwxrwxrwx 1 root root 7 Jun 4 12:14 bin -> ../bin//
lrwxrwxrwx 1 root root 7 Jun 4 11:33 lib -> ../lib//
lrwxrwxrwx 1 root root 8 Jun 4 12:13 sbin -> ../sbin//
</example>



<appendix id="chroot-apache-env"><Prgn>Chroot</Prgn> environment for <PRGN>Apache</PRGN>

<sect>Introduction

<p>The <prgn>chroot</prgn> utility is often used to jail a daemon in a
restricted tree. You can use it to insulate services from one another,
so that security issues in a software package do not jeoparize the
whole server. When using the <prgn>makejail</prgn> script, setting up
and updating the chrooted tree is much easier.</p>

<sect1>Licensing 

<p>This document is copyright 2002 Alexandre Ratti. It has been
released underthe GNU-FDL 1.2 (GNU Free Documentation Licence) and is
included in this manual with his explicit permission.

</sect1>
</sect>

<sect>Installing the server

<p>This procedure was tested on Debian GNU/Linux&nbsp;3.0 (Woody) with
<prgn>makejail</prgn> 0.0.4-1 (in Debian/testing).

<list>

<item> <p>Log in as <prgn>root</prgn> and create a new jail
directory:

<example>
$ mkdir -p /var/chroot/apache
</example>

 </item>

 <item> <p>Create a new user and a new group. The chrooted Apache
server will run as this user/group, which isn't used for anything else
on the system. In this example, both user and group are called
<prgn>chrapach</prgn>.

 <example> 
 $ adduser --home /var/chroot/apache --shell /bin/false \
 --no-create-home --system --group chrapach
 </example>

<p>FIXME: is a new user needed? (Apache already runs as the apache user)</p>

  </item>

  <item>Install Apache as usual on Debian: <tt>apt-get install
apache</tt></item>

<item>Set up Apache (eg. define your subdomains, etc.). In the
<file>/etc/apache/httpd.conf</file> configuration file , set the
<em>Group</em> and <em>User</em> options to <tt>chrapach</tt>. Restart
Apache and make sure the server is working correctly. Now, stop the
Apache daemon.</item>

<item>Install <prgn>makejail</prgn> (available in Debian/testing for
now). You should also also <prgn>wget</prgn> et <prgn>lynx</prgn> as
they are will be used by <prgn>makejail</prgn> to test the chrooted
server: <tt>apt-get install makejail wget lynx</tt></item>

<item>Copy the sample configuration file for Apache to the
<file>/etc/makejail</file> directory:
 <example> 
 # cp/usr/share/doc/makejail/examples/apache.py /etc/makejail/ 
 </example>

</item>
 
 <item>Edit <file>/etc/makejail/apache.py</file>. You need to change
the <em>chroot</em>, <em>users</em> and <em>groups</em> options. To
run this version of <prgn>makejail</prgn>, you can also added a
<prgn>packages</prgn> option. See the <url
id="http://www.floc.net/makejail/current/doc/" name="makejail
documentation">. A sample is shown here:

<example>
chroot=&quot;/var/chroot/apache&quot;
testCommandsInsideJail=[&quot;/usr/sbin/apachectl start&quot;]
processNames=[&quot;apache&quot;]
testCommandsOutsideJail=[&quot;wget -r --spider http://localhost/&quot;,
                         &quot;lynx --source https://localhost/&quot;]
preserve=[&quot;/var/www&quot;,
          &quot;/var/log/apache&quot;,
          &quot;/dev/log&quot;]
users=[&quot;chrapach&quot;]
groups=[&quot;chrapach&quot;]
packages=[&quot;apache&quot;, &quot;apache-common&quot;]
userFiles=[&quot;/etc/password&quot;,
           &quot;/etc/shadow&quot;]
groupFiles=[&quot;/etc/group&quot;,
            &quot;/etc/gshadow&quot;]
forceCopy=[&quot;/etc/hosts&quot;,
           &quot;/etc/mime.types&quot;]
</example>

<p><em>FIXME:</em> some options do not seem to work properly. For
instance, <file>/etc/shadow</file> and<file>/etc/gshadow</file> are
not copied, whereas <file>/etc/password</file> and
<file>/etc/group</file> are fully copied instead of being
filtered.</p>
 </item>
 
<item>Create the chroot tree:<tt>makejail /etc/makejail/apache.py</tt></item>

<item>If <file>/etc/password</file> and <file>/etc/group</file> were
fully copied, type:

      <example>
      $ grep chrapach /etc/passwd &gt; /var/chroot/apache/etc/passwd
      $ grep chrapach /etc/group &gt; /var/chroot/apache/etc/group
      </example>
to replace them with filtered copies.</item>

<item>Copy the Web site pages and the logs into the jail. These files
are not copied automatically (see the <em>preserve</em> option in
<prgn>makejail</prgn>'s configuration file).
      <example>
      # cp -Rp /var/www /var/chroot/apache/var
      # cp -Rp /var/log/apache/*.log /var/chroot/apache/var/log/apache
      </example>
  </item>

<item>Edit the startup script for the system logging daemon so that it
also listen to the <file>/var/chroot/apache/dev/log</file> socket. In
<file>/etc/init.d/sysklogd</file>, replace:
<tt>SYSLOGD=&quot;&quot;</tt> with <tt>SYSLOGD=&quot; -a
/var/chroot/apache/dev/log&quot;</tt> and restart the daemon
(<tt>/etc/init.d/sysklogd restart</tt>).</item>

  <item> Edit the Apache startup script (<file>/etc/init.d/apache</file>). You might need to make some changes to the default startup script for it to run properly with a chrooted 
      tree. Such as:
    <list>
      <item>set a new <em>CHRDIR</em> variable at the top of the file;</item>
      <item>edit the <em>start</em>, <em>stop</em>, <em>reload</em>, 
        etc. sections;</item>
      <item>add a line to mount and unmount the <file>/proc</file>
filesystem within the jail.  </item>
    </list>
<example>
#! /bin/bash
#
# apache	Start the apache HTTP server.
#

CHRDIR=/var/chroot/apache

NAME=apache
PATH=/bin:/usr/bin:/sbin:/usr/sbin
DAEMON=/usr/sbin/apache
SUEXEC=/usr/lib/apache/suexec
PIDFILE=/var/run/$NAME.pid
CONF=/etc/apache/httpd.conf
APACHECTL=/usr/sbin/apachectl 

trap "" 1
export LANG=C
export PATH

test -f $DAEMON || exit 0
test -f $APACHECTL || exit 0

# ensure we don't leak environment vars into apachectl
APACHECTL="env -i LANG=${LANG} PATH=${PATH} $APACHECTL"

if egrep -q -i "^[[:space:]]*ServerType[[:space:]]+inet" $CONF
then
    exit 0
fi

case "$1" in
  start)
    echo -n "Starting web server: $NAME"
    mount -t proc proc /var/chroot/apache/proc
    start-stop-daemon --start --pidfile $PIDFILE --exec $DAEMON \
	--chroot $CHRDIR
    ;;

  stop)
    echo -n "Stopping web server: $NAME"
    start-stop-daemon --stop --pidfile "$CHRDIR/$PIDFILE" --oknodo
    umount /var/chroot/apache/proc
    ;;

  reload)
    echo -n "Reloading $NAME configuration"
    start-stop-daemon --stop --pidfile "$CHRDIR/$PIDFILE" \
	--signal USR1 --startas $DAEMON --chroot $CHRDIR
    ;;

  reload-modules)
    echo -n "Reloading $NAME modules"
    start-stop-daemon --stop --pidfile "$CHRDIR/$PIDFILE" --oknodo \
	--retry 30
    start-stop-daemon --start --pidfile $PIDFILE \
	--exec $DAEMON --chroot $CHRDIR
    ;;

  restart)
    $0 reload-modules
    exit $?
    ;;

  force-reload)
    $0 reload-modules
    exit $?
    ;;

  *)
    echo "Usage: /etc/init.d/$NAME {start|stop|reload|reload-modules|force-reload|restart}"
    exit 1
    ;;
esac

if [ $? == 0 ]; then
	echo .
	exit 0
else
	echo failed
	exit 1
fi
</example>

      <p><em>FIXME</em>: should the first Apache process be run as
another user than root (i.e. add --chuid chrapach:chrapach)? Cons:
chrapach will need write access to the logs, which is awkward.</p>
  </item>

  <item>Replace in <file>/etc/logrotate.d/apache</file>
<tt>/var/log/apache/*.log</tt> with
<tt>/var/chroot/apache/var/log/apache/*.log</tt> </item>

  <item>Start Apache (<prgn>/etc/init.d/apache start</prgn>) and check
what is it reported in the jail log
(<file>/var/chroot/apache/var/log/apache/error.log</file>).  If your
setup is more complex, (eg. if you also use PHP and MySQL), files will
probably be missing. if some files are not copied automatically by
<prgn>makejail</prgn>, you can list them in the <em>forceCopy</em> (to
copy files directly) or <em>packages</em> (to copy full packages and
their dependencies) option the <file>/etc/makejail/apache.py</file>
configuration file.  </item>

  <item> 
    <p>Type <tt>ps aux | grep apache</tt> to make sure Apache 
      is running. You should see something like:
      <example>
      root 180 0.0 1.1 2936 1436 ? S 04:03 0:00 /usr/sbin/apache
      chrapach 189 0.0 1.1 2960 1456 ? S 04:03 0:00 /usr/sbin/apache
      chrapach 190 0.0 1.1 2960 1456 ? S 04:03 0:00 /usr/sbin/apache
      chrapach 191 0.0 1.1 2960 1456 ? S 04:03 0:00 /usr/sbin/apache
      chrapach 192 0.0 1.1 2960 1456 ? S 04:03 0:00 /usr/sbin/apache
      chrapach 193 0.0 1.1 2960 1456 ? S 04:03 0:00 /usr/sbin/apache
      </example>
  </item>

  <item> Make sure the Apache processes are running chrooted by lookin
in the <file>/proc</file> filesystem: <tt>ls -la
/proc/<em>process_number</em>/root/.</tt> where <em>process</em> is one
of the PID numbers listed above (2nd column; 189
    for instance). The ntries for a restricted tree should be listed:
    <example>
    drwxr-sr-x 10 root staff 240 Dec 2 16:06 .
    drwxrwsr-x 4 root staff 72 Dec 2 08:07 ..
    drwxr-xr-x 2 root root 144 Dec 2 16:05 bin
    drwxr-xr-x 2 root root 120 Dec 3 04:03 dev
    drwxr-xr-x 5 root root 408 Dec 3 04:03 etc
    drwxr-xr-x 2 root root 800 Dec 2 16:06 lib
    dr-xr-xr-x 43 root root 0 Dec 3 05:03 proc
    drwxr-xr-x 2 root root 48 Dec 2 16:06 sbin
    drwxr-xr-x 6 root root 144 Dec 2 16:04 usr
    drwxr-xr-x 7 root root 168 Dec 2 16:06 var
    </example>
    <p>To automate this test, you can type:<tt>ls -la /proc/`cat
/var/chroot/apache/var/run/apache.pid`/root/.</tt></p>

    <p><em>FIXME</em>: Add other tests that can be run to make sure the
jail is closed?</p>
	</item>
</list>

<p>The reason I like this is because setting up the jail is not very
difficult and  the server can be updated in just two lines:

<example> 
apt-get update &amp;&amp; apt-get install apache
makejail /etc/makejail/apache.py
</example>

</sect>
<sect>See also

<p>If you are looking for more information you can consider these
sources of information in which the information presented is based:
<list>

  <item><url id="http://www.floc.net/makejail/" name="makejail
homepage"> , this program was written by Alain Tesio)</item>

<!-- Not appropiate for this section 
  <item><a href="http://www.easter-eggs.org/article242.html">Bind9 chroot&eacute; 
    avec <prgn>makejail</prgn></a>, Pascal Brugier, easter-eggs.org, 21/03/2002</item>
-->

  <item><url id="http://www.networkdweebs.com/chroot.html"
name="Chrooting daemons and system processes"> by Jonathan, Network
Dweebs, 21/10/2002</item>

  <item><url
id="http://www.digitaltoad.net/docs/guide/secure_rh/chap29sec254.html"
name="Apache in a chroot jail"> in <em>Securing and Optimizing
Linux</em> written by Gerhard Mourani,
    2000 </item>
</list>
</sect>
</appendix>

</book>
