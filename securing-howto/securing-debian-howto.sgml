<!doctype debiandoc system>

<!--
# TODO list:
# - Pointers to other security-related documents, jfs
# - There was a 'useful software section' why was it removed? jfs
# - A checklist to hardening the Debian system (summarising all
#   this info in a page), there were many good ideas in the
#   debian-security's Nov/Dec 2000 threads
# - Information on debian firewalling and what/how does it change
#   from other distributions
# - Shorten overlong lines - there are lots of sections (by jfs?) where
#   lines are routinely longer than 80 characters. Actually it makes sense
#   to author SGML with much shorter lines, because it makes editing simpler
#   (while the internal line length of the SGML source is obviously not
#   visible in any way to the end user).
#   (occur (make-string 80 ?.))   ;  C-x C-e here
# - Remove gratuitous trailing whitespace; M-x occur " +$"
# - Consider changing order of subsections so as to match the order in
#   the checklist appendix
-->

<book>

<titlepag>
<!-- Title information -->
<title>Securing Debian HOWTO
<author>
<name>Javier Fernández-Sanguino Peña</name>
<email>jfs@computer.org</email>
<version>v1.6
<date>Wed, 15 Aug 2001 16:12:29 +0200



<abstract>
This document describes the process of securing and hardening the default
Debian installation.
</abstract>

<copyright> 
<copyrightsummary>
Copyright &copy;  2001  Alexander Reelsen, Javier Fernández-Sanguino Peña
Copyright &copy;  2000  Alexander Reelsen
however it is distributed under the terms of the GNU
free documentation license.
This document is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY.
</copyrightsummary>

</titlepag>

<!-- Table of contents -->
<toc>

<!-- Begin the document -->

<chapt>Introduction
<p>
One of the hardest things about writing security documents is that every case
is unique. Two things you have to pay attention to are the threat environment
and the security needs of the individual site, host or network. For instance,
the security needs of a home user are completely different from a network in a
bank. While the primary threat a home user needs to face is the script kiddie
type of cracker, a bank network has to worry about directed attacks. 
Additionally, the bank has to protect their customer's data with arithmetic 
precision. In short, every user has to consider the tradeoff between
usability and security/paranoia.
<p>
Note that this HOWTO only covers issues relating to software. 
The best software in the world can't protect you if someone can physically
access the machine. You can place it under your desk, or you can place
it in a hardened bunker with an army in front of it. Nevertheless the
desktop computer can be much more secure (from a software point of view)
than a physically protected one if the desktop is configured properly and
the software on the protected machine is full of security holes.
Obviously, you must consider both issues.

<p>In addition this document just gives an overview of what you can do 
to increase the security of your Debian GNU/Linux
system. If you have read other documents regarding Linux security you
will find that there are common issues that might overlap with this
document. However, this document does not try to be the ultimate source
of information you will be using, it only tries to adapt this same
information so that it is meaningful to a Debian GNU/Linux system.
Since distributions do some things in different ways (startup of
daemons is an usual example) you will find here a different approach,
using Debian's tools, regarding security.

<p>If you have comments, additions or suggestions, mail them to
<!-- FIXME: Alexander seems to be alive on debian-security, contact
him and add his correct email --> 
<!-- <url name="Alexander Reelsen" id="mailto:ar@rhwd.net"> and -->
<url name="Javier Fernández-Sanguino" id="mailto:jfs@computer.org">
and they will be incorporated into this HOWTO. 

<sect>Download the HOWTO
<p>
You can download or view the newest version of the Securing Debian HOWTO
from the <url name="Debian Documentation Project" id="http://www.debian.org/doc/manuals/securing-debian-howto/">. 
Feel free to check out the version control system through its
<url name="CVS server" id="http://cvs.debian.org/ddp/manuals.sgml/securing-howto/?cvsroot=debian-doc">.

<p>
Previous (out of date) versions of this HOWTO can be found here:

<list>
<item><url name="Text-only" id="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.txt">
<item><url name="HTML" id="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.html">
<item><url name="HTML, tarred and gzipped" id="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.tar.gz">
<item><url name="SGML" id="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.sgml">
</list>

<sect>Organizational Notes/Feedback
<p>
Now to the official part. At the moment I (Alexander Reelsen) wrote
most paragraphs of this HOWTO, but in my opinion this should not stay
the case. I grew up and live with free software, it is part of my
everyday use and I guess yours, too. I encourage everybody to send me
feedback, hints additions or any other suggestions, you might have.

<p>
If you think, you can maintain a certain section or paragraph better
than me, then write to the document maintainer and you are welcome to
do it.  Especially if you find a section marked as FIXME, what means I
did not have the time yet or the needed knowledge about the topic,
drop me a mail immediately.
<p>
The topic of this HOWTO makes it quite clear that it is important to
keep it up to date, and you can do your part.  Please contribute.

<sect>Prior knowledge
<p>
The installation of Debian GNU/Linux is not very difficult and you should have
been able to install it. If you already have some knowledge about Linux or
other Unices and you are a bit familiar with basic security, it will be easier
to understand this HOWTO, as this document cannot explain every little detail 
of a feature (otherwise this would have been a book instead of a HOWTO).


<sect>TODO
<p>
<list>
<item>Pointers to Linux/UNIX info related to security (the 
<url name="Linux Security HOWTO" id="http://www.linuxdoc.org/HOWTO/Security-HOWTO.html">
and <url name="Securing and Optimizing Linux: RedHat Edition" id="http://www.linuxdoc.org/links/p_books.html#securing_linux">.
<item>Add info on how the <url name="Security Team" id="http://security.debian.org"> works
in Debian. For example: security bugs are backported to the stable distribucion if possible
(even if the version has not changed), alerts are sent to mailing lists (including bugtraq)...
<item>Add info on how to keep the system up-to-date (after installation) by aptdating from
security.debian.org
<!-- Additions by era -->
<item>Policy, and educating users about policy
<item>More about tcpwrappers, and wrappers in general?
<item><file>hosts.equiv</file> and other major security holes
<item>Issues with file sharing servers such as Samba and NFS?
<!-- End of additions by era -->
<item>suidmanager/dpkg-statoverrides
<item>lpr and lprng
<item>Switching off the gnome IP things
<item>LKM, linux kernel modules, bad and good ones
</list>

<sect>Changelog
 <p>
<sect1>Version 1.7
<p>Changes by era eriksson.
<list>
<item>Typo fixes and wording changes <!-- FIXME: new checklist has not
been included yet, era, please send it back -->
</list>
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Minor changes to tags in order to keep on removing the tt tags
and substitute them for prgn/package tags.
</list>

<sect1>Version 1.6
<p>Changes by Javier Fernández-Sanguino Peña.
<list>
<item>Added pointer to document as published in the DDP (should superceed the original
in the near future)
<item>Started a mini-FAQ (should be expanded) with some questions recovered
from my mailbox.
<item>Added general information to consider while securing.
<item>Added a paragraph regarding local (incoming) mail delivery.
<item>Added some pointers to more information.
<item>Added information regarding the printing service.
<item>Added a security hardening checklist.
<item>Reorganized NIS and RPC information.
<item>Added some notes taken while reading this document on my new Visor :)
<item>Fixed some bad formatted lines.
<item>Fixed some typos.
<item>Added a Genius/Paranoia idea contributed by Gaby Schilders.
</list>
<sect1>Version 1.5
<p>Changes by Josip Rodin and Javier Fernández-Sanguino Peña.
<list>
<item>Added paragraphs related to BIND and some FIXMEs.
<!-- Removed this because I found no evidence for it in the diffs. // era
Rewrote style in order to make it more formal.
-->
</list>
<sect1>Version 1.4
    <p>
    <list>
    <item>Small setuid check paragraph
    <item>Various minor cleanups
        <item>Found out how to use <tt>sgml2txt -f</tt> for the txt version</item>
    </list>
<sect1>Version 1.3
    <p>
    <list>
    <item>Added a security update after installation paragraph
    <item>Added a proftpd paragraph
    <item>This time really wrote something about XDM, sorry for last time
    </list>
<sect1>Version 1.2
    <p>
    <list>
    <item>Lots of grammar corrections by James Treacy, new XDM paragraph
    </list>
<sect1>Version 1.1
    <p>
    <list>
    <item>Typo fixes, miscellaneous additions
    </list>
<sect1>Version 1.0
    <p>
    <list>
    <item>Initial release
    </list>



<sect>Credits
<p>
<list>
<item>Alexander Reelsen wrote the original document
<item>Javier Fernández-Sanguino added more info to the original doc
<item>Robert van der Meulen with the quota paragraphs and many good ideas
<item>Ethan Benson corrected the PAM paragraph and had some good ideas
<item>Dariusz Puchalak contributed some information to several chapters
<item>era eriksson smoothed out the language in a lot of places
<item>All the folks who encouraged me to write this HOWTO
<item>The whole Debian project
</list>



<chapt>Before you begin
<sect>What do you want this system for?
<p>Securing Debian is not very different from securing any other system;
in order to do it properly, you must first decide what do you intend to
do with it. After this, you will have to consider that the following
tasks need to be taken care of if you want a really secure system.
<p>You will find that this manual is written from the bottom up, that
is, you will read some information on tasks to do before, during and after
the installation of your Debian system is made. The tasks can also be
though of as:

<list>
<item>Decide which services you need and limit your system to those.
This includes deactivating/uninstalling unneeded services, and
adding firewall-like filters, or tcpwrappers.
<item>Limit users and permissions in your system.
<item>Harden offered services so that, in the event of a service compromise,
the impact to your system is minimized.
<item>Use appropiate tools to guarantee that unauthorised use is detected so
that you can take appropiate measures.
</list>

<chapt>Before and during the installation


<sect>Choose a BIOS password
<p>
Before you install any operating system on your computer, set up a BIOS
password and change the boot sequence to disable booting from a floppy.
Otherwise a cracker only needs physical access and
a boot disk to access your entire system.
<p>
Disabling booting without a password is even better. This can be very
effective if you run a server, because it is not rebooted very often.
The downside to this tactic is that rebooting requires human
intervention which can cause problems if the machine is not easily
accessible.


<sect>Choose an intelligent partition scheme
<p>
An intelligent partition scheme depends on the how the machine is used.
A good rule of thumb is to be fairly liberal with your partitions and to pay 
attention to the following factors:

<list>
<item>Any partition a user has write permissions to, should be a separate
partition, e.g. /home and /tmp. This reduces the risk of a user DoS by filling
up your "/" mount point and rendering the system unusable. (Note: this is not 
strictly true since their is a space reserved for root that a normal user
cannot fill)

<item>Any partition which can fluctuate, e.g. /var (especially /var/log)
should also be on a separate partition. On a
Debian system, you should create /var a little bit bigger than normal, because
downloaded packages (the apt cache) are stored in /var/apt/cache/archives.

<item>Any partition where you want to install non-distribution software
should be on a separate partition.
According to the File Hierarchy Standard, this is /opt or /usr/local. If
these are separate partitions, they will not be erased if you
(have to) reinstall Debian itself.

<item>From a security point of view, it makes sense to try to move
static data to its own partition, and then mount that partition
read-only. Better yet, put the data on read-only media. See below for an
elaboration.
</list>


<sect>Set a root password
<p>
Setting a good root password is the most basic requirement for having a secure
system.


<sect>Activate shadow passwords and MD5 passwords
<p>
At the end of the installation, you will be asked if shadow passwords should be
enabled. Answer yes to this question, so passwords will
be kept in the file /etc/shadow. Only the root user and the group shadow
have read access to this file, so no users will be able to grab a
copy of this file in order to run a password cracker against it. You can
switch between shadow passwords and normal passwords at any time by using
<tt>shadowconfig</tt>. Furthermore you are queried
during installation whether you want to use MD5 hashed passwords. This is
generally a very good idea since it allows longer passwords and better
encryption.


<sect>Run the minimum number of services required
<p>
You should not install services on your machine, which are not needed. Every
installed service introduces new, perhaps not obvious, but existent security
holes to your machine. If you still want to have some services but you use
these rarely, use the update-commands, e.g. 'update-inetd' for removing them
from the startup process.
<p>FIXME: This section needs a list of services,and what they do and the risk level
involved, as newbies don't have a clue.


<sect>Read the debian security mailinglists
<p>
It is never wrong to take a look at either the debian-security-announce
mailinglist, where advisories and fixes to released packages are announced
by the Debian security team or to debian-security@lists.debian.org, where
you can participate about discussing debian security related things.

<p>In order to receive important security update alerts, send an email to
<url name="debian-security-announce-request@lists.debian.org"
id="mailto:debian-security-announce-request@lists.debian.org"> with the
word "subscribe" in the subject line.  You can also subscribe to this
moderated email list via the web page at
<url name="http://www.debian.org/MailingLists/subscribe"
id="http://www.debian.org/MailingLists/subscribe">

<p>This mailing list has very low volume, and by subscribing to it you will
be immediately alerted of security updates for the Debian distribution.
This allows you to quickly download new packages with security bug
fixes, which is very important in maintaining a secure system.  (See
<ref id="update"> for details on how to do this.)




<chapt>After Installation

<sect>Set a LILO or GRUB password
<p>
Anybody can easily get a root-shell and change your passwords by entering
"&lt;name-of-your-bootimage&gt; init=/bin/sh" at the boot prompt. After 
changing the passwords and rebooting the system, the person 
has unlimited root-access and can do anything they want to the system. 
After this procedure you will not have root access to your system, 
as you do not know the root password.
<p>
To make sure that this can not happen, you should set a password for the 
boot loader. You can choose between a global password or a password for a 
certain image.
<p>
For LILO you need to edit the config file /etc/lilo.conf
and add a "password" and "restricted" line as in the example below.

<example>
image=/boot/2.2.14-vmlinuz
   label=Linux
   read-only
   password=hackme
   restricted
</example>

<p>
When done, rerun lilo.
Omitting the "restricted" line, causes lilo to always prompt for a
password, regardless of whether LILO was passed parameters. When adding a
password make sure that only root can read the lilo config file, i.e.
chmod 600 /etc/lilo.conf.
# is this Debian's default? if so say so or remove this , jfs
<p>
If you use GRUB instead of LILO, edit the file /boot/grub/menu.lst and add the
following two lines at the top. This will set a boot-password and also
boot the default entry after waiting 3 seconds:

<example>
timeout 3
password hackme
</example>


<sect>Disallow floppy booting
<p>
The default MBR in Debian before version 2.2 did not act as a
usual master boot record and left open a method to easily break
into a system:
<list>
<item>Press shift at boot time, and an MBR prompt appears
<item>Then press F, and your system will boot from floppy disk. This can
be used get root access to the system.
</list>

This behavior can be changed by entering:

<example>
lilo -b /dev/hda
</example>

Now LILO is put into the MBR. This can also be achieved by adding
"boot=/dev/hda" to lilo.conf. There is another solution which will
disable the MBR prompt completely:

<example>
install-mbr -i n /dev/hda
</example>

On the other hand, this "back door", of which many people are just not
aware, may save your skin as well if you run into deep trouble with your
installation out of whatever reasons.

# check whether this really is true as of 2.2 or was it 2.1?
INFO: The bootdisks as of Debian 2.2 do NOT install the mbr, but only LILO


<sect>Mounting partitions the right way
<p>
When mounting an ext2 partition you have several additional options you
apply to the mount call or the /etc/fstab. For instance, this my fstab
entry for the /tmp partition:

<example>/dev/hda7    /tmp    ext2    defaults,nosuid,noexec,nodev    0    2</example>

<p>
You see the difference in the options sections. The option <tt>nosuid</tt>
ignores the setuid and setgid bits completely, while <tt>noexec</tt>
forbids execution of any program on that mount point, and <tt>nodev</tt>,
ignores devices. This sounds great, but it
<list>
<item>only applies to ext2 filesystems
<item>can be circumvented easily
</list>
The <tt>noexec</tt> option prevents binaries from being executed directly, but 
is
easily circumvented:
<example>
alex@joker:/tmp# mount | grep tmp
/dev/hda7 on /tmp type ext2 (rw,noexec,nosuid,nodev)
alex@joker:/tmp# ./date
bash: ./date: Permission denied
alex@joker:/tmp# /lib/ld-linux.so.2 ./date
Sun Dec  3 17:49:23 CET 2000
</example>
<p>
However, many script kiddies have exploits which try to create and
execute files in /tmp. If they do not have a clue, they will fall into
this pit. In other words, if the user does not have a clue, he will not
fall into the pit of executing a trojaned binary /tmp, when he
incidentally adds /tmp into his PATH.

<p>
The following is a more thorough example. A note, though:
/var could be set noexec, but some software like Smartlist keeps
its programs in /var. The same applies to the nosuid option.
<example>
/dev/sda6       /usr            ext2    defaults,ro,nodev       0       2
/dev/sda12      /usr/share      ext2    defaults,ro,nodev,nosuid        0       2
/dev/sda7       /var            ext2    defaults,nodev,usrquota,grpquota          0       2
/dev/sda8       /tmp            ext2    defaults,nodev,nosuid,noexec,usrquota,grpquota    0       2
/dev/sda9       /var/tmp        ext2    defaults,nodev,nosuid,noexec,usrquota,grpquota    0       2
/dev/sda10      /var/log        ext2    defaults,nodev,nosuid,noexec    0       2
/dev/sda11      /var/account    ext2    defaults,nodev,nosuid,noexec    0       2
/dev/sda13      /home           ext2    rw,nosuid,nodev,exec,auto,nouser,async,usrquota,grpquota                0       2
/dev/fd0        /mnt/fd0        ext2    defaults,users,nodev,nosuid,noexec      0       0
/dev/fd0        /mnt/floppy     vfat    defaults,users,nodev.nosuid,noexec      0       0
/dev/hda        /mnt/cdrom      iso9660 ro,users,nodev.nosuid,noexec            0       0
</example>

<sect id="update">Execute a security update
<p>
As soon as new security bugs are revealed in packages, debian maintainers and
upstream authors generally patch them within days or even hours. After the bug
is fixed, a new package is provided on <url name="http://security.debian.org"
id="http://security.debian.org">. Put the following line in your sources.list
and you will get security updates automatically, whenever you update your
system.

<example>
deb http://security.debian.org/debian-security stable/updates main contrib non-free
</example>

<p>
Most people, who don't live in a country which prohibits importing
or using strong cryptography, should add this line as well:

<example>
deb http://security.debian.org/debian-non-US stable/non-US main contrib non-free
</example>

<p>
If you want, you can add the deb-src lines to apt as well. See the apt manpage
for further details.

<p>FIXME: Add info on how the signature of packages is done so that this
can be done automatically through a cron job (big warning: DNS spoofing).

<sect>PAM - Pluggable Authentication Modules
<p>PAM allows system administrators to choose how applications authenticate
users. Note that PAM can do nothing unless an application is compiled with
support for PAM. Most of the applications that are shipped with Debian 2.2
have this support built in. Furthermore Debian did not have PAM support
before 2.2. For each application there is a configuration file in
<file>/etc/pam.d/</file>.

<p>
PAM offers you the possibility to go through several authentication steps at
once, without the user's knowledge. You could authenticate against a Berkeley
database and against the normal passwd file,
and the user only logs in if he authenticates correct in both.
You can restrict a lot with PAM, just as you can open your system
doors very wide. So be careful. A typical configuration line has a control
field as its second element. 
<!-- Second in mine (old Debian v2.0 though), check this! (TODO) (era) -->
Generally it should be set to "requisite", which
returns a login failure if one module fails.
<!-- Lots of fields in mine are "required", please elaborate? (TODO) (era) -->

<p>
The first thing I like to do, is to add MD5 support to PAM applications,
since this helps protects against dictionary cracks. The following two
lines should be added to all files in /etc/pam.d/ that grant access to the 
machine, like <tt>login</tt> and <tt>ssh</tt>.

<example>
# Be sure to install libpam-cracklib first or you will not be able to log in
password   required     pam_cracklib.so retry=3 minlen=12 difok=3
password   required     pam_unix.so use_authtok nullok md5
</example>

So, what does this myth do? The first line loads the cracklib PAM module, which
provides password strength-checking, prompts for a new password with a minimum
length of 12 characters, a difference of at least 3 characters from the
old password, and allows 3 retries. The second line introduces the standard
authentication module with MD5 passwords and allows a zero length password.
The use_authtok directive is necessary to hand over the password from the 
previous module.

<p>
To make sure that the user root can only log into the system from local
terminals, the following line should be enabled in /etc/pam.d/login:

<example>
auth     requisite  pam_securetty.so
</example>

Then you should add the terminals from which the user root can log into the
system into  the file /etc/security/access.conf.
Last but not least the following line should be enabled if you want to set
up user limits.

<example>
session  required   pam_limits.so
</example>

This restricts the system resources that users are allowed.
For example, you could restrict the number of concurrent logins users may have.

<p>
Now edit the file /etc/pam.d/passwd and change the first line. You should add
the option "md5" to use MD5 passwords, change the minimum length of password
from 4 to 6 (or more) and set a maximum length, if you desire. The resulting
line will look something like:

<example>
password   required   pam_unix.so nullok obscure min=6 max=11 md5
</example>

If we want to protect su, so that only some people can use it to become root on
your system, we need to add a new group "wheel" to your system (that
is the cleanest way, since no file has such a group permission yet). Add root
and the other users that should be able to "su" to the root user to this group.
Then add the following line to /etc/pam.d/su:

<example>
auth        requisite   pam_wheel.so group=wheel debug
</example>

This makes sure that only people from the group wheel can use <prgn>su</prgn> to become
root. Other users will not be able to become root. In fact they will get a
denied message if they try to become root.

<p>
If you want only certain users to authenticate at a PAM service, this is
quite easy to achieve by using files, where the users, which are allowed
to login (or not), are stored. Imagine you only want to allow user 'ref'
to login via ssh. So you put him into /etc/sshusers-allowed and write the
following into /etc/pam.d/ssh

<example>
auth        required    pam_listfile.so item=user sense=allow file=/etc/sshusers-allowed onerr=fail
</example>

<p>Last, but not least, create /etc/pam.d/other and enter the following lines:

<example>
auth     required       pam_securetty.so
auth     required       pam_unix_auth.so
auth     required       pam_warn.so
auth     required       pam_deny.so
account  required       pam_unix_acct.so
account  required       pam_warn.so
account  required       pam_deny.so
password required       pam_unix_passwd.so
password required       pam_warn.so
password required       pam_deny.so
session  required       pam_unix_session.so
session  required       pam_warn.so
session  required       pam_deny.so
</example>

These lines will provide a good default configuration for all applications
that support PAM (access is denied per default).


<sect>The limits.conf file
<p>
You should really take a serious look into this file. Here you can define
user resource limits. If you use PAM, this file is not valid and you should use
<file>/etc/security/limits.conf</file> instead.
<p>FIXME: Get a good limits.conf up here


<sect>Customize /etc/inetd.conf
<p>
You should stop all unneeded services on your system, like echo. charges, 
discard, daytime, time, talk, ntalk and the HIGHLY insecure considered r-services
(rsh, rlogin and rcp. Use ssh instead). After disabling those, you should check 
if you really need the inetd daemon.  Many people prefer to use daemons instead 
of calling services via inetd. Denial of Service possibilities exist against
inetd, which can increase the machine's load tremendously. If you still want to
run some kind of inetd service, switch to a more configurable inet daemon like
xinetd or rlinetd.
<p>
You can disable services by editing the inetd.conf directly, but Debian provides an
alternative to this: <tt>update-inetd</tt>. You could remove the telnet
daemon by executing this commands to change the config file and
to restart the daemon (in this case the telnet service is disabled):

<example>
/usr/sbin/update-inetd --disable telnet
</example>
<!-- # /etc/init.d/inetd restart Not needed since the manpage says update-inetd
sends a SIGHUP, commented out as suggested by Dariusz Puchalak -->

<p>If you do want services listening, but do not want to have them
listen on all IP addresses of your host, you might want to use some
undocumented feature on inetd. <!-- FIXME write the information sent
by Alexander to the debian-security mailing list -->. Or use an
alternate inetd daemon like <prgn>xinetd</prgn>.

<sect>Edit /etc/login.defs
<p>
The next step is to edit the basic configuration and action upon user login.

<example>
FAIL_DELAY          10
</example>

This variable should be set to a higher value to make it harder using the
terminal to log in using brute force style. If a wrong password is typed in,
he has to wait for 10 seconds to get a new login prompt, what is quite time
consuming when you test passwords. Pay attention to the fact, that this
setting is useless if using program other than getty, 
such as mingetty for example.

<example>
FAILLOG_ENAB        yes
</example>

If you enable this variable, failed logins will be logged. It is important to
keep track of them to catch someone who tries a brute force attack.

<example>
LOG_UNKFAIL_ENAB    yes
</example>

If you set the variable "FAILLOG_ENAB" to yes, then you should also set 
this variable to yes. This will record unknown usernames 
if the login failed. If you
do this, make sure the logs have to the proper permissions (640 for example,
with an appropriate group setting such as adm), because users often
accidentally enter their password as the username and you do not want others
to see it.

<example>
SYSLOG_SU_ENAB      yes
</example>

This one enables logging of <tt>su</tt> attempts to syslog. Quite important on 
serious machines but note that this can create privacy issues as well.

<example>
SYSLOG_SG_ENAB      yes
</example>

The same as SYSLOG_SU_ENAB but applies to the <tt>sg</tt> call.

<example>
MD5_CRYPT_ENAB      yes
</example>

As stated above, MD5 sum passwords greatly reduce the problem of
dictionary attacks, because it is very difficult to perform a crack
against MD5 hashed passwords. At least it is hard to do successfully.
If you are using slink, read the docs about MD5 before enabling this option.
Otherwise this is set in PAM.

<example>
PASS_MAX_LEN        50
</example>

If MD5 passwords are activated in your PAM configuration, then this variable 
should be set to the same value as used there.


<sect>Editing /etc/ftpusers
<p>
This file contains a list of users who are not allowed to log into the host
using ftp. Only use this file if you really want to allow ftp (which is not
recommended in general, because it uses cleartext passwords). If your daemon
supports PAM, you can also use that to allow and deny users for
certain services.


<sect>Using tcpwrappers
<p>
TCP wrappers were developed when there were no real packet filters
available and access control was needed. The TCP wrappers allow
you to allow or deny a service for a host or a domain and define a default
allow or deny rule.
If you want more informations look into the manpage hosts_access(5).

<p>
Now, here comes a small trick, and probably the smallest intrusion
detection system available. In general, you should have a decent firewall
policy as a first line, and tcp wrappers as the second line of defense.
One little trick is to set up a SPAWN <footnote>beware of the case here since
<em>spawn</em> will not work</footnote> command in /etc/hosts.deny that
sends mail to root whenever a denied service triggers wrappers:

<example>
ALL: ALL: SPAWN ( \
  echo -e "\n\
  TCP Wrappers\: Connection refused\n\
  By\: $(uname -n)\n\
  Process\: %d (pid %p)\n\
  User\: %u\n\
  Host\: %c\n\
  Date\: $(date)\n\
" | /bin/mail -s "Connection to %d blocked" root)
</example>

<em>Beware</em>: The above printed example can easily be DoSed by doing
lots of connections in a short period of time. Many emails mean a lot of
file I/O by sending only a few packets.

<!--
# Could this example be more interesting? 
# It also relates to the next section (jfs)
#
# era: cf hosts_access(5) manual page,
# and why are you not using logger(1) here? (FIXME?)
#
#<example>
#ALL: ALL: SPAWN ( \
#  /usr/local/sbin/send_syslog %u %c %d )
#</example>
#  With send_syslog as:
##!/usr/bin/perl -w
#
#use Sys::Syslog qw(:DEFAULT setlogsock);
#
#$user=shift(@ARGV) || 'unkown';
#$host=shift(@ARGV) || 'unkown';
#$service=shift(@ARGV) || 'unkown';
#setlogsock('unix');
#openlog("alert",'', 'user');
#syslog('warning', 'Connection from %s at %s to %s blocked.', ($user, $host, $service) );
#closelog();
#
#exit 0;
-->

<sect>The importance of logs and alerts
<p>How log and alerts are treated is an important issue in a secure system.
It is easily to see that, even if the system is perfectly configured and,
supposedly, 99% secure. If the 1% comes to happen, and there are no security
measures in place to, first, detect this and, second, raise alarms, the system
is not secure at all.

<sect1>Configuring where alerts are sent
<p>Debian comes with a standard syslog configuration (in /etc/syslog.conf)
that logs messages to the appropiate files depending on the system facility.
You should be familiar with this; have a look at the
<file>syslog.conf</file> file and the documentation if not.
If you intend to maintain a secure system you should be wary of where log
messages are sent so they do not go unnoticed.
<p>For example, sending messages to the console also is an interesting setup
useful for many production-level systems. But for many such systems it
is important to also add a new machine that will serve as loghost 
(i.e. it receives logs from all other systems). 

<p>Root's mail should be considered also, many security controls (like snort) send
alerts to root's mailbox. This mailbox usually points to the first user created in
the system (check /etc/aliases). Take care to send root's mail to some place where
it will be read (either locally or remotely).

<p>
There are other role accounts and aliases on your system.
On a small system, it's probably simplest to make sure that
all such aliases point to the root account, and that mail to
root is forwarded to the system administrator's personal mailbox.

<!--
# Note: it would be interesting to tell how a Debian system can send SNMP traps
# related to security problems, jfs
# check: snmptraglogd, snmp and snmpd
-->

<sect1>Using a loghost
<p>
A loghost is a host which collects syslog data remotely over the network. If
one of your machines is cracked, the intruder is not able to cover his tracks,
unless he hacks the loghost as well. 
So, the loghost should be especially secure.
Making a machine a loghost is simple. Just start the
syslogd with 'syslogd -r' and a new loghost is born. In order to do this
permanently in Debian, edit <file>/etc/init.d/sysklogd</file> and change
the line 
<example>
SYSLOGD=""
</example>
to 
<example>
SYSLOGD="-r"
</example>

Next, configure the other machines to send data to the loghost. 
Add an entry like the
following to <file>/etc/syslog.conf</file>:

<example>
facility.level            @your_loghost
</example>

See the documentation for what to use in place of <em>facility</em> and
<em>level</em> (they should not be entered verbatim like this).
If you want to log everything remotely, just write:

<example>
*.*                       @your_loghost
</example>

into your syslog.conf. Logging remotely as well as locally is the best
solution (the attacker might presume to have covered his tracks after 
deleting the local log files). See the syslog(3),
syslogd(8) and syslog.conf(5) manpages for additional information.


<sect1>Logfile permissions
<p>
It is not only important to decide how alerts are used, but also who
has access to them, i.e. can read or modify the logfiles (if not
using a remote loghost).
Security alerts which the attacker can change or disable are not much worth
in the event of an intrusion.

<!-- # It should be explained why after installation this is not
# already done, jfs -->
<p>
Some logfile permissions are not perfect after the installation. First
<file>/var/log/lastlog</file> and <file>/var/log/faillog</file> do not
need to be readable by normal users. In the lastlog file you can see
who logged recently, and in the faillog you see a summary of failed
logins. The author recommends chmod'ing both to 660. Take a brief look
over your log files and decide very carefully which logfiles you make
readable/writeable for a user with another UID than 0 and a group
other than 'adm' or 'root'.

<p>
I want to emphasize that the apache logfile permissions are really screwed due
to the fact that the apache user owns the apache log files. If a user gets a
shell with a back door in apache, they can easily remove the logfiles.
<!--
# This is quite personal, IMHO, since this is due to the fact that 
# root priviledges are dropped on startup. I prefer an attacker to erase
# a service's logfiles than to erase all of my system's logs. Anyhow, this
# can be improved by changing user permissions after rotation
-->

<sect>Setting up setuid check
<p>
Debian provides a cron job that runs daily in <file>/etc/cron.daily/standard</file>
this cron job will run the <prgn>/usr/sbin/checksecurity</prgn> script
that will store information of this changes.

<!-- FIXME What is the defaul for this in cron package? jfs -->

<p>In order for this check to be made you must set
 <tt>CHECKSECURITY_DISABLE="FALSE"</tt> in
 <file>/etc/checksecurity.conf</file>. Note, this is the default, so
 unless you have changed something, this option will already be set to
 "FALSE".

<!-- # Is this sent to root? jfs -->

<sect>Using su
<p>
If you really need to become the super user on your system, e.g. for installing
packages or adding users, you can use the command <prgn>su</prgn> to change your
identity. You should try to avoid any login as user root and instead use su.
Actually, the best solution is to remove su and switch to <prgn>sudo</prgn>, as it has
more features than su. However, su is more common as is used on many other 
Unixes.


<sect>Using sudo
<p>
<prgn>sudo</prgn> allows the user to execute defined commands under
another user's identity, even as root. If the user is added to
<file>/etc/sudoers</file> and authenticates himself correctly, he is
able to run commands which have been defined in
<file>/etc/sudoers</file>. Violations, such as incorrect passwords or
trying to run a program you don't have permission for, are logged and
mailed to root.


<sect id="chroot">Using chroot
<p>
<prgn>chroot</prgn> is one of the most powerful possibilities to restrict a daemon or a
user or another service. Just imagine a jail around your target, which the
target cannot escape from (normally, but there are still a lot of conditions
that allow one to escape out of such a jail). If you do not trust a user, you 
can create a change root environment for him. This can use quite a bit of disk 
space as you need to copy all needed executables, as well as libraries, into the 
jail. Even if the user does something malicious, the scope of the damage is limited 
to the jail.  A good example for this case is, if you do not authenticate against
/etc/passwd but LDAP or MySQL instead. So your ftp-daemon needs a binary and
perhaps a few libraries. A chrooted environment would be an excellent security
improvement, if a new exploit is known for this ftp-daemon. It is then only
possible to exploit the UID of the ftp-daemon-user and nothing else. Of
course, many other daemons could benefit from this as well.
<p>
<!-- FIXME: this information should be checked wihen woody gets released -->
As an additional note, the Debian default BIND (the name-service) is not
shipped chrooted per default, in fact no daemons come chrooted. This
might change in the woody (3.0) release.


<sect>Configuring some kernel features
<p>
<tt>FIXME - Content missing</tt>
<p>Many features of the kernel can be modified while running by echoing something
into the /proc file system or by using sysctl. By entering <tt>sysctl -A</tt>
you can see what you can configure and what the options are. Only in rare 
cases do you need to edit something here, but you can increase security that 
way as well.

<example>
net/ipv4/icmp_echo_ignore_broadcasts = 1
</example>

This is a 'windows emulator' because it acts like windows on broadcast
ping if this one is set to 1.
<!-- Which means what exactly? Simply that it ignores broadcasts? FIXME -->
Otherwise, it does nothing.

<example>
net/ipv4/icmp_echo_ignore_all = 0
</example>

If you don't want to block ICMP on your firewall, enable this.
<!--
Does this mean, if you want to block ICMP but not in your firewall? FIXME
-->

<example>
net/ipv4/tcp_syncookies = 1
</example>

This options is a double-edged sword. On the one side it protects yourself
against syn flooding, on the other sites it violates RFCs. This option is
quite dump as it floods the other side like it floods you, so the other
side is also busy. If you want to change this option you also can change
it in <tt>/etc/network/options</tt> by setting <tt>syncookies=yes</tt>.

<example>
/proc/sys/net/ipv4/conf/all/log_martians = 1
</example>

Packets with impossible addresses (due to wrong routes) on your network get
logged.

<p>
Here is an example to set up this and other useful stuff. You should add this
information to a script in <file>/etc/network/interface-secure</file> (the name
is given as an example) and call it from <file>/etc/network/interfaces</file>
like this:

<example>
auto eth0
iface eth0 inet static
        address xxx.xxx.xxx.xxx
        netmask 255.255.255.xxx
        broadcast xxx.xxx.xxx.xxx
        gateway xxx.xxx.xxx.xxx
        pre-up /etc/network/interface-secure

</example>

<example>
# Script-name: /etc/network/interface-secure
# Modifies some default behaviour in order to secure against 
# some TCP/IP spoofing & attacks
#
# Contributed by Dariusz Puchalak  
#
echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts 
                                           # broadcast echo protection enabled
echo 0 > /proc/sys/net/ipv4/ip_forward     # ip forwarding disabled
echo 1 > /proc/sys/net/ipv4/tcp_syncookies # TCP syn cookie protection enabled
echo 1 >/proc/sys/net/ipv4/conf/all/log_martians 
                                           # Log packets with impossible addresses
                         # but be careful with this on heavy loaded web servers
echo 1 > /proc/sys/net/ipv4/ip_always_defrag 
                                           #  defragging protection always enabled
echo 1 > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses 
                                           # bad error message protection enabled

# now ip spoffing protection
for f in /proc/sys/net/ipv4/conf/*/rp_filter; do
        echo 1 > $f
done

# and eventually some more things:
# Disable ICMP Redirect Acceptance
for f in /proc/sys/net/ipv4/conf/*/accept_redirects; do
        echo 0 > $f
done

for f in /proc/sys/net/ipv4/conf/*/send_redirects; do
      echo 0 > $f
done

# Disable Source Routed Packets
for f in /proc/sys/net/ipv4/conf/*/accept_source_route; do
        echo 0 > $f
done

# Log Spoofed Packets, Source Routed Packets, Redirect Packets
for f in /proc/sys/net/ipv4/conf/*/log_martians; do
        echo 1 > $f
done
</example>

<p>Some users might want to set up firewalling rules in this script
as well. However, check
what firewalling programs/features you might be using since they can tweak other files
and change the definitions you add on startup. For example, firewalk, for one, will use
another configuration file for firewall setup.

<p>FIXME: I remember a thread about this in debian-security, should add the information
posted there here (jfs).



<sect>Do not use software depending on svgalib
<p>
SVGAlib is very nice for console lovers like me, but in the past it has been
proven several times, that it is very insecure. Exploits against zgv were
released, and it was simple to become root. Try to prevent using SVGAlib
programs wherever possible.
<!-- TODO: move this to policy section if there ever is one? -->


<sect>Secure file transfers
<p>
Copying files in a secure manner from a host to another can be achieved by
using 'scp' which is included in the ssh package. It works like rcp but is
encrypted completely, so the bad guys cannot even find out WHAT you copy.


<sect>Using quotas
<p>
Having a good quota policy is important, as it keeps users from filling
up the hard disk(s).
<p>
You can use two different quota systems - user quota and group quota. As you
probably figured out, user quota limits the amount of space a user can take
up, group quota does the equivalent for groups. Keep this in mind when you're
working out quota sizes.

<p>There are a few important points to think about in setting up a quota
system:

<list>
<item>Keep the quotas small enough, so users do not eat up your disk space
<item>Keep the quotas big enough, so users do not complain or their mail quota
keeps them from accepting mail over a longer period
<item>Use quotas on all user-writable areas, on /home as well as on /tmp.
</list>
<p>
Every partition/directory users have full write access should be quota enabled.
Find out those partitions and directories and calculate a workable quota
size, which combines usability and security.

<p>
So, now you want to use quotas. First of all you need to check whether you
enabled quota support in your kernel. If not, you will need to recompile it.
<!-- TODO: how to check for quota support? What to tweak when recompiling? -->
After this, control whether the package 'quota' is installed. If not you will
need this one as well.

<p>
Enabling quota for the respective filesystems is as easy as modifying the
<tt>defaults</tt> setting to <tt>defaults,usrquota</tt> in your <file>/etc/fstab</file>
file. If you need group quota, substitute <tt>usrquota</tt> to <tt>grpquota</tt>. 
You can also use them both.  Then create empty quota.user and quota.group files in 
the roots of the filesystems you want to use quotas on (e.g. 
<tt>touch /home/quota.user /home/quota.group</tt> for a /home filesystem).

<p>
Restart quota by doing <tt>/etc/init.d/quota stop;/etc/init.d/quota
start</tt>. Now quota should be running, and quota sizes can be set.

<p>
Editing quotas for a specific user (say 'ref') can be done by
<tt>edquota -u ref</tt>. Group quotas can be modified with<tt>edquota -g
&lt;group&gt;</tt>. Then set the soft and hard quota and/or inode quotas 
as needed.

<p>
For more information about quotas, read the quota man page, and the quota
mini-howto(<file>/usr/share/doc/HOWTO/en-html/mini/Quota.html</file>).

<!-- Duplicated section "Logfile permissions" removed (era) -->
<!-- Duplicated section "Setting up setuid check" removed (era) -->

<sect>chattr/lsattr
<p>
These two commands are very useful, but they only work for the ext2 filesystem.
With 'lsattr' you can list the attributes of a file and with 'chattr' you can
change them. Note that attributes are not the same thing as permissions.
There are many attributes, but only the most important for increasing security 
are mentioned here. There are two flags which can only be set by the superuser.

<p>
First there is the 'a' flag. If set on a file, this file can only be opened
for appending. This attribute is useful for some of the files in /var/log/,
though you should consider they get moved sometimes due to the log rotation
scripts.

<p>
The second flag is the 'i' flag, short for immutable. If set on a file, it
can neither be modified nor deleted or renamed and no link be created to it.
If you do not want users to look into your config files you could set this
flag and remove readability. Furthermore it can give you a little bit more
security against intruders, because the cracker might be confused by not being
able to remove a file. Nevertheless, you should never assume that the cracker
is blind. After all, he got into your system.

<sect>Your filesystem integrity
<p>
Are you sure /bin/login on your hard drive is still the binary you installed
there some months ago? What if it is a hacked version, which stores the
entered password in a hidden file or mails it in cleartext version all over
the internet?

<p>
The only method to have some kind of protection is to check your files every
day/hour/month (I prefer daily) by comparing the actual and the old md5sum of
this file. Two files cannot have the same md5sum, so you're on the secure site
here, except if someone hacked the algorithm to create md5sums on that machine,
what is, well, pathological. You really should consider this auditing of your
binaries as very important, since it is an easy way to recognize changes at
your binaries. Common tools used for this are sXid, <package>AIDE</package> (Advanced Intrusion
Detection Environment), <package>TripWire</package> (non-free; the new version will be GPL), <package>integrit</package> and <package>samhain</package>.

<p>Installing <tt>debsums</tt> will help to check the filesystem integrity,
by comparing the md5sums of everyfile against the md5sums used in the
Debian package archive. But beware, those files can easily be changed.

<p>
Furthermore you can replace <package>locate</package> with <package>slocate</package>. slocate
is a security enhanced version of GNU locate. When using slocate, the user 
only sees the files he really has access to and you can exclude any files or 
directories on the system.


<chapt>Securing services running on your system

<sect>Securing ssh
<p>
If you are still running telnet instead of ssh, you should take a break from 
this manual and change this. Ssh should be used for all remote logins
instead of telnet. In an age where it is easy to sniff internet traffic
and get cleartext passwords, you should use only protocols which
use cryptography. So, perform an <tt>apt-get install ssh</tt> on your system 
now.
Encourage all the users on your system to use ssh instead of telnet, or
even better, uninstall telnet. In addition you should avoid logging
into the system using ssh as root and use alternative methods to become root
instead, like <tt>su</tt> or <tt>sudo</tt>. Finally, the sshd_config file,
in /etc/ssh, should be modified to increase security as well:

<tt>PermitRootLogin No</tt>

Try not to permit Root Login wherever possible. If anyone wants to become root
via ssh, now two logins are needed and the root password cannot be brute
forced via SSH.

<tt>Listen 666</tt>

Change the listen port, so the intruder cannot be completely sure whether a
sshd daemon runs.

<tt>PermitEmptyPasswords no</tt>

Empty passwords make a mockery of system security.

<tt>AllowUsers alex ref</tt>

Allow only certain users to have access via ssh to this machine.

<tt>AllowGroups wheel admin</tt>

Allow only certain group members to have access via ssh to this machine.
AllowGroups and AllowUsers have equivalent directives for denying access to a
machine. Not surprisingly they are called "DenyUsers" and "DenyGroups".

<tt>PasswordAuthentication yes</tt>

<p>
It is completely your choice what you want to do. It is more secure
only to allow access to machine from users with ssh-keys placed in the
~/.ssh/authorized_keys file. If you want so, set this one to "no".
<!-- FIXME: what does this mean? Is it "more secure" to set this to
"no"? (era) --> <!-- jfs, IMHO yes since you place the key of the
incoming host in your server and the authentication is done against
the key -->

<p>
As a final note be aware, that these directives are from a OpenSSH
configuration file. Right now, there are three commonly used SSH daemons,
ssh1, ssh2 and OpenSSH by the OpenBSD people. Ssh1 was the first ssh daemon
available and it is still the most commonly used (there are rumors that
there is even a windows port). Ssh2 has many advantages over ssh1 except it
is released under an non-opensource license. OpenSSH is completely free ssh
daemon, which supports both ssh1 and ssh2. OpenSSH is the version installed
on Debian when the package 'ssh' is chosen.

<sect>Securing FTP
<p>
If you really have to use FTP (without wrapping it inside a SSL tunnel),
you should chroot ftp into the ftp users' home directory, so that the user is
unable to see anything else than their own directory. Otherwise they could
traverse your root filesystem just like if they had a shell. You can add
the following line in your proftpd.conf in your global section to enable this
chroot feature:
<example>
DefaultRoot ~
</example>
Restart proftpd by <tt>/etc/init.d/proftpd restart</tt> and check whether
you can escape from your homedir now.

<P>FIXME: Add info regarding Proftp DoS attacks using ../../..

<sect>Securing access to X
<p>
Today, X terminals are used by more and more companies where one server
is needed for a lot of workstations. This can be dangerous, because you need
to allow the file server to connect to the the clients (X server from the X
point of view. X switches the definition of client and server).
If you follow the (very bad) suggestion of many docs, you type
<tt>xhost +</tt> on your machine. This allows any X client to connect to your
system. For slightly better security, you can use the command
<tt>xhost +hostname</tt> instead to only allow access from specific hosts.

<p>
A much more secure solution, though, is to use ssh to tunnel
X and encrypt the whole session. This is done automatically when you ssh
to another machine. This has to be enabled in /etc/ssh/ssh_config by
setting <tt>X11Forwarding</tt> to <tt>yes</tt>. In times of SSH, you should
drop the xhost based access control completely.
<!-- TODO: check. The text said "has to be disabled" [sic] -->

<p>
For best security, if you do not need X access from other machines, is to
switch off the binding on tcp port 6000 simply by typing:

<tt>startx -- -nolisten tcp</tt>

<p>NOTE: This is the default behavior in Xfree 4.0.

<p>FIXME: Add info on thread of debian-security on how to change config files
of XFree 3.3.6 to do this

<sect1>Check your display manager
<p>
If you only want to have a display manager installed for local usage
(having a nice graphical login, that is), make sure the XDMCP (X Display Manager
Control Protocol) stuff is disabled. In XDM you can do this with this line
in <tt>/etc/X11/xdm/xdm-config</tt>:

<example>
DisplayManager.requestPort:     0
</example>

Normally, all display managers are configured not to start XDMCP services
per default in Debian.


<sect>The lpd and lprng issue
<p>Imagine, you arrive at work, and the printer is spitting out endless amounts of
paper because someone is DoSing your line printer daemon. Nasty, isn't it?
So keep your printer servers specially secure, this means you need to configure
your printer service so it will only allow connections from a set of servers.
In order to do this, add the servers you want to allow printing to your 
<file>/etc/hosts.lpd</file>.

<p>However, even if you do this, the lpr daemon accepts incoming connections
on port 515 of any interface. You should consider firewalling connections
from networks/hosts which are not allowed printing (the lpr daemon cannot be
limited to listen only on a given IP address).


<p>If you are using a printer in your system, but only locally, you do
will not want to share this service over a network. You can consider
using other printing systems, like the one provied by
<url name="PDQ" id="http://feynman.tam.uiuc.edu/pdq"> 
which is based on user permissions of the <file>/dev/lp0</file> device.


<P>FIXME: Add more content (the article on <url name="Amateur Fortress Building" id="http://www.rootprompt.org"> provides
some very interesting views).
<p>FIXME: Check if PDG is available in Debian and if so, suggest this as printing
system.
<p>FIXME: Check if Farmer/Wietse has a replacement for printer daemon and if
it's available in Debian.

<sect>Securing the mail daemon
<p>If your server is not a mailing system, you do not really need
to have a mail daemon listening for incoming connections, but you might
want local mail delivered in order, for example, to receive mail for the root user
from any alert systems you have in place.

<p>To do this in a Debian system, you will have to remove the smtp
daemon from inetd:
<example>
$ update-inetd --disable smtp
</example>
<p>and configure the mailer daemon to only listen on the loopback interface.
In exim (the default MTA) you can do this by editing the file
<file>/etc/exim.conf</file>
and adding the following line:

<example>
local_interfaces = "127.0.0.1"
</example>

<p>Restart both daemons (inetd and exim) and you will have exim listening 
on the 127.0.0.1:25 socket only. Be careful, and first disable inetd, 
otherwise, exim will not start since the inetd daemon is already
handling incoming connections.

<p>If you only want local mail, this approach is better than tcp-wrapping 
the mailer daemon or adding firewalling rules to limit anybody accessing it.
However, if you do need it to listen on other interfaces, you might consider
launching it from inetd and adding a tcp wrapper so incoming connections
are checked against <file>/etc/hosts.allow</file> and <file>/etc/hosts.deny</file>.
Also, you will be aware of when an unathorised access is attempted against
your mailer daemon, if you set up proper logging for any of the methods above.


<sect>Receiving mail securely
<p>
Reading/receiving mail is the most common cleartext protocol. If you use either
POP3 or IMAP to get your mail, you send your cleartext password across the net,
so almost anyone can read your mail from now on. Instead, use SSL (Secure
Sockets Layer) to receive your mail. The other alternative is ssh, if you have
a shell account on the box which acts as your POP or IMAP server.
Here is a basic fetchmailrc to demonstrate this:

<example>
poll my-imap-mailserver.org via "localhost"
  with proto IMAP port 1236
      user "ref" there with password "hackme" is alex here warnings 3600
    folders
      .Mail/debian
    preconnect 'ssh -f -P -C -L 1236:my-imap-mailserver.org:143 -l ref
     my-imap-mailserver.org sleep 15 &lt;/dev/null &gt; /dev/null'
</example>

The preconnect is the important line. It fires up a ssh session and
creates the necessary tunnel, which automatically forwards connections to
localhost port 1236 to the IMAP mail server, but encrypted. Another
possibility would be to use fetchmail with the ssl feature.
<p>
If you want to provide encrypted mail services like POP and IMAP,
<tt>apt-get install stunnel</tt> and start your daemons this way:
<example>
stunnel -p /etc/ssl/certs/stunnel.pem -d pop3s -l /usr/sbin/popd
</example>


This command wraps the provided daemon (-l) to the port (-d) and uses the
specified ssl cert (-p).



<sect>Securing BIND
<p>
If a non-root user runs BIND, then BIND cannot detect new
interfaces automatically. For example, if you stick a PCMCIA card into your
laptop.
Check the README.Debian file in your named documentation directory for more
information about this issue.
There have been many recent security problems concerning BIND, so switching
the user is useful when possible.
<p>
To run BIND under a different user, first create a separate user and group for
it (it is <em>not</em> a good idea to use nobody or nogroup for 
every service not running as root). In this example, the user and group 
<tt>named</tt> will be used. You can do this by entering:
<example>
addgroup named
adduser --system --ingroup named named
</example>

<p>Now edit <tt>/etc/init.d/bind</tt> with your favorite editor and change the
line beginning with
<example>
start-stop-daemon --start
</example>

to

<example>
start-stop-daemon --start --quiet --exec /usr/sbin/named -- -g named -u named
</example>

<p>
All you need to do now is to restart bind via '/etc/init.d/bind restart',
and then check your syslog for two entries like this:
<p>
<example>
Sep  4 15:11:08 nexus named[13439]: group = named
Sep  4 15:11:08 nexus named[13439]: user = named
</example>
<p>
Voilá! Your named now does not run as root. To achieve maximum BIND
security, now build a chroot jail (see <ref id="chroot">) around your daemon.


<p>If you want to read more information on why BIND does not run as non-root
user in Debian systems, please check the Bug Tracking System regarding Bind,
specifically <url name="Bug #50013: bind should not run as root" id="http://bugs.debian.org/50013">.

<p>FIXME (jfs): I'm not sure about this, shouldn't bind files be
chown'ed to the groups created? Some files might need rw permissions
in order for bind to work correctly, for example: if the name server
is being used as a cache the cache files need to be written on hard
disk. Also, if the DNS server is secondary, it might need to transfer
zones from the primary and write them on hard disk too. This should be
clarified.


<sect>Other network services
<p>
You should try to avoid any network service which sends and receives
passwords in cleartext over a net like FTP/Telnet/NIS/RPC. The author
recommends the use of ssh instead of telnet and ftp to everybody.

Keep in mind that migrating from telnet to ssh, but using other cleartext
protocols does not increase your security in ANY way! Best
would be to remove ftp, telnet, pop, imap, http and to supersede them
with their respective crypted services.
You should consider moving from this services to their SSL versions, ftp-ssl,
telnet-ssl, pop-ssl, https ...

Most of these above listed hints apply to every Unix system (you will find
them if reading any other hardening-related document related to Linux and
other Unixes).

<sect1>Disabling NIS
<p>You should not use NIS, the Network Information Service, if it is
possible, because it allows password sharing. This can be highly insecure if
your setup is broken.
<p>If you need password sharing between machines, you might want to consider
using an LDAP server and configure PAM on your system in order to contact
the LDAP server for user authentication.

<p>FIXME (jfs): Add info on howto setup this in Debian

<sect1 id="rpc">Disabling RPC services
Last, but not least, disable RPC wherever possible. 
<!-- TODO: explain when RPC is necessary. -->
Many security holes for this service are known and can be easily exploited.
On the other hand NFS services are quite
important in some networks, so find a balance of security and usability in a
network. Most of the DDoS (distributed denial of service) attacks use rpc
exploits to get into the system and act as a so called agent/handler.

Disabling portmap is quite simple. There are different methods. The simplest
one in a Debian system is to do <tt>update-rc.d portmap remove</tt>.

This in fact removes every symlink relating to portmap in
<tt>/etc/rc${runlevel}.d/</tt>, what could also be done manually.
Another possibility is to <tt>chmod 644 /etc/init.d/portmap</tt>, but that
gives an error message when booting. You can also strip off the
<tt>start-stop-daemon</tt> part in /etc/init.d/portmap shell script.



<chapt>Before the compromise


<sect>Setup Intrusion Detection.
<p>FIXME: Write about this.
<p>Debian includes some tools for Intrusion Detection you might want to setup
(if truly paranoid). Snort in Debian is enabled with many security checks, you
might want, however to add some checks specific to the services being run in
your sistem.
<p>Other audit tools, on-site, like logcheck or portsentry can be quite useful in
order to setup a secured environment. Be always aware that in order to have
security you need to have an alert+response mechanism, so don't use Intrusion
Detection if you are not going to alert anyone (i.e. don't waste your time
configuring things you will not use later on).

<sect1>Using snort
<p>
snort is a flexible packet sniffer or logger that detects attacks using
an attack signature dictionary. It detects a variety of attacks and
probes, such as buffer overflows, stealth port scans, CGI attacks, SMB
probes, and much more. Snort has a real-time alerting capability. This is
a tool which should be installed on every router to keep an eye on your
network. Just install it via <tt>apt-get install snort</tt>, follow the
questions, and watch it log.

<sect>Useful kernel patches
<p>
Some kernel patches exist, which significantly enhance system
security. Here are those a few:
<p>
<list>
<item>OpenWall patch by Solar Designer.
This is a useful set of kernel restrictions, like restricted links,
FIFOs in /tmp, restricted /proc, special file descriptor handling,
non-executable user stack area and some more.
Homepage:
<url name="http://www.openwall.com/linux/" id="http://www.openwall.com/linux/">

<item><em>LIDS - Linux intrusion detection system by Huagang Xie &amp; Philippe Biondi</em>.
This patch makes the process of creating a hardened Linux system easier. You
can restrict every process, give it rights to write or read files, or
remove, by default, the ability to read files. Furthermore you can also set
capabilities for certain processes. Even though it is still in the beta phase,
it is almost a must for the paranoid system administrator.
Homepage: <url name="http://www.lids.org" id="http://www.lids.org">

<item><em>POSIX Access Control Lists (ACLs) for Linux</em>
This patch adds access control lists, an advanced method for restricting
access to files, to the linux kernel.
Homepage: <url name="http://acl.bestbits.at/" id="http://acl.bestbits.at/">


<item><em>Linux trustees</em>.
This patch adds a decent advanced permissions system to your Linux kernel. All
the objects are stored in the kernel memory, which allows fast lookup
of all permissions.
Homepage: <url name="http://www.braysystems.com/linux/trustees.html" id="http://www.braysystems.com/linux/trustees.html">

<item><em>International kernel patch</em>.
This is a crypt-oriented kernel patch, therefore you have to pay
attention to your local laws regarding the use of cryptography. 
It basically adds the possibility of using encrypted file systems.
Homepage: <url name="http://www.kerneli.org" id="http://www.kerneli.org">

<item><em>SubDomain</em>.
A kernel extension to create a more secure and easier to setup chroot
environment. You can specify the files needed for the chrooted service
manually and do not have to compile the services statically.
Homepage: <url name="http://www.immunix.org/subdomain.html" id="http://www.immunix.org/subdomain.html">

<item><em>UserIPAcct</em>.
This is not really a security related patch, but it allows you to create
quotas for the traffic on your server per user. And you can fetch
statistics about the user traffic.
Homepage: <url name="http://rsmeyers.3ti.org/useripacct" id="http://rsmeyers.3ti.org/useripacct">

<item><em>FreeS/WAN</em>
If you want to use IPSec with Linux, you need this patch. You can create
VPNs with this quite easily, even to Windows machines, as IPSec is a
common standard.
Homepage: <url name="http://www.freeswan.org" id="http://www.freeswan.org">

</list>


<sect>Genius/Paranoia Ideas, what you could do
<p>
This is probably the most unstable and funny section, since I hope that some
of the "duh. that sounds crazy" ideas might be realized. Following here you
will find some ideas &mdash; it depends on the point of view whether you say they
are genius, paranoid, crazy or secure &mdash; to increase your security
rapidly but you will not come unscathed out of it.

<list>
<item>Playing around with PAM.
As said in the phrack 56 PAM article the nice thing with PAM is that "You are
limited only by what you can think of." It is true. Imagine root login only
possible with fingerprint or eyescan or cryptocard (why did I do an OR
conjunction and not AND here).

<item>Fascist Logging.
I would say everything we talked about logging above is "soft logging". If you
want to perform real logging, get a printer with fanfold paper and log
everything hard by printing on it. Sounds funny, but it's reliable and it
cannot be removed.

<item>CD distribution.
This idea is very easy to realize and offers pretty good security. 
Create a hardened Debian distribution, with proper firewall rules, 
make an ISO image of it and burn it on CD. 
Make it bootable. Upshot of all this is a ro whole distribution with about
600 MB space for services and the fact to make it impossible for intruders to
get read write access on this system. Just make sure every data which should
get written, gets written over the wires. Anyway, the intruder cannot change
firewall rules, routing entries or start own daemons (he can, but reboot
and he has to hack into your system again to change them).

<item>Switch module capability off.
When you disable the usage of kernel modules at kernel compile time many
kernel based back doors are impossible to implement, since most of them are
based on installing modified kernel modules.

<item>Logging through serial cable (contributed by Gaby Schilders).
As long as servers still have serial ports imagine having one dedicated
log-machine disconnected from the net in the middle with a serial-port
multiplexer (cyclades or the like) Now have all your servers log to 
their serial ports. Write
only. The log-machine only accepts plain text as input on its serial
ports and only writes it to a log-file. Hook up a cd/dvd-writer. When
the logging-file nears 600MB it writes it to cd-rom. Now if only they
would make writers with auto-changers... :) Not as hard-copy as the
printer but it can handle larger volumes and the cd's don't take as much
storage-space.


</list>


<chapt>After the compromise

<sect>General behavior
<p>
If you really want to clean up residual wastes, you should remove the
compromised host from your network and re-install the OS from scratch.
This might not have any effect if you do not know how the intruder got root.
In this case you must check everything: firewall/file integrity/loghost 
logfiles and so on.


<chapt>Frequently asked Questions
<p> FIXME: write them, extract from mailing list

<sect>Is Debian more secure than X?
<p>A system is as secure as its administrator is capable of.

<sect>Is there are hardening program for Debian?

<p>Yes. <url name="Bastille Linux"
id="http://www.bastille-linux.org">, originally oriented towards some
Linux distributions (RedHat and Mandrake) currently works for
Debian. Steps are being taken to integrate the changes made to the
upstream version, in any case the package in Debian is, of course,
name <package>bastille</package>.

<p>Some people believe, however, that a hardening tool does not
eliminate the need of a good administration.


<sect>How can I make service X more secure?
<p>You will find information in this document to make some services (FTP, Bind) more
secure in Debian GNU/Linux. For services not treated here, however, check the
program's documentation, or general Linux information. Most of the security guidelines
for Unix systems apply also to Debian so securing service X in Debian is, most of the
time, like securing the service for any other Linux distribution (or Unix, for that matter).


<sect>Are all system users necessary?
<p>Yes and no. Debian comes with some predefined users (id &lt; 99 as described in
<url name="Debian Policy" id="http://www.debian.org/doc/manuals/debian-policy">) 
for some services so that installing new services is easy (they are already 
run by the appropiate user). If you do not intend to install new services, 
you can safely remove those users that do not own any files in your system and
do not run any services.
<p>You can easily find users not owning any files by executing the following
command (be sure to run it as root, since a common user might not have 
enough permissions to go through some sensible directories):

<example>
for i in `cut -f 1 -d : /etc/passwd`; do if [ -z "`find / -user $i`" ]; then echo $i; fi; done
</example>

<p>This users are provided by <package>base-passwd</package>. You will
find in its documentation more info on how this users are handled in Debian.

<p>FIXME: add a list of users in 2.2 base and commment on them (Joey Hess sent a mail
dated August 6th 2001 to the -doc mailing list talking about this, it might be included
separately to the Admin guides in the DDP).


<sect>Why do I have port 111 open?
<p>Port 111 is sunrpc's portmapper, it is installed by default in all base
installation of a Debian system since there is no need to know when a user's
program might need  RPC to work out correctly. In any case, it is used
mostly for NFS. If you do not need it, remove it as explained in <ref id="rpc">.


<sect>The signature on Debian advisories does not verify correctly!
<p>This is most likely a problem on your end. The debian-security-announce
   list has a filter that only allows messages with a correct signature
   from one of the security team members to be posted.

<p>Most likely some piece of mail software on your end slightly changes
   the message that breaks the signature. Make sure your software does
   not do any MIME encoding or decoding, or tab/space conversions.

<p>Known culprits are fetchmail (with the mimedecode option enabled) and
  formail (from procmail 3.14 only).

<sect>How is security handled for <tt>testing</tt> and <tt>unstable</tt>?
<p>The short answer is: it's not. Testing and unstable are rapidly moving
   targets and the security team does not have the resources needed to
   properly support those. If you want to have a secure (and stable) server
   you are strongly encouraged to stay with stable.

<sect>Why are there no official mirrors for security.debian.org?
<p>A: The purpose of security.debian.org is to make security updates available
   as quickly and easily as possible. Mirrors would add extra complexity
   that is not needed and can cause frustration if they are not up to
   date.

<sect>How can I reach the security team?
<p>A: Security information can be sent to security@debian.org, which is read
   by all Debian developers. If you have sensitive information please
   use team@security.debian.org which only the members of the security
   team read. If desired email can be encrypted with the Debian Security
   Contact key (key ID 363CCD95).


<chapt>Checklist for security measures
<!-- FIXME: Era, please send me a full copy, no diff, of your files since
the patches could not be applied. Will change then this section and the Appendix -->

<p>A checklist is always useful, since it allows you to see the entire
process of hardening your system and enables you to take decisions. A possible
approach to a checklist for a Debian 2.2 GNU/Linux is shown below:

<list>
<item>Do an installation of the system (take into account information in
this howto regarding partitioning). After base installation go into custom
install, do not select task packages but select shadow passwords.
<item>go through <prgn>dselect</prgn> and remove unneeded but selected
packages before doing [I]nstall. Leave the bare minimum software in the server.
<item>Update all software from latest packages availables at security.debian.org
as explained previously in <ref id="update">.
<item>implement the suggested issues presented in this manual regarding user quotas, login definitions and lilo
<item>in order to do a service hardening, make a list of services currently awake in your system.
<example>
$ nestat -an --inet 
$ /usr/sbin/lsof -i |grep LISTEN
</example>
You will need to install <package>lsof-2.2</package> for the second command to work (run it as root).
<item>in order to remove unnecesary services, first determine how is it started and which package provides it. You can do this easily by checking the program that listens in the socket, the following example will tell you using this tools and <prgn>dpkg</prgn>

<example>
#!/bin/sh
for i in `sudo lsof -i | grep LISTEN | cut -d " " -f 1 |sort |uniq` ; do
        pack=`dpkg -S $i |grep bin |cut -f 1 -d : | uniq`
        echo "Service $i is installed by $pack";
        init=`dpkg -L $pack |grep init.d/ `
        if [ ! -z "$init" ]; then
                 echo "and is run by $init"
        fi
done
</example>
<item>Once you find unwanted services, remove the package (with <prgn>dpkg --purge</prgn>) or, if useful but should not be enabled on startup, use <prgn>update-rc.d</prgn> in order
to remove them from the system startup. 
<item>For inetd services (launched by the superdaemon) you can just check the enabled
services, for example with:
<example>
$ grep -v "^#" /etc/inetd.conf | sort |uniq
</example>
and disable those not needed by commenting the line that incluyes them, removing the
package, or using <prgn>update-inetd</prgn>
<item>If you have wrapped services (those using <prgn>/usr/sbin/tcpd</prgn>) check that
the <file>/etc/hosts.allow</file> and <file>/etc/hosts.deny</file> are configured according to your service policy.
<item>If possible, and depending on each service, you might want to limit services when
using more than one external interface to listen only on one of them. For example, if
you want internal FTP access make the FTP daemon listen only on your management interface,
not on all interfaces (i.e, 0.0.0.0:21).
<item>Reboot the machine, or switch it to single user and back to multiuser with 
<example>
$ init 0
(....)
$ init 2
</example>
<item>Check the services now available, and, if necessary, repeat steps above.
<item>Install now the needed services if you have not done so already, and configure
them properly.
<item>Check what users are being used to run available services for example with:
<example>
$ for i in `/usr/sbin/lsof -i |grep LISTEN |cut -d " " -f 1 |sort |uniq`; do user=`ps -ef |grep $i |grep -v grep |cut -f 1 -d " "` ; echo "Service $i is running as user $user"; done
</example>
and consider changing these services to a give user/group  and maybe also chrooting them
for increased security. You can do this by changing
the <file>/etc/init.d</file> scripts, where the service starts. Most services in Debian use
<prgn>start-stop-daemon</prgn> so you can use the --change-uid option and the --chroot 
option to setup those services. Chrooting services is beyond the scope of this document but a word of warning is  necessary: you might need to put all the files installed by the service package using dpkg -L and the packages it depends on in the chrooted environment.
<item>Repeat steps above in order to check that only desired services are running
and that they are run as the desired user/group combination.
<item>Test the installed services in order to see if they work as expected.
<item>Check the system using a vulnerability assesment scanner 
(like <package>nessus</package>) in order to determine vulnerabilities in the 
system (misconfigurations, old services or unneeded services).
<item>Install network intrusion measures and host intrusion measures (like 
<package>snort</package> and <package>logsentry</package>).
<item>Repeat the network scanner step and verify that the intrusion detection systems
work fine.

</list>

For the truly paranoid, consider also the following:

<list>
<item>Add firewalling capabilities to the system, accepting incoming connections only
to offered services and limiting outgoing connections to those authorised. 
<item>Recheck the installation with a new vulnerability assesment with a network scanner.
<item>Check outgoing connections using a network scanner from the system to a host
outside and verify that unwanted connections do not find their way out.
</list>

<p>FIXME: this checklist considers service hardening but not system hardening at
the user level, include information regarding checking user permissions, setuid
files and freezing changes in the system using the ext2 filesystem.

</book>
