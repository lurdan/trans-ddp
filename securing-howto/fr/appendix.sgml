<!-- Original CVS version: 1.4 -->

<appendix id="harden-step">La procédure de durcissement étape par étape

<!--
# J'ai pris la liberté de changer cette "liste de vérification" par 
# "processus pas à pas" puisque ça n'a pas réellement la forme 
# d'une liste de vérification, et j'ai ajouté une liste de vérification
# différente. Le remaniement est plus pour éviter la confusion que pour 
# autre chose. // era
-->

<p>
Vous trouverez ci-dessous une procédure post-installation pour durcir un système
Debian 2.2 GNU/Linux. Il s'agit d'une approche possible pour une telle procédure
et celle-ci est orientée sur le renforcement des services réseaux. Elle est
incluse pour présenter le processus entier que vous pouvez utiliser pendant la
configuration. Veuillez également voir <ref id="checklist">.
<!--
Une procédure est toujours utile étant donné qu'elle permet de voir 
les étapes du durcissement du système et permet une prise de décisions.
Une approche possible d'une telle procédure pour Debian 2.2 GNU/Linux est 
présentée ci-dessous. Ceci est une procédure post-installation, avec une 
liste de mesures à prendre en compte, étape par étape, lors de la 
configuration voir <ref id="checklist">. De même que, cette procédure est 
(pour le moment) plus orientée sur le renforcement des services réseaux.
-->

<list>

	  <!-- décider du temps à utiliser : impératif ou infinitif -->

<item>
Faire une installation du système (tenez compte des informations dans ce 
manuel concernant le partitionnement). Après l'installation du système de base,
allez dans l'installation personnalisée, ne sélectionnez pas de paquets de
tâches (<em>task</em>). Sélectionnez les mots de passe ombrés (<em>shadow</em>).

<item>Passer les paquets en revue avec <prgn>dselect</prgn> et retirer les paquets 
non nécessaire mais sélectionnés auparavant avant de faire [I]nstall. Laisser le strict 
minimum de logiciels sur le système.

<item>Actualiser tous les logiciels à partir des paquets les plus récents disponibles 
sur security.debian.org comme décrit précédemment dans <ref id="security-update">.

<item>Appliquer les suggestions présentées dans ce manuel concernant 
les quotas utilisateur, les définitions des connexion et <prgn>lilo</prgn>.

<item>Faire une liste de services actifs sur votre système. Exécuter ceci&nbsp;:

<example>
$ ps -aux
$ netstat -pn -l -A inet 
# /usr/sbin/lsof -i | grep LISTEN
</example>

Vous devrez installer <package>lsof-2.2</package> pour que la troisième 
commande fonctionne (à lancer en root). Vous devriez faire attention car
<prgn>lsof</prgn> peut traduire le mot LISTEN pour votre langue.

<item>Afin de retirer les services non nécessaires, déterminer avant tout
quels paquets fournissent le service et comment ils sont lancés. Cette 
tâche peut être facilement réalisée en vérifiant le programme qui écoute 
la «&nbsp;socket&nbsp;», l'exemple suivant nous le montre en utilisant ces
outils et <prgn>dpkg</prgn>&nbsp;:
 <!-- traduction de socket nécessaire-->

<example>
#!/bin/sh
# FIXME: ceci est vite fait, mal fait ; à remplacer par un bout de script plus robuste
for i in `sudo lsof -i | grep LISTEN | cut -d " " -f 1 |sort -u` ; do
        pack=`dpkg -S $i |grep bin |cut -f 1 -d : | uniq`
        echo "Service $i is installed by $pack";
        init=`dpkg -L $pack |grep init.d/ `
        if [ ! -z "$init" ]; then
                 echo "and is run by $init"
        fi
done
</example>

<item>Une fois les services indésirables trouvés, supprimer le paquet (avec
<prgn>dpkg --purge</prgn>) ou utiliser <prgn>update-rc.d</prgn> (voir
 <ref id="disableserv">) de façon à le retirer du système de démarrage.

<item>Pour les services inetd (lancés par le super-démon), vérifier quels
services sont activés dans <file>/etc/inetd.conf</file> avec&nbsp;:

<example>
  $ grep -v "^#" /etc/inetd.conf | sort -u
</example>

et désactiver ceux qui ne sont pas nécessaire en commentant la ligne qui les
inclut dans <file>/etc/inetd.conf</file>, en supprimant le paquet ou en
utilisant <prgn>update-inetd</prgn>.

<item>Si vous avez des services «&nbsp;wrappés&nbsp;» (ceux utilisant <prgn>/usr/sbin/tcpd</prgn>), 
vérifier que les fichiers <file>/etc/hosts.allow</file> et <file>/etc/hosts.deny</file> sont 
configurés d'après vos règles de services.

<item>Si le serveur utilise plus d'une interface externe, vous pouvez avoir 
envie de limiter les services pour qu'ils n'écoutent que sur une seule d'entre elles. Par exemple, si vous 
voulez un accès FTP interne, paramétrez le démon FTP afin qu'il n'écoute 
que sur l'interface désirée et non toutes les interfaces (c'est-à-dire 
0.0.0.0:21).

<item>Redémarrez la machine ou passer en mode utilisateur seul puis revenez en mode multi-utilisateur avec&nbsp;:
<example>
$ init 1
(....)
$ init 2
</example>

<item>Vérifiez que les services sont maintenant disponibles et, si nécessaire, répétez les étapes ci-dessus.

<item>Installez maintenant les services nécessaires si vous ne l'avez pas encore fait et configurez les
correctement.

<item>Utilisez la commande shell suivante pour déterminer quel utilisateur est
utilisé pour lancer chaque service disponible&nbsp;:

<example>
  $ for i in `/usr/sbin/lsof -i |grep LISTEN |cut -d " " -f 1 |sort -u`; \
  > do user=`ps -ef |grep $i |grep -v grep |cut -f 1 -d " "` ; \
  > echo "Le service $i a été lancé en tant qu'utilisateur $user"; done
</example>

Pensez à changer les utilisateur et groupe lançant ces services pour un utilisateur/groupe donné et 
peut-être utiliser <prgn>chroot</prgn> pour augmenter le niveau de sécurité. Vous pouvez 
procéder en changeant les scripts de démarrage de services de <file>/etc/init.d</file>.
La plupart des services dans la Debian utilisent <prgn>start-stop-daemon</prgn>
qui propose des options (<tt>--change-uid</tt> et <tt>--chroot</tt>) pour faire
cela. Un petit avertissement concernant l'utilisation de <prgn>chroot</prgn>
pour des services est nécessaire&nbsp;: vous aurez peut-être besoin de mettre tous les 
fichiers installés par le paquet (utilisez dpkg -L) fournissant le service ainsi que les paquets
dont il dépend dans l'environnement <prgn>chroot</prgn>. Des informations sur la
mise en place d'un environnement <prgn>chroot</prgn> pour le programme
<prgn>ssh</prgn> peut être trouvée dans <ref id="chroot-ssh-env">.

<item>Répéter les étapes ci-dessus afin de vérifier que seuls les services
désirés sont lancés et qu'ils fonctionnent avec une combinaison utilisateur/groupe désirée.

<item>Tester les services installés afin de voir si leur fonctionnement est 
bien celui souhaité.

<item>Vérifier le système en utilisant un scanner de vulnérabilités (comme
<package>nessus</package>) de façon à déterminer les vulnérabilités du système
(mauvaises configurations, services vieux ou non nécessaires).

<item>Mettre en place des mesures contre les intrusions réseaux et hôtes comme
<package>snort</package> et <package>logsentry</package>.

<item>Répéter l'étape du scanner de réseaux et vérifier que le système de détection
d'intrusion fonctionne correctement.

</list>

Pour les personnes vraiment paranoïaques, vous pouvez également prendre en considération ce qui suit&nbsp;:

<list>

<item>Ajouter au système des possibilités de pare-feux, acceptant les connexions entrantes 
uniquement pour les services définis et limitant les connexions sortantes à celles autorisées.

<item>Revérifier l'installation avec une nouvelle évaluation de vulnérabilité à l'aide 
d'un scanner de réseaux.

<item>Vérifier les connexions sortantes en utilisant un scanner de réseaux depuis le système 
jusqu'à un hôte à l'extérieur et vérifier que les connexions non voulues ne trouvent pas leur
sortie.

</list>


<p>FIXME: cette procédure considère le durcissement de service, mais pas le
renforcement du système au niveau utilisateur, incluant des informations
à propos de la vérification des permissions utilisateurs,  les fichiers
setuid et le gel des changements dans le système en utilisant
le système de fichier ext2.


<appendix id="checklist">Liste des contrôles de configuration.

<p>Cet appendice récapitule brièvement les points des autres sections de ce manuel sous 
une forme condensée de liste de contrôles. Ceci est un petit résumé pour une personne qui
a déjà lu le manuel. Il existe d'autres listes de contrôles disponibles, y
compris la <url
id="http://seifried.org/security/os/linux/20020324-securing-linux-step-by-step.html"
name="sécurisation de Linux pas à pas"> de Kurt Seifried et la <url
id="http://www.cert.org/tech_tips/usc20_full.html" name="liste de contrôles de
	  sécurité Unix du CERT">.

<!-- Order is slightly different from body text. Consider changing text? -->
<!-- (FIXME) -->

<p>FIXME: Ceci est basé sur la version 1.4 du manuel et a peut-être besoin d'une mise à jour.


<list>
	  <item>Limiter les accès physiques et les possibilités de démarrage.
	      <list>
		<item>Activer un mot de passe pour le BIOS.
		<item>Désactiver le démarrage sur disquette/cdrom/...
		    
		<item>Mettre un mot de passe à LILO ou GRUB (respectivement <file>/etc/lilo.conf</file>
ou <file>/boot/grub/menu.lst</file>)&nbsp;;
			vérifier que le fichier de configuration de LILO ou de GRUB est en lecture
			seule.

		<item>Interdire le démarrage par disquette sur le MBR en récrivant par dessus le MBR 
		(peut-être pas&nbsp;?)

	      </list>

          <item>Partitionnement
	      <list>
		<item>Séparer les données où les utilisateurs peuvent écrire,
		    les données non-système, et les données d'exécution qui
		    changent rapidement dans leurs propres partitions

		<item>Mettre les options de montage <tt>nosuid,noexec,nodev</tt> dans
		    <file>/etc/fstab</file> sur les partitions ext2 tel que <file>/tmp</file>.
	      </list>



          <item>Hygiène pour les mots de passes et la sécurité des connexions.
	  	      
	      <list>
		<item>Choisir un bon mot de passe root.
		<item>Activer les mots de passes ombré et MD5.
		<item>Installer et utiliser PAM.
		    
		    <list>
		      <item>Ajouter le support du MD5 à PAM et s'assurer que 
			  (de manière générale) les entrées dans les fichiers
			<file>/etc/pam.d/</file> qui autorisent l'accès
			  à la machine ont un second champ dans
			  le fichier pam.d positionné à <tt>requisite</tt> ou
			  <tt>required</tt>.
                          <!-- ou est-ce le troisième ? (FIXME: à vérifier) -->
			  
		      <item>Modifier <file>/etc/pam.d/login</file> pour que
			  seul le root puisse se connecter localement.

		      <item>Indiquer également les consoles (<em>ttys</em>) autorisées dans 
			  <file>/etc/security/access.conf</file> et généralement 
			  configurer ce fichier pour limiter le plus possible
			  les connexions de root.
			  
		      <item>Ajouter pam_limits.so si vous voulez fixer des limites par
			  utilisateur.
			  
		      <item>Modifier <file>/etc/pam.d/passwd</file>&nbsp;: augmenter la taille minimum
		      	  du mot de passe (6 caractères peut-être) et activer MD5.

		      <item>Ajouter le groupe wheel à <file>/etc/group</file> si vous voulez&nbsp;;
			  ajouter l'entrée pam_wheel.so group=wheel au fichier 
			  <file>/etc/pam.d/su</file>.
			  
		      <item>Pour les contrôles d'usage par utilisateur, utiliser les entrées 
		      appropriées dans pam_listfile.so.
		      
		      <item>Avoir un fichier <file>/etc/pam.d/other</file> et mettre en 
		      place une sécurité reserrée.

		    </list>

                <item>Fixer des limites dans <file>/etc/security/limits.conf</file>
                (notez que <file>/etc/limits</file> n'est pas utilisé si vous utilisez PAM)

		<item>Resserrer <file>/etc/login.defs</file>&nbsp;; de même que, si vous 
		activez MD5 et/ou PAM, assurez-vous de faire également les changements ici.
		    
		<item>Désactiver l'accès par ftp à l'utilisateur root dans le fichier
		<file>/etc/ftpusers</file>.
		    
		<item>Désactiver la connexion par réseau de root&nbsp;; utiliser <manref
		    name="su" section="1"> ou <manref name="sudo"
		    section="1">.  (considérer l'installtion du paquet <package>sudo</package>)
		    
		<item>Utiliser PAM pour imposer des contraintes supplémentaires sur 
		les connexions&nbsp;?

	      </list>

          <item>Autres problèmes de sécurité locaux 
	      <list>
		<item>Modifications du noyau
<!-- Traduction nécessaire.Fait. jpg -->
                    (voir <ref id="kernel-conf">)
		    
		<item>Rustines pour noyaux
		    (voir <ref id="kernel-patches">)
		    
		<item>Resserrer les permissions sur les fichiers journaux.
		    (<file>/var/log/{last,fail}log</file>, journaux d'Apache)
		    
		<item>Vérifier que la vérification de setuid est activée dans 
		    <file>/etc/checksecurity.conf</file>

                <item>Penser à créer des fichiers journaux en avec uniquement le droit d'ajout
                 et des fichiers de configuration invariants en utilisant chattr (système de fichier ext2 uniquement)
<!-- Traduction de append-only nécessaire. Fait. jpg -->

		<item>Mettre en place une vérification d'intégrité des fichiers (voir  <ref
		id="check-integ">).  Installer <package>debsums</package>

                <item>Penser à remplacer locate par slocate
		    
		<item>Impression de tous les fichiers journaux sur une imprimante locale&nbsp;?
		    
		<item>Graver votre configuration sur un CD amorçable et 
		démarrer dessus? <!-- traduction nécessaire. Fait.jpg-->

                <item>Désactiver les modules pour le noyau&nbsp;?

	      </list>

          <item>Restreindre les accès réseaux
	      <list>

		<item>Installer et configurer <prgn>ssh</prgn>
                    (suggérer PermitRootLogin No dans <file>/etc/ssh</file>,
		    PermitEmptyPasswords No;
		    noter également d'autres suggestions dans le texte)
		    
		<item>Envisager la désactivation ou la suppression de <prgn>in.telnetd</prgn>.
		    
		<item>Généralement, désactiver les services inutiles dans le fichier 
		<file>/etc/inetd.conf</file> en utilisant <tt>update-inetd
		      --disable</tt> (ou désactiver inetd complètement, ou utiliser une 
		      solution de rechange tel <prgn>xinetd</prgn> ou <prgn>rlinetd</prgn>).
		    
		<item>Désactiver les autres services inutiles&nbsp;; 
		courriel, ftp, DNS, www, etc. ne devraient pas être lancés si vous 
		n'en avez pas besoin et veillez à les surveiller régulièrement.
		
		<item>Pour les services dont vous avez besoin, n'utilisez pas 
		simplement les programmes communs, rechercher des versions plus 
		sécurisées disponibles dans Debian (ou depuis tout autre source).
		Peu importe celle que vous utiliserez, assurez-vous que vous compreniez
		bien les risques induits.
		
		<item>Mettre en place des prisons <prgn>chroot</prgn> pour les utilisateurs et démons extérieurs.

		<item>Configurer un pare-feux et les tcpwrappers
		    (voir <manref name="hosts_access" section="5">)&nbsp;;
		    notez l'astuce pour <file>/etc/hosts.deny</file> dans le texte.
		    		    
		<item>Si vous utilisez ftp, mettre en place un serveur ftpd qui sera toujours lancé dans 
		un environnement de <prgn>chroot</prgn> au répertoire personnel de l'utilisateur.
		    
		<item>Si vous utilisez X, désactiver l'authentification xhost et utiliser plutôt <prgn>ssh</prgn>&nbsp;;
		    de façon encore plus sécurisée, désactiver X à distance si vous le pouvez (ajouter -nolisten tcp 
		    à la ligne de commande de X et désactiver XDMCP dans le fichier 
		    <file>/etc/X11/xdm/xdm-config</file> en plaçant la valeur 0 à requestPort).
		    
		<item>Désactiver l'accès aux imprimantes de l'extérieur.
		    
		<item>Encrypter toute session IMAP ou POP via SSL ou <prgn>ssh</prgn>&nbsp;;
		installez stunnel si vous voulez fournir ce service pour des
		utilisateurs de courriels à distance.
		    
		<item>Mettre en place un hôte de journaux et configurer les autres machines pour qu'elles envoient
		les journaux à cet hôte (<file>/etc/syslog.conf</file>).
		    
		<item>Sécuriser BIND, Sendmail et tout autre démon complexe 
		    (Lancer dans une prison <prgn>chroot</prgn>&nbsp;; lancer en tant qu'utilisateur non-root)

		<item>Installer snort ou un outil similaire. <!-- "logging" dans ce contexte ? -->
		    
		<item>Faire sans NIS et RPC si vous le pouvez (désactiver portmap).
		    
	      </list>

          <item>Problèmes de règlement
	      <list>
		<item>Éduquer les utilisateurs sur le pourquoi et le comment de vos règles.
		Lorsque que vous interdisez quelque chose qui est généralement 
		disponible sur d'autres systèmes, fournissez-leur une documentation qui 
		explique comment arriver aux mêmes résultats d'une manière plus sécurisée.

		<item>Interdire l'utilisation de protocoles qui utilisent des mots 
		de passe en clair (<prgn>telnet</prgn>, <prgn>rsh</prgn> et similaire&nbsp;; ftp, imap, http, ...).
		    
		<item>Interdire les programmes qui utilisent la SVGAlib.
		    
		<item>Utiliser les quotas disques.

	      </list>

          <item>Rester informé à propos des problèmes de sécurité
	      <list>
		<item>S'abonner aux listes de discussions liées à la sécurité.
		    
		<item>Configurer <package>apt</package> pour les mises à jour de
		sécurité &mdash; ajouter une entrée (ou plusieurs entrées) à
		<file>/etc/apt/sources.list</file> pour
		http://security.debian.org/debian-security

	        <item>Se rappeler périodiquement de lancer 
		<prgn>apt-get update ; apt-get upgrade</prgn>
                (mettre en place peut-être une tâche <prgn>cron</prgn>&nbsp;?)
		comme expliqué dans <ref id="security-update">.

	      </list>

</list>

<appendix id="snort-box">Paramétrer un IDS autonome
<!-- Voir la traduction de standalone ! ici je l'ai traduit par dédié mais cela ne me convient pas. J'ai corrigé par autonome. jpg -->

<p>
Vous pouvez facilement mettre en place un système Debian autonome comme
Système de Détection d'Intrusion en utilisant <package>snort</package>.

<p>Quelques lignes de conduite&nbsp;:

<list>
<item>Installer un système de base Debian et ne pas sélectionner 
de paquets supplémentaires.

<item>Télécharger et installer manuellement (avec dpkg) les 
paquets nécessaire (voir la liste de paquets installée ci-dessous).

<item>Télécharger et installer ACID (<em>Analysis Console for
Intrusion Databases</em>).

</list>

<p>
ACID est actuellement empaqueté pour Debian sous le nom
d'<package>acidlab</package>. Le paquet fournit une interface web graphique à la
sortie de snort. Il peut également être téléchargé depuis 
<url id="http://www.cert.org/kb/acid/">, <url
id="http://acidlab.sourceforge.net"> ou <url
id="http://www.andrew.cmu.edu/~rdanyliw/snort/">. 
Vous pouvez également vouloir lire le 
<url id="http://www.linuxdoc.org/HOWTO/Snort-Statistics-HOWTO/index.html"
	  name="guide des statistiques de Snort">.

<p>
Le système devrait être mis en place avec au moins deux interfaces&nbsp;:
l'une connectée à un réseau de gestion (pour accéder aux résultats 
et maintenir le système), l'autre sans adresse IP liée au segment 
du réseau à analyser.

<p>
Le fichier standard Debian <file>/etc/network/interfaces</file> normalement
utilisé pour configurer les cartes réseau ne peut pas être utilisé étant donné
que les programmes <prgn>ifup</prgn> et <prgn>ifdown</prgn> attendent une
adresse IP. Vous devez faire, simplement, <tt>ifconfig eth0 up</tt>.

<p>
En plus de l'installation standard Debian, <package>acidlab</package> dépend
également des paquets <package>php4</package> et <package>apache</package> entre
autres. Téléchargez les paquets suivants (note&nbsp;: 
les versions peuvent différer en fonction de la distribution Debian que
vous utilisez, cette liste est pour Debian <em>Woody</em> de septembre&nbsp;2001)&nbsp;:

<example>
ACID-0.9.5b9.tar.gz
adduser_3.39_all.deb
apache-common_1.3.20-1_i386.deb
apache_1.3.20-1_i386.deb
debconf_0.9.77_all.deb
dialog_0.9a-20010527-1_i386.deb
fileutils_4.1-2_i386.deb
klogd_1.4.1-2_i386.deb
libbz2-1.0_1.0.1-10_i386.deb
libc6_2.2.3-6_i386.deb
libdb2_2.7.7-8_i386.deb
libdbd-mysql-perl_1.2216-2_i386.deb
libdbi-perl_1.18-1_i386.deb
libexpat1_1.95.1-5_i386.deb
libgdbmg1_1.7.3-27_i386.deb
libmm11_1.1.3-4_i386.deb
libmysqlclient10_3.23.39-3_i386.deb
libncurses5_5.2.20010318-2_i386.deb
libpcap0_0.6.2-1_i386.deb
libpcre3_3.4-1_i386.deb
libreadline4_4.2-3_i386.deb 
libstdc++2.10-glibc2.2_2.95.4-0.010703_i386.deb
logrotate_3.5.4-2_i386.deb
mime-support_3.11-1_all.deb
mysql-client_3.23.39-3_i386.deb
mysql-common_3.23.39-3.1_all.deb
mysql-server_3.23.39-3_i386.deb
perl-base_5.6.1-5_i386.deb
perl-modules_5.6.1-5_all.deb
perl_5.6.1-5_i386.deb
php4-mysql_4.0.6-4_i386.deb
php4_4.0.6-1_i386.deb
php4_4.0.6-4_i386.deb
snort_1.7-9_i386.deb
sysklogd_1.4.1-2_i386.deb
zlib1g_1.1.3-15_i386.deb
</example>

<p>Paquets installés (dpkg -l)&nbsp;:
<example>
ii  adduser        3.39
ii  ae             962-26
ii  apache         1.3.20-1
ii  apache-common  1.3.20-1
ii  apt            0.3.19
ii  base-config    0.33.2
ii  base-files     2.2.0
ii  base-passwd    3.1.10
ii  bash           2.03-6
ii  bsdutils       2.10f-5.1
ii  console-data   1999.08.29-11.
ii  console-tools  0.2.3-10.3
ii  console-tools- 0.2.3-10.3
ii  cron           3.0pl1-57.2
ii  debconf        0.9.77
ii  debianutils    1.13.3
ii  dialog         0.9a-20010527-
ii  diff           2.7-21
ii  dpkg           1.6.15
ii  e2fsprogs      1.18-3.0
ii  elvis-tiny     1.4-11
ii  fbset          2.1-6
ii  fdflush        1.0.1-5
ii  fdutils        5.3-3   
ii  fileutils      4.1-2   
ii  findutils      4.1-40
ii  ftp            0.10-3.1
ii  gettext-base   0.10.35-13
ii  grep           2.4.2-1
ii  gzip           1.2.4-33
ii  hostname       2.07
ii  isapnptools    1.21-2
ii  joe            2.8-15.2  
ii  klogd          1.4.1-2   
ii  ldso           1.9.11-9   
ii  libbz2-1.0     1.0.1-10
ii  libc6          2.2.3-6
ii  libdb2         2.7.7-8
ii  libdbd-mysql-p 1.2216-2
ii  libdbi-perl    1.18-1
ii  libexpat1      1.95.1-5
ii  libgdbmg1      1.7.3-27
ii  libmm11        1.1.3-4
ii  libmysqlclient 3.23.39-3
ii  libncurses5    5.2.20010318-2
ii  libnewt0       0.50-7  
ii  libpam-modules 0.72-9
ii  libpam-runtime 0.72-9  
ii  libpam0g       0.72-9
ii  libpcap0       0.6.2-1
ii  libpcre3       3.4-1   
ii  libpopt0       1.4-1.1
ii  libreadline4   4.2-3 
ii  libssl09       0.9.4-5   
ii  libstdc++2.10  2.95.2-13 
ii  libstdc++2.10- 2.95.4-0.01070
ii  libwrap0       7.6-4   
ii  lilo           21.4.3-2
ii  locales        2.1.3-18
ii  login          19990827-20
ii  makedev        2.3.1-46.2
ii  mawk           1.3.3-5
ii  mbr            1.1.2-1 
ii  mime-support   3.11-1 
ii  modutils       2.3.11-13.1
ii  mount          2.10f-5.1
ii  mysql-client   3.23.39-3
ii  mysql-common   3.23.39-3.1
ii  mysql-server   3.23.39-3
ii  ncurses-base   5.0-6.0potato1
ii  ncurses-bin    5.0-6.0potato1
ii  netbase        3.18-4  
ii  passwd         19990827-20
ii  pciutils       2.1.2-2
ii  perl           5.6.1-5   
ii  perl-base      5.6.1-5   
ii  perl-modules   5.6.1-5
ii  php4           4.0.6-4   
ii  php4-mysql     4.0.6-4 
ii  ppp            2.3.11-1.4
ii  pppconfig      2.0.5
ii  procps         2.0.6-5   
ii  psmisc         19-2   
ii  pump           0.7.3-2 
ii  sed            3.02-5 
ii  setserial      2.17-16
ii  shellutils     2.0-7
ii  slang1         1.3.9-1  
ii  snort          1.7-9
ii  ssh            1.2.3-9.3
ii  sysklogd       1.4.1-2
ii  syslinux       1.48-2
ii  sysvinit       2.78-4  
ii  tar            1.13.17-2  
ii  tasksel        1.0-10 
ii  tcpd           7.6-4     
ii  telnet         0.16-4potato.1
ii  textutils      2.0-2  
ii  update         2.11-1    
ii  util-linux     2.10f-5.1
ii  zlib1g         1.1.3-15
</example>

<appendix id="bridge-fw">Configuration d'un pare-feu pont 
<!-- bridge ? passerelle (bof : traduction de gateway), pont -->

<p>Ces informations sont fournies par Francois Bayart pour aider les
utilisateurs à mettre en place un pare-feu/pont avec le noyau 2.4.x et
<package>iptables</package>. Les seules fonctionnalités nécessaires sont la
rustine de pare-feu pont, disponible sur la <url name="page de
téléchargement de Sourceforge" id="http://bridge.sourceforge.net/download.html">.

<p>Par exemple, si vous utilisez le noyau 2.4.18, installez tout d'abord le
paquet source du noyau, puis téléchargez la <url name="rustine"
id="http://bridge.sourceforge.net/devel/bridge-nf/bridge-nf-0.0.6-against-2.4.18.diff">
et appliquez-la, comme présenté dans cet exemple&nbsp;:

<example>
Zipowz:/usr/src# apt-get install kernel-source-2.4.18
Zipowz:/usr/src# cd kernel-source-2.4.18
Zipowz:/usr/src/kernel-source-2.4.18# patch -p1 < ../bridge-nf-0.0.6-against-2.4.18.diff 
patching file include/linux/netfilter.h
patching file include/linux/netfilter_ipv4.h
patching file include/linux/skbuff.h
patching file net/bridge/br.c
patching file net/bridge/br_forward.c
patching file net/bridge/br_input.c
patching file net/bridge/br_netfilter.c
patching file net/bridge/br_private.h
patching file net/bridge/Makefile
patching file net/Config.in
patching file net/core/netfilter.c
patching file net/core/skbuff.c
patching file net/ipv4/ip_output.c
patching file net/ipv4/netfilter/ip_tables.c
patching file net/ipv4/netfilter/ipt_LOG.c
</example>

<p>Maintenant, configurez le noyau (i.e., <tt>make menuconfig</tt>, 
<tt>make xconfig</tt>). Dans la section <em>Networking options</em>, activez les
options suivantes&nbsp;:

<example>
[*] Network packet filtering (replaces ipchains)
[ ]   Network packet filtering debugging (NEW)
<*> 802.1d Ethernet Bridging
[*]   netfilter (firewalling) support (NEW)
</example>

<p>Avertissement&nbsp;: vous devez désactiver ceci si vous voulez appliquer des
règles de pare-feu ou sinon <prgn>iptables</prgn> ne fonctionnera pas.

<example>
[ ]   Network packet filtering debugging (NEW)
</example>

<p>Ensuite, ajoutez les options correctes dans la section <em>IP: Netfilter
Configuration</em>. Puis, compilez et installez le noyau. Si vous désirez le
faire à la <em>sauce Debian</em>, installez
<package>kernel-package</package> et exécutez <prgn>make-kpkg</prgn> pour créer
un paquet noyau personnalisé Debian que vous pouvez installer sur votre serveur
en utilisant dpkg. Une fois que le nouveau noyau est compilé et installé,
installez le paquet <package>bridge-utils</package>.

<p>Une fois que ces étapes sont complétées, vous pouvez terminer la configuration
de votre pont. La section suivante présente deux configurations différentes
possibles pour le pont, chacune avec une carte réseau hypothétique ainsi que les
commandes nécessaires.

<sect>Un pont fournissant des fonctionnalités de translations d'adresse (NAT) et
de pare-feu

<p>La première configuration utilise le pont comme un pare-feu avec de la
translation d'adresse réseau (NAT) qui protège un serveur et des clients du
réseau interne. Voici ci-dessous un diagramme de la configuration réseau&nbsp;:

<example>
Internet ---- routeur ( 62.3.3.25 ) ---- pont (62.3.3.26 gw 62.3.3.25 / 192.168.0.1)
                                          |
                                          |
                                          |---- serveur WWW (62.3.3.27 gw 62.3.3.25)
                                          |
                                          |
                                         réseau --- Zipowz (192.168.0.2 gw 192.168.0.1)
</example>

<p>Les commandes suivantes présentent comment ce pont peut être configuré.

<example>
# Crée l'interface br0
/usr/sbin/brctl addbr br0

# Ajoute l'interface Ethernet à utiliser avec le pont
/usr/sbin/brctl addif br0 eth0
/usr/sbin/brctl addif br0 eth1

# Active l'interface Ethernet
/sbin/ifconfig eth0 0.0.0.0
/sbin/ifconfig eth1 0.0.0.0

# Configure le pont ethernet
# Le pont sera correct et invisible (pare-feu transparent).
# Il est invisible au traceroute et vous conservez la passerelle réelle sur les
# autres machines. Maintenant, si vous le désirez, vous pouvez configurer une
# passerelle sur votre pont et la choisir comme votre nouvelle passerelle pour
# les autres machines.

/sbin/ifconfig br0 62.3.3.26 netmask 255.255.255.248 broadcast 62.3.3.32

# J'ai ajouté cette IP interne pour créer ma translation d'adresse
ip addr add 192.168.0.1/24 dev br0
/sbin/route add default gw 62.3.3.25
</example>

<sect>Un pont fournissant des fonctionnalités de pare-feu

<p>Une seconde possibilité est un système qui est mis en place comme un pare-feu
transparent pour un réseau avec un espace d'adresse IP public.

<example>
Internet ---- routeur (62.3.3.25) ---- pont (62.3.3.26)
                                        |
                                        |
                                        |---- serveur WWW (62.3.3.28 gw 62.3.3.25)
                                        |
                                        |
                                        |---- serveur de courriel (62.3.3.27 gw 62.3.3.25)
</example>

<p>Les commandes suivantes montrent comment ce pont peut être configuré.

<example>
# Crée l'interface br0
/usr/sbin/brctl addbr br0

# Ajouter l'interface Ethernet à utiliser avec le pont
/usr/sbin/brctl addif br0 eth0
/usr/sbin/brctl addif br0 eth1

# Active l'interface Ethernet
/sbin/ifconfig eth0 0.0.0.0
/sbin/ifconfig eth1 0.0.0.0

# Configure le pont Ethernet
# Le pont sera correct et invisible (pare-feu transparent).
# Il est invisible au traceroute et vous conservez la passerelle réelle sur les
# autres machines. Maintenant, si vous le désirez, vous pouvez configurer une
# passerelle sur votre pont et la choisir comme votre nouvelle passerelle pour
# les autres machines.

/sbin/ifconfig br0 62.3.3.26 netmask 255.255.255.248 broadcast 62.3.3.32
</example>

<p>Si vous lancez un traceroute vers le serveur de courriel Linux, vous ne
verrez pas le pont. Si vous voulez accéder au pont avec <prgn>ssh</prgn>, vous
devez avoir une passerelle ou vous devez tout d'abord vous connecter sur un
autre serveur comme le «&nbsp;serveur de courriel&nbsp;», puis ensuite vous
connecter sur le pont oar la carte réseau interne.</p>

<sect>Règles de base d'IPtables

<p>Voici un exemple des règles de base qui pourraient être utilisées pour l'une
ou l'autre des configuration.

<example>
  iptables -F FORWARD
  iptables -P FORWARD DROP
  iptables -A FORWARD -s 0.0.0.0/0.0.0.0 -d 0.0.0.0/0.0.0.0 -m state --state INVALID -j DROP
  iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT

  # Quelques règles amusantes, mais pas pour un iptables classique, désolé...
  # Limite ICMP 
  # iptables -A FORWARD -p icmp -m limit --limit 4/s -j ACCEPT
  # Correspond à une chaîne de caractères, une bonne méthode simple pour bloquer
  # certaines VIRUS très rapidement
  # iptables -I FORWARD -j DROP -p tcp -s 0.0.0.0/0 -m string --string "cmd.exe"

  # Bloque toutes les connexions MySQL simplement pour être sûr
  iptables -A FORWARD -p tcp -s 0/0 -d 62.3.3.0/24 --dport 3306 -j DROP

  # Règles du serveur de courriel Linux

  # Autorise FTP-DATA ( 20 ) , FTP ( 21 ) , SSH ( 22 ) 
  iptables -A FORWARD -p tcp -s 0.0.0.0/0 -d 62.3.3.27/32 --dport 20:22 -j ACCEPT

  # Autorise le serveur de courriel à e connecter à l'extérieur
  # Note : Ceci n'est *pas* nécessaire pour les connexions précédentes
  # (rappelez-vous : filtrage à état) et peut être supprimé.
  iptables -A FORWARD -p tcp -s 62.3.3.27/32 -d 0/0 -j ACCEPT

  # Règles pour le serveur WWW

  # Autorise les connexions HTTP ( 80 ) avec le serveur WWW
  iptables -A FORWARD -p tcp -s 0.0.0.0/0 -d 62.3.3.28/32 --dport 80 -j ACCEPT

  # Autorise les connexions HTTPS ( 443 ) avec le serveur WWW
  iptables -A FORWARD -p tcp -s 0.0.0.0/0 -d 62.3.3.28/32 --dport 443 -j ACCEPT

  # Autorise les connexions sortantes du serveur WWW
  # Note : Ceci n'est *pas* nécessaire pour les connexions précédentes
  # (rappelez-vous : filtrage à état) et peut être supprimé.
  iptables -A FORWARD -p tcp -s 62.3.3.28/32 -d 0/0 -j ACCEPT
</example>

<appendix id="bind-chuser">Exemple de script pour changer l'installation par
défaut de Bind.

<p>Ce script automatise la procédure de changement de l'installation par défaut
du serveur de noms <prgn>bind</prgn> pour qu'il ne fonctionne <em>pas</em> en
tant que super-utilisateur. Utilisez-le avec la plus extrême attention car il
n'a pas été testé rigoureusement.

<example>
  #!/bin/sh
  # Change la configuration par défaut du bind de Debian pour qu'il s'exécute
  # en tant qu'un utilisateur et un groupe non-root.
  #
  # ATT : Ce script n'a pas été testé rigoureusement, veuillez vérifier les
  #changements effectués sur les scripts d'initialisation

  # (c) 2002 Javier Fernandez-Sanguino Peña
  #
  #    This program is free software; you can redistribute it and/or modify
  #    it under the terms of the GNU General Public License as published by
  #    the Free Software Foundation; either version 1, or (at your option)
  #    any later version.
  #
  #    This program is distributed in the hope that it will be useful,
  #    but WITHOUT ANY WARRANTY; without even the implied warranty of
  #    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  #    GNU General Public License for more details.
  #
  #     Please see the file `COPYING' for the complete copyright notice.
  #

  restore() {
  # Au cas où, restaure le système si le changement échoue
	  echo "WARN: Restoring to the previous setup since I'm unable to properly change it."
	  echo "WARN: Please check the $INITDERR script."
	  mv $INITD $INITDERR
	  cp $INITDBAK $INITD
  }


  USER=named
  GROUP=named
  INITD=/etc/init.d/bind
  INITDBAK=$INITD.preuserchange
  INITDERR=$INITD.changeerror
  START="start-stop-daemon --start --quiet --exec /usr/sbin/named -- -g $GROUP -u $USER"
  AWKS="awk ' /start-stop-daemon --start/ { print \"$START\"; noprint = 1; }; /\/usr\/sbin\/ndc reload/ { print \"stop; sleep 2; start;\"; noprint = 1; } /\\\\$/ { if ( noprint != 0 ) { noprint = noprint + 1;} } /^.*$/ { if ( noprint != 0 ) { noprint = noprint - 1; } else { print \$0; } } '"

  [ `id -u` -ne 0 ] && {
	  echo "This program must be run by the root user"
	  exit 1
  }

  RUNUSER=`ps -eo user,fname |grep named |cut -f 1 -d " "`

  if [ "$RUNUSER" = "$USER" ] 
  then
	  echo "WARN: The name server running daemon is already running as $USER"
	  echo "ERR:  This script will not many any changes to your setup."
	  exit 1
  fi
  if [ ! -f $INITD ]
  then
	  echo "ERR:  This system does not have $INITD (which this script tries to change)"
	  RUNNING=`ps -eo fname |grep named`
	   [ -z "$RUNNING" ] && \
	      echo "ERR:  In fact the name server daemon is not even running (is it installed?)"
	   echo "ERR:  No changes will be made to your system"
	  exit 1
  fi

  # Vérifie si le groupe named existe
  if [ -z "`grep $GROUP /etc/group`" ] 
  then
	  echo "Creating group $GROUP:"
	  addgroup $GROUP
  else
	  echo "WARN: Group $GROUP already exists. Will not create it"
  fi
  # Pareil pour l'utilisateur
  if [ -z "`grep $USER /etc/passwd`" ] 
  then
	  echo "Creating user $USER:"
	  adduser --system --home /home/$USER \
	  --no-create-home --ingroup $GROUP \
	  --disabled-password --disabled-login $USER
  else
	  echo "WARN: The user $USER already exists. Will not create it"
  fi

  # Change le script d'init.d

  # Tout d'abord, on fait une sauvegarde (vérifie en premier qu'il n'y en a pas
  # déjà une)
  if [ ! -f $INITDBAK ] 
  then
	  cp $INITD $INITDBAK
  fi

  # Puis, utilise-la pour la changer
  cat $INITDBAK |
  eval $AWKS > $INITD

  echo "WARN: The script $INITD has been changed, trying to test the changes."
  echo "Restarting the named daemon (check for errors here)."

  $INITD restart
  if [ $? -ne 0 ] 
  then
	  echo "ERR:  Failed to restart the daemon."
	  restore
	  exit 1
  fi

  RUNNING=`ps -eo fname |grep named`
  if [ -z "$RUNNING" ] 
  then
	  echo "ERR:  Named is not running, probably due to a problem with the changes."
	  restore
	  exit 1
  fi

  # Vérifie que named fonctionne comme attendu
  RUNUSER=`ps -eo user,fname |grep named |cut -f 1 -d " "`

  if [ "$RUNUSER" = "$USER" ] 
  then
	  echo "All has gone well, named seems to be running now as $USER."
  else
	  echo "ERR:  The script failed to automatically change the system."
	  echo "ERR:  Named is currently running as $RUNUSER."
	  restore
	  exit 1
  fi

  exit 0
</example>

<p>Le script précédent, exécuté sur le <prgn>bind</prgn> personnalisé de Woody
(Debian 3.0) produira le fichier initd suivant après création de l'utilisateur
et du groupe «&nbsp;named&nbsp;»&nbsp;:

<example>
  #!/bin/sh

  PATH=/sbin:/bin:/usr/sbin:/usr/bin

  test -x /usr/sbin/named || exit 0

  start () {
	  echo -n "Starting domain name service: named"
	  start-stop-daemon --start --quiet \
	      --pidfile /var/run/named.pid --exec /usr/sbin/named 
	  echo "."	
  }

  stop () {
	  echo -n "Stopping domain name service: named"
	  # --exec doesn't catch daemons running deleted instances of named,
	  # as in an upgrade.  Fortunately, --pidfile is only going to hit
	  # things from the pidfile.
	  start-stop-daemon --stop --quiet  \
	      --pidfile /var/run/named.pid --name named
	  echo "."	
  }

  case "$1" in
      start)
	  start
      ;;

      stop)
	  stop
      ;;

      restart|force-reload)
	  stop
	  sleep 2
	  start
      ;;

      reload)
	  /usr/sbin/ndc reload
      ;;

      *)
	  echo "Usage: /etc/init.d/bind {start|stop|reload|restart|force-reload}" >&2
	  exit 1
      ;;
  esac

  exit 0
</example>

<appendix id="fw-security-update">Mise à jour de sécurité protégée par un pare-feu

<p>Après une installation standard, un système peut toujours avec des failles de
sécurité. À moins de pouvoir télécharger les mises à jour pour les paquets
vulnérables depuis un autre système (ou si vous avez fait un miroir de
security.debian.org pour utilisation en local), le système devra être connecté à
l'Internet pour les téléchargements.

<p>Cependant, dès que vous vous connecter à l'Internet, vous exposez le système.
Si l'un de vos services locaux est vulnérable, votre système peut même être
compromis avant que la mise à jour ne soit terminée&nbsp;! Cela peut sembler
paranoïaque, mais en fait une analyse du <url id="http://www.honeynet.org"
name="Projet Honeynet"> a démontré que les systèmes peuvent être compromis en
moins de trois jours, même si le système n'est pas connu publiquement (i.e.,
non publié dans les enregistrements DNS).

<p>Lorsque vous faites une mise à jour sur un système non protégé par un système
externe comme un pare-feu, il est possible de configurer correctement votre
pare-feu pour restreindre les connexions n'impliquant que la mise à jour de
sécurité elle-même. L'exemple ci-dessous montre comment mettre en place des
telles fonctionnalités de pare-feu, permettant les connexions depuis
security.debian.org seulement et en historisant toutes les autres.

<p>FIXME: ajouter l'adresse IP pour security.debian.org dans /etc/hosts (car
sinon vous avez besoin que le DNS fonctionne).

<p>FIXME: tester cette configuration pour voir si cela fonctionne correctement

<p>FIXME: cela ne fonctionnera qu'avec les URL HTTO car ftp peut avoir besoin du
module ip_conntrack_ftp ou d'utiliser le mode passif.

<example>
  # iptables -F
  # iptables -L
  Chain INPUT (policy ACCEPT)
  target     prot opt source               destination

  Chain FORWARD (policy ACCEPT)
  target     prot opt source               destination

  Chain OUTPUT (policy ACCEPT)
  target     prot opt source               destination
  # iptables -P INPUT DROP
  # iptables -P FORWARD DROP
  # iptables -P OUTPUT DROP
  # iptables -A OUTPUT -d security.debian.org --dport 80 -j ACCEPT
  # iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
  # iptables -A INPUT -p icmp -j ACCEPT
  # iptables -A INPUT -j LOG
  # iptables -A OUTPUT -j LOG
  # iptables -L
  Chain INPUT (policy DROP)
  target     prot opt source               destination
  ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0          state RELATED,ESTABLISHED
  ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0
  LOG        all  --  anywhere             anywhere           LOG level warning

  Chain FORWARD (policy DROP)
  target     prot opt source               destination

  Chain OUTPUT (policy DROP)
  target     prot opt source               destination
  ACCEPT     80   --  anywhere             security.debian.org
  LOG        all  --  anywhere             anywhere           LOG level warning
</example>

<!-- CONTINUER ICI -->

<!-- <appendix>Utilisation de chroot -->
<!-- sect id="chroot" -->
<!-- 
<p><prgn>chroot</prgn> est une des possibilités les plus puissantes pour
restreindre un démon ou un utilisateur ou un autre service. Imaginez juste
une prison autour de votre cible, dont votre cible ne peut s'échapper
(normalement, mais il y a encore beaucoup de conditions qui permettent de
s'échapper d'une telle prison). Si vous ne faites pas confiance à un utilisateur,
vous pouvez créer un environnement à racine modifiée pour lui. Cela peut utiliser
pas mal d'espace disque comme vous avez besoin de copier tous les exécutables
nécessaires, ainsi que les librairies, dans la prison. Même si l'utilisateur
fait quelque chose de malveillant, la portée des dégâts sera limitée à la prison.

<p>Un bon exemple pour ce cas est, si vous n'authentifiez pas avec 
<file>/etc/passwd</file> mais utilisez LDAP ou MySQL à la place. Donc votre
daemon-ftp a seulement besoin d'un binaire et peut être de quelques librairies.
Un environnement chrooté serait une excellent amélioration de la sécurité&nbsp;;
si un nouvel exploit est découvert pour ce daemon-ftp, alors les attaquants 
pourront seulement exploiter l'UID de l'utilisateur-daemon-ftp et rien d'autre.

<p>Bien sur, beaucoup d'autres démons pourraient bénéficier de ce genre
d'aménagement aussi.

<p>Cependant, soyez averti qu'une prison chroot peut être brisée si
l'utilisateur qui y évolue est le super-utilisateur. Donc, vous devez
faire s'exécuter le service comme un utilisateur non-privilégié. En
limitant son environnement vous limitez les fichiers lisibles/inscriptibles
par tout le monde auxquels le service peut accéder, ainsi, vous limitez les
possibilités d'élévation de privilège en utilisant des vulnérabilités du
système local. Même si dans cette situation vous ne pouvez être complètement
sur qu'il n'y a aucun moyen pour un attaquant intelligent de s'échapper d'une
façon ou d'une autre de la prison. L'utilisation des seuls programmes serveurs
qui ont la réputation d'être surs est une bonne mesure de sécurité supplémentaire.
Même des failles minuscules comme des références de fichier ouverts peuvent être
utilisées par un attaquant talentueux pour s'introduire dans le système. Après
tout <prgn>chroot</prgn> n'a pas été conçu comme un outil de sécurité mais comme
un outil de test.
 -->
<!-- FIXME: Cette information devra être vérifiée quand woody sortira -->
<!-- AA : Service de nom Internet ? serveur de résolution de nom) -->
 -->
<p>Note additionnelle, le BIND par défaut de la Debian (le service de nom 
Internet) n'est pas livré chrooté par défaut; en fait, aucun démon n'est
chrooté. Cela pourrait changer dans la version woody (3.0).
 -->
<!-- Il faudrait peut etre signifier ici que BIND est un outil très vulnérable.
il est impératif de mettre les dernières mises à jour? jpg -->
<!-- 
<p>Il y a aussi des logiciels (pas dans la Debian actuellement mais qui pourraient
fournis dans le futur) qui peuvent aider à configurer des environnements chroot.
<prgn>makejail</prgn> par exemple, peut créer et mettre à jour une prison chroot
avec de petits fichiers de configuration. il essaie aussi de deviner et  -->
<!-- AA ou peu de fichiers ? -->
<!-- d'installer dans la prison tous les fichiers requis par le démon.
Plus d'information à <url id="http://www.floc.net/makejail/">. <prgn>Jailer</prgn> est un outil similaire qui peut être récupéré sur 
<url id="http://www.balabit.hu/downloads/jailer/">
 -->

<appendix id="chroot-ssh-env">Environnement de <prgn>chroot</prgn> pour <prgn>SSH</prgn>

<p>Créer un environnement restreint pour <prgn>SSH</prgn> est un travail
difficile à cause de ses dépendances et du fait que, à la différence d'autres
serveurs, <prgn>SSH</prgn> fournit un shell distant pour les utilisateurs. C'est
pourquoi vous devrez également considérer les applications que les
utilisateurs auront le droit d'utiliser dans l'environnement. Si vous créer
cette structure de fichiers sous, par exemple <file>/var/chroot/ssh</file>, vous
pouvez lancer le serveur <prgn>ssh</prgn> <prgn>chroot</prgn>é avec cette commande&nbsp;:

<example>
  # chroot /var/chroot/ssh /sbin/sshd -f /etc/sshd_config
</example>

<sect>Créer l'environnement automatiquement (la manière simple)

<p>Vous pouvez facilement créer un environnement restraine avec le paquet
<package>makejail</package> puisqu'il prend automatiquement soin de tracer le
démon serveur (avec <prgn>strace</prgn>), et l'exécute sous l'environnement
restreint.

<p>L'avantage de programmes qui génèrent automatiquement l'environnement de <prgn>chroot</prgn>
est qu'ils sont capables de copier tout paquet vers l'environnement de
<prgn>chroot</prgn> (en suivant même les dépendances de paquet et en s'assurant
qu'il est complet). Fournir les applications aux utilisateurs est donc plus facile.

<p>Pour mettre en place l'environnement en utilisant les exemples fournis par
<prgn>makejail</prgn>, exécutez simplement la commande suivante&nbsp;:

<example>
  # makejail /usr/share/doc/makejail/examples/sshd.py
</example>

<p>Lisez le fichier d'exemple pour voir quels autres changements doivent être
réalisés dans l'environnement. Certains de ces changements, comme la copie des
répertoires personnels des utilisateurs, ne peuvent être réalisés
automatiquement. Limitez également l'exposition des informations sensibles en ne copiant
que les données d'un nombre donné d'utilisateurs des fichiers <file>/etc/shadow</file> ou
<file>/etc/group</file>.

<p>L'environnement d'exemple suivant a été (légèrement) testé et est construit
avec le fichier de configuration fourni par le paquet et inclut le paquet
<package>fileutils</package>&nbsp;:

<example>
.
|-- bin
|   |-- ash
|   |-- bash
|   |-- chgrp
|   |-- chmod
|   |-- chown
|   |-- cp
|   |-- csh -> /etc/alternatives/csh
|   |-- dd
|   |-- df
|   |-- dir
|   |-- fdflush
|   |-- ksh
|   |-- ln
|   |-- ls
|   |-- mkdir
|   |-- mknod
|   |-- mv
|   |-- rbash -> bash
|   |-- rm
|   |-- rmdir
|   |-- sh -> bash
|   |-- sync
|   |-- tcsh
|   |-- touch
|   |-- vdir
|   |-- zsh -> /etc/alternatives/zsh
|   `-- zsh4
|-- dev
|   |-- null
|   |-- ptmx
|   |-- pts
|   |-- ptya0
(...)
|   |-- tty
|   |-- tty0
(...)
|   `-- urandom
|-- etc
|   |-- alternatives
|   |   |-- csh -> /bin/tcsh
|   |   `-- zsh -> /bin/zsh4
|   |-- environment
|   |-- hosts
|   |-- hosts.allow
|   |-- hosts.deny
|   |-- ld.so.conf
|   |-- localtime -> /usr/share/zoneinfo/Europe/Madrid
|   |-- motd
|   |-- nsswitch.conf
|   |-- pam.conf
|   |-- pam.d
|   |   |-- other
|   |   `-- ssh
|   |-- passwd
|   |-- resolv.conf
|   |-- security
|   |   |-- access.conf
|   |   |-- chroot.conf
|   |   |-- group.conf
|   |   |-- limits.conf
|   |   |-- pam_env.conf
|   |   `-- time.conf
|   |-- shadow
|   |-- shells
|   `-- ssh
|       |-- moduli
|       |-- ssh_host_dsa_key
|       |-- ssh_host_dsa_key.pub
|       |-- ssh_host_rsa_key
|       |-- ssh_host_rsa_key.pub
|       `-- sshd_config
|-- home
|   `-- userX
|-- lib
|   |-- ld-2.2.5.so
|   |-- ld-linux.so.2 -> ld-2.2.5.so
|   |-- libc-2.2.5.so
|   |-- libc.so.6 -> libc-2.2.5.so
|   |-- libcap.so.1 -> libcap.so.1.10
|   |-- libcap.so.1.10
|   |-- libcrypt-2.2.5.so
|   |-- libcrypt.so.1 -> libcrypt-2.2.5.so
|   |-- libdl-2.2.5.so
|   |-- libdl.so.2 -> libdl-2.2.5.so
|   |-- libm-2.2.5.so
|   |-- libm.so.6 -> libm-2.2.5.so
|   |-- libncurses.so.5 -> libncurses.so.5.2
|   |-- libncurses.so.5.2
|   |-- libnsl-2.2.5.so
|   |-- libnsl.so.1 -> libnsl-2.2.5.so
|   |-- libnss_compat-2.2.5.so
|   |-- libnss_compat.so.2 -> libnss_compat-2.2.5.so
|   |-- libnss_db-2.2.so
|   |-- libnss_db.so.2 -> libnss_db-2.2.so
|   |-- libnss_dns-2.2.5.so
|   |-- libnss_dns.so.2 -> libnss_dns-2.2.5.so
|   |-- libnss_files-2.2.5.so
|   |-- libnss_files.so.2 -> libnss_files-2.2.5.so
|   |-- libnss_hesiod-2.2.5.so
|   |-- libnss_hesiod.so.2 -> libnss_hesiod-2.2.5.so
|   |-- libnss_nis-2.2.5.so
|   |-- libnss_nis.so.2 -> libnss_nis-2.2.5.so
|   |-- libnss_nisplus-2.2.5.so
|   |-- libnss_nisplus.so.2 -> libnss_nisplus-2.2.5.so
|   |-- libpam.so.0 -> libpam.so.0.72
|   |-- libpam.so.0.72
|   |-- libpthread-0.9.so
|   |-- libpthread.so.0 -> libpthread-0.9.so
|   |-- libresolv-2.2.5.so
|   |-- libresolv.so.2 -> libresolv-2.2.5.so
|   |-- librt-2.2.5.so
|   |-- librt.so.1 -> librt-2.2.5.so
|   |-- libutil-2.2.5.so
|   |-- libutil.so.1 -> libutil-2.2.5.so
|   |-- libwrap.so.0 -> libwrap.so.0.7.6
|   |-- libwrap.so.0.7.6
|   `-- security
|       |-- pam_access.so
|       |-- pam_chroot.so
|       |-- pam_deny.so
|       |-- pam_env.so
|       |-- pam_filter.so
|       |-- pam_ftp.so
|       |-- pam_group.so
|       |-- pam_issue.so
|       |-- pam_lastlog.so
|       |-- pam_limits.so
|       |-- pam_listfile.so
|       |-- pam_mail.so
|       |-- pam_mkhomedir.so
|       |-- pam_motd.so
|       |-- pam_nologin.so
|       |-- pam_permit.so
|       |-- pam_rhosts_auth.so
|       |-- pam_rootok.so
|       |-- pam_securetty.so
|       |-- pam_shells.so
|       |-- pam_stress.so
|       |-- pam_tally.so
|       |-- pam_time.so
|       |-- pam_unix.so
|       |-- pam_unix_acct.so -> pam_unix.so
|       |-- pam_unix_auth.so -> pam_unix.so
|       |-- pam_unix_passwd.so -> pam_unix.so
|       |-- pam_unix_session.so -> pam_unix.so
|       |-- pam_userdb.so
|       |-- pam_warn.so
|       `-- pam_wheel.so
|-- sbin
|   `-- start-stop-daemon
|-- usr
|   |-- bin
|   |   |-- dircolors
|   |   |-- du
|   |   |-- install
|   |   |-- link
|   |   |-- mkfifo
|   |   |-- shred
|   |   |-- touch -> /bin/touch
|   |   `-- unlink
|   |-- lib
|   |   |-- libcrypto.so.0.9.6
|   |   |-- libdb3.so.3 -> libdb3.so.3.0.2
|   |   |-- libdb3.so.3.0.2
|   |   |-- libz.so.1 -> libz.so.1.1.4
|   |   `-- libz.so.1.1.4
|   |-- sbin
|   |   `-- sshd
|   `-- share
|       |-- locale
|       |   `-- es
|       |       |-- LC_MESSAGES
|       |       |   |-- fileutils.mo
|       |       |   |-- libc.mo
|       |       |   `-- sh-utils.mo
|       |       `-- LC_TIME -> LC_MESSAGES
|       `-- zoneinfo
|           `-- Europe
|               `-- Madrid
`-- var
    `-- run
        |-- sshd
        `-- sshd.pid

27 directories, 733 files
</example>

<sect>Modifier <prgn>SSH</prgn> pour activer la fonctionnalité de <prgn>chroot</prgn>

<p>
Le serveur <prgn>sshd</prgn> de Debian ne vous autorisera pas à restreindre les mouvements 
des utilisateurs via le serveur étant donné que celui-ci est dépourvu de la 
fonction <prgn>chroot</prgn> que le programme commerciale <prgn>sshd2</prgn> possède (utilisation de 
«&nbsp;ChrootGroups&nbsp;» ou «&nbsp;ChrootUsers&nbsp;», voir <manref name="sshd2_config" section="5">). 
Toutefois, une rustine est disponible afin de vous permettre de le faire, elle 
peut être trouvée depuis le
<url id="http://bugs.debian.org/139047" name="rapport de bogue 139047">. Elle sera peut-être appliquée 
au paquet OpenSSH dans le futur. Emmanuel <!-- Il ne manque pas un m a emmanuel
la? jpg --> Lacour dispose de paquets Debian <prgn>ssh</prgn> avec 
cette fonctionnalité sur <url id="http://debian.home-dn.net/woody/ssh/">.
Cependant, l'étape de compilation est recommandée.

<p>
Une description de toutes les étapes nécessaires peut-être trouvée sur 
<url id="http://mail.incredimail.com/howto/openssh/"> (pratiquement tout est 
applicable à Debian même s'il est question de la RedHat 7.2).
Après l'application de la rustine, vous devez simplement modifier le 
<file>/etc/passwd</file> en changeant le chemin personnel des utilisateurs 
(avec le jeton spécial <tt>/./</tt>)&nbsp;:

<!--  ou <url id="http://www.cag.lcs.mit.edu/~raoul/"> -->

<example>
joeuser:x:1099:1099:Joe Random User:/home/joe/./:/bin/bash
</example>

<p>
Ceci restreindra <em>à la fois</em> les accès distants au shell, ainsi que la copie via 
le tunnel <prgn>ssh</prgn>.

<p>
Assurez-vous que tous les programmes et bibliothèques sont bien présents dans le 
chemin <prgn>chroot</prgn>é pour les utilisateurs. Ces fichiers devraient appartenir à 
root pour éviter les fraudes de l'utilisateur (tel la sortie d'une prison <prgn>chroot</prgn>é).
Un échantillon pourrait inclure ceci&nbsp;:

<example>
./bin:
total 660
drwxr-xr-x    2 root     root         4096 Mar 18 13:36 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
-r-xr-xr-x    1 root     root       531160 Feb  6 22:36 bash
-r-xr-xr-x    1 root     root        43916 Nov 29 13:19 ls
-r-xr-xr-x    1 root     root        16684 Nov 29 13:19 mkdir
-rwxr-xr-x    1 root     root        23960 Mar 18 13:36 more
-r-xr-xr-x    1 root     root         9916 Jul 26  2001 pwd
-r-xr-xr-x    1 root     root        24780 Nov 29 13:19 rm
lrwxrwxrwx    1 root     root            4 Mar 30 16:29 sh -> bash

./etc:
total 24
drwxr-xr-x    2 root     root         4096 Mar 15 16:13 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
-rw-r--r--    1 root     root           54 Mar 15 13:23 group
-rw-r--r--    1 root     root          428 Mar 15 15:56 hosts
-rw-r--r--    1 root     root           44 Mar 15 15:53 passwd
-rw-r--r--    1 root     root           52 Mar 15 13:23 shells

./lib:
total 1848
drwxr-xr-x    2 root     root         4096 Mar 18 13:37 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
-rwxr-xr-x    1 root     root        92511 Mar 15 12:49 ld-linux.so.2
-rwxr-xr-x    1 root     root      1170812 Mar 15 12:49 libc.so.6
-rw-r--r--    1 root     root        20900 Mar 15 13:01 libcrypt.so.1
-rw-r--r--    1 root     root         9436 Mar 15 12:49 libdl.so.2
-rw-r--r--    1 root     root       248132 Mar 15 12:48 libncurses.so.5
-rw-r--r--    1 root     root        71332 Mar 15 13:00 libnsl.so.1
-rw-r--r--    1 root     root        34144 Mar 15 16:10
libnss_files.so.2
-rw-r--r--    1 root     root        29420 Mar 15 12:57 libpam.so.0
-rw-r--r--    1 root     root       105498 Mar 15 12:51 libpthread.so.0
-rw-r--r--    1 root     root        25596 Mar 15 12:51 librt.so.1
-rw-r--r--    1 root     root         7760 Mar 15 12:59 libutil.so.1
-rw-r--r--    1 root     root        24328 Mar 15 12:57 libwrap.so.0

./usr:
total 16
drwxr-xr-x    4 root     root         4096 Mar 15 13:00 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
drwxr-xr-x    2 root     root         4096 Mar 15 15:55 bin
drwxr-xr-x    2 root     root         4096 Mar 15 15:37 lib

./usr/bin:
total 340
drwxr-xr-x    2 root     root         4096 Mar 15 15:55 .
drwxr-xr-x    4 root     root         4096 Mar 15 13:00 ..
-rwxr-xr-x    1 root     root        10332 Mar 15 15:55 env
-rwxr-xr-x    1 root     root        13052 Mar 15 13:13 id
-r-xr-xr-x    1 root     root        25432 Mar 15 12:40 scp
-rwxr-xr-x    1 root     root        43768 Mar 15 15:15 sftp
-r-sr-xr-x    1 root     root       218456 Mar 15 12:40 ssh
-rwxr-xr-x    1 root     root         9692 Mar 15 13:17 tty

./usr/lib:
total 852
drwxr-xr-x    2 root     root         4096 Mar 15 15:37 .
drwxr-xr-x    4 root     root         4096 Mar 15 13:00 ..
-rw-r--r--    1 root     root       771088 Mar 15 13:01
libcrypto.so.0.9.6
-rw-r--r--    1 root     root        54548 Mar 15 13:00 libz.so.1
-rwxr-xr-x    1 root     root        23096 Mar 15 15:37 sftp-server
</example>

<sect>Environnement créé manuellement (la manière difficile)

<p>Il est possible de créer un environnement, en utillisant une méthode
d'essai-et-d'erreur, en surveillant les traces du serveur <prgn>sshd</prgn> et
les fichiers journaux pour déterminer les fichiers nécessaires. L'environnement
suivant, fourni par José Luis Ledesma, est un listing exemple des fichiers dans
un environnement de <prgn>chroot</prgn> pour <prgn>ssh</prgn>&nbsp;:

<footnote>
Notez qu'ils n'y a pas de fichiers SETUID. Cela rend plus difficile pour les
utilisateurs distants de s'échapper de l'environnement de <prgn>chroot</prgn>.
Cependant, il empêche également les utilisateurs de changer leurs mots de passe,
car le programme <prgn>passwd</prgn> ne peut pas modificer les fichiers
<file>/etc/passwd</file> ou <file>/etc/shadow</file>.
</footnote>

<example>
.:
total 36
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ./
drwxr-xr-x 11 root root 4096 Jun 3 13:43 ../
drwxr-xr-x 2 root root 4096 Jun 4 12:13 bin/
drwxr-xr-x 2 root root 4096 Jun 4 12:16 dev/
drwxr-xr-x 4 root root 4096 Jun 4 12:35 etc/
drwxr-xr-x 3 root root 4096 Jun 4 12:13 lib/
drwxr-xr-x 2 root root 4096 Jun 4 12:35 sbin/
drwxr-xr-x 2 root root 4096 Jun 4 12:32 tmp/
drwxr-xr-x 2 root root 4096 Jun 4 12:16 usr/
./bin:
total 8368
drwxr-xr-x 2 root root 4096 Jun 4 12:13 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
-rwxr-xr-x 1 root root 109855 Jun 3 13:45 a2p*
-rwxr-xr-x 1 root root 387764 Jun 3 13:45 bash*
-rwxr-xr-x 1 root root 36365 Jun 3 13:45 c2ph*
-rwxr-xr-x 1 root root 20629 Jun 3 13:45 dprofpp*
-rwxr-xr-x 1 root root 6956 Jun 3 13:46 env*
-rwxr-xr-x 1 root root 158116 Jun 3 13:45 fax2ps*
-rwxr-xr-x 1 root root 104008 Jun 3 13:45 faxalter*
-rwxr-xr-x 1 root root 89340 Jun 3 13:45 faxcover*
-rwxr-xr-x 1 root root 441584 Jun 3 13:45 faxmail*
-rwxr-xr-x 1 root root 96036 Jun 3 13:45 faxrm*
-rwxr-xr-x 1 root root 107000 Jun 3 13:45 faxstat*
-rwxr-xr-x 1 root root 77832 Jun 4 11:46 grep*
-rwxr-xr-x 1 root root 19597 Jun 3 13:45 h2ph*
-rwxr-xr-x 1 root root 46979 Jun 3 13:45 h2xs*
-rwxr-xr-x 1 root root 10420 Jun 3 13:46 id*
-rwxr-xr-x 1 root root 4528 Jun 3 13:46 ldd*
-rwxr-xr-x 1 root root 111386 Jun 4 11:46 less*
-r-xr-xr-x 1 root root 26168 Jun 3 13:45 login*
-rwxr-xr-x 1 root root 49164 Jun 3 13:45 ls*
-rwxr-xr-x 1 root root 11600 Jun 3 13:45 mkdir*
-rwxr-xr-x 1 root root 24780 Jun 3 13:45 more*
-rwxr-xr-x 1 root root 154980 Jun 3 13:45 pal2rgb*
-rwxr-xr-x 1 root root 27920 Jun 3 13:46 passwd*
-rwxr-xr-x 1 root root 4241 Jun 3 13:45 pl2pm*
-rwxr-xr-x 1 root root 2350 Jun 3 13:45 pod2html*
-rwxr-xr-x 1 root root 7875 Jun 3 13:45 pod2latex*
-rwxr-xr-x 1 root root 17587 Jun 3 13:45 pod2man*
-rwxr-xr-x 1 root root 6877 Jun 3 13:45 pod2text*
-rwxr-xr-x 1 root root 3300 Jun 3 13:45 pod2usage*
-rwxr-xr-x 1 root root 3341 Jun 3 13:45 podchecker*
-rwxr-xr-x 1 root root 2483 Jun 3 13:45 podselect*
-r-xr-xr-x 1 root root 82412 Jun 4 11:46 ps*
-rwxr-xr-x 1 root root 36365 Jun 3 13:45 pstruct*
-rwxr-xr-x 1 root root 7120 Jun 3 13:45 pwd*
-rwxr-xr-x 1 root root 179884 Jun 3 13:45 rgb2ycbcr*
-rwxr-xr-x 1 root root 20532 Jun 3 13:45 rm*
-rwxr-xr-x 1 root root 6720 Jun 4 10:15 rmdir*
-rwxr-xr-x 1 root root 14705 Jun 3 13:45 s2p*
-rwxr-xr-x 1 root root 28764 Jun 3 13:46 scp*
-rwxr-xr-x 1 root root 385000 Jun 3 13:45 sendfax*
-rwxr-xr-x 1 root root 67548 Jun 3 13:45 sendpage*
-rwxr-xr-x 1 root root 88632 Jun 3 13:46 sftp*
-rwxr-xr-x 1 root root 387764 Jun 3 13:45 sh*
-rws--x--x 1 root root 744500 Jun 3 13:46 slogin*
-rwxr-xr-x 1 root root 14523 Jun 3 13:46 splain*
-rws--x--x 1 root root 744500 Jun 3 13:46 ssh*
-rwxr-xr-x 1 root root 570960 Jun 3 13:46 ssh-add*
-rwxr-xr-x 1 root root 502952 Jun 3 13:46 ssh-agent*
-rwxr-xr-x 1 root root 575740 Jun 3 13:46 ssh-keygen*
-rwxr-xr-x 1 root root 383480 Jun 3 13:46 ssh-keyscan*
-rwxr-xr-x 1 root root 39 Jun 3 13:46 ssh_europa*
-rwxr-xr-x 1 root root 107252 Jun 4 10:14 strace*
-rwxr-xr-x 1 root root 8323 Jun 4 10:14 strace-graph*
-rwxr-xr-x 1 root root 158088 Jun 3 13:46 thumbnail*
-rwxr-xr-x 1 root root 6312 Jun 3 13:46 tty*
-rwxr-xr-x 1 root root 55904 Jun 4 11:46 useradd*
-rwxr-xr-x 1 root root 585656 Jun 4 11:47 vi*
-rwxr-xr-x 1 root root 6444 Jun 4 11:45 whoami*
./dev:
total 8
drwxr-xr-x 2 root root 4096 Jun 4 12:16 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
crw-r--r-- 1 root root 1, 9 Jun 3 13:43 urandom
./etc:
total 208
drwxr-xr-x 4 root root 4096 Jun 4 12:35 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
-rw------- 1 root root 0 Jun 4 11:46 .pwd.lock
-rw-r--r-- 1 root root 653 Jun 3 13:46 group
-rw-r--r-- 1 root root 242 Jun 4 11:33 host.conf
-rw-r--r-- 1 root root 857 Jun 4 12:04 hosts
-rw-r--r-- 1 root root 1050 Jun 4 11:29 ld.so.cache
-rw-r--r-- 1 root root 304 Jun 4 11:28 ld.so.conf
-rw-r--r-- 1 root root 235 Jun 4 11:27 ld.so.conf~
-rw-r--r-- 1 root root 88039 Jun 3 13:46 moduli
-rw-r--r-- 1 root root 1342 Jun 4 11:34 nsswitch.conf
drwxr-xr-x 2 root root 4096 Jun 4 12:02 pam.d/
-rw-r--r-- 1 root root 28 Jun 4 12:00 pam_smb.conf
-rw-r--r-- 1 root root 2520 Jun 4 11:57 passwd
-rw-r--r-- 1 root root 7228 Jun 3 13:48 profile
-rw-r--r-- 1 root root 1339 Jun 4 11:33 protocols
-rw-r--r-- 1 root root 274 Jun 4 11:44 resolv.conf
drwxr-xr-x 2 root root 4096 Jun 3 13:43 security/
-rw-r----- 1 root root 1178 Jun 4 11:51 shadow
-rw------- 1 root root 80 Jun 4 11:45 shadow-
-rw-r----- 1 root root 1178 Jun 4 11:48 shadow.old
-rw-r--r-- 1 root root 161 Jun 3 13:46 shells
-rw-r--r-- 1 root root 1144 Jun 3 13:46 ssh_config
-rw------- 1 root root 668 Jun 3 13:46 ssh_host_dsa_key
-rw-r--r-- 1 root root 602 Jun 3 13:46 ssh_host_dsa_key.pub
-rw------- 1 root root 527 Jun 3 13:46 ssh_host_key
-rw-r--r-- 1 root root 331 Jun 3 13:46 ssh_host_key.pub
-rw------- 1 root root 883 Jun 3 13:46 ssh_host_rsa_key
-rw-r--r-- 1 root root 222 Jun 3 13:46 ssh_host_rsa_key.pub
-rw-r--r-- 1 root root 2471 Jun 4 12:15 sshd_config
./etc/pam.d:
total 24
drwxr-xr-x 2 root root 4096 Jun 4 12:02 ./
drwxr-xr-x 4 root root 4096 Jun 4 12:35 ../
lrwxrwxrwx 1 root root 4 Jun 4 12:02 other -> sshd
-rw-r--r-- 1 root root 318 Jun 3 13:46 passwd
-rw-r--r-- 1 root root 546 Jun 4 11:36 ssh
-rw-r--r-- 1 root root 479 Jun 4 12:02 sshd
-rw-r--r-- 1 root root 370 Jun 3 13:46 su
./etc/security:
total 32
drwxr-xr-x 2 root root 4096 Jun 3 13:43 ./
drwxr-xr-x 4 root root 4096 Jun 4 12:35 ../
-rw-r--r-- 1 root root 1971 Jun 3 13:46 access.conf
-rw-r--r-- 1 root root 184 Jun 3 13:46 chroot.conf
-rw-r--r-- 1 root root 2145 Jun 3 13:46 group.conf
-rw-r--r-- 1 root root 1356 Jun 3 13:46 limits.conf
-rw-r--r-- 1 root root 2858 Jun 3 13:46 pam_env.conf
-rw-r--r-- 1 root root 2154 Jun 3 13:46 time.conf
./lib:
total 8316
drwxr-xr-x 3 root root 4096 Jun 4 12:13 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
-rw-r--r-- 1 root root 1024 Jun 4 11:51 cracklib_dict.hwm
-rw-r--r-- 1 root root 214324 Jun 4 11:51 cracklib_dict.pwd
-rw-r--r-- 1 root root 11360 Jun 4 11:51 cracklib_dict.pwi
-rwxr-xr-x 1 root root 342427 Jun 3 13:46 ld-linux.so.2*
-rwxr-xr-x 1 root root 4061504 Jun 3 13:46 libc.so.6*
lrwxrwxrwx 1 root root 15 Jun 4 12:11 libcrack.so -> libcrack.so.2.7*
lrwxrwxrwx 1 root root 15 Jun 4 12:11 libcrack.so.2 -> libcrack.so.2.7*
-rwxr-xr-x 1 root root 33291 Jun 4 11:39 libcrack.so.2.7*
-rwxr-xr-x 1 root root 60988 Jun 3 13:46 libcrypt.so.1*
-rwxr-xr-x 1 root root 71846 Jun 3 13:46 libdl.so.2*
-rwxr-xr-x 1 root root 27762 Jun 3 13:46 libhistory.so.4.0*
lrwxrwxrwx 1 root root 17 Jun 4 12:12 libncurses.so.4 -> libncurses.so.4.2*
-rwxr-xr-x 1 root root 503903 Jun 3 13:46 libncurses.so.4.2*
lrwxrwxrwx 1 root root 17 Jun 4 12:12 libncurses.so.5 -> libncurses.so.5.0*
-rwxr-xr-x 1 root root 549429 Jun 3 13:46 libncurses.so.5.0*
-rwxr-xr-x 1 root root 369801 Jun 3 13:46 libnsl.so.1*
-rwxr-xr-x 1 root root 142563 Jun 4 11:49 libnss_compat.so.1*
-rwxr-xr-x 1 root root 215569 Jun 4 11:49 libnss_compat.so.2*
-rwxr-xr-x 1 root root 61648 Jun 4 11:34 libnss_dns.so.1*
-rwxr-xr-x 1 root root 63453 Jun 4 11:34 libnss_dns.so.2*
-rwxr-xr-x 1 root root 63782 Jun 4 11:34 libnss_dns6.so.2*
-rwxr-xr-x 1 root root 205715 Jun 3 13:46 libnss_files.so.1*
-rwxr-xr-x 1 root root 235932 Jun 3 13:49 libnss_files.so.2*
-rwxr-xr-x 1 root root 204383 Jun 4 11:33 libnss_nis.so.1*
-rwxr-xr-x 1 root root 254023 Jun 4 11:33 libnss_nis.so.2*
-rwxr-xr-x 1 root root 256465 Jun 4 11:33 libnss_nisplus.so.2*
lrwxrwxrwx 1 root root 14 Jun 4 12:12 libpam.so.0 -> libpam.so.0.72*
-rwxr-xr-x 1 root root 31449 Jun 3 13:46 libpam.so.0.72*
lrwxrwxrwx 1 root root 19 Jun 4 12:12 libpam_misc.so.0 ->
libpam_misc.so.0.72*
-rwxr-xr-x 1 root root 8125 Jun 3 13:46 libpam_misc.so.0.72*
lrwxrwxrwx 1 root root 15 Jun 4 12:12 libpamc.so.0 -> libpamc.so.0.72*
-rwxr-xr-x 1 root root 10499 Jun 3 13:46 libpamc.so.0.72*
-rwxr-xr-x 1 root root 176427 Jun 3 13:46 libreadline.so.4.0*
-rwxr-xr-x 1 root root 44729 Jun 3 13:46 libutil.so.1*
-rwxr-xr-x 1 root root 70254 Jun 3 13:46 libz.a*
lrwxrwxrwx 1 root root 13 Jun 4 12:13 libz.so -> libz.so.1.1.3*
lrwxrwxrwx 1 root root 13 Jun 4 12:13 libz.so.1 -> libz.so.1.1.3*
-rwxr-xr-x 1 root root 63312 Jun 3 13:46 libz.so.1.1.3*
drwxr-xr-x 2 root root 4096 Jun 4 12:00 security/
./lib/security:
total 668
drwxr-xr-x 2 root root 4096 Jun 4 12:00 ./
drwxr-xr-x 3 root root 4096 Jun 4 12:13 ../
-rwxr-xr-x 1 root root 10067 Jun 3 13:46 pam_access.so*
-rwxr-xr-x 1 root root 8300 Jun 3 13:46 pam_chroot.so*
-rwxr-xr-x 1 root root 14397 Jun 3 13:46 pam_cracklib.so*
-rwxr-xr-x 1 root root 5082 Jun 3 13:46 pam_deny.so*
-rwxr-xr-x 1 root root 13153 Jun 3 13:46 pam_env.so*
-rwxr-xr-x 1 root root 13371 Jun 3 13:46 pam_filter.so*
-rwxr-xr-x 1 root root 7957 Jun 3 13:46 pam_ftp.so*
-rwxr-xr-x 1 root root 12771 Jun 3 13:46 pam_group.so*
-rwxr-xr-x 1 root root 10174 Jun 3 13:46 pam_issue.so*
-rwxr-xr-x 1 root root 9774 Jun 3 13:46 pam_lastlog.so*
-rwxr-xr-x 1 root root 13591 Jun 3 13:46 pam_limits.so*
-rwxr-xr-x 1 root root 11268 Jun 3 13:46 pam_listfile.so*
-rwxr-xr-x 1 root root 11182 Jun 3 13:46 pam_mail.so*
-rwxr-xr-x 1 root root 5923 Jun 3 13:46 pam_nologin.so*
-rwxr-xr-x 1 root root 5460 Jun 3 13:46 pam_permit.so*
-rwxr-xr-x 1 root root 18226 Jun 3 13:46 pam_pwcheck.so*
-rwxr-xr-x 1 root root 12590 Jun 3 13:46 pam_rhosts_auth.so*
-rwxr-xr-x 1 root root 5551 Jun 3 13:46 pam_rootok.so*
-rwxr-xr-x 1 root root 7239 Jun 3 13:46 pam_securetty.so*
-rwxr-xr-x 1 root root 6551 Jun 3 13:46 pam_shells.so*
-rwxr-xr-x 1 root root 55925 Jun 4 12:00 pam_smb_auth.so*
-rwxr-xr-x 1 root root 12678 Jun 3 13:46 pam_stress.so*
-rwxr-xr-x 1 root root 11170 Jun 3 13:46 pam_tally.so*
-rwxr-xr-x 1 root root 11124 Jun 3 13:46 pam_time.so*
-rwxr-xr-x 1 root root 45703 Jun 3 13:46 pam_unix.so*
-rwxr-xr-x 1 root root 45703 Jun 3 13:46 pam_unix2.so*
-rwxr-xr-x 1 root root 45386 Jun 3 13:46 pam_unix_acct.so*
-rwxr-xr-x 1 root root 45386 Jun 3 13:46 pam_unix_auth.so*
-rwxr-xr-x 1 root root 45386 Jun 3 13:46 pam_unix_passwd.so*
-rwxr-xr-x 1 root root 45386 Jun 3 13:46 pam_unix_session.so*
-rwxr-xr-x 1 root root 9726 Jun 3 13:46 pam_userdb.so*
-rwxr-xr-x 1 root root 6424 Jun 3 13:46 pam_warn.so*
-rwxr-xr-x 1 root root 7460 Jun 3 13:46 pam_wheel.so*
./sbin:
total 3132
drwxr-xr-x 2 root root 4096 Jun 4 12:35 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
-rwxr-xr-x 1 root root 178256 Jun 3 13:46 choptest*
-rwxr-xr-x 1 root root 184032 Jun 3 13:46 cqtest*
-rwxr-xr-x 1 root root 81096 Jun 3 13:46 dialtest*
-rwxr-xr-x 1 root root 1142128 Jun 4 11:28 ldconfig*
-rwxr-xr-x 1 root root 2868 Jun 3 13:46 lockname*
-rwxr-xr-x 1 root root 3340 Jun 3 13:46 ondelay*
-rwxr-xr-x 1 root root 376796 Jun 3 13:46 pagesend*
-rwxr-xr-x 1 root root 13950 Jun 3 13:46 probemodem*
-rwxr-xr-x 1 root root 9234 Jun 3 13:46 recvstats*
-rwxr-xr-x 1 root root 64480 Jun 3 13:46 sftp-server*
-rwxr-xr-x 1 root root 744412 Jun 3 13:46 sshd*
-rwxr-xr-x 1 root root 30750 Jun 4 11:46 su*
-rwxr-xr-x 1 root root 194632 Jun 3 13:46 tagtest*
-rwxr-xr-x 1 root root 69892 Jun 3 13:46 tsitest*
-rwxr-xr-x 1 root root 43792 Jun 3 13:46 typetest*
./tmp:
total 8
drwxr-xr-x 2 root root 4096 Jun 4 12:32 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
./usr:
total 8
drwxr-xr-x 2 root root 4096 Jun 4 12:16 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
lrwxrwxrwx 1 root root 7 Jun 4 12:14 bin -> ../bin//
lrwxrwxrwx 1 root root 7 Jun 4 11:33 lib -> ../lib//
lrwxrwxrwx 1 root root 8 Jun 4 12:13 sbin -> ../sbin//
</example>



<appendix id="chroot-apache-env">Environnement de <prgn>chroot</prgn> pour <prgn>Apache</prgn>

<sect>Introduction

<p>L'utilitaire <prgn>chroot</prgn> est souvent utilisé pour emprisonner un
démon dans une arborescence restreint. Vous pouvez l'utiliser pour isoler des
services d'autres services, pour que les problèmes de sécurité d'un paquet
logiciel ne mettent pas en péril le serveur tout entier. Quand vous utiliser le
script <prgn>makejail</prgn>, mettre en place et mettre à jour l'arborescence
chrooté est beaucoup plus facile.</p>

<sect1>Licence 

<p>Ce document est copyright 2002 Alexandre Ratti. Il est publié sous la GNU-FDL
1.2 (GNU Free Documentation Licence) et est inclus dans ce manuel avec sa
permission explicite.

</sect1>
</sect>

<sect>Installer le serveur

<p>Cette procédure a été testée sur Debian GNU/Linux&nbsp;3.0 (Woody) avec
<prgn>makejail</prgn> 0.0.4-1 (de Debian/testing).

<list>

<item> <p>Connectez-vous en tant que <prgn>root</prgn> et créez le nouveau
répertoire prison&nbsp;:

<example>
$ mkdir -p /var/chroot/apache
</example>

 </item>

 <item> <p>Créez un nouvel utilisateur et un nouveau groupe. Le serveur Apache
chrooté fonctionnera sous cet utilisateur et groupe, qui n'est utilisé pour rien
d'autre sur le système. Dans cet exemple, l'utilisateur et le groupe sont
appelés <prgn>chrapach</prgn>.

 <example> 
 $ adduser --home /var/chroot/apache --shell /bin/false \
 --no-create-home --system --group chrapach
 </example>

<p>FIXME: est-ce qu'un nouvel utilisateur est nécessaire&nbsp;? (Apache
fonctionne déjà sous l'utilisateur apache)</p>

  </item>

  <item>Installez Apache comme d'habitude sous Debian&nbsp;: <tt>apt-get install
apache</tt></item>

<item>Configurez Apache (e.g. définissez vos sous-domaines, etc.). Dans le
fichier de configuration <file>/etc/apache/httpd.conf</file>, positionnez les options
<em>Group</em> et <em>User</em> à <tt>chrapach</tt>. Redémarrez Apache et
assurez-vous que le serveur fonctionne correctement. Maintenant, stoppez le
démon Apache.</item>

<item>Installez <prgn>makejail</prgn> (disponible dans Debian/testing
actuellement). Vous devriez également installer <prgn>wget</prgn> et
<prgn>lynx</prgn> car ils sont utilisés par <prgn>makejail</prgn> pour tester le
serveur chrooté&nbsp;: <tt>apt-get install makejail wget lynx</tt></item>

<item>Copiez le fichier de configuration exemple pour Apache dans le répertoire
 <file>/etc/makejail</file>&nbsp;:
 <example> 
 # cp/usr/share/doc/makejail/examples/apache.py /etc/makejail/ 
 </example>

</item>
 
 <item>Éditez <file>/etc/makejail/apache.py</file>. Vous devez changer les options
<em>chroot</em>, <em>users</em> et <em>groups</em>. Pour exécuter cette version
de <prgn>makejail</prgn>, vous pouvez également ajouter une option
<prgn>packages</prgn>. Voir la <url
id="http://www.floc.net/makejail/current/doc/" name="documentation
makejail">. Un exemple est fourni ici&nbsp;:

<example>
chroot=&quot;/var/chroot/apache&quot;
testCommandsInsideJail=[&quot;/usr/sbin/apachectl start&quot;]
processNames=[&quot;apache&quot;]
testCommandsOutsideJail=[&quot;wget -r --spider http://localhost/&quot;,
                         &quot;lynx --source https://localhost/&quot;]
preserve=[&quot;/var/www&quot;,
          &quot;/var/log/apache&quot;,
          &quot;/dev/log&quot;]
users=[&quot;chrapach&quot;]
groups=[&quot;chrapach&quot;]
packages=[&quot;apache&quot;, &quot;apache-common&quot;]
userFiles=[&quot;/etc/password&quot;,
           &quot;/etc/shadow&quot;]
groupFiles=[&quot;/etc/group&quot;,
            &quot;/etc/gshadow&quot;]
forceCopy=[&quot;/etc/hosts&quot;,
           &quot;/etc/mime.types&quot;]
</example>

<p><em>FIXME:</em> certaines options semblent ne pas fonctionner correctement.
Par exemple, <file>/etc/shadow</file> et <file>/etc/gshadow</file> ne sont pas
copiés, alors que <file>/etc/password</file> et
<file>/etc/group</file> sont intégralement copiés au lieu d'être filtrés.</p>
 </item>
 
<item>Créez l'arborescence de chroot&nbsp;: <tt>makejail /etc/makejail/apache.py</tt></item>

<item>Si les fichiers <file>/etc/password</file> et <file>/etc/group</file> ont
été intégralement copiés, entrez&nbsp;:

      <example>
      $ grep chrapach /etc/passwd &gt; /var/chroot/apache/etc/passwd
      $ grep chrapach /etc/group &gt; /var/chroot/apache/etc/group
      </example>
pour les remplacer avec des copies filtrées.</item>

<item>Copiez les pages du site web et les journaux dans la prison. Ces fichiers
ne sont pas copiés automatiquement (voir l'option <em>preserve</em> du fichier
de configuration de <prgn>makejail</prgn>).
      <example>
      # cp -Rp /var/www /var/chroot/apache/var
      # cp -Rp /var/log/apache/*.log /var/chroot/apache/var/log/apache
      </example>
  </item>

<item>Éditez le script de démarrage pour le démon de journaux système pour qu'il
écoute également sur la socket <file>/var/chroot/apache/dev/log</file>. Dans
<file>/etc/init.d/sysklogd</file>, remplacez&nbsp;:
<tt>SYSLOGD=&quot;&quot;</tt> par <tt>SYSLOGD=&quot; -a
/var/chroot/apache/dev/log&quot;</tt> et redémarrez le démon
(<tt>/etc/init.d/sysklogd restart</tt>).</item>

  <item>Éditez le script de démarrage d'Apache
      (<file>/etc/init.d/apache</file>). Vous pouvez avoir besoin d'effectuer
      certaines changements au script de démarrage par défaut pour qu'il
      fonctionne correctement dans une arborescence chrooté. Comme&nbsp;:
    <list>
      <item>configurer une nouvelle variable <em>CHRDIR</em> au début du fichier&nbsp;;</item>
      <item>éditer les sections <em>start</em>, <em>stop</em>, <em>reload</em>, 
        etc.&nbsp;;</item>
      <item>ajouter une ligne pour monter et démonter le système de fichiers <file>/proc</file>
dans la prison.  </item>
    </list>
<example>
#! /bin/bash
#
# apache	Start the apache HTTP server.
#

CHRDIR=/var/chroot/apache

NAME=apache
PATH=/bin:/usr/bin:/sbin:/usr/sbin
DAEMON=/usr/sbin/apache
SUEXEC=/usr/lib/apache/suexec
PIDFILE=/var/run/$NAME.pid
CONF=/etc/apache/httpd.conf
APACHECTL=/usr/sbin/apachectl 

trap "" 1
export LANG=C
export PATH

test -f $DAEMON || exit 0
test -f $APACHECTL || exit 0

# ensure we don't leak environment vars into apachectl
APACHECTL="env -i LANG=${LANG} PATH=${PATH} $APACHECTL"

if egrep -q -i "^[[:space:]]*ServerType[[:space:]]+inet" $CONF
then
    exit 0
fi

case "$1" in
  start)
    echo -n "Starting web server: $NAME"
    mount -t proc proc /var/chroot/apache/proc
    start-stop-daemon --start --pidfile $PIDFILE --exec $DAEMON \
	--chroot $CHRDIR
    ;;

  stop)
    echo -n "Stopping web server: $NAME"
    start-stop-daemon --stop --pidfile "$CHRDIR/$PIDFILE" --oknodo
    umount /var/chroot/apache/proc
    ;;

  reload)
    echo -n "Reloading $NAME configuration"
    start-stop-daemon --stop --pidfile "$CHRDIR/$PIDFILE" \
	--signal USR1 --startas $DAEMON --chroot $CHRDIR
    ;;

  reload-modules)
    echo -n "Reloading $NAME modules"
    start-stop-daemon --stop --pidfile "$CHRDIR/$PIDFILE" --oknodo \
	--retry 30
    start-stop-daemon --start --pidfile $PIDFILE \
	--exec $DAEMON --chroot $CHRDIR
    ;;

  restart)
    $0 reload-modules
    exit $?
    ;;

  force-reload)
    $0 reload-modules
    exit $?
    ;;

  *)
    echo "Usage: /etc/init.d/$NAME {start|stop|reload|reload-modules|force-reload|restart}"
    exit 1
    ;;
esac

if [ $? == 0 ]; then
	echo .
	exit 0
else
	echo failed
	exit 1
fi
</example>

      <p><em>FIXME</em>: est-ce que le premier processus Apache devrait être
lancé avec un autre utilisateur que root (i.e. ajouter add --chuid chrapach:chrapach)&nbsp;? Désavantage&nbsp;:
chrapach devra avoir un accès en écriture aux journaux, ce qui est étrange.</p>
  </item>

  <item>Remplacez dans <file>/etc/logrotate.d/apache</file>
<tt>/var/log/apache/*.log</tt> par
<tt>/var/chroot/apache/var/log/apache/*.log</tt> </item>

  <item>Démarrez Apache (<prgn>/etc/init.d/apache start</prgn>) et vérifiez ce
qui est indiqué dans les journaux de la prison
(<file>/var/chroot/apache/var/log/apache/error.log</file>). Si votre
configuration est plus complexe (e.g. si vous utilisez également PHP et MySQL),
des fichiers seront probablement manquants. Si certains fichiers ne sont pas
copiés automatiquement par <prgn>makejail</prgn>, vous pouvez les lister dans
les options <em>forceCopy</em> (pour copier les fichiers directement) ou
<em>packages</em> (pour copier les paquets en entier et leurs dépendances) du
fichier de configuration <file>/etc/makejail/apache.py</file>.  </item>

  <item> 
    <p>Entrez <tt>ps aux | grep apache</tt> pour vous assurer qu'Apache
    fonctionne. Vous devriez voir quelque chose comme&nbsp;:
      <example>
      root 180 0.0 1.1 2936 1436 ? S 04:03 0:00 /usr/sbin/apache
      chrapach 189 0.0 1.1 2960 1456 ? S 04:03 0:00 /usr/sbin/apache
      chrapach 190 0.0 1.1 2960 1456 ? S 04:03 0:00 /usr/sbin/apache
      chrapach 191 0.0 1.1 2960 1456 ? S 04:03 0:00 /usr/sbin/apache
      chrapach 192 0.0 1.1 2960 1456 ? S 04:03 0:00 /usr/sbin/apache
      chrapach 193 0.0 1.1 2960 1456 ? S 04:03 0:00 /usr/sbin/apache
      </example>
  </item>

  <item>Assurez-vous que les processus Apache fonctionnent bien dans le chroot
en observant le système de fichiers <file>/proc</file>&nbsp;: <tt>ls -la
/proc/<em>numero_processus</em>/root/.</tt> où <em>numero_processus</em> est
l'un des numéros de PID listés ci-dessus (2e colonne&nbsp;; 189 par exemple)).
Les entrées pour une arborescence restreinte devraient être listées ainsi&nbsp;:
    <example>
    drwxr-sr-x 10 root staff 240 Dec 2 16:06 .
    drwxrwsr-x 4 root staff 72 Dec 2 08:07 ..
    drwxr-xr-x 2 root root 144 Dec 2 16:05 bin
    drwxr-xr-x 2 root root 120 Dec 3 04:03 dev
    drwxr-xr-x 5 root root 408 Dec 3 04:03 etc
    drwxr-xr-x 2 root root 800 Dec 2 16:06 lib
    dr-xr-xr-x 43 root root 0 Dec 3 05:03 proc
    drwxr-xr-x 2 root root 48 Dec 2 16:06 sbin
    drwxr-xr-x 6 root root 144 Dec 2 16:04 usr
    drwxr-xr-x 7 root root 168 Dec 2 16:06 var
    </example>
    <p>Pour automatiser ce test, vous pouvez entrer&nbsp;:<tt>ls -la /proc/`cat
/var/chroot/apache/var/run/apache.pid`/root/.</tt></p>

    <p><em>FIXME</em>: ajouter d'autres tests qui peuvent être exécuter pour
s'assurer que la prison est fermées&nbsp;?</p>
	</item>
</list>

<p>La raison pour laquelle j'aime ceci est que la mise en place d'une prison
n'est pas très difficile et que le serveur peut être mis à jour avec seulement
deux lignes&nbsp;:

<example> 
apt-get update &amp;&amp; apt-get install apache
makejail /etc/makejail/apache.py
</example>

</sect>
<sect>Voir également

<p>Si vous recherchez plus d'informations, vous pouvez envisager ces sources
d'informations dans lesquelles l'information présentée est basée&nbsp;:
<list>

  <item><url id="http://www.floc.net/makejail/" name="page d'accueil de
  makejail">, ce programme a été écrit par Alain Tesio)</item>

<!-- Not appropiate for this section 
  <item><a href="http://www.easter-eggs.org/article242.html">Bind9 chroot&eacute; 
    avec <prgn>makejail</prgn></a>, Pascal Brugier, easter-eggs.org, 21/03/2002</item>
-->

  <item><url id="http://www.networkdweebs.com/chroot.html"
name="Chrooting daemons and system processes"> par Jonathan, Network
Dweebs, 21/10/2002</item>

  <item><url
id="http://www.digitaltoad.net/docs/guide/secure_rh/chap29sec254.html"
name="Apache in a chroot jail"> dans <em>Securing and Optimizing
Linux</em> écrit par Gerhard Mourani,
    2000 </item>
</list>
</sect>
</appendix>


<!-- <sect id="kernel-patch">Ajout de rustines pour le noyau 
     <p>FIXME: More content

<p>Debian GNU/Linux fournit quelques rustines pour le noyau Linux qui améliorent 
sa sécurité. Ceci inclus 

<list>

<item>Linux Intrusion Detection (dans la paquet <package>lids-2.2.19</package>)

<item>Linux Capabilities (dans la paquet <package>lcap</package>)

<item>Linux Trustees (dans la paquet <package>trustees</package>)

<item>NSA Enhanced Linux (dans la paquet <package>selinux</package> also 
available from <url id="http://www.coker.com.au/selinux/" name="the developer's website">)

<item><url name="kernel-patch-2.2.18-openwall"
id="http://packages.debian.org/kernel-patch-2.2.18-openwall">

<item><package>kernel-patch-2.2.19-harden</package>

<item>Linux capabilities (dans la paquet <package>lcap</package>

<item>IPSEC kernel support (dans la paquet <package>kernel-patch-freeswan</package>)

<item><package>kernel-patch-int</package>

</list>
 -->


<!-- 
<p>Il y a aussi un grand nombre de logiciel d'audit de log, sur-site, comme
<package>logcheck</package>. Ces outils peuvent être très utiles s'ils sont
correctement personnalisés pour alerter l'administrateur à propos d'évènements
inhabituels se produisant sur le système de fichier local. <prgn>Logcheck</prgn>
peut être grandement personnalisé, il peut donc envoyer des mails
pour des évènements récupérés par les logs qui sont dignes d'attention.
L'installation par défaut inclus des profiles pour
des évènements ignorés et des violations de police pour trois types d'installation
(station de travail, serveur et paranoïa). Le paquetage Debian inclue un
fichier de configuration <file>/etc/logcheck/logcheck.conf</file>, complété 
par le programme, indiquant à qui sont envoyé les vérifications. Il fournit aussi
une ouverture pour des paquetages qui fournissent  des services pour implémenter
de nouvelles polices dans les répertoires suivant:
<file>/etc/logcheck/hacking.d/_packagename_</file>,
<file>/etc/logcheck/violations.d/_packagename_</file>,
<file>/etc/logcheck/violations.ignore.d/_packagename_</file>,
<file>/etc/logcheck/ignore.d.paranoid/_packagename_</file>,
<file>/etc/logcheck/ignore.d.server/_packagename_</file>, and
<file>/etc/logcheck/ignore.d.workstation/_packagename_</file>. 
Cependant,peu de paquetage font actuellement cela. Si vous possédez une police qui peut être utile
aux autres utilisateurs, envoyez la comme rapport de bug pour le paquetage adéquat.
Pour plus d'information voir
<file>/usr/share/doc/logcheck/README.Debian</file>

 -->


<!-- Local Variables: -->
<!-- mode: flyspell -->
<!-- End: -->
