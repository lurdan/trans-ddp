
<appendix id="harden-step">La procédure de durcissement étape par étape

<!--
# J'ai pris la liberté de changer cette "liste de vérification" par 
# "processus pas à pas" puisque ça n'a pas réellement la forme 
# d'une liste de vérification, et j'ai ajouté une liste de vérification
# différente. Le remaniement est plus pour éviter la confusion que pour 
# autre chose. // era
-->

<p>
Une procédure est toujours utile étant donné qu'elle permet de voir 
les étapes du durcissement du système et permet une prise de décisions.
Une approche possible d'une telle procédure pour Debian 2.2 GNU/Linux est 
présentée ci-dessous. Ceci est une procédure post-installation, avec une 
liste de mesures à prendre en compte, étape par étape, lors de la 
configuration voir <ref id="checklist">. De même que, cette procédure est 
(pour le moment) plus orientée sur le renforcement des services réseaux.

<list>

<item>
Faire une installation du système (tenez compte des informations dans ce 
manuel concernant le partitionnement). Après l'installation de base passez 
dans l'installation traditionnelle, ne sélectionnez pas les paquets "task" 
mais sélectionnez les mots de passe "ombrés".

<item>Passer en revue avec <prgn>dselect</prgn> et retirer les paquets 
non nécessaire mais sélectionnés avant de faire [I]nstall. Laisser le strict 
minimum de logiciels sur le serveur.

<item>Actualiser tous les logiciels à partir des paquets disponibles 
sur security.debian.org comme décrit précédemment dans <ref id="security-update">.

<item>Exécuter les différents problèmes présentés dans ce manuel concernant 
les quotas utilisateur, les logins et lilo.

<item>De façon à renforcer un service, faire une liste de services actifs 
sur votre système.

<example>
$ ps -aux
$ netstat -pn -l -A inet 
# /usr/sbin/lsof -i | grep LISTEN
</example>

Vous devrez installer <package>lsof-2.2</package> pour que la troisième 
commande fonctionne (à lancer en root). Vous devriez faire attention car
lsof peut traduire le mot LISTEN  dans vos paramètres.

<item>Afin de retirer les services non nécessaires, avant tout déterminer 
comment ils sont démarrés et de quels paquets proviennent-ils. Cette 
tâche peut être facilement réalisé en vérifiant le programme qui écoute 
la «&nbsp;socket&nbsp;», l'exemple suivant nous le montre en utilisant ces
outils et <prgn>dpkg</prgn>.
 <!-- traduction de socket nécessaire-->

<example>
#!/bin/sh
# FIXME: this is quick and dirty; replace with a more robust script snippet
for i in `sudo lsof -i | grep LISTEN | cut -d " " -f 1 |sort -u` ; do
        pack=`dpkg -S $i |grep bin |cut -f 1 -d : | uniq`
        echo "Service $i is installed by $pack";
        init=`dpkg -L $pack |grep init.d/ `
        if [ ! -z "$init" ]; then
                 echo "and is run by $init"
        fi
done
</example>

<item>Une fois les services indésirables trouvés, supprimer le paquet (avec
<prgn>dpkg --purge</prgn>) ou utiliser <prgn>update-rc.d</prgn> (voir
 <ref id="disableserv">) de façon à le retirer du système de démarrage.

<item>Pour les services inetd (lancés par le super démon) vous pouvez juste
vérifier les services activés, par exemple avec&nbsp;:

<example>
$ grep -v "^#" /etc/inetd.conf | sort -u
</example>

et désactiver ceux qui ne sont pas nécessaire en commentant les lignes, supprimant 
le paquet ou en utilisant <prgn>update-inetd</prgn>

<item>Si vous avez des services "wrappés" (ceux utilisant <prgn>/usr/sbin/tcpd</prgn>), 
vérifier que <file>/etc/hosts.allow</file> et <file>/etc/hosts.deny</file> sont 
configurés d'après votre politique pour les services.

<item>Si possible, et s'appuyant sur chaque service, vous pouvez avoir 
envie de limiter les services lors d'une utilisation de plusieurs interfaces 
externes afin d'écouter que sur une seule d'entre elles. Par exemple, si vous 
voulez un accès FTP interne, paramétrez le démon FTP afin qu'il écoute 
uniquement l'interface désiré et non toutes les interfaces (c'est-à-dire 
0.0.0.0:21).

<item>Redémarrez la machine ou passer en mode utilisateur seul puis repasser en mode multi-utilisateur avec&nbsp;:
<example>
$ init 1
(....)
$ init 2
</example>
<item>Vérifiez que les services sont maintenant disponibles et, si nécessaire, réitérez les étapes ci-dessus.
<item>Installez maintenant les services nécessaires si vous ne l'avez pas encore fait et configurer les
proprement.
<item>Vérifiez ce que les utilisateurs sont habitués pour lancer les services 
disponibles avec par exemple&nbsp;:
<example>
$ for i in `/usr/sbin/lsof -i |grep LISTEN |cut -d " " -f 1 |sort -u`; do user=`ps -ef |grep $i |grep -v grep |cut -f 1 -d " "` ; echo "Le service $i a été lancé en tant qu'utilisateur $user"; done
</example>

pensez à changer ces services pour un utilisateur/groupe donné et 
peut-être les "chrooté" pour augmenter le niveau de sécurité. Vous pouvez 
procéder en changeant les scripts de démarrage de services de <file>/etc/init.d</file>.
La plupart des services dans la Debian utilisent <prgn>start-stop-daemon</prgn> ainsi 
vous pouvez utiliser les options --change-uid et --chroot pour installer ces 
services. "Chrooter" des services ne rentre pas dans le cadre de ce document mais 
un petit avertissement est nécessaire&nbsp;: vous aurez peut-être besoin de mettre tous les 
fichiers installés par le paquet service en utilisant dpkg -L ainsi que les paquets
dont il dépend dans l'environnement chroot.

<item>Répéter les étapes ci-dessus afin de vérifier que seuls les services
désirés sont lancés avec une combinaison utilisateur/groupe prédéfinie.

<item>Tester les services installés afin de voir si leur fonctionnement est 
bien celui souhaité.

<item>Vérifier le système en utilisant un scanner de vulnérabilités (tel 
<package>nessus</package>) de façon à déterminer les vulnérabilités du système
(mauvaise configuration, services vieux ou indésirables).

<item>Mettre en place des mesures contres les intrusions de toute sorte (réseaux et hôtes) 
(telles que <package>snort</package> et <package>logsentry</package>).

<item>Répéter l'étape du scanner de réseaux et vérifier que le système de détection
d'intrusion fonctionne correctement.

</list>

Pour le vrai paranoïaque, il faut prendre en considération ce qui suit&nbsp;:

<list>

<item>Ajouter au système des possibilités de pare-feux, acceptant les connexions entrantes 
uniquement pour les services définis et limitant les connexions sortantes à celles autorisées.

<item>Revérifier l'installation avec une nouvelle évaluation de vulnérabilité à l'aide 
d'un scanner de réseaux.

<item>Vérifier les connexions sortantes en utilisant un scanner de réseaux depuis le système 
jusqu'à un hôte à l'extérieur et vérifier que les connexions non voulues ne trouvent pas leur
sortie.

</list>


<p>FIXME: cette procédure considère le service harden mais pas le
sytème harden au niveau utilisateur, incluant des informations
à propos de la vérification des permissions utilisateurs,  les fichiers
setuid et le gel des changements dans le système en utilisant
le système de fichier ext2.


<appendix id="checklist">Liste de contrôles des configuration.

<p>Cet appendice récapitule brièvement les points des autres sections de ce manuel sous 
une forme condensée de liste de contrôles. Ceci est un petit résumé pour une personne qui
a déjà lu le manuel.

<!-- FIXME: Add pointer to Unix Security Checklist (CERT) -->

<!-- Order is slightly different from body text. Consider changing text? -->
<!-- (FIXME) -->

<p>FIXME: Ceci est basé sur la version 1.4 du manuel et a peut-être besoin d'une mise à jour.


<list>
<item>Limiter les accès physiques et les possibilités de démarrage.
	      <list>
<item>Activer un mot de passe pour le BIOS.
		<item>Désactiver le démarrage sur disquette/cdrom/...
		    
		<item>Mettre un mot de passe à LILO ou GRUB (respectivement <file>/etc/lilo.conf</file>
ou <file>/boot/grub/menu.lst</file>);
			vérifier que le fichier de configuration de LILO ou de GRUB soit en lecture
			seule.

		<item>Interdire le démarrage par disquette sur le MBR en récrivant par dessus le MBR 
		(peut-être pas&nbsp;?)

	      </list>

<item>Partitionnement
	      <list>
<item>Séparer les données où les utilisateurs peuvent écrire, données non-système, et
		    rapidement changer les données runtime pour leurs propres partitions
		


		<item>Mettre les options de montage <tt>nosuid,noexec,nodev</tt> dans
		    <file>/etc/fstab</file> sur les partitions ext2 tel que /tmp.
	      </list>



<item>Hygiène pour les mots de passes et la sécurité des connexions.
	  	      
	      <list>
<item>Établir un bon mot de passe root.
		<item>Activer les mots de passes ombrés et MD5.
		<item>Installer et utiliser PAM.
		    
		    <list>
<item>Ajouter le support du MD5 à PAM et être sûr que 
			  (de manière générale) les entrées dans les fichiers
			<file>/etc/pam.d/</file> qui ouvrent les droits d'accès
			  à la machine ont un second champs dans
			  le fichier pam.d <!-- ou est ce le troisième? (FIXME:
			  vérifier) --> mettre à "requisite" ou "required".
			  
		      <item>Modifiez <file>/etc/pam.d/login</file> pour que
			  seul le root puisse se loguer localement.

		      <item>Indiquer également les tty:s autorisés dans 
			  <file>/etc/security/access.conf</file> et généralement 
			  limiter le plus possible l'accès à ce fichier par l'utilisateur
			  root.
			  
		      <item>Ajouter pam_limits.so si vous voulez fixer des limites par
			  utilisateur.
			  
		      <item>Modifiez <file>/etc/pam.d/passwd</file>: augmenter la taille minimum
		      	  du mot de passe (6 caractères peut-être).

		      <item>Ajouter le groupe wheel à <file>/etc/group</file> si vous voulez;
			  ajouter l'entrée pam_wheel.so group=wheel au fichier 
			  <file>/etc/pam.d/su</file>.
			  
		      <item>Pour les contrôles d'usage par utilisateur, utiliser les entrées 
		      appropriées dans parm_listfile.so.
		      
		      <item>Avoir un fichier <file>/etc/pam.d/other</file> et mettre en 
		      place une sécurité serrée.

		    </list>
<item>Fixer des limites dans <file>/etc/security/limits.conf</file>
(notez que <file>/etc/limits</file> n'est pas utilisé is vous utiliser
		    PAM)

		<item>Resserrer <file>/etc/login.defs</file>; de même que, si vous 
		activé MD5 et/ou PAM, soyez sûr de faire également les changements ici.
		    
		<item>Désactiver l'accès par ftp à l'utilisateur root dans le fichier
		<file>/etc/ftpusers</file>.
		    
		<item>Désactiver la connexion par réseau de root; use <manref
		    name="su" section="1"> ou <manref name="sudo"
		    section="1">.  (prendre en compte que le paquet
		    <package>sudo</package> soit installé)
		    
		<item>Utiliser PAM pour imposer des contraintes supplémentaires sur 
		les connexions&nbsp;?

	      </list>

<item>Autres problèmes de sécurité locaux 
	      <list>
<item>Modification du noyau
<!-- Traduction nécessaire.Fait. jpg -->
(see <ref id="kernel-conf">)
		    
		<item>Rustines pour noyaux
		    (voir <ref id="kernel-patches">)
		    
		<item>Resserrer les permissions sur les fichiers de logs.
		    (<file>/var/log/{last,fail}log</file>, logs d'Apache)
		    
		<item>Verifier que la vérification de setuid soit active dans 
		    <file>/etc/checksecurity.conf</file>
<item>Penser à créer des fichiers de logs en avec uniquement le droit d'ajout
et des fichiers de configuration invariable en utilisant chattr (système de fichier ext2 uniquement)
<!-- Traduction de append-only nécessaire. Fait. jpg -->

		<item>Mettre en place une vérification d'intégrité des fichiers (voir  <ref
		id="check-integ">).  Installer <package>debsums</package>
<item>Penser à remplacer locate par slocate
		    
		<item>Impression de tous les logs sur une imprimante locale&nbsp;?
		    
		<item>Graver votre configuration sur un CD démarrable et 
		démarrer dessus? <!-- traduction nécessaire. Fait.jpg-->
<item>Désactiver les modules pour le noyau&nbsp;?

	      </list>

<item>Restreindre les accès réseaux
	      <list>

<item>Installer et configurer <prgn>ssh</prgn>
(proposer PermitRootLogin No dans <file>/etc/ssh</file>,
		    PermitEmptyPasswords No;
		    noter d'autre suggestion de texte)
		    
		<item>Envisager la désactivation ou la suppression de in.telnetd.
		    
		<item>Généralement, désactiver les services inutiles dans le fichier 
		<file>/etc/inetd.conf</file> en utilisant <tt>update-inetd
		      --disable</tt> (ou désactiver inetd complètement, ou utiliser une 
		      solution de rechange tel xinetd ou rlinetd).
		    
		<item>Désactiver les autres services inutiles; 
		mail, ftp, DNS, www, etc ne devraient pas être lancés si vous 
		n'en avez pas besoin et veillez à les vérifier régulièrement.
		
		<item>Pour les services dont vous avez besoin, n'utilisez pas 
		uniquement les programmes communs, rechercher des versions plus 
		sécurisées disponibles avec la Debian (ou depuis tout autre source).
		Peu importe celle que vous utiliserez, soyez sûr que vous compreniez
		bien les risques induits.
		
		<item>Mettre en place des prisons chroot pour les utilisateurs et démons extérieurs.

		<item>Configurer pare-feux et tcpwrappers
		    (voir <manref name="hosts_access" section="5">);
		    notez l'astuce pour /etc/hosts.deny 
		    		    
		<item>Si vous utiliser ftp, mettre en place un serveur ftpd qui sera toujours lancé dans 
		un environnement chrooté au répertoire home de l'utilisateur.
		    
		<item>Si vous utiliser X, désactiver l'authentification xhost et utiliser plutôt ssh;
		de façon encore plus sécurisé, désactiver X à distance si vous pouvez (ajouter -nolisten tcp 
		à la ligne se référant à la commande X et mettre hors service XDMCP dans le fichier 
		    <file>/etc/X11/xdm/xdm-config</file> en plaçant la valeur 0 à requestPort).
		    
		<item>Désactivez l'accès aux imprimantes de l'extérieur.
		    
		<item>Encryptez toute session IMAP ou POP via SSL ou SSH;
		installez stunnel si vous voulez fournir ce service pour des utilisateurs distant.
		    
		<item>Mettre en place un hôte de logs et configurer les autres machines afin qu'elles envoient
		les logs à cet hôte (<file>/etc/syslog.conf</file>).
		    
		<item>Sécuriser BIND, Sendmail et tout autre démon complexe 
		    (Lancer dans une prison chroot; lancer en tant qu'utilisateur non root)

		<item>Installer snort ou un outil similaire.
		    
		<item>Faire sans NIS et RPC si vous pouvez (désactiver portmap).
		    
	      </list>
<item>Problèmes de politique
	      <list>
<item>Éduquer les utilisateurs sur le comment et le pourquoi de vos règles.
		Lorsque que vous avez interdit quelque chose qui est généralement 
		disponible sur d'autres systèmes, fournissez leur une documentation qui 
		explique comment arriver aux mêmes résultats d'une manière plus sécurisée.

		<item>Interdire l'utilisation de protocoles qui utilisent des mots 
		de passes en clair (telnet, rsh and friends; ftp, imap, http, ...).
		    
		<item>Interdire les programmes qui utilisent la SVGAlib.
		    
		<item>Utiliser les quotas disques.

	      </list>
<item>Rester informé à propos des problèmes de sécurité
	      <list>
<item>S'abonner aux listes de discussions liées à la sécurité.
		    
		<item>S'abonner aux mises à jour de sécurité -- ajouter une ou des entrées 
		http://security.debian.org/debian-security au fichier 
		<file>/etc/apt/sources.list</file> <item>Se rappeler périodiquement de lancer 
		<prgn>apt-get update ; apt-get upgrade</prgn>
(mettre en place peut-être un job avec cron&nbsp;?) tel décrit dans <ref
		id="security-update">.

	      </list>

</list>

<appendix id="snort-box">Paramétrer un IDS autonome
<!-- Voir la traduction de standalone ! ici je l'ai traduit par dédié mais cela ne me convient pas. J'ai corrigé par autonome. jpg -->

<p>
Vous pouvez facilement mettre en place une bécane Debian autonome pour 
un Système de Détection d'Intrusion en utilisant <package>snort</package>.

<p>Quelques directives&nbsp;:

<list>
<item>Installer un système de base Debian et ne pas sélectionner 
de paquets additionnels.

<item>Télécharger et installer manuellement (avec dpkg) les 
paquets nécessaire (voir la liste de paquets installée ci-dessous).

<item>Télécharger et installer ACID (Analysis Console for
Intrusion Databases).

</list>

<p>
ACID est actuellement empaqueté pour Debian avec <package>acidlab</package>,
qui fournit une interface web graphique à la sortie de snort.
Il peut être téléchargé depuis 
<url id="http://www.cert.org/kb/acid/">, <url
id="http://acidlab.sourceforge.net"> ou <url
id="http://www.andrew.cmu.edu/~rdanyliw/snort/">. 
Vous pourriez avoir envie de lire le 
<url id="http://www.linuxdoc.org/HOWTO/Snort-Statistics-HOWTO/index.html" name="Snort Statistics HOWTO">.

<p>
Vous pouvez paramétrer ce système avec, au moins, deux interfaces&nbsp;:
une interface connecté à un réseau de gestion (pour accéder aux résultats 
et maintenir le système), l'autre interface sans adresse ip lié au segment 
du réseau à analyser.

<p>
De façon à configurer les cartes réseaux sans adresses ip vous ne pouvez pas 
utilisez le fichier standard Debian <file>/etc/network/interfaces</file> étant donné que le programme <prgn>ifup</prgn> et <prgn>ifdown</prgn> attendent plus d'informations que nécessaire. Vous devez faire, simplement,
<tt>ifconfig eth0 up</tt>.

<p>
Vous avez besoin, en outre de l'installation standard Debian, d'Apache, 
MySQL et PHP4 pour faire fonctionner ACID. Paquets téléchargés (Note: 
les versions peuvent différer en fonction de quelle distribution Debian 
vous utilisez, ceux-ci sont de la debian <em>woody</em> de septembre 2001)&nbsp;:

<example>
ACID-0.9.5b9.tar.gz
adduser_3.39_all.deb
apache-common_1.3.20-1_i386.deb
apache_1.3.20-1_i386.deb
debconf_0.9.77_all.deb
dialog_0.9a-20010527-1_i386.deb
fileutils_4.1-2_i386.deb
klogd_1.4.1-2_i386.deb
libbz2-1.0_1.0.1-10_i386.deb
libc6_2.2.3-6_i386.deb
libdb2_2.7.7-8_i386.deb
libdbd-mysql-perl_1.2216-2_i386.deb
libdbi-perl_1.18-1_i386.deb
libexpat1_1.95.1-5_i386.deb
libgdbmg1_1.7.3-27_i386.deb
libmm11_1.1.3-4_i386.deb
libmysqlclient10_3.23.39-3_i386.deb
libncurses5_5.2.20010318-2_i386.deb
libpcap0_0.6.2-1_i386.deb
libpcre3_3.4-1_i386.deb
libreadline4_4.2-3_i386.deb 
libstdc++2.10-glibc2.2_2.95.4-0.010703_i386.deb
logrotate_3.5.4-2_i386.deb
mime-support_3.11-1_all.deb
mysql-client_3.23.39-3_i386.deb
mysql-common_3.23.39-3.1_all.deb
mysql-server_3.23.39-3_i386.deb
perl-base_5.6.1-5_i386.deb
perl-modules_5.6.1-5_all.deb
perl_5.6.1-5_i386.deb
php4-mysql_4.0.6-4_i386.deb
php4_4.0.6-1_i386.deb
php4_4.0.6-4_i386.deb
snort_1.7-9_i386.deb
sysklogd_1.4.1-2_i386.deb
zlib1g_1.1.3-15_i386.deb
</example>

<p>Paquets installés (dpkg -l):
<example>
ii  adduser        3.39
ii  ae             962-26
ii  apache         1.3.20-1
ii  apache-common  1.3.20-1
ii  apt            0.3.19
ii  base-config    0.33.2
ii  base-files     2.2.0
ii  base-passwd    3.1.10
ii  bash           2.03-6
ii  bsdutils       2.10f-5.1
ii  console-data   1999.08.29-11.
ii  console-tools  0.2.3-10.3
ii  console-tools- 0.2.3-10.3
ii  cron           3.0pl1-57.2
ii  debconf        0.9.77
ii  debianutils    1.13.3
ii  dialog         0.9a-20010527-
ii  diff           2.7-21
ii  dpkg           1.6.15
ii  e2fsprogs      1.18-3.0
ii  elvis-tiny     1.4-11
ii  fbset          2.1-6
ii  fdflush        1.0.1-5
ii  fdutils        5.3-3   
ii  fileutils      4.1-2   
ii  findutils      4.1-40
ii  ftp            0.10-3.1
ii  gettext-base   0.10.35-13
ii  grep           2.4.2-1
ii  gzip           1.2.4-33
ii  hostname       2.07
ii  isapnptools    1.21-2
ii  joe            2.8-15.2  
ii  klogd          1.4.1-2   
ii  ldso           1.9.11-9   
ii  libbz2-1.0     1.0.1-10
ii  libc6          2.2.3-6
ii  libdb2         2.7.7-8
ii  libdbd-mysql-p 1.2216-2
ii  libdbi-perl    1.18-1
ii  libexpat1      1.95.1-5
ii  libgdbmg1      1.7.3-27
ii  libmm11        1.1.3-4
ii  libmysqlclient 3.23.39-3
ii  libncurses5    5.2.20010318-2
ii  libnewt0       0.50-7  
ii  libpam-modules 0.72-9
ii  libpam-runtime 0.72-9  
ii  libpam0g       0.72-9
ii  libpcap0       0.6.2-1
ii  libpcre3       3.4-1   
ii  libpopt0       1.4-1.1
ii  libreadline4   4.2-3 
ii  libssl09       0.9.4-5   
ii  libstdc++2.10  2.95.2-13 
ii  libstdc++2.10- 2.95.4-0.01070
ii  libwrap0       7.6-4   
ii  lilo           21.4.3-2
ii  locales        2.1.3-18
ii  login          19990827-20
ii  makedev        2.3.1-46.2
ii  mawk           1.3.3-5
ii  mbr            1.1.2-1 
ii  mime-support   3.11-1 
ii  modutils       2.3.11-13.1
ii  mount          2.10f-5.1
ii  mysql-client   3.23.39-3
ii  mysql-common   3.23.39-3.1
ii  mysql-server   3.23.39-3
ii  ncurses-base   5.0-6.0potato1
ii  ncurses-bin    5.0-6.0potato1
ii  netbase        3.18-4  
ii  passwd         19990827-20
ii  pciutils       2.1.2-2
ii  perl           5.6.1-5   
ii  perl-base      5.6.1-5   
ii  perl-modules   5.6.1-5
ii  php4           4.0.6-4   
ii  php4-mysql     4.0.6-4 
ii  ppp            2.3.11-1.4
ii  pppconfig      2.0.5
ii  procps         2.0.6-5   
ii  psmisc         19-2   
ii  pump           0.7.3-2 
ii  sed            3.02-5 
ii  setserial      2.17-16
ii  shellutils     2.0-7
ii  slang1         1.3.9-1  
ii  snort          1.7-9
ii  ssh            1.2.3-9.3
ii  sysklogd       1.4.1-2
ii  syslinux       1.48-2
ii  sysvinit       2.78-4  
ii  tar            1.13.17-2  
ii  tasksel        1.0-10 
ii  tcpd           7.6-4     
ii  telnet         0.16-4potato.1
ii  textutils      2.0-2  
ii  update         2.11-1    
ii  util-linux     2.10f-5.1
ii  zlib1g         1.1.3-15
</example>

<appendix id="bridge-fw">Setting up a bridge firewall 

<p>This information was contributed by Francois Bayart in order to
help users set up a Linux bridge/firewall with the 2.4.x kernel and
<package>iptables</package>. The only features needed are the bridge
firewall patch, available at <url name="sourceforge download page"
id="http://bridge.sourceforge.net/download.html">.

<p>For example, if you are using a 2.4.18 kernel, first install the
kernel source package, then download the <url name="patch"
id="http://bridge.sourceforge.net/devel/bridge-nf/bridge-nf-0.0.6-against-2.4.18.diff">
and apply it, as shown in this example:

<example>
Zipowz:/usr/src# apt-get install kernel-source-2.4.18
Zipowz:/usr/src# cd kernel-source-2.4.18
Zipowz:/usr/src/kernel-source-2.4.18# patch -p1 < ../bridge-nf-0.0.6-against-2.4.18.diff 
patching file include/linux/netfilter.h
patching file include/linux/netfilter_ipv4.h
patching file include/linux/skbuff.h
patching file net/bridge/br.c
patching file net/bridge/br_forward.c
patching file net/bridge/br_input.c
patching file net/bridge/br_netfilter.c
patching file net/bridge/br_private.h
patching file net/bridge/Makefile
patching file net/Config.in
patching file net/core/netfilter.c
patching file net/core/skbuff.c
patching file net/ipv4/ip_output.c
patching file net/ipv4/netfilter/ip_tables.c
patching file net/ipv4/netfilter/ipt_LOG.c
</example>

<p>Now, configure the kernel (i.e., <tt>make menuconfig</tt>, 
<tt>make xconfig</tt>). In the section <em>Networking options</em>, enable the 
following options:

<example>
[*] Network packet filtering (replaces ipchains)
[ ]   Network packet filtering debugging (NEW)
<*> 802.1d Ethernet Bridging
[*]   netfilter (firewalling) support (NEW)
</example>

<p>Caution: you must disable this if you want to apply some
firewalling rules or else <prgn>iptables</prgn> will not work.

<example>
[ ]   Network packet filtering debugging (NEW)
</example>

<p>Next, add the correct options in the section <em>IP: Netfilter
Configuration</em>. Then, compile and install the kernel. If you want
to do it the <em>Debian way</em>, install
<package>kernel-package</package> and run <prgn>make-kpkg</prgn> to
create a custom Debian kernel package you can install on your server
using dpkg. Once the new kernel is compiled and installed, install the
<package>bridge-utils</package> package.

<p>Once these steps are complete, you can complete the configuration
of your bridge. The next section presents two different possible
configurations for the bridge, each with a hypothetical network map
and the necessary commands.

<sect>A bridge providing NAT and firewall capabilities

<p>The first configuration uses the bridge as a firewall with network
address translation (NAT) that protects a server and internal LAN
clients. A diagram of the network configuration is shown below:

<example>
Internet ---- router ( 62.3.3.25 ) ---- bridge (62.3.3.26 gw 62.3.3.25 / 192.168.0.1)
                                          |
                                          |
                                          |---- WWW Server (62.3.3.27 gw 62.3.3.25)
                                          |
                                          |
                                         LAN --- Zipowz (192.168.0.2 gw 192.168.0.1)
</example>

<p>The following commands show how this bridge can be configured.

<example>
# Create the interface br0
/usr/sbin/brctl addbr br0

# Add the Ethernet interface to use with the bridge
/usr/sbin/brctl addif br0 eth0
/usr/sbin/brctl addif br0 eth1

# Start up the Ethernet interface
/sbin/ifconfig eth0 0.0.0.0
/sbin/ifconfig eth1 0.0.0.0

# Configure the bridge ethernet
# The bridge will be correct and invisible ( transparent firewall ).
# It's hidden in a traceroute and you keep your real gateway on the 
# other computers. Now if you want you can config a gateway on your 
# bridge and choose it as your new gateway for the other computers.

/sbin/ifconfig br0 62.3.3.26 netmask 255.255.255.248 broadcast 62.3.3.32

# I have added this internal IP to create my NAT 
ip addr add 192.168.0.1/24 dev br0
/sbin/route add default gw 62.3.3.25
</example>

<sect>A bridge providing firewall capabilities

<p>A second possible configuration is a system that is set up as a
transparent firewall for a LAN with a public IP address space.

<example>
Internet ---- router (62.3.3.25) ---- bridge (62.3.3.26)
                                        |
                                        |
                                        |---- WWW Server (62.3.3.28 gw 62.3.3.25)
                                        |
                                        |
                                        |---- Mail Server (62.3.3.27 gw 62.3.3.25)
</example>

<p>The following commands show how this bridge can be configured.

<example>
# Create the interface br0
/usr/sbin/brctl addbr br0

# Add the Ethernet interface to use with the bridge
/usr/sbin/brctl addif br0 eth0
/usr/sbin/brctl addif br0 eth1

# Start up the Ethernet interface
/sbin/ifconfig eth0 0.0.0.0
/sbin/ifconfig eth1 0.0.0.0

# Configure the bridge Ethernet
# The bridge will be correct and invisible ( transparent firewall ).
# It's hidden in a traceroute and you keep your real gateway on the 
# other computers. Now if you want you can config a gateway on your
# bridge and choose it as your new gateway for the other computers.

/sbin/ifconfig br0 62.3.3.26 netmask 255.255.255.248 broadcast 62.3.3.32
</example>

<p>If you traceroute the Linux Mail Server, you won't see the bridge.
If you want access to the bridge with <prgn>ssh</prgn>, you must have
a gateway or you must first connect to another server, such as the
"Mail Server", and then connect to the bridge through the internal
network card.</p>

<sect>Basic IPtables rules

<p>This is an example of the basic rules that could be used for either of these
setups.

<example>
  iptables -F FORWARD
  iptables -P FORWARD DROP
  iptables -A FORWARD -s 0.0.0.0/0.0.0.0 -d 0.0.0.0/0.0.0.0 -m state --state INVALID -j DROP
  iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT

  # Some funny rules but not in a classic Iptables sorry ...
  # Limit ICMP 
  # iptables -A FORWARD -p icmp -m limit --limit 4/s -j ACCEPT
  # Match string, a good simple method to block some VIRUS very quickly
  # iptables -I FORWARD -j DROP -p tcp -s 0.0.0.0/0 -m string --string "cmd.exe"

  # Block all MySQL connection just to be sure
  iptables -A FORWARD -p tcp -s 0/0 -d 62.3.3.0/24 --dport 3306 -j DROP

  # Linux Mail Server Rules

  # Allow FTP-DATA ( 20 ) , FTP ( 21 ) , SSH ( 22 ) 
  iptables -A FORWARD -p tcp -s 0.0.0.0/0 -d 62.3.3.27/32 --dport 20:22 -j ACCEPT

  # Allow the Mail Server to connect to the outside
  # Note: This is *not* needed for the previous connections 
  # (remember: stateful filtering) and could be removed.
  iptables -A FORWARD -p tcp -s 62.3.3.27/32 -d 0/0 -j ACCEPT

  # WWW Server Rules

  # Allow HTTP ( 80 ) connections with the WWW server
  iptables -A FORWARD -p tcp -s 0.0.0.0/0 -d 62.3.3.28/32 --dport 80 -j ACCEPT

  # Allow HTTPS ( 443 ) connections with the WWW server
  iptables -A FORWARD -p tcp -s 0.0.0.0/0 -d 62.3.3.28/32 --dport 443 -j ACCEPT

  # Allow the WWW server to go out
  # Note: This is *not* needed for the previous connections 
  # (remember: stateful filtering) and could be removed.
  iptables -A FORWARD -p tcp -s 62.3.3.28/32 -d 0/0 -j ACCEPT
</example>

<!-- A DÉPLACER -->

<appendix id="bind-chuser">Sample script to change the default Bind installation.

<p>This script automates the procedure for changing the
<prgn>bind</prgn> name server's default installation so that it does
<em>not</em> run as the superuser. It will create the user and groups
to be used for the name server. Use with extreme care since it has not
been tested thoroughly.

<example>
  #!/bin/sh
  # Change the default Debian bind configuration to have it run
  # with a non-root user and group.
  #
  # WARN: This script has not been tested throughly, please
  # verify the changes made to the INITD script

  # (c) 2002 Javier Fernandez-Sanguino Peña
  #
  #    This program is free software; you can redistribute it and/or modify
  #    it under the terms of the GNU General Public License as published by
  #    the Free Software Foundation; either version 1, or (at your option)
  #    any later version.
  #
  #    This program is distributed in the hope that it will be useful,
  #    but WITHOUT ANY WARRANTY; without even the implied warranty of
  #    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  #    GNU General Public License for more details.
  #
  #     Please see the file `COPYING' for the complete copyright notice.
  #

  restore() {
  # Just in case, restore the system if the changes fail
	  echo "WARN: Restoring to the previous setup since I'm unable to properly change it."
	  echo "WARN: Please check the $INITDERR script."
	  mv $INITD $INITDERR
	  cp $INITDBAK $INITD
  }


  USER=named
  GROUP=named
  INITD=/etc/init.d/bind
  INITDBAK=$INITD.preuserchange
  INITDERR=$INITD.changeerror
  START="start-stop-daemon --start --quiet --exec /usr/sbin/named -- -g $GROUP -u $USER"
  AWKS="awk ' /start-stop-daemon --start/ { print \"$START\"; noprint = 1; }; /\/usr\/sbin\/ndc reload/ { print \"stop; sleep 2; start;\"; noprint = 1; } /\\\\$/ { if ( noprint != 0 ) { noprint = noprint + 1;} } /^.*$/ { if ( noprint != 0 ) { noprint = noprint - 1; } else { print \$0; } } '"

  [ `id -u` -ne 0 ] && {
	  echo "This program must be run by the root user"
	  exit 1
  }

  RUNUSER=`ps -eo user,fname |grep named |cut -f 1 -d " "`

  if [ "$RUNUSER" = "$USER" ] 
  then
	  echo "WARN: The name server running daemon is already running as $USER"
	  echo "ERR:  This script will not many any changes to your setup."
	  exit 1
  fi
  if [ ! -f $INITD ]
  then
	  echo "ERR:  This system does not have $INITD (which this script tries to change)"
	  RUNNING=`ps -eo fname |grep named`
	   [ -z "$RUNNING" ] && \
	      echo "ERR:  In fact the name server daemon is not even running (is it installed?)"
	   echo "ERR:  No changes will be made to your system"
	  exit 1
  fi

  # Check if named group exists
  if [ -z "`grep $GROUP /etc/group`" ] 
  then
	  echo "Creating group $GROUP:"
	  addgroup $GROUP
  else
	  echo "WARN: Group $GROUP already exists. Will not create it"
  fi
  # Same for the user
  if [ -z "`grep $USER /etc/passwd`" ] 
  then
	  echo "Creating user $USER:"
	  adduser --system --home /home/$USER \
	  --no-create-home --ingroup $GROUP \
	  --disabled-password --disabled-login $USER
  else
	  echo "WARN: The user $USER already exists. Will not create it"
  fi

  # Change the init.d script

  # First make a backup (check that there is not already
  # one there first)
  if [ ! -f $INITDBAK ] 
  then
	  cp $INITD $INITDBAK
  fi

  # Then use it to change it
  cat $INITDBAK |
  eval $AWKS > $INITD

  echo "WARN: The script $INITD has been changed, trying to test the changes."
  echo "Restarting the named daemon (check for errors here)."

  $INITD restart
  if [ $? -ne 0 ] 
  then
	  echo "ERR:  Failed to restart the daemon."
	  restore
	  exit 1
  fi

  RUNNING=`ps -eo fname |grep named`
  if [ -z "$RUNNING" ] 
  then
	  echo "ERR:  Named is not running, probably due to a problem with the changes."
	  restore
	  exit 1
  fi

  # Check if it's running as expected
  RUNUSER=`ps -eo user,fname |grep named |cut -f 1 -d " "`

  if [ "$RUNUSER" = "$USER" ] 
  then
	  echo "All has gone well, named seems to be running now as $USER."
  else
	  echo "ERR:  The script failed to automatically change the system."
	  echo "ERR:  Named is currently running as $RUNUSER."
	  restore
	  exit 1
  fi

  exit 0
</example>

<p>The previous script, run on Woody's (Debian 3.0) custom
<prgn>bind</prgn>, will produce the following initd file after
creating the 'named' user and group:

<example>
  #!/bin/sh

  PATH=/sbin:/bin:/usr/sbin:/usr/bin

  test -x /usr/sbin/named || exit 0

  start () {
	  echo -n "Starting domain name service: named"
	  start-stop-daemon --start --quiet \
	      --pidfile /var/run/named.pid --exec /usr/sbin/named 
	  echo "."	
  }

  stop () {
	  echo -n "Stopping domain name service: named"
	  # --exec doesn't catch daemons running deleted instances of named,
	  # as in an upgrade.  Fortunately, --pidfile is only going to hit
	  # things from the pidfile.
	  start-stop-daemon --stop --quiet  \
	      --pidfile /var/run/named.pid --name named
	  echo "."	
  }

  case "$1" in
      start)
	  start
      ;;

      stop)
	  stop
      ;;

      restart|force-reload)
	  stop
	  sleep 2
	  start
      ;;

      reload)
	  /usr/sbin/ndc reload
      ;;

      *)
	  echo "Usage: /etc/init.d/bind {start|stop|reload|restart|force-reload}" >&2
	  exit 1
      ;;
  esac

  exit 0
</example>

<appendix id="fw-security-update">Security update protected by a firewall

<p>After a standard installation, a system may still have some
security vulnerabilities. Unless you can download updates for the
vulnerable packages on another system (or you have mirrored
security.debian.org for local use), the system will have to be
connected to the Internet for the downloads.

<p>However, as soon as you connect to the Internet you are exposing
this system. If one of your local services is vulnerable, you might be
compromised even before the update is finished! This may seem paranoid
but, in fact, analysis from the <url id="http://www.honeynet.org"
name="Honeynet Project"> has shown that systems can be compromised in
less than three days, even if the system is not publicly known (i.e.,
not published in DNS records).

<p>When doing an update on a system not protected by an external
system like a firewall, it is possible to properly configure your
local firewall to restrict connections involving only the security
update itself. The example below shows how to set up such local
firewall capabilities, which allow connections from
security.debian.org only, logging all others.

<p>FIXME: add IP address for security.debian.org (since otherwise you
need DNS up to work) on /etc/hosts.

<p>FIXME: test this setup to see if it works properly

<p>FIXME: this will only work with HTTP URLs since ftp might need 
the ip_conntrack_ftp module, or use passive mode.

<!-- FIXME: this is probably not needed, after all it is a packet inspection 
     fw: -->
<!-- # iptables -A INPUT -s security.debian.org -p 80 -j ACCEPT -->

<example>
  # iptables -F
  # iptables -L
  Chain INPUT (policy ACCEPT)
  target     prot opt source               destination

  Chain FORWARD (policy ACCEPT)
  target     prot opt source               destination

  Chain OUTPUT (policy ACCEPT)
  target     prot opt source               destination
  # iptables -P INPUT DROP
  # iptables -P FORWARD DROP
  # iptables -P OUTPUT DROP
  # iptables -A OUTPUT -d security.debian.org -p 80 -j ACCEPT
  # iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
  # iptables -A INPUT -p icmp -j ACCEPT
  # iptables -A INPUT -j LOG
  # iptables -A OUTPUT -j LOG
  # iptables -L
  Chain INPUT (policy DROP)
  target     prot opt source               destination
  ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0          state RELATED,ESTABLISHED
  ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0
  LOG        all  --  anywhere             anywhere           LOG level warning

  Chain FORWARD (policy DROP)
  target     prot opt source               destination

  Chain OUTPUT (policy DROP)
  target     prot opt source               destination
  ACCEPT     80   --  anywhere             security.debian.org
  LOG        all  --  anywhere             anywhere           LOG level warning
</example>

<appendix>Utilisation de chroot
<!-- sect id="chroot" -->

<p><prgn>chroot</prgn> est une des possibilités les plus puissantes pour
restreindre un démon ou un utilisateur ou un autre service. Imaginez juste
une prison autour de votre cible, dont votre cible ne peut s'échapper
(normalement, mais il y a encore beaucoup de conditions qui permettent de
s'échapper d'une telle prison). Si vous ne faites pas confiance à un utilisateur,
vous pouvez créer un environnement à racine modifiée pour lui. Cela peut utiliser
pas mal d'espace disque comme vous avez besoin de copier tous les exécutables
nécessaires, ainsi que les librairies, dans la prison. Même si l'utilisateur
fait quelque chose de malveillant, la portée des dégâts sera limitée à la prison.

<p>Un bon exemple pour ce cas est, si vous n'authentifiez pas avec 
<file>/etc/passwd</file> mais utilisez LDAP ou MySQL à la place. Donc votre
daemon-ftp a seulement besoin d'un binaire et peut être de quelques librairies.
Un environnement chrooté serait une excellent amélioration de la sécurité&nbsp;;
si un nouvel exploit est découvert pour ce daemon-ftp, alors les attaquants 
pourront seulement exploiter l'UID de l'utilisateur-daemon-ftp et rien d'autre.

<p>Bien sur, beaucoup d'autres démons pourraient bénéficier de ce genre
d'aménagement aussi.

<p>Cependant, soyez averti qu'une prison chroot peut être brisée si
l'utilisateur qui y évolue est le super-utilisateur. Donc, vous devez
faire s'exécuter le service comme un utilisateur non-privilégié. En
limitant son environnement vous limitez les fichiers lisibles/inscriptibles
par tout le monde auxquels le service peut accéder, ainsi, vous limitez les
possibilités d'élévation de privilège en utilisant des vulnérabilités du
système local. Même si dans cette situation vous ne pouvez être complètement
sur qu'il n'y a aucun moyen pour un attaquant intelligent de s'échapper d'une
façon ou d'une autre de la prison. L'utilisation des seuls programmes serveurs
qui ont la réputation d'être surs est une bonne mesure de sécurité supplémentaire.
Même des failles minuscules comme des références de fichier ouverts peuvent être
utilisées par un attaquant talentueux pour s'introduire dans le système. Après
tout <prgn>chroot</prgn> n'a pas été conçu comme un outil de sécurité mais comme
un outil de test.

<!-- FIXME: Cette information devra être vérifiée quand woody sortira -->
<!-- AA : Service de nom Internet ? serveur de résolution de nom) -->

<p>Note additionnelle, le BIND par défaut de la Debian (le service de nom 
Internet) n'est pas livré chrooté par défaut; en fait, aucun démon n'est
chrooté. Cela pourrait changer dans la version woody (3.0).

<!-- Il faudrait peut etre signifier ici que BIND est un outil très vulnérable.
il est impératif de mettre les dernières mises à jour? jpg -->

<p>Il y a aussi des logiciels (pas dans la Debian actuellement mais qui pourraient
fournis dans le futur) qui peuvent aider à configurer des environnements chroot.
<prgn>makejail</prgn> par exemple, peut créer et mettre à jour une prison chroot
avec de petits fichiers de configuration. il essaie aussi de deviner et 
<!-- AA ou peu de fichiers ? -->
d'installer dans la prison tous les fichiers requis par le démon.
Plus d'information à <url id="http://www.floc.net/makejail/">. <prgn>Jailer</prgn> est un outil similaire qui peut être récupéré sur 
<url id="http://www.balabit.hu/downloads/jailer/">


<appendix id="chroot-ssh-env"><Prgn>Chroot</Prgn> environment for <PRGN>SSH</PRGN>

<p>Creating a restricted environment for <PRGN>SSH</PRGN> is a tough job due 
to its dependencies and the fact that, unlike other servers, <PRGN>SSH</PRGN> 
provides a remote shell to users. Thus, you will also have to consider the
applications users will be allowed to use in the environment. If you create 
this file structure in, for example <file>/var/chroot/ssh</file>, you could 
start the <prgn>ssh</prgn> server <prgn>chroot</prgn>'ed with this command:

<example>
  # chroot /var/chroot/ssh /sbin/sshd -f /etc/sshd_config
</example>

<sect>Automatically making the environment (the easy way)

<p>You can easily create a restricted environment with the
<package>makejail</package> package, since it automatically takes care
of tracing the server daemon (with <prgn>strace</prgn>), and makes it
run under the restricted environment.

<p>The advantage of programs that automatically generate <prgn>chroot</prgn>
environments is that they are capable of copying any package to the
<prgn>chroot</prgn> environment (even following the package's dependencies and
making sure it's complete). Thus, providing user applications is easier.

<p>To set up the environment using <prgn>makejail</prgn>'s provided
examples, just use the command:

<example>
  # makejail /usr/share/doc/makejail/examples/sshd.py
</example>

<p>Read the sample file to see what other changes need to be made to
the environment. Some of these changes, such as copying user's home
directories, cannot be done automatically. Also, limit the exposure of
sensitive information by only copying the data from a given number of
users from the files <file>/etc/shadow</file> or
<file>/etc/group</file>.

<p>The following sample environment has been (slightly) tested and is
built with the configuration file provided in the package and includes
the <package>fileutils</package> package:

<example>
.
|-- bin
|   |-- ash
|   |-- bash
|   |-- chgrp
|   |-- chmod
|   |-- chown
|   |-- cp
|   |-- csh -> /etc/alternatives/csh
|   |-- dd
|   |-- df
|   |-- dir
|   |-- fdflush
|   |-- ksh
|   |-- ln
|   |-- ls
|   |-- mkdir
|   |-- mknod
|   |-- mv
|   |-- rbash -> bash
|   |-- rm
|   |-- rmdir
|   |-- sh -> bash
|   |-- sync
|   |-- tcsh
|   |-- touch
|   |-- vdir
|   |-- zsh -> /etc/alternatives/zsh
|   `-- zsh4
|-- dev
|   |-- null
|   |-- ptmx
|   |-- pts
|   |-- ptya0
(...)
|   |-- tty
|   |-- tty0
(...)
|   `-- urandom
|-- etc
|   |-- alternatives
|   |   |-- csh -> /bin/tcsh
|   |   `-- zsh -> /bin/zsh4
|   |-- environment
|   |-- hosts
|   |-- hosts.allow
|   |-- hosts.deny
|   |-- ld.so.conf
|   |-- localtime -> /usr/share/zoneinfo/Europe/Madrid
|   |-- motd
|   |-- nsswitch.conf
|   |-- pam.conf
|   |-- pam.d
|   |   |-- other
|   |   `-- ssh
|   |-- passwd
|   |-- resolv.conf
|   |-- security
|   |   |-- access.conf
|   |   |-- chroot.conf
|   |   |-- group.conf
|   |   |-- limits.conf
|   |   |-- pam_env.conf
|   |   `-- time.conf
|   |-- shadow
|   |-- shells
|   `-- ssh
|       |-- moduli
|       |-- ssh_host_dsa_key
|       |-- ssh_host_dsa_key.pub
|       |-- ssh_host_rsa_key
|       |-- ssh_host_rsa_key.pub
|       `-- sshd_config
|-- home
|   `-- userX
|-- lib
|   |-- ld-2.2.5.so
|   |-- ld-linux.so.2 -> ld-2.2.5.so
|   |-- libc-2.2.5.so
|   |-- libc.so.6 -> libc-2.2.5.so
|   |-- libcap.so.1 -> libcap.so.1.10
|   |-- libcap.so.1.10
|   |-- libcrypt-2.2.5.so
|   |-- libcrypt.so.1 -> libcrypt-2.2.5.so
|   |-- libdl-2.2.5.so
|   |-- libdl.so.2 -> libdl-2.2.5.so
|   |-- libm-2.2.5.so
|   |-- libm.so.6 -> libm-2.2.5.so
|   |-- libncurses.so.5 -> libncurses.so.5.2
|   |-- libncurses.so.5.2
|   |-- libnsl-2.2.5.so
|   |-- libnsl.so.1 -> libnsl-2.2.5.so
|   |-- libnss_compat-2.2.5.so
|   |-- libnss_compat.so.2 -> libnss_compat-2.2.5.so
|   |-- libnss_db-2.2.so
|   |-- libnss_db.so.2 -> libnss_db-2.2.so
|   |-- libnss_dns-2.2.5.so
|   |-- libnss_dns.so.2 -> libnss_dns-2.2.5.so
|   |-- libnss_files-2.2.5.so
|   |-- libnss_files.so.2 -> libnss_files-2.2.5.so
|   |-- libnss_hesiod-2.2.5.so
|   |-- libnss_hesiod.so.2 -> libnss_hesiod-2.2.5.so
|   |-- libnss_nis-2.2.5.so
|   |-- libnss_nis.so.2 -> libnss_nis-2.2.5.so
|   |-- libnss_nisplus-2.2.5.so
|   |-- libnss_nisplus.so.2 -> libnss_nisplus-2.2.5.so
|   |-- libpam.so.0 -> libpam.so.0.72
|   |-- libpam.so.0.72
|   |-- libpthread-0.9.so
|   |-- libpthread.so.0 -> libpthread-0.9.so
|   |-- libresolv-2.2.5.so
|   |-- libresolv.so.2 -> libresolv-2.2.5.so
|   |-- librt-2.2.5.so
|   |-- librt.so.1 -> librt-2.2.5.so
|   |-- libutil-2.2.5.so
|   |-- libutil.so.1 -> libutil-2.2.5.so
|   |-- libwrap.so.0 -> libwrap.so.0.7.6
|   |-- libwrap.so.0.7.6
|   `-- security
|       |-- pam_access.so
|       |-- pam_chroot.so
|       |-- pam_deny.so
|       |-- pam_env.so
|       |-- pam_filter.so
|       |-- pam_ftp.so
|       |-- pam_group.so
|       |-- pam_issue.so
|       |-- pam_lastlog.so
|       |-- pam_limits.so
|       |-- pam_listfile.so
|       |-- pam_mail.so
|       |-- pam_mkhomedir.so
|       |-- pam_motd.so
|       |-- pam_nologin.so
|       |-- pam_permit.so
|       |-- pam_rhosts_auth.so
|       |-- pam_rootok.so
|       |-- pam_securetty.so
|       |-- pam_shells.so
|       |-- pam_stress.so
|       |-- pam_tally.so
|       |-- pam_time.so
|       |-- pam_unix.so
|       |-- pam_unix_acct.so -> pam_unix.so
|       |-- pam_unix_auth.so -> pam_unix.so
|       |-- pam_unix_passwd.so -> pam_unix.so
|       |-- pam_unix_session.so -> pam_unix.so
|       |-- pam_userdb.so
|       |-- pam_warn.so
|       `-- pam_wheel.so
|-- sbin
|   `-- start-stop-daemon
|-- usr
|   |-- bin
|   |   |-- dircolors
|   |   |-- du
|   |   |-- install
|   |   |-- link
|   |   |-- mkfifo
|   |   |-- shred
|   |   |-- touch -> /bin/touch
|   |   `-- unlink
|   |-- lib
|   |   |-- libcrypto.so.0.9.6
|   |   |-- libdb3.so.3 -> libdb3.so.3.0.2
|   |   |-- libdb3.so.3.0.2
|   |   |-- libz.so.1 -> libz.so.1.1.4
|   |   `-- libz.so.1.1.4
|   |-- sbin
|   |   `-- sshd
|   `-- share
|       |-- locale
|       |   `-- es
|       |       |-- LC_MESSAGES
|       |       |   |-- fileutils.mo
|       |       |   |-- libc.mo
|       |       |   `-- sh-utils.mo
|       |       `-- LC_TIME -> LC_MESSAGES
|       `-- zoneinfo
|           `-- Europe
|               `-- Madrid
`-- var
    `-- run
        |-- sshd
        `-- sshd.pid

27 directories, 733 files
</example>

<appendix>Restriction de ssh pour les utilisateurs

<p>
Le serveur sshd de Debian ne vous autorisera pas à restreindre les mouvements 
des utilisateurs via le serveur étant donné que celui-ci est dépourvu de la 
fonction Chroot que la version commerciale (sshd2) possède (utilisation de 
"ChrootGroups" ou "ChrootUsers", voir <manref name="sshd2_config" section="5">). 
Toutefois, une rustine est disponible afin de vous permettre de le faire, elle 
peut être trouvée depuis 
<url id="http://bugs.debian.org/139047" name="Bug report 139047"> ou
<url id="http://www.cag.lcs.mit.edu/~raoul/"> (et sera peut-être appliquée 
au paquet OpenSSH dans le futur). Emmanuel <!-- Il ne manque pas un m a emmanuel
la? jpg --> Lacour dispose d'un paquet avec 
cette fonctionnalité sur <url id="http://debian.home-dn.net/woody/ssh/">, 
quoique la compilation est recommandée. Une description de toutes les étapes 
nécessaires peut-être aperçue sur 
<url id="http://mail.incredimail.com/howto/openssh/"> (pratiquement tout est 
applicable à Debian même s'il est question de la RedHat 7.2).
Après l'application de la rustine, vous devez juste modifier le 
<file>/etc/passwd</file> en changeant le chemin personnel des utilisateurs 
(avec le jeton spécial <tt>/./</tt>):

<example>
joeuser:x:1099:1099:Joe Random User:/home/joe/./:/bin/bash
</example>

<p>
<em>Tous deux</em>, aussi bien les accès distants au shell que la copie via 
le tunnel ssh, seront restreints.

<p>
Il faut être sûr que tous les binaires et librairies soient présents dans le 
chemin chrooté pour les utilisateurs. Ces fichiers devraient appartenir à 
root pour éviter les fraudes de l'utilisateur (tel la sortie d'une prison chrooté).
Un échantillon pourrait inclure ceci&nbsp;:

<example>
./bin:
total 660
drwxr-xr-x    2 root     root         4096 Mar 18 13:36 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
-r-xr-xr-x    1 root     root       531160 Feb  6 22:36 bash
-r-xr-xr-x    1 root     root        43916 Nov 29 13:19 ls
-r-xr-xr-x    1 root     root        16684 Nov 29 13:19 mkdir
-rwxr-xr-x    1 root     root        23960 Mar 18 13:36 more
-r-xr-xr-x    1 root     root         9916 Jul 26  2001 pwd
-r-xr-xr-x    1 root     root        24780 Nov 29 13:19 rm
lrwxrwxrwx    1 root     root            4 Mar 30 16:29 sh -> bash

./etc:
total 24
drwxr-xr-x    2 root     root         4096 Mar 15 16:13 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
-rw-r--r--    1 root     root           54 Mar 15 13:23 group
-rw-r--r--    1 root     root          428 Mar 15 15:56 hosts
-rw-r--r--    1 root     root           44 Mar 15 15:53 passwd
-rw-r--r--    1 root     root           52 Mar 15 13:23 shells

./lib:
total 1848
drwxr-xr-x    2 root     root         4096 Mar 18 13:37 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
-rwxr-xr-x    1 root     root        92511 Mar 15 12:49 ld-linux.so.2
-rwxr-xr-x    1 root     root      1170812 Mar 15 12:49 libc.so.6
-rw-r--r--    1 root     root        20900 Mar 15 13:01 libcrypt.so.1
-rw-r--r--    1 root     root         9436 Mar 15 12:49 libdl.so.2
-rw-r--r--    1 root     root       248132 Mar 15 12:48 libncurses.so.5
-rw-r--r--    1 root     root        71332 Mar 15 13:00 libnsl.so.1
-rw-r--r--    1 root     root        34144 Mar 15 16:10
libnss_files.so.2
-rw-r--r--    1 root     root        29420 Mar 15 12:57 libpam.so.0
-rw-r--r--    1 root     root       105498 Mar 15 12:51 libpthread.so.0
-rw-r--r--    1 root     root        25596 Mar 15 12:51 librt.so.1
-rw-r--r--    1 root     root         7760 Mar 15 12:59 libutil.so.1
-rw-r--r--    1 root     root        24328 Mar 15 12:57 libwrap.so.0

./usr:
total 16
drwxr-xr-x    4 root     root         4096 Mar 15 13:00 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
drwxr-xr-x    2 root     root         4096 Mar 15 15:55 bin
drwxr-xr-x    2 root     root         4096 Mar 15 15:37 lib

./usr/bin:
total 340
drwxr-xr-x    2 root     root         4096 Mar 15 15:55 .
drwxr-xr-x    4 root     root         4096 Mar 15 13:00 ..
-rwxr-xr-x    1 root     root        10332 Mar 15 15:55 env
-rwxr-xr-x    1 root     root        13052 Mar 15 13:13 id
-r-xr-xr-x    1 root     root        25432 Mar 15 12:40 scp
-rwxr-xr-x    1 root     root        43768 Mar 15 15:15 sftp
-r-sr-xr-x    1 root     root       218456 Mar 15 12:40 ssh
-rwxr-xr-x    1 root     root         9692 Mar 15 13:17 tty

./usr/lib:
total 852
drwxr-xr-x    2 root     root         4096 Mar 15 15:37 .
drwxr-xr-x    4 root     root         4096 Mar 15 13:00 ..
-rw-r--r--    1 root     root       771088 Mar 15 13:01
libcrypto.so.0.9.6
-rw-r--r--    1 root     root        54548 Mar 15 13:00 libz.so.1
-rwxr-xr-x    1 root     root        23096 Mar 15 15:37 sftp-server
</example>

<sect>Handmade environment (the hard way)

<p>It is possible to create an environment, using a trial-and-error
method, by monitoring the <prgn>sshd</prgn> server traces and log
files in order to determine the necessary files. The following
environment, contributed by José Luis Ledesma, is a sample listing of
files in a <prgn>chroot</prgn> environment for <prgn>ssh</prgn>:

<footnote>
Notice that there are no SETUID files. This makes it more difficult
for remote users to escape the <prgn>chroot</prgn>
environment. However, it also prevents users from changing their
passwords, since the <prgn>passwd</prgn> program cannot modify the
files <file>/etc/passwd</file> or <file>/etc/shadow</file>.
</footnote>

<example>
.:
total 36
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ./
drwxr-xr-x 11 root root 4096 Jun 3 13:43 ../
drwxr-xr-x 2 root root 4096 Jun 4 12:13 bin/
drwxr-xr-x 2 root root 4096 Jun 4 12:16 dev/
drwxr-xr-x 4 root root 4096 Jun 4 12:35 etc/
drwxr-xr-x 3 root root 4096 Jun 4 12:13 lib/
drwxr-xr-x 2 root root 4096 Jun 4 12:35 sbin/
drwxr-xr-x 2 root root 4096 Jun 4 12:32 tmp/
drwxr-xr-x 2 root root 4096 Jun 4 12:16 usr/
./bin:
total 8368
drwxr-xr-x 2 root root 4096 Jun 4 12:13 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
-rwxr-xr-x 1 root root 109855 Jun 3 13:45 a2p*
-rwxr-xr-x 1 root root 387764 Jun 3 13:45 bash*
-rwxr-xr-x 1 root root 36365 Jun 3 13:45 c2ph*
-rwxr-xr-x 1 root root 20629 Jun 3 13:45 dprofpp*
-rwxr-xr-x 1 root root 6956 Jun 3 13:46 env*
-rwxr-xr-x 1 root root 158116 Jun 3 13:45 fax2ps*
-rwxr-xr-x 1 root root 104008 Jun 3 13:45 faxalter*
-rwxr-xr-x 1 root root 89340 Jun 3 13:45 faxcover*
-rwxr-xr-x 1 root root 441584 Jun 3 13:45 faxmail*
-rwxr-xr-x 1 root root 96036 Jun 3 13:45 faxrm*
-rwxr-xr-x 1 root root 107000 Jun 3 13:45 faxstat*
-rwxr-xr-x 1 root root 77832 Jun 4 11:46 grep*
-rwxr-xr-x 1 root root 19597 Jun 3 13:45 h2ph*
-rwxr-xr-x 1 root root 46979 Jun 3 13:45 h2xs*
-rwxr-xr-x 1 root root 10420 Jun 3 13:46 id*
-rwxr-xr-x 1 root root 4528 Jun 3 13:46 ldd*
-rwxr-xr-x 1 root root 111386 Jun 4 11:46 less*
-r-xr-xr-x 1 root root 26168 Jun 3 13:45 login*
-rwxr-xr-x 1 root root 49164 Jun 3 13:45 ls*
-rwxr-xr-x 1 root root 11600 Jun 3 13:45 mkdir*
-rwxr-xr-x 1 root root 24780 Jun 3 13:45 more*
-rwxr-xr-x 1 root root 154980 Jun 3 13:45 pal2rgb*
-rwxr-xr-x 1 root root 27920 Jun 3 13:46 passwd*
-rwxr-xr-x 1 root root 4241 Jun 3 13:45 pl2pm*
-rwxr-xr-x 1 root root 2350 Jun 3 13:45 pod2html*
-rwxr-xr-x 1 root root 7875 Jun 3 13:45 pod2latex*
-rwxr-xr-x 1 root root 17587 Jun 3 13:45 pod2man*
-rwxr-xr-x 1 root root 6877 Jun 3 13:45 pod2text*
-rwxr-xr-x 1 root root 3300 Jun 3 13:45 pod2usage*
-rwxr-xr-x 1 root root 3341 Jun 3 13:45 podchecker*
-rwxr-xr-x 1 root root 2483 Jun 3 13:45 podselect*
-r-xr-xr-x 1 root root 82412 Jun 4 11:46 ps*
-rwxr-xr-x 1 root root 36365 Jun 3 13:45 pstruct*
-rwxr-xr-x 1 root root 7120 Jun 3 13:45 pwd*
-rwxr-xr-x 1 root root 179884 Jun 3 13:45 rgb2ycbcr*
-rwxr-xr-x 1 root root 20532 Jun 3 13:45 rm*
-rwxr-xr-x 1 root root 6720 Jun 4 10:15 rmdir*
-rwxr-xr-x 1 root root 14705 Jun 3 13:45 s2p*
-rwxr-xr-x 1 root root 28764 Jun 3 13:46 scp*
-rwxr-xr-x 1 root root 385000 Jun 3 13:45 sendfax*
-rwxr-xr-x 1 root root 67548 Jun 3 13:45 sendpage*
-rwxr-xr-x 1 root root 88632 Jun 3 13:46 sftp*
-rwxr-xr-x 1 root root 387764 Jun 3 13:45 sh*
-rws--x--x 1 root root 744500 Jun 3 13:46 slogin*
-rwxr-xr-x 1 root root 14523 Jun 3 13:46 splain*
-rws--x--x 1 root root 744500 Jun 3 13:46 ssh*
-rwxr-xr-x 1 root root 570960 Jun 3 13:46 ssh-add*
-rwxr-xr-x 1 root root 502952 Jun 3 13:46 ssh-agent*
-rwxr-xr-x 1 root root 575740 Jun 3 13:46 ssh-keygen*
-rwxr-xr-x 1 root root 383480 Jun 3 13:46 ssh-keyscan*
-rwxr-xr-x 1 root root 39 Jun 3 13:46 ssh_europa*
-rwxr-xr-x 1 root root 107252 Jun 4 10:14 strace*
-rwxr-xr-x 1 root root 8323 Jun 4 10:14 strace-graph*
-rwxr-xr-x 1 root root 158088 Jun 3 13:46 thumbnail*
-rwxr-xr-x 1 root root 6312 Jun 3 13:46 tty*
-rwxr-xr-x 1 root root 55904 Jun 4 11:46 useradd*
-rwxr-xr-x 1 root root 585656 Jun 4 11:47 vi*
-rwxr-xr-x 1 root root 6444 Jun 4 11:45 whoami*
./dev:
total 8
drwxr-xr-x 2 root root 4096 Jun 4 12:16 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
crw-r--r-- 1 root root 1, 9 Jun 3 13:43 urandom
./etc:
total 208
drwxr-xr-x 4 root root 4096 Jun 4 12:35 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
-rw------- 1 root root 0 Jun 4 11:46 .pwd.lock
-rw-r--r-- 1 root root 653 Jun 3 13:46 group
-rw-r--r-- 1 root root 242 Jun 4 11:33 host.conf
-rw-r--r-- 1 root root 857 Jun 4 12:04 hosts
-rw-r--r-- 1 root root 1050 Jun 4 11:29 ld.so.cache
-rw-r--r-- 1 root root 304 Jun 4 11:28 ld.so.conf
-rw-r--r-- 1 root root 235 Jun 4 11:27 ld.so.conf~
-rw-r--r-- 1 root root 88039 Jun 3 13:46 moduli
-rw-r--r-- 1 root root 1342 Jun 4 11:34 nsswitch.conf
drwxr-xr-x 2 root root 4096 Jun 4 12:02 pam.d/
-rw-r--r-- 1 root root 28 Jun 4 12:00 pam_smb.conf
-rw-r--r-- 1 root root 2520 Jun 4 11:57 passwd
-rw-r--r-- 1 root root 7228 Jun 3 13:48 profile
-rw-r--r-- 1 root root 1339 Jun 4 11:33 protocols
-rw-r--r-- 1 root root 274 Jun 4 11:44 resolv.conf
drwxr-xr-x 2 root root 4096 Jun 3 13:43 security/
-rw-r----- 1 root root 1178 Jun 4 11:51 shadow
-rw------- 1 root root 80 Jun 4 11:45 shadow-
-rw-r----- 1 root root 1178 Jun 4 11:48 shadow.old
-rw-r--r-- 1 root root 161 Jun 3 13:46 shells
-rw-r--r-- 1 root root 1144 Jun 3 13:46 ssh_config
-rw------- 1 root root 668 Jun 3 13:46 ssh_host_dsa_key
-rw-r--r-- 1 root root 602 Jun 3 13:46 ssh_host_dsa_key.pub
-rw------- 1 root root 527 Jun 3 13:46 ssh_host_key
-rw-r--r-- 1 root root 331 Jun 3 13:46 ssh_host_key.pub
-rw------- 1 root root 883 Jun 3 13:46 ssh_host_rsa_key
-rw-r--r-- 1 root root 222 Jun 3 13:46 ssh_host_rsa_key.pub
-rw-r--r-- 1 root root 2471 Jun 4 12:15 sshd_config
./etc/pam.d:
total 24
drwxr-xr-x 2 root root 4096 Jun 4 12:02 ./
drwxr-xr-x 4 root root 4096 Jun 4 12:35 ../
lrwxrwxrwx 1 root root 4 Jun 4 12:02 other -> sshd
-rw-r--r-- 1 root root 318 Jun 3 13:46 passwd
-rw-r--r-- 1 root root 546 Jun 4 11:36 ssh
-rw-r--r-- 1 root root 479 Jun 4 12:02 sshd
-rw-r--r-- 1 root root 370 Jun 3 13:46 su
./etc/security:
total 32
drwxr-xr-x 2 root root 4096 Jun 3 13:43 ./
drwxr-xr-x 4 root root 4096 Jun 4 12:35 ../
-rw-r--r-- 1 root root 1971 Jun 3 13:46 access.conf
-rw-r--r-- 1 root root 184 Jun 3 13:46 chroot.conf
-rw-r--r-- 1 root root 2145 Jun 3 13:46 group.conf
-rw-r--r-- 1 root root 1356 Jun 3 13:46 limits.conf
-rw-r--r-- 1 root root 2858 Jun 3 13:46 pam_env.conf
-rw-r--r-- 1 root root 2154 Jun 3 13:46 time.conf
./lib:
total 8316
drwxr-xr-x 3 root root 4096 Jun 4 12:13 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
-rw-r--r-- 1 root root 1024 Jun 4 11:51 cracklib_dict.hwm
-rw-r--r-- 1 root root 214324 Jun 4 11:51 cracklib_dict.pwd
-rw-r--r-- 1 root root 11360 Jun 4 11:51 cracklib_dict.pwi
-rwxr-xr-x 1 root root 342427 Jun 3 13:46 ld-linux.so.2*
-rwxr-xr-x 1 root root 4061504 Jun 3 13:46 libc.so.6*
lrwxrwxrwx 1 root root 15 Jun 4 12:11 libcrack.so -> libcrack.so.2.7*
lrwxrwxrwx 1 root root 15 Jun 4 12:11 libcrack.so.2 -> libcrack.so.2.7*
-rwxr-xr-x 1 root root 33291 Jun 4 11:39 libcrack.so.2.7*
-rwxr-xr-x 1 root root 60988 Jun 3 13:46 libcrypt.so.1*
-rwxr-xr-x 1 root root 71846 Jun 3 13:46 libdl.so.2*
-rwxr-xr-x 1 root root 27762 Jun 3 13:46 libhistory.so.4.0*
lrwxrwxrwx 1 root root 17 Jun 4 12:12 libncurses.so.4 -> libncurses.so.4.2*
-rwxr-xr-x 1 root root 503903 Jun 3 13:46 libncurses.so.4.2*
lrwxrwxrwx 1 root root 17 Jun 4 12:12 libncurses.so.5 -> libncurses.so.5.0*
-rwxr-xr-x 1 root root 549429 Jun 3 13:46 libncurses.so.5.0*
-rwxr-xr-x 1 root root 369801 Jun 3 13:46 libnsl.so.1*
-rwxr-xr-x 1 root root 142563 Jun 4 11:49 libnss_compat.so.1*
-rwxr-xr-x 1 root root 215569 Jun 4 11:49 libnss_compat.so.2*
-rwxr-xr-x 1 root root 61648 Jun 4 11:34 libnss_dns.so.1*
-rwxr-xr-x 1 root root 63453 Jun 4 11:34 libnss_dns.so.2*
-rwxr-xr-x 1 root root 63782 Jun 4 11:34 libnss_dns6.so.2*
-rwxr-xr-x 1 root root 205715 Jun 3 13:46 libnss_files.so.1*
-rwxr-xr-x 1 root root 235932 Jun 3 13:49 libnss_files.so.2*
-rwxr-xr-x 1 root root 204383 Jun 4 11:33 libnss_nis.so.1*
-rwxr-xr-x 1 root root 254023 Jun 4 11:33 libnss_nis.so.2*
-rwxr-xr-x 1 root root 256465 Jun 4 11:33 libnss_nisplus.so.2*
lrwxrwxrwx 1 root root 14 Jun 4 12:12 libpam.so.0 -> libpam.so.0.72*
-rwxr-xr-x 1 root root 31449 Jun 3 13:46 libpam.so.0.72*
lrwxrwxrwx 1 root root 19 Jun 4 12:12 libpam_misc.so.0 ->
libpam_misc.so.0.72*
-rwxr-xr-x 1 root root 8125 Jun 3 13:46 libpam_misc.so.0.72*
lrwxrwxrwx 1 root root 15 Jun 4 12:12 libpamc.so.0 -> libpamc.so.0.72*
-rwxr-xr-x 1 root root 10499 Jun 3 13:46 libpamc.so.0.72*
-rwxr-xr-x 1 root root 176427 Jun 3 13:46 libreadline.so.4.0*
-rwxr-xr-x 1 root root 44729 Jun 3 13:46 libutil.so.1*
-rwxr-xr-x 1 root root 70254 Jun 3 13:46 libz.a*
lrwxrwxrwx 1 root root 13 Jun 4 12:13 libz.so -> libz.so.1.1.3*
lrwxrwxrwx 1 root root 13 Jun 4 12:13 libz.so.1 -> libz.so.1.1.3*
-rwxr-xr-x 1 root root 63312 Jun 3 13:46 libz.so.1.1.3*
drwxr-xr-x 2 root root 4096 Jun 4 12:00 security/
./lib/security:
total 668
drwxr-xr-x 2 root root 4096 Jun 4 12:00 ./
drwxr-xr-x 3 root root 4096 Jun 4 12:13 ../
-rwxr-xr-x 1 root root 10067 Jun 3 13:46 pam_access.so*
-rwxr-xr-x 1 root root 8300 Jun 3 13:46 pam_chroot.so*
-rwxr-xr-x 1 root root 14397 Jun 3 13:46 pam_cracklib.so*
-rwxr-xr-x 1 root root 5082 Jun 3 13:46 pam_deny.so*
-rwxr-xr-x 1 root root 13153 Jun 3 13:46 pam_env.so*
-rwxr-xr-x 1 root root 13371 Jun 3 13:46 pam_filter.so*
-rwxr-xr-x 1 root root 7957 Jun 3 13:46 pam_ftp.so*
-rwxr-xr-x 1 root root 12771 Jun 3 13:46 pam_group.so*
-rwxr-xr-x 1 root root 10174 Jun 3 13:46 pam_issue.so*
-rwxr-xr-x 1 root root 9774 Jun 3 13:46 pam_lastlog.so*
-rwxr-xr-x 1 root root 13591 Jun 3 13:46 pam_limits.so*
-rwxr-xr-x 1 root root 11268 Jun 3 13:46 pam_listfile.so*
-rwxr-xr-x 1 root root 11182 Jun 3 13:46 pam_mail.so*
-rwxr-xr-x 1 root root 5923 Jun 3 13:46 pam_nologin.so*
-rwxr-xr-x 1 root root 5460 Jun 3 13:46 pam_permit.so*
-rwxr-xr-x 1 root root 18226 Jun 3 13:46 pam_pwcheck.so*
-rwxr-xr-x 1 root root 12590 Jun 3 13:46 pam_rhosts_auth.so*
-rwxr-xr-x 1 root root 5551 Jun 3 13:46 pam_rootok.so*
-rwxr-xr-x 1 root root 7239 Jun 3 13:46 pam_securetty.so*
-rwxr-xr-x 1 root root 6551 Jun 3 13:46 pam_shells.so*
-rwxr-xr-x 1 root root 55925 Jun 4 12:00 pam_smb_auth.so*
-rwxr-xr-x 1 root root 12678 Jun 3 13:46 pam_stress.so*
-rwxr-xr-x 1 root root 11170 Jun 3 13:46 pam_tally.so*
-rwxr-xr-x 1 root root 11124 Jun 3 13:46 pam_time.so*
-rwxr-xr-x 1 root root 45703 Jun 3 13:46 pam_unix.so*
-rwxr-xr-x 1 root root 45703 Jun 3 13:46 pam_unix2.so*
-rwxr-xr-x 1 root root 45386 Jun 3 13:46 pam_unix_acct.so*
-rwxr-xr-x 1 root root 45386 Jun 3 13:46 pam_unix_auth.so*
-rwxr-xr-x 1 root root 45386 Jun 3 13:46 pam_unix_passwd.so*
-rwxr-xr-x 1 root root 45386 Jun 3 13:46 pam_unix_session.so*
-rwxr-xr-x 1 root root 9726 Jun 3 13:46 pam_userdb.so*
-rwxr-xr-x 1 root root 6424 Jun 3 13:46 pam_warn.so*
-rwxr-xr-x 1 root root 7460 Jun 3 13:46 pam_wheel.so*
./sbin:
total 3132
drwxr-xr-x 2 root root 4096 Jun 4 12:35 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
-rwxr-xr-x 1 root root 178256 Jun 3 13:46 choptest*
-rwxr-xr-x 1 root root 184032 Jun 3 13:46 cqtest*
-rwxr-xr-x 1 root root 81096 Jun 3 13:46 dialtest*
-rwxr-xr-x 1 root root 1142128 Jun 4 11:28 ldconfig*
-rwxr-xr-x 1 root root 2868 Jun 3 13:46 lockname*
-rwxr-xr-x 1 root root 3340 Jun 3 13:46 ondelay*
-rwxr-xr-x 1 root root 376796 Jun 3 13:46 pagesend*
-rwxr-xr-x 1 root root 13950 Jun 3 13:46 probemodem*
-rwxr-xr-x 1 root root 9234 Jun 3 13:46 recvstats*
-rwxr-xr-x 1 root root 64480 Jun 3 13:46 sftp-server*
-rwxr-xr-x 1 root root 744412 Jun 3 13:46 sshd*
-rwxr-xr-x 1 root root 30750 Jun 4 11:46 su*
-rwxr-xr-x 1 root root 194632 Jun 3 13:46 tagtest*
-rwxr-xr-x 1 root root 69892 Jun 3 13:46 tsitest*
-rwxr-xr-x 1 root root 43792 Jun 3 13:46 typetest*
./tmp:
total 8
drwxr-xr-x 2 root root 4096 Jun 4 12:32 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
./usr:
total 8
drwxr-xr-x 2 root root 4096 Jun 4 12:16 ./
drwxr-xr-x 9 root root 4096 Jun 5 10:05 ../
lrwxrwxrwx 1 root root 7 Jun 4 12:14 bin -> ../bin//
lrwxrwxrwx 1 root root 7 Jun 4 11:33 lib -> ../lib//
lrwxrwxrwx 1 root root 8 Jun 4 12:13 sbin -> ../sbin//
</example>



<appendix id="chroot-apache-env"><Prgn>Chroot</Prgn> environment for <PRGN>Apache</PRGN>

<sect>Introduction

<p>The <prgn>chroot</prgn> utility is often used to jail a daemon in a
restricted tree. You can use it to insulate services from one another,
so that security issues in a software package do not jeoparize the
whole server. When using the <prgn>makejail</prgn> script, setting up
and updating the chrooted tree is much easier.</p>

<sect1>Licensing 

<p>This document is copyright 2002 Alexandre Ratti. It has been
released underthe GNU-FDL 1.2 (GNU Free Documentation Licence) and is
included in this manual with his explicit permission.

</sect1>
</sect>

<sect>Installing the server

<p>This procedure was tested on Debian GNU/Linux&nbsp;3.0 (Woody) with
<prgn>makejail</prgn> 0.0.4-1 (in Debian/testing).

<list>

<item> <p>Log in as <prgn>root</prgn> and create a new jail
directory:

<example>
$ mkdir -p /var/chroot/apache
</example>

 </item>

 <item> <p>Create a new user and a new group. The chrooted Apache
server will run as this user/group, which isn't used for anything else
on the system. In this example, both user and group are called
<prgn>chrapach</prgn>.

 <example> 
 $ adduser --home /var/chroot/apache --shell /bin/false \
 --no-create-home --system --group chrapach
 </example>

<p>FIXME: is a new user needed? (Apache already runs as the apache user)</p>

  </item>

  <item>Install Apache as usual on Debian: <tt>apt-get install
apache</tt></item>

<item>Set up Apache (eg. define your subdomains, etc.). In the
<file>/etc/apache/httpd.conf</file> configuration file , set the
<em>Group</em> and <em>User</em> options to <tt>chrapach</tt>. Restart
Apache and make sure the server is working correctly. Now, stop the
Apache daemon.</item>

<item>Install <prgn>makejail</prgn> (available in Debian/testing for
now). You should also <prgn>wget</prgn> et <prgn>lynx</prgn> as
they are will be used by <prgn>makejail</prgn> to test the chrooted
server: <tt>apt-get install makejail wget lynx</tt></item>

<item>Copy the sample configuration file for Apache to the
<file>/etc/makejail</file> directory:
 <example> 
 # cp/usr/share/doc/makejail/examples/apache.py /etc/makejail/ 
 </example>

</item>
 
 <item>Edit <file>/etc/makejail/apache.py</file>. You need to change
the <em>chroot</em>, <em>users</em> and <em>groups</em> options. To
run this version of <prgn>makejail</prgn>, you can also added a
<prgn>packages</prgn> option. See the <url
id="http://www.floc.net/makejail/current/doc/" name="makejail
documentation">. A sample is shown here:

<example>
chroot=&quot;/var/chroot/apache&quot;
testCommandsInsideJail=[&quot;/usr/sbin/apachectl start&quot;]
processNames=[&quot;apache&quot;]
testCommandsOutsideJail=[&quot;wget -r --spider http://localhost/&quot;,
                         &quot;lynx --source https://localhost/&quot;]
preserve=[&quot;/var/www&quot;,
          &quot;/var/log/apache&quot;,
          &quot;/dev/log&quot;]
users=[&quot;chrapach&quot;]
groups=[&quot;chrapach&quot;]
packages=[&quot;apache&quot;, &quot;apache-common&quot;]
userFiles=[&quot;/etc/password&quot;,
           &quot;/etc/shadow&quot;]
groupFiles=[&quot;/etc/group&quot;,
            &quot;/etc/gshadow&quot;]
forceCopy=[&quot;/etc/hosts&quot;,
           &quot;/etc/mime.types&quot;]
</example>

<p><em>FIXME:</em> some options do not seem to work properly. For
instance, <file>/etc/shadow</file> and<file>/etc/gshadow</file> are
not copied, whereas <file>/etc/password</file> and
<file>/etc/group</file> are fully copied instead of being
filtered.</p>
 </item>
 
<item>Create the chroot tree: <tt>makejail /etc/makejail/apache.py</tt></item>

<item>If <file>/etc/password</file> and <file>/etc/group</file> were
fully copied, type:

      <example>
      $ grep chrapach /etc/passwd &gt; /var/chroot/apache/etc/passwd
      $ grep chrapach /etc/group &gt; /var/chroot/apache/etc/group
      </example>
to replace them with filtered copies.</item>

<item>Copy the Web site pages and the logs into the jail. These files
are not copied automatically (see the <em>preserve</em> option in
<prgn>makejail</prgn>'s configuration file).
      <example>
      # cp -Rp /var/www /var/chroot/apache/var
      # cp -Rp /var/log/apache/*.log /var/chroot/apache/var/log/apache
      </example>
  </item>

<item>Edit the startup script for the system logging daemon so that it
also listen to the <file>/var/chroot/apache/dev/log</file> socket. In
<file>/etc/init.d/sysklogd</file>, replace:
<tt>SYSLOGD=&quot;&quot;</tt> with <tt>SYSLOGD=&quot; -a
/var/chroot/apache/dev/log&quot;</tt> and restart the daemon
(<tt>/etc/init.d/sysklogd restart</tt>).</item>

  <item> Edit the Apache startup script (<file>/etc/init.d/apache</file>). You might need to make some changes to the default startup script for it to run properly with a chrooted 
      tree. Such as:
    <list>
      <item>set a new <em>CHRDIR</em> variable at the top of the file;</item>
      <item>edit the <em>start</em>, <em>stop</em>, <em>reload</em>, 
        etc. sections;</item>
      <item>add a line to mount and unmount the <file>/proc</file>
filesystem within the jail.  </item>
    </list>
<example>
#! /bin/bash
#
# apache	Start the apache HTTP server.
#

CHRDIR=/var/chroot/apache

NAME=apache
PATH=/bin:/usr/bin:/sbin:/usr/sbin
DAEMON=/usr/sbin/apache
SUEXEC=/usr/lib/apache/suexec
PIDFILE=/var/run/$NAME.pid
CONF=/etc/apache/httpd.conf
APACHECTL=/usr/sbin/apachectl 

trap "" 1
export LANG=C
export PATH

test -f $DAEMON || exit 0
test -f $APACHECTL || exit 0

# ensure we don't leak environment vars into apachectl
APACHECTL="env -i LANG=${LANG} PATH=${PATH} $APACHECTL"

if egrep -q -i "^[[:space:]]*ServerType[[:space:]]+inet" $CONF
then
    exit 0
fi

case "$1" in
  start)
    echo -n "Starting web server: $NAME"
    mount -t proc proc /var/chroot/apache/proc
    start-stop-daemon --start --pidfile $PIDFILE --exec $DAEMON \
	--chroot $CHRDIR
    ;;

  stop)
    echo -n "Stopping web server: $NAME"
    start-stop-daemon --stop --pidfile "$CHRDIR/$PIDFILE" --oknodo
    umount /var/chroot/apache/proc
    ;;

  reload)
    echo -n "Reloading $NAME configuration"
    start-stop-daemon --stop --pidfile "$CHRDIR/$PIDFILE" \
	--signal USR1 --startas $DAEMON --chroot $CHRDIR
    ;;

  reload-modules)
    echo -n "Reloading $NAME modules"
    start-stop-daemon --stop --pidfile "$CHRDIR/$PIDFILE" --oknodo \
	--retry 30
    start-stop-daemon --start --pidfile $PIDFILE \
	--exec $DAEMON --chroot $CHRDIR
    ;;

  restart)
    $0 reload-modules
    exit $?
    ;;

  force-reload)
    $0 reload-modules
    exit $?
    ;;

  *)
    echo "Usage: /etc/init.d/$NAME {start|stop|reload|reload-modules|force-reload|restart}"
    exit 1
    ;;
esac

if [ $? == 0 ]; then
	echo .
	exit 0
else
	echo failed
	exit 1
fi
</example>

      <p><em>FIXME</em>: should the first Apache process be run as
another user than root (i.e. add --chuid chrapach:chrapach)? Cons:
chrapach will need write access to the logs, which is awkward.</p>
  </item>

  <item>Replace in <file>/etc/logrotate.d/apache</file>
<tt>/var/log/apache/*.log</tt> with
<tt>/var/chroot/apache/var/log/apache/*.log</tt> </item>

  <item>Start Apache (<prgn>/etc/init.d/apache start</prgn>) and check
what is it reported in the jail log
(<file>/var/chroot/apache/var/log/apache/error.log</file>).  If your
setup is more complex, (eg. if you also use PHP and MySQL), files will
probably be missing. if some files are not copied automatically by
<prgn>makejail</prgn>, you can list them in the <em>forceCopy</em> (to
copy files directly) or <em>packages</em> (to copy full packages and
their dependencies) option the <file>/etc/makejail/apache.py</file>
configuration file.  </item>

  <item> 
    <p>Type <tt>ps aux | grep apache</tt> to make sure Apache 
      is running. You should see something like:
      <example>
      root 180 0.0 1.1 2936 1436 ? S 04:03 0:00 /usr/sbin/apache
      chrapach 189 0.0 1.1 2960 1456 ? S 04:03 0:00 /usr/sbin/apache
      chrapach 190 0.0 1.1 2960 1456 ? S 04:03 0:00 /usr/sbin/apache
      chrapach 191 0.0 1.1 2960 1456 ? S 04:03 0:00 /usr/sbin/apache
      chrapach 192 0.0 1.1 2960 1456 ? S 04:03 0:00 /usr/sbin/apache
      chrapach 193 0.0 1.1 2960 1456 ? S 04:03 0:00 /usr/sbin/apache
      </example>
  </item>

  <item> Make sure the Apache processes are running chrooted by lookin
in the <file>/proc</file> filesystem: <tt>ls -la
/proc/<em>process_number</em>/root/.</tt> where <em>process</em> is one
of the PID numbers listed above (2nd column; 189
    for instance). The ntries for a restricted tree should be listed:
    <example>
    drwxr-sr-x 10 root staff 240 Dec 2 16:06 .
    drwxrwsr-x 4 root staff 72 Dec 2 08:07 ..
    drwxr-xr-x 2 root root 144 Dec 2 16:05 bin
    drwxr-xr-x 2 root root 120 Dec 3 04:03 dev
    drwxr-xr-x 5 root root 408 Dec 3 04:03 etc
    drwxr-xr-x 2 root root 800 Dec 2 16:06 lib
    dr-xr-xr-x 43 root root 0 Dec 3 05:03 proc
    drwxr-xr-x 2 root root 48 Dec 2 16:06 sbin
    drwxr-xr-x 6 root root 144 Dec 2 16:04 usr
    drwxr-xr-x 7 root root 168 Dec 2 16:06 var
    </example>
    <p>To automate this test, you can type:<tt>ls -la /proc/`cat
/var/chroot/apache/var/run/apache.pid`/root/.</tt></p>

    <p><em>FIXME</em>: Add other tests that can be run to make sure the
jail is closed?</p>
	</item>
</list>

<p>The reason I like this is because setting up the jail is not very
difficult and  the server can be updated in just two lines:

<example> 
apt-get update &amp;&amp; apt-get install apache
makejail /etc/makejail/apache.py
</example>

</sect>
<sect>See also

<p>If you are looking for more information you can consider these
sources of information in which the information presented is based:
<list>

  <item><url id="http://www.floc.net/makejail/" name="makejail
homepage"> , this program was written by Alain Tesio)</item>

<!-- Not appropiate for this section 
  <item><a href="http://www.easter-eggs.org/article242.html">Bind9 chroot&eacute; 
    avec <prgn>makejail</prgn></a>, Pascal Brugier, easter-eggs.org, 21/03/2002</item>
-->

  <item><url id="http://www.networkdweebs.com/chroot.html"
name="Chrooting daemons and system processes"> by Jonathan, Network
Dweebs, 21/10/2002</item>

  <item><url
id="http://www.digitaltoad.net/docs/guide/secure_rh/chap29sec254.html"
name="Apache in a chroot jail"> in <em>Securing and Optimizing
Linux</em> written by Gerhard Mourani,
    2000 </item>
</list>
</sect>
</appendix>


<!-- <sect id="kernel-patch">Ajout de rustines pour le noyau 
     <p>FIXME: More content

<p>Debian GNU/Linux fournit quelques rustines pour le noyau Linux qui améliorent 
sa sécurité. Ceci inclus 

<list>

<item>Linux Intrusion Detection (dans la paquet <package>lids-2.2.19</package>)

<item>Linux Capabilities (dans la paquet <package>lcap</package>)

<item>Linux Trustees (dans la paquet <package>trustees</package>)

<item>NSA Enhanced Linux (dans la paquet <package>selinux</package> also 
available from <url id="http://www.coker.com.au/selinux/" name="the developer's website">)

<item><url name="kernel-patch-2.2.18-openwall"
id="http://packages.debian.org/kernel-patch-2.2.18-openwall">

<item><package>kernel-patch-2.2.19-harden</package>

<item>Linux capabilities (dans la paquet <package>lcap</package>

<item>IPSEC kernel support (dans la paquet <package>kernel-patch-freeswan</package>)

<item><package>kernel-patch-int</package>

</list>
 -->


<!-- 
<p>Il y a aussi un grand nombre de logiciel d'audit de log, sur-site, comme
<package>logcheck</package>. Ces outils peuvent être très utiles s'ils sont
correctement personnalisés pour alerter l'administrateur à propos d'évènements
inhabituels se produisant sur le système de fichier local. <prgn>Logcheck</prgn>
peut être grandement personnalisé, il peut donc envoyer des mails
pour des évènements récupérés par les logs qui sont dignes d'attention.
L'installation par défaut inclus des profiles pour
des évènements ignorés et des violations de police pour trois types d'installation
(station de travail, serveur et paranoïa). Le paquetage Debian inclue un
fichier de configuration <file>/etc/logcheck/logcheck.conf</file>, complété 
par le programme, indiquant à qui sont envoyé les vérifications. Il fournit aussi
une ouverture pour des paquetages qui fournissent  des services pour implémenter
de nouvelles polices dans les répertoires suivant:
<file>/etc/logcheck/hacking.d/_packagename_</file>,
<file>/etc/logcheck/violations.d/_packagename_</file>,
<file>/etc/logcheck/violations.ignore.d/_packagename_</file>,
<file>/etc/logcheck/ignore.d.paranoid/_packagename_</file>,
<file>/etc/logcheck/ignore.d.server/_packagename_</file>, and
<file>/etc/logcheck/ignore.d.workstation/_packagename_</file>. 
Cependant,peu de paquetage font actuellement cela. Si vous possédez une police qui peut être utile
aux autres utilisateurs, envoyez la comme rapport de bug pour le paquetage adéquat.
Pour plus d'information voir
<file>/usr/share/doc/logcheck/README.Debian</file>

 -->


<!-- Local Variables: -->
<!-- mode: flyspell -->
<!-- End: -->
