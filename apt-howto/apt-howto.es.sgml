<!doctype debiandoc system>
<debiandoc>
<book>

<title>APT HOWTO</title>

<author>
<name>Gustavo Noronha Silva</name> <email>kov@debian.org</email>
</author>
<author>
<name>Hugo Mora</name> <email>h.mora@melix.com.mx</email>
</author>
<version>1.8.4 - April 2003</version>

<abstract> Este documento pretende proveer al usuario de conocimientos
sobre el programa para manejar la paquetería de Debian, el APT. El
propósito de este documento, es hacer la vida más fácil a los nuevos
usuarios de Debian y ayudar a aquellos que desean tener un conocimiento
más profundo de la administración de este sistema. Fue creado para el
proyecto Debian para mejorar y ayudar al soporte existente y también  a los
usuarios de este sistema.  </abstract>

<copyright>
<copyrightsummary>
Copyright &copy; 2001,2002 Gustavo Noronha Silva
</copyrightsummary>
<copyrightsummary>
Traducción: Hugo Mora <email>h.mora@melix.com.mx</email>
</copyrightsummary>
<p>
Este manual está protegido bajos los términos de la GNU FDL (Free
Documentation License). Ha sido escrito con la esperanza de que sea de
utilidad a la comunidad pero no viene con alguna garantía, úselo bajo su
propio riesgo.
</copyright>

<toc>

<chapt>Introducción
<p>
En el principio existían los .tar.gz. Los usuarios tenían que compilar
cada programa que quisieran usar en su sistema GNU/Linux. Cuando Debian fue
creado, fue imperante que el sistema incluyera un programa que se
encargara de manejar la paquetería instalada en la computadora.
Este programa se llamó <prgn>dpkg</prgn>. Así fue
como nació el primer "paquete" en el mundo GNU/Linux, aún antes de que
Red Hat decidiera crear su propio programa "rpm".
<p>
Rápidamente llegó un nuevo dilema a las mentes de los creadores de
GNU/Linux. Ellos necesitaban un modo fácil, rápido y eficiente de
instalar programas, que manejara automáticamente las dependencias y se
hiciera cargo de la configuración mientras se actualizan. Nuevamente
Debian fue pionero y creó el APT, Herramienta Avanzada de
Empaquetamiento (Advanced Packaging Tool), este programa ha sido adaptado por
Conectiva para usarse con rpm y ha sido adoptado por otras
distribuciones.
<p>
Este manual no cubre el apt-rpm, tal como se denomina a la adaptación de
Conectiva del APT, y tal vez algunos "parches" para este documento
aparecerán  en algún tiempo.
<p>
Este capítulo está basado en la siguiente distribución de Debian <tt>Sarge</tt>.

</chapt>

<chapt id="basico">Configuración Básica

<sect id="sources.list">El archivo /etc/apt/sources.list
<p>
Como parte de su funcionamiento, APT utiliza un archivo que enlista las
"fuentes" en donde se encuentran los paquetes. Este archivo es:
<tt>/etc/apt/sources.list</tt>.
<p>
El contenido de este archivo, normalmente sigue este formato:

<p>
<example>
deb http://site.http.org/debian distribución sección1 sección2 sección3
deb-src http://site.http.org/debian distribución sección1 sección2 sección3
</example>

<p>
Por supuesto que los renglones arriba mencionados son ficticios y no
deberán ser usados. La primera palabra en cada línea, <tt>deb</tt> o
<tt>deb-src</tt>, indican el tipo del archivo: ya sea que contenga
paquetes binarios (<tt>deb</tt>), esto es, los paquetes pre-compilados que
normalmente se usan, o los paquetes fuente (<tt>deb-src</tt>), que son
los códigos originales, más el archivo de control de Debian (<tt>.dsc</tt>)
y el <tt>diff.gz</tt> que contienen los cambios necesarios para "debianizar"
el programa.
<p>
Generalmente se encuentra lo siguiente por defecto en el archivo sources.list:
<p>
<example>
# See sources.list(5) for more information, especialy
# Remember that you can only use http, ftp or file URIs
# CDROMs are managed through the apt-cdrom tool.
deb http://http.us.debian.org/debian stable main contrib non-free
deb http://non-us.debian.org/debian-non-US stable/non-US main contrib non-free
deb http://security.debian.org stable/updates main contrib non-free

# Uncomment if you want the apt-get source function to work
#deb-src http://http.us.debian.org/debian stable main contrib non-free
#deb-src http://non-us.debian.org/debian-non-US stable/non-US main contrib non-free
</example>

<p>
Éstas son las líneas necesarias para una instalación básica de Debian.
La primer línea <tt>deb</tt> apunta al archivo en el servidor oficial,
la segunda línea apunta hacia el archivo del servidor non-US y la
tercera línea apunta hacia el archivo del servidor de actualizaciones de
seguridad.
<p>
Las dos últimas líneas están deshabilitadas (con un "#" al inicio), así
que apt-get las ignora. Éstas son las líneas de <tt>deb-src</tt>, esto
es, apuntan hacia los paquetes fuente de Debian. Si frecuentemente
descarga paquetes fuente para probar o recompilar, habilítelas
(borrando el "#" al inicio de la línea).
<p>
El archivo <tt>/etc/apt/sources.list</tt> puede contener varios tipos de
líneas. APT sabe como interpretar líneas del tipo <tt>http</tt>,
<tt>ftp</tt>, <tt>file</tt> (archivos locales, p.e., un directorio que
contiene un CD-ROM) y <tt>ssh</tt>, según mis conocimientos.
<p>
No olvide ejecutar el comando <tt>apt-get update</tt> después de modificar
el archivo <tt>/etc/apt/sources.list</tt>. Debe hacer esto para permitir a APT
obtener la lista de paquetes de las fuentes que especificó.
</sect>

<sect id="dpkg-scanpackages">Cómo utilizar APT localmente
<p>
Algunas veces se pueden llegar a tener muchos paquetes .deb, los cuales
le gustaría instalar utilizando APT para que las dependencias fueran
resueltas automáticamente.
<p>
Para hacer esto, cree un directorio y coloque los .debs que quiera
señalar en el. Por ejemplo:
<p>
<example>
# mkdir /root/debs
</example>
<p>
Usted puede modificar la lista de definiciones en el archivo de control de
paquetes para su depósito con un archivo <tt>override</tt>.
Dentro de este archivo se pueden definir opciones para descartar las que
vienen por defecto en el paquete. Por ejemplo:
<example>
touch archivo
</example>
Dentro de este archivo se pueden definir opciones para descartar las que
vienen por defecto en el paquete. Por ejemplo:
<p>
<example>
paquete prioridad sección
</example>
<p>
Paquete es el nombre del paquete o programa, la prioridad puede ser
baja, media o alta y sección es la sección a donde pertenece. El nombre
de archivo no importa, deberá pasarlo como argumento después para <prgn>dbpkg-scanpackages
</prgn>. Si no desea escribir un archivo <tt>override</tt> entonces utilice <file>/dev/null</file> cuando ejecute <prgn>dbpkg-scanpackages</prgn>.
<p>
Continuando en el directorio /root se hace lo siguiente:
<p>
<example>
# dpkg-scanpackages debs <var>archivo</var> | gzip &gt; debs/Packages.gz
</example>
<p>
En la línea anterior, <var>archivo</var> es el archivo de <tt>override</tt>, el comando
genera un archivo <file>debs/Packages.gz</file> el cual contiene información acerca
de los paquetes, la cual es utilizada por APT. Para utilizar los
paquetes, finalmente agregue:
<p>
<example>
deb file:/root debs/
</example>
<p>
Después de eso, utilice los comandos de APT como siempre. También
podría generar un deposito de fuentes de paquetes. Para hacer eso,
haga exactamente lo mismo, pero recuerde que necesita tener los archivos
<tt>.orig.tar.gz</tt>, <tt>.dsc</tt> y <tt>.diff.gz</tt> en el
directorio y cambie <tt>Sources.gz</tt> por <tt>Packages.gz</tt>. El programa utilizado
también es diferente. Es el <prgn>dpkg-scansources</prgn>. El comando
completo se vería así:
<p>
<example>
# dpkg-scansources debs | gzip &gt; debs/Sources.gz
</example>
<p>
Observe que <prgn>dpkg-scansources</prgn> no necesita un archivo
<tt>override</tt>. La línea de sources.list es:
<example>
deb-src file:/root debs/
</example>
</sect>

<sect id="netselect">Decidiendo cual archivo sources.list es el mejor:
netselect, netselect-apt.
<p>
Una duda frecuente, principalmente entre los usuarios novatos es: "¿Cuál
servidor Debian debo incluir en el archivo <tt>sources.list</tt>?".
Hay muchas formas de decidir esto. Los expertos podrían tener un
script que determine el tiempo de un ping entre los distintos servidores.
Pero hay un programa que hace esto por nosotros: <strong>netselect</strong>.
<p>
Para instalar netselect, hágalo así:
<p>
<example>
# apt-get install netselect
</example>
<p>
Al ejecutarlo sin algún parámetro muestra la ayuda. Ejecutándolo con una
lista de servidores separada por un espacio, regresará una lista con
la puntuación del host. Esta lista considera el tiempo de ping y el número de
"saltos" (servidores por los cuales una petición de red debe pasar para
alcanzar su destino) y es inversamente proporcional a la velocidad de
descarga (la menor es la mejor). El servidor que regresa es aquel que
tiene una puntuación menor (se puede ver la lista completa
agregando la opción -vv). Ejemplo:
<p>
<example>
# netselect ftp.debian.org http.us.debian.org ftp.at.debian.org download.unesp.br ftp.debian.org.br
 365 ftp.debian.org.br
# 
</example>
<p>
Esto significa que, de los servidores incluidos como parámetros en
netselect, <tt>ftp.debian.org.br</tt> fue el mejor, con una puntuación
de 365. (Atención, la puntuación depende de la localización geográfica,
la topología de red, la distancia entre la computadora y los servidores,
por lo tanto, dependiendo de la computadora en la que se ejecute el comando
podría ser otro el mejor servidor).
<p>
Ahora agregue el servidor más rápido encontrado por netselect en el
archivo <tt>/etc/apt/sources.list</tt> ( regresa a <ref
id="sources.list">) sigue los pasos en <ref id="apt-get">.
<p> <strong>Nota:</strong> la lista de los servidores se puede encontrar en
el archivo:<url id="http://www.debian.org/mirror/mirrors_full"
name="http://www.debian.org/mirror/mirrors_full">.
<p>
Iniciando con la versión 0.3, el paquete netselect incluye el script
<strong>netselect-apt</strong>, el cual realiza automáticamente el proceso mencionado
arriba. Sólo introduzca el árbol de la distribución como
parámetro (el cual, por defecto es "stable") y el archivo
<tt>sources.list</tt> será generado con los mejores servidores para main
y non-US y será guardado en el directorio actual. El siguiente ejemplo
genera un archivo sources.list de una distribución estable
<p>
<example>
# ls sources.list
ls: sources.list: File or directory not found
# netselect-apt stable
(...)
# ls -l sources.list
sources.list
#
</example>
<p>
<strong>Recuerde:</strong> el archivo <tt>sources.list</tt> se crea en
el directorio actual, y debe moverse al directorio <tt>/etc/apt</tt>
.
<p>
Después, siga los pasos de <ref id="apt-get">.
</sect>

<sect id="cdrom">Agregando un CD-ROM al archivo sources.list
<p>
Si prefiere utilizar el CD-ROM para instalar los paquetes o para actualizar
su sistema con APT, lo puede agregar a su archivo <tt>sources.list</tt>.
Para hacerlo, puede utilizar el programa <tt>apt-cdrom</tt> así:

<p>
<example>
# apt-cdrom add
</example>

<p>
con el CD-ROM de Debian en la unidad. Esta instrucción montará el CD-ROM,
y si es un CD válido de Debian buscará la información de los paquetes en
el CD. Si la configuración de su unidad de CD-ROM es inusual, tiene las
siguientes opciones:

<p>
<example>
-h           - program help
-d directory - CD-ROM mount point
-r           - Rename a recognized CD-ROM
-m           - No mounting
-f           - Fast mode, don't check package files
-a           - Thorough scan mode
</example>

<p>
Por ejemplo:

<p>
<example>
# apt-cdrom -d /home/kov/mycdrom add
</example>

<p>
También puede identificar el CD-ROM sin agregarlo a su lista:

<p>
<example>
# apt-cdrom ident
</example>

<p>
Note que este programa sólo funcionará si el CD-ROM está configurado
adecuadamente en el archivo <tt>/etc/fstab</tt> de su sistema.

</sect>

</chapt>


<chapt id="apt-get">Trabajando con paquetes
<sect id="update">Actualizando la lista de paquetes disponibles
<p>
El sistema de paquetes utiliza una base de datos para llevar un
monitoreo de los paquetes instalados, los no instalados y cuales están
disponibles para su futura instalación. El programa <prgn>apt-get</prgn>
utiliza esta base de datos para averiguar como instalar los paquetes que
son requeridos por el usuario y para indagar sobre que paquetes
adicionales serán requeridos para que el paquete seleccionado funcione
correctamente.
<p>
Para actualizar la lista, se utiliza el comando <prgn>apt-get update</prgn>.
Este comando busca el paquete en los archivos listados en
<tt>/etc/apt/sources.list</tt>; para más información acerca de este
archivo, revise <ref id="sources.list">
<p>
Es una buena costumbre ejecutar este archivo regularmente para
mantenerse informado acerca de las posibilidades de actualización para
el sistema, particularmente las actualizaciones de seguridad.
</sect>

<sect id="install">Instalando paquetes
<p>
Finalmente, ¡el proceso que estaba esperando!. Con su archivo
sources.list listo y su lista de paquetes disponibles al día, todo lo
que necesita es ejecutar <tt>apt-get</tt> para tener el paquete que
quiera instalado. Por ejemplo, puede ejecutar:

<p>
<example>
# apt-get install xchat
</example>

<p>
APT buscará en su base de datos para encontrar la versión más reciente
del paquete y lo descargará del servidor correspondiente especificado en
<tt>sources.list</tt>. Si este paquete necesitara otro para funcionar --
como en este caso -- APT resolverá las dependencias e instalará los
paquetes necesarios. Observe este ejemplo:

<p>
<example>
# apt-get install nautilus
Reading Package Lists... Done
Building Dependency Tree... Done
The following extra packages will be installed:
  bonobo libmedusa0 libnautilus0
The following NEW packages will be installed:
  bonobo libmedusa0 libnautilus0 nautilus
0 packages upgraded, 4 newly installed, 0 to remove and 1 not upgraded.
Need to get 8329kB of archives. After unpacking 17.2MB will be used.
Do you want to continue? [Y/n]
</example>

<p>
El paquete <package>nautilus</package> necesita las librerías
compartidas mencionadas, así pues APT las descargará del servidor. Si
se especifican antes los nombres de esas librerías con el comando
<tt>apt-get</tt> APT no pregunta, si desea continuar o no;
supone automáticamente que se desean instalar esos paquetes.
<p>
Esto significa que APT sólo pregunta por confirmación cuando se van a
instalar paquetes que no fueron especificados en la línea de comando.
<p>
Las siguientes opciones de apt-get podrían ser útiles

<p>
<example>
-h  This help text.
-d  Download only - do NOT install or unpack archives
-f  Attempt to continue if the integrity check fails
-s  No-act. Perform ordering simulation
-y  Assume Yes to all queries and do not prompt
-u  Show a list of upgraded packages as well
</example>

<p>
Pueden seleccionarse varios paquetes para instalar en una sola
línea. Los archivos descargados son almacenados en el directorio
<tt>/var/cache/apt/archives</tt> para su instalación posterior.
<p>
Puede especificar también que paquetes serán eliminados en la misma
línea. Sólo agregue un "-" inmediatamente después del nombre del paquete
que quiere eliminar, por ejemplo:

<p>
<example>
# apt-get install nautilus gnome-panel-
Reading Package Lists... Done
Building Dependency Tree... Done
The following extra packages will be installed:
  bonobo libmedusa0 libnautilus0
The following packages will be REMOVED:
  gnome-applets gnome-panel gnome-panel-data gnome-session
The following NEW packages will be installed:
  bonobo libmedusa0 libnautilus0 nautilus
0 packages upgraded, 4 newly installed, 4 to remove and 1 not upgraded.
Need to get 8329kB of archives. After unpacking 2594kB will be used.
Do you want to continue? [Y/n]
</example>

<p>
Consulte la sección <ref id="remove"> para más detalles acerca de la
eliminación de paquetes.
<p>
Si de alguna forma daña un paquete instalado, o simplemente
desea reinstalar la versión más nueva disponible del paquete, puede utilizar
la opción <tt>--reinstall</tt> como se muestra:

<p>
<example>
# apt-get --reinstall install gdm
Reading Package Lists... Done
Building Dependency Tree... Done
0 packages upgraded, 0 newly installed, 1 reinstalled, 0 to remove and 1 not
 upgraded.
Need to get 0B/182kB of archives. After unpacking 0B will be used.
Do you want to continue? [Y/n]
</example>

<p>
La versión de APT al crear este documento es la 0.5.3, la cual forma
parte de la versión inestable de Debian (<tt>sid</tt>) al momento de
escribir. Si tiene esta versión instalada, tiene algunas opciones más a
su alcance: Puede utilizar un comando como <tt>apt-get install
paquete/distribución</tt> para instalar paquetes de una distribución en
específico, o <tt>apt-get install package=versión</tt>. por ejemplo:

<p>
<example>
# apt-get install nautilus/unstable
</example>

<p>
Esta instrucción instalará nautilus de la distribución inestable aun si
está utilizando la estable. Los valores aceptados para distribución son
<tt>stable</tt>, <tt>testing</tt> y <tt>unstable</tt>.
<p>
Podría preferir utilizar el modificador <tt>-t</tt> para especificar
una distribución destino, dejando a <prgn>apt-get</prgn> la oportunidad de
resolver a favor de esa distribución las dependencias.
<p>
<em>IMPORTANTE</em>: La versión "unstable" de Debian es la versión a la
cual se le agregan las nuevas versiones de los paquetes de Debian. Esta
distribución tiene todos los cambios por los cuales atraviesan muchos de
los paquetes, ya sean cambios pequeños o grandes que afecten a unos
paquetes o a todo el sistema. Por esta razón, esta versión de la
distribución <em>no</em> deberá ser usada por usuarios novatos o por
aquellos que necesitan de estabilidad.
<p>
La distribución "testing" (de prueba) es un poco mejor que la inestable,
con algo de estabilidad, pero para sistemas en producción la que se debe
usar es la estable.
</sect>

<sect id="remove">Eliminando paquetes
<p>
Si ya no necesita utilizar cierto paquete, puede eliminarlo de su
sistema utilizando APT. Para realizar esta tarea sólo escriba:
<tt>apt-get remove paquete</tt>.
por ejemplo:

<p>
<example>
# apt-get remove gnome-panel
Reading Package Lists... Done
Building Dependency Tree... Done
The following packages will be REMOVED:
  gnome-applets gnome-panel gnome-panel-data gnome-session
0 packages upgraded, 0 newly installed, 4 to remove and 1 not upgraded.
Need to get 0B of archives. After unpacking 14.6MB will be freed.
Do you want to continue? [Y/n]
</example>

<p>
Como se puede apreciar en el ejemplo anterior, APT se hace cargo de
eliminar los paquetes dependientes del paquete eliminado. No
hay manera de eliminar un paquete utilizando APT sin eliminar los
paquetes que éste necesitaba.
<p>
Ejecutando <prgn>apt-get</prgn> como en el ejemplo causará que los
paquetes sean eliminados, pero sus archivos de configuración, si
existían, permanecerán intactos en el sistema.
Para una eliminación completa del paquete, ejecute:

<p>
<example>
# apt-get --purge remove gnome-panel
Reading Package Lists... Done
Building Dependency Tree... Done
The following packages will be REMOVED:
  gnome-applets* gnome-panel* gnome-panel-data* gnome-session*
0 packages upgraded, 0 newly installed, 4 to remove and 1 not upgraded.
Need to get 0B of archives. After unpacking 14.6MB will be freed.
Do you want to continue? [Y/n]
</example>

<p>
Observe el "*" después de los nombres. Esto indica que los archivos
de configuración de cada paquete serán eliminados también.
<p>
Al igual que en el caso de la <tt>instalación</tt>, puede utilizar un
símbolo con la opción de <tt>"remove"</tt> para invertir el significado
de un paquete en especial. En el caso de la eliminación, si agrega un
<tt>"+"</tt> después del nombre del paquete, el paquete será instalado
en vez de eliminarlo.

<p>
<example>
# apt-get --purge remove gnome-panel nautilus+
Reading Package Lists... Done
Building Dependency Tree... Done
The following extra packages will be installed:
  bonobo libmedusa0 libnautilus0 nautilus
The following packages will be REMOVED:
  gnome-applets* gnome-panel* gnome-panel-data* gnome-session*
The following NEW packages will be installed:
  bonobo libmedusa0 libnautilus0 nautilus
0 packages upgraded, 4 newly installed, 4 to remove and 1 not upgraded.
Need to get 8329kB of archives. After unpacking 2594kB will be used.
Do you want to continue? [Y/n]
</example>

<p>
Observe que <prgn>apt-get</prgn> enlista los paquetes que serán
instalados aparte de los seleccionados (esto es, aquellos que su
instalación es necesaria para el funcionamiento de aquellos que son
seleccionados), aquellos que serán eliminados, y aquellos que serán
instalados (incluyendo los paquetes adicionales otra vez).
</sect>

<sect id="upgrade">Actualizando paquetes
<p>
Las actualizaciones de los paquetes son un gran éxito de APT. Pueden
realizarse con tan sólo un comando: <tt>apt-get upgrade</tt>. Puede
utilizar esa opción para actualizar los paquetes de la distribución
actual, o bien para actualizar a una nueva distribución, aunque el
comando <tt>apt-get dist-upgrade</tt> es una mejor opción; para mayor
información, consulte la sección <ref id="dist-upgrade">.
<p>
Es muy útil utilizar este comando con la opción <tt>-u</tt>. Esta opción
muestra la lista completa de paquetes que APT actualizará. Sin ella, se
estaría actualizando a ciegas. APT descargará las versiones más
recientes de cada paquete y las instalará de la manera más apropiada. Es
muy importante ejecutar siempre <tt>apt-get update</tt> antes de probar
esto. Consulte la sección <ref id="update">. Observe este ejemplo:

<p>
<example>
# apt-get -u upgrade
Reading Package Lists... Done
Building Dependency Tree... Done
The following packages have been kept back
  cpp gcc lilo
The following packages will be upgraded
  adduser ae apt autoconf debhelper dpkg-dev esound esound-common ftp indent
  ipchains isapnptools libaudiofile-dev libaudiofile0 libesd0 libesd0-dev
  libgtk1.2 libgtk1.2-dev liblockfile1 libnewt0 liborbit-dev liborbit0
  libstdc++2.10-glibc2.2 libtiff3g libtiff3g-dev modconf orbit procps psmisc
29 packages upgraded, 0 newly installed, 0 to remove and 3 not upgraded.
Need to get 5055B/5055kB of archives. After unpacking 1161kB will be used.
Do you want to continue? [Y/n]
</example>

<p>
El proceso es muy fácil. Note que en las primeras líneas
<tt>apt-get</tt> menciona que algunos paquetes fueron <tt>conservados</tt>.
Esto significa que hay versiones nuevas de estos paquetes mas no fueron
actualizados por alguna razón. Algunas razones pueden ser dependencias
fallidas (el paquete del cual depende no tiene una versión nueva para
actualizar) o nuevas dependencias (el paquete ahora depende de nuevos
paquetes que la versión anterior).
<p>
No hay una solución clara para el primer caso. Para el segundo, es
suficiente con ejecutar <tt>apt-get install</tt> para el paquete
en cuestión, ya que con esto se descargarán las nuevas
dependencias. Una solución aún mejor es utilizar <tt>dist-upgrade</tt>.
Consulte la sección <ref id="dist-upgrade">.
</sect>

<sect id="dist-upgrade">Actualizando a una nueva versión
<p>
Esta opción de APT permite actualizar un sistema debian en un solo paso,
ya sea desde Internet o por CDs (comprado o descargado como una imagen
ISO).
<p>
También es utilizado cuando son realizados cambios entre las relaciones
de los paquetes instalados. Con <tt>apt-get upgrade</tt>, estos paquetes
permanecerían sin modificación (<tt>conservados</tt>).
<p>
Por ejemplo, supongamos que está utilizando la revisión 0 de la versión
estable de Debian, y compra el CD con la revisión 3. Puede utilizar APT
para actualizar el sistema al de el CD. Para lograr esto, utilice
<prgn>apt-cdrom</prgn> (consulte la sección <ref id="cdrom">) para
agregar el CD al archivo <tt>/etc/apt/sources.list</tt> y ejecute
<tt>apt-get dist-upgrade</tt>
<p>
Es muy importante mencionar que APT siempre busca la versión más
reciente de los paquetes. Así pues, si en su archivo
<tt>/etc/apt/sources.list</tt> se encontrara alguna otra fuente que
tuviera una versión más reciente que la del CD, APT descargaría esta
versión.
<p>
En el ejemplo mostrado en la sección <ref id="upgrade">, observamos que
algunos paquetes eran <tt>conservados</tt>. Solucionaremos este problema
ahora con el programa <tt>dist-upgrade</tt>:

<p>
<example>
# apt-get -u dist-upgrade
Reading Package Lists... Done
Building Dependency Tree... Done
Calculating Upgrade... Done
The following NEW packages will be installed:
  cpp-2.95 cron exim gcc-2.95 libident libopenldap-runtime libopenldap1
  libpcre2 logrotate mailx
The following packages have been kept back
  lilo
The following packages will be upgraded
  adduser ae apt autoconf cpp debhelper dpkg-dev esound esound-common ftp gcc
  indent ipchains isapnptools libaudiofile-dev libaudiofile0 libesd0
  libesd0-dev libgtk1.2 libgtk1.2-dev liblockfile1 libnewt0 liborbit-dev
  liborbit0 libstdc++2.10-glibc2.2 libtiff3g libtiff3g-dev modconf orbit
  procps psmisc
31 packages upgraded, 10 newly installed, 0 to remove and 1 not upgraded.
Need to get 0B/7098kB of archives. After unpacking 3118kB will be used.
Do you want to continue? [Y/n]
</example>

<p>
Observe que los paquetes ahora serán actualizados, y que nuevos paquetes
serán instalados (las nuevas dependencias de los paquetes). Observe
también que lilo sigue siendo <tt>conservado</tt>. Probablemente tiene
un problema aún más serio que una dependencia. Esto lo podemos saber si
ejecutamos:

<p>
<example>
# apt-get -u install lilo
Reading Package Lists... Done
Building Dependency Tree... Done
The following extra packages will be installed:
  cron debconf exim libident libopenldap-runtime libopenldap1 libpcre2
  logrotate mailx
The following packages will be REMOVED:
  debconf-tiny
The following NEW packages will be installed:
  cron debconf exim libident libopenldap-runtime libopenldap1 libpcre2
  logrotate mailx
The following packages will be upgraded
  lilo
1 packages upgraded, 9 newly installed, 1 to remove and 31 not upgraded.
Need to get 225kB/1179kB of archives. After unpacking 2659kB will be used.
Do you want to continue? [Y/n]
</example>

<p>
Como se observa arriba, lilo tiene un nuevo conflicto con el paquete
<package>debconf-tiny</package>, lo cual significa que no podrá ser
instalado (o actualizado) sin antes eliminar debconf-tiny

<p>
Para saber que guarda o elimina un paquete puede utilizar:

<p>
<example>
# apt-get -o Debug::pkgProblemResolver=yes dist-upgrade
Reading Package Lists... Done
Building Dependency Tree... Done
Calculating Upgrade... Starting
Starting 2
Investigating python1.5
Package python1.5 has broken dep on python1.5-base
  Considering python1.5-base 0 as a solution to python1.5 0
  Holding Back python1.5 rather than change python1.5-base
Investigating python1.5-dev
Package python1.5-dev has broken dep on python1.5
  Considering python1.5 0 as a solution to python1.5-dev 0
  Holding Back python1.5-dev rather than change python1.5
 Try to Re-Instate python1.5-dev
Done
Done
The following packages have been kept back
  gs python1.5-dev 
0 packages upgraded, 0 newly installed, 0 to remove and 2  not upgraded.
</example>

<p>
De este modo, es fácil notar que el paquete python1.5-dev no puede ser
instalado debido a una dependencia: python1.5.
</sect>

<sect id="clean">Eliminando archivos de paquete no utilizados: apt-get clean y autoclean.
<p>
Cuando APT instala un paquete, descarga los archivos necesarios de los servidores
enlistados en /etc/apt/sources, estos a su vez son guardados en un depósito local
(<file>/var/cache/apt/archives/</file>), y de ahí se procede con la instalación,
consulte <ref id="install">.
<p>
Con el tiempo el depósito puede crecer y ocupar mucho espacio en disco.
Afortunadamente, APT provee de herramientas para manejar su depósito local:
<prgn>apt-get</prgn>, <tt>clean</tt> y <tt>autoclean</tt>.
<p>
<prgn>apt-get clean</prgn> elimina todo excepto los archivos "lock" de
<file>/var/cache/apt/archives/</file> y
<file>/var/cache/apt/archives/partial/</file>. Así, si necesita reinstalar
un paquete APT, lo descargará de nueva cuenta.
<p>
<prgn>apt-get autoclean</prgn> elimina sólo los archivos que no pueden ser
descargados de nuevo.
<p>
EL siguiente ejemplo muestra como funciona la autolimpieza de apt-get:

<p>
<example>
# ls /var/cache/apt/archives/logrotate* /var/cache/apt/archives/gpm*
logrotate_3.5.9-7_i386.deb
logrotate_3.5.9-8_i386.deb
gpm_1.19.6-11_i386.deb
</example>

<p>
En /var/cache/apt/archives hay dos archivos para el paquete
<package>logrotate</package>y uno para
<package>gpm</package>.

<p>
<example>
# apt-show-versions -p logrotate
logrotate/stable uptodate 3.5.9-8
# apt-show-versions -p gpm
gpm/stable upgradeable from 1.19.6-11 to 1.19.6-12
</example>

<p>
<prgn>apt-show-versions</prgn> muestra que
<file>logrotate_3.5.9-8_i386.deb</file> provee la versión actualizada de
of <package>logrotate</package>, así pues
<file>logrotate_3.5.9-7_i386.deb</file> es innecesario. También
<file>gpm_1.19.6-11_i386.deb</file> no es necesario debido a que una versión mas reciente
 puede ser descargada.

<p>
<example>
# apt-get autoclean
Reading Package Lists... Done
Building Dependency Tree... Done
Del gpm 1.19.6-11 [145kB]
Del logrotate 3.5.9-7 [26.5kB]
</example>

<p>
Finalmente, <tt>apt-get autoclean</tt> elimina los archivos viejos.
Consulte <ref id="apt-show-versions"> para más información sobre
apt-show-versions.
</sect>
<sect id="dselect-upgrade">Utilizando APT con dselect
<p>
<prgn>dselect</prgn> es un programa que ayuda a los usuarios a
seleccionar paquetes de Debian para su instalación. Es considerado como
algo complicado y un poco aburrido, pero con practica podrás utilizar su
interfaz basada en consola-ncurses.
<p>
dselect se caracteriza por ser un programa que sabe como explotar
la capacidad de los paquetes Debian para "recomendar" y "sugerir"
otros paquetes para su instalación. Para utilizar el programa,
ejecuta <tt>'dselect'</tt> como root. Selecciona 'apt' como el método
de acceso. Esto no es verdaderamente necesario, pero si no está
utilizando un CD ROM y quiere descargar los paquetes de Internet,
la mejor opción es utilizar dselect.
<p>
Para entender mejor el uso de dselect, lea la
documentación que se encuentra en la página de Debian <url
id="http://www.debian.org/doc/ddo" name="http://www.debian.org/doc/ddp">
<p>
Después de seleccionar los paquetes con dselect, utilice:

<p>
<example>
# apt-get -u dselect-upgrade
</example>

<p>
Como en el siguiente ejemplo:

<p>
<example>
# apt-get -u dselect-upgrade
Reading Package Lists... Done
Building Dependency Tree... Done
The following packages will be REMOVED:
  lbxproxy
The following NEW packages will be installed:
  bonobo console-tools-libs cpp-3.0 enscript expat fingerd gcc-3.0
  gcc-3.0-base icepref klogd libdigest-md5-perl libfnlib0 libft-perl
  libgc5-dev libgcc300 libhtml-clean-perl libltdl0-dev libsasl-modules
  libstdc++3.0 metamail nethack proftpd-doc psfontmgr python-newt talk tidy
  util-linux-locales vacation xbill xplanet-images
The following packages will be upgraded
  debian-policy
1 packages upgraded, 30 newly installed, 1 to remove and 0 not upgraded.
Need to get 7140kB of archives. After unpacking 16.3MB will be used.
Do you want to continue? [Y/n]
</example>

<p>
Compárelo con lo que pasa al ejecutar apt-get dist-upgrade en el mismo
sistema:

<p>
<example>
# apt-get -u dist-upgrade
Reading Package Lists... Done
Building Dependency Tree... Done
Calculating Upgrade... Done
The following packages will be upgraded
  debian-policy
1 packages upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
Need to get 421kB of archives. After unpacking 25.6kB will be freed.
Do you want to continue? [Y/n]
</example>

<p>
Observe que muchos paquetes de arriba están siendo instalados porque
otros paquetes los sugirieron o recomendaron. Otros están siendo
instalados o eliminados (en el caso de lbxproxy, por ejemplo) por las
selecciones que realizamos por medio de la lista de dselect. Dselect
puede ser una herramienta poderosa al usarse en conjunción con APT.
</sect>
<sect id="default-version">Cómo mantener un sistema Híbrido.
<p>
La gente frecuentemente utiliza la distribución de prueba, ya que es
más estable que la inestable y más al día que la estable. Sin embargo,
los usuarios que quieren la última versión de algunos paquetes mas sin
embargo no confian en cambiar su sistema completo, tienen la opción de
utilizar una mezcla de un sistema prueba/inestable. Por otro lado, los
mas conservadores querrán utilizar una mezcla de estable/prueba.
<p>
Para hacer esto, agrega la siguiente línea en <file>/etc/apt/apt.conf</file>:

<p>
<example>
APT::Default-Release "testing";
</example>

<p>
Después, cuando esté listo a instalar paquetes de inestable, sólo
utilice el modificador <tt>-t</tt>:

<p>
<example>
# apt-get -t unstable install <var>packagename</var>
</example>

<p>
No olvide que para utilizar paquetes de una versión de Debian,
necesita agregar una línea de apt source a la lista en
<file>/etc/apt/sources</file>. En el ejemplo, necesitamos
líneas de <tt>unstable</tt>en vez de <tt>testing</tt>.

</sect>

<sect id="apt-show-versions">Cómo actualizar paquetes de versiónes específicas
de Debian.
<p>
<prgn>apt-show-versions</prgn> provee una amnera segura de actualizar
los sistemas híbridos sin tener que instalar más de la distribución
menos estable de la que tenían en mente. Por ejemplo, es posible
actualizar solo los paquetes inestables ejecutando:
<p>
<example>
# apt-get install `apt-show-versions -u -b | grep unstable`
</example>
</sect>

<sect id="pin">Cómo mantener versiones específicas de paquetes
instalados
<p>
Usted puede modificarle algo a un programa, y no tener tiempo o
no querer portar los cambios hacia una nueva versión del mismo.
O tal vez haya actualizado su sistema a la versión 3.0 de
Debian, pero quiere continuar con cierta versión de un programa de
Debian 2.2. Puede marcar la versión que tiene instalada así ésta no
será actualizada.
<p>
Utilizar este recurso es simple. Sólo se necesita editar el archivo
<tt>/etc/apt/preferences</tt>.
<p>
El formato es simple:
<p>
<example>
Package: &lt;package&gt;
Pin: &lt;pin definition&gt;
Pin-Priority: &lt;pin's priority&gt;
</example>
<p>
Por ejemplo, para mantener el paquete <package>sylpheed</package> el
cual he modificado para utilizar "reply-to-kist" en la versión 0.4.99,
agrego:
<p>
<example>
Package: sylpheed
Pin: version 0.4.99*
</example>
<p>
Observe que utilizo un <tt>*</tt> (asterisco). Este es un "comodín";
este específica que yo quiero que este "pin" sea válido para todas las
versiones que empiecen con 0.4.99. Esto es así porque Debian numera sus
paquetes con una "revisión Debian" y yo no quiero entorpecer la
instalación de esas revisiones. Así pues, las versiones 0.4.99-1 y
0.4.99-10 serán instaladas tan pronto como estén disponibles. Observe
que si modificó un programa no querrá hacer esto.
<p>
El campo <tt>Pin-Priority</tt> es opcional; si no se especifica algo,
el valor por omisión es 989
<p>
Veamos como trabajan las prioridades de "pin". Una prioridad menor que 0
indica que el paquete jamás deberá ser instalado. Prioridades de 0 a 100
denotan paquetes que no están instalados y que no hay versiones
disponibles. Esto no vendrá en el proceso de escoger-versión. La
prioridad de 100 es asignada a los paquetes instalados - para la versión
instalada de un paquete que será reemplazado por una versión diferente,
el reemplazo deberá tener una prioridad mayor a 100.
<p>
Prioridades mayores a 100 indican que el paquete debe ser instalado.
Típicamente, la versión instalada del paquete cambia sólo con las
actualizaciones a una versión más nueva. Cualquier prioridad entre
100 y 1000 (incluyéndolos) indica este comportamiento típico.
Un paquete con tal prioridad no se reemplazará por una versión anterior.
Por lo tanto, si yo tuviera sylpheed 0.5.3 instalado y definiera un pin
en sylpheed 0.4.99 con prioridad 999, el paquete 0.4.99 este <tt>no</tt>
se instalaría para satisfacer el pin. Para hacer un programa que pueda
reemplazarse por una versión anterior, necesita poseer una prioridad
mayor a 1000.
<p>
Un "pin" puede ser especificado en una <tt>versión</tt>, <tt>sub-versión</tt>
o al <tt>origen</tt> de un paquete.
<p>
Estableciendo un "pin" en una <tt>versión</tt>, como hemos visto,
pueden ser especificadas utilizando números y comodines,
varias versiones al mismo tiempo.
<!-- what's available?  standard shell globs?  ?*[]   or more? -->
<p>
La opción <tt>"release"</tt> depende de el archivo "Release" de un
servidor o CD. Esta opción podría no ser de mucha utilidad si está
utilizando servidores que no ofrezcan este archivo. Puede ver los
contenidos de este archivo que tiene en <tt>/var/lib/apt/lists/</tt>.
Los parámetros para un "release" son:
<tt>a</tt> (archive), <tt>c</tt> (components), <tt>v</tt> (version),
<tt>o</tt> (origin) and <tt>l</tt> (label).
<p>
Un ejemplo:
<example>
Package: *
Pin: release v=2.2*,a=stable,c=main,o=Debian,l=Debian
Pin-Priority: 1001
</example>
<p>
En este ejemplo, escogimos la versión 2.2* de Debian (la cual puede ser
2.2r2, 2.2r3 -- esto es un "point release" que típicamente incluyen
parches de seguridad y otras actualizaciones importantes), el servidor
<tt>estable</tt>, sección <tt>principal</tt> etiqueta y origen Debian.
Origen(o=) define quien creó el archivo "Release", la etiqueta (l=)
define el nombre d la distribución: Debian para Debian como si mismo y
"Progeny" para "Progeny", por ejemplo:
<p>
<example>
$ cat
 /var/lib/apt/lists/ftp.debian.org.br_debian_dists_potato_main_binary-i386_Relea
se
Archive: stable
version: 2.2r3
Component: main
Origin: Debian
Label: Debian
Architecture: i386
</example>
</sect>
<chapt id="helpers">Ayudantes muy útiles.
<sect id="equivs">Cómo instalar paquetes localmente compilados: equivs
<p>
Algunas veces, la gente quiere utlilizar una versión específica de un programa
disponible sólo en código fuente, sin un paquete Debian. Para el sistema
de empaquetamiento puede ser problemático el hacer esto. Suponga que
quiere compilar una nueva versión de un servidor de correo. Todo
esta bien, pero varios paquetes de Debian dependen de un MTA (Mail 
Transport Agent). Desde que instala algo que compila, el sistema
de adminstración de paquetes no sabe nada al respecto.
<p>
Aquí es donde <package>equivs</package> entra a la escena. Para
utilzarlo, instale el paquete con ese nombre. Lo que hace es crear
un paquete vacio que posibilita el satisfacer las dependencias, haciendo
que el sistema de administración de paquetes crea que las dependencias
han sido satisfechas.
<p>
Antes de iniciar, es bueno recordarle que hay maneras más seguras
de compilar un programa que esta ya empaquetedo para Debian con
diferentes opciones, y que no se debería utilizar equivs para 
reemplazar dependencias si no sabe lo que hace.
Consulte <ref id="sourcehandling"> para mas informacion.
<p>
Continuemos con el ejemplo del MTA, usted acaba de instalar su
<prgn>postfix</prgn> recién compilado y ahora instalará 
<package>mutt</package>. De repente descubre que <package>mutt</package>
quiere instalar otro MTA. Pero usted ya tiene el suyo.
<p>
Vaya a algún directorio (<file>/tmp</file>, por ejemplo) y ejecute:

<p>
<example>
# equivs-control <var>name</var>
</example>

<p>
Sustituya <var>name</var> por el nombre del archivo de control que quiera
crear. El archivo será creado como se muestra:

<p>
<example>
Section: misc
Priority: optional
Standards-Version: 3.0.1

Package: &lt;enter package name; defaults to equivs-dummy&gt;
Version: &lt;enter version here; defaults to 1.0&gt;
Maintainer: &lt;your name and email address; defaults to username&gt;
Pre-Depends: &lt;packages&gt;
Depends: &lt;packages&gt;
Recommends: &lt;packages&gt;
Suggests: &lt;package&gt;
Provides: &lt;(virtual)package&gt;
Architecture: all
Copyright: &lt;copyright file; defaults to GPL2&gt;
Changelog: &lt;changelog file; defaults to a generic changelog&gt;
Readme: &lt;README.Debian file; defaults to a generic one&gt;
Extra-Files: &lt;additional files for the doc directory, commaseperated&gt;
Description: &lt;short description; defaults to some wise words&gt;
 long description and info
 .
 segundo párrafo
</example>

<p>
Nosotros sólo necesitamos modificar esto para hacer lo que queremos.
Eche un vistazo al formato del campo y a sus descripciones,
no hay necesidad de explicar cada una, vamos a hacer lo que se necesita:

<p>
<example>
Section: misc
Priority: optional
Standards-Version: 3.0.1

Package: mta-local
Provides: mail-transport-agent
</example>

<p>
Si, eso es todo. <package>mutt</package> depende de
<package>mail-transport-agent</package>, este es un paquete
virtual provisto por todos los MTA, yo podría simplemente
nombrar el paquete <package>mail-transport-agent</package>,
pero prefiero usar el esquema de paquetes virtuales, utilizando
"Provides".

<p>
Ahora sólo necesita crear el paquete:

<p>
<example>
# equivs-build <var>name</var>

dh_testdir
touch build-stamp
dh_testdir
dh_testroot
dh_clean -k
# Add here commands to install the package into debian/tmp.
touch install-stamp
dh_testdir
dh_testroot
dh_installdocs
dh_installchangelogs
dh_compress
dh_fixperms
dh_installdeb
dh_gencontrol
dh_md5sums
dh_builddeb
dpkg-deb: building package `<var>name</var>' in `../<var>name</var>_1.0_all.deb'.

The package has been created.
Attention, the package has been created in the current directory,
</example>

<p>
E instalar el <tt>.deb</tt> creado.
<p>
Como se puede ver, hay muchos usos para <prgn>equivs</prgn>. Se puede
crear un paquete <tt>my-favorites</tt> el cual dependiera en los
paquetes que usted usualmente instala, por ejemplo. Sólo deje volar
su imaginación, pero sea cuidadoso.

<p>
Es importante recalcar que hay archivos de control ejemplo en
<file>/usr/share/doc/equivs/examples</file>. Revíselos.
</sect>

<sect id="localepurge">Eliminando archivos de localización no utilizados: localepurge
<p>
Muchos Debianeros utilizan sólo un "locale". Un usuario Mexicano de Debian,
por ejemplo, usualmente utulizará el <tt>es_MX</tt> todo el tiempo y
no le importará el <tt>de</tt>.
<p>
<package>localepurge</package> es una herramienta muy útil para estos
usuarios. Puede liberar mucho espacio dejando sólo instalados
los que realmente necesita. Sólo ejecuta <tt>apt-get install localepurge</tt>.

<p>
Es muy fácil de configurar, las preguntas de debconf guían al usuario
en una configuración paso a paso. Sea cuidadoso en contestar la primer
pregunta, una respuesta errónea podría eliminar todos los archivos de
localización, aún aquellos que necesitas. La única manera de recuperarlos
es reinstalando todos lo paquetes que los proveen.
</sect>

<sect id="helper-show-versions">Cómo saber que paquetes pueden ser actualizados.
<p>
<prgn>apt-show-versions</prgn> es un programa que muestra que paquetes
en el sistema pueden ser actualizados y mucha información mas.
La opción <tt>-u</tt> muestra una lista de paquetes actualizables:

<p>
<example>
$ apt-show-versions -u    
libeel0/unstable upgradeable from 1.0.2-5 to 1.0.2-7
libeel-data/unstable upgradeable from 1.0.2-5 to 1.0.2-7
</example>
</sect>

</chapt>

<chapt id="search">Obteniendo información de los paquetes.
<p>
Existen algunas interfaces para el APT que lo hacen más fácil de
utilizar.
<p>
Pero nuestro objetivo aquí es aprender a manejar APT puro. Así que, ¿cómo
podría saber el nombre de un paquete que quiere instalar?
<p>
Tenemos numerosos recursos para realizar esa tarea. Empezaremos con
<tt>apt-cache</tt>. Este programa es utilizado por APT para mantener su
base de datos. Nosotros sólo veremos un poco de sus aplicaciones.

<sect id="cache">Descubriendo nombres de paquetes
<p>
Por ejemplo, supongamos que usted quiere revivir la gloria de la época
dorada del Atari 2600. Quiere utilizar APT para instalar un emulador de
Atari, y después bajar algunos juegos, puede hacer lo siguiente:

<p>
<example>
# apt-cache search atari
atari-fdisk-cross - Partition editor for Atari (running on non-Atari)
circuslinux - The clowns are trying to pop balloons to score points!
madbomber - A Kaboom! clone
tcs - Character set translator.
atari800 - Atari emulator for svgalib/X/curses
stella - Atari 2600 Emulator for X windows
xmess-x - X binaries for Multi-Emulator Super System
</example>

<p>
Hemos encontrado muchos paquetes relacionados con lo que estamos
buscando. Para obtener mayor información de un paquete específico,
hacemos lo siguiente:

<p>
<example>
# apt-cache show stella
Package: stella
Priority: extra
Section: non-free/otherosfs
Installed-Size: 830
Maintainer: Tom Lear &lt;tom@trap.mtview.ca.us&gt;
Architecture: i386
version: 1.1-2
Depends: libc6 (&gt;= 2.1), libstdc++2.10, xlib6g (&gt;= 3.3.5-1)
Filename: dists/potato/non-free/binary-i386/otherosfs/stella_1.1-2.deb
Size: 483430
MD5sum: 11b3e86a41a60fa1c4b334dd96c1d4b5
Description: Atari 2600 Emulator for X windows
 Stella is a portable emulator of the old Atari 2600 video-game console
 written in C++. You can play most Atari 2600 games with it. The latest
 news, code and binaries for Stella can be found at:
 http://www4.ncsu.edu/~bwmott/2600
</example>

<p>
En este desplegado tiene muchos detalles sobre paquete seleccionado
así como su descripcion. Si el paquete estuviera instalado y hubiera una
versión más reciente, vería la información de las dos versiones, por
ejemplo:

<p>
<example>
# apt-cache show lilo
Package: lilo
Priority: important
Section: base
Installed-Size: 271
Maintainer: Russell Coker &lt;russell@coker.com.au&gt;
Architecture: i386
version: 1:21.7-3
Depends: libc6 (&gt;= 2.2.1-2), debconf (&gt;=0.2.26), logrotate
Suggests: lilo-doc
Conflicts: manpages (&lt;&lt;1.29-3)
Filename: pool/main/l/lilo/lilo_21.7-3_i386.deb
Size: 143052
MD5sum: 63fe29b5317fe34ed8ec3ae955f8270e
Description: LInux LOader - The Classic OS loader can load Linux and others
 This Package contains lilo (the installer) and boot-record-images to
 install Linux, OS/2, DOS and generic Boot Sectors of other OSes.
 .
 You can use Lilo to manage your Master Boot Record (with a simple text screen)
 or call Lilo from other Boot-Loaders to jump-start the Linux kernel.

Package: lilo
Status: install ok installed
Priority: important
Section: base
Installed-Size: 190
Maintainer: Vincent Renardias &lt;vincent@debian.org&gt;
version: 1:21.4.3-2
Depends: libc6 (&gt;= 2.1.2)
Recommends: mbr
Suggests: lilo-doc
Description: LInux LOader - The Classic OS loader can load Linux and others
 This Package contains lilo (the installer) and boot-record-images to
 install Linux, OS/2, DOS and generic Boot Sectors of other OSes.
 .
 You can use Lilo to manage your Master Boot Record (with a simple text screen)
 or call Lilo from other Boot-Loaders to jump-start the Linux kernel.
</example>

<p>
Observe que el primero en la lista es el paquete disponible y el segundo
es el instalado. Para mayor información sobre un paquete puede
utilizar:

<p>
<example>
# apt-cache showpkg penguin-command
Package: penguin-command
versions:
1.4.5-1(/var/lib/apt/lists/download.sourceforge.net_debian_dists_unstable_main_b
inary-i386_Packages)(/var/lib/dpkg/status)

Reverse Depends:
Dependencies:
1.4.5-1 - libc6 (2 2.2.1-2) libpng2 (0 (null)) libsdl-mixer1.1 (2 1.1.0)
 libsdl1.1 (0 (null)) zlib1g (2 1:1.1.3)
Provides:
1.4.5-1 -
Reverse Provides:
</example>

<p>
Y sólo para saber de que paquetes depende:

<example>
[root]@[/] # apt-cache depends penguin-command
penguin-command
  Depends: libc6
  Depends: libpng2
  Depends: libsdl-mixer1.1
  Depends: libsdl1.1
  Depends: zlib1g
</example>

<p>
En resumen, tenemos una gran variedad de armas que podemos utilizar para
averiguar el nombre del paquete que queramos.
</sect>

<sect id="dpkg-search">Utilizando dpkg para conocer los nombres de
paquetes
<p>
Uno de los caminos para conocer el nombre de un paquete es saber el
nombre de un archivo importante que sea contenido por ese
paquete. Por ejemplo, para conocer el paquete que ofrece ciertos
archivos <tt>".h"</tt> puede ejecutar:

<p>
<example>
# dpkg -S stdio.h
libc6-dev: /usr/include/stdio.h
libc6-dev: /usr/include/bits/stdio.h
perl: /usr/lib/perl/5.6.0/CORE/nostdio.h
</example>

<p>
o:

<p>
<example>
# dpkg -S /usr/include/stdio.h
libc6-dev: /usr/include/stdio.h
</example>

<p>
Para averiguar los nombres de paquetes instalados en su sistema, lo cual
es útil por ejemplo, si planea limpiar su disco duro, ejecuta:

<p>
<example>
# dpkg -l | grep mozilla
ii  mozilla-browse 0.9.6-7        Mozilla Web Browser
</example>
<p>
El problema con este comando radica en que puede "truncar" el nombre del
programa. En el ejemplo anterior, el nombre completo del paquete es
<tt>mozilla-browser</tt>. Para arreglar esto, puede utilizar las
variables de ambiente <tt>COLUMNS</tt> de este modo:

<p>
<example>
[kov]@[couve] $ COLUMNS=132 dpkg -l | grep mozilla
ii  mozilla-browser             0.9.6-7                     Mozilla Web Browser - core and browser
</example>

<p>
O la descripción del paquete, o parte de ella para encontrar el nombre
completo. Como se muestra a continuación:

<p>
<example>
# apt-cache search "Mozilla Web Browser"
mozilla-browser - Mozilla Web Browser
</example>
</sect>

<sect id="auto-apt">Cómo instalar programas "en demanda"
<p>
Está compilando un programa, y de repente, boom!, hay un error porque
necesita cierto archivo <tt>".h"</tt> que no tiene. El programa
<prgn>auto-apt</prgn> puede salvarlo de esas situaciones. Le pregunta si
instala ciertos programas que son requeridos, deteniendo los procesos
relevantes y continuando una vez que el paquete es instalado.
<p>
Lo que hace, es básicamente ejecutar:

<p>
<example>
# auto-apt run command
</example>

<p>
Dónde "command" es el comando que al ser ejecutado, necesita ciertos
archivos, por ejemplo:

<p>
<example>
# auto-apt run ./configure
</example>

<p>
Le preguntará entonces si desea instalar los paquetes necesarios y llamará
automáticamente a apt-get. Si está en modo gráfico, una interfáz gráfica
remplazará la interfáz de texto que aparece normalmente.
<p>
Auto-apt mantiene las bases de datos que necesitan estar al día
para lograr que esto funcione. Esto se realiza con los comandos
<tt>auto-apt update</tt>, <tt>auto-apt updatedb</tt> y
<tt>auto-apt update-local</tt>.
</sect>
<sect id="apt-file">Cómo descubrir a que paquete peretenece un archivo.
<p>
Si usted quiere instalar un paquete, y no puede saber como se llama al
buscarlo con <prgn>apt-cache</prgn>, pero sabe el nombre de un archivo
que pertenece al paquete, entonces puede utilizar <prgn>apt-file</prgn> para
encontrar el nombre del paquete que busca. Esto se hace de la siguiente manera:

<p>
<example>
$ apt-file search <var>filename</var>
</example>

<p>
Trabaja de manera similar a <tt>dpkg -S</tt>, pero tambien le muestra
paquetes sin instalar que contengan ese archivo. Puede también ser utilizado
para saber que paquetes contiene archivos de inclusión para la compilación de
ciertos programas, aunque <prgn>auto-apt</prgn> es una mejor solución para
estos casos, consulte <ref id="auto-apt">.
<p>
También puede enlistar el contenido de un paquete ejecutando:

<p>
<example>
$ apt-file list <var>packagename</var>
</example>

<p>
<prgn>apt-file</prgn> mantiene una base de datos sobre
que archivos tiene cada paquete, tal como auto-apt lo hace
y necesita estar al día. Esto se hace asi:

<example>
# apt-file update
</example>

<p>
Por omisión, <prgn>apt-file</prgn> utiliza la misma base de datos
 que <prgn>auto-apt</prgn> utiliza, consulte <ref id="auto-apt">.

</sect>

<sect id="apt-listchanges">Cómo mantenerse informado de los cambios en
los paquetes.
<p>
Cada paquete instala en su directorio de documentación
(<tt>/usr/share/doc/packagename</tt>) un archivo llamado
<tt>changelog.Debian.gz</tt> el cual contiene una lista de cambios
realizados al paquete desde la última versión. Puede leer estos
archivos con <tt>zless</tt>, por ejemplo, pero no es muy fácil estar
buscando estos archivos después de una instalación de un sistema
completo.
<p>
Existe una forma de automatizar esta tarea por medio de una herramienta
llamada <prgn>apt-listchanges</prgn>. Para iniciar, primero necesita
instalar el paquete <package>apt-listchanges</package>. Durante la
instalación del paquete, Debconf lo configurará. Conteste a las
preguntas sobre la configuración como desee.
<p>
La opción: "Apt-listchanges deberá ser automáticamente ejecutada por APT"
esto es muy útil porque muestra los cambios que han sido hechos al paquete
que está siendo instalado por apt durante una actualización y le deja
analizarlos antes de continuar. La opción: "Debe apt-listchanges
preguntar por autorización después de mostrar los cambios" es útil
porque le pregunta si desea continuar la instalación después de leer
los cambios. Si decide no continuar con la instalación apt-listchanges
regresará con un error y apt abortará la instalación.
<p>
Después que apt-listchanges sea instalado, tan pronto como los paquetes
sean descargados por apt, mostrará las listas de los cambios realizados
a estos paquetes antes de instalarlos.
</sect>
</chapt>

<chapt id="sourcehandling">Trabajando con los paquetes fuente
<sect id="source">Descargando los paquetes fuente
<p>
Es muy común en el mundo del software libre estudiar el código fuente
o corregir código erróneo. Para lograr esto, necesita descargar el
código fuente del programa. El sistema APT provee de una manera fácil de
obtener código fuente de muchos programas contenidos en la distribución,
incluyendo todos los archivos necesarios para crear un .deb para el
programa.
<p>
Otro uso común de las fuentes de Debian es el de adaptar la versión más
reciente de un programa, de la versión inestable. Compilar un programa
en la versión estable generará .debs con las dependencias ajustadas para
acoplarse a los paquetes en la distribución.
<p>
Para lograr esto una entrada <tt>deb-src</tt> en el archivo
<tt>/etc/apt/sources.list</tt> debe apuntar hacia "unstable". Esta línea
debe estar habilitada (sin comentar). Vea a la sección <ref
id="sources.list">.
<p>
Para descargar un paquete fuente, haga lo siguiente:

<p>
<example>
$ apt-get source packagename
</example>
<p>
Esto descargará tres archivos: un <tt>.orig.tar.gz</tt>, un
<tt>.dsc</tt> y un <tt>.diff.gz</tt>. En el caso de paquetes especiales
para Debian, el último de estos archivos no es descargado y el primero
generalmente no tendrá el <tt>"orig"</tt> en el nombre.
<p>
El archivo <tt>.dsc</tt> es utilizado por dbpkg-source para descomprimir
el paquete en el directorio <var>packagename-version</var>. Con cada
paquete descargado existe un directorio <tt>debian/</tt> que contiene
los archivos necesarios para crear un paquete .deb.
<p>
Para automáticamente compilar el paquete cuando está siendo descargado,
sólo agrega <tt>-b</tt> a la línea de comando así.

<p>
<example>
$ apt-get -b source packagename
</example>

<p>
Si decide no crear el archivo .deb mientras descarga el paquete,
puede crearlo después ejecutando:

<p>
<example>
$ dpkg-buildpackage -rfakeroot -uc -b
</example>

en el directorio que se ha creado después de descargar el paquete.
Para instalar el paquete que ha sido creado por los comandos
anteriores, hay que usar el sistema de administración de paquetes
directamente como aquí:

<p>
<example>
# dpkg -i <var>archivo.deb</var>
</example>

<p>
Hay una diferencia entre el <prgn>apt-get</prgn> <tt>source</tt>
y las otras opciones. La opción <tt>source</tt> puede ser utilizada por
usuarios normales, sin necesitar de poderes especiales de root. Los
archivos son descargados a un directorio desde el cual el comando
<tt>apt-get source package</tt> es ejecutado.
</sect>

<sect id="build-dep">Paquetes necesarios para la compilación de un
paquete fuente
<p>
Normalmente, librerías compartidas y ciertos encabezados son necesarios
para lograr una compilación exitosa. Todos los paquetes fuente tienen un
campo en sus archivos de control llamado "Build-Depends:" el cual indica
que paquetes son necesarios adicionalmente para que el paquete sea
compilado.

<p>
APT tiene un método sencillo para descargar estos paquetes. Sólo ejecuta
<tt>apt-get build-dep package</tt>, donde "package" es el nombre del
paquete que vas a compilar, por ejemplo:

<p>
<example>
# apt-get build-dep gmc
Reading Package Lists... Done
Building Dependency Tree... Done
The following NEW packages will be installed:
  comerr-dev e2fslibs-dev gdk-imlib-dev imlib-progs libgnome-dev libgnorba-dev
  libgpmg1-dev
0 packages upgraded, 7 newly installed, 0 to remove and 1 not upgraded.
Need to get 1069kB of archives. After unpacking 3514kB will be used.
Do you want to continue? [Y/n]
</example>

<p>
Los paquetes que serán instalados son los paquetes necesarios para que
<package>gmc</package> sea compilado correctamente. Es importante
observar que este comando no busca el paquete fuente del programa a ser
compilado. Necesitará entonces ejecutar <tt>apt-get source</tt> para
obtenerlo.

<p>
Si quiere solamente saber cuales paquetes se requieren para crear un
cierto paquete, hay una variante del comando <tt>apt-cache show</tt>
(vease <ref id="search">, que enseña, entre otra información, la
línea <tt>Build-Depends</tt> que enlista estos paquetes.

<p>
<example>
# apt-cache showsrc
<var>package</var>
</example>

</sect>
</chapt>

<chapt id="erros">Cómo lidiar con los errores
<sect id="erros-comuns">Errores comunes
<p>
Los errores siempre existirán, muchos de ellos son provocados por usuarios
que no ponen atención. Lo siguiente es una lista de algunos de los
errores más comunes y cómo corregirlos.
<p>
Si recibe un mensaje que se parece al mostrado a continuación cuando
trate de ejecutar <tt>apt-get install package</tt>

<p>
<example>
Reading Package Lists... Done
Building Dependency Tree... Done
W: Couldn't stat source package list 'http://people.debian.org unstable/
 Packages'
 (/var/state/apt/lists/people.debian.org_%7ekov_debian_unstable_Packages) - stat
 (2 No such file or directory)
W: You may want to run apt-get update to correct these missing files
E: Couldn't find package penguineyes
</example>

<p>
Olvidó ejecutar <tt>apt-get update</tt> después del último cambio al
archivo <tt>/etc/apt/sources.list</tt>
<p>
Si el error se ve como este:

<p>
<example>
E: Could not open lock file /var/lib/dpkg/lock - open (13 Permission denied)
E: Unable to lock the administration directory (/var/lib/dpkg/), are you root?
</example>

<p>
Cuando ejecuta <tt>apt-get</tt> con cualquier opción diferente de
<tt>source</tt> , es porque no tiene permisos de root, esto es, lo
está ejecutando como usuario normal.

<p>
Hay un error similar al de arriba el cual pasa cuando usted ejecuta dos
copias de <prgn>apt-get</prgn> al mismo tiempo, o aun cuando trata de
ejecutar <prgn>apt-get</prgn> mientras un proceso <prgn>dpkg</prgn> está
activo. La única opción que puede ser utilizada simultáneamente es
<tt>source</tt>.
<p>
Si una instalación se termina abruptamente en la mitad del proceso, y
averigua que ya no es posible instalar o eliminar el paquete, intente
con estos dos comandos:

<p>
<example>
# apt-get -f install
# dpkg --configure -a
</example>

<p>
Después inténtalo nuevamente. Tal vez sea necesario ejecutar el segundo
comando más de una vez. Ésta es una lección importante para aquellos
aventureros que utilizan la versión "unstable".

<p>
Si recibe el error "E: Dynamic MMap ran out of room" al ejecutar
<tt>apt-get update</tt>, agregue la siguiente línea a 
<file>/etc/apt/apt.conf</file>:

<example>
APT::Cache-Limit 10000000;
</example>

</sect>

<sect id="help">¿Dónde puedo encontrar ayuda?
<p>
Si está lleno de dudas, consulte la extensa documentación
disponible para el sistema de paquetes de Debian. <tt>--help</tt>,
las páginas de manual (man-pages) que pueden ser una enorme ayuda ,
así como la documentación incluida en los directorios de <tt>/usr/share/doc</tt>
tal como <tt>/usr/share/doc/apt</tt>.
<p>
Si esta documentación no quita sus miedos, pregunte en las listas de
correo de Debian. Puede encontrar más información sobre listas
específicas en el sitio de Debian: <url id="http://www.debian.org"
name="http://www.debian.org">.
<p>
Recuerde que estas listas y recursos sólo deberán ser utilizados por
usuarios de Debian, usuarios de otros sistemas encontrarán un mejor
soporte de las comunidades de sus distribuciones.
</sect>
</chapt>
<chapt id="distros">Que distribuciónes soporten APT.
<p>
Estos son los nombres de algunas distribuciones que utilizan APT:
<p>
Debian GNU/Linux (<url id="http://www.debian.org" name="http://www.debian.org">) 
- Fue por esta distribución que APT fue desarrollado.
<p>
Conectiva (<url id="http://www.conectiva.com.br" name="http://www.conectiva.com.br">) 
- Esta fue la primer distribución en portar APT con rpm.
<p>
Mandrake (<url id="http://www.mandrake.com" name="http://www.mandrake.com">)
<p>
PLD (<url id="http://www.pld.org.pl" name="http://www.pld.org.pl">)
<p>
Vine (<url id="http://www.vinelinux.org" name="http://www.vinelinux.org">)
<p>
APT4RPM (<url id="http://apt4rpm.sf.net" name="http://apt4rpm.sf.net">)
<p>
Alt Linux (<url id="http://www.altlinux.ru/" name="http://www.altlinux.ru/">)
<p>
Red Hat (<url id="http://www.redhat.com/" name="http://www.redhat.com/">)
<p>
Sun Solaris (<url id="http://www.sun.com/" name="http://www.sun.com/">)
<p>
SuSE (<url id="http://www.suse.de/" name="http://www.suse.de/">)
<p>
Yellow Dog Linux (<url id="http://www.yellowdoglinux.com/"
name="http://www.yellowdoglinux.com/">)
</chapt>
<chapt id="agradecimientos">Créditos
<p>
Gracias a mis amigos del proyecto Debian-BR, y a Debian mismo, quienes
están ayudándome constantemente y siempre me dan fuerza para continuar
trabajando para el beneficio de la humanidad, así como el ayudarme en
mi meta de salvar al mundo. :)
<p>
También agradezco a la enorme ayuda brindada por CIPSGA a nuestro
proyecto y a todos los proyectos libres  que dan nuevas ideas.
<p>

Y un agradecimiento especial a:
<p>
Yooseong Yang &lt;yooseong@debian.org&gt;
<p>
Michael Bramer &lt;grisu@debian.org&gt;
<p>
Bryan Stillwell &lt;bryan@bokeoa.com&gt;
<p>
Pawel Tecza  &lt;pawel.tecza@poczta.fm&gt;
<p>
Hugo Mora &lt;h.mora@melix.com.mx&gt;
<p>
Luca Monducci &lt;luca.mo@tiscali.it&gt;
<p>
Tomohiro KUBOTA &lt;kubota@debian.org&gt;
<p>
Pablo Lorenzzoni &lt;spectra@debian.org&gt;
<p>
Steve Langasek &lt;vorlon@netexpress.net&gt;
<p>
Arnaldo Carvalho de Melo &lt;acme@conectiva.com.br&gt;
<p>
Erik Rossen &lt;rossen@freesurf.ch&gt;
<p>
Ross Boylan &lt;RossBoylan@stanfordalumni.org&gt;
<p>
Matt Kraai &lt;kraai@debian.org&gt;
<p>
Aaron M. Ucko &lt;ucko@debian.org&gt;
<p>
Jon Åslund &lt;d98-jas@nada.kth.se&gt;
</chapt>

<chapt id="novas">Nuevas versiónes de este tutorial:
<p>
Este manual fue creado para el proyecto <url
 id="http://www.debian-br.org"
name="Debian-BR">,con el propósito de ayudar al uso diario de Debian.
<p>
Nuevas versiónes de este documento estarán disponibles en la página de
proyectos de documentos de Debian, en:
<url id="http://www.debian.org/doc/ddp" 
name="http://www.debian.org/doc/ddp">.
<p>
Comentarios y críticas pueden ser enviadas directamente a mi por email
en:
<email>kov@debian.org</email>.
</chapt>

</book>

</debiandoc>

