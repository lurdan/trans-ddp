<!doctype debiandoc system>
<debiandoc>

<book>

<title>APT NASIL</title>

<author>
<name>Gustavo Noronha Silva</name> <email>kov@debian.org</email>
</author>
<author>
<name>Çeviri: Murat Demirten</name> <email>murat@debian.org</email>
</author>

<version>1.8.3 - Aralýk 2002</version>

<abstract>
Bu doküman Debian paket yönetim uygulamasý APT hakkýnda genel kullaným bilgileri
vermeyi amaçlamaktadýr. APT'nin amacý Debian kullanýcýlarýnýn hayatýný kolaylaþtýrmak
ve sistemin yönetiminin daha iyi, anlaþýlýr þekilde yapýlabilmesini saðlamaktýr.
APT Debian daðýtýmý olarak kullanýcýlarý daha çok desteklemek amacýyla,
Debian projesi için geliþtirilmiþtir.
</abstract>

<copyright>
<copyrightsummary>
Copyright &copy; 2001, 2002 Gustavo Noronha Silva
</copyrightsummary>
<p>
Bu doküman GNU FDL (Free Documentation License) lisansý ile daðýtýlmaktadýr.
Herkese yardýmý olmasý ümidiyle yazýlmýþtýr fakat hiç bir garanti vadetmemektedir.
</copyright>

<toc>

<chapt>Baþlarken
<p>
Önce .tar.gz vardý. Kullanýcýlar GNU/Linux sistemlerinde kullandýklarý her programý
derlemek zorundaydýlar. Debian geliþtirimi sýrasýnda, kurulu paketlerin
yönetimini saðlayacak bir sistemin zorunluluðu hemen görüldü. Bu amaçla geliþtirilen
sisteme
<prgn>dpkg</prgn> adý verildi. Sonuçta GNU/Linux dünyasý, RedHat'in kendi paket
yönetim sistemini geliþtirmesinden biraz önce, dpkg ile tanýþtý.
<p>
Hemen ardýndan GNU/Linux sisteminin geliþtiricilerinin kafasýnda yeni bir ikilem oluþtu.
Paketlerin hýzlý, pratik ve verimli bir yöntemle kurulabilmesini, paket baðýmlýlýklarý
yönetimi ve paket güncellemeleri sýrasýnda konfigürasyon dosyalarýnýn güncellenmesini
saðlayacak bir araca ihtiyaç vardý. Gene Debian projesi kapsamýnda ilk ürün ortaya çýktý:
APT (Advanced Packaging Tool). Apt daha sonra Connectiva tarafýndan rpm paketler ile
kullanýlmak üzere port edildi ve bazý daðýtýmlar tarafýndan da kullanýlmaya baþlandý.

<p>
Bu dokümanda Connectiva APT portu olan apt-rpm'den bahsedilmemekle birlikte, dokümana
eklenti amacýyla bu konuda da bir þeyler gönderebilirsiniz.
<p>
Bu döküman bir sonraki Debian sürümü olacak <tt>Sarge</tt> temel alýnarak yazýlmýþtýr.
</chapt>
<chapt id="basico">Temel Konfigürasyon
<sect id="sources.list">/etc/apt/sources.list dosyasý
<p>
APT paketlerin bulunduðu kaynaklara nasýl eriþebileceðinin bilgisini 
<tt>/etc/apt/sources.list</tt> dosyasýnda saklar.
<p>
Dosya içindeki girdilerin biçimi aþaðýdaki gibidir:

<p>
<example>
deb http://host/debian sürüm bölüm1 bölüm2 bölüm3
deb-src http://host/debian distribution section1 section2 section3
</example>

<p>
Elbette yukarýda verdiðimiz örnek kullanýlabilir deðildir. Her satýrýn ilk kelimesi
mutlaka <tt>deb</tt> veya <tt>deb-src</tt> olmak zorundadýr. Bu ifadeler arþivin 
tipini belirler: derlenmiþ ve kullanýma hazýr duruma getirilmiþ, binary paketler (<tt>deb</tt>) 
veya programýn asýl kaynak kodu + Debian paketi için yapýlan eklentilerden oluþan halini
içeren paketler (<tt>deb-src</tt>). 
<p>
Öntanýmlý Debian sources.list dosyasýnýn biçimi genellikle aþaðýdaki gibi olacaktýr:
<p>
<example>
# See sources.list(5) for more information, especialy
# Remember that you can only use http, ftp or file URIs
# CDROMs are managed through the apt-cdrom tool.
deb http://http.us.debian.org/debian stable main contrib non-free
deb http://non-us.debian.org/debian-non-US stable/non-US main contrib non-free
deb http://security.debian.org stable/updates main contrib non-free

# Uncomment if you want the apt-get source function to work
#deb-src http://http.us.debian.org/debian stable main contrib non-free
#deb-src http://non-us.debian.org/debian-non-US stable/non-US main contrib non-free
</example>

<p>
En temel Debian kurulumu için ihtiyaç duyulan satýrlar bunlardýr. Birinci <tt>deb</tt>
satýrý resmi Debian arþivini gösterirken, ikincisi non-US arþivini ve üçüncüsü ise
Debian güvenlik güncellemelerini içeren arþivi göstermektedir.
<p>
Sondaki iki satýr yorum haline getirilmiþ olup (satýr baþýndaki `#' karakteri ile)
apt-get tarafýndan yoksayýlmaktadýr. Buradaki <tt>deb-src</tt> satýrlarý Debian kaynak
paketlerini göstermektedirler. Eðer sýklýkla program kaynak kodlarýný test veya yeniden derleme
amaçlý olarak indiriyorsanýz satýrlarý aktif hale getirmelisiniz.
<p>
<tt>/etc/apt/sources.list</tt> dosyasý çeþitli tiplerde satýrlar içerebilir.
APT uygulamasý <tt>http</tt>, <tt>ftp</tt>, <tt>file</tt> (yerel dosyalar, örneðin baðlý
durumdaki bir ISO9660 dosya sistemi) ve <tt>ssh</tt> arþiv tiplerini tanýyabilmektedir.
<p>
<tt>/etc/apt/sources.list</tt> dosyasýnda deðiþiklik yaptýktan sonra <tt>apt-get update</tt>
komutunu çalýþtýrmayý unutmayýnýz. Bu komutla APT'nin dosyada belirtmiþ olduðunuz arþivlerdeki
güncel paket listesini edinmesini saðlamýþ olursunuz.
</sect>

<sect id="dpkg-scanpackages">APT'nin yerel olarak kullanýmý
<p>
Bazen APT tarafýndan kurulmasýný istediðiniz onlarca paketiniz olabilir. Bunlarýn hepsini birden
sisteminizdeki kopyasýndan kurulumunu isterseniz aþaðýdaki adýmlarý izlemelisiniz.
<p>
Öncelikle bir dizin yaratýp içerisinde sizdeki .deb paketlerini atýnýz.
Örnek olarak:
<p>
<example>
# mkdir /root/debs
</example>
<p>
Paketlerin control dosyalarýnda belirtilen tanýmlamalarýnýn üzerine kendi tanýmlamalarýnýzý
<tt>override</tt> dosyasý kullanarak yapabilirsiniz. Bu dosya içerisinde paketle birlikte gelen
bazý seçenekleri aþaðýdaki gibi tanýmlayabilirsiniz:
<p>
<example>
paket öncelik bölüm
</example>
<p>
paket, paketin ismini belirtir; öncelik deðeri sýrasýyla düþük, orta ve yüksek anlamýnda
low, medium ve high olabilir; bölüm ise paketin ait olduðu bölümü gösterir.
Dosya adýnýn mutlaka böyle olmasý gerekmez, baþka bir dosya kullanýp 
<prgn>dpkg-scanpackages</prgn>'a parametre olarak verebilirsiniz.
Eðer bir <tt>override</tt> dosyasý yazmak istemiyorsanýz <prgn>dpkg-scanpackages</prgn> programýný
çaðýrýrken <file>/dev/null</file>'u kullanabilirsiniz.
<p>
Halen /root dizini içerisindeyken aþaðýdaki komutu çalýþtýrýn:
<p>
<example>
# dpkg-scanpackages debs <var>dosya</var> | gzip &gt; debs/Packages.gz
</example>
<p>
Yukarýdaki satýrda <var>dosya</var> olarak girilen dosya, <tt>override</tt> dosyasýdýr.
Bu komut APT tarafýndan kullanýlmak üzere, paketler hakkýnda çeþitli bilgiler içeren
<file>Packages.gz</file> dosyasýný üretir. Paketleri kullanmak için son olarak aþaðýdaki satýrý
<file>sources.list</file> dosyanýza ekleyin:

<p>
<example>
deb file:/root debs/
</example>
<p>
Bu eklentiden sonra artýk APT uygulamasýný yeni arþivinizle birlikte kullanabilirsiniz.
Ayrýca isterseniz kaynak paketler için de yerel bir arþiv oluþturabilirsiniz. Bunun için
izlemeniz gereken yol yukarýdaki ile hemen hemen aynýdýr. Dikkat etmeniz gereken nokta,
<tt>.orig.tar.gz</tt>, <tt>.dsc</tt> ve <tt>.diff.gz</tt> dosyalarýný da dizin içerisine 
kopyalamanýz ve <tt>Packages.gz</tt> dosyasý yerine <tt>Sources.gz</tt> dosyasýný
oluþturmanýz gerektiðidir. Kullanacaðýnýz program ise <prgn>dpkg-scansources</prgn> olacaktýr.
Örnek:
<p>
<example>
# dpkg-scansources debs | gzip &gt; debs/Sources.gz
</example>
<p>
Dikkat ettiyseniz <prgn>dpkg-scansources</prgn> uygulamasý parametre olarak bir
<tt>override</tt> dosyasýna ihtiyaç duymamaktadýr. <file>sources.list</file> dosyanýza
eklemeniz gereken satýr ise aþaðýdadýr:
<p>
<example>
deb-src file:/root debs/
</example>
</sect>

<sect id="netselect">sources.list dosyasý için en iyi yansýya karar verme: netselect, netselect-apt
<p>
Yeni Debian kullanýcýlarýnýn kararsýz olduklarý noktalardan biri <tt>sources.list</tt>
dosyasýna hangi Debian yansýsýný eklemeleri gerektiðidir. En iyi yansýya karar vermek için
pek çok yöntem mevcuttur. Deneyimli kullanýcýlar bir betik programý yazarak yansýlar ile aradaki
iletiþim hýzýný ölçebilirler. Bu iþi sizin için büyük ölçüde yapacak bir program mevcuttur:
<strong>netselect</strong>.
<p>
netselect programýný bildiðimiz yöntemle kuralým:
<p>
<example>
# apt-get install netselect
</example>
<p>
Parametre vermeden programý çalýþtýrdýðýmýzda bir yardým sayfasý gözükecektir.
Programý birbirinden boþluk karakteri ile ayrýlmýþ yansý adresleriyle çalýþtýrýrsanýz
geriye bir skor ve yansý adresi döndürecektir. Buradaki deðer yaklaþýk olarak ping zamanýný, ve
ilgili yansýya kaç adýmda ulaþýlabilindiði bilgisiyle hesaplanmýþtýr. 
Eðer parametre olarak verdiðiniz tüm yansýlara ait skorlarý görmek isterseniz programý -vv seçeneði
ile çalýþtýrabilirsiniz. Örnek:
<p>
<example>
# netselect ftp.debian.org http.us.debian.org ftp.at.debian.org download.unesp.br ftp.debian.org.br
  365 ftp.debian.org.br
#
</example>
<p>
Bu çýktýnýn anlamý, netselect programýna parametre olarak verdiðimiz yansýlar arasýndan en uygununun
<tt>ftp.debian.org.br</tt> olduðu ve bu yansý için elde edilen skor deðerinin 365 olduðudur.
(Bu deðer herkes için farklý olacaktýr!).
<p>
Þimdi netselect tarafýndan en hýzlý olarak belirtilen yansýyý
<tt>/etc/apt/sources.list</tt> dosyanýza (bkz. <ref id="sources.list">) ekleyebilir ve ardýndan
<ref id="apt-get"> kýsmýndaki yönergeleri takip edebilirsiniz.
<p> <strong>Not:</strong> Debian tam yansý listesine 
<url id="http://www.debian.org/mirror/mirrors_full" name="http://www.debian.org/mirror/mirrors_full">
adresinden eriþebilirsiniz.
<p>
0.3 versiyonundan itibaren netselect paketi 
<strong>netselect-apt</strong> betiðini de içermektedir. Bu betik yukarýdaki iþlemleri
otomatik olarak yapmaktadýr. Daðýtým olarak ne kullanmak istediðinizi belirtmeniz durumunda 
(öntanýmlý olarak stable - kararlý) yansýlar arasýndan sizin için en iyileri seçilecek ve bu karar
doðrultusunda <tt>sources.list</tt> dosyanýz oluþturulacaktýr. Aþaðýdaki örnek kullaným ile
kararlý daðýtým için bir sources.list dosyasý üretilmektedir:
<p>
<example>
# ls sources.list
ls: sources.list: Böyle bir dosya ya da dizin yok
# netselect-apt stable
(...) Bir miktar bekliyoruz
# ls -l sources.list
sources.list
#
</example>
<p>
<strong>Unutmayýn:</strong> <tt>sources.list</tt> dosyasý bulunduðunuz dizin altýnda oluþturulacaktýr.
Bu dosyayý kullanmak istiyorsanýz <tt>/etc/apt</tt> dizini altýna taþýmalýsýnýz.
<p>
Ardýndan <ref id="apt-get"> kýsmýndaki yönergeleri izleyebilirsiniz.
</sect>

<sect id="cdrom">sources.list dosyasýna CD-ROM ekleme
<p>
Eðer paketlerin kurulumu veya güncellemesi için halihazýrda elinizde bulunan bir CD-ROM'u kullanmak
istiyorsanýz bunu <tt>sources.list</tt> dosyanýza eklemelisiniz. Bunun için CD-ROM'u takýp
<prgn>apt-cdrom</prgn> programýný örnekteki gibi çalýþtýrýn:
<p>
<example>
# apt-cdrom add
</example>

<p>
CD-ROM baðlanacak ve eðer geçerli bir Debian CD'si ise üzerindeki paketlere ait bilgiler
okunacaktýr. Eðer CD-ROM ayarlamalarýnýz biraz standart dýþý ise aþaðýdaki seçenekleri de
kullanabilirsiniz:
<p>
<example>
-h           - program yardýmý
-d dizin     - CD-ROM baðlama noktasý
-r           - Tanýnmýþ bir CD-ROM'u yeniden adlandýr
-m           - Baðlama iþlemini gerçekleþtirme
-f           - Hýzlý mod, paket dosyalarýný kontrol etme
</example>

<p>
Örneðin:
<p>
<example>
# apt-cdrom -d /home/kov/mycdrom add
</example>

<p>
Ayrýca sources.list dosyanýza eklemeden CD-ROM'u tanýma iþlemini yapabilirsiniz:
<p>
<example>
# apt-cdrom ident
</example>

<p>
Not: Bu program CD-ROM aygýtýnýza ait ayarlarýn <tt>/etc/fstab</tt> dosyasýnda düzgün olarak 
yapýlmýþ olduðu durumda çalýþacaktýr.
</sect>

</chapt>

<chapt id="apt-get">Paketlerin yönetimi
<sect id="update">Paket listesini güncelleme
<p>
Paket yönetim sistemi kurulu paketler, kurulu olmayan paketler, kurulabilir paketler vb. hakkýnda
bilgileri kendi özel veritabanýnda tutmaktadýr. <prgn>apt-get</prgn> programý bu veritabanýný
kullanarak istenilen paketin nasýl kurulacaðýný, baþka hangi paketlerin daha kurulmasý gerektiðini
öðrenir. 
<p>
Bu listeyi güncellemek için <prgn>apt-get update</prgn> komutunu kullanmalýsýnýz.
Bu komut <tt>/etc/apt/sources.list</tt> dosyanýza bakar ve belirtilen arþivlerden güncel paket
listesini indirir; ayrýntýlý bilgi için bkz. <ref id="sources.list">.
<p>
Paket güncellemeri ve güvenlikle ilgili güncellemelerden sizin ve sisteminizin haberdar olabilmesi
için bu komutu düzenli aralýklarla çalýþtýrmakta fayda vardýr.
</sect>

<sect id="install">Paket kurma
<p>
Sonunda sabýrsýzlýkla beklediðiniz bölüme geldik! Artýk sources.list dosyanýz hazýr ve paket listeniz
güncel durumda. Tek yapmanýz gereken kuracaðýnýz paketi belirtmek. Örneðin:
<p>
<example>
# apt-get install xchat
</example>

<p>
APT hemen kendi veritabanýný tarayarak bu paketin en son versiyonunu bulacak ve <tt>sources.list</tt>
dosyanýzda belirtilen arþivden indirmeye baþlayacaktýr. Bu paketin baþka paketlere de baðýmlý olmasý
durumunda - ki örneðimizde de öyle - ayný adýmlarý baðýmlýlýk yaratan paketler için de yapacaktýr.
Aþaðýdaki örneðe bakýnýz:

<p>
<example>
# apt-get install nautilus
Reading Package Lists... Done
Building Dependency Tree... Done
The following extra packages will be installed:
  bonobo libmedusa0 libnautilus0 
The following NEW packages will be installed:
  bonobo libmedusa0 libnautilus0 nautilus 
0 packages upgraded, 4 newly installed, 0 to remove and 1  not upgraded.
Need to get 8329kB of archives. After unpacking 17.2MB will be used.
Do you want to continue? [Y/n] 
</example>

<p>
<package>nautilus</package> paketi bazý kütüphane paketlerine baðýmlý durumdadýr. Eðer baðýmlýlýk 
yaratan paketleri de komutumuza eklemiþ olsaydýk APT devam etmek istiyor musunuz? sorusunu sormayacak
ve hemen paketleri indirmeye baþlayacaktý.
<p>
Bunun anlamý APT'nin sadece komut satýrýnda belirtilmeyen ancak gereken paketleri de kurmak istediði
zaman onay isteyeceðidir.
<p>
Aþaðýdaki apt-get seçenekleri iþinize yarayabilir:
<p>
<example>
-h  Yardým ekraný.
-d  Sadece indir , kurulumu yapma
-f  Bütünlük kontrolü baþarýsýz olsa da devam etmeye çalýþ
-s  Hiçbir eylem yapma, sadece olayý simüle et
-y  Tüm sorulara Evet cevabý verdiðimi farzet
-u  Ýþlem sonucunda güncellenecek olan paketleri listele
</example>

<p>
Birden fazla paket kurulmak üzere tek satýrda seçim yapýlabilir. Gerekli paketler 
indirilir ve <tt>/var/cache/apt/archives</tt> dizini altýna ilerideki kurulumlarda
da kullanýlmak üzere kaydedilir.
<p>
Ayný komut satýrýnda kaldýrýlmasýný istediðiniz paketleri de belirtebilirsiniz.
Bunun için kaldýrmak istediðiniz paketin ismini sonuna bir '-' karakteri ekleyerek yazmanýz
yeterli:
<p>
<example>
# apt-get install nautilus gnome-panel-       
Reading Package Lists... Done
Building Dependency Tree... Done
The following extra packages will be installed:
  bonobo libmedusa0 libnautilus0 
The following packages will be REMOVED:
  gnome-applets gnome-panel gnome-panel-data gnome-session 
The following NEW packages will be installed:
  bonobo libmedusa0 libnautilus0 nautilus 
0 packages upgraded, 4 newly installed, 4 to remove and 1  not upgraded.
Need to get 8329kB of archives. After unpacking 2594kB will be used.
Do you want to continue? [Y/n] 
</example>

<p>
Paket kaldýrmayla ilgili bilgiler için <ref id="remove"> kýsmýna bakýnýz.
<p>
Eðer herhangi bir þekilde kurulu bir paketin dosyalarýna zarar verdiyseniz veya sadece
kurulu bir paketin yeniden indirilip tekrar kurulmasýný istiyorsanýz 
<tt>--reinstall</tt> seçeneðini örnekteki gibi kullanmalýsýnýz.

<p>
<example>
# apt-get --reinstall install gdm
Reading Package Lists... Done
Building Dependency Tree... Done
0 packages upgraded, 0 newly installed, 1 reinstalled, 0 to remove and 1  not upgraded.
Need to get 0B/182kB of archives. After unpacking 0B will be used.
Do you want to continue? [Y/n]
</example>

<p>
Bu yardým belgesinin yazýmýnda APT versiyonu 0.5.3 idi. Eðer sisteminizde bu veya
daha üst versiyon APT varsa ek bazý fonksiyonlara sahipsiniz: paketleri belirli bir
daðýtým arþivinden <tt>apt-get install paket/daðýtým</tt> komutu ile kurabilir veya
<tt>apt-get install paket=versiyon</tt> komutu ile spesifik bir versiyonunu kurabilirsiniz.
Örneðin:
<p>
<example>
# apt-get install nautilus/unstable
</example>

<p>
komutu siz `stable' daðýtýmla çalýþýyor olsanýz bile nautilus paketini `unstable' daðýtýmýndan 
kuracaktýr. Daðýtým alaný için kabul edilen deðerler <tt>stable</tt>, <tt>testing</tt>, ve 
<tt>unstable</tt>'dýr.
<p>
Hedef daðýtým seçerken <tt>-t</tt> anahtarýný da kullanabilirsiniz, bu durumda <prgn>apt-get</prgn>
baðýmlýlýklarý bu daðýtýma göre düzenleyecektir.
<p>
<em>ÖNEMLÝ</em>: `unstable' daðýtým yeni Debian paketlerinin upload edildiði yerdir.
Çok sýk güncellen bu arþiv yeni baþlayanlar veya sisteminde kararlýlýk arayanlar tarafýndan
<em>kullanýlmamalýdýr</em>.
<p>
`testing' daðýtýmý `unstable' daðýtýmdan kararlýlýk anlamýnda çok daha iyidir, ancak kritik sistemlerde
mutlaka kararlý daðýtým kullanýlmalýdýr.
</sect>

<sect id="remove">Paket kaldýrma
<p>
Bir paketi artýk kullanmak istemiyorsanýz APT ile sisteminizden paketi kaldýrabilirsiniz.
Bunun için <tt>apt-get remove package</tt> komutunu vermeniz yeterli olacaktýr. Örneðin:

<p>
<example>
# apt-get remove gnome-panel
Reading Package Lists... Done
Building Dependency Tree... Done
The following packages will be REMOVED:
  gnome-applets gnome-panel gnome-panel-data gnome-session 
0 packages upgraded, 0 newly installed, 4 to remove and 1  not upgraded.
Need to get 0B of archives. After unpacking 14.6MB will be freed.
Do you want to continue? [Y/n] 
</example>

<p>
Yukarýda da görüldüðü üzere APT kaldýrýlan pakete baðýmlý olan paketler üzerinde de iþlem
yapmaktadýr. Yukarýdaki soruyu onayladýðýnýzda listelenen tüm paketler kaldýrýlacaktýr. APT 
kullanarak bir paketi, o pakete baðýmlý olan diðer paketleri kaldýrmadan kaldýrmanýn :) bir yolu yoktur.
<p>
<prgn>apt-get</prgn>'in yukarýdaki gibi çalýþtýrýlmasý sonrasýnda listelenen paketler sistemden 
kaldýrýlacak ancak paketlere ait konfigürasyon dosyalarý -eðer varsa- sistemde kalacaktýr. 
Konfigürasyon dosyalarý ile birlikte paketleri tamamen kaldýrmak için aþaðýdaki komutu çalýþtýrýn:

<p>
<example>
# apt-get --purge remove gnome-panel
Reading Package Lists... Done
Building Dependency Tree... Done
The following packages will be REMOVED:
  gnome-applets* gnome-panel* gnome-panel-data* gnome-session* 
0 packages upgraded, 0 newly installed, 4 to remove and 1  not upgraded.
Need to get 0B of archives. After unpacking 14.6MB will be freed.
Do you want to continue? [Y/n] 
</example>

<p>
Burada isminden sonra '*' karakteri olan paketlere ait konfigürasyon dosyalarýnýn da kaldýrýlacaðýný 
anlýyoruz.
<p>
Kurulum <tt>install</tt> yönteminde olduðu gibi kaldýrma <tt>remove</tt> iþleminde de
ayný satýrda kurmak istediðiniz paketleri belirtebilirsiniz. Bunun için kurulmasýný istediðiniz paketin
sonuna <tt>'+'</tt> karakteri eklemeniz gereklidir.

<p>
<example>
# apt-get --purge remove gnome-panel nautilus+
Reading Package Lists... Done
Building Dependency Tree... Done
The following extra packages will be installed:
  bonobo libmedusa0 libnautilus0 nautilus 
The following packages will be REMOVED:
  gnome-applets* gnome-panel* gnome-panel-data* gnome-session* 
The following NEW packages will be installed:
  bonobo libmedusa0 libnautilus0 nautilus 
0 packages upgraded, 4 newly installed, 4 to remove and 1  not upgraded.
Need to get 8329kB of archives. After unpacking 2594kB will be used.
Do you want to continue? [Y/n] 
</example>

<p>
<prgn>apt-get</prgn> burada kaldýrma iþleminin yaný sýra kurulmasýný istediðimiz paketi ve 
gerektirdiði diðer paketlerle birlikte listeler.
</sect>

<sect id="upgrade">Paket güncelleme
<p>
Paket güncellemeleri APT'nin çok baþarýlý olduðu bir iþlemdir.
Tek bir <tt>apt-get upgrade</tt> komutu ile tüm paketlerin güncellenmesi saðlanabilmektedir.
Bu komutu, sisteminizdeki paketleri kullandýðýnýz daðýtýmdaki programlarýn güncel sürümlerine
yükseltmek veya tümüyle yeni bir Debian sürümüne yükseltme yapmak amacýyla kullanabilirsiniz.
Daðýtým yükseltmeleri için önerilen yol <tt>apt-get dist-upgrade</tt> kullanýlmasýdýr;; ayrýntýlar için
<ref id="dist-upgrade"> kýsmýna bakýnýz.

<p>
Komutun <tt>-u</tt> seçeneði ile çalýþtýrýlmasý oldukça yararlýdýr.
Bu seçeneðin kullanýmýyla APT güncellenecek paketleri listeler.
APT paketlerin en son versiyonlarýný indirecek ve gereken sýrada kurulumu gerçekleþtirecektir.
Böylesi bir güncelleme yapmadan önce <tt>apt-get update</tt> komutu ile paket listenizi de
güncellemeniz önemlidir. Aþaðýdaki örneðe bakalým:
<p>
<example>
# apt-get -u upgrade
Reading Package Lists... Done
Building Dependency Tree... Done
The following packages have been kept back
  cpp gcc lilo 
The following packages will be upgraded
  adduser ae apt autoconf debhelper dpkg-dev esound esound-common ftp indent
  ipchains isapnptools libaudiofile-dev libaudiofile0 libesd0 libesd0-dev
  libgtk1.2 libgtk1.2-dev liblockfile1 libnewt0 liborbit-dev liborbit0
  libstdc++2.10-glibc2.2 libtiff3g libtiff3g-dev modconf orbit procps psmisc 
29 packages upgraded, 0 newly installed, 0 to remove and 3 not upgraded.
Need to get 5055B/5055kB of archives. After unpacking 1161kB will be used.
Do you want to continue? [Y/n] 
</example>

<p>
Ýþlem oldukça basittir. Ýlk bir kaç satýrda <tt>apt-get</tt> bazý programlarýn sistemde
tutulmaya devam edileceðini <tt>kept back</tt> söylemektedir. Bunun anlamý, listelenen programlarýn
yeni versiyonlarý olmasýna raðmen herhangi bir nedenden ötürü sisteminize kurulamayacak olmasýdýr.
Büyük olasýlýkla ilgili paketler, paket listenizde yer almayan paketlerin veya paket versiyonlarýnýn
kurulmasýný gerektirmekte, bu iþlem yapýlamayacaðý için de paketler güncellenmemektedir. Ýkinci olasý
neden, paketin yeni versiyonunun sisteminizde daha önce olmayan yeni bir pakete baðýmlý olmadýr.
<p>
Birinci senaryo için kesin bir çözüm yoktur. Ýkinci durumda problem yaratan paketi <tt>apt-get install</tt>
komutu ile kurarak sorunu çözebilirsiniz. Daha temiz bir yöntem ise <tt>dist-upgrade</tt> kullanmaktýr,
bu sayede sistemde daha önce olmayan yeni paketler de kurulacaktýr, bkz. <ref id="dist-upgrade">.
</sect>

<sect id="dist-upgrade">Yeni bir sürüme güncelleme
<p>
APT'nin bu özelliði sayesinde bir defada tüm sisteminizi yeni bir Debian sürümüne ister
internet üzerinden isterse varolan bir CD üzerinden yükseltebilirsiniz.
<p>
Ayrýca bu yöntem kurulu paketler arasýndaki paket baðýmlýlýklarýnda deðiþmeler olduðunda da kullanýlýr.
<tt>apt-get upgrade</tt> ile yapýlan güncellemelerde bu tür paketlere dokunulmaz.
<p>
Örnek olarak, Debian 0 sürümünü kullandýðýnýzý düþünün, ve 3. sürümü içeren
bir CD edinmiþ olun. APT'yi kullanarak sisteminizi bu CD üzerinden yeni sürüme güncelleyebilirsiniz.
Bunu yapmak için öncelikle <prgn>apt-cdrom</prgn> ile (bkz. <ref id="cdrom">) ile CD'yi 
<tt>/etc/apt/sources.list</tt> dosyanýza ekleyin ve ardýndan <tt>apt-get dist-upgrade</tt>
komutunu çalýþtýrýn.
<p>
Unutmayýn, APT her zaman paketin güncel versiyonunu arar. Eðer <tt>/etc/apt/sources.list</tt> dosyanýzda
belirtilen arþivlerde bir paketin CD üzerindekinden daha yeni bir versiyonu var ise güncelleme 
sýrasýnda bu versiyon kullanýlacaktýr.
<p>
<ref id="upgrade"> kýsmýndaki örneðimizde bazý paketlerin güncelleme sýrasýnda korunduðunu
<tt>kept back</tt> görmüþtük. Bu problemi þimdi <tt>dist-upgrade</tt> ile çözebiliriz:

<p>
<example>
# apt-get -u dist-upgrade
Reading Package Lists... Done
Building Dependency Tree... Done
Calculating Upgrade... Done
The following NEW packages will be installed:
  cpp-2.95 cron exim gcc-2.95 libident libopenldap-runtime libopenldap1
  libpcre2 logrotate mailx 
The following packages have been kept back
  lilo 
The following packages will be upgraded
  adduser ae apt autoconf cpp debhelper dpkg-dev esound esound-common ftp gcc
  indent ipchains isapnptools libaudiofile-dev libaudiofile0 libesd0
  libesd0-dev libgtk1.2 libgtk1.2-dev liblockfile1 libnewt0 liborbit-dev
  liborbit0 libstdc++2.10-glibc2.2 libtiff3g libtiff3g-dev modconf orbit
  procps psmisc 
31 packages upgraded, 10 newly installed, 0 to remove and 1 not upgraded.
Need to get 0B/7098kB of archives. After unpacking 3118kB will be used.
Do you want to continue? [Y/n]
</example>

<p>
Görüldüðü gibi paketler hem güncellenecek hem de yeni baðýmlýlýklar için yeni paketler de kurulacaktýr.
Ancak lilo paketi halen sistemde korunmaya devam etmektedir <tt>kept back</tt>. Muhtemelen
baðýmlýlýk dýþýnda daha ciddi bir problemi vardýr. Problemin ne olduðunu aþaðýdaki komutla
görebiliriz:
<p>
<example>
# apt-get -u install lilo
Reading Package Lists... Done
Building Dependency Tree... Done
The following extra packages will be installed:
  cron debconf exim libident libopenldap-runtime libopenldap1 libpcre2
  logrotate mailx 
The following packages will be REMOVED:
  debconf-tiny 
The following NEW packages will be installed:
  cron debconf exim libident libopenldap-runtime libopenldap1 libpcre2
  logrotate mailx 
The following packages will be upgraded
  lilo 
1 packages upgraded, 9 newly installed, 1 to remove and 31 not upgraded.
Need to get 225kB/1179kB of archives. After unpacking 2659kB will be used.
Do you want to continue? [Y/n]
</example>

<p>
Yukarýdaki belirtildiði üzere, lilo paketi <package>debconf-tiny</package>
paketi ile çakýþmaktadýr. Bunun anlamý, debconf-tiny paketi kaldýrýlmadan lilo paketinin
yüklenemeyeceði ve güncellenemeyeceðidir.
<p>
Korunan veya kaldýrýlan paketlerle ilgili daha detaylý bilgi almak için komutu aþaðýdaki gibi
kullanabilirsiniz:

<p>
<example>
# apt-get -o Debug::pkgProblemResolver=yes dist-upgrade
Reading Package Lists... Done
Building Dependency Tree... Done
Calculating Upgrade... Starting
Starting 2
Investigating python1.5
Package python1.5 has broken dep on python1.5-base
  Considering python1.5-base 0 as a solution to python1.5 0
  Holding Back python1.5 rather than change python1.5-base
Investigating python1.5-dev
Package python1.5-dev has broken dep on python1.5
  Considering python1.5 0 as a solution to python1.5-dev 0
  Holding Back python1.5-dev rather than change python1.5
 Try to Re-Instate python1.5-dev
Done
Done
The following packages have been kept back
  gs python1.5-dev 
0 packages upgraded, 0 newly installed, 0 to remove and 2  not upgraded.
</example>

<p>
Burada açýkça görüldüðü gibi python1.5-dev paketi kurulamayacaktýr çünkü python1.5 paketine
baðýmlýdýr. python1.5 kurulamadýðý için python1.5-dev paketi de kurulamamaktadýr.
</sect>

<sect id="clean">Kullanýlmayan paket dosyalarýný temizleme: apt-get clean ve autoclean
<p>
Bir paket kuracaðýnýz zaman APT gerekli dosyalarý /etc/apt/sources.list dosyanýzda belirtilen
host'lardan alýr ve yerel bir dizin (<file>/var/cache/apt/archives/</file>) altýnda saklar.
Ardýndan kurulumu buradaki dosyalar üzerinden gerçekleþtirir, bkz. <ref id="install">.
<p>
Zamanla dosyalarýn tutulduðu yerel dizinin boyutlarý artmaya ve gereksiz yer kaplamaya
baþlar. APT bu dizini temizlemek için bir takým fonksiyonlara sahiptir:
<prgn>apt-get</prgn>'in <tt>clean</tt> ve <tt>autoclean</tt> seçenekleri.
<p>
<prgn>apt-get clean</prgn> lock dosyalarý haricinde <file>/var/cache/apt/archives/</file> ve
<file>/var/cache/apt/archives/partial/</file> dizinlerindeki tüm dosylarý siler.
Sonuç olarak, eðer bir paketi yeniden kurmak isterseniz (--reinstall) APT gerekli dosyalara
artýk sahip olmadýðýndan, yeninden indirecektir.
<p>
<prgn>apt-get autoclean</prgn> ise sadece artýk indirilmesi mümkün olmayan dosyalarý siler.
<p>
Aþaðýdaki örnek apt-get autoclean özelliðinin nasýl çalýþtýðýný gösteriyor:

<p>
<example>
# ls /var/cache/apt/archives/logrotate* /var/cache/apt/archives/gpm*
logrotate_3.5.9-7_i386.deb
logrotate_3.5.9-8_i386.deb
gpm_1.19.6-11_i386.deb
</example>

<p>
/var/cache/apt/archives altýnda <package>logrotate</package> paketi için 2 dosya ve
<package>gpm</package> paketi için de bir 1 dosya bulunmaktadýr.

<p>
<example>
# apt-show-versions -p logrotate
logrotate/stable uptodate 3.5.9-8
# apt-show-versions -p gpm
gpm/stable upgradeable from 1.19.6-11 to 1.19.6-12
</example>

<p>
<prgn>apt-show-versions</prgn> çýktýsýna baktýðýmýzda 
<file>logrotate_3.5.9-8_i386.deb</file> dosyasýnýn <package>logrotate</package> paketi için
güncel versiyon olduðunu görüyoruz. Bu durumda <file>logrotate_3.5.9-7_i386.deb</file>
dosyasý hiç bir iþe yaramamaktadýr. Ayrýca <file>gpm_1.19.6-11_i386.deb</file> dosyasý da, 
indirilebilecek daha güncel bir versiyonu olduðu için iþe yaramamaktadýr.

<p>
<example>
# apt-get autoclean
Reading Package Lists... Done
Building Dependency Tree... Done
Del gpm 1.19.6-11 [145kB]
Del logrotate 3.5.9-7 [26.5kB]
</example>

<p>Sonuçta, <tt>apt-get autoclean</tt> ile sadece eski ve iþe yaramayacak dosyalarýn kaldýrýlmasýný
saðlamýþ olduk, bkz. <ref id="apt-show-versions">.
</sect>

<sect id="dselect-upgrade">APT ile dselect kullanýmý
<p>
<prgn>dselect</prgn>, kurulum için Debian paketleri seçebileceðiniz bir programdýr.
Kullanýmý oldukça karýþýk ve zor olduðundan yeni kullanýcýlar bazen program içerisinde
yönlerini kaybedebilirler.
<p>
dselect'in özelliklerinden biri, Debian paketlerinin "þiddetle önerilen" ve "tavsiye edilen" paketlere
ait bilgilerini iþleyebilmesidir ("recommending" ve "suggesting").
Programý çalýþtýrmak için root iken  <tt>dselect</tt> komutunu verin.
Eriþim yöntemleri menüsünden 'apt' seçimini yapýn. Mutlaka gerekli olmamakla birlikte, eðer bir
CDROM kullanmýyor ve paket indirmek istiyorsanýz eriþim yöntemi olarak 'apt' kullanmalýsýnýz.
<p>
dselect kullanýmý hakkýnda ayrýntýlý bilgi almak isterseniz dselect dokümantasyonunun
bulunduðu <url id="http://www.debian.org/doc/ddp" name="http://www.debian.org/doc/ddp"> adresini
ziyaret edebilirsiniz.
<p>
dselect ile seçimlerinizi yaptýktan sonra, aþaðýdaki komutu çalýþtýrýn:
<p>
<example>
# apt-get -u dselect-upgrade
</example>

<p>
Örnek:
<p>
<example>
# apt-get -u dselect-upgrade
Reading Package Lists... Done
Building Dependency Tree... Done
The following packages will be REMOVED:
  lbxproxy 
The following NEW packages will be installed:
  bonobo console-tools-libs cpp-3.0 enscript expat fingerd gcc-3.0
  gcc-3.0-base icepref klogd libdigest-md5-perl libfnlib0 libft-perl
  libgc5-dev libgcc300 libhtml-clean-perl libltdl0-dev libsasl-modules
  libstdc++3.0 metamail nethack proftpd-doc psfontmgr python-newt talk tidy
  util-linux-locales vacation xbill xplanet-images 
The following packages will be upgraded
  debian-policy 
1 packages upgraded, 30 newly installed, 1 to remove and 0  not upgraded.
Need to get 7140kB of archives. After unpacking 16.3MB will be used.
Do you want to continue? [Y/n]
</example>

<p>
Þimdi bu ekran çýktýsýný ayný sistemdeki apt-get dist-upgrade çýktýsý ile karþýlaþtýralým:
<p>
<example>
# apt-get -u dist-upgrade   
Reading Package Lists... Done
Building Dependency Tree... Done
Calculating Upgrade... Done
The following packages will be upgraded
  debian-policy 
1 packages upgraded, 0 newly installed, 0 to remove and 0  not upgraded.
Need to get 421kB of archives. After unpacking 25.6kB will be freed.
Do you want to continue? [Y/n]
</example>

<p>
Görüldüðü gibi dselect ile yapýlan güncellemede yukarýdaki listede olmayan paketler de 
yüklenmek üzere seçilmiþtir. Çünkü güncellenecek olan paketlerin "þiddetle önerilen" ve 
"tavsiye edilen" paketler alanlarý da incelenmiþ, bu paketler listeye dahil edilmiþtir.
Dselect APT ile birlikte kullanýldýðýnda oldukça güçlü bir araçtýr.
</sect>

<sect id="default-version">Karýþýk bir sistem nasýl kurulur?
<p>
Kullanýcýlar sýklýkla testing daðýtýmýný da kullanýrlar, çünkü testing daðýtýmý, kararsýz daðýtýmdan
çok daha kararlý bir yapýya sahiptir ve kullanýlabilir durumdadýr. Bazý kullanýcýlar ise
sistemlerindeki bazý paketlerin son versiyonlarýný kullanmak isterler. Bu durumda testing/unstable 
karýþýmý bir sistem oluþabilir. Gene ayný þekilde baþka nedenlerden ötürü stable/testing karýþýmý
bir daðýtým da oluþturulabilir.
<p>
Bunu yapabilmek için aþaðýdaki satýrý <file>/etc/apt/apt.conf</file> dosyanýza ekleyin:

<p>
<example>
APT::Default-Release "testing";
</example>
<p>
Ardýndan, unstable daðýtýmdan bir paket yüklemek istediðinizde 
<tt>-t</tt> seçeneðini kullanýn:

<p>
<example>
# apt-get -t unstable install <var>paket_adý</var>
</example>

<p>
Kullanacaðýnýz her bir daðýtým için <file>/etc/apt/sources.list</file> dosyasýna gerekli
kayýtlarý girmelisiniz. Bu örnekte dosyada <tt>unstable</tt> ve <tt>testing</tt> daðýtýmý
için gerekli kayýtlar olmalýdýr. Bu kayýtlar olmadan APT, ilgili daðýtýmdaki bir pakete
ait bilgiye sahip olamaz.

</sect>

<sect id="apt-show-versions">Sadece belirli bir Debian versiyonuna sahip paketleri güncelleme

<p>
<prgn>apt-show-versions</prgn> programý, karýþýk bir sistem kullanan kullanýcýlarýn sistemlerini
güncellemelerinde daha güvenli bir ortam sunar. Örneðin aþaðýdaki gibi sadece sisteminizdeki 
unstable paketleri güncelleyebilirsiniz:
<p>
<example>
# apt-get install `apt-show-versions -u -b | grep unstable`
</example>
</sect>

<sect id="pin">Belirli bir versiyona sahip paketlerin kurulu olarak kalmasýný saðlama (ileri düzey)
<p>
Bazen çeþitli nedenlerden ötürü bir paketin mutlaka belirli bir versiyonu ile çalýþmanýz gerekebilir.
Güncelleme yaptýðýnýzda ise paket yeni versiyonu ile deðiþtirileceðinden sorun çýkacaktýr.
Örneðin sisteminizi Debian 3.0 sürümüne güncellemiþ fakat belirli bir paketin Debian 2.2 
sürümündeki halini kullanmaya devam etmek istiyor olabilirsiniz. Bu problemi çözmek için 
paketlerinizi "pin"leyebilirsiniz.
<p>
Bu özelliði kullanmak oldukça kolaydýr, tek yapmanýz gereken
<tt>/etc/apt/preferences</tt> dosyasýný düzenlemekten ibaret.
<p>
Dosyanýn formatý þu þekildedir:
<p>
<example>
Package: &lt;paket_adý&gt;
Pin: &lt;pin tanýmlamasý&gt;
Pin-Priority: &lt;pin önceliði&gt;
</example>
<p>
Örnek olarak, <package>sylpheed</package> paketinin 0.4.99 versiyonunu korumak isterseniz aþaðýdaki
kayýtý buraya ekleyebilirsiniz:
<p>
<example>
Package: sylpheed
Pin: version 0.4.99*
</example>
<p>
Buradaki <tt>*</tt> kullanýmýna dikkat! Bu karakter ile girdiðimiz pin deðerinin tüm 0.4.99
ile baþlayan versiyonlar için geçerli olduðunu belirtebiliyoruz.
Bu sayede program versiyonunun yaný sýra paketin Debian paket versiyonunun deðiþmesi durumunda da koyduðunuz
kurallar geçerli olur, örneðin 0.4.99-1 versiyonu ile 0.4.99-10 versiyonu.
<p>
<tt>Pin-Priority</tt> alaný seçime baðlýdýr, girilmediði takdirde öntanýmlý deðeri 989'dur.
<p>
Þimdi de pin önceliklerinin nasýl çalýþtýðýna bakalým. 0 deðerinden daha küçük bir önceliðin
anlamý paketin hiç bir zaman kurulamayacaðýdýr. 0 ile 100 arasýndaki öncelikler paketin kurulmadýðýný
ve eriþilebilir yeni versiyonu olmadýðýný belirtir. 100 öncelik deðeri kurulu olan pakete tanýmlanýr,
paketin kurulu versiyonu yeni bir versiyon ile deðiþtirilebilir, fakat yeni versiyonun 100'den daha
büyük bir önceliðe sahip olmasý gereklidir.
<p>
Öncelik deðeri 100'den büyükse paket kurulmalýdýr. Tipik olarak paketin kurulu versiyonu sadece
daha yeni bir versiyona güncelleme ile deðiþir. Böyle bir önceliðe sahip paket, daha düþük
versiyonu ile deðiþtirilemez (downgrade). Örneðin, eðer sylpheed 0.5.3 versiyonu kurulu ve 
sylpheed 0.4.99 versiyonu için önceliði 999 olan bir pin tanýmlý ise, 0.4.99 paketi bu pin
dolayýsýyla <em>kurulamayacaktýr</em>. Bir paketin eski versiyonlarý ile deðiþtirilebilir olmasýný
pin deðerleri de gözönüne alýnarak saðlamak için ("downgradable") öncelik deðeri 1000'den büyük
hale getirilmelidir.
<p>
Bir pin deðeri paketin <tt>versiyonu</tt>, <tt>sürümü</tt> ve <tt>adýna</tt> göre verilebilir.
<p>
Yukarýda gördüðümüz gibi <tt>versiyona</tt> pin deðeri vermede versiyon numaralarý ve özel karakterler
kullanýlýr.
<!-- what's available?  standard shell globs?  ?*[]   or more? -->
<p>
<tt>Sürüme</tt> pin deðeri verme iþlemi APT'nin kullandýðý arþivlerdeki veya CD'deki Release
dosyasý ile iliþkilidir. Eðer kullandýðýnýz arþivler Release dosyasýný saðlamýyorsa bu
özellik kullanýlamaz. Release dosyanýzýn içeriðini <tt>/var/lib/apt/lists/</tt> dizini altýndan
görebilirsiniz. Sürüm için kullanýlabilecek parametreler 
<tt>a</tt> (arþiv), <tt>c</tt> (components, bölüm), <tt>v</tt> (versiyon),
<tt>o</tt> (origin, kaynak) ve <tt>l</tt> (label, etiket) tir.
<p>
Örnek:
<p>
<example>
Package: *
Pin: release v=2.2*,a=stable,c=main,o=Debian,l=Debian
Pin-Priority: 1001
</example>
<p>
Bu örnekte Debian 2.2* versiyonlarýný (2.2r2, 2.2r3 vb.), <tt>kararlý, stable</tt> arþivi
<tt>main</tt> bölümü (<tt>contrib</tt> veya <tt>non-free</tt> de olabilirdi), kaynak ve etiket olarak
Debian'ý seçtik. Kaynak (o=) Release dosyasýný kimin ürettiðini belirtir, etiket (l=) ise
daðýtýmýn ismidir (Debian daðýtýmý için etiket Debian iken Progeny için Progeny'dir). Örnek
bir Release dosyasýnýn içeriði aþaðýdadýr:
<p>
<example>
$ cat /var/lib/apt/lists/ftp.debian.org.br_debian_dists_potato_main_binary-i386_Release
Archive: stable
Version: 2.2r3
Component: main
Origin: Debian
Label: Debian
Architecture: i386
</example>
</sect>
</chapt>

<chapt id="helpers">Yardýmcý araçlar
<sect id="equivs">Kendi derlediðim paketleri nasýl kuracaðým: equivs
<p>
Bazen bir programýn belirli bir versiyonunu kullanmak zorunda kalabiliriz. Bu versiyona ait
bir Debian paketi mevcut deðil ise, programý kaynak koddan derleyerek kendimiz kurarýz. 
Fakat paket yönetim sistemi bu durumda þaþýrabilir.
Mesela kullandýðýnýz mail sunucu yazýlýmýnýn yeni bir versiyonunu derlediðinizi düþünün.
Burada problem yok, ancak pek çok Debian paketi sistemde bir MTA (Mail Transport Agent) yazýlýmý
olmasýný gerektirir. Mail sunucunuzu kendiniz derleyerek kurduðunuz için paket yönetim sistemi
bundan haberdar deðildir ve baðýmlýlýk hatalarý oluþur.
<p>
Burada <package>equivs</package> programý devreye girmektedir. Programý kurmak için ayný isimli
paketi sisteminize kurmalýsýnýz. Bu program ile boþ bir paket yaratýp, baðýmlýlýk problemlerini
çözebilir ve paket yönetim sisteminin içini rahatlatabilirsiniz.
<p>
Baþlamadan önce hatýrlatmak isteriz ki, Debian için zaten paketi hazýrlanmýþ bir programý farklý
derleme seçenekleriyle derlemenin daha güvenli ve uygun yollarý vardýr. Eðer ne yaptýðýnýzý
tam olarak bilmiyorsanýz equivs kullanmayýnýz. Ayrýntýlý bilgi için bkz. <ref id="sourcehandling">.

<p>
MTA örneðimize kaldýðýmýz yerden devam edelim. Yeni derlemiþ olduðunuz <prgn>postfix</prgn> programýný
sisteminize kurdunuz ve ardýndan <package>mutt</package> paketini kurmak istediniz. Fakat 
<package>mutt</package> paketinin baþka bir MTA kurulmasýný gerektirdiðini gördünüz ama zaten
sisteminizde bir MTA var !
<p>
Herhangi bir dizine geçip (örneðin <file>/tmp</file>) aþaðýdaki komutu çalýþtýrýn:

<p>
<example>
# equivs-control <var>isim</var>
</example>

<p>
<var>isim</var> deðerini oluþturmak istediðiniz control dosyasýnýn adý ile deðiþtiriniz.
Ardýndan dosya aþaðýdaki þekilde oluþturulacaktýr:

<p>
<example>
Section: misc
Priority: optional
Standards-Version: 3.0.1

Package: &lt;enter package name; defaults to equivs-dummy&gt;
Version: &lt;enter version here; defaults to 1.0&gt;
Maintainer: &lt;your name and email address; defaults to username&gt;
Pre-Depends: &lt;packages&gt;
Depends: &lt;packages&gt;
Recommends: &lt;packages&gt;
Suggests: &lt;package&gt;
Provides: &lt;(virtual)package&gt;
Architecture: all
Copyright: &lt;copyright file; defaults to GPL2&gt;
Changelog: &lt;changelog file; defaults to a generic changelog&gt;
Readme: &lt;README.Debian file; defaults to a generic one&gt;
Extra-Files: &lt;additional files for the doc directory, commaseperated&gt;
Description: &lt;short description; defaults to some wise words&gt;
 long description and info
 .
 second paragraph
</example>

<p>
Bu dosyayý kendi isteðimize göre deðiþtirebiliriz. Tüm alanlarý açýklamaya þimdilik burada gerek 
yok, hemen amacýmýzý gerçekleþtirelim:

<p>
<example>
Section: misc
Priority: optional
Standards-Version: 3.0.1

Package: mta-local
Provides: mail-transport-agent
</example>

<p>
Evet, hepsi bundan ibaret. <package>mutt</package> paketi sistemde <package>mail-transport-agent</package>
paketi olmasýný gerektirir. Bu sanal bir pakettir ve tüm MTA'lar tarafýndan saðlanýr.
Ayný davranýþ için paket ismi olarak doðrudan <package>mail-transport-agent</package> seçebilirdik,
ancak sanal paket kavramýný ve Provides alanýný kullanarak bunu gerçekleþtirdik.
<p>
Þimdi yapmanýz gereken paketi oluþturmaktýr:
<p>
<example>
# equivs-build <var>isim</var>
dh_testdir
touch build-stamp
dh_testdir
dh_testroot
dh_clean -k
# Add here commands to install the package into debian/tmp.
touch install-stamp
dh_testdir
dh_testroot
dh_installdocs
dh_installchangelogs
dh_compress
dh_fixperms
dh_installdeb
dh_gencontrol
dh_md5sums
dh_builddeb
dpkg-deb: building package `<var>isim</var>' in `../<var>isim</var>_1.0_all.deb'.

The package has been created.
Attention, the package has been created in the current directory,
</example>

<p>
Ve sonra üretilen <tt>.deb</tt> paketini sisteminize kurmalýsýnýz.
<p>
Gördüðünüz gibi <prgn>equivs</prgn> programýnýn kullanýlabileceði pek çok durum vardýr.
Örneðin <tt>favorilerim</tt> adlý bir paket oluþturabilir ve bu paketin sýklýkla kullandýðýnýz
paketlere baðýmlý olmasýný saðlayabilirsiniz (Depends alaný ile). Ardýndan bu paketi sisteminize
kurup, baðýmlýlýk verdiðiniz diðer tüm paketlerin de kurulmasýný saðlamýþ olursunuz.
<p>
Örnek control dosyalarý için
<file>/usr/share/doc/equivs/examples</file> dizini altýna bakabilirsiniz.
</sect>

<sect id="localepurge">Kullanýlmayan yerelleþtirme dosyalarýný kaldýrma: localepurge
<p>
Çoðu Debian kullanýcýsý sadece bir tip yerel dosyasý kullanýr. Örneðin bir Türk genellikle
<tt>tr_TR</tt> yerelini kullanýr ve hemen hiç bir zaman <tt>es</tt> kullanma ihtiyacý hissetmez.
<p>
<package>localepurge</package> paketi bu kullanýcýlar için oldukça faydalýdýr.
Kullanmadýðýnýz yerellerin sisteminizden kaldýrýlmasýný ve yenilerinin de kurulmamasýný saðlayarak
disk üzerinde size yer kazandýrýr. Yapmanýz gerekeni biliyorsunuz: 
<tt>apt-get install localepurge</tt>
<p>
Paketin ayarlamalarý oldukça kolaydýr, debconf tarafýndan ilgili sorular size yöneltilecektir.
Ancak ilk soruya cevap verirken dikkatli olun, yanlýþ bir seçim sonucu kullandýðýnýz yerel
dosyalarýnýn silinmesine neden olabilirsiniz. Bu durumda tek çözüm, ilgili yerel dosyalarýný
içeren paketleri sisteminize yeniden kurmak olacaktýr.
</sect>

<sect id="helper-show-versions">Güncellenebilir paketleri nasýl öðrenebilirim?
<p>
<prgn>apt-show-versions</prgn> programý sisteminizde güncellenmeye müsait olan paketler hakkýnda
faydalý bilgiler sunar. <tt>-u</tt> seçeneði ile güncellenebilir paketlerin listesini
alabilirsiniz:

<p>
<example>
$ apt-show-versions -u    
libeel0/unstable upgradeable from 1.0.2-5 to 1.0.2-7
libeel-data/unstable upgradeable from 1.0.2-5 to 1.0.2-7
</example>
</sect>

</chapt>

<chapt id="search">Paketler hakkýnda bilgi toplama
<p>
Paketler hakkýnda bilgi toplamak için APT sisteminin üzerinde çalýþan programlar bulunmaktadýr.
<p>
Fakat burada amacýmýz APT ile ayný bilgilere nasýl eriþebileceðinizi sizlere anlatmaktýr.
Mesela, kurmak istediðiniz programýn paket adýný nasýl öðrenebiliriz?
<p>
Bu amaç için birkaç yardýmcý araca sahibiz. Önce <tt>apt-cache</tt> ile baþlayalým.
Bu program APT sistemi tarafýndan kendi özel veritabanýný yönetmede kullanýlýr.
Þimdi pratik kullanýmda uygulanmasýna geçelim.

<sect id="cache">Paket isimlerini keþfetme
<p>
Örneðin, eski iyi günleri hatýrladýnýz, Atari 2600 günlerinizi... Ve bir Atari emülator programý
kurmak için APT'yi kullanmak istiyorsunuz ancak kurmanýz gereken paketin ismini bilmiyorsunuz.
Yapmanýz gereken:

<p>
<example>
# apt-cache search atari
atari-fdisk-cross - Partition editor for Atari (running on non-Atari)
circuslinux - The clowns are trying to pop balloons to score points!
madbomber - A Kaboom! clone
tcs - Character set translator.
atari800 - Atari emulator for svgalib/X/curses
stella - Atari 2600 Emulator for X windows
xmess-x - X binaries for Multi-Emulator Super System
</example>

<p>
Gördüðünüz gibi arama sonucumuzda birkaç paket kýsa açýklamalarýyla birlikte listelendi. Herhangi biri
hakkýnda daha ayrýntýlý bilgi almak istersek kullanacaðýmýz komut:

<p>
<example>
# apt-cache show stella  
Package: stella
Priority: extra
Section: non-free/otherosfs
Installed-Size: 830
Maintainer: Tom Lear &lt;tom@trap.mtview.ca.us&gt;
Architecture: i386
Version: 1.1-2
Depends: libc6 (&gt;= 2.1), libstdc++2.10, xlib6g (&gt;= 3.3.5-1)
Filename: dists/potato/non-free/binary-i386/otherosfs/stella_1.1-2.deb
Size: 483430
MD5sum: 11b3e86a41a60fa1c4b334dd96c1d4b5
Description: Atari 2600 Emulator for X windows
 Stella is a portable emulator of the old Atari 2600 video-game console
 written in C++.  You can play most Atari 2600 games with it.  The latest
 news, code and binaries for Stella can be found at:
 http://www4.ncsu.edu/~bwmott/2600
</example>

<p>
Bu defaki ekran çýktýsýnda paket hakkýnda daha ayrýntýlý bilgi var ve bu bilgiler doðrultusunda
paketi kurmak isteyip istemediðimize karar verebiliriz. Eðer paket sisteminizde kurulu fakat
yeni bir versiyonu mevcut ise, her iki versiyon hakkýndaki bilgiler listelenecektir. Örnek:

<p>
<example>
# apt-cache show lilo
Package: lilo
Priority: important
Section: base
Installed-Size: 271
Maintainer: Russell Coker &lt;russell@coker.com.au&gt;
Architecture: i386
Version: 1:21.7-3
Depends: libc6 (&gt;= 2.2.1-2), debconf (&gt;=0.2.26), logrotate
Suggests: lilo-doc
Conflicts: manpages (&lt;&lt;1.29-3)
Filename: pool/main/l/lilo/lilo_21.7-3_i386.deb
Size: 143052
MD5sum: 63fe29b5317fe34ed8ec3ae955f8270e
Description: LInux LOader - The Classic OS loader can load Linux and others
 This Package contains lilo (the installer) and boot-record-images to
 install Linux, OS/2, DOS and generic Boot Sectors of other OSes.
 .
 You can use Lilo to manage your Master Boot Record (with a simple text screen)
 or call Lilo from other Boot-Loaders to jump-start the Linux kernel.

Package: lilo
Status: install ok installed
Priority: important
Section: base
Installed-Size: 190
Maintainer: Vincent Renardias &lt;vincent@debian.org&gt;
Version: 1:21.4.3-2
Depends: libc6 (&gt;= 2.1.2)
Recommends: mbr
Suggests: lilo-doc
Description: LInux LOader - The Classic OS loader can load Linux and others
 This Package contains lilo (the installer) and boot-record-images to
 install Linux, OS/2, DOS and generic Boot Sectors of other OSes.
 .
 You can use Lilo to manage your Master Boot Record (with a simple text screen)
 or call Lilo from other Boot-Loaders to jump-start the Linux kernel.
</example>

<p>
Burada ilk sýrada yeni versiyona ait bilgiler, ikinci sýrada ise zaten sisteminizde kurulu olan
versiyona ait bilgiler listelenir. Bir paket hakkýnda daha genel bilgi edinmek için aþaðýdaki
komutu kullanabilirsiniz:

<p>
<example>
# apt-cache showpkg penguin-command
Package: penguin-command
Versions: 
1.4.5-1(/var/lib/apt/lists/download.sourceforge.net_debian_dists_unstable_main_binary-i386_Packages)(/var/lib/dpkg/status)

Reverse Depends: 
Dependencies: 
1.4.5-1 - libc6 (2 2.2.1-2) libpng2 (0 (null)) libsdl-mixer1.1 (2 1.1.0) libsdl1.1 (0 (null)) zlib1g (2 1:1.1.3) 
Provides: 
1.4.5-1 - 
Reverse Provides: 
</example>

<p>
Bir paketin baðýmlý olduðu paketlerin listesini almak için:

<p>
<example>
# apt-cache depends penguin-command
penguin-command
  Depends: libc6
  Depends: libpng2
  Depends: libsdl-mixer1.1
  Depends: libsdl1.1
  Depends: zlib1g
</example>

<p>
Özetle, aradýðýmýz paket adýný bulmak için bir kaç silaha sahibiz.
</sect>

<sect id="dpkg-search">Paket adlarýný bulmak için dpkg kullanma
<p>
Paket adýný bulmada diðer bir yöntem de o paket tarafýndan kullanýldýðýný bildiðiniz bir dosyadan
hareket etmektir. Örneðin belirli bir <tt>".h"</tt> dosyasýný içerdiðini bildiðiniz paketin ismini
aþaðýdaki gibi bulabilirsiniz:

<p>
<example>
# dpkg -S stdio.h
libc6-dev: /usr/include/stdio.h
libc6-dev: /usr/include/bits/stdio.h
perl: /usr/lib/perl/5.6.0/CORE/nostdio.h
</example>

<p>
veya:
<p>
<example>
# dpkg -S /usr/include/stdio.h
libc6-dev: /usr/include/stdio.h
</example>

<p>
Eðer sisteminize kurulu bir paketin tam ismini öðrenmek isterseniz aþaðýdaki komut
iþinizi görecektir:
<p>
<example>
# dpkg -l | grep mozilla
ii  mozilla-browse 0.9.6-7        Mozilla Web Browser
</example>
<p>
Bu komut paket isimlerini belirli bir uzunluktan sonra kesmektedir. Yukarýdaki örnekte
paketin tam ismi <tt>mozilla-browser</tt>'dýr. Bu problemi gidermek için <tt>COLUMNS</tt>
çevresel deðiþkenini aþaðýdaki gibi ayarlamalýsýnýz:

<p>
<example>
[kov]@[couve] $ COLUMNS=132 dpkg -l | grep mozilla
ii  mozilla-browser             0.9.6-7                     Mozilla Web Browser - core and browser
</example>

<p>
veya açýklamasýndan yola çýkarak paket adýný elde edebilirsiniz:
<p>
<example>
# apt-cache search "Mozilla Web Browser"
mozilla-browser - Mozilla Web Browser
</example>
</sect>

<sect id="auto-apt">Programlarý anýnda kurma
<p>
Bir program derliyorsunuz ve aniden bir hata oluþtu! Çünkü program sisteminizde olmayan
bir <tt>.h</tt> dosyasýna ihtiyaç duyuyor. <prgn>auto-apt</prgn> programý sizi bu senaryolardan
kurtaracaktýr. Gerektiðinde ilgili paketi kurmak isteyip istemediðinizi soracak, derleme iþlemini
durduracak ve programý çekip kurduktan sonra derleme iþleminin devam etmesini saðlayacaktýr.
<p>
Peki nasýl yapacaksýnýz:

<p>
<example>
# auto-apt run komut
</example>

<p>
Burada komut yerine derleme için kullanacaðýnýz komutu yazmalýsýnýz.
<p>
<example>
# auto-apt run ./configure
</example>

<p>
Ardýndan gerekli paketleri kurmak isteyip istemediðinizi soracak, apt-get'i çaðýrarak kurulumlarý
otomatik olarak gerçekleþtirecektir.
<p>
Auto-apt programý efektif olarak çalýþabilmek için kendi özel veritabanýný tutar. Bu veritabanýnýn
güncel tutulmasý programýn beklenilen davranýþý gösterebilmesi açýsýndan önemlidir. Veritabanýný
güncellemek için <tt>auto-apt update</tt>, <tt>auto-apt updatedb</tt> ve
<tt>auto-apt update-local</tt> komutlarýný çalýþtýrmalýsýnýz.

</sect>

<sect id="apt-file">Bir dosyanýn hangi pakete ait olduðunu bulma
<p>
Bir paketi kurdunuz ancak <prgn>apt-cache</prgn> ile nasýl çaðýracaðýnýzý bilmiyorsunuz.
Fakat programýn dosya adýný biliyorsunuz, veya paketten çýkan baþka herhangi bir dosyanýn adýný
bilmektesiniz. Bu durumda <prgn>apt-file</prgn> programý ile paket adýný bulabilirsiniz:
<p>
<example>
$ apt-file search <var>dosya_adý</var>
</example>

<p>
Bu komut ayný <tt>dpkg -S</tt> gibi çalýþýr ancak ayrýca verdiðiniz dosyayý içermesine raðmen
sisteminizden sonradan kaldýrýlmýþ olan paketleri de listeler.
<p>
Bir paketin içeriðini aþaðýdaki komutla listeleyebilirsiniz:

<p>
<example>
$ apt-file list <var>paket_adý</var>
</example>

<p>
<prgn>apt-file</prgn> tüm paketler hakkýnda içerdikleri dosyalara iliþkin kayýtlarý tutar.
Ayný auto-apt'de olduðu gibi bu veritabanýnýn da zamanla güncellenmesi gereklidir:
<p>
<example>
# apt-file update
</example>

<p>
Öntanýmlý olarak <prgn>apt-file</prgn> <prgn>auto-apt</prgn> ile ayný kaynaðý kullanýr, bkz.
<ref id="auto-apt">.

</sect>

<sect id="apt-listchanges">Paketlerdeki deðiþikliklerden haberdar olma
<p>
Sisteminize kurulan her paket kendi dokümantasyon dizini altýna 
(<tt>/usr/share/doc/paket_adý</tt>)
<tt>changelog.Debian.gz</tt> adlý bir dosya atar. Bu dosyada ilk versiyondan son versiyona 
kadar paket üzerinde yapýlan deðiþiklikler belirtilir. Bu dosyayý <tt>zless</tt> ile 
okuyabilirsiniz
ancak tüm paketleri bu þekilde takip etmek epey güç bir uðraþtýr.
<p>
Bu iþi otomatik hale getirmek için yardýmcý bir araç mevcuttur:
<prgn>apt-listchanges</prgn>. Programý kullanmak için önce <package>apt-listchanges</package>
paketini sisteminize kurmalýsýnýz. Kurulum esnasýnda Debconf tarafýndan sorulan sorularý 
istediðiniz
gibi yanýtlayabilirsiniz.
<p>
"Should apt-listchanges be automatically run by apt?" seçeneði oldukça yararlýdýr, bu 
seçenek
ile paket kurulum ve güncellemelerinde, paketteki deðiþiklikleri görebilirsiniz.
"Should apt-listchanges prompt for confirmation after 
displaying changes?" seçeneði ile deðiþiklikleri okuduktan sonra programýn kurulumu iþlemine onay
istenmesini saðlayabilirsiniz. Eðer devam etmek istemediðinizi söylerseniz apt-listchanges 
bir hata
kodu döndürür ve apt-get iþlemi sonlandýrýr.
</sect>
</chapt>

<chapt id="sourcehandling">Kaynak paketlerle çalýþma
<sect id="source">Kaynak paketleri indirme
<p>
Özgür yazýlým dünyasýnda kaynak kodlar üzerinde çalýþma, hata bulma ve düzeltme oldukça 
yaygýndýr.
Bunu yapabilmek için programýn kaynak kodlarýný indirmeniz gereklidir.
APT sistemi, daðýtým içerisinde yer alan paketlerin kaynak kodlarýný, .deb paketi
oluþturulabilmesi için yapýlan deðiþiklikleri de içerecek þekilde indirmenizi saðlayacak
fonksiyonlara sahiptir.

<p>
Debian kaynak paketlerinin kullanýlmasýnýn gerektiði diðer bir durum ise, belirli bir 
paketin
unstable daðýtýmdaki versiyonunu stable daðýtým için yeniden hazýrlamak istediðiniz durumdur.
Bir paketi stable daðýtým için oluþturduðunuzda baðýmlýlýklar da stable daðýtýma göre
düzenlenir. 
<p>
Bunun için <tt>/etc/apt/sources.list</tt> dosyanýzda ilgili <tt>deb-src</tt> satýrlarýnýn
bulunmasý gereklidir. Ayrýntý için bkz. <ref id="sources.list">.
<p>
Bir kaynak paketi indirmek için aþaðýdaki komutu kullanýnýz:

<p>
<example>
$ apt-get source paket_adý
</example>
<p>
Bu komut üç dosyanýn indirilmesini saðlayacaktýr: bir <tt>.orig.tar.gz</tt>, bir 
<tt>.dsc</tt> ve
bir de <tt>.diff.gz</tt>. Eðer paket Debian'a özgü ise, son iki dosya indirilmez ve dosya 
adý
büyük olasýlýkla orig ön-ekini içermez.
<p>
<tt>.dsc</tt> dosyasý dpkg-source tarafýndan kaynak paketi <var>paket_adý-versiyon</var>
dizini altýna açmak için kullanýlýr. Ýndirilen her bir debian kaynak paketi açýldýktan 
sonra,
<tt>debian</tt> adýnda bir dizin içerir. Bu dizinde .deb paketini oluþturmak için yapýlan 
tüm
deðiþiklikler bulunmaktadýr.
<p>
Kaynak paket indirildikten hemen sonra .deb paketinin oluþturulmasýný istiyorsanýz 
auto-build
seçeneði iþinize yarayacaktýr. Bunun için komutu <tt>-b</tt> anahtarý ile
aþaðýdaki gibi kullanmalýsýnýz:
<p>
<example>
$ apt-get -b source paket_adý
</example>

<p>
Eðer indirdikten hemen sonra yerine daha ileriki zamanlarda .deb paketini oluþturmak 
isterseniz
aþaðýdaki komutla bunu yapabilirsiniz:

<p>
<example>
$ dpkg-buildpackage -rfakeroot -uc -b
</example>

<p>
Bu komutu kaynak paketin açýldýðý dizin içerisindeyken çalýþtýrmalýsýnýz. Ýþlem sonunda
üretilen paketi aþaðýdaki gibi sisteminize kurabilirsiniz:
<p>
<example>
# dpkg -i <var>paket.deb</var>
</example>

<p>
<prgn>apt-get</prgn>'in <tt>source</tt> fonksiyonu ile diðerleri arasýnda birtakým farklar 
bulunmaktadýr. Burada paketin indirilebilmesi için root kullanýcýsý olunmasýna gerek yoktur, 
indirilen paketler o an bulunulan dizin içerisine açýlýrlar.
</sect>

<sect id="build-dep">Kaynak paketleri derlemek için gerekli paketler
<p>
Doðal olarak derleyeceðiniz programýn ihtiyaç duyduðu kütüphanelerin sisteminizde bulunmasý
zorunludur. Tüm kaynak paketler debian/control dosyalarýnda 'Build-Depends:' adlý bir alana 
sahiptir, bu alanda paketin kaynak koddan derlenebilmesi için ihtiyaç duyduðu paketler belirtilir.
<p>
APT bu paketleri kolayca indirmek ve kurmak için gerekli fonksiyona sahiptir.
<tt>apt-get build-dep paket_adý</tt> komutu ile derlemek istediðiniz paketin
Build-Depends alanýnda belirtilen paketlerin sisteminize kurulmasý saðlanýr.

<p>
<example>
# apt-get build-dep gmc
Reading Package Lists... Done
Building Dependency Tree... Done
The following NEW packages will be installed:
  comerr-dev e2fslibs-dev gdk-imlib-dev imlib-progs libgnome-dev libgnorba-dev
  libgpmg1-dev 
0 packages upgraded, 7 newly installed, 0 to remove and 1  not upgraded.
Need to get 1069kB of archives. After unpacking 3514kB will be used.
Do you want to continue? [Y/n]
</example>

<p>
Burada <package>gmc</package> paketinin kaynak halinden derlenebilmesi için gerekli paketler
sisteme kurulmaktadýr. Bu komutun kaynak paketi indirmediðini unutmayýn, kaynak paketi 
<tt>apt-get source</tt> ile ayrýca indirmelisiniz.
<p>
Eðer amacýnýz belirli bir kaynak paketi derleyebilmek için gereken paketlerin listesini 
almak
ise bunun için <tt>apt-cache show</tt> türevi bir komut kullanýlýr, bkz. <ref id="search">.
<p>
<example>
# apt-cache showsrc <var>paket_adý</var>
</example>

</sect>
</chapt>

<chapt id="erros">Hatalarla baþa çýkma
<sect id="erros-comuns">Genel hatalar
<p>
Hatalý durumlar her zaman olabilir, hatalarýn çoðu basit bir þekilde düzeltilebilecek 
türdendir.
Aþaðýda sýklýkla karþýlaþýlan hatalar ve çözüm yöntemlerinin bir listesi verilmiþtir:
<p>
Eðer <tt>apt-get install paket_adý</tt> komutunun ardýndan aþaðýdaki gibi bir çýktý 
aldýysanýz...

<p>
<example>
Reading Package Lists... Done
Building Dependency Tree... Done
W: Couldn't stat source package list 'http://people.debian.org unstable/ Packages' (/var/state/apt/lists/people.debian.org_%7ekov_debian_unstable_Packages) - stat (2 No such file or directory)
W: You may want to run apt-get update to correct these missing files
E: Couldn't find package penguineyes
</example>

<p>
<tt>/etc/apt/sources.list</tt> dosyasýnda yaptýðýnýz son deðiþiklikten sonra
<tt>apt-get update</tt> komutunu çalýþtýrmayý unutmuþsunuz demektir.
<p>
Eðer hata aþaðýdakine benzer ise:
<p>
<example>
E: Could not open lock file /var/lib/dpkg/lock - open (13 Permission denied)
E: Unable to lock the administration directory (/var/lib/dpkg/), are you root?
</example>

<p>
<prgn>apt-get</prgn>'in <tt>source</tt> dýþýnda bir fonksiyonu normal kullanýcý
haklarýyla kullanmaya çalýþýyorsunuzdur.
<p>
Benzer bir hatayý, ayný anda birden fazla <prgn>apt-get</prgn> programýný çalýþtýrmanýz 
durumunda
ya da <prgn>dpkg</prgn> programý iþlem yaparken APT kullanmaya çalýþmanýz durumunda 
alabilirsiniz.
Ayný anda kullanýlabilecek tek fonksiyon <tt>source</tt>'týr.
<p>
Eðer kurulum iþleminiz herhangi bir nedenle yarýda kesilmiþ ve ardýndan hiç bir paketi 
kurma ve kaldýrma iþlemi yapamaz duruma gelmiþseniz, aþaðýdaki komutlarla APT'nin gerekli 
düzeltmeleri yapmasýný saðlayabilirsiniz:

<p>
<example>
# apt-get -f install
# dpkg --configure -a
</example>

<p>
Ve bazen yukarýdaki komutlarý birden fazla defa tekrarlamanýz gerekebilir. `unstable' 
daðýtýmý kullanmaya baþlayacak olan kullanýcýlarýn öðrenmesi gereken ilk ders budur.

</sect>

<sect id="help">Nereden yardým bulabilirim?
<p>
Debian paket yönetim sistemi hakkýndaki ayrýntýlý belgeleri inceleyebilirsiniz.
Programlarýn <tt>--help</tt> ve kýlavuz (man) sayfalarý da oldukça yararlý bilgiler 
içerir. Ayrýca <tt>/usr/share/doc</tt> dizini altýndaki her programa ait dokümantasyonu 
inceleyebilirsiniz, apt için bu dizin <tt>/usr/share/doc/apt</tt>'dir.
<p>
Eðer aradýðýnýz sorunun cevabýný bu dokümanlarda da bulamazsanýz cevabý Debian mail 
listelerinde aramalýsýnýz. Debian listeleri hakkýnda ayrýntýlý bilgilere
<url id="http://www.debian.org" name="http://www.debian.org"> adresinden ulaþabilirsiniz.
<p>
Belirttiðimiz listeler Debian kullanýcýlarý içindir, diðer daðýtýmlarý kullananlar, 
daðýtýmlarýnýn
mail listelerinde kendilerine uygun cevaplarý bulabilirler.
</sect>
</chapt>

<chapt id="distros">Hangi Linux daðýtýmlarý APT destekliyor?
<p>
Aþaðýda APT'yi destekleyen daðýtýmlarýn bir listesi yer almaktadýr:
<p>
Debian GNU/Linux (<url id="http://www.debian.org" name="http://www.debian.org">) 
- APT'nin geliþtiriminin yapýldýðý ve devam ettiði daðýtýmdýr.
<p>
Conectiva (<url id="http://www.conectiva.com.br" name="http://www.conectiva.com.br">) 
- APT sisteminin rpm ile kullanýlabilmesi için çalýþan ilk daðýtýmdýr.
<p>
Mandrake (<url id="http://www.mandrake.com" name="http://www.mandrake.com">)
<p>
PLD (<url id="http://www.pld.org.pl" name="http://www.pld.org.pl">)
<p>
Vine (<url id="http://www.vinelinux.org" name="http://www.vinelinux.org">)
<p>
APT4RPM (<url id="http://apt4rpm.sf.net" name="http://apt4rpm.sf.net">)
<p>
Alt Linux (<url id="http://www.altlinux.ru/" name="http://www.altlinux.ru/">)
<p>
Red Hat (<url id="http://www.redhat.com/" name="http://www.redhat.com/">)
<p>
Sun Solaris (<url id="http://www.sun.com/" name="http://www.sun.com/">)
<p>
SuSE (<url id="http://www.suse.de/" name="http://www.suse.de/">)
<p>
Yellow Dog Linux (<url id="http://www.yellowdoglinux.com/"
name="http://www.yellowdoglinux.com/">)
</chapt>

<chapt id="agradecimentos">Teþekkürler
<p>
Debian-BR ve Debian projesindeki arkadaþlarýma, desteklerini esirgemedikleri için 
teþekkürlerimi sunuyorum.
<p>
Ayrýca projemize ve benzer özgür projelere destek veren CIPSGA'ya teþekkür ediyorum.
<p>

Ve özel teþekkürler:
<p>
Yooseong Yang &lt;yooseong@debian.org&gt;
<p>
Michael Bramer &lt;grisu@debian.org&gt;
<p>
Bryan Stillwell &lt;bryan@bokeoa.com&gt;
<p>
Pawel Tecza  &lt;pawel.tecza@poczta.fm&gt;
<p>
Hugo Mora &lt;h.mora@melix.com.mx&gt;
<p>
Luca Monducci &lt;luca.mo@tiscali.it&gt;
<p>
Tomohiro KUBOTA &lt;kubota@debian.org&gt;
<p>
Pablo Lorenzzoni &lt;spectra@debian.org&gt;
<p>
Steve Langasek &lt;vorlon@netexpress.net&gt;
<p>
Arnaldo Carvalho de Melo &lt;acme@conectiva.com.br&gt;
<p>
Erik Rossen &lt;rossen@freesurf.ch&gt;
<p>
Ross Boylan &lt;RossBoylan@stanfordalumni.org&gt;
<p>
Matt Kraai &lt;kraai@debian.org&gt;
<p>
Aaron M. Ucko &lt;ucko@debian.org&gt;
<p>
Jon Åslund &lt;d98-jas@nada.kth.se&gt;
</chapt>

<chapt id="novas">Bu dokümanýn yeni versiyonlarý

<p>
Bu doküman <url id="http://www.debian-br.org" name="Debian-BR"> 
projesi kapsamýnda üretilmiþ olup, tüm Debian kullanýcýlarýna yardýmcý olmasý amaçlanmýþtýr.
<p>
Dokümanýn yeni versiyonlarýn her zaman Debian Dokümantasyon Projesi sayfalarýndan 
eriþebilirsiniz:
<url id="http://www.debian.org/doc/ddp" name="http://www.debian.org/doc/ddp">. 
<p>
Her türlü yorum ve görüþlerinizi <email>kov@debian.org</email> adresinden bana 
gönderebilirsiniz.
</chapt>

</book>

</debiandoc>
