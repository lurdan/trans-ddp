<!doctype debiandoc system>
<debiandoc>

<book>

<title>APT HOWTO</title>

<author>
<name>Gustavo Noronha Silva</name> <email>kov@debian.org</email>
</author>
<author>
<name>polskie t³umaczenie: Pawe³ Têcza</name> <email>pawel.tecza@poczta.fm</email>
</author>

<version>1.8.2 - listopad 2002</version>

<abstract>
Ten dokument ma na celu dobrze wyja¶niæ u¿ytkownikowi zasadê dzia³ania
narzêdzia do zarz±dzania pakietami Debiana jakim jest APT. Jego celem jest
uczynienie ³atwiejszym ¿ycia nowym u¿ytkownikom Debiana oraz pomoc tym jego
u¿ytkownikom, którzy chcieliby lepiej rozumieæ administrowanie systemem
pakietów. Zosta³ on stworzony w ramach projektu Debian, aby pomóc w
polepszeniu wsparcia dla u¿ytkowników tej dystrybucji.
</abstract>

<copyright>
<copyrightsummary>
Copyright &copy; 2001, 2002 Gustavo Noronha Silva
</copyrightsummary>
<copyrightsummary>
Copyright &copy; polskiego t³umaczenia 2001, 2002 Pawe³ Têcza
</copyrightsummary>
<p>
Ten podrêcznik jest objêty licencj± GNU FDL (Free Documentation License).
Zosta³ on napisany w nadziei, ¿e bêdzie u¿yteczny dla spo³eczno¶ci u¿ytkowników
Debiana, ale nie udziela siê na niego ¿adnej gwarancji; u¿ywaj go wy³±cznie na
w³asne ryzyko.
</copyright>

<toc>

<chapt>Wprowadzenie
<p>
Na pocz±tku by³ plik .tar.gz. U¿ytkownicy musieli kompilowaæ ka¿dy program,
który chcieli u¿ywaæ w swoich systemach GNU/Linux. Kiedy stworzono Debiana,
uznano za niezbêdne w³±czenie do systemu metody zarz±dzania pakietami
zainstalowanymi na komputerze pracuj±cym pod jego kontrol±. Ten system
zarz±dzania pakietami nazwano <prgn>dpkg</prgn>. Tak wiêc s³ynne pojêcie
`pakietu' wesz³o do systemów GNU/Linux zanim firma Red Hat zdecydowa³a siê
stworzyæ swój w³asny system `rpm'.
<p>
Szybko uwagê twórców systemu GNU/Linux zaj±³ nowy dylemat. Potrzebowali oni
bardzo szybkiego, praktycznego i sprawnego sposobu instalowania pakietów, który
automatycznie zarz±dza³by zale¿no¶ciami miêdzy pakietami i troszczy³ siê o ich
pliki konfiguracyjne podczas aktualizacji. I znów to w³a¶nie Debian wprowadzi³
ten sposób i tak oto narodzi³ siê APT (Advanced Packaging Tool), który zosta³
przystosowany do wspó³pracy z pakietami rpm przez firmê Conectiva, a nastêpnie
wykorzystany tak¿e przez inne dystrybucje.
<p>
Ten podrêcznik nie opisuje apt-rpm, jak nazwano wersjê APT-a zmodyfikowan±
przez firmê Conectiva, ale "³aty" do tego dokumentu, które by to robi³y s±
mile widziane.
<p>
Informacje zawarte w tym podrêczniku dotycz± nastêpnego stabilnego wydania
Debiana, które nosi nazwê kodow± <tt>Sarge</tt>.
</chapt>

<chapt id="basico">Podstawowa konfiguracja

<sect id="sources.list">Plik /etc/apt/sources.list
<p>
Do czê¶ci swoich operacji APT u¿ywa pliku zawieraj±cego listê `¼róde³', z
których mog± byæ pobierane pakiety. Tym plikiem jest
<tt>/etc/apt/sources.list</tt>.
<p>
Wpisy w tym pliku maj± nastêpuj±cy format:

<example>
deb http://witryna.http.org/debian dystrybucja sekcja1 sekcja2 sekcja3
deb-src http://witryna.http.org/debian dystrybucja sekcja1 sekcja2 sekcja3
</example>

Oczywi¶cie powy¿sze wpisy s± fikcyjne i nie powinny byæ u¿ywane. Pierwszym
s³owem w ka¿dej linii jest <tt>deb</tt> lub <tt>deb-src</tt>, które wskazuje
typ archiwum. Mówi ono czy archiwum zawiera pakiety binarne (<tt>deb</tt>),
czyli skompilowane ju¿ pakiety, których zazwyczaj u¿ywamy czy pakiety ¼ród³owe
(<tt>deb-src</tt>), którymi s± oryginalne ¼ród³a programów wraz z plikiem
zawieraj±cym opis (<tt>.dsc</tt>) oraz plikiem przechowuj±cym zmiany potrzebne
do `zdebianizowania' programu (<tt>.diff.gz</tt>).
<p>
Zwykle plik sources.list zawiera domy¶lnie nastêpuj±ce wpisy:

<example>
# See sources.list(5) for more information, especialy
# Remember that you can only use http, ftp or file URIs
# CDROMs are managed through the apt-cdrom tool.
deb http://http.us.debian.org/debian stable main contrib non-free
deb http://non-us.debian.org/debian-non-US stable/non-US main contrib non-free
deb http://security.debian.org stable/updates main contrib non-free

# Uncomment if you want the apt-get source function to work
#deb-src http://http.us.debian.org/debian stable main contrib non-free
#deb-src http://non-us.debian.org/debian-non-US stable/non-US main contrib non-free
</example>

Linie te s± potrzebne do podstawowej instalacji Debiana. Pierwsza linia ze
s³owem <tt>deb</tt> wskazuje na oficjane archiwum, druga na archiwum non-US,
a trzecia na archiwum z uaktualnieniami pakietów zwi±zanych z bezpieczeñstwem
Debiana.
<p>
Dwie ostatnie linie s± wykomentowane (za pomoc± znaku `#' na pocz±tku linii),
wiêc apt-get po prostu je zignoruje. To s± linie ze s³owem <tt>deb-src</tt>,
które wskazuj± na pakiety ¼ród³owe Debiana. Je¶li czêsto pobierasz ¼ród³a
programów do testowania ich lub rekompilacji, to odkomentuj te linie.
<p>
Plik <tt>/etc/apt/sources.list</tt> mo¿e zawieraæ kilka typów linii. APT wie
jak sobie radziæ z archiwami typu <tt>http</tt>, <tt>ftp</tt>, <tt>file</tt>
(lokalne pliki, np. katalog zawieraj±cy zamontowany system plików ISO9660) i
<tt>ssh</tt>.
<p>
Nie zapomnij wydaæ polecenia <tt>apt-get update</tt> po zmodyfikowaniu
zawarto¶ci pliku <tt>/etc/apt/sources.list</tt>. Jest to konieczne, aby APT
pobra³ listy dostêpnych pakietów ze ¼róde³ wymienionych w tym pliku.
</sect>

<sect id="dpkg-scanpackages">Jak u¿ywaæ APT-a lokalnie
<p>
Czasami masz du¿o pakietów <tt>.deb</tt>, do których instalacji
chcia³by¶/chcia³aby¶ u¿yæ APT-a, aby zaj±³ siê zale¿no¶ciami.
<p>
Aby to zrobiæ stwórz najpierw katalog i umie¶æ w nim pliki <tt>.deb</tt>,
które chcesz zindeksowaæ, np.:
 
<example>
mkdir /root/debs
</example>

Mo¿esz zmodyfikowaæ zapisywane w plikach kontrolnych ustawienia pakietów
znajduj±cych siê w Twoim repozytorium przy pomocy pliku
<tt>uniewa¿niaj±cego</tt>. Wewn±trz tego pliku mo¿esz zdefiniowaæ jakie¶ opcje
uniewa¿niaj±ce inne, które by³y dostarczone wraz z pakietem. Odbywa siê to
w nastêpuj±cy sposób:

<example>
pakiet priorytet sekcja
</example>

gdzie `pakiet' jest nazw± pakietu, `priorytet' mo¿e przybieraæ warto¶ci `low',
`medium' lub `high', a `sekcja' jest nazw± sekcji, do której nale¿y pakiet.
Mo¿esz nazwaæ ten plik jest tylko chcesz, bêdziesz musia³ pó¼niej podaæ jego
nazwê jako argument programu <prgn>dpkg-scanpackages</prgn>. Je¶li nie masz
ochoty na tworzenie pliku <tt>uniewa¿niaj±cego</tt>, to zamiast niego mo¿esz
u¿yæ urz±dzenia <file>/dev/null</file> przy uruchamianiu programu
<prgn>dpkg-scanpackages</prgn>.
<p>
Wci±¿ w katalogu /root wydaj polecenie:

<example>
dpkg-scanpackages debs <var>plik</var> | gzip > debs/Packages.gz
</example>

W powy¿szej linii <file>plik</file> to plik <tt>uniewa¿niaj±cy</tt>, za¶
komenda tworzy plik <file>Packages.gz</file>, zawieraj±cy ró¿ne informacje na
temat pakietów, które s± u¿ywane przez APT-a. Aby móc u¿ywaæ pakietów, w pliku
<tt>/etc/apt/sources.list</tt> dodaj liniê:

<example>
deb file:/root debs/
</example>

Teraz ju¿ mo¿esz u¿ywaæ poleceñ APT-a tak, jak zwykle. Mo¿esz tak¿e stworzyæ
repozytorium ¼róde³. W tym celu musisz wykonaæ tak± sam± procedurê jak
wcze¶niej. Pamiêtaj jednak, ¿e bêdziesz potrzebowaæ w katalogu plików
<tt>.orig.tar.gz</tt>, <tt>.dsc</tt> i <tt>.diff.gz</tt>, oraz ¿e nale¿y u¿yæ
nazwy <tt>Sources.gz</tt> zamiast <tt>Packages.gz</tt>. Równie¿ program do jego
tworzenia jest inny. Nazywa siê on <prgn>dpkg-scansources</prgn>. Linia komend
powinna wygl±daæ nastêpuj±co:

<example>
dpkg-scansources debs | gzip > debs/Sources.gz
</example>

Zauwa¿, ¿e program <prgn>dpkg-scansources</prgn> nie potrzebuje pliku
<tt>uniewa¿niaj±cego</tt>. Do pliku <tt>/etc/apt/sources.list</tt> powinni¶my
wpisaæ:

<example>
deb-src file:/root debs/
</example>
</sect>

<sect id="netselect">Podejmowanie decyzji, który serwer lustrzany najlepiej
umie¶ciæ w pliku sources.list: netselect
<p>
Czêsto zadawanym pytaniem, zw³aszcza przez nowych u¿ytkowników Debiana, jest:
"który serwer lustrzany z pakietami powinienem umie¶ciæ w pliku
<tt>sources.list</tt>?".
Jest wiele sposobów pozwalaj±cych wybraæ serwer lustrzany. Eksperci zapewne
u¿ywaj± skryptów mierz±cych obci±¿enie ró¿nych serwerów. Istnieje jednak
program, który zrobi to dla nas, a który nazywa siê <prgn>netselect</prgn>.
<p>
Aby zainstalowaæ program netselect, jak zwykle wydajemy polecenie:

<example>
apt-get install netselect
</example>

Uruchomienie programu netselect bez podania parametrów spowoduje wy¶wietlenie
pomocy ekranowej. Gdy jednak uruchomimy go podaj±c jako argument listê,
oddzielonych spacj±, stacji (serwerów lustrzanych), to otrzymamy w wyniku
jedn± z podanych maszyn. Wynik ten zale¿y od przybli¿onego czasu powrotu
wysy³anych do stacji pakietów IP (tzw. ping) oraz od ilo¶ci stacji po¶rednich
(przez które te pakiety "przechodz±" zanim dotr± do celu) i jest odwrotnie
proporcjonalny do przybli¿onej prêdko¶ci pobierania (zatem, im mniejszy, tym
lepiej). Zwrócona w wyniku stacja ma najmniejszy wynik (pe³na lista wyników
bêdzie widoczna po dodaniu opcji -vv). Spójrz na poni¿szy przyk³ad:

<example>
bash$ netselect ftp.debian.org http.us.debian.org ftp.at.debian.org download.unesp.br ftp.debian.org.br
  365 ftp.debian.org.br
bash$
</example>

Oznacza to, ¿e spo¶ród serwerów lustrzanych podanych jako parametry programu
netselect, najlepszym okaza³ siê <tt>ftp.debian.org.br</tt>, który uzyska³
wynik 365 (Uwaga! Ten test zosta³ wykonany na moim komputerze a trasa, któr±
pokonuj± pakiety IP zale¿y od miejsca, do którego pod³±czony jest nasz
komputer. Uzyskana warto¶æ niekoniecznie bêdzie prawdziw± prêdko¶ci± na innych
komputerach).
<p>
Teraz umie¶æ najszybszy serwer lustrzany znaleziony przez netselect w pliku
<tt>/etc/apt/sources.list</tt> (patrz na sekcjê <ref id="sources.list">) i
zastosuj porady z sekcji <ref id="apt-get">.
<p><strong>Uwaga:</strong> listê serwerów lustrzanych mo¿na zawsze znale¼æ w
pliku <url id="http://www.debian.org/mirror/mirrors_full"
name="http://www.debian.org/mirror/mirrors_full">.
<p>
Poczynaj±c od wersji 0.3, pakiet netselect zawiera skrypt
<prgn>netselect-apt</prgn>, który automatyzuje opisany powy¿ej proces. Po
prostu jako parametr skryptu podaj dystrybucjê (domy¶lnie jest ni±
dystrybucja stabilna), a wygeneruje on plik <tt>sources.list</tt> z najlepszym
serwerem lustrzanym zawieraj±cym pakiety z sekcji main i non-US i zapisze go
w bie¿±cym katalogu. Poni¿szy przyk³ad generuje plik <tt>sources.list</tt> dla
stabilnej dystrybucji.

<example>
bash$ ls sources.list
ls: sources.list: File or directory not found
bash$ netselect-apt stable
(...)
bash$ ls -l sources.list
sources.list
bash$
</example>

<strong>Pamiêtaj:</strong> plik <tt>sources.list</tt> zostanie wygenerowany w
bie¿±cym katalogu i musi byæ przeniesiony do katalogu <tt>/etc/apt</tt>.
<p>
Nastêpnie przejd¼ do porad z sekcji <ref id="apt-get">.
</sect>

<sect id="cdrom">Dodawanie CD-ROM-u do pliku sources.list
<p>
Je¶li raczej u¿ywasz napêdu CD-ROM do instalowania pakietów lub automatycznego
uaktualniania Twojego systemu przy pomocy APT-a, to mo¿esz go umie¶ciæ w pliku
<tt>sources.list</tt>. Aby to zrobiæ, mo¿esz u¿yæ programu
<prgn>apt-cdrom</prgn> w poni¿szy sposób:

<example>
apt-cdrom add
</example>

z umieszczon± w napêdzie CD-ROM p³yt± z pakietami Debiana. Polecenie te
zamontuje napêd i poszuka na p³ycie informacji na temat pakietów. Je¶li
konfiguracja Twojego CD-ROM-u jest trochê nietypowa, mo¿esz tak¿e u¿yæ
nastêpuj±cych opcji:

<example>
-h         - Pomoc ekranowa do programu
-d katalog - Katalog, w którym montowany jest CD-ROM
-r         - Zmiana nazwy rozpoznanego CD-ROM-u
-m         - Bez montowania
-f         - Tryb szybki, bez sprawdzania plików z pakietami
-a         - Tryb dok³adnego przeszukiwania
</example>

Na przyk³ad:

<example>
apt-cdrom -d /home/ala/mojcdrom add
</example>

Mo¿esz tak¿e zidentyfikowaæ swój CD-ROM, bez dodawania go do listy:

<example>
apt-cdrom ident
</example>

Zwróæ uwagê, ¿e ten program bêdzie dzia³a³ tylko wtedy, gdy Twój CD-ROM
jest w³a¶ciwie skonfigurowany w systemowym pliku <tt>/etc/fstab</tt>. 
</sect>
</chapt>

<chapt id="apt-get">Zarz±dzanie pakietami
<sect id="update">Aktualizacja listy dostêpnych pakietów
<p>
System zarz±dzania pakietami u¿ywa w³asnej bazy danych, w której przechowuje
informacje o tym, które pakiety s± zainstalowane, które nie i które s±
dostêpne do instalacji. Program <prgn>apt-get</prgn> u¿ywa w³a¶nie tej bazy
danych, aby dowiedzieæ siê jak zainstalowaæ pakiety na ¿yczenie u¿ytkownika i
jakie dodatkowe pakiety s± potrzebne, aby te wybrane przez u¿ytkownika
dzia³a³y prawid³owo.
<p>
Aby uaktualniæ t± bazê danych nale¿y u¿yæ komendy <prgn>apt-get update</prgn>.
Przeszuka ona archiwa umieszczone w pliku <tt>/etc/apt/sources.list</tt>;
zobacz sekcjê <ref id="sources.list">, aby uzyskaæ wiêcej informacji na temat
tego pliku.
<p>
Dobrym nawykiem jest uruchamiaæ t± komendê dosyæ regularnie, aby stale
informowaæ swój system o mo¿liwych uaktualnieniach pakietów, zw³aszcza tych
zwi±zanych z jego bezpieczeñstwem.
</sect>

<sect id="install">Instalacja pakietów
<p>
W koñcu proces, na który wszyscy czekali¶my! Gdy ju¿ mamy plik sources.list
z list± ¼róde³ pakietów i wiemy jakie pakiety chcemy uaktualniæ, to wszystko
co musimy zrobiæ, to uruchomiæ program <tt>apt-get</tt>, który pobierze
pakiety, które zamierzamy zainstalowaæ. Dla przyk³adu mo¿esz go wywo³aæ
nastêpuj±co:

<example>
apt-get install xchat
</example>

APT poszuka w swojej bazie danych najnowszej wersji pakietu i pobierze go z
odpowiedniego archiwum, które podano w pliku <tt>sources.list</tt>. Gdyby
okaza³o siê, ¿e pakiet ten zale¿y od innego, tak jak w powy¿szym przyk³adzie,
to APT sprawdzi zale¿no¶ci i zainstaluje potrzebne pakiety. Spójrz na ten
przyk³ad:

<example>
[root]@[/] # apt-get install nautilus
Reading Package Lists... Done
Building Dependency Tree... Done
The following extra packages will be installed:
  bonobo libmedusa0 libnautilus0 
The following NEW packages will be installed:
  bonobo libmedusa0 libnautilus0 nautilus 
0 packages upgraded, 4 newly installed, 0 to remove and 1  not upgraded.
Need to get 8329kB of archives. After unpacking 17.2MB will be used.
Do you want to continue? [Y/n] 
</example>

Pakiet <package>nautilus</package> zale¿y od kilku wymienionych bibliotek
wspó³dzielonych, dlatego APT pobierze je z archiwum. Gdyby¶ poda³ nazwy tych
bibliotek jako parametr wywo³ania programu <tt>apt-get</tt>, to APT nie
zapyta³by Ciê czy chcesz kontynuowaæ, gdy¿ automatycznie za³o¿y³by, ¿e chcia³e¶
je zainstalowaæ.
<p>
Oznacza to, ¿e APT tylko wtedy pyta Ciê o potwierdzenie, gdy z powodu
zale¿no¶ci miêdzy pakietami konieczne jest zainstalowanie tak¿e innych
pakietów ni¿ te podane przez Ciebie w linii komend.
<p>
U¿yteczne mog± byæ nastêpuj±ce opcje programu apt-get:

<example>
-h  Pomoc ekranowa do programu
-d  Tylko pobranie pakietu, BEZ instalacji lub rozpakowania archiwum
-f  Próba kontynuowania, nawet je¶li sprawdzenie integralno¶ci koñczy siê niepowodzeniem
-s  Bez akcji. Wykonuje symulacjê polecenia
-y  Zak³ada odpowied¼ `Tak' na wszystkie zapytania i nie pyta o potwierdzenie
-u  Wy¶wietla równie¿ listê uaktualnionych pakietów
</example>

W jednej linii mo¿na podaæ wiele pakietów do instalacji. Pliki pobrane z sieci
s± umieszczane do pó¼niejszej instalacji w katalogu
<tt>/var/cache/apt/archives</tt>.
<p>
Mo¿esz tak¿e w tej samej linii wymieniæ pakiety, które chcesz usun±æ. Po prostu
umie¶æ znak '-' bezpo¶rednio za nazw± pakietu do usuniêcia, tak jak pokazano
poni¿ej:

<example>
[root]@[/] # apt-get install nautilus gnome-panel-
Reading Package Lists... Done
Building Dependency Tree... Done
The following extra packages will be installed:
  bonobo libmedusa0 libnautilus0 
The following packages will be REMOVED:
  gnome-applets gnome-panel gnome-panel-data gnome-session
The following NEW packages will be installed:
  bonobo libmedusa0 libnautilus0 nautilus
0 packages upgraded, 4 newly installed, 4 to remove and 1  not upgraded.
Need to get 8329kB of archives. After unpacking 2594kB will be used.
Do you want to continue? [Y/n] 
</example>

Aby dowiedzieæ siê wiêcej na temat usuwania pakietów, zobacz sekcjê
<ref id="remove">.
<p>
Gdyby¶ w jaki¶ sposób uszkodzi³ zainstalowany pakiet, albo po prostu chcia³
ponownie zainstalowaæ jego najnowsz± dostêpn± wersjê, to mo¿esz u¿yæ opcji
<tt>--reinstall</tt>, jak pokazano poni¿ej:

<example>
[root]@[/] # apt-get --reinstall install gdm
Reading Package Lists... Done
Building Dependency Tree... Done
0 packages upgraded, 0 newly installed, 1 reinstalled, 0 to remove and 1  not upgraded.
Need to get 0B/182kB of archives. After unpacking 0B will be used.
Do you want to continue? [Y/n]
</example>

Do tworzenia tego podrêcznika u¿ywano APT-a w wersji 0.5.3, która w czasie
pisania by³a aktualn± wersj± w `niestabilnym' Debianie (<tt>sid</tt>). Je¶li
zainstalowa³e¶ t± wersjê, to masz do dyspozycji dodatkow± funkcjonalno¶æ:
mo¿esz u¿ywaæ polecenia w formie <tt>apt-get install pakiet/dystrybucja</tt>
do instalowania pakietu ze specyficznej dystrybucji lub w formie <tt>apt-get
install pakiet=wersja</tt>, aby zainstalowaæ ¿±dan± wersjê pakietu. Na
przyk³ad:

<example>
apt-get install nautilus/unstable
</example>

Polecenie zainstaluje pakiet nautilus z `niestabilnej' wersji dystrybucji,
nawet wtedy gdy u¿ywasz wersji `stabilnej'. Dopuszczalnymi warto¶ciami, które
mo¿e przybieraæ `dystrybucja' s± <tt>stable</tt> (`stabilna'), <tt>testing</tt>
(`testowa') i <tt>unstable</tt> (`niestabilna').
<p>
Mo¿esz woleæ u¿yæ prze³±cznika <tt>-t</tt> to wyboru docelowej dystrybucji,
kieruj±c program <prgn>apt-get</prgn> do faworyzowanej dystrybucji w trakcie
rozwi±zywania zale¿no¶ci.
<p>
<em>WA¯NE</em>: `niestabilna' wersja Debiana to wersja, do której w pierwszej
kolejno¶ci trafiaj± najnowsze wersje pakietów <tt>.deb</tt>. W tej dystrybucji
widoczne s± wszystkie zmiany pakietów, od tych drobnych do tych bardzo
powa¿nych, które wp³ywaj± na wiele innych pakietów, a nawet ca³y system. Z
tego powodu ta wersja dystrybucji <em>nie</em> powinna byæ u¿ywana przez
niedo¶wiadczonych u¿ytkowników oraz tych, którzy potrzebuj± stabilnego systemu.
<p>
Wersja `testowa' dystrybucji jest trochê lepsza od `niestabilnej' pod wzglêdem
stabilno¶ci, ale systemy produkcyjne powinny u¿ywaæ wersji `stabilnej'.
</sect>

<sect id="remove">Usuwanie pakietów
<p>
Je¶li nie chcesz ju¿ d³u¿ej u¿ywaæ jakiego¶ pakietu, mo¿esz go usun±æ ze
swojego systemu za pomoc± APT-a. Aby to zrobiæ, po prostu wpisz:
<tt>apt-get remove pakiet</tt>. Na przyk³ad:

<example>
[root]@[/] # apt-get remove gnome-panel
Reading Package Lists... Done
Building Dependency Tree... Done
The following packages will be REMOVED:
  gnome-applets gnome-panel gnome-panel-data gnome-session
0 packages upgraded, 0 newly installed, 4 to remove and 1  not upgraded.
Need to get 0B of archives. After unpacking 14.6MB will be freed.
Do you want to continue? [Y/n] 
</example>

Jak widaæ na powy¿szym przyk³adzie, APT troszczy siê tak¿e o usuniêcie
pakietów, które zale¿± od pakietu, który chcesz odinstalowaæ. Za pomoc±
APT-a nie mo¿na usun±æ pakietu bez usuniêcia tych pakietów, które zale¿± od
niego.
<p>
Uruchamiaj±c program <prgn>apt-get</prgn> w taki sposób jaki pokazano powy¿ej
spowodujemy usuniêcie pakietów, ale je¶li posiada³y one pliki konfiguracyjne,
to pozostan± one nadal w systemie. Aby ca³kowicie usun±æ pakiet uruchom
<prgn>apt-get</prgn> w nastêpuj±cy sposób:

<example>
[root]@[/] # apt-get --purge remove gnome-panel
Reading Package Lists... Done
Building Dependency Tree... Done
The following packages will be REMOVED:
  gnome-applets* gnome-panel* gnome-panel-data* gnome-session* 
0 packages upgraded, 0 newly installed, 4 to remove and 1  not upgraded.
Need to get 0B of archives. After unpacking 14.6MB will be freed.
Do you want to continue? [Y/n] 
</example>

Zwróæ uwagê na znak '*' na koñcu nazwy pakietów. Sygnalizuje on, ¿e pliki
konfiguracyjne ka¿dego z pakietów tak¿e zosta³y usuniête.
<p>
Analogicznie jak dla metody <tt>install</tt>, mo¿esz z opcj± <tt>remove</tt>
u¿yæ symbolu, który odwróci jej znaczenie. W przypadku usuwania pakietów,
je¶li za nazw± pakietu umie¶cisz znak <tt>'+'</tt>, to zostanie on
zainstalowany, a nie usuniêty.

<example>
[root]@[/] # apt-get --purge remove gnome-panel nautilus+
Reading Package Lists... Done
Building Dependency Tree... Done
The following extra packages will be installed:
  bonobo libmedusa0 libnautilus0 nautilus 
The following packages will be REMOVED:
  gnome-applets* gnome-panel* gnome-panel-data* gnome-session* 
The following NEW packages will be installed:
  bonobo libmedusa0 libnautilus0 nautilus 
0 packages upgraded, 4 newly installed, 4 to remove and 1  not upgraded.
Need to get 8329kB of archives. After unpacking 2594kB will be used.
Do you want to continue? [Y/n] 
</example>

Zauwa¿, ¿e program <prgn>apt-get</prgn> wy¶wietla dodatkowe pakiety, które
zostan± zainstalowane (tzn. te pakiety, których instalacja jest potrzebna do
poprawnego dzia³ania pakietów, które chce zainstalowaæ u¿ytkownik), pakiety
które zostan± usuniête i te, które zostan± zainstalowane (ponownie w³±czaj±c
dodatkowe pakiety).
</sect>

<sect id="upgrade">Aktualizacja pakietów
<p>
Mo¿liwo¶æ aktualizacji pakietów to wielkie osi±gniêcie systemu APT. Odbywa
siê to za pomoc± pojedynczej komendy: <tt>apt-get upgrade</tt>. Mo¿esz jej
u¿yæ zarówno do aktualizacji pakietów z tej samej dystrybucji, jak i by
zaktualizowaæ ca³± dystrybucjê, chocia¿ do tego celu jest raczej preferowana
komenda <tt>apt-get dist-upgrade</tt>; zobacz sekcjê <ref id="dist-upgrade">,
je¶li chcesz siê wiêcej dowiedzieæ na ten temat.
<p>
Warto uruchomiæ t± komendê z opcj± <tt>-u</tt>. Spowoduje ona, ¿e APT
wy¶wietli kompletn± listê pakietów, które zostan± zaktualizowane. Bez niej
nie bêdziesz wiedzia³ jakie pakiety aktualizujesz. APT pobierze najnowsze
wersje ka¿dego pakietu i zainstaluje je w odpowiedniej kolejno¶ci. Bardzo
wa¿ne jest uruchamianie <tt>apt-get update</tt> zawsze przed wydaniem
polecenia <tt>apt-get upgrade</tt>. Zobacz sekcjê <ref id="update">, aby
dowiedzieæ siê wiêcej szczegó³ów na jego temat. Spójrz tak¿e na poni¿szy
przyk³ad:

<example>
[root]@[/] # apt-get -u upgrade
Reading Package Lists... Done
Building Dependency Tree... Done
The following packages have been kept back
  cpp gcc lilo 
The following packages will be upgraded
  adduser ae apt autoconf debhelper dpkg-dev esound esound-common ftp indent
  ipchains isapnptools libaudiofile-dev libaudiofile0 libesd0 libesd0-dev
  libgtk1.2 libgtk1.2-dev liblockfile1 libnewt0 liborbit-dev liborbit0
  libstdc++2.10-glibc2.2 libtiff3g libtiff3g-dev modconf orbit procps psmisc 
29 packages upgraded, 0 newly installed, 0 to remove and 3 not upgraded.
Need to get 5055B/5055kB of archives. After unpacking 1161kB will be used.
Do you want to continue? [Y/n] 
</example>

Proces uaktualniania pakietów jest bardzo prosty. Zauwa¿, ¿e w pierwszych
kilku liniach APT informuje, które pakiety zostan± <tt>pozostawione
nietkniête</tt>. Oznacza to, ¿e istniej± nowsze wersje tych pakietów, ale z
jakich¶ powodów nie zostan± zainstalowane. Przyczynami takiego stanu mog± byæ
zepsute zale¿no¶ci (pakiet, od którego zale¿y nie ma dostêpnej wersji do
pobrania) lub nowe zale¿no¶ci (pakiet w ostatniej wersji zale¿y od nowego
pakietu).
<p>
W pierwszym przypadku nie ma prostego rozwi±zania. W drugim wystarczy
uruchomiæ komendê <tt>apt-get install</tt>, aby zainstalowaæ specyficzny
pakiet wraz z zale¿no¶ciami. Jeszcze prostszym rozwi±zaniem jest u¿ycie
komendy <tt>dist-upgrade</tt>. Zobacz sekcjê <ref id="dist-upgrade">, aby
dowiedzieæ siê wiêcej na ten temat.
</sect>

<sect id="dist-upgrade">Aktualizacja do nowego wydania
<p>
Ta zdolno¶æ APT-a pozwala Ci uaktualniæ ca³y system Debian za jednym razem,
zarówno poprzez sieæ Internet jaki i z nowej p³yty CD (nabytej lub pobranej
w postaci obrazu ISO).
<p>
Jest ona równie¿ u¿ywana, gdy ulegaj± zmianie relacje pomiêdzy zainstalowanymi
pakietami. Dziêki poleceniu <tt>apt-get upgrade</tt>, pakiety te pozostan±
w spokoju (<tt>pozostawione nietkniête</tt>).
<p>
Dla przyk³adu, przypu¶æmy ¿e u¿ywamy wydania nr 0 stabilnej wersji Debiana
i kupujemy p³ytê CD z wydaniem nr 3. Mo¿emy u¿yæ APT-a do aktualizacji
systemu z tej nowej p³yty CD. W tym celu najpierw u¿yj programu
<prgn>apt-cdrom</prgn> (wiêcej szczegó³ów w sekcji <ref id="cdrom">), aby dodaæ
t± p³ytê do pliku <tt>/etc/apt/sources.list</tt>, a nastêpnie uruchom program
<tt>apt-get dist-upgrade</tt>.
<p>
Jest wa¿n± rzecz± zauwa¿enie, ¿e APT zawsze szuka najnowszych wersji pakietów.
Dlatego, je¶li Twój plik <tt>/etc/apt/sources.list</tt> zawiera listê archiwów
z nowszymi wersjami pakietów ni¿ na p³ycie CD, to APT nie pobierze ich z p³yty,
lecz w³a¶nie stamt±d.
<p>
W przyk³adzie pokazanym w sekcji <ref id="upgrade"> widzieli¶my, ¿e czê¶æ
pakietów zosta³a <tt>pozostawiona nietkniêta</tt>. Teraz mo¿emy rozwi±zaæ ten
problem w³a¶nie za pomoc± metody <tt>dist-upgrade</tt>:

<example>
[root]@[/] # apt-get -u dist-upgrade
Reading Package Lists... Done
Building Dependency Tree... Done
Calculating Upgrade... Done
The following NEW packages will be installed:
  cpp-2.95 cron exim gcc-2.95 libident libopenldap-runtime libopenldap1
  libpcre2 logrotate mailx 
The following packages have been kept back
  lilo 
The following packages will be upgraded
  adduser ae apt autoconf cpp debhelper dpkg-dev esound esound-common ftp gcc
  indent ipchains isapnptools libaudiofile-dev libaudiofile0 libesd0
  libesd0-dev libgtk1.2 libgtk1.2-dev liblockfile1 libnewt0 liborbit-dev
  liborbit0 libstdc++2.10-glibc2.2 libtiff3g libtiff3g-dev modconf orbit
  procps psmisc 
31 packages upgraded, 10 newly installed, 0 to remove and 1 not upgraded.
Need to get 0B/7098kB of archives. After unpacking 3118kB will be used.
Do you want to continue? [Y/n]
</example>

Zauwa¿ teraz, ¿e pakiety zostan± zaktualizowane i ¿e zostan± te¿ zainstalowane
nowe pakiety (nowe zale¿no¶ci tych pakietów). Zauwa¿ równie¿, i¿ lilo wci±¿
<tt>pozostaje nietkniête</tt>. Przyczyn± tego problemu jest zapewne co¶ wiêcej
ni¿ nowa zale¿no¶æ. Odnajdziemy j± uruchamiaj±c:

<example>
[root]@[/] # apt-get -u install lilo
Reading Package Lists... Done
Building Dependency Tree... Done
The following extra packages will be installed:
  cron debconf exim libident libopenldap-runtime libopenldap1 libpcre2
  logrotate mailx 
The following packages will be REMOVED:
  debconf-tiny 
The following NEW packages will be installed:
  cron debconf exim libident libopenldap-runtime libopenldap1 libpcre2
  logrotate mailx 
The following packages will be upgraded
  lilo 
1 packages upgraded, 9 newly installed, 1 to remove and 31 not upgraded.
Need to get 225kB/1179kB of archives. After unpacking 2659kB will be used.
Do you want to continue? [Y/n]
</example>

Jak widaæ powy¿ej, lilo ma nowy konflikt z pakietem
<package>debconf-tiny</package>, który uniemo¿liwia jego instalacjê (lub
uaktualnienienie) bez usuniêcia pakietu <package>debconf-tiny</package>.
<p>
Aby przekonaæ siê, co by³o przyczyn± pozostawienia pakietu nietkniêtym lub
usuniêcia pakietu mo¿emy u¿yæ poni¿szego polecenia:

<example>
# apt-get -o Debug::pkgProblemResolver=yes dist-upgrade
Reading Package Lists... Done
Building Dependency Tree... Done
Calculating Upgrade... Starting
Starting 2
Investigating python1.5
Package python1.5 has broken dep on python1.5-base
  Considering python1.5-base 0 as a solution to python1.5 0
  Holding Back python1.5 rather than change python1.5-base
Investigating python1.5-dev
Package python1.5-dev has broken dep on python1.5
  Considering python1.5 0 as a solution to python1.5-dev 0
  Holding Back python1.5-dev rather than change python1.5
 Try to Re-Instate python1.5-dev
Done
Done
The following packages have been kept back
  gs python1.5-dev 
0 packages upgraded, 0 newly installed, 0 to remove and 2  not upgraded.
</example>

W ten sposób mo¿na ³atwo sprawdziæ, ¿e pakiet python1.5-dev nie mo¿e zostaæ
zainstalowany z powodu niespe³nienia zale¿no¶ci przez pakiet python1.5.
</sect>

<sect id="clean">Usuwanie niepotrzebnych plików z pakietami: apt-get clean i
autoclean
<p>
W czasie instalowania pakietu APT pobiera niezbêdne pliki z serwera wskazanego
w pliku <file>/etc/apt/sources.list</file>, umieszcza je w lokalnym
repozytorium (<file>/var/cache/apt/archives/</file>), a nastêpnie instaluje w
sposób opisany w sekcji <ref id="install">.
<p>
Z czasem lokalne repozytorium mo¿e siê rozrosn±æ i zaj±æ du¿± ilo¶æ przestrzeni
dysku. Na szczê¶cie APT jest wyposa¿ony w narzêdzia, które umo¿liwiaj±
zarz±dzanie lokalnym repozytorium. Nale¿± do nich metody <tt>clean</tt> i
<tt>autoclean</tt> programu <prgn>apt-get</prgn>.
<p>
<prgn>apt-get clean</prgn> usuwa wszystkie pliki z wyj±tkiem plików
"blokuj±cych" (ang. lock files) z katalogów 
<file>/var/cache/apt/archives/</file> i
<file>/var/cache/apt/archives/partial/</file>. Jednak¿e, je¶li bêdziesz chcia³
ponownie zainstalowaæ pakiet, to APT jeszcze raz pobierze niezbêdne pliki.
<p>
<prgn>apt-get autoclean</prgn> usuwa tylko te pliki, które nie bêd± mog³y byæ
pó¼niej pobrane z Sieci.
<p>
Poni¿szy przyk³ad pokazuje w jaki sposób dzia³a metoda <tt>autoclean</tt>:

<example>
# ls /var/cache/apt/archives/logrotate* /var/cache/apt/archives/gpm*
logrotate_3.5.9-7_i386.deb
logrotate_3.5.9-8_i386.deb
gpm_1.19.6-11_i386.deb
</example>

W katalogu <file>/var/cache/apt/archives</file> znajduj± siê dwa pliki z
pakietem <package>logrotate</package> i jeden z pakietem
<package>gpm</package>.

<example>
# apt-show-versions -p logrotate
logrotate/stable uptodate 3.5.9-8
# apt-show-versions -p gpm
gpm/stable upgradeable from 1.19.6-11 to 1.19.6-12
</example>

Program <prgn>apt-show-versions</prgn> informuje, ¿e plik
<file>logrotate_3.5.9-8_i386.deb</file> zawiera najnowsz± wersjê pakietu
<package>logrotate</package>, a zatem plik
<file>logrotate_3.5.9-7_i386.deb</file> jest ju¿ bezu¿yteczny. Tak¿e plik
<file>gpm_1.19.6-11_i386.deb</file> nie bêdzie d³u¿ej potrzebny, gdy¿ dostêpna
jest ju¿ nowsza wersja pakietu <package>gpm</package>.

<example>
# apt-get autoclean
Reading Package Lists... Done
Building Dependency Tree... Done
Del gpm 1.19.6-11 [145kB]
Del logrotate 3.5.9-7 [26.5kB]
</example>

Jak widaæ powy¿ej, <tt>apt-get autoclean</tt> usuwa tylko stare pliki.
Wiêcej informacji na temat programu <prgn>apt-show-versions</prgn> mo¿na
znale¼æ w sekcji <ref id="apt-show-versions">.
</sect>

<sect id="dselect-upgrade">U¿ywanie APT-a razem z programem dselect
<p>
<prgn>dselect</prgn> jest programem, który pomaga u¿ytkownikom Debiana
wybraæ pakiety, które chc± zainstalowaæ. Jest uwa¿any za nieco skomplikowany
i do¶æ nieciekawy, ale je¶li nabierzesz wprawy, to bêdziesz siê swobodnie
pos³ugiwa³ jego konsolowym interfejsem.
<p>
Jedn± z cech programu dselect jest to, ¿e informuje o tym, które jeszcze
pakiety Debiana s± "zalecane" i "proponowane" do zainstalowania. Aby
u¿yæ tego programu, jako root uruchom <tt>`dselect'</tt>. Wybierz 'apt'
jako metodê dostêpu. Nie jest to w rzeczywisto¶ci niezbêdne, ale je¶li
nie u¿ywasz CD-ROM-u i chcesz pobieraæ pakiety z Internetu, to jest to
najlepszy sposób u¿ywania dselecta.
<p>
Aby jeszcze lepiej zrozumieæ w jaki sposób u¿ywaæ dselecta, przeczytaj
dokumentacje do niego, któr± mo¿na znale¼æ na stronie
<url id="http://www.debian.org/doc/ddp" name="http://www.debian.org/doc/ddp">.
<p>
Po wybraniu pakietów przy pomocy dselecta, u¿yj:

<example>
apt-get -u dselect-upgrade
</example>

tak, jak to pokazano na przyk³adzie poni¿ej:

<example>
[root]@[/] # apt-get -u dselect-upgrade
Reading Package Lists... Done
Building Dependency Tree... Done
The following packages will be REMOVED:
  lbxproxy 
The following NEW packages will be installed:
  bonobo console-tools-libs cpp-3.0 enscript expat fingerd gcc-3.0
  gcc-3.0-base icepref klogd libdigest-md5-perl libfnlib0 libft-perl
  libgc5-dev libgcc300 libhtml-clean-perl libltdl0-dev libsasl-modules
  libstdc++3.0 metamail nethack proftpd-doc psfontmgr python-newt talk tidy
  util-linux-locales vacation xbill xplanet-images 
The following packages will be upgraded
  debian-policy 
1 packages upgraded, 30 newly installed, 1 to remove and 0  not upgraded.
Need to get 7140kB of archives. After unpacking 16.3MB will be used.
Do you want to continue? [Y/n]
</example>

Porównaj to z tym, co widzisz, gdy uruchamiasz <tt>apt-get dist-upgrade</tt>
w tym samym systemie.

<example>
[root]@[/] # apt-get -u dist-upgrade
Reading Package Lists... Done
Building Dependency Tree... Done
Calculating Upgrade... Done
The following packages will be upgraded
  debian-policy 
1 packages upgraded, 0 newly installed, 0 to remove and 0  not upgraded.
Need to get 421kB of archives. After unpacking 25.6kB will be freed.
Do you want to continue? [Y/n]
</example>

Zwróæ uwagê, i¿ wiele z powy¿szych pakietów bêdzie instalowana, poniewa¿ s±
"zalecane" lub "proponowane" przez inne. Pozosta³e pakiety bêd± instalowane
lub usuniête (np. w przypadku pakietu lbxproxy) zgodnie z naszym wyborem,
którego dokonali¶my przy u¿yciu dselecta. Dselect mo¿e byæ naprawdê potê¿nym
narzêdziem, gdy jest u¿ywany razem z APT-em.
</sect>

<sect id="default-version">Jak utrzymywaæ "wymieszany" system
<p>
Ludzie czêsto u¿ywaj± dystrybucji testowej, gdy¿ jest ona stabilniejsza od
dystrybucji niestabilnej i aktualniejsza od dystrybucji stabilnej. Jednak¿e,
u¿ytkownicy, którzy chcieliby u¿ywaæ najnowszych wersji jakich¶ pakietów, ale
boj± siê uaktualniæ swoich systemów do wersji niestabilnej mog± dokonaæ
"wymieszania" pakietów z dystrybucji testowej i niestabilnej. Analogicznie,
bardziej konserwatywni u¿ytkownicy mog± w swoich systemach "wymieszaæ" pakiety
z dystrybucji stabilnej i testowej.
<p>
Aby tego dokonaæ, umie¶æ nastêpuj±c± liniê w pliku
<file>/etc/apt/apt.conf</file>:

<example>
APT::Default-Release "testing";
</example>

<p>
Odt±d, gdy bêdziesz chcia³ zainstalowaæ pakiety z dystrybucji niestabilnej, to
po prostu u¿yjesz prze³±cznika <tt>-t</tt>:

<example>
# apt-get -t unstable install <var>nazwa_pakietu</var>
</example>

<p>
Nie zapomnij o tym, ¿e aby u¿ywaæ pakietów z której¶ wersji Debiana, musisz
do pliku <file>/etc/apt/sources.list</file> dopisaæ liniê wskazuj±c± APT-owi
¼ród³o paczek. Dla naszego przyk³adu oprócz ¼ród³a z pakietami dystrybucji
<tt>stabilnej</tt> bêdziemy potrzebowali równie¿ linii okre¶laj±cej ¼ród³o
pakietów dla dystrybucji <tt>niestabilnej</tt>.
</sect>

<sect id="apt-show-versions">Jak uaktualniaæ pakiety do nowszej wersji z
okre¶lonej wersji Debiana
<p>
Program <prgn>apt-show-versions</prgn> umo¿liwia u¿ytkownikom "wymieszanych"
dystrybucji bezpieczne uaktualnienie swoich systemów bez ryzyka obni¿enia ich
dotychczasowej stabilno¶ci. Dla przyk³adu, istnieje mo¿liwo¶æ uaktualnienia do
nowszej wersji Twoich niestabilnych pakietów przez wydanie komendy:
<example>
# apt-get install `apt-show-versions -u -b | grep unstable`
</example>
</sect>

<sect id="pin">Jak zachowaæ okre¶lone wersje zainstalowanych pakietów
<p>
Mo¿esz mieæ okazjê modyfikowaæ co¶ w pakiecie i nie mieæ czasu lub chêci, aby
dokonywaæ tych zmian w nowych wersjach programów. Mo¿esz te¿ dla przyk³adu
uaktualniæ swoj± dystrybucjê Debiana do wersji 3.0, ale chcieæ wci±¿ u¿ywaæ
pewnych wersji pakietów z Debiana 2.2. Mo¿esz "przyszpiliæ" wersjê pakietu,
któr± zainstalowa³e¶ i która nie bêdzie uaktualniona.
<p>
U¿ywanie tego sposobu jest proste. Po prostu musisz wyedytowaæ plik
<tt>/etc/apt/preferences</tt>.
<p>
Jego format jest tak¿e prosty:
<example>
Package: &lt;pakiet&gt;
Pin: &lt;definicja "przyszpilenia"&gt;
Pin-Priority: &lt;priorytet "przyszpilenia"&gt;
</example>
<p>
Na przyk³ad, aby zachowaæ pakiet <package>sylpheed</package>, który
zmodyfikowa³em, po to by móc u¿ywaæ opcji "reply-to-list" w wersji 0.4.99,
doda³em:

<example>
Package: sylpheed
Pin: version 0.4.99*
</example>

Zauwa¿, ¿e u¿y³em znaku <tt>*</tt> (gwiazdka). To jest tzw. "znak zastêpczy",
który mówi, ¿e chcê "przyszpiliæ" wszystkie wersje pakietów rozpoczynaj±ce siê
od numeru 0.4.99. Tak jest z powodu wersji tych pakietów Debiana i "debianowych
korekt" i nie chcê unikn±æ instalacji tych korekt. Zatem, dla przyk³adu, wersje
0.4.99-1 i 0.4.99-10 zostan± zainstalowane, gdy tylko bêd± dostêpne. Zwróæ
uwagê, ¿e je¶li zmodyfikowa³e¶ pakiet, nie bêdziesz chcia³ robiæ tych rzeczy w
ten sposób.
<p>
Pole <tt>Pin-Priority</tt> jest opcjonalne; je¶li nie zosta³o okre¶lone, to
domy¶lnie przyjmuje warto¶æ 989.
<p>
Przyjrzyjmy siê jak dzia³a priorytet "przyszpilenia". Priorytet mniejszy ni¿ 0
wskazuje, ¿e pakiet nigdy nie powinien byæ zainstalowany. Priorytety o
warto¶ciach od 0 do 100 wskazuj± pakiety, które nie s± zainstalowane i które
nie maj± dostêpnych wersji. Nie bêd± one braæ udzia³u w procesie wyboru wersji.
Priorytet równy 100 jest priorytetem przypisanym do zainstalowanego pakietu,
aby zainstalowana wersja pakietu zosta³a zast±piona przez inn± wersjê, wersja
ta musi mieæ priorytet wiêkszy ni¿ 100.
<p>
Priorytety powy¿ej 100 wskazuj±, ¿e pakiet powinien byæ zainstalowany. Zwykle
zainstalowana wersja pakietu jest zmieniana tylko w czasie aktualizacji do
nowszej wersji. Priorytety o warto¶ciach pomiêdzy 100 i 1000 (w³±cznie)
wskazuj± te typowe zachowanie. Pakiet z takim priorytetem nie zostanie
umniejszony do dostêpnej wersji o mniejszym numerze. Na przyk³ad je¶li mam
zainstalowan± wersjê 0.5.3 pakietu sylpheed i zdefiniujê "przyszpilenie" wersji
0.4.99 tego pakietu z priorytetem 999, to wersja 0.4.99 <em>nie</em> zostanie
zainstalowana, aby spe³niæ "przyszpilenie". Aby uczyniæ pakiet "zmniejszonym" i
spe³niæ "przyszpilenie" musisz ustawiæ priorytet na warto¶æ wiêksz± ni¿ 1000.
<p>
Przyszpilenie mo¿na okre¶liæ na <tt>wersji</tt>, <tt>wydaniu</tt> lub
<tt>pochodzeniu</tt> pakietu.
<p>
Przyszpilenie <tt>wersji</tt>, tak jak widzieli¶my, wspiera dos³owne numery
wersji, jak i znaki zastêpcze w celu okre¶lenia kilku wersji jednocze¶nie.
<!-- what's available?  standard shell globs?  ?*[]   or more? -->
<p>
Opcja <tt>wydanie</tt> zale¿y od pliku Release z repozytorium APT-a lub z
p³yty CD. Opcja ta mo¿e nie byæ u¿yteczna zawsze je¶li u¿ywasz repozytoriów
pakietów, które nie dostarczaj± tego pliku. Mo¿esz zobaczyæ zawarto¶æ plików
Release, które masz w pliku <tt>/var/lib/apt/lists/</tt>. Parametrami dla
wydania s± <tt>a</tt> (archiwum), <tt>c</tt> (komponenty), <tt>v</tt> (wersja),
<tt>o</tt> (pochodzenie) and <tt>l</tt> (etykieta).
<p>
Przyk³ad:

<example>
Package: *
Pin: release v=2.2*,a=stable,c=main,o=Debian,l=Debian
Pin-Priority: 1001
</example>

W tym przyk³adzie wybrali¶my wersjê Debiana 2.2* (któr± mo¿e byæ dla przyk³adu
korekta 2.2r2 albo 2.2r3 - okre¶la ona tzw. "punkt wydania", który zwykle
zawiera nowe poprawki bezpieczeñstwa i inne bardzo wa¿ne uaktualnienia),
repozytorium <tt>stable</tt>, sekcjê <tt>main</tt> (w przeciwieñstwie do sekcji
<tt>contrib</tt> lub <tt>non-free</tt>) oraz pochodzenie i etykietê Debian.
Pochodzenie (o=) definiuje kto stworzy³ plik Release, a etykieta (l=) - nazwê
dystrybucji, na przyk³ad Debian dla Debiana, Progeny dla Progeny. Oto
przyk³adowy plik Release:

<example>
$ cat /var/lib/apt/lists/ftp.debian.org.br_debian_dists_potato_main_binary-i386_Release
Archive: stable
Version: 2.2r3
Component: main
Origin: Debian
Label: Debian
Architecture: i386
</example>
</sect>
</chapt>

<chapt id="helpers">Bardzo u¿yteczni pomocnicy
<sect id="equivs">Jak zainstalowaæ lokalnie skompilowane pakiety: pakiet equivs
<p>
Czasami u¿ytkownicy Debiana chc± u¿ywaæ specyficznej wersji jakiego¶ programu,
który nie posiada pakietu <tt>.deb</tt> i jest dostêpny tylko w postaci kodu
¼ród³owego. Instalacja takich programów mo¿e jednak spowodowaæ problemy w
dzia³aniu systemu pakietów. Wyobra¼my sobie na przyk³ad, ¿e chcemy skompilowaæ
now± wersjê naszego serwera pocztowego. Wszystko posz³o ¶wietnie, tylko ¿e
zapomnieli¶my o ma³ym szczególe: w Debianie wiele pakietów zale¿y od agenta
pocztowego MTA (ang. Mail Transport Agent), a system pakietów niestety nic nie
wie o programie, który sami skompilowali¶my ze ¼róde³ i zainstalowali¶my!
<p>
W takich w³a¶nie przypadkach z pomoc± przychodzi nam pakiet
<package>equivs</package>. Aby móc z niego skorzystaæ, nale¿y zainstalowaæ
pakiet o takiej samej nazwie. Có¿ on takiego robi? Tworzy pusty pakiet, który
potrafi w pe³ni spe³niæ zale¿no¶ci i sprawia, ¿e system pakietów jest
przekonany o tym, i¿ zale¿no¶ci s± spe³nione.
<p>
Zanim poka¿emy jak u¿ywaæ tego pakietu, nale¿y jeszcze przypomnieæ, ¿e
istniej± bezpieczniejsze sposoby kompilacji programu, który posiada ju¿ pakiet
Debiana i ¿e nie nale¿y u¿ywaæ pakietu <package>equivs</package> do
zastêpowania zale¿no¶ci, gdy nie wiemy jak to zrobiæ. Wiêcej informacji na ten
temat mo¿na znale¼æ w sekcji <ref id="sourcehandling">.
<p>
Kontynuujmy nasz przyk³ad z agentem pocztowym MTA. Powiedzmy, ¿e w³a¶nie
skompilowa³e¶ i zainstalowa³e¶ now± wersjê serwera <prgn>postfix</prgn>, a
teraz zamierzasz zainstalowaæ pakiet <package>mutt</package>. Nagle okazuje
siê, ¿e <package>mutt</package> chce zainstalowaæ innego agenta MTA, a ty ju¿
masz przecie¿ swój.
<p>
Przejd¼ wtedy do jakiego¶ katalogu (np. do <file>/tmp</file>) i wydaj komendê:

<example>
# equivs-control <var>nazwa</var>
</example>

gdzie <var>nazwa</var> to nazwa pliku kontrolnego, który chcesz stworzyæ.
Plik ten bêdzie mia³ nastêpuj±c± zawarto¶æ:

<example>
Section: misc
Priority: optional
Standards-Version: 3.0.1

Package: &lt;enter package name; defaults to equivs-dummy&gt;
Version: &lt;enter version here; defaults to 1.0&gt;
Maintainer: &lt;your name and email address; defaults to username&gt;
Pre-Depends: &lt;packages&gt;
Depends: &lt;packages&gt;
Recommends: &lt;packages&gt;
Suggests: &lt;package&gt;
Provides: &lt;(virtual)package&gt;
Architecture: all
Copyright: &lt;copyright file; defaults to GPL2&gt;
Changelog: &lt;changelog file; defaults to a generic changelog&gt;
Readme: &lt;README.Debian file; defaults to a generic one&gt;
Extra-Files: &lt;additional files for the doc directory, commaseperated&gt;
Description: &lt;short description; defaults to some wise words&gt;
 long description and info
 .
 second paragraph
</example>

Teraz musimy tak go zmodyfikowaæ, ¿eby robi³ to, co chcemy. Spójrzmy na format
pól i ich opisy. Nie ma oczywi¶cie potrzeby obja¶niaæ ka¿dego z nich. Zróbmy
tylko to, co jest niezbêdne: 

<example>
Section: misc
Priority: optional
Standards-Version: 3.0.1

Package: mta-local
Provides: mail-transport-agent
</example>

Tak, to naprawdê wszystko, czego nam potrzeba! Pakiet <package>mutt</package>
zale¿y od pakietu wirtualnego <tt>mail-transport-agent</tt>, którego
dostarczaj± wszystkie agenty MTA. Mog³em te¿ nazwaæ pakiet po prostu
<tt>mail-transport-agent</tt>, ale wolê u¿ywaæ schematu pakietów wirtualnych,
który wykorzystuje pole `Provides'.
<p>
Teraz tylko musimy zbudowaæ pakiet:

<example>
# equivs-build <var>nazwa</var>
dh_testdir
touch build-stamp
dh_testdir
dh_testroot
dh_clean -k
# Add here commands to install the package into debian/tmp.
touch install-stamp
dh_testdir
dh_testroot
dh_installdocs
dh_installchangelogs
dh_compress
dh_fixperms
dh_installdeb
dh_gencontrol
dh_md5sums
dh_builddeb
dpkg-deb: building package `<var>nazwa</var>' in `../<var>nazwa</var>_1.0_all.deb'.

The package has been created.
Attention, the package has been created in the current directory,
</example>

i zainstalowaæ powsta³y pakiet <tt>.deb</tt>.
<p>
Jak widaæ, pakietu <package>equivs</package> mo¿na u¿ywaæ na ró¿ne sposoby.
Za jego pomoc± mo¿na nawet stworzyæ pakiet <package>moje-ulubione</package>,
który zale¿y od programów, które zwykle instalujesz. To jak go wykorzystasz
zale¿y tylko od Twojej wyobra¼ni, ale b±d¼ ostro¿ny!
<p>
Na koniec jeszcze jedna wa¿na uwaga: przyk³ady plików kontrolnych znajduj± siê
w katalogu <file>/usr/share/doc/equivs/examples</file>. Przyjrzyj siê im.
</sect>

<sect id="localepurge">Usuwanie nieu¿ywanych plików lokalizacyjnych: pakiet
localpurge
<p>
Wielu u¿ytkowników Debiana korzysta tylko z jednych plików lokalizacyjnych.
Dla przyk³adu, brazylijscy u¿ytkownicy Debiana przez ca³y czas korzystaj± z 
plików <tt>pt_BR</tt> i do niczego im nie s± potrzebne pliki <tt>es</tt>.
<p>
Pakiet <package>localepurge</package> jest bardzo u¿ytecznym narzêdziem dla
takich w³a¶nie u¿ytkowników. Pozwala on zaoszczêdziæ wiele miejsca na dysku,
dziêki zachowaniu tylko tych plików lokalizacyjnych, których naprawdê u¿ywasz.
Aby go zainstalowaæ, po prostu wydaj komendê
<tt>apt-get install localepurge</tt>.
<p>
Pakiet ten jest bardzo ³atwy w konfiguracji, debconf przeprowadzi Ciê przez
ten proces krok po kroku. B±d¼ jednak bardzo ostro¿ny w czasie odpowiadania na
zadawane Ci pytania, gdy¿ z³a odpowied¼ mo¿e usun±æ wszystkie pliki
lokalizacyjne, nawet te, których u¿ywasz! Jedynym sposobem na odzyskanie ich
wtedy jest powtórna instalacja wszystkich pakietów, które dostarczaj± tych
plików.
</sect>

<sect id="helper-show-versions">Jak siê dowiedzieæ, które pakiety mog± byæ
uaktualnione do nowszej wersji
<p>
Programem, który potrafi wskazaæ pakiety mog±ce byæ uaktualnione do nowszej
wersji oraz dostarczyæ wielu innych u¿ytecznych informacji jest program
<prgn>apt-show-versions</prgn>. Do wy¶wietlenia listy pakietów, które mog± byæ
uaktualnione s³u¿y opcja <tt>-u</tt>:

<example>
$ apt-show-versions -u    
libeel0/unstable upgradeable from 1.0.2-5 to 1.0.2-7
libeel-data/unstable upgradeable from 1.0.2-5 to 1.0.2-7
</example>
</sect>

<chapt id="search">Pobieranie informacji o pakietach
<p>
Jest wiele programów-nak³adek dla systemu APT, które bardzo u³atwiaj±
pobieranie listy pakietów dostêpnych do instalacji i ju¿ zainstalowanych,
pozwalaj± dowiedzieæ siê do jakiej sekcji nale¿y pakiet, jaki jest jego
priorytet, jaki ma opis, itd.
<p>
Ale... naszym celem jest nauczyæ siê pos³ugiwania siê czystym APT-em.
Zatem w jaki sposób dowiedzieæ siê nazwy pakietu, który chcemy zainstalowaæ?
<p>
Mamy wiele ¶rodków do tego zadania. Zacznijmy od programu <tt>apt-cache</tt>.
Jest on u¿ywany przez system APT do zarz±dzania jego baz± danych. Przyjrzymy
siê krótko jego bardziej praktycznym zastosowaniom.

<sect id="cache">Odnajdywanie nazw pakietów
<p>
Dla przyk³adu przypu¶æmy, ¿e chcemy powspominaæ o starych, dobrych czasach
Atari 2600. Najpierw chcemy u¿yæ APT-a do instalacji emulatora Atari, a
nastêpnie do pobrania kilku gier dla niego. Mo¿emy to zrobiæ nastêpuj±co:

<example>
[root]@[/] # apt-cache search atari
atari-fdisk-cross - Partition editor for Atari (running on non-Atari)
circuslinux - The clowns are trying to pop balloons to score points!
madbomber - A Kaboom! clone
tcs - Character set translator.
atari800 - Atari emulator for svgalib/X/curses
stella - Atari 2600 Emulator for X windows
xmess-x - X binaries for Multi-Emulator Super System
</example>

Znale¼li¶my kilka pakietów powi±zanych z tym, czego szukamy, wraz z ich
krótkimi opisami. Aby uzyskaæ wiêcej informacji na temat okre¶lonego
pakietu, mo¿esz wtedy u¿yæ:

<example>
[root]@[/] # apt-cache show stella  
Package: stella
Priority: extra
Section: non-free/otherosfs
Installed-Size: 830
Maintainer: Tom Lear &lt;tom@trap.mtview.ca.us&gt;
Architecture: i386
Version: 1.1-2
Depends: libc6 (>= 2.1), libstdc++2.10, xlib6g (>= 3.3.5-1)
Filename: dists/potato/non-free/binary-i386/otherosfs/stella_1.1-2.deb
Size: 483430
MD5sum: 11b3e86a41a60fa1c4b334dd96c1d4b5
Description: Atari 2600 Emulator for X windows
 Stella is a portable emulator of the old Atari 2600 video-game console
 written in C++.  You can play most Atari 2600 games with it.  The latest
 news, code and binaries for Stella can be found at:
 http://www4.ncsu.edu/~bwmott/2600
</example>

Otrzymali¶my w wyniku wiele szczegó³ów na temat pakietu, który chcemy
(lub który nie chcemy) zainstalowaæ, razem z jego pe³nym opisem. Je¶li
pakiet jest ju¿ zainstalowany w systemie i jest tam jego nowsza wersja, 
to zobaczysz informacje na temat obu wersji. Na przyk³ad:

<example>
[root]@[/] # apt-cache show lilo
Package: lilo
Priority: important
Section: base
Installed-Size: 271
Maintainer: Russell Coker &lt;russell@coker.com.au&gt;
Architecture: i386
Version: 1:21.7-3
Depends: libc6 (>= 2.2.1-2), debconf (>=0.2.26), logrotate
Suggests: lilo-doc
Conflicts: manpages (<<1.29-3)
Filename: pool/main/l/lilo/lilo_21.7-3_i386.deb
Size: 143052
MD5sum: 63fe29b5317fe34ed8ec3ae955f8270e
Description: LInux LOader - The Classic OS loader can load Linux and others
 This Package contains lilo (the installer) and boot-record-images to
 install Linux, OS/2, DOS and generic Boot Sectors of other OSes.
 .
 You can use Lilo to manage your Master Boot Record (with a simple text screen)
 or call Lilo from other Boot-Loaders to jump-start the Linux kernel.

Package: lilo
Status: install ok installed
Priority: important
Section: base
Installed-Size: 190
Maintainer: Vincent Renardias &lt;vincent@debian.org&gt;
Version: 1:21.4.3-2
Depends: libc6 (>= 2.1.2)
Recommends: mbr
Suggests: lilo-doc
Description: LInux LOader - The Classic OS loader can load Linux and others
 This Package contains lilo (the installer) and boot-record-images to
 install Linux, OS/2, DOS and generic Boot Sectors of other OSes.
 .
 You can use Lilo to manage your Master Boot Record (with a simple text screen)
 or call Lilo from other Boot-Loaders to jump-start the Linux kernel.
</example>

Zauwa¿, ¿e pierwszy z pakietów na li¶cie jest pakietem dostêpnym, a drugi ju¿
zainstalowanym. Aby otrzymaæ wiêcej ogólnych informacji na temat pakietu,
mo¿esz u¿yæ:

<example>
[root]@[/] # apt-cache showpkg penguin-command
Package: penguin-command
Versions: 
1.4.5-1(/var/lib/apt/lists/download.sourceforge.net_debian_dists_unstable_main_binary-i386_Packages)(/var/lib/dpkg/status)

Reverse Depends: 
Dependencies: 
1.4.5-1 - libc6 (2 2.2.1-2) libpng2 (0 (null)) libsdl-mixer1.1 (2 1.1.0) libsdl1.1 (0 (null)) zlib1g (2 1:1.1.3) 
Provides: 
1.4.5-1 - 
Reverse Provides: 
</example>

I aby dowiedzieæ siê od jakich pakietów on zale¿y:

<example>
[root]@[/] # apt-cache depends penguin-command
penguin-command
  Depends: libc6
  Depends: libpng2
  Depends: libsdl-mixer1.1
  Depends: libsdl1.1
  Depends: zlib1g
</example>

Podsumowuj±c, mamy wiele sposobów, których mo¿emy u¿yæ, aby dowiedzieæ siê
nazwy pakietu, który chcemy zainstalowaæ.
</sect>

<sect id="dpkg-search">U¿ywanie programu dpkg do dowiadywania siê nazwy
pakietów
<p>
Jednym ze sposobów dowiedzenia siê nazwy pakietu jest poznanie nazwy wa¿nego
pliku umieszczonego wewn±trz pakietu. Dla przyk³adu, aby znale¼æ pakiet,
który jest dostarczany ze szczególnym plikiem nag³ówkowym <tt>".h"</tt>
potrzebnym do jego kompilacji mo¿esz uruchomiæ:

<example>
[root]@[/] # dpkg -S stdio.h
libc6-dev: /usr/include/stdio.h
libc6-dev: /usr/include/bits/stdio.h
perl: /usr/lib/perl/5.6.0/CORE/nostdio.h
</example>

lub:

<example>
[root]@[/] # dpkg -S /usr/include/stdio.h
libc6-dev: /usr/include/stdio.h
</example>

Aby dowiedzieæ siê nazwy u¿ytecznych pakietów zainstalowanych w Twoim systemie,
na przyk³ad, gdy zamierzasz doprowadziæ do porz±dku Twój twardy dysk, mo¿esz
u¿yæ:

<example>
[root]@[/] # dpkg -l | grep mozilla
ii  mozilla-browse 0.9.6-7        Mozilla Web Browser
</example>

Problemem zwi±zanym z t± komend± mo¿e byæ "obciêcie" przez ni± nazwy pakietu.
W powy¿szym przyk³adzie pe³n± nazw± pakietu jest <tt>mozilla-browser</tt>.
Aby poradziæ sobie z tym, mo¿esz u¿yæ zmiennej ¶rodowiskowej <tt>COLUMNS</tt> w
nastêpuj±cy sposób:

<example>
[kov]@[couve] $ COLUMNS=132 dpkg -l | grep mozilla
ii  mozilla-browser             0.9.6-7                     Mozilla Web Browser - core and browser
</example>

lub mo¿esz u¿yæ opisu pakietu lub jego czê¶ci tak, jak pokazano poni¿ej:

<example>
[root]@[/] # apt-cache search "Mozilla Web Browser"
mozilla-browser - Mozilla Web Browser
</example>
</sect>

<sect id="auto-apt">Jak zainstalowaæ pakiety "na ¿±danie"
<p>
Kompilujesz program, a¿ tu nagle bêc! Wyst±pi³ b³±d, poniewa¿ potrzebny jest
plik nag³ówkowy <tt>.h</tt>, którego nie masz. Program <prgn>auto-apt</prgn>
mo¿e Ciê uchroniæ od takich sytuacji. Pyta Ciê on czy zainstalowaæ pakiety,
które s± potrzebne, zatrzymuj±c dany proces i kontynuuj±c go, gdy pakiet jest
instalowany.
<p>
Wszystko, co musisz zrobiæ, to uruchomiæ:

<example>
auto-apt run komenda
</example>

Gdzie `komenda' jest komend±, której mo¿e potrzebowaæ jaki¶ niedostêpny plik.
Na przyk³ad:

<example>
auto-apt run ./configure
</example>

Polecenie zapyta Ciê czy zainstalowaæ potrzebne pakiety i automatycznie
wywo³a program apt-get. Je¶li u¿ywasz X Window, graficzny interfejs zast±pi
domy¶lny interfejs tekstowy.
<p>
Auto-apt u¿ywa baz danych, które musz± byæ uaktualniane, aby program dzia³a³
skutecznie. Jest to osi±gane poprzez wywo³ywanie poleceñ <tt>auto-apt
update</tt>, <tt>auto-apt updatedb</tt> i <tt>auto-apt update-local</tt>.
</sect>

<sect id="apt-file">Jak sprawdziæ, do którego pakietu nale¿y plik
<p>
Je¶li chcesz zainstalowaæ jaki¶ pakiet, ale nie wiesz jak siê on nazywa i nawet
wyszukiwanie za pomoc± programu <prgn>apt-cache</prgn> nie przynosi rezultatu,
ale znasz za to nazwê pliku tego programu lub innych plików nale¿±cych do
pakietu, to mo¿esz siê pos³u¿yæ programem <prgn>apt-file</prgn>, aby odszukaæ
nazwê tego pakietu. W tym celu wydaj polecenie:

<example>
$ apt-file search <var>nazwa_pliku</var>
</example>

Dzia³a ono jak komenda <tt>dpkg -S</tt>, z t± ró¿nic±, ¿e wy¶wietla równie¿
nazwy niezainstalowanych pakietów, które zawieraj± ten plik. Mo¿esz go równie¿
u¿yæ, aby dowiedzieæ siê, jakie pakiety zawieraj± brakuj±ce w czasie kompilacji
programu pliki nag³ówkowe. Do tego celu bardziej jednak nadaje siê program
<prgn>auto-apt</prgn>, który zosta³ opisany w sekcji <ref id="auto-apt">.
<p>
Mo¿esz tak¿e zobaczyæ jakie pliki wchodz± w sk³ad pakietu, wydaj±c polecenie

<example>
$ apt-file list <var>nazwa_pakietu</var>
</example>

Program <prgn>apt-file</prgn>, podobnie jak <prgn>auto-apt</prgn>, przechowuje
informacje o tym jakie pliki zawieraj± wszystkie pakiety w bazie danych, któr±
nale¿y co jaki¶ czas uaktualniaæ. Robi siê do za pomoc± komendy

<example>
# apt-file update
</example>

Domy¶lnie oba programy u¿ywaj± tej samej bazy danych. Wiêcej informacji na jej
temat znajdziesz w sekcji <ref id="auto-apt">.

</sect>

<sect id="apt-listchanges">Jak otrzymywaæ informacje o zmianach w pakietach
<p>
Ka¿dy zainstalowany pakiet zapisuje w swoim katalogu
(<tt>/usr/share/doc/nazwa_pakietu</tt>) plik o nazwie
<tt>changelog.Debian.gz</tt>, który zawiera listê zmian dokonanych w pakiecie
od jego ostatniej wersji. Mo¿esz czytaæ te pliki u¿ywaj±c na przyk³ad polecenia
<tt>zless</tt>, ale czasem nie jest wcale takie proste, zw³aszcza po
uaktualnieniu ca³ego systemu, szukaæ zmian dla ka¿dego zaktualizowanego
pakietu. 
<p>
Istnieje sposób automatyzacji tego zadania przy pomocy narzêdzia zwanego
<prgn>apt-listchanges</prgn>. Aby móc z niego korzystaæ musisz oczywi¶cie
zainstalowaæ pakiet <package>apt-listchanges</package>. Zostanie on
skonfigurowany przez Debconfa w trakcie instalacji. Odpowiedz na pytania tak,
jak chcesz.
<p>
Bardzo u¿yteczna jest opcja "Should apt-listchanges be automatically run by
apt? (Czy apt-listchanges powinien byæ automatycznie uruchamiany przez
APT-a?)", poniewa¿ pokazuje ona listê zmian w ka¿dym pakiecie, który bêdzie
instalowany przez APT-a w trakcie aktualizacji systemu i pozwala zapoznaæ siê
z nimi przed kontynuacj± procesu aktualizacji. Równie¿ opcja "Should
apt-listchanges prompt for confirmation after displaying changes? (Czy
apt-listchanges powinien zachêcaæ do potwierdzenia po wy¶wietleniu zmian?)"
jest u¿yteczna, gdy¿ pyta Ciê czy chcesz kontynuowaæ instalacjê po przeczytaniu
listy zmian. Je¶li odpowiesz, ¿e nie chcesz kontynuowaæ, to apt-listchanges
zwróci b³±d i APT przerwie proces instalacji.
<p>
Po zainstalowaniu pakietu apt-listchanges, gdy tylko pakiety bêd± ¶ci±gane
(lub pobierane z p³yty CD-ROM albo zamontowanego dysku) przez APT-a, to
poka¿e on listê zmian dokonanych w tych pakietach jeszcze przed ich instalacj±.
</sect>
</chapt>

<chapt id="sourcehandling">Praca z pakietami ¼ród³owymi
<sect id="source">Pobieranie pakietów ¼ród³owych
<p>
W ¶wiecie wolnego oprogramowania jest rzecz± powszechn± studiowaæ kod ¼ród³owy
programów, a nawet dokonywaæ w nim zmian, aby wyeliminowaæ b³êdy. Aby to
zrobiæ, musisz pobraæ ¼ród³o programu. APT dostarcza Ci ³atwego sposobu
uzyskiwania kodów ¼ród³owych wielu programów zawartych w dystrybucji,
w³±czaj±c w to wszystkie pliki potrzebne do stworzenia pakietu <tt>.deb</tt>
dla danego programu.
<p>
Innym powszechnym zastosowaniem ¼róde³ Debiana jest przystosowanie nowszej
wersji programu, pochodz±cej np. z niestabilnej dystrybucji, aby u¿yæ go
w wersji stabilnej. Zamiast pakietu stabilnego mo¿na skompilowaæ ¼ród³a i
wygenerowaæ pakiety <tt>.deb</tt> z zale¿no¶ciami przystosowanymi do pakietów
dostêpnych w tej dystrybucji.
<p>
Aby to osi±gn±æ, wpis ze s³owem <tt>deb-src</tt> na pocz±tku linii w Twoim
pliku <tt>/etc/apt/sources.list</tt> powinien wskazywaæ na archiwum
niestabilne. Oczywi¶cie powinien on byæ tak¿e w³±czony (tzn. odkomentowany).
Zobacz sekcjê <ref id="sources.list">, aby dowiedzieæ siê wiêcej szczegó³ów.
<p>
Aby pobraæ pakiet ¼ród³owy, u¿yjemy nastêpuj±cej komendy:

<example>
$ apt-get source pakiet
</example>

Komenda ta pobierze trzy pliki: <tt>.orig.tar.gz</tt>, <tt>.dsc</tt> i
<tt>.diff.gz</tt>. W przypadku pakietów tworzonych specjalnie dla Debiana nie
bêdzie pobierany ostatni plik, a pierwszy zwykle nie ma w nazwie s³owa
<tt>"orig"</tt>.
<p>
Plik <tt>.dsc</tt> jest u¿ywany przez program dpkg-source do rozpakowania
¼róde³ pakietu w katalogu <var>pakiet-wersja</var>. Wewn±trz ka¿dego pobranego
pakietu istnieje katalog <tt>debian/</tt>, zawieraj±cy pliki niezbêdne do
stworzenia pakietu <tt>.deb</tt>.
<p>
Aby automatycznie zbudowaæ pakiet w czasie pobierania jego ¼róde³, po prostu
dodaj do komendy opcjê <tt>-b</tt> tak, jak pokazano to poni¿ej:

<example>
$ apt-get -b source pakiet
</example>

Je¶li nie zdecydowa³e¶ siê tworzyæ pakietu <tt>.deb</tt> w czasie pobierania
jego ¼róde³, mo¿esz zrobiæ to pó¼niej za pomoc± polecenia:

<example>
$ dpkg-buildpackage -rfakeroot -uc -b
</example>

uruchomionego wewn±trz katalogu, który zosta³ utworzony dla pakietu po jego
pobraniu.
<p>
Istnieje ró¿nica pomiêdzy metod± <tt>source</tt> programu <prgn>apt-get</prgn>,
a jego innymi metodami. Metoda <tt>source</tt> mo¿e byæ u¿ywana przez zwyk³ych
u¿ytkowników, nie posiadaj±cych uprawnieñ roota. Pliki s± pobierane do katalogu
z którego wywo³ano komendê <tt>apt-get source pakiet</tt>.
</sect>

<sect id="build-dep">Pakiety potrzebne do kompilowania pakietów ¼ród³owych
<p>
Zwykle specyficzne pliki nag³ówkowe i biblioteki wspó³dzielone musz± byæ
obecne, aby mo¿na by³o skompilowaæ pakiet ¼ród³owy. Wszystkie pakiety ¼ród³owe
maj± pole w plikach kontroluj±cych, które nazywa siê 'Build-Depends:'. Pole te
wskazuje, które dodatkowe pakiety s± niezbêdne, aby mo¿na by³o zbudowaæ pakiet
z jego ¼róde³.
<p>
APT jest wyposa¿ony w ³atwy sposób pobierania tych pakietów. Po prostu uruchom
komendê <tt>apt-get build-dep pakiet</tt>, gdzie `pakiet' jest nazw± pakietu,
który zamierzasz zbudowaæ. Na przyk³ad:

<example>
[root]@[/] # apt-get build-dep gmc
Reading Package Lists... Done
Building Dependency Tree... Done
The following NEW packages will be installed:
  comerr-dev e2fslibs-dev gdk-imlib-dev imlib-progs libgnome-dev libgnorba-dev
  libgpmg1-dev 
0 packages upgraded, 7 newly installed, 0 to remove and 1  not upgraded.
Need to get 1069kB of archives. After unpacking 3514kB will be used.
Do you want to continue? [Y/n]
</example>

Pakiety, które zostan± zainstalowane s± pakietami potrzebnymi do prawid³wego
zbudowania pakietu <package>gmc</package>. Bardzo wa¿n± rzecz± do zauwa¿enia
jest fakt, ¿e komenda nie szuka pakietu ze ¼ród³ami programu, który ma byæ
skompilowany. Dlatego musisz wcze¶niej uruchomiæ polecenie <tt>apt-get
source</tt>, aby osobno je pobraæ.
</sect>
</chapt>

<chapt id="distros">Które dystrybucje wspieraj± APT-a?
<p>
Poni¿ej zamieszczono nazwy dystrybucji, które u¿ywaj± APT-a:
<p>
Debian GNU/Linux (<url id="http://www.debian.org"
name="http://www.debian.org">) - to dla tej dystrybucji zosta³ stworzony APT
<p>
Conectiva (<url id="http://www.conectiva.com.br"
name="http://www.conectiva.com.br">) - to by³a pierwsza dystrybucja, która
zaadoptowa³a APT-a do pracy z pakietami .rpm
<p>
Mandrake (<url id="http://www.mandrake.com" name="http://www.mandrake.com">)
<p>
PLD (<url id="http://www.pld.org.pl" name="http://www.pld.org.pl">)
<p>
Vine (<url id="http://www.vinelinux.org" name="http://www.vinelinux.org">)
<p>
APT4RPM (<url id="http://apt4rpm.sf.net" name="http://apt4rpm.sf.net">)
<p>
Alt Linux (<url id="http://www.altlinux.ru/" name="http://www.altlinux.ru/">)
<p>
Red Hat (<url id="http://www.redhat.com/" name="http://www.redhat.com/">)
<p>
Sun Solaris (<url id="http://www.sun.com/" name="http://www.sun.com/">)
<p>
SuSE (<url id="http://www.suse.de/" name="http://www.suse.de/">)
<p>
Yellow Dog Linux (<url id="http://www.yellowdoglinux.com/"
name="http://www.yellowdoglinux.com/">)
</chapt>

<chapt id="erros">Jak radziæ sobie z b³êdami
<sect id="erros-comuns">Najczêstsze b³êdy
<p>
B³êdy zawsze bêd± siê zdarza³y, wiele z nich jest spowodowana przez
u¿ytkowników, którzy nie zachowuj± uwagi w czasie pracy z APT-em. Poni¿ej
zamie¶ci³em najczê¶ciej zg³aszane b³êdy oraz informacje jak sobie z nimi
radziæ.
<p>
Je¶li próbujesz uruchomiæ <tt>apt-get install package</tt> i zobaczysz 
komunikat jak poni¿ej:

<example>
Reading Package Lists... Done
Building Dependency Tree... Done
W: Couldn't stat source package list 'http://people.debian.org unstable/ Packages' (/var/state/apt/lists/people.debian.org_%7ekov_debian_unstable_Packages) - stat (2 Arquivo ou diretório não encontrado)
W: You may want to run apt-get update to correct these missing files
E: Couldn't find package penguineyes
</example>

to znaczy, ¿e zapomnia³e¶ uruchomiæ <tt>apt-get update</tt> po ostatnich
zmianach, których dokona³e¶ w pliku <tt>/etc/apt/sources.list</tt>.
<p>
Je¶li b³±d wygl±da nastêpuj±co:

<example>
E: Could not open lock file /var/lib/dpkg/lock - open (13 Permission denied)
E: Unable to lock the administration directory (/var/lib/dpkg/), are you root?
</example>

gdy próbujesz u¿yæ której¶ metody polecenia <prgn>apt-get</prgn> z wyj±tkiem
metody <tt>source</tt>, to znaczy, ¿e próbujesz j± uruchomiæ jako zwyk³y
u¿ytkownik i ¿e nie masz niezbêdnych uprawnieñ administratora systemu.
<p>
Ten b³±d jest podobny do tego powy¿ej i ma miejsce, gdy uruchamiasz w tym samym
czasie dwie kopie programu <prgn>apt-get</prgn> lub gdy próbujesz uruchomiæ
<prgn>apt-get</prgn>, gdy aktywny jest proces programu <prgn>dpkg</prgn>.
Jedyn± metod±, która mo¿e byæ równocze¶nie u¿yta z inn± jest metoda
<tt>source</tt>.
<p>
Je¶li instalacja zostanie przerwana w trakcie trwania i nie jest ju¿ mo¿liwa
ani instalacja, ani usuniêcie pakietów, spróbuj wtedy u¿yæ tych dwóch komend:

<example>
# apt-get -f install
# dpkg --configure -a
</example>

I spróbuj jeszcze raz. Mo¿e byæ niezbêdne uruchomienie drugiej z komend wiêcej
ni¿ jeden raz. To jest wa¿na uwaga dla tych, którzy u¿ywaj± wersji
`niestabilnej'.
</sect>

<sect id="help">Gdzie mogê znale¼æ pomoc
<p>
Je¶li popad³e¶ ju¿ w zw±tpienie, zajrzyj do obszernej dokumentacji na temat
systemu pakietów Debiana. Opcja <tt>--help</tt> programów i ich podrêczniki
mog± byæ ogromnie pomocne dla Ciebie. Wiele informacji mo¿na te¿ znale¼æ w
dokumentacji zawartej w katalogu <tt>/usr/share/doc</tt>, np. w katalogu
<tt>/usr/share/doc/apt</tt>.
<p>
Gdy nawet ta dokumentacja nie zdo³a Ci pomóc, spróbuj poszukaæ odpowiedzi
na listach dyskusyjnych Debiana. Wiêcej informacji na temat poszczególnych
list u¿ytkowników mo¿na znale¼æ na stronie Debian:
<url id="http://www.debian.org" name="http://www.debian.org">.
<p>
Pamiêtaj, ¿e listy te i zasoby powinny byæ u¿ywane tylko przez u¿ytkowników
Debiana; u¿ytkownicy innych systemów znajd± lepsze wsparcie w zasobach ich
w³asnej dystrybucji.
</sect>
</chapt>

<chapt id="agradecimentos">Podziêkowania
<p>
Wielkie podziêkowania sk³adam moim wspania³ym przyjacio³om z projektu Debian-BR
i samego projektu Debian, tym którzy s± sta³± pomoc± dla mnie, zawsze daj± mi
si³ê do kontynuowania pracy dla ludzkiego po¿ytku i pomagaj± mi w moim celu
jakim jest ratowanie ¶wiata. :)
<p>
Chcia³bym tak¿e podziêkowaæ CIPSGA za olbrzymi± pomoc udzielon± naszemu
projektowi i wszystkim wolnym projektom, które zrodzi³y siê z wielkich idei.
<p>
Specjalne podziêkowania nale¿± siê nastêpuj±cym osobom: 
<p>
Yooseong Yang &lt;yooseong@debian.org&gt;
<p>
Michael Bramer &lt;grisu@debian.org&gt;
<p>
Bryan Stillwell &lt;bryan@bokeoa.com&gt;
<p>
Pawel Tecza  &lt;pawel.tecza@poczta.fm&gt;
<p>
Hugo Mora &lt;h.mora@melix.com.mx&gt;
<p>
Luca Monducci &lt;luca.mo@tiscali.it&gt;
<p>
Tomohiro KUBOTA &lt;kubota@debian.org&gt;
<p>
Pablo Lorenzzoni &lt;spectra@debian.org&gt;
<p>
Steve Langasek &lt;vorlon@netexpress.net&gt;
<p>
Arnaldo Carvalho de Melo &lt;acme@conectiva.com.br&gt;
<p>
Erik Rossen &lt;rossen@freesurf.ch&gt;
<p>
Ross Boylan &lt;RossBoylan@stanfordalumni.org&gt;
<p>
Matt Kraai &lt;kraai@debian.org&gt;
<p>
Aaron M. Ucko &lt;ucko@debian.org&gt;
<p>
Jon Aslund &lt;d98-jas@nada.kth.se&gt;
</chapt>

<chapt id="novas">Nowe wersje tego podrêcznika
<p>
Ten podrêcznik zosta³ stworzony w ramach projektu
<url id="http://www.debian-br.org" name="Debian-BR"> z zadaniem
niesienia pomocy w codziennym u¿ywaniu Debiana.
<p>
Nowe wersje tego dokumentu bêd± dostêpne na stronie Projektu Dokumentacji
Debiana (Debian Documentation Project) pod adresem
<url id="http://www.debian.org/doc/ddp" name="http://www.debian.org/doc/ddp">.
<p>
Komentarze i krytyczne uwagi mog± byæ wysy³ane bezpo¶rednio do mnie na adres 
<email>kov@debian.org</email>.
</chapt>

</book>

</debiandoc>
